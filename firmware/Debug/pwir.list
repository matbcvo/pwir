
pwir.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000091b8  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08009390  08009390  00019390  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080093e8  080093e8  00020184  2**0
                  CONTENTS
  4 .ARM          00000000  080093e8  080093e8  00020184  2**0
                  CONTENTS
  5 .preinit_array 00000000  080093e8  080093e8  00020184  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080093e8  080093e8  000193e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080093ec  080093ec  000193ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000184  20000000  080093f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001440  20000184  08009574  00020184  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200015c4  08009574  000215c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020184  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a314  00000000  00000000  000201b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000033e7  00000000  00000000  0003a4c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001380  00000000  00000000  0003d8b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001208  00000000  00000000  0003ec30  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000205b2  00000000  00000000  0003fe38  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00011b55  00000000  00000000  000603ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c41f7  00000000  00000000  00071f3f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00136136  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005148  00000000  00000000  001361b4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000184 	.word	0x20000184
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08009378 	.word	0x08009378

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000188 	.word	0x20000188
 8000214:	08009378 	.word	0x08009378

08000218 <CDC_On_Receive>:
  .delimiter = 0
}; // (4) Instance of received data.

volatile uint8_t isCommandReceived = 0; // (5) Boolean (0/1) variable to signify that data has been received. Variable is marked volatile to prevent the compiler from removing it during optimisation.

void CDC_On_Receive(uint8_t* buffer, uint32_t* length) { // (6) Define the function that is called when data is received. It is usually preferable to keep interrupt handlers small and fast to avoid blocking other code from executing. Only data copying and setting isCommandReceived to 1 is done in the handler. Rest is handled in the main while loop.
 8000218:	b580      	push	{r7, lr}
 800021a:	b082      	sub	sp, #8
 800021c:	af00      	add	r7, sp, #0
 800021e:	6078      	str	r0, [r7, #4]
 8000220:	6039      	str	r1, [r7, #0]
  //HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
  if (*length == sizeof(Command)) { // (7) Check if received data the has same length as Command struct.
 8000222:	683b      	ldr	r3, [r7, #0]
 8000224:	681b      	ldr	r3, [r3, #0]
 8000226:	2b0a      	cmp	r3, #10
 8000228:	d10d      	bne.n	8000246 <CDC_On_Receive+0x2e>
    memcpy(&command, buffer, sizeof(Command)); // (8) Copy received data to command instance.
 800022a:	220a      	movs	r2, #10
 800022c:	6879      	ldr	r1, [r7, #4]
 800022e:	4808      	ldr	r0, [pc, #32]	; (8000250 <CDC_On_Receive+0x38>)
 8000230:	f009 f88e 	bl	8009350 <memcpy>

    if (command.delimiter == 0xAAAA) { // (9) Check the delimiter as a validation of received data.
 8000234:	4b06      	ldr	r3, [pc, #24]	; (8000250 <CDC_On_Receive+0x38>)
 8000236:	891b      	ldrh	r3, [r3, #8]
 8000238:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800023c:	4293      	cmp	r3, r2
 800023e:	d102      	bne.n	8000246 <CDC_On_Receive+0x2e>
      isCommandReceived = 1;
 8000240:	4b04      	ldr	r3, [pc, #16]	; (8000254 <CDC_On_Receive+0x3c>)
 8000242:	2201      	movs	r2, #1
 8000244:	701a      	strb	r2, [r3, #0]
    }
  }
}
 8000246:	bf00      	nop
 8000248:	3708      	adds	r7, #8
 800024a:	46bd      	mov	sp, r7
 800024c:	bd80      	pop	{r7, pc}
 800024e:	bf00      	nop
 8000250:	200001a0 	.word	0x200001a0
 8000254:	200001aa 	.word	0x200001aa

08000258 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000258:	b580      	push	{r7, lr}
 800025a:	b082      	sub	sp, #8
 800025c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  // (1) Define an instance of Feedback for sending data.
  Feedback feedback = {
 800025e:	2300      	movs	r3, #0
 8000260:	803b      	strh	r3, [r7, #0]
 8000262:	2300      	movs	r3, #0
 8000264:	807b      	strh	r3, [r7, #2]
 8000266:	2300      	movs	r3, #0
 8000268:	80bb      	strh	r3, [r7, #4]
 800026a:	f64a 23aa 	movw	r3, #43690	; 0xaaaa
 800026e:	80fb      	strh	r3, [r7, #6]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000270:	f000 ffab 	bl	80011ca <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000274:	f000 f8b8 	bl	80003e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000278:	f000 fcc8 	bl	8000c0c <MX_GPIO_Init>
  MX_TIM1_Init();
 800027c:	f000 f91c 	bl	80004b8 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000280:	f000 f98a 	bl	8000598 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000284:	f000 fa08 	bl	8000698 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000288:	f000 fa5c 	bl	8000744 <MX_TIM4_Init>
  MX_TIM8_Init();
 800028c:	f000 fab0 	bl	80007f0 <MX_TIM8_Init>
  MX_TIM16_Init();
 8000290:	f000 fbc8 	bl	8000a24 <MX_TIM16_Init>
  MX_TIM17_Init();
 8000294:	f000 fc40 	bl	8000b18 <MX_TIM17_Init>
  MX_USB_Device_Init();
 8000298:	f008 fb3e 	bl	8008918 <MX_USB_Device_Init>
  MX_TIM15_Init();
 800029c:	f000 fb3c 	bl	8000918 <MX_TIM15_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_1 | TIM_CHANNEL_2); // Encoder 1
 80002a0:	2104      	movs	r1, #4
 80002a2:	4841      	ldr	r0, [pc, #260]	; (80003a8 <main+0x150>)
 80002a4:	f004 f822 	bl	80042ec <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_1 | TIM_CHANNEL_2); // Encoder 2
 80002a8:	2104      	movs	r1, #4
 80002aa:	4840      	ldr	r0, [pc, #256]	; (80003ac <main+0x154>)
 80002ac:	f004 f81e 	bl	80042ec <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_1 | TIM_CHANNEL_2); // Encoder 3
 80002b0:	2104      	movs	r1, #4
 80002b2:	483f      	ldr	r0, [pc, #252]	; (80003b0 <main+0x158>)
 80002b4:	f004 f81a 	bl	80042ec <HAL_TIM_Encoder_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1); // Motor PWM for draiver 1
 80002b8:	2100      	movs	r1, #0
 80002ba:	483e      	ldr	r0, [pc, #248]	; (80003b4 <main+0x15c>)
 80002bc:	f003 fe70 	bl	8003fa0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2); // Motor PWM for draiver 1
 80002c0:	2104      	movs	r1, #4
 80002c2:	483c      	ldr	r0, [pc, #240]	; (80003b4 <main+0x15c>)
 80002c4:	f003 fe6c 	bl	8003fa0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3); // Motor PWM for draiver 2
 80002c8:	2108      	movs	r1, #8
 80002ca:	483a      	ldr	r0, [pc, #232]	; (80003b4 <main+0x15c>)
 80002cc:	f003 fe68 	bl	8003fa0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4); // Motor PWM for draiver 2
 80002d0:	210c      	movs	r1, #12
 80002d2:	4838      	ldr	r0, [pc, #224]	; (80003b4 <main+0x15c>)
 80002d4:	f003 fe64 	bl	8003fa0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1); // Motor PWM for draiver 3
 80002d8:	2100      	movs	r1, #0
 80002da:	4837      	ldr	r0, [pc, #220]	; (80003b8 <main+0x160>)
 80002dc:	f003 fe60 	bl	8003fa0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim17, TIM_CHANNEL_1); // Motor PWM for draiver 3
 80002e0:	2100      	movs	r1, #0
 80002e2:	4836      	ldr	r0, [pc, #216]	; (80003bc <main+0x164>)
 80002e4:	f003 fe5c 	bl	8003fa0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1); // Thrower PWM
 80002e8:	2100      	movs	r1, #0
 80002ea:	4835      	ldr	r0, [pc, #212]	; (80003c0 <main+0x168>)
 80002ec:	f003 fe58 	bl	8003fa0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_2); // Thrower Angle PWM
 80002f0:	2104      	movs	r1, #4
 80002f2:	4834      	ldr	r0, [pc, #208]	; (80003c4 <main+0x16c>)
 80002f4:	f003 fe54 	bl	8003fa0 <HAL_TIM_PWM_Start>
    /* USER CODE BEGIN 3 */
	  //HAL_Delay(1000);
	  // Send command: 00 00 00 00 00 00 00 00 AA AA
	  //               01
	  //               02
	if (isCommandReceived) { // (2) Only return data when something has been received.
 80002f8:	4b33      	ldr	r3, [pc, #204]	; (80003c8 <main+0x170>)
 80002fa:	781b      	ldrb	r3, [r3, #0]
 80002fc:	b2db      	uxtb	r3, r3
 80002fe:	2b00      	cmp	r3, #0
 8000300:	d0fa      	beq.n	80002f8 <main+0xa0>
		isCommandReceived = 0;
 8000302:	4b31      	ldr	r3, [pc, #196]	; (80003c8 <main+0x170>)
 8000304:	2200      	movs	r2, #0
 8000306:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin); // (3) Toggle LED to indicate that data has been received.
 8000308:	f44f 7180 	mov.w	r1, #256	; 0x100
 800030c:	482f      	ldr	r0, [pc, #188]	; (80003cc <main+0x174>)
 800030e:	f001 fa77 	bl	8001800 <HAL_GPIO_TogglePin>
		// (4) Update feedback with current motor speeds.
		/*feedback.speed1 = motor1Control.speed;
		feedback.speed2 = motor2Control.speed;
		feedback.speed3 = motor3Control.speed;*/
		feedback.speed1 = (int16_t)TIM1->CNT;
 8000312:	4b2f      	ldr	r3, [pc, #188]	; (80003d0 <main+0x178>)
 8000314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000316:	b21b      	sxth	r3, r3
 8000318:	803b      	strh	r3, [r7, #0]
		feedback.speed2 = (int16_t)TIM3->CNT;
 800031a:	4b2e      	ldr	r3, [pc, #184]	; (80003d4 <main+0x17c>)
 800031c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800031e:	b21b      	sxth	r3, r3
 8000320:	807b      	strh	r3, [r7, #2]
		feedback.speed3 = (int16_t)TIM4->CNT;
 8000322:	4b2d      	ldr	r3, [pc, #180]	; (80003d8 <main+0x180>)
 8000324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000326:	b21b      	sxth	r3, r3
 8000328:	80bb      	strh	r3, [r7, #4]
		if (command.speed1 == 1) {
 800032a:	4b2c      	ldr	r3, [pc, #176]	; (80003dc <main+0x184>)
 800032c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000330:	2b01      	cmp	r3, #1
 8000332:	d10b      	bne.n	800034c <main+0xf4>
			TIM2->CCR1 = TIM2->ARR / 2; // esimene draiver
 8000334:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000338:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800033a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800033e:	085b      	lsrs	r3, r3, #1
 8000340:	6353      	str	r3, [r2, #52]	; 0x34
			TIM2->CCR2 = 0; // esimene draiver
 8000342:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000346:	2200      	movs	r2, #0
 8000348:	639a      	str	r2, [r3, #56]	; 0x38
 800034a:	e018      	b.n	800037e <main+0x126>
		}
		else if (command.speed1 == 2) {
 800034c:	4b23      	ldr	r3, [pc, #140]	; (80003dc <main+0x184>)
 800034e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000352:	2b02      	cmp	r3, #2
 8000354:	d10b      	bne.n	800036e <main+0x116>
			TIM2->CCR1 = 0; // esimene draiver
 8000356:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800035a:	2200      	movs	r2, #0
 800035c:	635a      	str	r2, [r3, #52]	; 0x34
			TIM2->CCR2 = TIM2->ARR / 2; // esimene draiver
 800035e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000364:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000368:	085b      	lsrs	r3, r3, #1
 800036a:	6393      	str	r3, [r2, #56]	; 0x38
 800036c:	e007      	b.n	800037e <main+0x126>
		}
		else {
			TIM2->CCR1 = 0; // esimene draiver
 800036e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000372:	2200      	movs	r2, #0
 8000374:	635a      	str	r2, [r3, #52]	; 0x34
			TIM2->CCR2 = 0; // esimene draiver
 8000376:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800037a:	2200      	movs	r2, #0
 800037c:	639a      	str	r2, [r3, #56]	; 0x38
		}
		TIM2->CCR3 = 0; // teine draiver
 800037e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000382:	2200      	movs	r2, #0
 8000384:	63da      	str	r2, [r3, #60]	; 0x3c
		TIM2->CCR4 = 0; // teine draiver
 8000386:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800038a:	2200      	movs	r2, #0
 800038c:	641a      	str	r2, [r3, #64]	; 0x40
		TIM16->CCR1 = 0; // kolmas draiver
 800038e:	4b14      	ldr	r3, [pc, #80]	; (80003e0 <main+0x188>)
 8000390:	2200      	movs	r2, #0
 8000392:	635a      	str	r2, [r3, #52]	; 0x34
		TIM17->CCR1 = 0; // kolmas draiver
 8000394:	4b13      	ldr	r3, [pc, #76]	; (80003e4 <main+0x18c>)
 8000396:	2200      	movs	r2, #0
 8000398:	635a      	str	r2, [r3, #52]	; 0x34
		CDC_Transmit_FS(&feedback, sizeof(feedback)); // (5) Send data over USB.
 800039a:	463b      	mov	r3, r7
 800039c:	2108      	movs	r1, #8
 800039e:	4618      	mov	r0, r3
 80003a0:	f008 fb7c 	bl	8008a9c <CDC_Transmit_FS>
	if (isCommandReceived) { // (2) Only return data when something has been received.
 80003a4:	e7a8      	b.n	80002f8 <main+0xa0>
 80003a6:	bf00      	nop
 80003a8:	20000548 	.word	0x20000548
 80003ac:	200004fc 	.word	0x200004fc
 80003b0:	20000418 	.word	0x20000418
 80003b4:	20000594 	.word	0x20000594
 80003b8:	200005e0 	.word	0x200005e0
 80003bc:	200004b0 	.word	0x200004b0
 80003c0:	200003cc 	.word	0x200003cc
 80003c4:	20000464 	.word	0x20000464
 80003c8:	200001aa 	.word	0x200001aa
 80003cc:	48000400 	.word	0x48000400
 80003d0:	40012c00 	.word	0x40012c00
 80003d4:	40000400 	.word	0x40000400
 80003d8:	40000800 	.word	0x40000800
 80003dc:	200001a0 	.word	0x200001a0
 80003e0:	40014400 	.word	0x40014400
 80003e4:	40014800 	.word	0x40014800

080003e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	b0a4      	sub	sp, #144	; 0x90
 80003ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003ee:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80003f2:	2238      	movs	r2, #56	; 0x38
 80003f4:	2100      	movs	r1, #0
 80003f6:	4618      	mov	r0, r3
 80003f8:	f008 ffb5 	bl	8009366 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003fc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000400:	2200      	movs	r2, #0
 8000402:	601a      	str	r2, [r3, #0]
 8000404:	605a      	str	r2, [r3, #4]
 8000406:	609a      	str	r2, [r3, #8]
 8000408:	60da      	str	r2, [r3, #12]
 800040a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800040c:	463b      	mov	r3, r7
 800040e:	2244      	movs	r2, #68	; 0x44
 8000410:	2100      	movs	r1, #0
 8000412:	4618      	mov	r0, r3
 8000414:	f008 ffa7 	bl	8009366 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000418:	2000      	movs	r0, #0
 800041a:	f002 fd73 	bl	8002f04 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 800041e:	2322      	movs	r3, #34	; 0x22
 8000420:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000422:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000426:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000428:	2340      	movs	r3, #64	; 0x40
 800042a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800042c:	2301      	movs	r3, #1
 800042e:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000430:	2302      	movs	r3, #2
 8000432:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000434:	2302      	movs	r3, #2
 8000436:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000438:	2301      	movs	r3, #1
 800043a:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 20;
 800043c:	2314      	movs	r3, #20
 800043e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000442:	2302      	movs	r3, #2
 8000444:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 8000448:	2304      	movs	r3, #4
 800044a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800044e:	2302      	movs	r3, #2
 8000450:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000454:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000458:	4618      	mov	r0, r3
 800045a:	f002 fe07 	bl	800306c <HAL_RCC_OscConfig>
 800045e:	4603      	mov	r3, r0
 8000460:	2b00      	cmp	r3, #0
 8000462:	d001      	beq.n	8000468 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000464:	f000 fc12 	bl	8000c8c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000468:	230f      	movs	r3, #15
 800046a:	647b      	str	r3, [r7, #68]	; 0x44
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800046c:	2303      	movs	r3, #3
 800046e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000470:	2300      	movs	r3, #0
 8000472:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000474:	2300      	movs	r3, #0
 8000476:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000478:	2300      	movs	r3, #0
 800047a:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800047c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000480:	2104      	movs	r1, #4
 8000482:	4618      	mov	r0, r3
 8000484:	f003 f90a 	bl	800369c <HAL_RCC_ClockConfig>
 8000488:	4603      	mov	r3, r0
 800048a:	2b00      	cmp	r3, #0
 800048c:	d001      	beq.n	8000492 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800048e:	f000 fbfd 	bl	8000c8c <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000492:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000496:	603b      	str	r3, [r7, #0]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8000498:	2300      	movs	r3, #0
 800049a:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800049c:	463b      	mov	r3, r7
 800049e:	4618      	mov	r0, r3
 80004a0:	f003 fae0 	bl	8003a64 <HAL_RCCEx_PeriphCLKConfig>
 80004a4:	4603      	mov	r3, r0
 80004a6:	2b00      	cmp	r3, #0
 80004a8:	d001      	beq.n	80004ae <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80004aa:	f000 fbef 	bl	8000c8c <Error_Handler>
  }
}
 80004ae:	bf00      	nop
 80004b0:	3790      	adds	r7, #144	; 0x90
 80004b2:	46bd      	mov	sp, r7
 80004b4:	bd80      	pop	{r7, pc}
	...

080004b8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b09a      	sub	sp, #104	; 0x68
 80004bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80004be:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80004c2:	2224      	movs	r2, #36	; 0x24
 80004c4:	2100      	movs	r1, #0
 80004c6:	4618      	mov	r0, r3
 80004c8:	f008 ff4d 	bl	8009366 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004cc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80004d0:	2200      	movs	r2, #0
 80004d2:	601a      	str	r2, [r3, #0]
 80004d4:	605a      	str	r2, [r3, #4]
 80004d6:	609a      	str	r2, [r3, #8]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80004d8:	1d3b      	adds	r3, r7, #4
 80004da:	2234      	movs	r2, #52	; 0x34
 80004dc:	2100      	movs	r1, #0
 80004de:	4618      	mov	r0, r3
 80004e0:	f008 ff41 	bl	8009366 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80004e4:	4b2a      	ldr	r3, [pc, #168]	; (8000590 <MX_TIM1_Init+0xd8>)
 80004e6:	4a2b      	ldr	r2, [pc, #172]	; (8000594 <MX_TIM1_Init+0xdc>)
 80004e8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80004ea:	4b29      	ldr	r3, [pc, #164]	; (8000590 <MX_TIM1_Init+0xd8>)
 80004ec:	2200      	movs	r2, #0
 80004ee:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004f0:	4b27      	ldr	r3, [pc, #156]	; (8000590 <MX_TIM1_Init+0xd8>)
 80004f2:	2200      	movs	r2, #0
 80004f4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80004f6:	4b26      	ldr	r3, [pc, #152]	; (8000590 <MX_TIM1_Init+0xd8>)
 80004f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80004fc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004fe:	4b24      	ldr	r3, [pc, #144]	; (8000590 <MX_TIM1_Init+0xd8>)
 8000500:	2200      	movs	r2, #0
 8000502:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000504:	4b22      	ldr	r3, [pc, #136]	; (8000590 <MX_TIM1_Init+0xd8>)
 8000506:	2200      	movs	r2, #0
 8000508:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800050a:	4b21      	ldr	r3, [pc, #132]	; (8000590 <MX_TIM1_Init+0xd8>)
 800050c:	2200      	movs	r2, #0
 800050e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000510:	2301      	movs	r3, #1
 8000512:	647b      	str	r3, [r7, #68]	; 0x44
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000514:	2300      	movs	r3, #0
 8000516:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000518:	2301      	movs	r3, #1
 800051a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800051c:	2300      	movs	r3, #0
 800051e:	653b      	str	r3, [r7, #80]	; 0x50
  sConfig.IC1Filter = 0;
 8000520:	2300      	movs	r3, #0
 8000522:	657b      	str	r3, [r7, #84]	; 0x54
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000524:	2300      	movs	r3, #0
 8000526:	65bb      	str	r3, [r7, #88]	; 0x58
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000528:	2301      	movs	r3, #1
 800052a:	65fb      	str	r3, [r7, #92]	; 0x5c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800052c:	2300      	movs	r3, #0
 800052e:	663b      	str	r3, [r7, #96]	; 0x60
  sConfig.IC2Filter = 0;
 8000530:	2300      	movs	r3, #0
 8000532:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8000534:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000538:	4619      	mov	r1, r3
 800053a:	4815      	ldr	r0, [pc, #84]	; (8000590 <MX_TIM1_Init+0xd8>)
 800053c:	f003 fe30 	bl	80041a0 <HAL_TIM_Encoder_Init>
 8000540:	4603      	mov	r3, r0
 8000542:	2b00      	cmp	r3, #0
 8000544:	d001      	beq.n	800054a <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8000546:	f000 fba1 	bl	8000c8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800054a:	2300      	movs	r3, #0
 800054c:	63bb      	str	r3, [r7, #56]	; 0x38
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800054e:	2300      	movs	r3, #0
 8000550:	63fb      	str	r3, [r7, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000552:	2300      	movs	r3, #0
 8000554:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000556:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800055a:	4619      	mov	r1, r3
 800055c:	480c      	ldr	r0, [pc, #48]	; (8000590 <MX_TIM1_Init+0xd8>)
 800055e:	f004 fc0f 	bl	8004d80 <HAL_TIMEx_MasterConfigSynchronization>
 8000562:	4603      	mov	r3, r0
 8000564:	2b00      	cmp	r3, #0
 8000566:	d001      	beq.n	800056c <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 8000568:	f000 fb90 	bl	8000c8c <Error_Handler>
  }
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800056c:	2300      	movs	r3, #0
 800056e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000570:	2300      	movs	r3, #0
 8000572:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000574:	1d3b      	adds	r3, r7, #4
 8000576:	4619      	mov	r1, r3
 8000578:	4805      	ldr	r0, [pc, #20]	; (8000590 <MX_TIM1_Init+0xd8>)
 800057a:	f004 fc83 	bl	8004e84 <HAL_TIMEx_ConfigBreakDeadTime>
 800057e:	4603      	mov	r3, r0
 8000580:	2b00      	cmp	r3, #0
 8000582:	d001      	beq.n	8000588 <MX_TIM1_Init+0xd0>
  {
    Error_Handler();
 8000584:	f000 fb82 	bl	8000c8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000588:	bf00      	nop
 800058a:	3768      	adds	r7, #104	; 0x68
 800058c:	46bd      	mov	sp, r7
 800058e:	bd80      	pop	{r7, pc}
 8000590:	20000548 	.word	0x20000548
 8000594:	40012c00 	.word	0x40012c00

08000598 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b08a      	sub	sp, #40	; 0x28
 800059c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800059e:	f107 031c 	add.w	r3, r7, #28
 80005a2:	2200      	movs	r2, #0
 80005a4:	601a      	str	r2, [r3, #0]
 80005a6:	605a      	str	r2, [r3, #4]
 80005a8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80005aa:	463b      	mov	r3, r7
 80005ac:	2200      	movs	r2, #0
 80005ae:	601a      	str	r2, [r3, #0]
 80005b0:	605a      	str	r2, [r3, #4]
 80005b2:	609a      	str	r2, [r3, #8]
 80005b4:	60da      	str	r2, [r3, #12]
 80005b6:	611a      	str	r2, [r3, #16]
 80005b8:	615a      	str	r2, [r3, #20]
 80005ba:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80005bc:	4b35      	ldr	r3, [pc, #212]	; (8000694 <MX_TIM2_Init+0xfc>)
 80005be:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80005c2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80005c4:	4b33      	ldr	r3, [pc, #204]	; (8000694 <MX_TIM2_Init+0xfc>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005ca:	4b32      	ldr	r3, [pc, #200]	; (8000694 <MX_TIM2_Init+0xfc>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80005d0:	4b30      	ldr	r3, [pc, #192]	; (8000694 <MX_TIM2_Init+0xfc>)
 80005d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80005d6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005d8:	4b2e      	ldr	r3, [pc, #184]	; (8000694 <MX_TIM2_Init+0xfc>)
 80005da:	2200      	movs	r2, #0
 80005dc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005de:	4b2d      	ldr	r3, [pc, #180]	; (8000694 <MX_TIM2_Init+0xfc>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80005e4:	482b      	ldr	r0, [pc, #172]	; (8000694 <MX_TIM2_Init+0xfc>)
 80005e6:	f003 fc84 	bl	8003ef2 <HAL_TIM_PWM_Init>
 80005ea:	4603      	mov	r3, r0
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d001      	beq.n	80005f4 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 80005f0:	f000 fb4c 	bl	8000c8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005f4:	2300      	movs	r3, #0
 80005f6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005f8:	2300      	movs	r3, #0
 80005fa:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80005fc:	f107 031c 	add.w	r3, r7, #28
 8000600:	4619      	mov	r1, r3
 8000602:	4824      	ldr	r0, [pc, #144]	; (8000694 <MX_TIM2_Init+0xfc>)
 8000604:	f004 fbbc 	bl	8004d80 <HAL_TIMEx_MasterConfigSynchronization>
 8000608:	4603      	mov	r3, r0
 800060a:	2b00      	cmp	r3, #0
 800060c:	d001      	beq.n	8000612 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 800060e:	f000 fb3d 	bl	8000c8c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000612:	2360      	movs	r3, #96	; 0x60
 8000614:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000616:	2300      	movs	r3, #0
 8000618:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800061a:	2300      	movs	r3, #0
 800061c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800061e:	2300      	movs	r3, #0
 8000620:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000622:	463b      	mov	r3, r7
 8000624:	2200      	movs	r2, #0
 8000626:	4619      	mov	r1, r3
 8000628:	481a      	ldr	r0, [pc, #104]	; (8000694 <MX_TIM2_Init+0xfc>)
 800062a:	f003 feed 	bl	8004408 <HAL_TIM_PWM_ConfigChannel>
 800062e:	4603      	mov	r3, r0
 8000630:	2b00      	cmp	r3, #0
 8000632:	d001      	beq.n	8000638 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8000634:	f000 fb2a 	bl	8000c8c <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8000638:	2300      	movs	r3, #0
 800063a:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800063c:	463b      	mov	r3, r7
 800063e:	2204      	movs	r2, #4
 8000640:	4619      	mov	r1, r3
 8000642:	4814      	ldr	r0, [pc, #80]	; (8000694 <MX_TIM2_Init+0xfc>)
 8000644:	f003 fee0 	bl	8004408 <HAL_TIM_PWM_ConfigChannel>
 8000648:	4603      	mov	r3, r0
 800064a:	2b00      	cmp	r3, #0
 800064c:	d001      	beq.n	8000652 <MX_TIM2_Init+0xba>
  {
    Error_Handler();
 800064e:	f000 fb1d 	bl	8000c8c <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8000652:	2300      	movs	r3, #0
 8000654:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000656:	463b      	mov	r3, r7
 8000658:	2208      	movs	r2, #8
 800065a:	4619      	mov	r1, r3
 800065c:	480d      	ldr	r0, [pc, #52]	; (8000694 <MX_TIM2_Init+0xfc>)
 800065e:	f003 fed3 	bl	8004408 <HAL_TIM_PWM_ConfigChannel>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d001      	beq.n	800066c <MX_TIM2_Init+0xd4>
  {
    Error_Handler();
 8000668:	f000 fb10 	bl	8000c8c <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 800066c:	2300      	movs	r3, #0
 800066e:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000670:	463b      	mov	r3, r7
 8000672:	220c      	movs	r2, #12
 8000674:	4619      	mov	r1, r3
 8000676:	4807      	ldr	r0, [pc, #28]	; (8000694 <MX_TIM2_Init+0xfc>)
 8000678:	f003 fec6 	bl	8004408 <HAL_TIM_PWM_ConfigChannel>
 800067c:	4603      	mov	r3, r0
 800067e:	2b00      	cmp	r3, #0
 8000680:	d001      	beq.n	8000686 <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8000682:	f000 fb03 	bl	8000c8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000686:	4803      	ldr	r0, [pc, #12]	; (8000694 <MX_TIM2_Init+0xfc>)
 8000688:	f000 fc4c 	bl	8000f24 <HAL_TIM_MspPostInit>

}
 800068c:	bf00      	nop
 800068e:	3728      	adds	r7, #40	; 0x28
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}
 8000694:	20000594 	.word	0x20000594

08000698 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b08c      	sub	sp, #48	; 0x30
 800069c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800069e:	f107 030c 	add.w	r3, r7, #12
 80006a2:	2224      	movs	r2, #36	; 0x24
 80006a4:	2100      	movs	r1, #0
 80006a6:	4618      	mov	r0, r3
 80006a8:	f008 fe5d 	bl	8009366 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006ac:	463b      	mov	r3, r7
 80006ae:	2200      	movs	r2, #0
 80006b0:	601a      	str	r2, [r3, #0]
 80006b2:	605a      	str	r2, [r3, #4]
 80006b4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80006b6:	4b21      	ldr	r3, [pc, #132]	; (800073c <MX_TIM3_Init+0xa4>)
 80006b8:	4a21      	ldr	r2, [pc, #132]	; (8000740 <MX_TIM3_Init+0xa8>)
 80006ba:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80006bc:	4b1f      	ldr	r3, [pc, #124]	; (800073c <MX_TIM3_Init+0xa4>)
 80006be:	2200      	movs	r2, #0
 80006c0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006c2:	4b1e      	ldr	r3, [pc, #120]	; (800073c <MX_TIM3_Init+0xa4>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80006c8:	4b1c      	ldr	r3, [pc, #112]	; (800073c <MX_TIM3_Init+0xa4>)
 80006ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80006ce:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006d0:	4b1a      	ldr	r3, [pc, #104]	; (800073c <MX_TIM3_Init+0xa4>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006d6:	4b19      	ldr	r3, [pc, #100]	; (800073c <MX_TIM3_Init+0xa4>)
 80006d8:	2200      	movs	r2, #0
 80006da:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80006dc:	2301      	movs	r3, #1
 80006de:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80006e0:	2300      	movs	r3, #0
 80006e2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80006e4:	2301      	movs	r3, #1
 80006e6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80006e8:	2300      	movs	r3, #0
 80006ea:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80006ec:	2300      	movs	r3, #0
 80006ee:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80006f0:	2300      	movs	r3, #0
 80006f2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80006f4:	2301      	movs	r3, #1
 80006f6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80006f8:	2300      	movs	r3, #0
 80006fa:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80006fc:	2300      	movs	r3, #0
 80006fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000700:	f107 030c 	add.w	r3, r7, #12
 8000704:	4619      	mov	r1, r3
 8000706:	480d      	ldr	r0, [pc, #52]	; (800073c <MX_TIM3_Init+0xa4>)
 8000708:	f003 fd4a 	bl	80041a0 <HAL_TIM_Encoder_Init>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d001      	beq.n	8000716 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8000712:	f000 fabb 	bl	8000c8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000716:	2300      	movs	r3, #0
 8000718:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800071a:	2300      	movs	r3, #0
 800071c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800071e:	463b      	mov	r3, r7
 8000720:	4619      	mov	r1, r3
 8000722:	4806      	ldr	r0, [pc, #24]	; (800073c <MX_TIM3_Init+0xa4>)
 8000724:	f004 fb2c 	bl	8004d80 <HAL_TIMEx_MasterConfigSynchronization>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d001      	beq.n	8000732 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 800072e:	f000 faad 	bl	8000c8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000732:	bf00      	nop
 8000734:	3730      	adds	r7, #48	; 0x30
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	200004fc 	.word	0x200004fc
 8000740:	40000400 	.word	0x40000400

08000744 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b08c      	sub	sp, #48	; 0x30
 8000748:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800074a:	f107 030c 	add.w	r3, r7, #12
 800074e:	2224      	movs	r2, #36	; 0x24
 8000750:	2100      	movs	r1, #0
 8000752:	4618      	mov	r0, r3
 8000754:	f008 fe07 	bl	8009366 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000758:	463b      	mov	r3, r7
 800075a:	2200      	movs	r2, #0
 800075c:	601a      	str	r2, [r3, #0]
 800075e:	605a      	str	r2, [r3, #4]
 8000760:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000762:	4b21      	ldr	r3, [pc, #132]	; (80007e8 <MX_TIM4_Init+0xa4>)
 8000764:	4a21      	ldr	r2, [pc, #132]	; (80007ec <MX_TIM4_Init+0xa8>)
 8000766:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000768:	4b1f      	ldr	r3, [pc, #124]	; (80007e8 <MX_TIM4_Init+0xa4>)
 800076a:	2200      	movs	r2, #0
 800076c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800076e:	4b1e      	ldr	r3, [pc, #120]	; (80007e8 <MX_TIM4_Init+0xa4>)
 8000770:	2200      	movs	r2, #0
 8000772:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000774:	4b1c      	ldr	r3, [pc, #112]	; (80007e8 <MX_TIM4_Init+0xa4>)
 8000776:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800077a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800077c:	4b1a      	ldr	r3, [pc, #104]	; (80007e8 <MX_TIM4_Init+0xa4>)
 800077e:	2200      	movs	r2, #0
 8000780:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000782:	4b19      	ldr	r3, [pc, #100]	; (80007e8 <MX_TIM4_Init+0xa4>)
 8000784:	2200      	movs	r2, #0
 8000786:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000788:	2301      	movs	r3, #1
 800078a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800078c:	2300      	movs	r3, #0
 800078e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000790:	2301      	movs	r3, #1
 8000792:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000794:	2300      	movs	r3, #0
 8000796:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000798:	2300      	movs	r3, #0
 800079a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800079c:	2300      	movs	r3, #0
 800079e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80007a0:	2301      	movs	r3, #1
 80007a2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80007a4:	2300      	movs	r3, #0
 80007a6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80007a8:	2300      	movs	r3, #0
 80007aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80007ac:	f107 030c 	add.w	r3, r7, #12
 80007b0:	4619      	mov	r1, r3
 80007b2:	480d      	ldr	r0, [pc, #52]	; (80007e8 <MX_TIM4_Init+0xa4>)
 80007b4:	f003 fcf4 	bl	80041a0 <HAL_TIM_Encoder_Init>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d001      	beq.n	80007c2 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 80007be:	f000 fa65 	bl	8000c8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007c2:	2300      	movs	r3, #0
 80007c4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007c6:	2300      	movs	r3, #0
 80007c8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80007ca:	463b      	mov	r3, r7
 80007cc:	4619      	mov	r1, r3
 80007ce:	4806      	ldr	r0, [pc, #24]	; (80007e8 <MX_TIM4_Init+0xa4>)
 80007d0:	f004 fad6 	bl	8004d80 <HAL_TIMEx_MasterConfigSynchronization>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 80007da:	f000 fa57 	bl	8000c8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80007de:	bf00      	nop
 80007e0:	3730      	adds	r7, #48	; 0x30
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	20000418 	.word	0x20000418
 80007ec:	40000800 	.word	0x40000800

080007f0 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b098      	sub	sp, #96	; 0x60
 80007f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007f6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80007fa:	2200      	movs	r2, #0
 80007fc:	601a      	str	r2, [r3, #0]
 80007fe:	605a      	str	r2, [r3, #4]
 8000800:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000802:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000806:	2200      	movs	r2, #0
 8000808:	601a      	str	r2, [r3, #0]
 800080a:	605a      	str	r2, [r3, #4]
 800080c:	609a      	str	r2, [r3, #8]
 800080e:	60da      	str	r2, [r3, #12]
 8000810:	611a      	str	r2, [r3, #16]
 8000812:	615a      	str	r2, [r3, #20]
 8000814:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000816:	1d3b      	adds	r3, r7, #4
 8000818:	2234      	movs	r2, #52	; 0x34
 800081a:	2100      	movs	r1, #0
 800081c:	4618      	mov	r0, r3
 800081e:	f008 fda2 	bl	8009366 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000822:	4b3b      	ldr	r3, [pc, #236]	; (8000910 <MX_TIM8_Init+0x120>)
 8000824:	4a3b      	ldr	r2, [pc, #236]	; (8000914 <MX_TIM8_Init+0x124>)
 8000826:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 50 - 1;
 8000828:	4b39      	ldr	r3, [pc, #228]	; (8000910 <MX_TIM8_Init+0x120>)
 800082a:	2231      	movs	r2, #49	; 0x31
 800082c:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800082e:	4b38      	ldr	r3, [pc, #224]	; (8000910 <MX_TIM8_Init+0x120>)
 8000830:	2200      	movs	r2, #0
 8000832:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 63999;
 8000834:	4b36      	ldr	r3, [pc, #216]	; (8000910 <MX_TIM8_Init+0x120>)
 8000836:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 800083a:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800083c:	4b34      	ldr	r3, [pc, #208]	; (8000910 <MX_TIM8_Init+0x120>)
 800083e:	2200      	movs	r2, #0
 8000840:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000842:	4b33      	ldr	r3, [pc, #204]	; (8000910 <MX_TIM8_Init+0x120>)
 8000844:	2200      	movs	r2, #0
 8000846:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000848:	4b31      	ldr	r3, [pc, #196]	; (8000910 <MX_TIM8_Init+0x120>)
 800084a:	2200      	movs	r2, #0
 800084c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800084e:	4830      	ldr	r0, [pc, #192]	; (8000910 <MX_TIM8_Init+0x120>)
 8000850:	f003 fb4f 	bl	8003ef2 <HAL_TIM_PWM_Init>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d001      	beq.n	800085e <MX_TIM8_Init+0x6e>
  {
    Error_Handler();
 800085a:	f000 fa17 	bl	8000c8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800085e:	2300      	movs	r3, #0
 8000860:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000862:	2300      	movs	r3, #0
 8000864:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000866:	2300      	movs	r3, #0
 8000868:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800086a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800086e:	4619      	mov	r1, r3
 8000870:	4827      	ldr	r0, [pc, #156]	; (8000910 <MX_TIM8_Init+0x120>)
 8000872:	f004 fa85 	bl	8004d80 <HAL_TIMEx_MasterConfigSynchronization>
 8000876:	4603      	mov	r3, r0
 8000878:	2b00      	cmp	r3, #0
 800087a:	d001      	beq.n	8000880 <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 800087c:	f000 fa06 	bl	8000c8c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000880:	2360      	movs	r3, #96	; 0x60
 8000882:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8000884:	2300      	movs	r3, #0
 8000886:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000888:	2300      	movs	r3, #0
 800088a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800088c:	2300      	movs	r3, #0
 800088e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000890:	2300      	movs	r3, #0
 8000892:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000894:	2300      	movs	r3, #0
 8000896:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000898:	2300      	movs	r3, #0
 800089a:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800089c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80008a0:	2200      	movs	r2, #0
 80008a2:	4619      	mov	r1, r3
 80008a4:	481a      	ldr	r0, [pc, #104]	; (8000910 <MX_TIM8_Init+0x120>)
 80008a6:	f003 fdaf 	bl	8004408 <HAL_TIM_PWM_ConfigChannel>
 80008aa:	4603      	mov	r3, r0
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d001      	beq.n	80008b4 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 80008b0:	f000 f9ec 	bl	8000c8c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80008b4:	2300      	movs	r3, #0
 80008b6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80008b8:	2300      	movs	r3, #0
 80008ba:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80008bc:	2300      	movs	r3, #0
 80008be:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80008c0:	2300      	movs	r3, #0
 80008c2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80008c4:	2300      	movs	r3, #0
 80008c6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80008c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008cc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80008ce:	2300      	movs	r3, #0
 80008d0:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80008d2:	2300      	movs	r3, #0
 80008d4:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80008d6:	2300      	movs	r3, #0
 80008d8:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80008da:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80008de:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80008e0:	2300      	movs	r3, #0
 80008e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80008e4:	2300      	movs	r3, #0
 80008e6:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80008e8:	2300      	movs	r3, #0
 80008ea:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80008ec:	1d3b      	adds	r3, r7, #4
 80008ee:	4619      	mov	r1, r3
 80008f0:	4807      	ldr	r0, [pc, #28]	; (8000910 <MX_TIM8_Init+0x120>)
 80008f2:	f004 fac7 	bl	8004e84 <HAL_TIMEx_ConfigBreakDeadTime>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d001      	beq.n	8000900 <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 80008fc:	f000 f9c6 	bl	8000c8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8000900:	4803      	ldr	r0, [pc, #12]	; (8000910 <MX_TIM8_Init+0x120>)
 8000902:	f000 fb0f 	bl	8000f24 <HAL_TIM_MspPostInit>

}
 8000906:	bf00      	nop
 8000908:	3760      	adds	r7, #96	; 0x60
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	200003cc 	.word	0x200003cc
 8000914:	40013400 	.word	0x40013400

08000918 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b098      	sub	sp, #96	; 0x60
 800091c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800091e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000922:	2200      	movs	r2, #0
 8000924:	601a      	str	r2, [r3, #0]
 8000926:	605a      	str	r2, [r3, #4]
 8000928:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800092a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800092e:	2200      	movs	r2, #0
 8000930:	601a      	str	r2, [r3, #0]
 8000932:	605a      	str	r2, [r3, #4]
 8000934:	609a      	str	r2, [r3, #8]
 8000936:	60da      	str	r2, [r3, #12]
 8000938:	611a      	str	r2, [r3, #16]
 800093a:	615a      	str	r2, [r3, #20]
 800093c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800093e:	1d3b      	adds	r3, r7, #4
 8000940:	2234      	movs	r2, #52	; 0x34
 8000942:	2100      	movs	r1, #0
 8000944:	4618      	mov	r0, r3
 8000946:	f008 fd0e 	bl	8009366 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 800094a:	4b34      	ldr	r3, [pc, #208]	; (8000a1c <MX_TIM15_Init+0x104>)
 800094c:	4a34      	ldr	r2, [pc, #208]	; (8000a20 <MX_TIM15_Init+0x108>)
 800094e:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 8000950:	4b32      	ldr	r3, [pc, #200]	; (8000a1c <MX_TIM15_Init+0x104>)
 8000952:	2200      	movs	r2, #0
 8000954:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000956:	4b31      	ldr	r3, [pc, #196]	; (8000a1c <MX_TIM15_Init+0x104>)
 8000958:	2200      	movs	r2, #0
 800095a:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 800095c:	4b2f      	ldr	r3, [pc, #188]	; (8000a1c <MX_TIM15_Init+0x104>)
 800095e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000962:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000964:	4b2d      	ldr	r3, [pc, #180]	; (8000a1c <MX_TIM15_Init+0x104>)
 8000966:	2200      	movs	r2, #0
 8000968:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 800096a:	4b2c      	ldr	r3, [pc, #176]	; (8000a1c <MX_TIM15_Init+0x104>)
 800096c:	2200      	movs	r2, #0
 800096e:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000970:	4b2a      	ldr	r3, [pc, #168]	; (8000a1c <MX_TIM15_Init+0x104>)
 8000972:	2200      	movs	r2, #0
 8000974:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8000976:	4829      	ldr	r0, [pc, #164]	; (8000a1c <MX_TIM15_Init+0x104>)
 8000978:	f003 fabb 	bl	8003ef2 <HAL_TIM_PWM_Init>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d001      	beq.n	8000986 <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 8000982:	f000 f983 	bl	8000c8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000986:	2300      	movs	r3, #0
 8000988:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800098a:	2300      	movs	r3, #0
 800098c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 800098e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000992:	4619      	mov	r1, r3
 8000994:	4821      	ldr	r0, [pc, #132]	; (8000a1c <MX_TIM15_Init+0x104>)
 8000996:	f004 f9f3 	bl	8004d80 <HAL_TIMEx_MasterConfigSynchronization>
 800099a:	4603      	mov	r3, r0
 800099c:	2b00      	cmp	r3, #0
 800099e:	d001      	beq.n	80009a4 <MX_TIM15_Init+0x8c>
  {
    Error_Handler();
 80009a0:	f000 f974 	bl	8000c8c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009a4:	2360      	movs	r3, #96	; 0x60
 80009a6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 80009a8:	2300      	movs	r3, #0
 80009aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009ac:	2300      	movs	r3, #0
 80009ae:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80009b0:	2300      	movs	r3, #0
 80009b2:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009b4:	2300      	movs	r3, #0
 80009b6:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80009b8:	2300      	movs	r3, #0
 80009ba:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80009bc:	2300      	movs	r3, #0
 80009be:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80009c0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80009c4:	2204      	movs	r2, #4
 80009c6:	4619      	mov	r1, r3
 80009c8:	4814      	ldr	r0, [pc, #80]	; (8000a1c <MX_TIM15_Init+0x104>)
 80009ca:	f003 fd1d 	bl	8004408 <HAL_TIM_PWM_ConfigChannel>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d001      	beq.n	80009d8 <MX_TIM15_Init+0xc0>
  {
    Error_Handler();
 80009d4:	f000 f95a 	bl	8000c8c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80009d8:	2300      	movs	r3, #0
 80009da:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80009dc:	2300      	movs	r3, #0
 80009de:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80009e0:	2300      	movs	r3, #0
 80009e2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80009e4:	2300      	movs	r3, #0
 80009e6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80009e8:	2300      	movs	r3, #0
 80009ea:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80009ec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009f0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80009f2:	2300      	movs	r3, #0
 80009f4:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80009f6:	2300      	movs	r3, #0
 80009f8:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 80009fa:	1d3b      	adds	r3, r7, #4
 80009fc:	4619      	mov	r1, r3
 80009fe:	4807      	ldr	r0, [pc, #28]	; (8000a1c <MX_TIM15_Init+0x104>)
 8000a00:	f004 fa40 	bl	8004e84 <HAL_TIMEx_ConfigBreakDeadTime>
 8000a04:	4603      	mov	r3, r0
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d001      	beq.n	8000a0e <MX_TIM15_Init+0xf6>
  {
    Error_Handler();
 8000a0a:	f000 f93f 	bl	8000c8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8000a0e:	4803      	ldr	r0, [pc, #12]	; (8000a1c <MX_TIM15_Init+0x104>)
 8000a10:	f000 fa88 	bl	8000f24 <HAL_TIM_MspPostInit>

}
 8000a14:	bf00      	nop
 8000a16:	3760      	adds	r7, #96	; 0x60
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bd80      	pop	{r7, pc}
 8000a1c:	20000464 	.word	0x20000464
 8000a20:	40014000 	.word	0x40014000

08000a24 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b094      	sub	sp, #80	; 0x50
 8000a28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a2a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000a2e:	2200      	movs	r2, #0
 8000a30:	601a      	str	r2, [r3, #0]
 8000a32:	605a      	str	r2, [r3, #4]
 8000a34:	609a      	str	r2, [r3, #8]
 8000a36:	60da      	str	r2, [r3, #12]
 8000a38:	611a      	str	r2, [r3, #16]
 8000a3a:	615a      	str	r2, [r3, #20]
 8000a3c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000a3e:	463b      	mov	r3, r7
 8000a40:	2234      	movs	r2, #52	; 0x34
 8000a42:	2100      	movs	r1, #0
 8000a44:	4618      	mov	r0, r3
 8000a46:	f008 fc8e 	bl	8009366 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000a4a:	4b31      	ldr	r3, [pc, #196]	; (8000b10 <MX_TIM16_Init+0xec>)
 8000a4c:	4a31      	ldr	r2, [pc, #196]	; (8000b14 <MX_TIM16_Init+0xf0>)
 8000a4e:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 8000a50:	4b2f      	ldr	r3, [pc, #188]	; (8000b10 <MX_TIM16_Init+0xec>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a56:	4b2e      	ldr	r3, [pc, #184]	; (8000b10 <MX_TIM16_Init+0xec>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8000a5c:	4b2c      	ldr	r3, [pc, #176]	; (8000b10 <MX_TIM16_Init+0xec>)
 8000a5e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a62:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a64:	4b2a      	ldr	r3, [pc, #168]	; (8000b10 <MX_TIM16_Init+0xec>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000a6a:	4b29      	ldr	r3, [pc, #164]	; (8000b10 <MX_TIM16_Init+0xec>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a70:	4b27      	ldr	r3, [pc, #156]	; (8000b10 <MX_TIM16_Init+0xec>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000a76:	4826      	ldr	r0, [pc, #152]	; (8000b10 <MX_TIM16_Init+0xec>)
 8000a78:	f003 f9e4 	bl	8003e44 <HAL_TIM_Base_Init>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d001      	beq.n	8000a86 <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 8000a82:	f000 f903 	bl	8000c8c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8000a86:	4822      	ldr	r0, [pc, #136]	; (8000b10 <MX_TIM16_Init+0xec>)
 8000a88:	f003 fa33 	bl	8003ef2 <HAL_TIM_PWM_Init>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d001      	beq.n	8000a96 <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 8000a92:	f000 f8fb 	bl	8000c8c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a96:	2360      	movs	r3, #96	; 0x60
 8000a98:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 0;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ab2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	4619      	mov	r1, r3
 8000aba:	4815      	ldr	r0, [pc, #84]	; (8000b10 <MX_TIM16_Init+0xec>)
 8000abc:	f003 fca4 	bl	8004408 <HAL_TIM_PWM_ConfigChannel>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d001      	beq.n	8000aca <MX_TIM16_Init+0xa6>
  {
    Error_Handler();
 8000ac6:	f000 f8e1 	bl	8000c8c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000aca:	2300      	movs	r3, #0
 8000acc:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000ada:	2300      	movs	r3, #0
 8000adc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000ade:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ae2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8000aec:	463b      	mov	r3, r7
 8000aee:	4619      	mov	r1, r3
 8000af0:	4807      	ldr	r0, [pc, #28]	; (8000b10 <MX_TIM16_Init+0xec>)
 8000af2:	f004 f9c7 	bl	8004e84 <HAL_TIMEx_ConfigBreakDeadTime>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d001      	beq.n	8000b00 <MX_TIM16_Init+0xdc>
  {
    Error_Handler();
 8000afc:	f000 f8c6 	bl	8000c8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8000b00:	4803      	ldr	r0, [pc, #12]	; (8000b10 <MX_TIM16_Init+0xec>)
 8000b02:	f000 fa0f 	bl	8000f24 <HAL_TIM_MspPostInit>

}
 8000b06:	bf00      	nop
 8000b08:	3750      	adds	r7, #80	; 0x50
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	200005e0 	.word	0x200005e0
 8000b14:	40014400 	.word	0x40014400

08000b18 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b094      	sub	sp, #80	; 0x50
 8000b1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b1e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000b22:	2200      	movs	r2, #0
 8000b24:	601a      	str	r2, [r3, #0]
 8000b26:	605a      	str	r2, [r3, #4]
 8000b28:	609a      	str	r2, [r3, #8]
 8000b2a:	60da      	str	r2, [r3, #12]
 8000b2c:	611a      	str	r2, [r3, #16]
 8000b2e:	615a      	str	r2, [r3, #20]
 8000b30:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000b32:	463b      	mov	r3, r7
 8000b34:	2234      	movs	r2, #52	; 0x34
 8000b36:	2100      	movs	r1, #0
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f008 fc14 	bl	8009366 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8000b3e:	4b31      	ldr	r3, [pc, #196]	; (8000c04 <MX_TIM17_Init+0xec>)
 8000b40:	4a31      	ldr	r2, [pc, #196]	; (8000c08 <MX_TIM17_Init+0xf0>)
 8000b42:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 8000b44:	4b2f      	ldr	r3, [pc, #188]	; (8000c04 <MX_TIM17_Init+0xec>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b4a:	4b2e      	ldr	r3, [pc, #184]	; (8000c04 <MX_TIM17_Init+0xec>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 8000b50:	4b2c      	ldr	r3, [pc, #176]	; (8000c04 <MX_TIM17_Init+0xec>)
 8000b52:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b56:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b58:	4b2a      	ldr	r3, [pc, #168]	; (8000c04 <MX_TIM17_Init+0xec>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8000b5e:	4b29      	ldr	r3, [pc, #164]	; (8000c04 <MX_TIM17_Init+0xec>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b64:	4b27      	ldr	r3, [pc, #156]	; (8000c04 <MX_TIM17_Init+0xec>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8000b6a:	4826      	ldr	r0, [pc, #152]	; (8000c04 <MX_TIM17_Init+0xec>)
 8000b6c:	f003 f96a 	bl	8003e44 <HAL_TIM_Base_Init>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d001      	beq.n	8000b7a <MX_TIM17_Init+0x62>
  {
    Error_Handler();
 8000b76:	f000 f889 	bl	8000c8c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 8000b7a:	4822      	ldr	r0, [pc, #136]	; (8000c04 <MX_TIM17_Init+0xec>)
 8000b7c:	f003 f9b9 	bl	8003ef2 <HAL_TIM_PWM_Init>
 8000b80:	4603      	mov	r3, r0
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d001      	beq.n	8000b8a <MX_TIM17_Init+0x72>
  {
    Error_Handler();
 8000b86:	f000 f881 	bl	8000c8c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b8a:	2360      	movs	r3, #96	; 0x60
 8000b8c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 0;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b92:	2300      	movs	r3, #0
 8000b94:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000b96:	2300      	movs	r3, #0
 8000b98:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ba6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000baa:	2200      	movs	r2, #0
 8000bac:	4619      	mov	r1, r3
 8000bae:	4815      	ldr	r0, [pc, #84]	; (8000c04 <MX_TIM17_Init+0xec>)
 8000bb0:	f003 fc2a 	bl	8004408 <HAL_TIM_PWM_ConfigChannel>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d001      	beq.n	8000bbe <MX_TIM17_Init+0xa6>
  {
    Error_Handler();
 8000bba:	f000 f867 	bl	8000c8c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000bd2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bd6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8000be0:	463b      	mov	r3, r7
 8000be2:	4619      	mov	r1, r3
 8000be4:	4807      	ldr	r0, [pc, #28]	; (8000c04 <MX_TIM17_Init+0xec>)
 8000be6:	f004 f94d 	bl	8004e84 <HAL_TIMEx_ConfigBreakDeadTime>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d001      	beq.n	8000bf4 <MX_TIM17_Init+0xdc>
  {
    Error_Handler();
 8000bf0:	f000 f84c 	bl	8000c8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 8000bf4:	4803      	ldr	r0, [pc, #12]	; (8000c04 <MX_TIM17_Init+0xec>)
 8000bf6:	f000 f995 	bl	8000f24 <HAL_TIM_MspPostInit>

}
 8000bfa:	bf00      	nop
 8000bfc:	3750      	adds	r7, #80	; 0x50
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	200004b0 	.word	0x200004b0
 8000c08:	40014800 	.word	0x40014800

08000c0c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b088      	sub	sp, #32
 8000c10:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c12:	f107 030c 	add.w	r3, r7, #12
 8000c16:	2200      	movs	r2, #0
 8000c18:	601a      	str	r2, [r3, #0]
 8000c1a:	605a      	str	r2, [r3, #4]
 8000c1c:	609a      	str	r2, [r3, #8]
 8000c1e:	60da      	str	r2, [r3, #12]
 8000c20:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c22:	4b18      	ldr	r3, [pc, #96]	; (8000c84 <MX_GPIO_Init+0x78>)
 8000c24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c26:	4a17      	ldr	r2, [pc, #92]	; (8000c84 <MX_GPIO_Init+0x78>)
 8000c28:	f043 0301 	orr.w	r3, r3, #1
 8000c2c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c2e:	4b15      	ldr	r3, [pc, #84]	; (8000c84 <MX_GPIO_Init+0x78>)
 8000c30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c32:	f003 0301 	and.w	r3, r3, #1
 8000c36:	60bb      	str	r3, [r7, #8]
 8000c38:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c3a:	4b12      	ldr	r3, [pc, #72]	; (8000c84 <MX_GPIO_Init+0x78>)
 8000c3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c3e:	4a11      	ldr	r2, [pc, #68]	; (8000c84 <MX_GPIO_Init+0x78>)
 8000c40:	f043 0302 	orr.w	r3, r3, #2
 8000c44:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c46:	4b0f      	ldr	r3, [pc, #60]	; (8000c84 <MX_GPIO_Init+0x78>)
 8000c48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c4a:	f003 0302 	and.w	r3, r3, #2
 8000c4e:	607b      	str	r3, [r7, #4]
 8000c50:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000c52:	2200      	movs	r2, #0
 8000c54:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c58:	480b      	ldr	r0, [pc, #44]	; (8000c88 <MX_GPIO_Init+0x7c>)
 8000c5a:	f000 fdb9 	bl	80017d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000c5e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c62:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c64:	2301      	movs	r3, #1
 8000c66:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000c70:	f107 030c 	add.w	r3, r7, #12
 8000c74:	4619      	mov	r1, r3
 8000c76:	4804      	ldr	r0, [pc, #16]	; (8000c88 <MX_GPIO_Init+0x7c>)
 8000c78:	f000 fc28 	bl	80014cc <HAL_GPIO_Init>

}
 8000c7c:	bf00      	nop
 8000c7e:	3720      	adds	r7, #32
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	40021000 	.word	0x40021000
 8000c88:	48000400 	.word	0x48000400

08000c8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000c90:	bf00      	nop
 8000c92:	46bd      	mov	sp, r7
 8000c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c98:	4770      	bx	lr
	...

08000c9c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b082      	sub	sp, #8
 8000ca0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ca2:	4b0f      	ldr	r3, [pc, #60]	; (8000ce0 <HAL_MspInit+0x44>)
 8000ca4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ca6:	4a0e      	ldr	r2, [pc, #56]	; (8000ce0 <HAL_MspInit+0x44>)
 8000ca8:	f043 0301 	orr.w	r3, r3, #1
 8000cac:	6613      	str	r3, [r2, #96]	; 0x60
 8000cae:	4b0c      	ldr	r3, [pc, #48]	; (8000ce0 <HAL_MspInit+0x44>)
 8000cb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cb2:	f003 0301 	and.w	r3, r3, #1
 8000cb6:	607b      	str	r3, [r7, #4]
 8000cb8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cba:	4b09      	ldr	r3, [pc, #36]	; (8000ce0 <HAL_MspInit+0x44>)
 8000cbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cbe:	4a08      	ldr	r2, [pc, #32]	; (8000ce0 <HAL_MspInit+0x44>)
 8000cc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cc4:	6593      	str	r3, [r2, #88]	; 0x58
 8000cc6:	4b06      	ldr	r3, [pc, #24]	; (8000ce0 <HAL_MspInit+0x44>)
 8000cc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cce:	603b      	str	r3, [r7, #0]
 8000cd0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000cd2:	f002 f9bb 	bl	800304c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cd6:	bf00      	nop
 8000cd8:	3708      	adds	r7, #8
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	40021000 	.word	0x40021000

08000ce4 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b08e      	sub	sp, #56	; 0x38
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	601a      	str	r2, [r3, #0]
 8000cf4:	605a      	str	r2, [r3, #4]
 8000cf6:	609a      	str	r2, [r3, #8]
 8000cf8:	60da      	str	r2, [r3, #12]
 8000cfa:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	4a46      	ldr	r2, [pc, #280]	; (8000e1c <HAL_TIM_Encoder_MspInit+0x138>)
 8000d02:	4293      	cmp	r3, r2
 8000d04:	d12a      	bne.n	8000d5c <HAL_TIM_Encoder_MspInit+0x78>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000d06:	4b46      	ldr	r3, [pc, #280]	; (8000e20 <HAL_TIM_Encoder_MspInit+0x13c>)
 8000d08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d0a:	4a45      	ldr	r2, [pc, #276]	; (8000e20 <HAL_TIM_Encoder_MspInit+0x13c>)
 8000d0c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000d10:	6613      	str	r3, [r2, #96]	; 0x60
 8000d12:	4b43      	ldr	r3, [pc, #268]	; (8000e20 <HAL_TIM_Encoder_MspInit+0x13c>)
 8000d14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d16:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000d1a:	623b      	str	r3, [r7, #32]
 8000d1c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d1e:	4b40      	ldr	r3, [pc, #256]	; (8000e20 <HAL_TIM_Encoder_MspInit+0x13c>)
 8000d20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d22:	4a3f      	ldr	r2, [pc, #252]	; (8000e20 <HAL_TIM_Encoder_MspInit+0x13c>)
 8000d24:	f043 0301 	orr.w	r3, r3, #1
 8000d28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d2a:	4b3d      	ldr	r3, [pc, #244]	; (8000e20 <HAL_TIM_Encoder_MspInit+0x13c>)
 8000d2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d2e:	f003 0301 	and.w	r3, r3, #1
 8000d32:	61fb      	str	r3, [r7, #28]
 8000d34:	69fb      	ldr	r3, [r7, #28]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000d36:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d3a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d3c:	2302      	movs	r3, #2
 8000d3e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d40:	2300      	movs	r3, #0
 8000d42:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d44:	2300      	movs	r3, #0
 8000d46:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8000d48:	2306      	movs	r3, #6
 8000d4a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d50:	4619      	mov	r1, r3
 8000d52:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d56:	f000 fbb9 	bl	80014cc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000d5a:	e05a      	b.n	8000e12 <HAL_TIM_Encoder_MspInit+0x12e>
  else if(htim_encoder->Instance==TIM3)
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	4a30      	ldr	r2, [pc, #192]	; (8000e24 <HAL_TIM_Encoder_MspInit+0x140>)
 8000d62:	4293      	cmp	r3, r2
 8000d64:	d128      	bne.n	8000db8 <HAL_TIM_Encoder_MspInit+0xd4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000d66:	4b2e      	ldr	r3, [pc, #184]	; (8000e20 <HAL_TIM_Encoder_MspInit+0x13c>)
 8000d68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d6a:	4a2d      	ldr	r2, [pc, #180]	; (8000e20 <HAL_TIM_Encoder_MspInit+0x13c>)
 8000d6c:	f043 0302 	orr.w	r3, r3, #2
 8000d70:	6593      	str	r3, [r2, #88]	; 0x58
 8000d72:	4b2b      	ldr	r3, [pc, #172]	; (8000e20 <HAL_TIM_Encoder_MspInit+0x13c>)
 8000d74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d76:	f003 0302 	and.w	r3, r3, #2
 8000d7a:	61bb      	str	r3, [r7, #24]
 8000d7c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d7e:	4b28      	ldr	r3, [pc, #160]	; (8000e20 <HAL_TIM_Encoder_MspInit+0x13c>)
 8000d80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d82:	4a27      	ldr	r2, [pc, #156]	; (8000e20 <HAL_TIM_Encoder_MspInit+0x13c>)
 8000d84:	f043 0302 	orr.w	r3, r3, #2
 8000d88:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d8a:	4b25      	ldr	r3, [pc, #148]	; (8000e20 <HAL_TIM_Encoder_MspInit+0x13c>)
 8000d8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d8e:	f003 0302 	and.w	r3, r3, #2
 8000d92:	617b      	str	r3, [r7, #20]
 8000d94:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000d96:	2330      	movs	r3, #48	; 0x30
 8000d98:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d9a:	2302      	movs	r3, #2
 8000d9c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da2:	2300      	movs	r3, #0
 8000da4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000da6:	2302      	movs	r3, #2
 8000da8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000daa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dae:	4619      	mov	r1, r3
 8000db0:	481d      	ldr	r0, [pc, #116]	; (8000e28 <HAL_TIM_Encoder_MspInit+0x144>)
 8000db2:	f000 fb8b 	bl	80014cc <HAL_GPIO_Init>
}
 8000db6:	e02c      	b.n	8000e12 <HAL_TIM_Encoder_MspInit+0x12e>
  else if(htim_encoder->Instance==TIM4)
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	4a1b      	ldr	r2, [pc, #108]	; (8000e2c <HAL_TIM_Encoder_MspInit+0x148>)
 8000dbe:	4293      	cmp	r3, r2
 8000dc0:	d127      	bne.n	8000e12 <HAL_TIM_Encoder_MspInit+0x12e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000dc2:	4b17      	ldr	r3, [pc, #92]	; (8000e20 <HAL_TIM_Encoder_MspInit+0x13c>)
 8000dc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dc6:	4a16      	ldr	r2, [pc, #88]	; (8000e20 <HAL_TIM_Encoder_MspInit+0x13c>)
 8000dc8:	f043 0304 	orr.w	r3, r3, #4
 8000dcc:	6593      	str	r3, [r2, #88]	; 0x58
 8000dce:	4b14      	ldr	r3, [pc, #80]	; (8000e20 <HAL_TIM_Encoder_MspInit+0x13c>)
 8000dd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dd2:	f003 0304 	and.w	r3, r3, #4
 8000dd6:	613b      	str	r3, [r7, #16]
 8000dd8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dda:	4b11      	ldr	r3, [pc, #68]	; (8000e20 <HAL_TIM_Encoder_MspInit+0x13c>)
 8000ddc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dde:	4a10      	ldr	r2, [pc, #64]	; (8000e20 <HAL_TIM_Encoder_MspInit+0x13c>)
 8000de0:	f043 0302 	orr.w	r3, r3, #2
 8000de4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000de6:	4b0e      	ldr	r3, [pc, #56]	; (8000e20 <HAL_TIM_Encoder_MspInit+0x13c>)
 8000de8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dea:	f003 0302 	and.w	r3, r3, #2
 8000dee:	60fb      	str	r3, [r7, #12]
 8000df0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000df2:	23c0      	movs	r3, #192	; 0xc0
 8000df4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000df6:	2302      	movs	r3, #2
 8000df8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000e02:	2302      	movs	r3, #2
 8000e04:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e0a:	4619      	mov	r1, r3
 8000e0c:	4806      	ldr	r0, [pc, #24]	; (8000e28 <HAL_TIM_Encoder_MspInit+0x144>)
 8000e0e:	f000 fb5d 	bl	80014cc <HAL_GPIO_Init>
}
 8000e12:	bf00      	nop
 8000e14:	3738      	adds	r7, #56	; 0x38
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	40012c00 	.word	0x40012c00
 8000e20:	40021000 	.word	0x40021000
 8000e24:	40000400 	.word	0x40000400
 8000e28:	48000400 	.word	0x48000400
 8000e2c:	40000800 	.word	0x40000800

08000e30 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000e30:	b480      	push	{r7}
 8000e32:	b087      	sub	sp, #28
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e40:	d10c      	bne.n	8000e5c <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000e42:	4b1b      	ldr	r3, [pc, #108]	; (8000eb0 <HAL_TIM_PWM_MspInit+0x80>)
 8000e44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e46:	4a1a      	ldr	r2, [pc, #104]	; (8000eb0 <HAL_TIM_PWM_MspInit+0x80>)
 8000e48:	f043 0301 	orr.w	r3, r3, #1
 8000e4c:	6593      	str	r3, [r2, #88]	; 0x58
 8000e4e:	4b18      	ldr	r3, [pc, #96]	; (8000eb0 <HAL_TIM_PWM_MspInit+0x80>)
 8000e50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e52:	f003 0301 	and.w	r3, r3, #1
 8000e56:	617b      	str	r3, [r7, #20]
 8000e58:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8000e5a:	e022      	b.n	8000ea2 <HAL_TIM_PWM_MspInit+0x72>
  else if(htim_pwm->Instance==TIM8)
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	4a14      	ldr	r2, [pc, #80]	; (8000eb4 <HAL_TIM_PWM_MspInit+0x84>)
 8000e62:	4293      	cmp	r3, r2
 8000e64:	d10c      	bne.n	8000e80 <HAL_TIM_PWM_MspInit+0x50>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8000e66:	4b12      	ldr	r3, [pc, #72]	; (8000eb0 <HAL_TIM_PWM_MspInit+0x80>)
 8000e68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e6a:	4a11      	ldr	r2, [pc, #68]	; (8000eb0 <HAL_TIM_PWM_MspInit+0x80>)
 8000e6c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000e70:	6613      	str	r3, [r2, #96]	; 0x60
 8000e72:	4b0f      	ldr	r3, [pc, #60]	; (8000eb0 <HAL_TIM_PWM_MspInit+0x80>)
 8000e74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e76:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000e7a:	613b      	str	r3, [r7, #16]
 8000e7c:	693b      	ldr	r3, [r7, #16]
}
 8000e7e:	e010      	b.n	8000ea2 <HAL_TIM_PWM_MspInit+0x72>
  else if(htim_pwm->Instance==TIM15)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	4a0c      	ldr	r2, [pc, #48]	; (8000eb8 <HAL_TIM_PWM_MspInit+0x88>)
 8000e86:	4293      	cmp	r3, r2
 8000e88:	d10b      	bne.n	8000ea2 <HAL_TIM_PWM_MspInit+0x72>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8000e8a:	4b09      	ldr	r3, [pc, #36]	; (8000eb0 <HAL_TIM_PWM_MspInit+0x80>)
 8000e8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e8e:	4a08      	ldr	r2, [pc, #32]	; (8000eb0 <HAL_TIM_PWM_MspInit+0x80>)
 8000e90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e94:	6613      	str	r3, [r2, #96]	; 0x60
 8000e96:	4b06      	ldr	r3, [pc, #24]	; (8000eb0 <HAL_TIM_PWM_MspInit+0x80>)
 8000e98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e9e:	60fb      	str	r3, [r7, #12]
 8000ea0:	68fb      	ldr	r3, [r7, #12]
}
 8000ea2:	bf00      	nop
 8000ea4:	371c      	adds	r7, #28
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop
 8000eb0:	40021000 	.word	0x40021000
 8000eb4:	40013400 	.word	0x40013400
 8000eb8:	40014000 	.word	0x40014000

08000ebc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	b085      	sub	sp, #20
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	4a13      	ldr	r2, [pc, #76]	; (8000f18 <HAL_TIM_Base_MspInit+0x5c>)
 8000eca:	4293      	cmp	r3, r2
 8000ecc:	d10c      	bne.n	8000ee8 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000ece:	4b13      	ldr	r3, [pc, #76]	; (8000f1c <HAL_TIM_Base_MspInit+0x60>)
 8000ed0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ed2:	4a12      	ldr	r2, [pc, #72]	; (8000f1c <HAL_TIM_Base_MspInit+0x60>)
 8000ed4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ed8:	6613      	str	r3, [r2, #96]	; 0x60
 8000eda:	4b10      	ldr	r3, [pc, #64]	; (8000f1c <HAL_TIM_Base_MspInit+0x60>)
 8000edc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ede:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ee2:	60fb      	str	r3, [r7, #12]
 8000ee4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8000ee6:	e010      	b.n	8000f0a <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM17)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4a0c      	ldr	r2, [pc, #48]	; (8000f20 <HAL_TIM_Base_MspInit+0x64>)
 8000eee:	4293      	cmp	r3, r2
 8000ef0:	d10b      	bne.n	8000f0a <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8000ef2:	4b0a      	ldr	r3, [pc, #40]	; (8000f1c <HAL_TIM_Base_MspInit+0x60>)
 8000ef4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ef6:	4a09      	ldr	r2, [pc, #36]	; (8000f1c <HAL_TIM_Base_MspInit+0x60>)
 8000ef8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000efc:	6613      	str	r3, [r2, #96]	; 0x60
 8000efe:	4b07      	ldr	r3, [pc, #28]	; (8000f1c <HAL_TIM_Base_MspInit+0x60>)
 8000f00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f02:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f06:	60bb      	str	r3, [r7, #8]
 8000f08:	68bb      	ldr	r3, [r7, #8]
}
 8000f0a:	bf00      	nop
 8000f0c:	3714      	adds	r7, #20
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr
 8000f16:	bf00      	nop
 8000f18:	40014400 	.word	0x40014400
 8000f1c:	40021000 	.word	0x40021000
 8000f20:	40014800 	.word	0x40014800

08000f24 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b08c      	sub	sp, #48	; 0x30
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f2c:	f107 031c 	add.w	r3, r7, #28
 8000f30:	2200      	movs	r2, #0
 8000f32:	601a      	str	r2, [r3, #0]
 8000f34:	605a      	str	r2, [r3, #4]
 8000f36:	609a      	str	r2, [r3, #8]
 8000f38:	60da      	str	r2, [r3, #12]
 8000f3a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f44:	d12f      	bne.n	8000fa6 <HAL_TIM_MspPostInit+0x82>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f46:	4b60      	ldr	r3, [pc, #384]	; (80010c8 <HAL_TIM_MspPostInit+0x1a4>)
 8000f48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f4a:	4a5f      	ldr	r2, [pc, #380]	; (80010c8 <HAL_TIM_MspPostInit+0x1a4>)
 8000f4c:	f043 0301 	orr.w	r3, r3, #1
 8000f50:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f52:	4b5d      	ldr	r3, [pc, #372]	; (80010c8 <HAL_TIM_MspPostInit+0x1a4>)
 8000f54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f56:	f003 0301 	and.w	r3, r3, #1
 8000f5a:	61bb      	str	r3, [r7, #24]
 8000f5c:	69bb      	ldr	r3, [r7, #24]
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA10     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8000f5e:	2307      	movs	r3, #7
 8000f60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f62:	2302      	movs	r3, #2
 8000f64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f66:	2300      	movs	r3, #0
 8000f68:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000f6e:	2301      	movs	r3, #1
 8000f70:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f72:	f107 031c 	add.w	r3, r7, #28
 8000f76:	4619      	mov	r1, r3
 8000f78:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f7c:	f000 faa6 	bl	80014cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000f80:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f86:	2302      	movs	r3, #2
 8000f88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM2;
 8000f92:	230a      	movs	r3, #10
 8000f94:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f96:	f107 031c 	add.w	r3, r7, #28
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fa0:	f000 fa94 	bl	80014cc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 8000fa4:	e08b      	b.n	80010be <HAL_TIM_MspPostInit+0x19a>
  else if(htim->Instance==TIM8)
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	4a48      	ldr	r2, [pc, #288]	; (80010cc <HAL_TIM_MspPostInit+0x1a8>)
 8000fac:	4293      	cmp	r3, r2
 8000fae:	d11e      	bne.n	8000fee <HAL_TIM_MspPostInit+0xca>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fb0:	4b45      	ldr	r3, [pc, #276]	; (80010c8 <HAL_TIM_MspPostInit+0x1a4>)
 8000fb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fb4:	4a44      	ldr	r2, [pc, #272]	; (80010c8 <HAL_TIM_MspPostInit+0x1a4>)
 8000fb6:	f043 0301 	orr.w	r3, r3, #1
 8000fba:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fbc:	4b42      	ldr	r3, [pc, #264]	; (80010c8 <HAL_TIM_MspPostInit+0x1a4>)
 8000fbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fc0:	f003 0301 	and.w	r3, r3, #1
 8000fc4:	617b      	str	r3, [r7, #20]
 8000fc6:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000fc8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000fcc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fce:	2302      	movs	r3, #2
 8000fd0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM8;
 8000fda:	2302      	movs	r3, #2
 8000fdc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fde:	f107 031c 	add.w	r3, r7, #28
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fe8:	f000 fa70 	bl	80014cc <HAL_GPIO_Init>
}
 8000fec:	e067      	b.n	80010be <HAL_TIM_MspPostInit+0x19a>
  else if(htim->Instance==TIM15)
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	4a37      	ldr	r2, [pc, #220]	; (80010d0 <HAL_TIM_MspPostInit+0x1ac>)
 8000ff4:	4293      	cmp	r3, r2
 8000ff6:	d11d      	bne.n	8001034 <HAL_TIM_MspPostInit+0x110>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ff8:	4b33      	ldr	r3, [pc, #204]	; (80010c8 <HAL_TIM_MspPostInit+0x1a4>)
 8000ffa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ffc:	4a32      	ldr	r2, [pc, #200]	; (80010c8 <HAL_TIM_MspPostInit+0x1a4>)
 8000ffe:	f043 0301 	orr.w	r3, r3, #1
 8001002:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001004:	4b30      	ldr	r3, [pc, #192]	; (80010c8 <HAL_TIM_MspPostInit+0x1a4>)
 8001006:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001008:	f003 0301 	and.w	r3, r3, #1
 800100c:	613b      	str	r3, [r7, #16]
 800100e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001010:	2308      	movs	r3, #8
 8001012:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001014:	2302      	movs	r3, #2
 8001016:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001018:	2300      	movs	r3, #0
 800101a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800101c:	2300      	movs	r3, #0
 800101e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM15;
 8001020:	2309      	movs	r3, #9
 8001022:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001024:	f107 031c 	add.w	r3, r7, #28
 8001028:	4619      	mov	r1, r3
 800102a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800102e:	f000 fa4d 	bl	80014cc <HAL_GPIO_Init>
}
 8001032:	e044      	b.n	80010be <HAL_TIM_MspPostInit+0x19a>
  else if(htim->Instance==TIM16)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4a26      	ldr	r2, [pc, #152]	; (80010d4 <HAL_TIM_MspPostInit+0x1b0>)
 800103a:	4293      	cmp	r3, r2
 800103c:	d11d      	bne.n	800107a <HAL_TIM_MspPostInit+0x156>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800103e:	4b22      	ldr	r3, [pc, #136]	; (80010c8 <HAL_TIM_MspPostInit+0x1a4>)
 8001040:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001042:	4a21      	ldr	r2, [pc, #132]	; (80010c8 <HAL_TIM_MspPostInit+0x1a4>)
 8001044:	f043 0301 	orr.w	r3, r3, #1
 8001048:	64d3      	str	r3, [r2, #76]	; 0x4c
 800104a:	4b1f      	ldr	r3, [pc, #124]	; (80010c8 <HAL_TIM_MspPostInit+0x1a4>)
 800104c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800104e:	f003 0301 	and.w	r3, r3, #1
 8001052:	60fb      	str	r3, [r7, #12]
 8001054:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001056:	2340      	movs	r3, #64	; 0x40
 8001058:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800105a:	2302      	movs	r3, #2
 800105c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105e:	2300      	movs	r3, #0
 8001060:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001062:	2300      	movs	r3, #0
 8001064:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 8001066:	2301      	movs	r3, #1
 8001068:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800106a:	f107 031c 	add.w	r3, r7, #28
 800106e:	4619      	mov	r1, r3
 8001070:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001074:	f000 fa2a 	bl	80014cc <HAL_GPIO_Init>
}
 8001078:	e021      	b.n	80010be <HAL_TIM_MspPostInit+0x19a>
  else if(htim->Instance==TIM17)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	4a16      	ldr	r2, [pc, #88]	; (80010d8 <HAL_TIM_MspPostInit+0x1b4>)
 8001080:	4293      	cmp	r3, r2
 8001082:	d11c      	bne.n	80010be <HAL_TIM_MspPostInit+0x19a>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001084:	4b10      	ldr	r3, [pc, #64]	; (80010c8 <HAL_TIM_MspPostInit+0x1a4>)
 8001086:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001088:	4a0f      	ldr	r2, [pc, #60]	; (80010c8 <HAL_TIM_MspPostInit+0x1a4>)
 800108a:	f043 0301 	orr.w	r3, r3, #1
 800108e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001090:	4b0d      	ldr	r3, [pc, #52]	; (80010c8 <HAL_TIM_MspPostInit+0x1a4>)
 8001092:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001094:	f003 0301 	and.w	r3, r3, #1
 8001098:	60bb      	str	r3, [r7, #8]
 800109a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800109c:	2380      	movs	r3, #128	; 0x80
 800109e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010a0:	2302      	movs	r3, #2
 80010a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a4:	2300      	movs	r3, #0
 80010a6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a8:	2300      	movs	r3, #0
 80010aa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM17;
 80010ac:	2301      	movs	r3, #1
 80010ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010b0:	f107 031c 	add.w	r3, r7, #28
 80010b4:	4619      	mov	r1, r3
 80010b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010ba:	f000 fa07 	bl	80014cc <HAL_GPIO_Init>
}
 80010be:	bf00      	nop
 80010c0:	3730      	adds	r7, #48	; 0x30
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	40021000 	.word	0x40021000
 80010cc:	40013400 	.word	0x40013400
 80010d0:	40014000 	.word	0x40014000
 80010d4:	40014400 	.word	0x40014400
 80010d8:	40014800 	.word	0x40014800

080010dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80010e0:	bf00      	nop
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr

080010ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010ea:	b480      	push	{r7}
 80010ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010ee:	e7fe      	b.n	80010ee <HardFault_Handler+0x4>

080010f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010f4:	e7fe      	b.n	80010f4 <MemManage_Handler+0x4>

080010f6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010f6:	b480      	push	{r7}
 80010f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010fa:	e7fe      	b.n	80010fa <BusFault_Handler+0x4>

080010fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001100:	e7fe      	b.n	8001100 <UsageFault_Handler+0x4>

08001102 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001102:	b480      	push	{r7}
 8001104:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001106:	bf00      	nop
 8001108:	46bd      	mov	sp, r7
 800110a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110e:	4770      	bx	lr

08001110 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001114:	bf00      	nop
 8001116:	46bd      	mov	sp, r7
 8001118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111c:	4770      	bx	lr

0800111e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800111e:	b480      	push	{r7}
 8001120:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001122:	bf00      	nop
 8001124:	46bd      	mov	sp, r7
 8001126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112a:	4770      	bx	lr

0800112c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001130:	f000 f89e 	bl	8001270 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001134:	bf00      	nop
 8001136:	bd80      	pop	{r7, pc}

08001138 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800113c:	4802      	ldr	r0, [pc, #8]	; (8001148 <USB_LP_IRQHandler+0x10>)
 800113e:	f000 fc80 	bl	8001a42 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8001142:	bf00      	nop
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	200012d0 	.word	0x200012d0

0800114c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800114c:	b480      	push	{r7}
 800114e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001150:	4b08      	ldr	r3, [pc, #32]	; (8001174 <SystemInit+0x28>)
 8001152:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001156:	4a07      	ldr	r2, [pc, #28]	; (8001174 <SystemInit+0x28>)
 8001158:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800115c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001160:	4b04      	ldr	r3, [pc, #16]	; (8001174 <SystemInit+0x28>)
 8001162:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001166:	609a      	str	r2, [r3, #8]
#endif
}
 8001168:	bf00      	nop
 800116a:	46bd      	mov	sp, r7
 800116c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001170:	4770      	bx	lr
 8001172:	bf00      	nop
 8001174:	e000ed00 	.word	0xe000ed00

08001178 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001178:	480d      	ldr	r0, [pc, #52]	; (80011b0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800117a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800117c:	480d      	ldr	r0, [pc, #52]	; (80011b4 <LoopForever+0x6>)
  ldr r1, =_edata
 800117e:	490e      	ldr	r1, [pc, #56]	; (80011b8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001180:	4a0e      	ldr	r2, [pc, #56]	; (80011bc <LoopForever+0xe>)
  movs r3, #0
 8001182:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001184:	e002      	b.n	800118c <LoopCopyDataInit>

08001186 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001186:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001188:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800118a:	3304      	adds	r3, #4

0800118c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800118c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800118e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001190:	d3f9      	bcc.n	8001186 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001192:	4a0b      	ldr	r2, [pc, #44]	; (80011c0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001194:	4c0b      	ldr	r4, [pc, #44]	; (80011c4 <LoopForever+0x16>)
  movs r3, #0
 8001196:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001198:	e001      	b.n	800119e <LoopFillZerobss>

0800119a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800119a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800119c:	3204      	adds	r2, #4

0800119e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800119e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011a0:	d3fb      	bcc.n	800119a <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80011a2:	f7ff ffd3 	bl	800114c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80011a6:	f008 f8af 	bl	8009308 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80011aa:	f7ff f855 	bl	8000258 <main>

080011ae <LoopForever>:

LoopForever:
    b LoopForever
 80011ae:	e7fe      	b.n	80011ae <LoopForever>
  ldr   r0, =_estack
 80011b0:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80011b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011b8:	20000184 	.word	0x20000184
  ldr r2, =_sidata
 80011bc:	080093f0 	.word	0x080093f0
  ldr r2, =_sbss
 80011c0:	20000184 	.word	0x20000184
  ldr r4, =_ebss
 80011c4:	200015c4 	.word	0x200015c4

080011c8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80011c8:	e7fe      	b.n	80011c8 <ADC1_2_IRQHandler>

080011ca <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011ca:	b580      	push	{r7, lr}
 80011cc:	b082      	sub	sp, #8
 80011ce:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80011d0:	2300      	movs	r3, #0
 80011d2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011d4:	2003      	movs	r0, #3
 80011d6:	f000 f939 	bl	800144c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80011da:	2000      	movs	r0, #0
 80011dc:	f000 f80e 	bl	80011fc <HAL_InitTick>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d002      	beq.n	80011ec <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80011e6:	2301      	movs	r3, #1
 80011e8:	71fb      	strb	r3, [r7, #7]
 80011ea:	e001      	b.n	80011f0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80011ec:	f7ff fd56 	bl	8000c9c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80011f0:	79fb      	ldrb	r3, [r7, #7]

}
 80011f2:	4618      	mov	r0, r3
 80011f4:	3708      	adds	r7, #8
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
	...

080011fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b084      	sub	sp, #16
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001204:	2300      	movs	r3, #0
 8001206:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001208:	4b16      	ldr	r3, [pc, #88]	; (8001264 <HAL_InitTick+0x68>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	2b00      	cmp	r3, #0
 800120e:	d022      	beq.n	8001256 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001210:	4b15      	ldr	r3, [pc, #84]	; (8001268 <HAL_InitTick+0x6c>)
 8001212:	681a      	ldr	r2, [r3, #0]
 8001214:	4b13      	ldr	r3, [pc, #76]	; (8001264 <HAL_InitTick+0x68>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800121c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001220:	fbb2 f3f3 	udiv	r3, r2, r3
 8001224:	4618      	mov	r0, r3
 8001226:	f000 f944 	bl	80014b2 <HAL_SYSTICK_Config>
 800122a:	4603      	mov	r3, r0
 800122c:	2b00      	cmp	r3, #0
 800122e:	d10f      	bne.n	8001250 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	2b0f      	cmp	r3, #15
 8001234:	d809      	bhi.n	800124a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001236:	2200      	movs	r2, #0
 8001238:	6879      	ldr	r1, [r7, #4]
 800123a:	f04f 30ff 	mov.w	r0, #4294967295
 800123e:	f000 f910 	bl	8001462 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001242:	4a0a      	ldr	r2, [pc, #40]	; (800126c <HAL_InitTick+0x70>)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	6013      	str	r3, [r2, #0]
 8001248:	e007      	b.n	800125a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800124a:	2301      	movs	r3, #1
 800124c:	73fb      	strb	r3, [r7, #15]
 800124e:	e004      	b.n	800125a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001250:	2301      	movs	r3, #1
 8001252:	73fb      	strb	r3, [r7, #15]
 8001254:	e001      	b.n	800125a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001256:	2301      	movs	r3, #1
 8001258:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800125a:	7bfb      	ldrb	r3, [r7, #15]
}
 800125c:	4618      	mov	r0, r3
 800125e:	3710      	adds	r7, #16
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}
 8001264:	20000008 	.word	0x20000008
 8001268:	20000000 	.word	0x20000000
 800126c:	20000004 	.word	0x20000004

08001270 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001274:	4b05      	ldr	r3, [pc, #20]	; (800128c <HAL_IncTick+0x1c>)
 8001276:	681a      	ldr	r2, [r3, #0]
 8001278:	4b05      	ldr	r3, [pc, #20]	; (8001290 <HAL_IncTick+0x20>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4413      	add	r3, r2
 800127e:	4a03      	ldr	r2, [pc, #12]	; (800128c <HAL_IncTick+0x1c>)
 8001280:	6013      	str	r3, [r2, #0]
}
 8001282:	bf00      	nop
 8001284:	46bd      	mov	sp, r7
 8001286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128a:	4770      	bx	lr
 800128c:	2000062c 	.word	0x2000062c
 8001290:	20000008 	.word	0x20000008

08001294 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0
  return uwTick;
 8001298:	4b03      	ldr	r3, [pc, #12]	; (80012a8 <HAL_GetTick+0x14>)
 800129a:	681b      	ldr	r3, [r3, #0]
}
 800129c:	4618      	mov	r0, r3
 800129e:	46bd      	mov	sp, r7
 80012a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a4:	4770      	bx	lr
 80012a6:	bf00      	nop
 80012a8:	2000062c 	.word	0x2000062c

080012ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012ac:	b480      	push	{r7}
 80012ae:	b085      	sub	sp, #20
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	f003 0307 	and.w	r3, r3, #7
 80012ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012bc:	4b0c      	ldr	r3, [pc, #48]	; (80012f0 <__NVIC_SetPriorityGrouping+0x44>)
 80012be:	68db      	ldr	r3, [r3, #12]
 80012c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012c2:	68ba      	ldr	r2, [r7, #8]
 80012c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012c8:	4013      	ands	r3, r2
 80012ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012d0:	68bb      	ldr	r3, [r7, #8]
 80012d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012de:	4a04      	ldr	r2, [pc, #16]	; (80012f0 <__NVIC_SetPriorityGrouping+0x44>)
 80012e0:	68bb      	ldr	r3, [r7, #8]
 80012e2:	60d3      	str	r3, [r2, #12]
}
 80012e4:	bf00      	nop
 80012e6:	3714      	adds	r7, #20
 80012e8:	46bd      	mov	sp, r7
 80012ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ee:	4770      	bx	lr
 80012f0:	e000ed00 	.word	0xe000ed00

080012f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012f8:	4b04      	ldr	r3, [pc, #16]	; (800130c <__NVIC_GetPriorityGrouping+0x18>)
 80012fa:	68db      	ldr	r3, [r3, #12]
 80012fc:	0a1b      	lsrs	r3, r3, #8
 80012fe:	f003 0307 	and.w	r3, r3, #7
}
 8001302:	4618      	mov	r0, r3
 8001304:	46bd      	mov	sp, r7
 8001306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130a:	4770      	bx	lr
 800130c:	e000ed00 	.word	0xe000ed00

08001310 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001310:	b480      	push	{r7}
 8001312:	b083      	sub	sp, #12
 8001314:	af00      	add	r7, sp, #0
 8001316:	4603      	mov	r3, r0
 8001318:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800131a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800131e:	2b00      	cmp	r3, #0
 8001320:	db0b      	blt.n	800133a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001322:	79fb      	ldrb	r3, [r7, #7]
 8001324:	f003 021f 	and.w	r2, r3, #31
 8001328:	4907      	ldr	r1, [pc, #28]	; (8001348 <__NVIC_EnableIRQ+0x38>)
 800132a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800132e:	095b      	lsrs	r3, r3, #5
 8001330:	2001      	movs	r0, #1
 8001332:	fa00 f202 	lsl.w	r2, r0, r2
 8001336:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800133a:	bf00      	nop
 800133c:	370c      	adds	r7, #12
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr
 8001346:	bf00      	nop
 8001348:	e000e100 	.word	0xe000e100

0800134c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800134c:	b480      	push	{r7}
 800134e:	b083      	sub	sp, #12
 8001350:	af00      	add	r7, sp, #0
 8001352:	4603      	mov	r3, r0
 8001354:	6039      	str	r1, [r7, #0]
 8001356:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001358:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800135c:	2b00      	cmp	r3, #0
 800135e:	db0a      	blt.n	8001376 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	b2da      	uxtb	r2, r3
 8001364:	490c      	ldr	r1, [pc, #48]	; (8001398 <__NVIC_SetPriority+0x4c>)
 8001366:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800136a:	0112      	lsls	r2, r2, #4
 800136c:	b2d2      	uxtb	r2, r2
 800136e:	440b      	add	r3, r1
 8001370:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001374:	e00a      	b.n	800138c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	b2da      	uxtb	r2, r3
 800137a:	4908      	ldr	r1, [pc, #32]	; (800139c <__NVIC_SetPriority+0x50>)
 800137c:	79fb      	ldrb	r3, [r7, #7]
 800137e:	f003 030f 	and.w	r3, r3, #15
 8001382:	3b04      	subs	r3, #4
 8001384:	0112      	lsls	r2, r2, #4
 8001386:	b2d2      	uxtb	r2, r2
 8001388:	440b      	add	r3, r1
 800138a:	761a      	strb	r2, [r3, #24]
}
 800138c:	bf00      	nop
 800138e:	370c      	adds	r7, #12
 8001390:	46bd      	mov	sp, r7
 8001392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001396:	4770      	bx	lr
 8001398:	e000e100 	.word	0xe000e100
 800139c:	e000ed00 	.word	0xe000ed00

080013a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b089      	sub	sp, #36	; 0x24
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	60f8      	str	r0, [r7, #12]
 80013a8:	60b9      	str	r1, [r7, #8]
 80013aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	f003 0307 	and.w	r3, r3, #7
 80013b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013b4:	69fb      	ldr	r3, [r7, #28]
 80013b6:	f1c3 0307 	rsb	r3, r3, #7
 80013ba:	2b04      	cmp	r3, #4
 80013bc:	bf28      	it	cs
 80013be:	2304      	movcs	r3, #4
 80013c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013c2:	69fb      	ldr	r3, [r7, #28]
 80013c4:	3304      	adds	r3, #4
 80013c6:	2b06      	cmp	r3, #6
 80013c8:	d902      	bls.n	80013d0 <NVIC_EncodePriority+0x30>
 80013ca:	69fb      	ldr	r3, [r7, #28]
 80013cc:	3b03      	subs	r3, #3
 80013ce:	e000      	b.n	80013d2 <NVIC_EncodePriority+0x32>
 80013d0:	2300      	movs	r3, #0
 80013d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013d4:	f04f 32ff 	mov.w	r2, #4294967295
 80013d8:	69bb      	ldr	r3, [r7, #24]
 80013da:	fa02 f303 	lsl.w	r3, r2, r3
 80013de:	43da      	mvns	r2, r3
 80013e0:	68bb      	ldr	r3, [r7, #8]
 80013e2:	401a      	ands	r2, r3
 80013e4:	697b      	ldr	r3, [r7, #20]
 80013e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013e8:	f04f 31ff 	mov.w	r1, #4294967295
 80013ec:	697b      	ldr	r3, [r7, #20]
 80013ee:	fa01 f303 	lsl.w	r3, r1, r3
 80013f2:	43d9      	mvns	r1, r3
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013f8:	4313      	orrs	r3, r2
         );
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	3724      	adds	r7, #36	; 0x24
 80013fe:	46bd      	mov	sp, r7
 8001400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001404:	4770      	bx	lr
	...

08001408 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b082      	sub	sp, #8
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	3b01      	subs	r3, #1
 8001414:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001418:	d301      	bcc.n	800141e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800141a:	2301      	movs	r3, #1
 800141c:	e00f      	b.n	800143e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800141e:	4a0a      	ldr	r2, [pc, #40]	; (8001448 <SysTick_Config+0x40>)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	3b01      	subs	r3, #1
 8001424:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001426:	210f      	movs	r1, #15
 8001428:	f04f 30ff 	mov.w	r0, #4294967295
 800142c:	f7ff ff8e 	bl	800134c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001430:	4b05      	ldr	r3, [pc, #20]	; (8001448 <SysTick_Config+0x40>)
 8001432:	2200      	movs	r2, #0
 8001434:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001436:	4b04      	ldr	r3, [pc, #16]	; (8001448 <SysTick_Config+0x40>)
 8001438:	2207      	movs	r2, #7
 800143a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800143c:	2300      	movs	r3, #0
}
 800143e:	4618      	mov	r0, r3
 8001440:	3708      	adds	r7, #8
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	e000e010 	.word	0xe000e010

0800144c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b082      	sub	sp, #8
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001454:	6878      	ldr	r0, [r7, #4]
 8001456:	f7ff ff29 	bl	80012ac <__NVIC_SetPriorityGrouping>
}
 800145a:	bf00      	nop
 800145c:	3708      	adds	r7, #8
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}

08001462 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001462:	b580      	push	{r7, lr}
 8001464:	b086      	sub	sp, #24
 8001466:	af00      	add	r7, sp, #0
 8001468:	4603      	mov	r3, r0
 800146a:	60b9      	str	r1, [r7, #8]
 800146c:	607a      	str	r2, [r7, #4]
 800146e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001470:	f7ff ff40 	bl	80012f4 <__NVIC_GetPriorityGrouping>
 8001474:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001476:	687a      	ldr	r2, [r7, #4]
 8001478:	68b9      	ldr	r1, [r7, #8]
 800147a:	6978      	ldr	r0, [r7, #20]
 800147c:	f7ff ff90 	bl	80013a0 <NVIC_EncodePriority>
 8001480:	4602      	mov	r2, r0
 8001482:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001486:	4611      	mov	r1, r2
 8001488:	4618      	mov	r0, r3
 800148a:	f7ff ff5f 	bl	800134c <__NVIC_SetPriority>
}
 800148e:	bf00      	nop
 8001490:	3718      	adds	r7, #24
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}

08001496 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001496:	b580      	push	{r7, lr}
 8001498:	b082      	sub	sp, #8
 800149a:	af00      	add	r7, sp, #0
 800149c:	4603      	mov	r3, r0
 800149e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014a4:	4618      	mov	r0, r3
 80014a6:	f7ff ff33 	bl	8001310 <__NVIC_EnableIRQ>
}
 80014aa:	bf00      	nop
 80014ac:	3708      	adds	r7, #8
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}

080014b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014b2:	b580      	push	{r7, lr}
 80014b4:	b082      	sub	sp, #8
 80014b6:	af00      	add	r7, sp, #0
 80014b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014ba:	6878      	ldr	r0, [r7, #4]
 80014bc:	f7ff ffa4 	bl	8001408 <SysTick_Config>
 80014c0:	4603      	mov	r3, r0
}
 80014c2:	4618      	mov	r0, r3
 80014c4:	3708      	adds	r7, #8
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
	...

080014cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014cc:	b480      	push	{r7}
 80014ce:	b087      	sub	sp, #28
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
 80014d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80014d6:	2300      	movs	r3, #0
 80014d8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80014da:	e15a      	b.n	8001792 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	681a      	ldr	r2, [r3, #0]
 80014e0:	2101      	movs	r1, #1
 80014e2:	697b      	ldr	r3, [r7, #20]
 80014e4:	fa01 f303 	lsl.w	r3, r1, r3
 80014e8:	4013      	ands	r3, r2
 80014ea:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	f000 814c 	beq.w	800178c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	2b01      	cmp	r3, #1
 80014fa:	d00b      	beq.n	8001514 <HAL_GPIO_Init+0x48>
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	2b02      	cmp	r3, #2
 8001502:	d007      	beq.n	8001514 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001508:	2b11      	cmp	r3, #17
 800150a:	d003      	beq.n	8001514 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	2b12      	cmp	r3, #18
 8001512:	d130      	bne.n	8001576 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	689b      	ldr	r3, [r3, #8]
 8001518:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800151a:	697b      	ldr	r3, [r7, #20]
 800151c:	005b      	lsls	r3, r3, #1
 800151e:	2203      	movs	r2, #3
 8001520:	fa02 f303 	lsl.w	r3, r2, r3
 8001524:	43db      	mvns	r3, r3
 8001526:	693a      	ldr	r2, [r7, #16]
 8001528:	4013      	ands	r3, r2
 800152a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	68da      	ldr	r2, [r3, #12]
 8001530:	697b      	ldr	r3, [r7, #20]
 8001532:	005b      	lsls	r3, r3, #1
 8001534:	fa02 f303 	lsl.w	r3, r2, r3
 8001538:	693a      	ldr	r2, [r7, #16]
 800153a:	4313      	orrs	r3, r2
 800153c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	693a      	ldr	r2, [r7, #16]
 8001542:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800154a:	2201      	movs	r2, #1
 800154c:	697b      	ldr	r3, [r7, #20]
 800154e:	fa02 f303 	lsl.w	r3, r2, r3
 8001552:	43db      	mvns	r3, r3
 8001554:	693a      	ldr	r2, [r7, #16]
 8001556:	4013      	ands	r3, r2
 8001558:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	091b      	lsrs	r3, r3, #4
 8001560:	f003 0201 	and.w	r2, r3, #1
 8001564:	697b      	ldr	r3, [r7, #20]
 8001566:	fa02 f303 	lsl.w	r3, r2, r3
 800156a:	693a      	ldr	r2, [r7, #16]
 800156c:	4313      	orrs	r3, r2
 800156e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	693a      	ldr	r2, [r7, #16]
 8001574:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	68db      	ldr	r3, [r3, #12]
 800157a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800157c:	697b      	ldr	r3, [r7, #20]
 800157e:	005b      	lsls	r3, r3, #1
 8001580:	2203      	movs	r2, #3
 8001582:	fa02 f303 	lsl.w	r3, r2, r3
 8001586:	43db      	mvns	r3, r3
 8001588:	693a      	ldr	r2, [r7, #16]
 800158a:	4013      	ands	r3, r2
 800158c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	689a      	ldr	r2, [r3, #8]
 8001592:	697b      	ldr	r3, [r7, #20]
 8001594:	005b      	lsls	r3, r3, #1
 8001596:	fa02 f303 	lsl.w	r3, r2, r3
 800159a:	693a      	ldr	r2, [r7, #16]
 800159c:	4313      	orrs	r3, r2
 800159e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	693a      	ldr	r2, [r7, #16]
 80015a4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	2b02      	cmp	r3, #2
 80015ac:	d003      	beq.n	80015b6 <HAL_GPIO_Init+0xea>
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	685b      	ldr	r3, [r3, #4]
 80015b2:	2b12      	cmp	r3, #18
 80015b4:	d123      	bne.n	80015fe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80015b6:	697b      	ldr	r3, [r7, #20]
 80015b8:	08da      	lsrs	r2, r3, #3
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	3208      	adds	r2, #8
 80015be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015c2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80015c4:	697b      	ldr	r3, [r7, #20]
 80015c6:	f003 0307 	and.w	r3, r3, #7
 80015ca:	009b      	lsls	r3, r3, #2
 80015cc:	220f      	movs	r2, #15
 80015ce:	fa02 f303 	lsl.w	r3, r2, r3
 80015d2:	43db      	mvns	r3, r3
 80015d4:	693a      	ldr	r2, [r7, #16]
 80015d6:	4013      	ands	r3, r2
 80015d8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	691a      	ldr	r2, [r3, #16]
 80015de:	697b      	ldr	r3, [r7, #20]
 80015e0:	f003 0307 	and.w	r3, r3, #7
 80015e4:	009b      	lsls	r3, r3, #2
 80015e6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ea:	693a      	ldr	r2, [r7, #16]
 80015ec:	4313      	orrs	r3, r2
 80015ee:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80015f0:	697b      	ldr	r3, [r7, #20]
 80015f2:	08da      	lsrs	r2, r3, #3
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	3208      	adds	r2, #8
 80015f8:	6939      	ldr	r1, [r7, #16]
 80015fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001604:	697b      	ldr	r3, [r7, #20]
 8001606:	005b      	lsls	r3, r3, #1
 8001608:	2203      	movs	r2, #3
 800160a:	fa02 f303 	lsl.w	r3, r2, r3
 800160e:	43db      	mvns	r3, r3
 8001610:	693a      	ldr	r2, [r7, #16]
 8001612:	4013      	ands	r3, r2
 8001614:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	f003 0203 	and.w	r2, r3, #3
 800161e:	697b      	ldr	r3, [r7, #20]
 8001620:	005b      	lsls	r3, r3, #1
 8001622:	fa02 f303 	lsl.w	r3, r2, r3
 8001626:	693a      	ldr	r2, [r7, #16]
 8001628:	4313      	orrs	r3, r2
 800162a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	693a      	ldr	r2, [r7, #16]
 8001630:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800163a:	2b00      	cmp	r3, #0
 800163c:	f000 80a6 	beq.w	800178c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001640:	4b5b      	ldr	r3, [pc, #364]	; (80017b0 <HAL_GPIO_Init+0x2e4>)
 8001642:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001644:	4a5a      	ldr	r2, [pc, #360]	; (80017b0 <HAL_GPIO_Init+0x2e4>)
 8001646:	f043 0301 	orr.w	r3, r3, #1
 800164a:	6613      	str	r3, [r2, #96]	; 0x60
 800164c:	4b58      	ldr	r3, [pc, #352]	; (80017b0 <HAL_GPIO_Init+0x2e4>)
 800164e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001650:	f003 0301 	and.w	r3, r3, #1
 8001654:	60bb      	str	r3, [r7, #8]
 8001656:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001658:	4a56      	ldr	r2, [pc, #344]	; (80017b4 <HAL_GPIO_Init+0x2e8>)
 800165a:	697b      	ldr	r3, [r7, #20]
 800165c:	089b      	lsrs	r3, r3, #2
 800165e:	3302      	adds	r3, #2
 8001660:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001664:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001666:	697b      	ldr	r3, [r7, #20]
 8001668:	f003 0303 	and.w	r3, r3, #3
 800166c:	009b      	lsls	r3, r3, #2
 800166e:	220f      	movs	r2, #15
 8001670:	fa02 f303 	lsl.w	r3, r2, r3
 8001674:	43db      	mvns	r3, r3
 8001676:	693a      	ldr	r2, [r7, #16]
 8001678:	4013      	ands	r3, r2
 800167a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001682:	d01f      	beq.n	80016c4 <HAL_GPIO_Init+0x1f8>
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	4a4c      	ldr	r2, [pc, #304]	; (80017b8 <HAL_GPIO_Init+0x2ec>)
 8001688:	4293      	cmp	r3, r2
 800168a:	d019      	beq.n	80016c0 <HAL_GPIO_Init+0x1f4>
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	4a4b      	ldr	r2, [pc, #300]	; (80017bc <HAL_GPIO_Init+0x2f0>)
 8001690:	4293      	cmp	r3, r2
 8001692:	d013      	beq.n	80016bc <HAL_GPIO_Init+0x1f0>
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	4a4a      	ldr	r2, [pc, #296]	; (80017c0 <HAL_GPIO_Init+0x2f4>)
 8001698:	4293      	cmp	r3, r2
 800169a:	d00d      	beq.n	80016b8 <HAL_GPIO_Init+0x1ec>
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	4a49      	ldr	r2, [pc, #292]	; (80017c4 <HAL_GPIO_Init+0x2f8>)
 80016a0:	4293      	cmp	r3, r2
 80016a2:	d007      	beq.n	80016b4 <HAL_GPIO_Init+0x1e8>
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	4a48      	ldr	r2, [pc, #288]	; (80017c8 <HAL_GPIO_Init+0x2fc>)
 80016a8:	4293      	cmp	r3, r2
 80016aa:	d101      	bne.n	80016b0 <HAL_GPIO_Init+0x1e4>
 80016ac:	2305      	movs	r3, #5
 80016ae:	e00a      	b.n	80016c6 <HAL_GPIO_Init+0x1fa>
 80016b0:	2306      	movs	r3, #6
 80016b2:	e008      	b.n	80016c6 <HAL_GPIO_Init+0x1fa>
 80016b4:	2304      	movs	r3, #4
 80016b6:	e006      	b.n	80016c6 <HAL_GPIO_Init+0x1fa>
 80016b8:	2303      	movs	r3, #3
 80016ba:	e004      	b.n	80016c6 <HAL_GPIO_Init+0x1fa>
 80016bc:	2302      	movs	r3, #2
 80016be:	e002      	b.n	80016c6 <HAL_GPIO_Init+0x1fa>
 80016c0:	2301      	movs	r3, #1
 80016c2:	e000      	b.n	80016c6 <HAL_GPIO_Init+0x1fa>
 80016c4:	2300      	movs	r3, #0
 80016c6:	697a      	ldr	r2, [r7, #20]
 80016c8:	f002 0203 	and.w	r2, r2, #3
 80016cc:	0092      	lsls	r2, r2, #2
 80016ce:	4093      	lsls	r3, r2
 80016d0:	693a      	ldr	r2, [r7, #16]
 80016d2:	4313      	orrs	r3, r2
 80016d4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80016d6:	4937      	ldr	r1, [pc, #220]	; (80017b4 <HAL_GPIO_Init+0x2e8>)
 80016d8:	697b      	ldr	r3, [r7, #20]
 80016da:	089b      	lsrs	r3, r3, #2
 80016dc:	3302      	adds	r3, #2
 80016de:	693a      	ldr	r2, [r7, #16]
 80016e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80016e4:	4b39      	ldr	r3, [pc, #228]	; (80017cc <HAL_GPIO_Init+0x300>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	43db      	mvns	r3, r3
 80016ee:	693a      	ldr	r2, [r7, #16]
 80016f0:	4013      	ands	r3, r2
 80016f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d003      	beq.n	8001708 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001700:	693a      	ldr	r2, [r7, #16]
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	4313      	orrs	r3, r2
 8001706:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001708:	4a30      	ldr	r2, [pc, #192]	; (80017cc <HAL_GPIO_Init+0x300>)
 800170a:	693b      	ldr	r3, [r7, #16]
 800170c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800170e:	4b2f      	ldr	r3, [pc, #188]	; (80017cc <HAL_GPIO_Init+0x300>)
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	43db      	mvns	r3, r3
 8001718:	693a      	ldr	r2, [r7, #16]
 800171a:	4013      	ands	r3, r2
 800171c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001726:	2b00      	cmp	r3, #0
 8001728:	d003      	beq.n	8001732 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800172a:	693a      	ldr	r2, [r7, #16]
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	4313      	orrs	r3, r2
 8001730:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001732:	4a26      	ldr	r2, [pc, #152]	; (80017cc <HAL_GPIO_Init+0x300>)
 8001734:	693b      	ldr	r3, [r7, #16]
 8001736:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001738:	4b24      	ldr	r3, [pc, #144]	; (80017cc <HAL_GPIO_Init+0x300>)
 800173a:	689b      	ldr	r3, [r3, #8]
 800173c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	43db      	mvns	r3, r3
 8001742:	693a      	ldr	r2, [r7, #16]
 8001744:	4013      	ands	r3, r2
 8001746:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001750:	2b00      	cmp	r3, #0
 8001752:	d003      	beq.n	800175c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001754:	693a      	ldr	r2, [r7, #16]
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	4313      	orrs	r3, r2
 800175a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800175c:	4a1b      	ldr	r2, [pc, #108]	; (80017cc <HAL_GPIO_Init+0x300>)
 800175e:	693b      	ldr	r3, [r7, #16]
 8001760:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001762:	4b1a      	ldr	r3, [pc, #104]	; (80017cc <HAL_GPIO_Init+0x300>)
 8001764:	68db      	ldr	r3, [r3, #12]
 8001766:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	43db      	mvns	r3, r3
 800176c:	693a      	ldr	r2, [r7, #16]
 800176e:	4013      	ands	r3, r2
 8001770:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800177a:	2b00      	cmp	r3, #0
 800177c:	d003      	beq.n	8001786 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800177e:	693a      	ldr	r2, [r7, #16]
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	4313      	orrs	r3, r2
 8001784:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001786:	4a11      	ldr	r2, [pc, #68]	; (80017cc <HAL_GPIO_Init+0x300>)
 8001788:	693b      	ldr	r3, [r7, #16]
 800178a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800178c:	697b      	ldr	r3, [r7, #20]
 800178e:	3301      	adds	r3, #1
 8001790:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	681a      	ldr	r2, [r3, #0]
 8001796:	697b      	ldr	r3, [r7, #20]
 8001798:	fa22 f303 	lsr.w	r3, r2, r3
 800179c:	2b00      	cmp	r3, #0
 800179e:	f47f ae9d 	bne.w	80014dc <HAL_GPIO_Init+0x10>
  }
}
 80017a2:	bf00      	nop
 80017a4:	371c      	adds	r7, #28
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr
 80017ae:	bf00      	nop
 80017b0:	40021000 	.word	0x40021000
 80017b4:	40010000 	.word	0x40010000
 80017b8:	48000400 	.word	0x48000400
 80017bc:	48000800 	.word	0x48000800
 80017c0:	48000c00 	.word	0x48000c00
 80017c4:	48001000 	.word	0x48001000
 80017c8:	48001400 	.word	0x48001400
 80017cc:	40010400 	.word	0x40010400

080017d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b083      	sub	sp, #12
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
 80017d8:	460b      	mov	r3, r1
 80017da:	807b      	strh	r3, [r7, #2]
 80017dc:	4613      	mov	r3, r2
 80017de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80017e0:	787b      	ldrb	r3, [r7, #1]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d003      	beq.n	80017ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80017e6:	887a      	ldrh	r2, [r7, #2]
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80017ec:	e002      	b.n	80017f4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80017ee:	887a      	ldrh	r2, [r7, #2]
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80017f4:	bf00      	nop
 80017f6:	370c      	adds	r7, #12
 80017f8:	46bd      	mov	sp, r7
 80017fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fe:	4770      	bx	lr

08001800 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001800:	b480      	push	{r7}
 8001802:	b085      	sub	sp, #20
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
 8001808:	460b      	mov	r3, r1
 800180a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	695b      	ldr	r3, [r3, #20]
 8001810:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001812:	887a      	ldrh	r2, [r7, #2]
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	4013      	ands	r3, r2
 8001818:	041a      	lsls	r2, r3, #16
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	43d9      	mvns	r1, r3
 800181e:	887b      	ldrh	r3, [r7, #2]
 8001820:	400b      	ands	r3, r1
 8001822:	431a      	orrs	r2, r3
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	619a      	str	r2, [r3, #24]
}
 8001828:	bf00      	nop
 800182a:	3714      	adds	r7, #20
 800182c:	46bd      	mov	sp, r7
 800182e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001832:	4770      	bx	lr

08001834 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001834:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001836:	b08b      	sub	sp, #44	; 0x2c
 8001838:	af06      	add	r7, sp, #24
 800183a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d101      	bne.n	8001846 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001842:	2301      	movs	r3, #1
 8001844:	e0d7      	b.n	80019f6 <HAL_PCD_Init+0x1c2>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 800184c:	b2db      	uxtb	r3, r3
 800184e:	2b00      	cmp	r3, #0
 8001850:	d106      	bne.n	8001860 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	2200      	movs	r2, #0
 8001856:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800185a:	6878      	ldr	r0, [r7, #4]
 800185c:	f007 fa64 	bl	8008d28 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	2203      	movs	r2, #3
 8001864:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4618      	mov	r0, r3
 800186e:	f003 fbc0 	bl	8004ff2 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001872:	2300      	movs	r3, #0
 8001874:	73fb      	strb	r3, [r7, #15]
 8001876:	e04c      	b.n	8001912 <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001878:	7bfb      	ldrb	r3, [r7, #15]
 800187a:	6879      	ldr	r1, [r7, #4]
 800187c:	1c5a      	adds	r2, r3, #1
 800187e:	4613      	mov	r3, r2
 8001880:	009b      	lsls	r3, r3, #2
 8001882:	4413      	add	r3, r2
 8001884:	00db      	lsls	r3, r3, #3
 8001886:	440b      	add	r3, r1
 8001888:	3301      	adds	r3, #1
 800188a:	2201      	movs	r2, #1
 800188c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800188e:	7bfb      	ldrb	r3, [r7, #15]
 8001890:	6879      	ldr	r1, [r7, #4]
 8001892:	1c5a      	adds	r2, r3, #1
 8001894:	4613      	mov	r3, r2
 8001896:	009b      	lsls	r3, r3, #2
 8001898:	4413      	add	r3, r2
 800189a:	00db      	lsls	r3, r3, #3
 800189c:	440b      	add	r3, r1
 800189e:	7bfa      	ldrb	r2, [r7, #15]
 80018a0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80018a2:	7bfa      	ldrb	r2, [r7, #15]
 80018a4:	7bfb      	ldrb	r3, [r7, #15]
 80018a6:	b298      	uxth	r0, r3
 80018a8:	6879      	ldr	r1, [r7, #4]
 80018aa:	4613      	mov	r3, r2
 80018ac:	009b      	lsls	r3, r3, #2
 80018ae:	4413      	add	r3, r2
 80018b0:	00db      	lsls	r3, r3, #3
 80018b2:	440b      	add	r3, r1
 80018b4:	3336      	adds	r3, #54	; 0x36
 80018b6:	4602      	mov	r2, r0
 80018b8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80018ba:	7bfb      	ldrb	r3, [r7, #15]
 80018bc:	6879      	ldr	r1, [r7, #4]
 80018be:	1c5a      	adds	r2, r3, #1
 80018c0:	4613      	mov	r3, r2
 80018c2:	009b      	lsls	r3, r3, #2
 80018c4:	4413      	add	r3, r2
 80018c6:	00db      	lsls	r3, r3, #3
 80018c8:	440b      	add	r3, r1
 80018ca:	3303      	adds	r3, #3
 80018cc:	2200      	movs	r2, #0
 80018ce:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80018d0:	7bfa      	ldrb	r2, [r7, #15]
 80018d2:	6879      	ldr	r1, [r7, #4]
 80018d4:	4613      	mov	r3, r2
 80018d6:	009b      	lsls	r3, r3, #2
 80018d8:	4413      	add	r3, r2
 80018da:	00db      	lsls	r3, r3, #3
 80018dc:	440b      	add	r3, r1
 80018de:	3338      	adds	r3, #56	; 0x38
 80018e0:	2200      	movs	r2, #0
 80018e2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80018e4:	7bfa      	ldrb	r2, [r7, #15]
 80018e6:	6879      	ldr	r1, [r7, #4]
 80018e8:	4613      	mov	r3, r2
 80018ea:	009b      	lsls	r3, r3, #2
 80018ec:	4413      	add	r3, r2
 80018ee:	00db      	lsls	r3, r3, #3
 80018f0:	440b      	add	r3, r1
 80018f2:	333c      	adds	r3, #60	; 0x3c
 80018f4:	2200      	movs	r2, #0
 80018f6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80018f8:	7bfa      	ldrb	r2, [r7, #15]
 80018fa:	6879      	ldr	r1, [r7, #4]
 80018fc:	4613      	mov	r3, r2
 80018fe:	009b      	lsls	r3, r3, #2
 8001900:	4413      	add	r3, r2
 8001902:	00db      	lsls	r3, r3, #3
 8001904:	440b      	add	r3, r1
 8001906:	3340      	adds	r3, #64	; 0x40
 8001908:	2200      	movs	r2, #0
 800190a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800190c:	7bfb      	ldrb	r3, [r7, #15]
 800190e:	3301      	adds	r3, #1
 8001910:	73fb      	strb	r3, [r7, #15]
 8001912:	7bfa      	ldrb	r2, [r7, #15]
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	429a      	cmp	r2, r3
 800191a:	d3ad      	bcc.n	8001878 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800191c:	2300      	movs	r3, #0
 800191e:	73fb      	strb	r3, [r7, #15]
 8001920:	e044      	b.n	80019ac <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001922:	7bfa      	ldrb	r2, [r7, #15]
 8001924:	6879      	ldr	r1, [r7, #4]
 8001926:	4613      	mov	r3, r2
 8001928:	009b      	lsls	r3, r3, #2
 800192a:	4413      	add	r3, r2
 800192c:	00db      	lsls	r3, r3, #3
 800192e:	440b      	add	r3, r1
 8001930:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001934:	2200      	movs	r2, #0
 8001936:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001938:	7bfa      	ldrb	r2, [r7, #15]
 800193a:	6879      	ldr	r1, [r7, #4]
 800193c:	4613      	mov	r3, r2
 800193e:	009b      	lsls	r3, r3, #2
 8001940:	4413      	add	r3, r2
 8001942:	00db      	lsls	r3, r3, #3
 8001944:	440b      	add	r3, r1
 8001946:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800194a:	7bfa      	ldrb	r2, [r7, #15]
 800194c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800194e:	7bfa      	ldrb	r2, [r7, #15]
 8001950:	6879      	ldr	r1, [r7, #4]
 8001952:	4613      	mov	r3, r2
 8001954:	009b      	lsls	r3, r3, #2
 8001956:	4413      	add	r3, r2
 8001958:	00db      	lsls	r3, r3, #3
 800195a:	440b      	add	r3, r1
 800195c:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001960:	2200      	movs	r2, #0
 8001962:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001964:	7bfa      	ldrb	r2, [r7, #15]
 8001966:	6879      	ldr	r1, [r7, #4]
 8001968:	4613      	mov	r3, r2
 800196a:	009b      	lsls	r3, r3, #2
 800196c:	4413      	add	r3, r2
 800196e:	00db      	lsls	r3, r3, #3
 8001970:	440b      	add	r3, r1
 8001972:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001976:	2200      	movs	r2, #0
 8001978:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800197a:	7bfa      	ldrb	r2, [r7, #15]
 800197c:	6879      	ldr	r1, [r7, #4]
 800197e:	4613      	mov	r3, r2
 8001980:	009b      	lsls	r3, r3, #2
 8001982:	4413      	add	r3, r2
 8001984:	00db      	lsls	r3, r3, #3
 8001986:	440b      	add	r3, r1
 8001988:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800198c:	2200      	movs	r2, #0
 800198e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001990:	7bfa      	ldrb	r2, [r7, #15]
 8001992:	6879      	ldr	r1, [r7, #4]
 8001994:	4613      	mov	r3, r2
 8001996:	009b      	lsls	r3, r3, #2
 8001998:	4413      	add	r3, r2
 800199a:	00db      	lsls	r3, r3, #3
 800199c:	440b      	add	r3, r1
 800199e:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80019a2:	2200      	movs	r2, #0
 80019a4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80019a6:	7bfb      	ldrb	r3, [r7, #15]
 80019a8:	3301      	adds	r3, #1
 80019aa:	73fb      	strb	r3, [r7, #15]
 80019ac:	7bfa      	ldrb	r2, [r7, #15]
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	429a      	cmp	r2, r3
 80019b4:	d3b5      	bcc.n	8001922 <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	603b      	str	r3, [r7, #0]
 80019bc:	687e      	ldr	r6, [r7, #4]
 80019be:	466d      	mov	r5, sp
 80019c0:	f106 0410 	add.w	r4, r6, #16
 80019c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019c6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019c8:	6823      	ldr	r3, [r4, #0]
 80019ca:	602b      	str	r3, [r5, #0]
 80019cc:	1d33      	adds	r3, r6, #4
 80019ce:	cb0e      	ldmia	r3, {r1, r2, r3}
 80019d0:	6838      	ldr	r0, [r7, #0]
 80019d2:	f003 fb29 	bl	8005028 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	2200      	movs	r2, #0
 80019da:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	2201      	movs	r2, #1
 80019e2:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	69db      	ldr	r3, [r3, #28]
 80019ea:	2b01      	cmp	r3, #1
 80019ec:	d102      	bne.n	80019f4 <HAL_PCD_Init+0x1c0>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80019ee:	6878      	ldr	r0, [r7, #4]
 80019f0:	f001 fa5e 	bl	8002eb0 <HAL_PCDEx_ActivateLPM>
  }
  
  return HAL_OK;
 80019f4:	2300      	movs	r3, #0
}
 80019f6:	4618      	mov	r0, r3
 80019f8:	3714      	adds	r7, #20
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080019fe <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80019fe:	b580      	push	{r7, lr}
 8001a00:	b082      	sub	sp, #8
 8001a02:	af00      	add	r7, sp, #0
 8001a04:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001a0c:	2b01      	cmp	r3, #1
 8001a0e:	d101      	bne.n	8001a14 <HAL_PCD_Start+0x16>
 8001a10:	2302      	movs	r3, #2
 8001a12:	e012      	b.n	8001a3a <HAL_PCD_Start+0x3c>
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2201      	movs	r2, #1
 8001a18:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4618      	mov	r0, r3
 8001a22:	f003 facf 	bl	8004fc4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f005 fabb 	bl	8006fa6 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2200      	movs	r2, #0
 8001a34:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001a38:	2300      	movs	r3, #0
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	3708      	adds	r7, #8
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}

08001a42 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001a42:	b580      	push	{r7, lr}
 8001a44:	b082      	sub	sp, #8
 8001a46:	af00      	add	r7, sp, #0
 8001a48:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f005 fac0 	bl	8006fd4 <USB_ReadInterrupts>
 8001a54:	4603      	mov	r3, r0
 8001a56:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001a5a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001a5e:	d102      	bne.n	8001a66 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001a60:	6878      	ldr	r0, [r7, #4]
 8001a62:	f000 fb5b 	bl	800211c <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f005 fab2 	bl	8006fd4 <USB_ReadInterrupts>
 8001a70:	4603      	mov	r3, r0
 8001a72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a7a:	d112      	bne.n	8001aa2 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001a84:	b29a      	uxth	r2, r3
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001a8e:	b292      	uxth	r2, r2
 8001a90:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001a94:	6878      	ldr	r0, [r7, #4]
 8001a96:	f007 f9c2 	bl	8008e1e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001a9a:	2100      	movs	r1, #0
 8001a9c:	6878      	ldr	r0, [r7, #4]
 8001a9e:	f000 f91e 	bl	8001cde <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f005 fa94 	bl	8006fd4 <USB_ReadInterrupts>
 8001aac:	4603      	mov	r3, r0
 8001aae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ab2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001ab6:	d10b      	bne.n	8001ad0 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001ac0:	b29a      	uxth	r2, r3
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001aca:	b292      	uxth	r2, r2
 8001acc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f005 fa7d 	bl	8006fd4 <USB_ReadInterrupts>
 8001ada:	4603      	mov	r3, r0
 8001adc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001ae0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001ae4:	d10b      	bne.n	8001afe <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001aee:	b29a      	uxth	r2, r3
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001af8:	b292      	uxth	r2, r2
 8001afa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4618      	mov	r0, r3
 8001b04:	f005 fa66 	bl	8006fd4 <USB_ReadInterrupts>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b12:	d133      	bne.n	8001b7c <HAL_PCD_IRQHandler+0x13a>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001b1c:	b29a      	uxth	r2, r3
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f022 0204 	bic.w	r2, r2, #4
 8001b26:	b292      	uxth	r2, r2
 8001b28:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001b34:	b29a      	uxth	r2, r3
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f022 0208 	bic.w	r2, r2, #8
 8001b3e:	b292      	uxth	r2, r2
 8001b40:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8001b4a:	2b01      	cmp	r3, #1
 8001b4c:	d107      	bne.n	8001b5e <HAL_PCD_IRQHandler+0x11c>
    {
      hpcd->LPM_State = LPM_L0;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2200      	movs	r2, #0
 8001b52:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001b56:	2100      	movs	r1, #0
 8001b58:	6878      	ldr	r0, [r7, #4]
 8001b5a:	f007 fb55 	bl	8009208 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001b5e:	6878      	ldr	r0, [r7, #4]
 8001b60:	f007 f996 	bl	8008e90 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001b6c:	b29a      	uxth	r2, r3
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001b76:	b292      	uxth	r2, r2
 8001b78:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4618      	mov	r0, r3
 8001b82:	f005 fa27 	bl	8006fd4 <USB_ReadInterrupts>
 8001b86:	4603      	mov	r3, r0
 8001b88:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b8c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001b90:	d126      	bne.n	8001be0 <HAL_PCD_IRQHandler+0x19e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001b9a:	b29a      	uxth	r2, r3
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f042 0208 	orr.w	r2, r2, #8
 8001ba4:	b292      	uxth	r2, r2
 8001ba6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001bb2:	b29a      	uxth	r2, r3
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001bbc:	b292      	uxth	r2, r2
 8001bbe:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001bca:	b29a      	uxth	r2, r3
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f042 0204 	orr.w	r2, r2, #4
 8001bd4:	b292      	uxth	r2, r2
 8001bd6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001bda:	6878      	ldr	r0, [r7, #4]
 8001bdc:	f007 f93e 	bl	8008e5c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  /* Handle LPM Interrupt */
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4618      	mov	r0, r3
 8001be6:	f005 f9f5 	bl	8006fd4 <USB_ReadInterrupts>
 8001bea:	4603      	mov	r3, r0
 8001bec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bf0:	2b80      	cmp	r3, #128	; 0x80
 8001bf2:	d13f      	bne.n	8001c74 <HAL_PCD_IRQHandler+0x232>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001bfc:	b29a      	uxth	r2, r3
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001c06:	b292      	uxth	r2, r2
 8001c08:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d12b      	bne.n	8001c6e <HAL_PCD_IRQHandler+0x22c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001c1e:	b29a      	uxth	r2, r3
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f042 0204 	orr.w	r2, r2, #4
 8001c28:	b292      	uxth	r2, r2
 8001c2a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001c36:	b29a      	uxth	r2, r3
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f042 0208 	orr.w	r2, r2, #8
 8001c40:	b292      	uxth	r2, r2
 8001c42:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2201      	movs	r2, #1
 8001c4a:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001c56:	b29b      	uxth	r3, r3
 8001c58:	089b      	lsrs	r3, r3, #2
 8001c5a:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001c64:	2101      	movs	r1, #1
 8001c66:	6878      	ldr	r0, [r7, #4]
 8001c68:	f007 face 	bl	8009208 <HAL_PCDEx_LPM_Callback>
 8001c6c:	e002      	b.n	8001c74 <HAL_PCD_IRQHandler+0x232>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 8001c6e:	6878      	ldr	r0, [r7, #4]
 8001c70:	f007 f8f4 	bl	8008e5c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f005 f9ab 	bl	8006fd4 <USB_ReadInterrupts>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c88:	d10e      	bne.n	8001ca8 <HAL_PCD_IRQHandler+0x266>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001c92:	b29a      	uxth	r2, r3
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001c9c:	b292      	uxth	r2, r2
 8001c9e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001ca2:	6878      	ldr	r0, [r7, #4]
 8001ca4:	f007 f8ad 	bl	8008e02 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4618      	mov	r0, r3
 8001cae:	f005 f991 	bl	8006fd4 <USB_ReadInterrupts>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cb8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001cbc:	d10b      	bne.n	8001cd6 <HAL_PCD_IRQHandler+0x294>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001cc6:	b29a      	uxth	r2, r3
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001cd0:	b292      	uxth	r2, r2
 8001cd2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8001cd6:	bf00      	nop
 8001cd8:	3708      	adds	r7, #8
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}

08001cde <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001cde:	b580      	push	{r7, lr}
 8001ce0:	b082      	sub	sp, #8
 8001ce2:	af00      	add	r7, sp, #0
 8001ce4:	6078      	str	r0, [r7, #4]
 8001ce6:	460b      	mov	r3, r1
 8001ce8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001cf0:	2b01      	cmp	r3, #1
 8001cf2:	d101      	bne.n	8001cf8 <HAL_PCD_SetAddress+0x1a>
 8001cf4:	2302      	movs	r3, #2
 8001cf6:	e013      	b.n	8001d20 <HAL_PCD_SetAddress+0x42>
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	78fa      	ldrb	r2, [r7, #3]
 8001d04:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	78fa      	ldrb	r2, [r7, #3]
 8001d0e:	4611      	mov	r1, r2
 8001d10:	4618      	mov	r0, r3
 8001d12:	f005 f934 	bl	8006f7e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2200      	movs	r2, #0
 8001d1a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001d1e:	2300      	movs	r3, #0
}
 8001d20:	4618      	mov	r0, r3
 8001d22:	3708      	adds	r7, #8
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}

08001d28 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b084      	sub	sp, #16
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
 8001d30:	4608      	mov	r0, r1
 8001d32:	4611      	mov	r1, r2
 8001d34:	461a      	mov	r2, r3
 8001d36:	4603      	mov	r3, r0
 8001d38:	70fb      	strb	r3, [r7, #3]
 8001d3a:	460b      	mov	r3, r1
 8001d3c:	803b      	strh	r3, [r7, #0]
 8001d3e:	4613      	mov	r3, r2
 8001d40:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001d42:	2300      	movs	r3, #0
 8001d44:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001d46:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	da0e      	bge.n	8001d6c <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d4e:	78fb      	ldrb	r3, [r7, #3]
 8001d50:	f003 0307 	and.w	r3, r3, #7
 8001d54:	1c5a      	adds	r2, r3, #1
 8001d56:	4613      	mov	r3, r2
 8001d58:	009b      	lsls	r3, r3, #2
 8001d5a:	4413      	add	r3, r2
 8001d5c:	00db      	lsls	r3, r3, #3
 8001d5e:	687a      	ldr	r2, [r7, #4]
 8001d60:	4413      	add	r3, r2
 8001d62:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	2201      	movs	r2, #1
 8001d68:	705a      	strb	r2, [r3, #1]
 8001d6a:	e00e      	b.n	8001d8a <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d6c:	78fb      	ldrb	r3, [r7, #3]
 8001d6e:	f003 0207 	and.w	r2, r3, #7
 8001d72:	4613      	mov	r3, r2
 8001d74:	009b      	lsls	r3, r3, #2
 8001d76:	4413      	add	r3, r2
 8001d78:	00db      	lsls	r3, r3, #3
 8001d7a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001d7e:	687a      	ldr	r2, [r7, #4]
 8001d80:	4413      	add	r3, r2
 8001d82:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	2200      	movs	r2, #0
 8001d88:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001d8a:	78fb      	ldrb	r3, [r7, #3]
 8001d8c:	f003 0307 	and.w	r3, r3, #7
 8001d90:	b2da      	uxtb	r2, r3
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001d96:	883a      	ldrh	r2, [r7, #0]
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	78ba      	ldrb	r2, [r7, #2]
 8001da0:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	785b      	ldrb	r3, [r3, #1]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d004      	beq.n	8001db4 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	781b      	ldrb	r3, [r3, #0]
 8001dae:	b29a      	uxth	r2, r3
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001db4:	78bb      	ldrb	r3, [r7, #2]
 8001db6:	2b02      	cmp	r3, #2
 8001db8:	d102      	bne.n	8001dc0 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001dc6:	2b01      	cmp	r3, #1
 8001dc8:	d101      	bne.n	8001dce <HAL_PCD_EP_Open+0xa6>
 8001dca:	2302      	movs	r3, #2
 8001dcc:	e00e      	b.n	8001dec <HAL_PCD_EP_Open+0xc4>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2201      	movs	r2, #1
 8001dd2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	68f9      	ldr	r1, [r7, #12]
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f003 f945 	bl	800506c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2200      	movs	r2, #0
 8001de6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8001dea:	7afb      	ldrb	r3, [r7, #11]
}
 8001dec:	4618      	mov	r0, r3
 8001dee:	3710      	adds	r7, #16
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bd80      	pop	{r7, pc}

08001df4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b084      	sub	sp, #16
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
 8001dfc:	460b      	mov	r3, r1
 8001dfe:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001e00:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	da0e      	bge.n	8001e26 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e08:	78fb      	ldrb	r3, [r7, #3]
 8001e0a:	f003 0307 	and.w	r3, r3, #7
 8001e0e:	1c5a      	adds	r2, r3, #1
 8001e10:	4613      	mov	r3, r2
 8001e12:	009b      	lsls	r3, r3, #2
 8001e14:	4413      	add	r3, r2
 8001e16:	00db      	lsls	r3, r3, #3
 8001e18:	687a      	ldr	r2, [r7, #4]
 8001e1a:	4413      	add	r3, r2
 8001e1c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	2201      	movs	r2, #1
 8001e22:	705a      	strb	r2, [r3, #1]
 8001e24:	e00e      	b.n	8001e44 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e26:	78fb      	ldrb	r3, [r7, #3]
 8001e28:	f003 0207 	and.w	r2, r3, #7
 8001e2c:	4613      	mov	r3, r2
 8001e2e:	009b      	lsls	r3, r3, #2
 8001e30:	4413      	add	r3, r2
 8001e32:	00db      	lsls	r3, r3, #3
 8001e34:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001e38:	687a      	ldr	r2, [r7, #4]
 8001e3a:	4413      	add	r3, r2
 8001e3c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	2200      	movs	r2, #0
 8001e42:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001e44:	78fb      	ldrb	r3, [r7, #3]
 8001e46:	f003 0307 	and.w	r3, r3, #7
 8001e4a:	b2da      	uxtb	r2, r3
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001e56:	2b01      	cmp	r3, #1
 8001e58:	d101      	bne.n	8001e5e <HAL_PCD_EP_Close+0x6a>
 8001e5a:	2302      	movs	r3, #2
 8001e5c:	e00e      	b.n	8001e7c <HAL_PCD_EP_Close+0x88>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2201      	movs	r2, #1
 8001e62:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	68f9      	ldr	r1, [r7, #12]
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	f003 fc6b 	bl	8005748 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2200      	movs	r2, #0
 8001e76:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8001e7a:	2300      	movs	r3, #0
}
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	3710      	adds	r7, #16
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd80      	pop	{r7, pc}

08001e84 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b086      	sub	sp, #24
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	60f8      	str	r0, [r7, #12]
 8001e8c:	607a      	str	r2, [r7, #4]
 8001e8e:	603b      	str	r3, [r7, #0]
 8001e90:	460b      	mov	r3, r1
 8001e92:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e94:	7afb      	ldrb	r3, [r7, #11]
 8001e96:	f003 0207 	and.w	r2, r3, #7
 8001e9a:	4613      	mov	r3, r2
 8001e9c:	009b      	lsls	r3, r3, #2
 8001e9e:	4413      	add	r3, r2
 8001ea0:	00db      	lsls	r3, r3, #3
 8001ea2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001ea6:	68fa      	ldr	r2, [r7, #12]
 8001ea8:	4413      	add	r3, r2
 8001eaa:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001eac:	697b      	ldr	r3, [r7, #20]
 8001eae:	687a      	ldr	r2, [r7, #4]
 8001eb0:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001eb2:	697b      	ldr	r3, [r7, #20]
 8001eb4:	683a      	ldr	r2, [r7, #0]
 8001eb6:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001eb8:	697b      	ldr	r3, [r7, #20]
 8001eba:	2200      	movs	r2, #0
 8001ebc:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001ebe:	697b      	ldr	r3, [r7, #20]
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001ec4:	7afb      	ldrb	r3, [r7, #11]
 8001ec6:	f003 0307 	and.w	r3, r3, #7
 8001eca:	b2da      	uxtb	r2, r3
 8001ecc:	697b      	ldr	r3, [r7, #20]
 8001ece:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001ed0:	7afb      	ldrb	r3, [r7, #11]
 8001ed2:	f003 0307 	and.w	r3, r3, #7
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d106      	bne.n	8001ee8 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	6979      	ldr	r1, [r7, #20]
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f003 fe1e 	bl	8005b22 <USB_EPStartXfer>
 8001ee6:	e005      	b.n	8001ef4 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	6979      	ldr	r1, [r7, #20]
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f003 fe17 	bl	8005b22 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001ef4:	2300      	movs	r3, #0
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	3718      	adds	r7, #24
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}

08001efe <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001efe:	b480      	push	{r7}
 8001f00:	b083      	sub	sp, #12
 8001f02:	af00      	add	r7, sp, #0
 8001f04:	6078      	str	r0, [r7, #4]
 8001f06:	460b      	mov	r3, r1
 8001f08:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001f0a:	78fb      	ldrb	r3, [r7, #3]
 8001f0c:	f003 0207 	and.w	r2, r3, #7
 8001f10:	6879      	ldr	r1, [r7, #4]
 8001f12:	4613      	mov	r3, r2
 8001f14:	009b      	lsls	r3, r3, #2
 8001f16:	4413      	add	r3, r2
 8001f18:	00db      	lsls	r3, r3, #3
 8001f1a:	440b      	add	r3, r1
 8001f1c:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8001f20:	681b      	ldr	r3, [r3, #0]
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	370c      	adds	r7, #12
 8001f26:	46bd      	mov	sp, r7
 8001f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2c:	4770      	bx	lr

08001f2e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001f2e:	b580      	push	{r7, lr}
 8001f30:	b086      	sub	sp, #24
 8001f32:	af00      	add	r7, sp, #0
 8001f34:	60f8      	str	r0, [r7, #12]
 8001f36:	607a      	str	r2, [r7, #4]
 8001f38:	603b      	str	r3, [r7, #0]
 8001f3a:	460b      	mov	r3, r1
 8001f3c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f3e:	7afb      	ldrb	r3, [r7, #11]
 8001f40:	f003 0307 	and.w	r3, r3, #7
 8001f44:	1c5a      	adds	r2, r3, #1
 8001f46:	4613      	mov	r3, r2
 8001f48:	009b      	lsls	r3, r3, #2
 8001f4a:	4413      	add	r3, r2
 8001f4c:	00db      	lsls	r3, r3, #3
 8001f4e:	68fa      	ldr	r2, [r7, #12]
 8001f50:	4413      	add	r3, r2
 8001f52:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001f54:	697b      	ldr	r3, [r7, #20]
 8001f56:	687a      	ldr	r2, [r7, #4]
 8001f58:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001f5a:	697b      	ldr	r3, [r7, #20]
 8001f5c:	683a      	ldr	r2, [r7, #0]
 8001f5e:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8001f60:	697b      	ldr	r3, [r7, #20]
 8001f62:	2201      	movs	r2, #1
 8001f64:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8001f68:	697b      	ldr	r3, [r7, #20]
 8001f6a:	683a      	ldr	r2, [r7, #0]
 8001f6c:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8001f6e:	697b      	ldr	r3, [r7, #20]
 8001f70:	2200      	movs	r2, #0
 8001f72:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001f74:	697b      	ldr	r3, [r7, #20]
 8001f76:	2201      	movs	r2, #1
 8001f78:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f7a:	7afb      	ldrb	r3, [r7, #11]
 8001f7c:	f003 0307 	and.w	r3, r3, #7
 8001f80:	b2da      	uxtb	r2, r3
 8001f82:	697b      	ldr	r3, [r7, #20]
 8001f84:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001f86:	7afb      	ldrb	r3, [r7, #11]
 8001f88:	f003 0307 	and.w	r3, r3, #7
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d106      	bne.n	8001f9e <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	6979      	ldr	r1, [r7, #20]
 8001f96:	4618      	mov	r0, r3
 8001f98:	f003 fdc3 	bl	8005b22 <USB_EPStartXfer>
 8001f9c:	e005      	b.n	8001faa <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	6979      	ldr	r1, [r7, #20]
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f003 fdbc 	bl	8005b22 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001faa:	2300      	movs	r3, #0
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	3718      	adds	r7, #24
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd80      	pop	{r7, pc}

08001fb4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b084      	sub	sp, #16
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
 8001fbc:	460b      	mov	r3, r1
 8001fbe:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001fc0:	78fb      	ldrb	r3, [r7, #3]
 8001fc2:	f003 0207 	and.w	r2, r3, #7
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	429a      	cmp	r2, r3
 8001fcc:	d901      	bls.n	8001fd2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	e04c      	b.n	800206c <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001fd2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	da0e      	bge.n	8001ff8 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001fda:	78fb      	ldrb	r3, [r7, #3]
 8001fdc:	f003 0307 	and.w	r3, r3, #7
 8001fe0:	1c5a      	adds	r2, r3, #1
 8001fe2:	4613      	mov	r3, r2
 8001fe4:	009b      	lsls	r3, r3, #2
 8001fe6:	4413      	add	r3, r2
 8001fe8:	00db      	lsls	r3, r3, #3
 8001fea:	687a      	ldr	r2, [r7, #4]
 8001fec:	4413      	add	r3, r2
 8001fee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	705a      	strb	r2, [r3, #1]
 8001ff6:	e00c      	b.n	8002012 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001ff8:	78fa      	ldrb	r2, [r7, #3]
 8001ffa:	4613      	mov	r3, r2
 8001ffc:	009b      	lsls	r3, r3, #2
 8001ffe:	4413      	add	r3, r2
 8002000:	00db      	lsls	r3, r3, #3
 8002002:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002006:	687a      	ldr	r2, [r7, #4]
 8002008:	4413      	add	r3, r2
 800200a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	2200      	movs	r2, #0
 8002010:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	2201      	movs	r2, #1
 8002016:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002018:	78fb      	ldrb	r3, [r7, #3]
 800201a:	f003 0307 	and.w	r3, r3, #7
 800201e:	b2da      	uxtb	r2, r3
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800202a:	2b01      	cmp	r3, #1
 800202c:	d101      	bne.n	8002032 <HAL_PCD_EP_SetStall+0x7e>
 800202e:	2302      	movs	r3, #2
 8002030:	e01c      	b.n	800206c <HAL_PCD_EP_SetStall+0xb8>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2201      	movs	r2, #1
 8002036:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	68f9      	ldr	r1, [r7, #12]
 8002040:	4618      	mov	r0, r3
 8002042:	f004 fe9d 	bl	8006d80 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002046:	78fb      	ldrb	r3, [r7, #3]
 8002048:	f003 0307 	and.w	r3, r3, #7
 800204c:	2b00      	cmp	r3, #0
 800204e:	d108      	bne.n	8002062 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681a      	ldr	r2, [r3, #0]
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800205a:	4619      	mov	r1, r3
 800205c:	4610      	mov	r0, r2
 800205e:	f004 ffc9 	bl	8006ff4 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2200      	movs	r2, #0
 8002066:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800206a:	2300      	movs	r3, #0
}
 800206c:	4618      	mov	r0, r3
 800206e:	3710      	adds	r7, #16
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}

08002074 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b084      	sub	sp, #16
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
 800207c:	460b      	mov	r3, r1
 800207e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002080:	78fb      	ldrb	r3, [r7, #3]
 8002082:	f003 020f 	and.w	r2, r3, #15
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	429a      	cmp	r2, r3
 800208c:	d901      	bls.n	8002092 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800208e:	2301      	movs	r3, #1
 8002090:	e040      	b.n	8002114 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002092:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002096:	2b00      	cmp	r3, #0
 8002098:	da0e      	bge.n	80020b8 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800209a:	78fb      	ldrb	r3, [r7, #3]
 800209c:	f003 0307 	and.w	r3, r3, #7
 80020a0:	1c5a      	adds	r2, r3, #1
 80020a2:	4613      	mov	r3, r2
 80020a4:	009b      	lsls	r3, r3, #2
 80020a6:	4413      	add	r3, r2
 80020a8:	00db      	lsls	r3, r3, #3
 80020aa:	687a      	ldr	r2, [r7, #4]
 80020ac:	4413      	add	r3, r2
 80020ae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	2201      	movs	r2, #1
 80020b4:	705a      	strb	r2, [r3, #1]
 80020b6:	e00e      	b.n	80020d6 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80020b8:	78fb      	ldrb	r3, [r7, #3]
 80020ba:	f003 0207 	and.w	r2, r3, #7
 80020be:	4613      	mov	r3, r2
 80020c0:	009b      	lsls	r3, r3, #2
 80020c2:	4413      	add	r3, r2
 80020c4:	00db      	lsls	r3, r3, #3
 80020c6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80020ca:	687a      	ldr	r2, [r7, #4]
 80020cc:	4413      	add	r3, r2
 80020ce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	2200      	movs	r2, #0
 80020d4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	2200      	movs	r2, #0
 80020da:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80020dc:	78fb      	ldrb	r3, [r7, #3]
 80020de:	f003 0307 	and.w	r3, r3, #7
 80020e2:	b2da      	uxtb	r2, r3
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80020ee:	2b01      	cmp	r3, #1
 80020f0:	d101      	bne.n	80020f6 <HAL_PCD_EP_ClrStall+0x82>
 80020f2:	2302      	movs	r3, #2
 80020f4:	e00e      	b.n	8002114 <HAL_PCD_EP_ClrStall+0xa0>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2201      	movs	r2, #1
 80020fa:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	68f9      	ldr	r1, [r7, #12]
 8002104:	4618      	mov	r0, r3
 8002106:	f004 fe8c 	bl	8006e22 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2200      	movs	r2, #0
 800210e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002112:	2300      	movs	r3, #0
}
 8002114:	4618      	mov	r0, r3
 8002116:	3710      	adds	r7, #16
 8002118:	46bd      	mov	sp, r7
 800211a:	bd80      	pop	{r7, pc}

0800211c <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b08e      	sub	sp, #56	; 0x38
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002124:	e2d1      	b.n	80026ca <PCD_EP_ISR_Handler+0x5ae>
  {
    wIstr = hpcd->Instance->ISTR;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800212e:	85fb      	strh	r3, [r7, #46]	; 0x2e
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002130:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002132:	b2db      	uxtb	r3, r3
 8002134:	f003 030f 	and.w	r3, r3, #15
 8002138:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 800213c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002140:	2b00      	cmp	r3, #0
 8002142:	f040 8152 	bne.w	80023ea <PCD_EP_ISR_Handler+0x2ce>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002146:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002148:	f003 0310 	and.w	r3, r3, #16
 800214c:	2b00      	cmp	r3, #0
 800214e:	d150      	bne.n	80021f2 <PCD_EP_ISR_Handler+0xd6>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	881b      	ldrh	r3, [r3, #0]
 8002156:	b29b      	uxth	r3, r3
 8002158:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800215c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002160:	81fb      	strh	r3, [r7, #14]
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681a      	ldr	r2, [r3, #0]
 8002166:	89fb      	ldrh	r3, [r7, #14]
 8002168:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800216c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002170:	b29b      	uxth	r3, r3
 8002172:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	3328      	adds	r3, #40	; 0x28
 8002178:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002182:	b29b      	uxth	r3, r3
 8002184:	461a      	mov	r2, r3
 8002186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002188:	781b      	ldrb	r3, [r3, #0]
 800218a:	00db      	lsls	r3, r3, #3
 800218c:	4413      	add	r3, r2
 800218e:	687a      	ldr	r2, [r7, #4]
 8002190:	6812      	ldr	r2, [r2, #0]
 8002192:	4413      	add	r3, r2
 8002194:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002198:	881b      	ldrh	r3, [r3, #0]
 800219a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800219e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a0:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80021a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a4:	695a      	ldr	r2, [r3, #20]
 80021a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a8:	69db      	ldr	r3, [r3, #28]
 80021aa:	441a      	add	r2, r3
 80021ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ae:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80021b0:	2100      	movs	r1, #0
 80021b2:	6878      	ldr	r0, [r7, #4]
 80021b4:	f006 fe0b 	bl	8008dce <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80021be:	b2db      	uxtb	r3, r3
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	f000 8282 	beq.w	80026ca <PCD_EP_ISR_Handler+0x5ae>
 80021c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c8:	699b      	ldr	r3, [r3, #24]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	f040 827d 	bne.w	80026ca <PCD_EP_ISR_Handler+0x5ae>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80021d6:	b2db      	uxtb	r3, r3
 80021d8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80021dc:	b2da      	uxtb	r2, r3
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	b292      	uxth	r2, r2
 80021e4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2200      	movs	r2, #0
 80021ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80021f0:	e26b      	b.n	80026ca <PCD_EP_ISR_Handler+0x5ae>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80021f8:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	881b      	ldrh	r3, [r3, #0]
 8002200:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002202:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002204:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002208:	2b00      	cmp	r3, #0
 800220a:	d032      	beq.n	8002272 <PCD_EP_ISR_Handler+0x156>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002214:	b29b      	uxth	r3, r3
 8002216:	461a      	mov	r2, r3
 8002218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800221a:	781b      	ldrb	r3, [r3, #0]
 800221c:	00db      	lsls	r3, r3, #3
 800221e:	4413      	add	r3, r2
 8002220:	687a      	ldr	r2, [r7, #4]
 8002222:	6812      	ldr	r2, [r2, #0]
 8002224:	4413      	add	r3, r2
 8002226:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800222a:	881b      	ldrh	r3, [r3, #0]
 800222c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002232:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6818      	ldr	r0, [r3, #0]
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 800223e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002240:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002244:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002246:	b29b      	uxth	r3, r3
 8002248:	f004 ff21 	bl	800708e <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	881b      	ldrh	r3, [r3, #0]
 8002252:	b29a      	uxth	r2, r3
 8002254:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002258:	4013      	ands	r3, r2
 800225a:	823b      	strh	r3, [r7, #16]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	8a3a      	ldrh	r2, [r7, #16]
 8002262:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002266:	b292      	uxth	r2, r2
 8002268:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800226a:	6878      	ldr	r0, [r7, #4]
 800226c:	f006 fd82 	bl	8008d74 <HAL_PCD_SetupStageCallback>
 8002270:	e22b      	b.n	80026ca <PCD_EP_ISR_Handler+0x5ae>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002272:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8002276:	2b00      	cmp	r3, #0
 8002278:	f280 8227 	bge.w	80026ca <PCD_EP_ISR_Handler+0x5ae>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	881b      	ldrh	r3, [r3, #0]
 8002282:	b29a      	uxth	r2, r3
 8002284:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002288:	4013      	ands	r3, r2
 800228a:	83bb      	strh	r3, [r7, #28]
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	8bba      	ldrh	r2, [r7, #28]
 8002292:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002296:	b292      	uxth	r2, r2
 8002298:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80022a2:	b29b      	uxth	r3, r3
 80022a4:	461a      	mov	r2, r3
 80022a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a8:	781b      	ldrb	r3, [r3, #0]
 80022aa:	00db      	lsls	r3, r3, #3
 80022ac:	4413      	add	r3, r2
 80022ae:	687a      	ldr	r2, [r7, #4]
 80022b0:	6812      	ldr	r2, [r2, #0]
 80022b2:	4413      	add	r3, r2
 80022b4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80022b8:	881b      	ldrh	r3, [r3, #0]
 80022ba:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80022be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c0:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80022c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c4:	69db      	ldr	r3, [r3, #28]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d019      	beq.n	80022fe <PCD_EP_ISR_Handler+0x1e2>
 80022ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022cc:	695b      	ldr	r3, [r3, #20]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d015      	beq.n	80022fe <PCD_EP_ISR_Handler+0x1e2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6818      	ldr	r0, [r3, #0]
 80022d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d8:	6959      	ldr	r1, [r3, #20]
 80022da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022dc:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80022de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e0:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80022e2:	b29b      	uxth	r3, r3
 80022e4:	f004 fed3 	bl	800708e <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80022e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ea:	695a      	ldr	r2, [r3, #20]
 80022ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ee:	69db      	ldr	r3, [r3, #28]
 80022f0:	441a      	add	r2, r3
 80022f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f4:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80022f6:	2100      	movs	r1, #0
 80022f8:	6878      	ldr	r0, [r7, #4]
 80022fa:	f006 fd4d 	bl	8008d98 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	61bb      	str	r3, [r7, #24]
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800230c:	b29b      	uxth	r3, r3
 800230e:	461a      	mov	r2, r3
 8002310:	69bb      	ldr	r3, [r7, #24]
 8002312:	4413      	add	r3, r2
 8002314:	61bb      	str	r3, [r7, #24]
 8002316:	69bb      	ldr	r3, [r7, #24]
 8002318:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800231c:	617b      	str	r3, [r7, #20]
 800231e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002320:	691b      	ldr	r3, [r3, #16]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d112      	bne.n	800234c <PCD_EP_ISR_Handler+0x230>
 8002326:	697b      	ldr	r3, [r7, #20]
 8002328:	881b      	ldrh	r3, [r3, #0]
 800232a:	b29b      	uxth	r3, r3
 800232c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002330:	b29a      	uxth	r2, r3
 8002332:	697b      	ldr	r3, [r7, #20]
 8002334:	801a      	strh	r2, [r3, #0]
 8002336:	697b      	ldr	r3, [r7, #20]
 8002338:	881b      	ldrh	r3, [r3, #0]
 800233a:	b29b      	uxth	r3, r3
 800233c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002340:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002344:	b29a      	uxth	r2, r3
 8002346:	697b      	ldr	r3, [r7, #20]
 8002348:	801a      	strh	r2, [r3, #0]
 800234a:	e02f      	b.n	80023ac <PCD_EP_ISR_Handler+0x290>
 800234c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800234e:	691b      	ldr	r3, [r3, #16]
 8002350:	2b3e      	cmp	r3, #62	; 0x3e
 8002352:	d813      	bhi.n	800237c <PCD_EP_ISR_Handler+0x260>
 8002354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002356:	691b      	ldr	r3, [r3, #16]
 8002358:	085b      	lsrs	r3, r3, #1
 800235a:	633b      	str	r3, [r7, #48]	; 0x30
 800235c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800235e:	691b      	ldr	r3, [r3, #16]
 8002360:	f003 0301 	and.w	r3, r3, #1
 8002364:	2b00      	cmp	r3, #0
 8002366:	d002      	beq.n	800236e <PCD_EP_ISR_Handler+0x252>
 8002368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800236a:	3301      	adds	r3, #1
 800236c:	633b      	str	r3, [r7, #48]	; 0x30
 800236e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002370:	b29b      	uxth	r3, r3
 8002372:	029b      	lsls	r3, r3, #10
 8002374:	b29a      	uxth	r2, r3
 8002376:	697b      	ldr	r3, [r7, #20]
 8002378:	801a      	strh	r2, [r3, #0]
 800237a:	e017      	b.n	80023ac <PCD_EP_ISR_Handler+0x290>
 800237c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800237e:	691b      	ldr	r3, [r3, #16]
 8002380:	095b      	lsrs	r3, r3, #5
 8002382:	633b      	str	r3, [r7, #48]	; 0x30
 8002384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002386:	691b      	ldr	r3, [r3, #16]
 8002388:	f003 031f 	and.w	r3, r3, #31
 800238c:	2b00      	cmp	r3, #0
 800238e:	d102      	bne.n	8002396 <PCD_EP_ISR_Handler+0x27a>
 8002390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002392:	3b01      	subs	r3, #1
 8002394:	633b      	str	r3, [r7, #48]	; 0x30
 8002396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002398:	b29b      	uxth	r3, r3
 800239a:	029b      	lsls	r3, r3, #10
 800239c:	b29b      	uxth	r3, r3
 800239e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80023a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80023a6:	b29a      	uxth	r2, r3
 80023a8:	697b      	ldr	r3, [r7, #20]
 80023aa:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	881b      	ldrh	r3, [r3, #0]
 80023b2:	b29b      	uxth	r3, r3
 80023b4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80023b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023bc:	827b      	strh	r3, [r7, #18]
 80023be:	8a7b      	ldrh	r3, [r7, #18]
 80023c0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80023c4:	827b      	strh	r3, [r7, #18]
 80023c6:	8a7b      	ldrh	r3, [r7, #18]
 80023c8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80023cc:	827b      	strh	r3, [r7, #18]
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681a      	ldr	r2, [r3, #0]
 80023d2:	8a7b      	ldrh	r3, [r7, #18]
 80023d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80023d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80023dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80023e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023e4:	b29b      	uxth	r3, r3
 80023e6:	8013      	strh	r3, [r2, #0]
 80023e8:	e16f      	b.n	80026ca <PCD_EP_ISR_Handler+0x5ae>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	461a      	mov	r2, r3
 80023f0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80023f4:	009b      	lsls	r3, r3, #2
 80023f6:	4413      	add	r3, r2
 80023f8:	881b      	ldrh	r3, [r3, #0]
 80023fa:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80023fc:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8002400:	2b00      	cmp	r3, #0
 8002402:	f280 80e4 	bge.w	80025ce <PCD_EP_ISR_Handler+0x4b2>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	461a      	mov	r2, r3
 800240c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002410:	009b      	lsls	r3, r3, #2
 8002412:	4413      	add	r3, r2
 8002414:	881b      	ldrh	r3, [r3, #0]
 8002416:	b29a      	uxth	r2, r3
 8002418:	f640 738f 	movw	r3, #3983	; 0xf8f
 800241c:	4013      	ands	r3, r2
 800241e:	853b      	strh	r3, [r7, #40]	; 0x28
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	461a      	mov	r2, r3
 8002426:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800242a:	009b      	lsls	r3, r3, #2
 800242c:	4413      	add	r3, r2
 800242e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002430:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002434:	b292      	uxth	r2, r2
 8002436:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002438:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800243c:	4613      	mov	r3, r2
 800243e:	009b      	lsls	r3, r3, #2
 8002440:	4413      	add	r3, r2
 8002442:	00db      	lsls	r3, r3, #3
 8002444:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002448:	687a      	ldr	r2, [r7, #4]
 800244a:	4413      	add	r3, r2
 800244c:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800244e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002450:	7b1b      	ldrb	r3, [r3, #12]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d120      	bne.n	8002498 <PCD_EP_ISR_Handler+0x37c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800245e:	b29b      	uxth	r3, r3
 8002460:	461a      	mov	r2, r3
 8002462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002464:	781b      	ldrb	r3, [r3, #0]
 8002466:	00db      	lsls	r3, r3, #3
 8002468:	4413      	add	r3, r2
 800246a:	687a      	ldr	r2, [r7, #4]
 800246c:	6812      	ldr	r2, [r2, #0]
 800246e:	4413      	add	r3, r2
 8002470:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002474:	881b      	ldrh	r3, [r3, #0]
 8002476:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800247a:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 800247c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800247e:	2b00      	cmp	r3, #0
 8002480:	f000 8083 	beq.w	800258a <PCD_EP_ISR_Handler+0x46e>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6818      	ldr	r0, [r3, #0]
 8002488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800248a:	6959      	ldr	r1, [r3, #20]
 800248c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800248e:	88da      	ldrh	r2, [r3, #6]
 8002490:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002492:	f004 fdfc 	bl	800708e <USB_ReadPMA>
 8002496:	e078      	b.n	800258a <PCD_EP_ISR_Handler+0x46e>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800249a:	78db      	ldrb	r3, [r3, #3]
 800249c:	2b02      	cmp	r3, #2
 800249e:	d108      	bne.n	80024b2 <PCD_EP_ISR_Handler+0x396>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80024a0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80024a2:	461a      	mov	r2, r3
 80024a4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80024a6:	6878      	ldr	r0, [r7, #4]
 80024a8:	f000 f91d 	bl	80026e6 <HAL_PCD_EP_DB_Receive>
 80024ac:	4603      	mov	r3, r0
 80024ae:	86fb      	strh	r3, [r7, #54]	; 0x36
 80024b0:	e06b      	b.n	800258a <PCD_EP_ISR_Handler+0x46e>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	461a      	mov	r2, r3
 80024b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ba:	781b      	ldrb	r3, [r3, #0]
 80024bc:	009b      	lsls	r3, r3, #2
 80024be:	4413      	add	r3, r2
 80024c0:	881b      	ldrh	r3, [r3, #0]
 80024c2:	b29b      	uxth	r3, r3
 80024c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80024c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024cc:	847b      	strh	r3, [r7, #34]	; 0x22
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	461a      	mov	r2, r3
 80024d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d6:	781b      	ldrb	r3, [r3, #0]
 80024d8:	009b      	lsls	r3, r3, #2
 80024da:	441a      	add	r2, r3
 80024dc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80024de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80024e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80024e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80024ea:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80024ee:	b29b      	uxth	r3, r3
 80024f0:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	461a      	mov	r2, r3
 80024f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024fa:	781b      	ldrb	r3, [r3, #0]
 80024fc:	009b      	lsls	r3, r3, #2
 80024fe:	4413      	add	r3, r2
 8002500:	881b      	ldrh	r3, [r3, #0]
 8002502:	b29b      	uxth	r3, r3
 8002504:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002508:	2b00      	cmp	r3, #0
 800250a:	d01f      	beq.n	800254c <PCD_EP_ISR_Handler+0x430>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002514:	b29b      	uxth	r3, r3
 8002516:	461a      	mov	r2, r3
 8002518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800251a:	781b      	ldrb	r3, [r3, #0]
 800251c:	00db      	lsls	r3, r3, #3
 800251e:	4413      	add	r3, r2
 8002520:	687a      	ldr	r2, [r7, #4]
 8002522:	6812      	ldr	r2, [r2, #0]
 8002524:	4413      	add	r3, r2
 8002526:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800252a:	881b      	ldrh	r3, [r3, #0]
 800252c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002530:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8002532:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002534:	2b00      	cmp	r3, #0
 8002536:	d028      	beq.n	800258a <PCD_EP_ISR_Handler+0x46e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6818      	ldr	r0, [r3, #0]
 800253c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800253e:	6959      	ldr	r1, [r3, #20]
 8002540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002542:	891a      	ldrh	r2, [r3, #8]
 8002544:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002546:	f004 fda2 	bl	800708e <USB_ReadPMA>
 800254a:	e01e      	b.n	800258a <PCD_EP_ISR_Handler+0x46e>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002554:	b29b      	uxth	r3, r3
 8002556:	461a      	mov	r2, r3
 8002558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800255a:	781b      	ldrb	r3, [r3, #0]
 800255c:	00db      	lsls	r3, r3, #3
 800255e:	4413      	add	r3, r2
 8002560:	687a      	ldr	r2, [r7, #4]
 8002562:	6812      	ldr	r2, [r2, #0]
 8002564:	4413      	add	r3, r2
 8002566:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800256a:	881b      	ldrh	r3, [r3, #0]
 800256c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002570:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8002572:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002574:	2b00      	cmp	r3, #0
 8002576:	d008      	beq.n	800258a <PCD_EP_ISR_Handler+0x46e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6818      	ldr	r0, [r3, #0]
 800257c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800257e:	6959      	ldr	r1, [r3, #20]
 8002580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002582:	895a      	ldrh	r2, [r3, #10]
 8002584:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002586:	f004 fd82 	bl	800708e <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800258a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800258c:	69da      	ldr	r2, [r3, #28]
 800258e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002590:	441a      	add	r2, r3
 8002592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002594:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002598:	695a      	ldr	r2, [r3, #20]
 800259a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800259c:	441a      	add	r2, r3
 800259e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a0:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80025a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a4:	699b      	ldr	r3, [r3, #24]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d004      	beq.n	80025b4 <PCD_EP_ISR_Handler+0x498>
 80025aa:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80025ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ae:	691b      	ldr	r3, [r3, #16]
 80025b0:	429a      	cmp	r2, r3
 80025b2:	d206      	bcs.n	80025c2 <PCD_EP_ISR_Handler+0x4a6>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80025b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025b6:	781b      	ldrb	r3, [r3, #0]
 80025b8:	4619      	mov	r1, r3
 80025ba:	6878      	ldr	r0, [r7, #4]
 80025bc:	f006 fbec 	bl	8008d98 <HAL_PCD_DataOutStageCallback>
 80025c0:	e005      	b.n	80025ce <PCD_EP_ISR_Handler+0x4b2>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80025c8:	4618      	mov	r0, r3
 80025ca:	f003 faaa 	bl	8005b22 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80025ce:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80025d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d078      	beq.n	80026ca <PCD_EP_ISR_Handler+0x5ae>
      {
        ep = &hpcd->IN_ep[epindex];
 80025d8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80025dc:	1c5a      	adds	r2, r3, #1
 80025de:	4613      	mov	r3, r2
 80025e0:	009b      	lsls	r3, r3, #2
 80025e2:	4413      	add	r3, r2
 80025e4:	00db      	lsls	r3, r3, #3
 80025e6:	687a      	ldr	r2, [r7, #4]
 80025e8:	4413      	add	r3, r2
 80025ea:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	461a      	mov	r2, r3
 80025f2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80025f6:	009b      	lsls	r3, r3, #2
 80025f8:	4413      	add	r3, r2
 80025fa:	881b      	ldrh	r3, [r3, #0]
 80025fc:	b29b      	uxth	r3, r3
 80025fe:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002602:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002606:	843b      	strh	r3, [r7, #32]
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	461a      	mov	r2, r3
 800260e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002612:	009b      	lsls	r3, r3, #2
 8002614:	441a      	add	r2, r3
 8002616:	8c3b      	ldrh	r3, [r7, #32]
 8002618:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800261c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002620:	b29b      	uxth	r3, r3
 8002622:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 8002624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002626:	78db      	ldrb	r3, [r3, #3]
 8002628:	2b02      	cmp	r3, #2
 800262a:	d108      	bne.n	800263e <PCD_EP_ISR_Handler+0x522>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 800262c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800262e:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 8002630:	2b02      	cmp	r3, #2
 8002632:	d144      	bne.n	80026be <PCD_EP_ISR_Handler+0x5a2>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002634:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002636:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800263a:	2b00      	cmp	r3, #0
 800263c:	d13f      	bne.n	80026be <PCD_EP_ISR_Handler+0x5a2>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002646:	b29b      	uxth	r3, r3
 8002648:	461a      	mov	r2, r3
 800264a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800264c:	781b      	ldrb	r3, [r3, #0]
 800264e:	00db      	lsls	r3, r3, #3
 8002650:	4413      	add	r3, r2
 8002652:	687a      	ldr	r2, [r7, #4]
 8002654:	6812      	ldr	r2, [r2, #0]
 8002656:	4413      	add	r3, r2
 8002658:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800265c:	881b      	ldrh	r3, [r3, #0]
 800265e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002662:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8002664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002666:	699a      	ldr	r2, [r3, #24]
 8002668:	8bfb      	ldrh	r3, [r7, #30]
 800266a:	429a      	cmp	r2, r3
 800266c:	d906      	bls.n	800267c <PCD_EP_ISR_Handler+0x560>
          {
            ep->xfer_len -= TxByteNbre;
 800266e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002670:	699a      	ldr	r2, [r3, #24]
 8002672:	8bfb      	ldrh	r3, [r7, #30]
 8002674:	1ad2      	subs	r2, r2, r3
 8002676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002678:	619a      	str	r2, [r3, #24]
 800267a:	e002      	b.n	8002682 <PCD_EP_ISR_Handler+0x566>
          }
          else
          {
            ep->xfer_len = 0U;
 800267c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800267e:	2200      	movs	r2, #0
 8002680:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8002682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002684:	699b      	ldr	r3, [r3, #24]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d106      	bne.n	8002698 <PCD_EP_ISR_Handler+0x57c>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800268a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800268c:	781b      	ldrb	r3, [r3, #0]
 800268e:	4619      	mov	r1, r3
 8002690:	6878      	ldr	r0, [r7, #4]
 8002692:	f006 fb9c 	bl	8008dce <HAL_PCD_DataInStageCallback>
 8002696:	e018      	b.n	80026ca <PCD_EP_ISR_Handler+0x5ae>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8002698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800269a:	695a      	ldr	r2, [r3, #20]
 800269c:	8bfb      	ldrh	r3, [r7, #30]
 800269e:	441a      	add	r2, r3
 80026a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a2:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 80026a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a6:	69da      	ldr	r2, [r3, #28]
 80026a8:	8bfb      	ldrh	r3, [r7, #30]
 80026aa:	441a      	add	r2, r3
 80026ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ae:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80026b6:	4618      	mov	r0, r3
 80026b8:	f003 fa33 	bl	8005b22 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 80026bc:	e005      	b.n	80026ca <PCD_EP_ISR_Handler+0x5ae>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80026be:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80026c0:	461a      	mov	r2, r3
 80026c2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80026c4:	6878      	ldr	r0, [r7, #4]
 80026c6:	f000 f917 	bl	80028f8 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80026d2:	b29b      	uxth	r3, r3
 80026d4:	b21b      	sxth	r3, r3
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	f6ff ad25 	blt.w	8002126 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80026dc:	2300      	movs	r3, #0
}
 80026de:	4618      	mov	r0, r3
 80026e0:	3738      	adds	r7, #56	; 0x38
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}

080026e6 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80026e6:	b580      	push	{r7, lr}
 80026e8:	b088      	sub	sp, #32
 80026ea:	af00      	add	r7, sp, #0
 80026ec:	60f8      	str	r0, [r7, #12]
 80026ee:	60b9      	str	r1, [r7, #8]
 80026f0:	4613      	mov	r3, r2
 80026f2:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80026f4:	88fb      	ldrh	r3, [r7, #6]
 80026f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d07c      	beq.n	80027f8 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002706:	b29b      	uxth	r3, r3
 8002708:	461a      	mov	r2, r3
 800270a:	68bb      	ldr	r3, [r7, #8]
 800270c:	781b      	ldrb	r3, [r3, #0]
 800270e:	00db      	lsls	r3, r3, #3
 8002710:	4413      	add	r3, r2
 8002712:	68fa      	ldr	r2, [r7, #12]
 8002714:	6812      	ldr	r2, [r2, #0]
 8002716:	4413      	add	r3, r2
 8002718:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800271c:	881b      	ldrh	r3, [r3, #0]
 800271e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002722:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002724:	68bb      	ldr	r3, [r7, #8]
 8002726:	699a      	ldr	r2, [r3, #24]
 8002728:	8b7b      	ldrh	r3, [r7, #26]
 800272a:	429a      	cmp	r2, r3
 800272c:	d306      	bcc.n	800273c <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 800272e:	68bb      	ldr	r3, [r7, #8]
 8002730:	699a      	ldr	r2, [r3, #24]
 8002732:	8b7b      	ldrh	r3, [r7, #26]
 8002734:	1ad2      	subs	r2, r2, r3
 8002736:	68bb      	ldr	r3, [r7, #8]
 8002738:	619a      	str	r2, [r3, #24]
 800273a:	e002      	b.n	8002742 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 800273c:	68bb      	ldr	r3, [r7, #8]
 800273e:	2200      	movs	r2, #0
 8002740:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002742:	68bb      	ldr	r3, [r7, #8]
 8002744:	699b      	ldr	r3, [r3, #24]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d123      	bne.n	8002792 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	461a      	mov	r2, r3
 8002750:	68bb      	ldr	r3, [r7, #8]
 8002752:	781b      	ldrb	r3, [r3, #0]
 8002754:	009b      	lsls	r3, r3, #2
 8002756:	4413      	add	r3, r2
 8002758:	881b      	ldrh	r3, [r3, #0]
 800275a:	b29b      	uxth	r3, r3
 800275c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002760:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002764:	833b      	strh	r3, [r7, #24]
 8002766:	8b3b      	ldrh	r3, [r7, #24]
 8002768:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800276c:	833b      	strh	r3, [r7, #24]
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	461a      	mov	r2, r3
 8002774:	68bb      	ldr	r3, [r7, #8]
 8002776:	781b      	ldrb	r3, [r3, #0]
 8002778:	009b      	lsls	r3, r3, #2
 800277a:	441a      	add	r2, r3
 800277c:	8b3b      	ldrh	r3, [r7, #24]
 800277e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002782:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002786:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800278a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800278e:	b29b      	uxth	r3, r3
 8002790:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002792:	88fb      	ldrh	r3, [r7, #6]
 8002794:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002798:	2b00      	cmp	r3, #0
 800279a:	d01f      	beq.n	80027dc <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	461a      	mov	r2, r3
 80027a2:	68bb      	ldr	r3, [r7, #8]
 80027a4:	781b      	ldrb	r3, [r3, #0]
 80027a6:	009b      	lsls	r3, r3, #2
 80027a8:	4413      	add	r3, r2
 80027aa:	881b      	ldrh	r3, [r3, #0]
 80027ac:	b29b      	uxth	r3, r3
 80027ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80027b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027b6:	82fb      	strh	r3, [r7, #22]
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	461a      	mov	r2, r3
 80027be:	68bb      	ldr	r3, [r7, #8]
 80027c0:	781b      	ldrb	r3, [r3, #0]
 80027c2:	009b      	lsls	r3, r3, #2
 80027c4:	441a      	add	r2, r3
 80027c6:	8afb      	ldrh	r3, [r7, #22]
 80027c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80027cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80027d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80027d4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80027d8:	b29b      	uxth	r3, r3
 80027da:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80027dc:	8b7b      	ldrh	r3, [r7, #26]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	f000 8085 	beq.w	80028ee <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	6818      	ldr	r0, [r3, #0]
 80027e8:	68bb      	ldr	r3, [r7, #8]
 80027ea:	6959      	ldr	r1, [r3, #20]
 80027ec:	68bb      	ldr	r3, [r7, #8]
 80027ee:	891a      	ldrh	r2, [r3, #8]
 80027f0:	8b7b      	ldrh	r3, [r7, #26]
 80027f2:	f004 fc4c 	bl	800708e <USB_ReadPMA>
 80027f6:	e07a      	b.n	80028ee <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002800:	b29b      	uxth	r3, r3
 8002802:	461a      	mov	r2, r3
 8002804:	68bb      	ldr	r3, [r7, #8]
 8002806:	781b      	ldrb	r3, [r3, #0]
 8002808:	00db      	lsls	r3, r3, #3
 800280a:	4413      	add	r3, r2
 800280c:	68fa      	ldr	r2, [r7, #12]
 800280e:	6812      	ldr	r2, [r2, #0]
 8002810:	4413      	add	r3, r2
 8002812:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002816:	881b      	ldrh	r3, [r3, #0]
 8002818:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800281c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800281e:	68bb      	ldr	r3, [r7, #8]
 8002820:	699a      	ldr	r2, [r3, #24]
 8002822:	8b7b      	ldrh	r3, [r7, #26]
 8002824:	429a      	cmp	r2, r3
 8002826:	d306      	bcc.n	8002836 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8002828:	68bb      	ldr	r3, [r7, #8]
 800282a:	699a      	ldr	r2, [r3, #24]
 800282c:	8b7b      	ldrh	r3, [r7, #26]
 800282e:	1ad2      	subs	r2, r2, r3
 8002830:	68bb      	ldr	r3, [r7, #8]
 8002832:	619a      	str	r2, [r3, #24]
 8002834:	e002      	b.n	800283c <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8002836:	68bb      	ldr	r3, [r7, #8]
 8002838:	2200      	movs	r2, #0
 800283a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800283c:	68bb      	ldr	r3, [r7, #8]
 800283e:	699b      	ldr	r3, [r3, #24]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d123      	bne.n	800288c <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	461a      	mov	r2, r3
 800284a:	68bb      	ldr	r3, [r7, #8]
 800284c:	781b      	ldrb	r3, [r3, #0]
 800284e:	009b      	lsls	r3, r3, #2
 8002850:	4413      	add	r3, r2
 8002852:	881b      	ldrh	r3, [r3, #0]
 8002854:	b29b      	uxth	r3, r3
 8002856:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800285a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800285e:	83fb      	strh	r3, [r7, #30]
 8002860:	8bfb      	ldrh	r3, [r7, #30]
 8002862:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002866:	83fb      	strh	r3, [r7, #30]
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	461a      	mov	r2, r3
 800286e:	68bb      	ldr	r3, [r7, #8]
 8002870:	781b      	ldrb	r3, [r3, #0]
 8002872:	009b      	lsls	r3, r3, #2
 8002874:	441a      	add	r2, r3
 8002876:	8bfb      	ldrh	r3, [r7, #30]
 8002878:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800287c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002880:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002884:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002888:	b29b      	uxth	r3, r3
 800288a:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800288c:	88fb      	ldrh	r3, [r7, #6]
 800288e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002892:	2b00      	cmp	r3, #0
 8002894:	d11f      	bne.n	80028d6 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	461a      	mov	r2, r3
 800289c:	68bb      	ldr	r3, [r7, #8]
 800289e:	781b      	ldrb	r3, [r3, #0]
 80028a0:	009b      	lsls	r3, r3, #2
 80028a2:	4413      	add	r3, r2
 80028a4:	881b      	ldrh	r3, [r3, #0]
 80028a6:	b29b      	uxth	r3, r3
 80028a8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80028ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028b0:	83bb      	strh	r3, [r7, #28]
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	461a      	mov	r2, r3
 80028b8:	68bb      	ldr	r3, [r7, #8]
 80028ba:	781b      	ldrb	r3, [r3, #0]
 80028bc:	009b      	lsls	r3, r3, #2
 80028be:	441a      	add	r2, r3
 80028c0:	8bbb      	ldrh	r3, [r7, #28]
 80028c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80028c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80028ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80028ce:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80028d2:	b29b      	uxth	r3, r3
 80028d4:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80028d6:	8b7b      	ldrh	r3, [r7, #26]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d008      	beq.n	80028ee <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	6818      	ldr	r0, [r3, #0]
 80028e0:	68bb      	ldr	r3, [r7, #8]
 80028e2:	6959      	ldr	r1, [r3, #20]
 80028e4:	68bb      	ldr	r3, [r7, #8]
 80028e6:	895a      	ldrh	r2, [r3, #10]
 80028e8:	8b7b      	ldrh	r3, [r7, #26]
 80028ea:	f004 fbd0 	bl	800708e <USB_ReadPMA>
    }
  }

  return count;
 80028ee:	8b7b      	ldrh	r3, [r7, #26]
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	3720      	adds	r7, #32
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}

080028f8 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b092      	sub	sp, #72	; 0x48
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	60f8      	str	r0, [r7, #12]
 8002900:	60b9      	str	r1, [r7, #8]
 8002902:	4613      	mov	r3, r2
 8002904:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002906:	88fb      	ldrh	r3, [r7, #6]
 8002908:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800290c:	2b00      	cmp	r3, #0
 800290e:	f000 8130 	beq.w	8002b72 <HAL_PCD_EP_DB_Transmit+0x27a>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800291a:	b29b      	uxth	r3, r3
 800291c:	461a      	mov	r2, r3
 800291e:	68bb      	ldr	r3, [r7, #8]
 8002920:	781b      	ldrb	r3, [r3, #0]
 8002922:	00db      	lsls	r3, r3, #3
 8002924:	4413      	add	r3, r2
 8002926:	68fa      	ldr	r2, [r7, #12]
 8002928:	6812      	ldr	r2, [r2, #0]
 800292a:	4413      	add	r3, r2
 800292c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002930:	881b      	ldrh	r3, [r3, #0]
 8002932:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002936:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len > TxByteNbre)
 8002938:	68bb      	ldr	r3, [r7, #8]
 800293a:	699a      	ldr	r2, [r3, #24]
 800293c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800293e:	429a      	cmp	r2, r3
 8002940:	d906      	bls.n	8002950 <HAL_PCD_EP_DB_Transmit+0x58>
    {
      ep->xfer_len -= TxByteNbre;
 8002942:	68bb      	ldr	r3, [r7, #8]
 8002944:	699a      	ldr	r2, [r3, #24]
 8002946:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002948:	1ad2      	subs	r2, r2, r3
 800294a:	68bb      	ldr	r3, [r7, #8]
 800294c:	619a      	str	r2, [r3, #24]
 800294e:	e002      	b.n	8002956 <HAL_PCD_EP_DB_Transmit+0x5e>
    }
    else
    {
      ep->xfer_len = 0U;
 8002950:	68bb      	ldr	r3, [r7, #8]
 8002952:	2200      	movs	r2, #0
 8002954:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002956:	68bb      	ldr	r3, [r7, #8]
 8002958:	699b      	ldr	r3, [r3, #24]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d12c      	bne.n	80029b8 <HAL_PCD_EP_DB_Transmit+0xc0>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800295e:	68bb      	ldr	r3, [r7, #8]
 8002960:	781b      	ldrb	r3, [r3, #0]
 8002962:	4619      	mov	r1, r3
 8002964:	68f8      	ldr	r0, [r7, #12]
 8002966:	f006 fa32 	bl	8008dce <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800296a:	88fb      	ldrh	r3, [r7, #6]
 800296c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002970:	2b00      	cmp	r3, #0
 8002972:	f000 822d 	beq.w	8002dd0 <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	461a      	mov	r2, r3
 800297c:	68bb      	ldr	r3, [r7, #8]
 800297e:	781b      	ldrb	r3, [r3, #0]
 8002980:	009b      	lsls	r3, r3, #2
 8002982:	4413      	add	r3, r2
 8002984:	881b      	ldrh	r3, [r3, #0]
 8002986:	b29b      	uxth	r3, r3
 8002988:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800298c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002990:	827b      	strh	r3, [r7, #18]
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	461a      	mov	r2, r3
 8002998:	68bb      	ldr	r3, [r7, #8]
 800299a:	781b      	ldrb	r3, [r3, #0]
 800299c:	009b      	lsls	r3, r3, #2
 800299e:	441a      	add	r2, r3
 80029a0:	8a7b      	ldrh	r3, [r7, #18]
 80029a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80029a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80029aa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80029ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029b2:	b29b      	uxth	r3, r3
 80029b4:	8013      	strh	r3, [r2, #0]
 80029b6:	e20b      	b.n	8002dd0 <HAL_PCD_EP_DB_Transmit+0x4d8>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80029b8:	88fb      	ldrh	r3, [r7, #6]
 80029ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d01f      	beq.n	8002a02 <HAL_PCD_EP_DB_Transmit+0x10a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	461a      	mov	r2, r3
 80029c8:	68bb      	ldr	r3, [r7, #8]
 80029ca:	781b      	ldrb	r3, [r3, #0]
 80029cc:	009b      	lsls	r3, r3, #2
 80029ce:	4413      	add	r3, r2
 80029d0:	881b      	ldrh	r3, [r3, #0]
 80029d2:	b29b      	uxth	r3, r3
 80029d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80029d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029dc:	84bb      	strh	r3, [r7, #36]	; 0x24
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	461a      	mov	r2, r3
 80029e4:	68bb      	ldr	r3, [r7, #8]
 80029e6:	781b      	ldrb	r3, [r3, #0]
 80029e8:	009b      	lsls	r3, r3, #2
 80029ea:	441a      	add	r2, r3
 80029ec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80029ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80029f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80029f6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80029fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029fe:	b29b      	uxth	r3, r3
 8002a00:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002a02:	68bb      	ldr	r3, [r7, #8]
 8002a04:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002a08:	2b01      	cmp	r3, #1
 8002a0a:	f040 81e1 	bne.w	8002dd0 <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        ep->xfer_buff += TxByteNbre;
 8002a0e:	68bb      	ldr	r3, [r7, #8]
 8002a10:	695a      	ldr	r2, [r3, #20]
 8002a12:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002a14:	441a      	add	r2, r3
 8002a16:	68bb      	ldr	r3, [r7, #8]
 8002a18:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002a1a:	68bb      	ldr	r3, [r7, #8]
 8002a1c:	69da      	ldr	r2, [r3, #28]
 8002a1e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002a20:	441a      	add	r2, r3
 8002a22:	68bb      	ldr	r3, [r7, #8]
 8002a24:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002a26:	68bb      	ldr	r3, [r7, #8]
 8002a28:	6a1a      	ldr	r2, [r3, #32]
 8002a2a:	68bb      	ldr	r3, [r7, #8]
 8002a2c:	691b      	ldr	r3, [r3, #16]
 8002a2e:	429a      	cmp	r2, r3
 8002a30:	d309      	bcc.n	8002a46 <HAL_PCD_EP_DB_Transmit+0x14e>
        {
          len = ep->maxpacket;
 8002a32:	68bb      	ldr	r3, [r7, #8]
 8002a34:	691b      	ldr	r3, [r3, #16]
 8002a36:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 8002a38:	68bb      	ldr	r3, [r7, #8]
 8002a3a:	6a1a      	ldr	r2, [r3, #32]
 8002a3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a3e:	1ad2      	subs	r2, r2, r3
 8002a40:	68bb      	ldr	r3, [r7, #8]
 8002a42:	621a      	str	r2, [r3, #32]
 8002a44:	e014      	b.n	8002a70 <HAL_PCD_EP_DB_Transmit+0x178>
        }
        else if (ep->xfer_len_db == 0U)
 8002a46:	68bb      	ldr	r3, [r7, #8]
 8002a48:	6a1b      	ldr	r3, [r3, #32]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d106      	bne.n	8002a5c <HAL_PCD_EP_DB_Transmit+0x164>
        {
          len = TxByteNbre;
 8002a4e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002a50:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 8002a52:	68bb      	ldr	r3, [r7, #8]
 8002a54:	2200      	movs	r2, #0
 8002a56:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002a5a:	e009      	b.n	8002a70 <HAL_PCD_EP_DB_Transmit+0x178>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002a5c:	68bb      	ldr	r3, [r7, #8]
 8002a5e:	2200      	movs	r2, #0
 8002a60:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8002a64:	68bb      	ldr	r3, [r7, #8]
 8002a66:	6a1b      	ldr	r3, [r3, #32]
 8002a68:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 8002a6a:	68bb      	ldr	r3, [r7, #8]
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	785b      	ldrb	r3, [r3, #1]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d155      	bne.n	8002b24 <HAL_PCD_EP_DB_Transmit+0x22c>
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	61bb      	str	r3, [r7, #24]
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a86:	b29b      	uxth	r3, r3
 8002a88:	461a      	mov	r2, r3
 8002a8a:	69bb      	ldr	r3, [r7, #24]
 8002a8c:	4413      	add	r3, r2
 8002a8e:	61bb      	str	r3, [r7, #24]
 8002a90:	68bb      	ldr	r3, [r7, #8]
 8002a92:	781b      	ldrb	r3, [r3, #0]
 8002a94:	00da      	lsls	r2, r3, #3
 8002a96:	69bb      	ldr	r3, [r7, #24]
 8002a98:	4413      	add	r3, r2
 8002a9a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002a9e:	617b      	str	r3, [r7, #20]
 8002aa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d112      	bne.n	8002acc <HAL_PCD_EP_DB_Transmit+0x1d4>
 8002aa6:	697b      	ldr	r3, [r7, #20]
 8002aa8:	881b      	ldrh	r3, [r3, #0]
 8002aaa:	b29b      	uxth	r3, r3
 8002aac:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002ab0:	b29a      	uxth	r2, r3
 8002ab2:	697b      	ldr	r3, [r7, #20]
 8002ab4:	801a      	strh	r2, [r3, #0]
 8002ab6:	697b      	ldr	r3, [r7, #20]
 8002ab8:	881b      	ldrh	r3, [r3, #0]
 8002aba:	b29b      	uxth	r3, r3
 8002abc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002ac0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002ac4:	b29a      	uxth	r2, r3
 8002ac6:	697b      	ldr	r3, [r7, #20]
 8002ac8:	801a      	strh	r2, [r3, #0]
 8002aca:	e047      	b.n	8002b5c <HAL_PCD_EP_DB_Transmit+0x264>
 8002acc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ace:	2b3e      	cmp	r3, #62	; 0x3e
 8002ad0:	d811      	bhi.n	8002af6 <HAL_PCD_EP_DB_Transmit+0x1fe>
 8002ad2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ad4:	085b      	lsrs	r3, r3, #1
 8002ad6:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ad8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ada:	f003 0301 	and.w	r3, r3, #1
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d002      	beq.n	8002ae8 <HAL_PCD_EP_DB_Transmit+0x1f0>
 8002ae2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ae4:	3301      	adds	r3, #1
 8002ae6:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ae8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002aea:	b29b      	uxth	r3, r3
 8002aec:	029b      	lsls	r3, r3, #10
 8002aee:	b29a      	uxth	r2, r3
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	801a      	strh	r2, [r3, #0]
 8002af4:	e032      	b.n	8002b5c <HAL_PCD_EP_DB_Transmit+0x264>
 8002af6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002af8:	095b      	lsrs	r3, r3, #5
 8002afa:	62bb      	str	r3, [r7, #40]	; 0x28
 8002afc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002afe:	f003 031f 	and.w	r3, r3, #31
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d102      	bne.n	8002b0c <HAL_PCD_EP_DB_Transmit+0x214>
 8002b06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b08:	3b01      	subs	r3, #1
 8002b0a:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b0e:	b29b      	uxth	r3, r3
 8002b10:	029b      	lsls	r3, r3, #10
 8002b12:	b29b      	uxth	r3, r3
 8002b14:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b18:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b1c:	b29a      	uxth	r2, r3
 8002b1e:	697b      	ldr	r3, [r7, #20]
 8002b20:	801a      	strh	r2, [r3, #0]
 8002b22:	e01b      	b.n	8002b5c <HAL_PCD_EP_DB_Transmit+0x264>
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	785b      	ldrb	r3, [r3, #1]
 8002b28:	2b01      	cmp	r3, #1
 8002b2a:	d117      	bne.n	8002b5c <HAL_PCD_EP_DB_Transmit+0x264>
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	623b      	str	r3, [r7, #32]
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b3a:	b29b      	uxth	r3, r3
 8002b3c:	461a      	mov	r2, r3
 8002b3e:	6a3b      	ldr	r3, [r7, #32]
 8002b40:	4413      	add	r3, r2
 8002b42:	623b      	str	r3, [r7, #32]
 8002b44:	68bb      	ldr	r3, [r7, #8]
 8002b46:	781b      	ldrb	r3, [r3, #0]
 8002b48:	00da      	lsls	r2, r3, #3
 8002b4a:	6a3b      	ldr	r3, [r7, #32]
 8002b4c:	4413      	add	r3, r2
 8002b4e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002b52:	61fb      	str	r3, [r7, #28]
 8002b54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b56:	b29a      	uxth	r2, r3
 8002b58:	69fb      	ldr	r3, [r7, #28]
 8002b5a:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	6818      	ldr	r0, [r3, #0]
 8002b60:	68bb      	ldr	r3, [r7, #8]
 8002b62:	6959      	ldr	r1, [r3, #20]
 8002b64:	68bb      	ldr	r3, [r7, #8]
 8002b66:	891a      	ldrh	r2, [r3, #8]
 8002b68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b6a:	b29b      	uxth	r3, r3
 8002b6c:	f004 fa4e 	bl	800700c <USB_WritePMA>
 8002b70:	e12e      	b.n	8002dd0 <HAL_PCD_EP_DB_Transmit+0x4d8>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b7a:	b29b      	uxth	r3, r3
 8002b7c:	461a      	mov	r2, r3
 8002b7e:	68bb      	ldr	r3, [r7, #8]
 8002b80:	781b      	ldrb	r3, [r3, #0]
 8002b82:	00db      	lsls	r3, r3, #3
 8002b84:	4413      	add	r3, r2
 8002b86:	68fa      	ldr	r2, [r7, #12]
 8002b88:	6812      	ldr	r2, [r2, #0]
 8002b8a:	4413      	add	r3, r2
 8002b8c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002b90:	881b      	ldrh	r3, [r3, #0]
 8002b92:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b96:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len >= TxByteNbre)
 8002b98:	68bb      	ldr	r3, [r7, #8]
 8002b9a:	699a      	ldr	r2, [r3, #24]
 8002b9c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002b9e:	429a      	cmp	r2, r3
 8002ba0:	d306      	bcc.n	8002bb0 <HAL_PCD_EP_DB_Transmit+0x2b8>
    {
      ep->xfer_len -= TxByteNbre;
 8002ba2:	68bb      	ldr	r3, [r7, #8]
 8002ba4:	699a      	ldr	r2, [r3, #24]
 8002ba6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002ba8:	1ad2      	subs	r2, r2, r3
 8002baa:	68bb      	ldr	r3, [r7, #8]
 8002bac:	619a      	str	r2, [r3, #24]
 8002bae:	e002      	b.n	8002bb6 <HAL_PCD_EP_DB_Transmit+0x2be>
    }
    else
    {
      ep->xfer_len = 0U;
 8002bb0:	68bb      	ldr	r3, [r7, #8]
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002bb6:	68bb      	ldr	r3, [r7, #8]
 8002bb8:	699b      	ldr	r3, [r3, #24]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d12c      	bne.n	8002c18 <HAL_PCD_EP_DB_Transmit+0x320>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002bbe:	68bb      	ldr	r3, [r7, #8]
 8002bc0:	781b      	ldrb	r3, [r3, #0]
 8002bc2:	4619      	mov	r1, r3
 8002bc4:	68f8      	ldr	r0, [r7, #12]
 8002bc6:	f006 f902 	bl	8008dce <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002bca:	88fb      	ldrh	r3, [r7, #6]
 8002bcc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	f040 80fd 	bne.w	8002dd0 <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	461a      	mov	r2, r3
 8002bdc:	68bb      	ldr	r3, [r7, #8]
 8002bde:	781b      	ldrb	r3, [r3, #0]
 8002be0:	009b      	lsls	r3, r3, #2
 8002be2:	4413      	add	r3, r2
 8002be4:	881b      	ldrh	r3, [r3, #0]
 8002be6:	b29b      	uxth	r3, r3
 8002be8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002bec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bf0:	84fb      	strh	r3, [r7, #38]	; 0x26
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	461a      	mov	r2, r3
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	781b      	ldrb	r3, [r3, #0]
 8002bfc:	009b      	lsls	r3, r3, #2
 8002bfe:	441a      	add	r2, r3
 8002c00:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002c02:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002c06:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002c0a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002c0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c12:	b29b      	uxth	r3, r3
 8002c14:	8013      	strh	r3, [r2, #0]
 8002c16:	e0db      	b.n	8002dd0 <HAL_PCD_EP_DB_Transmit+0x4d8>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002c18:	88fb      	ldrh	r3, [r7, #6]
 8002c1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d11f      	bne.n	8002c62 <HAL_PCD_EP_DB_Transmit+0x36a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	461a      	mov	r2, r3
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	781b      	ldrb	r3, [r3, #0]
 8002c2c:	009b      	lsls	r3, r3, #2
 8002c2e:	4413      	add	r3, r2
 8002c30:	881b      	ldrh	r3, [r3, #0]
 8002c32:	b29b      	uxth	r3, r3
 8002c34:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c3c:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	461a      	mov	r2, r3
 8002c44:	68bb      	ldr	r3, [r7, #8]
 8002c46:	781b      	ldrb	r3, [r3, #0]
 8002c48:	009b      	lsls	r3, r3, #2
 8002c4a:	441a      	add	r2, r3
 8002c4c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8002c4e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002c52:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002c56:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002c5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c5e:	b29b      	uxth	r3, r3
 8002c60:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002c62:	68bb      	ldr	r3, [r7, #8]
 8002c64:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002c68:	2b01      	cmp	r3, #1
 8002c6a:	f040 80b1 	bne.w	8002dd0 <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        ep->xfer_buff += TxByteNbre;
 8002c6e:	68bb      	ldr	r3, [r7, #8]
 8002c70:	695a      	ldr	r2, [r3, #20]
 8002c72:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002c74:	441a      	add	r2, r3
 8002c76:	68bb      	ldr	r3, [r7, #8]
 8002c78:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002c7a:	68bb      	ldr	r3, [r7, #8]
 8002c7c:	69da      	ldr	r2, [r3, #28]
 8002c7e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002c80:	441a      	add	r2, r3
 8002c82:	68bb      	ldr	r3, [r7, #8]
 8002c84:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002c86:	68bb      	ldr	r3, [r7, #8]
 8002c88:	6a1a      	ldr	r2, [r3, #32]
 8002c8a:	68bb      	ldr	r3, [r7, #8]
 8002c8c:	691b      	ldr	r3, [r3, #16]
 8002c8e:	429a      	cmp	r2, r3
 8002c90:	d309      	bcc.n	8002ca6 <HAL_PCD_EP_DB_Transmit+0x3ae>
        {
          len = ep->maxpacket;
 8002c92:	68bb      	ldr	r3, [r7, #8]
 8002c94:	691b      	ldr	r3, [r3, #16]
 8002c96:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 8002c98:	68bb      	ldr	r3, [r7, #8]
 8002c9a:	6a1a      	ldr	r2, [r3, #32]
 8002c9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c9e:	1ad2      	subs	r2, r2, r3
 8002ca0:	68bb      	ldr	r3, [r7, #8]
 8002ca2:	621a      	str	r2, [r3, #32]
 8002ca4:	e014      	b.n	8002cd0 <HAL_PCD_EP_DB_Transmit+0x3d8>
        }
        else if (ep->xfer_len_db == 0U)
 8002ca6:	68bb      	ldr	r3, [r7, #8]
 8002ca8:	6a1b      	ldr	r3, [r3, #32]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d106      	bne.n	8002cbc <HAL_PCD_EP_DB_Transmit+0x3c4>
        {
          len = TxByteNbre;
 8002cae:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002cb0:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 8002cb2:	68bb      	ldr	r3, [r7, #8]
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002cba:	e009      	b.n	8002cd0 <HAL_PCD_EP_DB_Transmit+0x3d8>
        }
        else
        {
          len = ep->xfer_len_db;
 8002cbc:	68bb      	ldr	r3, [r7, #8]
 8002cbe:	6a1b      	ldr	r3, [r3, #32]
 8002cc0:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 8002cc2:	68bb      	ldr	r3, [r7, #8]
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	2200      	movs	r2, #0
 8002ccc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	637b      	str	r3, [r7, #52]	; 0x34
 8002cd6:	68bb      	ldr	r3, [r7, #8]
 8002cd8:	785b      	ldrb	r3, [r3, #1]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d155      	bne.n	8002d8a <HAL_PCD_EP_DB_Transmit+0x492>
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	647b      	str	r3, [r7, #68]	; 0x44
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002cec:	b29b      	uxth	r3, r3
 8002cee:	461a      	mov	r2, r3
 8002cf0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002cf2:	4413      	add	r3, r2
 8002cf4:	647b      	str	r3, [r7, #68]	; 0x44
 8002cf6:	68bb      	ldr	r3, [r7, #8]
 8002cf8:	781b      	ldrb	r3, [r3, #0]
 8002cfa:	00da      	lsls	r2, r3, #3
 8002cfc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002cfe:	4413      	add	r3, r2
 8002d00:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002d04:	643b      	str	r3, [r7, #64]	; 0x40
 8002d06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d112      	bne.n	8002d32 <HAL_PCD_EP_DB_Transmit+0x43a>
 8002d0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d0e:	881b      	ldrh	r3, [r3, #0]
 8002d10:	b29b      	uxth	r3, r3
 8002d12:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002d16:	b29a      	uxth	r2, r3
 8002d18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d1a:	801a      	strh	r2, [r3, #0]
 8002d1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d1e:	881b      	ldrh	r3, [r3, #0]
 8002d20:	b29b      	uxth	r3, r3
 8002d22:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d26:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d2a:	b29a      	uxth	r2, r3
 8002d2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d2e:	801a      	strh	r2, [r3, #0]
 8002d30:	e044      	b.n	8002dbc <HAL_PCD_EP_DB_Transmit+0x4c4>
 8002d32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d34:	2b3e      	cmp	r3, #62	; 0x3e
 8002d36:	d811      	bhi.n	8002d5c <HAL_PCD_EP_DB_Transmit+0x464>
 8002d38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d3a:	085b      	lsrs	r3, r3, #1
 8002d3c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d40:	f003 0301 	and.w	r3, r3, #1
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d002      	beq.n	8002d4e <HAL_PCD_EP_DB_Transmit+0x456>
 8002d48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d4a:	3301      	adds	r3, #1
 8002d4c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d50:	b29b      	uxth	r3, r3
 8002d52:	029b      	lsls	r3, r3, #10
 8002d54:	b29a      	uxth	r2, r3
 8002d56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d58:	801a      	strh	r2, [r3, #0]
 8002d5a:	e02f      	b.n	8002dbc <HAL_PCD_EP_DB_Transmit+0x4c4>
 8002d5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d5e:	095b      	lsrs	r3, r3, #5
 8002d60:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d64:	f003 031f 	and.w	r3, r3, #31
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d102      	bne.n	8002d72 <HAL_PCD_EP_DB_Transmit+0x47a>
 8002d6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d6e:	3b01      	subs	r3, #1
 8002d70:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d74:	b29b      	uxth	r3, r3
 8002d76:	029b      	lsls	r3, r3, #10
 8002d78:	b29b      	uxth	r3, r3
 8002d7a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d7e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d82:	b29a      	uxth	r2, r3
 8002d84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d86:	801a      	strh	r2, [r3, #0]
 8002d88:	e018      	b.n	8002dbc <HAL_PCD_EP_DB_Transmit+0x4c4>
 8002d8a:	68bb      	ldr	r3, [r7, #8]
 8002d8c:	785b      	ldrb	r3, [r3, #1]
 8002d8e:	2b01      	cmp	r3, #1
 8002d90:	d114      	bne.n	8002dbc <HAL_PCD_EP_DB_Transmit+0x4c4>
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d9a:	b29b      	uxth	r3, r3
 8002d9c:	461a      	mov	r2, r3
 8002d9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002da0:	4413      	add	r3, r2
 8002da2:	637b      	str	r3, [r7, #52]	; 0x34
 8002da4:	68bb      	ldr	r3, [r7, #8]
 8002da6:	781b      	ldrb	r3, [r3, #0]
 8002da8:	00da      	lsls	r2, r3, #3
 8002daa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dac:	4413      	add	r3, r2
 8002dae:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002db2:	633b      	str	r3, [r7, #48]	; 0x30
 8002db4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002db6:	b29a      	uxth	r2, r3
 8002db8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dba:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	6818      	ldr	r0, [r3, #0]
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	6959      	ldr	r1, [r3, #20]
 8002dc4:	68bb      	ldr	r3, [r7, #8]
 8002dc6:	895a      	ldrh	r2, [r3, #10]
 8002dc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dca:	b29b      	uxth	r3, r3
 8002dcc:	f004 f91e 	bl	800700c <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	461a      	mov	r2, r3
 8002dd6:	68bb      	ldr	r3, [r7, #8]
 8002dd8:	781b      	ldrb	r3, [r3, #0]
 8002dda:	009b      	lsls	r3, r3, #2
 8002ddc:	4413      	add	r3, r2
 8002dde:	881b      	ldrh	r3, [r3, #0]
 8002de0:	b29b      	uxth	r3, r3
 8002de2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002de6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002dea:	823b      	strh	r3, [r7, #16]
 8002dec:	8a3b      	ldrh	r3, [r7, #16]
 8002dee:	f083 0310 	eor.w	r3, r3, #16
 8002df2:	823b      	strh	r3, [r7, #16]
 8002df4:	8a3b      	ldrh	r3, [r7, #16]
 8002df6:	f083 0320 	eor.w	r3, r3, #32
 8002dfa:	823b      	strh	r3, [r7, #16]
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	461a      	mov	r2, r3
 8002e02:	68bb      	ldr	r3, [r7, #8]
 8002e04:	781b      	ldrb	r3, [r3, #0]
 8002e06:	009b      	lsls	r3, r3, #2
 8002e08:	441a      	add	r2, r3
 8002e0a:	8a3b      	ldrh	r3, [r7, #16]
 8002e0c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002e10:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002e14:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e1c:	b29b      	uxth	r3, r3
 8002e1e:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002e20:	2300      	movs	r3, #0
}
 8002e22:	4618      	mov	r0, r3
 8002e24:	3748      	adds	r7, #72	; 0x48
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bd80      	pop	{r7, pc}

08002e2a <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 8002e2a:	b480      	push	{r7}
 8002e2c:	b087      	sub	sp, #28
 8002e2e:	af00      	add	r7, sp, #0
 8002e30:	60f8      	str	r0, [r7, #12]
 8002e32:	607b      	str	r3, [r7, #4]
 8002e34:	460b      	mov	r3, r1
 8002e36:	817b      	strh	r3, [r7, #10]
 8002e38:	4613      	mov	r3, r2
 8002e3a:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002e3c:	897b      	ldrh	r3, [r7, #10]
 8002e3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e42:	b29b      	uxth	r3, r3
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d00b      	beq.n	8002e60 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e48:	897b      	ldrh	r3, [r7, #10]
 8002e4a:	f003 0307 	and.w	r3, r3, #7
 8002e4e:	1c5a      	adds	r2, r3, #1
 8002e50:	4613      	mov	r3, r2
 8002e52:	009b      	lsls	r3, r3, #2
 8002e54:	4413      	add	r3, r2
 8002e56:	00db      	lsls	r3, r3, #3
 8002e58:	68fa      	ldr	r2, [r7, #12]
 8002e5a:	4413      	add	r3, r2
 8002e5c:	617b      	str	r3, [r7, #20]
 8002e5e:	e009      	b.n	8002e74 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002e60:	897a      	ldrh	r2, [r7, #10]
 8002e62:	4613      	mov	r3, r2
 8002e64:	009b      	lsls	r3, r3, #2
 8002e66:	4413      	add	r3, r2
 8002e68:	00db      	lsls	r3, r3, #3
 8002e6a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002e6e:	68fa      	ldr	r2, [r7, #12]
 8002e70:	4413      	add	r3, r2
 8002e72:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002e74:	893b      	ldrh	r3, [r7, #8]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d107      	bne.n	8002e8a <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002e7a:	697b      	ldr	r3, [r7, #20]
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	b29a      	uxth	r2, r3
 8002e84:	697b      	ldr	r3, [r7, #20]
 8002e86:	80da      	strh	r2, [r3, #6]
 8002e88:	e00b      	b.n	8002ea2 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002e8a:	697b      	ldr	r3, [r7, #20]
 8002e8c:	2201      	movs	r2, #1
 8002e8e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	b29a      	uxth	r2, r3
 8002e94:	697b      	ldr	r3, [r7, #20]
 8002e96:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	0c1b      	lsrs	r3, r3, #16
 8002e9c:	b29a      	uxth	r2, r3
 8002e9e:	697b      	ldr	r3, [r7, #20]
 8002ea0:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8002ea2:	2300      	movs	r3, #0
}
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	371c      	adds	r7, #28
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eae:	4770      	bx	lr

08002eb0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	b085      	sub	sp, #20
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2201      	movs	r2, #1
 8002ec2:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2200      	movs	r2, #0
 8002eca:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002ed4:	b29b      	uxth	r3, r3
 8002ed6:	f043 0301 	orr.w	r3, r3, #1
 8002eda:	b29a      	uxth	r2, r3
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002ee8:	b29b      	uxth	r3, r3
 8002eea:	f043 0302 	orr.w	r3, r3, #2
 8002eee:	b29a      	uxth	r2, r3
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8002ef6:	2300      	movs	r3, #0
}
 8002ef8:	4618      	mov	r0, r3
 8002efa:	3714      	adds	r7, #20
 8002efc:	46bd      	mov	sp, r7
 8002efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f02:	4770      	bx	lr

08002f04 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002f04:	b480      	push	{r7}
 8002f06:	b085      	sub	sp, #20
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d141      	bne.n	8002f96 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002f12:	4b4b      	ldr	r3, [pc, #300]	; (8003040 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002f1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f1e:	d131      	bne.n	8002f84 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002f20:	4b47      	ldr	r3, [pc, #284]	; (8003040 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f22:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f26:	4a46      	ldr	r2, [pc, #280]	; (8003040 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f28:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002f2c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002f30:	4b43      	ldr	r3, [pc, #268]	; (8003040 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002f38:	4a41      	ldr	r2, [pc, #260]	; (8003040 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f3a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f3e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002f40:	4b40      	ldr	r3, [pc, #256]	; (8003044 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	2232      	movs	r2, #50	; 0x32
 8002f46:	fb02 f303 	mul.w	r3, r2, r3
 8002f4a:	4a3f      	ldr	r2, [pc, #252]	; (8003048 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002f4c:	fba2 2303 	umull	r2, r3, r2, r3
 8002f50:	0c9b      	lsrs	r3, r3, #18
 8002f52:	3301      	adds	r3, #1
 8002f54:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002f56:	e002      	b.n	8002f5e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	3b01      	subs	r3, #1
 8002f5c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002f5e:	4b38      	ldr	r3, [pc, #224]	; (8003040 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f60:	695b      	ldr	r3, [r3, #20]
 8002f62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f6a:	d102      	bne.n	8002f72 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d1f2      	bne.n	8002f58 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002f72:	4b33      	ldr	r3, [pc, #204]	; (8003040 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f74:	695b      	ldr	r3, [r3, #20]
 8002f76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f7e:	d158      	bne.n	8003032 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002f80:	2303      	movs	r3, #3
 8002f82:	e057      	b.n	8003034 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002f84:	4b2e      	ldr	r3, [pc, #184]	; (8003040 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f86:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f8a:	4a2d      	ldr	r2, [pc, #180]	; (8003040 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f8c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002f90:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002f94:	e04d      	b.n	8003032 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f9c:	d141      	bne.n	8003022 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002f9e:	4b28      	ldr	r3, [pc, #160]	; (8003040 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002fa6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002faa:	d131      	bne.n	8003010 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002fac:	4b24      	ldr	r3, [pc, #144]	; (8003040 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002fb2:	4a23      	ldr	r2, [pc, #140]	; (8003040 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fb8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002fbc:	4b20      	ldr	r3, [pc, #128]	; (8003040 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002fc4:	4a1e      	ldr	r2, [pc, #120]	; (8003040 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fc6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002fca:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002fcc:	4b1d      	ldr	r3, [pc, #116]	; (8003044 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	2232      	movs	r2, #50	; 0x32
 8002fd2:	fb02 f303 	mul.w	r3, r2, r3
 8002fd6:	4a1c      	ldr	r2, [pc, #112]	; (8003048 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002fd8:	fba2 2303 	umull	r2, r3, r2, r3
 8002fdc:	0c9b      	lsrs	r3, r3, #18
 8002fde:	3301      	adds	r3, #1
 8002fe0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002fe2:	e002      	b.n	8002fea <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	3b01      	subs	r3, #1
 8002fe8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002fea:	4b15      	ldr	r3, [pc, #84]	; (8003040 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fec:	695b      	ldr	r3, [r3, #20]
 8002fee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ff2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ff6:	d102      	bne.n	8002ffe <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d1f2      	bne.n	8002fe4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002ffe:	4b10      	ldr	r3, [pc, #64]	; (8003040 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003000:	695b      	ldr	r3, [r3, #20]
 8003002:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003006:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800300a:	d112      	bne.n	8003032 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800300c:	2303      	movs	r3, #3
 800300e:	e011      	b.n	8003034 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003010:	4b0b      	ldr	r3, [pc, #44]	; (8003040 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003012:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003016:	4a0a      	ldr	r2, [pc, #40]	; (8003040 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003018:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800301c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003020:	e007      	b.n	8003032 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003022:	4b07      	ldr	r3, [pc, #28]	; (8003040 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800302a:	4a05      	ldr	r2, [pc, #20]	; (8003040 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800302c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003030:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003032:	2300      	movs	r3, #0
}
 8003034:	4618      	mov	r0, r3
 8003036:	3714      	adds	r7, #20
 8003038:	46bd      	mov	sp, r7
 800303a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303e:	4770      	bx	lr
 8003040:	40007000 	.word	0x40007000
 8003044:	20000000 	.word	0x20000000
 8003048:	431bde83 	.word	0x431bde83

0800304c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800304c:	b480      	push	{r7}
 800304e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003050:	4b05      	ldr	r3, [pc, #20]	; (8003068 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003052:	689b      	ldr	r3, [r3, #8]
 8003054:	4a04      	ldr	r2, [pc, #16]	; (8003068 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003056:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800305a:	6093      	str	r3, [r2, #8]
}
 800305c:	bf00      	nop
 800305e:	46bd      	mov	sp, r7
 8003060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003064:	4770      	bx	lr
 8003066:	bf00      	nop
 8003068:	40007000 	.word	0x40007000

0800306c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b088      	sub	sp, #32
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d101      	bne.n	800307e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800307a:	2301      	movs	r3, #1
 800307c:	e308      	b.n	8003690 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f003 0301 	and.w	r3, r3, #1
 8003086:	2b00      	cmp	r3, #0
 8003088:	d075      	beq.n	8003176 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800308a:	4ba3      	ldr	r3, [pc, #652]	; (8003318 <HAL_RCC_OscConfig+0x2ac>)
 800308c:	689b      	ldr	r3, [r3, #8]
 800308e:	f003 030c 	and.w	r3, r3, #12
 8003092:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003094:	4ba0      	ldr	r3, [pc, #640]	; (8003318 <HAL_RCC_OscConfig+0x2ac>)
 8003096:	68db      	ldr	r3, [r3, #12]
 8003098:	f003 0303 	and.w	r3, r3, #3
 800309c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800309e:	69bb      	ldr	r3, [r7, #24]
 80030a0:	2b0c      	cmp	r3, #12
 80030a2:	d102      	bne.n	80030aa <HAL_RCC_OscConfig+0x3e>
 80030a4:	697b      	ldr	r3, [r7, #20]
 80030a6:	2b03      	cmp	r3, #3
 80030a8:	d002      	beq.n	80030b0 <HAL_RCC_OscConfig+0x44>
 80030aa:	69bb      	ldr	r3, [r7, #24]
 80030ac:	2b08      	cmp	r3, #8
 80030ae:	d10b      	bne.n	80030c8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030b0:	4b99      	ldr	r3, [pc, #612]	; (8003318 <HAL_RCC_OscConfig+0x2ac>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d05b      	beq.n	8003174 <HAL_RCC_OscConfig+0x108>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d157      	bne.n	8003174 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80030c4:	2301      	movs	r3, #1
 80030c6:	e2e3      	b.n	8003690 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030d0:	d106      	bne.n	80030e0 <HAL_RCC_OscConfig+0x74>
 80030d2:	4b91      	ldr	r3, [pc, #580]	; (8003318 <HAL_RCC_OscConfig+0x2ac>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4a90      	ldr	r2, [pc, #576]	; (8003318 <HAL_RCC_OscConfig+0x2ac>)
 80030d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030dc:	6013      	str	r3, [r2, #0]
 80030de:	e01d      	b.n	800311c <HAL_RCC_OscConfig+0xb0>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80030e8:	d10c      	bne.n	8003104 <HAL_RCC_OscConfig+0x98>
 80030ea:	4b8b      	ldr	r3, [pc, #556]	; (8003318 <HAL_RCC_OscConfig+0x2ac>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4a8a      	ldr	r2, [pc, #552]	; (8003318 <HAL_RCC_OscConfig+0x2ac>)
 80030f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80030f4:	6013      	str	r3, [r2, #0]
 80030f6:	4b88      	ldr	r3, [pc, #544]	; (8003318 <HAL_RCC_OscConfig+0x2ac>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4a87      	ldr	r2, [pc, #540]	; (8003318 <HAL_RCC_OscConfig+0x2ac>)
 80030fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003100:	6013      	str	r3, [r2, #0]
 8003102:	e00b      	b.n	800311c <HAL_RCC_OscConfig+0xb0>
 8003104:	4b84      	ldr	r3, [pc, #528]	; (8003318 <HAL_RCC_OscConfig+0x2ac>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4a83      	ldr	r2, [pc, #524]	; (8003318 <HAL_RCC_OscConfig+0x2ac>)
 800310a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800310e:	6013      	str	r3, [r2, #0]
 8003110:	4b81      	ldr	r3, [pc, #516]	; (8003318 <HAL_RCC_OscConfig+0x2ac>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4a80      	ldr	r2, [pc, #512]	; (8003318 <HAL_RCC_OscConfig+0x2ac>)
 8003116:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800311a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d013      	beq.n	800314c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003124:	f7fe f8b6 	bl	8001294 <HAL_GetTick>
 8003128:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800312a:	e008      	b.n	800313e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800312c:	f7fe f8b2 	bl	8001294 <HAL_GetTick>
 8003130:	4602      	mov	r2, r0
 8003132:	693b      	ldr	r3, [r7, #16]
 8003134:	1ad3      	subs	r3, r2, r3
 8003136:	2b64      	cmp	r3, #100	; 0x64
 8003138:	d901      	bls.n	800313e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800313a:	2303      	movs	r3, #3
 800313c:	e2a8      	b.n	8003690 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800313e:	4b76      	ldr	r3, [pc, #472]	; (8003318 <HAL_RCC_OscConfig+0x2ac>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003146:	2b00      	cmp	r3, #0
 8003148:	d0f0      	beq.n	800312c <HAL_RCC_OscConfig+0xc0>
 800314a:	e014      	b.n	8003176 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800314c:	f7fe f8a2 	bl	8001294 <HAL_GetTick>
 8003150:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003152:	e008      	b.n	8003166 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003154:	f7fe f89e 	bl	8001294 <HAL_GetTick>
 8003158:	4602      	mov	r2, r0
 800315a:	693b      	ldr	r3, [r7, #16]
 800315c:	1ad3      	subs	r3, r2, r3
 800315e:	2b64      	cmp	r3, #100	; 0x64
 8003160:	d901      	bls.n	8003166 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003162:	2303      	movs	r3, #3
 8003164:	e294      	b.n	8003690 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003166:	4b6c      	ldr	r3, [pc, #432]	; (8003318 <HAL_RCC_OscConfig+0x2ac>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800316e:	2b00      	cmp	r3, #0
 8003170:	d1f0      	bne.n	8003154 <HAL_RCC_OscConfig+0xe8>
 8003172:	e000      	b.n	8003176 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003174:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f003 0302 	and.w	r3, r3, #2
 800317e:	2b00      	cmp	r3, #0
 8003180:	d075      	beq.n	800326e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003182:	4b65      	ldr	r3, [pc, #404]	; (8003318 <HAL_RCC_OscConfig+0x2ac>)
 8003184:	689b      	ldr	r3, [r3, #8]
 8003186:	f003 030c 	and.w	r3, r3, #12
 800318a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800318c:	4b62      	ldr	r3, [pc, #392]	; (8003318 <HAL_RCC_OscConfig+0x2ac>)
 800318e:	68db      	ldr	r3, [r3, #12]
 8003190:	f003 0303 	and.w	r3, r3, #3
 8003194:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003196:	69bb      	ldr	r3, [r7, #24]
 8003198:	2b0c      	cmp	r3, #12
 800319a:	d102      	bne.n	80031a2 <HAL_RCC_OscConfig+0x136>
 800319c:	697b      	ldr	r3, [r7, #20]
 800319e:	2b02      	cmp	r3, #2
 80031a0:	d002      	beq.n	80031a8 <HAL_RCC_OscConfig+0x13c>
 80031a2:	69bb      	ldr	r3, [r7, #24]
 80031a4:	2b04      	cmp	r3, #4
 80031a6:	d11f      	bne.n	80031e8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80031a8:	4b5b      	ldr	r3, [pc, #364]	; (8003318 <HAL_RCC_OscConfig+0x2ac>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d005      	beq.n	80031c0 <HAL_RCC_OscConfig+0x154>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	68db      	ldr	r3, [r3, #12]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d101      	bne.n	80031c0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80031bc:	2301      	movs	r3, #1
 80031be:	e267      	b.n	8003690 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031c0:	4b55      	ldr	r3, [pc, #340]	; (8003318 <HAL_RCC_OscConfig+0x2ac>)
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	691b      	ldr	r3, [r3, #16]
 80031cc:	061b      	lsls	r3, r3, #24
 80031ce:	4952      	ldr	r1, [pc, #328]	; (8003318 <HAL_RCC_OscConfig+0x2ac>)
 80031d0:	4313      	orrs	r3, r2
 80031d2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80031d4:	4b51      	ldr	r3, [pc, #324]	; (800331c <HAL_RCC_OscConfig+0x2b0>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4618      	mov	r0, r3
 80031da:	f7fe f80f 	bl	80011fc <HAL_InitTick>
 80031de:	4603      	mov	r3, r0
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d043      	beq.n	800326c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80031e4:	2301      	movs	r3, #1
 80031e6:	e253      	b.n	8003690 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	68db      	ldr	r3, [r3, #12]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d023      	beq.n	8003238 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80031f0:	4b49      	ldr	r3, [pc, #292]	; (8003318 <HAL_RCC_OscConfig+0x2ac>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a48      	ldr	r2, [pc, #288]	; (8003318 <HAL_RCC_OscConfig+0x2ac>)
 80031f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031fc:	f7fe f84a 	bl	8001294 <HAL_GetTick>
 8003200:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003202:	e008      	b.n	8003216 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003204:	f7fe f846 	bl	8001294 <HAL_GetTick>
 8003208:	4602      	mov	r2, r0
 800320a:	693b      	ldr	r3, [r7, #16]
 800320c:	1ad3      	subs	r3, r2, r3
 800320e:	2b02      	cmp	r3, #2
 8003210:	d901      	bls.n	8003216 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003212:	2303      	movs	r3, #3
 8003214:	e23c      	b.n	8003690 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003216:	4b40      	ldr	r3, [pc, #256]	; (8003318 <HAL_RCC_OscConfig+0x2ac>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800321e:	2b00      	cmp	r3, #0
 8003220:	d0f0      	beq.n	8003204 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003222:	4b3d      	ldr	r3, [pc, #244]	; (8003318 <HAL_RCC_OscConfig+0x2ac>)
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	691b      	ldr	r3, [r3, #16]
 800322e:	061b      	lsls	r3, r3, #24
 8003230:	4939      	ldr	r1, [pc, #228]	; (8003318 <HAL_RCC_OscConfig+0x2ac>)
 8003232:	4313      	orrs	r3, r2
 8003234:	604b      	str	r3, [r1, #4]
 8003236:	e01a      	b.n	800326e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003238:	4b37      	ldr	r3, [pc, #220]	; (8003318 <HAL_RCC_OscConfig+0x2ac>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a36      	ldr	r2, [pc, #216]	; (8003318 <HAL_RCC_OscConfig+0x2ac>)
 800323e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003242:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003244:	f7fe f826 	bl	8001294 <HAL_GetTick>
 8003248:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800324a:	e008      	b.n	800325e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800324c:	f7fe f822 	bl	8001294 <HAL_GetTick>
 8003250:	4602      	mov	r2, r0
 8003252:	693b      	ldr	r3, [r7, #16]
 8003254:	1ad3      	subs	r3, r2, r3
 8003256:	2b02      	cmp	r3, #2
 8003258:	d901      	bls.n	800325e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800325a:	2303      	movs	r3, #3
 800325c:	e218      	b.n	8003690 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800325e:	4b2e      	ldr	r3, [pc, #184]	; (8003318 <HAL_RCC_OscConfig+0x2ac>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003266:	2b00      	cmp	r3, #0
 8003268:	d1f0      	bne.n	800324c <HAL_RCC_OscConfig+0x1e0>
 800326a:	e000      	b.n	800326e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800326c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f003 0308 	and.w	r3, r3, #8
 8003276:	2b00      	cmp	r3, #0
 8003278:	d03c      	beq.n	80032f4 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	695b      	ldr	r3, [r3, #20]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d01c      	beq.n	80032bc <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003282:	4b25      	ldr	r3, [pc, #148]	; (8003318 <HAL_RCC_OscConfig+0x2ac>)
 8003284:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003288:	4a23      	ldr	r2, [pc, #140]	; (8003318 <HAL_RCC_OscConfig+0x2ac>)
 800328a:	f043 0301 	orr.w	r3, r3, #1
 800328e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003292:	f7fd ffff 	bl	8001294 <HAL_GetTick>
 8003296:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003298:	e008      	b.n	80032ac <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800329a:	f7fd fffb 	bl	8001294 <HAL_GetTick>
 800329e:	4602      	mov	r2, r0
 80032a0:	693b      	ldr	r3, [r7, #16]
 80032a2:	1ad3      	subs	r3, r2, r3
 80032a4:	2b02      	cmp	r3, #2
 80032a6:	d901      	bls.n	80032ac <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80032a8:	2303      	movs	r3, #3
 80032aa:	e1f1      	b.n	8003690 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80032ac:	4b1a      	ldr	r3, [pc, #104]	; (8003318 <HAL_RCC_OscConfig+0x2ac>)
 80032ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032b2:	f003 0302 	and.w	r3, r3, #2
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d0ef      	beq.n	800329a <HAL_RCC_OscConfig+0x22e>
 80032ba:	e01b      	b.n	80032f4 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032bc:	4b16      	ldr	r3, [pc, #88]	; (8003318 <HAL_RCC_OscConfig+0x2ac>)
 80032be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032c2:	4a15      	ldr	r2, [pc, #84]	; (8003318 <HAL_RCC_OscConfig+0x2ac>)
 80032c4:	f023 0301 	bic.w	r3, r3, #1
 80032c8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032cc:	f7fd ffe2 	bl	8001294 <HAL_GetTick>
 80032d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80032d2:	e008      	b.n	80032e6 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032d4:	f7fd ffde 	bl	8001294 <HAL_GetTick>
 80032d8:	4602      	mov	r2, r0
 80032da:	693b      	ldr	r3, [r7, #16]
 80032dc:	1ad3      	subs	r3, r2, r3
 80032de:	2b02      	cmp	r3, #2
 80032e0:	d901      	bls.n	80032e6 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 80032e2:	2303      	movs	r3, #3
 80032e4:	e1d4      	b.n	8003690 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80032e6:	4b0c      	ldr	r3, [pc, #48]	; (8003318 <HAL_RCC_OscConfig+0x2ac>)
 80032e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032ec:	f003 0302 	and.w	r3, r3, #2
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d1ef      	bne.n	80032d4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f003 0304 	and.w	r3, r3, #4
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	f000 80ab 	beq.w	8003458 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003302:	2300      	movs	r3, #0
 8003304:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003306:	4b04      	ldr	r3, [pc, #16]	; (8003318 <HAL_RCC_OscConfig+0x2ac>)
 8003308:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800330a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800330e:	2b00      	cmp	r3, #0
 8003310:	d106      	bne.n	8003320 <HAL_RCC_OscConfig+0x2b4>
 8003312:	2301      	movs	r3, #1
 8003314:	e005      	b.n	8003322 <HAL_RCC_OscConfig+0x2b6>
 8003316:	bf00      	nop
 8003318:	40021000 	.word	0x40021000
 800331c:	20000004 	.word	0x20000004
 8003320:	2300      	movs	r3, #0
 8003322:	2b00      	cmp	r3, #0
 8003324:	d00d      	beq.n	8003342 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003326:	4baf      	ldr	r3, [pc, #700]	; (80035e4 <HAL_RCC_OscConfig+0x578>)
 8003328:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800332a:	4aae      	ldr	r2, [pc, #696]	; (80035e4 <HAL_RCC_OscConfig+0x578>)
 800332c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003330:	6593      	str	r3, [r2, #88]	; 0x58
 8003332:	4bac      	ldr	r3, [pc, #688]	; (80035e4 <HAL_RCC_OscConfig+0x578>)
 8003334:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003336:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800333a:	60fb      	str	r3, [r7, #12]
 800333c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800333e:	2301      	movs	r3, #1
 8003340:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003342:	4ba9      	ldr	r3, [pc, #676]	; (80035e8 <HAL_RCC_OscConfig+0x57c>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800334a:	2b00      	cmp	r3, #0
 800334c:	d118      	bne.n	8003380 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800334e:	4ba6      	ldr	r3, [pc, #664]	; (80035e8 <HAL_RCC_OscConfig+0x57c>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4aa5      	ldr	r2, [pc, #660]	; (80035e8 <HAL_RCC_OscConfig+0x57c>)
 8003354:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003358:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800335a:	f7fd ff9b 	bl	8001294 <HAL_GetTick>
 800335e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003360:	e008      	b.n	8003374 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003362:	f7fd ff97 	bl	8001294 <HAL_GetTick>
 8003366:	4602      	mov	r2, r0
 8003368:	693b      	ldr	r3, [r7, #16]
 800336a:	1ad3      	subs	r3, r2, r3
 800336c:	2b02      	cmp	r3, #2
 800336e:	d901      	bls.n	8003374 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003370:	2303      	movs	r3, #3
 8003372:	e18d      	b.n	8003690 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003374:	4b9c      	ldr	r3, [pc, #624]	; (80035e8 <HAL_RCC_OscConfig+0x57c>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800337c:	2b00      	cmp	r3, #0
 800337e:	d0f0      	beq.n	8003362 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	689b      	ldr	r3, [r3, #8]
 8003384:	2b01      	cmp	r3, #1
 8003386:	d108      	bne.n	800339a <HAL_RCC_OscConfig+0x32e>
 8003388:	4b96      	ldr	r3, [pc, #600]	; (80035e4 <HAL_RCC_OscConfig+0x578>)
 800338a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800338e:	4a95      	ldr	r2, [pc, #596]	; (80035e4 <HAL_RCC_OscConfig+0x578>)
 8003390:	f043 0301 	orr.w	r3, r3, #1
 8003394:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003398:	e024      	b.n	80033e4 <HAL_RCC_OscConfig+0x378>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	689b      	ldr	r3, [r3, #8]
 800339e:	2b05      	cmp	r3, #5
 80033a0:	d110      	bne.n	80033c4 <HAL_RCC_OscConfig+0x358>
 80033a2:	4b90      	ldr	r3, [pc, #576]	; (80035e4 <HAL_RCC_OscConfig+0x578>)
 80033a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033a8:	4a8e      	ldr	r2, [pc, #568]	; (80035e4 <HAL_RCC_OscConfig+0x578>)
 80033aa:	f043 0304 	orr.w	r3, r3, #4
 80033ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80033b2:	4b8c      	ldr	r3, [pc, #560]	; (80035e4 <HAL_RCC_OscConfig+0x578>)
 80033b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033b8:	4a8a      	ldr	r2, [pc, #552]	; (80035e4 <HAL_RCC_OscConfig+0x578>)
 80033ba:	f043 0301 	orr.w	r3, r3, #1
 80033be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80033c2:	e00f      	b.n	80033e4 <HAL_RCC_OscConfig+0x378>
 80033c4:	4b87      	ldr	r3, [pc, #540]	; (80035e4 <HAL_RCC_OscConfig+0x578>)
 80033c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033ca:	4a86      	ldr	r2, [pc, #536]	; (80035e4 <HAL_RCC_OscConfig+0x578>)
 80033cc:	f023 0301 	bic.w	r3, r3, #1
 80033d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80033d4:	4b83      	ldr	r3, [pc, #524]	; (80035e4 <HAL_RCC_OscConfig+0x578>)
 80033d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033da:	4a82      	ldr	r2, [pc, #520]	; (80035e4 <HAL_RCC_OscConfig+0x578>)
 80033dc:	f023 0304 	bic.w	r3, r3, #4
 80033e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	689b      	ldr	r3, [r3, #8]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d016      	beq.n	800341a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033ec:	f7fd ff52 	bl	8001294 <HAL_GetTick>
 80033f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80033f2:	e00a      	b.n	800340a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033f4:	f7fd ff4e 	bl	8001294 <HAL_GetTick>
 80033f8:	4602      	mov	r2, r0
 80033fa:	693b      	ldr	r3, [r7, #16]
 80033fc:	1ad3      	subs	r3, r2, r3
 80033fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003402:	4293      	cmp	r3, r2
 8003404:	d901      	bls.n	800340a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003406:	2303      	movs	r3, #3
 8003408:	e142      	b.n	8003690 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800340a:	4b76      	ldr	r3, [pc, #472]	; (80035e4 <HAL_RCC_OscConfig+0x578>)
 800340c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003410:	f003 0302 	and.w	r3, r3, #2
 8003414:	2b00      	cmp	r3, #0
 8003416:	d0ed      	beq.n	80033f4 <HAL_RCC_OscConfig+0x388>
 8003418:	e015      	b.n	8003446 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800341a:	f7fd ff3b 	bl	8001294 <HAL_GetTick>
 800341e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003420:	e00a      	b.n	8003438 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003422:	f7fd ff37 	bl	8001294 <HAL_GetTick>
 8003426:	4602      	mov	r2, r0
 8003428:	693b      	ldr	r3, [r7, #16]
 800342a:	1ad3      	subs	r3, r2, r3
 800342c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003430:	4293      	cmp	r3, r2
 8003432:	d901      	bls.n	8003438 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003434:	2303      	movs	r3, #3
 8003436:	e12b      	b.n	8003690 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003438:	4b6a      	ldr	r3, [pc, #424]	; (80035e4 <HAL_RCC_OscConfig+0x578>)
 800343a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800343e:	f003 0302 	and.w	r3, r3, #2
 8003442:	2b00      	cmp	r3, #0
 8003444:	d1ed      	bne.n	8003422 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003446:	7ffb      	ldrb	r3, [r7, #31]
 8003448:	2b01      	cmp	r3, #1
 800344a:	d105      	bne.n	8003458 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800344c:	4b65      	ldr	r3, [pc, #404]	; (80035e4 <HAL_RCC_OscConfig+0x578>)
 800344e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003450:	4a64      	ldr	r2, [pc, #400]	; (80035e4 <HAL_RCC_OscConfig+0x578>)
 8003452:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003456:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f003 0320 	and.w	r3, r3, #32
 8003460:	2b00      	cmp	r3, #0
 8003462:	d03c      	beq.n	80034de <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	699b      	ldr	r3, [r3, #24]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d01c      	beq.n	80034a6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800346c:	4b5d      	ldr	r3, [pc, #372]	; (80035e4 <HAL_RCC_OscConfig+0x578>)
 800346e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003472:	4a5c      	ldr	r2, [pc, #368]	; (80035e4 <HAL_RCC_OscConfig+0x578>)
 8003474:	f043 0301 	orr.w	r3, r3, #1
 8003478:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800347c:	f7fd ff0a 	bl	8001294 <HAL_GetTick>
 8003480:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003482:	e008      	b.n	8003496 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003484:	f7fd ff06 	bl	8001294 <HAL_GetTick>
 8003488:	4602      	mov	r2, r0
 800348a:	693b      	ldr	r3, [r7, #16]
 800348c:	1ad3      	subs	r3, r2, r3
 800348e:	2b02      	cmp	r3, #2
 8003490:	d901      	bls.n	8003496 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003492:	2303      	movs	r3, #3
 8003494:	e0fc      	b.n	8003690 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003496:	4b53      	ldr	r3, [pc, #332]	; (80035e4 <HAL_RCC_OscConfig+0x578>)
 8003498:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800349c:	f003 0302 	and.w	r3, r3, #2
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d0ef      	beq.n	8003484 <HAL_RCC_OscConfig+0x418>
 80034a4:	e01b      	b.n	80034de <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80034a6:	4b4f      	ldr	r3, [pc, #316]	; (80035e4 <HAL_RCC_OscConfig+0x578>)
 80034a8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80034ac:	4a4d      	ldr	r2, [pc, #308]	; (80035e4 <HAL_RCC_OscConfig+0x578>)
 80034ae:	f023 0301 	bic.w	r3, r3, #1
 80034b2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034b6:	f7fd feed 	bl	8001294 <HAL_GetTick>
 80034ba:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80034bc:	e008      	b.n	80034d0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80034be:	f7fd fee9 	bl	8001294 <HAL_GetTick>
 80034c2:	4602      	mov	r2, r0
 80034c4:	693b      	ldr	r3, [r7, #16]
 80034c6:	1ad3      	subs	r3, r2, r3
 80034c8:	2b02      	cmp	r3, #2
 80034ca:	d901      	bls.n	80034d0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80034cc:	2303      	movs	r3, #3
 80034ce:	e0df      	b.n	8003690 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80034d0:	4b44      	ldr	r3, [pc, #272]	; (80035e4 <HAL_RCC_OscConfig+0x578>)
 80034d2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80034d6:	f003 0302 	and.w	r3, r3, #2
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d1ef      	bne.n	80034be <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	69db      	ldr	r3, [r3, #28]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	f000 80d3 	beq.w	800368e <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80034e8:	4b3e      	ldr	r3, [pc, #248]	; (80035e4 <HAL_RCC_OscConfig+0x578>)
 80034ea:	689b      	ldr	r3, [r3, #8]
 80034ec:	f003 030c 	and.w	r3, r3, #12
 80034f0:	2b0c      	cmp	r3, #12
 80034f2:	f000 808d 	beq.w	8003610 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	69db      	ldr	r3, [r3, #28]
 80034fa:	2b02      	cmp	r3, #2
 80034fc:	d15a      	bne.n	80035b4 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034fe:	4b39      	ldr	r3, [pc, #228]	; (80035e4 <HAL_RCC_OscConfig+0x578>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4a38      	ldr	r2, [pc, #224]	; (80035e4 <HAL_RCC_OscConfig+0x578>)
 8003504:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003508:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800350a:	f7fd fec3 	bl	8001294 <HAL_GetTick>
 800350e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003510:	e008      	b.n	8003524 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003512:	f7fd febf 	bl	8001294 <HAL_GetTick>
 8003516:	4602      	mov	r2, r0
 8003518:	693b      	ldr	r3, [r7, #16]
 800351a:	1ad3      	subs	r3, r2, r3
 800351c:	2b02      	cmp	r3, #2
 800351e:	d901      	bls.n	8003524 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8003520:	2303      	movs	r3, #3
 8003522:	e0b5      	b.n	8003690 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003524:	4b2f      	ldr	r3, [pc, #188]	; (80035e4 <HAL_RCC_OscConfig+0x578>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800352c:	2b00      	cmp	r3, #0
 800352e:	d1f0      	bne.n	8003512 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003530:	4b2c      	ldr	r3, [pc, #176]	; (80035e4 <HAL_RCC_OscConfig+0x578>)
 8003532:	68da      	ldr	r2, [r3, #12]
 8003534:	4b2d      	ldr	r3, [pc, #180]	; (80035ec <HAL_RCC_OscConfig+0x580>)
 8003536:	4013      	ands	r3, r2
 8003538:	687a      	ldr	r2, [r7, #4]
 800353a:	6a11      	ldr	r1, [r2, #32]
 800353c:	687a      	ldr	r2, [r7, #4]
 800353e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003540:	3a01      	subs	r2, #1
 8003542:	0112      	lsls	r2, r2, #4
 8003544:	4311      	orrs	r1, r2
 8003546:	687a      	ldr	r2, [r7, #4]
 8003548:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800354a:	0212      	lsls	r2, r2, #8
 800354c:	4311      	orrs	r1, r2
 800354e:	687a      	ldr	r2, [r7, #4]
 8003550:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003552:	0852      	lsrs	r2, r2, #1
 8003554:	3a01      	subs	r2, #1
 8003556:	0552      	lsls	r2, r2, #21
 8003558:	4311      	orrs	r1, r2
 800355a:	687a      	ldr	r2, [r7, #4]
 800355c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800355e:	0852      	lsrs	r2, r2, #1
 8003560:	3a01      	subs	r2, #1
 8003562:	0652      	lsls	r2, r2, #25
 8003564:	4311      	orrs	r1, r2
 8003566:	687a      	ldr	r2, [r7, #4]
 8003568:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800356a:	06d2      	lsls	r2, r2, #27
 800356c:	430a      	orrs	r2, r1
 800356e:	491d      	ldr	r1, [pc, #116]	; (80035e4 <HAL_RCC_OscConfig+0x578>)
 8003570:	4313      	orrs	r3, r2
 8003572:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003574:	4b1b      	ldr	r3, [pc, #108]	; (80035e4 <HAL_RCC_OscConfig+0x578>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a1a      	ldr	r2, [pc, #104]	; (80035e4 <HAL_RCC_OscConfig+0x578>)
 800357a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800357e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003580:	4b18      	ldr	r3, [pc, #96]	; (80035e4 <HAL_RCC_OscConfig+0x578>)
 8003582:	68db      	ldr	r3, [r3, #12]
 8003584:	4a17      	ldr	r2, [pc, #92]	; (80035e4 <HAL_RCC_OscConfig+0x578>)
 8003586:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800358a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800358c:	f7fd fe82 	bl	8001294 <HAL_GetTick>
 8003590:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003592:	e008      	b.n	80035a6 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003594:	f7fd fe7e 	bl	8001294 <HAL_GetTick>
 8003598:	4602      	mov	r2, r0
 800359a:	693b      	ldr	r3, [r7, #16]
 800359c:	1ad3      	subs	r3, r2, r3
 800359e:	2b02      	cmp	r3, #2
 80035a0:	d901      	bls.n	80035a6 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 80035a2:	2303      	movs	r3, #3
 80035a4:	e074      	b.n	8003690 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035a6:	4b0f      	ldr	r3, [pc, #60]	; (80035e4 <HAL_RCC_OscConfig+0x578>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d0f0      	beq.n	8003594 <HAL_RCC_OscConfig+0x528>
 80035b2:	e06c      	b.n	800368e <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035b4:	4b0b      	ldr	r3, [pc, #44]	; (80035e4 <HAL_RCC_OscConfig+0x578>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a0a      	ldr	r2, [pc, #40]	; (80035e4 <HAL_RCC_OscConfig+0x578>)
 80035ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80035be:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80035c0:	4b08      	ldr	r3, [pc, #32]	; (80035e4 <HAL_RCC_OscConfig+0x578>)
 80035c2:	68db      	ldr	r3, [r3, #12]
 80035c4:	4a07      	ldr	r2, [pc, #28]	; (80035e4 <HAL_RCC_OscConfig+0x578>)
 80035c6:	f023 0303 	bic.w	r3, r3, #3
 80035ca:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80035cc:	4b05      	ldr	r3, [pc, #20]	; (80035e4 <HAL_RCC_OscConfig+0x578>)
 80035ce:	68db      	ldr	r3, [r3, #12]
 80035d0:	4a04      	ldr	r2, [pc, #16]	; (80035e4 <HAL_RCC_OscConfig+0x578>)
 80035d2:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80035d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035da:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035dc:	f7fd fe5a 	bl	8001294 <HAL_GetTick>
 80035e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80035e2:	e00e      	b.n	8003602 <HAL_RCC_OscConfig+0x596>
 80035e4:	40021000 	.word	0x40021000
 80035e8:	40007000 	.word	0x40007000
 80035ec:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035f0:	f7fd fe50 	bl	8001294 <HAL_GetTick>
 80035f4:	4602      	mov	r2, r0
 80035f6:	693b      	ldr	r3, [r7, #16]
 80035f8:	1ad3      	subs	r3, r2, r3
 80035fa:	2b02      	cmp	r3, #2
 80035fc:	d901      	bls.n	8003602 <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 80035fe:	2303      	movs	r3, #3
 8003600:	e046      	b.n	8003690 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003602:	4b25      	ldr	r3, [pc, #148]	; (8003698 <HAL_RCC_OscConfig+0x62c>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800360a:	2b00      	cmp	r3, #0
 800360c:	d1f0      	bne.n	80035f0 <HAL_RCC_OscConfig+0x584>
 800360e:	e03e      	b.n	800368e <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	69db      	ldr	r3, [r3, #28]
 8003614:	2b01      	cmp	r3, #1
 8003616:	d101      	bne.n	800361c <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8003618:	2301      	movs	r3, #1
 800361a:	e039      	b.n	8003690 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800361c:	4b1e      	ldr	r3, [pc, #120]	; (8003698 <HAL_RCC_OscConfig+0x62c>)
 800361e:	68db      	ldr	r3, [r3, #12]
 8003620:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003622:	697b      	ldr	r3, [r7, #20]
 8003624:	f003 0203 	and.w	r2, r3, #3
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6a1b      	ldr	r3, [r3, #32]
 800362c:	429a      	cmp	r2, r3
 800362e:	d12c      	bne.n	800368a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003630:	697b      	ldr	r3, [r7, #20]
 8003632:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800363a:	3b01      	subs	r3, #1
 800363c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800363e:	429a      	cmp	r2, r3
 8003640:	d123      	bne.n	800368a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003642:	697b      	ldr	r3, [r7, #20]
 8003644:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800364c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800364e:	429a      	cmp	r2, r3
 8003650:	d11b      	bne.n	800368a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003652:	697b      	ldr	r3, [r7, #20]
 8003654:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800365c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800365e:	429a      	cmp	r2, r3
 8003660:	d113      	bne.n	800368a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003662:	697b      	ldr	r3, [r7, #20]
 8003664:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800366c:	085b      	lsrs	r3, r3, #1
 800366e:	3b01      	subs	r3, #1
 8003670:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003672:	429a      	cmp	r2, r3
 8003674:	d109      	bne.n	800368a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003676:	697b      	ldr	r3, [r7, #20]
 8003678:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003680:	085b      	lsrs	r3, r3, #1
 8003682:	3b01      	subs	r3, #1
 8003684:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003686:	429a      	cmp	r2, r3
 8003688:	d001      	beq.n	800368e <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 800368a:	2301      	movs	r3, #1
 800368c:	e000      	b.n	8003690 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 800368e:	2300      	movs	r3, #0
}
 8003690:	4618      	mov	r0, r3
 8003692:	3720      	adds	r7, #32
 8003694:	46bd      	mov	sp, r7
 8003696:	bd80      	pop	{r7, pc}
 8003698:	40021000 	.word	0x40021000

0800369c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b086      	sub	sp, #24
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
 80036a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80036a6:	2300      	movs	r3, #0
 80036a8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d101      	bne.n	80036b4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80036b0:	2301      	movs	r3, #1
 80036b2:	e11e      	b.n	80038f2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80036b4:	4b91      	ldr	r3, [pc, #580]	; (80038fc <HAL_RCC_ClockConfig+0x260>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f003 030f 	and.w	r3, r3, #15
 80036bc:	683a      	ldr	r2, [r7, #0]
 80036be:	429a      	cmp	r2, r3
 80036c0:	d910      	bls.n	80036e4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036c2:	4b8e      	ldr	r3, [pc, #568]	; (80038fc <HAL_RCC_ClockConfig+0x260>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f023 020f 	bic.w	r2, r3, #15
 80036ca:	498c      	ldr	r1, [pc, #560]	; (80038fc <HAL_RCC_ClockConfig+0x260>)
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	4313      	orrs	r3, r2
 80036d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036d2:	4b8a      	ldr	r3, [pc, #552]	; (80038fc <HAL_RCC_ClockConfig+0x260>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f003 030f 	and.w	r3, r3, #15
 80036da:	683a      	ldr	r2, [r7, #0]
 80036dc:	429a      	cmp	r2, r3
 80036de:	d001      	beq.n	80036e4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80036e0:	2301      	movs	r3, #1
 80036e2:	e106      	b.n	80038f2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f003 0301 	and.w	r3, r3, #1
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d073      	beq.n	80037d8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	2b03      	cmp	r3, #3
 80036f6:	d129      	bne.n	800374c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036f8:	4b81      	ldr	r3, [pc, #516]	; (8003900 <HAL_RCC_ClockConfig+0x264>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003700:	2b00      	cmp	r3, #0
 8003702:	d101      	bne.n	8003708 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003704:	2301      	movs	r3, #1
 8003706:	e0f4      	b.n	80038f2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003708:	f000 f966 	bl	80039d8 <RCC_GetSysClockFreqFromPLLSource>
 800370c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800370e:	693b      	ldr	r3, [r7, #16]
 8003710:	4a7c      	ldr	r2, [pc, #496]	; (8003904 <HAL_RCC_ClockConfig+0x268>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d93f      	bls.n	8003796 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003716:	4b7a      	ldr	r3, [pc, #488]	; (8003900 <HAL_RCC_ClockConfig+0x264>)
 8003718:	689b      	ldr	r3, [r3, #8]
 800371a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800371e:	2b00      	cmp	r3, #0
 8003720:	d009      	beq.n	8003736 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800372a:	2b00      	cmp	r3, #0
 800372c:	d033      	beq.n	8003796 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003732:	2b00      	cmp	r3, #0
 8003734:	d12f      	bne.n	8003796 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003736:	4b72      	ldr	r3, [pc, #456]	; (8003900 <HAL_RCC_ClockConfig+0x264>)
 8003738:	689b      	ldr	r3, [r3, #8]
 800373a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800373e:	4a70      	ldr	r2, [pc, #448]	; (8003900 <HAL_RCC_ClockConfig+0x264>)
 8003740:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003744:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003746:	2380      	movs	r3, #128	; 0x80
 8003748:	617b      	str	r3, [r7, #20]
 800374a:	e024      	b.n	8003796 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	2b02      	cmp	r3, #2
 8003752:	d107      	bne.n	8003764 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003754:	4b6a      	ldr	r3, [pc, #424]	; (8003900 <HAL_RCC_ClockConfig+0x264>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800375c:	2b00      	cmp	r3, #0
 800375e:	d109      	bne.n	8003774 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003760:	2301      	movs	r3, #1
 8003762:	e0c6      	b.n	80038f2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003764:	4b66      	ldr	r3, [pc, #408]	; (8003900 <HAL_RCC_ClockConfig+0x264>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800376c:	2b00      	cmp	r3, #0
 800376e:	d101      	bne.n	8003774 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003770:	2301      	movs	r3, #1
 8003772:	e0be      	b.n	80038f2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003774:	f000 f8ce 	bl	8003914 <HAL_RCC_GetSysClockFreq>
 8003778:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800377a:	693b      	ldr	r3, [r7, #16]
 800377c:	4a61      	ldr	r2, [pc, #388]	; (8003904 <HAL_RCC_ClockConfig+0x268>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d909      	bls.n	8003796 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003782:	4b5f      	ldr	r3, [pc, #380]	; (8003900 <HAL_RCC_ClockConfig+0x264>)
 8003784:	689b      	ldr	r3, [r3, #8]
 8003786:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800378a:	4a5d      	ldr	r2, [pc, #372]	; (8003900 <HAL_RCC_ClockConfig+0x264>)
 800378c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003790:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003792:	2380      	movs	r3, #128	; 0x80
 8003794:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003796:	4b5a      	ldr	r3, [pc, #360]	; (8003900 <HAL_RCC_ClockConfig+0x264>)
 8003798:	689b      	ldr	r3, [r3, #8]
 800379a:	f023 0203 	bic.w	r2, r3, #3
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	4957      	ldr	r1, [pc, #348]	; (8003900 <HAL_RCC_ClockConfig+0x264>)
 80037a4:	4313      	orrs	r3, r2
 80037a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037a8:	f7fd fd74 	bl	8001294 <HAL_GetTick>
 80037ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037ae:	e00a      	b.n	80037c6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037b0:	f7fd fd70 	bl	8001294 <HAL_GetTick>
 80037b4:	4602      	mov	r2, r0
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	1ad3      	subs	r3, r2, r3
 80037ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80037be:	4293      	cmp	r3, r2
 80037c0:	d901      	bls.n	80037c6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80037c2:	2303      	movs	r3, #3
 80037c4:	e095      	b.n	80038f2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037c6:	4b4e      	ldr	r3, [pc, #312]	; (8003900 <HAL_RCC_ClockConfig+0x264>)
 80037c8:	689b      	ldr	r3, [r3, #8]
 80037ca:	f003 020c 	and.w	r2, r3, #12
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	009b      	lsls	r3, r3, #2
 80037d4:	429a      	cmp	r2, r3
 80037d6:	d1eb      	bne.n	80037b0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f003 0302 	and.w	r3, r3, #2
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d023      	beq.n	800382c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f003 0304 	and.w	r3, r3, #4
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d005      	beq.n	80037fc <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80037f0:	4b43      	ldr	r3, [pc, #268]	; (8003900 <HAL_RCC_ClockConfig+0x264>)
 80037f2:	689b      	ldr	r3, [r3, #8]
 80037f4:	4a42      	ldr	r2, [pc, #264]	; (8003900 <HAL_RCC_ClockConfig+0x264>)
 80037f6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80037fa:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f003 0308 	and.w	r3, r3, #8
 8003804:	2b00      	cmp	r3, #0
 8003806:	d007      	beq.n	8003818 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003808:	4b3d      	ldr	r3, [pc, #244]	; (8003900 <HAL_RCC_ClockConfig+0x264>)
 800380a:	689b      	ldr	r3, [r3, #8]
 800380c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003810:	4a3b      	ldr	r2, [pc, #236]	; (8003900 <HAL_RCC_ClockConfig+0x264>)
 8003812:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003816:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003818:	4b39      	ldr	r3, [pc, #228]	; (8003900 <HAL_RCC_ClockConfig+0x264>)
 800381a:	689b      	ldr	r3, [r3, #8]
 800381c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	689b      	ldr	r3, [r3, #8]
 8003824:	4936      	ldr	r1, [pc, #216]	; (8003900 <HAL_RCC_ClockConfig+0x264>)
 8003826:	4313      	orrs	r3, r2
 8003828:	608b      	str	r3, [r1, #8]
 800382a:	e008      	b.n	800383e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800382c:	697b      	ldr	r3, [r7, #20]
 800382e:	2b80      	cmp	r3, #128	; 0x80
 8003830:	d105      	bne.n	800383e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003832:	4b33      	ldr	r3, [pc, #204]	; (8003900 <HAL_RCC_ClockConfig+0x264>)
 8003834:	689b      	ldr	r3, [r3, #8]
 8003836:	4a32      	ldr	r2, [pc, #200]	; (8003900 <HAL_RCC_ClockConfig+0x264>)
 8003838:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800383c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800383e:	4b2f      	ldr	r3, [pc, #188]	; (80038fc <HAL_RCC_ClockConfig+0x260>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f003 030f 	and.w	r3, r3, #15
 8003846:	683a      	ldr	r2, [r7, #0]
 8003848:	429a      	cmp	r2, r3
 800384a:	d21d      	bcs.n	8003888 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800384c:	4b2b      	ldr	r3, [pc, #172]	; (80038fc <HAL_RCC_ClockConfig+0x260>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f023 020f 	bic.w	r2, r3, #15
 8003854:	4929      	ldr	r1, [pc, #164]	; (80038fc <HAL_RCC_ClockConfig+0x260>)
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	4313      	orrs	r3, r2
 800385a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800385c:	f7fd fd1a 	bl	8001294 <HAL_GetTick>
 8003860:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003862:	e00a      	b.n	800387a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003864:	f7fd fd16 	bl	8001294 <HAL_GetTick>
 8003868:	4602      	mov	r2, r0
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	1ad3      	subs	r3, r2, r3
 800386e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003872:	4293      	cmp	r3, r2
 8003874:	d901      	bls.n	800387a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003876:	2303      	movs	r3, #3
 8003878:	e03b      	b.n	80038f2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800387a:	4b20      	ldr	r3, [pc, #128]	; (80038fc <HAL_RCC_ClockConfig+0x260>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f003 030f 	and.w	r3, r3, #15
 8003882:	683a      	ldr	r2, [r7, #0]
 8003884:	429a      	cmp	r2, r3
 8003886:	d1ed      	bne.n	8003864 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f003 0304 	and.w	r3, r3, #4
 8003890:	2b00      	cmp	r3, #0
 8003892:	d008      	beq.n	80038a6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003894:	4b1a      	ldr	r3, [pc, #104]	; (8003900 <HAL_RCC_ClockConfig+0x264>)
 8003896:	689b      	ldr	r3, [r3, #8]
 8003898:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	68db      	ldr	r3, [r3, #12]
 80038a0:	4917      	ldr	r1, [pc, #92]	; (8003900 <HAL_RCC_ClockConfig+0x264>)
 80038a2:	4313      	orrs	r3, r2
 80038a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f003 0308 	and.w	r3, r3, #8
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d009      	beq.n	80038c6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80038b2:	4b13      	ldr	r3, [pc, #76]	; (8003900 <HAL_RCC_ClockConfig+0x264>)
 80038b4:	689b      	ldr	r3, [r3, #8]
 80038b6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	691b      	ldr	r3, [r3, #16]
 80038be:	00db      	lsls	r3, r3, #3
 80038c0:	490f      	ldr	r1, [pc, #60]	; (8003900 <HAL_RCC_ClockConfig+0x264>)
 80038c2:	4313      	orrs	r3, r2
 80038c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80038c6:	f000 f825 	bl	8003914 <HAL_RCC_GetSysClockFreq>
 80038ca:	4601      	mov	r1, r0
 80038cc:	4b0c      	ldr	r3, [pc, #48]	; (8003900 <HAL_RCC_ClockConfig+0x264>)
 80038ce:	689b      	ldr	r3, [r3, #8]
 80038d0:	091b      	lsrs	r3, r3, #4
 80038d2:	f003 030f 	and.w	r3, r3, #15
 80038d6:	4a0c      	ldr	r2, [pc, #48]	; (8003908 <HAL_RCC_ClockConfig+0x26c>)
 80038d8:	5cd3      	ldrb	r3, [r2, r3]
 80038da:	f003 031f 	and.w	r3, r3, #31
 80038de:	fa21 f303 	lsr.w	r3, r1, r3
 80038e2:	4a0a      	ldr	r2, [pc, #40]	; (800390c <HAL_RCC_ClockConfig+0x270>)
 80038e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80038e6:	4b0a      	ldr	r3, [pc, #40]	; (8003910 <HAL_RCC_ClockConfig+0x274>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4618      	mov	r0, r3
 80038ec:	f7fd fc86 	bl	80011fc <HAL_InitTick>
 80038f0:	4603      	mov	r3, r0
}
 80038f2:	4618      	mov	r0, r3
 80038f4:	3718      	adds	r7, #24
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bd80      	pop	{r7, pc}
 80038fa:	bf00      	nop
 80038fc:	40022000 	.word	0x40022000
 8003900:	40021000 	.word	0x40021000
 8003904:	04c4b400 	.word	0x04c4b400
 8003908:	080093d8 	.word	0x080093d8
 800390c:	20000000 	.word	0x20000000
 8003910:	20000004 	.word	0x20000004

08003914 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003914:	b480      	push	{r7}
 8003916:	b087      	sub	sp, #28
 8003918:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800391a:	4b2c      	ldr	r3, [pc, #176]	; (80039cc <HAL_RCC_GetSysClockFreq+0xb8>)
 800391c:	689b      	ldr	r3, [r3, #8]
 800391e:	f003 030c 	and.w	r3, r3, #12
 8003922:	2b04      	cmp	r3, #4
 8003924:	d102      	bne.n	800392c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003926:	4b2a      	ldr	r3, [pc, #168]	; (80039d0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003928:	613b      	str	r3, [r7, #16]
 800392a:	e047      	b.n	80039bc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800392c:	4b27      	ldr	r3, [pc, #156]	; (80039cc <HAL_RCC_GetSysClockFreq+0xb8>)
 800392e:	689b      	ldr	r3, [r3, #8]
 8003930:	f003 030c 	and.w	r3, r3, #12
 8003934:	2b08      	cmp	r3, #8
 8003936:	d102      	bne.n	800393e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003938:	4b26      	ldr	r3, [pc, #152]	; (80039d4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800393a:	613b      	str	r3, [r7, #16]
 800393c:	e03e      	b.n	80039bc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800393e:	4b23      	ldr	r3, [pc, #140]	; (80039cc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003940:	689b      	ldr	r3, [r3, #8]
 8003942:	f003 030c 	and.w	r3, r3, #12
 8003946:	2b0c      	cmp	r3, #12
 8003948:	d136      	bne.n	80039b8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800394a:	4b20      	ldr	r3, [pc, #128]	; (80039cc <HAL_RCC_GetSysClockFreq+0xb8>)
 800394c:	68db      	ldr	r3, [r3, #12]
 800394e:	f003 0303 	and.w	r3, r3, #3
 8003952:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003954:	4b1d      	ldr	r3, [pc, #116]	; (80039cc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003956:	68db      	ldr	r3, [r3, #12]
 8003958:	091b      	lsrs	r3, r3, #4
 800395a:	f003 030f 	and.w	r3, r3, #15
 800395e:	3301      	adds	r3, #1
 8003960:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	2b03      	cmp	r3, #3
 8003966:	d10c      	bne.n	8003982 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003968:	4a1a      	ldr	r2, [pc, #104]	; (80039d4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800396a:	68bb      	ldr	r3, [r7, #8]
 800396c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003970:	4a16      	ldr	r2, [pc, #88]	; (80039cc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003972:	68d2      	ldr	r2, [r2, #12]
 8003974:	0a12      	lsrs	r2, r2, #8
 8003976:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800397a:	fb02 f303 	mul.w	r3, r2, r3
 800397e:	617b      	str	r3, [r7, #20]
      break;
 8003980:	e00c      	b.n	800399c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003982:	4a13      	ldr	r2, [pc, #76]	; (80039d0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003984:	68bb      	ldr	r3, [r7, #8]
 8003986:	fbb2 f3f3 	udiv	r3, r2, r3
 800398a:	4a10      	ldr	r2, [pc, #64]	; (80039cc <HAL_RCC_GetSysClockFreq+0xb8>)
 800398c:	68d2      	ldr	r2, [r2, #12]
 800398e:	0a12      	lsrs	r2, r2, #8
 8003990:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003994:	fb02 f303 	mul.w	r3, r2, r3
 8003998:	617b      	str	r3, [r7, #20]
      break;
 800399a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800399c:	4b0b      	ldr	r3, [pc, #44]	; (80039cc <HAL_RCC_GetSysClockFreq+0xb8>)
 800399e:	68db      	ldr	r3, [r3, #12]
 80039a0:	0e5b      	lsrs	r3, r3, #25
 80039a2:	f003 0303 	and.w	r3, r3, #3
 80039a6:	3301      	adds	r3, #1
 80039a8:	005b      	lsls	r3, r3, #1
 80039aa:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80039ac:	697a      	ldr	r2, [r7, #20]
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80039b4:	613b      	str	r3, [r7, #16]
 80039b6:	e001      	b.n	80039bc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80039b8:	2300      	movs	r3, #0
 80039ba:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80039bc:	693b      	ldr	r3, [r7, #16]
}
 80039be:	4618      	mov	r0, r3
 80039c0:	371c      	adds	r7, #28
 80039c2:	46bd      	mov	sp, r7
 80039c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c8:	4770      	bx	lr
 80039ca:	bf00      	nop
 80039cc:	40021000 	.word	0x40021000
 80039d0:	00f42400 	.word	0x00f42400
 80039d4:	007a1200 	.word	0x007a1200

080039d8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80039d8:	b480      	push	{r7}
 80039da:	b087      	sub	sp, #28
 80039dc:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80039de:	4b1e      	ldr	r3, [pc, #120]	; (8003a58 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80039e0:	68db      	ldr	r3, [r3, #12]
 80039e2:	f003 0303 	and.w	r3, r3, #3
 80039e6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80039e8:	4b1b      	ldr	r3, [pc, #108]	; (8003a58 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80039ea:	68db      	ldr	r3, [r3, #12]
 80039ec:	091b      	lsrs	r3, r3, #4
 80039ee:	f003 030f 	and.w	r3, r3, #15
 80039f2:	3301      	adds	r3, #1
 80039f4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80039f6:	693b      	ldr	r3, [r7, #16]
 80039f8:	2b03      	cmp	r3, #3
 80039fa:	d10c      	bne.n	8003a16 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80039fc:	4a17      	ldr	r2, [pc, #92]	; (8003a5c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a04:	4a14      	ldr	r2, [pc, #80]	; (8003a58 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003a06:	68d2      	ldr	r2, [r2, #12]
 8003a08:	0a12      	lsrs	r2, r2, #8
 8003a0a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003a0e:	fb02 f303 	mul.w	r3, r2, r3
 8003a12:	617b      	str	r3, [r7, #20]
    break;
 8003a14:	e00c      	b.n	8003a30 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003a16:	4a12      	ldr	r2, [pc, #72]	; (8003a60 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a1e:	4a0e      	ldr	r2, [pc, #56]	; (8003a58 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003a20:	68d2      	ldr	r2, [r2, #12]
 8003a22:	0a12      	lsrs	r2, r2, #8
 8003a24:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003a28:	fb02 f303 	mul.w	r3, r2, r3
 8003a2c:	617b      	str	r3, [r7, #20]
    break;
 8003a2e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003a30:	4b09      	ldr	r3, [pc, #36]	; (8003a58 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003a32:	68db      	ldr	r3, [r3, #12]
 8003a34:	0e5b      	lsrs	r3, r3, #25
 8003a36:	f003 0303 	and.w	r3, r3, #3
 8003a3a:	3301      	adds	r3, #1
 8003a3c:	005b      	lsls	r3, r3, #1
 8003a3e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003a40:	697a      	ldr	r2, [r7, #20]
 8003a42:	68bb      	ldr	r3, [r7, #8]
 8003a44:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a48:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003a4a:	687b      	ldr	r3, [r7, #4]
}
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	371c      	adds	r7, #28
 8003a50:	46bd      	mov	sp, r7
 8003a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a56:	4770      	bx	lr
 8003a58:	40021000 	.word	0x40021000
 8003a5c:	007a1200 	.word	0x007a1200
 8003a60:	00f42400 	.word	0x00f42400

08003a64 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b086      	sub	sp, #24
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003a70:	2300      	movs	r3, #0
 8003a72:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	f000 8098 	beq.w	8003bb2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a82:	2300      	movs	r3, #0
 8003a84:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a86:	4b43      	ldr	r3, [pc, #268]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d10d      	bne.n	8003aae <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a92:	4b40      	ldr	r3, [pc, #256]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a96:	4a3f      	ldr	r2, [pc, #252]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a9c:	6593      	str	r3, [r2, #88]	; 0x58
 8003a9e:	4b3d      	ldr	r3, [pc, #244]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003aa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003aa2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003aa6:	60bb      	str	r3, [r7, #8]
 8003aa8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003aaa:	2301      	movs	r3, #1
 8003aac:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003aae:	4b3a      	ldr	r3, [pc, #232]	; (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4a39      	ldr	r2, [pc, #228]	; (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003ab4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ab8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003aba:	f7fd fbeb 	bl	8001294 <HAL_GetTick>
 8003abe:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003ac0:	e009      	b.n	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ac2:	f7fd fbe7 	bl	8001294 <HAL_GetTick>
 8003ac6:	4602      	mov	r2, r0
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	1ad3      	subs	r3, r2, r3
 8003acc:	2b02      	cmp	r3, #2
 8003ace:	d902      	bls.n	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003ad0:	2303      	movs	r3, #3
 8003ad2:	74fb      	strb	r3, [r7, #19]
        break;
 8003ad4:	e005      	b.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003ad6:	4b30      	ldr	r3, [pc, #192]	; (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d0ef      	beq.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003ae2:	7cfb      	ldrb	r3, [r7, #19]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d159      	bne.n	8003b9c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003ae8:	4b2a      	ldr	r3, [pc, #168]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003aea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003aee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003af2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003af4:	697b      	ldr	r3, [r7, #20]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d01e      	beq.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003afe:	697a      	ldr	r2, [r7, #20]
 8003b00:	429a      	cmp	r2, r3
 8003b02:	d019      	beq.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003b04:	4b23      	ldr	r3, [pc, #140]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b0e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003b10:	4b20      	ldr	r3, [pc, #128]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b16:	4a1f      	ldr	r2, [pc, #124]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b1c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003b20:	4b1c      	ldr	r3, [pc, #112]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b26:	4a1b      	ldr	r2, [pc, #108]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b28:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b2c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003b30:	4a18      	ldr	r2, [pc, #96]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b32:	697b      	ldr	r3, [r7, #20]
 8003b34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003b38:	697b      	ldr	r3, [r7, #20]
 8003b3a:	f003 0301 	and.w	r3, r3, #1
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d016      	beq.n	8003b70 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b42:	f7fd fba7 	bl	8001294 <HAL_GetTick>
 8003b46:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b48:	e00b      	b.n	8003b62 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b4a:	f7fd fba3 	bl	8001294 <HAL_GetTick>
 8003b4e:	4602      	mov	r2, r0
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	1ad3      	subs	r3, r2, r3
 8003b54:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d902      	bls.n	8003b62 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003b5c:	2303      	movs	r3, #3
 8003b5e:	74fb      	strb	r3, [r7, #19]
            break;
 8003b60:	e006      	b.n	8003b70 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b62:	4b0c      	ldr	r3, [pc, #48]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b68:	f003 0302 	and.w	r3, r3, #2
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d0ec      	beq.n	8003b4a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003b70:	7cfb      	ldrb	r3, [r7, #19]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d10b      	bne.n	8003b8e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003b76:	4b07      	ldr	r3, [pc, #28]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b7c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b84:	4903      	ldr	r1, [pc, #12]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b86:	4313      	orrs	r3, r2
 8003b88:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003b8c:	e008      	b.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003b8e:	7cfb      	ldrb	r3, [r7, #19]
 8003b90:	74bb      	strb	r3, [r7, #18]
 8003b92:	e005      	b.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003b94:	40021000 	.word	0x40021000
 8003b98:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b9c:	7cfb      	ldrb	r3, [r7, #19]
 8003b9e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003ba0:	7c7b      	ldrb	r3, [r7, #17]
 8003ba2:	2b01      	cmp	r3, #1
 8003ba4:	d105      	bne.n	8003bb2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ba6:	4ba6      	ldr	r3, [pc, #664]	; (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ba8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003baa:	4aa5      	ldr	r2, [pc, #660]	; (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003bac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003bb0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f003 0301 	and.w	r3, r3, #1
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d00a      	beq.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003bbe:	4ba0      	ldr	r3, [pc, #640]	; (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003bc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bc4:	f023 0203 	bic.w	r2, r3, #3
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	499c      	ldr	r1, [pc, #624]	; (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003bce:	4313      	orrs	r3, r2
 8003bd0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f003 0302 	and.w	r3, r3, #2
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d00a      	beq.n	8003bf6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003be0:	4b97      	ldr	r3, [pc, #604]	; (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003be2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003be6:	f023 020c 	bic.w	r2, r3, #12
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	689b      	ldr	r3, [r3, #8]
 8003bee:	4994      	ldr	r1, [pc, #592]	; (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003bf0:	4313      	orrs	r3, r2
 8003bf2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f003 0304 	and.w	r3, r3, #4
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d00a      	beq.n	8003c18 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003c02:	4b8f      	ldr	r3, [pc, #572]	; (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c08:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	68db      	ldr	r3, [r3, #12]
 8003c10:	498b      	ldr	r1, [pc, #556]	; (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c12:	4313      	orrs	r3, r2
 8003c14:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f003 0308 	and.w	r3, r3, #8
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d00a      	beq.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003c24:	4b86      	ldr	r3, [pc, #536]	; (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c2a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	691b      	ldr	r3, [r3, #16]
 8003c32:	4983      	ldr	r1, [pc, #524]	; (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c34:	4313      	orrs	r3, r2
 8003c36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f003 0320 	and.w	r3, r3, #32
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d00a      	beq.n	8003c5c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003c46:	4b7e      	ldr	r3, [pc, #504]	; (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c4c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	695b      	ldr	r3, [r3, #20]
 8003c54:	497a      	ldr	r1, [pc, #488]	; (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c56:	4313      	orrs	r3, r2
 8003c58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d00a      	beq.n	8003c7e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003c68:	4b75      	ldr	r3, [pc, #468]	; (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c6e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	699b      	ldr	r3, [r3, #24]
 8003c76:	4972      	ldr	r1, [pc, #456]	; (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d00a      	beq.n	8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003c8a:	4b6d      	ldr	r3, [pc, #436]	; (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c90:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	69db      	ldr	r3, [r3, #28]
 8003c98:	4969      	ldr	r1, [pc, #420]	; (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d00a      	beq.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003cac:	4b64      	ldr	r3, [pc, #400]	; (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003cae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cb2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6a1b      	ldr	r3, [r3, #32]
 8003cba:	4961      	ldr	r1, [pc, #388]	; (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003cbc:	4313      	orrs	r3, r2
 8003cbe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d00a      	beq.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003cce:	4b5c      	ldr	r3, [pc, #368]	; (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003cd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cd4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cdc:	4958      	ldr	r1, [pc, #352]	; (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d015      	beq.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003cf0:	4b53      	ldr	r3, [pc, #332]	; (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003cf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cf6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cfe:	4950      	ldr	r1, [pc, #320]	; (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d00:	4313      	orrs	r3, r2
 8003d02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d0a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d0e:	d105      	bne.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d10:	4b4b      	ldr	r3, [pc, #300]	; (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d12:	68db      	ldr	r3, [r3, #12]
 8003d14:	4a4a      	ldr	r2, [pc, #296]	; (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d16:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003d1a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d015      	beq.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003d28:	4b45      	ldr	r3, [pc, #276]	; (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d2e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d36:	4942      	ldr	r1, [pc, #264]	; (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d38:	4313      	orrs	r3, r2
 8003d3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d42:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d46:	d105      	bne.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d48:	4b3d      	ldr	r3, [pc, #244]	; (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d4a:	68db      	ldr	r3, [r3, #12]
 8003d4c:	4a3c      	ldr	r2, [pc, #240]	; (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d4e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003d52:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d015      	beq.n	8003d8c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003d60:	4b37      	ldr	r3, [pc, #220]	; (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d66:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d6e:	4934      	ldr	r1, [pc, #208]	; (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d70:	4313      	orrs	r3, r2
 8003d72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d7a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003d7e:	d105      	bne.n	8003d8c <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d80:	4b2f      	ldr	r3, [pc, #188]	; (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d82:	68db      	ldr	r3, [r3, #12]
 8003d84:	4a2e      	ldr	r2, [pc, #184]	; (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d86:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003d8a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d015      	beq.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003d98:	4b29      	ldr	r3, [pc, #164]	; (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d9e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003da6:	4926      	ldr	r1, [pc, #152]	; (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003da8:	4313      	orrs	r3, r2
 8003daa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003db2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003db6:	d105      	bne.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003db8:	4b21      	ldr	r3, [pc, #132]	; (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003dba:	68db      	ldr	r3, [r3, #12]
 8003dbc:	4a20      	ldr	r2, [pc, #128]	; (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003dbe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003dc2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d015      	beq.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003dd0:	4b1b      	ldr	r3, [pc, #108]	; (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003dd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dd6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dde:	4918      	ldr	r1, [pc, #96]	; (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003de0:	4313      	orrs	r3, r2
 8003de2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003dee:	d105      	bne.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003df0:	4b13      	ldr	r3, [pc, #76]	; (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003df2:	68db      	ldr	r3, [r3, #12]
 8003df4:	4a12      	ldr	r2, [pc, #72]	; (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003df6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003dfa:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d015      	beq.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003e08:	4b0d      	ldr	r3, [pc, #52]	; (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e0e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e16:	490a      	ldr	r1, [pc, #40]	; (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e22:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003e26:	d105      	bne.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003e28:	4b05      	ldr	r3, [pc, #20]	; (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e2a:	68db      	ldr	r3, [r3, #12]
 8003e2c:	4a04      	ldr	r2, [pc, #16]	; (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e32:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003e34:	7cbb      	ldrb	r3, [r7, #18]
}
 8003e36:	4618      	mov	r0, r3
 8003e38:	3718      	adds	r7, #24
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bd80      	pop	{r7, pc}
 8003e3e:	bf00      	nop
 8003e40:	40021000 	.word	0x40021000

08003e44 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b082      	sub	sp, #8
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d101      	bne.n	8003e56 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003e52:	2301      	movs	r3, #1
 8003e54:	e049      	b.n	8003eea <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e5c:	b2db      	uxtb	r3, r3
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d106      	bne.n	8003e70 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2200      	movs	r2, #0
 8003e66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003e6a:	6878      	ldr	r0, [r7, #4]
 8003e6c:	f7fd f826 	bl	8000ebc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2202      	movs	r2, #2
 8003e74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681a      	ldr	r2, [r3, #0]
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	3304      	adds	r3, #4
 8003e80:	4619      	mov	r1, r3
 8003e82:	4610      	mov	r0, r2
 8003e84:	f000 fbd0 	bl	8004628 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2201      	movs	r2, #1
 8003e8c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2201      	movs	r2, #1
 8003e94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2201      	movs	r2, #1
 8003e9c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2201      	movs	r2, #1
 8003ea4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2201      	movs	r2, #1
 8003eac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2201      	movs	r2, #1
 8003eb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2201      	movs	r2, #1
 8003ebc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2201      	movs	r2, #1
 8003ec4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2201      	movs	r2, #1
 8003ecc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2201      	movs	r2, #1
 8003ed4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2201      	movs	r2, #1
 8003edc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2201      	movs	r2, #1
 8003ee4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ee8:	2300      	movs	r3, #0
}
 8003eea:	4618      	mov	r0, r3
 8003eec:	3708      	adds	r7, #8
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bd80      	pop	{r7, pc}

08003ef2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003ef2:	b580      	push	{r7, lr}
 8003ef4:	b082      	sub	sp, #8
 8003ef6:	af00      	add	r7, sp, #0
 8003ef8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d101      	bne.n	8003f04 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003f00:	2301      	movs	r3, #1
 8003f02:	e049      	b.n	8003f98 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f0a:	b2db      	uxtb	r3, r3
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d106      	bne.n	8003f1e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2200      	movs	r2, #0
 8003f14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003f18:	6878      	ldr	r0, [r7, #4]
 8003f1a:	f7fc ff89 	bl	8000e30 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2202      	movs	r2, #2
 8003f22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681a      	ldr	r2, [r3, #0]
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	3304      	adds	r3, #4
 8003f2e:	4619      	mov	r1, r3
 8003f30:	4610      	mov	r0, r2
 8003f32:	f000 fb79 	bl	8004628 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2201      	movs	r2, #1
 8003f3a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2201      	movs	r2, #1
 8003f42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2201      	movs	r2, #1
 8003f4a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2201      	movs	r2, #1
 8003f52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2201      	movs	r2, #1
 8003f5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2201      	movs	r2, #1
 8003f62:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2201      	movs	r2, #1
 8003f6a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2201      	movs	r2, #1
 8003f72:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2201      	movs	r2, #1
 8003f7a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2201      	movs	r2, #1
 8003f82:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2201      	movs	r2, #1
 8003f8a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2201      	movs	r2, #1
 8003f92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003f96:	2300      	movs	r3, #0
}
 8003f98:	4618      	mov	r0, r3
 8003f9a:	3708      	adds	r7, #8
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	bd80      	pop	{r7, pc}

08003fa0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b084      	sub	sp, #16
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
 8003fa8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d109      	bne.n	8003fc4 <HAL_TIM_PWM_Start+0x24>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003fb6:	b2db      	uxtb	r3, r3
 8003fb8:	2b01      	cmp	r3, #1
 8003fba:	bf14      	ite	ne
 8003fbc:	2301      	movne	r3, #1
 8003fbe:	2300      	moveq	r3, #0
 8003fc0:	b2db      	uxtb	r3, r3
 8003fc2:	e03c      	b.n	800403e <HAL_TIM_PWM_Start+0x9e>
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	2b04      	cmp	r3, #4
 8003fc8:	d109      	bne.n	8003fde <HAL_TIM_PWM_Start+0x3e>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003fd0:	b2db      	uxtb	r3, r3
 8003fd2:	2b01      	cmp	r3, #1
 8003fd4:	bf14      	ite	ne
 8003fd6:	2301      	movne	r3, #1
 8003fd8:	2300      	moveq	r3, #0
 8003fda:	b2db      	uxtb	r3, r3
 8003fdc:	e02f      	b.n	800403e <HAL_TIM_PWM_Start+0x9e>
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	2b08      	cmp	r3, #8
 8003fe2:	d109      	bne.n	8003ff8 <HAL_TIM_PWM_Start+0x58>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003fea:	b2db      	uxtb	r3, r3
 8003fec:	2b01      	cmp	r3, #1
 8003fee:	bf14      	ite	ne
 8003ff0:	2301      	movne	r3, #1
 8003ff2:	2300      	moveq	r3, #0
 8003ff4:	b2db      	uxtb	r3, r3
 8003ff6:	e022      	b.n	800403e <HAL_TIM_PWM_Start+0x9e>
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	2b0c      	cmp	r3, #12
 8003ffc:	d109      	bne.n	8004012 <HAL_TIM_PWM_Start+0x72>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004004:	b2db      	uxtb	r3, r3
 8004006:	2b01      	cmp	r3, #1
 8004008:	bf14      	ite	ne
 800400a:	2301      	movne	r3, #1
 800400c:	2300      	moveq	r3, #0
 800400e:	b2db      	uxtb	r3, r3
 8004010:	e015      	b.n	800403e <HAL_TIM_PWM_Start+0x9e>
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	2b10      	cmp	r3, #16
 8004016:	d109      	bne.n	800402c <HAL_TIM_PWM_Start+0x8c>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800401e:	b2db      	uxtb	r3, r3
 8004020:	2b01      	cmp	r3, #1
 8004022:	bf14      	ite	ne
 8004024:	2301      	movne	r3, #1
 8004026:	2300      	moveq	r3, #0
 8004028:	b2db      	uxtb	r3, r3
 800402a:	e008      	b.n	800403e <HAL_TIM_PWM_Start+0x9e>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004032:	b2db      	uxtb	r3, r3
 8004034:	2b01      	cmp	r3, #1
 8004036:	bf14      	ite	ne
 8004038:	2301      	movne	r3, #1
 800403a:	2300      	moveq	r3, #0
 800403c:	b2db      	uxtb	r3, r3
 800403e:	2b00      	cmp	r3, #0
 8004040:	d001      	beq.n	8004046 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004042:	2301      	movs	r3, #1
 8004044:	e097      	b.n	8004176 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d104      	bne.n	8004056 <HAL_TIM_PWM_Start+0xb6>
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2202      	movs	r2, #2
 8004050:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004054:	e023      	b.n	800409e <HAL_TIM_PWM_Start+0xfe>
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	2b04      	cmp	r3, #4
 800405a:	d104      	bne.n	8004066 <HAL_TIM_PWM_Start+0xc6>
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2202      	movs	r2, #2
 8004060:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004064:	e01b      	b.n	800409e <HAL_TIM_PWM_Start+0xfe>
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	2b08      	cmp	r3, #8
 800406a:	d104      	bne.n	8004076 <HAL_TIM_PWM_Start+0xd6>
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2202      	movs	r2, #2
 8004070:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004074:	e013      	b.n	800409e <HAL_TIM_PWM_Start+0xfe>
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	2b0c      	cmp	r3, #12
 800407a:	d104      	bne.n	8004086 <HAL_TIM_PWM_Start+0xe6>
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2202      	movs	r2, #2
 8004080:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004084:	e00b      	b.n	800409e <HAL_TIM_PWM_Start+0xfe>
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	2b10      	cmp	r3, #16
 800408a:	d104      	bne.n	8004096 <HAL_TIM_PWM_Start+0xf6>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2202      	movs	r2, #2
 8004090:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004094:	e003      	b.n	800409e <HAL_TIM_PWM_Start+0xfe>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2202      	movs	r2, #2
 800409a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	2201      	movs	r2, #1
 80040a4:	6839      	ldr	r1, [r7, #0]
 80040a6:	4618      	mov	r0, r3
 80040a8:	f000 fe44 	bl	8004d34 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4a33      	ldr	r2, [pc, #204]	; (8004180 <HAL_TIM_PWM_Start+0x1e0>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d013      	beq.n	80040de <HAL_TIM_PWM_Start+0x13e>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4a32      	ldr	r2, [pc, #200]	; (8004184 <HAL_TIM_PWM_Start+0x1e4>)
 80040bc:	4293      	cmp	r3, r2
 80040be:	d00e      	beq.n	80040de <HAL_TIM_PWM_Start+0x13e>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4a30      	ldr	r2, [pc, #192]	; (8004188 <HAL_TIM_PWM_Start+0x1e8>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d009      	beq.n	80040de <HAL_TIM_PWM_Start+0x13e>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4a2f      	ldr	r2, [pc, #188]	; (800418c <HAL_TIM_PWM_Start+0x1ec>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d004      	beq.n	80040de <HAL_TIM_PWM_Start+0x13e>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a2d      	ldr	r2, [pc, #180]	; (8004190 <HAL_TIM_PWM_Start+0x1f0>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d101      	bne.n	80040e2 <HAL_TIM_PWM_Start+0x142>
 80040de:	2301      	movs	r3, #1
 80040e0:	e000      	b.n	80040e4 <HAL_TIM_PWM_Start+0x144>
 80040e2:	2300      	movs	r3, #0
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d007      	beq.n	80040f8 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80040f6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4a20      	ldr	r2, [pc, #128]	; (8004180 <HAL_TIM_PWM_Start+0x1e0>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d018      	beq.n	8004134 <HAL_TIM_PWM_Start+0x194>
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800410a:	d013      	beq.n	8004134 <HAL_TIM_PWM_Start+0x194>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4a20      	ldr	r2, [pc, #128]	; (8004194 <HAL_TIM_PWM_Start+0x1f4>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d00e      	beq.n	8004134 <HAL_TIM_PWM_Start+0x194>
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4a1f      	ldr	r2, [pc, #124]	; (8004198 <HAL_TIM_PWM_Start+0x1f8>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d009      	beq.n	8004134 <HAL_TIM_PWM_Start+0x194>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4a17      	ldr	r2, [pc, #92]	; (8004184 <HAL_TIM_PWM_Start+0x1e4>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d004      	beq.n	8004134 <HAL_TIM_PWM_Start+0x194>
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4a16      	ldr	r2, [pc, #88]	; (8004188 <HAL_TIM_PWM_Start+0x1e8>)
 8004130:	4293      	cmp	r3, r2
 8004132:	d115      	bne.n	8004160 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	689a      	ldr	r2, [r3, #8]
 800413a:	4b18      	ldr	r3, [pc, #96]	; (800419c <HAL_TIM_PWM_Start+0x1fc>)
 800413c:	4013      	ands	r3, r2
 800413e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	2b06      	cmp	r3, #6
 8004144:	d015      	beq.n	8004172 <HAL_TIM_PWM_Start+0x1d2>
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800414c:	d011      	beq.n	8004172 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	681a      	ldr	r2, [r3, #0]
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f042 0201 	orr.w	r2, r2, #1
 800415c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800415e:	e008      	b.n	8004172 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	681a      	ldr	r2, [r3, #0]
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f042 0201 	orr.w	r2, r2, #1
 800416e:	601a      	str	r2, [r3, #0]
 8004170:	e000      	b.n	8004174 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004172:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004174:	2300      	movs	r3, #0
}
 8004176:	4618      	mov	r0, r3
 8004178:	3710      	adds	r7, #16
 800417a:	46bd      	mov	sp, r7
 800417c:	bd80      	pop	{r7, pc}
 800417e:	bf00      	nop
 8004180:	40012c00 	.word	0x40012c00
 8004184:	40013400 	.word	0x40013400
 8004188:	40014000 	.word	0x40014000
 800418c:	40014400 	.word	0x40014400
 8004190:	40014800 	.word	0x40014800
 8004194:	40000400 	.word	0x40000400
 8004198:	40000800 	.word	0x40000800
 800419c:	00010007 	.word	0x00010007

080041a0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b086      	sub	sp, #24
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
 80041a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d101      	bne.n	80041b4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80041b0:	2301      	movs	r3, #1
 80041b2:	e097      	b.n	80042e4 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041ba:	b2db      	uxtb	r3, r3
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d106      	bne.n	80041ce <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2200      	movs	r2, #0
 80041c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80041c8:	6878      	ldr	r0, [r7, #4]
 80041ca:	f7fc fd8b 	bl	8000ce4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2202      	movs	r2, #2
 80041d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	689b      	ldr	r3, [r3, #8]
 80041dc:	687a      	ldr	r2, [r7, #4]
 80041de:	6812      	ldr	r2, [r2, #0]
 80041e0:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 80041e4:	f023 0307 	bic.w	r3, r3, #7
 80041e8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681a      	ldr	r2, [r3, #0]
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	3304      	adds	r3, #4
 80041f2:	4619      	mov	r1, r3
 80041f4:	4610      	mov	r0, r2
 80041f6:	f000 fa17 	bl	8004628 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	689b      	ldr	r3, [r3, #8]
 8004200:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	699b      	ldr	r3, [r3, #24]
 8004208:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	6a1b      	ldr	r3, [r3, #32]
 8004210:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	697a      	ldr	r2, [r7, #20]
 8004218:	4313      	orrs	r3, r2
 800421a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800421c:	693b      	ldr	r3, [r7, #16]
 800421e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004222:	f023 0303 	bic.w	r3, r3, #3
 8004226:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	689a      	ldr	r2, [r3, #8]
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	699b      	ldr	r3, [r3, #24]
 8004230:	021b      	lsls	r3, r3, #8
 8004232:	4313      	orrs	r3, r2
 8004234:	693a      	ldr	r2, [r7, #16]
 8004236:	4313      	orrs	r3, r2
 8004238:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800423a:	693b      	ldr	r3, [r7, #16]
 800423c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004240:	f023 030c 	bic.w	r3, r3, #12
 8004244:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004246:	693b      	ldr	r3, [r7, #16]
 8004248:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800424c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004250:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	68da      	ldr	r2, [r3, #12]
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	69db      	ldr	r3, [r3, #28]
 800425a:	021b      	lsls	r3, r3, #8
 800425c:	4313      	orrs	r3, r2
 800425e:	693a      	ldr	r2, [r7, #16]
 8004260:	4313      	orrs	r3, r2
 8004262:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	691b      	ldr	r3, [r3, #16]
 8004268:	011a      	lsls	r2, r3, #4
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	6a1b      	ldr	r3, [r3, #32]
 800426e:	031b      	lsls	r3, r3, #12
 8004270:	4313      	orrs	r3, r2
 8004272:	693a      	ldr	r2, [r7, #16]
 8004274:	4313      	orrs	r3, r2
 8004276:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800427e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8004286:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	685a      	ldr	r2, [r3, #4]
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	695b      	ldr	r3, [r3, #20]
 8004290:	011b      	lsls	r3, r3, #4
 8004292:	4313      	orrs	r3, r2
 8004294:	68fa      	ldr	r2, [r7, #12]
 8004296:	4313      	orrs	r3, r2
 8004298:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	697a      	ldr	r2, [r7, #20]
 80042a0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	693a      	ldr	r2, [r7, #16]
 80042a8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	68fa      	ldr	r2, [r7, #12]
 80042b0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2201      	movs	r2, #1
 80042b6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2201      	movs	r2, #1
 80042be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2201      	movs	r2, #1
 80042c6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2201      	movs	r2, #1
 80042ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2201      	movs	r2, #1
 80042d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2201      	movs	r2, #1
 80042de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80042e2:	2300      	movs	r3, #0
}
 80042e4:	4618      	mov	r0, r3
 80042e6:	3718      	adds	r7, #24
 80042e8:	46bd      	mov	sp, r7
 80042ea:	bd80      	pop	{r7, pc}

080042ec <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b084      	sub	sp, #16
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
 80042f4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80042fc:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004304:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800430c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004314:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d110      	bne.n	800433e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800431c:	7bfb      	ldrb	r3, [r7, #15]
 800431e:	2b01      	cmp	r3, #1
 8004320:	d102      	bne.n	8004328 <HAL_TIM_Encoder_Start+0x3c>
     || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004322:	7b7b      	ldrb	r3, [r7, #13]
 8004324:	2b01      	cmp	r3, #1
 8004326:	d001      	beq.n	800432c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004328:	2301      	movs	r3, #1
 800432a:	e068      	b.n	80043fe <HAL_TIM_Encoder_Start+0x112>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2202      	movs	r2, #2
 8004330:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2202      	movs	r2, #2
 8004338:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800433c:	e031      	b.n	80043a2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	2b04      	cmp	r3, #4
 8004342:	d110      	bne.n	8004366 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004344:	7bbb      	ldrb	r3, [r7, #14]
 8004346:	2b01      	cmp	r3, #1
 8004348:	d102      	bne.n	8004350 <HAL_TIM_Encoder_Start+0x64>
     || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800434a:	7b3b      	ldrb	r3, [r7, #12]
 800434c:	2b01      	cmp	r3, #1
 800434e:	d001      	beq.n	8004354 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004350:	2301      	movs	r3, #1
 8004352:	e054      	b.n	80043fe <HAL_TIM_Encoder_Start+0x112>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2202      	movs	r2, #2
 8004358:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2202      	movs	r2, #2
 8004360:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004364:	e01d      	b.n	80043a2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004366:	7bfb      	ldrb	r3, [r7, #15]
 8004368:	2b01      	cmp	r3, #1
 800436a:	d108      	bne.n	800437e <HAL_TIM_Encoder_Start+0x92>
     || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800436c:	7bbb      	ldrb	r3, [r7, #14]
 800436e:	2b01      	cmp	r3, #1
 8004370:	d105      	bne.n	800437e <HAL_TIM_Encoder_Start+0x92>
     || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004372:	7b7b      	ldrb	r3, [r7, #13]
 8004374:	2b01      	cmp	r3, #1
 8004376:	d102      	bne.n	800437e <HAL_TIM_Encoder_Start+0x92>
     || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004378:	7b3b      	ldrb	r3, [r7, #12]
 800437a:	2b01      	cmp	r3, #1
 800437c:	d001      	beq.n	8004382 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800437e:	2301      	movs	r3, #1
 8004380:	e03d      	b.n	80043fe <HAL_TIM_Encoder_Start+0x112>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2202      	movs	r2, #2
 8004386:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2202      	movs	r2, #2
 800438e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2202      	movs	r2, #2
 8004396:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2202      	movs	r2, #2
 800439e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d002      	beq.n	80043ae <HAL_TIM_Encoder_Start+0xc2>
 80043a8:	2b04      	cmp	r3, #4
 80043aa:	d008      	beq.n	80043be <HAL_TIM_Encoder_Start+0xd2>
 80043ac:	e00f      	b.n	80043ce <HAL_TIM_Encoder_Start+0xe2>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	2201      	movs	r2, #1
 80043b4:	2100      	movs	r1, #0
 80043b6:	4618      	mov	r0, r3
 80043b8:	f000 fcbc 	bl	8004d34 <TIM_CCxChannelCmd>
      break;
 80043bc:	e016      	b.n	80043ec <HAL_TIM_Encoder_Start+0x100>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	2201      	movs	r2, #1
 80043c4:	2104      	movs	r1, #4
 80043c6:	4618      	mov	r0, r3
 80043c8:	f000 fcb4 	bl	8004d34 <TIM_CCxChannelCmd>
      break;
 80043cc:	e00e      	b.n	80043ec <HAL_TIM_Encoder_Start+0x100>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	2201      	movs	r2, #1
 80043d4:	2100      	movs	r1, #0
 80043d6:	4618      	mov	r0, r3
 80043d8:	f000 fcac 	bl	8004d34 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	2201      	movs	r2, #1
 80043e2:	2104      	movs	r1, #4
 80043e4:	4618      	mov	r0, r3
 80043e6:	f000 fca5 	bl	8004d34 <TIM_CCxChannelCmd>
      break;
 80043ea:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	681a      	ldr	r2, [r3, #0]
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f042 0201 	orr.w	r2, r2, #1
 80043fa:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80043fc:	2300      	movs	r3, #0
}
 80043fe:	4618      	mov	r0, r3
 8004400:	3710      	adds	r7, #16
 8004402:	46bd      	mov	sp, r7
 8004404:	bd80      	pop	{r7, pc}
	...

08004408 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b084      	sub	sp, #16
 800440c:	af00      	add	r7, sp, #0
 800440e:	60f8      	str	r0, [r7, #12]
 8004410:	60b9      	str	r1, [r7, #8]
 8004412:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800441a:	2b01      	cmp	r3, #1
 800441c:	d101      	bne.n	8004422 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800441e:	2302      	movs	r3, #2
 8004420:	e0fd      	b.n	800461e <HAL_TIM_PWM_ConfigChannel+0x216>
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	2201      	movs	r2, #1
 8004426:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2b14      	cmp	r3, #20
 800442e:	f200 80f0 	bhi.w	8004612 <HAL_TIM_PWM_ConfigChannel+0x20a>
 8004432:	a201      	add	r2, pc, #4	; (adr r2, 8004438 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8004434:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004438:	0800448d 	.word	0x0800448d
 800443c:	08004613 	.word	0x08004613
 8004440:	08004613 	.word	0x08004613
 8004444:	08004613 	.word	0x08004613
 8004448:	080044cd 	.word	0x080044cd
 800444c:	08004613 	.word	0x08004613
 8004450:	08004613 	.word	0x08004613
 8004454:	08004613 	.word	0x08004613
 8004458:	0800450f 	.word	0x0800450f
 800445c:	08004613 	.word	0x08004613
 8004460:	08004613 	.word	0x08004613
 8004464:	08004613 	.word	0x08004613
 8004468:	0800454f 	.word	0x0800454f
 800446c:	08004613 	.word	0x08004613
 8004470:	08004613 	.word	0x08004613
 8004474:	08004613 	.word	0x08004613
 8004478:	08004591 	.word	0x08004591
 800447c:	08004613 	.word	0x08004613
 8004480:	08004613 	.word	0x08004613
 8004484:	08004613 	.word	0x08004613
 8004488:	080045d1 	.word	0x080045d1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	68b9      	ldr	r1, [r7, #8]
 8004492:	4618      	mov	r0, r3
 8004494:	f000 f958 	bl	8004748 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	699a      	ldr	r2, [r3, #24]
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f042 0208 	orr.w	r2, r2, #8
 80044a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	699a      	ldr	r2, [r3, #24]
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f022 0204 	bic.w	r2, r2, #4
 80044b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	6999      	ldr	r1, [r3, #24]
 80044be:	68bb      	ldr	r3, [r7, #8]
 80044c0:	691a      	ldr	r2, [r3, #16]
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	430a      	orrs	r2, r1
 80044c8:	619a      	str	r2, [r3, #24]
      break;
 80044ca:	e0a3      	b.n	8004614 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	68b9      	ldr	r1, [r7, #8]
 80044d2:	4618      	mov	r0, r3
 80044d4:	f000 f9c8 	bl	8004868 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	699a      	ldr	r2, [r3, #24]
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80044e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	699a      	ldr	r2, [r3, #24]
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	6999      	ldr	r1, [r3, #24]
 80044fe:	68bb      	ldr	r3, [r7, #8]
 8004500:	691b      	ldr	r3, [r3, #16]
 8004502:	021a      	lsls	r2, r3, #8
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	430a      	orrs	r2, r1
 800450a:	619a      	str	r2, [r3, #24]
      break;
 800450c:	e082      	b.n	8004614 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	68b9      	ldr	r1, [r7, #8]
 8004514:	4618      	mov	r0, r3
 8004516:	f000 fa31 	bl	800497c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	69da      	ldr	r2, [r3, #28]
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f042 0208 	orr.w	r2, r2, #8
 8004528:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	69da      	ldr	r2, [r3, #28]
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f022 0204 	bic.w	r2, r2, #4
 8004538:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	69d9      	ldr	r1, [r3, #28]
 8004540:	68bb      	ldr	r3, [r7, #8]
 8004542:	691a      	ldr	r2, [r3, #16]
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	430a      	orrs	r2, r1
 800454a:	61da      	str	r2, [r3, #28]
      break;
 800454c:	e062      	b.n	8004614 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	68b9      	ldr	r1, [r7, #8]
 8004554:	4618      	mov	r0, r3
 8004556:	f000 fa99 	bl	8004a8c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	69da      	ldr	r2, [r3, #28]
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004568:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	69da      	ldr	r2, [r3, #28]
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004578:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	69d9      	ldr	r1, [r3, #28]
 8004580:	68bb      	ldr	r3, [r7, #8]
 8004582:	691b      	ldr	r3, [r3, #16]
 8004584:	021a      	lsls	r2, r3, #8
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	430a      	orrs	r2, r1
 800458c:	61da      	str	r2, [r3, #28]
      break;
 800458e:	e041      	b.n	8004614 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	68b9      	ldr	r1, [r7, #8]
 8004596:	4618      	mov	r0, r3
 8004598:	f000 fb02 	bl	8004ba0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f042 0208 	orr.w	r2, r2, #8
 80045aa:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f022 0204 	bic.w	r2, r2, #4
 80045ba:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80045c2:	68bb      	ldr	r3, [r7, #8]
 80045c4:	691a      	ldr	r2, [r3, #16]
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	430a      	orrs	r2, r1
 80045cc:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80045ce:	e021      	b.n	8004614 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	68b9      	ldr	r1, [r7, #8]
 80045d6:	4618      	mov	r0, r3
 80045d8:	f000 fb46 	bl	8004c68 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80045ea:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045fa:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004602:	68bb      	ldr	r3, [r7, #8]
 8004604:	691b      	ldr	r3, [r3, #16]
 8004606:	021a      	lsls	r2, r3, #8
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	430a      	orrs	r2, r1
 800460e:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8004610:	e000      	b.n	8004614 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8004612:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	2200      	movs	r2, #0
 8004618:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800461c:	2300      	movs	r3, #0
}
 800461e:	4618      	mov	r0, r3
 8004620:	3710      	adds	r7, #16
 8004622:	46bd      	mov	sp, r7
 8004624:	bd80      	pop	{r7, pc}
 8004626:	bf00      	nop

08004628 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004628:	b480      	push	{r7}
 800462a:	b085      	sub	sp, #20
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
 8004630:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	4a3c      	ldr	r2, [pc, #240]	; (800472c <TIM_Base_SetConfig+0x104>)
 800463c:	4293      	cmp	r3, r2
 800463e:	d00f      	beq.n	8004660 <TIM_Base_SetConfig+0x38>
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004646:	d00b      	beq.n	8004660 <TIM_Base_SetConfig+0x38>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	4a39      	ldr	r2, [pc, #228]	; (8004730 <TIM_Base_SetConfig+0x108>)
 800464c:	4293      	cmp	r3, r2
 800464e:	d007      	beq.n	8004660 <TIM_Base_SetConfig+0x38>
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	4a38      	ldr	r2, [pc, #224]	; (8004734 <TIM_Base_SetConfig+0x10c>)
 8004654:	4293      	cmp	r3, r2
 8004656:	d003      	beq.n	8004660 <TIM_Base_SetConfig+0x38>
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	4a37      	ldr	r2, [pc, #220]	; (8004738 <TIM_Base_SetConfig+0x110>)
 800465c:	4293      	cmp	r3, r2
 800465e:	d108      	bne.n	8004672 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004666:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	685b      	ldr	r3, [r3, #4]
 800466c:	68fa      	ldr	r2, [r7, #12]
 800466e:	4313      	orrs	r3, r2
 8004670:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	4a2d      	ldr	r2, [pc, #180]	; (800472c <TIM_Base_SetConfig+0x104>)
 8004676:	4293      	cmp	r3, r2
 8004678:	d01b      	beq.n	80046b2 <TIM_Base_SetConfig+0x8a>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004680:	d017      	beq.n	80046b2 <TIM_Base_SetConfig+0x8a>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	4a2a      	ldr	r2, [pc, #168]	; (8004730 <TIM_Base_SetConfig+0x108>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d013      	beq.n	80046b2 <TIM_Base_SetConfig+0x8a>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	4a29      	ldr	r2, [pc, #164]	; (8004734 <TIM_Base_SetConfig+0x10c>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d00f      	beq.n	80046b2 <TIM_Base_SetConfig+0x8a>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	4a28      	ldr	r2, [pc, #160]	; (8004738 <TIM_Base_SetConfig+0x110>)
 8004696:	4293      	cmp	r3, r2
 8004698:	d00b      	beq.n	80046b2 <TIM_Base_SetConfig+0x8a>
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	4a27      	ldr	r2, [pc, #156]	; (800473c <TIM_Base_SetConfig+0x114>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d007      	beq.n	80046b2 <TIM_Base_SetConfig+0x8a>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	4a26      	ldr	r2, [pc, #152]	; (8004740 <TIM_Base_SetConfig+0x118>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d003      	beq.n	80046b2 <TIM_Base_SetConfig+0x8a>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	4a25      	ldr	r2, [pc, #148]	; (8004744 <TIM_Base_SetConfig+0x11c>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d108      	bne.n	80046c4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	68db      	ldr	r3, [r3, #12]
 80046be:	68fa      	ldr	r2, [r7, #12]
 80046c0:	4313      	orrs	r3, r2
 80046c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	695b      	ldr	r3, [r3, #20]
 80046ce:	4313      	orrs	r3, r2
 80046d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	68fa      	ldr	r2, [r7, #12]
 80046d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	689a      	ldr	r2, [r3, #8]
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	681a      	ldr	r2, [r3, #0]
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	4a10      	ldr	r2, [pc, #64]	; (800472c <TIM_Base_SetConfig+0x104>)
 80046ec:	4293      	cmp	r3, r2
 80046ee:	d00f      	beq.n	8004710 <TIM_Base_SetConfig+0xe8>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	4a11      	ldr	r2, [pc, #68]	; (8004738 <TIM_Base_SetConfig+0x110>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d00b      	beq.n	8004710 <TIM_Base_SetConfig+0xe8>
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	4a10      	ldr	r2, [pc, #64]	; (800473c <TIM_Base_SetConfig+0x114>)
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d007      	beq.n	8004710 <TIM_Base_SetConfig+0xe8>
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	4a0f      	ldr	r2, [pc, #60]	; (8004740 <TIM_Base_SetConfig+0x118>)
 8004704:	4293      	cmp	r3, r2
 8004706:	d003      	beq.n	8004710 <TIM_Base_SetConfig+0xe8>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	4a0e      	ldr	r2, [pc, #56]	; (8004744 <TIM_Base_SetConfig+0x11c>)
 800470c:	4293      	cmp	r3, r2
 800470e:	d103      	bne.n	8004718 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	691a      	ldr	r2, [r3, #16]
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2201      	movs	r2, #1
 800471c:	615a      	str	r2, [r3, #20]
}
 800471e:	bf00      	nop
 8004720:	3714      	adds	r7, #20
 8004722:	46bd      	mov	sp, r7
 8004724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004728:	4770      	bx	lr
 800472a:	bf00      	nop
 800472c:	40012c00 	.word	0x40012c00
 8004730:	40000400 	.word	0x40000400
 8004734:	40000800 	.word	0x40000800
 8004738:	40013400 	.word	0x40013400
 800473c:	40014000 	.word	0x40014000
 8004740:	40014400 	.word	0x40014400
 8004744:	40014800 	.word	0x40014800

08004748 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004748:	b480      	push	{r7}
 800474a:	b087      	sub	sp, #28
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
 8004750:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6a1b      	ldr	r3, [r3, #32]
 8004756:	f023 0201 	bic.w	r2, r3, #1
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6a1b      	ldr	r3, [r3, #32]
 8004762:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	699b      	ldr	r3, [r3, #24]
 800476e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004776:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800477a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	f023 0303 	bic.w	r3, r3, #3
 8004782:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	68fa      	ldr	r2, [r7, #12]
 800478a:	4313      	orrs	r3, r2
 800478c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800478e:	697b      	ldr	r3, [r7, #20]
 8004790:	f023 0302 	bic.w	r3, r3, #2
 8004794:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	689b      	ldr	r3, [r3, #8]
 800479a:	697a      	ldr	r2, [r7, #20]
 800479c:	4313      	orrs	r3, r2
 800479e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	4a2c      	ldr	r2, [pc, #176]	; (8004854 <TIM_OC1_SetConfig+0x10c>)
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d00f      	beq.n	80047c8 <TIM_OC1_SetConfig+0x80>
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	4a2b      	ldr	r2, [pc, #172]	; (8004858 <TIM_OC1_SetConfig+0x110>)
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d00b      	beq.n	80047c8 <TIM_OC1_SetConfig+0x80>
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	4a2a      	ldr	r2, [pc, #168]	; (800485c <TIM_OC1_SetConfig+0x114>)
 80047b4:	4293      	cmp	r3, r2
 80047b6:	d007      	beq.n	80047c8 <TIM_OC1_SetConfig+0x80>
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	4a29      	ldr	r2, [pc, #164]	; (8004860 <TIM_OC1_SetConfig+0x118>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	d003      	beq.n	80047c8 <TIM_OC1_SetConfig+0x80>
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	4a28      	ldr	r2, [pc, #160]	; (8004864 <TIM_OC1_SetConfig+0x11c>)
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d10c      	bne.n	80047e2 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80047c8:	697b      	ldr	r3, [r7, #20]
 80047ca:	f023 0308 	bic.w	r3, r3, #8
 80047ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	68db      	ldr	r3, [r3, #12]
 80047d4:	697a      	ldr	r2, [r7, #20]
 80047d6:	4313      	orrs	r3, r2
 80047d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80047da:	697b      	ldr	r3, [r7, #20]
 80047dc:	f023 0304 	bic.w	r3, r3, #4
 80047e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	4a1b      	ldr	r2, [pc, #108]	; (8004854 <TIM_OC1_SetConfig+0x10c>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d00f      	beq.n	800480a <TIM_OC1_SetConfig+0xc2>
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	4a1a      	ldr	r2, [pc, #104]	; (8004858 <TIM_OC1_SetConfig+0x110>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d00b      	beq.n	800480a <TIM_OC1_SetConfig+0xc2>
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	4a19      	ldr	r2, [pc, #100]	; (800485c <TIM_OC1_SetConfig+0x114>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d007      	beq.n	800480a <TIM_OC1_SetConfig+0xc2>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	4a18      	ldr	r2, [pc, #96]	; (8004860 <TIM_OC1_SetConfig+0x118>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d003      	beq.n	800480a <TIM_OC1_SetConfig+0xc2>
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	4a17      	ldr	r2, [pc, #92]	; (8004864 <TIM_OC1_SetConfig+0x11c>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d111      	bne.n	800482e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800480a:	693b      	ldr	r3, [r7, #16]
 800480c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004810:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004812:	693b      	ldr	r3, [r7, #16]
 8004814:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004818:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	695b      	ldr	r3, [r3, #20]
 800481e:	693a      	ldr	r2, [r7, #16]
 8004820:	4313      	orrs	r3, r2
 8004822:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	699b      	ldr	r3, [r3, #24]
 8004828:	693a      	ldr	r2, [r7, #16]
 800482a:	4313      	orrs	r3, r2
 800482c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	693a      	ldr	r2, [r7, #16]
 8004832:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	68fa      	ldr	r2, [r7, #12]
 8004838:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	685a      	ldr	r2, [r3, #4]
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	697a      	ldr	r2, [r7, #20]
 8004846:	621a      	str	r2, [r3, #32]
}
 8004848:	bf00      	nop
 800484a:	371c      	adds	r7, #28
 800484c:	46bd      	mov	sp, r7
 800484e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004852:	4770      	bx	lr
 8004854:	40012c00 	.word	0x40012c00
 8004858:	40013400 	.word	0x40013400
 800485c:	40014000 	.word	0x40014000
 8004860:	40014400 	.word	0x40014400
 8004864:	40014800 	.word	0x40014800

08004868 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004868:	b480      	push	{r7}
 800486a:	b087      	sub	sp, #28
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
 8004870:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6a1b      	ldr	r3, [r3, #32]
 8004876:	f023 0210 	bic.w	r2, r3, #16
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6a1b      	ldr	r3, [r3, #32]
 8004882:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	685b      	ldr	r3, [r3, #4]
 8004888:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	699b      	ldr	r3, [r3, #24]
 800488e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004896:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800489a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	021b      	lsls	r3, r3, #8
 80048aa:	68fa      	ldr	r2, [r7, #12]
 80048ac:	4313      	orrs	r3, r2
 80048ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80048b0:	697b      	ldr	r3, [r7, #20]
 80048b2:	f023 0320 	bic.w	r3, r3, #32
 80048b6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	689b      	ldr	r3, [r3, #8]
 80048bc:	011b      	lsls	r3, r3, #4
 80048be:	697a      	ldr	r2, [r7, #20]
 80048c0:	4313      	orrs	r3, r2
 80048c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	4a28      	ldr	r2, [pc, #160]	; (8004968 <TIM_OC2_SetConfig+0x100>)
 80048c8:	4293      	cmp	r3, r2
 80048ca:	d003      	beq.n	80048d4 <TIM_OC2_SetConfig+0x6c>
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	4a27      	ldr	r2, [pc, #156]	; (800496c <TIM_OC2_SetConfig+0x104>)
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d10d      	bne.n	80048f0 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80048d4:	697b      	ldr	r3, [r7, #20]
 80048d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80048da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	68db      	ldr	r3, [r3, #12]
 80048e0:	011b      	lsls	r3, r3, #4
 80048e2:	697a      	ldr	r2, [r7, #20]
 80048e4:	4313      	orrs	r3, r2
 80048e6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80048e8:	697b      	ldr	r3, [r7, #20]
 80048ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80048ee:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	4a1d      	ldr	r2, [pc, #116]	; (8004968 <TIM_OC2_SetConfig+0x100>)
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d00f      	beq.n	8004918 <TIM_OC2_SetConfig+0xb0>
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	4a1c      	ldr	r2, [pc, #112]	; (800496c <TIM_OC2_SetConfig+0x104>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d00b      	beq.n	8004918 <TIM_OC2_SetConfig+0xb0>
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	4a1b      	ldr	r2, [pc, #108]	; (8004970 <TIM_OC2_SetConfig+0x108>)
 8004904:	4293      	cmp	r3, r2
 8004906:	d007      	beq.n	8004918 <TIM_OC2_SetConfig+0xb0>
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	4a1a      	ldr	r2, [pc, #104]	; (8004974 <TIM_OC2_SetConfig+0x10c>)
 800490c:	4293      	cmp	r3, r2
 800490e:	d003      	beq.n	8004918 <TIM_OC2_SetConfig+0xb0>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	4a19      	ldr	r2, [pc, #100]	; (8004978 <TIM_OC2_SetConfig+0x110>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d113      	bne.n	8004940 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004918:	693b      	ldr	r3, [r7, #16]
 800491a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800491e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004920:	693b      	ldr	r3, [r7, #16]
 8004922:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004926:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	695b      	ldr	r3, [r3, #20]
 800492c:	009b      	lsls	r3, r3, #2
 800492e:	693a      	ldr	r2, [r7, #16]
 8004930:	4313      	orrs	r3, r2
 8004932:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	699b      	ldr	r3, [r3, #24]
 8004938:	009b      	lsls	r3, r3, #2
 800493a:	693a      	ldr	r2, [r7, #16]
 800493c:	4313      	orrs	r3, r2
 800493e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	693a      	ldr	r2, [r7, #16]
 8004944:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	68fa      	ldr	r2, [r7, #12]
 800494a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	685a      	ldr	r2, [r3, #4]
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	697a      	ldr	r2, [r7, #20]
 8004958:	621a      	str	r2, [r3, #32]
}
 800495a:	bf00      	nop
 800495c:	371c      	adds	r7, #28
 800495e:	46bd      	mov	sp, r7
 8004960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004964:	4770      	bx	lr
 8004966:	bf00      	nop
 8004968:	40012c00 	.word	0x40012c00
 800496c:	40013400 	.word	0x40013400
 8004970:	40014000 	.word	0x40014000
 8004974:	40014400 	.word	0x40014400
 8004978:	40014800 	.word	0x40014800

0800497c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800497c:	b480      	push	{r7}
 800497e:	b087      	sub	sp, #28
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
 8004984:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6a1b      	ldr	r3, [r3, #32]
 800498a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6a1b      	ldr	r3, [r3, #32]
 8004996:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	685b      	ldr	r3, [r3, #4]
 800499c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	69db      	ldr	r3, [r3, #28]
 80049a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	f023 0303 	bic.w	r3, r3, #3
 80049b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	68fa      	ldr	r2, [r7, #12]
 80049be:	4313      	orrs	r3, r2
 80049c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80049c2:	697b      	ldr	r3, [r7, #20]
 80049c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80049c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	689b      	ldr	r3, [r3, #8]
 80049ce:	021b      	lsls	r3, r3, #8
 80049d0:	697a      	ldr	r2, [r7, #20]
 80049d2:	4313      	orrs	r3, r2
 80049d4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	4a27      	ldr	r2, [pc, #156]	; (8004a78 <TIM_OC3_SetConfig+0xfc>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d003      	beq.n	80049e6 <TIM_OC3_SetConfig+0x6a>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	4a26      	ldr	r2, [pc, #152]	; (8004a7c <TIM_OC3_SetConfig+0x100>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d10d      	bne.n	8004a02 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80049e6:	697b      	ldr	r3, [r7, #20]
 80049e8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80049ec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	68db      	ldr	r3, [r3, #12]
 80049f2:	021b      	lsls	r3, r3, #8
 80049f4:	697a      	ldr	r2, [r7, #20]
 80049f6:	4313      	orrs	r3, r2
 80049f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80049fa:	697b      	ldr	r3, [r7, #20]
 80049fc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004a00:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	4a1c      	ldr	r2, [pc, #112]	; (8004a78 <TIM_OC3_SetConfig+0xfc>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d00f      	beq.n	8004a2a <TIM_OC3_SetConfig+0xae>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	4a1b      	ldr	r2, [pc, #108]	; (8004a7c <TIM_OC3_SetConfig+0x100>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d00b      	beq.n	8004a2a <TIM_OC3_SetConfig+0xae>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	4a1a      	ldr	r2, [pc, #104]	; (8004a80 <TIM_OC3_SetConfig+0x104>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d007      	beq.n	8004a2a <TIM_OC3_SetConfig+0xae>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	4a19      	ldr	r2, [pc, #100]	; (8004a84 <TIM_OC3_SetConfig+0x108>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d003      	beq.n	8004a2a <TIM_OC3_SetConfig+0xae>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	4a18      	ldr	r2, [pc, #96]	; (8004a88 <TIM_OC3_SetConfig+0x10c>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d113      	bne.n	8004a52 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004a2a:	693b      	ldr	r3, [r7, #16]
 8004a2c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004a30:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004a32:	693b      	ldr	r3, [r7, #16]
 8004a34:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004a38:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	695b      	ldr	r3, [r3, #20]
 8004a3e:	011b      	lsls	r3, r3, #4
 8004a40:	693a      	ldr	r2, [r7, #16]
 8004a42:	4313      	orrs	r3, r2
 8004a44:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	699b      	ldr	r3, [r3, #24]
 8004a4a:	011b      	lsls	r3, r3, #4
 8004a4c:	693a      	ldr	r2, [r7, #16]
 8004a4e:	4313      	orrs	r3, r2
 8004a50:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	693a      	ldr	r2, [r7, #16]
 8004a56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	68fa      	ldr	r2, [r7, #12]
 8004a5c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	685a      	ldr	r2, [r3, #4]
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	697a      	ldr	r2, [r7, #20]
 8004a6a:	621a      	str	r2, [r3, #32]
}
 8004a6c:	bf00      	nop
 8004a6e:	371c      	adds	r7, #28
 8004a70:	46bd      	mov	sp, r7
 8004a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a76:	4770      	bx	lr
 8004a78:	40012c00 	.word	0x40012c00
 8004a7c:	40013400 	.word	0x40013400
 8004a80:	40014000 	.word	0x40014000
 8004a84:	40014400 	.word	0x40014400
 8004a88:	40014800 	.word	0x40014800

08004a8c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004a8c:	b480      	push	{r7}
 8004a8e:	b087      	sub	sp, #28
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
 8004a94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6a1b      	ldr	r3, [r3, #32]
 8004a9a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6a1b      	ldr	r3, [r3, #32]
 8004aa6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	685b      	ldr	r3, [r3, #4]
 8004aac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	69db      	ldr	r3, [r3, #28]
 8004ab2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004aba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004abe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ac6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	021b      	lsls	r3, r3, #8
 8004ace:	68fa      	ldr	r2, [r7, #12]
 8004ad0:	4313      	orrs	r3, r2
 8004ad2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004ad4:	697b      	ldr	r3, [r7, #20]
 8004ad6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004ada:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	689b      	ldr	r3, [r3, #8]
 8004ae0:	031b      	lsls	r3, r3, #12
 8004ae2:	697a      	ldr	r2, [r7, #20]
 8004ae4:	4313      	orrs	r3, r2
 8004ae6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	4a28      	ldr	r2, [pc, #160]	; (8004b8c <TIM_OC4_SetConfig+0x100>)
 8004aec:	4293      	cmp	r3, r2
 8004aee:	d003      	beq.n	8004af8 <TIM_OC4_SetConfig+0x6c>
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	4a27      	ldr	r2, [pc, #156]	; (8004b90 <TIM_OC4_SetConfig+0x104>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d10d      	bne.n	8004b14 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8004af8:	697b      	ldr	r3, [r7, #20]
 8004afa:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004afe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	68db      	ldr	r3, [r3, #12]
 8004b04:	031b      	lsls	r3, r3, #12
 8004b06:	697a      	ldr	r2, [r7, #20]
 8004b08:	4313      	orrs	r3, r2
 8004b0a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8004b0c:	697b      	ldr	r3, [r7, #20]
 8004b0e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004b12:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	4a1d      	ldr	r2, [pc, #116]	; (8004b8c <TIM_OC4_SetConfig+0x100>)
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	d00f      	beq.n	8004b3c <TIM_OC4_SetConfig+0xb0>
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	4a1c      	ldr	r2, [pc, #112]	; (8004b90 <TIM_OC4_SetConfig+0x104>)
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d00b      	beq.n	8004b3c <TIM_OC4_SetConfig+0xb0>
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	4a1b      	ldr	r2, [pc, #108]	; (8004b94 <TIM_OC4_SetConfig+0x108>)
 8004b28:	4293      	cmp	r3, r2
 8004b2a:	d007      	beq.n	8004b3c <TIM_OC4_SetConfig+0xb0>
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	4a1a      	ldr	r2, [pc, #104]	; (8004b98 <TIM_OC4_SetConfig+0x10c>)
 8004b30:	4293      	cmp	r3, r2
 8004b32:	d003      	beq.n	8004b3c <TIM_OC4_SetConfig+0xb0>
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	4a19      	ldr	r2, [pc, #100]	; (8004b9c <TIM_OC4_SetConfig+0x110>)
 8004b38:	4293      	cmp	r3, r2
 8004b3a:	d113      	bne.n	8004b64 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004b3c:	693b      	ldr	r3, [r7, #16]
 8004b3e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004b42:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8004b44:	693b      	ldr	r3, [r7, #16]
 8004b46:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004b4a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	695b      	ldr	r3, [r3, #20]
 8004b50:	019b      	lsls	r3, r3, #6
 8004b52:	693a      	ldr	r2, [r7, #16]
 8004b54:	4313      	orrs	r3, r2
 8004b56:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	699b      	ldr	r3, [r3, #24]
 8004b5c:	019b      	lsls	r3, r3, #6
 8004b5e:	693a      	ldr	r2, [r7, #16]
 8004b60:	4313      	orrs	r3, r2
 8004b62:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	693a      	ldr	r2, [r7, #16]
 8004b68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	68fa      	ldr	r2, [r7, #12]
 8004b6e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	685a      	ldr	r2, [r3, #4]
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	697a      	ldr	r2, [r7, #20]
 8004b7c:	621a      	str	r2, [r3, #32]
}
 8004b7e:	bf00      	nop
 8004b80:	371c      	adds	r7, #28
 8004b82:	46bd      	mov	sp, r7
 8004b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b88:	4770      	bx	lr
 8004b8a:	bf00      	nop
 8004b8c:	40012c00 	.word	0x40012c00
 8004b90:	40013400 	.word	0x40013400
 8004b94:	40014000 	.word	0x40014000
 8004b98:	40014400 	.word	0x40014400
 8004b9c:	40014800 	.word	0x40014800

08004ba0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	b087      	sub	sp, #28
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
 8004ba8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6a1b      	ldr	r3, [r3, #32]
 8004bae:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6a1b      	ldr	r3, [r3, #32]
 8004bba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	685b      	ldr	r3, [r3, #4]
 8004bc0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004bce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bd2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	68fa      	ldr	r2, [r7, #12]
 8004bda:	4313      	orrs	r3, r2
 8004bdc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004bde:	693b      	ldr	r3, [r7, #16]
 8004be0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004be4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	689b      	ldr	r3, [r3, #8]
 8004bea:	041b      	lsls	r3, r3, #16
 8004bec:	693a      	ldr	r2, [r7, #16]
 8004bee:	4313      	orrs	r3, r2
 8004bf0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	4a17      	ldr	r2, [pc, #92]	; (8004c54 <TIM_OC5_SetConfig+0xb4>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d00f      	beq.n	8004c1a <TIM_OC5_SetConfig+0x7a>
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	4a16      	ldr	r2, [pc, #88]	; (8004c58 <TIM_OC5_SetConfig+0xb8>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d00b      	beq.n	8004c1a <TIM_OC5_SetConfig+0x7a>
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	4a15      	ldr	r2, [pc, #84]	; (8004c5c <TIM_OC5_SetConfig+0xbc>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d007      	beq.n	8004c1a <TIM_OC5_SetConfig+0x7a>
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	4a14      	ldr	r2, [pc, #80]	; (8004c60 <TIM_OC5_SetConfig+0xc0>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d003      	beq.n	8004c1a <TIM_OC5_SetConfig+0x7a>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	4a13      	ldr	r2, [pc, #76]	; (8004c64 <TIM_OC5_SetConfig+0xc4>)
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d109      	bne.n	8004c2e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004c1a:	697b      	ldr	r3, [r7, #20]
 8004c1c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c20:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	695b      	ldr	r3, [r3, #20]
 8004c26:	021b      	lsls	r3, r3, #8
 8004c28:	697a      	ldr	r2, [r7, #20]
 8004c2a:	4313      	orrs	r3, r2
 8004c2c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	697a      	ldr	r2, [r7, #20]
 8004c32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	68fa      	ldr	r2, [r7, #12]
 8004c38:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	685a      	ldr	r2, [r3, #4]
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	693a      	ldr	r2, [r7, #16]
 8004c46:	621a      	str	r2, [r3, #32]
}
 8004c48:	bf00      	nop
 8004c4a:	371c      	adds	r7, #28
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c52:	4770      	bx	lr
 8004c54:	40012c00 	.word	0x40012c00
 8004c58:	40013400 	.word	0x40013400
 8004c5c:	40014000 	.word	0x40014000
 8004c60:	40014400 	.word	0x40014400
 8004c64:	40014800 	.word	0x40014800

08004c68 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004c68:	b480      	push	{r7}
 8004c6a:	b087      	sub	sp, #28
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
 8004c70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6a1b      	ldr	r3, [r3, #32]
 8004c76:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6a1b      	ldr	r3, [r3, #32]
 8004c82:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	685b      	ldr	r3, [r3, #4]
 8004c88:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004c96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	021b      	lsls	r3, r3, #8
 8004ca2:	68fa      	ldr	r2, [r7, #12]
 8004ca4:	4313      	orrs	r3, r2
 8004ca6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004ca8:	693b      	ldr	r3, [r7, #16]
 8004caa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004cae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	689b      	ldr	r3, [r3, #8]
 8004cb4:	051b      	lsls	r3, r3, #20
 8004cb6:	693a      	ldr	r2, [r7, #16]
 8004cb8:	4313      	orrs	r3, r2
 8004cba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	4a18      	ldr	r2, [pc, #96]	; (8004d20 <TIM_OC6_SetConfig+0xb8>)
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d00f      	beq.n	8004ce4 <TIM_OC6_SetConfig+0x7c>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	4a17      	ldr	r2, [pc, #92]	; (8004d24 <TIM_OC6_SetConfig+0xbc>)
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d00b      	beq.n	8004ce4 <TIM_OC6_SetConfig+0x7c>
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	4a16      	ldr	r2, [pc, #88]	; (8004d28 <TIM_OC6_SetConfig+0xc0>)
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d007      	beq.n	8004ce4 <TIM_OC6_SetConfig+0x7c>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	4a15      	ldr	r2, [pc, #84]	; (8004d2c <TIM_OC6_SetConfig+0xc4>)
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d003      	beq.n	8004ce4 <TIM_OC6_SetConfig+0x7c>
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	4a14      	ldr	r2, [pc, #80]	; (8004d30 <TIM_OC6_SetConfig+0xc8>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d109      	bne.n	8004cf8 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004ce4:	697b      	ldr	r3, [r7, #20]
 8004ce6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004cea:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	695b      	ldr	r3, [r3, #20]
 8004cf0:	029b      	lsls	r3, r3, #10
 8004cf2:	697a      	ldr	r2, [r7, #20]
 8004cf4:	4313      	orrs	r3, r2
 8004cf6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	697a      	ldr	r2, [r7, #20]
 8004cfc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	68fa      	ldr	r2, [r7, #12]
 8004d02:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	685a      	ldr	r2, [r3, #4]
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	693a      	ldr	r2, [r7, #16]
 8004d10:	621a      	str	r2, [r3, #32]
}
 8004d12:	bf00      	nop
 8004d14:	371c      	adds	r7, #28
 8004d16:	46bd      	mov	sp, r7
 8004d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1c:	4770      	bx	lr
 8004d1e:	bf00      	nop
 8004d20:	40012c00 	.word	0x40012c00
 8004d24:	40013400 	.word	0x40013400
 8004d28:	40014000 	.word	0x40014000
 8004d2c:	40014400 	.word	0x40014400
 8004d30:	40014800 	.word	0x40014800

08004d34 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004d34:	b480      	push	{r7}
 8004d36:	b087      	sub	sp, #28
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	60f8      	str	r0, [r7, #12]
 8004d3c:	60b9      	str	r1, [r7, #8]
 8004d3e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004d40:	68bb      	ldr	r3, [r7, #8]
 8004d42:	f003 031f 	and.w	r3, r3, #31
 8004d46:	2201      	movs	r2, #1
 8004d48:	fa02 f303 	lsl.w	r3, r2, r3
 8004d4c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	6a1a      	ldr	r2, [r3, #32]
 8004d52:	697b      	ldr	r3, [r7, #20]
 8004d54:	43db      	mvns	r3, r3
 8004d56:	401a      	ands	r2, r3
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	6a1a      	ldr	r2, [r3, #32]
 8004d60:	68bb      	ldr	r3, [r7, #8]
 8004d62:	f003 031f 	and.w	r3, r3, #31
 8004d66:	6879      	ldr	r1, [r7, #4]
 8004d68:	fa01 f303 	lsl.w	r3, r1, r3
 8004d6c:	431a      	orrs	r2, r3
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	621a      	str	r2, [r3, #32]
}
 8004d72:	bf00      	nop
 8004d74:	371c      	adds	r7, #28
 8004d76:	46bd      	mov	sp, r7
 8004d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7c:	4770      	bx	lr
	...

08004d80 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004d80:	b480      	push	{r7}
 8004d82:	b085      	sub	sp, #20
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
 8004d88:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d90:	2b01      	cmp	r3, #1
 8004d92:	d101      	bne.n	8004d98 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004d94:	2302      	movs	r3, #2
 8004d96:	e065      	b.n	8004e64 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2201      	movs	r2, #1
 8004d9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2202      	movs	r2, #2
 8004da4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	685b      	ldr	r3, [r3, #4]
 8004dae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	689b      	ldr	r3, [r3, #8]
 8004db6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	4a2c      	ldr	r2, [pc, #176]	; (8004e70 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d004      	beq.n	8004dcc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	4a2b      	ldr	r2, [pc, #172]	; (8004e74 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d108      	bne.n	8004dde <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004dd2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	685b      	ldr	r3, [r3, #4]
 8004dd8:	68fa      	ldr	r2, [r7, #12]
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8004de4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004de8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	68fa      	ldr	r2, [r7, #12]
 8004df0:	4313      	orrs	r3, r2
 8004df2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	68fa      	ldr	r2, [r7, #12]
 8004dfa:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	4a1b      	ldr	r2, [pc, #108]	; (8004e70 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d018      	beq.n	8004e38 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e0e:	d013      	beq.n	8004e38 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	4a18      	ldr	r2, [pc, #96]	; (8004e78 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d00e      	beq.n	8004e38 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	4a17      	ldr	r2, [pc, #92]	; (8004e7c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d009      	beq.n	8004e38 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	4a12      	ldr	r2, [pc, #72]	; (8004e74 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d004      	beq.n	8004e38 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	4a13      	ldr	r2, [pc, #76]	; (8004e80 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d10c      	bne.n	8004e52 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004e38:	68bb      	ldr	r3, [r7, #8]
 8004e3a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004e3e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	689b      	ldr	r3, [r3, #8]
 8004e44:	68ba      	ldr	r2, [r7, #8]
 8004e46:	4313      	orrs	r3, r2
 8004e48:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	68ba      	ldr	r2, [r7, #8]
 8004e50:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2201      	movs	r2, #1
 8004e56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004e62:	2300      	movs	r3, #0
}
 8004e64:	4618      	mov	r0, r3
 8004e66:	3714      	adds	r7, #20
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6e:	4770      	bx	lr
 8004e70:	40012c00 	.word	0x40012c00
 8004e74:	40013400 	.word	0x40013400
 8004e78:	40000400 	.word	0x40000400
 8004e7c:	40000800 	.word	0x40000800
 8004e80:	40014000 	.word	0x40014000

08004e84 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004e84:	b480      	push	{r7}
 8004e86:	b085      	sub	sp, #20
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
 8004e8c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004e8e:	2300      	movs	r3, #0
 8004e90:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e98:	2b01      	cmp	r3, #1
 8004e9a:	d101      	bne.n	8004ea0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004e9c:	2302      	movs	r3, #2
 8004e9e:	e087      	b.n	8004fb0 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2201      	movs	r2, #1
 8004ea4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	68db      	ldr	r3, [r3, #12]
 8004eb2:	4313      	orrs	r3, r2
 8004eb4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	689b      	ldr	r3, [r3, #8]
 8004ec0:	4313      	orrs	r3, r2
 8004ec2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	685b      	ldr	r3, [r3, #4]
 8004ece:	4313      	orrs	r3, r2
 8004ed0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	4313      	orrs	r3, r2
 8004ede:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	691b      	ldr	r3, [r3, #16]
 8004eea:	4313      	orrs	r3, r2
 8004eec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	695b      	ldr	r3, [r3, #20]
 8004ef8:	4313      	orrs	r3, r2
 8004efa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f06:	4313      	orrs	r3, r2
 8004f08:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	699b      	ldr	r3, [r3, #24]
 8004f14:	041b      	lsls	r3, r3, #16
 8004f16:	4313      	orrs	r3, r2
 8004f18:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	4a27      	ldr	r2, [pc, #156]	; (8004fbc <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d004      	beq.n	8004f2e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	4a25      	ldr	r2, [pc, #148]	; (8004fc0 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d106      	bne.n	8004f3c <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	69db      	ldr	r3, [r3, #28]
 8004f38:	4313      	orrs	r3, r2
 8004f3a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	4a1e      	ldr	r2, [pc, #120]	; (8004fbc <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d004      	beq.n	8004f50 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	4a1d      	ldr	r2, [pc, #116]	; (8004fc0 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	d126      	bne.n	8004f9e <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f5a:	051b      	lsls	r3, r3, #20
 8004f5c:	4313      	orrs	r3, r2
 8004f5e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	6a1b      	ldr	r3, [r3, #32]
 8004f6a:	4313      	orrs	r3, r2
 8004f6c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f78:	4313      	orrs	r3, r2
 8004f7a:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	4a0e      	ldr	r2, [pc, #56]	; (8004fbc <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d004      	beq.n	8004f90 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	4a0d      	ldr	r2, [pc, #52]	; (8004fc0 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d106      	bne.n	8004f9e <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f9a:	4313      	orrs	r3, r2
 8004f9c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	68fa      	ldr	r2, [r7, #12]
 8004fa4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2200      	movs	r2, #0
 8004faa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004fae:	2300      	movs	r3, #0
}
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	3714      	adds	r7, #20
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fba:	4770      	bx	lr
 8004fbc:	40012c00 	.word	0x40012c00
 8004fc0:	40013400 	.word	0x40013400

08004fc4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004fc4:	b480      	push	{r7}
 8004fc6:	b085      	sub	sp, #20
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2200      	movs	r2, #0
 8004fd0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004fd4:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8004fd8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	b29a      	uxth	r2, r3
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004fe4:	2300      	movs	r3, #0
}
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	3714      	adds	r7, #20
 8004fea:	46bd      	mov	sp, r7
 8004fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff0:	4770      	bx	lr

08004ff2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004ff2:	b480      	push	{r7}
 8004ff4:	b085      	sub	sp, #20
 8004ff6:	af00      	add	r7, sp, #0
 8004ff8:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004ffa:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8004ffe:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005006:	b29a      	uxth	r2, r3
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	b29b      	uxth	r3, r3
 800500c:	43db      	mvns	r3, r3
 800500e:	b29b      	uxth	r3, r3
 8005010:	4013      	ands	r3, r2
 8005012:	b29a      	uxth	r2, r3
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800501a:	2300      	movs	r3, #0
}
 800501c:	4618      	mov	r0, r3
 800501e:	3714      	adds	r7, #20
 8005020:	46bd      	mov	sp, r7
 8005022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005026:	4770      	bx	lr

08005028 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005028:	b084      	sub	sp, #16
 800502a:	b480      	push	{r7}
 800502c:	b083      	sub	sp, #12
 800502e:	af00      	add	r7, sp, #0
 8005030:	6078      	str	r0, [r7, #4]
 8005032:	f107 0014 	add.w	r0, r7, #20
 8005036:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2201      	movs	r2, #1
 800503e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0U;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2200      	movs	r2, #0
 8005046:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0U;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2200      	movs	r2, #0
 800504e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2200      	movs	r2, #0
 8005056:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800505a:	2300      	movs	r3, #0
}
 800505c:	4618      	mov	r0, r3
 800505e:	370c      	adds	r7, #12
 8005060:	46bd      	mov	sp, r7
 8005062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005066:	b004      	add	sp, #16
 8005068:	4770      	bx	lr
	...

0800506c <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800506c:	b480      	push	{r7}
 800506e:	b09b      	sub	sp, #108	; 0x6c
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
 8005074:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8005076:	2300      	movs	r3, #0
 8005078:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800507c:	687a      	ldr	r2, [r7, #4]
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	781b      	ldrb	r3, [r3, #0]
 8005082:	009b      	lsls	r3, r3, #2
 8005084:	4413      	add	r3, r2
 8005086:	881b      	ldrh	r3, [r3, #0]
 8005088:	b29b      	uxth	r3, r3
 800508a:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800508e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005092:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	78db      	ldrb	r3, [r3, #3]
 800509a:	2b03      	cmp	r3, #3
 800509c:	d81f      	bhi.n	80050de <USB_ActivateEndpoint+0x72>
 800509e:	a201      	add	r2, pc, #4	; (adr r2, 80050a4 <USB_ActivateEndpoint+0x38>)
 80050a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050a4:	080050b5 	.word	0x080050b5
 80050a8:	080050d1 	.word	0x080050d1
 80050ac:	080050e7 	.word	0x080050e7
 80050b0:	080050c3 	.word	0x080050c3
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80050b4:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80050b8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80050bc:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80050c0:	e012      	b.n	80050e8 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80050c2:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80050c6:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80050ca:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80050ce:	e00b      	b.n	80050e8 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80050d0:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80050d4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80050d8:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80050dc:	e004      	b.n	80050e8 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80050de:	2301      	movs	r3, #1
 80050e0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 80050e4:	e000      	b.n	80050e8 <USB_ActivateEndpoint+0x7c>
      break;
 80050e6:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80050e8:	687a      	ldr	r2, [r7, #4]
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	781b      	ldrb	r3, [r3, #0]
 80050ee:	009b      	lsls	r3, r3, #2
 80050f0:	441a      	add	r2, r3
 80050f2:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80050f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80050fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80050fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005102:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005106:	b29b      	uxth	r3, r3
 8005108:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800510a:	687a      	ldr	r2, [r7, #4]
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	781b      	ldrb	r3, [r3, #0]
 8005110:	009b      	lsls	r3, r3, #2
 8005112:	4413      	add	r3, r2
 8005114:	881b      	ldrh	r3, [r3, #0]
 8005116:	b29b      	uxth	r3, r3
 8005118:	b21b      	sxth	r3, r3
 800511a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800511e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005122:	b21a      	sxth	r2, r3
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	781b      	ldrb	r3, [r3, #0]
 8005128:	b21b      	sxth	r3, r3
 800512a:	4313      	orrs	r3, r2
 800512c:	b21b      	sxth	r3, r3
 800512e:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8005132:	687a      	ldr	r2, [r7, #4]
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	781b      	ldrb	r3, [r3, #0]
 8005138:	009b      	lsls	r3, r3, #2
 800513a:	441a      	add	r2, r3
 800513c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8005140:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005144:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005148:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800514c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005150:	b29b      	uxth	r3, r3
 8005152:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	7b1b      	ldrb	r3, [r3, #12]
 8005158:	2b00      	cmp	r3, #0
 800515a:	f040 8149 	bne.w	80053f0 <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	785b      	ldrb	r3, [r3, #1]
 8005162:	2b00      	cmp	r3, #0
 8005164:	f000 8084 	beq.w	8005270 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	617b      	str	r3, [r7, #20]
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005172:	b29b      	uxth	r3, r3
 8005174:	461a      	mov	r2, r3
 8005176:	697b      	ldr	r3, [r7, #20]
 8005178:	4413      	add	r3, r2
 800517a:	617b      	str	r3, [r7, #20]
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	781b      	ldrb	r3, [r3, #0]
 8005180:	00da      	lsls	r2, r3, #3
 8005182:	697b      	ldr	r3, [r7, #20]
 8005184:	4413      	add	r3, r2
 8005186:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800518a:	613b      	str	r3, [r7, #16]
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	88db      	ldrh	r3, [r3, #6]
 8005190:	085b      	lsrs	r3, r3, #1
 8005192:	b29b      	uxth	r3, r3
 8005194:	005b      	lsls	r3, r3, #1
 8005196:	b29a      	uxth	r2, r3
 8005198:	693b      	ldr	r3, [r7, #16]
 800519a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800519c:	687a      	ldr	r2, [r7, #4]
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	781b      	ldrb	r3, [r3, #0]
 80051a2:	009b      	lsls	r3, r3, #2
 80051a4:	4413      	add	r3, r2
 80051a6:	881b      	ldrh	r3, [r3, #0]
 80051a8:	81fb      	strh	r3, [r7, #14]
 80051aa:	89fb      	ldrh	r3, [r7, #14]
 80051ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d01b      	beq.n	80051ec <USB_ActivateEndpoint+0x180>
 80051b4:	687a      	ldr	r2, [r7, #4]
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	781b      	ldrb	r3, [r3, #0]
 80051ba:	009b      	lsls	r3, r3, #2
 80051bc:	4413      	add	r3, r2
 80051be:	881b      	ldrh	r3, [r3, #0]
 80051c0:	b29b      	uxth	r3, r3
 80051c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051ca:	81bb      	strh	r3, [r7, #12]
 80051cc:	687a      	ldr	r2, [r7, #4]
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	781b      	ldrb	r3, [r3, #0]
 80051d2:	009b      	lsls	r3, r3, #2
 80051d4:	441a      	add	r2, r3
 80051d6:	89bb      	ldrh	r3, [r7, #12]
 80051d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80051dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80051e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80051e4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80051e8:	b29b      	uxth	r3, r3
 80051ea:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	78db      	ldrb	r3, [r3, #3]
 80051f0:	2b01      	cmp	r3, #1
 80051f2:	d020      	beq.n	8005236 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80051f4:	687a      	ldr	r2, [r7, #4]
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	781b      	ldrb	r3, [r3, #0]
 80051fa:	009b      	lsls	r3, r3, #2
 80051fc:	4413      	add	r3, r2
 80051fe:	881b      	ldrh	r3, [r3, #0]
 8005200:	b29b      	uxth	r3, r3
 8005202:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005206:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800520a:	813b      	strh	r3, [r7, #8]
 800520c:	893b      	ldrh	r3, [r7, #8]
 800520e:	f083 0320 	eor.w	r3, r3, #32
 8005212:	813b      	strh	r3, [r7, #8]
 8005214:	687a      	ldr	r2, [r7, #4]
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	781b      	ldrb	r3, [r3, #0]
 800521a:	009b      	lsls	r3, r3, #2
 800521c:	441a      	add	r2, r3
 800521e:	893b      	ldrh	r3, [r7, #8]
 8005220:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005224:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005228:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800522c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005230:	b29b      	uxth	r3, r3
 8005232:	8013      	strh	r3, [r2, #0]
 8005234:	e27f      	b.n	8005736 <USB_ActivateEndpoint+0x6ca>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005236:	687a      	ldr	r2, [r7, #4]
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	781b      	ldrb	r3, [r3, #0]
 800523c:	009b      	lsls	r3, r3, #2
 800523e:	4413      	add	r3, r2
 8005240:	881b      	ldrh	r3, [r3, #0]
 8005242:	b29b      	uxth	r3, r3
 8005244:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005248:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800524c:	817b      	strh	r3, [r7, #10]
 800524e:	687a      	ldr	r2, [r7, #4]
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	781b      	ldrb	r3, [r3, #0]
 8005254:	009b      	lsls	r3, r3, #2
 8005256:	441a      	add	r2, r3
 8005258:	897b      	ldrh	r3, [r7, #10]
 800525a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800525e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005262:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005266:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800526a:	b29b      	uxth	r3, r3
 800526c:	8013      	strh	r3, [r2, #0]
 800526e:	e262      	b.n	8005736 <USB_ActivateEndpoint+0x6ca>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800527a:	b29b      	uxth	r3, r3
 800527c:	461a      	mov	r2, r3
 800527e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005280:	4413      	add	r3, r2
 8005282:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	781b      	ldrb	r3, [r3, #0]
 8005288:	00da      	lsls	r2, r3, #3
 800528a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800528c:	4413      	add	r3, r2
 800528e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005292:	62bb      	str	r3, [r7, #40]	; 0x28
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	88db      	ldrh	r3, [r3, #6]
 8005298:	085b      	lsrs	r3, r3, #1
 800529a:	b29b      	uxth	r3, r3
 800529c:	005b      	lsls	r3, r3, #1
 800529e:	b29a      	uxth	r2, r3
 80052a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052a2:	801a      	strh	r2, [r3, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	627b      	str	r3, [r7, #36]	; 0x24
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80052ae:	b29b      	uxth	r3, r3
 80052b0:	461a      	mov	r2, r3
 80052b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052b4:	4413      	add	r3, r2
 80052b6:	627b      	str	r3, [r7, #36]	; 0x24
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	781b      	ldrb	r3, [r3, #0]
 80052bc:	00da      	lsls	r2, r3, #3
 80052be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052c0:	4413      	add	r3, r2
 80052c2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80052c6:	623b      	str	r3, [r7, #32]
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	691b      	ldr	r3, [r3, #16]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d112      	bne.n	80052f6 <USB_ActivateEndpoint+0x28a>
 80052d0:	6a3b      	ldr	r3, [r7, #32]
 80052d2:	881b      	ldrh	r3, [r3, #0]
 80052d4:	b29b      	uxth	r3, r3
 80052d6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80052da:	b29a      	uxth	r2, r3
 80052dc:	6a3b      	ldr	r3, [r7, #32]
 80052de:	801a      	strh	r2, [r3, #0]
 80052e0:	6a3b      	ldr	r3, [r7, #32]
 80052e2:	881b      	ldrh	r3, [r3, #0]
 80052e4:	b29b      	uxth	r3, r3
 80052e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80052ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80052ee:	b29a      	uxth	r2, r3
 80052f0:	6a3b      	ldr	r3, [r7, #32]
 80052f2:	801a      	strh	r2, [r3, #0]
 80052f4:	e02f      	b.n	8005356 <USB_ActivateEndpoint+0x2ea>
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	691b      	ldr	r3, [r3, #16]
 80052fa:	2b3e      	cmp	r3, #62	; 0x3e
 80052fc:	d813      	bhi.n	8005326 <USB_ActivateEndpoint+0x2ba>
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	691b      	ldr	r3, [r3, #16]
 8005302:	085b      	lsrs	r3, r3, #1
 8005304:	663b      	str	r3, [r7, #96]	; 0x60
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	691b      	ldr	r3, [r3, #16]
 800530a:	f003 0301 	and.w	r3, r3, #1
 800530e:	2b00      	cmp	r3, #0
 8005310:	d002      	beq.n	8005318 <USB_ActivateEndpoint+0x2ac>
 8005312:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005314:	3301      	adds	r3, #1
 8005316:	663b      	str	r3, [r7, #96]	; 0x60
 8005318:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800531a:	b29b      	uxth	r3, r3
 800531c:	029b      	lsls	r3, r3, #10
 800531e:	b29a      	uxth	r2, r3
 8005320:	6a3b      	ldr	r3, [r7, #32]
 8005322:	801a      	strh	r2, [r3, #0]
 8005324:	e017      	b.n	8005356 <USB_ActivateEndpoint+0x2ea>
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	691b      	ldr	r3, [r3, #16]
 800532a:	095b      	lsrs	r3, r3, #5
 800532c:	663b      	str	r3, [r7, #96]	; 0x60
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	691b      	ldr	r3, [r3, #16]
 8005332:	f003 031f 	and.w	r3, r3, #31
 8005336:	2b00      	cmp	r3, #0
 8005338:	d102      	bne.n	8005340 <USB_ActivateEndpoint+0x2d4>
 800533a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800533c:	3b01      	subs	r3, #1
 800533e:	663b      	str	r3, [r7, #96]	; 0x60
 8005340:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005342:	b29b      	uxth	r3, r3
 8005344:	029b      	lsls	r3, r3, #10
 8005346:	b29b      	uxth	r3, r3
 8005348:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800534c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005350:	b29a      	uxth	r2, r3
 8005352:	6a3b      	ldr	r3, [r7, #32]
 8005354:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005356:	687a      	ldr	r2, [r7, #4]
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	781b      	ldrb	r3, [r3, #0]
 800535c:	009b      	lsls	r3, r3, #2
 800535e:	4413      	add	r3, r2
 8005360:	881b      	ldrh	r3, [r3, #0]
 8005362:	83fb      	strh	r3, [r7, #30]
 8005364:	8bfb      	ldrh	r3, [r7, #30]
 8005366:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800536a:	2b00      	cmp	r3, #0
 800536c:	d01b      	beq.n	80053a6 <USB_ActivateEndpoint+0x33a>
 800536e:	687a      	ldr	r2, [r7, #4]
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	781b      	ldrb	r3, [r3, #0]
 8005374:	009b      	lsls	r3, r3, #2
 8005376:	4413      	add	r3, r2
 8005378:	881b      	ldrh	r3, [r3, #0]
 800537a:	b29b      	uxth	r3, r3
 800537c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005380:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005384:	83bb      	strh	r3, [r7, #28]
 8005386:	687a      	ldr	r2, [r7, #4]
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	781b      	ldrb	r3, [r3, #0]
 800538c:	009b      	lsls	r3, r3, #2
 800538e:	441a      	add	r2, r3
 8005390:	8bbb      	ldrh	r3, [r7, #28]
 8005392:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005396:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800539a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800539e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053a2:	b29b      	uxth	r3, r3
 80053a4:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80053a6:	687a      	ldr	r2, [r7, #4]
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	781b      	ldrb	r3, [r3, #0]
 80053ac:	009b      	lsls	r3, r3, #2
 80053ae:	4413      	add	r3, r2
 80053b0:	881b      	ldrh	r3, [r3, #0]
 80053b2:	b29b      	uxth	r3, r3
 80053b4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80053b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053bc:	837b      	strh	r3, [r7, #26]
 80053be:	8b7b      	ldrh	r3, [r7, #26]
 80053c0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80053c4:	837b      	strh	r3, [r7, #26]
 80053c6:	8b7b      	ldrh	r3, [r7, #26]
 80053c8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80053cc:	837b      	strh	r3, [r7, #26]
 80053ce:	687a      	ldr	r2, [r7, #4]
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	781b      	ldrb	r3, [r3, #0]
 80053d4:	009b      	lsls	r3, r3, #2
 80053d6:	441a      	add	r2, r3
 80053d8:	8b7b      	ldrh	r3, [r7, #26]
 80053da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80053de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80053e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80053e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053ea:	b29b      	uxth	r3, r3
 80053ec:	8013      	strh	r3, [r2, #0]
 80053ee:	e1a2      	b.n	8005736 <USB_ActivateEndpoint+0x6ca>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 80053f0:	687a      	ldr	r2, [r7, #4]
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	781b      	ldrb	r3, [r3, #0]
 80053f6:	009b      	lsls	r3, r3, #2
 80053f8:	4413      	add	r3, r2
 80053fa:	881b      	ldrh	r3, [r3, #0]
 80053fc:	b29b      	uxth	r3, r3
 80053fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005402:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005406:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 800540a:	687a      	ldr	r2, [r7, #4]
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	781b      	ldrb	r3, [r3, #0]
 8005410:	009b      	lsls	r3, r3, #2
 8005412:	441a      	add	r2, r3
 8005414:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8005418:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800541c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005420:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005424:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005428:	b29b      	uxth	r3, r3
 800542a:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	65bb      	str	r3, [r7, #88]	; 0x58
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005436:	b29b      	uxth	r3, r3
 8005438:	461a      	mov	r2, r3
 800543a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800543c:	4413      	add	r3, r2
 800543e:	65bb      	str	r3, [r7, #88]	; 0x58
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	781b      	ldrb	r3, [r3, #0]
 8005444:	00da      	lsls	r2, r3, #3
 8005446:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005448:	4413      	add	r3, r2
 800544a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800544e:	657b      	str	r3, [r7, #84]	; 0x54
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	891b      	ldrh	r3, [r3, #8]
 8005454:	085b      	lsrs	r3, r3, #1
 8005456:	b29b      	uxth	r3, r3
 8005458:	005b      	lsls	r3, r3, #1
 800545a:	b29a      	uxth	r2, r3
 800545c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800545e:	801a      	strh	r2, [r3, #0]
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	653b      	str	r3, [r7, #80]	; 0x50
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800546a:	b29b      	uxth	r3, r3
 800546c:	461a      	mov	r2, r3
 800546e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005470:	4413      	add	r3, r2
 8005472:	653b      	str	r3, [r7, #80]	; 0x50
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	781b      	ldrb	r3, [r3, #0]
 8005478:	00da      	lsls	r2, r3, #3
 800547a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800547c:	4413      	add	r3, r2
 800547e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005482:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	895b      	ldrh	r3, [r3, #10]
 8005488:	085b      	lsrs	r3, r3, #1
 800548a:	b29b      	uxth	r3, r3
 800548c:	005b      	lsls	r3, r3, #1
 800548e:	b29a      	uxth	r2, r3
 8005490:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005492:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	785b      	ldrb	r3, [r3, #1]
 8005498:	2b00      	cmp	r3, #0
 800549a:	f040 8091 	bne.w	80055c0 <USB_ActivateEndpoint+0x554>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800549e:	687a      	ldr	r2, [r7, #4]
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	781b      	ldrb	r3, [r3, #0]
 80054a4:	009b      	lsls	r3, r3, #2
 80054a6:	4413      	add	r3, r2
 80054a8:	881b      	ldrh	r3, [r3, #0]
 80054aa:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80054ac:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80054ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d01b      	beq.n	80054ee <USB_ActivateEndpoint+0x482>
 80054b6:	687a      	ldr	r2, [r7, #4]
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	781b      	ldrb	r3, [r3, #0]
 80054bc:	009b      	lsls	r3, r3, #2
 80054be:	4413      	add	r3, r2
 80054c0:	881b      	ldrh	r3, [r3, #0]
 80054c2:	b29b      	uxth	r3, r3
 80054c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054cc:	877b      	strh	r3, [r7, #58]	; 0x3a
 80054ce:	687a      	ldr	r2, [r7, #4]
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	781b      	ldrb	r3, [r3, #0]
 80054d4:	009b      	lsls	r3, r3, #2
 80054d6:	441a      	add	r2, r3
 80054d8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80054da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80054de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80054e2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80054e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054ea:	b29b      	uxth	r3, r3
 80054ec:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80054ee:	687a      	ldr	r2, [r7, #4]
 80054f0:	683b      	ldr	r3, [r7, #0]
 80054f2:	781b      	ldrb	r3, [r3, #0]
 80054f4:	009b      	lsls	r3, r3, #2
 80054f6:	4413      	add	r3, r2
 80054f8:	881b      	ldrh	r3, [r3, #0]
 80054fa:	873b      	strh	r3, [r7, #56]	; 0x38
 80054fc:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80054fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005502:	2b00      	cmp	r3, #0
 8005504:	d01b      	beq.n	800553e <USB_ActivateEndpoint+0x4d2>
 8005506:	687a      	ldr	r2, [r7, #4]
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	781b      	ldrb	r3, [r3, #0]
 800550c:	009b      	lsls	r3, r3, #2
 800550e:	4413      	add	r3, r2
 8005510:	881b      	ldrh	r3, [r3, #0]
 8005512:	b29b      	uxth	r3, r3
 8005514:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005518:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800551c:	86fb      	strh	r3, [r7, #54]	; 0x36
 800551e:	687a      	ldr	r2, [r7, #4]
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	781b      	ldrb	r3, [r3, #0]
 8005524:	009b      	lsls	r3, r3, #2
 8005526:	441a      	add	r2, r3
 8005528:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800552a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800552e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005532:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005536:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800553a:	b29b      	uxth	r3, r3
 800553c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800553e:	687a      	ldr	r2, [r7, #4]
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	781b      	ldrb	r3, [r3, #0]
 8005544:	009b      	lsls	r3, r3, #2
 8005546:	4413      	add	r3, r2
 8005548:	881b      	ldrh	r3, [r3, #0]
 800554a:	b29b      	uxth	r3, r3
 800554c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005550:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005554:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005556:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005558:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800555c:	86bb      	strh	r3, [r7, #52]	; 0x34
 800555e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005560:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005564:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005566:	687a      	ldr	r2, [r7, #4]
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	781b      	ldrb	r3, [r3, #0]
 800556c:	009b      	lsls	r3, r3, #2
 800556e:	441a      	add	r2, r3
 8005570:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005572:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005576:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800557a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800557e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005582:	b29b      	uxth	r3, r3
 8005584:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005586:	687a      	ldr	r2, [r7, #4]
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	781b      	ldrb	r3, [r3, #0]
 800558c:	009b      	lsls	r3, r3, #2
 800558e:	4413      	add	r3, r2
 8005590:	881b      	ldrh	r3, [r3, #0]
 8005592:	b29b      	uxth	r3, r3
 8005594:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005598:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800559c:	867b      	strh	r3, [r7, #50]	; 0x32
 800559e:	687a      	ldr	r2, [r7, #4]
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	781b      	ldrb	r3, [r3, #0]
 80055a4:	009b      	lsls	r3, r3, #2
 80055a6:	441a      	add	r2, r3
 80055a8:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80055aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80055ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80055b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80055b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055ba:	b29b      	uxth	r3, r3
 80055bc:	8013      	strh	r3, [r2, #0]
 80055be:	e0ba      	b.n	8005736 <USB_ActivateEndpoint+0x6ca>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80055c0:	687a      	ldr	r2, [r7, #4]
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	781b      	ldrb	r3, [r3, #0]
 80055c6:	009b      	lsls	r3, r3, #2
 80055c8:	4413      	add	r3, r2
 80055ca:	881b      	ldrh	r3, [r3, #0]
 80055cc:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80055d0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80055d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d01d      	beq.n	8005618 <USB_ActivateEndpoint+0x5ac>
 80055dc:	687a      	ldr	r2, [r7, #4]
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	781b      	ldrb	r3, [r3, #0]
 80055e2:	009b      	lsls	r3, r3, #2
 80055e4:	4413      	add	r3, r2
 80055e6:	881b      	ldrh	r3, [r3, #0]
 80055e8:	b29b      	uxth	r3, r3
 80055ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055f2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80055f6:	687a      	ldr	r2, [r7, #4]
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	781b      	ldrb	r3, [r3, #0]
 80055fc:	009b      	lsls	r3, r3, #2
 80055fe:	441a      	add	r2, r3
 8005600:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005604:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005608:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800560c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005610:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005614:	b29b      	uxth	r3, r3
 8005616:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005618:	687a      	ldr	r2, [r7, #4]
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	781b      	ldrb	r3, [r3, #0]
 800561e:	009b      	lsls	r3, r3, #2
 8005620:	4413      	add	r3, r2
 8005622:	881b      	ldrh	r3, [r3, #0]
 8005624:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8005628:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800562c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005630:	2b00      	cmp	r3, #0
 8005632:	d01d      	beq.n	8005670 <USB_ActivateEndpoint+0x604>
 8005634:	687a      	ldr	r2, [r7, #4]
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	781b      	ldrb	r3, [r3, #0]
 800563a:	009b      	lsls	r3, r3, #2
 800563c:	4413      	add	r3, r2
 800563e:	881b      	ldrh	r3, [r3, #0]
 8005640:	b29b      	uxth	r3, r3
 8005642:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005646:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800564a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800564e:	687a      	ldr	r2, [r7, #4]
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	781b      	ldrb	r3, [r3, #0]
 8005654:	009b      	lsls	r3, r3, #2
 8005656:	441a      	add	r2, r3
 8005658:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800565c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005660:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005664:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005668:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800566c:	b29b      	uxth	r3, r3
 800566e:	8013      	strh	r3, [r2, #0]


      if (ep->type != EP_TYPE_ISOC)
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	78db      	ldrb	r3, [r3, #3]
 8005674:	2b01      	cmp	r3, #1
 8005676:	d024      	beq.n	80056c2 <USB_ActivateEndpoint+0x656>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005678:	687a      	ldr	r2, [r7, #4]
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	781b      	ldrb	r3, [r3, #0]
 800567e:	009b      	lsls	r3, r3, #2
 8005680:	4413      	add	r3, r2
 8005682:	881b      	ldrh	r3, [r3, #0]
 8005684:	b29b      	uxth	r3, r3
 8005686:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800568a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800568e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8005692:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005696:	f083 0320 	eor.w	r3, r3, #32
 800569a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800569e:	687a      	ldr	r2, [r7, #4]
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	781b      	ldrb	r3, [r3, #0]
 80056a4:	009b      	lsls	r3, r3, #2
 80056a6:	441a      	add	r2, r3
 80056a8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80056ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80056b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80056b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80056b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056bc:	b29b      	uxth	r3, r3
 80056be:	8013      	strh	r3, [r2, #0]
 80056c0:	e01d      	b.n	80056fe <USB_ActivateEndpoint+0x692>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80056c2:	687a      	ldr	r2, [r7, #4]
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	781b      	ldrb	r3, [r3, #0]
 80056c8:	009b      	lsls	r3, r3, #2
 80056ca:	4413      	add	r3, r2
 80056cc:	881b      	ldrh	r3, [r3, #0]
 80056ce:	b29b      	uxth	r3, r3
 80056d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80056d8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80056dc:	687a      	ldr	r2, [r7, #4]
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	781b      	ldrb	r3, [r3, #0]
 80056e2:	009b      	lsls	r3, r3, #2
 80056e4:	441a      	add	r2, r3
 80056e6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80056ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80056ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80056f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80056f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056fa:	b29b      	uxth	r3, r3
 80056fc:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80056fe:	687a      	ldr	r2, [r7, #4]
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	781b      	ldrb	r3, [r3, #0]
 8005704:	009b      	lsls	r3, r3, #2
 8005706:	4413      	add	r3, r2
 8005708:	881b      	ldrh	r3, [r3, #0]
 800570a:	b29b      	uxth	r3, r3
 800570c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005710:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005714:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8005716:	687a      	ldr	r2, [r7, #4]
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	781b      	ldrb	r3, [r3, #0]
 800571c:	009b      	lsls	r3, r3, #2
 800571e:	441a      	add	r2, r3
 8005720:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005722:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005726:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800572a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800572e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005732:	b29b      	uxth	r3, r3
 8005734:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8005736:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800573a:	4618      	mov	r0, r3
 800573c:	376c      	adds	r7, #108	; 0x6c
 800573e:	46bd      	mov	sp, r7
 8005740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005744:	4770      	bx	lr
 8005746:	bf00      	nop

08005748 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005748:	b480      	push	{r7}
 800574a:	b08d      	sub	sp, #52	; 0x34
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
 8005750:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	7b1b      	ldrb	r3, [r3, #12]
 8005756:	2b00      	cmp	r3, #0
 8005758:	f040 808e 	bne.w	8005878 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800575c:	683b      	ldr	r3, [r7, #0]
 800575e:	785b      	ldrb	r3, [r3, #1]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d044      	beq.n	80057ee <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005764:	687a      	ldr	r2, [r7, #4]
 8005766:	683b      	ldr	r3, [r7, #0]
 8005768:	781b      	ldrb	r3, [r3, #0]
 800576a:	009b      	lsls	r3, r3, #2
 800576c:	4413      	add	r3, r2
 800576e:	881b      	ldrh	r3, [r3, #0]
 8005770:	81bb      	strh	r3, [r7, #12]
 8005772:	89bb      	ldrh	r3, [r7, #12]
 8005774:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005778:	2b00      	cmp	r3, #0
 800577a:	d01b      	beq.n	80057b4 <USB_DeactivateEndpoint+0x6c>
 800577c:	687a      	ldr	r2, [r7, #4]
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	781b      	ldrb	r3, [r3, #0]
 8005782:	009b      	lsls	r3, r3, #2
 8005784:	4413      	add	r3, r2
 8005786:	881b      	ldrh	r3, [r3, #0]
 8005788:	b29b      	uxth	r3, r3
 800578a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800578e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005792:	817b      	strh	r3, [r7, #10]
 8005794:	687a      	ldr	r2, [r7, #4]
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	781b      	ldrb	r3, [r3, #0]
 800579a:	009b      	lsls	r3, r3, #2
 800579c:	441a      	add	r2, r3
 800579e:	897b      	ldrh	r3, [r7, #10]
 80057a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80057a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80057a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80057ac:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80057b0:	b29b      	uxth	r3, r3
 80057b2:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80057b4:	687a      	ldr	r2, [r7, #4]
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	781b      	ldrb	r3, [r3, #0]
 80057ba:	009b      	lsls	r3, r3, #2
 80057bc:	4413      	add	r3, r2
 80057be:	881b      	ldrh	r3, [r3, #0]
 80057c0:	b29b      	uxth	r3, r3
 80057c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80057ca:	813b      	strh	r3, [r7, #8]
 80057cc:	687a      	ldr	r2, [r7, #4]
 80057ce:	683b      	ldr	r3, [r7, #0]
 80057d0:	781b      	ldrb	r3, [r3, #0]
 80057d2:	009b      	lsls	r3, r3, #2
 80057d4:	441a      	add	r2, r3
 80057d6:	893b      	ldrh	r3, [r7, #8]
 80057d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80057dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80057e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80057e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057e8:	b29b      	uxth	r3, r3
 80057ea:	8013      	strh	r3, [r2, #0]
 80057ec:	e192      	b.n	8005b14 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80057ee:	687a      	ldr	r2, [r7, #4]
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	781b      	ldrb	r3, [r3, #0]
 80057f4:	009b      	lsls	r3, r3, #2
 80057f6:	4413      	add	r3, r2
 80057f8:	881b      	ldrh	r3, [r3, #0]
 80057fa:	827b      	strh	r3, [r7, #18]
 80057fc:	8a7b      	ldrh	r3, [r7, #18]
 80057fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005802:	2b00      	cmp	r3, #0
 8005804:	d01b      	beq.n	800583e <USB_DeactivateEndpoint+0xf6>
 8005806:	687a      	ldr	r2, [r7, #4]
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	781b      	ldrb	r3, [r3, #0]
 800580c:	009b      	lsls	r3, r3, #2
 800580e:	4413      	add	r3, r2
 8005810:	881b      	ldrh	r3, [r3, #0]
 8005812:	b29b      	uxth	r3, r3
 8005814:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005818:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800581c:	823b      	strh	r3, [r7, #16]
 800581e:	687a      	ldr	r2, [r7, #4]
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	781b      	ldrb	r3, [r3, #0]
 8005824:	009b      	lsls	r3, r3, #2
 8005826:	441a      	add	r2, r3
 8005828:	8a3b      	ldrh	r3, [r7, #16]
 800582a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800582e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005832:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005836:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800583a:	b29b      	uxth	r3, r3
 800583c:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800583e:	687a      	ldr	r2, [r7, #4]
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	781b      	ldrb	r3, [r3, #0]
 8005844:	009b      	lsls	r3, r3, #2
 8005846:	4413      	add	r3, r2
 8005848:	881b      	ldrh	r3, [r3, #0]
 800584a:	b29b      	uxth	r3, r3
 800584c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005850:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005854:	81fb      	strh	r3, [r7, #14]
 8005856:	687a      	ldr	r2, [r7, #4]
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	781b      	ldrb	r3, [r3, #0]
 800585c:	009b      	lsls	r3, r3, #2
 800585e:	441a      	add	r2, r3
 8005860:	89fb      	ldrh	r3, [r7, #14]
 8005862:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005866:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800586a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800586e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005872:	b29b      	uxth	r3, r3
 8005874:	8013      	strh	r3, [r2, #0]
 8005876:	e14d      	b.n	8005b14 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	785b      	ldrb	r3, [r3, #1]
 800587c:	2b00      	cmp	r3, #0
 800587e:	f040 80a5 	bne.w	80059cc <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005882:	687a      	ldr	r2, [r7, #4]
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	781b      	ldrb	r3, [r3, #0]
 8005888:	009b      	lsls	r3, r3, #2
 800588a:	4413      	add	r3, r2
 800588c:	881b      	ldrh	r3, [r3, #0]
 800588e:	843b      	strh	r3, [r7, #32]
 8005890:	8c3b      	ldrh	r3, [r7, #32]
 8005892:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005896:	2b00      	cmp	r3, #0
 8005898:	d01b      	beq.n	80058d2 <USB_DeactivateEndpoint+0x18a>
 800589a:	687a      	ldr	r2, [r7, #4]
 800589c:	683b      	ldr	r3, [r7, #0]
 800589e:	781b      	ldrb	r3, [r3, #0]
 80058a0:	009b      	lsls	r3, r3, #2
 80058a2:	4413      	add	r3, r2
 80058a4:	881b      	ldrh	r3, [r3, #0]
 80058a6:	b29b      	uxth	r3, r3
 80058a8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80058ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058b0:	83fb      	strh	r3, [r7, #30]
 80058b2:	687a      	ldr	r2, [r7, #4]
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	781b      	ldrb	r3, [r3, #0]
 80058b8:	009b      	lsls	r3, r3, #2
 80058ba:	441a      	add	r2, r3
 80058bc:	8bfb      	ldrh	r3, [r7, #30]
 80058be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80058c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80058c6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80058ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058ce:	b29b      	uxth	r3, r3
 80058d0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80058d2:	687a      	ldr	r2, [r7, #4]
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	781b      	ldrb	r3, [r3, #0]
 80058d8:	009b      	lsls	r3, r3, #2
 80058da:	4413      	add	r3, r2
 80058dc:	881b      	ldrh	r3, [r3, #0]
 80058de:	83bb      	strh	r3, [r7, #28]
 80058e0:	8bbb      	ldrh	r3, [r7, #28]
 80058e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d01b      	beq.n	8005922 <USB_DeactivateEndpoint+0x1da>
 80058ea:	687a      	ldr	r2, [r7, #4]
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	781b      	ldrb	r3, [r3, #0]
 80058f0:	009b      	lsls	r3, r3, #2
 80058f2:	4413      	add	r3, r2
 80058f4:	881b      	ldrh	r3, [r3, #0]
 80058f6:	b29b      	uxth	r3, r3
 80058f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80058fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005900:	837b      	strh	r3, [r7, #26]
 8005902:	687a      	ldr	r2, [r7, #4]
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	781b      	ldrb	r3, [r3, #0]
 8005908:	009b      	lsls	r3, r3, #2
 800590a:	441a      	add	r2, r3
 800590c:	8b7b      	ldrh	r3, [r7, #26]
 800590e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005912:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005916:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800591a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800591e:	b29b      	uxth	r3, r3
 8005920:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8005922:	687a      	ldr	r2, [r7, #4]
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	781b      	ldrb	r3, [r3, #0]
 8005928:	009b      	lsls	r3, r3, #2
 800592a:	4413      	add	r3, r2
 800592c:	881b      	ldrh	r3, [r3, #0]
 800592e:	b29b      	uxth	r3, r3
 8005930:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005934:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005938:	833b      	strh	r3, [r7, #24]
 800593a:	687a      	ldr	r2, [r7, #4]
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	781b      	ldrb	r3, [r3, #0]
 8005940:	009b      	lsls	r3, r3, #2
 8005942:	441a      	add	r2, r3
 8005944:	8b3b      	ldrh	r3, [r7, #24]
 8005946:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800594a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800594e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005952:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005956:	b29b      	uxth	r3, r3
 8005958:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800595a:	687a      	ldr	r2, [r7, #4]
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	781b      	ldrb	r3, [r3, #0]
 8005960:	009b      	lsls	r3, r3, #2
 8005962:	4413      	add	r3, r2
 8005964:	881b      	ldrh	r3, [r3, #0]
 8005966:	b29b      	uxth	r3, r3
 8005968:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800596c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005970:	82fb      	strh	r3, [r7, #22]
 8005972:	687a      	ldr	r2, [r7, #4]
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	781b      	ldrb	r3, [r3, #0]
 8005978:	009b      	lsls	r3, r3, #2
 800597a:	441a      	add	r2, r3
 800597c:	8afb      	ldrh	r3, [r7, #22]
 800597e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005982:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005986:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800598a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800598e:	b29b      	uxth	r3, r3
 8005990:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005992:	687a      	ldr	r2, [r7, #4]
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	781b      	ldrb	r3, [r3, #0]
 8005998:	009b      	lsls	r3, r3, #2
 800599a:	4413      	add	r3, r2
 800599c:	881b      	ldrh	r3, [r3, #0]
 800599e:	b29b      	uxth	r3, r3
 80059a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80059a8:	82bb      	strh	r3, [r7, #20]
 80059aa:	687a      	ldr	r2, [r7, #4]
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	781b      	ldrb	r3, [r3, #0]
 80059b0:	009b      	lsls	r3, r3, #2
 80059b2:	441a      	add	r2, r3
 80059b4:	8abb      	ldrh	r3, [r7, #20]
 80059b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80059ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80059be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80059c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059c6:	b29b      	uxth	r3, r3
 80059c8:	8013      	strh	r3, [r2, #0]
 80059ca:	e0a3      	b.n	8005b14 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80059cc:	687a      	ldr	r2, [r7, #4]
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	781b      	ldrb	r3, [r3, #0]
 80059d2:	009b      	lsls	r3, r3, #2
 80059d4:	4413      	add	r3, r2
 80059d6:	881b      	ldrh	r3, [r3, #0]
 80059d8:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80059da:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80059dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d01b      	beq.n	8005a1c <USB_DeactivateEndpoint+0x2d4>
 80059e4:	687a      	ldr	r2, [r7, #4]
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	781b      	ldrb	r3, [r3, #0]
 80059ea:	009b      	lsls	r3, r3, #2
 80059ec:	4413      	add	r3, r2
 80059ee:	881b      	ldrh	r3, [r3, #0]
 80059f0:	b29b      	uxth	r3, r3
 80059f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059fa:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80059fc:	687a      	ldr	r2, [r7, #4]
 80059fe:	683b      	ldr	r3, [r7, #0]
 8005a00:	781b      	ldrb	r3, [r3, #0]
 8005a02:	009b      	lsls	r3, r3, #2
 8005a04:	441a      	add	r2, r3
 8005a06:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005a08:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a0c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a10:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005a14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a18:	b29b      	uxth	r3, r3
 8005a1a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005a1c:	687a      	ldr	r2, [r7, #4]
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	781b      	ldrb	r3, [r3, #0]
 8005a22:	009b      	lsls	r3, r3, #2
 8005a24:	4413      	add	r3, r2
 8005a26:	881b      	ldrh	r3, [r3, #0]
 8005a28:	857b      	strh	r3, [r7, #42]	; 0x2a
 8005a2a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005a2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d01b      	beq.n	8005a6c <USB_DeactivateEndpoint+0x324>
 8005a34:	687a      	ldr	r2, [r7, #4]
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	781b      	ldrb	r3, [r3, #0]
 8005a3a:	009b      	lsls	r3, r3, #2
 8005a3c:	4413      	add	r3, r2
 8005a3e:	881b      	ldrh	r3, [r3, #0]
 8005a40:	b29b      	uxth	r3, r3
 8005a42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a4a:	853b      	strh	r3, [r7, #40]	; 0x28
 8005a4c:	687a      	ldr	r2, [r7, #4]
 8005a4e:	683b      	ldr	r3, [r7, #0]
 8005a50:	781b      	ldrb	r3, [r3, #0]
 8005a52:	009b      	lsls	r3, r3, #2
 8005a54:	441a      	add	r2, r3
 8005a56:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005a58:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a5c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a60:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a64:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005a68:	b29b      	uxth	r3, r3
 8005a6a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8005a6c:	687a      	ldr	r2, [r7, #4]
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	781b      	ldrb	r3, [r3, #0]
 8005a72:	009b      	lsls	r3, r3, #2
 8005a74:	4413      	add	r3, r2
 8005a76:	881b      	ldrh	r3, [r3, #0]
 8005a78:	b29b      	uxth	r3, r3
 8005a7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a82:	84fb      	strh	r3, [r7, #38]	; 0x26
 8005a84:	687a      	ldr	r2, [r7, #4]
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	781b      	ldrb	r3, [r3, #0]
 8005a8a:	009b      	lsls	r3, r3, #2
 8005a8c:	441a      	add	r2, r3
 8005a8e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005a90:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a94:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a98:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005a9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005aa0:	b29b      	uxth	r3, r3
 8005aa2:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005aa4:	687a      	ldr	r2, [r7, #4]
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	781b      	ldrb	r3, [r3, #0]
 8005aaa:	009b      	lsls	r3, r3, #2
 8005aac:	4413      	add	r3, r2
 8005aae:	881b      	ldrh	r3, [r3, #0]
 8005ab0:	b29b      	uxth	r3, r3
 8005ab2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ab6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005aba:	84bb      	strh	r3, [r7, #36]	; 0x24
 8005abc:	687a      	ldr	r2, [r7, #4]
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	781b      	ldrb	r3, [r3, #0]
 8005ac2:	009b      	lsls	r3, r3, #2
 8005ac4:	441a      	add	r2, r3
 8005ac6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005ac8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005acc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ad0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ad4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ad8:	b29b      	uxth	r3, r3
 8005ada:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005adc:	687a      	ldr	r2, [r7, #4]
 8005ade:	683b      	ldr	r3, [r7, #0]
 8005ae0:	781b      	ldrb	r3, [r3, #0]
 8005ae2:	009b      	lsls	r3, r3, #2
 8005ae4:	4413      	add	r3, r2
 8005ae6:	881b      	ldrh	r3, [r3, #0]
 8005ae8:	b29b      	uxth	r3, r3
 8005aea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005aee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005af2:	847b      	strh	r3, [r7, #34]	; 0x22
 8005af4:	687a      	ldr	r2, [r7, #4]
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	781b      	ldrb	r3, [r3, #0]
 8005afa:	009b      	lsls	r3, r3, #2
 8005afc:	441a      	add	r2, r3
 8005afe:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005b00:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b04:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b08:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b10:	b29b      	uxth	r3, r3
 8005b12:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8005b14:	2300      	movs	r3, #0
}
 8005b16:	4618      	mov	r0, r3
 8005b18:	3734      	adds	r7, #52	; 0x34
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b20:	4770      	bx	lr

08005b22 <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005b22:	b580      	push	{r7, lr}
 8005b24:	b0c4      	sub	sp, #272	; 0x110
 8005b26:	af00      	add	r7, sp, #0
 8005b28:	1d3b      	adds	r3, r7, #4
 8005b2a:	6018      	str	r0, [r3, #0]
 8005b2c:	463b      	mov	r3, r7
 8005b2e:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint32_t len;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005b30:	463b      	mov	r3, r7
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	785b      	ldrb	r3, [r3, #1]
 8005b36:	2b01      	cmp	r3, #1
 8005b38:	f040 8566 	bne.w	8006608 <USB_EPStartXfer+0xae6>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8005b3c:	463b      	mov	r3, r7
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	699a      	ldr	r2, [r3, #24]
 8005b42:	463b      	mov	r3, r7
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	691b      	ldr	r3, [r3, #16]
 8005b48:	429a      	cmp	r2, r3
 8005b4a:	d905      	bls.n	8005b58 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8005b4c:	463b      	mov	r3, r7
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	691b      	ldr	r3, [r3, #16]
 8005b52:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005b56:	e004      	b.n	8005b62 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8005b58:	463b      	mov	r3, r7
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	699b      	ldr	r3, [r3, #24]
 8005b5e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8005b62:	463b      	mov	r3, r7
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	7b1b      	ldrb	r3, [r3, #12]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d12c      	bne.n	8005bc6 <USB_EPStartXfer+0xa4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8005b6c:	463b      	mov	r3, r7
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	6959      	ldr	r1, [r3, #20]
 8005b72:	463b      	mov	r3, r7
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	88da      	ldrh	r2, [r3, #6]
 8005b78:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005b7c:	b29b      	uxth	r3, r3
 8005b7e:	1d38      	adds	r0, r7, #4
 8005b80:	6800      	ldr	r0, [r0, #0]
 8005b82:	f001 fa43 	bl	800700c <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005b86:	1d3b      	adds	r3, r7, #4
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	617b      	str	r3, [r7, #20]
 8005b8c:	1d3b      	adds	r3, r7, #4
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b94:	b29b      	uxth	r3, r3
 8005b96:	461a      	mov	r2, r3
 8005b98:	697b      	ldr	r3, [r7, #20]
 8005b9a:	4413      	add	r3, r2
 8005b9c:	617b      	str	r3, [r7, #20]
 8005b9e:	463b      	mov	r3, r7
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	781b      	ldrb	r3, [r3, #0]
 8005ba4:	00da      	lsls	r2, r3, #3
 8005ba6:	697b      	ldr	r3, [r7, #20]
 8005ba8:	4413      	add	r3, r2
 8005baa:	f203 4202 	addw	r2, r3, #1026	; 0x402
 8005bae:	f107 0310 	add.w	r3, r7, #16
 8005bb2:	601a      	str	r2, [r3, #0]
 8005bb4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005bb8:	b29a      	uxth	r2, r3
 8005bba:	f107 0310 	add.w	r3, r7, #16
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	801a      	strh	r2, [r3, #0]
 8005bc2:	f000 bcec 	b.w	800659e <USB_EPStartXfer+0xa7c>
    }
    else
    {
      /*double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8005bc6:	463b      	mov	r3, r7
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	78db      	ldrb	r3, [r3, #3]
 8005bcc:	2b02      	cmp	r3, #2
 8005bce:	f040 8356 	bne.w	800627e <USB_EPStartXfer+0x75c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8005bd2:	463b      	mov	r3, r7
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	6a1a      	ldr	r2, [r3, #32]
 8005bd8:	463b      	mov	r3, r7
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	691b      	ldr	r3, [r3, #16]
 8005bde:	429a      	cmp	r2, r3
 8005be0:	f240 82fa 	bls.w	80061d8 <USB_EPStartXfer+0x6b6>
        {
          /*enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8005be4:	1d3b      	adds	r3, r7, #4
 8005be6:	681a      	ldr	r2, [r3, #0]
 8005be8:	463b      	mov	r3, r7
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	781b      	ldrb	r3, [r3, #0]
 8005bee:	009b      	lsls	r3, r3, #2
 8005bf0:	4413      	add	r3, r2
 8005bf2:	881b      	ldrh	r3, [r3, #0]
 8005bf4:	b29b      	uxth	r3, r3
 8005bf6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005bfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bfe:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 8005c02:	1d3b      	adds	r3, r7, #4
 8005c04:	681a      	ldr	r2, [r3, #0]
 8005c06:	463b      	mov	r3, r7
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	781b      	ldrb	r3, [r3, #0]
 8005c0c:	009b      	lsls	r3, r3, #2
 8005c0e:	441a      	add	r2, r3
 8005c10:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8005c14:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c18:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c1c:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005c20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c24:	b29b      	uxth	r3, r3
 8005c26:	8013      	strh	r3, [r2, #0]
          len = ep->maxpacket;
 8005c28:	463b      	mov	r3, r7
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	691b      	ldr	r3, [r3, #16]
 8005c2e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          /*each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8005c32:	463b      	mov	r3, r7
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	6a1a      	ldr	r2, [r3, #32]
 8005c38:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005c3c:	1ad2      	subs	r2, r2, r3
 8005c3e:	463b      	mov	r3, r7
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1*/
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005c44:	1d3b      	adds	r3, r7, #4
 8005c46:	681a      	ldr	r2, [r3, #0]
 8005c48:	463b      	mov	r3, r7
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	781b      	ldrb	r3, [r3, #0]
 8005c4e:	009b      	lsls	r3, r3, #2
 8005c50:	4413      	add	r3, r2
 8005c52:	881b      	ldrh	r3, [r3, #0]
 8005c54:	b29b      	uxth	r3, r3
 8005c56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	f000 815e 	beq.w	8005f1c <USB_EPStartXfer+0x3fa>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005c60:	1d3b      	adds	r3, r7, #4
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	637b      	str	r3, [r7, #52]	; 0x34
 8005c66:	463b      	mov	r3, r7
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	785b      	ldrb	r3, [r3, #1]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d164      	bne.n	8005d3a <USB_EPStartXfer+0x218>
 8005c70:	1d3b      	adds	r3, r7, #4
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005c76:	1d3b      	adds	r3, r7, #4
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c7e:	b29b      	uxth	r3, r3
 8005c80:	461a      	mov	r2, r3
 8005c82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c84:	4413      	add	r3, r2
 8005c86:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005c88:	463b      	mov	r3, r7
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	781b      	ldrb	r3, [r3, #0]
 8005c8e:	00da      	lsls	r2, r3, #3
 8005c90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c92:	4413      	add	r3, r2
 8005c94:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005c98:	62bb      	str	r3, [r7, #40]	; 0x28
 8005c9a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d112      	bne.n	8005cc8 <USB_EPStartXfer+0x1a6>
 8005ca2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ca4:	881b      	ldrh	r3, [r3, #0]
 8005ca6:	b29b      	uxth	r3, r3
 8005ca8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005cac:	b29a      	uxth	r2, r3
 8005cae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cb0:	801a      	strh	r2, [r3, #0]
 8005cb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cb4:	881b      	ldrh	r3, [r3, #0]
 8005cb6:	b29b      	uxth	r3, r3
 8005cb8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005cbc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005cc0:	b29a      	uxth	r2, r3
 8005cc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cc4:	801a      	strh	r2, [r3, #0]
 8005cc6:	e054      	b.n	8005d72 <USB_EPStartXfer+0x250>
 8005cc8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005ccc:	2b3e      	cmp	r3, #62	; 0x3e
 8005cce:	d817      	bhi.n	8005d00 <USB_EPStartXfer+0x1de>
 8005cd0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005cd4:	085b      	lsrs	r3, r3, #1
 8005cd6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005cda:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005cde:	f003 0301 	and.w	r3, r3, #1
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d004      	beq.n	8005cf0 <USB_EPStartXfer+0x1ce>
 8005ce6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005cea:	3301      	adds	r3, #1
 8005cec:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005cf0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005cf4:	b29b      	uxth	r3, r3
 8005cf6:	029b      	lsls	r3, r3, #10
 8005cf8:	b29a      	uxth	r2, r3
 8005cfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cfc:	801a      	strh	r2, [r3, #0]
 8005cfe:	e038      	b.n	8005d72 <USB_EPStartXfer+0x250>
 8005d00:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005d04:	095b      	lsrs	r3, r3, #5
 8005d06:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005d0a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005d0e:	f003 031f 	and.w	r3, r3, #31
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d104      	bne.n	8005d20 <USB_EPStartXfer+0x1fe>
 8005d16:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d1a:	3b01      	subs	r3, #1
 8005d1c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005d20:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d24:	b29b      	uxth	r3, r3
 8005d26:	029b      	lsls	r3, r3, #10
 8005d28:	b29b      	uxth	r3, r3
 8005d2a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d2e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d32:	b29a      	uxth	r2, r3
 8005d34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d36:	801a      	strh	r2, [r3, #0]
 8005d38:	e01b      	b.n	8005d72 <USB_EPStartXfer+0x250>
 8005d3a:	463b      	mov	r3, r7
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	785b      	ldrb	r3, [r3, #1]
 8005d40:	2b01      	cmp	r3, #1
 8005d42:	d116      	bne.n	8005d72 <USB_EPStartXfer+0x250>
 8005d44:	1d3b      	adds	r3, r7, #4
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d4c:	b29b      	uxth	r3, r3
 8005d4e:	461a      	mov	r2, r3
 8005d50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d52:	4413      	add	r3, r2
 8005d54:	637b      	str	r3, [r7, #52]	; 0x34
 8005d56:	463b      	mov	r3, r7
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	781b      	ldrb	r3, [r3, #0]
 8005d5c:	00da      	lsls	r2, r3, #3
 8005d5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d60:	4413      	add	r3, r2
 8005d62:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005d66:	633b      	str	r3, [r7, #48]	; 0x30
 8005d68:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005d6c:	b29a      	uxth	r2, r3
 8005d6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d70:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005d72:	463b      	mov	r3, r7
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	895b      	ldrh	r3, [r3, #10]
 8005d78:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005d7c:	463b      	mov	r3, r7
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	6959      	ldr	r1, [r3, #20]
 8005d82:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005d86:	b29b      	uxth	r3, r3
 8005d88:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8005d8c:	1d38      	adds	r0, r7, #4
 8005d8e:	6800      	ldr	r0, [r0, #0]
 8005d90:	f001 f93c 	bl	800700c <USB_WritePMA>
            ep->xfer_buff += len;
 8005d94:	463b      	mov	r3, r7
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	695a      	ldr	r2, [r3, #20]
 8005d9a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005d9e:	441a      	add	r2, r3
 8005da0:	463b      	mov	r3, r7
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005da6:	463b      	mov	r3, r7
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	6a1a      	ldr	r2, [r3, #32]
 8005dac:	463b      	mov	r3, r7
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	691b      	ldr	r3, [r3, #16]
 8005db2:	429a      	cmp	r2, r3
 8005db4:	d90e      	bls.n	8005dd4 <USB_EPStartXfer+0x2b2>
            {
              len = ep->maxpacket;
 8005db6:	463b      	mov	r3, r7
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	691b      	ldr	r3, [r3, #16]
 8005dbc:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db -= len;
 8005dc0:	463b      	mov	r3, r7
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	6a1a      	ldr	r2, [r3, #32]
 8005dc6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005dca:	1ad2      	subs	r2, r2, r3
 8005dcc:	463b      	mov	r3, r7
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	621a      	str	r2, [r3, #32]
 8005dd2:	e008      	b.n	8005de6 <USB_EPStartXfer+0x2c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8005dd4:	463b      	mov	r3, r7
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	6a1b      	ldr	r3, [r3, #32]
 8005dda:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db = 0;
 8005dde:	463b      	mov	r3, r7
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	2200      	movs	r2, #0
 8005de4:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005de6:	463b      	mov	r3, r7
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	785b      	ldrb	r3, [r3, #1]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d164      	bne.n	8005eba <USB_EPStartXfer+0x398>
 8005df0:	1d3b      	adds	r3, r7, #4
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	61fb      	str	r3, [r7, #28]
 8005df6:	1d3b      	adds	r3, r7, #4
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005dfe:	b29b      	uxth	r3, r3
 8005e00:	461a      	mov	r2, r3
 8005e02:	69fb      	ldr	r3, [r7, #28]
 8005e04:	4413      	add	r3, r2
 8005e06:	61fb      	str	r3, [r7, #28]
 8005e08:	463b      	mov	r3, r7
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	781b      	ldrb	r3, [r3, #0]
 8005e0e:	00da      	lsls	r2, r3, #3
 8005e10:	69fb      	ldr	r3, [r7, #28]
 8005e12:	4413      	add	r3, r2
 8005e14:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005e18:	61bb      	str	r3, [r7, #24]
 8005e1a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d112      	bne.n	8005e48 <USB_EPStartXfer+0x326>
 8005e22:	69bb      	ldr	r3, [r7, #24]
 8005e24:	881b      	ldrh	r3, [r3, #0]
 8005e26:	b29b      	uxth	r3, r3
 8005e28:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005e2c:	b29a      	uxth	r2, r3
 8005e2e:	69bb      	ldr	r3, [r7, #24]
 8005e30:	801a      	strh	r2, [r3, #0]
 8005e32:	69bb      	ldr	r3, [r7, #24]
 8005e34:	881b      	ldrh	r3, [r3, #0]
 8005e36:	b29b      	uxth	r3, r3
 8005e38:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e3c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e40:	b29a      	uxth	r2, r3
 8005e42:	69bb      	ldr	r3, [r7, #24]
 8005e44:	801a      	strh	r2, [r3, #0]
 8005e46:	e057      	b.n	8005ef8 <USB_EPStartXfer+0x3d6>
 8005e48:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005e4c:	2b3e      	cmp	r3, #62	; 0x3e
 8005e4e:	d817      	bhi.n	8005e80 <USB_EPStartXfer+0x35e>
 8005e50:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005e54:	085b      	lsrs	r3, r3, #1
 8005e56:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005e5a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005e5e:	f003 0301 	and.w	r3, r3, #1
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d004      	beq.n	8005e70 <USB_EPStartXfer+0x34e>
 8005e66:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005e6a:	3301      	adds	r3, #1
 8005e6c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005e70:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005e74:	b29b      	uxth	r3, r3
 8005e76:	029b      	lsls	r3, r3, #10
 8005e78:	b29a      	uxth	r2, r3
 8005e7a:	69bb      	ldr	r3, [r7, #24]
 8005e7c:	801a      	strh	r2, [r3, #0]
 8005e7e:	e03b      	b.n	8005ef8 <USB_EPStartXfer+0x3d6>
 8005e80:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005e84:	095b      	lsrs	r3, r3, #5
 8005e86:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005e8a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005e8e:	f003 031f 	and.w	r3, r3, #31
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d104      	bne.n	8005ea0 <USB_EPStartXfer+0x37e>
 8005e96:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005e9a:	3b01      	subs	r3, #1
 8005e9c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005ea0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005ea4:	b29b      	uxth	r3, r3
 8005ea6:	029b      	lsls	r3, r3, #10
 8005ea8:	b29b      	uxth	r3, r3
 8005eaa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005eae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005eb2:	b29a      	uxth	r2, r3
 8005eb4:	69bb      	ldr	r3, [r7, #24]
 8005eb6:	801a      	strh	r2, [r3, #0]
 8005eb8:	e01e      	b.n	8005ef8 <USB_EPStartXfer+0x3d6>
 8005eba:	463b      	mov	r3, r7
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	785b      	ldrb	r3, [r3, #1]
 8005ec0:	2b01      	cmp	r3, #1
 8005ec2:	d119      	bne.n	8005ef8 <USB_EPStartXfer+0x3d6>
 8005ec4:	1d3b      	adds	r3, r7, #4
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	627b      	str	r3, [r7, #36]	; 0x24
 8005eca:	1d3b      	adds	r3, r7, #4
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ed2:	b29b      	uxth	r3, r3
 8005ed4:	461a      	mov	r2, r3
 8005ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ed8:	4413      	add	r3, r2
 8005eda:	627b      	str	r3, [r7, #36]	; 0x24
 8005edc:	463b      	mov	r3, r7
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	781b      	ldrb	r3, [r3, #0]
 8005ee2:	00da      	lsls	r2, r3, #3
 8005ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ee6:	4413      	add	r3, r2
 8005ee8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005eec:	623b      	str	r3, [r7, #32]
 8005eee:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005ef2:	b29a      	uxth	r2, r3
 8005ef4:	6a3b      	ldr	r3, [r7, #32]
 8005ef6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005ef8:	463b      	mov	r3, r7
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	891b      	ldrh	r3, [r3, #8]
 8005efe:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005f02:	463b      	mov	r3, r7
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	6959      	ldr	r1, [r3, #20]
 8005f08:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005f0c:	b29b      	uxth	r3, r3
 8005f0e:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8005f12:	1d38      	adds	r0, r7, #4
 8005f14:	6800      	ldr	r0, [r0, #0]
 8005f16:	f001 f879 	bl	800700c <USB_WritePMA>
 8005f1a:	e340      	b.n	800659e <USB_EPStartXfer+0xa7c>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005f1c:	463b      	mov	r3, r7
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	785b      	ldrb	r3, [r3, #1]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d164      	bne.n	8005ff0 <USB_EPStartXfer+0x4ce>
 8005f26:	1d3b      	adds	r3, r7, #4
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005f2c:	1d3b      	adds	r3, r7, #4
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f34:	b29b      	uxth	r3, r3
 8005f36:	461a      	mov	r2, r3
 8005f38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f3a:	4413      	add	r3, r2
 8005f3c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005f3e:	463b      	mov	r3, r7
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	781b      	ldrb	r3, [r3, #0]
 8005f44:	00da      	lsls	r2, r3, #3
 8005f46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f48:	4413      	add	r3, r2
 8005f4a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005f4e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005f50:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d112      	bne.n	8005f7e <USB_EPStartXfer+0x45c>
 8005f58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f5a:	881b      	ldrh	r3, [r3, #0]
 8005f5c:	b29b      	uxth	r3, r3
 8005f5e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005f62:	b29a      	uxth	r2, r3
 8005f64:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f66:	801a      	strh	r2, [r3, #0]
 8005f68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f6a:	881b      	ldrh	r3, [r3, #0]
 8005f6c:	b29b      	uxth	r3, r3
 8005f6e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f72:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f76:	b29a      	uxth	r2, r3
 8005f78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f7a:	801a      	strh	r2, [r3, #0]
 8005f7c:	e057      	b.n	800602e <USB_EPStartXfer+0x50c>
 8005f7e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005f82:	2b3e      	cmp	r3, #62	; 0x3e
 8005f84:	d817      	bhi.n	8005fb6 <USB_EPStartXfer+0x494>
 8005f86:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005f8a:	085b      	lsrs	r3, r3, #1
 8005f8c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005f90:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005f94:	f003 0301 	and.w	r3, r3, #1
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d004      	beq.n	8005fa6 <USB_EPStartXfer+0x484>
 8005f9c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005fa0:	3301      	adds	r3, #1
 8005fa2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005fa6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005faa:	b29b      	uxth	r3, r3
 8005fac:	029b      	lsls	r3, r3, #10
 8005fae:	b29a      	uxth	r2, r3
 8005fb0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005fb2:	801a      	strh	r2, [r3, #0]
 8005fb4:	e03b      	b.n	800602e <USB_EPStartXfer+0x50c>
 8005fb6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005fba:	095b      	lsrs	r3, r3, #5
 8005fbc:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005fc0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005fc4:	f003 031f 	and.w	r3, r3, #31
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d104      	bne.n	8005fd6 <USB_EPStartXfer+0x4b4>
 8005fcc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005fd0:	3b01      	subs	r3, #1
 8005fd2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005fd6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005fda:	b29b      	uxth	r3, r3
 8005fdc:	029b      	lsls	r3, r3, #10
 8005fde:	b29b      	uxth	r3, r3
 8005fe0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005fe4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005fe8:	b29a      	uxth	r2, r3
 8005fea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005fec:	801a      	strh	r2, [r3, #0]
 8005fee:	e01e      	b.n	800602e <USB_EPStartXfer+0x50c>
 8005ff0:	463b      	mov	r3, r7
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	785b      	ldrb	r3, [r3, #1]
 8005ff6:	2b01      	cmp	r3, #1
 8005ff8:	d119      	bne.n	800602e <USB_EPStartXfer+0x50c>
 8005ffa:	1d3b      	adds	r3, r7, #4
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	657b      	str	r3, [r7, #84]	; 0x54
 8006000:	1d3b      	adds	r3, r7, #4
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006008:	b29b      	uxth	r3, r3
 800600a:	461a      	mov	r2, r3
 800600c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800600e:	4413      	add	r3, r2
 8006010:	657b      	str	r3, [r7, #84]	; 0x54
 8006012:	463b      	mov	r3, r7
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	781b      	ldrb	r3, [r3, #0]
 8006018:	00da      	lsls	r2, r3, #3
 800601a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800601c:	4413      	add	r3, r2
 800601e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006022:	653b      	str	r3, [r7, #80]	; 0x50
 8006024:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006028:	b29a      	uxth	r2, r3
 800602a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800602c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800602e:	463b      	mov	r3, r7
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	891b      	ldrh	r3, [r3, #8]
 8006034:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006038:	463b      	mov	r3, r7
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	6959      	ldr	r1, [r3, #20]
 800603e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006042:	b29b      	uxth	r3, r3
 8006044:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8006048:	1d38      	adds	r0, r7, #4
 800604a:	6800      	ldr	r0, [r0, #0]
 800604c:	f000 ffde 	bl	800700c <USB_WritePMA>
            ep->xfer_buff += len;
 8006050:	463b      	mov	r3, r7
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	695a      	ldr	r2, [r3, #20]
 8006056:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800605a:	441a      	add	r2, r3
 800605c:	463b      	mov	r3, r7
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006062:	463b      	mov	r3, r7
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	6a1a      	ldr	r2, [r3, #32]
 8006068:	463b      	mov	r3, r7
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	691b      	ldr	r3, [r3, #16]
 800606e:	429a      	cmp	r2, r3
 8006070:	d90e      	bls.n	8006090 <USB_EPStartXfer+0x56e>
            {
              len = ep->maxpacket;
 8006072:	463b      	mov	r3, r7
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	691b      	ldr	r3, [r3, #16]
 8006078:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db -= len;
 800607c:	463b      	mov	r3, r7
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	6a1a      	ldr	r2, [r3, #32]
 8006082:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006086:	1ad2      	subs	r2, r2, r3
 8006088:	463b      	mov	r3, r7
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	621a      	str	r2, [r3, #32]
 800608e:	e008      	b.n	80060a2 <USB_EPStartXfer+0x580>
            }
            else
            {
              len = ep->xfer_len_db;
 8006090:	463b      	mov	r3, r7
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	6a1b      	ldr	r3, [r3, #32]
 8006096:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db = 0;
 800609a:	463b      	mov	r3, r7
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	2200      	movs	r2, #0
 80060a0:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80060a2:	1d3b      	adds	r3, r7, #4
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	647b      	str	r3, [r7, #68]	; 0x44
 80060a8:	463b      	mov	r3, r7
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	785b      	ldrb	r3, [r3, #1]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d164      	bne.n	800617c <USB_EPStartXfer+0x65a>
 80060b2:	1d3b      	adds	r3, r7, #4
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80060b8:	1d3b      	adds	r3, r7, #4
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80060c0:	b29b      	uxth	r3, r3
 80060c2:	461a      	mov	r2, r3
 80060c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060c6:	4413      	add	r3, r2
 80060c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80060ca:	463b      	mov	r3, r7
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	781b      	ldrb	r3, [r3, #0]
 80060d0:	00da      	lsls	r2, r3, #3
 80060d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060d4:	4413      	add	r3, r2
 80060d6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80060da:	63bb      	str	r3, [r7, #56]	; 0x38
 80060dc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d112      	bne.n	800610a <USB_EPStartXfer+0x5e8>
 80060e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060e6:	881b      	ldrh	r3, [r3, #0]
 80060e8:	b29b      	uxth	r3, r3
 80060ea:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80060ee:	b29a      	uxth	r2, r3
 80060f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060f2:	801a      	strh	r2, [r3, #0]
 80060f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060f6:	881b      	ldrh	r3, [r3, #0]
 80060f8:	b29b      	uxth	r3, r3
 80060fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80060fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006102:	b29a      	uxth	r2, r3
 8006104:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006106:	801a      	strh	r2, [r3, #0]
 8006108:	e054      	b.n	80061b4 <USB_EPStartXfer+0x692>
 800610a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800610e:	2b3e      	cmp	r3, #62	; 0x3e
 8006110:	d817      	bhi.n	8006142 <USB_EPStartXfer+0x620>
 8006112:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006116:	085b      	lsrs	r3, r3, #1
 8006118:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800611c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006120:	f003 0301 	and.w	r3, r3, #1
 8006124:	2b00      	cmp	r3, #0
 8006126:	d004      	beq.n	8006132 <USB_EPStartXfer+0x610>
 8006128:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800612c:	3301      	adds	r3, #1
 800612e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006132:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006136:	b29b      	uxth	r3, r3
 8006138:	029b      	lsls	r3, r3, #10
 800613a:	b29a      	uxth	r2, r3
 800613c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800613e:	801a      	strh	r2, [r3, #0]
 8006140:	e038      	b.n	80061b4 <USB_EPStartXfer+0x692>
 8006142:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006146:	095b      	lsrs	r3, r3, #5
 8006148:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800614c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006150:	f003 031f 	and.w	r3, r3, #31
 8006154:	2b00      	cmp	r3, #0
 8006156:	d104      	bne.n	8006162 <USB_EPStartXfer+0x640>
 8006158:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800615c:	3b01      	subs	r3, #1
 800615e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006162:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006166:	b29b      	uxth	r3, r3
 8006168:	029b      	lsls	r3, r3, #10
 800616a:	b29b      	uxth	r3, r3
 800616c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006170:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006174:	b29a      	uxth	r2, r3
 8006176:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006178:	801a      	strh	r2, [r3, #0]
 800617a:	e01b      	b.n	80061b4 <USB_EPStartXfer+0x692>
 800617c:	463b      	mov	r3, r7
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	785b      	ldrb	r3, [r3, #1]
 8006182:	2b01      	cmp	r3, #1
 8006184:	d116      	bne.n	80061b4 <USB_EPStartXfer+0x692>
 8006186:	1d3b      	adds	r3, r7, #4
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800618e:	b29b      	uxth	r3, r3
 8006190:	461a      	mov	r2, r3
 8006192:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006194:	4413      	add	r3, r2
 8006196:	647b      	str	r3, [r7, #68]	; 0x44
 8006198:	463b      	mov	r3, r7
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	781b      	ldrb	r3, [r3, #0]
 800619e:	00da      	lsls	r2, r3, #3
 80061a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80061a2:	4413      	add	r3, r2
 80061a4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80061a8:	643b      	str	r3, [r7, #64]	; 0x40
 80061aa:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80061ae:	b29a      	uxth	r2, r3
 80061b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80061b2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80061b4:	463b      	mov	r3, r7
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	895b      	ldrh	r3, [r3, #10]
 80061ba:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80061be:	463b      	mov	r3, r7
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	6959      	ldr	r1, [r3, #20]
 80061c4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80061c8:	b29b      	uxth	r3, r3
 80061ca:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 80061ce:	1d38      	adds	r0, r7, #4
 80061d0:	6800      	ldr	r0, [r0, #0]
 80061d2:	f000 ff1b 	bl	800700c <USB_WritePMA>
 80061d6:	e1e2      	b.n	800659e <USB_EPStartXfer+0xa7c>
          }
        }
        /*auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer*/
        else
        {
          len = ep->xfer_len_db;
 80061d8:	463b      	mov	r3, r7
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	6a1b      	ldr	r3, [r3, #32]
 80061de:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          /*disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 80061e2:	1d3b      	adds	r3, r7, #4
 80061e4:	681a      	ldr	r2, [r3, #0]
 80061e6:	463b      	mov	r3, r7
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	781b      	ldrb	r3, [r3, #0]
 80061ec:	009b      	lsls	r3, r3, #2
 80061ee:	4413      	add	r3, r2
 80061f0:	881b      	ldrh	r3, [r3, #0]
 80061f2:	b29b      	uxth	r3, r3
 80061f4:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80061f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061fc:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8006200:	1d3b      	adds	r3, r7, #4
 8006202:	681a      	ldr	r2, [r3, #0]
 8006204:	463b      	mov	r3, r7
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	781b      	ldrb	r3, [r3, #0]
 800620a:	009b      	lsls	r3, r3, #2
 800620c:	441a      	add	r2, r3
 800620e:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8006212:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006216:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800621a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800621e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006222:	b29b      	uxth	r3, r3
 8006224:	8013      	strh	r3, [r2, #0]
          /*Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006226:	1d3b      	adds	r3, r7, #4
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	663b      	str	r3, [r7, #96]	; 0x60
 800622c:	1d3b      	adds	r3, r7, #4
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006234:	b29b      	uxth	r3, r3
 8006236:	461a      	mov	r2, r3
 8006238:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800623a:	4413      	add	r3, r2
 800623c:	663b      	str	r3, [r7, #96]	; 0x60
 800623e:	463b      	mov	r3, r7
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	781b      	ldrb	r3, [r3, #0]
 8006244:	00da      	lsls	r2, r3, #3
 8006246:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006248:	4413      	add	r3, r2
 800624a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800624e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006250:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006254:	b29a      	uxth	r2, r3
 8006256:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006258:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800625a:	463b      	mov	r3, r7
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	891b      	ldrh	r3, [r3, #8]
 8006260:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
          /*Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006264:	463b      	mov	r3, r7
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	6959      	ldr	r1, [r3, #20]
 800626a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800626e:	b29b      	uxth	r3, r3
 8006270:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8006274:	1d38      	adds	r0, r7, #4
 8006276:	6800      	ldr	r0, [r0, #0]
 8006278:	f000 fec8 	bl	800700c <USB_WritePMA>
 800627c:	e18f      	b.n	800659e <USB_EPStartXfer+0xa7c>

      /*mange isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800627e:	1d3b      	adds	r3, r7, #4
 8006280:	681a      	ldr	r2, [r3, #0]
 8006282:	463b      	mov	r3, r7
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	781b      	ldrb	r3, [r3, #0]
 8006288:	009b      	lsls	r3, r3, #2
 800628a:	4413      	add	r3, r2
 800628c:	881b      	ldrh	r3, [r3, #0]
 800628e:	b29b      	uxth	r3, r3
 8006290:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006294:	2b00      	cmp	r3, #0
 8006296:	f000 808f 	beq.w	80063b8 <USB_EPStartXfer+0x896>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800629a:	1d3b      	adds	r3, r7, #4
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	67bb      	str	r3, [r7, #120]	; 0x78
 80062a0:	463b      	mov	r3, r7
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	785b      	ldrb	r3, [r3, #1]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d164      	bne.n	8006374 <USB_EPStartXfer+0x852>
 80062aa:	1d3b      	adds	r3, r7, #4
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	673b      	str	r3, [r7, #112]	; 0x70
 80062b0:	1d3b      	adds	r3, r7, #4
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80062b8:	b29b      	uxth	r3, r3
 80062ba:	461a      	mov	r2, r3
 80062bc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80062be:	4413      	add	r3, r2
 80062c0:	673b      	str	r3, [r7, #112]	; 0x70
 80062c2:	463b      	mov	r3, r7
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	781b      	ldrb	r3, [r3, #0]
 80062c8:	00da      	lsls	r2, r3, #3
 80062ca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80062cc:	4413      	add	r3, r2
 80062ce:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80062d2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80062d4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d112      	bne.n	8006302 <USB_EPStartXfer+0x7e0>
 80062dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80062de:	881b      	ldrh	r3, [r3, #0]
 80062e0:	b29b      	uxth	r3, r3
 80062e2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80062e6:	b29a      	uxth	r2, r3
 80062e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80062ea:	801a      	strh	r2, [r3, #0]
 80062ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80062ee:	881b      	ldrh	r3, [r3, #0]
 80062f0:	b29b      	uxth	r3, r3
 80062f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80062f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80062fa:	b29a      	uxth	r2, r3
 80062fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80062fe:	801a      	strh	r2, [r3, #0]
 8006300:	e054      	b.n	80063ac <USB_EPStartXfer+0x88a>
 8006302:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006306:	2b3e      	cmp	r3, #62	; 0x3e
 8006308:	d817      	bhi.n	800633a <USB_EPStartXfer+0x818>
 800630a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800630e:	085b      	lsrs	r3, r3, #1
 8006310:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006314:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006318:	f003 0301 	and.w	r3, r3, #1
 800631c:	2b00      	cmp	r3, #0
 800631e:	d004      	beq.n	800632a <USB_EPStartXfer+0x808>
 8006320:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006324:	3301      	adds	r3, #1
 8006326:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800632a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800632e:	b29b      	uxth	r3, r3
 8006330:	029b      	lsls	r3, r3, #10
 8006332:	b29a      	uxth	r2, r3
 8006334:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006336:	801a      	strh	r2, [r3, #0]
 8006338:	e038      	b.n	80063ac <USB_EPStartXfer+0x88a>
 800633a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800633e:	095b      	lsrs	r3, r3, #5
 8006340:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006344:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006348:	f003 031f 	and.w	r3, r3, #31
 800634c:	2b00      	cmp	r3, #0
 800634e:	d104      	bne.n	800635a <USB_EPStartXfer+0x838>
 8006350:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006354:	3b01      	subs	r3, #1
 8006356:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800635a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800635e:	b29b      	uxth	r3, r3
 8006360:	029b      	lsls	r3, r3, #10
 8006362:	b29b      	uxth	r3, r3
 8006364:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006368:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800636c:	b29a      	uxth	r2, r3
 800636e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006370:	801a      	strh	r2, [r3, #0]
 8006372:	e01b      	b.n	80063ac <USB_EPStartXfer+0x88a>
 8006374:	463b      	mov	r3, r7
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	785b      	ldrb	r3, [r3, #1]
 800637a:	2b01      	cmp	r3, #1
 800637c:	d116      	bne.n	80063ac <USB_EPStartXfer+0x88a>
 800637e:	1d3b      	adds	r3, r7, #4
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006386:	b29b      	uxth	r3, r3
 8006388:	461a      	mov	r2, r3
 800638a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800638c:	4413      	add	r3, r2
 800638e:	67bb      	str	r3, [r7, #120]	; 0x78
 8006390:	463b      	mov	r3, r7
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	781b      	ldrb	r3, [r3, #0]
 8006396:	00da      	lsls	r2, r3, #3
 8006398:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800639a:	4413      	add	r3, r2
 800639c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80063a0:	677b      	str	r3, [r7, #116]	; 0x74
 80063a2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80063a6:	b29a      	uxth	r2, r3
 80063a8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80063aa:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80063ac:	463b      	mov	r3, r7
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	895b      	ldrh	r3, [r3, #10]
 80063b2:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
 80063b6:	e097      	b.n	80064e8 <USB_EPStartXfer+0x9c6>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80063b8:	463b      	mov	r3, r7
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	785b      	ldrb	r3, [r3, #1]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d168      	bne.n	8006494 <USB_EPStartXfer+0x972>
 80063c2:	1d3b      	adds	r3, r7, #4
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80063ca:	1d3b      	adds	r3, r7, #4
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80063d2:	b29b      	uxth	r3, r3
 80063d4:	461a      	mov	r2, r3
 80063d6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80063da:	4413      	add	r3, r2
 80063dc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80063e0:	463b      	mov	r3, r7
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	781b      	ldrb	r3, [r3, #0]
 80063e6:	00da      	lsls	r2, r3, #3
 80063e8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80063ec:	4413      	add	r3, r2
 80063ee:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80063f2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80063f4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d112      	bne.n	8006422 <USB_EPStartXfer+0x900>
 80063fc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80063fe:	881b      	ldrh	r3, [r3, #0]
 8006400:	b29b      	uxth	r3, r3
 8006402:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006406:	b29a      	uxth	r2, r3
 8006408:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800640a:	801a      	strh	r2, [r3, #0]
 800640c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800640e:	881b      	ldrh	r3, [r3, #0]
 8006410:	b29b      	uxth	r3, r3
 8006412:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006416:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800641a:	b29a      	uxth	r2, r3
 800641c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800641e:	801a      	strh	r2, [r3, #0]
 8006420:	e05d      	b.n	80064de <USB_EPStartXfer+0x9bc>
 8006422:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006426:	2b3e      	cmp	r3, #62	; 0x3e
 8006428:	d817      	bhi.n	800645a <USB_EPStartXfer+0x938>
 800642a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800642e:	085b      	lsrs	r3, r3, #1
 8006430:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006434:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006438:	f003 0301 	and.w	r3, r3, #1
 800643c:	2b00      	cmp	r3, #0
 800643e:	d004      	beq.n	800644a <USB_EPStartXfer+0x928>
 8006440:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006444:	3301      	adds	r3, #1
 8006446:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800644a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800644e:	b29b      	uxth	r3, r3
 8006450:	029b      	lsls	r3, r3, #10
 8006452:	b29a      	uxth	r2, r3
 8006454:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006456:	801a      	strh	r2, [r3, #0]
 8006458:	e041      	b.n	80064de <USB_EPStartXfer+0x9bc>
 800645a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800645e:	095b      	lsrs	r3, r3, #5
 8006460:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006464:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006468:	f003 031f 	and.w	r3, r3, #31
 800646c:	2b00      	cmp	r3, #0
 800646e:	d104      	bne.n	800647a <USB_EPStartXfer+0x958>
 8006470:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006474:	3b01      	subs	r3, #1
 8006476:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800647a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800647e:	b29b      	uxth	r3, r3
 8006480:	029b      	lsls	r3, r3, #10
 8006482:	b29b      	uxth	r3, r3
 8006484:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006488:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800648c:	b29a      	uxth	r2, r3
 800648e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006490:	801a      	strh	r2, [r3, #0]
 8006492:	e024      	b.n	80064de <USB_EPStartXfer+0x9bc>
 8006494:	463b      	mov	r3, r7
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	785b      	ldrb	r3, [r3, #1]
 800649a:	2b01      	cmp	r3, #1
 800649c:	d11f      	bne.n	80064de <USB_EPStartXfer+0x9bc>
 800649e:	1d3b      	adds	r3, r7, #4
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80064a6:	1d3b      	adds	r3, r7, #4
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80064ae:	b29b      	uxth	r3, r3
 80064b0:	461a      	mov	r2, r3
 80064b2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80064b6:	4413      	add	r3, r2
 80064b8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80064bc:	463b      	mov	r3, r7
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	781b      	ldrb	r3, [r3, #0]
 80064c2:	00da      	lsls	r2, r3, #3
 80064c4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80064c8:	4413      	add	r3, r2
 80064ca:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80064ce:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80064d2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80064d6:	b29a      	uxth	r2, r3
 80064d8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80064dc:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80064de:	463b      	mov	r3, r7
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	891b      	ldrh	r3, [r3, #8]
 80064e4:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
        }
        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80064e8:	463b      	mov	r3, r7
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	6959      	ldr	r1, [r3, #20]
 80064ee:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80064f2:	b29b      	uxth	r3, r3
 80064f4:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 80064f8:	1d38      	adds	r0, r7, #4
 80064fa:	6800      	ldr	r0, [r0, #0]
 80064fc:	f000 fd86 	bl	800700c <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8006500:	463b      	mov	r3, r7
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	785b      	ldrb	r3, [r3, #1]
 8006506:	2b00      	cmp	r3, #0
 8006508:	d122      	bne.n	8006550 <USB_EPStartXfer+0xa2e>
 800650a:	1d3b      	adds	r3, r7, #4
 800650c:	681a      	ldr	r2, [r3, #0]
 800650e:	463b      	mov	r3, r7
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	781b      	ldrb	r3, [r3, #0]
 8006514:	009b      	lsls	r3, r3, #2
 8006516:	4413      	add	r3, r2
 8006518:	881b      	ldrh	r3, [r3, #0]
 800651a:	b29b      	uxth	r3, r3
 800651c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006520:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006524:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8006528:	1d3b      	adds	r3, r7, #4
 800652a:	681a      	ldr	r2, [r3, #0]
 800652c:	463b      	mov	r3, r7
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	781b      	ldrb	r3, [r3, #0]
 8006532:	009b      	lsls	r3, r3, #2
 8006534:	441a      	add	r2, r3
 8006536:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 800653a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800653e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006542:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006546:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800654a:	b29b      	uxth	r3, r3
 800654c:	8013      	strh	r3, [r2, #0]
 800654e:	e026      	b.n	800659e <USB_EPStartXfer+0xa7c>
 8006550:	463b      	mov	r3, r7
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	785b      	ldrb	r3, [r3, #1]
 8006556:	2b01      	cmp	r3, #1
 8006558:	d121      	bne.n	800659e <USB_EPStartXfer+0xa7c>
 800655a:	1d3b      	adds	r3, r7, #4
 800655c:	681a      	ldr	r2, [r3, #0]
 800655e:	463b      	mov	r3, r7
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	781b      	ldrb	r3, [r3, #0]
 8006564:	009b      	lsls	r3, r3, #2
 8006566:	4413      	add	r3, r2
 8006568:	881b      	ldrh	r3, [r3, #0]
 800656a:	b29b      	uxth	r3, r3
 800656c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006570:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006574:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 8006578:	1d3b      	adds	r3, r7, #4
 800657a:	681a      	ldr	r2, [r3, #0]
 800657c:	463b      	mov	r3, r7
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	781b      	ldrb	r3, [r3, #0]
 8006582:	009b      	lsls	r3, r3, #2
 8006584:	441a      	add	r2, r3
 8006586:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 800658a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800658e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006592:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006596:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800659a:	b29b      	uxth	r3, r3
 800659c:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800659e:	1d3b      	adds	r3, r7, #4
 80065a0:	681a      	ldr	r2, [r3, #0]
 80065a2:	463b      	mov	r3, r7
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	781b      	ldrb	r3, [r3, #0]
 80065a8:	009b      	lsls	r3, r3, #2
 80065aa:	4413      	add	r3, r2
 80065ac:	881b      	ldrh	r3, [r3, #0]
 80065ae:	b29b      	uxth	r3, r3
 80065b0:	f107 020e 	add.w	r2, r7, #14
 80065b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80065b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80065bc:	8013      	strh	r3, [r2, #0]
 80065be:	f107 030e 	add.w	r3, r7, #14
 80065c2:	f107 020e 	add.w	r2, r7, #14
 80065c6:	8812      	ldrh	r2, [r2, #0]
 80065c8:	f082 0210 	eor.w	r2, r2, #16
 80065cc:	801a      	strh	r2, [r3, #0]
 80065ce:	f107 030e 	add.w	r3, r7, #14
 80065d2:	f107 020e 	add.w	r2, r7, #14
 80065d6:	8812      	ldrh	r2, [r2, #0]
 80065d8:	f082 0220 	eor.w	r2, r2, #32
 80065dc:	801a      	strh	r2, [r3, #0]
 80065de:	1d3b      	adds	r3, r7, #4
 80065e0:	681a      	ldr	r2, [r3, #0]
 80065e2:	463b      	mov	r3, r7
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	781b      	ldrb	r3, [r3, #0]
 80065e8:	009b      	lsls	r3, r3, #2
 80065ea:	441a      	add	r2, r3
 80065ec:	f107 030e 	add.w	r3, r7, #14
 80065f0:	881b      	ldrh	r3, [r3, #0]
 80065f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80065f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80065fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80065fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006602:	b29b      	uxth	r3, r3
 8006604:	8013      	strh	r3, [r2, #0]
 8006606:	e3b5      	b.n	8006d74 <USB_EPStartXfer+0x1252>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8006608:	463b      	mov	r3, r7
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	7b1b      	ldrb	r3, [r3, #12]
 800660e:	2b00      	cmp	r3, #0
 8006610:	f040 8090 	bne.w	8006734 <USB_EPStartXfer+0xc12>
    {
      /* Multi packet transfer*/
      if (ep->xfer_len > ep->maxpacket)
 8006614:	463b      	mov	r3, r7
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	699a      	ldr	r2, [r3, #24]
 800661a:	463b      	mov	r3, r7
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	691b      	ldr	r3, [r3, #16]
 8006620:	429a      	cmp	r2, r3
 8006622:	d90e      	bls.n	8006642 <USB_EPStartXfer+0xb20>
      {
        len = ep->maxpacket;
 8006624:	463b      	mov	r3, r7
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	691b      	ldr	r3, [r3, #16]
 800662a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        ep->xfer_len -= len;
 800662e:	463b      	mov	r3, r7
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	699a      	ldr	r2, [r3, #24]
 8006634:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006638:	1ad2      	subs	r2, r2, r3
 800663a:	463b      	mov	r3, r7
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	619a      	str	r2, [r3, #24]
 8006640:	e008      	b.n	8006654 <USB_EPStartXfer+0xb32>
      }
      else
      {
        len = ep->xfer_len;
 8006642:	463b      	mov	r3, r7
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	699b      	ldr	r3, [r3, #24]
 8006648:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        ep->xfer_len = 0U;
 800664c:	463b      	mov	r3, r7
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	2200      	movs	r2, #0
 8006652:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8006654:	1d3b      	adds	r3, r7, #4
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800665c:	1d3b      	adds	r3, r7, #4
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006664:	b29b      	uxth	r3, r3
 8006666:	461a      	mov	r2, r3
 8006668:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800666c:	4413      	add	r3, r2
 800666e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006672:	463b      	mov	r3, r7
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	781b      	ldrb	r3, [r3, #0]
 8006678:	00da      	lsls	r2, r3, #3
 800667a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800667e:	4413      	add	r3, r2
 8006680:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006684:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006688:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800668c:	2b00      	cmp	r3, #0
 800668e:	d116      	bne.n	80066be <USB_EPStartXfer+0xb9c>
 8006690:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006694:	881b      	ldrh	r3, [r3, #0]
 8006696:	b29b      	uxth	r3, r3
 8006698:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800669c:	b29a      	uxth	r2, r3
 800669e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80066a2:	801a      	strh	r2, [r3, #0]
 80066a4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80066a8:	881b      	ldrh	r3, [r3, #0]
 80066aa:	b29b      	uxth	r3, r3
 80066ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80066b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80066b4:	b29a      	uxth	r2, r3
 80066b6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80066ba:	801a      	strh	r2, [r3, #0]
 80066bc:	e32c      	b.n	8006d18 <USB_EPStartXfer+0x11f6>
 80066be:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80066c2:	2b3e      	cmp	r3, #62	; 0x3e
 80066c4:	d818      	bhi.n	80066f8 <USB_EPStartXfer+0xbd6>
 80066c6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80066ca:	085b      	lsrs	r3, r3, #1
 80066cc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80066d0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80066d4:	f003 0301 	and.w	r3, r3, #1
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d004      	beq.n	80066e6 <USB_EPStartXfer+0xbc4>
 80066dc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80066e0:	3301      	adds	r3, #1
 80066e2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80066e6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80066ea:	b29b      	uxth	r3, r3
 80066ec:	029b      	lsls	r3, r3, #10
 80066ee:	b29a      	uxth	r2, r3
 80066f0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80066f4:	801a      	strh	r2, [r3, #0]
 80066f6:	e30f      	b.n	8006d18 <USB_EPStartXfer+0x11f6>
 80066f8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80066fc:	095b      	lsrs	r3, r3, #5
 80066fe:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006702:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006706:	f003 031f 	and.w	r3, r3, #31
 800670a:	2b00      	cmp	r3, #0
 800670c:	d104      	bne.n	8006718 <USB_EPStartXfer+0xbf6>
 800670e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006712:	3b01      	subs	r3, #1
 8006714:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006718:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800671c:	b29b      	uxth	r3, r3
 800671e:	029b      	lsls	r3, r3, #10
 8006720:	b29b      	uxth	r3, r3
 8006722:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006726:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800672a:	b29a      	uxth	r2, r3
 800672c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006730:	801a      	strh	r2, [r3, #0]
 8006732:	e2f1      	b.n	8006d18 <USB_EPStartXfer+0x11f6>
    }
    else
    {
      /*First Transfer Coming From HAL_PCD_EP_Receive & From ISR*/
      /*Set the Double buffer counter*/
      if (ep->type == EP_TYPE_BULK)
 8006734:	463b      	mov	r3, r7
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	78db      	ldrb	r3, [r3, #3]
 800673a:	2b02      	cmp	r3, #2
 800673c:	f040 818f 	bne.w	8006a5e <USB_EPStartXfer+0xf3c>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8006740:	463b      	mov	r3, r7
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	785b      	ldrb	r3, [r3, #1]
 8006746:	2b00      	cmp	r3, #0
 8006748:	d175      	bne.n	8006836 <USB_EPStartXfer+0xd14>
 800674a:	1d3b      	adds	r3, r7, #4
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006752:	1d3b      	adds	r3, r7, #4
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800675a:	b29b      	uxth	r3, r3
 800675c:	461a      	mov	r2, r3
 800675e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006762:	4413      	add	r3, r2
 8006764:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006768:	463b      	mov	r3, r7
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	781b      	ldrb	r3, [r3, #0]
 800676e:	00da      	lsls	r2, r3, #3
 8006770:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006774:	4413      	add	r3, r2
 8006776:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800677a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800677e:	463b      	mov	r3, r7
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	691b      	ldr	r3, [r3, #16]
 8006784:	2b00      	cmp	r3, #0
 8006786:	d116      	bne.n	80067b6 <USB_EPStartXfer+0xc94>
 8006788:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800678c:	881b      	ldrh	r3, [r3, #0]
 800678e:	b29b      	uxth	r3, r3
 8006790:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006794:	b29a      	uxth	r2, r3
 8006796:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800679a:	801a      	strh	r2, [r3, #0]
 800679c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80067a0:	881b      	ldrh	r3, [r3, #0]
 80067a2:	b29b      	uxth	r3, r3
 80067a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067ac:	b29a      	uxth	r2, r3
 80067ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80067b2:	801a      	strh	r2, [r3, #0]
 80067b4:	e065      	b.n	8006882 <USB_EPStartXfer+0xd60>
 80067b6:	463b      	mov	r3, r7
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	691b      	ldr	r3, [r3, #16]
 80067bc:	2b3e      	cmp	r3, #62	; 0x3e
 80067be:	d81a      	bhi.n	80067f6 <USB_EPStartXfer+0xcd4>
 80067c0:	463b      	mov	r3, r7
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	691b      	ldr	r3, [r3, #16]
 80067c6:	085b      	lsrs	r3, r3, #1
 80067c8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80067cc:	463b      	mov	r3, r7
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	691b      	ldr	r3, [r3, #16]
 80067d2:	f003 0301 	and.w	r3, r3, #1
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d004      	beq.n	80067e4 <USB_EPStartXfer+0xcc2>
 80067da:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80067de:	3301      	adds	r3, #1
 80067e0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80067e4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80067e8:	b29b      	uxth	r3, r3
 80067ea:	029b      	lsls	r3, r3, #10
 80067ec:	b29a      	uxth	r2, r3
 80067ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80067f2:	801a      	strh	r2, [r3, #0]
 80067f4:	e045      	b.n	8006882 <USB_EPStartXfer+0xd60>
 80067f6:	463b      	mov	r3, r7
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	691b      	ldr	r3, [r3, #16]
 80067fc:	095b      	lsrs	r3, r3, #5
 80067fe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006802:	463b      	mov	r3, r7
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	691b      	ldr	r3, [r3, #16]
 8006808:	f003 031f 	and.w	r3, r3, #31
 800680c:	2b00      	cmp	r3, #0
 800680e:	d104      	bne.n	800681a <USB_EPStartXfer+0xcf8>
 8006810:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006814:	3b01      	subs	r3, #1
 8006816:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800681a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800681e:	b29b      	uxth	r3, r3
 8006820:	029b      	lsls	r3, r3, #10
 8006822:	b29b      	uxth	r3, r3
 8006824:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006828:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800682c:	b29a      	uxth	r2, r3
 800682e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006832:	801a      	strh	r2, [r3, #0]
 8006834:	e025      	b.n	8006882 <USB_EPStartXfer+0xd60>
 8006836:	463b      	mov	r3, r7
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	785b      	ldrb	r3, [r3, #1]
 800683c:	2b01      	cmp	r3, #1
 800683e:	d120      	bne.n	8006882 <USB_EPStartXfer+0xd60>
 8006840:	1d3b      	adds	r3, r7, #4
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006848:	1d3b      	adds	r3, r7, #4
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006850:	b29b      	uxth	r3, r3
 8006852:	461a      	mov	r2, r3
 8006854:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006858:	4413      	add	r3, r2
 800685a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800685e:	463b      	mov	r3, r7
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	781b      	ldrb	r3, [r3, #0]
 8006864:	00da      	lsls	r2, r3, #3
 8006866:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800686a:	4413      	add	r3, r2
 800686c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006870:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006874:	463b      	mov	r3, r7
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	691b      	ldr	r3, [r3, #16]
 800687a:	b29a      	uxth	r2, r3
 800687c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006880:	801a      	strh	r2, [r3, #0]
 8006882:	1d3b      	adds	r3, r7, #4
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800688a:	463b      	mov	r3, r7
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	785b      	ldrb	r3, [r3, #1]
 8006890:	2b00      	cmp	r3, #0
 8006892:	d175      	bne.n	8006980 <USB_EPStartXfer+0xe5e>
 8006894:	1d3b      	adds	r3, r7, #4
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800689c:	1d3b      	adds	r3, r7, #4
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80068a4:	b29b      	uxth	r3, r3
 80068a6:	461a      	mov	r2, r3
 80068a8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80068ac:	4413      	add	r3, r2
 80068ae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80068b2:	463b      	mov	r3, r7
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	781b      	ldrb	r3, [r3, #0]
 80068b8:	00da      	lsls	r2, r3, #3
 80068ba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80068be:	4413      	add	r3, r2
 80068c0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80068c4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80068c8:	463b      	mov	r3, r7
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	691b      	ldr	r3, [r3, #16]
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d116      	bne.n	8006900 <USB_EPStartXfer+0xdde>
 80068d2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80068d6:	881b      	ldrh	r3, [r3, #0]
 80068d8:	b29b      	uxth	r3, r3
 80068da:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80068de:	b29a      	uxth	r2, r3
 80068e0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80068e4:	801a      	strh	r2, [r3, #0]
 80068e6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80068ea:	881b      	ldrh	r3, [r3, #0]
 80068ec:	b29b      	uxth	r3, r3
 80068ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80068f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80068f6:	b29a      	uxth	r2, r3
 80068f8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80068fc:	801a      	strh	r2, [r3, #0]
 80068fe:	e061      	b.n	80069c4 <USB_EPStartXfer+0xea2>
 8006900:	463b      	mov	r3, r7
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	691b      	ldr	r3, [r3, #16]
 8006906:	2b3e      	cmp	r3, #62	; 0x3e
 8006908:	d81a      	bhi.n	8006940 <USB_EPStartXfer+0xe1e>
 800690a:	463b      	mov	r3, r7
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	691b      	ldr	r3, [r3, #16]
 8006910:	085b      	lsrs	r3, r3, #1
 8006912:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006916:	463b      	mov	r3, r7
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	691b      	ldr	r3, [r3, #16]
 800691c:	f003 0301 	and.w	r3, r3, #1
 8006920:	2b00      	cmp	r3, #0
 8006922:	d004      	beq.n	800692e <USB_EPStartXfer+0xe0c>
 8006924:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006928:	3301      	adds	r3, #1
 800692a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800692e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006932:	b29b      	uxth	r3, r3
 8006934:	029b      	lsls	r3, r3, #10
 8006936:	b29a      	uxth	r2, r3
 8006938:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800693c:	801a      	strh	r2, [r3, #0]
 800693e:	e041      	b.n	80069c4 <USB_EPStartXfer+0xea2>
 8006940:	463b      	mov	r3, r7
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	691b      	ldr	r3, [r3, #16]
 8006946:	095b      	lsrs	r3, r3, #5
 8006948:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800694c:	463b      	mov	r3, r7
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	691b      	ldr	r3, [r3, #16]
 8006952:	f003 031f 	and.w	r3, r3, #31
 8006956:	2b00      	cmp	r3, #0
 8006958:	d104      	bne.n	8006964 <USB_EPStartXfer+0xe42>
 800695a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800695e:	3b01      	subs	r3, #1
 8006960:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006964:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006968:	b29b      	uxth	r3, r3
 800696a:	029b      	lsls	r3, r3, #10
 800696c:	b29b      	uxth	r3, r3
 800696e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006972:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006976:	b29a      	uxth	r2, r3
 8006978:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800697c:	801a      	strh	r2, [r3, #0]
 800697e:	e021      	b.n	80069c4 <USB_EPStartXfer+0xea2>
 8006980:	463b      	mov	r3, r7
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	785b      	ldrb	r3, [r3, #1]
 8006986:	2b01      	cmp	r3, #1
 8006988:	d11c      	bne.n	80069c4 <USB_EPStartXfer+0xea2>
 800698a:	1d3b      	adds	r3, r7, #4
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006992:	b29b      	uxth	r3, r3
 8006994:	461a      	mov	r2, r3
 8006996:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800699a:	4413      	add	r3, r2
 800699c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80069a0:	463b      	mov	r3, r7
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	781b      	ldrb	r3, [r3, #0]
 80069a6:	00da      	lsls	r2, r3, #3
 80069a8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80069ac:	4413      	add	r3, r2
 80069ae:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80069b2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80069b6:	463b      	mov	r3, r7
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	691b      	ldr	r3, [r3, #16]
 80069bc:	b29a      	uxth	r2, r3
 80069be:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80069c2:	801a      	strh	r2, [r3, #0]
        /*Coming from ISR*/
        if (ep->xfer_count != 0U)
 80069c4:	463b      	mov	r3, r7
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	69db      	ldr	r3, [r3, #28]
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	f000 81a4 	beq.w	8006d18 <USB_EPStartXfer+0x11f6>
        {
          /* update last value to check if there is blocking state*/
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80069d0:	1d3b      	adds	r3, r7, #4
 80069d2:	681a      	ldr	r2, [r3, #0]
 80069d4:	463b      	mov	r3, r7
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	781b      	ldrb	r3, [r3, #0]
 80069da:	009b      	lsls	r3, r3, #2
 80069dc:	4413      	add	r3, r2
 80069de:	881b      	ldrh	r3, [r3, #0]
 80069e0:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80069e4:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80069e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d005      	beq.n	80069fc <USB_EPStartXfer+0xeda>
 80069f0:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80069f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d10d      	bne.n	8006a18 <USB_EPStartXfer+0xef6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80069fc:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8006a00:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	f040 8187 	bne.w	8006d18 <USB_EPStartXfer+0x11f6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006a0a:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8006a0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	f040 8180 	bne.w	8006d18 <USB_EPStartXfer+0x11f6>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8006a18:	1d3b      	adds	r3, r7, #4
 8006a1a:	681a      	ldr	r2, [r3, #0]
 8006a1c:	463b      	mov	r3, r7
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	781b      	ldrb	r3, [r3, #0]
 8006a22:	009b      	lsls	r3, r3, #2
 8006a24:	4413      	add	r3, r2
 8006a26:	881b      	ldrh	r3, [r3, #0]
 8006a28:	b29b      	uxth	r3, r3
 8006a2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a32:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 8006a36:	1d3b      	adds	r3, r7, #4
 8006a38:	681a      	ldr	r2, [r3, #0]
 8006a3a:	463b      	mov	r3, r7
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	781b      	ldrb	r3, [r3, #0]
 8006a40:	009b      	lsls	r3, r3, #2
 8006a42:	441a      	add	r2, r3
 8006a44:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8006a48:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a4c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a50:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a54:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006a58:	b29b      	uxth	r3, r3
 8006a5a:	8013      	strh	r3, [r2, #0]
 8006a5c:	e15c      	b.n	8006d18 <USB_EPStartXfer+0x11f6>
          }
        }
      }
      /*iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8006a5e:	463b      	mov	r3, r7
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	78db      	ldrb	r3, [r3, #3]
 8006a64:	2b01      	cmp	r3, #1
 8006a66:	f040 8155 	bne.w	8006d14 <USB_EPStartXfer+0x11f2>
      {
        /* Multi packet transfer*/
        if (ep->xfer_len > ep->maxpacket)
 8006a6a:	463b      	mov	r3, r7
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	699a      	ldr	r2, [r3, #24]
 8006a70:	463b      	mov	r3, r7
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	691b      	ldr	r3, [r3, #16]
 8006a76:	429a      	cmp	r2, r3
 8006a78:	d90e      	bls.n	8006a98 <USB_EPStartXfer+0xf76>
        {
          len = ep->maxpacket;
 8006a7a:	463b      	mov	r3, r7
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	691b      	ldr	r3, [r3, #16]
 8006a80:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          ep->xfer_len -= len;
 8006a84:	463b      	mov	r3, r7
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	699a      	ldr	r2, [r3, #24]
 8006a8a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006a8e:	1ad2      	subs	r2, r2, r3
 8006a90:	463b      	mov	r3, r7
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	619a      	str	r2, [r3, #24]
 8006a96:	e008      	b.n	8006aaa <USB_EPStartXfer+0xf88>
        }
        else
        {
          len = ep->xfer_len;
 8006a98:	463b      	mov	r3, r7
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	699b      	ldr	r3, [r3, #24]
 8006a9e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          ep->xfer_len = 0U;
 8006aa2:	463b      	mov	r3, r7
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	2200      	movs	r2, #0
 8006aa8:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8006aaa:	463b      	mov	r3, r7
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	785b      	ldrb	r3, [r3, #1]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d16f      	bne.n	8006b94 <USB_EPStartXfer+0x1072>
 8006ab4:	1d3b      	adds	r3, r7, #4
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006abc:	1d3b      	adds	r3, r7, #4
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ac4:	b29b      	uxth	r3, r3
 8006ac6:	461a      	mov	r2, r3
 8006ac8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006acc:	4413      	add	r3, r2
 8006ace:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006ad2:	463b      	mov	r3, r7
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	781b      	ldrb	r3, [r3, #0]
 8006ad8:	00da      	lsls	r2, r3, #3
 8006ada:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006ade:	4413      	add	r3, r2
 8006ae0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006ae4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006ae8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d116      	bne.n	8006b1e <USB_EPStartXfer+0xffc>
 8006af0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006af4:	881b      	ldrh	r3, [r3, #0]
 8006af6:	b29b      	uxth	r3, r3
 8006af8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006afc:	b29a      	uxth	r2, r3
 8006afe:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006b02:	801a      	strh	r2, [r3, #0]
 8006b04:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006b08:	881b      	ldrh	r3, [r3, #0]
 8006b0a:	b29b      	uxth	r3, r3
 8006b0c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b10:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b14:	b29a      	uxth	r2, r3
 8006b16:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006b1a:	801a      	strh	r2, [r3, #0]
 8006b1c:	e05f      	b.n	8006bde <USB_EPStartXfer+0x10bc>
 8006b1e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006b22:	2b3e      	cmp	r3, #62	; 0x3e
 8006b24:	d818      	bhi.n	8006b58 <USB_EPStartXfer+0x1036>
 8006b26:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006b2a:	085b      	lsrs	r3, r3, #1
 8006b2c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006b30:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006b34:	f003 0301 	and.w	r3, r3, #1
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d004      	beq.n	8006b46 <USB_EPStartXfer+0x1024>
 8006b3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b40:	3301      	adds	r3, #1
 8006b42:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006b46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b4a:	b29b      	uxth	r3, r3
 8006b4c:	029b      	lsls	r3, r3, #10
 8006b4e:	b29a      	uxth	r2, r3
 8006b50:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006b54:	801a      	strh	r2, [r3, #0]
 8006b56:	e042      	b.n	8006bde <USB_EPStartXfer+0x10bc>
 8006b58:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006b5c:	095b      	lsrs	r3, r3, #5
 8006b5e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006b62:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006b66:	f003 031f 	and.w	r3, r3, #31
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d104      	bne.n	8006b78 <USB_EPStartXfer+0x1056>
 8006b6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b72:	3b01      	subs	r3, #1
 8006b74:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006b78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b7c:	b29b      	uxth	r3, r3
 8006b7e:	029b      	lsls	r3, r3, #10
 8006b80:	b29b      	uxth	r3, r3
 8006b82:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b86:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b8a:	b29a      	uxth	r2, r3
 8006b8c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006b90:	801a      	strh	r2, [r3, #0]
 8006b92:	e024      	b.n	8006bde <USB_EPStartXfer+0x10bc>
 8006b94:	463b      	mov	r3, r7
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	785b      	ldrb	r3, [r3, #1]
 8006b9a:	2b01      	cmp	r3, #1
 8006b9c:	d11f      	bne.n	8006bde <USB_EPStartXfer+0x10bc>
 8006b9e:	1d3b      	adds	r3, r7, #4
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006ba6:	1d3b      	adds	r3, r7, #4
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006bae:	b29b      	uxth	r3, r3
 8006bb0:	461a      	mov	r2, r3
 8006bb2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006bb6:	4413      	add	r3, r2
 8006bb8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006bbc:	463b      	mov	r3, r7
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	781b      	ldrb	r3, [r3, #0]
 8006bc2:	00da      	lsls	r2, r3, #3
 8006bc4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006bc8:	4413      	add	r3, r2
 8006bca:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006bce:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006bd2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006bd6:	b29a      	uxth	r2, r3
 8006bd8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006bdc:	801a      	strh	r2, [r3, #0]
 8006bde:	1d3b      	adds	r3, r7, #4
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006be6:	463b      	mov	r3, r7
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	785b      	ldrb	r3, [r3, #1]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d16f      	bne.n	8006cd0 <USB_EPStartXfer+0x11ae>
 8006bf0:	1d3b      	adds	r3, r7, #4
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006bf8:	1d3b      	adds	r3, r7, #4
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c00:	b29b      	uxth	r3, r3
 8006c02:	461a      	mov	r2, r3
 8006c04:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006c08:	4413      	add	r3, r2
 8006c0a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006c0e:	463b      	mov	r3, r7
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	781b      	ldrb	r3, [r3, #0]
 8006c14:	00da      	lsls	r2, r3, #3
 8006c16:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006c1a:	4413      	add	r3, r2
 8006c1c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006c20:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006c24:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d116      	bne.n	8006c5a <USB_EPStartXfer+0x1138>
 8006c2c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006c30:	881b      	ldrh	r3, [r3, #0]
 8006c32:	b29b      	uxth	r3, r3
 8006c34:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006c38:	b29a      	uxth	r2, r3
 8006c3a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006c3e:	801a      	strh	r2, [r3, #0]
 8006c40:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006c44:	881b      	ldrh	r3, [r3, #0]
 8006c46:	b29b      	uxth	r3, r3
 8006c48:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c4c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c50:	b29a      	uxth	r2, r3
 8006c52:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006c56:	801a      	strh	r2, [r3, #0]
 8006c58:	e05e      	b.n	8006d18 <USB_EPStartXfer+0x11f6>
 8006c5a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006c5e:	2b3e      	cmp	r3, #62	; 0x3e
 8006c60:	d818      	bhi.n	8006c94 <USB_EPStartXfer+0x1172>
 8006c62:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006c66:	085b      	lsrs	r3, r3, #1
 8006c68:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006c6c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006c70:	f003 0301 	and.w	r3, r3, #1
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d004      	beq.n	8006c82 <USB_EPStartXfer+0x1160>
 8006c78:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006c7c:	3301      	adds	r3, #1
 8006c7e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006c82:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006c86:	b29b      	uxth	r3, r3
 8006c88:	029b      	lsls	r3, r3, #10
 8006c8a:	b29a      	uxth	r2, r3
 8006c8c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006c90:	801a      	strh	r2, [r3, #0]
 8006c92:	e041      	b.n	8006d18 <USB_EPStartXfer+0x11f6>
 8006c94:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006c98:	095b      	lsrs	r3, r3, #5
 8006c9a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006c9e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006ca2:	f003 031f 	and.w	r3, r3, #31
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d104      	bne.n	8006cb4 <USB_EPStartXfer+0x1192>
 8006caa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006cae:	3b01      	subs	r3, #1
 8006cb0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006cb4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006cb8:	b29b      	uxth	r3, r3
 8006cba:	029b      	lsls	r3, r3, #10
 8006cbc:	b29b      	uxth	r3, r3
 8006cbe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006cc2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006cc6:	b29a      	uxth	r2, r3
 8006cc8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006ccc:	801a      	strh	r2, [r3, #0]
 8006cce:	e023      	b.n	8006d18 <USB_EPStartXfer+0x11f6>
 8006cd0:	463b      	mov	r3, r7
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	785b      	ldrb	r3, [r3, #1]
 8006cd6:	2b01      	cmp	r3, #1
 8006cd8:	d11e      	bne.n	8006d18 <USB_EPStartXfer+0x11f6>
 8006cda:	1d3b      	adds	r3, r7, #4
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ce2:	b29b      	uxth	r3, r3
 8006ce4:	461a      	mov	r2, r3
 8006ce6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006cea:	4413      	add	r3, r2
 8006cec:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006cf0:	463b      	mov	r3, r7
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	781b      	ldrb	r3, [r3, #0]
 8006cf6:	00da      	lsls	r2, r3, #3
 8006cf8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006cfc:	4413      	add	r3, r2
 8006cfe:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006d02:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006d06:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006d0a:	b29a      	uxth	r2, r3
 8006d0c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006d10:	801a      	strh	r2, [r3, #0]
 8006d12:	e001      	b.n	8006d18 <USB_EPStartXfer+0x11f6>
      }
      else
      {
        return HAL_ERROR;
 8006d14:	2301      	movs	r3, #1
 8006d16:	e02e      	b.n	8006d76 <USB_EPStartXfer+0x1254>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006d18:	1d3b      	adds	r3, r7, #4
 8006d1a:	681a      	ldr	r2, [r3, #0]
 8006d1c:	463b      	mov	r3, r7
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	781b      	ldrb	r3, [r3, #0]
 8006d22:	009b      	lsls	r3, r3, #2
 8006d24:	4413      	add	r3, r2
 8006d26:	881b      	ldrh	r3, [r3, #0]
 8006d28:	b29b      	uxth	r3, r3
 8006d2a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006d2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d32:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8006d36:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8006d3a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006d3e:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8006d42:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8006d46:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006d4a:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8006d4e:	1d3b      	adds	r3, r7, #4
 8006d50:	681a      	ldr	r2, [r3, #0]
 8006d52:	463b      	mov	r3, r7
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	781b      	ldrb	r3, [r3, #0]
 8006d58:	009b      	lsls	r3, r3, #2
 8006d5a:	441a      	add	r2, r3
 8006d5c:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8006d60:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d64:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d68:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d70:	b29b      	uxth	r3, r3
 8006d72:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006d74:	2300      	movs	r3, #0
}
 8006d76:	4618      	mov	r0, r3
 8006d78:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8006d7c:	46bd      	mov	sp, r7
 8006d7e:	bd80      	pop	{r7, pc}

08006d80 <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006d80:	b480      	push	{r7}
 8006d82:	b085      	sub	sp, #20
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
 8006d88:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8006d8a:	683b      	ldr	r3, [r7, #0]
 8006d8c:	785b      	ldrb	r3, [r3, #1]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d020      	beq.n	8006dd4 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8006d92:	687a      	ldr	r2, [r7, #4]
 8006d94:	683b      	ldr	r3, [r7, #0]
 8006d96:	781b      	ldrb	r3, [r3, #0]
 8006d98:	009b      	lsls	r3, r3, #2
 8006d9a:	4413      	add	r3, r2
 8006d9c:	881b      	ldrh	r3, [r3, #0]
 8006d9e:	b29b      	uxth	r3, r3
 8006da0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006da4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006da8:	81bb      	strh	r3, [r7, #12]
 8006daa:	89bb      	ldrh	r3, [r7, #12]
 8006dac:	f083 0310 	eor.w	r3, r3, #16
 8006db0:	81bb      	strh	r3, [r7, #12]
 8006db2:	687a      	ldr	r2, [r7, #4]
 8006db4:	683b      	ldr	r3, [r7, #0]
 8006db6:	781b      	ldrb	r3, [r3, #0]
 8006db8:	009b      	lsls	r3, r3, #2
 8006dba:	441a      	add	r2, r3
 8006dbc:	89bb      	ldrh	r3, [r7, #12]
 8006dbe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006dc2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006dc6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006dca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006dce:	b29b      	uxth	r3, r3
 8006dd0:	8013      	strh	r3, [r2, #0]
 8006dd2:	e01f      	b.n	8006e14 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8006dd4:	687a      	ldr	r2, [r7, #4]
 8006dd6:	683b      	ldr	r3, [r7, #0]
 8006dd8:	781b      	ldrb	r3, [r3, #0]
 8006dda:	009b      	lsls	r3, r3, #2
 8006ddc:	4413      	add	r3, r2
 8006dde:	881b      	ldrh	r3, [r3, #0]
 8006de0:	b29b      	uxth	r3, r3
 8006de2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006de6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006dea:	81fb      	strh	r3, [r7, #14]
 8006dec:	89fb      	ldrh	r3, [r7, #14]
 8006dee:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006df2:	81fb      	strh	r3, [r7, #14]
 8006df4:	687a      	ldr	r2, [r7, #4]
 8006df6:	683b      	ldr	r3, [r7, #0]
 8006df8:	781b      	ldrb	r3, [r3, #0]
 8006dfa:	009b      	lsls	r3, r3, #2
 8006dfc:	441a      	add	r2, r3
 8006dfe:	89fb      	ldrh	r3, [r7, #14]
 8006e00:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e04:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e08:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e10:	b29b      	uxth	r3, r3
 8006e12:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006e14:	2300      	movs	r3, #0
}
 8006e16:	4618      	mov	r0, r3
 8006e18:	3714      	adds	r7, #20
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e20:	4770      	bx	lr

08006e22 <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006e22:	b480      	push	{r7}
 8006e24:	b087      	sub	sp, #28
 8006e26:	af00      	add	r7, sp, #0
 8006e28:	6078      	str	r0, [r7, #4]
 8006e2a:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006e2c:	683b      	ldr	r3, [r7, #0]
 8006e2e:	7b1b      	ldrb	r3, [r3, #12]
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	f040 809d 	bne.w	8006f70 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8006e36:	683b      	ldr	r3, [r7, #0]
 8006e38:	785b      	ldrb	r3, [r3, #1]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d04c      	beq.n	8006ed8 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006e3e:	687a      	ldr	r2, [r7, #4]
 8006e40:	683b      	ldr	r3, [r7, #0]
 8006e42:	781b      	ldrb	r3, [r3, #0]
 8006e44:	009b      	lsls	r3, r3, #2
 8006e46:	4413      	add	r3, r2
 8006e48:	881b      	ldrh	r3, [r3, #0]
 8006e4a:	823b      	strh	r3, [r7, #16]
 8006e4c:	8a3b      	ldrh	r3, [r7, #16]
 8006e4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d01b      	beq.n	8006e8e <USB_EPClearStall+0x6c>
 8006e56:	687a      	ldr	r2, [r7, #4]
 8006e58:	683b      	ldr	r3, [r7, #0]
 8006e5a:	781b      	ldrb	r3, [r3, #0]
 8006e5c:	009b      	lsls	r3, r3, #2
 8006e5e:	4413      	add	r3, r2
 8006e60:	881b      	ldrh	r3, [r3, #0]
 8006e62:	b29b      	uxth	r3, r3
 8006e64:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e6c:	81fb      	strh	r3, [r7, #14]
 8006e6e:	687a      	ldr	r2, [r7, #4]
 8006e70:	683b      	ldr	r3, [r7, #0]
 8006e72:	781b      	ldrb	r3, [r3, #0]
 8006e74:	009b      	lsls	r3, r3, #2
 8006e76:	441a      	add	r2, r3
 8006e78:	89fb      	ldrh	r3, [r7, #14]
 8006e7a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e7e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e86:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006e8a:	b29b      	uxth	r3, r3
 8006e8c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006e8e:	683b      	ldr	r3, [r7, #0]
 8006e90:	78db      	ldrb	r3, [r3, #3]
 8006e92:	2b01      	cmp	r3, #1
 8006e94:	d06c      	beq.n	8006f70 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006e96:	687a      	ldr	r2, [r7, #4]
 8006e98:	683b      	ldr	r3, [r7, #0]
 8006e9a:	781b      	ldrb	r3, [r3, #0]
 8006e9c:	009b      	lsls	r3, r3, #2
 8006e9e:	4413      	add	r3, r2
 8006ea0:	881b      	ldrh	r3, [r3, #0]
 8006ea2:	b29b      	uxth	r3, r3
 8006ea4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ea8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006eac:	81bb      	strh	r3, [r7, #12]
 8006eae:	89bb      	ldrh	r3, [r7, #12]
 8006eb0:	f083 0320 	eor.w	r3, r3, #32
 8006eb4:	81bb      	strh	r3, [r7, #12]
 8006eb6:	687a      	ldr	r2, [r7, #4]
 8006eb8:	683b      	ldr	r3, [r7, #0]
 8006eba:	781b      	ldrb	r3, [r3, #0]
 8006ebc:	009b      	lsls	r3, r3, #2
 8006ebe:	441a      	add	r2, r3
 8006ec0:	89bb      	ldrh	r3, [r7, #12]
 8006ec2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ec6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006eca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ece:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ed2:	b29b      	uxth	r3, r3
 8006ed4:	8013      	strh	r3, [r2, #0]
 8006ed6:	e04b      	b.n	8006f70 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006ed8:	687a      	ldr	r2, [r7, #4]
 8006eda:	683b      	ldr	r3, [r7, #0]
 8006edc:	781b      	ldrb	r3, [r3, #0]
 8006ede:	009b      	lsls	r3, r3, #2
 8006ee0:	4413      	add	r3, r2
 8006ee2:	881b      	ldrh	r3, [r3, #0]
 8006ee4:	82fb      	strh	r3, [r7, #22]
 8006ee6:	8afb      	ldrh	r3, [r7, #22]
 8006ee8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d01b      	beq.n	8006f28 <USB_EPClearStall+0x106>
 8006ef0:	687a      	ldr	r2, [r7, #4]
 8006ef2:	683b      	ldr	r3, [r7, #0]
 8006ef4:	781b      	ldrb	r3, [r3, #0]
 8006ef6:	009b      	lsls	r3, r3, #2
 8006ef8:	4413      	add	r3, r2
 8006efa:	881b      	ldrh	r3, [r3, #0]
 8006efc:	b29b      	uxth	r3, r3
 8006efe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f06:	82bb      	strh	r3, [r7, #20]
 8006f08:	687a      	ldr	r2, [r7, #4]
 8006f0a:	683b      	ldr	r3, [r7, #0]
 8006f0c:	781b      	ldrb	r3, [r3, #0]
 8006f0e:	009b      	lsls	r3, r3, #2
 8006f10:	441a      	add	r2, r3
 8006f12:	8abb      	ldrh	r3, [r7, #20]
 8006f14:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f18:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f1c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006f20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f24:	b29b      	uxth	r3, r3
 8006f26:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006f28:	687a      	ldr	r2, [r7, #4]
 8006f2a:	683b      	ldr	r3, [r7, #0]
 8006f2c:	781b      	ldrb	r3, [r3, #0]
 8006f2e:	009b      	lsls	r3, r3, #2
 8006f30:	4413      	add	r3, r2
 8006f32:	881b      	ldrh	r3, [r3, #0]
 8006f34:	b29b      	uxth	r3, r3
 8006f36:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006f3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f3e:	827b      	strh	r3, [r7, #18]
 8006f40:	8a7b      	ldrh	r3, [r7, #18]
 8006f42:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006f46:	827b      	strh	r3, [r7, #18]
 8006f48:	8a7b      	ldrh	r3, [r7, #18]
 8006f4a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006f4e:	827b      	strh	r3, [r7, #18]
 8006f50:	687a      	ldr	r2, [r7, #4]
 8006f52:	683b      	ldr	r3, [r7, #0]
 8006f54:	781b      	ldrb	r3, [r3, #0]
 8006f56:	009b      	lsls	r3, r3, #2
 8006f58:	441a      	add	r2, r3
 8006f5a:	8a7b      	ldrh	r3, [r7, #18]
 8006f5c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f60:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f64:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f6c:	b29b      	uxth	r3, r3
 8006f6e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006f70:	2300      	movs	r3, #0
}
 8006f72:	4618      	mov	r0, r3
 8006f74:	371c      	adds	r7, #28
 8006f76:	46bd      	mov	sp, r7
 8006f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7c:	4770      	bx	lr

08006f7e <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8006f7e:	b480      	push	{r7}
 8006f80:	b083      	sub	sp, #12
 8006f82:	af00      	add	r7, sp, #0
 8006f84:	6078      	str	r0, [r7, #4]
 8006f86:	460b      	mov	r3, r1
 8006f88:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8006f8a:	78fb      	ldrb	r3, [r7, #3]
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d103      	bne.n	8006f98 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	2280      	movs	r2, #128	; 0x80
 8006f94:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8006f98:	2300      	movs	r3, #0
}
 8006f9a:	4618      	mov	r0, r3
 8006f9c:	370c      	adds	r7, #12
 8006f9e:	46bd      	mov	sp, r7
 8006fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa4:	4770      	bx	lr

08006fa6 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8006fa6:	b480      	push	{r7}
 8006fa8:	b083      	sub	sp, #12
 8006faa:	af00      	add	r7, sp, #0
 8006fac:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006fb4:	b29b      	uxth	r3, r3
 8006fb6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006fba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006fbe:	b29a      	uxth	r2, r3
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8006fc6:	2300      	movs	r3, #0
}
 8006fc8:	4618      	mov	r0, r3
 8006fca:	370c      	adds	r7, #12
 8006fcc:	46bd      	mov	sp, r7
 8006fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd2:	4770      	bx	lr

08006fd4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8006fd4:	b480      	push	{r7}
 8006fd6:	b085      	sub	sp, #20
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006fe2:	b29b      	uxth	r3, r3
 8006fe4:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8006fe6:	68fb      	ldr	r3, [r7, #12]
}
 8006fe8:	4618      	mov	r0, r3
 8006fea:	3714      	adds	r7, #20
 8006fec:	46bd      	mov	sp, r7
 8006fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff2:	4770      	bx	lr

08006ff4 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8006ff4:	b480      	push	{r7}
 8006ff6:	b083      	sub	sp, #12
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	6078      	str	r0, [r7, #4]
 8006ffc:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006ffe:	2300      	movs	r3, #0
}
 8007000:	4618      	mov	r0, r3
 8007002:	370c      	adds	r7, #12
 8007004:	46bd      	mov	sp, r7
 8007006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700a:	4770      	bx	lr

0800700c <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800700c:	b480      	push	{r7}
 800700e:	b08d      	sub	sp, #52	; 0x34
 8007010:	af00      	add	r7, sp, #0
 8007012:	60f8      	str	r0, [r7, #12]
 8007014:	60b9      	str	r1, [r7, #8]
 8007016:	4611      	mov	r1, r2
 8007018:	461a      	mov	r2, r3
 800701a:	460b      	mov	r3, r1
 800701c:	80fb      	strh	r3, [r7, #6]
 800701e:	4613      	mov	r3, r2
 8007020:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007022:	88bb      	ldrh	r3, [r7, #4]
 8007024:	3301      	adds	r3, #1
 8007026:	085b      	lsrs	r3, r3, #1
 8007028:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800702e:	68bb      	ldr	r3, [r7, #8]
 8007030:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007032:	88fa      	ldrh	r2, [r7, #6]
 8007034:	69fb      	ldr	r3, [r7, #28]
 8007036:	4413      	add	r3, r2
 8007038:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800703c:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800703e:	6a3b      	ldr	r3, [r7, #32]
 8007040:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007042:	e01b      	b.n	800707c <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 8007044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007046:	781b      	ldrb	r3, [r3, #0]
 8007048:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800704a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800704c:	3301      	adds	r3, #1
 800704e:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8007050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007052:	781b      	ldrb	r3, [r3, #0]
 8007054:	b29b      	uxth	r3, r3
 8007056:	021b      	lsls	r3, r3, #8
 8007058:	b29b      	uxth	r3, r3
 800705a:	461a      	mov	r2, r3
 800705c:	69bb      	ldr	r3, [r7, #24]
 800705e:	4313      	orrs	r3, r2
 8007060:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8007062:	697b      	ldr	r3, [r7, #20]
 8007064:	b29a      	uxth	r2, r3
 8007066:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007068:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800706a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800706c:	3302      	adds	r3, #2
 800706e:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 8007070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007072:	3301      	adds	r3, #1
 8007074:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8007076:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007078:	3b01      	subs	r3, #1
 800707a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800707c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800707e:	2b00      	cmp	r3, #0
 8007080:	d1e0      	bne.n	8007044 <USB_WritePMA+0x38>
  }
}
 8007082:	bf00      	nop
 8007084:	3734      	adds	r7, #52	; 0x34
 8007086:	46bd      	mov	sp, r7
 8007088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708c:	4770      	bx	lr

0800708e <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800708e:	b480      	push	{r7}
 8007090:	b08b      	sub	sp, #44	; 0x2c
 8007092:	af00      	add	r7, sp, #0
 8007094:	60f8      	str	r0, [r7, #12]
 8007096:	60b9      	str	r1, [r7, #8]
 8007098:	4611      	mov	r1, r2
 800709a:	461a      	mov	r2, r3
 800709c:	460b      	mov	r3, r1
 800709e:	80fb      	strh	r3, [r7, #6]
 80070a0:	4613      	mov	r3, r2
 80070a2:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80070a4:	88bb      	ldrh	r3, [r7, #4]
 80070a6:	085b      	lsrs	r3, r3, #1
 80070a8:	b29b      	uxth	r3, r3
 80070aa:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80070b0:	68bb      	ldr	r3, [r7, #8]
 80070b2:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80070b4:	88fa      	ldrh	r2, [r7, #6]
 80070b6:	697b      	ldr	r3, [r7, #20]
 80070b8:	4413      	add	r3, r2
 80070ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80070be:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 80070c0:	69bb      	ldr	r3, [r7, #24]
 80070c2:	627b      	str	r3, [r7, #36]	; 0x24
 80070c4:	e018      	b.n	80070f8 <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 80070c6:	6a3b      	ldr	r3, [r7, #32]
 80070c8:	881b      	ldrh	r3, [r3, #0]
 80070ca:	b29b      	uxth	r3, r3
 80070cc:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80070ce:	6a3b      	ldr	r3, [r7, #32]
 80070d0:	3302      	adds	r3, #2
 80070d2:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80070d4:	693b      	ldr	r3, [r7, #16]
 80070d6:	b2da      	uxtb	r2, r3
 80070d8:	69fb      	ldr	r3, [r7, #28]
 80070da:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80070dc:	69fb      	ldr	r3, [r7, #28]
 80070de:	3301      	adds	r3, #1
 80070e0:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 80070e2:	693b      	ldr	r3, [r7, #16]
 80070e4:	0a1b      	lsrs	r3, r3, #8
 80070e6:	b2da      	uxtb	r2, r3
 80070e8:	69fb      	ldr	r3, [r7, #28]
 80070ea:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80070ec:	69fb      	ldr	r3, [r7, #28]
 80070ee:	3301      	adds	r3, #1
 80070f0:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 80070f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070f4:	3b01      	subs	r3, #1
 80070f6:	627b      	str	r3, [r7, #36]	; 0x24
 80070f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d1e3      	bne.n	80070c6 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 80070fe:	88bb      	ldrh	r3, [r7, #4]
 8007100:	f003 0301 	and.w	r3, r3, #1
 8007104:	b29b      	uxth	r3, r3
 8007106:	2b00      	cmp	r3, #0
 8007108:	d007      	beq.n	800711a <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 800710a:	6a3b      	ldr	r3, [r7, #32]
 800710c:	881b      	ldrh	r3, [r3, #0]
 800710e:	b29b      	uxth	r3, r3
 8007110:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8007112:	693b      	ldr	r3, [r7, #16]
 8007114:	b2da      	uxtb	r2, r3
 8007116:	69fb      	ldr	r3, [r7, #28]
 8007118:	701a      	strb	r2, [r3, #0]
  }
}
 800711a:	bf00      	nop
 800711c:	372c      	adds	r7, #44	; 0x2c
 800711e:	46bd      	mov	sp, r7
 8007120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007124:	4770      	bx	lr

08007126 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007126:	b580      	push	{r7, lr}
 8007128:	b084      	sub	sp, #16
 800712a:	af00      	add	r7, sp, #0
 800712c:	6078      	str	r0, [r7, #4]
 800712e:	460b      	mov	r3, r1
 8007130:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007132:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007136:	f002 f89d 	bl	8009274 <USBD_static_malloc>
 800713a:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	2b00      	cmp	r3, #0
 8007140:	d105      	bne.n	800714e <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	2200      	movs	r2, #0
 8007146:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800714a:	2302      	movs	r3, #2
 800714c:	e066      	b.n	800721c <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	68fa      	ldr	r2, [r7, #12]
 8007152:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	7c1b      	ldrb	r3, [r3, #16]
 800715a:	2b00      	cmp	r3, #0
 800715c:	d119      	bne.n	8007192 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800715e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007162:	2202      	movs	r2, #2
 8007164:	2181      	movs	r1, #129	; 0x81
 8007166:	6878      	ldr	r0, [r7, #4]
 8007168:	f001 ff29 	bl	8008fbe <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2201      	movs	r2, #1
 8007170:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007172:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007176:	2202      	movs	r2, #2
 8007178:	2101      	movs	r1, #1
 800717a:	6878      	ldr	r0, [r7, #4]
 800717c:	f001 ff1f 	bl	8008fbe <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	2201      	movs	r2, #1
 8007184:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	2210      	movs	r2, #16
 800718c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8007190:	e016      	b.n	80071c0 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007192:	2340      	movs	r3, #64	; 0x40
 8007194:	2202      	movs	r2, #2
 8007196:	2181      	movs	r1, #129	; 0x81
 8007198:	6878      	ldr	r0, [r7, #4]
 800719a:	f001 ff10 	bl	8008fbe <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	2201      	movs	r2, #1
 80071a2:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80071a4:	2340      	movs	r3, #64	; 0x40
 80071a6:	2202      	movs	r2, #2
 80071a8:	2101      	movs	r1, #1
 80071aa:	6878      	ldr	r0, [r7, #4]
 80071ac:	f001 ff07 	bl	8008fbe <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	2201      	movs	r2, #1
 80071b4:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	2210      	movs	r2, #16
 80071bc:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80071c0:	2308      	movs	r3, #8
 80071c2:	2203      	movs	r2, #3
 80071c4:	2182      	movs	r1, #130	; 0x82
 80071c6:	6878      	ldr	r0, [r7, #4]
 80071c8:	f001 fef9 	bl	8008fbe <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	2201      	movs	r2, #1
 80071d0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	2200      	movs	r2, #0
 80071e2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	2200      	movs	r2, #0
 80071ea:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	7c1b      	ldrb	r3, [r3, #16]
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d109      	bne.n	800720a <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80071fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007200:	2101      	movs	r1, #1
 8007202:	6878      	ldr	r0, [r7, #4]
 8007204:	f001 ffcb 	bl	800919e <USBD_LL_PrepareReceive>
 8007208:	e007      	b.n	800721a <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007210:	2340      	movs	r3, #64	; 0x40
 8007212:	2101      	movs	r1, #1
 8007214:	6878      	ldr	r0, [r7, #4]
 8007216:	f001 ffc2 	bl	800919e <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800721a:	2300      	movs	r3, #0
}
 800721c:	4618      	mov	r0, r3
 800721e:	3710      	adds	r7, #16
 8007220:	46bd      	mov	sp, r7
 8007222:	bd80      	pop	{r7, pc}

08007224 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007224:	b580      	push	{r7, lr}
 8007226:	b082      	sub	sp, #8
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]
 800722c:	460b      	mov	r3, r1
 800722e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8007230:	2181      	movs	r1, #129	; 0x81
 8007232:	6878      	ldr	r0, [r7, #4]
 8007234:	f001 fee9 	bl	800900a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	2200      	movs	r2, #0
 800723c:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800723e:	2101      	movs	r1, #1
 8007240:	6878      	ldr	r0, [r7, #4]
 8007242:	f001 fee2 	bl	800900a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	2200      	movs	r2, #0
 800724a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800724e:	2182      	movs	r1, #130	; 0x82
 8007250:	6878      	ldr	r0, [r7, #4]
 8007252:	f001 feda 	bl	800900a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	2200      	movs	r2, #0
 800725a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	2200      	movs	r2, #0
 8007262:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800726c:	2b00      	cmp	r3, #0
 800726e:	d00e      	beq.n	800728e <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007276:	685b      	ldr	r3, [r3, #4]
 8007278:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007280:	4618      	mov	r0, r3
 8007282:	f002 f805 	bl	8009290 <USBD_static_free>
    pdev->pClassData = NULL;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	2200      	movs	r2, #0
 800728a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800728e:	2300      	movs	r3, #0
}
 8007290:	4618      	mov	r0, r3
 8007292:	3708      	adds	r7, #8
 8007294:	46bd      	mov	sp, r7
 8007296:	bd80      	pop	{r7, pc}

08007298 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007298:	b580      	push	{r7, lr}
 800729a:	b086      	sub	sp, #24
 800729c:	af00      	add	r7, sp, #0
 800729e:	6078      	str	r0, [r7, #4]
 80072a0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80072a8:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80072aa:	2300      	movs	r3, #0
 80072ac:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80072ae:	2300      	movs	r3, #0
 80072b0:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 80072b2:	2300      	movs	r3, #0
 80072b4:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80072b6:	683b      	ldr	r3, [r7, #0]
 80072b8:	781b      	ldrb	r3, [r3, #0]
 80072ba:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d03a      	beq.n	8007338 <USBD_CDC_Setup+0xa0>
 80072c2:	2b20      	cmp	r3, #32
 80072c4:	f040 8097 	bne.w	80073f6 <USBD_CDC_Setup+0x15e>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80072c8:	683b      	ldr	r3, [r7, #0]
 80072ca:	88db      	ldrh	r3, [r3, #6]
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d029      	beq.n	8007324 <USBD_CDC_Setup+0x8c>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80072d0:	683b      	ldr	r3, [r7, #0]
 80072d2:	781b      	ldrb	r3, [r3, #0]
 80072d4:	b25b      	sxtb	r3, r3
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	da11      	bge.n	80072fe <USBD_CDC_Setup+0x66>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80072e0:	689b      	ldr	r3, [r3, #8]
 80072e2:	683a      	ldr	r2, [r7, #0]
 80072e4:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 80072e6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80072e8:	683a      	ldr	r2, [r7, #0]
 80072ea:	88d2      	ldrh	r2, [r2, #6]
 80072ec:	4798      	blx	r3
                                                            req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 80072ee:	6939      	ldr	r1, [r7, #16]
 80072f0:	683b      	ldr	r3, [r7, #0]
 80072f2:	88db      	ldrh	r3, [r3, #6]
 80072f4:	461a      	mov	r2, r3
 80072f6:	6878      	ldr	r0, [r7, #4]
 80072f8:	f001 fa8d 	bl	8008816 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 80072fc:	e082      	b.n	8007404 <USBD_CDC_Setup+0x16c>
          hcdc->CmdOpCode = req->bRequest;
 80072fe:	683b      	ldr	r3, [r7, #0]
 8007300:	785a      	ldrb	r2, [r3, #1]
 8007302:	693b      	ldr	r3, [r7, #16]
 8007304:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8007308:	683b      	ldr	r3, [r7, #0]
 800730a:	88db      	ldrh	r3, [r3, #6]
 800730c:	b2da      	uxtb	r2, r3
 800730e:	693b      	ldr	r3, [r7, #16]
 8007310:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8007314:	6939      	ldr	r1, [r7, #16]
 8007316:	683b      	ldr	r3, [r7, #0]
 8007318:	88db      	ldrh	r3, [r3, #6]
 800731a:	461a      	mov	r2, r3
 800731c:	6878      	ldr	r0, [r7, #4]
 800731e:	f001 faa6 	bl	800886e <USBD_CtlPrepareRx>
      break;
 8007322:	e06f      	b.n	8007404 <USBD_CDC_Setup+0x16c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800732a:	689b      	ldr	r3, [r3, #8]
 800732c:	683a      	ldr	r2, [r7, #0]
 800732e:	7850      	ldrb	r0, [r2, #1]
 8007330:	2200      	movs	r2, #0
 8007332:	6839      	ldr	r1, [r7, #0]
 8007334:	4798      	blx	r3
      break;
 8007336:	e065      	b.n	8007404 <USBD_CDC_Setup+0x16c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007338:	683b      	ldr	r3, [r7, #0]
 800733a:	785b      	ldrb	r3, [r3, #1]
 800733c:	2b0b      	cmp	r3, #11
 800733e:	d84f      	bhi.n	80073e0 <USBD_CDC_Setup+0x148>
 8007340:	a201      	add	r2, pc, #4	; (adr r2, 8007348 <USBD_CDC_Setup+0xb0>)
 8007342:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007346:	bf00      	nop
 8007348:	08007379 	.word	0x08007379
 800734c:	080073ef 	.word	0x080073ef
 8007350:	080073e1 	.word	0x080073e1
 8007354:	080073e1 	.word	0x080073e1
 8007358:	080073e1 	.word	0x080073e1
 800735c:	080073e1 	.word	0x080073e1
 8007360:	080073e1 	.word	0x080073e1
 8007364:	080073e1 	.word	0x080073e1
 8007368:	080073e1 	.word	0x080073e1
 800736c:	080073e1 	.word	0x080073e1
 8007370:	080073a1 	.word	0x080073a1
 8007374:	080073c9 	.word	0x080073c9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800737e:	2b03      	cmp	r3, #3
 8007380:	d107      	bne.n	8007392 <USBD_CDC_Setup+0xfa>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007382:	f107 030c 	add.w	r3, r7, #12
 8007386:	2202      	movs	r2, #2
 8007388:	4619      	mov	r1, r3
 800738a:	6878      	ldr	r0, [r7, #4]
 800738c:	f001 fa43 	bl	8008816 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007390:	e030      	b.n	80073f4 <USBD_CDC_Setup+0x15c>
            USBD_CtlError(pdev, req);
 8007392:	6839      	ldr	r1, [r7, #0]
 8007394:	6878      	ldr	r0, [r7, #4]
 8007396:	f001 f9cd 	bl	8008734 <USBD_CtlError>
            ret = USBD_FAIL;
 800739a:	2303      	movs	r3, #3
 800739c:	75fb      	strb	r3, [r7, #23]
          break;
 800739e:	e029      	b.n	80073f4 <USBD_CDC_Setup+0x15c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80073a6:	2b03      	cmp	r3, #3
 80073a8:	d107      	bne.n	80073ba <USBD_CDC_Setup+0x122>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80073aa:	f107 030f 	add.w	r3, r7, #15
 80073ae:	2201      	movs	r2, #1
 80073b0:	4619      	mov	r1, r3
 80073b2:	6878      	ldr	r0, [r7, #4]
 80073b4:	f001 fa2f 	bl	8008816 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80073b8:	e01c      	b.n	80073f4 <USBD_CDC_Setup+0x15c>
            USBD_CtlError(pdev, req);
 80073ba:	6839      	ldr	r1, [r7, #0]
 80073bc:	6878      	ldr	r0, [r7, #4]
 80073be:	f001 f9b9 	bl	8008734 <USBD_CtlError>
            ret = USBD_FAIL;
 80073c2:	2303      	movs	r3, #3
 80073c4:	75fb      	strb	r3, [r7, #23]
          break;
 80073c6:	e015      	b.n	80073f4 <USBD_CDC_Setup+0x15c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80073ce:	2b03      	cmp	r3, #3
 80073d0:	d00f      	beq.n	80073f2 <USBD_CDC_Setup+0x15a>
          {
            USBD_CtlError(pdev, req);
 80073d2:	6839      	ldr	r1, [r7, #0]
 80073d4:	6878      	ldr	r0, [r7, #4]
 80073d6:	f001 f9ad 	bl	8008734 <USBD_CtlError>
            ret = USBD_FAIL;
 80073da:	2303      	movs	r3, #3
 80073dc:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80073de:	e008      	b.n	80073f2 <USBD_CDC_Setup+0x15a>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80073e0:	6839      	ldr	r1, [r7, #0]
 80073e2:	6878      	ldr	r0, [r7, #4]
 80073e4:	f001 f9a6 	bl	8008734 <USBD_CtlError>
          ret = USBD_FAIL;
 80073e8:	2303      	movs	r3, #3
 80073ea:	75fb      	strb	r3, [r7, #23]
          break;
 80073ec:	e002      	b.n	80073f4 <USBD_CDC_Setup+0x15c>
          break;
 80073ee:	bf00      	nop
 80073f0:	e008      	b.n	8007404 <USBD_CDC_Setup+0x16c>
          break;
 80073f2:	bf00      	nop
      }
      break;
 80073f4:	e006      	b.n	8007404 <USBD_CDC_Setup+0x16c>

    default:
      USBD_CtlError(pdev, req);
 80073f6:	6839      	ldr	r1, [r7, #0]
 80073f8:	6878      	ldr	r0, [r7, #4]
 80073fa:	f001 f99b 	bl	8008734 <USBD_CtlError>
      ret = USBD_FAIL;
 80073fe:	2303      	movs	r3, #3
 8007400:	75fb      	strb	r3, [r7, #23]
      break;
 8007402:	bf00      	nop
  }

  return (uint8_t)ret;
 8007404:	7dfb      	ldrb	r3, [r7, #23]
}
 8007406:	4618      	mov	r0, r3
 8007408:	3718      	adds	r7, #24
 800740a:	46bd      	mov	sp, r7
 800740c:	bd80      	pop	{r7, pc}
 800740e:	bf00      	nop

08007410 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007410:	b580      	push	{r7, lr}
 8007412:	b084      	sub	sp, #16
 8007414:	af00      	add	r7, sp, #0
 8007416:	6078      	str	r0, [r7, #4]
 8007418:	460b      	mov	r3, r1
 800741a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007422:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800742a:	2b00      	cmp	r3, #0
 800742c:	d101      	bne.n	8007432 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800742e:	2303      	movs	r3, #3
 8007430:	e04f      	b.n	80074d2 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007438:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800743a:	78fa      	ldrb	r2, [r7, #3]
 800743c:	6879      	ldr	r1, [r7, #4]
 800743e:	4613      	mov	r3, r2
 8007440:	009b      	lsls	r3, r3, #2
 8007442:	4413      	add	r3, r2
 8007444:	009b      	lsls	r3, r3, #2
 8007446:	440b      	add	r3, r1
 8007448:	3318      	adds	r3, #24
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	2b00      	cmp	r3, #0
 800744e:	d029      	beq.n	80074a4 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8007450:	78fa      	ldrb	r2, [r7, #3]
 8007452:	6879      	ldr	r1, [r7, #4]
 8007454:	4613      	mov	r3, r2
 8007456:	009b      	lsls	r3, r3, #2
 8007458:	4413      	add	r3, r2
 800745a:	009b      	lsls	r3, r3, #2
 800745c:	440b      	add	r3, r1
 800745e:	3318      	adds	r3, #24
 8007460:	681a      	ldr	r2, [r3, #0]
 8007462:	78f9      	ldrb	r1, [r7, #3]
 8007464:	68f8      	ldr	r0, [r7, #12]
 8007466:	460b      	mov	r3, r1
 8007468:	009b      	lsls	r3, r3, #2
 800746a:	440b      	add	r3, r1
 800746c:	00db      	lsls	r3, r3, #3
 800746e:	4403      	add	r3, r0
 8007470:	3338      	adds	r3, #56	; 0x38
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	fbb2 f1f3 	udiv	r1, r2, r3
 8007478:	fb03 f301 	mul.w	r3, r3, r1
 800747c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800747e:	2b00      	cmp	r3, #0
 8007480:	d110      	bne.n	80074a4 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8007482:	78fa      	ldrb	r2, [r7, #3]
 8007484:	6879      	ldr	r1, [r7, #4]
 8007486:	4613      	mov	r3, r2
 8007488:	009b      	lsls	r3, r3, #2
 800748a:	4413      	add	r3, r2
 800748c:	009b      	lsls	r3, r3, #2
 800748e:	440b      	add	r3, r1
 8007490:	3318      	adds	r3, #24
 8007492:	2200      	movs	r2, #0
 8007494:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007496:	78f9      	ldrb	r1, [r7, #3]
 8007498:	2300      	movs	r3, #0
 800749a:	2200      	movs	r2, #0
 800749c:	6878      	ldr	r0, [r7, #4]
 800749e:	f001 fe5d 	bl	800915c <USBD_LL_Transmit>
 80074a2:	e015      	b.n	80074d0 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 80074a4:	68bb      	ldr	r3, [r7, #8]
 80074a6:	2200      	movs	r2, #0
 80074a8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80074b2:	691b      	ldr	r3, [r3, #16]
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d00b      	beq.n	80074d0 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80074be:	691b      	ldr	r3, [r3, #16]
 80074c0:	68ba      	ldr	r2, [r7, #8]
 80074c2:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80074c6:	68ba      	ldr	r2, [r7, #8]
 80074c8:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80074cc:	78fa      	ldrb	r2, [r7, #3]
 80074ce:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80074d0:	2300      	movs	r3, #0
}
 80074d2:	4618      	mov	r0, r3
 80074d4:	3710      	adds	r7, #16
 80074d6:	46bd      	mov	sp, r7
 80074d8:	bd80      	pop	{r7, pc}

080074da <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80074da:	b580      	push	{r7, lr}
 80074dc:	b084      	sub	sp, #16
 80074de:	af00      	add	r7, sp, #0
 80074e0:	6078      	str	r0, [r7, #4]
 80074e2:	460b      	mov	r3, r1
 80074e4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80074ec:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d101      	bne.n	80074fc <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80074f8:	2303      	movs	r3, #3
 80074fa:	e015      	b.n	8007528 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80074fc:	78fb      	ldrb	r3, [r7, #3]
 80074fe:	4619      	mov	r1, r3
 8007500:	6878      	ldr	r0, [r7, #4]
 8007502:	f001 fe6d 	bl	80091e0 <USBD_LL_GetRxDataSize>
 8007506:	4602      	mov	r2, r0
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007514:	68db      	ldr	r3, [r3, #12]
 8007516:	68fa      	ldr	r2, [r7, #12]
 8007518:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800751c:	68fa      	ldr	r2, [r7, #12]
 800751e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007522:	4611      	mov	r1, r2
 8007524:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007526:	2300      	movs	r3, #0
}
 8007528:	4618      	mov	r0, r3
 800752a:	3710      	adds	r7, #16
 800752c:	46bd      	mov	sp, r7
 800752e:	bd80      	pop	{r7, pc}

08007530 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007530:	b580      	push	{r7, lr}
 8007532:	b084      	sub	sp, #16
 8007534:	af00      	add	r7, sp, #0
 8007536:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800753e:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007546:	2b00      	cmp	r3, #0
 8007548:	d015      	beq.n	8007576 <USBD_CDC_EP0_RxReady+0x46>
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007550:	2bff      	cmp	r3, #255	; 0xff
 8007552:	d010      	beq.n	8007576 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800755a:	689b      	ldr	r3, [r3, #8]
 800755c:	68fa      	ldr	r2, [r7, #12]
 800755e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8007562:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8007564:	68fa      	ldr	r2, [r7, #12]
 8007566:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800756a:	b292      	uxth	r2, r2
 800756c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	22ff      	movs	r2, #255	; 0xff
 8007572:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8007576:	2300      	movs	r3, #0
}
 8007578:	4618      	mov	r0, r3
 800757a:	3710      	adds	r7, #16
 800757c:	46bd      	mov	sp, r7
 800757e:	bd80      	pop	{r7, pc}

08007580 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007580:	b480      	push	{r7}
 8007582:	b083      	sub	sp, #12
 8007584:	af00      	add	r7, sp, #0
 8007586:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	2243      	movs	r2, #67	; 0x43
 800758c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800758e:	4b03      	ldr	r3, [pc, #12]	; (800759c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8007590:	4618      	mov	r0, r3
 8007592:	370c      	adds	r7, #12
 8007594:	46bd      	mov	sp, r7
 8007596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759a:	4770      	bx	lr
 800759c:	20000094 	.word	0x20000094

080075a0 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80075a0:	b480      	push	{r7}
 80075a2:	b083      	sub	sp, #12
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	2243      	movs	r2, #67	; 0x43
 80075ac:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 80075ae:	4b03      	ldr	r3, [pc, #12]	; (80075bc <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80075b0:	4618      	mov	r0, r3
 80075b2:	370c      	adds	r7, #12
 80075b4:	46bd      	mov	sp, r7
 80075b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ba:	4770      	bx	lr
 80075bc:	20000050 	.word	0x20000050

080075c0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80075c0:	b480      	push	{r7}
 80075c2:	b083      	sub	sp, #12
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	2243      	movs	r2, #67	; 0x43
 80075cc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 80075ce:	4b03      	ldr	r3, [pc, #12]	; (80075dc <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80075d0:	4618      	mov	r0, r3
 80075d2:	370c      	adds	r7, #12
 80075d4:	46bd      	mov	sp, r7
 80075d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075da:	4770      	bx	lr
 80075dc:	200000d8 	.word	0x200000d8

080075e0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80075e0:	b480      	push	{r7}
 80075e2:	b083      	sub	sp, #12
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	220a      	movs	r2, #10
 80075ec:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80075ee:	4b03      	ldr	r3, [pc, #12]	; (80075fc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80075f0:	4618      	mov	r0, r3
 80075f2:	370c      	adds	r7, #12
 80075f4:	46bd      	mov	sp, r7
 80075f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075fa:	4770      	bx	lr
 80075fc:	2000000c 	.word	0x2000000c

08007600 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007600:	b480      	push	{r7}
 8007602:	b083      	sub	sp, #12
 8007604:	af00      	add	r7, sp, #0
 8007606:	6078      	str	r0, [r7, #4]
 8007608:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800760a:	683b      	ldr	r3, [r7, #0]
 800760c:	2b00      	cmp	r3, #0
 800760e:	d101      	bne.n	8007614 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007610:	2303      	movs	r3, #3
 8007612:	e004      	b.n	800761e <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	683a      	ldr	r2, [r7, #0]
 8007618:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800761c:	2300      	movs	r3, #0
}
 800761e:	4618      	mov	r0, r3
 8007620:	370c      	adds	r7, #12
 8007622:	46bd      	mov	sp, r7
 8007624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007628:	4770      	bx	lr

0800762a <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800762a:	b480      	push	{r7}
 800762c:	b087      	sub	sp, #28
 800762e:	af00      	add	r7, sp, #0
 8007630:	60f8      	str	r0, [r7, #12]
 8007632:	60b9      	str	r1, [r7, #8]
 8007634:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800763c:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800763e:	697b      	ldr	r3, [r7, #20]
 8007640:	68ba      	ldr	r2, [r7, #8]
 8007642:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007646:	697b      	ldr	r3, [r7, #20]
 8007648:	687a      	ldr	r2, [r7, #4]
 800764a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800764e:	2300      	movs	r3, #0
}
 8007650:	4618      	mov	r0, r3
 8007652:	371c      	adds	r7, #28
 8007654:	46bd      	mov	sp, r7
 8007656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765a:	4770      	bx	lr

0800765c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800765c:	b480      	push	{r7}
 800765e:	b085      	sub	sp, #20
 8007660:	af00      	add	r7, sp, #0
 8007662:	6078      	str	r0, [r7, #4]
 8007664:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800766c:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	683a      	ldr	r2, [r7, #0]
 8007672:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8007676:	2300      	movs	r3, #0
}
 8007678:	4618      	mov	r0, r3
 800767a:	3714      	adds	r7, #20
 800767c:	46bd      	mov	sp, r7
 800767e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007682:	4770      	bx	lr

08007684 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007684:	b580      	push	{r7, lr}
 8007686:	b084      	sub	sp, #16
 8007688:	af00      	add	r7, sp, #0
 800768a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007692:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8007694:	2301      	movs	r3, #1
 8007696:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d101      	bne.n	80076a6 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80076a2:	2303      	movs	r3, #3
 80076a4:	e01a      	b.n	80076dc <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 80076a6:	68bb      	ldr	r3, [r7, #8]
 80076a8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d114      	bne.n	80076da <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80076b0:	68bb      	ldr	r3, [r7, #8]
 80076b2:	2201      	movs	r2, #1
 80076b4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80076b8:	68bb      	ldr	r3, [r7, #8]
 80076ba:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 80076c2:	68bb      	ldr	r3, [r7, #8]
 80076c4:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80076c8:	68bb      	ldr	r3, [r7, #8]
 80076ca:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80076ce:	2181      	movs	r1, #129	; 0x81
 80076d0:	6878      	ldr	r0, [r7, #4]
 80076d2:	f001 fd43 	bl	800915c <USBD_LL_Transmit>

    ret = USBD_OK;
 80076d6:	2300      	movs	r3, #0
 80076d8:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80076da:	7bfb      	ldrb	r3, [r7, #15]
}
 80076dc:	4618      	mov	r0, r3
 80076de:	3710      	adds	r7, #16
 80076e0:	46bd      	mov	sp, r7
 80076e2:	bd80      	pop	{r7, pc}

080076e4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80076e4:	b580      	push	{r7, lr}
 80076e6:	b084      	sub	sp, #16
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80076f2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d101      	bne.n	8007702 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80076fe:	2303      	movs	r3, #3
 8007700:	e016      	b.n	8007730 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	7c1b      	ldrb	r3, [r3, #16]
 8007706:	2b00      	cmp	r3, #0
 8007708:	d109      	bne.n	800771e <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007710:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007714:	2101      	movs	r1, #1
 8007716:	6878      	ldr	r0, [r7, #4]
 8007718:	f001 fd41 	bl	800919e <USBD_LL_PrepareReceive>
 800771c:	e007      	b.n	800772e <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007724:	2340      	movs	r3, #64	; 0x40
 8007726:	2101      	movs	r1, #1
 8007728:	6878      	ldr	r0, [r7, #4]
 800772a:	f001 fd38 	bl	800919e <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800772e:	2300      	movs	r3, #0
}
 8007730:	4618      	mov	r0, r3
 8007732:	3710      	adds	r7, #16
 8007734:	46bd      	mov	sp, r7
 8007736:	bd80      	pop	{r7, pc}

08007738 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007738:	b580      	push	{r7, lr}
 800773a:	b086      	sub	sp, #24
 800773c:	af00      	add	r7, sp, #0
 800773e:	60f8      	str	r0, [r7, #12]
 8007740:	60b9      	str	r1, [r7, #8]
 8007742:	4613      	mov	r3, r2
 8007744:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	2b00      	cmp	r3, #0
 800774a:	d101      	bne.n	8007750 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800774c:	2303      	movs	r3, #3
 800774e:	e01f      	b.n	8007790 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	2200      	movs	r2, #0
 8007754:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	2200      	movs	r2, #0
 800775c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	2200      	movs	r2, #0
 8007764:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007768:	68bb      	ldr	r3, [r7, #8]
 800776a:	2b00      	cmp	r3, #0
 800776c:	d003      	beq.n	8007776 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	68ba      	ldr	r2, [r7, #8]
 8007772:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	2201      	movs	r2, #1
 800777a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	79fa      	ldrb	r2, [r7, #7]
 8007782:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007784:	68f8      	ldr	r0, [r7, #12]
 8007786:	f001 fb9f 	bl	8008ec8 <USBD_LL_Init>
 800778a:	4603      	mov	r3, r0
 800778c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800778e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007790:	4618      	mov	r0, r3
 8007792:	3718      	adds	r7, #24
 8007794:	46bd      	mov	sp, r7
 8007796:	bd80      	pop	{r7, pc}

08007798 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007798:	b580      	push	{r7, lr}
 800779a:	b084      	sub	sp, #16
 800779c:	af00      	add	r7, sp, #0
 800779e:	6078      	str	r0, [r7, #4]
 80077a0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80077a2:	2300      	movs	r3, #0
 80077a4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80077a6:	683b      	ldr	r3, [r7, #0]
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d101      	bne.n	80077b0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80077ac:	2303      	movs	r3, #3
 80077ae:	e016      	b.n	80077de <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	683a      	ldr	r2, [r7, #0]
 80077b4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d00b      	beq.n	80077dc <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077cc:	f107 020e 	add.w	r2, r7, #14
 80077d0:	4610      	mov	r0, r2
 80077d2:	4798      	blx	r3
 80077d4:	4602      	mov	r2, r0
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 80077dc:	2300      	movs	r3, #0
}
 80077de:	4618      	mov	r0, r3
 80077e0:	3710      	adds	r7, #16
 80077e2:	46bd      	mov	sp, r7
 80077e4:	bd80      	pop	{r7, pc}

080077e6 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80077e6:	b580      	push	{r7, lr}
 80077e8:	b082      	sub	sp, #8
 80077ea:	af00      	add	r7, sp, #0
 80077ec:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80077ee:	6878      	ldr	r0, [r7, #4]
 80077f0:	f001 fbca 	bl	8008f88 <USBD_LL_Start>
 80077f4:	4603      	mov	r3, r0
}
 80077f6:	4618      	mov	r0, r3
 80077f8:	3708      	adds	r7, #8
 80077fa:	46bd      	mov	sp, r7
 80077fc:	bd80      	pop	{r7, pc}

080077fe <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80077fe:	b480      	push	{r7}
 8007800:	b083      	sub	sp, #12
 8007802:	af00      	add	r7, sp, #0
 8007804:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007806:	2300      	movs	r3, #0
}
 8007808:	4618      	mov	r0, r3
 800780a:	370c      	adds	r7, #12
 800780c:	46bd      	mov	sp, r7
 800780e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007812:	4770      	bx	lr

08007814 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007814:	b580      	push	{r7, lr}
 8007816:	b084      	sub	sp, #16
 8007818:	af00      	add	r7, sp, #0
 800781a:	6078      	str	r0, [r7, #4]
 800781c:	460b      	mov	r3, r1
 800781e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007820:	2303      	movs	r3, #3
 8007822:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800782a:	2b00      	cmp	r3, #0
 800782c:	d009      	beq.n	8007842 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	78fa      	ldrb	r2, [r7, #3]
 8007838:	4611      	mov	r1, r2
 800783a:	6878      	ldr	r0, [r7, #4]
 800783c:	4798      	blx	r3
 800783e:	4603      	mov	r3, r0
 8007840:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007842:	7bfb      	ldrb	r3, [r7, #15]
}
 8007844:	4618      	mov	r0, r3
 8007846:	3710      	adds	r7, #16
 8007848:	46bd      	mov	sp, r7
 800784a:	bd80      	pop	{r7, pc}

0800784c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800784c:	b580      	push	{r7, lr}
 800784e:	b082      	sub	sp, #8
 8007850:	af00      	add	r7, sp, #0
 8007852:	6078      	str	r0, [r7, #4]
 8007854:	460b      	mov	r3, r1
 8007856:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800785e:	2b00      	cmp	r3, #0
 8007860:	d007      	beq.n	8007872 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007868:	685b      	ldr	r3, [r3, #4]
 800786a:	78fa      	ldrb	r2, [r7, #3]
 800786c:	4611      	mov	r1, r2
 800786e:	6878      	ldr	r0, [r7, #4]
 8007870:	4798      	blx	r3
  }

  return USBD_OK;
 8007872:	2300      	movs	r3, #0
}
 8007874:	4618      	mov	r0, r3
 8007876:	3708      	adds	r7, #8
 8007878:	46bd      	mov	sp, r7
 800787a:	bd80      	pop	{r7, pc}

0800787c <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800787c:	b580      	push	{r7, lr}
 800787e:	b084      	sub	sp, #16
 8007880:	af00      	add	r7, sp, #0
 8007882:	6078      	str	r0, [r7, #4]
 8007884:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800788c:	6839      	ldr	r1, [r7, #0]
 800788e:	4618      	mov	r0, r3
 8007890:	f000 ff16 	bl	80086c0 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	2201      	movs	r2, #1
 8007898:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80078a2:	461a      	mov	r2, r3
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80078b0:	f003 031f 	and.w	r3, r3, #31
 80078b4:	2b01      	cmp	r3, #1
 80078b6:	d00e      	beq.n	80078d6 <USBD_LL_SetupStage+0x5a>
 80078b8:	2b01      	cmp	r3, #1
 80078ba:	d302      	bcc.n	80078c2 <USBD_LL_SetupStage+0x46>
 80078bc:	2b02      	cmp	r3, #2
 80078be:	d014      	beq.n	80078ea <USBD_LL_SetupStage+0x6e>
 80078c0:	e01d      	b.n	80078fe <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80078c8:	4619      	mov	r1, r3
 80078ca:	6878      	ldr	r0, [r7, #4]
 80078cc:	f000 f9d6 	bl	8007c7c <USBD_StdDevReq>
 80078d0:	4603      	mov	r3, r0
 80078d2:	73fb      	strb	r3, [r7, #15]
      break;
 80078d4:	e020      	b.n	8007918 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80078dc:	4619      	mov	r1, r3
 80078de:	6878      	ldr	r0, [r7, #4]
 80078e0:	f000 fa3a 	bl	8007d58 <USBD_StdItfReq>
 80078e4:	4603      	mov	r3, r0
 80078e6:	73fb      	strb	r3, [r7, #15]
      break;
 80078e8:	e016      	b.n	8007918 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80078f0:	4619      	mov	r1, r3
 80078f2:	6878      	ldr	r0, [r7, #4]
 80078f4:	f000 fa76 	bl	8007de4 <USBD_StdEPReq>
 80078f8:	4603      	mov	r3, r0
 80078fa:	73fb      	strb	r3, [r7, #15]
      break;
 80078fc:	e00c      	b.n	8007918 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007904:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007908:	b2db      	uxtb	r3, r3
 800790a:	4619      	mov	r1, r3
 800790c:	6878      	ldr	r0, [r7, #4]
 800790e:	f001 fb9b 	bl	8009048 <USBD_LL_StallEP>
 8007912:	4603      	mov	r3, r0
 8007914:	73fb      	strb	r3, [r7, #15]
      break;
 8007916:	bf00      	nop
  }

  return ret;
 8007918:	7bfb      	ldrb	r3, [r7, #15]
}
 800791a:	4618      	mov	r0, r3
 800791c:	3710      	adds	r7, #16
 800791e:	46bd      	mov	sp, r7
 8007920:	bd80      	pop	{r7, pc}

08007922 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007922:	b580      	push	{r7, lr}
 8007924:	b086      	sub	sp, #24
 8007926:	af00      	add	r7, sp, #0
 8007928:	60f8      	str	r0, [r7, #12]
 800792a:	460b      	mov	r3, r1
 800792c:	607a      	str	r2, [r7, #4]
 800792e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007930:	7afb      	ldrb	r3, [r7, #11]
 8007932:	2b00      	cmp	r3, #0
 8007934:	d137      	bne.n	80079a6 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800793c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007944:	2b03      	cmp	r3, #3
 8007946:	d14a      	bne.n	80079de <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8007948:	693b      	ldr	r3, [r7, #16]
 800794a:	689a      	ldr	r2, [r3, #8]
 800794c:	693b      	ldr	r3, [r7, #16]
 800794e:	68db      	ldr	r3, [r3, #12]
 8007950:	429a      	cmp	r2, r3
 8007952:	d913      	bls.n	800797c <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007954:	693b      	ldr	r3, [r7, #16]
 8007956:	689a      	ldr	r2, [r3, #8]
 8007958:	693b      	ldr	r3, [r7, #16]
 800795a:	68db      	ldr	r3, [r3, #12]
 800795c:	1ad2      	subs	r2, r2, r3
 800795e:	693b      	ldr	r3, [r7, #16]
 8007960:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007962:	693b      	ldr	r3, [r7, #16]
 8007964:	68da      	ldr	r2, [r3, #12]
 8007966:	693b      	ldr	r3, [r7, #16]
 8007968:	689b      	ldr	r3, [r3, #8]
 800796a:	4293      	cmp	r3, r2
 800796c:	bf28      	it	cs
 800796e:	4613      	movcs	r3, r2
 8007970:	461a      	mov	r2, r3
 8007972:	6879      	ldr	r1, [r7, #4]
 8007974:	68f8      	ldr	r0, [r7, #12]
 8007976:	f000 ff97 	bl	80088a8 <USBD_CtlContinueRx>
 800797a:	e030      	b.n	80079de <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007982:	691b      	ldr	r3, [r3, #16]
 8007984:	2b00      	cmp	r3, #0
 8007986:	d00a      	beq.n	800799e <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800798e:	2b03      	cmp	r3, #3
 8007990:	d105      	bne.n	800799e <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007998:	691b      	ldr	r3, [r3, #16]
 800799a:	68f8      	ldr	r0, [r7, #12]
 800799c:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 800799e:	68f8      	ldr	r0, [r7, #12]
 80079a0:	f000 ff93 	bl	80088ca <USBD_CtlSendStatus>
 80079a4:	e01b      	b.n	80079de <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079ac:	699b      	ldr	r3, [r3, #24]
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d013      	beq.n	80079da <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80079b8:	2b03      	cmp	r3, #3
 80079ba:	d10e      	bne.n	80079da <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079c2:	699b      	ldr	r3, [r3, #24]
 80079c4:	7afa      	ldrb	r2, [r7, #11]
 80079c6:	4611      	mov	r1, r2
 80079c8:	68f8      	ldr	r0, [r7, #12]
 80079ca:	4798      	blx	r3
 80079cc:	4603      	mov	r3, r0
 80079ce:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 80079d0:	7dfb      	ldrb	r3, [r7, #23]
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d003      	beq.n	80079de <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 80079d6:	7dfb      	ldrb	r3, [r7, #23]
 80079d8:	e002      	b.n	80079e0 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80079da:	2303      	movs	r3, #3
 80079dc:	e000      	b.n	80079e0 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 80079de:	2300      	movs	r3, #0
}
 80079e0:	4618      	mov	r0, r3
 80079e2:	3718      	adds	r7, #24
 80079e4:	46bd      	mov	sp, r7
 80079e6:	bd80      	pop	{r7, pc}

080079e8 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80079e8:	b580      	push	{r7, lr}
 80079ea:	b086      	sub	sp, #24
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	60f8      	str	r0, [r7, #12]
 80079f0:	460b      	mov	r3, r1
 80079f2:	607a      	str	r2, [r7, #4]
 80079f4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80079f6:	7afb      	ldrb	r3, [r7, #11]
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d16a      	bne.n	8007ad2 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	3314      	adds	r3, #20
 8007a00:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007a08:	2b02      	cmp	r3, #2
 8007a0a:	d155      	bne.n	8007ab8 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 8007a0c:	693b      	ldr	r3, [r7, #16]
 8007a0e:	689a      	ldr	r2, [r3, #8]
 8007a10:	693b      	ldr	r3, [r7, #16]
 8007a12:	68db      	ldr	r3, [r3, #12]
 8007a14:	429a      	cmp	r2, r3
 8007a16:	d914      	bls.n	8007a42 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007a18:	693b      	ldr	r3, [r7, #16]
 8007a1a:	689a      	ldr	r2, [r3, #8]
 8007a1c:	693b      	ldr	r3, [r7, #16]
 8007a1e:	68db      	ldr	r3, [r3, #12]
 8007a20:	1ad2      	subs	r2, r2, r3
 8007a22:	693b      	ldr	r3, [r7, #16]
 8007a24:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007a26:	693b      	ldr	r3, [r7, #16]
 8007a28:	689b      	ldr	r3, [r3, #8]
 8007a2a:	461a      	mov	r2, r3
 8007a2c:	6879      	ldr	r1, [r7, #4]
 8007a2e:	68f8      	ldr	r0, [r7, #12]
 8007a30:	f000 ff0c 	bl	800884c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007a34:	2300      	movs	r3, #0
 8007a36:	2200      	movs	r2, #0
 8007a38:	2100      	movs	r1, #0
 8007a3a:	68f8      	ldr	r0, [r7, #12]
 8007a3c:	f001 fbaf 	bl	800919e <USBD_LL_PrepareReceive>
 8007a40:	e03a      	b.n	8007ab8 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007a42:	693b      	ldr	r3, [r7, #16]
 8007a44:	68da      	ldr	r2, [r3, #12]
 8007a46:	693b      	ldr	r3, [r7, #16]
 8007a48:	689b      	ldr	r3, [r3, #8]
 8007a4a:	429a      	cmp	r2, r3
 8007a4c:	d11c      	bne.n	8007a88 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007a4e:	693b      	ldr	r3, [r7, #16]
 8007a50:	685a      	ldr	r2, [r3, #4]
 8007a52:	693b      	ldr	r3, [r7, #16]
 8007a54:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007a56:	429a      	cmp	r2, r3
 8007a58:	d316      	bcc.n	8007a88 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007a5a:	693b      	ldr	r3, [r7, #16]
 8007a5c:	685a      	ldr	r2, [r3, #4]
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007a64:	429a      	cmp	r2, r3
 8007a66:	d20f      	bcs.n	8007a88 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007a68:	2200      	movs	r2, #0
 8007a6a:	2100      	movs	r1, #0
 8007a6c:	68f8      	ldr	r0, [r7, #12]
 8007a6e:	f000 feed 	bl	800884c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	2200      	movs	r2, #0
 8007a76:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007a7a:	2300      	movs	r3, #0
 8007a7c:	2200      	movs	r2, #0
 8007a7e:	2100      	movs	r1, #0
 8007a80:	68f8      	ldr	r0, [r7, #12]
 8007a82:	f001 fb8c 	bl	800919e <USBD_LL_PrepareReceive>
 8007a86:	e017      	b.n	8007ab8 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a8e:	68db      	ldr	r3, [r3, #12]
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d00a      	beq.n	8007aaa <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007a9a:	2b03      	cmp	r3, #3
 8007a9c:	d105      	bne.n	8007aaa <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007aa4:	68db      	ldr	r3, [r3, #12]
 8007aa6:	68f8      	ldr	r0, [r7, #12]
 8007aa8:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007aaa:	2180      	movs	r1, #128	; 0x80
 8007aac:	68f8      	ldr	r0, [r7, #12]
 8007aae:	f001 facb 	bl	8009048 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007ab2:	68f8      	ldr	r0, [r7, #12]
 8007ab4:	f000 ff1c 	bl	80088f0 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007abe:	2b01      	cmp	r3, #1
 8007ac0:	d123      	bne.n	8007b0a <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8007ac2:	68f8      	ldr	r0, [r7, #12]
 8007ac4:	f7ff fe9b 	bl	80077fe <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	2200      	movs	r2, #0
 8007acc:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007ad0:	e01b      	b.n	8007b0a <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ad8:	695b      	ldr	r3, [r3, #20]
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d013      	beq.n	8007b06 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8007ae4:	2b03      	cmp	r3, #3
 8007ae6:	d10e      	bne.n	8007b06 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007aee:	695b      	ldr	r3, [r3, #20]
 8007af0:	7afa      	ldrb	r2, [r7, #11]
 8007af2:	4611      	mov	r1, r2
 8007af4:	68f8      	ldr	r0, [r7, #12]
 8007af6:	4798      	blx	r3
 8007af8:	4603      	mov	r3, r0
 8007afa:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8007afc:	7dfb      	ldrb	r3, [r7, #23]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d003      	beq.n	8007b0a <USBD_LL_DataInStage+0x122>
    {
      return ret;
 8007b02:	7dfb      	ldrb	r3, [r7, #23]
 8007b04:	e002      	b.n	8007b0c <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007b06:	2303      	movs	r3, #3
 8007b08:	e000      	b.n	8007b0c <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 8007b0a:	2300      	movs	r3, #0
}
 8007b0c:	4618      	mov	r0, r3
 8007b0e:	3718      	adds	r7, #24
 8007b10:	46bd      	mov	sp, r7
 8007b12:	bd80      	pop	{r7, pc}

08007b14 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007b14:	b580      	push	{r7, lr}
 8007b16:	b082      	sub	sp, #8
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	2201      	movs	r2, #1
 8007b20:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	2200      	movs	r2, #0
 8007b28:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	2200      	movs	r2, #0
 8007b30:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	2200      	movs	r2, #0
 8007b36:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d009      	beq.n	8007b58 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b4a:	685b      	ldr	r3, [r3, #4]
 8007b4c:	687a      	ldr	r2, [r7, #4]
 8007b4e:	6852      	ldr	r2, [r2, #4]
 8007b50:	b2d2      	uxtb	r2, r2
 8007b52:	4611      	mov	r1, r2
 8007b54:	6878      	ldr	r0, [r7, #4]
 8007b56:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007b58:	2340      	movs	r3, #64	; 0x40
 8007b5a:	2200      	movs	r2, #0
 8007b5c:	2100      	movs	r1, #0
 8007b5e:	6878      	ldr	r0, [r7, #4]
 8007b60:	f001 fa2d 	bl	8008fbe <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	2201      	movs	r2, #1
 8007b68:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	2240      	movs	r2, #64	; 0x40
 8007b70:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007b74:	2340      	movs	r3, #64	; 0x40
 8007b76:	2200      	movs	r2, #0
 8007b78:	2180      	movs	r1, #128	; 0x80
 8007b7a:	6878      	ldr	r0, [r7, #4]
 8007b7c:	f001 fa1f 	bl	8008fbe <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	2201      	movs	r2, #1
 8007b84:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	2240      	movs	r2, #64	; 0x40
 8007b8a:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8007b8c:	2300      	movs	r3, #0
}
 8007b8e:	4618      	mov	r0, r3
 8007b90:	3708      	adds	r7, #8
 8007b92:	46bd      	mov	sp, r7
 8007b94:	bd80      	pop	{r7, pc}

08007b96 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007b96:	b480      	push	{r7}
 8007b98:	b083      	sub	sp, #12
 8007b9a:	af00      	add	r7, sp, #0
 8007b9c:	6078      	str	r0, [r7, #4]
 8007b9e:	460b      	mov	r3, r1
 8007ba0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	78fa      	ldrb	r2, [r7, #3]
 8007ba6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007ba8:	2300      	movs	r3, #0
}
 8007baa:	4618      	mov	r0, r3
 8007bac:	370c      	adds	r7, #12
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb4:	4770      	bx	lr

08007bb6 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007bb6:	b480      	push	{r7}
 8007bb8:	b083      	sub	sp, #12
 8007bba:	af00      	add	r7, sp, #0
 8007bbc:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	2204      	movs	r2, #4
 8007bce:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007bd2:	2300      	movs	r3, #0
}
 8007bd4:	4618      	mov	r0, r3
 8007bd6:	370c      	adds	r7, #12
 8007bd8:	46bd      	mov	sp, r7
 8007bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bde:	4770      	bx	lr

08007be0 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007be0:	b480      	push	{r7}
 8007be2:	b083      	sub	sp, #12
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007bee:	2b04      	cmp	r3, #4
 8007bf0:	d105      	bne.n	8007bfe <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007bfe:	2300      	movs	r3, #0
}
 8007c00:	4618      	mov	r0, r3
 8007c02:	370c      	adds	r7, #12
 8007c04:	46bd      	mov	sp, r7
 8007c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0a:	4770      	bx	lr

08007c0c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007c0c:	b580      	push	{r7, lr}
 8007c0e:	b082      	sub	sp, #8
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c1a:	2b03      	cmp	r3, #3
 8007c1c:	d10b      	bne.n	8007c36 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c24:	69db      	ldr	r3, [r3, #28]
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d005      	beq.n	8007c36 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c30:	69db      	ldr	r3, [r3, #28]
 8007c32:	6878      	ldr	r0, [r7, #4]
 8007c34:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007c36:	2300      	movs	r3, #0
}
 8007c38:	4618      	mov	r0, r3
 8007c3a:	3708      	adds	r7, #8
 8007c3c:	46bd      	mov	sp, r7
 8007c3e:	bd80      	pop	{r7, pc}

08007c40 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007c40:	b480      	push	{r7}
 8007c42:	b087      	sub	sp, #28
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007c4c:	697b      	ldr	r3, [r7, #20]
 8007c4e:	781b      	ldrb	r3, [r3, #0]
 8007c50:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007c52:	697b      	ldr	r3, [r7, #20]
 8007c54:	3301      	adds	r3, #1
 8007c56:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007c58:	697b      	ldr	r3, [r7, #20]
 8007c5a:	781b      	ldrb	r3, [r3, #0]
 8007c5c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007c5e:	8a3b      	ldrh	r3, [r7, #16]
 8007c60:	021b      	lsls	r3, r3, #8
 8007c62:	b21a      	sxth	r2, r3
 8007c64:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007c68:	4313      	orrs	r3, r2
 8007c6a:	b21b      	sxth	r3, r3
 8007c6c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007c6e:	89fb      	ldrh	r3, [r7, #14]
}
 8007c70:	4618      	mov	r0, r3
 8007c72:	371c      	adds	r7, #28
 8007c74:	46bd      	mov	sp, r7
 8007c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7a:	4770      	bx	lr

08007c7c <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c7c:	b580      	push	{r7, lr}
 8007c7e:	b084      	sub	sp, #16
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	6078      	str	r0, [r7, #4]
 8007c84:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007c86:	2300      	movs	r3, #0
 8007c88:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007c8a:	683b      	ldr	r3, [r7, #0]
 8007c8c:	781b      	ldrb	r3, [r3, #0]
 8007c8e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007c92:	2b20      	cmp	r3, #32
 8007c94:	d004      	beq.n	8007ca0 <USBD_StdDevReq+0x24>
 8007c96:	2b40      	cmp	r3, #64	; 0x40
 8007c98:	d002      	beq.n	8007ca0 <USBD_StdDevReq+0x24>
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d00a      	beq.n	8007cb4 <USBD_StdDevReq+0x38>
 8007c9e:	e050      	b.n	8007d42 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ca6:	689b      	ldr	r3, [r3, #8]
 8007ca8:	6839      	ldr	r1, [r7, #0]
 8007caa:	6878      	ldr	r0, [r7, #4]
 8007cac:	4798      	blx	r3
 8007cae:	4603      	mov	r3, r0
 8007cb0:	73fb      	strb	r3, [r7, #15]
    break;
 8007cb2:	e04b      	b.n	8007d4c <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8007cb4:	683b      	ldr	r3, [r7, #0]
 8007cb6:	785b      	ldrb	r3, [r3, #1]
 8007cb8:	2b09      	cmp	r3, #9
 8007cba:	d83c      	bhi.n	8007d36 <USBD_StdDevReq+0xba>
 8007cbc:	a201      	add	r2, pc, #4	; (adr r2, 8007cc4 <USBD_StdDevReq+0x48>)
 8007cbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cc2:	bf00      	nop
 8007cc4:	08007d19 	.word	0x08007d19
 8007cc8:	08007d2d 	.word	0x08007d2d
 8007ccc:	08007d37 	.word	0x08007d37
 8007cd0:	08007d23 	.word	0x08007d23
 8007cd4:	08007d37 	.word	0x08007d37
 8007cd8:	08007cf7 	.word	0x08007cf7
 8007cdc:	08007ced 	.word	0x08007ced
 8007ce0:	08007d37 	.word	0x08007d37
 8007ce4:	08007d0f 	.word	0x08007d0f
 8007ce8:	08007d01 	.word	0x08007d01
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 8007cec:	6839      	ldr	r1, [r7, #0]
 8007cee:	6878      	ldr	r0, [r7, #4]
 8007cf0:	f000 f9d0 	bl	8008094 <USBD_GetDescriptor>
      break;
 8007cf4:	e024      	b.n	8007d40 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 8007cf6:	6839      	ldr	r1, [r7, #0]
 8007cf8:	6878      	ldr	r0, [r7, #4]
 8007cfa:	f000 fb5f 	bl	80083bc <USBD_SetAddress>
      break;
 8007cfe:	e01f      	b.n	8007d40 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 8007d00:	6839      	ldr	r1, [r7, #0]
 8007d02:	6878      	ldr	r0, [r7, #4]
 8007d04:	f000 fb9c 	bl	8008440 <USBD_SetConfig>
 8007d08:	4603      	mov	r3, r0
 8007d0a:	73fb      	strb	r3, [r7, #15]
      break;
 8007d0c:	e018      	b.n	8007d40 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 8007d0e:	6839      	ldr	r1, [r7, #0]
 8007d10:	6878      	ldr	r0, [r7, #4]
 8007d12:	f000 fc39 	bl	8008588 <USBD_GetConfig>
      break;
 8007d16:	e013      	b.n	8007d40 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 8007d18:	6839      	ldr	r1, [r7, #0]
 8007d1a:	6878      	ldr	r0, [r7, #4]
 8007d1c:	f000 fc68 	bl	80085f0 <USBD_GetStatus>
      break;
 8007d20:	e00e      	b.n	8007d40 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 8007d22:	6839      	ldr	r1, [r7, #0]
 8007d24:	6878      	ldr	r0, [r7, #4]
 8007d26:	f000 fc96 	bl	8008656 <USBD_SetFeature>
      break;
 8007d2a:	e009      	b.n	8007d40 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 8007d2c:	6839      	ldr	r1, [r7, #0]
 8007d2e:	6878      	ldr	r0, [r7, #4]
 8007d30:	f000 fca5 	bl	800867e <USBD_ClrFeature>
      break;
 8007d34:	e004      	b.n	8007d40 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 8007d36:	6839      	ldr	r1, [r7, #0]
 8007d38:	6878      	ldr	r0, [r7, #4]
 8007d3a:	f000 fcfb 	bl	8008734 <USBD_CtlError>
      break;
 8007d3e:	bf00      	nop
    }
    break;
 8007d40:	e004      	b.n	8007d4c <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 8007d42:	6839      	ldr	r1, [r7, #0]
 8007d44:	6878      	ldr	r0, [r7, #4]
 8007d46:	f000 fcf5 	bl	8008734 <USBD_CtlError>
    break;
 8007d4a:	bf00      	nop
  }

  return ret;
 8007d4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d4e:	4618      	mov	r0, r3
 8007d50:	3710      	adds	r7, #16
 8007d52:	46bd      	mov	sp, r7
 8007d54:	bd80      	pop	{r7, pc}
 8007d56:	bf00      	nop

08007d58 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d58:	b580      	push	{r7, lr}
 8007d5a:	b084      	sub	sp, #16
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	6078      	str	r0, [r7, #4]
 8007d60:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007d62:	2300      	movs	r3, #0
 8007d64:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007d66:	683b      	ldr	r3, [r7, #0]
 8007d68:	781b      	ldrb	r3, [r3, #0]
 8007d6a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007d6e:	2b20      	cmp	r3, #32
 8007d70:	d003      	beq.n	8007d7a <USBD_StdItfReq+0x22>
 8007d72:	2b40      	cmp	r3, #64	; 0x40
 8007d74:	d001      	beq.n	8007d7a <USBD_StdItfReq+0x22>
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d12a      	bne.n	8007dd0 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d80:	3b01      	subs	r3, #1
 8007d82:	2b02      	cmp	r3, #2
 8007d84:	d81d      	bhi.n	8007dc2 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007d86:	683b      	ldr	r3, [r7, #0]
 8007d88:	889b      	ldrh	r3, [r3, #4]
 8007d8a:	b2db      	uxtb	r3, r3
 8007d8c:	2b01      	cmp	r3, #1
 8007d8e:	d813      	bhi.n	8007db8 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d96:	689b      	ldr	r3, [r3, #8]
 8007d98:	6839      	ldr	r1, [r7, #0]
 8007d9a:	6878      	ldr	r0, [r7, #4]
 8007d9c:	4798      	blx	r3
 8007d9e:	4603      	mov	r3, r0
 8007da0:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8007da2:	683b      	ldr	r3, [r7, #0]
 8007da4:	88db      	ldrh	r3, [r3, #6]
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d110      	bne.n	8007dcc <USBD_StdItfReq+0x74>
 8007daa:	7bfb      	ldrb	r3, [r7, #15]
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d10d      	bne.n	8007dcc <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 8007db0:	6878      	ldr	r0, [r7, #4]
 8007db2:	f000 fd8a 	bl	80088ca <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8007db6:	e009      	b.n	8007dcc <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8007db8:	6839      	ldr	r1, [r7, #0]
 8007dba:	6878      	ldr	r0, [r7, #4]
 8007dbc:	f000 fcba 	bl	8008734 <USBD_CtlError>
      break;
 8007dc0:	e004      	b.n	8007dcc <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 8007dc2:	6839      	ldr	r1, [r7, #0]
 8007dc4:	6878      	ldr	r0, [r7, #4]
 8007dc6:	f000 fcb5 	bl	8008734 <USBD_CtlError>
      break;
 8007dca:	e000      	b.n	8007dce <USBD_StdItfReq+0x76>
      break;
 8007dcc:	bf00      	nop
    }
    break;
 8007dce:	e004      	b.n	8007dda <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8007dd0:	6839      	ldr	r1, [r7, #0]
 8007dd2:	6878      	ldr	r0, [r7, #4]
 8007dd4:	f000 fcae 	bl	8008734 <USBD_CtlError>
    break;
 8007dd8:	bf00      	nop
  }

  return ret;
 8007dda:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ddc:	4618      	mov	r0, r3
 8007dde:	3710      	adds	r7, #16
 8007de0:	46bd      	mov	sp, r7
 8007de2:	bd80      	pop	{r7, pc}

08007de4 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007de4:	b580      	push	{r7, lr}
 8007de6:	b084      	sub	sp, #16
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	6078      	str	r0, [r7, #4]
 8007dec:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007dee:	2300      	movs	r3, #0
 8007df0:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8007df2:	683b      	ldr	r3, [r7, #0]
 8007df4:	889b      	ldrh	r3, [r3, #4]
 8007df6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007df8:	683b      	ldr	r3, [r7, #0]
 8007dfa:	781b      	ldrb	r3, [r3, #0]
 8007dfc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007e00:	2b20      	cmp	r3, #32
 8007e02:	d004      	beq.n	8007e0e <USBD_StdEPReq+0x2a>
 8007e04:	2b40      	cmp	r3, #64	; 0x40
 8007e06:	d002      	beq.n	8007e0e <USBD_StdEPReq+0x2a>
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d00a      	beq.n	8007e22 <USBD_StdEPReq+0x3e>
 8007e0c:	e137      	b.n	800807e <USBD_StdEPReq+0x29a>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e14:	689b      	ldr	r3, [r3, #8]
 8007e16:	6839      	ldr	r1, [r7, #0]
 8007e18:	6878      	ldr	r0, [r7, #4]
 8007e1a:	4798      	blx	r3
 8007e1c:	4603      	mov	r3, r0
 8007e1e:	73fb      	strb	r3, [r7, #15]
    break;
 8007e20:	e132      	b.n	8008088 <USBD_StdEPReq+0x2a4>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8007e22:	683b      	ldr	r3, [r7, #0]
 8007e24:	785b      	ldrb	r3, [r3, #1]
 8007e26:	2b01      	cmp	r3, #1
 8007e28:	d03e      	beq.n	8007ea8 <USBD_StdEPReq+0xc4>
 8007e2a:	2b03      	cmp	r3, #3
 8007e2c:	d002      	beq.n	8007e34 <USBD_StdEPReq+0x50>
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d079      	beq.n	8007f26 <USBD_StdEPReq+0x142>
 8007e32:	e11e      	b.n	8008072 <USBD_StdEPReq+0x28e>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e3a:	2b02      	cmp	r3, #2
 8007e3c:	d002      	beq.n	8007e44 <USBD_StdEPReq+0x60>
 8007e3e:	2b03      	cmp	r3, #3
 8007e40:	d015      	beq.n	8007e6e <USBD_StdEPReq+0x8a>
 8007e42:	e02b      	b.n	8007e9c <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007e44:	7bbb      	ldrb	r3, [r7, #14]
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d00c      	beq.n	8007e64 <USBD_StdEPReq+0x80>
 8007e4a:	7bbb      	ldrb	r3, [r7, #14]
 8007e4c:	2b80      	cmp	r3, #128	; 0x80
 8007e4e:	d009      	beq.n	8007e64 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8007e50:	7bbb      	ldrb	r3, [r7, #14]
 8007e52:	4619      	mov	r1, r3
 8007e54:	6878      	ldr	r0, [r7, #4]
 8007e56:	f001 f8f7 	bl	8009048 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007e5a:	2180      	movs	r1, #128	; 0x80
 8007e5c:	6878      	ldr	r0, [r7, #4]
 8007e5e:	f001 f8f3 	bl	8009048 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8007e62:	e020      	b.n	8007ea6 <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 8007e64:	6839      	ldr	r1, [r7, #0]
 8007e66:	6878      	ldr	r0, [r7, #4]
 8007e68:	f000 fc64 	bl	8008734 <USBD_CtlError>
        break;
 8007e6c:	e01b      	b.n	8007ea6 <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8007e6e:	683b      	ldr	r3, [r7, #0]
 8007e70:	885b      	ldrh	r3, [r3, #2]
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d10e      	bne.n	8007e94 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007e76:	7bbb      	ldrb	r3, [r7, #14]
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d00b      	beq.n	8007e94 <USBD_StdEPReq+0xb0>
 8007e7c:	7bbb      	ldrb	r3, [r7, #14]
 8007e7e:	2b80      	cmp	r3, #128	; 0x80
 8007e80:	d008      	beq.n	8007e94 <USBD_StdEPReq+0xb0>
 8007e82:	683b      	ldr	r3, [r7, #0]
 8007e84:	88db      	ldrh	r3, [r3, #6]
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d104      	bne.n	8007e94 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 8007e8a:	7bbb      	ldrb	r3, [r7, #14]
 8007e8c:	4619      	mov	r1, r3
 8007e8e:	6878      	ldr	r0, [r7, #4]
 8007e90:	f001 f8da 	bl	8009048 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 8007e94:	6878      	ldr	r0, [r7, #4]
 8007e96:	f000 fd18 	bl	80088ca <USBD_CtlSendStatus>

        break;
 8007e9a:	e004      	b.n	8007ea6 <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 8007e9c:	6839      	ldr	r1, [r7, #0]
 8007e9e:	6878      	ldr	r0, [r7, #4]
 8007ea0:	f000 fc48 	bl	8008734 <USBD_CtlError>
        break;
 8007ea4:	bf00      	nop
      }
      break;
 8007ea6:	e0e9      	b.n	800807c <USBD_StdEPReq+0x298>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007eae:	2b02      	cmp	r3, #2
 8007eb0:	d002      	beq.n	8007eb8 <USBD_StdEPReq+0xd4>
 8007eb2:	2b03      	cmp	r3, #3
 8007eb4:	d015      	beq.n	8007ee2 <USBD_StdEPReq+0xfe>
 8007eb6:	e02f      	b.n	8007f18 <USBD_StdEPReq+0x134>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007eb8:	7bbb      	ldrb	r3, [r7, #14]
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d00c      	beq.n	8007ed8 <USBD_StdEPReq+0xf4>
 8007ebe:	7bbb      	ldrb	r3, [r7, #14]
 8007ec0:	2b80      	cmp	r3, #128	; 0x80
 8007ec2:	d009      	beq.n	8007ed8 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8007ec4:	7bbb      	ldrb	r3, [r7, #14]
 8007ec6:	4619      	mov	r1, r3
 8007ec8:	6878      	ldr	r0, [r7, #4]
 8007eca:	f001 f8bd 	bl	8009048 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007ece:	2180      	movs	r1, #128	; 0x80
 8007ed0:	6878      	ldr	r0, [r7, #4]
 8007ed2:	f001 f8b9 	bl	8009048 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8007ed6:	e025      	b.n	8007f24 <USBD_StdEPReq+0x140>
          USBD_CtlError(pdev, req);
 8007ed8:	6839      	ldr	r1, [r7, #0]
 8007eda:	6878      	ldr	r0, [r7, #4]
 8007edc:	f000 fc2a 	bl	8008734 <USBD_CtlError>
        break;
 8007ee0:	e020      	b.n	8007f24 <USBD_StdEPReq+0x140>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8007ee2:	683b      	ldr	r3, [r7, #0]
 8007ee4:	885b      	ldrh	r3, [r3, #2]
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d11b      	bne.n	8007f22 <USBD_StdEPReq+0x13e>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8007eea:	7bbb      	ldrb	r3, [r7, #14]
 8007eec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d004      	beq.n	8007efe <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007ef4:	7bbb      	ldrb	r3, [r7, #14]
 8007ef6:	4619      	mov	r1, r3
 8007ef8:	6878      	ldr	r0, [r7, #4]
 8007efa:	f001 f8c4 	bl	8009086 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 8007efe:	6878      	ldr	r0, [r7, #4]
 8007f00:	f000 fce3 	bl	80088ca <USBD_CtlSendStatus>
          ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f0a:	689b      	ldr	r3, [r3, #8]
 8007f0c:	6839      	ldr	r1, [r7, #0]
 8007f0e:	6878      	ldr	r0, [r7, #4]
 8007f10:	4798      	blx	r3
 8007f12:	4603      	mov	r3, r0
 8007f14:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007f16:	e004      	b.n	8007f22 <USBD_StdEPReq+0x13e>

      default:
        USBD_CtlError(pdev, req);
 8007f18:	6839      	ldr	r1, [r7, #0]
 8007f1a:	6878      	ldr	r0, [r7, #4]
 8007f1c:	f000 fc0a 	bl	8008734 <USBD_CtlError>
        break;
 8007f20:	e000      	b.n	8007f24 <USBD_StdEPReq+0x140>
        break;
 8007f22:	bf00      	nop
      }
      break;
 8007f24:	e0aa      	b.n	800807c <USBD_StdEPReq+0x298>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f2c:	2b02      	cmp	r3, #2
 8007f2e:	d002      	beq.n	8007f36 <USBD_StdEPReq+0x152>
 8007f30:	2b03      	cmp	r3, #3
 8007f32:	d032      	beq.n	8007f9a <USBD_StdEPReq+0x1b6>
 8007f34:	e097      	b.n	8008066 <USBD_StdEPReq+0x282>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007f36:	7bbb      	ldrb	r3, [r7, #14]
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d007      	beq.n	8007f4c <USBD_StdEPReq+0x168>
 8007f3c:	7bbb      	ldrb	r3, [r7, #14]
 8007f3e:	2b80      	cmp	r3, #128	; 0x80
 8007f40:	d004      	beq.n	8007f4c <USBD_StdEPReq+0x168>
        {
          USBD_CtlError(pdev, req);
 8007f42:	6839      	ldr	r1, [r7, #0]
 8007f44:	6878      	ldr	r0, [r7, #4]
 8007f46:	f000 fbf5 	bl	8008734 <USBD_CtlError>
          break;
 8007f4a:	e091      	b.n	8008070 <USBD_StdEPReq+0x28c>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007f4c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	da0b      	bge.n	8007f6c <USBD_StdEPReq+0x188>
 8007f54:	7bbb      	ldrb	r3, [r7, #14]
 8007f56:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007f5a:	4613      	mov	r3, r2
 8007f5c:	009b      	lsls	r3, r3, #2
 8007f5e:	4413      	add	r3, r2
 8007f60:	009b      	lsls	r3, r3, #2
 8007f62:	3310      	adds	r3, #16
 8007f64:	687a      	ldr	r2, [r7, #4]
 8007f66:	4413      	add	r3, r2
 8007f68:	3304      	adds	r3, #4
 8007f6a:	e00b      	b.n	8007f84 <USBD_StdEPReq+0x1a0>
              &pdev->ep_out[ep_addr & 0x7FU];
 8007f6c:	7bbb      	ldrb	r3, [r7, #14]
 8007f6e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007f72:	4613      	mov	r3, r2
 8007f74:	009b      	lsls	r3, r3, #2
 8007f76:	4413      	add	r3, r2
 8007f78:	009b      	lsls	r3, r3, #2
 8007f7a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007f7e:	687a      	ldr	r2, [r7, #4]
 8007f80:	4413      	add	r3, r2
 8007f82:	3304      	adds	r3, #4
 8007f84:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 8007f86:	68bb      	ldr	r3, [r7, #8]
 8007f88:	2200      	movs	r2, #0
 8007f8a:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007f8c:	68bb      	ldr	r3, [r7, #8]
 8007f8e:	2202      	movs	r2, #2
 8007f90:	4619      	mov	r1, r3
 8007f92:	6878      	ldr	r0, [r7, #4]
 8007f94:	f000 fc3f 	bl	8008816 <USBD_CtlSendData>
        break;
 8007f98:	e06a      	b.n	8008070 <USBD_StdEPReq+0x28c>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 8007f9a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	da11      	bge.n	8007fc6 <USBD_StdEPReq+0x1e2>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007fa2:	7bbb      	ldrb	r3, [r7, #14]
 8007fa4:	f003 020f 	and.w	r2, r3, #15
 8007fa8:	6879      	ldr	r1, [r7, #4]
 8007faa:	4613      	mov	r3, r2
 8007fac:	009b      	lsls	r3, r3, #2
 8007fae:	4413      	add	r3, r2
 8007fb0:	009b      	lsls	r3, r3, #2
 8007fb2:	440b      	add	r3, r1
 8007fb4:	3324      	adds	r3, #36	; 0x24
 8007fb6:	881b      	ldrh	r3, [r3, #0]
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d117      	bne.n	8007fec <USBD_StdEPReq+0x208>
          {
            USBD_CtlError(pdev, req);
 8007fbc:	6839      	ldr	r1, [r7, #0]
 8007fbe:	6878      	ldr	r0, [r7, #4]
 8007fc0:	f000 fbb8 	bl	8008734 <USBD_CtlError>
            break;
 8007fc4:	e054      	b.n	8008070 <USBD_StdEPReq+0x28c>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007fc6:	7bbb      	ldrb	r3, [r7, #14]
 8007fc8:	f003 020f 	and.w	r2, r3, #15
 8007fcc:	6879      	ldr	r1, [r7, #4]
 8007fce:	4613      	mov	r3, r2
 8007fd0:	009b      	lsls	r3, r3, #2
 8007fd2:	4413      	add	r3, r2
 8007fd4:	009b      	lsls	r3, r3, #2
 8007fd6:	440b      	add	r3, r1
 8007fd8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007fdc:	881b      	ldrh	r3, [r3, #0]
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d104      	bne.n	8007fec <USBD_StdEPReq+0x208>
          {
            USBD_CtlError(pdev, req);
 8007fe2:	6839      	ldr	r1, [r7, #0]
 8007fe4:	6878      	ldr	r0, [r7, #4]
 8007fe6:	f000 fba5 	bl	8008734 <USBD_CtlError>
            break;
 8007fea:	e041      	b.n	8008070 <USBD_StdEPReq+0x28c>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007fec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	da0b      	bge.n	800800c <USBD_StdEPReq+0x228>
 8007ff4:	7bbb      	ldrb	r3, [r7, #14]
 8007ff6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007ffa:	4613      	mov	r3, r2
 8007ffc:	009b      	lsls	r3, r3, #2
 8007ffe:	4413      	add	r3, r2
 8008000:	009b      	lsls	r3, r3, #2
 8008002:	3310      	adds	r3, #16
 8008004:	687a      	ldr	r2, [r7, #4]
 8008006:	4413      	add	r3, r2
 8008008:	3304      	adds	r3, #4
 800800a:	e00b      	b.n	8008024 <USBD_StdEPReq+0x240>
              &pdev->ep_out[ep_addr & 0x7FU];
 800800c:	7bbb      	ldrb	r3, [r7, #14]
 800800e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008012:	4613      	mov	r3, r2
 8008014:	009b      	lsls	r3, r3, #2
 8008016:	4413      	add	r3, r2
 8008018:	009b      	lsls	r3, r3, #2
 800801a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800801e:	687a      	ldr	r2, [r7, #4]
 8008020:	4413      	add	r3, r2
 8008022:	3304      	adds	r3, #4
 8008024:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008026:	7bbb      	ldrb	r3, [r7, #14]
 8008028:	2b00      	cmp	r3, #0
 800802a:	d002      	beq.n	8008032 <USBD_StdEPReq+0x24e>
 800802c:	7bbb      	ldrb	r3, [r7, #14]
 800802e:	2b80      	cmp	r3, #128	; 0x80
 8008030:	d103      	bne.n	800803a <USBD_StdEPReq+0x256>
          {
            pep->status = 0x0000U;
 8008032:	68bb      	ldr	r3, [r7, #8]
 8008034:	2200      	movs	r2, #0
 8008036:	601a      	str	r2, [r3, #0]
 8008038:	e00e      	b.n	8008058 <USBD_StdEPReq+0x274>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800803a:	7bbb      	ldrb	r3, [r7, #14]
 800803c:	4619      	mov	r1, r3
 800803e:	6878      	ldr	r0, [r7, #4]
 8008040:	f001 f840 	bl	80090c4 <USBD_LL_IsStallEP>
 8008044:	4603      	mov	r3, r0
 8008046:	2b00      	cmp	r3, #0
 8008048:	d003      	beq.n	8008052 <USBD_StdEPReq+0x26e>
          {
            pep->status = 0x0001U;
 800804a:	68bb      	ldr	r3, [r7, #8]
 800804c:	2201      	movs	r2, #1
 800804e:	601a      	str	r2, [r3, #0]
 8008050:	e002      	b.n	8008058 <USBD_StdEPReq+0x274>
          }
          else
          {
            pep->status = 0x0000U;
 8008052:	68bb      	ldr	r3, [r7, #8]
 8008054:	2200      	movs	r2, #0
 8008056:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008058:	68bb      	ldr	r3, [r7, #8]
 800805a:	2202      	movs	r2, #2
 800805c:	4619      	mov	r1, r3
 800805e:	6878      	ldr	r0, [r7, #4]
 8008060:	f000 fbd9 	bl	8008816 <USBD_CtlSendData>
          break;
 8008064:	e004      	b.n	8008070 <USBD_StdEPReq+0x28c>

      default:
        USBD_CtlError(pdev, req);
 8008066:	6839      	ldr	r1, [r7, #0]
 8008068:	6878      	ldr	r0, [r7, #4]
 800806a:	f000 fb63 	bl	8008734 <USBD_CtlError>
        break;
 800806e:	bf00      	nop
      }
      break;
 8008070:	e004      	b.n	800807c <USBD_StdEPReq+0x298>

    default:
      USBD_CtlError(pdev, req);
 8008072:	6839      	ldr	r1, [r7, #0]
 8008074:	6878      	ldr	r0, [r7, #4]
 8008076:	f000 fb5d 	bl	8008734 <USBD_CtlError>
      break;
 800807a:	bf00      	nop
    }
    break;
 800807c:	e004      	b.n	8008088 <USBD_StdEPReq+0x2a4>

  default:
    USBD_CtlError(pdev, req);
 800807e:	6839      	ldr	r1, [r7, #0]
 8008080:	6878      	ldr	r0, [r7, #4]
 8008082:	f000 fb57 	bl	8008734 <USBD_CtlError>
    break;
 8008086:	bf00      	nop
  }

  return ret;
 8008088:	7bfb      	ldrb	r3, [r7, #15]
}
 800808a:	4618      	mov	r0, r3
 800808c:	3710      	adds	r7, #16
 800808e:	46bd      	mov	sp, r7
 8008090:	bd80      	pop	{r7, pc}
	...

08008094 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008094:	b580      	push	{r7, lr}
 8008096:	b084      	sub	sp, #16
 8008098:	af00      	add	r7, sp, #0
 800809a:	6078      	str	r0, [r7, #4]
 800809c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800809e:	2300      	movs	r3, #0
 80080a0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80080a2:	2300      	movs	r3, #0
 80080a4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80080a6:	2300      	movs	r3, #0
 80080a8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80080aa:	683b      	ldr	r3, [r7, #0]
 80080ac:	885b      	ldrh	r3, [r3, #2]
 80080ae:	0a1b      	lsrs	r3, r3, #8
 80080b0:	b29b      	uxth	r3, r3
 80080b2:	3b01      	subs	r3, #1
 80080b4:	2b0e      	cmp	r3, #14
 80080b6:	f200 8152 	bhi.w	800835e <USBD_GetDescriptor+0x2ca>
 80080ba:	a201      	add	r2, pc, #4	; (adr r2, 80080c0 <USBD_GetDescriptor+0x2c>)
 80080bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080c0:	08008131 	.word	0x08008131
 80080c4:	08008149 	.word	0x08008149
 80080c8:	08008189 	.word	0x08008189
 80080cc:	0800835f 	.word	0x0800835f
 80080d0:	0800835f 	.word	0x0800835f
 80080d4:	080082ff 	.word	0x080082ff
 80080d8:	0800832b 	.word	0x0800832b
 80080dc:	0800835f 	.word	0x0800835f
 80080e0:	0800835f 	.word	0x0800835f
 80080e4:	0800835f 	.word	0x0800835f
 80080e8:	0800835f 	.word	0x0800835f
 80080ec:	0800835f 	.word	0x0800835f
 80080f0:	0800835f 	.word	0x0800835f
 80080f4:	0800835f 	.word	0x0800835f
 80080f8:	080080fd 	.word	0x080080fd
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
  case USB_DESC_TYPE_BOS:
    if (pdev->pDesc->GetBOSDescriptor != NULL)
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008102:	69db      	ldr	r3, [r3, #28]
 8008104:	2b00      	cmp	r3, #0
 8008106:	d00b      	beq.n	8008120 <USBD_GetDescriptor+0x8c>
    {
      pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800810e:	69db      	ldr	r3, [r3, #28]
 8008110:	687a      	ldr	r2, [r7, #4]
 8008112:	7c12      	ldrb	r2, [r2, #16]
 8008114:	f107 0108 	add.w	r1, r7, #8
 8008118:	4610      	mov	r0, r2
 800811a:	4798      	blx	r3
 800811c:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800811e:	e126      	b.n	800836e <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 8008120:	6839      	ldr	r1, [r7, #0]
 8008122:	6878      	ldr	r0, [r7, #4]
 8008124:	f000 fb06 	bl	8008734 <USBD_CtlError>
      err++;
 8008128:	7afb      	ldrb	r3, [r7, #11]
 800812a:	3301      	adds	r3, #1
 800812c:	72fb      	strb	r3, [r7, #11]
    break;
 800812e:	e11e      	b.n	800836e <USBD_GetDescriptor+0x2da>
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	687a      	ldr	r2, [r7, #4]
 800813a:	7c12      	ldrb	r2, [r2, #16]
 800813c:	f107 0108 	add.w	r1, r7, #8
 8008140:	4610      	mov	r0, r2
 8008142:	4798      	blx	r3
 8008144:	60f8      	str	r0, [r7, #12]
    break;
 8008146:	e112      	b.n	800836e <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	7c1b      	ldrb	r3, [r3, #16]
 800814c:	2b00      	cmp	r3, #0
 800814e:	d10d      	bne.n	800816c <USBD_GetDescriptor+0xd8>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008156:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008158:	f107 0208 	add.w	r2, r7, #8
 800815c:	4610      	mov	r0, r2
 800815e:	4798      	blx	r3
 8008160:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	3301      	adds	r3, #1
 8008166:	2202      	movs	r2, #2
 8008168:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800816a:	e100      	b.n	800836e <USBD_GetDescriptor+0x2da>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008174:	f107 0208 	add.w	r2, r7, #8
 8008178:	4610      	mov	r0, r2
 800817a:	4798      	blx	r3
 800817c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	3301      	adds	r3, #1
 8008182:	2202      	movs	r2, #2
 8008184:	701a      	strb	r2, [r3, #0]
    break;
 8008186:	e0f2      	b.n	800836e <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8008188:	683b      	ldr	r3, [r7, #0]
 800818a:	885b      	ldrh	r3, [r3, #2]
 800818c:	b2db      	uxtb	r3, r3
 800818e:	2b05      	cmp	r3, #5
 8008190:	f200 80ac 	bhi.w	80082ec <USBD_GetDescriptor+0x258>
 8008194:	a201      	add	r2, pc, #4	; (adr r2, 800819c <USBD_GetDescriptor+0x108>)
 8008196:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800819a:	bf00      	nop
 800819c:	080081b5 	.word	0x080081b5
 80081a0:	080081e9 	.word	0x080081e9
 80081a4:	0800821d 	.word	0x0800821d
 80081a8:	08008251 	.word	0x08008251
 80081ac:	08008285 	.word	0x08008285
 80081b0:	080082b9 	.word	0x080082b9
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80081ba:	685b      	ldr	r3, [r3, #4]
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d00b      	beq.n	80081d8 <USBD_GetDescriptor+0x144>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80081c6:	685b      	ldr	r3, [r3, #4]
 80081c8:	687a      	ldr	r2, [r7, #4]
 80081ca:	7c12      	ldrb	r2, [r2, #16]
 80081cc:	f107 0108 	add.w	r1, r7, #8
 80081d0:	4610      	mov	r0, r2
 80081d2:	4798      	blx	r3
 80081d4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80081d6:	e091      	b.n	80082fc <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 80081d8:	6839      	ldr	r1, [r7, #0]
 80081da:	6878      	ldr	r0, [r7, #4]
 80081dc:	f000 faaa 	bl	8008734 <USBD_CtlError>
        err++;
 80081e0:	7afb      	ldrb	r3, [r7, #11]
 80081e2:	3301      	adds	r3, #1
 80081e4:	72fb      	strb	r3, [r7, #11]
      break;
 80081e6:	e089      	b.n	80082fc <USBD_GetDescriptor+0x268>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80081ee:	689b      	ldr	r3, [r3, #8]
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d00b      	beq.n	800820c <USBD_GetDescriptor+0x178>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80081fa:	689b      	ldr	r3, [r3, #8]
 80081fc:	687a      	ldr	r2, [r7, #4]
 80081fe:	7c12      	ldrb	r2, [r2, #16]
 8008200:	f107 0108 	add.w	r1, r7, #8
 8008204:	4610      	mov	r0, r2
 8008206:	4798      	blx	r3
 8008208:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800820a:	e077      	b.n	80082fc <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800820c:	6839      	ldr	r1, [r7, #0]
 800820e:	6878      	ldr	r0, [r7, #4]
 8008210:	f000 fa90 	bl	8008734 <USBD_CtlError>
        err++;
 8008214:	7afb      	ldrb	r3, [r7, #11]
 8008216:	3301      	adds	r3, #1
 8008218:	72fb      	strb	r3, [r7, #11]
      break;
 800821a:	e06f      	b.n	80082fc <USBD_GetDescriptor+0x268>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008222:	68db      	ldr	r3, [r3, #12]
 8008224:	2b00      	cmp	r3, #0
 8008226:	d00b      	beq.n	8008240 <USBD_GetDescriptor+0x1ac>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800822e:	68db      	ldr	r3, [r3, #12]
 8008230:	687a      	ldr	r2, [r7, #4]
 8008232:	7c12      	ldrb	r2, [r2, #16]
 8008234:	f107 0108 	add.w	r1, r7, #8
 8008238:	4610      	mov	r0, r2
 800823a:	4798      	blx	r3
 800823c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800823e:	e05d      	b.n	80082fc <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8008240:	6839      	ldr	r1, [r7, #0]
 8008242:	6878      	ldr	r0, [r7, #4]
 8008244:	f000 fa76 	bl	8008734 <USBD_CtlError>
        err++;
 8008248:	7afb      	ldrb	r3, [r7, #11]
 800824a:	3301      	adds	r3, #1
 800824c:	72fb      	strb	r3, [r7, #11]
      break;
 800824e:	e055      	b.n	80082fc <USBD_GetDescriptor+0x268>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008256:	691b      	ldr	r3, [r3, #16]
 8008258:	2b00      	cmp	r3, #0
 800825a:	d00b      	beq.n	8008274 <USBD_GetDescriptor+0x1e0>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008262:	691b      	ldr	r3, [r3, #16]
 8008264:	687a      	ldr	r2, [r7, #4]
 8008266:	7c12      	ldrb	r2, [r2, #16]
 8008268:	f107 0108 	add.w	r1, r7, #8
 800826c:	4610      	mov	r0, r2
 800826e:	4798      	blx	r3
 8008270:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008272:	e043      	b.n	80082fc <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8008274:	6839      	ldr	r1, [r7, #0]
 8008276:	6878      	ldr	r0, [r7, #4]
 8008278:	f000 fa5c 	bl	8008734 <USBD_CtlError>
        err++;
 800827c:	7afb      	ldrb	r3, [r7, #11]
 800827e:	3301      	adds	r3, #1
 8008280:	72fb      	strb	r3, [r7, #11]
      break;
 8008282:	e03b      	b.n	80082fc <USBD_GetDescriptor+0x268>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800828a:	695b      	ldr	r3, [r3, #20]
 800828c:	2b00      	cmp	r3, #0
 800828e:	d00b      	beq.n	80082a8 <USBD_GetDescriptor+0x214>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008296:	695b      	ldr	r3, [r3, #20]
 8008298:	687a      	ldr	r2, [r7, #4]
 800829a:	7c12      	ldrb	r2, [r2, #16]
 800829c:	f107 0108 	add.w	r1, r7, #8
 80082a0:	4610      	mov	r0, r2
 80082a2:	4798      	blx	r3
 80082a4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80082a6:	e029      	b.n	80082fc <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 80082a8:	6839      	ldr	r1, [r7, #0]
 80082aa:	6878      	ldr	r0, [r7, #4]
 80082ac:	f000 fa42 	bl	8008734 <USBD_CtlError>
        err++;
 80082b0:	7afb      	ldrb	r3, [r7, #11]
 80082b2:	3301      	adds	r3, #1
 80082b4:	72fb      	strb	r3, [r7, #11]
      break;
 80082b6:	e021      	b.n	80082fc <USBD_GetDescriptor+0x268>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80082be:	699b      	ldr	r3, [r3, #24]
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d00b      	beq.n	80082dc <USBD_GetDescriptor+0x248>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80082ca:	699b      	ldr	r3, [r3, #24]
 80082cc:	687a      	ldr	r2, [r7, #4]
 80082ce:	7c12      	ldrb	r2, [r2, #16]
 80082d0:	f107 0108 	add.w	r1, r7, #8
 80082d4:	4610      	mov	r0, r2
 80082d6:	4798      	blx	r3
 80082d8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80082da:	e00f      	b.n	80082fc <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 80082dc:	6839      	ldr	r1, [r7, #0]
 80082de:	6878      	ldr	r0, [r7, #4]
 80082e0:	f000 fa28 	bl	8008734 <USBD_CtlError>
        err++;
 80082e4:	7afb      	ldrb	r3, [r7, #11]
 80082e6:	3301      	adds	r3, #1
 80082e8:	72fb      	strb	r3, [r7, #11]
      break;
 80082ea:	e007      	b.n	80082fc <USBD_GetDescriptor+0x268>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 80082ec:	6839      	ldr	r1, [r7, #0]
 80082ee:	6878      	ldr	r0, [r7, #4]
 80082f0:	f000 fa20 	bl	8008734 <USBD_CtlError>
      err++;
 80082f4:	7afb      	ldrb	r3, [r7, #11]
 80082f6:	3301      	adds	r3, #1
 80082f8:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 80082fa:	bf00      	nop
    }
    break;
 80082fc:	e037      	b.n	800836e <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	7c1b      	ldrb	r3, [r3, #16]
 8008302:	2b00      	cmp	r3, #0
 8008304:	d109      	bne.n	800831a <USBD_GetDescriptor+0x286>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800830c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800830e:	f107 0208 	add.w	r2, r7, #8
 8008312:	4610      	mov	r0, r2
 8008314:	4798      	blx	r3
 8008316:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8008318:	e029      	b.n	800836e <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 800831a:	6839      	ldr	r1, [r7, #0]
 800831c:	6878      	ldr	r0, [r7, #4]
 800831e:	f000 fa09 	bl	8008734 <USBD_CtlError>
      err++;
 8008322:	7afb      	ldrb	r3, [r7, #11]
 8008324:	3301      	adds	r3, #1
 8008326:	72fb      	strb	r3, [r7, #11]
    break;
 8008328:	e021      	b.n	800836e <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	7c1b      	ldrb	r3, [r3, #16]
 800832e:	2b00      	cmp	r3, #0
 8008330:	d10d      	bne.n	800834e <USBD_GetDescriptor+0x2ba>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800833a:	f107 0208 	add.w	r2, r7, #8
 800833e:	4610      	mov	r0, r2
 8008340:	4798      	blx	r3
 8008342:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	3301      	adds	r3, #1
 8008348:	2207      	movs	r2, #7
 800834a:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800834c:	e00f      	b.n	800836e <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 800834e:	6839      	ldr	r1, [r7, #0]
 8008350:	6878      	ldr	r0, [r7, #4]
 8008352:	f000 f9ef 	bl	8008734 <USBD_CtlError>
      err++;
 8008356:	7afb      	ldrb	r3, [r7, #11]
 8008358:	3301      	adds	r3, #1
 800835a:	72fb      	strb	r3, [r7, #11]
    break;
 800835c:	e007      	b.n	800836e <USBD_GetDescriptor+0x2da>

  default:
    USBD_CtlError(pdev, req);
 800835e:	6839      	ldr	r1, [r7, #0]
 8008360:	6878      	ldr	r0, [r7, #4]
 8008362:	f000 f9e7 	bl	8008734 <USBD_CtlError>
    err++;
 8008366:	7afb      	ldrb	r3, [r7, #11]
 8008368:	3301      	adds	r3, #1
 800836a:	72fb      	strb	r3, [r7, #11]
    break;
 800836c:	bf00      	nop
  }

  if (err != 0U)
 800836e:	7afb      	ldrb	r3, [r7, #11]
 8008370:	2b00      	cmp	r3, #0
 8008372:	d11e      	bne.n	80083b2 <USBD_GetDescriptor+0x31e>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8008374:	683b      	ldr	r3, [r7, #0]
 8008376:	88db      	ldrh	r3, [r3, #6]
 8008378:	2b00      	cmp	r3, #0
 800837a:	d016      	beq.n	80083aa <USBD_GetDescriptor+0x316>
    {
      if (len != 0U)
 800837c:	893b      	ldrh	r3, [r7, #8]
 800837e:	2b00      	cmp	r3, #0
 8008380:	d00e      	beq.n	80083a0 <USBD_GetDescriptor+0x30c>
      {
        len = MIN(len, req->wLength);
 8008382:	683b      	ldr	r3, [r7, #0]
 8008384:	88da      	ldrh	r2, [r3, #6]
 8008386:	893b      	ldrh	r3, [r7, #8]
 8008388:	4293      	cmp	r3, r2
 800838a:	bf28      	it	cs
 800838c:	4613      	movcs	r3, r2
 800838e:	b29b      	uxth	r3, r3
 8008390:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8008392:	893b      	ldrh	r3, [r7, #8]
 8008394:	461a      	mov	r2, r3
 8008396:	68f9      	ldr	r1, [r7, #12]
 8008398:	6878      	ldr	r0, [r7, #4]
 800839a:	f000 fa3c 	bl	8008816 <USBD_CtlSendData>
 800839e:	e009      	b.n	80083b4 <USBD_GetDescriptor+0x320>
      }
      else
      {
        USBD_CtlError(pdev, req);
 80083a0:	6839      	ldr	r1, [r7, #0]
 80083a2:	6878      	ldr	r0, [r7, #4]
 80083a4:	f000 f9c6 	bl	8008734 <USBD_CtlError>
 80083a8:	e004      	b.n	80083b4 <USBD_GetDescriptor+0x320>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 80083aa:	6878      	ldr	r0, [r7, #4]
 80083ac:	f000 fa8d 	bl	80088ca <USBD_CtlSendStatus>
 80083b0:	e000      	b.n	80083b4 <USBD_GetDescriptor+0x320>
    return;
 80083b2:	bf00      	nop
    }
  }
}
 80083b4:	3710      	adds	r7, #16
 80083b6:	46bd      	mov	sp, r7
 80083b8:	bd80      	pop	{r7, pc}
 80083ba:	bf00      	nop

080083bc <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80083bc:	b580      	push	{r7, lr}
 80083be:	b084      	sub	sp, #16
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	6078      	str	r0, [r7, #4]
 80083c4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80083c6:	683b      	ldr	r3, [r7, #0]
 80083c8:	889b      	ldrh	r3, [r3, #4]
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d130      	bne.n	8008430 <USBD_SetAddress+0x74>
 80083ce:	683b      	ldr	r3, [r7, #0]
 80083d0:	88db      	ldrh	r3, [r3, #6]
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d12c      	bne.n	8008430 <USBD_SetAddress+0x74>
 80083d6:	683b      	ldr	r3, [r7, #0]
 80083d8:	885b      	ldrh	r3, [r3, #2]
 80083da:	2b7f      	cmp	r3, #127	; 0x7f
 80083dc:	d828      	bhi.n	8008430 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80083de:	683b      	ldr	r3, [r7, #0]
 80083e0:	885b      	ldrh	r3, [r3, #2]
 80083e2:	b2db      	uxtb	r3, r3
 80083e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80083e8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80083f0:	2b03      	cmp	r3, #3
 80083f2:	d104      	bne.n	80083fe <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80083f4:	6839      	ldr	r1, [r7, #0]
 80083f6:	6878      	ldr	r0, [r7, #4]
 80083f8:	f000 f99c 	bl	8008734 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80083fc:	e01c      	b.n	8008438 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	7bfa      	ldrb	r2, [r7, #15]
 8008402:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008406:	7bfb      	ldrb	r3, [r7, #15]
 8008408:	4619      	mov	r1, r3
 800840a:	6878      	ldr	r0, [r7, #4]
 800840c:	f000 fe87 	bl	800911e <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008410:	6878      	ldr	r0, [r7, #4]
 8008412:	f000 fa5a 	bl	80088ca <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008416:	7bfb      	ldrb	r3, [r7, #15]
 8008418:	2b00      	cmp	r3, #0
 800841a:	d004      	beq.n	8008426 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	2202      	movs	r2, #2
 8008420:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008424:	e008      	b.n	8008438 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	2201      	movs	r2, #1
 800842a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800842e:	e003      	b.n	8008438 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008430:	6839      	ldr	r1, [r7, #0]
 8008432:	6878      	ldr	r0, [r7, #4]
 8008434:	f000 f97e 	bl	8008734 <USBD_CtlError>
  }
}
 8008438:	bf00      	nop
 800843a:	3710      	adds	r7, #16
 800843c:	46bd      	mov	sp, r7
 800843e:	bd80      	pop	{r7, pc}

08008440 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008440:	b580      	push	{r7, lr}
 8008442:	b084      	sub	sp, #16
 8008444:	af00      	add	r7, sp, #0
 8008446:	6078      	str	r0, [r7, #4]
 8008448:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800844a:	2300      	movs	r3, #0
 800844c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800844e:	683b      	ldr	r3, [r7, #0]
 8008450:	885b      	ldrh	r3, [r3, #2]
 8008452:	b2da      	uxtb	r2, r3
 8008454:	4b4b      	ldr	r3, [pc, #300]	; (8008584 <USBD_SetConfig+0x144>)
 8008456:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008458:	4b4a      	ldr	r3, [pc, #296]	; (8008584 <USBD_SetConfig+0x144>)
 800845a:	781b      	ldrb	r3, [r3, #0]
 800845c:	2b01      	cmp	r3, #1
 800845e:	d905      	bls.n	800846c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008460:	6839      	ldr	r1, [r7, #0]
 8008462:	6878      	ldr	r0, [r7, #4]
 8008464:	f000 f966 	bl	8008734 <USBD_CtlError>
    return USBD_FAIL;
 8008468:	2303      	movs	r3, #3
 800846a:	e087      	b.n	800857c <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008472:	2b02      	cmp	r3, #2
 8008474:	d002      	beq.n	800847c <USBD_SetConfig+0x3c>
 8008476:	2b03      	cmp	r3, #3
 8008478:	d025      	beq.n	80084c6 <USBD_SetConfig+0x86>
 800847a:	e071      	b.n	8008560 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 800847c:	4b41      	ldr	r3, [pc, #260]	; (8008584 <USBD_SetConfig+0x144>)
 800847e:	781b      	ldrb	r3, [r3, #0]
 8008480:	2b00      	cmp	r3, #0
 8008482:	d01c      	beq.n	80084be <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8008484:	4b3f      	ldr	r3, [pc, #252]	; (8008584 <USBD_SetConfig+0x144>)
 8008486:	781b      	ldrb	r3, [r3, #0]
 8008488:	461a      	mov	r2, r3
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 800848e:	4b3d      	ldr	r3, [pc, #244]	; (8008584 <USBD_SetConfig+0x144>)
 8008490:	781b      	ldrb	r3, [r3, #0]
 8008492:	4619      	mov	r1, r3
 8008494:	6878      	ldr	r0, [r7, #4]
 8008496:	f7ff f9bd 	bl	8007814 <USBD_SetClassConfig>
 800849a:	4603      	mov	r3, r0
 800849c:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 800849e:	7bfb      	ldrb	r3, [r7, #15]
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d004      	beq.n	80084ae <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 80084a4:	6839      	ldr	r1, [r7, #0]
 80084a6:	6878      	ldr	r0, [r7, #4]
 80084a8:	f000 f944 	bl	8008734 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 80084ac:	e065      	b.n	800857a <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 80084ae:	6878      	ldr	r0, [r7, #4]
 80084b0:	f000 fa0b 	bl	80088ca <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	2203      	movs	r2, #3
 80084b8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 80084bc:	e05d      	b.n	800857a <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 80084be:	6878      	ldr	r0, [r7, #4]
 80084c0:	f000 fa03 	bl	80088ca <USBD_CtlSendStatus>
    break;
 80084c4:	e059      	b.n	800857a <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 80084c6:	4b2f      	ldr	r3, [pc, #188]	; (8008584 <USBD_SetConfig+0x144>)
 80084c8:	781b      	ldrb	r3, [r3, #0]
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d112      	bne.n	80084f4 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	2202      	movs	r2, #2
 80084d2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 80084d6:	4b2b      	ldr	r3, [pc, #172]	; (8008584 <USBD_SetConfig+0x144>)
 80084d8:	781b      	ldrb	r3, [r3, #0]
 80084da:	461a      	mov	r2, r3
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80084e0:	4b28      	ldr	r3, [pc, #160]	; (8008584 <USBD_SetConfig+0x144>)
 80084e2:	781b      	ldrb	r3, [r3, #0]
 80084e4:	4619      	mov	r1, r3
 80084e6:	6878      	ldr	r0, [r7, #4]
 80084e8:	f7ff f9b0 	bl	800784c <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 80084ec:	6878      	ldr	r0, [r7, #4]
 80084ee:	f000 f9ec 	bl	80088ca <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 80084f2:	e042      	b.n	800857a <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 80084f4:	4b23      	ldr	r3, [pc, #140]	; (8008584 <USBD_SetConfig+0x144>)
 80084f6:	781b      	ldrb	r3, [r3, #0]
 80084f8:	461a      	mov	r2, r3
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	685b      	ldr	r3, [r3, #4]
 80084fe:	429a      	cmp	r2, r3
 8008500:	d02a      	beq.n	8008558 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	685b      	ldr	r3, [r3, #4]
 8008506:	b2db      	uxtb	r3, r3
 8008508:	4619      	mov	r1, r3
 800850a:	6878      	ldr	r0, [r7, #4]
 800850c:	f7ff f99e 	bl	800784c <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8008510:	4b1c      	ldr	r3, [pc, #112]	; (8008584 <USBD_SetConfig+0x144>)
 8008512:	781b      	ldrb	r3, [r3, #0]
 8008514:	461a      	mov	r2, r3
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 800851a:	4b1a      	ldr	r3, [pc, #104]	; (8008584 <USBD_SetConfig+0x144>)
 800851c:	781b      	ldrb	r3, [r3, #0]
 800851e:	4619      	mov	r1, r3
 8008520:	6878      	ldr	r0, [r7, #4]
 8008522:	f7ff f977 	bl	8007814 <USBD_SetClassConfig>
 8008526:	4603      	mov	r3, r0
 8008528:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 800852a:	7bfb      	ldrb	r3, [r7, #15]
 800852c:	2b00      	cmp	r3, #0
 800852e:	d00f      	beq.n	8008550 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8008530:	6839      	ldr	r1, [r7, #0]
 8008532:	6878      	ldr	r0, [r7, #4]
 8008534:	f000 f8fe 	bl	8008734 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	685b      	ldr	r3, [r3, #4]
 800853c:	b2db      	uxtb	r3, r3
 800853e:	4619      	mov	r1, r3
 8008540:	6878      	ldr	r0, [r7, #4]
 8008542:	f7ff f983 	bl	800784c <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	2202      	movs	r2, #2
 800854a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800854e:	e014      	b.n	800857a <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8008550:	6878      	ldr	r0, [r7, #4]
 8008552:	f000 f9ba 	bl	80088ca <USBD_CtlSendStatus>
    break;
 8008556:	e010      	b.n	800857a <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8008558:	6878      	ldr	r0, [r7, #4]
 800855a:	f000 f9b6 	bl	80088ca <USBD_CtlSendStatus>
    break;
 800855e:	e00c      	b.n	800857a <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8008560:	6839      	ldr	r1, [r7, #0]
 8008562:	6878      	ldr	r0, [r7, #4]
 8008564:	f000 f8e6 	bl	8008734 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008568:	4b06      	ldr	r3, [pc, #24]	; (8008584 <USBD_SetConfig+0x144>)
 800856a:	781b      	ldrb	r3, [r3, #0]
 800856c:	4619      	mov	r1, r3
 800856e:	6878      	ldr	r0, [r7, #4]
 8008570:	f7ff f96c 	bl	800784c <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8008574:	2303      	movs	r3, #3
 8008576:	73fb      	strb	r3, [r7, #15]
    break;
 8008578:	bf00      	nop
  }

  return ret;
 800857a:	7bfb      	ldrb	r3, [r7, #15]
}
 800857c:	4618      	mov	r0, r3
 800857e:	3710      	adds	r7, #16
 8008580:	46bd      	mov	sp, r7
 8008582:	bd80      	pop	{r7, pc}
 8008584:	200001ab 	.word	0x200001ab

08008588 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008588:	b580      	push	{r7, lr}
 800858a:	b082      	sub	sp, #8
 800858c:	af00      	add	r7, sp, #0
 800858e:	6078      	str	r0, [r7, #4]
 8008590:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008592:	683b      	ldr	r3, [r7, #0]
 8008594:	88db      	ldrh	r3, [r3, #6]
 8008596:	2b01      	cmp	r3, #1
 8008598:	d004      	beq.n	80085a4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800859a:	6839      	ldr	r1, [r7, #0]
 800859c:	6878      	ldr	r0, [r7, #4]
 800859e:	f000 f8c9 	bl	8008734 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 80085a2:	e021      	b.n	80085e8 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80085aa:	2b01      	cmp	r3, #1
 80085ac:	db17      	blt.n	80085de <USBD_GetConfig+0x56>
 80085ae:	2b02      	cmp	r3, #2
 80085b0:	dd02      	ble.n	80085b8 <USBD_GetConfig+0x30>
 80085b2:	2b03      	cmp	r3, #3
 80085b4:	d00b      	beq.n	80085ce <USBD_GetConfig+0x46>
 80085b6:	e012      	b.n	80085de <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	2200      	movs	r2, #0
 80085bc:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	3308      	adds	r3, #8
 80085c2:	2201      	movs	r2, #1
 80085c4:	4619      	mov	r1, r3
 80085c6:	6878      	ldr	r0, [r7, #4]
 80085c8:	f000 f925 	bl	8008816 <USBD_CtlSendData>
      break;
 80085cc:	e00c      	b.n	80085e8 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	3304      	adds	r3, #4
 80085d2:	2201      	movs	r2, #1
 80085d4:	4619      	mov	r1, r3
 80085d6:	6878      	ldr	r0, [r7, #4]
 80085d8:	f000 f91d 	bl	8008816 <USBD_CtlSendData>
      break;
 80085dc:	e004      	b.n	80085e8 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 80085de:	6839      	ldr	r1, [r7, #0]
 80085e0:	6878      	ldr	r0, [r7, #4]
 80085e2:	f000 f8a7 	bl	8008734 <USBD_CtlError>
      break;
 80085e6:	bf00      	nop
}
 80085e8:	bf00      	nop
 80085ea:	3708      	adds	r7, #8
 80085ec:	46bd      	mov	sp, r7
 80085ee:	bd80      	pop	{r7, pc}

080085f0 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80085f0:	b580      	push	{r7, lr}
 80085f2:	b082      	sub	sp, #8
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	6078      	str	r0, [r7, #4]
 80085f8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008600:	3b01      	subs	r3, #1
 8008602:	2b02      	cmp	r3, #2
 8008604:	d81e      	bhi.n	8008644 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 8008606:	683b      	ldr	r3, [r7, #0]
 8008608:	88db      	ldrh	r3, [r3, #6]
 800860a:	2b02      	cmp	r3, #2
 800860c:	d004      	beq.n	8008618 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800860e:	6839      	ldr	r1, [r7, #0]
 8008610:	6878      	ldr	r0, [r7, #4]
 8008612:	f000 f88f 	bl	8008734 <USBD_CtlError>
      break;
 8008616:	e01a      	b.n	800864e <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	2201      	movs	r2, #1
 800861c:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008624:	2b00      	cmp	r3, #0
 8008626:	d005      	beq.n	8008634 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	68db      	ldr	r3, [r3, #12]
 800862c:	f043 0202 	orr.w	r2, r3, #2
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	330c      	adds	r3, #12
 8008638:	2202      	movs	r2, #2
 800863a:	4619      	mov	r1, r3
 800863c:	6878      	ldr	r0, [r7, #4]
 800863e:	f000 f8ea 	bl	8008816 <USBD_CtlSendData>
    break;
 8008642:	e004      	b.n	800864e <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 8008644:	6839      	ldr	r1, [r7, #0]
 8008646:	6878      	ldr	r0, [r7, #4]
 8008648:	f000 f874 	bl	8008734 <USBD_CtlError>
    break;
 800864c:	bf00      	nop
  }
}
 800864e:	bf00      	nop
 8008650:	3708      	adds	r7, #8
 8008652:	46bd      	mov	sp, r7
 8008654:	bd80      	pop	{r7, pc}

08008656 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008656:	b580      	push	{r7, lr}
 8008658:	b082      	sub	sp, #8
 800865a:	af00      	add	r7, sp, #0
 800865c:	6078      	str	r0, [r7, #4]
 800865e:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008660:	683b      	ldr	r3, [r7, #0]
 8008662:	885b      	ldrh	r3, [r3, #2]
 8008664:	2b01      	cmp	r3, #1
 8008666:	d106      	bne.n	8008676 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	2201      	movs	r2, #1
 800866c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008670:	6878      	ldr	r0, [r7, #4]
 8008672:	f000 f92a 	bl	80088ca <USBD_CtlSendStatus>
  }
}
 8008676:	bf00      	nop
 8008678:	3708      	adds	r7, #8
 800867a:	46bd      	mov	sp, r7
 800867c:	bd80      	pop	{r7, pc}

0800867e <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800867e:	b580      	push	{r7, lr}
 8008680:	b082      	sub	sp, #8
 8008682:	af00      	add	r7, sp, #0
 8008684:	6078      	str	r0, [r7, #4]
 8008686:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800868e:	3b01      	subs	r3, #1
 8008690:	2b02      	cmp	r3, #2
 8008692:	d80b      	bhi.n	80086ac <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008694:	683b      	ldr	r3, [r7, #0]
 8008696:	885b      	ldrh	r3, [r3, #2]
 8008698:	2b01      	cmp	r3, #1
 800869a:	d10c      	bne.n	80086b6 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	2200      	movs	r2, #0
 80086a0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80086a4:	6878      	ldr	r0, [r7, #4]
 80086a6:	f000 f910 	bl	80088ca <USBD_CtlSendStatus>
      }
      break;
 80086aa:	e004      	b.n	80086b6 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80086ac:	6839      	ldr	r1, [r7, #0]
 80086ae:	6878      	ldr	r0, [r7, #4]
 80086b0:	f000 f840 	bl	8008734 <USBD_CtlError>
      break;
 80086b4:	e000      	b.n	80086b8 <USBD_ClrFeature+0x3a>
      break;
 80086b6:	bf00      	nop
  }
}
 80086b8:	bf00      	nop
 80086ba:	3708      	adds	r7, #8
 80086bc:	46bd      	mov	sp, r7
 80086be:	bd80      	pop	{r7, pc}

080086c0 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80086c0:	b580      	push	{r7, lr}
 80086c2:	b084      	sub	sp, #16
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	6078      	str	r0, [r7, #4]
 80086c8:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80086ca:	683b      	ldr	r3, [r7, #0]
 80086cc:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	781a      	ldrb	r2, [r3, #0]
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	3301      	adds	r3, #1
 80086da:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	781a      	ldrb	r2, [r3, #0]
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	3301      	adds	r3, #1
 80086e8:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80086ea:	68f8      	ldr	r0, [r7, #12]
 80086ec:	f7ff faa8 	bl	8007c40 <SWAPBYTE>
 80086f0:	4603      	mov	r3, r0
 80086f2:	461a      	mov	r2, r3
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	3301      	adds	r3, #1
 80086fc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	3301      	adds	r3, #1
 8008702:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008704:	68f8      	ldr	r0, [r7, #12]
 8008706:	f7ff fa9b 	bl	8007c40 <SWAPBYTE>
 800870a:	4603      	mov	r3, r0
 800870c:	461a      	mov	r2, r3
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	3301      	adds	r3, #1
 8008716:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	3301      	adds	r3, #1
 800871c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800871e:	68f8      	ldr	r0, [r7, #12]
 8008720:	f7ff fa8e 	bl	8007c40 <SWAPBYTE>
 8008724:	4603      	mov	r3, r0
 8008726:	461a      	mov	r2, r3
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	80da      	strh	r2, [r3, #6]
}
 800872c:	bf00      	nop
 800872e:	3710      	adds	r7, #16
 8008730:	46bd      	mov	sp, r7
 8008732:	bd80      	pop	{r7, pc}

08008734 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008734:	b580      	push	{r7, lr}
 8008736:	b082      	sub	sp, #8
 8008738:	af00      	add	r7, sp, #0
 800873a:	6078      	str	r0, [r7, #4]
 800873c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800873e:	2180      	movs	r1, #128	; 0x80
 8008740:	6878      	ldr	r0, [r7, #4]
 8008742:	f000 fc81 	bl	8009048 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008746:	2100      	movs	r1, #0
 8008748:	6878      	ldr	r0, [r7, #4]
 800874a:	f000 fc7d 	bl	8009048 <USBD_LL_StallEP>
}
 800874e:	bf00      	nop
 8008750:	3708      	adds	r7, #8
 8008752:	46bd      	mov	sp, r7
 8008754:	bd80      	pop	{r7, pc}

08008756 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008756:	b580      	push	{r7, lr}
 8008758:	b086      	sub	sp, #24
 800875a:	af00      	add	r7, sp, #0
 800875c:	60f8      	str	r0, [r7, #12]
 800875e:	60b9      	str	r1, [r7, #8]
 8008760:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008762:	2300      	movs	r3, #0
 8008764:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	2b00      	cmp	r3, #0
 800876a:	d036      	beq.n	80087da <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008770:	6938      	ldr	r0, [r7, #16]
 8008772:	f000 f836 	bl	80087e2 <USBD_GetLen>
 8008776:	4603      	mov	r3, r0
 8008778:	3301      	adds	r3, #1
 800877a:	b29b      	uxth	r3, r3
 800877c:	005b      	lsls	r3, r3, #1
 800877e:	b29a      	uxth	r2, r3
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008784:	7dfb      	ldrb	r3, [r7, #23]
 8008786:	68ba      	ldr	r2, [r7, #8]
 8008788:	4413      	add	r3, r2
 800878a:	687a      	ldr	r2, [r7, #4]
 800878c:	7812      	ldrb	r2, [r2, #0]
 800878e:	701a      	strb	r2, [r3, #0]
  idx++;
 8008790:	7dfb      	ldrb	r3, [r7, #23]
 8008792:	3301      	adds	r3, #1
 8008794:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008796:	7dfb      	ldrb	r3, [r7, #23]
 8008798:	68ba      	ldr	r2, [r7, #8]
 800879a:	4413      	add	r3, r2
 800879c:	2203      	movs	r2, #3
 800879e:	701a      	strb	r2, [r3, #0]
  idx++;
 80087a0:	7dfb      	ldrb	r3, [r7, #23]
 80087a2:	3301      	adds	r3, #1
 80087a4:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80087a6:	e013      	b.n	80087d0 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80087a8:	7dfb      	ldrb	r3, [r7, #23]
 80087aa:	68ba      	ldr	r2, [r7, #8]
 80087ac:	4413      	add	r3, r2
 80087ae:	693a      	ldr	r2, [r7, #16]
 80087b0:	7812      	ldrb	r2, [r2, #0]
 80087b2:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80087b4:	693b      	ldr	r3, [r7, #16]
 80087b6:	3301      	adds	r3, #1
 80087b8:	613b      	str	r3, [r7, #16]
    idx++;
 80087ba:	7dfb      	ldrb	r3, [r7, #23]
 80087bc:	3301      	adds	r3, #1
 80087be:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80087c0:	7dfb      	ldrb	r3, [r7, #23]
 80087c2:	68ba      	ldr	r2, [r7, #8]
 80087c4:	4413      	add	r3, r2
 80087c6:	2200      	movs	r2, #0
 80087c8:	701a      	strb	r2, [r3, #0]
    idx++;
 80087ca:	7dfb      	ldrb	r3, [r7, #23]
 80087cc:	3301      	adds	r3, #1
 80087ce:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80087d0:	693b      	ldr	r3, [r7, #16]
 80087d2:	781b      	ldrb	r3, [r3, #0]
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d1e7      	bne.n	80087a8 <USBD_GetString+0x52>
 80087d8:	e000      	b.n	80087dc <USBD_GetString+0x86>
    return;
 80087da:	bf00      	nop
  }
}
 80087dc:	3718      	adds	r7, #24
 80087de:	46bd      	mov	sp, r7
 80087e0:	bd80      	pop	{r7, pc}

080087e2 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80087e2:	b480      	push	{r7}
 80087e4:	b085      	sub	sp, #20
 80087e6:	af00      	add	r7, sp, #0
 80087e8:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80087ea:	2300      	movs	r3, #0
 80087ec:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80087f2:	e005      	b.n	8008800 <USBD_GetLen+0x1e>
  {
    len++;
 80087f4:	7bfb      	ldrb	r3, [r7, #15]
 80087f6:	3301      	adds	r3, #1
 80087f8:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80087fa:	68bb      	ldr	r3, [r7, #8]
 80087fc:	3301      	adds	r3, #1
 80087fe:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008800:	68bb      	ldr	r3, [r7, #8]
 8008802:	781b      	ldrb	r3, [r3, #0]
 8008804:	2b00      	cmp	r3, #0
 8008806:	d1f5      	bne.n	80087f4 <USBD_GetLen+0x12>
  }

  return len;
 8008808:	7bfb      	ldrb	r3, [r7, #15]
}
 800880a:	4618      	mov	r0, r3
 800880c:	3714      	adds	r7, #20
 800880e:	46bd      	mov	sp, r7
 8008810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008814:	4770      	bx	lr

08008816 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008816:	b580      	push	{r7, lr}
 8008818:	b084      	sub	sp, #16
 800881a:	af00      	add	r7, sp, #0
 800881c:	60f8      	str	r0, [r7, #12]
 800881e:	60b9      	str	r1, [r7, #8]
 8008820:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	2202      	movs	r2, #2
 8008826:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	687a      	ldr	r2, [r7, #4]
 800882e:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	687a      	ldr	r2, [r7, #4]
 8008834:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	68ba      	ldr	r2, [r7, #8]
 800883a:	2100      	movs	r1, #0
 800883c:	68f8      	ldr	r0, [r7, #12]
 800883e:	f000 fc8d 	bl	800915c <USBD_LL_Transmit>

  return USBD_OK;
 8008842:	2300      	movs	r3, #0
}
 8008844:	4618      	mov	r0, r3
 8008846:	3710      	adds	r7, #16
 8008848:	46bd      	mov	sp, r7
 800884a:	bd80      	pop	{r7, pc}

0800884c <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800884c:	b580      	push	{r7, lr}
 800884e:	b084      	sub	sp, #16
 8008850:	af00      	add	r7, sp, #0
 8008852:	60f8      	str	r0, [r7, #12]
 8008854:	60b9      	str	r1, [r7, #8]
 8008856:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	68ba      	ldr	r2, [r7, #8]
 800885c:	2100      	movs	r1, #0
 800885e:	68f8      	ldr	r0, [r7, #12]
 8008860:	f000 fc7c 	bl	800915c <USBD_LL_Transmit>

  return USBD_OK;
 8008864:	2300      	movs	r3, #0
}
 8008866:	4618      	mov	r0, r3
 8008868:	3710      	adds	r7, #16
 800886a:	46bd      	mov	sp, r7
 800886c:	bd80      	pop	{r7, pc}

0800886e <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800886e:	b580      	push	{r7, lr}
 8008870:	b084      	sub	sp, #16
 8008872:	af00      	add	r7, sp, #0
 8008874:	60f8      	str	r0, [r7, #12]
 8008876:	60b9      	str	r1, [r7, #8]
 8008878:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	2203      	movs	r2, #3
 800887e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	687a      	ldr	r2, [r7, #4]
 8008886:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	687a      	ldr	r2, [r7, #4]
 800888e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	68ba      	ldr	r2, [r7, #8]
 8008896:	2100      	movs	r1, #0
 8008898:	68f8      	ldr	r0, [r7, #12]
 800889a:	f000 fc80 	bl	800919e <USBD_LL_PrepareReceive>

  return USBD_OK;
 800889e:	2300      	movs	r3, #0
}
 80088a0:	4618      	mov	r0, r3
 80088a2:	3710      	adds	r7, #16
 80088a4:	46bd      	mov	sp, r7
 80088a6:	bd80      	pop	{r7, pc}

080088a8 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80088a8:	b580      	push	{r7, lr}
 80088aa:	b084      	sub	sp, #16
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	60f8      	str	r0, [r7, #12]
 80088b0:	60b9      	str	r1, [r7, #8]
 80088b2:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	68ba      	ldr	r2, [r7, #8]
 80088b8:	2100      	movs	r1, #0
 80088ba:	68f8      	ldr	r0, [r7, #12]
 80088bc:	f000 fc6f 	bl	800919e <USBD_LL_PrepareReceive>

  return USBD_OK;
 80088c0:	2300      	movs	r3, #0
}
 80088c2:	4618      	mov	r0, r3
 80088c4:	3710      	adds	r7, #16
 80088c6:	46bd      	mov	sp, r7
 80088c8:	bd80      	pop	{r7, pc}

080088ca <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80088ca:	b580      	push	{r7, lr}
 80088cc:	b082      	sub	sp, #8
 80088ce:	af00      	add	r7, sp, #0
 80088d0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	2204      	movs	r2, #4
 80088d6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80088da:	2300      	movs	r3, #0
 80088dc:	2200      	movs	r2, #0
 80088de:	2100      	movs	r1, #0
 80088e0:	6878      	ldr	r0, [r7, #4]
 80088e2:	f000 fc3b 	bl	800915c <USBD_LL_Transmit>

  return USBD_OK;
 80088e6:	2300      	movs	r3, #0
}
 80088e8:	4618      	mov	r0, r3
 80088ea:	3708      	adds	r7, #8
 80088ec:	46bd      	mov	sp, r7
 80088ee:	bd80      	pop	{r7, pc}

080088f0 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80088f0:	b580      	push	{r7, lr}
 80088f2:	b082      	sub	sp, #8
 80088f4:	af00      	add	r7, sp, #0
 80088f6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	2205      	movs	r2, #5
 80088fc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008900:	2300      	movs	r3, #0
 8008902:	2200      	movs	r2, #0
 8008904:	2100      	movs	r1, #0
 8008906:	6878      	ldr	r0, [r7, #4]
 8008908:	f000 fc49 	bl	800919e <USBD_LL_PrepareReceive>

  return USBD_OK;
 800890c:	2300      	movs	r3, #0
}
 800890e:	4618      	mov	r0, r3
 8008910:	3708      	adds	r7, #8
 8008912:	46bd      	mov	sp, r7
 8008914:	bd80      	pop	{r7, pc}
	...

08008918 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 8008918:	b580      	push	{r7, lr}
 800891a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 800891c:	2200      	movs	r2, #0
 800891e:	4912      	ldr	r1, [pc, #72]	; (8008968 <MX_USB_Device_Init+0x50>)
 8008920:	4812      	ldr	r0, [pc, #72]	; (800896c <MX_USB_Device_Init+0x54>)
 8008922:	f7fe ff09 	bl	8007738 <USBD_Init>
 8008926:	4603      	mov	r3, r0
 8008928:	2b00      	cmp	r3, #0
 800892a:	d001      	beq.n	8008930 <MX_USB_Device_Init+0x18>
    Error_Handler();
 800892c:	f7f8 f9ae 	bl	8000c8c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 8008930:	490f      	ldr	r1, [pc, #60]	; (8008970 <MX_USB_Device_Init+0x58>)
 8008932:	480e      	ldr	r0, [pc, #56]	; (800896c <MX_USB_Device_Init+0x54>)
 8008934:	f7fe ff30 	bl	8007798 <USBD_RegisterClass>
 8008938:	4603      	mov	r3, r0
 800893a:	2b00      	cmp	r3, #0
 800893c:	d001      	beq.n	8008942 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800893e:	f7f8 f9a5 	bl	8000c8c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 8008942:	490c      	ldr	r1, [pc, #48]	; (8008974 <MX_USB_Device_Init+0x5c>)
 8008944:	4809      	ldr	r0, [pc, #36]	; (800896c <MX_USB_Device_Init+0x54>)
 8008946:	f7fe fe5b 	bl	8007600 <USBD_CDC_RegisterInterface>
 800894a:	4603      	mov	r3, r0
 800894c:	2b00      	cmp	r3, #0
 800894e:	d001      	beq.n	8008954 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 8008950:	f7f8 f99c 	bl	8000c8c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 8008954:	4805      	ldr	r0, [pc, #20]	; (800896c <MX_USB_Device_Init+0x54>)
 8008956:	f7fe ff46 	bl	80077e6 <USBD_Start>
 800895a:	4603      	mov	r3, r0
 800895c:	2b00      	cmp	r3, #0
 800895e:	d001      	beq.n	8008964 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 8008960:	f7f8 f994 	bl	8000c8c <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 8008964:	bf00      	nop
 8008966:	bd80      	pop	{r7, pc}
 8008968:	20000130 	.word	0x20000130
 800896c:	20000630 	.word	0x20000630
 8008970:	20000018 	.word	0x20000018
 8008974:	2000011c 	.word	0x2000011c

08008978 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008978:	b580      	push	{r7, lr}
 800897a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800897c:	2200      	movs	r2, #0
 800897e:	4905      	ldr	r1, [pc, #20]	; (8008994 <CDC_Init_FS+0x1c>)
 8008980:	4805      	ldr	r0, [pc, #20]	; (8008998 <CDC_Init_FS+0x20>)
 8008982:	f7fe fe52 	bl	800762a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008986:	4905      	ldr	r1, [pc, #20]	; (800899c <CDC_Init_FS+0x24>)
 8008988:	4803      	ldr	r0, [pc, #12]	; (8008998 <CDC_Init_FS+0x20>)
 800898a:	f7fe fe67 	bl	800765c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800898e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008990:	4618      	mov	r0, r3
 8008992:	bd80      	pop	{r7, pc}
 8008994:	20000ce8 	.word	0x20000ce8
 8008998:	20000630 	.word	0x20000630
 800899c:	20000900 	.word	0x20000900

080089a0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80089a0:	b480      	push	{r7}
 80089a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80089a4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80089a6:	4618      	mov	r0, r3
 80089a8:	46bd      	mov	sp, r7
 80089aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ae:	4770      	bx	lr

080089b0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80089b0:	b480      	push	{r7}
 80089b2:	b083      	sub	sp, #12
 80089b4:	af00      	add	r7, sp, #0
 80089b6:	4603      	mov	r3, r0
 80089b8:	6039      	str	r1, [r7, #0]
 80089ba:	71fb      	strb	r3, [r7, #7]
 80089bc:	4613      	mov	r3, r2
 80089be:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80089c0:	79fb      	ldrb	r3, [r7, #7]
 80089c2:	2b23      	cmp	r3, #35	; 0x23
 80089c4:	d84a      	bhi.n	8008a5c <CDC_Control_FS+0xac>
 80089c6:	a201      	add	r2, pc, #4	; (adr r2, 80089cc <CDC_Control_FS+0x1c>)
 80089c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089cc:	08008a5d 	.word	0x08008a5d
 80089d0:	08008a5d 	.word	0x08008a5d
 80089d4:	08008a5d 	.word	0x08008a5d
 80089d8:	08008a5d 	.word	0x08008a5d
 80089dc:	08008a5d 	.word	0x08008a5d
 80089e0:	08008a5d 	.word	0x08008a5d
 80089e4:	08008a5d 	.word	0x08008a5d
 80089e8:	08008a5d 	.word	0x08008a5d
 80089ec:	08008a5d 	.word	0x08008a5d
 80089f0:	08008a5d 	.word	0x08008a5d
 80089f4:	08008a5d 	.word	0x08008a5d
 80089f8:	08008a5d 	.word	0x08008a5d
 80089fc:	08008a5d 	.word	0x08008a5d
 8008a00:	08008a5d 	.word	0x08008a5d
 8008a04:	08008a5d 	.word	0x08008a5d
 8008a08:	08008a5d 	.word	0x08008a5d
 8008a0c:	08008a5d 	.word	0x08008a5d
 8008a10:	08008a5d 	.word	0x08008a5d
 8008a14:	08008a5d 	.word	0x08008a5d
 8008a18:	08008a5d 	.word	0x08008a5d
 8008a1c:	08008a5d 	.word	0x08008a5d
 8008a20:	08008a5d 	.word	0x08008a5d
 8008a24:	08008a5d 	.word	0x08008a5d
 8008a28:	08008a5d 	.word	0x08008a5d
 8008a2c:	08008a5d 	.word	0x08008a5d
 8008a30:	08008a5d 	.word	0x08008a5d
 8008a34:	08008a5d 	.word	0x08008a5d
 8008a38:	08008a5d 	.word	0x08008a5d
 8008a3c:	08008a5d 	.word	0x08008a5d
 8008a40:	08008a5d 	.word	0x08008a5d
 8008a44:	08008a5d 	.word	0x08008a5d
 8008a48:	08008a5d 	.word	0x08008a5d
 8008a4c:	08008a5d 	.word	0x08008a5d
 8008a50:	08008a5d 	.word	0x08008a5d
 8008a54:	08008a5d 	.word	0x08008a5d
 8008a58:	08008a5d 	.word	0x08008a5d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008a5c:	bf00      	nop
  }

  return (USBD_OK);
 8008a5e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008a60:	4618      	mov	r0, r3
 8008a62:	370c      	adds	r7, #12
 8008a64:	46bd      	mov	sp, r7
 8008a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a6a:	4770      	bx	lr

08008a6c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008a6c:	b580      	push	{r7, lr}
 8008a6e:	b082      	sub	sp, #8
 8008a70:	af00      	add	r7, sp, #0
 8008a72:	6078      	str	r0, [r7, #4]
 8008a74:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  CDC_On_Receive(Buf, Len); // (1)
 8008a76:	6839      	ldr	r1, [r7, #0]
 8008a78:	6878      	ldr	r0, [r7, #4]
 8008a7a:	f7f7 fbcd 	bl	8000218 <CDC_On_Receive>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008a7e:	6879      	ldr	r1, [r7, #4]
 8008a80:	4805      	ldr	r0, [pc, #20]	; (8008a98 <CDC_Receive_FS+0x2c>)
 8008a82:	f7fe fdeb 	bl	800765c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008a86:	4804      	ldr	r0, [pc, #16]	; (8008a98 <CDC_Receive_FS+0x2c>)
 8008a88:	f7fe fe2c 	bl	80076e4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008a8c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008a8e:	4618      	mov	r0, r3
 8008a90:	3708      	adds	r7, #8
 8008a92:	46bd      	mov	sp, r7
 8008a94:	bd80      	pop	{r7, pc}
 8008a96:	bf00      	nop
 8008a98:	20000630 	.word	0x20000630

08008a9c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008a9c:	b580      	push	{r7, lr}
 8008a9e:	b084      	sub	sp, #16
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	6078      	str	r0, [r7, #4]
 8008aa4:	460b      	mov	r3, r1
 8008aa6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008aa8:	2300      	movs	r3, #0
 8008aaa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008aac:	4b0d      	ldr	r3, [pc, #52]	; (8008ae4 <CDC_Transmit_FS+0x48>)
 8008aae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008ab2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008ab4:	68bb      	ldr	r3, [r7, #8]
 8008ab6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d001      	beq.n	8008ac2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8008abe:	2301      	movs	r3, #1
 8008ac0:	e00b      	b.n	8008ada <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008ac2:	887b      	ldrh	r3, [r7, #2]
 8008ac4:	461a      	mov	r2, r3
 8008ac6:	6879      	ldr	r1, [r7, #4]
 8008ac8:	4806      	ldr	r0, [pc, #24]	; (8008ae4 <CDC_Transmit_FS+0x48>)
 8008aca:	f7fe fdae 	bl	800762a <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008ace:	4805      	ldr	r0, [pc, #20]	; (8008ae4 <CDC_Transmit_FS+0x48>)
 8008ad0:	f7fe fdd8 	bl	8007684 <USBD_CDC_TransmitPacket>
 8008ad4:	4603      	mov	r3, r0
 8008ad6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008ad8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ada:	4618      	mov	r0, r3
 8008adc:	3710      	adds	r7, #16
 8008ade:	46bd      	mov	sp, r7
 8008ae0:	bd80      	pop	{r7, pc}
 8008ae2:	bf00      	nop
 8008ae4:	20000630 	.word	0x20000630

08008ae8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008ae8:	b480      	push	{r7}
 8008aea:	b087      	sub	sp, #28
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	60f8      	str	r0, [r7, #12]
 8008af0:	60b9      	str	r1, [r7, #8]
 8008af2:	4613      	mov	r3, r2
 8008af4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8008af6:	2300      	movs	r3, #0
 8008af8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8008afa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008afe:	4618      	mov	r0, r3
 8008b00:	371c      	adds	r7, #28
 8008b02:	46bd      	mov	sp, r7
 8008b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b08:	4770      	bx	lr
	...

08008b0c <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008b0c:	b480      	push	{r7}
 8008b0e:	b083      	sub	sp, #12
 8008b10:	af00      	add	r7, sp, #0
 8008b12:	4603      	mov	r3, r0
 8008b14:	6039      	str	r1, [r7, #0]
 8008b16:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 8008b18:	683b      	ldr	r3, [r7, #0]
 8008b1a:	2212      	movs	r2, #18
 8008b1c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 8008b1e:	4b03      	ldr	r3, [pc, #12]	; (8008b2c <USBD_CDC_DeviceDescriptor+0x20>)
}
 8008b20:	4618      	mov	r0, r3
 8008b22:	370c      	adds	r7, #12
 8008b24:	46bd      	mov	sp, r7
 8008b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b2a:	4770      	bx	lr
 8008b2c:	20000150 	.word	0x20000150

08008b30 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008b30:	b480      	push	{r7}
 8008b32:	b083      	sub	sp, #12
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	4603      	mov	r3, r0
 8008b38:	6039      	str	r1, [r7, #0]
 8008b3a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008b3c:	683b      	ldr	r3, [r7, #0]
 8008b3e:	2204      	movs	r2, #4
 8008b40:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008b42:	4b03      	ldr	r3, [pc, #12]	; (8008b50 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 8008b44:	4618      	mov	r0, r3
 8008b46:	370c      	adds	r7, #12
 8008b48:	46bd      	mov	sp, r7
 8008b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b4e:	4770      	bx	lr
 8008b50:	20000164 	.word	0x20000164

08008b54 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008b54:	b580      	push	{r7, lr}
 8008b56:	b082      	sub	sp, #8
 8008b58:	af00      	add	r7, sp, #0
 8008b5a:	4603      	mov	r3, r0
 8008b5c:	6039      	str	r1, [r7, #0]
 8008b5e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008b60:	79fb      	ldrb	r3, [r7, #7]
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d105      	bne.n	8008b72 <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8008b66:	683a      	ldr	r2, [r7, #0]
 8008b68:	4907      	ldr	r1, [pc, #28]	; (8008b88 <USBD_CDC_ProductStrDescriptor+0x34>)
 8008b6a:	4808      	ldr	r0, [pc, #32]	; (8008b8c <USBD_CDC_ProductStrDescriptor+0x38>)
 8008b6c:	f7ff fdf3 	bl	8008756 <USBD_GetString>
 8008b70:	e004      	b.n	8008b7c <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8008b72:	683a      	ldr	r2, [r7, #0]
 8008b74:	4904      	ldr	r1, [pc, #16]	; (8008b88 <USBD_CDC_ProductStrDescriptor+0x34>)
 8008b76:	4805      	ldr	r0, [pc, #20]	; (8008b8c <USBD_CDC_ProductStrDescriptor+0x38>)
 8008b78:	f7ff fded 	bl	8008756 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008b7c:	4b02      	ldr	r3, [pc, #8]	; (8008b88 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 8008b7e:	4618      	mov	r0, r3
 8008b80:	3708      	adds	r7, #8
 8008b82:	46bd      	mov	sp, r7
 8008b84:	bd80      	pop	{r7, pc}
 8008b86:	bf00      	nop
 8008b88:	200010d0 	.word	0x200010d0
 8008b8c:	08009390 	.word	0x08009390

08008b90 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008b90:	b580      	push	{r7, lr}
 8008b92:	b082      	sub	sp, #8
 8008b94:	af00      	add	r7, sp, #0
 8008b96:	4603      	mov	r3, r0
 8008b98:	6039      	str	r1, [r7, #0]
 8008b9a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008b9c:	683a      	ldr	r2, [r7, #0]
 8008b9e:	4904      	ldr	r1, [pc, #16]	; (8008bb0 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 8008ba0:	4804      	ldr	r0, [pc, #16]	; (8008bb4 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 8008ba2:	f7ff fdd8 	bl	8008756 <USBD_GetString>
  return USBD_StrDesc;
 8008ba6:	4b02      	ldr	r3, [pc, #8]	; (8008bb0 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 8008ba8:	4618      	mov	r0, r3
 8008baa:	3708      	adds	r7, #8
 8008bac:	46bd      	mov	sp, r7
 8008bae:	bd80      	pop	{r7, pc}
 8008bb0:	200010d0 	.word	0x200010d0
 8008bb4:	080093a8 	.word	0x080093a8

08008bb8 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008bb8:	b580      	push	{r7, lr}
 8008bba:	b082      	sub	sp, #8
 8008bbc:	af00      	add	r7, sp, #0
 8008bbe:	4603      	mov	r3, r0
 8008bc0:	6039      	str	r1, [r7, #0]
 8008bc2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008bc4:	683b      	ldr	r3, [r7, #0]
 8008bc6:	221a      	movs	r2, #26
 8008bc8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008bca:	f000 f843 	bl	8008c54 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8008bce:	4b02      	ldr	r3, [pc, #8]	; (8008bd8 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 8008bd0:	4618      	mov	r0, r3
 8008bd2:	3708      	adds	r7, #8
 8008bd4:	46bd      	mov	sp, r7
 8008bd6:	bd80      	pop	{r7, pc}
 8008bd8:	20000168 	.word	0x20000168

08008bdc <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008bdc:	b580      	push	{r7, lr}
 8008bde:	b082      	sub	sp, #8
 8008be0:	af00      	add	r7, sp, #0
 8008be2:	4603      	mov	r3, r0
 8008be4:	6039      	str	r1, [r7, #0]
 8008be6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008be8:	79fb      	ldrb	r3, [r7, #7]
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d105      	bne.n	8008bfa <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8008bee:	683a      	ldr	r2, [r7, #0]
 8008bf0:	4907      	ldr	r1, [pc, #28]	; (8008c10 <USBD_CDC_ConfigStrDescriptor+0x34>)
 8008bf2:	4808      	ldr	r0, [pc, #32]	; (8008c14 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8008bf4:	f7ff fdaf 	bl	8008756 <USBD_GetString>
 8008bf8:	e004      	b.n	8008c04 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8008bfa:	683a      	ldr	r2, [r7, #0]
 8008bfc:	4904      	ldr	r1, [pc, #16]	; (8008c10 <USBD_CDC_ConfigStrDescriptor+0x34>)
 8008bfe:	4805      	ldr	r0, [pc, #20]	; (8008c14 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8008c00:	f7ff fda9 	bl	8008756 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008c04:	4b02      	ldr	r3, [pc, #8]	; (8008c10 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 8008c06:	4618      	mov	r0, r3
 8008c08:	3708      	adds	r7, #8
 8008c0a:	46bd      	mov	sp, r7
 8008c0c:	bd80      	pop	{r7, pc}
 8008c0e:	bf00      	nop
 8008c10:	200010d0 	.word	0x200010d0
 8008c14:	080093bc 	.word	0x080093bc

08008c18 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008c18:	b580      	push	{r7, lr}
 8008c1a:	b082      	sub	sp, #8
 8008c1c:	af00      	add	r7, sp, #0
 8008c1e:	4603      	mov	r3, r0
 8008c20:	6039      	str	r1, [r7, #0]
 8008c22:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008c24:	79fb      	ldrb	r3, [r7, #7]
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d105      	bne.n	8008c36 <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8008c2a:	683a      	ldr	r2, [r7, #0]
 8008c2c:	4907      	ldr	r1, [pc, #28]	; (8008c4c <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8008c2e:	4808      	ldr	r0, [pc, #32]	; (8008c50 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8008c30:	f7ff fd91 	bl	8008756 <USBD_GetString>
 8008c34:	e004      	b.n	8008c40 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8008c36:	683a      	ldr	r2, [r7, #0]
 8008c38:	4904      	ldr	r1, [pc, #16]	; (8008c4c <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8008c3a:	4805      	ldr	r0, [pc, #20]	; (8008c50 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8008c3c:	f7ff fd8b 	bl	8008756 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008c40:	4b02      	ldr	r3, [pc, #8]	; (8008c4c <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 8008c42:	4618      	mov	r0, r3
 8008c44:	3708      	adds	r7, #8
 8008c46:	46bd      	mov	sp, r7
 8008c48:	bd80      	pop	{r7, pc}
 8008c4a:	bf00      	nop
 8008c4c:	200010d0 	.word	0x200010d0
 8008c50:	080093c8 	.word	0x080093c8

08008c54 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008c54:	b580      	push	{r7, lr}
 8008c56:	b084      	sub	sp, #16
 8008c58:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008c5a:	4b0f      	ldr	r3, [pc, #60]	; (8008c98 <Get_SerialNum+0x44>)
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008c60:	4b0e      	ldr	r3, [pc, #56]	; (8008c9c <Get_SerialNum+0x48>)
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008c66:	4b0e      	ldr	r3, [pc, #56]	; (8008ca0 <Get_SerialNum+0x4c>)
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008c6c:	68fa      	ldr	r2, [r7, #12]
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	4413      	add	r3, r2
 8008c72:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d009      	beq.n	8008c8e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008c7a:	2208      	movs	r2, #8
 8008c7c:	4909      	ldr	r1, [pc, #36]	; (8008ca4 <Get_SerialNum+0x50>)
 8008c7e:	68f8      	ldr	r0, [r7, #12]
 8008c80:	f000 f814 	bl	8008cac <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008c84:	2204      	movs	r2, #4
 8008c86:	4908      	ldr	r1, [pc, #32]	; (8008ca8 <Get_SerialNum+0x54>)
 8008c88:	68b8      	ldr	r0, [r7, #8]
 8008c8a:	f000 f80f 	bl	8008cac <IntToUnicode>
  }
}
 8008c8e:	bf00      	nop
 8008c90:	3710      	adds	r7, #16
 8008c92:	46bd      	mov	sp, r7
 8008c94:	bd80      	pop	{r7, pc}
 8008c96:	bf00      	nop
 8008c98:	1fff7590 	.word	0x1fff7590
 8008c9c:	1fff7594 	.word	0x1fff7594
 8008ca0:	1fff7598 	.word	0x1fff7598
 8008ca4:	2000016a 	.word	0x2000016a
 8008ca8:	2000017a 	.word	0x2000017a

08008cac <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008cac:	b480      	push	{r7}
 8008cae:	b087      	sub	sp, #28
 8008cb0:	af00      	add	r7, sp, #0
 8008cb2:	60f8      	str	r0, [r7, #12]
 8008cb4:	60b9      	str	r1, [r7, #8]
 8008cb6:	4613      	mov	r3, r2
 8008cb8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008cba:	2300      	movs	r3, #0
 8008cbc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008cbe:	2300      	movs	r3, #0
 8008cc0:	75fb      	strb	r3, [r7, #23]
 8008cc2:	e027      	b.n	8008d14 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	0f1b      	lsrs	r3, r3, #28
 8008cc8:	2b09      	cmp	r3, #9
 8008cca:	d80b      	bhi.n	8008ce4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	0f1b      	lsrs	r3, r3, #28
 8008cd0:	b2da      	uxtb	r2, r3
 8008cd2:	7dfb      	ldrb	r3, [r7, #23]
 8008cd4:	005b      	lsls	r3, r3, #1
 8008cd6:	4619      	mov	r1, r3
 8008cd8:	68bb      	ldr	r3, [r7, #8]
 8008cda:	440b      	add	r3, r1
 8008cdc:	3230      	adds	r2, #48	; 0x30
 8008cde:	b2d2      	uxtb	r2, r2
 8008ce0:	701a      	strb	r2, [r3, #0]
 8008ce2:	e00a      	b.n	8008cfa <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	0f1b      	lsrs	r3, r3, #28
 8008ce8:	b2da      	uxtb	r2, r3
 8008cea:	7dfb      	ldrb	r3, [r7, #23]
 8008cec:	005b      	lsls	r3, r3, #1
 8008cee:	4619      	mov	r1, r3
 8008cf0:	68bb      	ldr	r3, [r7, #8]
 8008cf2:	440b      	add	r3, r1
 8008cf4:	3237      	adds	r2, #55	; 0x37
 8008cf6:	b2d2      	uxtb	r2, r2
 8008cf8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	011b      	lsls	r3, r3, #4
 8008cfe:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008d00:	7dfb      	ldrb	r3, [r7, #23]
 8008d02:	005b      	lsls	r3, r3, #1
 8008d04:	3301      	adds	r3, #1
 8008d06:	68ba      	ldr	r2, [r7, #8]
 8008d08:	4413      	add	r3, r2
 8008d0a:	2200      	movs	r2, #0
 8008d0c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008d0e:	7dfb      	ldrb	r3, [r7, #23]
 8008d10:	3301      	adds	r3, #1
 8008d12:	75fb      	strb	r3, [r7, #23]
 8008d14:	7dfa      	ldrb	r2, [r7, #23]
 8008d16:	79fb      	ldrb	r3, [r7, #7]
 8008d18:	429a      	cmp	r2, r3
 8008d1a:	d3d3      	bcc.n	8008cc4 <IntToUnicode+0x18>
  }
}
 8008d1c:	bf00      	nop
 8008d1e:	371c      	adds	r7, #28
 8008d20:	46bd      	mov	sp, r7
 8008d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d26:	4770      	bx	lr

08008d28 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACK == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACK */
{
 8008d28:	b580      	push	{r7, lr}
 8008d2a:	b084      	sub	sp, #16
 8008d2c:	af00      	add	r7, sp, #0
 8008d2e:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	4a0d      	ldr	r2, [pc, #52]	; (8008d6c <HAL_PCD_MspInit+0x44>)
 8008d36:	4293      	cmp	r3, r2
 8008d38:	d113      	bne.n	8008d62 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8008d3a:	4b0d      	ldr	r3, [pc, #52]	; (8008d70 <HAL_PCD_MspInit+0x48>)
 8008d3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d3e:	4a0c      	ldr	r2, [pc, #48]	; (8008d70 <HAL_PCD_MspInit+0x48>)
 8008d40:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008d44:	6593      	str	r3, [r2, #88]	; 0x58
 8008d46:	4b0a      	ldr	r3, [pc, #40]	; (8008d70 <HAL_PCD_MspInit+0x48>)
 8008d48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d4a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008d4e:	60fb      	str	r3, [r7, #12]
 8008d50:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 8008d52:	2200      	movs	r2, #0
 8008d54:	2100      	movs	r1, #0
 8008d56:	2014      	movs	r0, #20
 8008d58:	f7f8 fb83 	bl	8001462 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8008d5c:	2014      	movs	r0, #20
 8008d5e:	f7f8 fb9a 	bl	8001496 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8008d62:	bf00      	nop
 8008d64:	3710      	adds	r7, #16
 8008d66:	46bd      	mov	sp, r7
 8008d68:	bd80      	pop	{r7, pc}
 8008d6a:	bf00      	nop
 8008d6c:	40005c00 	.word	0x40005c00
 8008d70:	40021000 	.word	0x40021000

08008d74 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d74:	b580      	push	{r7, lr}
 8008d76:	b082      	sub	sp, #8
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	f8d3 22f0 	ldr.w	r2, [r3, #752]	; 0x2f0
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8008d88:	4619      	mov	r1, r3
 8008d8a:	4610      	mov	r0, r2
 8008d8c:	f7fe fd76 	bl	800787c <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 8008d90:	bf00      	nop
 8008d92:	3708      	adds	r7, #8
 8008d94:	46bd      	mov	sp, r7
 8008d96:	bd80      	pop	{r7, pc}

08008d98 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d98:	b580      	push	{r7, lr}
 8008d9a:	b082      	sub	sp, #8
 8008d9c:	af00      	add	r7, sp, #0
 8008d9e:	6078      	str	r0, [r7, #4]
 8008da0:	460b      	mov	r3, r1
 8008da2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 8008daa:	78fa      	ldrb	r2, [r7, #3]
 8008dac:	6879      	ldr	r1, [r7, #4]
 8008dae:	4613      	mov	r3, r2
 8008db0:	009b      	lsls	r3, r3, #2
 8008db2:	4413      	add	r3, r2
 8008db4:	00db      	lsls	r3, r3, #3
 8008db6:	440b      	add	r3, r1
 8008db8:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8008dbc:	681a      	ldr	r2, [r3, #0]
 8008dbe:	78fb      	ldrb	r3, [r7, #3]
 8008dc0:	4619      	mov	r1, r3
 8008dc2:	f7fe fdae 	bl	8007922 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 8008dc6:	bf00      	nop
 8008dc8:	3708      	adds	r7, #8
 8008dca:	46bd      	mov	sp, r7
 8008dcc:	bd80      	pop	{r7, pc}

08008dce <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008dce:	b580      	push	{r7, lr}
 8008dd0:	b082      	sub	sp, #8
 8008dd2:	af00      	add	r7, sp, #0
 8008dd4:	6078      	str	r0, [r7, #4]
 8008dd6:	460b      	mov	r3, r1
 8008dd8:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 8008de0:	78fa      	ldrb	r2, [r7, #3]
 8008de2:	6879      	ldr	r1, [r7, #4]
 8008de4:	4613      	mov	r3, r2
 8008de6:	009b      	lsls	r3, r3, #2
 8008de8:	4413      	add	r3, r2
 8008dea:	00db      	lsls	r3, r3, #3
 8008dec:	440b      	add	r3, r1
 8008dee:	333c      	adds	r3, #60	; 0x3c
 8008df0:	681a      	ldr	r2, [r3, #0]
 8008df2:	78fb      	ldrb	r3, [r7, #3]
 8008df4:	4619      	mov	r1, r3
 8008df6:	f7fe fdf7 	bl	80079e8 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 8008dfa:	bf00      	nop
 8008dfc:	3708      	adds	r7, #8
 8008dfe:	46bd      	mov	sp, r7
 8008e00:	bd80      	pop	{r7, pc}

08008e02 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e02:	b580      	push	{r7, lr}
 8008e04:	b082      	sub	sp, #8
 8008e06:	af00      	add	r7, sp, #0
 8008e08:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8008e10:	4618      	mov	r0, r3
 8008e12:	f7fe fefb 	bl	8007c0c <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 8008e16:	bf00      	nop
 8008e18:	3708      	adds	r7, #8
 8008e1a:	46bd      	mov	sp, r7
 8008e1c:	bd80      	pop	{r7, pc}

08008e1e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e1e:	b580      	push	{r7, lr}
 8008e20:	b084      	sub	sp, #16
 8008e22:	af00      	add	r7, sp, #0
 8008e24:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008e26:	2301      	movs	r3, #1
 8008e28:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	689b      	ldr	r3, [r3, #8]
 8008e2e:	2b02      	cmp	r3, #2
 8008e30:	d001      	beq.n	8008e36 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008e32:	f7f7 ff2b 	bl	8000c8c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8008e3c:	7bfa      	ldrb	r2, [r7, #15]
 8008e3e:	4611      	mov	r1, r2
 8008e40:	4618      	mov	r0, r3
 8008e42:	f7fe fea8 	bl	8007b96 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8008e4c:	4618      	mov	r0, r3
 8008e4e:	f7fe fe61 	bl	8007b14 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 8008e52:	bf00      	nop
 8008e54:	3710      	adds	r7, #16
 8008e56:	46bd      	mov	sp, r7
 8008e58:	bd80      	pop	{r7, pc}
	...

08008e5c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e5c:	b580      	push	{r7, lr}
 8008e5e:	b082      	sub	sp, #8
 8008e60:	af00      	add	r7, sp, #0
 8008e62:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8008e6a:	4618      	mov	r0, r3
 8008e6c:	f7fe fea3 	bl	8007bb6 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	699b      	ldr	r3, [r3, #24]
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d005      	beq.n	8008e84 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008e78:	4b04      	ldr	r3, [pc, #16]	; (8008e8c <HAL_PCD_SuspendCallback+0x30>)
 8008e7a:	691b      	ldr	r3, [r3, #16]
 8008e7c:	4a03      	ldr	r2, [pc, #12]	; (8008e8c <HAL_PCD_SuspendCallback+0x30>)
 8008e7e:	f043 0306 	orr.w	r3, r3, #6
 8008e82:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 8008e84:	bf00      	nop
 8008e86:	3708      	adds	r7, #8
 8008e88:	46bd      	mov	sp, r7
 8008e8a:	bd80      	pop	{r7, pc}
 8008e8c:	e000ed00 	.word	0xe000ed00

08008e90 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e90:	b580      	push	{r7, lr}
 8008e92:	b082      	sub	sp, #8
 8008e94:	af00      	add	r7, sp, #0
 8008e96:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	699b      	ldr	r3, [r3, #24]
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d007      	beq.n	8008eb0 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008ea0:	4b08      	ldr	r3, [pc, #32]	; (8008ec4 <HAL_PCD_ResumeCallback+0x34>)
 8008ea2:	691b      	ldr	r3, [r3, #16]
 8008ea4:	4a07      	ldr	r2, [pc, #28]	; (8008ec4 <HAL_PCD_ResumeCallback+0x34>)
 8008ea6:	f023 0306 	bic.w	r3, r3, #6
 8008eaa:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8008eac:	f000 f9fa 	bl	80092a4 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8008eb6:	4618      	mov	r0, r3
 8008eb8:	f7fe fe92 	bl	8007be0 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 8008ebc:	bf00      	nop
 8008ebe:	3708      	adds	r7, #8
 8008ec0:	46bd      	mov	sp, r7
 8008ec2:	bd80      	pop	{r7, pc}
 8008ec4:	e000ed00 	.word	0xe000ed00

08008ec8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008ec8:	b580      	push	{r7, lr}
 8008eca:	b082      	sub	sp, #8
 8008ecc:	af00      	add	r7, sp, #0
 8008ece:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 8008ed0:	4a2b      	ldr	r2, [pc, #172]	; (8008f80 <USBD_LL_Init+0xb8>)
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	4a29      	ldr	r2, [pc, #164]	; (8008f80 <USBD_LL_Init+0xb8>)
 8008edc:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 8008ee0:	4b27      	ldr	r3, [pc, #156]	; (8008f80 <USBD_LL_Init+0xb8>)
 8008ee2:	4a28      	ldr	r2, [pc, #160]	; (8008f84 <USBD_LL_Init+0xbc>)
 8008ee4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8008ee6:	4b26      	ldr	r3, [pc, #152]	; (8008f80 <USBD_LL_Init+0xb8>)
 8008ee8:	2208      	movs	r2, #8
 8008eea:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8008eec:	4b24      	ldr	r3, [pc, #144]	; (8008f80 <USBD_LL_Init+0xb8>)
 8008eee:	2202      	movs	r2, #2
 8008ef0:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008ef2:	4b23      	ldr	r3, [pc, #140]	; (8008f80 <USBD_LL_Init+0xb8>)
 8008ef4:	2202      	movs	r2, #2
 8008ef6:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8008ef8:	4b21      	ldr	r3, [pc, #132]	; (8008f80 <USBD_LL_Init+0xb8>)
 8008efa:	2200      	movs	r2, #0
 8008efc:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8008efe:	4b20      	ldr	r3, [pc, #128]	; (8008f80 <USBD_LL_Init+0xb8>)
 8008f00:	2200      	movs	r2, #0
 8008f02:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8008f04:	4b1e      	ldr	r3, [pc, #120]	; (8008f80 <USBD_LL_Init+0xb8>)
 8008f06:	2200      	movs	r2, #0
 8008f08:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8008f0a:	4b1d      	ldr	r3, [pc, #116]	; (8008f80 <USBD_LL_Init+0xb8>)
 8008f0c:	2200      	movs	r2, #0
 8008f0e:	621a      	str	r2, [r3, #32]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8008f10:	481b      	ldr	r0, [pc, #108]	; (8008f80 <USBD_LL_Init+0xb8>)
 8008f12:	f7f8 fc8f 	bl	8001834 <HAL_PCD_Init>
 8008f16:	4603      	mov	r3, r0
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d001      	beq.n	8008f20 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 8008f1c:	f7f7 feb6 	bl	8000c8c <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008f26:	2318      	movs	r3, #24
 8008f28:	2200      	movs	r2, #0
 8008f2a:	2100      	movs	r1, #0
 8008f2c:	f7f9 ff7d 	bl	8002e2a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008f36:	2358      	movs	r3, #88	; 0x58
 8008f38:	2200      	movs	r2, #0
 8008f3a:	2180      	movs	r1, #128	; 0x80
 8008f3c:	f7f9 ff75 	bl	8002e2a <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008f46:	23c0      	movs	r3, #192	; 0xc0
 8008f48:	2200      	movs	r2, #0
 8008f4a:	2181      	movs	r1, #129	; 0x81
 8008f4c:	f7f9 ff6d 	bl	8002e2a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008f56:	f44f 7388 	mov.w	r3, #272	; 0x110
 8008f5a:	2200      	movs	r2, #0
 8008f5c:	2101      	movs	r1, #1
 8008f5e:	f7f9 ff64 	bl	8002e2a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008f68:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008f6c:	2200      	movs	r2, #0
 8008f6e:	2182      	movs	r1, #130	; 0x82
 8008f70:	f7f9 ff5b 	bl	8002e2a <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8008f74:	2300      	movs	r3, #0
}
 8008f76:	4618      	mov	r0, r3
 8008f78:	3708      	adds	r7, #8
 8008f7a:	46bd      	mov	sp, r7
 8008f7c:	bd80      	pop	{r7, pc}
 8008f7e:	bf00      	nop
 8008f80:	200012d0 	.word	0x200012d0
 8008f84:	40005c00 	.word	0x40005c00

08008f88 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008f88:	b580      	push	{r7, lr}
 8008f8a:	b084      	sub	sp, #16
 8008f8c:	af00      	add	r7, sp, #0
 8008f8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f90:	2300      	movs	r3, #0
 8008f92:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008f94:	2300      	movs	r3, #0
 8008f96:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008f9e:	4618      	mov	r0, r3
 8008fa0:	f7f8 fd2d 	bl	80019fe <HAL_PCD_Start>
 8008fa4:	4603      	mov	r3, r0
 8008fa6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008fa8:	7bfb      	ldrb	r3, [r7, #15]
 8008faa:	4618      	mov	r0, r3
 8008fac:	f000 f980 	bl	80092b0 <USBD_Get_USB_Status>
 8008fb0:	4603      	mov	r3, r0
 8008fb2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008fb4:	7bbb      	ldrb	r3, [r7, #14]
}
 8008fb6:	4618      	mov	r0, r3
 8008fb8:	3710      	adds	r7, #16
 8008fba:	46bd      	mov	sp, r7
 8008fbc:	bd80      	pop	{r7, pc}

08008fbe <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008fbe:	b580      	push	{r7, lr}
 8008fc0:	b084      	sub	sp, #16
 8008fc2:	af00      	add	r7, sp, #0
 8008fc4:	6078      	str	r0, [r7, #4]
 8008fc6:	4608      	mov	r0, r1
 8008fc8:	4611      	mov	r1, r2
 8008fca:	461a      	mov	r2, r3
 8008fcc:	4603      	mov	r3, r0
 8008fce:	70fb      	strb	r3, [r7, #3]
 8008fd0:	460b      	mov	r3, r1
 8008fd2:	70bb      	strb	r3, [r7, #2]
 8008fd4:	4613      	mov	r3, r2
 8008fd6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008fd8:	2300      	movs	r3, #0
 8008fda:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008fdc:	2300      	movs	r3, #0
 8008fde:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008fe6:	78bb      	ldrb	r3, [r7, #2]
 8008fe8:	883a      	ldrh	r2, [r7, #0]
 8008fea:	78f9      	ldrb	r1, [r7, #3]
 8008fec:	f7f8 fe9c 	bl	8001d28 <HAL_PCD_EP_Open>
 8008ff0:	4603      	mov	r3, r0
 8008ff2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008ff4:	7bfb      	ldrb	r3, [r7, #15]
 8008ff6:	4618      	mov	r0, r3
 8008ff8:	f000 f95a 	bl	80092b0 <USBD_Get_USB_Status>
 8008ffc:	4603      	mov	r3, r0
 8008ffe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009000:	7bbb      	ldrb	r3, [r7, #14]
}
 8009002:	4618      	mov	r0, r3
 8009004:	3710      	adds	r7, #16
 8009006:	46bd      	mov	sp, r7
 8009008:	bd80      	pop	{r7, pc}

0800900a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800900a:	b580      	push	{r7, lr}
 800900c:	b084      	sub	sp, #16
 800900e:	af00      	add	r7, sp, #0
 8009010:	6078      	str	r0, [r7, #4]
 8009012:	460b      	mov	r3, r1
 8009014:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009016:	2300      	movs	r3, #0
 8009018:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800901a:	2300      	movs	r3, #0
 800901c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009024:	78fa      	ldrb	r2, [r7, #3]
 8009026:	4611      	mov	r1, r2
 8009028:	4618      	mov	r0, r3
 800902a:	f7f8 fee3 	bl	8001df4 <HAL_PCD_EP_Close>
 800902e:	4603      	mov	r3, r0
 8009030:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009032:	7bfb      	ldrb	r3, [r7, #15]
 8009034:	4618      	mov	r0, r3
 8009036:	f000 f93b 	bl	80092b0 <USBD_Get_USB_Status>
 800903a:	4603      	mov	r3, r0
 800903c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800903e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009040:	4618      	mov	r0, r3
 8009042:	3710      	adds	r7, #16
 8009044:	46bd      	mov	sp, r7
 8009046:	bd80      	pop	{r7, pc}

08009048 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009048:	b580      	push	{r7, lr}
 800904a:	b084      	sub	sp, #16
 800904c:	af00      	add	r7, sp, #0
 800904e:	6078      	str	r0, [r7, #4]
 8009050:	460b      	mov	r3, r1
 8009052:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009054:	2300      	movs	r3, #0
 8009056:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009058:	2300      	movs	r3, #0
 800905a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009062:	78fa      	ldrb	r2, [r7, #3]
 8009064:	4611      	mov	r1, r2
 8009066:	4618      	mov	r0, r3
 8009068:	f7f8 ffa4 	bl	8001fb4 <HAL_PCD_EP_SetStall>
 800906c:	4603      	mov	r3, r0
 800906e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009070:	7bfb      	ldrb	r3, [r7, #15]
 8009072:	4618      	mov	r0, r3
 8009074:	f000 f91c 	bl	80092b0 <USBD_Get_USB_Status>
 8009078:	4603      	mov	r3, r0
 800907a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800907c:	7bbb      	ldrb	r3, [r7, #14]
}
 800907e:	4618      	mov	r0, r3
 8009080:	3710      	adds	r7, #16
 8009082:	46bd      	mov	sp, r7
 8009084:	bd80      	pop	{r7, pc}

08009086 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009086:	b580      	push	{r7, lr}
 8009088:	b084      	sub	sp, #16
 800908a:	af00      	add	r7, sp, #0
 800908c:	6078      	str	r0, [r7, #4]
 800908e:	460b      	mov	r3, r1
 8009090:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009092:	2300      	movs	r3, #0
 8009094:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009096:	2300      	movs	r3, #0
 8009098:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80090a0:	78fa      	ldrb	r2, [r7, #3]
 80090a2:	4611      	mov	r1, r2
 80090a4:	4618      	mov	r0, r3
 80090a6:	f7f8 ffe5 	bl	8002074 <HAL_PCD_EP_ClrStall>
 80090aa:	4603      	mov	r3, r0
 80090ac:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80090ae:	7bfb      	ldrb	r3, [r7, #15]
 80090b0:	4618      	mov	r0, r3
 80090b2:	f000 f8fd 	bl	80092b0 <USBD_Get_USB_Status>
 80090b6:	4603      	mov	r3, r0
 80090b8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80090ba:	7bbb      	ldrb	r3, [r7, #14]
}
 80090bc:	4618      	mov	r0, r3
 80090be:	3710      	adds	r7, #16
 80090c0:	46bd      	mov	sp, r7
 80090c2:	bd80      	pop	{r7, pc}

080090c4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80090c4:	b480      	push	{r7}
 80090c6:	b085      	sub	sp, #20
 80090c8:	af00      	add	r7, sp, #0
 80090ca:	6078      	str	r0, [r7, #4]
 80090cc:	460b      	mov	r3, r1
 80090ce:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80090d6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80090d8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80090dc:	2b00      	cmp	r3, #0
 80090de:	da0c      	bge.n	80090fa <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80090e0:	78fb      	ldrb	r3, [r7, #3]
 80090e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80090e6:	68f9      	ldr	r1, [r7, #12]
 80090e8:	1c5a      	adds	r2, r3, #1
 80090ea:	4613      	mov	r3, r2
 80090ec:	009b      	lsls	r3, r3, #2
 80090ee:	4413      	add	r3, r2
 80090f0:	00db      	lsls	r3, r3, #3
 80090f2:	440b      	add	r3, r1
 80090f4:	3302      	adds	r3, #2
 80090f6:	781b      	ldrb	r3, [r3, #0]
 80090f8:	e00b      	b.n	8009112 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80090fa:	78fb      	ldrb	r3, [r7, #3]
 80090fc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009100:	68f9      	ldr	r1, [r7, #12]
 8009102:	4613      	mov	r3, r2
 8009104:	009b      	lsls	r3, r3, #2
 8009106:	4413      	add	r3, r2
 8009108:	00db      	lsls	r3, r3, #3
 800910a:	440b      	add	r3, r1
 800910c:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8009110:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009112:	4618      	mov	r0, r3
 8009114:	3714      	adds	r7, #20
 8009116:	46bd      	mov	sp, r7
 8009118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800911c:	4770      	bx	lr

0800911e <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800911e:	b580      	push	{r7, lr}
 8009120:	b084      	sub	sp, #16
 8009122:	af00      	add	r7, sp, #0
 8009124:	6078      	str	r0, [r7, #4]
 8009126:	460b      	mov	r3, r1
 8009128:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800912a:	2300      	movs	r3, #0
 800912c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800912e:	2300      	movs	r3, #0
 8009130:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009138:	78fa      	ldrb	r2, [r7, #3]
 800913a:	4611      	mov	r1, r2
 800913c:	4618      	mov	r0, r3
 800913e:	f7f8 fdce 	bl	8001cde <HAL_PCD_SetAddress>
 8009142:	4603      	mov	r3, r0
 8009144:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009146:	7bfb      	ldrb	r3, [r7, #15]
 8009148:	4618      	mov	r0, r3
 800914a:	f000 f8b1 	bl	80092b0 <USBD_Get_USB_Status>
 800914e:	4603      	mov	r3, r0
 8009150:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009152:	7bbb      	ldrb	r3, [r7, #14]
}
 8009154:	4618      	mov	r0, r3
 8009156:	3710      	adds	r7, #16
 8009158:	46bd      	mov	sp, r7
 800915a:	bd80      	pop	{r7, pc}

0800915c <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800915c:	b580      	push	{r7, lr}
 800915e:	b086      	sub	sp, #24
 8009160:	af00      	add	r7, sp, #0
 8009162:	60f8      	str	r0, [r7, #12]
 8009164:	607a      	str	r2, [r7, #4]
 8009166:	603b      	str	r3, [r7, #0]
 8009168:	460b      	mov	r3, r1
 800916a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800916c:	2300      	movs	r3, #0
 800916e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009170:	2300      	movs	r3, #0
 8009172:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800917a:	7af9      	ldrb	r1, [r7, #11]
 800917c:	683b      	ldr	r3, [r7, #0]
 800917e:	687a      	ldr	r2, [r7, #4]
 8009180:	f7f8 fed5 	bl	8001f2e <HAL_PCD_EP_Transmit>
 8009184:	4603      	mov	r3, r0
 8009186:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009188:	7dfb      	ldrb	r3, [r7, #23]
 800918a:	4618      	mov	r0, r3
 800918c:	f000 f890 	bl	80092b0 <USBD_Get_USB_Status>
 8009190:	4603      	mov	r3, r0
 8009192:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009194:	7dbb      	ldrb	r3, [r7, #22]
}
 8009196:	4618      	mov	r0, r3
 8009198:	3718      	adds	r7, #24
 800919a:	46bd      	mov	sp, r7
 800919c:	bd80      	pop	{r7, pc}

0800919e <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800919e:	b580      	push	{r7, lr}
 80091a0:	b086      	sub	sp, #24
 80091a2:	af00      	add	r7, sp, #0
 80091a4:	60f8      	str	r0, [r7, #12]
 80091a6:	607a      	str	r2, [r7, #4]
 80091a8:	603b      	str	r3, [r7, #0]
 80091aa:	460b      	mov	r3, r1
 80091ac:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80091ae:	2300      	movs	r3, #0
 80091b0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80091b2:	2300      	movs	r3, #0
 80091b4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80091bc:	7af9      	ldrb	r1, [r7, #11]
 80091be:	683b      	ldr	r3, [r7, #0]
 80091c0:	687a      	ldr	r2, [r7, #4]
 80091c2:	f7f8 fe5f 	bl	8001e84 <HAL_PCD_EP_Receive>
 80091c6:	4603      	mov	r3, r0
 80091c8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80091ca:	7dfb      	ldrb	r3, [r7, #23]
 80091cc:	4618      	mov	r0, r3
 80091ce:	f000 f86f 	bl	80092b0 <USBD_Get_USB_Status>
 80091d2:	4603      	mov	r3, r0
 80091d4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80091d6:	7dbb      	ldrb	r3, [r7, #22]
}
 80091d8:	4618      	mov	r0, r3
 80091da:	3718      	adds	r7, #24
 80091dc:	46bd      	mov	sp, r7
 80091de:	bd80      	pop	{r7, pc}

080091e0 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80091e0:	b580      	push	{r7, lr}
 80091e2:	b082      	sub	sp, #8
 80091e4:	af00      	add	r7, sp, #0
 80091e6:	6078      	str	r0, [r7, #4]
 80091e8:	460b      	mov	r3, r1
 80091ea:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80091f2:	78fa      	ldrb	r2, [r7, #3]
 80091f4:	4611      	mov	r1, r2
 80091f6:	4618      	mov	r0, r3
 80091f8:	f7f8 fe81 	bl	8001efe <HAL_PCD_EP_GetRxCount>
 80091fc:	4603      	mov	r3, r0
}
 80091fe:	4618      	mov	r0, r3
 8009200:	3708      	adds	r7, #8
 8009202:	46bd      	mov	sp, r7
 8009204:	bd80      	pop	{r7, pc}
	...

08009208 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009208:	b580      	push	{r7, lr}
 800920a:	b082      	sub	sp, #8
 800920c:	af00      	add	r7, sp, #0
 800920e:	6078      	str	r0, [r7, #4]
 8009210:	460b      	mov	r3, r1
 8009212:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 8009214:	78fb      	ldrb	r3, [r7, #3]
 8009216:	2b00      	cmp	r3, #0
 8009218:	d002      	beq.n	8009220 <HAL_PCDEx_LPM_Callback+0x18>
 800921a:	2b01      	cmp	r3, #1
 800921c:	d013      	beq.n	8009246 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800921e:	e023      	b.n	8009268 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	699b      	ldr	r3, [r3, #24]
 8009224:	2b00      	cmp	r3, #0
 8009226:	d007      	beq.n	8009238 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8009228:	f000 f83c 	bl	80092a4 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800922c:	4b10      	ldr	r3, [pc, #64]	; (8009270 <HAL_PCDEx_LPM_Callback+0x68>)
 800922e:	691b      	ldr	r3, [r3, #16]
 8009230:	4a0f      	ldr	r2, [pc, #60]	; (8009270 <HAL_PCDEx_LPM_Callback+0x68>)
 8009232:	f023 0306 	bic.w	r3, r3, #6
 8009236:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800923e:	4618      	mov	r0, r3
 8009240:	f7fe fcce 	bl	8007be0 <USBD_LL_Resume>
    break;
 8009244:	e010      	b.n	8009268 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800924c:	4618      	mov	r0, r3
 800924e:	f7fe fcb2 	bl	8007bb6 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	699b      	ldr	r3, [r3, #24]
 8009256:	2b00      	cmp	r3, #0
 8009258:	d005      	beq.n	8009266 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800925a:	4b05      	ldr	r3, [pc, #20]	; (8009270 <HAL_PCDEx_LPM_Callback+0x68>)
 800925c:	691b      	ldr	r3, [r3, #16]
 800925e:	4a04      	ldr	r2, [pc, #16]	; (8009270 <HAL_PCDEx_LPM_Callback+0x68>)
 8009260:	f043 0306 	orr.w	r3, r3, #6
 8009264:	6113      	str	r3, [r2, #16]
    break;
 8009266:	bf00      	nop
}
 8009268:	bf00      	nop
 800926a:	3708      	adds	r7, #8
 800926c:	46bd      	mov	sp, r7
 800926e:	bd80      	pop	{r7, pc}
 8009270:	e000ed00 	.word	0xe000ed00

08009274 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009274:	b480      	push	{r7}
 8009276:	b083      	sub	sp, #12
 8009278:	af00      	add	r7, sp, #0
 800927a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800927c:	4b03      	ldr	r3, [pc, #12]	; (800928c <USBD_static_malloc+0x18>)
}
 800927e:	4618      	mov	r0, r3
 8009280:	370c      	adds	r7, #12
 8009282:	46bd      	mov	sp, r7
 8009284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009288:	4770      	bx	lr
 800928a:	bf00      	nop
 800928c:	200001ac 	.word	0x200001ac

08009290 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009290:	b480      	push	{r7}
 8009292:	b083      	sub	sp, #12
 8009294:	af00      	add	r7, sp, #0
 8009296:	6078      	str	r0, [r7, #4]

}
 8009298:	bf00      	nop
 800929a:	370c      	adds	r7, #12
 800929c:	46bd      	mov	sp, r7
 800929e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a2:	4770      	bx	lr

080092a4 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 80092a4:	b580      	push	{r7, lr}
 80092a6:	af00      	add	r7, sp, #0
  SystemClock_Config();
 80092a8:	f7f7 f89e 	bl	80003e8 <SystemClock_Config>
}
 80092ac:	bf00      	nop
 80092ae:	bd80      	pop	{r7, pc}

080092b0 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80092b0:	b480      	push	{r7}
 80092b2:	b085      	sub	sp, #20
 80092b4:	af00      	add	r7, sp, #0
 80092b6:	4603      	mov	r3, r0
 80092b8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80092ba:	2300      	movs	r3, #0
 80092bc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80092be:	79fb      	ldrb	r3, [r7, #7]
 80092c0:	2b03      	cmp	r3, #3
 80092c2:	d817      	bhi.n	80092f4 <USBD_Get_USB_Status+0x44>
 80092c4:	a201      	add	r2, pc, #4	; (adr r2, 80092cc <USBD_Get_USB_Status+0x1c>)
 80092c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092ca:	bf00      	nop
 80092cc:	080092dd 	.word	0x080092dd
 80092d0:	080092e3 	.word	0x080092e3
 80092d4:	080092e9 	.word	0x080092e9
 80092d8:	080092ef 	.word	0x080092ef
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80092dc:	2300      	movs	r3, #0
 80092de:	73fb      	strb	r3, [r7, #15]
    break;
 80092e0:	e00b      	b.n	80092fa <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80092e2:	2303      	movs	r3, #3
 80092e4:	73fb      	strb	r3, [r7, #15]
    break;
 80092e6:	e008      	b.n	80092fa <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80092e8:	2301      	movs	r3, #1
 80092ea:	73fb      	strb	r3, [r7, #15]
    break;
 80092ec:	e005      	b.n	80092fa <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80092ee:	2303      	movs	r3, #3
 80092f0:	73fb      	strb	r3, [r7, #15]
    break;
 80092f2:	e002      	b.n	80092fa <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80092f4:	2303      	movs	r3, #3
 80092f6:	73fb      	strb	r3, [r7, #15]
    break;
 80092f8:	bf00      	nop
  }
  return usb_status;
 80092fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80092fc:	4618      	mov	r0, r3
 80092fe:	3714      	adds	r7, #20
 8009300:	46bd      	mov	sp, r7
 8009302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009306:	4770      	bx	lr

08009308 <__libc_init_array>:
 8009308:	b570      	push	{r4, r5, r6, lr}
 800930a:	4e0d      	ldr	r6, [pc, #52]	; (8009340 <__libc_init_array+0x38>)
 800930c:	4c0d      	ldr	r4, [pc, #52]	; (8009344 <__libc_init_array+0x3c>)
 800930e:	1ba4      	subs	r4, r4, r6
 8009310:	10a4      	asrs	r4, r4, #2
 8009312:	2500      	movs	r5, #0
 8009314:	42a5      	cmp	r5, r4
 8009316:	d109      	bne.n	800932c <__libc_init_array+0x24>
 8009318:	4e0b      	ldr	r6, [pc, #44]	; (8009348 <__libc_init_array+0x40>)
 800931a:	4c0c      	ldr	r4, [pc, #48]	; (800934c <__libc_init_array+0x44>)
 800931c:	f000 f82c 	bl	8009378 <_init>
 8009320:	1ba4      	subs	r4, r4, r6
 8009322:	10a4      	asrs	r4, r4, #2
 8009324:	2500      	movs	r5, #0
 8009326:	42a5      	cmp	r5, r4
 8009328:	d105      	bne.n	8009336 <__libc_init_array+0x2e>
 800932a:	bd70      	pop	{r4, r5, r6, pc}
 800932c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009330:	4798      	blx	r3
 8009332:	3501      	adds	r5, #1
 8009334:	e7ee      	b.n	8009314 <__libc_init_array+0xc>
 8009336:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800933a:	4798      	blx	r3
 800933c:	3501      	adds	r5, #1
 800933e:	e7f2      	b.n	8009326 <__libc_init_array+0x1e>
 8009340:	080093e8 	.word	0x080093e8
 8009344:	080093e8 	.word	0x080093e8
 8009348:	080093e8 	.word	0x080093e8
 800934c:	080093ec 	.word	0x080093ec

08009350 <memcpy>:
 8009350:	b510      	push	{r4, lr}
 8009352:	1e43      	subs	r3, r0, #1
 8009354:	440a      	add	r2, r1
 8009356:	4291      	cmp	r1, r2
 8009358:	d100      	bne.n	800935c <memcpy+0xc>
 800935a:	bd10      	pop	{r4, pc}
 800935c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009360:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009364:	e7f7      	b.n	8009356 <memcpy+0x6>

08009366 <memset>:
 8009366:	4402      	add	r2, r0
 8009368:	4603      	mov	r3, r0
 800936a:	4293      	cmp	r3, r2
 800936c:	d100      	bne.n	8009370 <memset+0xa>
 800936e:	4770      	bx	lr
 8009370:	f803 1b01 	strb.w	r1, [r3], #1
 8009374:	e7f9      	b.n	800936a <memset+0x4>
	...

08009378 <_init>:
 8009378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800937a:	bf00      	nop
 800937c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800937e:	bc08      	pop	{r3}
 8009380:	469e      	mov	lr, r3
 8009382:	4770      	bx	lr

08009384 <_fini>:
 8009384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009386:	bf00      	nop
 8009388:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800938a:	bc08      	pop	{r3}
 800938c:	469e      	mov	lr, r3
 800938e:	4770      	bx	lr
