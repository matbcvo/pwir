
pwir.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009310  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  080094e8  080094e8  000194e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009540  08009540  00020184  2**0
                  CONTENTS
  4 .ARM          00000000  08009540  08009540  00020184  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009540  08009540  00020184  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009540  08009540  00019540  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009544  08009544  00019544  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000184  20000000  08009548  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001490  20000184  080096cc  00020184  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001614  080096cc  00021614  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020184  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a377  00000000  00000000  000201b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000033e7  00000000  00000000  0003a52b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001388  00000000  00000000  0003d918  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001210  00000000  00000000  0003eca0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000205b2  00000000  00000000  0003feb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00011b80  00000000  00000000  00060462  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c4217  00000000  00000000  00071fe2  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001361f9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000516c  00000000  00000000  00136274  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000184 	.word	0x20000184
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080094d0 	.word	0x080094d0

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000188 	.word	0x20000188
 8000214:	080094d0 	.word	0x080094d0

08000218 <CDC_On_Receive>:
  .delimiter = 0
}; // (4) Instance of received data.

volatile uint8_t isCommandReceived = 0; // (5) Boolean (0/1) variable to signify that data has been received. Variable is marked volatile to prevent the compiler from removing it during optimisation.

void CDC_On_Receive(uint8_t* buffer, uint32_t* length) { // (6) Define the function that is called when data is received. It is usually preferable to keep interrupt handlers small and fast to avoid blocking other code from executing. Only data copying and setting isCommandReceived to 1 is done in the handler. Rest is handled in the main while loop.
 8000218:	b580      	push	{r7, lr}
 800021a:	b082      	sub	sp, #8
 800021c:	af00      	add	r7, sp, #0
 800021e:	6078      	str	r0, [r7, #4]
 8000220:	6039      	str	r1, [r7, #0]
  //HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
  if (*length == sizeof(Command)) { // (7) Check if received data the has same length as Command struct.
 8000222:	683b      	ldr	r3, [r7, #0]
 8000224:	681b      	ldr	r3, [r3, #0]
 8000226:	2b0c      	cmp	r3, #12
 8000228:	d10d      	bne.n	8000246 <CDC_On_Receive+0x2e>
    memcpy(&command, buffer, sizeof(Command)); // (8) Copy received data to command instance.
 800022a:	220c      	movs	r2, #12
 800022c:	6879      	ldr	r1, [r7, #4]
 800022e:	4808      	ldr	r0, [pc, #32]	; (8000250 <CDC_On_Receive+0x38>)
 8000230:	f009 f93a 	bl	80094a8 <memcpy>

    if (command.delimiter == 0xAAAA) { // (9) Check the delimiter as a validation of received data.
 8000234:	4b06      	ldr	r3, [pc, #24]	; (8000250 <CDC_On_Receive+0x38>)
 8000236:	895b      	ldrh	r3, [r3, #10]
 8000238:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800023c:	4293      	cmp	r3, r2
 800023e:	d102      	bne.n	8000246 <CDC_On_Receive+0x2e>
      isCommandReceived = 1;
 8000240:	4b04      	ldr	r3, [pc, #16]	; (8000254 <CDC_On_Receive+0x3c>)
 8000242:	2201      	movs	r2, #1
 8000244:	701a      	strb	r2, [r3, #0]
    }
  }
}
 8000246:	bf00      	nop
 8000248:	3708      	adds	r7, #8
 800024a:	46bd      	mov	sp, r7
 800024c:	bd80      	pop	{r7, pc}
 800024e:	bf00      	nop
 8000250:	200001a0 	.word	0x200001a0
 8000254:	200001ac 	.word	0x200001ac

08000258 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000258:	b580      	push	{r7, lr}
 800025a:	b082      	sub	sp, #8
 800025c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  // (1) Define an instance of Feedback for sending data.
  Feedback feedback = {
 800025e:	2300      	movs	r3, #0
 8000260:	803b      	strh	r3, [r7, #0]
 8000262:	2300      	movs	r3, #0
 8000264:	807b      	strh	r3, [r7, #2]
 8000266:	2300      	movs	r3, #0
 8000268:	80bb      	strh	r3, [r7, #4]
 800026a:	f64a 23aa 	movw	r3, #43690	; 0xaaaa
 800026e:	80fb      	strh	r3, [r7, #6]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000270:	f000 ffeb 	bl	800124a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000274:	f000 f8ae 	bl	80003d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000278:	f000 fcf4 	bl	8000c64 <MX_GPIO_Init>
  MX_TIM1_Init();
 800027c:	f000 f912 	bl	80004a4 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000280:	f000 f980 	bl	8000584 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000284:	f000 f9fe 	bl	8000684 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000288:	f000 fa52 	bl	8000730 <MX_TIM4_Init>
  MX_TIM8_Init();
 800028c:	f000 fadc 	bl	8000848 <MX_TIM8_Init>
  MX_TIM16_Init();
 8000290:	f000 fbf4 	bl	8000a7c <MX_TIM16_Init>
  MX_TIM17_Init();
 8000294:	f000 fc6c 	bl	8000b70 <MX_TIM17_Init>
  MX_USB_Device_Init();
 8000298:	f008 fbea 	bl	8008a70 <MX_USB_Device_Init>
  MX_TIM15_Init();
 800029c:	f000 fb68 	bl	8000970 <MX_TIM15_Init>
  MX_TIM6_Init();
 80002a0:	f000 fa9c 	bl	80007dc <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_1 | TIM_CHANNEL_2); // Encoder 1
 80002a4:	2104      	movs	r1, #4
 80002a6:	4838      	ldr	r0, [pc, #224]	; (8000388 <main+0x130>)
 80002a8:	f004 f8cc 	bl	8004444 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_1 | TIM_CHANNEL_2); // Encoder 2
 80002ac:	2104      	movs	r1, #4
 80002ae:	4837      	ldr	r0, [pc, #220]	; (800038c <main+0x134>)
 80002b0:	f004 f8c8 	bl	8004444 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_1 | TIM_CHANNEL_2); // Encoder 3
 80002b4:	2104      	movs	r1, #4
 80002b6:	4836      	ldr	r0, [pc, #216]	; (8000390 <main+0x138>)
 80002b8:	f004 f8c4 	bl	8004444 <HAL_TIM_Encoder_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1); // Motor PWM for draiver 1
 80002bc:	2100      	movs	r1, #0
 80002be:	4835      	ldr	r0, [pc, #212]	; (8000394 <main+0x13c>)
 80002c0:	f003 ff1a 	bl	80040f8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2); // Motor PWM for draiver 1
 80002c4:	2104      	movs	r1, #4
 80002c6:	4833      	ldr	r0, [pc, #204]	; (8000394 <main+0x13c>)
 80002c8:	f003 ff16 	bl	80040f8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3); // Motor PWM for draiver 2
 80002cc:	2108      	movs	r1, #8
 80002ce:	4831      	ldr	r0, [pc, #196]	; (8000394 <main+0x13c>)
 80002d0:	f003 ff12 	bl	80040f8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4); // Motor PWM for draiver 2
 80002d4:	210c      	movs	r1, #12
 80002d6:	482f      	ldr	r0, [pc, #188]	; (8000394 <main+0x13c>)
 80002d8:	f003 ff0e 	bl	80040f8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1); // Motor PWM for draiver 3
 80002dc:	2100      	movs	r1, #0
 80002de:	482e      	ldr	r0, [pc, #184]	; (8000398 <main+0x140>)
 80002e0:	f003 ff0a 	bl	80040f8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim17, TIM_CHANNEL_1); // Motor PWM for draiver 3
 80002e4:	2100      	movs	r1, #0
 80002e6:	482d      	ldr	r0, [pc, #180]	; (800039c <main+0x144>)
 80002e8:	f003 ff06 	bl	80040f8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1); // Thrower PWM
 80002ec:	2100      	movs	r1, #0
 80002ee:	482c      	ldr	r0, [pc, #176]	; (80003a0 <main+0x148>)
 80002f0:	f003 ff02 	bl	80040f8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_2); // Thrower Angle PWM
 80002f4:	2104      	movs	r1, #4
 80002f6:	482b      	ldr	r0, [pc, #172]	; (80003a4 <main+0x14c>)
 80002f8:	f003 fefe 	bl	80040f8 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim6);
 80002fc:	482a      	ldr	r0, [pc, #168]	; (80003a8 <main+0x150>)
 80002fe:	f003 fe39 	bl	8003f74 <HAL_TIM_Base_Start_IT>
    /* USER CODE BEGIN 3 */
	  //HAL_Delay(1000);
	  // Send command: 00 00 00 00 00 00 00 00 AA AA
	  //               01
	  //               02
	if (isCommandReceived) { // (2) Only return data when something has been received.
 8000302:	4b2a      	ldr	r3, [pc, #168]	; (80003ac <main+0x154>)
 8000304:	781b      	ldrb	r3, [r3, #0]
 8000306:	b2db      	uxtb	r3, r3
 8000308:	2b00      	cmp	r3, #0
 800030a:	d0fa      	beq.n	8000302 <main+0xaa>
		isCommandReceived = 0;
 800030c:	4b27      	ldr	r3, [pc, #156]	; (80003ac <main+0x154>)
 800030e:	2200      	movs	r2, #0
 8000310:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin); // (3) Toggle LED to indicate that data has been received.
 8000312:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000316:	4826      	ldr	r0, [pc, #152]	; (80003b0 <main+0x158>)
 8000318:	f001 fab2 	bl	8001880 <HAL_GPIO_TogglePin>
		// (4) Update feedback with current motor speeds.
		/*feedback.speed1 = motor1Control.speed;
		feedback.speed2 = motor2Control.speed;
		feedback.speed3 = motor3Control.speed;*/
		feedback.speed1 = (int16_t)TIM1->CNT;
 800031c:	4b25      	ldr	r3, [pc, #148]	; (80003b4 <main+0x15c>)
 800031e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000320:	b21b      	sxth	r3, r3
 8000322:	803b      	strh	r3, [r7, #0]
		feedback.speed2 = (int16_t)TIM3->CNT;
 8000324:	4b24      	ldr	r3, [pc, #144]	; (80003b8 <main+0x160>)
 8000326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000328:	b21b      	sxth	r3, r3
 800032a:	807b      	strh	r3, [r7, #2]
		feedback.speed3 = (int16_t)TIM4->CNT;
 800032c:	4b23      	ldr	r3, [pc, #140]	; (80003bc <main+0x164>)
 800032e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000330:	b21b      	sxth	r3, r3
 8000332:	80bb      	strh	r3, [r7, #4]

		TIM2->CCR1 = command.speed1; // esimene draiver
 8000334:	4b22      	ldr	r3, [pc, #136]	; (80003c0 <main+0x168>)
 8000336:	f9b3 2000 	ldrsh.w	r2, [r3]
 800033a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800033e:	635a      	str	r2, [r3, #52]	; 0x34
		TIM2->CCR2 = 0; // esimene draiver
 8000340:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000344:	2200      	movs	r2, #0
 8000346:	639a      	str	r2, [r3, #56]	; 0x38
		TIM2->CCR3 = command.speed2; // teine draiver
 8000348:	4b1d      	ldr	r3, [pc, #116]	; (80003c0 <main+0x168>)
 800034a:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800034e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000352:	63da      	str	r2, [r3, #60]	; 0x3c
		TIM2->CCR4 = 0; // teine draiver
 8000354:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000358:	2200      	movs	r2, #0
 800035a:	641a      	str	r2, [r3, #64]	; 0x40
		TIM16->CCR1 = command.speed3; // kolmas draiver
 800035c:	4b18      	ldr	r3, [pc, #96]	; (80003c0 <main+0x168>)
 800035e:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8000362:	4b18      	ldr	r3, [pc, #96]	; (80003c4 <main+0x16c>)
 8000364:	635a      	str	r2, [r3, #52]	; 0x34
		TIM17->CCR1 = 0; // kolmas draiver
 8000366:	4b18      	ldr	r3, [pc, #96]	; (80003c8 <main+0x170>)
 8000368:	2200      	movs	r2, #0
 800036a:	635a      	str	r2, [r3, #52]	; 0x34
			TIM2->CCR2 = 0; // esimene draiver
		}*/

		// Start thrower ESC at lower than 3200
		// Then set speed to 3200 ... 6400
		TIM8->CCR1 = command.throwerSpeed; // thrower
 800036c:	4b14      	ldr	r3, [pc, #80]	; (80003c0 <main+0x168>)
 800036e:	88da      	ldrh	r2, [r3, #6]
 8000370:	4b16      	ldr	r3, [pc, #88]	; (80003cc <main+0x174>)
 8000372:	635a      	str	r2, [r3, #52]	; 0x34

		TIM15->CCR2 = command.throwerAngle; // thrower angle
 8000374:	4b12      	ldr	r3, [pc, #72]	; (80003c0 <main+0x168>)
 8000376:	891a      	ldrh	r2, [r3, #8]
 8000378:	4b15      	ldr	r3, [pc, #84]	; (80003d0 <main+0x178>)
 800037a:	639a      	str	r2, [r3, #56]	; 0x38

		CDC_Transmit_FS(&feedback, sizeof(feedback)); // (5) Send data over USB.
 800037c:	463b      	mov	r3, r7
 800037e:	2108      	movs	r1, #8
 8000380:	4618      	mov	r0, r3
 8000382:	f008 fc37 	bl	8008bf4 <CDC_Transmit_FS>
	if (isCommandReceived) { // (2) Only return data when something has been received.
 8000386:	e7bc      	b.n	8000302 <main+0xaa>
 8000388:	20000598 	.word	0x20000598
 800038c:	20000500 	.word	0x20000500
 8000390:	2000041c 	.word	0x2000041c
 8000394:	200005e4 	.word	0x200005e4
 8000398:	20000630 	.word	0x20000630
 800039c:	200004b4 	.word	0x200004b4
 80003a0:	200003d0 	.word	0x200003d0
 80003a4:	20000468 	.word	0x20000468
 80003a8:	2000054c 	.word	0x2000054c
 80003ac:	200001ac 	.word	0x200001ac
 80003b0:	48000400 	.word	0x48000400
 80003b4:	40012c00 	.word	0x40012c00
 80003b8:	40000400 	.word	0x40000400
 80003bc:	40000800 	.word	0x40000800
 80003c0:	200001a0 	.word	0x200001a0
 80003c4:	40014400 	.word	0x40014400
 80003c8:	40014800 	.word	0x40014800
 80003cc:	40013400 	.word	0x40013400
 80003d0:	40014000 	.word	0x40014000

080003d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003d4:	b580      	push	{r7, lr}
 80003d6:	b0a4      	sub	sp, #144	; 0x90
 80003d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003da:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80003de:	2238      	movs	r2, #56	; 0x38
 80003e0:	2100      	movs	r1, #0
 80003e2:	4618      	mov	r0, r3
 80003e4:	f009 f86b 	bl	80094be <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003e8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80003ec:	2200      	movs	r2, #0
 80003ee:	601a      	str	r2, [r3, #0]
 80003f0:	605a      	str	r2, [r3, #4]
 80003f2:	609a      	str	r2, [r3, #8]
 80003f4:	60da      	str	r2, [r3, #12]
 80003f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80003f8:	463b      	mov	r3, r7
 80003fa:	2244      	movs	r2, #68	; 0x44
 80003fc:	2100      	movs	r1, #0
 80003fe:	4618      	mov	r0, r3
 8000400:	f009 f85d 	bl	80094be <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000404:	2000      	movs	r0, #0
 8000406:	f002 fdbd 	bl	8002f84 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 800040a:	2322      	movs	r3, #34	; 0x22
 800040c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800040e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000412:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000414:	2340      	movs	r3, #64	; 0x40
 8000416:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000418:	2301      	movs	r3, #1
 800041a:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800041c:	2302      	movs	r3, #2
 800041e:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000420:	2302      	movs	r3, #2
 8000422:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000424:	2301      	movs	r3, #1
 8000426:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 20;
 8000428:	2314      	movs	r3, #20
 800042a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800042e:	2302      	movs	r3, #2
 8000430:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 8000434:	2304      	movs	r3, #4
 8000436:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800043a:	2302      	movs	r3, #2
 800043c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000440:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000444:	4618      	mov	r0, r3
 8000446:	f002 fe51 	bl	80030ec <HAL_RCC_OscConfig>
 800044a:	4603      	mov	r3, r0
 800044c:	2b00      	cmp	r3, #0
 800044e:	d001      	beq.n	8000454 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000450:	f000 fc48 	bl	8000ce4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000454:	230f      	movs	r3, #15
 8000456:	647b      	str	r3, [r7, #68]	; 0x44
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000458:	2303      	movs	r3, #3
 800045a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800045c:	2300      	movs	r3, #0
 800045e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000460:	2300      	movs	r3, #0
 8000462:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000464:	2300      	movs	r3, #0
 8000466:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000468:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800046c:	2104      	movs	r1, #4
 800046e:	4618      	mov	r0, r3
 8000470:	f003 f954 	bl	800371c <HAL_RCC_ClockConfig>
 8000474:	4603      	mov	r3, r0
 8000476:	2b00      	cmp	r3, #0
 8000478:	d001      	beq.n	800047e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800047a:	f000 fc33 	bl	8000ce4 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800047e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000482:	603b      	str	r3, [r7, #0]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8000484:	2300      	movs	r3, #0
 8000486:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000488:	463b      	mov	r3, r7
 800048a:	4618      	mov	r0, r3
 800048c:	f003 fb2a 	bl	8003ae4 <HAL_RCCEx_PeriphCLKConfig>
 8000490:	4603      	mov	r3, r0
 8000492:	2b00      	cmp	r3, #0
 8000494:	d001      	beq.n	800049a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000496:	f000 fc25 	bl	8000ce4 <Error_Handler>
  }
}
 800049a:	bf00      	nop
 800049c:	3790      	adds	r7, #144	; 0x90
 800049e:	46bd      	mov	sp, r7
 80004a0:	bd80      	pop	{r7, pc}
	...

080004a4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80004a4:	b580      	push	{r7, lr}
 80004a6:	b09a      	sub	sp, #104	; 0x68
 80004a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80004aa:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80004ae:	2224      	movs	r2, #36	; 0x24
 80004b0:	2100      	movs	r1, #0
 80004b2:	4618      	mov	r0, r3
 80004b4:	f009 f803 	bl	80094be <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004b8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80004bc:	2200      	movs	r2, #0
 80004be:	601a      	str	r2, [r3, #0]
 80004c0:	605a      	str	r2, [r3, #4]
 80004c2:	609a      	str	r2, [r3, #8]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80004c4:	1d3b      	adds	r3, r7, #4
 80004c6:	2234      	movs	r2, #52	; 0x34
 80004c8:	2100      	movs	r1, #0
 80004ca:	4618      	mov	r0, r3
 80004cc:	f008 fff7 	bl	80094be <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80004d0:	4b2a      	ldr	r3, [pc, #168]	; (800057c <MX_TIM1_Init+0xd8>)
 80004d2:	4a2b      	ldr	r2, [pc, #172]	; (8000580 <MX_TIM1_Init+0xdc>)
 80004d4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80004d6:	4b29      	ldr	r3, [pc, #164]	; (800057c <MX_TIM1_Init+0xd8>)
 80004d8:	2200      	movs	r2, #0
 80004da:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004dc:	4b27      	ldr	r3, [pc, #156]	; (800057c <MX_TIM1_Init+0xd8>)
 80004de:	2200      	movs	r2, #0
 80004e0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80004e2:	4b26      	ldr	r3, [pc, #152]	; (800057c <MX_TIM1_Init+0xd8>)
 80004e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80004e8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004ea:	4b24      	ldr	r3, [pc, #144]	; (800057c <MX_TIM1_Init+0xd8>)
 80004ec:	2200      	movs	r2, #0
 80004ee:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80004f0:	4b22      	ldr	r3, [pc, #136]	; (800057c <MX_TIM1_Init+0xd8>)
 80004f2:	2200      	movs	r2, #0
 80004f4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80004f6:	4b21      	ldr	r3, [pc, #132]	; (800057c <MX_TIM1_Init+0xd8>)
 80004f8:	2200      	movs	r2, #0
 80004fa:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80004fc:	2301      	movs	r3, #1
 80004fe:	647b      	str	r3, [r7, #68]	; 0x44
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000500:	2300      	movs	r3, #0
 8000502:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000504:	2301      	movs	r3, #1
 8000506:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000508:	2300      	movs	r3, #0
 800050a:	653b      	str	r3, [r7, #80]	; 0x50
  sConfig.IC1Filter = 0;
 800050c:	2300      	movs	r3, #0
 800050e:	657b      	str	r3, [r7, #84]	; 0x54
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000510:	2300      	movs	r3, #0
 8000512:	65bb      	str	r3, [r7, #88]	; 0x58
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000514:	2301      	movs	r3, #1
 8000516:	65fb      	str	r3, [r7, #92]	; 0x5c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000518:	2300      	movs	r3, #0
 800051a:	663b      	str	r3, [r7, #96]	; 0x60
  sConfig.IC2Filter = 0;
 800051c:	2300      	movs	r3, #0
 800051e:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8000520:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000524:	4619      	mov	r1, r3
 8000526:	4815      	ldr	r0, [pc, #84]	; (800057c <MX_TIM1_Init+0xd8>)
 8000528:	f003 fee6 	bl	80042f8 <HAL_TIM_Encoder_Init>
 800052c:	4603      	mov	r3, r0
 800052e:	2b00      	cmp	r3, #0
 8000530:	d001      	beq.n	8000536 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8000532:	f000 fbd7 	bl	8000ce4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000536:	2300      	movs	r3, #0
 8000538:	63bb      	str	r3, [r7, #56]	; 0x38
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800053a:	2300      	movs	r3, #0
 800053c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800053e:	2300      	movs	r3, #0
 8000540:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000542:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000546:	4619      	mov	r1, r3
 8000548:	480c      	ldr	r0, [pc, #48]	; (800057c <MX_TIM1_Init+0xd8>)
 800054a:	f004 fcc5 	bl	8004ed8 <HAL_TIMEx_MasterConfigSynchronization>
 800054e:	4603      	mov	r3, r0
 8000550:	2b00      	cmp	r3, #0
 8000552:	d001      	beq.n	8000558 <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 8000554:	f000 fbc6 	bl	8000ce4 <Error_Handler>
  }
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000558:	2300      	movs	r3, #0
 800055a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800055c:	2300      	movs	r3, #0
 800055e:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000560:	1d3b      	adds	r3, r7, #4
 8000562:	4619      	mov	r1, r3
 8000564:	4805      	ldr	r0, [pc, #20]	; (800057c <MX_TIM1_Init+0xd8>)
 8000566:	f004 fd39 	bl	8004fdc <HAL_TIMEx_ConfigBreakDeadTime>
 800056a:	4603      	mov	r3, r0
 800056c:	2b00      	cmp	r3, #0
 800056e:	d001      	beq.n	8000574 <MX_TIM1_Init+0xd0>
  {
    Error_Handler();
 8000570:	f000 fbb8 	bl	8000ce4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000574:	bf00      	nop
 8000576:	3768      	adds	r7, #104	; 0x68
 8000578:	46bd      	mov	sp, r7
 800057a:	bd80      	pop	{r7, pc}
 800057c:	20000598 	.word	0x20000598
 8000580:	40012c00 	.word	0x40012c00

08000584 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b08a      	sub	sp, #40	; 0x28
 8000588:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800058a:	f107 031c 	add.w	r3, r7, #28
 800058e:	2200      	movs	r2, #0
 8000590:	601a      	str	r2, [r3, #0]
 8000592:	605a      	str	r2, [r3, #4]
 8000594:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000596:	463b      	mov	r3, r7
 8000598:	2200      	movs	r2, #0
 800059a:	601a      	str	r2, [r3, #0]
 800059c:	605a      	str	r2, [r3, #4]
 800059e:	609a      	str	r2, [r3, #8]
 80005a0:	60da      	str	r2, [r3, #12]
 80005a2:	611a      	str	r2, [r3, #16]
 80005a4:	615a      	str	r2, [r3, #20]
 80005a6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80005a8:	4b35      	ldr	r3, [pc, #212]	; (8000680 <MX_TIM2_Init+0xfc>)
 80005aa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80005ae:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 50 - 1;
 80005b0:	4b33      	ldr	r3, [pc, #204]	; (8000680 <MX_TIM2_Init+0xfc>)
 80005b2:	2231      	movs	r2, #49	; 0x31
 80005b4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005b6:	4b32      	ldr	r3, [pc, #200]	; (8000680 <MX_TIM2_Init+0xfc>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 63999;
 80005bc:	4b30      	ldr	r3, [pc, #192]	; (8000680 <MX_TIM2_Init+0xfc>)
 80005be:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 80005c2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005c4:	4b2e      	ldr	r3, [pc, #184]	; (8000680 <MX_TIM2_Init+0xfc>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005ca:	4b2d      	ldr	r3, [pc, #180]	; (8000680 <MX_TIM2_Init+0xfc>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80005d0:	482b      	ldr	r0, [pc, #172]	; (8000680 <MX_TIM2_Init+0xfc>)
 80005d2:	f003 fd39 	bl	8004048 <HAL_TIM_PWM_Init>
 80005d6:	4603      	mov	r3, r0
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d001      	beq.n	80005e0 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 80005dc:	f000 fb82 	bl	8000ce4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005e0:	2300      	movs	r3, #0
 80005e2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005e4:	2300      	movs	r3, #0
 80005e6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80005e8:	f107 031c 	add.w	r3, r7, #28
 80005ec:	4619      	mov	r1, r3
 80005ee:	4824      	ldr	r0, [pc, #144]	; (8000680 <MX_TIM2_Init+0xfc>)
 80005f0:	f004 fc72 	bl	8004ed8 <HAL_TIMEx_MasterConfigSynchronization>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d001      	beq.n	80005fe <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 80005fa:	f000 fb73 	bl	8000ce4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80005fe:	2360      	movs	r3, #96	; 0x60
 8000600:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000602:	2300      	movs	r3, #0
 8000604:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000606:	2300      	movs	r3, #0
 8000608:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800060a:	2300      	movs	r3, #0
 800060c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800060e:	463b      	mov	r3, r7
 8000610:	2200      	movs	r2, #0
 8000612:	4619      	mov	r1, r3
 8000614:	481a      	ldr	r0, [pc, #104]	; (8000680 <MX_TIM2_Init+0xfc>)
 8000616:	f003 ffa3 	bl	8004560 <HAL_TIM_PWM_ConfigChannel>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d001      	beq.n	8000624 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8000620:	f000 fb60 	bl	8000ce4 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8000624:	2300      	movs	r3, #0
 8000626:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000628:	463b      	mov	r3, r7
 800062a:	2204      	movs	r2, #4
 800062c:	4619      	mov	r1, r3
 800062e:	4814      	ldr	r0, [pc, #80]	; (8000680 <MX_TIM2_Init+0xfc>)
 8000630:	f003 ff96 	bl	8004560 <HAL_TIM_PWM_ConfigChannel>
 8000634:	4603      	mov	r3, r0
 8000636:	2b00      	cmp	r3, #0
 8000638:	d001      	beq.n	800063e <MX_TIM2_Init+0xba>
  {
    Error_Handler();
 800063a:	f000 fb53 	bl	8000ce4 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 800063e:	2300      	movs	r3, #0
 8000640:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000642:	463b      	mov	r3, r7
 8000644:	2208      	movs	r2, #8
 8000646:	4619      	mov	r1, r3
 8000648:	480d      	ldr	r0, [pc, #52]	; (8000680 <MX_TIM2_Init+0xfc>)
 800064a:	f003 ff89 	bl	8004560 <HAL_TIM_PWM_ConfigChannel>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d001      	beq.n	8000658 <MX_TIM2_Init+0xd4>
  {
    Error_Handler();
 8000654:	f000 fb46 	bl	8000ce4 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8000658:	2300      	movs	r3, #0
 800065a:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800065c:	463b      	mov	r3, r7
 800065e:	220c      	movs	r2, #12
 8000660:	4619      	mov	r1, r3
 8000662:	4807      	ldr	r0, [pc, #28]	; (8000680 <MX_TIM2_Init+0xfc>)
 8000664:	f003 ff7c 	bl	8004560 <HAL_TIM_PWM_ConfigChannel>
 8000668:	4603      	mov	r3, r0
 800066a:	2b00      	cmp	r3, #0
 800066c:	d001      	beq.n	8000672 <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 800066e:	f000 fb39 	bl	8000ce4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000672:	4803      	ldr	r0, [pc, #12]	; (8000680 <MX_TIM2_Init+0xfc>)
 8000674:	f000 fc96 	bl	8000fa4 <HAL_TIM_MspPostInit>

}
 8000678:	bf00      	nop
 800067a:	3728      	adds	r7, #40	; 0x28
 800067c:	46bd      	mov	sp, r7
 800067e:	bd80      	pop	{r7, pc}
 8000680:	200005e4 	.word	0x200005e4

08000684 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b08c      	sub	sp, #48	; 0x30
 8000688:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800068a:	f107 030c 	add.w	r3, r7, #12
 800068e:	2224      	movs	r2, #36	; 0x24
 8000690:	2100      	movs	r1, #0
 8000692:	4618      	mov	r0, r3
 8000694:	f008 ff13 	bl	80094be <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000698:	463b      	mov	r3, r7
 800069a:	2200      	movs	r2, #0
 800069c:	601a      	str	r2, [r3, #0]
 800069e:	605a      	str	r2, [r3, #4]
 80006a0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80006a2:	4b21      	ldr	r3, [pc, #132]	; (8000728 <MX_TIM3_Init+0xa4>)
 80006a4:	4a21      	ldr	r2, [pc, #132]	; (800072c <MX_TIM3_Init+0xa8>)
 80006a6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80006a8:	4b1f      	ldr	r3, [pc, #124]	; (8000728 <MX_TIM3_Init+0xa4>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006ae:	4b1e      	ldr	r3, [pc, #120]	; (8000728 <MX_TIM3_Init+0xa4>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80006b4:	4b1c      	ldr	r3, [pc, #112]	; (8000728 <MX_TIM3_Init+0xa4>)
 80006b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80006ba:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006bc:	4b1a      	ldr	r3, [pc, #104]	; (8000728 <MX_TIM3_Init+0xa4>)
 80006be:	2200      	movs	r2, #0
 80006c0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006c2:	4b19      	ldr	r3, [pc, #100]	; (8000728 <MX_TIM3_Init+0xa4>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80006c8:	2301      	movs	r3, #1
 80006ca:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80006cc:	2300      	movs	r3, #0
 80006ce:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80006d0:	2301      	movs	r3, #1
 80006d2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80006d4:	2300      	movs	r3, #0
 80006d6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80006d8:	2300      	movs	r3, #0
 80006da:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80006dc:	2300      	movs	r3, #0
 80006de:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80006e0:	2301      	movs	r3, #1
 80006e2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80006e4:	2300      	movs	r3, #0
 80006e6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80006e8:	2300      	movs	r3, #0
 80006ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80006ec:	f107 030c 	add.w	r3, r7, #12
 80006f0:	4619      	mov	r1, r3
 80006f2:	480d      	ldr	r0, [pc, #52]	; (8000728 <MX_TIM3_Init+0xa4>)
 80006f4:	f003 fe00 	bl	80042f8 <HAL_TIM_Encoder_Init>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d001      	beq.n	8000702 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 80006fe:	f000 faf1 	bl	8000ce4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000702:	2300      	movs	r3, #0
 8000704:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000706:	2300      	movs	r3, #0
 8000708:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800070a:	463b      	mov	r3, r7
 800070c:	4619      	mov	r1, r3
 800070e:	4806      	ldr	r0, [pc, #24]	; (8000728 <MX_TIM3_Init+0xa4>)
 8000710:	f004 fbe2 	bl	8004ed8 <HAL_TIMEx_MasterConfigSynchronization>
 8000714:	4603      	mov	r3, r0
 8000716:	2b00      	cmp	r3, #0
 8000718:	d001      	beq.n	800071e <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 800071a:	f000 fae3 	bl	8000ce4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800071e:	bf00      	nop
 8000720:	3730      	adds	r7, #48	; 0x30
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	20000500 	.word	0x20000500
 800072c:	40000400 	.word	0x40000400

08000730 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b08c      	sub	sp, #48	; 0x30
 8000734:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000736:	f107 030c 	add.w	r3, r7, #12
 800073a:	2224      	movs	r2, #36	; 0x24
 800073c:	2100      	movs	r1, #0
 800073e:	4618      	mov	r0, r3
 8000740:	f008 febd 	bl	80094be <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000744:	463b      	mov	r3, r7
 8000746:	2200      	movs	r2, #0
 8000748:	601a      	str	r2, [r3, #0]
 800074a:	605a      	str	r2, [r3, #4]
 800074c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800074e:	4b21      	ldr	r3, [pc, #132]	; (80007d4 <MX_TIM4_Init+0xa4>)
 8000750:	4a21      	ldr	r2, [pc, #132]	; (80007d8 <MX_TIM4_Init+0xa8>)
 8000752:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000754:	4b1f      	ldr	r3, [pc, #124]	; (80007d4 <MX_TIM4_Init+0xa4>)
 8000756:	2200      	movs	r2, #0
 8000758:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800075a:	4b1e      	ldr	r3, [pc, #120]	; (80007d4 <MX_TIM4_Init+0xa4>)
 800075c:	2200      	movs	r2, #0
 800075e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000760:	4b1c      	ldr	r3, [pc, #112]	; (80007d4 <MX_TIM4_Init+0xa4>)
 8000762:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000766:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000768:	4b1a      	ldr	r3, [pc, #104]	; (80007d4 <MX_TIM4_Init+0xa4>)
 800076a:	2200      	movs	r2, #0
 800076c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800076e:	4b19      	ldr	r3, [pc, #100]	; (80007d4 <MX_TIM4_Init+0xa4>)
 8000770:	2200      	movs	r2, #0
 8000772:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000774:	2301      	movs	r3, #1
 8000776:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000778:	2300      	movs	r3, #0
 800077a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800077c:	2301      	movs	r3, #1
 800077e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000780:	2300      	movs	r3, #0
 8000782:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000784:	2300      	movs	r3, #0
 8000786:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000788:	2300      	movs	r3, #0
 800078a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800078c:	2301      	movs	r3, #1
 800078e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000790:	2300      	movs	r3, #0
 8000792:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000794:	2300      	movs	r3, #0
 8000796:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8000798:	f107 030c 	add.w	r3, r7, #12
 800079c:	4619      	mov	r1, r3
 800079e:	480d      	ldr	r0, [pc, #52]	; (80007d4 <MX_TIM4_Init+0xa4>)
 80007a0:	f003 fdaa 	bl	80042f8 <HAL_TIM_Encoder_Init>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 80007aa:	f000 fa9b 	bl	8000ce4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007ae:	2300      	movs	r3, #0
 80007b0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007b2:	2300      	movs	r3, #0
 80007b4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80007b6:	463b      	mov	r3, r7
 80007b8:	4619      	mov	r1, r3
 80007ba:	4806      	ldr	r0, [pc, #24]	; (80007d4 <MX_TIM4_Init+0xa4>)
 80007bc:	f004 fb8c 	bl	8004ed8 <HAL_TIMEx_MasterConfigSynchronization>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 80007c6:	f000 fa8d 	bl	8000ce4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80007ca:	bf00      	nop
 80007cc:	3730      	adds	r7, #48	; 0x30
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	2000041c 	.word	0x2000041c
 80007d8:	40000800 	.word	0x40000800

080007dc <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b084      	sub	sp, #16
 80007e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007e2:	1d3b      	adds	r3, r7, #4
 80007e4:	2200      	movs	r2, #0
 80007e6:	601a      	str	r2, [r3, #0]
 80007e8:	605a      	str	r2, [r3, #4]
 80007ea:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80007ec:	4b14      	ldr	r3, [pc, #80]	; (8000840 <MX_TIM6_Init+0x64>)
 80007ee:	4a15      	ldr	r2, [pc, #84]	; (8000844 <MX_TIM6_Init+0x68>)
 80007f0:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 80007f2:	4b13      	ldr	r3, [pc, #76]	; (8000840 <MX_TIM6_Init+0x64>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007f8:	4b11      	ldr	r3, [pc, #68]	; (8000840 <MX_TIM6_Init+0x64>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 80007fe:	4b10      	ldr	r3, [pc, #64]	; (8000840 <MX_TIM6_Init+0x64>)
 8000800:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000804:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000806:	4b0e      	ldr	r3, [pc, #56]	; (8000840 <MX_TIM6_Init+0x64>)
 8000808:	2200      	movs	r2, #0
 800080a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800080c:	480c      	ldr	r0, [pc, #48]	; (8000840 <MX_TIM6_Init+0x64>)
 800080e:	f003 fb59 	bl	8003ec4 <HAL_TIM_Base_Init>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d001      	beq.n	800081c <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000818:	f000 fa64 	bl	8000ce4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800081c:	2300      	movs	r3, #0
 800081e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000820:	2300      	movs	r3, #0
 8000822:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000824:	1d3b      	adds	r3, r7, #4
 8000826:	4619      	mov	r1, r3
 8000828:	4805      	ldr	r0, [pc, #20]	; (8000840 <MX_TIM6_Init+0x64>)
 800082a:	f004 fb55 	bl	8004ed8 <HAL_TIMEx_MasterConfigSynchronization>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d001      	beq.n	8000838 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000834:	f000 fa56 	bl	8000ce4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000838:	bf00      	nop
 800083a:	3710      	adds	r7, #16
 800083c:	46bd      	mov	sp, r7
 800083e:	bd80      	pop	{r7, pc}
 8000840:	2000054c 	.word	0x2000054c
 8000844:	40001000 	.word	0x40001000

08000848 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b098      	sub	sp, #96	; 0x60
 800084c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800084e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000852:	2200      	movs	r2, #0
 8000854:	601a      	str	r2, [r3, #0]
 8000856:	605a      	str	r2, [r3, #4]
 8000858:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800085a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800085e:	2200      	movs	r2, #0
 8000860:	601a      	str	r2, [r3, #0]
 8000862:	605a      	str	r2, [r3, #4]
 8000864:	609a      	str	r2, [r3, #8]
 8000866:	60da      	str	r2, [r3, #12]
 8000868:	611a      	str	r2, [r3, #16]
 800086a:	615a      	str	r2, [r3, #20]
 800086c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800086e:	1d3b      	adds	r3, r7, #4
 8000870:	2234      	movs	r2, #52	; 0x34
 8000872:	2100      	movs	r1, #0
 8000874:	4618      	mov	r0, r3
 8000876:	f008 fe22 	bl	80094be <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800087a:	4b3b      	ldr	r3, [pc, #236]	; (8000968 <MX_TIM8_Init+0x120>)
 800087c:	4a3b      	ldr	r2, [pc, #236]	; (800096c <MX_TIM8_Init+0x124>)
 800087e:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 50 - 1;
 8000880:	4b39      	ldr	r3, [pc, #228]	; (8000968 <MX_TIM8_Init+0x120>)
 8000882:	2231      	movs	r2, #49	; 0x31
 8000884:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000886:	4b38      	ldr	r3, [pc, #224]	; (8000968 <MX_TIM8_Init+0x120>)
 8000888:	2200      	movs	r2, #0
 800088a:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 63999;
 800088c:	4b36      	ldr	r3, [pc, #216]	; (8000968 <MX_TIM8_Init+0x120>)
 800088e:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8000892:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000894:	4b34      	ldr	r3, [pc, #208]	; (8000968 <MX_TIM8_Init+0x120>)
 8000896:	2200      	movs	r2, #0
 8000898:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800089a:	4b33      	ldr	r3, [pc, #204]	; (8000968 <MX_TIM8_Init+0x120>)
 800089c:	2200      	movs	r2, #0
 800089e:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008a0:	4b31      	ldr	r3, [pc, #196]	; (8000968 <MX_TIM8_Init+0x120>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80008a6:	4830      	ldr	r0, [pc, #192]	; (8000968 <MX_TIM8_Init+0x120>)
 80008a8:	f003 fbce 	bl	8004048 <HAL_TIM_PWM_Init>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d001      	beq.n	80008b6 <MX_TIM8_Init+0x6e>
  {
    Error_Handler();
 80008b2:	f000 fa17 	bl	8000ce4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008b6:	2300      	movs	r3, #0
 80008b8:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80008ba:	2300      	movs	r3, #0
 80008bc:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008be:	2300      	movs	r3, #0
 80008c0:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80008c2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80008c6:	4619      	mov	r1, r3
 80008c8:	4827      	ldr	r0, [pc, #156]	; (8000968 <MX_TIM8_Init+0x120>)
 80008ca:	f004 fb05 	bl	8004ed8 <HAL_TIMEx_MasterConfigSynchronization>
 80008ce:	4603      	mov	r3, r0
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d001      	beq.n	80008d8 <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 80008d4:	f000 fa06 	bl	8000ce4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008d8:	2360      	movs	r3, #96	; 0x60
 80008da:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 80008dc:	2300      	movs	r3, #0
 80008de:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008e0:	2300      	movs	r3, #0
 80008e2:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80008e4:	2300      	movs	r3, #0
 80008e6:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008e8:	2300      	movs	r3, #0
 80008ea:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80008ec:	2300      	movs	r3, #0
 80008ee:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80008f0:	2300      	movs	r3, #0
 80008f2:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80008f4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80008f8:	2200      	movs	r2, #0
 80008fa:	4619      	mov	r1, r3
 80008fc:	481a      	ldr	r0, [pc, #104]	; (8000968 <MX_TIM8_Init+0x120>)
 80008fe:	f003 fe2f 	bl	8004560 <HAL_TIM_PWM_ConfigChannel>
 8000902:	4603      	mov	r3, r0
 8000904:	2b00      	cmp	r3, #0
 8000906:	d001      	beq.n	800090c <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8000908:	f000 f9ec 	bl	8000ce4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800090c:	2300      	movs	r3, #0
 800090e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000910:	2300      	movs	r3, #0
 8000912:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000914:	2300      	movs	r3, #0
 8000916:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000918:	2300      	movs	r3, #0
 800091a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800091c:	2300      	movs	r3, #0
 800091e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000920:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000924:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000926:	2300      	movs	r3, #0
 8000928:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800092a:	2300      	movs	r3, #0
 800092c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800092e:	2300      	movs	r3, #0
 8000930:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000932:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000936:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000938:	2300      	movs	r3, #0
 800093a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800093c:	2300      	movs	r3, #0
 800093e:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000940:	2300      	movs	r3, #0
 8000942:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8000944:	1d3b      	adds	r3, r7, #4
 8000946:	4619      	mov	r1, r3
 8000948:	4807      	ldr	r0, [pc, #28]	; (8000968 <MX_TIM8_Init+0x120>)
 800094a:	f004 fb47 	bl	8004fdc <HAL_TIMEx_ConfigBreakDeadTime>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d001      	beq.n	8000958 <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 8000954:	f000 f9c6 	bl	8000ce4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8000958:	4803      	ldr	r0, [pc, #12]	; (8000968 <MX_TIM8_Init+0x120>)
 800095a:	f000 fb23 	bl	8000fa4 <HAL_TIM_MspPostInit>

}
 800095e:	bf00      	nop
 8000960:	3760      	adds	r7, #96	; 0x60
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	200003d0 	.word	0x200003d0
 800096c:	40013400 	.word	0x40013400

08000970 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b098      	sub	sp, #96	; 0x60
 8000974:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000976:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800097a:	2200      	movs	r2, #0
 800097c:	601a      	str	r2, [r3, #0]
 800097e:	605a      	str	r2, [r3, #4]
 8000980:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000982:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000986:	2200      	movs	r2, #0
 8000988:	601a      	str	r2, [r3, #0]
 800098a:	605a      	str	r2, [r3, #4]
 800098c:	609a      	str	r2, [r3, #8]
 800098e:	60da      	str	r2, [r3, #12]
 8000990:	611a      	str	r2, [r3, #16]
 8000992:	615a      	str	r2, [r3, #20]
 8000994:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000996:	1d3b      	adds	r3, r7, #4
 8000998:	2234      	movs	r2, #52	; 0x34
 800099a:	2100      	movs	r1, #0
 800099c:	4618      	mov	r0, r3
 800099e:	f008 fd8e 	bl	80094be <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80009a2:	4b34      	ldr	r3, [pc, #208]	; (8000a74 <MX_TIM15_Init+0x104>)
 80009a4:	4a34      	ldr	r2, [pc, #208]	; (8000a78 <MX_TIM15_Init+0x108>)
 80009a6:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 50 - 1;
 80009a8:	4b32      	ldr	r3, [pc, #200]	; (8000a74 <MX_TIM15_Init+0x104>)
 80009aa:	2231      	movs	r2, #49	; 0x31
 80009ac:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009ae:	4b31      	ldr	r3, [pc, #196]	; (8000a74 <MX_TIM15_Init+0x104>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 63999;
 80009b4:	4b2f      	ldr	r3, [pc, #188]	; (8000a74 <MX_TIM15_Init+0x104>)
 80009b6:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 80009ba:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009bc:	4b2d      	ldr	r3, [pc, #180]	; (8000a74 <MX_TIM15_Init+0x104>)
 80009be:	2200      	movs	r2, #0
 80009c0:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80009c2:	4b2c      	ldr	r3, [pc, #176]	; (8000a74 <MX_TIM15_Init+0x104>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009c8:	4b2a      	ldr	r3, [pc, #168]	; (8000a74 <MX_TIM15_Init+0x104>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 80009ce:	4829      	ldr	r0, [pc, #164]	; (8000a74 <MX_TIM15_Init+0x104>)
 80009d0:	f003 fb3a 	bl	8004048 <HAL_TIM_PWM_Init>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d001      	beq.n	80009de <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 80009da:	f000 f983 	bl	8000ce4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009de:	2300      	movs	r3, #0
 80009e0:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009e2:	2300      	movs	r3, #0
 80009e4:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80009e6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80009ea:	4619      	mov	r1, r3
 80009ec:	4821      	ldr	r0, [pc, #132]	; (8000a74 <MX_TIM15_Init+0x104>)
 80009ee:	f004 fa73 	bl	8004ed8 <HAL_TIMEx_MasterConfigSynchronization>
 80009f2:	4603      	mov	r3, r0
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d001      	beq.n	80009fc <MX_TIM15_Init+0x8c>
  {
    Error_Handler();
 80009f8:	f000 f974 	bl	8000ce4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009fc:	2360      	movs	r3, #96	; 0x60
 80009fe:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8000a00:	2300      	movs	r3, #0
 8000a02:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a04:	2300      	movs	r3, #0
 8000a06:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000a10:	2300      	movs	r3, #0
 8000a12:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000a14:	2300      	movs	r3, #0
 8000a16:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000a18:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000a1c:	2204      	movs	r2, #4
 8000a1e:	4619      	mov	r1, r3
 8000a20:	4814      	ldr	r0, [pc, #80]	; (8000a74 <MX_TIM15_Init+0x104>)
 8000a22:	f003 fd9d 	bl	8004560 <HAL_TIM_PWM_ConfigChannel>
 8000a26:	4603      	mov	r3, r0
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d001      	beq.n	8000a30 <MX_TIM15_Init+0xc0>
  {
    Error_Handler();
 8000a2c:	f000 f95a 	bl	8000ce4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000a30:	2300      	movs	r3, #0
 8000a32:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000a34:	2300      	movs	r3, #0
 8000a36:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000a40:	2300      	movs	r3, #0
 8000a42:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000a44:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a48:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8000a52:	1d3b      	adds	r3, r7, #4
 8000a54:	4619      	mov	r1, r3
 8000a56:	4807      	ldr	r0, [pc, #28]	; (8000a74 <MX_TIM15_Init+0x104>)
 8000a58:	f004 fac0 	bl	8004fdc <HAL_TIMEx_ConfigBreakDeadTime>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d001      	beq.n	8000a66 <MX_TIM15_Init+0xf6>
  {
    Error_Handler();
 8000a62:	f000 f93f 	bl	8000ce4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8000a66:	4803      	ldr	r0, [pc, #12]	; (8000a74 <MX_TIM15_Init+0x104>)
 8000a68:	f000 fa9c 	bl	8000fa4 <HAL_TIM_MspPostInit>

}
 8000a6c:	bf00      	nop
 8000a6e:	3760      	adds	r7, #96	; 0x60
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bd80      	pop	{r7, pc}
 8000a74:	20000468 	.word	0x20000468
 8000a78:	40014000 	.word	0x40014000

08000a7c <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b094      	sub	sp, #80	; 0x50
 8000a80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a82:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000a86:	2200      	movs	r2, #0
 8000a88:	601a      	str	r2, [r3, #0]
 8000a8a:	605a      	str	r2, [r3, #4]
 8000a8c:	609a      	str	r2, [r3, #8]
 8000a8e:	60da      	str	r2, [r3, #12]
 8000a90:	611a      	str	r2, [r3, #16]
 8000a92:	615a      	str	r2, [r3, #20]
 8000a94:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000a96:	463b      	mov	r3, r7
 8000a98:	2234      	movs	r2, #52	; 0x34
 8000a9a:	2100      	movs	r1, #0
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f008 fd0e 	bl	80094be <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000aa2:	4b31      	ldr	r3, [pc, #196]	; (8000b68 <MX_TIM16_Init+0xec>)
 8000aa4:	4a31      	ldr	r2, [pc, #196]	; (8000b6c <MX_TIM16_Init+0xf0>)
 8000aa6:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 50 - 1;
 8000aa8:	4b2f      	ldr	r3, [pc, #188]	; (8000b68 <MX_TIM16_Init+0xec>)
 8000aaa:	2231      	movs	r2, #49	; 0x31
 8000aac:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000aae:	4b2e      	ldr	r3, [pc, #184]	; (8000b68 <MX_TIM16_Init+0xec>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 63999;
 8000ab4:	4b2c      	ldr	r3, [pc, #176]	; (8000b68 <MX_TIM16_Init+0xec>)
 8000ab6:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8000aba:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000abc:	4b2a      	ldr	r3, [pc, #168]	; (8000b68 <MX_TIM16_Init+0xec>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000ac2:	4b29      	ldr	r3, [pc, #164]	; (8000b68 <MX_TIM16_Init+0xec>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ac8:	4b27      	ldr	r3, [pc, #156]	; (8000b68 <MX_TIM16_Init+0xec>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000ace:	4826      	ldr	r0, [pc, #152]	; (8000b68 <MX_TIM16_Init+0xec>)
 8000ad0:	f003 f9f8 	bl	8003ec4 <HAL_TIM_Base_Init>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d001      	beq.n	8000ade <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 8000ada:	f000 f903 	bl	8000ce4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8000ade:	4822      	ldr	r0, [pc, #136]	; (8000b68 <MX_TIM16_Init+0xec>)
 8000ae0:	f003 fab2 	bl	8004048 <HAL_TIM_PWM_Init>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d001      	beq.n	8000aee <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 8000aea:	f000 f8fb 	bl	8000ce4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000aee:	2360      	movs	r3, #96	; 0x60
 8000af0:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 0;
 8000af2:	2300      	movs	r3, #0
 8000af4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000af6:	2300      	movs	r3, #0
 8000af8:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000afa:	2300      	movs	r3, #0
 8000afc:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000afe:	2300      	movs	r3, #0
 8000b00:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000b02:	2300      	movs	r3, #0
 8000b04:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000b06:	2300      	movs	r3, #0
 8000b08:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b0a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000b0e:	2200      	movs	r2, #0
 8000b10:	4619      	mov	r1, r3
 8000b12:	4815      	ldr	r0, [pc, #84]	; (8000b68 <MX_TIM16_Init+0xec>)
 8000b14:	f003 fd24 	bl	8004560 <HAL_TIM_PWM_ConfigChannel>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d001      	beq.n	8000b22 <MX_TIM16_Init+0xa6>
  {
    Error_Handler();
 8000b1e:	f000 f8e1 	bl	8000ce4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000b22:	2300      	movs	r3, #0
 8000b24:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000b26:	2300      	movs	r3, #0
 8000b28:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000b32:	2300      	movs	r3, #0
 8000b34:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000b36:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b3a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000b40:	2300      	movs	r3, #0
 8000b42:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8000b44:	463b      	mov	r3, r7
 8000b46:	4619      	mov	r1, r3
 8000b48:	4807      	ldr	r0, [pc, #28]	; (8000b68 <MX_TIM16_Init+0xec>)
 8000b4a:	f004 fa47 	bl	8004fdc <HAL_TIMEx_ConfigBreakDeadTime>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d001      	beq.n	8000b58 <MX_TIM16_Init+0xdc>
  {
    Error_Handler();
 8000b54:	f000 f8c6 	bl	8000ce4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8000b58:	4803      	ldr	r0, [pc, #12]	; (8000b68 <MX_TIM16_Init+0xec>)
 8000b5a:	f000 fa23 	bl	8000fa4 <HAL_TIM_MspPostInit>

}
 8000b5e:	bf00      	nop
 8000b60:	3750      	adds	r7, #80	; 0x50
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	20000630 	.word	0x20000630
 8000b6c:	40014400 	.word	0x40014400

08000b70 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b094      	sub	sp, #80	; 0x50
 8000b74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b76:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	601a      	str	r2, [r3, #0]
 8000b7e:	605a      	str	r2, [r3, #4]
 8000b80:	609a      	str	r2, [r3, #8]
 8000b82:	60da      	str	r2, [r3, #12]
 8000b84:	611a      	str	r2, [r3, #16]
 8000b86:	615a      	str	r2, [r3, #20]
 8000b88:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000b8a:	463b      	mov	r3, r7
 8000b8c:	2234      	movs	r2, #52	; 0x34
 8000b8e:	2100      	movs	r1, #0
 8000b90:	4618      	mov	r0, r3
 8000b92:	f008 fc94 	bl	80094be <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8000b96:	4b31      	ldr	r3, [pc, #196]	; (8000c5c <MX_TIM17_Init+0xec>)
 8000b98:	4a31      	ldr	r2, [pc, #196]	; (8000c60 <MX_TIM17_Init+0xf0>)
 8000b9a:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 50 - 1;
 8000b9c:	4b2f      	ldr	r3, [pc, #188]	; (8000c5c <MX_TIM17_Init+0xec>)
 8000b9e:	2231      	movs	r2, #49	; 0x31
 8000ba0:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ba2:	4b2e      	ldr	r3, [pc, #184]	; (8000c5c <MX_TIM17_Init+0xec>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 63999;
 8000ba8:	4b2c      	ldr	r3, [pc, #176]	; (8000c5c <MX_TIM17_Init+0xec>)
 8000baa:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8000bae:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bb0:	4b2a      	ldr	r3, [pc, #168]	; (8000c5c <MX_TIM17_Init+0xec>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8000bb6:	4b29      	ldr	r3, [pc, #164]	; (8000c5c <MX_TIM17_Init+0xec>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bbc:	4b27      	ldr	r3, [pc, #156]	; (8000c5c <MX_TIM17_Init+0xec>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8000bc2:	4826      	ldr	r0, [pc, #152]	; (8000c5c <MX_TIM17_Init+0xec>)
 8000bc4:	f003 f97e 	bl	8003ec4 <HAL_TIM_Base_Init>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d001      	beq.n	8000bd2 <MX_TIM17_Init+0x62>
  {
    Error_Handler();
 8000bce:	f000 f889 	bl	8000ce4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 8000bd2:	4822      	ldr	r0, [pc, #136]	; (8000c5c <MX_TIM17_Init+0xec>)
 8000bd4:	f003 fa38 	bl	8004048 <HAL_TIM_PWM_Init>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d001      	beq.n	8000be2 <MX_TIM17_Init+0x72>
  {
    Error_Handler();
 8000bde:	f000 f881 	bl	8000ce4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000be2:	2360      	movs	r3, #96	; 0x60
 8000be4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 0;
 8000be6:	2300      	movs	r3, #0
 8000be8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000bea:	2300      	movs	r3, #0
 8000bec:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000bfe:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000c02:	2200      	movs	r2, #0
 8000c04:	4619      	mov	r1, r3
 8000c06:	4815      	ldr	r0, [pc, #84]	; (8000c5c <MX_TIM17_Init+0xec>)
 8000c08:	f003 fcaa 	bl	8004560 <HAL_TIM_PWM_ConfigChannel>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d001      	beq.n	8000c16 <MX_TIM17_Init+0xa6>
  {
    Error_Handler();
 8000c12:	f000 f867 	bl	8000ce4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000c16:	2300      	movs	r3, #0
 8000c18:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000c22:	2300      	movs	r3, #0
 8000c24:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000c26:	2300      	movs	r3, #0
 8000c28:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000c2a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c2e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000c30:	2300      	movs	r3, #0
 8000c32:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000c34:	2300      	movs	r3, #0
 8000c36:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8000c38:	463b      	mov	r3, r7
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	4807      	ldr	r0, [pc, #28]	; (8000c5c <MX_TIM17_Init+0xec>)
 8000c3e:	f004 f9cd 	bl	8004fdc <HAL_TIMEx_ConfigBreakDeadTime>
 8000c42:	4603      	mov	r3, r0
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d001      	beq.n	8000c4c <MX_TIM17_Init+0xdc>
  {
    Error_Handler();
 8000c48:	f000 f84c 	bl	8000ce4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 8000c4c:	4803      	ldr	r0, [pc, #12]	; (8000c5c <MX_TIM17_Init+0xec>)
 8000c4e:	f000 f9a9 	bl	8000fa4 <HAL_TIM_MspPostInit>

}
 8000c52:	bf00      	nop
 8000c54:	3750      	adds	r7, #80	; 0x50
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	200004b4 	.word	0x200004b4
 8000c60:	40014800 	.word	0x40014800

08000c64 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b088      	sub	sp, #32
 8000c68:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c6a:	f107 030c 	add.w	r3, r7, #12
 8000c6e:	2200      	movs	r2, #0
 8000c70:	601a      	str	r2, [r3, #0]
 8000c72:	605a      	str	r2, [r3, #4]
 8000c74:	609a      	str	r2, [r3, #8]
 8000c76:	60da      	str	r2, [r3, #12]
 8000c78:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c7a:	4b18      	ldr	r3, [pc, #96]	; (8000cdc <MX_GPIO_Init+0x78>)
 8000c7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c7e:	4a17      	ldr	r2, [pc, #92]	; (8000cdc <MX_GPIO_Init+0x78>)
 8000c80:	f043 0301 	orr.w	r3, r3, #1
 8000c84:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c86:	4b15      	ldr	r3, [pc, #84]	; (8000cdc <MX_GPIO_Init+0x78>)
 8000c88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c8a:	f003 0301 	and.w	r3, r3, #1
 8000c8e:	60bb      	str	r3, [r7, #8]
 8000c90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c92:	4b12      	ldr	r3, [pc, #72]	; (8000cdc <MX_GPIO_Init+0x78>)
 8000c94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c96:	4a11      	ldr	r2, [pc, #68]	; (8000cdc <MX_GPIO_Init+0x78>)
 8000c98:	f043 0302 	orr.w	r3, r3, #2
 8000c9c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c9e:	4b0f      	ldr	r3, [pc, #60]	; (8000cdc <MX_GPIO_Init+0x78>)
 8000ca0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ca2:	f003 0302 	and.w	r3, r3, #2
 8000ca6:	607b      	str	r3, [r7, #4]
 8000ca8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000caa:	2200      	movs	r2, #0
 8000cac:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000cb0:	480b      	ldr	r0, [pc, #44]	; (8000ce0 <MX_GPIO_Init+0x7c>)
 8000cb2:	f000 fdcd 	bl	8001850 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000cb6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000cba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cbc:	2301      	movs	r3, #1
 8000cbe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000cc8:	f107 030c 	add.w	r3, r7, #12
 8000ccc:	4619      	mov	r1, r3
 8000cce:	4804      	ldr	r0, [pc, #16]	; (8000ce0 <MX_GPIO_Init+0x7c>)
 8000cd0:	f000 fc3c 	bl	800154c <HAL_GPIO_Init>

}
 8000cd4:	bf00      	nop
 8000cd6:	3720      	adds	r7, #32
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	40021000 	.word	0x40021000
 8000ce0:	48000400 	.word	0x48000400

08000ce4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000ce8:	bf00      	nop
 8000cea:	46bd      	mov	sp, r7
 8000cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf0:	4770      	bx	lr
	...

08000cf4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b082      	sub	sp, #8
 8000cf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cfa:	4b0f      	ldr	r3, [pc, #60]	; (8000d38 <HAL_MspInit+0x44>)
 8000cfc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cfe:	4a0e      	ldr	r2, [pc, #56]	; (8000d38 <HAL_MspInit+0x44>)
 8000d00:	f043 0301 	orr.w	r3, r3, #1
 8000d04:	6613      	str	r3, [r2, #96]	; 0x60
 8000d06:	4b0c      	ldr	r3, [pc, #48]	; (8000d38 <HAL_MspInit+0x44>)
 8000d08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d0a:	f003 0301 	and.w	r3, r3, #1
 8000d0e:	607b      	str	r3, [r7, #4]
 8000d10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d12:	4b09      	ldr	r3, [pc, #36]	; (8000d38 <HAL_MspInit+0x44>)
 8000d14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d16:	4a08      	ldr	r2, [pc, #32]	; (8000d38 <HAL_MspInit+0x44>)
 8000d18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d1c:	6593      	str	r3, [r2, #88]	; 0x58
 8000d1e:	4b06      	ldr	r3, [pc, #24]	; (8000d38 <HAL_MspInit+0x44>)
 8000d20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d26:	603b      	str	r3, [r7, #0]
 8000d28:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000d2a:	f002 f9cf 	bl	80030cc <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d2e:	bf00      	nop
 8000d30:	3708      	adds	r7, #8
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	40021000 	.word	0x40021000

08000d3c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b08e      	sub	sp, #56	; 0x38
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d48:	2200      	movs	r2, #0
 8000d4a:	601a      	str	r2, [r3, #0]
 8000d4c:	605a      	str	r2, [r3, #4]
 8000d4e:	609a      	str	r2, [r3, #8]
 8000d50:	60da      	str	r2, [r3, #12]
 8000d52:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	4a46      	ldr	r2, [pc, #280]	; (8000e74 <HAL_TIM_Encoder_MspInit+0x138>)
 8000d5a:	4293      	cmp	r3, r2
 8000d5c:	d12a      	bne.n	8000db4 <HAL_TIM_Encoder_MspInit+0x78>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000d5e:	4b46      	ldr	r3, [pc, #280]	; (8000e78 <HAL_TIM_Encoder_MspInit+0x13c>)
 8000d60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d62:	4a45      	ldr	r2, [pc, #276]	; (8000e78 <HAL_TIM_Encoder_MspInit+0x13c>)
 8000d64:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000d68:	6613      	str	r3, [r2, #96]	; 0x60
 8000d6a:	4b43      	ldr	r3, [pc, #268]	; (8000e78 <HAL_TIM_Encoder_MspInit+0x13c>)
 8000d6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d6e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000d72:	623b      	str	r3, [r7, #32]
 8000d74:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d76:	4b40      	ldr	r3, [pc, #256]	; (8000e78 <HAL_TIM_Encoder_MspInit+0x13c>)
 8000d78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d7a:	4a3f      	ldr	r2, [pc, #252]	; (8000e78 <HAL_TIM_Encoder_MspInit+0x13c>)
 8000d7c:	f043 0301 	orr.w	r3, r3, #1
 8000d80:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d82:	4b3d      	ldr	r3, [pc, #244]	; (8000e78 <HAL_TIM_Encoder_MspInit+0x13c>)
 8000d84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d86:	f003 0301 	and.w	r3, r3, #1
 8000d8a:	61fb      	str	r3, [r7, #28]
 8000d8c:	69fb      	ldr	r3, [r7, #28]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000d8e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d92:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d94:	2302      	movs	r3, #2
 8000d96:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8000da0:	2306      	movs	r3, #6
 8000da2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000da4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000da8:	4619      	mov	r1, r3
 8000daa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dae:	f000 fbcd 	bl	800154c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000db2:	e05a      	b.n	8000e6a <HAL_TIM_Encoder_MspInit+0x12e>
  else if(htim_encoder->Instance==TIM3)
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	4a30      	ldr	r2, [pc, #192]	; (8000e7c <HAL_TIM_Encoder_MspInit+0x140>)
 8000dba:	4293      	cmp	r3, r2
 8000dbc:	d128      	bne.n	8000e10 <HAL_TIM_Encoder_MspInit+0xd4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000dbe:	4b2e      	ldr	r3, [pc, #184]	; (8000e78 <HAL_TIM_Encoder_MspInit+0x13c>)
 8000dc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dc2:	4a2d      	ldr	r2, [pc, #180]	; (8000e78 <HAL_TIM_Encoder_MspInit+0x13c>)
 8000dc4:	f043 0302 	orr.w	r3, r3, #2
 8000dc8:	6593      	str	r3, [r2, #88]	; 0x58
 8000dca:	4b2b      	ldr	r3, [pc, #172]	; (8000e78 <HAL_TIM_Encoder_MspInit+0x13c>)
 8000dcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dce:	f003 0302 	and.w	r3, r3, #2
 8000dd2:	61bb      	str	r3, [r7, #24]
 8000dd4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dd6:	4b28      	ldr	r3, [pc, #160]	; (8000e78 <HAL_TIM_Encoder_MspInit+0x13c>)
 8000dd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dda:	4a27      	ldr	r2, [pc, #156]	; (8000e78 <HAL_TIM_Encoder_MspInit+0x13c>)
 8000ddc:	f043 0302 	orr.w	r3, r3, #2
 8000de0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000de2:	4b25      	ldr	r3, [pc, #148]	; (8000e78 <HAL_TIM_Encoder_MspInit+0x13c>)
 8000de4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000de6:	f003 0302 	and.w	r3, r3, #2
 8000dea:	617b      	str	r3, [r7, #20]
 8000dec:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000dee:	2330      	movs	r3, #48	; 0x30
 8000df0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000df2:	2302      	movs	r3, #2
 8000df4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df6:	2300      	movs	r3, #0
 8000df8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000dfe:	2302      	movs	r3, #2
 8000e00:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e06:	4619      	mov	r1, r3
 8000e08:	481d      	ldr	r0, [pc, #116]	; (8000e80 <HAL_TIM_Encoder_MspInit+0x144>)
 8000e0a:	f000 fb9f 	bl	800154c <HAL_GPIO_Init>
}
 8000e0e:	e02c      	b.n	8000e6a <HAL_TIM_Encoder_MspInit+0x12e>
  else if(htim_encoder->Instance==TIM4)
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	4a1b      	ldr	r2, [pc, #108]	; (8000e84 <HAL_TIM_Encoder_MspInit+0x148>)
 8000e16:	4293      	cmp	r3, r2
 8000e18:	d127      	bne.n	8000e6a <HAL_TIM_Encoder_MspInit+0x12e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000e1a:	4b17      	ldr	r3, [pc, #92]	; (8000e78 <HAL_TIM_Encoder_MspInit+0x13c>)
 8000e1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e1e:	4a16      	ldr	r2, [pc, #88]	; (8000e78 <HAL_TIM_Encoder_MspInit+0x13c>)
 8000e20:	f043 0304 	orr.w	r3, r3, #4
 8000e24:	6593      	str	r3, [r2, #88]	; 0x58
 8000e26:	4b14      	ldr	r3, [pc, #80]	; (8000e78 <HAL_TIM_Encoder_MspInit+0x13c>)
 8000e28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e2a:	f003 0304 	and.w	r3, r3, #4
 8000e2e:	613b      	str	r3, [r7, #16]
 8000e30:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e32:	4b11      	ldr	r3, [pc, #68]	; (8000e78 <HAL_TIM_Encoder_MspInit+0x13c>)
 8000e34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e36:	4a10      	ldr	r2, [pc, #64]	; (8000e78 <HAL_TIM_Encoder_MspInit+0x13c>)
 8000e38:	f043 0302 	orr.w	r3, r3, #2
 8000e3c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e3e:	4b0e      	ldr	r3, [pc, #56]	; (8000e78 <HAL_TIM_Encoder_MspInit+0x13c>)
 8000e40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e42:	f003 0302 	and.w	r3, r3, #2
 8000e46:	60fb      	str	r3, [r7, #12]
 8000e48:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000e4a:	23c0      	movs	r3, #192	; 0xc0
 8000e4c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e4e:	2302      	movs	r3, #2
 8000e50:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e52:	2300      	movs	r3, #0
 8000e54:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e56:	2300      	movs	r3, #0
 8000e58:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000e5a:	2302      	movs	r3, #2
 8000e5c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e62:	4619      	mov	r1, r3
 8000e64:	4806      	ldr	r0, [pc, #24]	; (8000e80 <HAL_TIM_Encoder_MspInit+0x144>)
 8000e66:	f000 fb71 	bl	800154c <HAL_GPIO_Init>
}
 8000e6a:	bf00      	nop
 8000e6c:	3738      	adds	r7, #56	; 0x38
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	40012c00 	.word	0x40012c00
 8000e78:	40021000 	.word	0x40021000
 8000e7c:	40000400 	.word	0x40000400
 8000e80:	48000400 	.word	0x48000400
 8000e84:	40000800 	.word	0x40000800

08000e88 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	b087      	sub	sp, #28
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e98:	d10c      	bne.n	8000eb4 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000e9a:	4b1b      	ldr	r3, [pc, #108]	; (8000f08 <HAL_TIM_PWM_MspInit+0x80>)
 8000e9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e9e:	4a1a      	ldr	r2, [pc, #104]	; (8000f08 <HAL_TIM_PWM_MspInit+0x80>)
 8000ea0:	f043 0301 	orr.w	r3, r3, #1
 8000ea4:	6593      	str	r3, [r2, #88]	; 0x58
 8000ea6:	4b18      	ldr	r3, [pc, #96]	; (8000f08 <HAL_TIM_PWM_MspInit+0x80>)
 8000ea8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000eaa:	f003 0301 	and.w	r3, r3, #1
 8000eae:	617b      	str	r3, [r7, #20]
 8000eb0:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8000eb2:	e022      	b.n	8000efa <HAL_TIM_PWM_MspInit+0x72>
  else if(htim_pwm->Instance==TIM8)
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	4a14      	ldr	r2, [pc, #80]	; (8000f0c <HAL_TIM_PWM_MspInit+0x84>)
 8000eba:	4293      	cmp	r3, r2
 8000ebc:	d10c      	bne.n	8000ed8 <HAL_TIM_PWM_MspInit+0x50>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8000ebe:	4b12      	ldr	r3, [pc, #72]	; (8000f08 <HAL_TIM_PWM_MspInit+0x80>)
 8000ec0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ec2:	4a11      	ldr	r2, [pc, #68]	; (8000f08 <HAL_TIM_PWM_MspInit+0x80>)
 8000ec4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000ec8:	6613      	str	r3, [r2, #96]	; 0x60
 8000eca:	4b0f      	ldr	r3, [pc, #60]	; (8000f08 <HAL_TIM_PWM_MspInit+0x80>)
 8000ecc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ece:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000ed2:	613b      	str	r3, [r7, #16]
 8000ed4:	693b      	ldr	r3, [r7, #16]
}
 8000ed6:	e010      	b.n	8000efa <HAL_TIM_PWM_MspInit+0x72>
  else if(htim_pwm->Instance==TIM15)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	4a0c      	ldr	r2, [pc, #48]	; (8000f10 <HAL_TIM_PWM_MspInit+0x88>)
 8000ede:	4293      	cmp	r3, r2
 8000ee0:	d10b      	bne.n	8000efa <HAL_TIM_PWM_MspInit+0x72>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8000ee2:	4b09      	ldr	r3, [pc, #36]	; (8000f08 <HAL_TIM_PWM_MspInit+0x80>)
 8000ee4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ee6:	4a08      	ldr	r2, [pc, #32]	; (8000f08 <HAL_TIM_PWM_MspInit+0x80>)
 8000ee8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000eec:	6613      	str	r3, [r2, #96]	; 0x60
 8000eee:	4b06      	ldr	r3, [pc, #24]	; (8000f08 <HAL_TIM_PWM_MspInit+0x80>)
 8000ef0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ef2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ef6:	60fb      	str	r3, [r7, #12]
 8000ef8:	68fb      	ldr	r3, [r7, #12]
}
 8000efa:	bf00      	nop
 8000efc:	371c      	adds	r7, #28
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop
 8000f08:	40021000 	.word	0x40021000
 8000f0c:	40013400 	.word	0x40013400
 8000f10:	40014000 	.word	0x40014000

08000f14 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f14:	b480      	push	{r7}
 8000f16:	b087      	sub	sp, #28
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	4a1c      	ldr	r2, [pc, #112]	; (8000f94 <HAL_TIM_Base_MspInit+0x80>)
 8000f22:	4293      	cmp	r3, r2
 8000f24:	d10c      	bne.n	8000f40 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000f26:	4b1c      	ldr	r3, [pc, #112]	; (8000f98 <HAL_TIM_Base_MspInit+0x84>)
 8000f28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f2a:	4a1b      	ldr	r2, [pc, #108]	; (8000f98 <HAL_TIM_Base_MspInit+0x84>)
 8000f2c:	f043 0310 	orr.w	r3, r3, #16
 8000f30:	6593      	str	r3, [r2, #88]	; 0x58
 8000f32:	4b19      	ldr	r3, [pc, #100]	; (8000f98 <HAL_TIM_Base_MspInit+0x84>)
 8000f34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f36:	f003 0310 	and.w	r3, r3, #16
 8000f3a:	617b      	str	r3, [r7, #20]
 8000f3c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8000f3e:	e022      	b.n	8000f86 <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM16)
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	4a15      	ldr	r2, [pc, #84]	; (8000f9c <HAL_TIM_Base_MspInit+0x88>)
 8000f46:	4293      	cmp	r3, r2
 8000f48:	d10c      	bne.n	8000f64 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000f4a:	4b13      	ldr	r3, [pc, #76]	; (8000f98 <HAL_TIM_Base_MspInit+0x84>)
 8000f4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f4e:	4a12      	ldr	r2, [pc, #72]	; (8000f98 <HAL_TIM_Base_MspInit+0x84>)
 8000f50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f54:	6613      	str	r3, [r2, #96]	; 0x60
 8000f56:	4b10      	ldr	r3, [pc, #64]	; (8000f98 <HAL_TIM_Base_MspInit+0x84>)
 8000f58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f5e:	613b      	str	r3, [r7, #16]
 8000f60:	693b      	ldr	r3, [r7, #16]
}
 8000f62:	e010      	b.n	8000f86 <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM17)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	4a0d      	ldr	r2, [pc, #52]	; (8000fa0 <HAL_TIM_Base_MspInit+0x8c>)
 8000f6a:	4293      	cmp	r3, r2
 8000f6c:	d10b      	bne.n	8000f86 <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8000f6e:	4b0a      	ldr	r3, [pc, #40]	; (8000f98 <HAL_TIM_Base_MspInit+0x84>)
 8000f70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f72:	4a09      	ldr	r2, [pc, #36]	; (8000f98 <HAL_TIM_Base_MspInit+0x84>)
 8000f74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f78:	6613      	str	r3, [r2, #96]	; 0x60
 8000f7a:	4b07      	ldr	r3, [pc, #28]	; (8000f98 <HAL_TIM_Base_MspInit+0x84>)
 8000f7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f7e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f82:	60fb      	str	r3, [r7, #12]
 8000f84:	68fb      	ldr	r3, [r7, #12]
}
 8000f86:	bf00      	nop
 8000f88:	371c      	adds	r7, #28
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop
 8000f94:	40001000 	.word	0x40001000
 8000f98:	40021000 	.word	0x40021000
 8000f9c:	40014400 	.word	0x40014400
 8000fa0:	40014800 	.word	0x40014800

08000fa4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b08c      	sub	sp, #48	; 0x30
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fac:	f107 031c 	add.w	r3, r7, #28
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	601a      	str	r2, [r3, #0]
 8000fb4:	605a      	str	r2, [r3, #4]
 8000fb6:	609a      	str	r2, [r3, #8]
 8000fb8:	60da      	str	r2, [r3, #12]
 8000fba:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000fc4:	d12f      	bne.n	8001026 <HAL_TIM_MspPostInit+0x82>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fc6:	4b60      	ldr	r3, [pc, #384]	; (8001148 <HAL_TIM_MspPostInit+0x1a4>)
 8000fc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fca:	4a5f      	ldr	r2, [pc, #380]	; (8001148 <HAL_TIM_MspPostInit+0x1a4>)
 8000fcc:	f043 0301 	orr.w	r3, r3, #1
 8000fd0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fd2:	4b5d      	ldr	r3, [pc, #372]	; (8001148 <HAL_TIM_MspPostInit+0x1a4>)
 8000fd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fd6:	f003 0301 	and.w	r3, r3, #1
 8000fda:	61bb      	str	r3, [r7, #24]
 8000fdc:	69bb      	ldr	r3, [r7, #24]
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA10     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8000fde:	2307      	movs	r3, #7
 8000fe0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fe2:	2302      	movs	r3, #2
 8000fe4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fea:	2300      	movs	r3, #0
 8000fec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ff2:	f107 031c 	add.w	r3, r7, #28
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ffc:	f000 faa6 	bl	800154c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001000:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001004:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001006:	2302      	movs	r3, #2
 8001008:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100a:	2300      	movs	r3, #0
 800100c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800100e:	2300      	movs	r3, #0
 8001010:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM2;
 8001012:	230a      	movs	r3, #10
 8001014:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001016:	f107 031c 	add.w	r3, r7, #28
 800101a:	4619      	mov	r1, r3
 800101c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001020:	f000 fa94 	bl	800154c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 8001024:	e08b      	b.n	800113e <HAL_TIM_MspPostInit+0x19a>
  else if(htim->Instance==TIM8)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	4a48      	ldr	r2, [pc, #288]	; (800114c <HAL_TIM_MspPostInit+0x1a8>)
 800102c:	4293      	cmp	r3, r2
 800102e:	d11e      	bne.n	800106e <HAL_TIM_MspPostInit+0xca>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001030:	4b45      	ldr	r3, [pc, #276]	; (8001148 <HAL_TIM_MspPostInit+0x1a4>)
 8001032:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001034:	4a44      	ldr	r2, [pc, #272]	; (8001148 <HAL_TIM_MspPostInit+0x1a4>)
 8001036:	f043 0301 	orr.w	r3, r3, #1
 800103a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800103c:	4b42      	ldr	r3, [pc, #264]	; (8001148 <HAL_TIM_MspPostInit+0x1a4>)
 800103e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001040:	f003 0301 	and.w	r3, r3, #1
 8001044:	617b      	str	r3, [r7, #20]
 8001046:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001048:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800104c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800104e:	2302      	movs	r3, #2
 8001050:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001052:	2300      	movs	r3, #0
 8001054:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001056:	2300      	movs	r3, #0
 8001058:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM8;
 800105a:	2302      	movs	r3, #2
 800105c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800105e:	f107 031c 	add.w	r3, r7, #28
 8001062:	4619      	mov	r1, r3
 8001064:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001068:	f000 fa70 	bl	800154c <HAL_GPIO_Init>
}
 800106c:	e067      	b.n	800113e <HAL_TIM_MspPostInit+0x19a>
  else if(htim->Instance==TIM15)
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	4a37      	ldr	r2, [pc, #220]	; (8001150 <HAL_TIM_MspPostInit+0x1ac>)
 8001074:	4293      	cmp	r3, r2
 8001076:	d11d      	bne.n	80010b4 <HAL_TIM_MspPostInit+0x110>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001078:	4b33      	ldr	r3, [pc, #204]	; (8001148 <HAL_TIM_MspPostInit+0x1a4>)
 800107a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800107c:	4a32      	ldr	r2, [pc, #200]	; (8001148 <HAL_TIM_MspPostInit+0x1a4>)
 800107e:	f043 0301 	orr.w	r3, r3, #1
 8001082:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001084:	4b30      	ldr	r3, [pc, #192]	; (8001148 <HAL_TIM_MspPostInit+0x1a4>)
 8001086:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001088:	f003 0301 	and.w	r3, r3, #1
 800108c:	613b      	str	r3, [r7, #16]
 800108e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001090:	2308      	movs	r3, #8
 8001092:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001094:	2302      	movs	r3, #2
 8001096:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001098:	2300      	movs	r3, #0
 800109a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800109c:	2300      	movs	r3, #0
 800109e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM15;
 80010a0:	2309      	movs	r3, #9
 80010a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010a4:	f107 031c 	add.w	r3, r7, #28
 80010a8:	4619      	mov	r1, r3
 80010aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010ae:	f000 fa4d 	bl	800154c <HAL_GPIO_Init>
}
 80010b2:	e044      	b.n	800113e <HAL_TIM_MspPostInit+0x19a>
  else if(htim->Instance==TIM16)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	4a26      	ldr	r2, [pc, #152]	; (8001154 <HAL_TIM_MspPostInit+0x1b0>)
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d11d      	bne.n	80010fa <HAL_TIM_MspPostInit+0x156>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010be:	4b22      	ldr	r3, [pc, #136]	; (8001148 <HAL_TIM_MspPostInit+0x1a4>)
 80010c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010c2:	4a21      	ldr	r2, [pc, #132]	; (8001148 <HAL_TIM_MspPostInit+0x1a4>)
 80010c4:	f043 0301 	orr.w	r3, r3, #1
 80010c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010ca:	4b1f      	ldr	r3, [pc, #124]	; (8001148 <HAL_TIM_MspPostInit+0x1a4>)
 80010cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ce:	f003 0301 	and.w	r3, r3, #1
 80010d2:	60fb      	str	r3, [r7, #12]
 80010d4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80010d6:	2340      	movs	r3, #64	; 0x40
 80010d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010da:	2302      	movs	r3, #2
 80010dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010de:	2300      	movs	r3, #0
 80010e0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010e2:	2300      	movs	r3, #0
 80010e4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 80010e6:	2301      	movs	r3, #1
 80010e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010ea:	f107 031c 	add.w	r3, r7, #28
 80010ee:	4619      	mov	r1, r3
 80010f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010f4:	f000 fa2a 	bl	800154c <HAL_GPIO_Init>
}
 80010f8:	e021      	b.n	800113e <HAL_TIM_MspPostInit+0x19a>
  else if(htim->Instance==TIM17)
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	4a16      	ldr	r2, [pc, #88]	; (8001158 <HAL_TIM_MspPostInit+0x1b4>)
 8001100:	4293      	cmp	r3, r2
 8001102:	d11c      	bne.n	800113e <HAL_TIM_MspPostInit+0x19a>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001104:	4b10      	ldr	r3, [pc, #64]	; (8001148 <HAL_TIM_MspPostInit+0x1a4>)
 8001106:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001108:	4a0f      	ldr	r2, [pc, #60]	; (8001148 <HAL_TIM_MspPostInit+0x1a4>)
 800110a:	f043 0301 	orr.w	r3, r3, #1
 800110e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001110:	4b0d      	ldr	r3, [pc, #52]	; (8001148 <HAL_TIM_MspPostInit+0x1a4>)
 8001112:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001114:	f003 0301 	and.w	r3, r3, #1
 8001118:	60bb      	str	r3, [r7, #8]
 800111a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800111c:	2380      	movs	r3, #128	; 0x80
 800111e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001120:	2302      	movs	r3, #2
 8001122:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001124:	2300      	movs	r3, #0
 8001126:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001128:	2300      	movs	r3, #0
 800112a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM17;
 800112c:	2301      	movs	r3, #1
 800112e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001130:	f107 031c 	add.w	r3, r7, #28
 8001134:	4619      	mov	r1, r3
 8001136:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800113a:	f000 fa07 	bl	800154c <HAL_GPIO_Init>
}
 800113e:	bf00      	nop
 8001140:	3730      	adds	r7, #48	; 0x30
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	40021000 	.word	0x40021000
 800114c:	40013400 	.word	0x40013400
 8001150:	40014000 	.word	0x40014000
 8001154:	40014400 	.word	0x40014400
 8001158:	40014800 	.word	0x40014800

0800115c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800115c:	b480      	push	{r7}
 800115e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001160:	bf00      	nop
 8001162:	46bd      	mov	sp, r7
 8001164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001168:	4770      	bx	lr

0800116a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800116a:	b480      	push	{r7}
 800116c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800116e:	e7fe      	b.n	800116e <HardFault_Handler+0x4>

08001170 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001174:	e7fe      	b.n	8001174 <MemManage_Handler+0x4>

08001176 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001176:	b480      	push	{r7}
 8001178:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800117a:	e7fe      	b.n	800117a <BusFault_Handler+0x4>

0800117c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001180:	e7fe      	b.n	8001180 <UsageFault_Handler+0x4>

08001182 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001182:	b480      	push	{r7}
 8001184:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001186:	bf00      	nop
 8001188:	46bd      	mov	sp, r7
 800118a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118e:	4770      	bx	lr

08001190 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001194:	bf00      	nop
 8001196:	46bd      	mov	sp, r7
 8001198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119c:	4770      	bx	lr

0800119e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800119e:	b480      	push	{r7}
 80011a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011a2:	bf00      	nop
 80011a4:	46bd      	mov	sp, r7
 80011a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011aa:	4770      	bx	lr

080011ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011b0:	f000 f89e 	bl	80012f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011b4:	bf00      	nop
 80011b6:	bd80      	pop	{r7, pc}

080011b8 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80011bc:	4802      	ldr	r0, [pc, #8]	; (80011c8 <USB_LP_IRQHandler+0x10>)
 80011be:	f000 fc80 	bl	8001ac2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 80011c2:	bf00      	nop
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	20001320 	.word	0x20001320

080011cc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80011d0:	4b08      	ldr	r3, [pc, #32]	; (80011f4 <SystemInit+0x28>)
 80011d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011d6:	4a07      	ldr	r2, [pc, #28]	; (80011f4 <SystemInit+0x28>)
 80011d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80011e0:	4b04      	ldr	r3, [pc, #16]	; (80011f4 <SystemInit+0x28>)
 80011e2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80011e6:	609a      	str	r2, [r3, #8]
#endif
}
 80011e8:	bf00      	nop
 80011ea:	46bd      	mov	sp, r7
 80011ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f0:	4770      	bx	lr
 80011f2:	bf00      	nop
 80011f4:	e000ed00 	.word	0xe000ed00

080011f8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80011f8:	480d      	ldr	r0, [pc, #52]	; (8001230 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80011fa:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011fc:	480d      	ldr	r0, [pc, #52]	; (8001234 <LoopForever+0x6>)
  ldr r1, =_edata
 80011fe:	490e      	ldr	r1, [pc, #56]	; (8001238 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001200:	4a0e      	ldr	r2, [pc, #56]	; (800123c <LoopForever+0xe>)
  movs r3, #0
 8001202:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001204:	e002      	b.n	800120c <LoopCopyDataInit>

08001206 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001206:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001208:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800120a:	3304      	adds	r3, #4

0800120c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800120c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800120e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001210:	d3f9      	bcc.n	8001206 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001212:	4a0b      	ldr	r2, [pc, #44]	; (8001240 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001214:	4c0b      	ldr	r4, [pc, #44]	; (8001244 <LoopForever+0x16>)
  movs r3, #0
 8001216:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001218:	e001      	b.n	800121e <LoopFillZerobss>

0800121a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800121a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800121c:	3204      	adds	r2, #4

0800121e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800121e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001220:	d3fb      	bcc.n	800121a <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001222:	f7ff ffd3 	bl	80011cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001226:	f008 f91b 	bl	8009460 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800122a:	f7ff f815 	bl	8000258 <main>

0800122e <LoopForever>:

LoopForever:
    b LoopForever
 800122e:	e7fe      	b.n	800122e <LoopForever>
  ldr   r0, =_estack
 8001230:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001234:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001238:	20000184 	.word	0x20000184
  ldr r2, =_sidata
 800123c:	08009548 	.word	0x08009548
  ldr r2, =_sbss
 8001240:	20000184 	.word	0x20000184
  ldr r4, =_ebss
 8001244:	20001614 	.word	0x20001614

08001248 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001248:	e7fe      	b.n	8001248 <ADC1_2_IRQHandler>

0800124a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800124a:	b580      	push	{r7, lr}
 800124c:	b082      	sub	sp, #8
 800124e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001250:	2300      	movs	r3, #0
 8001252:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001254:	2003      	movs	r0, #3
 8001256:	f000 f939 	bl	80014cc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800125a:	2000      	movs	r0, #0
 800125c:	f000 f80e 	bl	800127c <HAL_InitTick>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d002      	beq.n	800126c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001266:	2301      	movs	r3, #1
 8001268:	71fb      	strb	r3, [r7, #7]
 800126a:	e001      	b.n	8001270 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800126c:	f7ff fd42 	bl	8000cf4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001270:	79fb      	ldrb	r3, [r7, #7]

}
 8001272:	4618      	mov	r0, r3
 8001274:	3708      	adds	r7, #8
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
	...

0800127c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b084      	sub	sp, #16
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001284:	2300      	movs	r3, #0
 8001286:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001288:	4b16      	ldr	r3, [pc, #88]	; (80012e4 <HAL_InitTick+0x68>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	2b00      	cmp	r3, #0
 800128e:	d022      	beq.n	80012d6 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001290:	4b15      	ldr	r3, [pc, #84]	; (80012e8 <HAL_InitTick+0x6c>)
 8001292:	681a      	ldr	r2, [r3, #0]
 8001294:	4b13      	ldr	r3, [pc, #76]	; (80012e4 <HAL_InitTick+0x68>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800129c:	fbb1 f3f3 	udiv	r3, r1, r3
 80012a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80012a4:	4618      	mov	r0, r3
 80012a6:	f000 f944 	bl	8001532 <HAL_SYSTICK_Config>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d10f      	bne.n	80012d0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	2b0f      	cmp	r3, #15
 80012b4:	d809      	bhi.n	80012ca <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012b6:	2200      	movs	r2, #0
 80012b8:	6879      	ldr	r1, [r7, #4]
 80012ba:	f04f 30ff 	mov.w	r0, #4294967295
 80012be:	f000 f910 	bl	80014e2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80012c2:	4a0a      	ldr	r2, [pc, #40]	; (80012ec <HAL_InitTick+0x70>)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	6013      	str	r3, [r2, #0]
 80012c8:	e007      	b.n	80012da <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80012ca:	2301      	movs	r3, #1
 80012cc:	73fb      	strb	r3, [r7, #15]
 80012ce:	e004      	b.n	80012da <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80012d0:	2301      	movs	r3, #1
 80012d2:	73fb      	strb	r3, [r7, #15]
 80012d4:	e001      	b.n	80012da <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80012d6:	2301      	movs	r3, #1
 80012d8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80012da:	7bfb      	ldrb	r3, [r7, #15]
}
 80012dc:	4618      	mov	r0, r3
 80012de:	3710      	adds	r7, #16
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	20000008 	.word	0x20000008
 80012e8:	20000000 	.word	0x20000000
 80012ec:	20000004 	.word	0x20000004

080012f0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012f4:	4b05      	ldr	r3, [pc, #20]	; (800130c <HAL_IncTick+0x1c>)
 80012f6:	681a      	ldr	r2, [r3, #0]
 80012f8:	4b05      	ldr	r3, [pc, #20]	; (8001310 <HAL_IncTick+0x20>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4413      	add	r3, r2
 80012fe:	4a03      	ldr	r2, [pc, #12]	; (800130c <HAL_IncTick+0x1c>)
 8001300:	6013      	str	r3, [r2, #0]
}
 8001302:	bf00      	nop
 8001304:	46bd      	mov	sp, r7
 8001306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130a:	4770      	bx	lr
 800130c:	2000067c 	.word	0x2000067c
 8001310:	20000008 	.word	0x20000008

08001314 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001314:	b480      	push	{r7}
 8001316:	af00      	add	r7, sp, #0
  return uwTick;
 8001318:	4b03      	ldr	r3, [pc, #12]	; (8001328 <HAL_GetTick+0x14>)
 800131a:	681b      	ldr	r3, [r3, #0]
}
 800131c:	4618      	mov	r0, r3
 800131e:	46bd      	mov	sp, r7
 8001320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001324:	4770      	bx	lr
 8001326:	bf00      	nop
 8001328:	2000067c 	.word	0x2000067c

0800132c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800132c:	b480      	push	{r7}
 800132e:	b085      	sub	sp, #20
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	f003 0307 	and.w	r3, r3, #7
 800133a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800133c:	4b0c      	ldr	r3, [pc, #48]	; (8001370 <__NVIC_SetPriorityGrouping+0x44>)
 800133e:	68db      	ldr	r3, [r3, #12]
 8001340:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001342:	68ba      	ldr	r2, [r7, #8]
 8001344:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001348:	4013      	ands	r3, r2
 800134a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001350:	68bb      	ldr	r3, [r7, #8]
 8001352:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001354:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001358:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800135c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800135e:	4a04      	ldr	r2, [pc, #16]	; (8001370 <__NVIC_SetPriorityGrouping+0x44>)
 8001360:	68bb      	ldr	r3, [r7, #8]
 8001362:	60d3      	str	r3, [r2, #12]
}
 8001364:	bf00      	nop
 8001366:	3714      	adds	r7, #20
 8001368:	46bd      	mov	sp, r7
 800136a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136e:	4770      	bx	lr
 8001370:	e000ed00 	.word	0xe000ed00

08001374 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001374:	b480      	push	{r7}
 8001376:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001378:	4b04      	ldr	r3, [pc, #16]	; (800138c <__NVIC_GetPriorityGrouping+0x18>)
 800137a:	68db      	ldr	r3, [r3, #12]
 800137c:	0a1b      	lsrs	r3, r3, #8
 800137e:	f003 0307 	and.w	r3, r3, #7
}
 8001382:	4618      	mov	r0, r3
 8001384:	46bd      	mov	sp, r7
 8001386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138a:	4770      	bx	lr
 800138c:	e000ed00 	.word	0xe000ed00

08001390 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001390:	b480      	push	{r7}
 8001392:	b083      	sub	sp, #12
 8001394:	af00      	add	r7, sp, #0
 8001396:	4603      	mov	r3, r0
 8001398:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800139a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	db0b      	blt.n	80013ba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013a2:	79fb      	ldrb	r3, [r7, #7]
 80013a4:	f003 021f 	and.w	r2, r3, #31
 80013a8:	4907      	ldr	r1, [pc, #28]	; (80013c8 <__NVIC_EnableIRQ+0x38>)
 80013aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ae:	095b      	lsrs	r3, r3, #5
 80013b0:	2001      	movs	r0, #1
 80013b2:	fa00 f202 	lsl.w	r2, r0, r2
 80013b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80013ba:	bf00      	nop
 80013bc:	370c      	adds	r7, #12
 80013be:	46bd      	mov	sp, r7
 80013c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c4:	4770      	bx	lr
 80013c6:	bf00      	nop
 80013c8:	e000e100 	.word	0xe000e100

080013cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b083      	sub	sp, #12
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	4603      	mov	r3, r0
 80013d4:	6039      	str	r1, [r7, #0]
 80013d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	db0a      	blt.n	80013f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	b2da      	uxtb	r2, r3
 80013e4:	490c      	ldr	r1, [pc, #48]	; (8001418 <__NVIC_SetPriority+0x4c>)
 80013e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ea:	0112      	lsls	r2, r2, #4
 80013ec:	b2d2      	uxtb	r2, r2
 80013ee:	440b      	add	r3, r1
 80013f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013f4:	e00a      	b.n	800140c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	b2da      	uxtb	r2, r3
 80013fa:	4908      	ldr	r1, [pc, #32]	; (800141c <__NVIC_SetPriority+0x50>)
 80013fc:	79fb      	ldrb	r3, [r7, #7]
 80013fe:	f003 030f 	and.w	r3, r3, #15
 8001402:	3b04      	subs	r3, #4
 8001404:	0112      	lsls	r2, r2, #4
 8001406:	b2d2      	uxtb	r2, r2
 8001408:	440b      	add	r3, r1
 800140a:	761a      	strb	r2, [r3, #24]
}
 800140c:	bf00      	nop
 800140e:	370c      	adds	r7, #12
 8001410:	46bd      	mov	sp, r7
 8001412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001416:	4770      	bx	lr
 8001418:	e000e100 	.word	0xe000e100
 800141c:	e000ed00 	.word	0xe000ed00

08001420 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001420:	b480      	push	{r7}
 8001422:	b089      	sub	sp, #36	; 0x24
 8001424:	af00      	add	r7, sp, #0
 8001426:	60f8      	str	r0, [r7, #12]
 8001428:	60b9      	str	r1, [r7, #8]
 800142a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	f003 0307 	and.w	r3, r3, #7
 8001432:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001434:	69fb      	ldr	r3, [r7, #28]
 8001436:	f1c3 0307 	rsb	r3, r3, #7
 800143a:	2b04      	cmp	r3, #4
 800143c:	bf28      	it	cs
 800143e:	2304      	movcs	r3, #4
 8001440:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001442:	69fb      	ldr	r3, [r7, #28]
 8001444:	3304      	adds	r3, #4
 8001446:	2b06      	cmp	r3, #6
 8001448:	d902      	bls.n	8001450 <NVIC_EncodePriority+0x30>
 800144a:	69fb      	ldr	r3, [r7, #28]
 800144c:	3b03      	subs	r3, #3
 800144e:	e000      	b.n	8001452 <NVIC_EncodePriority+0x32>
 8001450:	2300      	movs	r3, #0
 8001452:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001454:	f04f 32ff 	mov.w	r2, #4294967295
 8001458:	69bb      	ldr	r3, [r7, #24]
 800145a:	fa02 f303 	lsl.w	r3, r2, r3
 800145e:	43da      	mvns	r2, r3
 8001460:	68bb      	ldr	r3, [r7, #8]
 8001462:	401a      	ands	r2, r3
 8001464:	697b      	ldr	r3, [r7, #20]
 8001466:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001468:	f04f 31ff 	mov.w	r1, #4294967295
 800146c:	697b      	ldr	r3, [r7, #20]
 800146e:	fa01 f303 	lsl.w	r3, r1, r3
 8001472:	43d9      	mvns	r1, r3
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001478:	4313      	orrs	r3, r2
         );
}
 800147a:	4618      	mov	r0, r3
 800147c:	3724      	adds	r7, #36	; 0x24
 800147e:	46bd      	mov	sp, r7
 8001480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001484:	4770      	bx	lr
	...

08001488 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b082      	sub	sp, #8
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	3b01      	subs	r3, #1
 8001494:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001498:	d301      	bcc.n	800149e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800149a:	2301      	movs	r3, #1
 800149c:	e00f      	b.n	80014be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800149e:	4a0a      	ldr	r2, [pc, #40]	; (80014c8 <SysTick_Config+0x40>)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	3b01      	subs	r3, #1
 80014a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014a6:	210f      	movs	r1, #15
 80014a8:	f04f 30ff 	mov.w	r0, #4294967295
 80014ac:	f7ff ff8e 	bl	80013cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014b0:	4b05      	ldr	r3, [pc, #20]	; (80014c8 <SysTick_Config+0x40>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014b6:	4b04      	ldr	r3, [pc, #16]	; (80014c8 <SysTick_Config+0x40>)
 80014b8:	2207      	movs	r2, #7
 80014ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014bc:	2300      	movs	r3, #0
}
 80014be:	4618      	mov	r0, r3
 80014c0:	3708      	adds	r7, #8
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	e000e010 	.word	0xe000e010

080014cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b082      	sub	sp, #8
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014d4:	6878      	ldr	r0, [r7, #4]
 80014d6:	f7ff ff29 	bl	800132c <__NVIC_SetPriorityGrouping>
}
 80014da:	bf00      	nop
 80014dc:	3708      	adds	r7, #8
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}

080014e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014e2:	b580      	push	{r7, lr}
 80014e4:	b086      	sub	sp, #24
 80014e6:	af00      	add	r7, sp, #0
 80014e8:	4603      	mov	r3, r0
 80014ea:	60b9      	str	r1, [r7, #8]
 80014ec:	607a      	str	r2, [r7, #4]
 80014ee:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80014f0:	f7ff ff40 	bl	8001374 <__NVIC_GetPriorityGrouping>
 80014f4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014f6:	687a      	ldr	r2, [r7, #4]
 80014f8:	68b9      	ldr	r1, [r7, #8]
 80014fa:	6978      	ldr	r0, [r7, #20]
 80014fc:	f7ff ff90 	bl	8001420 <NVIC_EncodePriority>
 8001500:	4602      	mov	r2, r0
 8001502:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001506:	4611      	mov	r1, r2
 8001508:	4618      	mov	r0, r3
 800150a:	f7ff ff5f 	bl	80013cc <__NVIC_SetPriority>
}
 800150e:	bf00      	nop
 8001510:	3718      	adds	r7, #24
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}

08001516 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001516:	b580      	push	{r7, lr}
 8001518:	b082      	sub	sp, #8
 800151a:	af00      	add	r7, sp, #0
 800151c:	4603      	mov	r3, r0
 800151e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001520:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001524:	4618      	mov	r0, r3
 8001526:	f7ff ff33 	bl	8001390 <__NVIC_EnableIRQ>
}
 800152a:	bf00      	nop
 800152c:	3708      	adds	r7, #8
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}

08001532 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001532:	b580      	push	{r7, lr}
 8001534:	b082      	sub	sp, #8
 8001536:	af00      	add	r7, sp, #0
 8001538:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800153a:	6878      	ldr	r0, [r7, #4]
 800153c:	f7ff ffa4 	bl	8001488 <SysTick_Config>
 8001540:	4603      	mov	r3, r0
}
 8001542:	4618      	mov	r0, r3
 8001544:	3708      	adds	r7, #8
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
	...

0800154c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800154c:	b480      	push	{r7}
 800154e:	b087      	sub	sp, #28
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
 8001554:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001556:	2300      	movs	r3, #0
 8001558:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800155a:	e15a      	b.n	8001812 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	681a      	ldr	r2, [r3, #0]
 8001560:	2101      	movs	r1, #1
 8001562:	697b      	ldr	r3, [r7, #20]
 8001564:	fa01 f303 	lsl.w	r3, r1, r3
 8001568:	4013      	ands	r3, r2
 800156a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	2b00      	cmp	r3, #0
 8001570:	f000 814c 	beq.w	800180c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	2b01      	cmp	r3, #1
 800157a:	d00b      	beq.n	8001594 <HAL_GPIO_Init+0x48>
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	2b02      	cmp	r3, #2
 8001582:	d007      	beq.n	8001594 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001588:	2b11      	cmp	r3, #17
 800158a:	d003      	beq.n	8001594 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	2b12      	cmp	r3, #18
 8001592:	d130      	bne.n	80015f6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	689b      	ldr	r3, [r3, #8]
 8001598:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800159a:	697b      	ldr	r3, [r7, #20]
 800159c:	005b      	lsls	r3, r3, #1
 800159e:	2203      	movs	r2, #3
 80015a0:	fa02 f303 	lsl.w	r3, r2, r3
 80015a4:	43db      	mvns	r3, r3
 80015a6:	693a      	ldr	r2, [r7, #16]
 80015a8:	4013      	ands	r3, r2
 80015aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	68da      	ldr	r2, [r3, #12]
 80015b0:	697b      	ldr	r3, [r7, #20]
 80015b2:	005b      	lsls	r3, r3, #1
 80015b4:	fa02 f303 	lsl.w	r3, r2, r3
 80015b8:	693a      	ldr	r2, [r7, #16]
 80015ba:	4313      	orrs	r3, r2
 80015bc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	693a      	ldr	r2, [r7, #16]
 80015c2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80015ca:	2201      	movs	r2, #1
 80015cc:	697b      	ldr	r3, [r7, #20]
 80015ce:	fa02 f303 	lsl.w	r3, r2, r3
 80015d2:	43db      	mvns	r3, r3
 80015d4:	693a      	ldr	r2, [r7, #16]
 80015d6:	4013      	ands	r3, r2
 80015d8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	091b      	lsrs	r3, r3, #4
 80015e0:	f003 0201 	and.w	r2, r3, #1
 80015e4:	697b      	ldr	r3, [r7, #20]
 80015e6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ea:	693a      	ldr	r2, [r7, #16]
 80015ec:	4313      	orrs	r3, r2
 80015ee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	693a      	ldr	r2, [r7, #16]
 80015f4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	68db      	ldr	r3, [r3, #12]
 80015fa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80015fc:	697b      	ldr	r3, [r7, #20]
 80015fe:	005b      	lsls	r3, r3, #1
 8001600:	2203      	movs	r2, #3
 8001602:	fa02 f303 	lsl.w	r3, r2, r3
 8001606:	43db      	mvns	r3, r3
 8001608:	693a      	ldr	r2, [r7, #16]
 800160a:	4013      	ands	r3, r2
 800160c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	689a      	ldr	r2, [r3, #8]
 8001612:	697b      	ldr	r3, [r7, #20]
 8001614:	005b      	lsls	r3, r3, #1
 8001616:	fa02 f303 	lsl.w	r3, r2, r3
 800161a:	693a      	ldr	r2, [r7, #16]
 800161c:	4313      	orrs	r3, r2
 800161e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	693a      	ldr	r2, [r7, #16]
 8001624:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	2b02      	cmp	r3, #2
 800162c:	d003      	beq.n	8001636 <HAL_GPIO_Init+0xea>
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	2b12      	cmp	r3, #18
 8001634:	d123      	bne.n	800167e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001636:	697b      	ldr	r3, [r7, #20]
 8001638:	08da      	lsrs	r2, r3, #3
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	3208      	adds	r2, #8
 800163e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001642:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001644:	697b      	ldr	r3, [r7, #20]
 8001646:	f003 0307 	and.w	r3, r3, #7
 800164a:	009b      	lsls	r3, r3, #2
 800164c:	220f      	movs	r2, #15
 800164e:	fa02 f303 	lsl.w	r3, r2, r3
 8001652:	43db      	mvns	r3, r3
 8001654:	693a      	ldr	r2, [r7, #16]
 8001656:	4013      	ands	r3, r2
 8001658:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	691a      	ldr	r2, [r3, #16]
 800165e:	697b      	ldr	r3, [r7, #20]
 8001660:	f003 0307 	and.w	r3, r3, #7
 8001664:	009b      	lsls	r3, r3, #2
 8001666:	fa02 f303 	lsl.w	r3, r2, r3
 800166a:	693a      	ldr	r2, [r7, #16]
 800166c:	4313      	orrs	r3, r2
 800166e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001670:	697b      	ldr	r3, [r7, #20]
 8001672:	08da      	lsrs	r2, r3, #3
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	3208      	adds	r2, #8
 8001678:	6939      	ldr	r1, [r7, #16]
 800167a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001684:	697b      	ldr	r3, [r7, #20]
 8001686:	005b      	lsls	r3, r3, #1
 8001688:	2203      	movs	r2, #3
 800168a:	fa02 f303 	lsl.w	r3, r2, r3
 800168e:	43db      	mvns	r3, r3
 8001690:	693a      	ldr	r2, [r7, #16]
 8001692:	4013      	ands	r3, r2
 8001694:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	f003 0203 	and.w	r2, r3, #3
 800169e:	697b      	ldr	r3, [r7, #20]
 80016a0:	005b      	lsls	r3, r3, #1
 80016a2:	fa02 f303 	lsl.w	r3, r2, r3
 80016a6:	693a      	ldr	r2, [r7, #16]
 80016a8:	4313      	orrs	r3, r2
 80016aa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	693a      	ldr	r2, [r7, #16]
 80016b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	f000 80a6 	beq.w	800180c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016c0:	4b5b      	ldr	r3, [pc, #364]	; (8001830 <HAL_GPIO_Init+0x2e4>)
 80016c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016c4:	4a5a      	ldr	r2, [pc, #360]	; (8001830 <HAL_GPIO_Init+0x2e4>)
 80016c6:	f043 0301 	orr.w	r3, r3, #1
 80016ca:	6613      	str	r3, [r2, #96]	; 0x60
 80016cc:	4b58      	ldr	r3, [pc, #352]	; (8001830 <HAL_GPIO_Init+0x2e4>)
 80016ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016d0:	f003 0301 	and.w	r3, r3, #1
 80016d4:	60bb      	str	r3, [r7, #8]
 80016d6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80016d8:	4a56      	ldr	r2, [pc, #344]	; (8001834 <HAL_GPIO_Init+0x2e8>)
 80016da:	697b      	ldr	r3, [r7, #20]
 80016dc:	089b      	lsrs	r3, r3, #2
 80016de:	3302      	adds	r3, #2
 80016e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016e4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80016e6:	697b      	ldr	r3, [r7, #20]
 80016e8:	f003 0303 	and.w	r3, r3, #3
 80016ec:	009b      	lsls	r3, r3, #2
 80016ee:	220f      	movs	r2, #15
 80016f0:	fa02 f303 	lsl.w	r3, r2, r3
 80016f4:	43db      	mvns	r3, r3
 80016f6:	693a      	ldr	r2, [r7, #16]
 80016f8:	4013      	ands	r3, r2
 80016fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001702:	d01f      	beq.n	8001744 <HAL_GPIO_Init+0x1f8>
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	4a4c      	ldr	r2, [pc, #304]	; (8001838 <HAL_GPIO_Init+0x2ec>)
 8001708:	4293      	cmp	r3, r2
 800170a:	d019      	beq.n	8001740 <HAL_GPIO_Init+0x1f4>
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	4a4b      	ldr	r2, [pc, #300]	; (800183c <HAL_GPIO_Init+0x2f0>)
 8001710:	4293      	cmp	r3, r2
 8001712:	d013      	beq.n	800173c <HAL_GPIO_Init+0x1f0>
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	4a4a      	ldr	r2, [pc, #296]	; (8001840 <HAL_GPIO_Init+0x2f4>)
 8001718:	4293      	cmp	r3, r2
 800171a:	d00d      	beq.n	8001738 <HAL_GPIO_Init+0x1ec>
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	4a49      	ldr	r2, [pc, #292]	; (8001844 <HAL_GPIO_Init+0x2f8>)
 8001720:	4293      	cmp	r3, r2
 8001722:	d007      	beq.n	8001734 <HAL_GPIO_Init+0x1e8>
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	4a48      	ldr	r2, [pc, #288]	; (8001848 <HAL_GPIO_Init+0x2fc>)
 8001728:	4293      	cmp	r3, r2
 800172a:	d101      	bne.n	8001730 <HAL_GPIO_Init+0x1e4>
 800172c:	2305      	movs	r3, #5
 800172e:	e00a      	b.n	8001746 <HAL_GPIO_Init+0x1fa>
 8001730:	2306      	movs	r3, #6
 8001732:	e008      	b.n	8001746 <HAL_GPIO_Init+0x1fa>
 8001734:	2304      	movs	r3, #4
 8001736:	e006      	b.n	8001746 <HAL_GPIO_Init+0x1fa>
 8001738:	2303      	movs	r3, #3
 800173a:	e004      	b.n	8001746 <HAL_GPIO_Init+0x1fa>
 800173c:	2302      	movs	r3, #2
 800173e:	e002      	b.n	8001746 <HAL_GPIO_Init+0x1fa>
 8001740:	2301      	movs	r3, #1
 8001742:	e000      	b.n	8001746 <HAL_GPIO_Init+0x1fa>
 8001744:	2300      	movs	r3, #0
 8001746:	697a      	ldr	r2, [r7, #20]
 8001748:	f002 0203 	and.w	r2, r2, #3
 800174c:	0092      	lsls	r2, r2, #2
 800174e:	4093      	lsls	r3, r2
 8001750:	693a      	ldr	r2, [r7, #16]
 8001752:	4313      	orrs	r3, r2
 8001754:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001756:	4937      	ldr	r1, [pc, #220]	; (8001834 <HAL_GPIO_Init+0x2e8>)
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	089b      	lsrs	r3, r3, #2
 800175c:	3302      	adds	r3, #2
 800175e:	693a      	ldr	r2, [r7, #16]
 8001760:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001764:	4b39      	ldr	r3, [pc, #228]	; (800184c <HAL_GPIO_Init+0x300>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	43db      	mvns	r3, r3
 800176e:	693a      	ldr	r2, [r7, #16]
 8001770:	4013      	ands	r3, r2
 8001772:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800177c:	2b00      	cmp	r3, #0
 800177e:	d003      	beq.n	8001788 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001780:	693a      	ldr	r2, [r7, #16]
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	4313      	orrs	r3, r2
 8001786:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001788:	4a30      	ldr	r2, [pc, #192]	; (800184c <HAL_GPIO_Init+0x300>)
 800178a:	693b      	ldr	r3, [r7, #16]
 800178c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800178e:	4b2f      	ldr	r3, [pc, #188]	; (800184c <HAL_GPIO_Init+0x300>)
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	43db      	mvns	r3, r3
 8001798:	693a      	ldr	r2, [r7, #16]
 800179a:	4013      	ands	r3, r2
 800179c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d003      	beq.n	80017b2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80017aa:	693a      	ldr	r2, [r7, #16]
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	4313      	orrs	r3, r2
 80017b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80017b2:	4a26      	ldr	r2, [pc, #152]	; (800184c <HAL_GPIO_Init+0x300>)
 80017b4:	693b      	ldr	r3, [r7, #16]
 80017b6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80017b8:	4b24      	ldr	r3, [pc, #144]	; (800184c <HAL_GPIO_Init+0x300>)
 80017ba:	689b      	ldr	r3, [r3, #8]
 80017bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	43db      	mvns	r3, r3
 80017c2:	693a      	ldr	r2, [r7, #16]
 80017c4:	4013      	ands	r3, r2
 80017c6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d003      	beq.n	80017dc <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80017d4:	693a      	ldr	r2, [r7, #16]
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	4313      	orrs	r3, r2
 80017da:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80017dc:	4a1b      	ldr	r2, [pc, #108]	; (800184c <HAL_GPIO_Init+0x300>)
 80017de:	693b      	ldr	r3, [r7, #16]
 80017e0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80017e2:	4b1a      	ldr	r3, [pc, #104]	; (800184c <HAL_GPIO_Init+0x300>)
 80017e4:	68db      	ldr	r3, [r3, #12]
 80017e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	43db      	mvns	r3, r3
 80017ec:	693a      	ldr	r2, [r7, #16]
 80017ee:	4013      	ands	r3, r2
 80017f0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d003      	beq.n	8001806 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80017fe:	693a      	ldr	r2, [r7, #16]
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	4313      	orrs	r3, r2
 8001804:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001806:	4a11      	ldr	r2, [pc, #68]	; (800184c <HAL_GPIO_Init+0x300>)
 8001808:	693b      	ldr	r3, [r7, #16]
 800180a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800180c:	697b      	ldr	r3, [r7, #20]
 800180e:	3301      	adds	r3, #1
 8001810:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	681a      	ldr	r2, [r3, #0]
 8001816:	697b      	ldr	r3, [r7, #20]
 8001818:	fa22 f303 	lsr.w	r3, r2, r3
 800181c:	2b00      	cmp	r3, #0
 800181e:	f47f ae9d 	bne.w	800155c <HAL_GPIO_Init+0x10>
  }
}
 8001822:	bf00      	nop
 8001824:	371c      	adds	r7, #28
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr
 800182e:	bf00      	nop
 8001830:	40021000 	.word	0x40021000
 8001834:	40010000 	.word	0x40010000
 8001838:	48000400 	.word	0x48000400
 800183c:	48000800 	.word	0x48000800
 8001840:	48000c00 	.word	0x48000c00
 8001844:	48001000 	.word	0x48001000
 8001848:	48001400 	.word	0x48001400
 800184c:	40010400 	.word	0x40010400

08001850 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001850:	b480      	push	{r7}
 8001852:	b083      	sub	sp, #12
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
 8001858:	460b      	mov	r3, r1
 800185a:	807b      	strh	r3, [r7, #2]
 800185c:	4613      	mov	r3, r2
 800185e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001860:	787b      	ldrb	r3, [r7, #1]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d003      	beq.n	800186e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001866:	887a      	ldrh	r2, [r7, #2]
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800186c:	e002      	b.n	8001874 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800186e:	887a      	ldrh	r2, [r7, #2]
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001874:	bf00      	nop
 8001876:	370c      	adds	r7, #12
 8001878:	46bd      	mov	sp, r7
 800187a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187e:	4770      	bx	lr

08001880 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001880:	b480      	push	{r7}
 8001882:	b085      	sub	sp, #20
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
 8001888:	460b      	mov	r3, r1
 800188a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	695b      	ldr	r3, [r3, #20]
 8001890:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001892:	887a      	ldrh	r2, [r7, #2]
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	4013      	ands	r3, r2
 8001898:	041a      	lsls	r2, r3, #16
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	43d9      	mvns	r1, r3
 800189e:	887b      	ldrh	r3, [r7, #2]
 80018a0:	400b      	ands	r3, r1
 80018a2:	431a      	orrs	r2, r3
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	619a      	str	r2, [r3, #24]
}
 80018a8:	bf00      	nop
 80018aa:	3714      	adds	r7, #20
 80018ac:	46bd      	mov	sp, r7
 80018ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b2:	4770      	bx	lr

080018b4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80018b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018b6:	b08b      	sub	sp, #44	; 0x2c
 80018b8:	af06      	add	r7, sp, #24
 80018ba:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d101      	bne.n	80018c6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80018c2:	2301      	movs	r3, #1
 80018c4:	e0d7      	b.n	8001a76 <HAL_PCD_Init+0x1c2>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80018cc:	b2db      	uxtb	r3, r3
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d106      	bne.n	80018e0 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	2200      	movs	r2, #0
 80018d6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80018da:	6878      	ldr	r0, [r7, #4]
 80018dc:	f007 fad0 	bl	8008e80 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	2203      	movs	r2, #3
 80018e4:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4618      	mov	r0, r3
 80018ee:	f003 fc2c 	bl	800514a <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80018f2:	2300      	movs	r3, #0
 80018f4:	73fb      	strb	r3, [r7, #15]
 80018f6:	e04c      	b.n	8001992 <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80018f8:	7bfb      	ldrb	r3, [r7, #15]
 80018fa:	6879      	ldr	r1, [r7, #4]
 80018fc:	1c5a      	adds	r2, r3, #1
 80018fe:	4613      	mov	r3, r2
 8001900:	009b      	lsls	r3, r3, #2
 8001902:	4413      	add	r3, r2
 8001904:	00db      	lsls	r3, r3, #3
 8001906:	440b      	add	r3, r1
 8001908:	3301      	adds	r3, #1
 800190a:	2201      	movs	r2, #1
 800190c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800190e:	7bfb      	ldrb	r3, [r7, #15]
 8001910:	6879      	ldr	r1, [r7, #4]
 8001912:	1c5a      	adds	r2, r3, #1
 8001914:	4613      	mov	r3, r2
 8001916:	009b      	lsls	r3, r3, #2
 8001918:	4413      	add	r3, r2
 800191a:	00db      	lsls	r3, r3, #3
 800191c:	440b      	add	r3, r1
 800191e:	7bfa      	ldrb	r2, [r7, #15]
 8001920:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001922:	7bfa      	ldrb	r2, [r7, #15]
 8001924:	7bfb      	ldrb	r3, [r7, #15]
 8001926:	b298      	uxth	r0, r3
 8001928:	6879      	ldr	r1, [r7, #4]
 800192a:	4613      	mov	r3, r2
 800192c:	009b      	lsls	r3, r3, #2
 800192e:	4413      	add	r3, r2
 8001930:	00db      	lsls	r3, r3, #3
 8001932:	440b      	add	r3, r1
 8001934:	3336      	adds	r3, #54	; 0x36
 8001936:	4602      	mov	r2, r0
 8001938:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800193a:	7bfb      	ldrb	r3, [r7, #15]
 800193c:	6879      	ldr	r1, [r7, #4]
 800193e:	1c5a      	adds	r2, r3, #1
 8001940:	4613      	mov	r3, r2
 8001942:	009b      	lsls	r3, r3, #2
 8001944:	4413      	add	r3, r2
 8001946:	00db      	lsls	r3, r3, #3
 8001948:	440b      	add	r3, r1
 800194a:	3303      	adds	r3, #3
 800194c:	2200      	movs	r2, #0
 800194e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001950:	7bfa      	ldrb	r2, [r7, #15]
 8001952:	6879      	ldr	r1, [r7, #4]
 8001954:	4613      	mov	r3, r2
 8001956:	009b      	lsls	r3, r3, #2
 8001958:	4413      	add	r3, r2
 800195a:	00db      	lsls	r3, r3, #3
 800195c:	440b      	add	r3, r1
 800195e:	3338      	adds	r3, #56	; 0x38
 8001960:	2200      	movs	r2, #0
 8001962:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001964:	7bfa      	ldrb	r2, [r7, #15]
 8001966:	6879      	ldr	r1, [r7, #4]
 8001968:	4613      	mov	r3, r2
 800196a:	009b      	lsls	r3, r3, #2
 800196c:	4413      	add	r3, r2
 800196e:	00db      	lsls	r3, r3, #3
 8001970:	440b      	add	r3, r1
 8001972:	333c      	adds	r3, #60	; 0x3c
 8001974:	2200      	movs	r2, #0
 8001976:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001978:	7bfa      	ldrb	r2, [r7, #15]
 800197a:	6879      	ldr	r1, [r7, #4]
 800197c:	4613      	mov	r3, r2
 800197e:	009b      	lsls	r3, r3, #2
 8001980:	4413      	add	r3, r2
 8001982:	00db      	lsls	r3, r3, #3
 8001984:	440b      	add	r3, r1
 8001986:	3340      	adds	r3, #64	; 0x40
 8001988:	2200      	movs	r2, #0
 800198a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800198c:	7bfb      	ldrb	r3, [r7, #15]
 800198e:	3301      	adds	r3, #1
 8001990:	73fb      	strb	r3, [r7, #15]
 8001992:	7bfa      	ldrb	r2, [r7, #15]
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	429a      	cmp	r2, r3
 800199a:	d3ad      	bcc.n	80018f8 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800199c:	2300      	movs	r3, #0
 800199e:	73fb      	strb	r3, [r7, #15]
 80019a0:	e044      	b.n	8001a2c <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80019a2:	7bfa      	ldrb	r2, [r7, #15]
 80019a4:	6879      	ldr	r1, [r7, #4]
 80019a6:	4613      	mov	r3, r2
 80019a8:	009b      	lsls	r3, r3, #2
 80019aa:	4413      	add	r3, r2
 80019ac:	00db      	lsls	r3, r3, #3
 80019ae:	440b      	add	r3, r1
 80019b0:	f203 1369 	addw	r3, r3, #361	; 0x169
 80019b4:	2200      	movs	r2, #0
 80019b6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80019b8:	7bfa      	ldrb	r2, [r7, #15]
 80019ba:	6879      	ldr	r1, [r7, #4]
 80019bc:	4613      	mov	r3, r2
 80019be:	009b      	lsls	r3, r3, #2
 80019c0:	4413      	add	r3, r2
 80019c2:	00db      	lsls	r3, r3, #3
 80019c4:	440b      	add	r3, r1
 80019c6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80019ca:	7bfa      	ldrb	r2, [r7, #15]
 80019cc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80019ce:	7bfa      	ldrb	r2, [r7, #15]
 80019d0:	6879      	ldr	r1, [r7, #4]
 80019d2:	4613      	mov	r3, r2
 80019d4:	009b      	lsls	r3, r3, #2
 80019d6:	4413      	add	r3, r2
 80019d8:	00db      	lsls	r3, r3, #3
 80019da:	440b      	add	r3, r1
 80019dc:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80019e0:	2200      	movs	r2, #0
 80019e2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80019e4:	7bfa      	ldrb	r2, [r7, #15]
 80019e6:	6879      	ldr	r1, [r7, #4]
 80019e8:	4613      	mov	r3, r2
 80019ea:	009b      	lsls	r3, r3, #2
 80019ec:	4413      	add	r3, r2
 80019ee:	00db      	lsls	r3, r3, #3
 80019f0:	440b      	add	r3, r1
 80019f2:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80019f6:	2200      	movs	r2, #0
 80019f8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80019fa:	7bfa      	ldrb	r2, [r7, #15]
 80019fc:	6879      	ldr	r1, [r7, #4]
 80019fe:	4613      	mov	r3, r2
 8001a00:	009b      	lsls	r3, r3, #2
 8001a02:	4413      	add	r3, r2
 8001a04:	00db      	lsls	r3, r3, #3
 8001a06:	440b      	add	r3, r1
 8001a08:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001a10:	7bfa      	ldrb	r2, [r7, #15]
 8001a12:	6879      	ldr	r1, [r7, #4]
 8001a14:	4613      	mov	r3, r2
 8001a16:	009b      	lsls	r3, r3, #2
 8001a18:	4413      	add	r3, r2
 8001a1a:	00db      	lsls	r3, r3, #3
 8001a1c:	440b      	add	r3, r1
 8001a1e:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001a22:	2200      	movs	r2, #0
 8001a24:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a26:	7bfb      	ldrb	r3, [r7, #15]
 8001a28:	3301      	adds	r3, #1
 8001a2a:	73fb      	strb	r3, [r7, #15]
 8001a2c:	7bfa      	ldrb	r2, [r7, #15]
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	429a      	cmp	r2, r3
 8001a34:	d3b5      	bcc.n	80019a2 <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	603b      	str	r3, [r7, #0]
 8001a3c:	687e      	ldr	r6, [r7, #4]
 8001a3e:	466d      	mov	r5, sp
 8001a40:	f106 0410 	add.w	r4, r6, #16
 8001a44:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a46:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a48:	6823      	ldr	r3, [r4, #0]
 8001a4a:	602b      	str	r3, [r5, #0]
 8001a4c:	1d33      	adds	r3, r6, #4
 8001a4e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001a50:	6838      	ldr	r0, [r7, #0]
 8001a52:	f003 fb95 	bl	8005180 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2200      	movs	r2, #0
 8001a5a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	2201      	movs	r2, #1
 8001a62:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	69db      	ldr	r3, [r3, #28]
 8001a6a:	2b01      	cmp	r3, #1
 8001a6c:	d102      	bne.n	8001a74 <HAL_PCD_Init+0x1c0>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001a6e:	6878      	ldr	r0, [r7, #4]
 8001a70:	f001 fa5e 	bl	8002f30 <HAL_PCDEx_ActivateLPM>
  }
  
  return HAL_OK;
 8001a74:	2300      	movs	r3, #0
}
 8001a76:	4618      	mov	r0, r3
 8001a78:	3714      	adds	r7, #20
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001a7e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001a7e:	b580      	push	{r7, lr}
 8001a80:	b082      	sub	sp, #8
 8001a82:	af00      	add	r7, sp, #0
 8001a84:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001a8c:	2b01      	cmp	r3, #1
 8001a8e:	d101      	bne.n	8001a94 <HAL_PCD_Start+0x16>
 8001a90:	2302      	movs	r3, #2
 8001a92:	e012      	b.n	8001aba <HAL_PCD_Start+0x3c>
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2201      	movs	r2, #1
 8001a98:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f003 fb3b 	bl	800511c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f005 fb27 	bl	80070fe <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001ab8:	2300      	movs	r3, #0
}
 8001aba:	4618      	mov	r0, r3
 8001abc:	3708      	adds	r7, #8
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}

08001ac2 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001ac2:	b580      	push	{r7, lr}
 8001ac4:	b082      	sub	sp, #8
 8001ac6:	af00      	add	r7, sp, #0
 8001ac8:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f005 fb2c 	bl	800712c <USB_ReadInterrupts>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001ada:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001ade:	d102      	bne.n	8001ae6 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001ae0:	6878      	ldr	r0, [r7, #4]
 8001ae2:	f000 fb5b 	bl	800219c <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4618      	mov	r0, r3
 8001aec:	f005 fb1e 	bl	800712c <USB_ReadInterrupts>
 8001af0:	4603      	mov	r3, r0
 8001af2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001af6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001afa:	d112      	bne.n	8001b22 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001b04:	b29a      	uxth	r2, r3
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001b0e:	b292      	uxth	r2, r2
 8001b10:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001b14:	6878      	ldr	r0, [r7, #4]
 8001b16:	f007 fa2e 	bl	8008f76 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001b1a:	2100      	movs	r1, #0
 8001b1c:	6878      	ldr	r0, [r7, #4]
 8001b1e:	f000 f91e 	bl	8001d5e <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4618      	mov	r0, r3
 8001b28:	f005 fb00 	bl	800712c <USB_ReadInterrupts>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b32:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001b36:	d10b      	bne.n	8001b50 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001b40:	b29a      	uxth	r2, r3
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001b4a:	b292      	uxth	r2, r2
 8001b4c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4618      	mov	r0, r3
 8001b56:	f005 fae9 	bl	800712c <USB_ReadInterrupts>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001b60:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001b64:	d10b      	bne.n	8001b7e <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001b6e:	b29a      	uxth	r2, r3
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001b78:	b292      	uxth	r2, r2
 8001b7a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4618      	mov	r0, r3
 8001b84:	f005 fad2 	bl	800712c <USB_ReadInterrupts>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b92:	d133      	bne.n	8001bfc <HAL_PCD_IRQHandler+0x13a>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001b9c:	b29a      	uxth	r2, r3
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f022 0204 	bic.w	r2, r2, #4
 8001ba6:	b292      	uxth	r2, r2
 8001ba8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001bb4:	b29a      	uxth	r2, r3
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f022 0208 	bic.w	r2, r2, #8
 8001bbe:	b292      	uxth	r2, r2
 8001bc0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8001bca:	2b01      	cmp	r3, #1
 8001bcc:	d107      	bne.n	8001bde <HAL_PCD_IRQHandler+0x11c>
    {
      hpcd->LPM_State = LPM_L0;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001bd6:	2100      	movs	r1, #0
 8001bd8:	6878      	ldr	r0, [r7, #4]
 8001bda:	f007 fbc1 	bl	8009360 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001bde:	6878      	ldr	r0, [r7, #4]
 8001be0:	f007 fa02 	bl	8008fe8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001bec:	b29a      	uxth	r2, r3
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001bf6:	b292      	uxth	r2, r2
 8001bf8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4618      	mov	r0, r3
 8001c02:	f005 fa93 	bl	800712c <USB_ReadInterrupts>
 8001c06:	4603      	mov	r3, r0
 8001c08:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c0c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001c10:	d126      	bne.n	8001c60 <HAL_PCD_IRQHandler+0x19e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001c1a:	b29a      	uxth	r2, r3
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f042 0208 	orr.w	r2, r2, #8
 8001c24:	b292      	uxth	r2, r2
 8001c26:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001c32:	b29a      	uxth	r2, r3
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c3c:	b292      	uxth	r2, r2
 8001c3e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001c4a:	b29a      	uxth	r2, r3
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f042 0204 	orr.w	r2, r2, #4
 8001c54:	b292      	uxth	r2, r2
 8001c56:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001c5a:	6878      	ldr	r0, [r7, #4]
 8001c5c:	f007 f9aa 	bl	8008fb4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  /* Handle LPM Interrupt */
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4618      	mov	r0, r3
 8001c66:	f005 fa61 	bl	800712c <USB_ReadInterrupts>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c70:	2b80      	cmp	r3, #128	; 0x80
 8001c72:	d13f      	bne.n	8001cf4 <HAL_PCD_IRQHandler+0x232>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001c7c:	b29a      	uxth	r2, r3
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001c86:	b292      	uxth	r2, r2
 8001c88:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d12b      	bne.n	8001cee <HAL_PCD_IRQHandler+0x22c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001c9e:	b29a      	uxth	r2, r3
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f042 0204 	orr.w	r2, r2, #4
 8001ca8:	b292      	uxth	r2, r2
 8001caa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001cb6:	b29a      	uxth	r2, r3
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f042 0208 	orr.w	r2, r2, #8
 8001cc0:	b292      	uxth	r2, r2
 8001cc2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2201      	movs	r2, #1
 8001cca:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001cd6:	b29b      	uxth	r3, r3
 8001cd8:	089b      	lsrs	r3, r3, #2
 8001cda:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001ce4:	2101      	movs	r1, #1
 8001ce6:	6878      	ldr	r0, [r7, #4]
 8001ce8:	f007 fb3a 	bl	8009360 <HAL_PCDEx_LPM_Callback>
 8001cec:	e002      	b.n	8001cf4 <HAL_PCD_IRQHandler+0x232>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 8001cee:	6878      	ldr	r0, [r7, #4]
 8001cf0:	f007 f960 	bl	8008fb4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f005 fa17 	bl	800712c <USB_ReadInterrupts>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d08:	d10e      	bne.n	8001d28 <HAL_PCD_IRQHandler+0x266>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001d12:	b29a      	uxth	r2, r3
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001d1c:	b292      	uxth	r2, r2
 8001d1e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001d22:	6878      	ldr	r0, [r7, #4]
 8001d24:	f007 f919 	bl	8008f5a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	f005 f9fd 	bl	800712c <USB_ReadInterrupts>
 8001d32:	4603      	mov	r3, r0
 8001d34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d3c:	d10b      	bne.n	8001d56 <HAL_PCD_IRQHandler+0x294>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001d46:	b29a      	uxth	r2, r3
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001d50:	b292      	uxth	r2, r2
 8001d52:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8001d56:	bf00      	nop
 8001d58:	3708      	adds	r7, #8
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}

08001d5e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001d5e:	b580      	push	{r7, lr}
 8001d60:	b082      	sub	sp, #8
 8001d62:	af00      	add	r7, sp, #0
 8001d64:	6078      	str	r0, [r7, #4]
 8001d66:	460b      	mov	r3, r1
 8001d68:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001d70:	2b01      	cmp	r3, #1
 8001d72:	d101      	bne.n	8001d78 <HAL_PCD_SetAddress+0x1a>
 8001d74:	2302      	movs	r3, #2
 8001d76:	e013      	b.n	8001da0 <HAL_PCD_SetAddress+0x42>
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2201      	movs	r2, #1
 8001d7c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	78fa      	ldrb	r2, [r7, #3]
 8001d84:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	78fa      	ldrb	r2, [r7, #3]
 8001d8e:	4611      	mov	r1, r2
 8001d90:	4618      	mov	r0, r3
 8001d92:	f005 f9a0 	bl	80070d6 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2200      	movs	r2, #0
 8001d9a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001d9e:	2300      	movs	r3, #0
}
 8001da0:	4618      	mov	r0, r3
 8001da2:	3708      	adds	r7, #8
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bd80      	pop	{r7, pc}

08001da8 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b084      	sub	sp, #16
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
 8001db0:	4608      	mov	r0, r1
 8001db2:	4611      	mov	r1, r2
 8001db4:	461a      	mov	r2, r3
 8001db6:	4603      	mov	r3, r0
 8001db8:	70fb      	strb	r3, [r7, #3]
 8001dba:	460b      	mov	r3, r1
 8001dbc:	803b      	strh	r3, [r7, #0]
 8001dbe:	4613      	mov	r3, r2
 8001dc0:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001dc6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	da0e      	bge.n	8001dec <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001dce:	78fb      	ldrb	r3, [r7, #3]
 8001dd0:	f003 0307 	and.w	r3, r3, #7
 8001dd4:	1c5a      	adds	r2, r3, #1
 8001dd6:	4613      	mov	r3, r2
 8001dd8:	009b      	lsls	r3, r3, #2
 8001dda:	4413      	add	r3, r2
 8001ddc:	00db      	lsls	r3, r3, #3
 8001dde:	687a      	ldr	r2, [r7, #4]
 8001de0:	4413      	add	r3, r2
 8001de2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	2201      	movs	r2, #1
 8001de8:	705a      	strb	r2, [r3, #1]
 8001dea:	e00e      	b.n	8001e0a <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001dec:	78fb      	ldrb	r3, [r7, #3]
 8001dee:	f003 0207 	and.w	r2, r3, #7
 8001df2:	4613      	mov	r3, r2
 8001df4:	009b      	lsls	r3, r3, #2
 8001df6:	4413      	add	r3, r2
 8001df8:	00db      	lsls	r3, r3, #3
 8001dfa:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001dfe:	687a      	ldr	r2, [r7, #4]
 8001e00:	4413      	add	r3, r2
 8001e02:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	2200      	movs	r2, #0
 8001e08:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001e0a:	78fb      	ldrb	r3, [r7, #3]
 8001e0c:	f003 0307 	and.w	r3, r3, #7
 8001e10:	b2da      	uxtb	r2, r3
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001e16:	883a      	ldrh	r2, [r7, #0]
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	78ba      	ldrb	r2, [r7, #2]
 8001e20:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	785b      	ldrb	r3, [r3, #1]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d004      	beq.n	8001e34 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	781b      	ldrb	r3, [r3, #0]
 8001e2e:	b29a      	uxth	r2, r3
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001e34:	78bb      	ldrb	r3, [r7, #2]
 8001e36:	2b02      	cmp	r3, #2
 8001e38:	d102      	bne.n	8001e40 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001e46:	2b01      	cmp	r3, #1
 8001e48:	d101      	bne.n	8001e4e <HAL_PCD_EP_Open+0xa6>
 8001e4a:	2302      	movs	r3, #2
 8001e4c:	e00e      	b.n	8001e6c <HAL_PCD_EP_Open+0xc4>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2201      	movs	r2, #1
 8001e52:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	68f9      	ldr	r1, [r7, #12]
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f003 f9b1 	bl	80051c4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2200      	movs	r2, #0
 8001e66:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8001e6a:	7afb      	ldrb	r3, [r7, #11]
}
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	3710      	adds	r7, #16
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}

08001e74 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b084      	sub	sp, #16
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
 8001e7c:	460b      	mov	r3, r1
 8001e7e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001e80:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	da0e      	bge.n	8001ea6 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e88:	78fb      	ldrb	r3, [r7, #3]
 8001e8a:	f003 0307 	and.w	r3, r3, #7
 8001e8e:	1c5a      	adds	r2, r3, #1
 8001e90:	4613      	mov	r3, r2
 8001e92:	009b      	lsls	r3, r3, #2
 8001e94:	4413      	add	r3, r2
 8001e96:	00db      	lsls	r3, r3, #3
 8001e98:	687a      	ldr	r2, [r7, #4]
 8001e9a:	4413      	add	r3, r2
 8001e9c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	2201      	movs	r2, #1
 8001ea2:	705a      	strb	r2, [r3, #1]
 8001ea4:	e00e      	b.n	8001ec4 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001ea6:	78fb      	ldrb	r3, [r7, #3]
 8001ea8:	f003 0207 	and.w	r2, r3, #7
 8001eac:	4613      	mov	r3, r2
 8001eae:	009b      	lsls	r3, r3, #2
 8001eb0:	4413      	add	r3, r2
 8001eb2:	00db      	lsls	r3, r3, #3
 8001eb4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001eb8:	687a      	ldr	r2, [r7, #4]
 8001eba:	4413      	add	r3, r2
 8001ebc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001ec4:	78fb      	ldrb	r3, [r7, #3]
 8001ec6:	f003 0307 	and.w	r3, r3, #7
 8001eca:	b2da      	uxtb	r2, r3
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001ed6:	2b01      	cmp	r3, #1
 8001ed8:	d101      	bne.n	8001ede <HAL_PCD_EP_Close+0x6a>
 8001eda:	2302      	movs	r3, #2
 8001edc:	e00e      	b.n	8001efc <HAL_PCD_EP_Close+0x88>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2201      	movs	r2, #1
 8001ee2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	68f9      	ldr	r1, [r7, #12]
 8001eec:	4618      	mov	r0, r3
 8001eee:	f003 fcd7 	bl	80058a0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8001efa:	2300      	movs	r3, #0
}
 8001efc:	4618      	mov	r0, r3
 8001efe:	3710      	adds	r7, #16
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd80      	pop	{r7, pc}

08001f04 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b086      	sub	sp, #24
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	60f8      	str	r0, [r7, #12]
 8001f0c:	607a      	str	r2, [r7, #4]
 8001f0e:	603b      	str	r3, [r7, #0]
 8001f10:	460b      	mov	r3, r1
 8001f12:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f14:	7afb      	ldrb	r3, [r7, #11]
 8001f16:	f003 0207 	and.w	r2, r3, #7
 8001f1a:	4613      	mov	r3, r2
 8001f1c:	009b      	lsls	r3, r3, #2
 8001f1e:	4413      	add	r3, r2
 8001f20:	00db      	lsls	r3, r3, #3
 8001f22:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001f26:	68fa      	ldr	r2, [r7, #12]
 8001f28:	4413      	add	r3, r2
 8001f2a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	687a      	ldr	r2, [r7, #4]
 8001f30:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001f32:	697b      	ldr	r3, [r7, #20]
 8001f34:	683a      	ldr	r2, [r7, #0]
 8001f36:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001f3e:	697b      	ldr	r3, [r7, #20]
 8001f40:	2200      	movs	r2, #0
 8001f42:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f44:	7afb      	ldrb	r3, [r7, #11]
 8001f46:	f003 0307 	and.w	r3, r3, #7
 8001f4a:	b2da      	uxtb	r2, r3
 8001f4c:	697b      	ldr	r3, [r7, #20]
 8001f4e:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001f50:	7afb      	ldrb	r3, [r7, #11]
 8001f52:	f003 0307 	and.w	r3, r3, #7
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d106      	bne.n	8001f68 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	6979      	ldr	r1, [r7, #20]
 8001f60:	4618      	mov	r0, r3
 8001f62:	f003 fe8a 	bl	8005c7a <USB_EPStartXfer>
 8001f66:	e005      	b.n	8001f74 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	6979      	ldr	r1, [r7, #20]
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f003 fe83 	bl	8005c7a <USB_EPStartXfer>
  }

  return HAL_OK;
 8001f74:	2300      	movs	r3, #0
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	3718      	adds	r7, #24
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}

08001f7e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f7e:	b480      	push	{r7}
 8001f80:	b083      	sub	sp, #12
 8001f82:	af00      	add	r7, sp, #0
 8001f84:	6078      	str	r0, [r7, #4]
 8001f86:	460b      	mov	r3, r1
 8001f88:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001f8a:	78fb      	ldrb	r3, [r7, #3]
 8001f8c:	f003 0207 	and.w	r2, r3, #7
 8001f90:	6879      	ldr	r1, [r7, #4]
 8001f92:	4613      	mov	r3, r2
 8001f94:	009b      	lsls	r3, r3, #2
 8001f96:	4413      	add	r3, r2
 8001f98:	00db      	lsls	r3, r3, #3
 8001f9a:	440b      	add	r3, r1
 8001f9c:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8001fa0:	681b      	ldr	r3, [r3, #0]
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	370c      	adds	r7, #12
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fac:	4770      	bx	lr

08001fae <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001fae:	b580      	push	{r7, lr}
 8001fb0:	b086      	sub	sp, #24
 8001fb2:	af00      	add	r7, sp, #0
 8001fb4:	60f8      	str	r0, [r7, #12]
 8001fb6:	607a      	str	r2, [r7, #4]
 8001fb8:	603b      	str	r3, [r7, #0]
 8001fba:	460b      	mov	r3, r1
 8001fbc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001fbe:	7afb      	ldrb	r3, [r7, #11]
 8001fc0:	f003 0307 	and.w	r3, r3, #7
 8001fc4:	1c5a      	adds	r2, r3, #1
 8001fc6:	4613      	mov	r3, r2
 8001fc8:	009b      	lsls	r3, r3, #2
 8001fca:	4413      	add	r3, r2
 8001fcc:	00db      	lsls	r3, r3, #3
 8001fce:	68fa      	ldr	r2, [r7, #12]
 8001fd0:	4413      	add	r3, r2
 8001fd2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001fd4:	697b      	ldr	r3, [r7, #20]
 8001fd6:	687a      	ldr	r2, [r7, #4]
 8001fd8:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001fda:	697b      	ldr	r3, [r7, #20]
 8001fdc:	683a      	ldr	r2, [r7, #0]
 8001fde:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8001fe0:	697b      	ldr	r3, [r7, #20]
 8001fe2:	2201      	movs	r2, #1
 8001fe4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	683a      	ldr	r2, [r7, #0]
 8001fec:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8001fee:	697b      	ldr	r3, [r7, #20]
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001ff4:	697b      	ldr	r3, [r7, #20]
 8001ff6:	2201      	movs	r2, #1
 8001ff8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001ffa:	7afb      	ldrb	r3, [r7, #11]
 8001ffc:	f003 0307 	and.w	r3, r3, #7
 8002000:	b2da      	uxtb	r2, r3
 8002002:	697b      	ldr	r3, [r7, #20]
 8002004:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002006:	7afb      	ldrb	r3, [r7, #11]
 8002008:	f003 0307 	and.w	r3, r3, #7
 800200c:	2b00      	cmp	r3, #0
 800200e:	d106      	bne.n	800201e <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	6979      	ldr	r1, [r7, #20]
 8002016:	4618      	mov	r0, r3
 8002018:	f003 fe2f 	bl	8005c7a <USB_EPStartXfer>
 800201c:	e005      	b.n	800202a <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	6979      	ldr	r1, [r7, #20]
 8002024:	4618      	mov	r0, r3
 8002026:	f003 fe28 	bl	8005c7a <USB_EPStartXfer>
  }

  return HAL_OK;
 800202a:	2300      	movs	r3, #0
}
 800202c:	4618      	mov	r0, r3
 800202e:	3718      	adds	r7, #24
 8002030:	46bd      	mov	sp, r7
 8002032:	bd80      	pop	{r7, pc}

08002034 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b084      	sub	sp, #16
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
 800203c:	460b      	mov	r3, r1
 800203e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002040:	78fb      	ldrb	r3, [r7, #3]
 8002042:	f003 0207 	and.w	r2, r3, #7
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	429a      	cmp	r2, r3
 800204c:	d901      	bls.n	8002052 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800204e:	2301      	movs	r3, #1
 8002050:	e04c      	b.n	80020ec <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002052:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002056:	2b00      	cmp	r3, #0
 8002058:	da0e      	bge.n	8002078 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800205a:	78fb      	ldrb	r3, [r7, #3]
 800205c:	f003 0307 	and.w	r3, r3, #7
 8002060:	1c5a      	adds	r2, r3, #1
 8002062:	4613      	mov	r3, r2
 8002064:	009b      	lsls	r3, r3, #2
 8002066:	4413      	add	r3, r2
 8002068:	00db      	lsls	r3, r3, #3
 800206a:	687a      	ldr	r2, [r7, #4]
 800206c:	4413      	add	r3, r2
 800206e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	2201      	movs	r2, #1
 8002074:	705a      	strb	r2, [r3, #1]
 8002076:	e00c      	b.n	8002092 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002078:	78fa      	ldrb	r2, [r7, #3]
 800207a:	4613      	mov	r3, r2
 800207c:	009b      	lsls	r3, r3, #2
 800207e:	4413      	add	r3, r2
 8002080:	00db      	lsls	r3, r3, #3
 8002082:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002086:	687a      	ldr	r2, [r7, #4]
 8002088:	4413      	add	r3, r2
 800208a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	2200      	movs	r2, #0
 8002090:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	2201      	movs	r2, #1
 8002096:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002098:	78fb      	ldrb	r3, [r7, #3]
 800209a:	f003 0307 	and.w	r3, r3, #7
 800209e:	b2da      	uxtb	r2, r3
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80020aa:	2b01      	cmp	r3, #1
 80020ac:	d101      	bne.n	80020b2 <HAL_PCD_EP_SetStall+0x7e>
 80020ae:	2302      	movs	r3, #2
 80020b0:	e01c      	b.n	80020ec <HAL_PCD_EP_SetStall+0xb8>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2201      	movs	r2, #1
 80020b6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	68f9      	ldr	r1, [r7, #12]
 80020c0:	4618      	mov	r0, r3
 80020c2:	f004 ff09 	bl	8006ed8 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80020c6:	78fb      	ldrb	r3, [r7, #3]
 80020c8:	f003 0307 	and.w	r3, r3, #7
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d108      	bne.n	80020e2 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681a      	ldr	r2, [r3, #0]
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80020da:	4619      	mov	r1, r3
 80020dc:	4610      	mov	r0, r2
 80020de:	f005 f835 	bl	800714c <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2200      	movs	r2, #0
 80020e6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80020ea:	2300      	movs	r3, #0
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	3710      	adds	r7, #16
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}

080020f4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b084      	sub	sp, #16
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
 80020fc:	460b      	mov	r3, r1
 80020fe:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002100:	78fb      	ldrb	r3, [r7, #3]
 8002102:	f003 020f 	and.w	r2, r3, #15
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	429a      	cmp	r2, r3
 800210c:	d901      	bls.n	8002112 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800210e:	2301      	movs	r3, #1
 8002110:	e040      	b.n	8002194 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002112:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002116:	2b00      	cmp	r3, #0
 8002118:	da0e      	bge.n	8002138 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800211a:	78fb      	ldrb	r3, [r7, #3]
 800211c:	f003 0307 	and.w	r3, r3, #7
 8002120:	1c5a      	adds	r2, r3, #1
 8002122:	4613      	mov	r3, r2
 8002124:	009b      	lsls	r3, r3, #2
 8002126:	4413      	add	r3, r2
 8002128:	00db      	lsls	r3, r3, #3
 800212a:	687a      	ldr	r2, [r7, #4]
 800212c:	4413      	add	r3, r2
 800212e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	2201      	movs	r2, #1
 8002134:	705a      	strb	r2, [r3, #1]
 8002136:	e00e      	b.n	8002156 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002138:	78fb      	ldrb	r3, [r7, #3]
 800213a:	f003 0207 	and.w	r2, r3, #7
 800213e:	4613      	mov	r3, r2
 8002140:	009b      	lsls	r3, r3, #2
 8002142:	4413      	add	r3, r2
 8002144:	00db      	lsls	r3, r3, #3
 8002146:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800214a:	687a      	ldr	r2, [r7, #4]
 800214c:	4413      	add	r3, r2
 800214e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	2200      	movs	r2, #0
 8002154:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	2200      	movs	r2, #0
 800215a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800215c:	78fb      	ldrb	r3, [r7, #3]
 800215e:	f003 0307 	and.w	r3, r3, #7
 8002162:	b2da      	uxtb	r2, r3
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800216e:	2b01      	cmp	r3, #1
 8002170:	d101      	bne.n	8002176 <HAL_PCD_EP_ClrStall+0x82>
 8002172:	2302      	movs	r3, #2
 8002174:	e00e      	b.n	8002194 <HAL_PCD_EP_ClrStall+0xa0>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2201      	movs	r2, #1
 800217a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	68f9      	ldr	r1, [r7, #12]
 8002184:	4618      	mov	r0, r3
 8002186:	f004 fef8 	bl	8006f7a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2200      	movs	r2, #0
 800218e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002192:	2300      	movs	r3, #0
}
 8002194:	4618      	mov	r0, r3
 8002196:	3710      	adds	r7, #16
 8002198:	46bd      	mov	sp, r7
 800219a:	bd80      	pop	{r7, pc}

0800219c <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b08e      	sub	sp, #56	; 0x38
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80021a4:	e2d1      	b.n	800274a <PCD_EP_ISR_Handler+0x5ae>
  {
    wIstr = hpcd->Instance->ISTR;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80021ae:	85fb      	strh	r3, [r7, #46]	; 0x2e
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80021b0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80021b2:	b2db      	uxtb	r3, r3
 80021b4:	f003 030f 	and.w	r3, r3, #15
 80021b8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 80021bc:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	f040 8152 	bne.w	800246a <PCD_EP_ISR_Handler+0x2ce>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80021c6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80021c8:	f003 0310 	and.w	r3, r3, #16
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d150      	bne.n	8002272 <PCD_EP_ISR_Handler+0xd6>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	881b      	ldrh	r3, [r3, #0]
 80021d6:	b29b      	uxth	r3, r3
 80021d8:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80021dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021e0:	81fb      	strh	r3, [r7, #14]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681a      	ldr	r2, [r3, #0]
 80021e6:	89fb      	ldrh	r3, [r7, #14]
 80021e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80021ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80021f0:	b29b      	uxth	r3, r3
 80021f2:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	3328      	adds	r3, #40	; 0x28
 80021f8:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002202:	b29b      	uxth	r3, r3
 8002204:	461a      	mov	r2, r3
 8002206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002208:	781b      	ldrb	r3, [r3, #0]
 800220a:	00db      	lsls	r3, r3, #3
 800220c:	4413      	add	r3, r2
 800220e:	687a      	ldr	r2, [r7, #4]
 8002210:	6812      	ldr	r2, [r2, #0]
 8002212:	4413      	add	r3, r2
 8002214:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002218:	881b      	ldrh	r3, [r3, #0]
 800221a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800221e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002220:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002224:	695a      	ldr	r2, [r3, #20]
 8002226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002228:	69db      	ldr	r3, [r3, #28]
 800222a:	441a      	add	r2, r3
 800222c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800222e:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002230:	2100      	movs	r1, #0
 8002232:	6878      	ldr	r0, [r7, #4]
 8002234:	f006 fe77 	bl	8008f26 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800223e:	b2db      	uxtb	r3, r3
 8002240:	2b00      	cmp	r3, #0
 8002242:	f000 8282 	beq.w	800274a <PCD_EP_ISR_Handler+0x5ae>
 8002246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002248:	699b      	ldr	r3, [r3, #24]
 800224a:	2b00      	cmp	r3, #0
 800224c:	f040 827d 	bne.w	800274a <PCD_EP_ISR_Handler+0x5ae>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002256:	b2db      	uxtb	r3, r3
 8002258:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800225c:	b2da      	uxtb	r2, r3
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	b292      	uxth	r2, r2
 8002264:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2200      	movs	r2, #0
 800226c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002270:	e26b      	b.n	800274a <PCD_EP_ISR_Handler+0x5ae>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002278:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	881b      	ldrh	r3, [r3, #0]
 8002280:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002282:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002284:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002288:	2b00      	cmp	r3, #0
 800228a:	d032      	beq.n	80022f2 <PCD_EP_ISR_Handler+0x156>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002294:	b29b      	uxth	r3, r3
 8002296:	461a      	mov	r2, r3
 8002298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800229a:	781b      	ldrb	r3, [r3, #0]
 800229c:	00db      	lsls	r3, r3, #3
 800229e:	4413      	add	r3, r2
 80022a0:	687a      	ldr	r2, [r7, #4]
 80022a2:	6812      	ldr	r2, [r2, #0]
 80022a4:	4413      	add	r3, r2
 80022a6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80022aa:	881b      	ldrh	r3, [r3, #0]
 80022ac:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80022b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b2:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6818      	ldr	r0, [r3, #0]
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 80022be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c0:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80022c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c4:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80022c6:	b29b      	uxth	r3, r3
 80022c8:	f004 ff8d 	bl	80071e6 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	881b      	ldrh	r3, [r3, #0]
 80022d2:	b29a      	uxth	r2, r3
 80022d4:	f640 738f 	movw	r3, #3983	; 0xf8f
 80022d8:	4013      	ands	r3, r2
 80022da:	823b      	strh	r3, [r7, #16]
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	8a3a      	ldrh	r2, [r7, #16]
 80022e2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80022e6:	b292      	uxth	r2, r2
 80022e8:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80022ea:	6878      	ldr	r0, [r7, #4]
 80022ec:	f006 fdee 	bl	8008ecc <HAL_PCD_SetupStageCallback>
 80022f0:	e22b      	b.n	800274a <PCD_EP_ISR_Handler+0x5ae>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80022f2:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	f280 8227 	bge.w	800274a <PCD_EP_ISR_Handler+0x5ae>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	881b      	ldrh	r3, [r3, #0]
 8002302:	b29a      	uxth	r2, r3
 8002304:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002308:	4013      	ands	r3, r2
 800230a:	83bb      	strh	r3, [r7, #28]
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	8bba      	ldrh	r2, [r7, #28]
 8002312:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002316:	b292      	uxth	r2, r2
 8002318:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002322:	b29b      	uxth	r3, r3
 8002324:	461a      	mov	r2, r3
 8002326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002328:	781b      	ldrb	r3, [r3, #0]
 800232a:	00db      	lsls	r3, r3, #3
 800232c:	4413      	add	r3, r2
 800232e:	687a      	ldr	r2, [r7, #4]
 8002330:	6812      	ldr	r2, [r2, #0]
 8002332:	4413      	add	r3, r2
 8002334:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002338:	881b      	ldrh	r3, [r3, #0]
 800233a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800233e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002340:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002344:	69db      	ldr	r3, [r3, #28]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d019      	beq.n	800237e <PCD_EP_ISR_Handler+0x1e2>
 800234a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800234c:	695b      	ldr	r3, [r3, #20]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d015      	beq.n	800237e <PCD_EP_ISR_Handler+0x1e2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6818      	ldr	r0, [r3, #0]
 8002356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002358:	6959      	ldr	r1, [r3, #20]
 800235a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800235c:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800235e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002360:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002362:	b29b      	uxth	r3, r3
 8002364:	f004 ff3f 	bl	80071e6 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800236a:	695a      	ldr	r2, [r3, #20]
 800236c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800236e:	69db      	ldr	r3, [r3, #28]
 8002370:	441a      	add	r2, r3
 8002372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002374:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002376:	2100      	movs	r1, #0
 8002378:	6878      	ldr	r0, [r7, #4]
 800237a:	f006 fdb9 	bl	8008ef0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	61bb      	str	r3, [r7, #24]
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800238c:	b29b      	uxth	r3, r3
 800238e:	461a      	mov	r2, r3
 8002390:	69bb      	ldr	r3, [r7, #24]
 8002392:	4413      	add	r3, r2
 8002394:	61bb      	str	r3, [r7, #24]
 8002396:	69bb      	ldr	r3, [r7, #24]
 8002398:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800239c:	617b      	str	r3, [r7, #20]
 800239e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a0:	691b      	ldr	r3, [r3, #16]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d112      	bne.n	80023cc <PCD_EP_ISR_Handler+0x230>
 80023a6:	697b      	ldr	r3, [r7, #20]
 80023a8:	881b      	ldrh	r3, [r3, #0]
 80023aa:	b29b      	uxth	r3, r3
 80023ac:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80023b0:	b29a      	uxth	r2, r3
 80023b2:	697b      	ldr	r3, [r7, #20]
 80023b4:	801a      	strh	r2, [r3, #0]
 80023b6:	697b      	ldr	r3, [r7, #20]
 80023b8:	881b      	ldrh	r3, [r3, #0]
 80023ba:	b29b      	uxth	r3, r3
 80023bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80023c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80023c4:	b29a      	uxth	r2, r3
 80023c6:	697b      	ldr	r3, [r7, #20]
 80023c8:	801a      	strh	r2, [r3, #0]
 80023ca:	e02f      	b.n	800242c <PCD_EP_ISR_Handler+0x290>
 80023cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ce:	691b      	ldr	r3, [r3, #16]
 80023d0:	2b3e      	cmp	r3, #62	; 0x3e
 80023d2:	d813      	bhi.n	80023fc <PCD_EP_ISR_Handler+0x260>
 80023d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d6:	691b      	ldr	r3, [r3, #16]
 80023d8:	085b      	lsrs	r3, r3, #1
 80023da:	633b      	str	r3, [r7, #48]	; 0x30
 80023dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023de:	691b      	ldr	r3, [r3, #16]
 80023e0:	f003 0301 	and.w	r3, r3, #1
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d002      	beq.n	80023ee <PCD_EP_ISR_Handler+0x252>
 80023e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023ea:	3301      	adds	r3, #1
 80023ec:	633b      	str	r3, [r7, #48]	; 0x30
 80023ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023f0:	b29b      	uxth	r3, r3
 80023f2:	029b      	lsls	r3, r3, #10
 80023f4:	b29a      	uxth	r2, r3
 80023f6:	697b      	ldr	r3, [r7, #20]
 80023f8:	801a      	strh	r2, [r3, #0]
 80023fa:	e017      	b.n	800242c <PCD_EP_ISR_Handler+0x290>
 80023fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023fe:	691b      	ldr	r3, [r3, #16]
 8002400:	095b      	lsrs	r3, r3, #5
 8002402:	633b      	str	r3, [r7, #48]	; 0x30
 8002404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002406:	691b      	ldr	r3, [r3, #16]
 8002408:	f003 031f 	and.w	r3, r3, #31
 800240c:	2b00      	cmp	r3, #0
 800240e:	d102      	bne.n	8002416 <PCD_EP_ISR_Handler+0x27a>
 8002410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002412:	3b01      	subs	r3, #1
 8002414:	633b      	str	r3, [r7, #48]	; 0x30
 8002416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002418:	b29b      	uxth	r3, r3
 800241a:	029b      	lsls	r3, r3, #10
 800241c:	b29b      	uxth	r3, r3
 800241e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002422:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002426:	b29a      	uxth	r2, r3
 8002428:	697b      	ldr	r3, [r7, #20]
 800242a:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	881b      	ldrh	r3, [r3, #0]
 8002432:	b29b      	uxth	r3, r3
 8002434:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002438:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800243c:	827b      	strh	r3, [r7, #18]
 800243e:	8a7b      	ldrh	r3, [r7, #18]
 8002440:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002444:	827b      	strh	r3, [r7, #18]
 8002446:	8a7b      	ldrh	r3, [r7, #18]
 8002448:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800244c:	827b      	strh	r3, [r7, #18]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681a      	ldr	r2, [r3, #0]
 8002452:	8a7b      	ldrh	r3, [r7, #18]
 8002454:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002458:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800245c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002460:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002464:	b29b      	uxth	r3, r3
 8002466:	8013      	strh	r3, [r2, #0]
 8002468:	e16f      	b.n	800274a <PCD_EP_ISR_Handler+0x5ae>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	461a      	mov	r2, r3
 8002470:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002474:	009b      	lsls	r3, r3, #2
 8002476:	4413      	add	r3, r2
 8002478:	881b      	ldrh	r3, [r3, #0]
 800247a:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800247c:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8002480:	2b00      	cmp	r3, #0
 8002482:	f280 80e4 	bge.w	800264e <PCD_EP_ISR_Handler+0x4b2>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	461a      	mov	r2, r3
 800248c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002490:	009b      	lsls	r3, r3, #2
 8002492:	4413      	add	r3, r2
 8002494:	881b      	ldrh	r3, [r3, #0]
 8002496:	b29a      	uxth	r2, r3
 8002498:	f640 738f 	movw	r3, #3983	; 0xf8f
 800249c:	4013      	ands	r3, r2
 800249e:	853b      	strh	r3, [r7, #40]	; 0x28
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	461a      	mov	r2, r3
 80024a6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80024aa:	009b      	lsls	r3, r3, #2
 80024ac:	4413      	add	r3, r2
 80024ae:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80024b0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80024b4:	b292      	uxth	r2, r2
 80024b6:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80024b8:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80024bc:	4613      	mov	r3, r2
 80024be:	009b      	lsls	r3, r3, #2
 80024c0:	4413      	add	r3, r2
 80024c2:	00db      	lsls	r3, r3, #3
 80024c4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80024c8:	687a      	ldr	r2, [r7, #4]
 80024ca:	4413      	add	r3, r2
 80024cc:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80024ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d0:	7b1b      	ldrb	r3, [r3, #12]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d120      	bne.n	8002518 <PCD_EP_ISR_Handler+0x37c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80024de:	b29b      	uxth	r3, r3
 80024e0:	461a      	mov	r2, r3
 80024e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e4:	781b      	ldrb	r3, [r3, #0]
 80024e6:	00db      	lsls	r3, r3, #3
 80024e8:	4413      	add	r3, r2
 80024ea:	687a      	ldr	r2, [r7, #4]
 80024ec:	6812      	ldr	r2, [r2, #0]
 80024ee:	4413      	add	r3, r2
 80024f0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80024f4:	881b      	ldrh	r3, [r3, #0]
 80024f6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80024fa:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 80024fc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80024fe:	2b00      	cmp	r3, #0
 8002500:	f000 8083 	beq.w	800260a <PCD_EP_ISR_Handler+0x46e>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6818      	ldr	r0, [r3, #0]
 8002508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800250a:	6959      	ldr	r1, [r3, #20]
 800250c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800250e:	88da      	ldrh	r2, [r3, #6]
 8002510:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002512:	f004 fe68 	bl	80071e6 <USB_ReadPMA>
 8002516:	e078      	b.n	800260a <PCD_EP_ISR_Handler+0x46e>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800251a:	78db      	ldrb	r3, [r3, #3]
 800251c:	2b02      	cmp	r3, #2
 800251e:	d108      	bne.n	8002532 <PCD_EP_ISR_Handler+0x396>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002520:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002522:	461a      	mov	r2, r3
 8002524:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002526:	6878      	ldr	r0, [r7, #4]
 8002528:	f000 f91d 	bl	8002766 <HAL_PCD_EP_DB_Receive>
 800252c:	4603      	mov	r3, r0
 800252e:	86fb      	strh	r3, [r7, #54]	; 0x36
 8002530:	e06b      	b.n	800260a <PCD_EP_ISR_Handler+0x46e>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	461a      	mov	r2, r3
 8002538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800253a:	781b      	ldrb	r3, [r3, #0]
 800253c:	009b      	lsls	r3, r3, #2
 800253e:	4413      	add	r3, r2
 8002540:	881b      	ldrh	r3, [r3, #0]
 8002542:	b29b      	uxth	r3, r3
 8002544:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002548:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800254c:	847b      	strh	r3, [r7, #34]	; 0x22
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	461a      	mov	r2, r3
 8002554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002556:	781b      	ldrb	r3, [r3, #0]
 8002558:	009b      	lsls	r3, r3, #2
 800255a:	441a      	add	r2, r3
 800255c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800255e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002562:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002566:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800256a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800256e:	b29b      	uxth	r3, r3
 8002570:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	461a      	mov	r2, r3
 8002578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800257a:	781b      	ldrb	r3, [r3, #0]
 800257c:	009b      	lsls	r3, r3, #2
 800257e:	4413      	add	r3, r2
 8002580:	881b      	ldrh	r3, [r3, #0]
 8002582:	b29b      	uxth	r3, r3
 8002584:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002588:	2b00      	cmp	r3, #0
 800258a:	d01f      	beq.n	80025cc <PCD_EP_ISR_Handler+0x430>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002594:	b29b      	uxth	r3, r3
 8002596:	461a      	mov	r2, r3
 8002598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800259a:	781b      	ldrb	r3, [r3, #0]
 800259c:	00db      	lsls	r3, r3, #3
 800259e:	4413      	add	r3, r2
 80025a0:	687a      	ldr	r2, [r7, #4]
 80025a2:	6812      	ldr	r2, [r2, #0]
 80025a4:	4413      	add	r3, r2
 80025a6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80025aa:	881b      	ldrh	r3, [r3, #0]
 80025ac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80025b0:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80025b2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d028      	beq.n	800260a <PCD_EP_ISR_Handler+0x46e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6818      	ldr	r0, [r3, #0]
 80025bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025be:	6959      	ldr	r1, [r3, #20]
 80025c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c2:	891a      	ldrh	r2, [r3, #8]
 80025c4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80025c6:	f004 fe0e 	bl	80071e6 <USB_ReadPMA>
 80025ca:	e01e      	b.n	800260a <PCD_EP_ISR_Handler+0x46e>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025d4:	b29b      	uxth	r3, r3
 80025d6:	461a      	mov	r2, r3
 80025d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025da:	781b      	ldrb	r3, [r3, #0]
 80025dc:	00db      	lsls	r3, r3, #3
 80025de:	4413      	add	r3, r2
 80025e0:	687a      	ldr	r2, [r7, #4]
 80025e2:	6812      	ldr	r2, [r2, #0]
 80025e4:	4413      	add	r3, r2
 80025e6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80025ea:	881b      	ldrh	r3, [r3, #0]
 80025ec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80025f0:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80025f2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d008      	beq.n	800260a <PCD_EP_ISR_Handler+0x46e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6818      	ldr	r0, [r3, #0]
 80025fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025fe:	6959      	ldr	r1, [r3, #20]
 8002600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002602:	895a      	ldrh	r2, [r3, #10]
 8002604:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002606:	f004 fdee 	bl	80071e6 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800260a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800260c:	69da      	ldr	r2, [r3, #28]
 800260e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002610:	441a      	add	r2, r3
 8002612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002614:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002618:	695a      	ldr	r2, [r3, #20]
 800261a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800261c:	441a      	add	r2, r3
 800261e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002620:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002624:	699b      	ldr	r3, [r3, #24]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d004      	beq.n	8002634 <PCD_EP_ISR_Handler+0x498>
 800262a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800262c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800262e:	691b      	ldr	r3, [r3, #16]
 8002630:	429a      	cmp	r2, r3
 8002632:	d206      	bcs.n	8002642 <PCD_EP_ISR_Handler+0x4a6>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002636:	781b      	ldrb	r3, [r3, #0]
 8002638:	4619      	mov	r1, r3
 800263a:	6878      	ldr	r0, [r7, #4]
 800263c:	f006 fc58 	bl	8008ef0 <HAL_PCD_DataOutStageCallback>
 8002640:	e005      	b.n	800264e <PCD_EP_ISR_Handler+0x4b2>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002648:	4618      	mov	r0, r3
 800264a:	f003 fb16 	bl	8005c7a <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800264e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002650:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002654:	2b00      	cmp	r3, #0
 8002656:	d078      	beq.n	800274a <PCD_EP_ISR_Handler+0x5ae>
      {
        ep = &hpcd->IN_ep[epindex];
 8002658:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800265c:	1c5a      	adds	r2, r3, #1
 800265e:	4613      	mov	r3, r2
 8002660:	009b      	lsls	r3, r3, #2
 8002662:	4413      	add	r3, r2
 8002664:	00db      	lsls	r3, r3, #3
 8002666:	687a      	ldr	r2, [r7, #4]
 8002668:	4413      	add	r3, r2
 800266a:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	461a      	mov	r2, r3
 8002672:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002676:	009b      	lsls	r3, r3, #2
 8002678:	4413      	add	r3, r2
 800267a:	881b      	ldrh	r3, [r3, #0]
 800267c:	b29b      	uxth	r3, r3
 800267e:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002682:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002686:	843b      	strh	r3, [r7, #32]
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	461a      	mov	r2, r3
 800268e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002692:	009b      	lsls	r3, r3, #2
 8002694:	441a      	add	r2, r3
 8002696:	8c3b      	ldrh	r3, [r7, #32]
 8002698:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800269c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80026a0:	b29b      	uxth	r3, r3
 80026a2:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 80026a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a6:	78db      	ldrb	r3, [r3, #3]
 80026a8:	2b02      	cmp	r3, #2
 80026aa:	d108      	bne.n	80026be <PCD_EP_ISR_Handler+0x522>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80026ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ae:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 80026b0:	2b02      	cmp	r3, #2
 80026b2:	d144      	bne.n	800273e <PCD_EP_ISR_Handler+0x5a2>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80026b4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80026b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d13f      	bne.n	800273e <PCD_EP_ISR_Handler+0x5a2>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80026c6:	b29b      	uxth	r3, r3
 80026c8:	461a      	mov	r2, r3
 80026ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026cc:	781b      	ldrb	r3, [r3, #0]
 80026ce:	00db      	lsls	r3, r3, #3
 80026d0:	4413      	add	r3, r2
 80026d2:	687a      	ldr	r2, [r7, #4]
 80026d4:	6812      	ldr	r2, [r2, #0]
 80026d6:	4413      	add	r3, r2
 80026d8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80026dc:	881b      	ldrh	r3, [r3, #0]
 80026de:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80026e2:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 80026e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e6:	699a      	ldr	r2, [r3, #24]
 80026e8:	8bfb      	ldrh	r3, [r7, #30]
 80026ea:	429a      	cmp	r2, r3
 80026ec:	d906      	bls.n	80026fc <PCD_EP_ISR_Handler+0x560>
          {
            ep->xfer_len -= TxByteNbre;
 80026ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f0:	699a      	ldr	r2, [r3, #24]
 80026f2:	8bfb      	ldrh	r3, [r7, #30]
 80026f4:	1ad2      	subs	r2, r2, r3
 80026f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f8:	619a      	str	r2, [r3, #24]
 80026fa:	e002      	b.n	8002702 <PCD_EP_ISR_Handler+0x566>
          }
          else
          {
            ep->xfer_len = 0U;
 80026fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026fe:	2200      	movs	r2, #0
 8002700:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8002702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002704:	699b      	ldr	r3, [r3, #24]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d106      	bne.n	8002718 <PCD_EP_ISR_Handler+0x57c>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800270a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800270c:	781b      	ldrb	r3, [r3, #0]
 800270e:	4619      	mov	r1, r3
 8002710:	6878      	ldr	r0, [r7, #4]
 8002712:	f006 fc08 	bl	8008f26 <HAL_PCD_DataInStageCallback>
 8002716:	e018      	b.n	800274a <PCD_EP_ISR_Handler+0x5ae>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8002718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800271a:	695a      	ldr	r2, [r3, #20]
 800271c:	8bfb      	ldrh	r3, [r7, #30]
 800271e:	441a      	add	r2, r3
 8002720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002722:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8002724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002726:	69da      	ldr	r2, [r3, #28]
 8002728:	8bfb      	ldrh	r3, [r7, #30]
 800272a:	441a      	add	r2, r3
 800272c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800272e:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002736:	4618      	mov	r0, r3
 8002738:	f003 fa9f 	bl	8005c7a <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 800273c:	e005      	b.n	800274a <PCD_EP_ISR_Handler+0x5ae>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800273e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002740:	461a      	mov	r2, r3
 8002742:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002744:	6878      	ldr	r0, [r7, #4]
 8002746:	f000 f917 	bl	8002978 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002752:	b29b      	uxth	r3, r3
 8002754:	b21b      	sxth	r3, r3
 8002756:	2b00      	cmp	r3, #0
 8002758:	f6ff ad25 	blt.w	80021a6 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800275c:	2300      	movs	r3, #0
}
 800275e:	4618      	mov	r0, r3
 8002760:	3738      	adds	r7, #56	; 0x38
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}

08002766 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002766:	b580      	push	{r7, lr}
 8002768:	b088      	sub	sp, #32
 800276a:	af00      	add	r7, sp, #0
 800276c:	60f8      	str	r0, [r7, #12]
 800276e:	60b9      	str	r1, [r7, #8]
 8002770:	4613      	mov	r3, r2
 8002772:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002774:	88fb      	ldrh	r3, [r7, #6]
 8002776:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800277a:	2b00      	cmp	r3, #0
 800277c:	d07c      	beq.n	8002878 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002786:	b29b      	uxth	r3, r3
 8002788:	461a      	mov	r2, r3
 800278a:	68bb      	ldr	r3, [r7, #8]
 800278c:	781b      	ldrb	r3, [r3, #0]
 800278e:	00db      	lsls	r3, r3, #3
 8002790:	4413      	add	r3, r2
 8002792:	68fa      	ldr	r2, [r7, #12]
 8002794:	6812      	ldr	r2, [r2, #0]
 8002796:	4413      	add	r3, r2
 8002798:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800279c:	881b      	ldrh	r3, [r3, #0]
 800279e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80027a2:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80027a4:	68bb      	ldr	r3, [r7, #8]
 80027a6:	699a      	ldr	r2, [r3, #24]
 80027a8:	8b7b      	ldrh	r3, [r7, #26]
 80027aa:	429a      	cmp	r2, r3
 80027ac:	d306      	bcc.n	80027bc <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 80027ae:	68bb      	ldr	r3, [r7, #8]
 80027b0:	699a      	ldr	r2, [r3, #24]
 80027b2:	8b7b      	ldrh	r3, [r7, #26]
 80027b4:	1ad2      	subs	r2, r2, r3
 80027b6:	68bb      	ldr	r3, [r7, #8]
 80027b8:	619a      	str	r2, [r3, #24]
 80027ba:	e002      	b.n	80027c2 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 80027bc:	68bb      	ldr	r3, [r7, #8]
 80027be:	2200      	movs	r2, #0
 80027c0:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80027c2:	68bb      	ldr	r3, [r7, #8]
 80027c4:	699b      	ldr	r3, [r3, #24]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d123      	bne.n	8002812 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	461a      	mov	r2, r3
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	781b      	ldrb	r3, [r3, #0]
 80027d4:	009b      	lsls	r3, r3, #2
 80027d6:	4413      	add	r3, r2
 80027d8:	881b      	ldrh	r3, [r3, #0]
 80027da:	b29b      	uxth	r3, r3
 80027dc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80027e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027e4:	833b      	strh	r3, [r7, #24]
 80027e6:	8b3b      	ldrh	r3, [r7, #24]
 80027e8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80027ec:	833b      	strh	r3, [r7, #24]
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	461a      	mov	r2, r3
 80027f4:	68bb      	ldr	r3, [r7, #8]
 80027f6:	781b      	ldrb	r3, [r3, #0]
 80027f8:	009b      	lsls	r3, r3, #2
 80027fa:	441a      	add	r2, r3
 80027fc:	8b3b      	ldrh	r3, [r7, #24]
 80027fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002802:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002806:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800280a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800280e:	b29b      	uxth	r3, r3
 8002810:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002812:	88fb      	ldrh	r3, [r7, #6]
 8002814:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002818:	2b00      	cmp	r3, #0
 800281a:	d01f      	beq.n	800285c <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	461a      	mov	r2, r3
 8002822:	68bb      	ldr	r3, [r7, #8]
 8002824:	781b      	ldrb	r3, [r3, #0]
 8002826:	009b      	lsls	r3, r3, #2
 8002828:	4413      	add	r3, r2
 800282a:	881b      	ldrh	r3, [r3, #0]
 800282c:	b29b      	uxth	r3, r3
 800282e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002832:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002836:	82fb      	strh	r3, [r7, #22]
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	461a      	mov	r2, r3
 800283e:	68bb      	ldr	r3, [r7, #8]
 8002840:	781b      	ldrb	r3, [r3, #0]
 8002842:	009b      	lsls	r3, r3, #2
 8002844:	441a      	add	r2, r3
 8002846:	8afb      	ldrh	r3, [r7, #22]
 8002848:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800284c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002850:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002854:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002858:	b29b      	uxth	r3, r3
 800285a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800285c:	8b7b      	ldrh	r3, [r7, #26]
 800285e:	2b00      	cmp	r3, #0
 8002860:	f000 8085 	beq.w	800296e <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	6818      	ldr	r0, [r3, #0]
 8002868:	68bb      	ldr	r3, [r7, #8]
 800286a:	6959      	ldr	r1, [r3, #20]
 800286c:	68bb      	ldr	r3, [r7, #8]
 800286e:	891a      	ldrh	r2, [r3, #8]
 8002870:	8b7b      	ldrh	r3, [r7, #26]
 8002872:	f004 fcb8 	bl	80071e6 <USB_ReadPMA>
 8002876:	e07a      	b.n	800296e <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002880:	b29b      	uxth	r3, r3
 8002882:	461a      	mov	r2, r3
 8002884:	68bb      	ldr	r3, [r7, #8]
 8002886:	781b      	ldrb	r3, [r3, #0]
 8002888:	00db      	lsls	r3, r3, #3
 800288a:	4413      	add	r3, r2
 800288c:	68fa      	ldr	r2, [r7, #12]
 800288e:	6812      	ldr	r2, [r2, #0]
 8002890:	4413      	add	r3, r2
 8002892:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002896:	881b      	ldrh	r3, [r3, #0]
 8002898:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800289c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800289e:	68bb      	ldr	r3, [r7, #8]
 80028a0:	699a      	ldr	r2, [r3, #24]
 80028a2:	8b7b      	ldrh	r3, [r7, #26]
 80028a4:	429a      	cmp	r2, r3
 80028a6:	d306      	bcc.n	80028b6 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 80028a8:	68bb      	ldr	r3, [r7, #8]
 80028aa:	699a      	ldr	r2, [r3, #24]
 80028ac:	8b7b      	ldrh	r3, [r7, #26]
 80028ae:	1ad2      	subs	r2, r2, r3
 80028b0:	68bb      	ldr	r3, [r7, #8]
 80028b2:	619a      	str	r2, [r3, #24]
 80028b4:	e002      	b.n	80028bc <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 80028b6:	68bb      	ldr	r3, [r7, #8]
 80028b8:	2200      	movs	r2, #0
 80028ba:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80028bc:	68bb      	ldr	r3, [r7, #8]
 80028be:	699b      	ldr	r3, [r3, #24]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d123      	bne.n	800290c <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	461a      	mov	r2, r3
 80028ca:	68bb      	ldr	r3, [r7, #8]
 80028cc:	781b      	ldrb	r3, [r3, #0]
 80028ce:	009b      	lsls	r3, r3, #2
 80028d0:	4413      	add	r3, r2
 80028d2:	881b      	ldrh	r3, [r3, #0]
 80028d4:	b29b      	uxth	r3, r3
 80028d6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80028da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028de:	83fb      	strh	r3, [r7, #30]
 80028e0:	8bfb      	ldrh	r3, [r7, #30]
 80028e2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80028e6:	83fb      	strh	r3, [r7, #30]
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	461a      	mov	r2, r3
 80028ee:	68bb      	ldr	r3, [r7, #8]
 80028f0:	781b      	ldrb	r3, [r3, #0]
 80028f2:	009b      	lsls	r3, r3, #2
 80028f4:	441a      	add	r2, r3
 80028f6:	8bfb      	ldrh	r3, [r7, #30]
 80028f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80028fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002900:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002904:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002908:	b29b      	uxth	r3, r3
 800290a:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800290c:	88fb      	ldrh	r3, [r7, #6]
 800290e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002912:	2b00      	cmp	r3, #0
 8002914:	d11f      	bne.n	8002956 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	461a      	mov	r2, r3
 800291c:	68bb      	ldr	r3, [r7, #8]
 800291e:	781b      	ldrb	r3, [r3, #0]
 8002920:	009b      	lsls	r3, r3, #2
 8002922:	4413      	add	r3, r2
 8002924:	881b      	ldrh	r3, [r3, #0]
 8002926:	b29b      	uxth	r3, r3
 8002928:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800292c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002930:	83bb      	strh	r3, [r7, #28]
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	461a      	mov	r2, r3
 8002938:	68bb      	ldr	r3, [r7, #8]
 800293a:	781b      	ldrb	r3, [r3, #0]
 800293c:	009b      	lsls	r3, r3, #2
 800293e:	441a      	add	r2, r3
 8002940:	8bbb      	ldrh	r3, [r7, #28]
 8002942:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002946:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800294a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800294e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002952:	b29b      	uxth	r3, r3
 8002954:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002956:	8b7b      	ldrh	r3, [r7, #26]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d008      	beq.n	800296e <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	6818      	ldr	r0, [r3, #0]
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	6959      	ldr	r1, [r3, #20]
 8002964:	68bb      	ldr	r3, [r7, #8]
 8002966:	895a      	ldrh	r2, [r3, #10]
 8002968:	8b7b      	ldrh	r3, [r7, #26]
 800296a:	f004 fc3c 	bl	80071e6 <USB_ReadPMA>
    }
  }

  return count;
 800296e:	8b7b      	ldrh	r3, [r7, #26]
}
 8002970:	4618      	mov	r0, r3
 8002972:	3720      	adds	r7, #32
 8002974:	46bd      	mov	sp, r7
 8002976:	bd80      	pop	{r7, pc}

08002978 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b092      	sub	sp, #72	; 0x48
 800297c:	af00      	add	r7, sp, #0
 800297e:	60f8      	str	r0, [r7, #12]
 8002980:	60b9      	str	r1, [r7, #8]
 8002982:	4613      	mov	r3, r2
 8002984:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002986:	88fb      	ldrh	r3, [r7, #6]
 8002988:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800298c:	2b00      	cmp	r3, #0
 800298e:	f000 8130 	beq.w	8002bf2 <HAL_PCD_EP_DB_Transmit+0x27a>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800299a:	b29b      	uxth	r3, r3
 800299c:	461a      	mov	r2, r3
 800299e:	68bb      	ldr	r3, [r7, #8]
 80029a0:	781b      	ldrb	r3, [r3, #0]
 80029a2:	00db      	lsls	r3, r3, #3
 80029a4:	4413      	add	r3, r2
 80029a6:	68fa      	ldr	r2, [r7, #12]
 80029a8:	6812      	ldr	r2, [r2, #0]
 80029aa:	4413      	add	r3, r2
 80029ac:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80029b0:	881b      	ldrh	r3, [r3, #0]
 80029b2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80029b6:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len > TxByteNbre)
 80029b8:	68bb      	ldr	r3, [r7, #8]
 80029ba:	699a      	ldr	r2, [r3, #24]
 80029bc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80029be:	429a      	cmp	r2, r3
 80029c0:	d906      	bls.n	80029d0 <HAL_PCD_EP_DB_Transmit+0x58>
    {
      ep->xfer_len -= TxByteNbre;
 80029c2:	68bb      	ldr	r3, [r7, #8]
 80029c4:	699a      	ldr	r2, [r3, #24]
 80029c6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80029c8:	1ad2      	subs	r2, r2, r3
 80029ca:	68bb      	ldr	r3, [r7, #8]
 80029cc:	619a      	str	r2, [r3, #24]
 80029ce:	e002      	b.n	80029d6 <HAL_PCD_EP_DB_Transmit+0x5e>
    }
    else
    {
      ep->xfer_len = 0U;
 80029d0:	68bb      	ldr	r3, [r7, #8]
 80029d2:	2200      	movs	r2, #0
 80029d4:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80029d6:	68bb      	ldr	r3, [r7, #8]
 80029d8:	699b      	ldr	r3, [r3, #24]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d12c      	bne.n	8002a38 <HAL_PCD_EP_DB_Transmit+0xc0>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80029de:	68bb      	ldr	r3, [r7, #8]
 80029e0:	781b      	ldrb	r3, [r3, #0]
 80029e2:	4619      	mov	r1, r3
 80029e4:	68f8      	ldr	r0, [r7, #12]
 80029e6:	f006 fa9e 	bl	8008f26 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80029ea:	88fb      	ldrh	r3, [r7, #6]
 80029ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	f000 822d 	beq.w	8002e50 <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	461a      	mov	r2, r3
 80029fc:	68bb      	ldr	r3, [r7, #8]
 80029fe:	781b      	ldrb	r3, [r3, #0]
 8002a00:	009b      	lsls	r3, r3, #2
 8002a02:	4413      	add	r3, r2
 8002a04:	881b      	ldrh	r3, [r3, #0]
 8002a06:	b29b      	uxth	r3, r3
 8002a08:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a10:	827b      	strh	r3, [r7, #18]
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	461a      	mov	r2, r3
 8002a18:	68bb      	ldr	r3, [r7, #8]
 8002a1a:	781b      	ldrb	r3, [r3, #0]
 8002a1c:	009b      	lsls	r3, r3, #2
 8002a1e:	441a      	add	r2, r3
 8002a20:	8a7b      	ldrh	r3, [r7, #18]
 8002a22:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002a26:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002a2a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002a2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a32:	b29b      	uxth	r3, r3
 8002a34:	8013      	strh	r3, [r2, #0]
 8002a36:	e20b      	b.n	8002e50 <HAL_PCD_EP_DB_Transmit+0x4d8>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002a38:	88fb      	ldrh	r3, [r7, #6]
 8002a3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d01f      	beq.n	8002a82 <HAL_PCD_EP_DB_Transmit+0x10a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	461a      	mov	r2, r3
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	781b      	ldrb	r3, [r3, #0]
 8002a4c:	009b      	lsls	r3, r3, #2
 8002a4e:	4413      	add	r3, r2
 8002a50:	881b      	ldrh	r3, [r3, #0]
 8002a52:	b29b      	uxth	r3, r3
 8002a54:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a5c:	84bb      	strh	r3, [r7, #36]	; 0x24
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	461a      	mov	r2, r3
 8002a64:	68bb      	ldr	r3, [r7, #8]
 8002a66:	781b      	ldrb	r3, [r3, #0]
 8002a68:	009b      	lsls	r3, r3, #2
 8002a6a:	441a      	add	r2, r3
 8002a6c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002a6e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002a72:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002a76:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002a7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a7e:	b29b      	uxth	r3, r3
 8002a80:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002a82:	68bb      	ldr	r3, [r7, #8]
 8002a84:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002a88:	2b01      	cmp	r3, #1
 8002a8a:	f040 81e1 	bne.w	8002e50 <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        ep->xfer_buff += TxByteNbre;
 8002a8e:	68bb      	ldr	r3, [r7, #8]
 8002a90:	695a      	ldr	r2, [r3, #20]
 8002a92:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002a94:	441a      	add	r2, r3
 8002a96:	68bb      	ldr	r3, [r7, #8]
 8002a98:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002a9a:	68bb      	ldr	r3, [r7, #8]
 8002a9c:	69da      	ldr	r2, [r3, #28]
 8002a9e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002aa0:	441a      	add	r2, r3
 8002aa2:	68bb      	ldr	r3, [r7, #8]
 8002aa4:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002aa6:	68bb      	ldr	r3, [r7, #8]
 8002aa8:	6a1a      	ldr	r2, [r3, #32]
 8002aaa:	68bb      	ldr	r3, [r7, #8]
 8002aac:	691b      	ldr	r3, [r3, #16]
 8002aae:	429a      	cmp	r2, r3
 8002ab0:	d309      	bcc.n	8002ac6 <HAL_PCD_EP_DB_Transmit+0x14e>
        {
          len = ep->maxpacket;
 8002ab2:	68bb      	ldr	r3, [r7, #8]
 8002ab4:	691b      	ldr	r3, [r3, #16]
 8002ab6:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 8002ab8:	68bb      	ldr	r3, [r7, #8]
 8002aba:	6a1a      	ldr	r2, [r3, #32]
 8002abc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002abe:	1ad2      	subs	r2, r2, r3
 8002ac0:	68bb      	ldr	r3, [r7, #8]
 8002ac2:	621a      	str	r2, [r3, #32]
 8002ac4:	e014      	b.n	8002af0 <HAL_PCD_EP_DB_Transmit+0x178>
        }
        else if (ep->xfer_len_db == 0U)
 8002ac6:	68bb      	ldr	r3, [r7, #8]
 8002ac8:	6a1b      	ldr	r3, [r3, #32]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d106      	bne.n	8002adc <HAL_PCD_EP_DB_Transmit+0x164>
        {
          len = TxByteNbre;
 8002ace:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002ad0:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 8002ad2:	68bb      	ldr	r3, [r7, #8]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002ada:	e009      	b.n	8002af0 <HAL_PCD_EP_DB_Transmit+0x178>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002adc:	68bb      	ldr	r3, [r7, #8]
 8002ade:	2200      	movs	r2, #0
 8002ae0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8002ae4:	68bb      	ldr	r3, [r7, #8]
 8002ae6:	6a1b      	ldr	r3, [r3, #32]
 8002ae8:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 8002aea:	68bb      	ldr	r3, [r7, #8]
 8002aec:	2200      	movs	r2, #0
 8002aee:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002af0:	68bb      	ldr	r3, [r7, #8]
 8002af2:	785b      	ldrb	r3, [r3, #1]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d155      	bne.n	8002ba4 <HAL_PCD_EP_DB_Transmit+0x22c>
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	61bb      	str	r3, [r7, #24]
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b06:	b29b      	uxth	r3, r3
 8002b08:	461a      	mov	r2, r3
 8002b0a:	69bb      	ldr	r3, [r7, #24]
 8002b0c:	4413      	add	r3, r2
 8002b0e:	61bb      	str	r3, [r7, #24]
 8002b10:	68bb      	ldr	r3, [r7, #8]
 8002b12:	781b      	ldrb	r3, [r3, #0]
 8002b14:	00da      	lsls	r2, r3, #3
 8002b16:	69bb      	ldr	r3, [r7, #24]
 8002b18:	4413      	add	r3, r2
 8002b1a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002b1e:	617b      	str	r3, [r7, #20]
 8002b20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d112      	bne.n	8002b4c <HAL_PCD_EP_DB_Transmit+0x1d4>
 8002b26:	697b      	ldr	r3, [r7, #20]
 8002b28:	881b      	ldrh	r3, [r3, #0]
 8002b2a:	b29b      	uxth	r3, r3
 8002b2c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002b30:	b29a      	uxth	r2, r3
 8002b32:	697b      	ldr	r3, [r7, #20]
 8002b34:	801a      	strh	r2, [r3, #0]
 8002b36:	697b      	ldr	r3, [r7, #20]
 8002b38:	881b      	ldrh	r3, [r3, #0]
 8002b3a:	b29b      	uxth	r3, r3
 8002b3c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b40:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b44:	b29a      	uxth	r2, r3
 8002b46:	697b      	ldr	r3, [r7, #20]
 8002b48:	801a      	strh	r2, [r3, #0]
 8002b4a:	e047      	b.n	8002bdc <HAL_PCD_EP_DB_Transmit+0x264>
 8002b4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b4e:	2b3e      	cmp	r3, #62	; 0x3e
 8002b50:	d811      	bhi.n	8002b76 <HAL_PCD_EP_DB_Transmit+0x1fe>
 8002b52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b54:	085b      	lsrs	r3, r3, #1
 8002b56:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b5a:	f003 0301 	and.w	r3, r3, #1
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d002      	beq.n	8002b68 <HAL_PCD_EP_DB_Transmit+0x1f0>
 8002b62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b64:	3301      	adds	r3, #1
 8002b66:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b6a:	b29b      	uxth	r3, r3
 8002b6c:	029b      	lsls	r3, r3, #10
 8002b6e:	b29a      	uxth	r2, r3
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	801a      	strh	r2, [r3, #0]
 8002b74:	e032      	b.n	8002bdc <HAL_PCD_EP_DB_Transmit+0x264>
 8002b76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b78:	095b      	lsrs	r3, r3, #5
 8002b7a:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b7e:	f003 031f 	and.w	r3, r3, #31
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d102      	bne.n	8002b8c <HAL_PCD_EP_DB_Transmit+0x214>
 8002b86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b88:	3b01      	subs	r3, #1
 8002b8a:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b8e:	b29b      	uxth	r3, r3
 8002b90:	029b      	lsls	r3, r3, #10
 8002b92:	b29b      	uxth	r3, r3
 8002b94:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b98:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b9c:	b29a      	uxth	r2, r3
 8002b9e:	697b      	ldr	r3, [r7, #20]
 8002ba0:	801a      	strh	r2, [r3, #0]
 8002ba2:	e01b      	b.n	8002bdc <HAL_PCD_EP_DB_Transmit+0x264>
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	785b      	ldrb	r3, [r3, #1]
 8002ba8:	2b01      	cmp	r3, #1
 8002baa:	d117      	bne.n	8002bdc <HAL_PCD_EP_DB_Transmit+0x264>
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	623b      	str	r3, [r7, #32]
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002bba:	b29b      	uxth	r3, r3
 8002bbc:	461a      	mov	r2, r3
 8002bbe:	6a3b      	ldr	r3, [r7, #32]
 8002bc0:	4413      	add	r3, r2
 8002bc2:	623b      	str	r3, [r7, #32]
 8002bc4:	68bb      	ldr	r3, [r7, #8]
 8002bc6:	781b      	ldrb	r3, [r3, #0]
 8002bc8:	00da      	lsls	r2, r3, #3
 8002bca:	6a3b      	ldr	r3, [r7, #32]
 8002bcc:	4413      	add	r3, r2
 8002bce:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002bd2:	61fb      	str	r3, [r7, #28]
 8002bd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bd6:	b29a      	uxth	r2, r3
 8002bd8:	69fb      	ldr	r3, [r7, #28]
 8002bda:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	6818      	ldr	r0, [r3, #0]
 8002be0:	68bb      	ldr	r3, [r7, #8]
 8002be2:	6959      	ldr	r1, [r3, #20]
 8002be4:	68bb      	ldr	r3, [r7, #8]
 8002be6:	891a      	ldrh	r2, [r3, #8]
 8002be8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bea:	b29b      	uxth	r3, r3
 8002bec:	f004 faba 	bl	8007164 <USB_WritePMA>
 8002bf0:	e12e      	b.n	8002e50 <HAL_PCD_EP_DB_Transmit+0x4d8>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002bfa:	b29b      	uxth	r3, r3
 8002bfc:	461a      	mov	r2, r3
 8002bfe:	68bb      	ldr	r3, [r7, #8]
 8002c00:	781b      	ldrb	r3, [r3, #0]
 8002c02:	00db      	lsls	r3, r3, #3
 8002c04:	4413      	add	r3, r2
 8002c06:	68fa      	ldr	r2, [r7, #12]
 8002c08:	6812      	ldr	r2, [r2, #0]
 8002c0a:	4413      	add	r3, r2
 8002c0c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002c10:	881b      	ldrh	r3, [r3, #0]
 8002c12:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c16:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len >= TxByteNbre)
 8002c18:	68bb      	ldr	r3, [r7, #8]
 8002c1a:	699a      	ldr	r2, [r3, #24]
 8002c1c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002c1e:	429a      	cmp	r2, r3
 8002c20:	d306      	bcc.n	8002c30 <HAL_PCD_EP_DB_Transmit+0x2b8>
    {
      ep->xfer_len -= TxByteNbre;
 8002c22:	68bb      	ldr	r3, [r7, #8]
 8002c24:	699a      	ldr	r2, [r3, #24]
 8002c26:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002c28:	1ad2      	subs	r2, r2, r3
 8002c2a:	68bb      	ldr	r3, [r7, #8]
 8002c2c:	619a      	str	r2, [r3, #24]
 8002c2e:	e002      	b.n	8002c36 <HAL_PCD_EP_DB_Transmit+0x2be>
    }
    else
    {
      ep->xfer_len = 0U;
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	2200      	movs	r2, #0
 8002c34:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002c36:	68bb      	ldr	r3, [r7, #8]
 8002c38:	699b      	ldr	r3, [r3, #24]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d12c      	bne.n	8002c98 <HAL_PCD_EP_DB_Transmit+0x320>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002c3e:	68bb      	ldr	r3, [r7, #8]
 8002c40:	781b      	ldrb	r3, [r3, #0]
 8002c42:	4619      	mov	r1, r3
 8002c44:	68f8      	ldr	r0, [r7, #12]
 8002c46:	f006 f96e 	bl	8008f26 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002c4a:	88fb      	ldrh	r3, [r7, #6]
 8002c4c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	f040 80fd 	bne.w	8002e50 <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	461a      	mov	r2, r3
 8002c5c:	68bb      	ldr	r3, [r7, #8]
 8002c5e:	781b      	ldrb	r3, [r3, #0]
 8002c60:	009b      	lsls	r3, r3, #2
 8002c62:	4413      	add	r3, r2
 8002c64:	881b      	ldrh	r3, [r3, #0]
 8002c66:	b29b      	uxth	r3, r3
 8002c68:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c70:	84fb      	strh	r3, [r7, #38]	; 0x26
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	461a      	mov	r2, r3
 8002c78:	68bb      	ldr	r3, [r7, #8]
 8002c7a:	781b      	ldrb	r3, [r3, #0]
 8002c7c:	009b      	lsls	r3, r3, #2
 8002c7e:	441a      	add	r2, r3
 8002c80:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002c82:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002c86:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002c8a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002c8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c92:	b29b      	uxth	r3, r3
 8002c94:	8013      	strh	r3, [r2, #0]
 8002c96:	e0db      	b.n	8002e50 <HAL_PCD_EP_DB_Transmit+0x4d8>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002c98:	88fb      	ldrh	r3, [r7, #6]
 8002c9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d11f      	bne.n	8002ce2 <HAL_PCD_EP_DB_Transmit+0x36a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	461a      	mov	r2, r3
 8002ca8:	68bb      	ldr	r3, [r7, #8]
 8002caa:	781b      	ldrb	r3, [r3, #0]
 8002cac:	009b      	lsls	r3, r3, #2
 8002cae:	4413      	add	r3, r2
 8002cb0:	881b      	ldrh	r3, [r3, #0]
 8002cb2:	b29b      	uxth	r3, r3
 8002cb4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002cb8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cbc:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	461a      	mov	r2, r3
 8002cc4:	68bb      	ldr	r3, [r7, #8]
 8002cc6:	781b      	ldrb	r3, [r3, #0]
 8002cc8:	009b      	lsls	r3, r3, #2
 8002cca:	441a      	add	r2, r3
 8002ccc:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8002cce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002cd2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002cd6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002cda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002cde:	b29b      	uxth	r3, r3
 8002ce0:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002ce2:	68bb      	ldr	r3, [r7, #8]
 8002ce4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002ce8:	2b01      	cmp	r3, #1
 8002cea:	f040 80b1 	bne.w	8002e50 <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        ep->xfer_buff += TxByteNbre;
 8002cee:	68bb      	ldr	r3, [r7, #8]
 8002cf0:	695a      	ldr	r2, [r3, #20]
 8002cf2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002cf4:	441a      	add	r2, r3
 8002cf6:	68bb      	ldr	r3, [r7, #8]
 8002cf8:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002cfa:	68bb      	ldr	r3, [r7, #8]
 8002cfc:	69da      	ldr	r2, [r3, #28]
 8002cfe:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002d00:	441a      	add	r2, r3
 8002d02:	68bb      	ldr	r3, [r7, #8]
 8002d04:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002d06:	68bb      	ldr	r3, [r7, #8]
 8002d08:	6a1a      	ldr	r2, [r3, #32]
 8002d0a:	68bb      	ldr	r3, [r7, #8]
 8002d0c:	691b      	ldr	r3, [r3, #16]
 8002d0e:	429a      	cmp	r2, r3
 8002d10:	d309      	bcc.n	8002d26 <HAL_PCD_EP_DB_Transmit+0x3ae>
        {
          len = ep->maxpacket;
 8002d12:	68bb      	ldr	r3, [r7, #8]
 8002d14:	691b      	ldr	r3, [r3, #16]
 8002d16:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 8002d18:	68bb      	ldr	r3, [r7, #8]
 8002d1a:	6a1a      	ldr	r2, [r3, #32]
 8002d1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d1e:	1ad2      	subs	r2, r2, r3
 8002d20:	68bb      	ldr	r3, [r7, #8]
 8002d22:	621a      	str	r2, [r3, #32]
 8002d24:	e014      	b.n	8002d50 <HAL_PCD_EP_DB_Transmit+0x3d8>
        }
        else if (ep->xfer_len_db == 0U)
 8002d26:	68bb      	ldr	r3, [r7, #8]
 8002d28:	6a1b      	ldr	r3, [r3, #32]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d106      	bne.n	8002d3c <HAL_PCD_EP_DB_Transmit+0x3c4>
        {
          len = TxByteNbre;
 8002d2e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002d30:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 8002d32:	68bb      	ldr	r3, [r7, #8]
 8002d34:	2200      	movs	r2, #0
 8002d36:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002d3a:	e009      	b.n	8002d50 <HAL_PCD_EP_DB_Transmit+0x3d8>
        }
        else
        {
          len = ep->xfer_len_db;
 8002d3c:	68bb      	ldr	r3, [r7, #8]
 8002d3e:	6a1b      	ldr	r3, [r3, #32]
 8002d40:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 8002d42:	68bb      	ldr	r3, [r7, #8]
 8002d44:	2200      	movs	r2, #0
 8002d46:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	637b      	str	r3, [r7, #52]	; 0x34
 8002d56:	68bb      	ldr	r3, [r7, #8]
 8002d58:	785b      	ldrb	r3, [r3, #1]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d155      	bne.n	8002e0a <HAL_PCD_EP_DB_Transmit+0x492>
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	647b      	str	r3, [r7, #68]	; 0x44
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d6c:	b29b      	uxth	r3, r3
 8002d6e:	461a      	mov	r2, r3
 8002d70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d72:	4413      	add	r3, r2
 8002d74:	647b      	str	r3, [r7, #68]	; 0x44
 8002d76:	68bb      	ldr	r3, [r7, #8]
 8002d78:	781b      	ldrb	r3, [r3, #0]
 8002d7a:	00da      	lsls	r2, r3, #3
 8002d7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d7e:	4413      	add	r3, r2
 8002d80:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002d84:	643b      	str	r3, [r7, #64]	; 0x40
 8002d86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d112      	bne.n	8002db2 <HAL_PCD_EP_DB_Transmit+0x43a>
 8002d8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d8e:	881b      	ldrh	r3, [r3, #0]
 8002d90:	b29b      	uxth	r3, r3
 8002d92:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002d96:	b29a      	uxth	r2, r3
 8002d98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d9a:	801a      	strh	r2, [r3, #0]
 8002d9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d9e:	881b      	ldrh	r3, [r3, #0]
 8002da0:	b29b      	uxth	r3, r3
 8002da2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002da6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002daa:	b29a      	uxth	r2, r3
 8002dac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002dae:	801a      	strh	r2, [r3, #0]
 8002db0:	e044      	b.n	8002e3c <HAL_PCD_EP_DB_Transmit+0x4c4>
 8002db2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002db4:	2b3e      	cmp	r3, #62	; 0x3e
 8002db6:	d811      	bhi.n	8002ddc <HAL_PCD_EP_DB_Transmit+0x464>
 8002db8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dba:	085b      	lsrs	r3, r3, #1
 8002dbc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002dbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dc0:	f003 0301 	and.w	r3, r3, #1
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d002      	beq.n	8002dce <HAL_PCD_EP_DB_Transmit+0x456>
 8002dc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002dca:	3301      	adds	r3, #1
 8002dcc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002dce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002dd0:	b29b      	uxth	r3, r3
 8002dd2:	029b      	lsls	r3, r3, #10
 8002dd4:	b29a      	uxth	r2, r3
 8002dd6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002dd8:	801a      	strh	r2, [r3, #0]
 8002dda:	e02f      	b.n	8002e3c <HAL_PCD_EP_DB_Transmit+0x4c4>
 8002ddc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dde:	095b      	lsrs	r3, r3, #5
 8002de0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002de2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002de4:	f003 031f 	and.w	r3, r3, #31
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d102      	bne.n	8002df2 <HAL_PCD_EP_DB_Transmit+0x47a>
 8002dec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002dee:	3b01      	subs	r3, #1
 8002df0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002df2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002df4:	b29b      	uxth	r3, r3
 8002df6:	029b      	lsls	r3, r3, #10
 8002df8:	b29b      	uxth	r3, r3
 8002dfa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002dfe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002e02:	b29a      	uxth	r2, r3
 8002e04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e06:	801a      	strh	r2, [r3, #0]
 8002e08:	e018      	b.n	8002e3c <HAL_PCD_EP_DB_Transmit+0x4c4>
 8002e0a:	68bb      	ldr	r3, [r7, #8]
 8002e0c:	785b      	ldrb	r3, [r3, #1]
 8002e0e:	2b01      	cmp	r3, #1
 8002e10:	d114      	bne.n	8002e3c <HAL_PCD_EP_DB_Transmit+0x4c4>
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e1a:	b29b      	uxth	r3, r3
 8002e1c:	461a      	mov	r2, r3
 8002e1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e20:	4413      	add	r3, r2
 8002e22:	637b      	str	r3, [r7, #52]	; 0x34
 8002e24:	68bb      	ldr	r3, [r7, #8]
 8002e26:	781b      	ldrb	r3, [r3, #0]
 8002e28:	00da      	lsls	r2, r3, #3
 8002e2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e2c:	4413      	add	r3, r2
 8002e2e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002e32:	633b      	str	r3, [r7, #48]	; 0x30
 8002e34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e36:	b29a      	uxth	r2, r3
 8002e38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e3a:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	6818      	ldr	r0, [r3, #0]
 8002e40:	68bb      	ldr	r3, [r7, #8]
 8002e42:	6959      	ldr	r1, [r3, #20]
 8002e44:	68bb      	ldr	r3, [r7, #8]
 8002e46:	895a      	ldrh	r2, [r3, #10]
 8002e48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e4a:	b29b      	uxth	r3, r3
 8002e4c:	f004 f98a 	bl	8007164 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	461a      	mov	r2, r3
 8002e56:	68bb      	ldr	r3, [r7, #8]
 8002e58:	781b      	ldrb	r3, [r3, #0]
 8002e5a:	009b      	lsls	r3, r3, #2
 8002e5c:	4413      	add	r3, r2
 8002e5e:	881b      	ldrh	r3, [r3, #0]
 8002e60:	b29b      	uxth	r3, r3
 8002e62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e66:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e6a:	823b      	strh	r3, [r7, #16]
 8002e6c:	8a3b      	ldrh	r3, [r7, #16]
 8002e6e:	f083 0310 	eor.w	r3, r3, #16
 8002e72:	823b      	strh	r3, [r7, #16]
 8002e74:	8a3b      	ldrh	r3, [r7, #16]
 8002e76:	f083 0320 	eor.w	r3, r3, #32
 8002e7a:	823b      	strh	r3, [r7, #16]
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	461a      	mov	r2, r3
 8002e82:	68bb      	ldr	r3, [r7, #8]
 8002e84:	781b      	ldrb	r3, [r3, #0]
 8002e86:	009b      	lsls	r3, r3, #2
 8002e88:	441a      	add	r2, r3
 8002e8a:	8a3b      	ldrh	r3, [r7, #16]
 8002e8c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002e90:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002e94:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e9c:	b29b      	uxth	r3, r3
 8002e9e:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002ea0:	2300      	movs	r3, #0
}
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	3748      	adds	r7, #72	; 0x48
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bd80      	pop	{r7, pc}

08002eaa <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 8002eaa:	b480      	push	{r7}
 8002eac:	b087      	sub	sp, #28
 8002eae:	af00      	add	r7, sp, #0
 8002eb0:	60f8      	str	r0, [r7, #12]
 8002eb2:	607b      	str	r3, [r7, #4]
 8002eb4:	460b      	mov	r3, r1
 8002eb6:	817b      	strh	r3, [r7, #10]
 8002eb8:	4613      	mov	r3, r2
 8002eba:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002ebc:	897b      	ldrh	r3, [r7, #10]
 8002ebe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ec2:	b29b      	uxth	r3, r3
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d00b      	beq.n	8002ee0 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ec8:	897b      	ldrh	r3, [r7, #10]
 8002eca:	f003 0307 	and.w	r3, r3, #7
 8002ece:	1c5a      	adds	r2, r3, #1
 8002ed0:	4613      	mov	r3, r2
 8002ed2:	009b      	lsls	r3, r3, #2
 8002ed4:	4413      	add	r3, r2
 8002ed6:	00db      	lsls	r3, r3, #3
 8002ed8:	68fa      	ldr	r2, [r7, #12]
 8002eda:	4413      	add	r3, r2
 8002edc:	617b      	str	r3, [r7, #20]
 8002ede:	e009      	b.n	8002ef4 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002ee0:	897a      	ldrh	r2, [r7, #10]
 8002ee2:	4613      	mov	r3, r2
 8002ee4:	009b      	lsls	r3, r3, #2
 8002ee6:	4413      	add	r3, r2
 8002ee8:	00db      	lsls	r3, r3, #3
 8002eea:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002eee:	68fa      	ldr	r2, [r7, #12]
 8002ef0:	4413      	add	r3, r2
 8002ef2:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002ef4:	893b      	ldrh	r3, [r7, #8]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d107      	bne.n	8002f0a <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002efa:	697b      	ldr	r3, [r7, #20]
 8002efc:	2200      	movs	r2, #0
 8002efe:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	b29a      	uxth	r2, r3
 8002f04:	697b      	ldr	r3, [r7, #20]
 8002f06:	80da      	strh	r2, [r3, #6]
 8002f08:	e00b      	b.n	8002f22 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002f0a:	697b      	ldr	r3, [r7, #20]
 8002f0c:	2201      	movs	r2, #1
 8002f0e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	b29a      	uxth	r2, r3
 8002f14:	697b      	ldr	r3, [r7, #20]
 8002f16:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	0c1b      	lsrs	r3, r3, #16
 8002f1c:	b29a      	uxth	r2, r3
 8002f1e:	697b      	ldr	r3, [r7, #20]
 8002f20:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8002f22:	2300      	movs	r3, #0
}
 8002f24:	4618      	mov	r0, r3
 8002f26:	371c      	adds	r7, #28
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2e:	4770      	bx	lr

08002f30 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002f30:	b480      	push	{r7}
 8002f32:	b085      	sub	sp, #20
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2201      	movs	r2, #1
 8002f42:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2200      	movs	r2, #0
 8002f4a:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002f54:	b29b      	uxth	r3, r3
 8002f56:	f043 0301 	orr.w	r3, r3, #1
 8002f5a:	b29a      	uxth	r2, r3
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002f68:	b29b      	uxth	r3, r3
 8002f6a:	f043 0302 	orr.w	r3, r3, #2
 8002f6e:	b29a      	uxth	r2, r3
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8002f76:	2300      	movs	r3, #0
}
 8002f78:	4618      	mov	r0, r3
 8002f7a:	3714      	adds	r7, #20
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f82:	4770      	bx	lr

08002f84 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002f84:	b480      	push	{r7}
 8002f86:	b085      	sub	sp, #20
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d141      	bne.n	8003016 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002f92:	4b4b      	ldr	r3, [pc, #300]	; (80030c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002f9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f9e:	d131      	bne.n	8003004 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002fa0:	4b47      	ldr	r3, [pc, #284]	; (80030c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fa2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002fa6:	4a46      	ldr	r2, [pc, #280]	; (80030c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fa8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002fac:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002fb0:	4b43      	ldr	r3, [pc, #268]	; (80030c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002fb8:	4a41      	ldr	r2, [pc, #260]	; (80030c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002fbe:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002fc0:	4b40      	ldr	r3, [pc, #256]	; (80030c4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	2232      	movs	r2, #50	; 0x32
 8002fc6:	fb02 f303 	mul.w	r3, r2, r3
 8002fca:	4a3f      	ldr	r2, [pc, #252]	; (80030c8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002fcc:	fba2 2303 	umull	r2, r3, r2, r3
 8002fd0:	0c9b      	lsrs	r3, r3, #18
 8002fd2:	3301      	adds	r3, #1
 8002fd4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002fd6:	e002      	b.n	8002fde <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	3b01      	subs	r3, #1
 8002fdc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002fde:	4b38      	ldr	r3, [pc, #224]	; (80030c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fe0:	695b      	ldr	r3, [r3, #20]
 8002fe2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fe6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fea:	d102      	bne.n	8002ff2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d1f2      	bne.n	8002fd8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002ff2:	4b33      	ldr	r3, [pc, #204]	; (80030c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ff4:	695b      	ldr	r3, [r3, #20]
 8002ff6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ffa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ffe:	d158      	bne.n	80030b2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003000:	2303      	movs	r3, #3
 8003002:	e057      	b.n	80030b4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003004:	4b2e      	ldr	r3, [pc, #184]	; (80030c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003006:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800300a:	4a2d      	ldr	r2, [pc, #180]	; (80030c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800300c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003010:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003014:	e04d      	b.n	80030b2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800301c:	d141      	bne.n	80030a2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800301e:	4b28      	ldr	r3, [pc, #160]	; (80030c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003026:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800302a:	d131      	bne.n	8003090 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800302c:	4b24      	ldr	r3, [pc, #144]	; (80030c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800302e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003032:	4a23      	ldr	r2, [pc, #140]	; (80030c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003034:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003038:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800303c:	4b20      	ldr	r3, [pc, #128]	; (80030c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003044:	4a1e      	ldr	r2, [pc, #120]	; (80030c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003046:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800304a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800304c:	4b1d      	ldr	r3, [pc, #116]	; (80030c4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	2232      	movs	r2, #50	; 0x32
 8003052:	fb02 f303 	mul.w	r3, r2, r3
 8003056:	4a1c      	ldr	r2, [pc, #112]	; (80030c8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003058:	fba2 2303 	umull	r2, r3, r2, r3
 800305c:	0c9b      	lsrs	r3, r3, #18
 800305e:	3301      	adds	r3, #1
 8003060:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003062:	e002      	b.n	800306a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	3b01      	subs	r3, #1
 8003068:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800306a:	4b15      	ldr	r3, [pc, #84]	; (80030c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800306c:	695b      	ldr	r3, [r3, #20]
 800306e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003072:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003076:	d102      	bne.n	800307e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d1f2      	bne.n	8003064 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800307e:	4b10      	ldr	r3, [pc, #64]	; (80030c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003080:	695b      	ldr	r3, [r3, #20]
 8003082:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003086:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800308a:	d112      	bne.n	80030b2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800308c:	2303      	movs	r3, #3
 800308e:	e011      	b.n	80030b4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003090:	4b0b      	ldr	r3, [pc, #44]	; (80030c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003092:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003096:	4a0a      	ldr	r2, [pc, #40]	; (80030c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003098:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800309c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80030a0:	e007      	b.n	80030b2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80030a2:	4b07      	ldr	r3, [pc, #28]	; (80030c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80030aa:	4a05      	ldr	r2, [pc, #20]	; (80030c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030ac:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80030b0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80030b2:	2300      	movs	r3, #0
}
 80030b4:	4618      	mov	r0, r3
 80030b6:	3714      	adds	r7, #20
 80030b8:	46bd      	mov	sp, r7
 80030ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030be:	4770      	bx	lr
 80030c0:	40007000 	.word	0x40007000
 80030c4:	20000000 	.word	0x20000000
 80030c8:	431bde83 	.word	0x431bde83

080030cc <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80030cc:	b480      	push	{r7}
 80030ce:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80030d0:	4b05      	ldr	r3, [pc, #20]	; (80030e8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80030d2:	689b      	ldr	r3, [r3, #8]
 80030d4:	4a04      	ldr	r2, [pc, #16]	; (80030e8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80030d6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80030da:	6093      	str	r3, [r2, #8]
}
 80030dc:	bf00      	nop
 80030de:	46bd      	mov	sp, r7
 80030e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e4:	4770      	bx	lr
 80030e6:	bf00      	nop
 80030e8:	40007000 	.word	0x40007000

080030ec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b088      	sub	sp, #32
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d101      	bne.n	80030fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
 80030fc:	e308      	b.n	8003710 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f003 0301 	and.w	r3, r3, #1
 8003106:	2b00      	cmp	r3, #0
 8003108:	d075      	beq.n	80031f6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800310a:	4ba3      	ldr	r3, [pc, #652]	; (8003398 <HAL_RCC_OscConfig+0x2ac>)
 800310c:	689b      	ldr	r3, [r3, #8]
 800310e:	f003 030c 	and.w	r3, r3, #12
 8003112:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003114:	4ba0      	ldr	r3, [pc, #640]	; (8003398 <HAL_RCC_OscConfig+0x2ac>)
 8003116:	68db      	ldr	r3, [r3, #12]
 8003118:	f003 0303 	and.w	r3, r3, #3
 800311c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800311e:	69bb      	ldr	r3, [r7, #24]
 8003120:	2b0c      	cmp	r3, #12
 8003122:	d102      	bne.n	800312a <HAL_RCC_OscConfig+0x3e>
 8003124:	697b      	ldr	r3, [r7, #20]
 8003126:	2b03      	cmp	r3, #3
 8003128:	d002      	beq.n	8003130 <HAL_RCC_OscConfig+0x44>
 800312a:	69bb      	ldr	r3, [r7, #24]
 800312c:	2b08      	cmp	r3, #8
 800312e:	d10b      	bne.n	8003148 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003130:	4b99      	ldr	r3, [pc, #612]	; (8003398 <HAL_RCC_OscConfig+0x2ac>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003138:	2b00      	cmp	r3, #0
 800313a:	d05b      	beq.n	80031f4 <HAL_RCC_OscConfig+0x108>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d157      	bne.n	80031f4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003144:	2301      	movs	r3, #1
 8003146:	e2e3      	b.n	8003710 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003150:	d106      	bne.n	8003160 <HAL_RCC_OscConfig+0x74>
 8003152:	4b91      	ldr	r3, [pc, #580]	; (8003398 <HAL_RCC_OscConfig+0x2ac>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4a90      	ldr	r2, [pc, #576]	; (8003398 <HAL_RCC_OscConfig+0x2ac>)
 8003158:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800315c:	6013      	str	r3, [r2, #0]
 800315e:	e01d      	b.n	800319c <HAL_RCC_OscConfig+0xb0>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003168:	d10c      	bne.n	8003184 <HAL_RCC_OscConfig+0x98>
 800316a:	4b8b      	ldr	r3, [pc, #556]	; (8003398 <HAL_RCC_OscConfig+0x2ac>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4a8a      	ldr	r2, [pc, #552]	; (8003398 <HAL_RCC_OscConfig+0x2ac>)
 8003170:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003174:	6013      	str	r3, [r2, #0]
 8003176:	4b88      	ldr	r3, [pc, #544]	; (8003398 <HAL_RCC_OscConfig+0x2ac>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4a87      	ldr	r2, [pc, #540]	; (8003398 <HAL_RCC_OscConfig+0x2ac>)
 800317c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003180:	6013      	str	r3, [r2, #0]
 8003182:	e00b      	b.n	800319c <HAL_RCC_OscConfig+0xb0>
 8003184:	4b84      	ldr	r3, [pc, #528]	; (8003398 <HAL_RCC_OscConfig+0x2ac>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a83      	ldr	r2, [pc, #524]	; (8003398 <HAL_RCC_OscConfig+0x2ac>)
 800318a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800318e:	6013      	str	r3, [r2, #0]
 8003190:	4b81      	ldr	r3, [pc, #516]	; (8003398 <HAL_RCC_OscConfig+0x2ac>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4a80      	ldr	r2, [pc, #512]	; (8003398 <HAL_RCC_OscConfig+0x2ac>)
 8003196:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800319a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d013      	beq.n	80031cc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031a4:	f7fe f8b6 	bl	8001314 <HAL_GetTick>
 80031a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80031aa:	e008      	b.n	80031be <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031ac:	f7fe f8b2 	bl	8001314 <HAL_GetTick>
 80031b0:	4602      	mov	r2, r0
 80031b2:	693b      	ldr	r3, [r7, #16]
 80031b4:	1ad3      	subs	r3, r2, r3
 80031b6:	2b64      	cmp	r3, #100	; 0x64
 80031b8:	d901      	bls.n	80031be <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80031ba:	2303      	movs	r3, #3
 80031bc:	e2a8      	b.n	8003710 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80031be:	4b76      	ldr	r3, [pc, #472]	; (8003398 <HAL_RCC_OscConfig+0x2ac>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d0f0      	beq.n	80031ac <HAL_RCC_OscConfig+0xc0>
 80031ca:	e014      	b.n	80031f6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031cc:	f7fe f8a2 	bl	8001314 <HAL_GetTick>
 80031d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80031d2:	e008      	b.n	80031e6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031d4:	f7fe f89e 	bl	8001314 <HAL_GetTick>
 80031d8:	4602      	mov	r2, r0
 80031da:	693b      	ldr	r3, [r7, #16]
 80031dc:	1ad3      	subs	r3, r2, r3
 80031de:	2b64      	cmp	r3, #100	; 0x64
 80031e0:	d901      	bls.n	80031e6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80031e2:	2303      	movs	r3, #3
 80031e4:	e294      	b.n	8003710 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80031e6:	4b6c      	ldr	r3, [pc, #432]	; (8003398 <HAL_RCC_OscConfig+0x2ac>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d1f0      	bne.n	80031d4 <HAL_RCC_OscConfig+0xe8>
 80031f2:	e000      	b.n	80031f6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f003 0302 	and.w	r3, r3, #2
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d075      	beq.n	80032ee <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003202:	4b65      	ldr	r3, [pc, #404]	; (8003398 <HAL_RCC_OscConfig+0x2ac>)
 8003204:	689b      	ldr	r3, [r3, #8]
 8003206:	f003 030c 	and.w	r3, r3, #12
 800320a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800320c:	4b62      	ldr	r3, [pc, #392]	; (8003398 <HAL_RCC_OscConfig+0x2ac>)
 800320e:	68db      	ldr	r3, [r3, #12]
 8003210:	f003 0303 	and.w	r3, r3, #3
 8003214:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003216:	69bb      	ldr	r3, [r7, #24]
 8003218:	2b0c      	cmp	r3, #12
 800321a:	d102      	bne.n	8003222 <HAL_RCC_OscConfig+0x136>
 800321c:	697b      	ldr	r3, [r7, #20]
 800321e:	2b02      	cmp	r3, #2
 8003220:	d002      	beq.n	8003228 <HAL_RCC_OscConfig+0x13c>
 8003222:	69bb      	ldr	r3, [r7, #24]
 8003224:	2b04      	cmp	r3, #4
 8003226:	d11f      	bne.n	8003268 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003228:	4b5b      	ldr	r3, [pc, #364]	; (8003398 <HAL_RCC_OscConfig+0x2ac>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003230:	2b00      	cmp	r3, #0
 8003232:	d005      	beq.n	8003240 <HAL_RCC_OscConfig+0x154>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	68db      	ldr	r3, [r3, #12]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d101      	bne.n	8003240 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800323c:	2301      	movs	r3, #1
 800323e:	e267      	b.n	8003710 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003240:	4b55      	ldr	r3, [pc, #340]	; (8003398 <HAL_RCC_OscConfig+0x2ac>)
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	691b      	ldr	r3, [r3, #16]
 800324c:	061b      	lsls	r3, r3, #24
 800324e:	4952      	ldr	r1, [pc, #328]	; (8003398 <HAL_RCC_OscConfig+0x2ac>)
 8003250:	4313      	orrs	r3, r2
 8003252:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003254:	4b51      	ldr	r3, [pc, #324]	; (800339c <HAL_RCC_OscConfig+0x2b0>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4618      	mov	r0, r3
 800325a:	f7fe f80f 	bl	800127c <HAL_InitTick>
 800325e:	4603      	mov	r3, r0
 8003260:	2b00      	cmp	r3, #0
 8003262:	d043      	beq.n	80032ec <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003264:	2301      	movs	r3, #1
 8003266:	e253      	b.n	8003710 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	68db      	ldr	r3, [r3, #12]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d023      	beq.n	80032b8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003270:	4b49      	ldr	r3, [pc, #292]	; (8003398 <HAL_RCC_OscConfig+0x2ac>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a48      	ldr	r2, [pc, #288]	; (8003398 <HAL_RCC_OscConfig+0x2ac>)
 8003276:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800327a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800327c:	f7fe f84a 	bl	8001314 <HAL_GetTick>
 8003280:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003282:	e008      	b.n	8003296 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003284:	f7fe f846 	bl	8001314 <HAL_GetTick>
 8003288:	4602      	mov	r2, r0
 800328a:	693b      	ldr	r3, [r7, #16]
 800328c:	1ad3      	subs	r3, r2, r3
 800328e:	2b02      	cmp	r3, #2
 8003290:	d901      	bls.n	8003296 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003292:	2303      	movs	r3, #3
 8003294:	e23c      	b.n	8003710 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003296:	4b40      	ldr	r3, [pc, #256]	; (8003398 <HAL_RCC_OscConfig+0x2ac>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d0f0      	beq.n	8003284 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032a2:	4b3d      	ldr	r3, [pc, #244]	; (8003398 <HAL_RCC_OscConfig+0x2ac>)
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	691b      	ldr	r3, [r3, #16]
 80032ae:	061b      	lsls	r3, r3, #24
 80032b0:	4939      	ldr	r1, [pc, #228]	; (8003398 <HAL_RCC_OscConfig+0x2ac>)
 80032b2:	4313      	orrs	r3, r2
 80032b4:	604b      	str	r3, [r1, #4]
 80032b6:	e01a      	b.n	80032ee <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032b8:	4b37      	ldr	r3, [pc, #220]	; (8003398 <HAL_RCC_OscConfig+0x2ac>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4a36      	ldr	r2, [pc, #216]	; (8003398 <HAL_RCC_OscConfig+0x2ac>)
 80032be:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80032c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032c4:	f7fe f826 	bl	8001314 <HAL_GetTick>
 80032c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80032ca:	e008      	b.n	80032de <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032cc:	f7fe f822 	bl	8001314 <HAL_GetTick>
 80032d0:	4602      	mov	r2, r0
 80032d2:	693b      	ldr	r3, [r7, #16]
 80032d4:	1ad3      	subs	r3, r2, r3
 80032d6:	2b02      	cmp	r3, #2
 80032d8:	d901      	bls.n	80032de <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80032da:	2303      	movs	r3, #3
 80032dc:	e218      	b.n	8003710 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80032de:	4b2e      	ldr	r3, [pc, #184]	; (8003398 <HAL_RCC_OscConfig+0x2ac>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d1f0      	bne.n	80032cc <HAL_RCC_OscConfig+0x1e0>
 80032ea:	e000      	b.n	80032ee <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80032ec:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f003 0308 	and.w	r3, r3, #8
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d03c      	beq.n	8003374 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	695b      	ldr	r3, [r3, #20]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d01c      	beq.n	800333c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003302:	4b25      	ldr	r3, [pc, #148]	; (8003398 <HAL_RCC_OscConfig+0x2ac>)
 8003304:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003308:	4a23      	ldr	r2, [pc, #140]	; (8003398 <HAL_RCC_OscConfig+0x2ac>)
 800330a:	f043 0301 	orr.w	r3, r3, #1
 800330e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003312:	f7fd ffff 	bl	8001314 <HAL_GetTick>
 8003316:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003318:	e008      	b.n	800332c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800331a:	f7fd fffb 	bl	8001314 <HAL_GetTick>
 800331e:	4602      	mov	r2, r0
 8003320:	693b      	ldr	r3, [r7, #16]
 8003322:	1ad3      	subs	r3, r2, r3
 8003324:	2b02      	cmp	r3, #2
 8003326:	d901      	bls.n	800332c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003328:	2303      	movs	r3, #3
 800332a:	e1f1      	b.n	8003710 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800332c:	4b1a      	ldr	r3, [pc, #104]	; (8003398 <HAL_RCC_OscConfig+0x2ac>)
 800332e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003332:	f003 0302 	and.w	r3, r3, #2
 8003336:	2b00      	cmp	r3, #0
 8003338:	d0ef      	beq.n	800331a <HAL_RCC_OscConfig+0x22e>
 800333a:	e01b      	b.n	8003374 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800333c:	4b16      	ldr	r3, [pc, #88]	; (8003398 <HAL_RCC_OscConfig+0x2ac>)
 800333e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003342:	4a15      	ldr	r2, [pc, #84]	; (8003398 <HAL_RCC_OscConfig+0x2ac>)
 8003344:	f023 0301 	bic.w	r3, r3, #1
 8003348:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800334c:	f7fd ffe2 	bl	8001314 <HAL_GetTick>
 8003350:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003352:	e008      	b.n	8003366 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003354:	f7fd ffde 	bl	8001314 <HAL_GetTick>
 8003358:	4602      	mov	r2, r0
 800335a:	693b      	ldr	r3, [r7, #16]
 800335c:	1ad3      	subs	r3, r2, r3
 800335e:	2b02      	cmp	r3, #2
 8003360:	d901      	bls.n	8003366 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8003362:	2303      	movs	r3, #3
 8003364:	e1d4      	b.n	8003710 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003366:	4b0c      	ldr	r3, [pc, #48]	; (8003398 <HAL_RCC_OscConfig+0x2ac>)
 8003368:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800336c:	f003 0302 	and.w	r3, r3, #2
 8003370:	2b00      	cmp	r3, #0
 8003372:	d1ef      	bne.n	8003354 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f003 0304 	and.w	r3, r3, #4
 800337c:	2b00      	cmp	r3, #0
 800337e:	f000 80ab 	beq.w	80034d8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003382:	2300      	movs	r3, #0
 8003384:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003386:	4b04      	ldr	r3, [pc, #16]	; (8003398 <HAL_RCC_OscConfig+0x2ac>)
 8003388:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800338a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800338e:	2b00      	cmp	r3, #0
 8003390:	d106      	bne.n	80033a0 <HAL_RCC_OscConfig+0x2b4>
 8003392:	2301      	movs	r3, #1
 8003394:	e005      	b.n	80033a2 <HAL_RCC_OscConfig+0x2b6>
 8003396:	bf00      	nop
 8003398:	40021000 	.word	0x40021000
 800339c:	20000004 	.word	0x20000004
 80033a0:	2300      	movs	r3, #0
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d00d      	beq.n	80033c2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033a6:	4baf      	ldr	r3, [pc, #700]	; (8003664 <HAL_RCC_OscConfig+0x578>)
 80033a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033aa:	4aae      	ldr	r2, [pc, #696]	; (8003664 <HAL_RCC_OscConfig+0x578>)
 80033ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033b0:	6593      	str	r3, [r2, #88]	; 0x58
 80033b2:	4bac      	ldr	r3, [pc, #688]	; (8003664 <HAL_RCC_OscConfig+0x578>)
 80033b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033ba:	60fb      	str	r3, [r7, #12]
 80033bc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80033be:	2301      	movs	r3, #1
 80033c0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80033c2:	4ba9      	ldr	r3, [pc, #676]	; (8003668 <HAL_RCC_OscConfig+0x57c>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d118      	bne.n	8003400 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80033ce:	4ba6      	ldr	r3, [pc, #664]	; (8003668 <HAL_RCC_OscConfig+0x57c>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4aa5      	ldr	r2, [pc, #660]	; (8003668 <HAL_RCC_OscConfig+0x57c>)
 80033d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033da:	f7fd ff9b 	bl	8001314 <HAL_GetTick>
 80033de:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80033e0:	e008      	b.n	80033f4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033e2:	f7fd ff97 	bl	8001314 <HAL_GetTick>
 80033e6:	4602      	mov	r2, r0
 80033e8:	693b      	ldr	r3, [r7, #16]
 80033ea:	1ad3      	subs	r3, r2, r3
 80033ec:	2b02      	cmp	r3, #2
 80033ee:	d901      	bls.n	80033f4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80033f0:	2303      	movs	r3, #3
 80033f2:	e18d      	b.n	8003710 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80033f4:	4b9c      	ldr	r3, [pc, #624]	; (8003668 <HAL_RCC_OscConfig+0x57c>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d0f0      	beq.n	80033e2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	689b      	ldr	r3, [r3, #8]
 8003404:	2b01      	cmp	r3, #1
 8003406:	d108      	bne.n	800341a <HAL_RCC_OscConfig+0x32e>
 8003408:	4b96      	ldr	r3, [pc, #600]	; (8003664 <HAL_RCC_OscConfig+0x578>)
 800340a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800340e:	4a95      	ldr	r2, [pc, #596]	; (8003664 <HAL_RCC_OscConfig+0x578>)
 8003410:	f043 0301 	orr.w	r3, r3, #1
 8003414:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003418:	e024      	b.n	8003464 <HAL_RCC_OscConfig+0x378>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	689b      	ldr	r3, [r3, #8]
 800341e:	2b05      	cmp	r3, #5
 8003420:	d110      	bne.n	8003444 <HAL_RCC_OscConfig+0x358>
 8003422:	4b90      	ldr	r3, [pc, #576]	; (8003664 <HAL_RCC_OscConfig+0x578>)
 8003424:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003428:	4a8e      	ldr	r2, [pc, #568]	; (8003664 <HAL_RCC_OscConfig+0x578>)
 800342a:	f043 0304 	orr.w	r3, r3, #4
 800342e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003432:	4b8c      	ldr	r3, [pc, #560]	; (8003664 <HAL_RCC_OscConfig+0x578>)
 8003434:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003438:	4a8a      	ldr	r2, [pc, #552]	; (8003664 <HAL_RCC_OscConfig+0x578>)
 800343a:	f043 0301 	orr.w	r3, r3, #1
 800343e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003442:	e00f      	b.n	8003464 <HAL_RCC_OscConfig+0x378>
 8003444:	4b87      	ldr	r3, [pc, #540]	; (8003664 <HAL_RCC_OscConfig+0x578>)
 8003446:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800344a:	4a86      	ldr	r2, [pc, #536]	; (8003664 <HAL_RCC_OscConfig+0x578>)
 800344c:	f023 0301 	bic.w	r3, r3, #1
 8003450:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003454:	4b83      	ldr	r3, [pc, #524]	; (8003664 <HAL_RCC_OscConfig+0x578>)
 8003456:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800345a:	4a82      	ldr	r2, [pc, #520]	; (8003664 <HAL_RCC_OscConfig+0x578>)
 800345c:	f023 0304 	bic.w	r3, r3, #4
 8003460:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	689b      	ldr	r3, [r3, #8]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d016      	beq.n	800349a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800346c:	f7fd ff52 	bl	8001314 <HAL_GetTick>
 8003470:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003472:	e00a      	b.n	800348a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003474:	f7fd ff4e 	bl	8001314 <HAL_GetTick>
 8003478:	4602      	mov	r2, r0
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	1ad3      	subs	r3, r2, r3
 800347e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003482:	4293      	cmp	r3, r2
 8003484:	d901      	bls.n	800348a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003486:	2303      	movs	r3, #3
 8003488:	e142      	b.n	8003710 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800348a:	4b76      	ldr	r3, [pc, #472]	; (8003664 <HAL_RCC_OscConfig+0x578>)
 800348c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003490:	f003 0302 	and.w	r3, r3, #2
 8003494:	2b00      	cmp	r3, #0
 8003496:	d0ed      	beq.n	8003474 <HAL_RCC_OscConfig+0x388>
 8003498:	e015      	b.n	80034c6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800349a:	f7fd ff3b 	bl	8001314 <HAL_GetTick>
 800349e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80034a0:	e00a      	b.n	80034b8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034a2:	f7fd ff37 	bl	8001314 <HAL_GetTick>
 80034a6:	4602      	mov	r2, r0
 80034a8:	693b      	ldr	r3, [r7, #16]
 80034aa:	1ad3      	subs	r3, r2, r3
 80034ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d901      	bls.n	80034b8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80034b4:	2303      	movs	r3, #3
 80034b6:	e12b      	b.n	8003710 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80034b8:	4b6a      	ldr	r3, [pc, #424]	; (8003664 <HAL_RCC_OscConfig+0x578>)
 80034ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034be:	f003 0302 	and.w	r3, r3, #2
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d1ed      	bne.n	80034a2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80034c6:	7ffb      	ldrb	r3, [r7, #31]
 80034c8:	2b01      	cmp	r3, #1
 80034ca:	d105      	bne.n	80034d8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034cc:	4b65      	ldr	r3, [pc, #404]	; (8003664 <HAL_RCC_OscConfig+0x578>)
 80034ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034d0:	4a64      	ldr	r2, [pc, #400]	; (8003664 <HAL_RCC_OscConfig+0x578>)
 80034d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034d6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f003 0320 	and.w	r3, r3, #32
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d03c      	beq.n	800355e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	699b      	ldr	r3, [r3, #24]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d01c      	beq.n	8003526 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80034ec:	4b5d      	ldr	r3, [pc, #372]	; (8003664 <HAL_RCC_OscConfig+0x578>)
 80034ee:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80034f2:	4a5c      	ldr	r2, [pc, #368]	; (8003664 <HAL_RCC_OscConfig+0x578>)
 80034f4:	f043 0301 	orr.w	r3, r3, #1
 80034f8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034fc:	f7fd ff0a 	bl	8001314 <HAL_GetTick>
 8003500:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003502:	e008      	b.n	8003516 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003504:	f7fd ff06 	bl	8001314 <HAL_GetTick>
 8003508:	4602      	mov	r2, r0
 800350a:	693b      	ldr	r3, [r7, #16]
 800350c:	1ad3      	subs	r3, r2, r3
 800350e:	2b02      	cmp	r3, #2
 8003510:	d901      	bls.n	8003516 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003512:	2303      	movs	r3, #3
 8003514:	e0fc      	b.n	8003710 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003516:	4b53      	ldr	r3, [pc, #332]	; (8003664 <HAL_RCC_OscConfig+0x578>)
 8003518:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800351c:	f003 0302 	and.w	r3, r3, #2
 8003520:	2b00      	cmp	r3, #0
 8003522:	d0ef      	beq.n	8003504 <HAL_RCC_OscConfig+0x418>
 8003524:	e01b      	b.n	800355e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003526:	4b4f      	ldr	r3, [pc, #316]	; (8003664 <HAL_RCC_OscConfig+0x578>)
 8003528:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800352c:	4a4d      	ldr	r2, [pc, #308]	; (8003664 <HAL_RCC_OscConfig+0x578>)
 800352e:	f023 0301 	bic.w	r3, r3, #1
 8003532:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003536:	f7fd feed 	bl	8001314 <HAL_GetTick>
 800353a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800353c:	e008      	b.n	8003550 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800353e:	f7fd fee9 	bl	8001314 <HAL_GetTick>
 8003542:	4602      	mov	r2, r0
 8003544:	693b      	ldr	r3, [r7, #16]
 8003546:	1ad3      	subs	r3, r2, r3
 8003548:	2b02      	cmp	r3, #2
 800354a:	d901      	bls.n	8003550 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800354c:	2303      	movs	r3, #3
 800354e:	e0df      	b.n	8003710 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003550:	4b44      	ldr	r3, [pc, #272]	; (8003664 <HAL_RCC_OscConfig+0x578>)
 8003552:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003556:	f003 0302 	and.w	r3, r3, #2
 800355a:	2b00      	cmp	r3, #0
 800355c:	d1ef      	bne.n	800353e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	69db      	ldr	r3, [r3, #28]
 8003562:	2b00      	cmp	r3, #0
 8003564:	f000 80d3 	beq.w	800370e <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003568:	4b3e      	ldr	r3, [pc, #248]	; (8003664 <HAL_RCC_OscConfig+0x578>)
 800356a:	689b      	ldr	r3, [r3, #8]
 800356c:	f003 030c 	and.w	r3, r3, #12
 8003570:	2b0c      	cmp	r3, #12
 8003572:	f000 808d 	beq.w	8003690 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	69db      	ldr	r3, [r3, #28]
 800357a:	2b02      	cmp	r3, #2
 800357c:	d15a      	bne.n	8003634 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800357e:	4b39      	ldr	r3, [pc, #228]	; (8003664 <HAL_RCC_OscConfig+0x578>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4a38      	ldr	r2, [pc, #224]	; (8003664 <HAL_RCC_OscConfig+0x578>)
 8003584:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003588:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800358a:	f7fd fec3 	bl	8001314 <HAL_GetTick>
 800358e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003590:	e008      	b.n	80035a4 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003592:	f7fd febf 	bl	8001314 <HAL_GetTick>
 8003596:	4602      	mov	r2, r0
 8003598:	693b      	ldr	r3, [r7, #16]
 800359a:	1ad3      	subs	r3, r2, r3
 800359c:	2b02      	cmp	r3, #2
 800359e:	d901      	bls.n	80035a4 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 80035a0:	2303      	movs	r3, #3
 80035a2:	e0b5      	b.n	8003710 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80035a4:	4b2f      	ldr	r3, [pc, #188]	; (8003664 <HAL_RCC_OscConfig+0x578>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d1f0      	bne.n	8003592 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80035b0:	4b2c      	ldr	r3, [pc, #176]	; (8003664 <HAL_RCC_OscConfig+0x578>)
 80035b2:	68da      	ldr	r2, [r3, #12]
 80035b4:	4b2d      	ldr	r3, [pc, #180]	; (800366c <HAL_RCC_OscConfig+0x580>)
 80035b6:	4013      	ands	r3, r2
 80035b8:	687a      	ldr	r2, [r7, #4]
 80035ba:	6a11      	ldr	r1, [r2, #32]
 80035bc:	687a      	ldr	r2, [r7, #4]
 80035be:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80035c0:	3a01      	subs	r2, #1
 80035c2:	0112      	lsls	r2, r2, #4
 80035c4:	4311      	orrs	r1, r2
 80035c6:	687a      	ldr	r2, [r7, #4]
 80035c8:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80035ca:	0212      	lsls	r2, r2, #8
 80035cc:	4311      	orrs	r1, r2
 80035ce:	687a      	ldr	r2, [r7, #4]
 80035d0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80035d2:	0852      	lsrs	r2, r2, #1
 80035d4:	3a01      	subs	r2, #1
 80035d6:	0552      	lsls	r2, r2, #21
 80035d8:	4311      	orrs	r1, r2
 80035da:	687a      	ldr	r2, [r7, #4]
 80035dc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80035de:	0852      	lsrs	r2, r2, #1
 80035e0:	3a01      	subs	r2, #1
 80035e2:	0652      	lsls	r2, r2, #25
 80035e4:	4311      	orrs	r1, r2
 80035e6:	687a      	ldr	r2, [r7, #4]
 80035e8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80035ea:	06d2      	lsls	r2, r2, #27
 80035ec:	430a      	orrs	r2, r1
 80035ee:	491d      	ldr	r1, [pc, #116]	; (8003664 <HAL_RCC_OscConfig+0x578>)
 80035f0:	4313      	orrs	r3, r2
 80035f2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80035f4:	4b1b      	ldr	r3, [pc, #108]	; (8003664 <HAL_RCC_OscConfig+0x578>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a1a      	ldr	r2, [pc, #104]	; (8003664 <HAL_RCC_OscConfig+0x578>)
 80035fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80035fe:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003600:	4b18      	ldr	r3, [pc, #96]	; (8003664 <HAL_RCC_OscConfig+0x578>)
 8003602:	68db      	ldr	r3, [r3, #12]
 8003604:	4a17      	ldr	r2, [pc, #92]	; (8003664 <HAL_RCC_OscConfig+0x578>)
 8003606:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800360a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800360c:	f7fd fe82 	bl	8001314 <HAL_GetTick>
 8003610:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003612:	e008      	b.n	8003626 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003614:	f7fd fe7e 	bl	8001314 <HAL_GetTick>
 8003618:	4602      	mov	r2, r0
 800361a:	693b      	ldr	r3, [r7, #16]
 800361c:	1ad3      	subs	r3, r2, r3
 800361e:	2b02      	cmp	r3, #2
 8003620:	d901      	bls.n	8003626 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8003622:	2303      	movs	r3, #3
 8003624:	e074      	b.n	8003710 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003626:	4b0f      	ldr	r3, [pc, #60]	; (8003664 <HAL_RCC_OscConfig+0x578>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800362e:	2b00      	cmp	r3, #0
 8003630:	d0f0      	beq.n	8003614 <HAL_RCC_OscConfig+0x528>
 8003632:	e06c      	b.n	800370e <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003634:	4b0b      	ldr	r3, [pc, #44]	; (8003664 <HAL_RCC_OscConfig+0x578>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a0a      	ldr	r2, [pc, #40]	; (8003664 <HAL_RCC_OscConfig+0x578>)
 800363a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800363e:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003640:	4b08      	ldr	r3, [pc, #32]	; (8003664 <HAL_RCC_OscConfig+0x578>)
 8003642:	68db      	ldr	r3, [r3, #12]
 8003644:	4a07      	ldr	r2, [pc, #28]	; (8003664 <HAL_RCC_OscConfig+0x578>)
 8003646:	f023 0303 	bic.w	r3, r3, #3
 800364a:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800364c:	4b05      	ldr	r3, [pc, #20]	; (8003664 <HAL_RCC_OscConfig+0x578>)
 800364e:	68db      	ldr	r3, [r3, #12]
 8003650:	4a04      	ldr	r2, [pc, #16]	; (8003664 <HAL_RCC_OscConfig+0x578>)
 8003652:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003656:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800365a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800365c:	f7fd fe5a 	bl	8001314 <HAL_GetTick>
 8003660:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003662:	e00e      	b.n	8003682 <HAL_RCC_OscConfig+0x596>
 8003664:	40021000 	.word	0x40021000
 8003668:	40007000 	.word	0x40007000
 800366c:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003670:	f7fd fe50 	bl	8001314 <HAL_GetTick>
 8003674:	4602      	mov	r2, r0
 8003676:	693b      	ldr	r3, [r7, #16]
 8003678:	1ad3      	subs	r3, r2, r3
 800367a:	2b02      	cmp	r3, #2
 800367c:	d901      	bls.n	8003682 <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 800367e:	2303      	movs	r3, #3
 8003680:	e046      	b.n	8003710 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003682:	4b25      	ldr	r3, [pc, #148]	; (8003718 <HAL_RCC_OscConfig+0x62c>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800368a:	2b00      	cmp	r3, #0
 800368c:	d1f0      	bne.n	8003670 <HAL_RCC_OscConfig+0x584>
 800368e:	e03e      	b.n	800370e <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	69db      	ldr	r3, [r3, #28]
 8003694:	2b01      	cmp	r3, #1
 8003696:	d101      	bne.n	800369c <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8003698:	2301      	movs	r3, #1
 800369a:	e039      	b.n	8003710 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800369c:	4b1e      	ldr	r3, [pc, #120]	; (8003718 <HAL_RCC_OscConfig+0x62c>)
 800369e:	68db      	ldr	r3, [r3, #12]
 80036a0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036a2:	697b      	ldr	r3, [r7, #20]
 80036a4:	f003 0203 	and.w	r2, r3, #3
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6a1b      	ldr	r3, [r3, #32]
 80036ac:	429a      	cmp	r2, r3
 80036ae:	d12c      	bne.n	800370a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80036b0:	697b      	ldr	r3, [r7, #20]
 80036b2:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ba:	3b01      	subs	r3, #1
 80036bc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036be:	429a      	cmp	r2, r3
 80036c0:	d123      	bne.n	800370a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80036c2:	697b      	ldr	r3, [r7, #20]
 80036c4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036cc:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80036ce:	429a      	cmp	r2, r3
 80036d0:	d11b      	bne.n	800370a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80036d2:	697b      	ldr	r3, [r7, #20]
 80036d4:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036dc:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80036de:	429a      	cmp	r2, r3
 80036e0:	d113      	bne.n	800370a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80036e2:	697b      	ldr	r3, [r7, #20]
 80036e4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ec:	085b      	lsrs	r3, r3, #1
 80036ee:	3b01      	subs	r3, #1
 80036f0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80036f2:	429a      	cmp	r2, r3
 80036f4:	d109      	bne.n	800370a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80036f6:	697b      	ldr	r3, [r7, #20]
 80036f8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003700:	085b      	lsrs	r3, r3, #1
 8003702:	3b01      	subs	r3, #1
 8003704:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003706:	429a      	cmp	r2, r3
 8003708:	d001      	beq.n	800370e <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 800370a:	2301      	movs	r3, #1
 800370c:	e000      	b.n	8003710 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 800370e:	2300      	movs	r3, #0
}
 8003710:	4618      	mov	r0, r3
 8003712:	3720      	adds	r7, #32
 8003714:	46bd      	mov	sp, r7
 8003716:	bd80      	pop	{r7, pc}
 8003718:	40021000 	.word	0x40021000

0800371c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b086      	sub	sp, #24
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
 8003724:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003726:	2300      	movs	r3, #0
 8003728:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d101      	bne.n	8003734 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003730:	2301      	movs	r3, #1
 8003732:	e11e      	b.n	8003972 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003734:	4b91      	ldr	r3, [pc, #580]	; (800397c <HAL_RCC_ClockConfig+0x260>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f003 030f 	and.w	r3, r3, #15
 800373c:	683a      	ldr	r2, [r7, #0]
 800373e:	429a      	cmp	r2, r3
 8003740:	d910      	bls.n	8003764 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003742:	4b8e      	ldr	r3, [pc, #568]	; (800397c <HAL_RCC_ClockConfig+0x260>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f023 020f 	bic.w	r2, r3, #15
 800374a:	498c      	ldr	r1, [pc, #560]	; (800397c <HAL_RCC_ClockConfig+0x260>)
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	4313      	orrs	r3, r2
 8003750:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003752:	4b8a      	ldr	r3, [pc, #552]	; (800397c <HAL_RCC_ClockConfig+0x260>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f003 030f 	and.w	r3, r3, #15
 800375a:	683a      	ldr	r2, [r7, #0]
 800375c:	429a      	cmp	r2, r3
 800375e:	d001      	beq.n	8003764 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003760:	2301      	movs	r3, #1
 8003762:	e106      	b.n	8003972 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f003 0301 	and.w	r3, r3, #1
 800376c:	2b00      	cmp	r3, #0
 800376e:	d073      	beq.n	8003858 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	2b03      	cmp	r3, #3
 8003776:	d129      	bne.n	80037cc <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003778:	4b81      	ldr	r3, [pc, #516]	; (8003980 <HAL_RCC_ClockConfig+0x264>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003780:	2b00      	cmp	r3, #0
 8003782:	d101      	bne.n	8003788 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003784:	2301      	movs	r3, #1
 8003786:	e0f4      	b.n	8003972 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003788:	f000 f966 	bl	8003a58 <RCC_GetSysClockFreqFromPLLSource>
 800378c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800378e:	693b      	ldr	r3, [r7, #16]
 8003790:	4a7c      	ldr	r2, [pc, #496]	; (8003984 <HAL_RCC_ClockConfig+0x268>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d93f      	bls.n	8003816 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003796:	4b7a      	ldr	r3, [pc, #488]	; (8003980 <HAL_RCC_ClockConfig+0x264>)
 8003798:	689b      	ldr	r3, [r3, #8]
 800379a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d009      	beq.n	80037b6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d033      	beq.n	8003816 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d12f      	bne.n	8003816 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80037b6:	4b72      	ldr	r3, [pc, #456]	; (8003980 <HAL_RCC_ClockConfig+0x264>)
 80037b8:	689b      	ldr	r3, [r3, #8]
 80037ba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80037be:	4a70      	ldr	r2, [pc, #448]	; (8003980 <HAL_RCC_ClockConfig+0x264>)
 80037c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037c4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80037c6:	2380      	movs	r3, #128	; 0x80
 80037c8:	617b      	str	r3, [r7, #20]
 80037ca:	e024      	b.n	8003816 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	2b02      	cmp	r3, #2
 80037d2:	d107      	bne.n	80037e4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80037d4:	4b6a      	ldr	r3, [pc, #424]	; (8003980 <HAL_RCC_ClockConfig+0x264>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d109      	bne.n	80037f4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80037e0:	2301      	movs	r3, #1
 80037e2:	e0c6      	b.n	8003972 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80037e4:	4b66      	ldr	r3, [pc, #408]	; (8003980 <HAL_RCC_ClockConfig+0x264>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d101      	bne.n	80037f4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80037f0:	2301      	movs	r3, #1
 80037f2:	e0be      	b.n	8003972 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80037f4:	f000 f8ce 	bl	8003994 <HAL_RCC_GetSysClockFreq>
 80037f8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80037fa:	693b      	ldr	r3, [r7, #16]
 80037fc:	4a61      	ldr	r2, [pc, #388]	; (8003984 <HAL_RCC_ClockConfig+0x268>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d909      	bls.n	8003816 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003802:	4b5f      	ldr	r3, [pc, #380]	; (8003980 <HAL_RCC_ClockConfig+0x264>)
 8003804:	689b      	ldr	r3, [r3, #8]
 8003806:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800380a:	4a5d      	ldr	r2, [pc, #372]	; (8003980 <HAL_RCC_ClockConfig+0x264>)
 800380c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003810:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003812:	2380      	movs	r3, #128	; 0x80
 8003814:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003816:	4b5a      	ldr	r3, [pc, #360]	; (8003980 <HAL_RCC_ClockConfig+0x264>)
 8003818:	689b      	ldr	r3, [r3, #8]
 800381a:	f023 0203 	bic.w	r2, r3, #3
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	4957      	ldr	r1, [pc, #348]	; (8003980 <HAL_RCC_ClockConfig+0x264>)
 8003824:	4313      	orrs	r3, r2
 8003826:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003828:	f7fd fd74 	bl	8001314 <HAL_GetTick>
 800382c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800382e:	e00a      	b.n	8003846 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003830:	f7fd fd70 	bl	8001314 <HAL_GetTick>
 8003834:	4602      	mov	r2, r0
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	1ad3      	subs	r3, r2, r3
 800383a:	f241 3288 	movw	r2, #5000	; 0x1388
 800383e:	4293      	cmp	r3, r2
 8003840:	d901      	bls.n	8003846 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003842:	2303      	movs	r3, #3
 8003844:	e095      	b.n	8003972 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003846:	4b4e      	ldr	r3, [pc, #312]	; (8003980 <HAL_RCC_ClockConfig+0x264>)
 8003848:	689b      	ldr	r3, [r3, #8]
 800384a:	f003 020c 	and.w	r2, r3, #12
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	009b      	lsls	r3, r3, #2
 8003854:	429a      	cmp	r2, r3
 8003856:	d1eb      	bne.n	8003830 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f003 0302 	and.w	r3, r3, #2
 8003860:	2b00      	cmp	r3, #0
 8003862:	d023      	beq.n	80038ac <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f003 0304 	and.w	r3, r3, #4
 800386c:	2b00      	cmp	r3, #0
 800386e:	d005      	beq.n	800387c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003870:	4b43      	ldr	r3, [pc, #268]	; (8003980 <HAL_RCC_ClockConfig+0x264>)
 8003872:	689b      	ldr	r3, [r3, #8]
 8003874:	4a42      	ldr	r2, [pc, #264]	; (8003980 <HAL_RCC_ClockConfig+0x264>)
 8003876:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800387a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f003 0308 	and.w	r3, r3, #8
 8003884:	2b00      	cmp	r3, #0
 8003886:	d007      	beq.n	8003898 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003888:	4b3d      	ldr	r3, [pc, #244]	; (8003980 <HAL_RCC_ClockConfig+0x264>)
 800388a:	689b      	ldr	r3, [r3, #8]
 800388c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003890:	4a3b      	ldr	r2, [pc, #236]	; (8003980 <HAL_RCC_ClockConfig+0x264>)
 8003892:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003896:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003898:	4b39      	ldr	r3, [pc, #228]	; (8003980 <HAL_RCC_ClockConfig+0x264>)
 800389a:	689b      	ldr	r3, [r3, #8]
 800389c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	689b      	ldr	r3, [r3, #8]
 80038a4:	4936      	ldr	r1, [pc, #216]	; (8003980 <HAL_RCC_ClockConfig+0x264>)
 80038a6:	4313      	orrs	r3, r2
 80038a8:	608b      	str	r3, [r1, #8]
 80038aa:	e008      	b.n	80038be <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80038ac:	697b      	ldr	r3, [r7, #20]
 80038ae:	2b80      	cmp	r3, #128	; 0x80
 80038b0:	d105      	bne.n	80038be <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80038b2:	4b33      	ldr	r3, [pc, #204]	; (8003980 <HAL_RCC_ClockConfig+0x264>)
 80038b4:	689b      	ldr	r3, [r3, #8]
 80038b6:	4a32      	ldr	r2, [pc, #200]	; (8003980 <HAL_RCC_ClockConfig+0x264>)
 80038b8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80038bc:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80038be:	4b2f      	ldr	r3, [pc, #188]	; (800397c <HAL_RCC_ClockConfig+0x260>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f003 030f 	and.w	r3, r3, #15
 80038c6:	683a      	ldr	r2, [r7, #0]
 80038c8:	429a      	cmp	r2, r3
 80038ca:	d21d      	bcs.n	8003908 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038cc:	4b2b      	ldr	r3, [pc, #172]	; (800397c <HAL_RCC_ClockConfig+0x260>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f023 020f 	bic.w	r2, r3, #15
 80038d4:	4929      	ldr	r1, [pc, #164]	; (800397c <HAL_RCC_ClockConfig+0x260>)
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	4313      	orrs	r3, r2
 80038da:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80038dc:	f7fd fd1a 	bl	8001314 <HAL_GetTick>
 80038e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038e2:	e00a      	b.n	80038fa <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038e4:	f7fd fd16 	bl	8001314 <HAL_GetTick>
 80038e8:	4602      	mov	r2, r0
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	1ad3      	subs	r3, r2, r3
 80038ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d901      	bls.n	80038fa <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80038f6:	2303      	movs	r3, #3
 80038f8:	e03b      	b.n	8003972 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038fa:	4b20      	ldr	r3, [pc, #128]	; (800397c <HAL_RCC_ClockConfig+0x260>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f003 030f 	and.w	r3, r3, #15
 8003902:	683a      	ldr	r2, [r7, #0]
 8003904:	429a      	cmp	r2, r3
 8003906:	d1ed      	bne.n	80038e4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f003 0304 	and.w	r3, r3, #4
 8003910:	2b00      	cmp	r3, #0
 8003912:	d008      	beq.n	8003926 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003914:	4b1a      	ldr	r3, [pc, #104]	; (8003980 <HAL_RCC_ClockConfig+0x264>)
 8003916:	689b      	ldr	r3, [r3, #8]
 8003918:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	68db      	ldr	r3, [r3, #12]
 8003920:	4917      	ldr	r1, [pc, #92]	; (8003980 <HAL_RCC_ClockConfig+0x264>)
 8003922:	4313      	orrs	r3, r2
 8003924:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f003 0308 	and.w	r3, r3, #8
 800392e:	2b00      	cmp	r3, #0
 8003930:	d009      	beq.n	8003946 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003932:	4b13      	ldr	r3, [pc, #76]	; (8003980 <HAL_RCC_ClockConfig+0x264>)
 8003934:	689b      	ldr	r3, [r3, #8]
 8003936:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	691b      	ldr	r3, [r3, #16]
 800393e:	00db      	lsls	r3, r3, #3
 8003940:	490f      	ldr	r1, [pc, #60]	; (8003980 <HAL_RCC_ClockConfig+0x264>)
 8003942:	4313      	orrs	r3, r2
 8003944:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003946:	f000 f825 	bl	8003994 <HAL_RCC_GetSysClockFreq>
 800394a:	4601      	mov	r1, r0
 800394c:	4b0c      	ldr	r3, [pc, #48]	; (8003980 <HAL_RCC_ClockConfig+0x264>)
 800394e:	689b      	ldr	r3, [r3, #8]
 8003950:	091b      	lsrs	r3, r3, #4
 8003952:	f003 030f 	and.w	r3, r3, #15
 8003956:	4a0c      	ldr	r2, [pc, #48]	; (8003988 <HAL_RCC_ClockConfig+0x26c>)
 8003958:	5cd3      	ldrb	r3, [r2, r3]
 800395a:	f003 031f 	and.w	r3, r3, #31
 800395e:	fa21 f303 	lsr.w	r3, r1, r3
 8003962:	4a0a      	ldr	r2, [pc, #40]	; (800398c <HAL_RCC_ClockConfig+0x270>)
 8003964:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003966:	4b0a      	ldr	r3, [pc, #40]	; (8003990 <HAL_RCC_ClockConfig+0x274>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4618      	mov	r0, r3
 800396c:	f7fd fc86 	bl	800127c <HAL_InitTick>
 8003970:	4603      	mov	r3, r0
}
 8003972:	4618      	mov	r0, r3
 8003974:	3718      	adds	r7, #24
 8003976:	46bd      	mov	sp, r7
 8003978:	bd80      	pop	{r7, pc}
 800397a:	bf00      	nop
 800397c:	40022000 	.word	0x40022000
 8003980:	40021000 	.word	0x40021000
 8003984:	04c4b400 	.word	0x04c4b400
 8003988:	08009530 	.word	0x08009530
 800398c:	20000000 	.word	0x20000000
 8003990:	20000004 	.word	0x20000004

08003994 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003994:	b480      	push	{r7}
 8003996:	b087      	sub	sp, #28
 8003998:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800399a:	4b2c      	ldr	r3, [pc, #176]	; (8003a4c <HAL_RCC_GetSysClockFreq+0xb8>)
 800399c:	689b      	ldr	r3, [r3, #8]
 800399e:	f003 030c 	and.w	r3, r3, #12
 80039a2:	2b04      	cmp	r3, #4
 80039a4:	d102      	bne.n	80039ac <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80039a6:	4b2a      	ldr	r3, [pc, #168]	; (8003a50 <HAL_RCC_GetSysClockFreq+0xbc>)
 80039a8:	613b      	str	r3, [r7, #16]
 80039aa:	e047      	b.n	8003a3c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80039ac:	4b27      	ldr	r3, [pc, #156]	; (8003a4c <HAL_RCC_GetSysClockFreq+0xb8>)
 80039ae:	689b      	ldr	r3, [r3, #8]
 80039b0:	f003 030c 	and.w	r3, r3, #12
 80039b4:	2b08      	cmp	r3, #8
 80039b6:	d102      	bne.n	80039be <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80039b8:	4b26      	ldr	r3, [pc, #152]	; (8003a54 <HAL_RCC_GetSysClockFreq+0xc0>)
 80039ba:	613b      	str	r3, [r7, #16]
 80039bc:	e03e      	b.n	8003a3c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80039be:	4b23      	ldr	r3, [pc, #140]	; (8003a4c <HAL_RCC_GetSysClockFreq+0xb8>)
 80039c0:	689b      	ldr	r3, [r3, #8]
 80039c2:	f003 030c 	and.w	r3, r3, #12
 80039c6:	2b0c      	cmp	r3, #12
 80039c8:	d136      	bne.n	8003a38 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80039ca:	4b20      	ldr	r3, [pc, #128]	; (8003a4c <HAL_RCC_GetSysClockFreq+0xb8>)
 80039cc:	68db      	ldr	r3, [r3, #12]
 80039ce:	f003 0303 	and.w	r3, r3, #3
 80039d2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80039d4:	4b1d      	ldr	r3, [pc, #116]	; (8003a4c <HAL_RCC_GetSysClockFreq+0xb8>)
 80039d6:	68db      	ldr	r3, [r3, #12]
 80039d8:	091b      	lsrs	r3, r3, #4
 80039da:	f003 030f 	and.w	r3, r3, #15
 80039de:	3301      	adds	r3, #1
 80039e0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	2b03      	cmp	r3, #3
 80039e6:	d10c      	bne.n	8003a02 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80039e8:	4a1a      	ldr	r2, [pc, #104]	; (8003a54 <HAL_RCC_GetSysClockFreq+0xc0>)
 80039ea:	68bb      	ldr	r3, [r7, #8]
 80039ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80039f0:	4a16      	ldr	r2, [pc, #88]	; (8003a4c <HAL_RCC_GetSysClockFreq+0xb8>)
 80039f2:	68d2      	ldr	r2, [r2, #12]
 80039f4:	0a12      	lsrs	r2, r2, #8
 80039f6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80039fa:	fb02 f303 	mul.w	r3, r2, r3
 80039fe:	617b      	str	r3, [r7, #20]
      break;
 8003a00:	e00c      	b.n	8003a1c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003a02:	4a13      	ldr	r2, [pc, #76]	; (8003a50 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a0a:	4a10      	ldr	r2, [pc, #64]	; (8003a4c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003a0c:	68d2      	ldr	r2, [r2, #12]
 8003a0e:	0a12      	lsrs	r2, r2, #8
 8003a10:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003a14:	fb02 f303 	mul.w	r3, r2, r3
 8003a18:	617b      	str	r3, [r7, #20]
      break;
 8003a1a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003a1c:	4b0b      	ldr	r3, [pc, #44]	; (8003a4c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003a1e:	68db      	ldr	r3, [r3, #12]
 8003a20:	0e5b      	lsrs	r3, r3, #25
 8003a22:	f003 0303 	and.w	r3, r3, #3
 8003a26:	3301      	adds	r3, #1
 8003a28:	005b      	lsls	r3, r3, #1
 8003a2a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003a2c:	697a      	ldr	r2, [r7, #20]
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a34:	613b      	str	r3, [r7, #16]
 8003a36:	e001      	b.n	8003a3c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003a38:	2300      	movs	r3, #0
 8003a3a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003a3c:	693b      	ldr	r3, [r7, #16]
}
 8003a3e:	4618      	mov	r0, r3
 8003a40:	371c      	adds	r7, #28
 8003a42:	46bd      	mov	sp, r7
 8003a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a48:	4770      	bx	lr
 8003a4a:	bf00      	nop
 8003a4c:	40021000 	.word	0x40021000
 8003a50:	00f42400 	.word	0x00f42400
 8003a54:	007a1200 	.word	0x007a1200

08003a58 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003a58:	b480      	push	{r7}
 8003a5a:	b087      	sub	sp, #28
 8003a5c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003a5e:	4b1e      	ldr	r3, [pc, #120]	; (8003ad8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003a60:	68db      	ldr	r3, [r3, #12]
 8003a62:	f003 0303 	and.w	r3, r3, #3
 8003a66:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003a68:	4b1b      	ldr	r3, [pc, #108]	; (8003ad8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003a6a:	68db      	ldr	r3, [r3, #12]
 8003a6c:	091b      	lsrs	r3, r3, #4
 8003a6e:	f003 030f 	and.w	r3, r3, #15
 8003a72:	3301      	adds	r3, #1
 8003a74:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003a76:	693b      	ldr	r3, [r7, #16]
 8003a78:	2b03      	cmp	r3, #3
 8003a7a:	d10c      	bne.n	8003a96 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003a7c:	4a17      	ldr	r2, [pc, #92]	; (8003adc <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a84:	4a14      	ldr	r2, [pc, #80]	; (8003ad8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003a86:	68d2      	ldr	r2, [r2, #12]
 8003a88:	0a12      	lsrs	r2, r2, #8
 8003a8a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003a8e:	fb02 f303 	mul.w	r3, r2, r3
 8003a92:	617b      	str	r3, [r7, #20]
    break;
 8003a94:	e00c      	b.n	8003ab0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003a96:	4a12      	ldr	r2, [pc, #72]	; (8003ae0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a9e:	4a0e      	ldr	r2, [pc, #56]	; (8003ad8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003aa0:	68d2      	ldr	r2, [r2, #12]
 8003aa2:	0a12      	lsrs	r2, r2, #8
 8003aa4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003aa8:	fb02 f303 	mul.w	r3, r2, r3
 8003aac:	617b      	str	r3, [r7, #20]
    break;
 8003aae:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003ab0:	4b09      	ldr	r3, [pc, #36]	; (8003ad8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003ab2:	68db      	ldr	r3, [r3, #12]
 8003ab4:	0e5b      	lsrs	r3, r3, #25
 8003ab6:	f003 0303 	and.w	r3, r3, #3
 8003aba:	3301      	adds	r3, #1
 8003abc:	005b      	lsls	r3, r3, #1
 8003abe:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003ac0:	697a      	ldr	r2, [r7, #20]
 8003ac2:	68bb      	ldr	r3, [r7, #8]
 8003ac4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ac8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003aca:	687b      	ldr	r3, [r7, #4]
}
 8003acc:	4618      	mov	r0, r3
 8003ace:	371c      	adds	r7, #28
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad6:	4770      	bx	lr
 8003ad8:	40021000 	.word	0x40021000
 8003adc:	007a1200 	.word	0x007a1200
 8003ae0:	00f42400 	.word	0x00f42400

08003ae4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b086      	sub	sp, #24
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003aec:	2300      	movs	r3, #0
 8003aee:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003af0:	2300      	movs	r3, #0
 8003af2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	f000 8098 	beq.w	8003c32 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b02:	2300      	movs	r3, #0
 8003b04:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b06:	4b43      	ldr	r3, [pc, #268]	; (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d10d      	bne.n	8003b2e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b12:	4b40      	ldr	r3, [pc, #256]	; (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b16:	4a3f      	ldr	r2, [pc, #252]	; (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b1c:	6593      	str	r3, [r2, #88]	; 0x58
 8003b1e:	4b3d      	ldr	r3, [pc, #244]	; (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b26:	60bb      	str	r3, [r7, #8]
 8003b28:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003b2e:	4b3a      	ldr	r3, [pc, #232]	; (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4a39      	ldr	r2, [pc, #228]	; (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003b34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b38:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003b3a:	f7fd fbeb 	bl	8001314 <HAL_GetTick>
 8003b3e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003b40:	e009      	b.n	8003b56 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b42:	f7fd fbe7 	bl	8001314 <HAL_GetTick>
 8003b46:	4602      	mov	r2, r0
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	1ad3      	subs	r3, r2, r3
 8003b4c:	2b02      	cmp	r3, #2
 8003b4e:	d902      	bls.n	8003b56 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003b50:	2303      	movs	r3, #3
 8003b52:	74fb      	strb	r3, [r7, #19]
        break;
 8003b54:	e005      	b.n	8003b62 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003b56:	4b30      	ldr	r3, [pc, #192]	; (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d0ef      	beq.n	8003b42 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003b62:	7cfb      	ldrb	r3, [r7, #19]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d159      	bne.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003b68:	4b2a      	ldr	r3, [pc, #168]	; (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b72:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003b74:	697b      	ldr	r3, [r7, #20]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d01e      	beq.n	8003bb8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b7e:	697a      	ldr	r2, [r7, #20]
 8003b80:	429a      	cmp	r2, r3
 8003b82:	d019      	beq.n	8003bb8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003b84:	4b23      	ldr	r3, [pc, #140]	; (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b8a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b8e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003b90:	4b20      	ldr	r3, [pc, #128]	; (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b96:	4a1f      	ldr	r2, [pc, #124]	; (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b9c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003ba0:	4b1c      	ldr	r3, [pc, #112]	; (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ba2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ba6:	4a1b      	ldr	r2, [pc, #108]	; (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ba8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003bac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003bb0:	4a18      	ldr	r2, [pc, #96]	; (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003bb2:	697b      	ldr	r3, [r7, #20]
 8003bb4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003bb8:	697b      	ldr	r3, [r7, #20]
 8003bba:	f003 0301 	and.w	r3, r3, #1
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d016      	beq.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bc2:	f7fd fba7 	bl	8001314 <HAL_GetTick>
 8003bc6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003bc8:	e00b      	b.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bca:	f7fd fba3 	bl	8001314 <HAL_GetTick>
 8003bce:	4602      	mov	r2, r0
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	1ad3      	subs	r3, r2, r3
 8003bd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d902      	bls.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003bdc:	2303      	movs	r3, #3
 8003bde:	74fb      	strb	r3, [r7, #19]
            break;
 8003be0:	e006      	b.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003be2:	4b0c      	ldr	r3, [pc, #48]	; (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003be4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003be8:	f003 0302 	and.w	r3, r3, #2
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d0ec      	beq.n	8003bca <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003bf0:	7cfb      	ldrb	r3, [r7, #19]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d10b      	bne.n	8003c0e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003bf6:	4b07      	ldr	r3, [pc, #28]	; (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003bf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bfc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c04:	4903      	ldr	r1, [pc, #12]	; (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c06:	4313      	orrs	r3, r2
 8003c08:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003c0c:	e008      	b.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003c0e:	7cfb      	ldrb	r3, [r7, #19]
 8003c10:	74bb      	strb	r3, [r7, #18]
 8003c12:	e005      	b.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003c14:	40021000 	.word	0x40021000
 8003c18:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c1c:	7cfb      	ldrb	r3, [r7, #19]
 8003c1e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003c20:	7c7b      	ldrb	r3, [r7, #17]
 8003c22:	2b01      	cmp	r3, #1
 8003c24:	d105      	bne.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c26:	4ba6      	ldr	r3, [pc, #664]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c2a:	4aa5      	ldr	r2, [pc, #660]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c2c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c30:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f003 0301 	and.w	r3, r3, #1
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d00a      	beq.n	8003c54 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003c3e:	4ba0      	ldr	r3, [pc, #640]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c44:	f023 0203 	bic.w	r2, r3, #3
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	499c      	ldr	r1, [pc, #624]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f003 0302 	and.w	r3, r3, #2
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d00a      	beq.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003c60:	4b97      	ldr	r3, [pc, #604]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c66:	f023 020c 	bic.w	r2, r3, #12
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	689b      	ldr	r3, [r3, #8]
 8003c6e:	4994      	ldr	r1, [pc, #592]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c70:	4313      	orrs	r3, r2
 8003c72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f003 0304 	and.w	r3, r3, #4
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d00a      	beq.n	8003c98 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003c82:	4b8f      	ldr	r3, [pc, #572]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c88:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	68db      	ldr	r3, [r3, #12]
 8003c90:	498b      	ldr	r1, [pc, #556]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c92:	4313      	orrs	r3, r2
 8003c94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f003 0308 	and.w	r3, r3, #8
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d00a      	beq.n	8003cba <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003ca4:	4b86      	ldr	r3, [pc, #536]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ca6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003caa:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	691b      	ldr	r3, [r3, #16]
 8003cb2:	4983      	ldr	r1, [pc, #524]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003cb4:	4313      	orrs	r3, r2
 8003cb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f003 0320 	and.w	r3, r3, #32
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d00a      	beq.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003cc6:	4b7e      	ldr	r3, [pc, #504]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003cc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ccc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	695b      	ldr	r3, [r3, #20]
 8003cd4:	497a      	ldr	r1, [pc, #488]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d00a      	beq.n	8003cfe <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003ce8:	4b75      	ldr	r3, [pc, #468]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003cea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cee:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	699b      	ldr	r3, [r3, #24]
 8003cf6:	4972      	ldr	r1, [pc, #456]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d00a      	beq.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003d0a:	4b6d      	ldr	r3, [pc, #436]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d10:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	69db      	ldr	r3, [r3, #28]
 8003d18:	4969      	ldr	r1, [pc, #420]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d1a:	4313      	orrs	r3, r2
 8003d1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d00a      	beq.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003d2c:	4b64      	ldr	r3, [pc, #400]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d32:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6a1b      	ldr	r3, [r3, #32]
 8003d3a:	4961      	ldr	r1, [pc, #388]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d00a      	beq.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003d4e:	4b5c      	ldr	r3, [pc, #368]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d54:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d5c:	4958      	ldr	r1, [pc, #352]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d5e:	4313      	orrs	r3, r2
 8003d60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d015      	beq.n	8003d9c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003d70:	4b53      	ldr	r3, [pc, #332]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d76:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d7e:	4950      	ldr	r1, [pc, #320]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d80:	4313      	orrs	r3, r2
 8003d82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d8a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d8e:	d105      	bne.n	8003d9c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d90:	4b4b      	ldr	r3, [pc, #300]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d92:	68db      	ldr	r3, [r3, #12]
 8003d94:	4a4a      	ldr	r2, [pc, #296]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d96:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003d9a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d015      	beq.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003da8:	4b45      	ldr	r3, [pc, #276]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003daa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dae:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003db6:	4942      	ldr	r1, [pc, #264]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003db8:	4313      	orrs	r3, r2
 8003dba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dc2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003dc6:	d105      	bne.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003dc8:	4b3d      	ldr	r3, [pc, #244]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003dca:	68db      	ldr	r3, [r3, #12]
 8003dcc:	4a3c      	ldr	r2, [pc, #240]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003dce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003dd2:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d015      	beq.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003de0:	4b37      	ldr	r3, [pc, #220]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003de2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003de6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dee:	4934      	ldr	r1, [pc, #208]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003df0:	4313      	orrs	r3, r2
 8003df2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dfa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003dfe:	d105      	bne.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e00:	4b2f      	ldr	r3, [pc, #188]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e02:	68db      	ldr	r3, [r3, #12]
 8003e04:	4a2e      	ldr	r2, [pc, #184]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e06:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003e0a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d015      	beq.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003e18:	4b29      	ldr	r3, [pc, #164]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e1e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e26:	4926      	ldr	r1, [pc, #152]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e28:	4313      	orrs	r3, r2
 8003e2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e32:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003e36:	d105      	bne.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e38:	4b21      	ldr	r3, [pc, #132]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e3a:	68db      	ldr	r3, [r3, #12]
 8003e3c:	4a20      	ldr	r2, [pc, #128]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e3e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003e42:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d015      	beq.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003e50:	4b1b      	ldr	r3, [pc, #108]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e56:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e5e:	4918      	ldr	r1, [pc, #96]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e60:	4313      	orrs	r3, r2
 8003e62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e6a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003e6e:	d105      	bne.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e70:	4b13      	ldr	r3, [pc, #76]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e72:	68db      	ldr	r3, [r3, #12]
 8003e74:	4a12      	ldr	r2, [pc, #72]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e76:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003e7a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d015      	beq.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003e88:	4b0d      	ldr	r3, [pc, #52]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e8e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e96:	490a      	ldr	r1, [pc, #40]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ea2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003ea6:	d105      	bne.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003ea8:	4b05      	ldr	r3, [pc, #20]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003eaa:	68db      	ldr	r3, [r3, #12]
 8003eac:	4a04      	ldr	r2, [pc, #16]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003eae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003eb2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003eb4:	7cbb      	ldrb	r3, [r7, #18]
}
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	3718      	adds	r7, #24
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	bd80      	pop	{r7, pc}
 8003ebe:	bf00      	nop
 8003ec0:	40021000 	.word	0x40021000

08003ec4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b082      	sub	sp, #8
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d101      	bne.n	8003ed6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	e049      	b.n	8003f6a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003edc:	b2db      	uxtb	r3, r3
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d106      	bne.n	8003ef0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003eea:	6878      	ldr	r0, [r7, #4]
 8003eec:	f7fd f812 	bl	8000f14 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2202      	movs	r2, #2
 8003ef4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681a      	ldr	r2, [r3, #0]
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	3304      	adds	r3, #4
 8003f00:	4619      	mov	r1, r3
 8003f02:	4610      	mov	r0, r2
 8003f04:	f000 fc3c 	bl	8004780 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2201      	movs	r2, #1
 8003f0c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2201      	movs	r2, #1
 8003f14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2201      	movs	r2, #1
 8003f1c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2201      	movs	r2, #1
 8003f24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2201      	movs	r2, #1
 8003f2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2201      	movs	r2, #1
 8003f34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2201      	movs	r2, #1
 8003f3c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2201      	movs	r2, #1
 8003f44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2201      	movs	r2, #1
 8003f4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2201      	movs	r2, #1
 8003f54:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2201      	movs	r2, #1
 8003f5c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2201      	movs	r2, #1
 8003f64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003f68:	2300      	movs	r3, #0
}
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	3708      	adds	r7, #8
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	bd80      	pop	{r7, pc}
	...

08003f74 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003f74:	b480      	push	{r7}
 8003f76:	b085      	sub	sp, #20
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f82:	b2db      	uxtb	r3, r3
 8003f84:	2b01      	cmp	r3, #1
 8003f86:	d001      	beq.n	8003f8c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003f88:	2301      	movs	r3, #1
 8003f8a:	e04a      	b.n	8004022 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2202      	movs	r2, #2
 8003f90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	68da      	ldr	r2, [r3, #12]
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f042 0201 	orr.w	r2, r2, #1
 8003fa2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4a21      	ldr	r2, [pc, #132]	; (8004030 <HAL_TIM_Base_Start_IT+0xbc>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d018      	beq.n	8003fe0 <HAL_TIM_Base_Start_IT+0x6c>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fb6:	d013      	beq.n	8003fe0 <HAL_TIM_Base_Start_IT+0x6c>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4a1d      	ldr	r2, [pc, #116]	; (8004034 <HAL_TIM_Base_Start_IT+0xc0>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d00e      	beq.n	8003fe0 <HAL_TIM_Base_Start_IT+0x6c>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4a1c      	ldr	r2, [pc, #112]	; (8004038 <HAL_TIM_Base_Start_IT+0xc4>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d009      	beq.n	8003fe0 <HAL_TIM_Base_Start_IT+0x6c>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4a1a      	ldr	r2, [pc, #104]	; (800403c <HAL_TIM_Base_Start_IT+0xc8>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d004      	beq.n	8003fe0 <HAL_TIM_Base_Start_IT+0x6c>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4a19      	ldr	r2, [pc, #100]	; (8004040 <HAL_TIM_Base_Start_IT+0xcc>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d115      	bne.n	800400c <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	689a      	ldr	r2, [r3, #8]
 8003fe6:	4b17      	ldr	r3, [pc, #92]	; (8004044 <HAL_TIM_Base_Start_IT+0xd0>)
 8003fe8:	4013      	ands	r3, r2
 8003fea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	2b06      	cmp	r3, #6
 8003ff0:	d015      	beq.n	800401e <HAL_TIM_Base_Start_IT+0xaa>
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ff8:	d011      	beq.n	800401e <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	681a      	ldr	r2, [r3, #0]
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f042 0201 	orr.w	r2, r2, #1
 8004008:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800400a:	e008      	b.n	800401e <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	681a      	ldr	r2, [r3, #0]
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f042 0201 	orr.w	r2, r2, #1
 800401a:	601a      	str	r2, [r3, #0]
 800401c:	e000      	b.n	8004020 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800401e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004020:	2300      	movs	r3, #0
}
 8004022:	4618      	mov	r0, r3
 8004024:	3714      	adds	r7, #20
 8004026:	46bd      	mov	sp, r7
 8004028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402c:	4770      	bx	lr
 800402e:	bf00      	nop
 8004030:	40012c00 	.word	0x40012c00
 8004034:	40000400 	.word	0x40000400
 8004038:	40000800 	.word	0x40000800
 800403c:	40013400 	.word	0x40013400
 8004040:	40014000 	.word	0x40014000
 8004044:	00010007 	.word	0x00010007

08004048 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b082      	sub	sp, #8
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d101      	bne.n	800405a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004056:	2301      	movs	r3, #1
 8004058:	e049      	b.n	80040ee <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004060:	b2db      	uxtb	r3, r3
 8004062:	2b00      	cmp	r3, #0
 8004064:	d106      	bne.n	8004074 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2200      	movs	r2, #0
 800406a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800406e:	6878      	ldr	r0, [r7, #4]
 8004070:	f7fc ff0a 	bl	8000e88 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2202      	movs	r2, #2
 8004078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681a      	ldr	r2, [r3, #0]
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	3304      	adds	r3, #4
 8004084:	4619      	mov	r1, r3
 8004086:	4610      	mov	r0, r2
 8004088:	f000 fb7a 	bl	8004780 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2201      	movs	r2, #1
 8004090:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2201      	movs	r2, #1
 8004098:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2201      	movs	r2, #1
 80040a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2201      	movs	r2, #1
 80040a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2201      	movs	r2, #1
 80040b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2201      	movs	r2, #1
 80040b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2201      	movs	r2, #1
 80040c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2201      	movs	r2, #1
 80040c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2201      	movs	r2, #1
 80040d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2201      	movs	r2, #1
 80040d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2201      	movs	r2, #1
 80040e0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2201      	movs	r2, #1
 80040e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80040ec:	2300      	movs	r3, #0
}
 80040ee:	4618      	mov	r0, r3
 80040f0:	3708      	adds	r7, #8
 80040f2:	46bd      	mov	sp, r7
 80040f4:	bd80      	pop	{r7, pc}
	...

080040f8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b084      	sub	sp, #16
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
 8004100:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d109      	bne.n	800411c <HAL_TIM_PWM_Start+0x24>
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800410e:	b2db      	uxtb	r3, r3
 8004110:	2b01      	cmp	r3, #1
 8004112:	bf14      	ite	ne
 8004114:	2301      	movne	r3, #1
 8004116:	2300      	moveq	r3, #0
 8004118:	b2db      	uxtb	r3, r3
 800411a:	e03c      	b.n	8004196 <HAL_TIM_PWM_Start+0x9e>
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	2b04      	cmp	r3, #4
 8004120:	d109      	bne.n	8004136 <HAL_TIM_PWM_Start+0x3e>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004128:	b2db      	uxtb	r3, r3
 800412a:	2b01      	cmp	r3, #1
 800412c:	bf14      	ite	ne
 800412e:	2301      	movne	r3, #1
 8004130:	2300      	moveq	r3, #0
 8004132:	b2db      	uxtb	r3, r3
 8004134:	e02f      	b.n	8004196 <HAL_TIM_PWM_Start+0x9e>
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	2b08      	cmp	r3, #8
 800413a:	d109      	bne.n	8004150 <HAL_TIM_PWM_Start+0x58>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004142:	b2db      	uxtb	r3, r3
 8004144:	2b01      	cmp	r3, #1
 8004146:	bf14      	ite	ne
 8004148:	2301      	movne	r3, #1
 800414a:	2300      	moveq	r3, #0
 800414c:	b2db      	uxtb	r3, r3
 800414e:	e022      	b.n	8004196 <HAL_TIM_PWM_Start+0x9e>
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	2b0c      	cmp	r3, #12
 8004154:	d109      	bne.n	800416a <HAL_TIM_PWM_Start+0x72>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800415c:	b2db      	uxtb	r3, r3
 800415e:	2b01      	cmp	r3, #1
 8004160:	bf14      	ite	ne
 8004162:	2301      	movne	r3, #1
 8004164:	2300      	moveq	r3, #0
 8004166:	b2db      	uxtb	r3, r3
 8004168:	e015      	b.n	8004196 <HAL_TIM_PWM_Start+0x9e>
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	2b10      	cmp	r3, #16
 800416e:	d109      	bne.n	8004184 <HAL_TIM_PWM_Start+0x8c>
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004176:	b2db      	uxtb	r3, r3
 8004178:	2b01      	cmp	r3, #1
 800417a:	bf14      	ite	ne
 800417c:	2301      	movne	r3, #1
 800417e:	2300      	moveq	r3, #0
 8004180:	b2db      	uxtb	r3, r3
 8004182:	e008      	b.n	8004196 <HAL_TIM_PWM_Start+0x9e>
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800418a:	b2db      	uxtb	r3, r3
 800418c:	2b01      	cmp	r3, #1
 800418e:	bf14      	ite	ne
 8004190:	2301      	movne	r3, #1
 8004192:	2300      	moveq	r3, #0
 8004194:	b2db      	uxtb	r3, r3
 8004196:	2b00      	cmp	r3, #0
 8004198:	d001      	beq.n	800419e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800419a:	2301      	movs	r3, #1
 800419c:	e097      	b.n	80042ce <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d104      	bne.n	80041ae <HAL_TIM_PWM_Start+0xb6>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2202      	movs	r2, #2
 80041a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80041ac:	e023      	b.n	80041f6 <HAL_TIM_PWM_Start+0xfe>
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	2b04      	cmp	r3, #4
 80041b2:	d104      	bne.n	80041be <HAL_TIM_PWM_Start+0xc6>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2202      	movs	r2, #2
 80041b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80041bc:	e01b      	b.n	80041f6 <HAL_TIM_PWM_Start+0xfe>
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	2b08      	cmp	r3, #8
 80041c2:	d104      	bne.n	80041ce <HAL_TIM_PWM_Start+0xd6>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2202      	movs	r2, #2
 80041c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80041cc:	e013      	b.n	80041f6 <HAL_TIM_PWM_Start+0xfe>
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	2b0c      	cmp	r3, #12
 80041d2:	d104      	bne.n	80041de <HAL_TIM_PWM_Start+0xe6>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2202      	movs	r2, #2
 80041d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80041dc:	e00b      	b.n	80041f6 <HAL_TIM_PWM_Start+0xfe>
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	2b10      	cmp	r3, #16
 80041e2:	d104      	bne.n	80041ee <HAL_TIM_PWM_Start+0xf6>
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2202      	movs	r2, #2
 80041e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80041ec:	e003      	b.n	80041f6 <HAL_TIM_PWM_Start+0xfe>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2202      	movs	r2, #2
 80041f2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	2201      	movs	r2, #1
 80041fc:	6839      	ldr	r1, [r7, #0]
 80041fe:	4618      	mov	r0, r3
 8004200:	f000 fe44 	bl	8004e8c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4a33      	ldr	r2, [pc, #204]	; (80042d8 <HAL_TIM_PWM_Start+0x1e0>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d013      	beq.n	8004236 <HAL_TIM_PWM_Start+0x13e>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4a32      	ldr	r2, [pc, #200]	; (80042dc <HAL_TIM_PWM_Start+0x1e4>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d00e      	beq.n	8004236 <HAL_TIM_PWM_Start+0x13e>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4a30      	ldr	r2, [pc, #192]	; (80042e0 <HAL_TIM_PWM_Start+0x1e8>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d009      	beq.n	8004236 <HAL_TIM_PWM_Start+0x13e>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4a2f      	ldr	r2, [pc, #188]	; (80042e4 <HAL_TIM_PWM_Start+0x1ec>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d004      	beq.n	8004236 <HAL_TIM_PWM_Start+0x13e>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4a2d      	ldr	r2, [pc, #180]	; (80042e8 <HAL_TIM_PWM_Start+0x1f0>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d101      	bne.n	800423a <HAL_TIM_PWM_Start+0x142>
 8004236:	2301      	movs	r3, #1
 8004238:	e000      	b.n	800423c <HAL_TIM_PWM_Start+0x144>
 800423a:	2300      	movs	r3, #0
 800423c:	2b00      	cmp	r3, #0
 800423e:	d007      	beq.n	8004250 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800424e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4a20      	ldr	r2, [pc, #128]	; (80042d8 <HAL_TIM_PWM_Start+0x1e0>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d018      	beq.n	800428c <HAL_TIM_PWM_Start+0x194>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004262:	d013      	beq.n	800428c <HAL_TIM_PWM_Start+0x194>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4a20      	ldr	r2, [pc, #128]	; (80042ec <HAL_TIM_PWM_Start+0x1f4>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d00e      	beq.n	800428c <HAL_TIM_PWM_Start+0x194>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	4a1f      	ldr	r2, [pc, #124]	; (80042f0 <HAL_TIM_PWM_Start+0x1f8>)
 8004274:	4293      	cmp	r3, r2
 8004276:	d009      	beq.n	800428c <HAL_TIM_PWM_Start+0x194>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4a17      	ldr	r2, [pc, #92]	; (80042dc <HAL_TIM_PWM_Start+0x1e4>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d004      	beq.n	800428c <HAL_TIM_PWM_Start+0x194>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	4a16      	ldr	r2, [pc, #88]	; (80042e0 <HAL_TIM_PWM_Start+0x1e8>)
 8004288:	4293      	cmp	r3, r2
 800428a:	d115      	bne.n	80042b8 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	689a      	ldr	r2, [r3, #8]
 8004292:	4b18      	ldr	r3, [pc, #96]	; (80042f4 <HAL_TIM_PWM_Start+0x1fc>)
 8004294:	4013      	ands	r3, r2
 8004296:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	2b06      	cmp	r3, #6
 800429c:	d015      	beq.n	80042ca <HAL_TIM_PWM_Start+0x1d2>
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042a4:	d011      	beq.n	80042ca <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	681a      	ldr	r2, [r3, #0]
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f042 0201 	orr.w	r2, r2, #1
 80042b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042b6:	e008      	b.n	80042ca <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	681a      	ldr	r2, [r3, #0]
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f042 0201 	orr.w	r2, r2, #1
 80042c6:	601a      	str	r2, [r3, #0]
 80042c8:	e000      	b.n	80042cc <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042ca:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80042cc:	2300      	movs	r3, #0
}
 80042ce:	4618      	mov	r0, r3
 80042d0:	3710      	adds	r7, #16
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bd80      	pop	{r7, pc}
 80042d6:	bf00      	nop
 80042d8:	40012c00 	.word	0x40012c00
 80042dc:	40013400 	.word	0x40013400
 80042e0:	40014000 	.word	0x40014000
 80042e4:	40014400 	.word	0x40014400
 80042e8:	40014800 	.word	0x40014800
 80042ec:	40000400 	.word	0x40000400
 80042f0:	40000800 	.word	0x40000800
 80042f4:	00010007 	.word	0x00010007

080042f8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b086      	sub	sp, #24
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
 8004300:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d101      	bne.n	800430c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004308:	2301      	movs	r3, #1
 800430a:	e097      	b.n	800443c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004312:	b2db      	uxtb	r3, r3
 8004314:	2b00      	cmp	r3, #0
 8004316:	d106      	bne.n	8004326 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2200      	movs	r2, #0
 800431c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004320:	6878      	ldr	r0, [r7, #4]
 8004322:	f7fc fd0b 	bl	8000d3c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2202      	movs	r2, #2
 800432a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	689b      	ldr	r3, [r3, #8]
 8004334:	687a      	ldr	r2, [r7, #4]
 8004336:	6812      	ldr	r2, [r2, #0]
 8004338:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 800433c:	f023 0307 	bic.w	r3, r3, #7
 8004340:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681a      	ldr	r2, [r3, #0]
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	3304      	adds	r3, #4
 800434a:	4619      	mov	r1, r3
 800434c:	4610      	mov	r0, r2
 800434e:	f000 fa17 	bl	8004780 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	689b      	ldr	r3, [r3, #8]
 8004358:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	699b      	ldr	r3, [r3, #24]
 8004360:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	6a1b      	ldr	r3, [r3, #32]
 8004368:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	697a      	ldr	r2, [r7, #20]
 8004370:	4313      	orrs	r3, r2
 8004372:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004374:	693b      	ldr	r3, [r7, #16]
 8004376:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800437a:	f023 0303 	bic.w	r3, r3, #3
 800437e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	689a      	ldr	r2, [r3, #8]
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	699b      	ldr	r3, [r3, #24]
 8004388:	021b      	lsls	r3, r3, #8
 800438a:	4313      	orrs	r3, r2
 800438c:	693a      	ldr	r2, [r7, #16]
 800438e:	4313      	orrs	r3, r2
 8004390:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004392:	693b      	ldr	r3, [r7, #16]
 8004394:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004398:	f023 030c 	bic.w	r3, r3, #12
 800439c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800439e:	693b      	ldr	r3, [r7, #16]
 80043a0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80043a4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80043a8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	68da      	ldr	r2, [r3, #12]
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	69db      	ldr	r3, [r3, #28]
 80043b2:	021b      	lsls	r3, r3, #8
 80043b4:	4313      	orrs	r3, r2
 80043b6:	693a      	ldr	r2, [r7, #16]
 80043b8:	4313      	orrs	r3, r2
 80043ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	691b      	ldr	r3, [r3, #16]
 80043c0:	011a      	lsls	r2, r3, #4
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	6a1b      	ldr	r3, [r3, #32]
 80043c6:	031b      	lsls	r3, r3, #12
 80043c8:	4313      	orrs	r3, r2
 80043ca:	693a      	ldr	r2, [r7, #16]
 80043cc:	4313      	orrs	r3, r2
 80043ce:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80043d6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80043de:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	685a      	ldr	r2, [r3, #4]
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	695b      	ldr	r3, [r3, #20]
 80043e8:	011b      	lsls	r3, r3, #4
 80043ea:	4313      	orrs	r3, r2
 80043ec:	68fa      	ldr	r2, [r7, #12]
 80043ee:	4313      	orrs	r3, r2
 80043f0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	697a      	ldr	r2, [r7, #20]
 80043f8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	693a      	ldr	r2, [r7, #16]
 8004400:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	68fa      	ldr	r2, [r7, #12]
 8004408:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2201      	movs	r2, #1
 800440e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2201      	movs	r2, #1
 8004416:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2201      	movs	r2, #1
 800441e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2201      	movs	r2, #1
 8004426:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2201      	movs	r2, #1
 800442e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2201      	movs	r2, #1
 8004436:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800443a:	2300      	movs	r3, #0
}
 800443c:	4618      	mov	r0, r3
 800443e:	3718      	adds	r7, #24
 8004440:	46bd      	mov	sp, r7
 8004442:	bd80      	pop	{r7, pc}

08004444 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b084      	sub	sp, #16
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
 800444c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004454:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800445c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004464:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800446c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d110      	bne.n	8004496 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004474:	7bfb      	ldrb	r3, [r7, #15]
 8004476:	2b01      	cmp	r3, #1
 8004478:	d102      	bne.n	8004480 <HAL_TIM_Encoder_Start+0x3c>
     || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800447a:	7b7b      	ldrb	r3, [r7, #13]
 800447c:	2b01      	cmp	r3, #1
 800447e:	d001      	beq.n	8004484 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004480:	2301      	movs	r3, #1
 8004482:	e068      	b.n	8004556 <HAL_TIM_Encoder_Start+0x112>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2202      	movs	r2, #2
 8004488:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2202      	movs	r2, #2
 8004490:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004494:	e031      	b.n	80044fa <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	2b04      	cmp	r3, #4
 800449a:	d110      	bne.n	80044be <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800449c:	7bbb      	ldrb	r3, [r7, #14]
 800449e:	2b01      	cmp	r3, #1
 80044a0:	d102      	bne.n	80044a8 <HAL_TIM_Encoder_Start+0x64>
     || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80044a2:	7b3b      	ldrb	r3, [r7, #12]
 80044a4:	2b01      	cmp	r3, #1
 80044a6:	d001      	beq.n	80044ac <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80044a8:	2301      	movs	r3, #1
 80044aa:	e054      	b.n	8004556 <HAL_TIM_Encoder_Start+0x112>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2202      	movs	r2, #2
 80044b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2202      	movs	r2, #2
 80044b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80044bc:	e01d      	b.n	80044fa <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80044be:	7bfb      	ldrb	r3, [r7, #15]
 80044c0:	2b01      	cmp	r3, #1
 80044c2:	d108      	bne.n	80044d6 <HAL_TIM_Encoder_Start+0x92>
     || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80044c4:	7bbb      	ldrb	r3, [r7, #14]
 80044c6:	2b01      	cmp	r3, #1
 80044c8:	d105      	bne.n	80044d6 <HAL_TIM_Encoder_Start+0x92>
     || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80044ca:	7b7b      	ldrb	r3, [r7, #13]
 80044cc:	2b01      	cmp	r3, #1
 80044ce:	d102      	bne.n	80044d6 <HAL_TIM_Encoder_Start+0x92>
     || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80044d0:	7b3b      	ldrb	r3, [r7, #12]
 80044d2:	2b01      	cmp	r3, #1
 80044d4:	d001      	beq.n	80044da <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80044d6:	2301      	movs	r3, #1
 80044d8:	e03d      	b.n	8004556 <HAL_TIM_Encoder_Start+0x112>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2202      	movs	r2, #2
 80044de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2202      	movs	r2, #2
 80044e6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2202      	movs	r2, #2
 80044ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2202      	movs	r2, #2
 80044f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d002      	beq.n	8004506 <HAL_TIM_Encoder_Start+0xc2>
 8004500:	2b04      	cmp	r3, #4
 8004502:	d008      	beq.n	8004516 <HAL_TIM_Encoder_Start+0xd2>
 8004504:	e00f      	b.n	8004526 <HAL_TIM_Encoder_Start+0xe2>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	2201      	movs	r2, #1
 800450c:	2100      	movs	r1, #0
 800450e:	4618      	mov	r0, r3
 8004510:	f000 fcbc 	bl	8004e8c <TIM_CCxChannelCmd>
      break;
 8004514:	e016      	b.n	8004544 <HAL_TIM_Encoder_Start+0x100>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	2201      	movs	r2, #1
 800451c:	2104      	movs	r1, #4
 800451e:	4618      	mov	r0, r3
 8004520:	f000 fcb4 	bl	8004e8c <TIM_CCxChannelCmd>
      break;
 8004524:	e00e      	b.n	8004544 <HAL_TIM_Encoder_Start+0x100>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	2201      	movs	r2, #1
 800452c:	2100      	movs	r1, #0
 800452e:	4618      	mov	r0, r3
 8004530:	f000 fcac 	bl	8004e8c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	2201      	movs	r2, #1
 800453a:	2104      	movs	r1, #4
 800453c:	4618      	mov	r0, r3
 800453e:	f000 fca5 	bl	8004e8c <TIM_CCxChannelCmd>
      break;
 8004542:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	681a      	ldr	r2, [r3, #0]
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f042 0201 	orr.w	r2, r2, #1
 8004552:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004554:	2300      	movs	r3, #0
}
 8004556:	4618      	mov	r0, r3
 8004558:	3710      	adds	r7, #16
 800455a:	46bd      	mov	sp, r7
 800455c:	bd80      	pop	{r7, pc}
	...

08004560 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b084      	sub	sp, #16
 8004564:	af00      	add	r7, sp, #0
 8004566:	60f8      	str	r0, [r7, #12]
 8004568:	60b9      	str	r1, [r7, #8]
 800456a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004572:	2b01      	cmp	r3, #1
 8004574:	d101      	bne.n	800457a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004576:	2302      	movs	r3, #2
 8004578:	e0fd      	b.n	8004776 <HAL_TIM_PWM_ConfigChannel+0x216>
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	2201      	movs	r2, #1
 800457e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2b14      	cmp	r3, #20
 8004586:	f200 80f0 	bhi.w	800476a <HAL_TIM_PWM_ConfigChannel+0x20a>
 800458a:	a201      	add	r2, pc, #4	; (adr r2, 8004590 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800458c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004590:	080045e5 	.word	0x080045e5
 8004594:	0800476b 	.word	0x0800476b
 8004598:	0800476b 	.word	0x0800476b
 800459c:	0800476b 	.word	0x0800476b
 80045a0:	08004625 	.word	0x08004625
 80045a4:	0800476b 	.word	0x0800476b
 80045a8:	0800476b 	.word	0x0800476b
 80045ac:	0800476b 	.word	0x0800476b
 80045b0:	08004667 	.word	0x08004667
 80045b4:	0800476b 	.word	0x0800476b
 80045b8:	0800476b 	.word	0x0800476b
 80045bc:	0800476b 	.word	0x0800476b
 80045c0:	080046a7 	.word	0x080046a7
 80045c4:	0800476b 	.word	0x0800476b
 80045c8:	0800476b 	.word	0x0800476b
 80045cc:	0800476b 	.word	0x0800476b
 80045d0:	080046e9 	.word	0x080046e9
 80045d4:	0800476b 	.word	0x0800476b
 80045d8:	0800476b 	.word	0x0800476b
 80045dc:	0800476b 	.word	0x0800476b
 80045e0:	08004729 	.word	0x08004729
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	68b9      	ldr	r1, [r7, #8]
 80045ea:	4618      	mov	r0, r3
 80045ec:	f000 f958 	bl	80048a0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	699a      	ldr	r2, [r3, #24]
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f042 0208 	orr.w	r2, r2, #8
 80045fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	699a      	ldr	r2, [r3, #24]
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f022 0204 	bic.w	r2, r2, #4
 800460e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	6999      	ldr	r1, [r3, #24]
 8004616:	68bb      	ldr	r3, [r7, #8]
 8004618:	691a      	ldr	r2, [r3, #16]
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	430a      	orrs	r2, r1
 8004620:	619a      	str	r2, [r3, #24]
      break;
 8004622:	e0a3      	b.n	800476c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	68b9      	ldr	r1, [r7, #8]
 800462a:	4618      	mov	r0, r3
 800462c:	f000 f9c8 	bl	80049c0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	699a      	ldr	r2, [r3, #24]
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800463e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	699a      	ldr	r2, [r3, #24]
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800464e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	6999      	ldr	r1, [r3, #24]
 8004656:	68bb      	ldr	r3, [r7, #8]
 8004658:	691b      	ldr	r3, [r3, #16]
 800465a:	021a      	lsls	r2, r3, #8
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	430a      	orrs	r2, r1
 8004662:	619a      	str	r2, [r3, #24]
      break;
 8004664:	e082      	b.n	800476c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	68b9      	ldr	r1, [r7, #8]
 800466c:	4618      	mov	r0, r3
 800466e:	f000 fa31 	bl	8004ad4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	69da      	ldr	r2, [r3, #28]
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f042 0208 	orr.w	r2, r2, #8
 8004680:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	69da      	ldr	r2, [r3, #28]
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f022 0204 	bic.w	r2, r2, #4
 8004690:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	69d9      	ldr	r1, [r3, #28]
 8004698:	68bb      	ldr	r3, [r7, #8]
 800469a:	691a      	ldr	r2, [r3, #16]
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	430a      	orrs	r2, r1
 80046a2:	61da      	str	r2, [r3, #28]
      break;
 80046a4:	e062      	b.n	800476c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	68b9      	ldr	r1, [r7, #8]
 80046ac:	4618      	mov	r0, r3
 80046ae:	f000 fa99 	bl	8004be4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	69da      	ldr	r2, [r3, #28]
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80046c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	69da      	ldr	r2, [r3, #28]
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	69d9      	ldr	r1, [r3, #28]
 80046d8:	68bb      	ldr	r3, [r7, #8]
 80046da:	691b      	ldr	r3, [r3, #16]
 80046dc:	021a      	lsls	r2, r3, #8
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	430a      	orrs	r2, r1
 80046e4:	61da      	str	r2, [r3, #28]
      break;
 80046e6:	e041      	b.n	800476c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	68b9      	ldr	r1, [r7, #8]
 80046ee:	4618      	mov	r0, r3
 80046f0:	f000 fb02 	bl	8004cf8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f042 0208 	orr.w	r2, r2, #8
 8004702:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f022 0204 	bic.w	r2, r2, #4
 8004712:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800471a:	68bb      	ldr	r3, [r7, #8]
 800471c:	691a      	ldr	r2, [r3, #16]
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	430a      	orrs	r2, r1
 8004724:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8004726:	e021      	b.n	800476c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	68b9      	ldr	r1, [r7, #8]
 800472e:	4618      	mov	r0, r3
 8004730:	f000 fb46 	bl	8004dc0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004742:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004752:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800475a:	68bb      	ldr	r3, [r7, #8]
 800475c:	691b      	ldr	r3, [r3, #16]
 800475e:	021a      	lsls	r2, r3, #8
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	430a      	orrs	r2, r1
 8004766:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8004768:	e000      	b.n	800476c <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800476a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	2200      	movs	r2, #0
 8004770:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004774:	2300      	movs	r3, #0
}
 8004776:	4618      	mov	r0, r3
 8004778:	3710      	adds	r7, #16
 800477a:	46bd      	mov	sp, r7
 800477c:	bd80      	pop	{r7, pc}
 800477e:	bf00      	nop

08004780 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004780:	b480      	push	{r7}
 8004782:	b085      	sub	sp, #20
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
 8004788:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	4a3c      	ldr	r2, [pc, #240]	; (8004884 <TIM_Base_SetConfig+0x104>)
 8004794:	4293      	cmp	r3, r2
 8004796:	d00f      	beq.n	80047b8 <TIM_Base_SetConfig+0x38>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800479e:	d00b      	beq.n	80047b8 <TIM_Base_SetConfig+0x38>
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	4a39      	ldr	r2, [pc, #228]	; (8004888 <TIM_Base_SetConfig+0x108>)
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d007      	beq.n	80047b8 <TIM_Base_SetConfig+0x38>
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	4a38      	ldr	r2, [pc, #224]	; (800488c <TIM_Base_SetConfig+0x10c>)
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d003      	beq.n	80047b8 <TIM_Base_SetConfig+0x38>
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	4a37      	ldr	r2, [pc, #220]	; (8004890 <TIM_Base_SetConfig+0x110>)
 80047b4:	4293      	cmp	r3, r2
 80047b6:	d108      	bne.n	80047ca <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	685b      	ldr	r3, [r3, #4]
 80047c4:	68fa      	ldr	r2, [r7, #12]
 80047c6:	4313      	orrs	r3, r2
 80047c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	4a2d      	ldr	r2, [pc, #180]	; (8004884 <TIM_Base_SetConfig+0x104>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d01b      	beq.n	800480a <TIM_Base_SetConfig+0x8a>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047d8:	d017      	beq.n	800480a <TIM_Base_SetConfig+0x8a>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	4a2a      	ldr	r2, [pc, #168]	; (8004888 <TIM_Base_SetConfig+0x108>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d013      	beq.n	800480a <TIM_Base_SetConfig+0x8a>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	4a29      	ldr	r2, [pc, #164]	; (800488c <TIM_Base_SetConfig+0x10c>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d00f      	beq.n	800480a <TIM_Base_SetConfig+0x8a>
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	4a28      	ldr	r2, [pc, #160]	; (8004890 <TIM_Base_SetConfig+0x110>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d00b      	beq.n	800480a <TIM_Base_SetConfig+0x8a>
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	4a27      	ldr	r2, [pc, #156]	; (8004894 <TIM_Base_SetConfig+0x114>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d007      	beq.n	800480a <TIM_Base_SetConfig+0x8a>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	4a26      	ldr	r2, [pc, #152]	; (8004898 <TIM_Base_SetConfig+0x118>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d003      	beq.n	800480a <TIM_Base_SetConfig+0x8a>
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	4a25      	ldr	r2, [pc, #148]	; (800489c <TIM_Base_SetConfig+0x11c>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d108      	bne.n	800481c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004810:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	68db      	ldr	r3, [r3, #12]
 8004816:	68fa      	ldr	r2, [r7, #12]
 8004818:	4313      	orrs	r3, r2
 800481a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	695b      	ldr	r3, [r3, #20]
 8004826:	4313      	orrs	r3, r2
 8004828:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	68fa      	ldr	r2, [r7, #12]
 800482e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	689a      	ldr	r2, [r3, #8]
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	681a      	ldr	r2, [r3, #0]
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	4a10      	ldr	r2, [pc, #64]	; (8004884 <TIM_Base_SetConfig+0x104>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d00f      	beq.n	8004868 <TIM_Base_SetConfig+0xe8>
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	4a11      	ldr	r2, [pc, #68]	; (8004890 <TIM_Base_SetConfig+0x110>)
 800484c:	4293      	cmp	r3, r2
 800484e:	d00b      	beq.n	8004868 <TIM_Base_SetConfig+0xe8>
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	4a10      	ldr	r2, [pc, #64]	; (8004894 <TIM_Base_SetConfig+0x114>)
 8004854:	4293      	cmp	r3, r2
 8004856:	d007      	beq.n	8004868 <TIM_Base_SetConfig+0xe8>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	4a0f      	ldr	r2, [pc, #60]	; (8004898 <TIM_Base_SetConfig+0x118>)
 800485c:	4293      	cmp	r3, r2
 800485e:	d003      	beq.n	8004868 <TIM_Base_SetConfig+0xe8>
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	4a0e      	ldr	r2, [pc, #56]	; (800489c <TIM_Base_SetConfig+0x11c>)
 8004864:	4293      	cmp	r3, r2
 8004866:	d103      	bne.n	8004870 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	691a      	ldr	r2, [r3, #16]
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2201      	movs	r2, #1
 8004874:	615a      	str	r2, [r3, #20]
}
 8004876:	bf00      	nop
 8004878:	3714      	adds	r7, #20
 800487a:	46bd      	mov	sp, r7
 800487c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004880:	4770      	bx	lr
 8004882:	bf00      	nop
 8004884:	40012c00 	.word	0x40012c00
 8004888:	40000400 	.word	0x40000400
 800488c:	40000800 	.word	0x40000800
 8004890:	40013400 	.word	0x40013400
 8004894:	40014000 	.word	0x40014000
 8004898:	40014400 	.word	0x40014400
 800489c:	40014800 	.word	0x40014800

080048a0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80048a0:	b480      	push	{r7}
 80048a2:	b087      	sub	sp, #28
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
 80048a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6a1b      	ldr	r3, [r3, #32]
 80048ae:	f023 0201 	bic.w	r2, r3, #1
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6a1b      	ldr	r3, [r3, #32]
 80048ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	685b      	ldr	r3, [r3, #4]
 80048c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	699b      	ldr	r3, [r3, #24]
 80048c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80048ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	f023 0303 	bic.w	r3, r3, #3
 80048da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	68fa      	ldr	r2, [r7, #12]
 80048e2:	4313      	orrs	r3, r2
 80048e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80048e6:	697b      	ldr	r3, [r7, #20]
 80048e8:	f023 0302 	bic.w	r3, r3, #2
 80048ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	689b      	ldr	r3, [r3, #8]
 80048f2:	697a      	ldr	r2, [r7, #20]
 80048f4:	4313      	orrs	r3, r2
 80048f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	4a2c      	ldr	r2, [pc, #176]	; (80049ac <TIM_OC1_SetConfig+0x10c>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d00f      	beq.n	8004920 <TIM_OC1_SetConfig+0x80>
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	4a2b      	ldr	r2, [pc, #172]	; (80049b0 <TIM_OC1_SetConfig+0x110>)
 8004904:	4293      	cmp	r3, r2
 8004906:	d00b      	beq.n	8004920 <TIM_OC1_SetConfig+0x80>
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	4a2a      	ldr	r2, [pc, #168]	; (80049b4 <TIM_OC1_SetConfig+0x114>)
 800490c:	4293      	cmp	r3, r2
 800490e:	d007      	beq.n	8004920 <TIM_OC1_SetConfig+0x80>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	4a29      	ldr	r2, [pc, #164]	; (80049b8 <TIM_OC1_SetConfig+0x118>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d003      	beq.n	8004920 <TIM_OC1_SetConfig+0x80>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	4a28      	ldr	r2, [pc, #160]	; (80049bc <TIM_OC1_SetConfig+0x11c>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d10c      	bne.n	800493a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004920:	697b      	ldr	r3, [r7, #20]
 8004922:	f023 0308 	bic.w	r3, r3, #8
 8004926:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	68db      	ldr	r3, [r3, #12]
 800492c:	697a      	ldr	r2, [r7, #20]
 800492e:	4313      	orrs	r3, r2
 8004930:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004932:	697b      	ldr	r3, [r7, #20]
 8004934:	f023 0304 	bic.w	r3, r3, #4
 8004938:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	4a1b      	ldr	r2, [pc, #108]	; (80049ac <TIM_OC1_SetConfig+0x10c>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d00f      	beq.n	8004962 <TIM_OC1_SetConfig+0xc2>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	4a1a      	ldr	r2, [pc, #104]	; (80049b0 <TIM_OC1_SetConfig+0x110>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d00b      	beq.n	8004962 <TIM_OC1_SetConfig+0xc2>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	4a19      	ldr	r2, [pc, #100]	; (80049b4 <TIM_OC1_SetConfig+0x114>)
 800494e:	4293      	cmp	r3, r2
 8004950:	d007      	beq.n	8004962 <TIM_OC1_SetConfig+0xc2>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	4a18      	ldr	r2, [pc, #96]	; (80049b8 <TIM_OC1_SetConfig+0x118>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d003      	beq.n	8004962 <TIM_OC1_SetConfig+0xc2>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	4a17      	ldr	r2, [pc, #92]	; (80049bc <TIM_OC1_SetConfig+0x11c>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d111      	bne.n	8004986 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004962:	693b      	ldr	r3, [r7, #16]
 8004964:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004968:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800496a:	693b      	ldr	r3, [r7, #16]
 800496c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004970:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	695b      	ldr	r3, [r3, #20]
 8004976:	693a      	ldr	r2, [r7, #16]
 8004978:	4313      	orrs	r3, r2
 800497a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	699b      	ldr	r3, [r3, #24]
 8004980:	693a      	ldr	r2, [r7, #16]
 8004982:	4313      	orrs	r3, r2
 8004984:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	693a      	ldr	r2, [r7, #16]
 800498a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	68fa      	ldr	r2, [r7, #12]
 8004990:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	685a      	ldr	r2, [r3, #4]
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	697a      	ldr	r2, [r7, #20]
 800499e:	621a      	str	r2, [r3, #32]
}
 80049a0:	bf00      	nop
 80049a2:	371c      	adds	r7, #28
 80049a4:	46bd      	mov	sp, r7
 80049a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049aa:	4770      	bx	lr
 80049ac:	40012c00 	.word	0x40012c00
 80049b0:	40013400 	.word	0x40013400
 80049b4:	40014000 	.word	0x40014000
 80049b8:	40014400 	.word	0x40014400
 80049bc:	40014800 	.word	0x40014800

080049c0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80049c0:	b480      	push	{r7}
 80049c2:	b087      	sub	sp, #28
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
 80049c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6a1b      	ldr	r3, [r3, #32]
 80049ce:	f023 0210 	bic.w	r2, r3, #16
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6a1b      	ldr	r3, [r3, #32]
 80049da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	685b      	ldr	r3, [r3, #4]
 80049e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	699b      	ldr	r3, [r3, #24]
 80049e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80049ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	021b      	lsls	r3, r3, #8
 8004a02:	68fa      	ldr	r2, [r7, #12]
 8004a04:	4313      	orrs	r3, r2
 8004a06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004a08:	697b      	ldr	r3, [r7, #20]
 8004a0a:	f023 0320 	bic.w	r3, r3, #32
 8004a0e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	689b      	ldr	r3, [r3, #8]
 8004a14:	011b      	lsls	r3, r3, #4
 8004a16:	697a      	ldr	r2, [r7, #20]
 8004a18:	4313      	orrs	r3, r2
 8004a1a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	4a28      	ldr	r2, [pc, #160]	; (8004ac0 <TIM_OC2_SetConfig+0x100>)
 8004a20:	4293      	cmp	r3, r2
 8004a22:	d003      	beq.n	8004a2c <TIM_OC2_SetConfig+0x6c>
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	4a27      	ldr	r2, [pc, #156]	; (8004ac4 <TIM_OC2_SetConfig+0x104>)
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d10d      	bne.n	8004a48 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004a2c:	697b      	ldr	r3, [r7, #20]
 8004a2e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a32:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	68db      	ldr	r3, [r3, #12]
 8004a38:	011b      	lsls	r3, r3, #4
 8004a3a:	697a      	ldr	r2, [r7, #20]
 8004a3c:	4313      	orrs	r3, r2
 8004a3e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004a40:	697b      	ldr	r3, [r7, #20]
 8004a42:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a46:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	4a1d      	ldr	r2, [pc, #116]	; (8004ac0 <TIM_OC2_SetConfig+0x100>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d00f      	beq.n	8004a70 <TIM_OC2_SetConfig+0xb0>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	4a1c      	ldr	r2, [pc, #112]	; (8004ac4 <TIM_OC2_SetConfig+0x104>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d00b      	beq.n	8004a70 <TIM_OC2_SetConfig+0xb0>
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	4a1b      	ldr	r2, [pc, #108]	; (8004ac8 <TIM_OC2_SetConfig+0x108>)
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d007      	beq.n	8004a70 <TIM_OC2_SetConfig+0xb0>
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	4a1a      	ldr	r2, [pc, #104]	; (8004acc <TIM_OC2_SetConfig+0x10c>)
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d003      	beq.n	8004a70 <TIM_OC2_SetConfig+0xb0>
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	4a19      	ldr	r2, [pc, #100]	; (8004ad0 <TIM_OC2_SetConfig+0x110>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d113      	bne.n	8004a98 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004a70:	693b      	ldr	r3, [r7, #16]
 8004a72:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004a76:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004a78:	693b      	ldr	r3, [r7, #16]
 8004a7a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004a7e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	695b      	ldr	r3, [r3, #20]
 8004a84:	009b      	lsls	r3, r3, #2
 8004a86:	693a      	ldr	r2, [r7, #16]
 8004a88:	4313      	orrs	r3, r2
 8004a8a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	699b      	ldr	r3, [r3, #24]
 8004a90:	009b      	lsls	r3, r3, #2
 8004a92:	693a      	ldr	r2, [r7, #16]
 8004a94:	4313      	orrs	r3, r2
 8004a96:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	693a      	ldr	r2, [r7, #16]
 8004a9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	68fa      	ldr	r2, [r7, #12]
 8004aa2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	685a      	ldr	r2, [r3, #4]
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	697a      	ldr	r2, [r7, #20]
 8004ab0:	621a      	str	r2, [r3, #32]
}
 8004ab2:	bf00      	nop
 8004ab4:	371c      	adds	r7, #28
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004abc:	4770      	bx	lr
 8004abe:	bf00      	nop
 8004ac0:	40012c00 	.word	0x40012c00
 8004ac4:	40013400 	.word	0x40013400
 8004ac8:	40014000 	.word	0x40014000
 8004acc:	40014400 	.word	0x40014400
 8004ad0:	40014800 	.word	0x40014800

08004ad4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ad4:	b480      	push	{r7}
 8004ad6:	b087      	sub	sp, #28
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
 8004adc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6a1b      	ldr	r3, [r3, #32]
 8004ae2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6a1b      	ldr	r3, [r3, #32]
 8004aee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	685b      	ldr	r3, [r3, #4]
 8004af4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	69db      	ldr	r3, [r3, #28]
 8004afa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	f023 0303 	bic.w	r3, r3, #3
 8004b0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	68fa      	ldr	r2, [r7, #12]
 8004b16:	4313      	orrs	r3, r2
 8004b18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004b1a:	697b      	ldr	r3, [r7, #20]
 8004b1c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004b20:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	689b      	ldr	r3, [r3, #8]
 8004b26:	021b      	lsls	r3, r3, #8
 8004b28:	697a      	ldr	r2, [r7, #20]
 8004b2a:	4313      	orrs	r3, r2
 8004b2c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	4a27      	ldr	r2, [pc, #156]	; (8004bd0 <TIM_OC3_SetConfig+0xfc>)
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d003      	beq.n	8004b3e <TIM_OC3_SetConfig+0x6a>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	4a26      	ldr	r2, [pc, #152]	; (8004bd4 <TIM_OC3_SetConfig+0x100>)
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d10d      	bne.n	8004b5a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004b3e:	697b      	ldr	r3, [r7, #20]
 8004b40:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004b44:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	68db      	ldr	r3, [r3, #12]
 8004b4a:	021b      	lsls	r3, r3, #8
 8004b4c:	697a      	ldr	r2, [r7, #20]
 8004b4e:	4313      	orrs	r3, r2
 8004b50:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004b52:	697b      	ldr	r3, [r7, #20]
 8004b54:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004b58:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	4a1c      	ldr	r2, [pc, #112]	; (8004bd0 <TIM_OC3_SetConfig+0xfc>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d00f      	beq.n	8004b82 <TIM_OC3_SetConfig+0xae>
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	4a1b      	ldr	r2, [pc, #108]	; (8004bd4 <TIM_OC3_SetConfig+0x100>)
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d00b      	beq.n	8004b82 <TIM_OC3_SetConfig+0xae>
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	4a1a      	ldr	r2, [pc, #104]	; (8004bd8 <TIM_OC3_SetConfig+0x104>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d007      	beq.n	8004b82 <TIM_OC3_SetConfig+0xae>
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	4a19      	ldr	r2, [pc, #100]	; (8004bdc <TIM_OC3_SetConfig+0x108>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d003      	beq.n	8004b82 <TIM_OC3_SetConfig+0xae>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	4a18      	ldr	r2, [pc, #96]	; (8004be0 <TIM_OC3_SetConfig+0x10c>)
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d113      	bne.n	8004baa <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004b82:	693b      	ldr	r3, [r7, #16]
 8004b84:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004b88:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004b8a:	693b      	ldr	r3, [r7, #16]
 8004b8c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004b90:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	695b      	ldr	r3, [r3, #20]
 8004b96:	011b      	lsls	r3, r3, #4
 8004b98:	693a      	ldr	r2, [r7, #16]
 8004b9a:	4313      	orrs	r3, r2
 8004b9c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	699b      	ldr	r3, [r3, #24]
 8004ba2:	011b      	lsls	r3, r3, #4
 8004ba4:	693a      	ldr	r2, [r7, #16]
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	693a      	ldr	r2, [r7, #16]
 8004bae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	68fa      	ldr	r2, [r7, #12]
 8004bb4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	685a      	ldr	r2, [r3, #4]
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	697a      	ldr	r2, [r7, #20]
 8004bc2:	621a      	str	r2, [r3, #32]
}
 8004bc4:	bf00      	nop
 8004bc6:	371c      	adds	r7, #28
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bce:	4770      	bx	lr
 8004bd0:	40012c00 	.word	0x40012c00
 8004bd4:	40013400 	.word	0x40013400
 8004bd8:	40014000 	.word	0x40014000
 8004bdc:	40014400 	.word	0x40014400
 8004be0:	40014800 	.word	0x40014800

08004be4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004be4:	b480      	push	{r7}
 8004be6:	b087      	sub	sp, #28
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
 8004bec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6a1b      	ldr	r3, [r3, #32]
 8004bf2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6a1b      	ldr	r3, [r3, #32]
 8004bfe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	685b      	ldr	r3, [r3, #4]
 8004c04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	69db      	ldr	r3, [r3, #28]
 8004c0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004c12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c1e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	021b      	lsls	r3, r3, #8
 8004c26:	68fa      	ldr	r2, [r7, #12]
 8004c28:	4313      	orrs	r3, r2
 8004c2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004c2c:	697b      	ldr	r3, [r7, #20]
 8004c2e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004c32:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	689b      	ldr	r3, [r3, #8]
 8004c38:	031b      	lsls	r3, r3, #12
 8004c3a:	697a      	ldr	r2, [r7, #20]
 8004c3c:	4313      	orrs	r3, r2
 8004c3e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	4a28      	ldr	r2, [pc, #160]	; (8004ce4 <TIM_OC4_SetConfig+0x100>)
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d003      	beq.n	8004c50 <TIM_OC4_SetConfig+0x6c>
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	4a27      	ldr	r2, [pc, #156]	; (8004ce8 <TIM_OC4_SetConfig+0x104>)
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d10d      	bne.n	8004c6c <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8004c50:	697b      	ldr	r3, [r7, #20]
 8004c52:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004c56:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	68db      	ldr	r3, [r3, #12]
 8004c5c:	031b      	lsls	r3, r3, #12
 8004c5e:	697a      	ldr	r2, [r7, #20]
 8004c60:	4313      	orrs	r3, r2
 8004c62:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8004c64:	697b      	ldr	r3, [r7, #20]
 8004c66:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004c6a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	4a1d      	ldr	r2, [pc, #116]	; (8004ce4 <TIM_OC4_SetConfig+0x100>)
 8004c70:	4293      	cmp	r3, r2
 8004c72:	d00f      	beq.n	8004c94 <TIM_OC4_SetConfig+0xb0>
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	4a1c      	ldr	r2, [pc, #112]	; (8004ce8 <TIM_OC4_SetConfig+0x104>)
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d00b      	beq.n	8004c94 <TIM_OC4_SetConfig+0xb0>
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	4a1b      	ldr	r2, [pc, #108]	; (8004cec <TIM_OC4_SetConfig+0x108>)
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d007      	beq.n	8004c94 <TIM_OC4_SetConfig+0xb0>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	4a1a      	ldr	r2, [pc, #104]	; (8004cf0 <TIM_OC4_SetConfig+0x10c>)
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d003      	beq.n	8004c94 <TIM_OC4_SetConfig+0xb0>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	4a19      	ldr	r2, [pc, #100]	; (8004cf4 <TIM_OC4_SetConfig+0x110>)
 8004c90:	4293      	cmp	r3, r2
 8004c92:	d113      	bne.n	8004cbc <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004c94:	693b      	ldr	r3, [r7, #16]
 8004c96:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004c9a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8004c9c:	693b      	ldr	r3, [r7, #16]
 8004c9e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004ca2:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	695b      	ldr	r3, [r3, #20]
 8004ca8:	019b      	lsls	r3, r3, #6
 8004caa:	693a      	ldr	r2, [r7, #16]
 8004cac:	4313      	orrs	r3, r2
 8004cae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	699b      	ldr	r3, [r3, #24]
 8004cb4:	019b      	lsls	r3, r3, #6
 8004cb6:	693a      	ldr	r2, [r7, #16]
 8004cb8:	4313      	orrs	r3, r2
 8004cba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	693a      	ldr	r2, [r7, #16]
 8004cc0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	68fa      	ldr	r2, [r7, #12]
 8004cc6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	685a      	ldr	r2, [r3, #4]
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	697a      	ldr	r2, [r7, #20]
 8004cd4:	621a      	str	r2, [r3, #32]
}
 8004cd6:	bf00      	nop
 8004cd8:	371c      	adds	r7, #28
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce0:	4770      	bx	lr
 8004ce2:	bf00      	nop
 8004ce4:	40012c00 	.word	0x40012c00
 8004ce8:	40013400 	.word	0x40013400
 8004cec:	40014000 	.word	0x40014000
 8004cf0:	40014400 	.word	0x40014400
 8004cf4:	40014800 	.word	0x40014800

08004cf8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004cf8:	b480      	push	{r7}
 8004cfa:	b087      	sub	sp, #28
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
 8004d00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6a1b      	ldr	r3, [r3, #32]
 8004d06:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6a1b      	ldr	r3, [r3, #32]
 8004d12:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	685b      	ldr	r3, [r3, #4]
 8004d18:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	68fa      	ldr	r2, [r7, #12]
 8004d32:	4313      	orrs	r3, r2
 8004d34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004d36:	693b      	ldr	r3, [r7, #16]
 8004d38:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004d3c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	689b      	ldr	r3, [r3, #8]
 8004d42:	041b      	lsls	r3, r3, #16
 8004d44:	693a      	ldr	r2, [r7, #16]
 8004d46:	4313      	orrs	r3, r2
 8004d48:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	4a17      	ldr	r2, [pc, #92]	; (8004dac <TIM_OC5_SetConfig+0xb4>)
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d00f      	beq.n	8004d72 <TIM_OC5_SetConfig+0x7a>
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	4a16      	ldr	r2, [pc, #88]	; (8004db0 <TIM_OC5_SetConfig+0xb8>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d00b      	beq.n	8004d72 <TIM_OC5_SetConfig+0x7a>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	4a15      	ldr	r2, [pc, #84]	; (8004db4 <TIM_OC5_SetConfig+0xbc>)
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d007      	beq.n	8004d72 <TIM_OC5_SetConfig+0x7a>
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	4a14      	ldr	r2, [pc, #80]	; (8004db8 <TIM_OC5_SetConfig+0xc0>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d003      	beq.n	8004d72 <TIM_OC5_SetConfig+0x7a>
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	4a13      	ldr	r2, [pc, #76]	; (8004dbc <TIM_OC5_SetConfig+0xc4>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d109      	bne.n	8004d86 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004d72:	697b      	ldr	r3, [r7, #20]
 8004d74:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d78:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	695b      	ldr	r3, [r3, #20]
 8004d7e:	021b      	lsls	r3, r3, #8
 8004d80:	697a      	ldr	r2, [r7, #20]
 8004d82:	4313      	orrs	r3, r2
 8004d84:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	697a      	ldr	r2, [r7, #20]
 8004d8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	68fa      	ldr	r2, [r7, #12]
 8004d90:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	685a      	ldr	r2, [r3, #4]
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	693a      	ldr	r2, [r7, #16]
 8004d9e:	621a      	str	r2, [r3, #32]
}
 8004da0:	bf00      	nop
 8004da2:	371c      	adds	r7, #28
 8004da4:	46bd      	mov	sp, r7
 8004da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004daa:	4770      	bx	lr
 8004dac:	40012c00 	.word	0x40012c00
 8004db0:	40013400 	.word	0x40013400
 8004db4:	40014000 	.word	0x40014000
 8004db8:	40014400 	.word	0x40014400
 8004dbc:	40014800 	.word	0x40014800

08004dc0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004dc0:	b480      	push	{r7}
 8004dc2:	b087      	sub	sp, #28
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
 8004dc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6a1b      	ldr	r3, [r3, #32]
 8004dce:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6a1b      	ldr	r3, [r3, #32]
 8004dda:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	685b      	ldr	r3, [r3, #4]
 8004de0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004de6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004dee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004df2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	021b      	lsls	r3, r3, #8
 8004dfa:	68fa      	ldr	r2, [r7, #12]
 8004dfc:	4313      	orrs	r3, r2
 8004dfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004e00:	693b      	ldr	r3, [r7, #16]
 8004e02:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004e06:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	689b      	ldr	r3, [r3, #8]
 8004e0c:	051b      	lsls	r3, r3, #20
 8004e0e:	693a      	ldr	r2, [r7, #16]
 8004e10:	4313      	orrs	r3, r2
 8004e12:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	4a18      	ldr	r2, [pc, #96]	; (8004e78 <TIM_OC6_SetConfig+0xb8>)
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	d00f      	beq.n	8004e3c <TIM_OC6_SetConfig+0x7c>
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	4a17      	ldr	r2, [pc, #92]	; (8004e7c <TIM_OC6_SetConfig+0xbc>)
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d00b      	beq.n	8004e3c <TIM_OC6_SetConfig+0x7c>
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	4a16      	ldr	r2, [pc, #88]	; (8004e80 <TIM_OC6_SetConfig+0xc0>)
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d007      	beq.n	8004e3c <TIM_OC6_SetConfig+0x7c>
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	4a15      	ldr	r2, [pc, #84]	; (8004e84 <TIM_OC6_SetConfig+0xc4>)
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d003      	beq.n	8004e3c <TIM_OC6_SetConfig+0x7c>
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	4a14      	ldr	r2, [pc, #80]	; (8004e88 <TIM_OC6_SetConfig+0xc8>)
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d109      	bne.n	8004e50 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004e3c:	697b      	ldr	r3, [r7, #20]
 8004e3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004e42:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	695b      	ldr	r3, [r3, #20]
 8004e48:	029b      	lsls	r3, r3, #10
 8004e4a:	697a      	ldr	r2, [r7, #20]
 8004e4c:	4313      	orrs	r3, r2
 8004e4e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	697a      	ldr	r2, [r7, #20]
 8004e54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	68fa      	ldr	r2, [r7, #12]
 8004e5a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	685a      	ldr	r2, [r3, #4]
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	693a      	ldr	r2, [r7, #16]
 8004e68:	621a      	str	r2, [r3, #32]
}
 8004e6a:	bf00      	nop
 8004e6c:	371c      	adds	r7, #28
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e74:	4770      	bx	lr
 8004e76:	bf00      	nop
 8004e78:	40012c00 	.word	0x40012c00
 8004e7c:	40013400 	.word	0x40013400
 8004e80:	40014000 	.word	0x40014000
 8004e84:	40014400 	.word	0x40014400
 8004e88:	40014800 	.word	0x40014800

08004e8c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004e8c:	b480      	push	{r7}
 8004e8e:	b087      	sub	sp, #28
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	60f8      	str	r0, [r7, #12]
 8004e94:	60b9      	str	r1, [r7, #8]
 8004e96:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004e98:	68bb      	ldr	r3, [r7, #8]
 8004e9a:	f003 031f 	and.w	r3, r3, #31
 8004e9e:	2201      	movs	r2, #1
 8004ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ea4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	6a1a      	ldr	r2, [r3, #32]
 8004eaa:	697b      	ldr	r3, [r7, #20]
 8004eac:	43db      	mvns	r3, r3
 8004eae:	401a      	ands	r2, r3
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	6a1a      	ldr	r2, [r3, #32]
 8004eb8:	68bb      	ldr	r3, [r7, #8]
 8004eba:	f003 031f 	and.w	r3, r3, #31
 8004ebe:	6879      	ldr	r1, [r7, #4]
 8004ec0:	fa01 f303 	lsl.w	r3, r1, r3
 8004ec4:	431a      	orrs	r2, r3
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	621a      	str	r2, [r3, #32]
}
 8004eca:	bf00      	nop
 8004ecc:	371c      	adds	r7, #28
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed4:	4770      	bx	lr
	...

08004ed8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004ed8:	b480      	push	{r7}
 8004eda:	b085      	sub	sp, #20
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
 8004ee0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ee8:	2b01      	cmp	r3, #1
 8004eea:	d101      	bne.n	8004ef0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004eec:	2302      	movs	r3, #2
 8004eee:	e065      	b.n	8004fbc <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2201      	movs	r2, #1
 8004ef4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2202      	movs	r2, #2
 8004efc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	685b      	ldr	r3, [r3, #4]
 8004f06:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	689b      	ldr	r3, [r3, #8]
 8004f0e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	4a2c      	ldr	r2, [pc, #176]	; (8004fc8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d004      	beq.n	8004f24 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	4a2b      	ldr	r2, [pc, #172]	; (8004fcc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d108      	bne.n	8004f36 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004f2a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	685b      	ldr	r3, [r3, #4]
 8004f30:	68fa      	ldr	r2, [r7, #12]
 8004f32:	4313      	orrs	r3, r2
 8004f34:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8004f3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f40:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	68fa      	ldr	r2, [r7, #12]
 8004f48:	4313      	orrs	r3, r2
 8004f4a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	68fa      	ldr	r2, [r7, #12]
 8004f52:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	4a1b      	ldr	r2, [pc, #108]	; (8004fc8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d018      	beq.n	8004f90 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f66:	d013      	beq.n	8004f90 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	4a18      	ldr	r2, [pc, #96]	; (8004fd0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d00e      	beq.n	8004f90 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	4a17      	ldr	r2, [pc, #92]	; (8004fd4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d009      	beq.n	8004f90 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	4a12      	ldr	r2, [pc, #72]	; (8004fcc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d004      	beq.n	8004f90 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	4a13      	ldr	r2, [pc, #76]	; (8004fd8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d10c      	bne.n	8004faa <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004f90:	68bb      	ldr	r3, [r7, #8]
 8004f92:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004f96:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	689b      	ldr	r3, [r3, #8]
 8004f9c:	68ba      	ldr	r2, [r7, #8]
 8004f9e:	4313      	orrs	r3, r2
 8004fa0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	68ba      	ldr	r2, [r7, #8]
 8004fa8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2201      	movs	r2, #1
 8004fae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004fba:	2300      	movs	r3, #0
}
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	3714      	adds	r7, #20
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc6:	4770      	bx	lr
 8004fc8:	40012c00 	.word	0x40012c00
 8004fcc:	40013400 	.word	0x40013400
 8004fd0:	40000400 	.word	0x40000400
 8004fd4:	40000800 	.word	0x40000800
 8004fd8:	40014000 	.word	0x40014000

08004fdc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004fdc:	b480      	push	{r7}
 8004fde:	b085      	sub	sp, #20
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
 8004fe4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ff0:	2b01      	cmp	r3, #1
 8004ff2:	d101      	bne.n	8004ff8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004ff4:	2302      	movs	r3, #2
 8004ff6:	e087      	b.n	8005108 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2201      	movs	r2, #1
 8004ffc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	68db      	ldr	r3, [r3, #12]
 800500a:	4313      	orrs	r3, r2
 800500c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	689b      	ldr	r3, [r3, #8]
 8005018:	4313      	orrs	r3, r2
 800501a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	685b      	ldr	r3, [r3, #4]
 8005026:	4313      	orrs	r3, r2
 8005028:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	4313      	orrs	r3, r2
 8005036:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	691b      	ldr	r3, [r3, #16]
 8005042:	4313      	orrs	r3, r2
 8005044:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	695b      	ldr	r3, [r3, #20]
 8005050:	4313      	orrs	r3, r2
 8005052:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800505e:	4313      	orrs	r3, r2
 8005060:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	699b      	ldr	r3, [r3, #24]
 800506c:	041b      	lsls	r3, r3, #16
 800506e:	4313      	orrs	r3, r2
 8005070:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	4a27      	ldr	r2, [pc, #156]	; (8005114 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8005078:	4293      	cmp	r3, r2
 800507a:	d004      	beq.n	8005086 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	4a25      	ldr	r2, [pc, #148]	; (8005118 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8005082:	4293      	cmp	r3, r2
 8005084:	d106      	bne.n	8005094 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	69db      	ldr	r3, [r3, #28]
 8005090:	4313      	orrs	r3, r2
 8005092:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	4a1e      	ldr	r2, [pc, #120]	; (8005114 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800509a:	4293      	cmp	r3, r2
 800509c:	d004      	beq.n	80050a8 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	4a1d      	ldr	r2, [pc, #116]	; (8005118 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d126      	bne.n	80050f6 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050b2:	051b      	lsls	r3, r3, #20
 80050b4:	4313      	orrs	r3, r2
 80050b6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	6a1b      	ldr	r3, [r3, #32]
 80050c2:	4313      	orrs	r3, r2
 80050c4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050d0:	4313      	orrs	r3, r2
 80050d2:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	4a0e      	ldr	r2, [pc, #56]	; (8005114 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d004      	beq.n	80050e8 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	4a0d      	ldr	r2, [pc, #52]	; (8005118 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d106      	bne.n	80050f6 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050f2:	4313      	orrs	r3, r2
 80050f4:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	68fa      	ldr	r2, [r7, #12]
 80050fc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2200      	movs	r2, #0
 8005102:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005106:	2300      	movs	r3, #0
}
 8005108:	4618      	mov	r0, r3
 800510a:	3714      	adds	r7, #20
 800510c:	46bd      	mov	sp, r7
 800510e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005112:	4770      	bx	lr
 8005114:	40012c00 	.word	0x40012c00
 8005118:	40013400 	.word	0x40013400

0800511c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800511c:	b480      	push	{r7}
 800511e:	b085      	sub	sp, #20
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2200      	movs	r2, #0
 8005128:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800512c:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8005130:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	b29a      	uxth	r2, r3
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800513c:	2300      	movs	r3, #0
}
 800513e:	4618      	mov	r0, r3
 8005140:	3714      	adds	r7, #20
 8005142:	46bd      	mov	sp, r7
 8005144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005148:	4770      	bx	lr

0800514a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800514a:	b480      	push	{r7}
 800514c:	b085      	sub	sp, #20
 800514e:	af00      	add	r7, sp, #0
 8005150:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005152:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8005156:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800515e:	b29a      	uxth	r2, r3
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	b29b      	uxth	r3, r3
 8005164:	43db      	mvns	r3, r3
 8005166:	b29b      	uxth	r3, r3
 8005168:	4013      	ands	r3, r2
 800516a:	b29a      	uxth	r2, r3
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005172:	2300      	movs	r3, #0
}
 8005174:	4618      	mov	r0, r3
 8005176:	3714      	adds	r7, #20
 8005178:	46bd      	mov	sp, r7
 800517a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517e:	4770      	bx	lr

08005180 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005180:	b084      	sub	sp, #16
 8005182:	b480      	push	{r7}
 8005184:	b083      	sub	sp, #12
 8005186:	af00      	add	r7, sp, #0
 8005188:	6078      	str	r0, [r7, #4]
 800518a:	f107 0014 	add.w	r0, r7, #20
 800518e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2201      	movs	r2, #1
 8005196:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0U;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2200      	movs	r2, #0
 800519e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0U;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2200      	movs	r2, #0
 80051a6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2200      	movs	r2, #0
 80051ae:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80051b2:	2300      	movs	r3, #0
}
 80051b4:	4618      	mov	r0, r3
 80051b6:	370c      	adds	r7, #12
 80051b8:	46bd      	mov	sp, r7
 80051ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051be:	b004      	add	sp, #16
 80051c0:	4770      	bx	lr
	...

080051c4 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80051c4:	b480      	push	{r7}
 80051c6:	b09b      	sub	sp, #108	; 0x6c
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
 80051cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80051ce:	2300      	movs	r3, #0
 80051d0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80051d4:	687a      	ldr	r2, [r7, #4]
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	781b      	ldrb	r3, [r3, #0]
 80051da:	009b      	lsls	r3, r3, #2
 80051dc:	4413      	add	r3, r2
 80051de:	881b      	ldrh	r3, [r3, #0]
 80051e0:	b29b      	uxth	r3, r3
 80051e2:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80051e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051ea:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	78db      	ldrb	r3, [r3, #3]
 80051f2:	2b03      	cmp	r3, #3
 80051f4:	d81f      	bhi.n	8005236 <USB_ActivateEndpoint+0x72>
 80051f6:	a201      	add	r2, pc, #4	; (adr r2, 80051fc <USB_ActivateEndpoint+0x38>)
 80051f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051fc:	0800520d 	.word	0x0800520d
 8005200:	08005229 	.word	0x08005229
 8005204:	0800523f 	.word	0x0800523f
 8005208:	0800521b 	.word	0x0800521b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800520c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005210:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005214:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8005218:	e012      	b.n	8005240 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800521a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800521e:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8005222:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8005226:	e00b      	b.n	8005240 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8005228:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800522c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005230:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8005234:	e004      	b.n	8005240 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8005236:	2301      	movs	r3, #1
 8005238:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 800523c:	e000      	b.n	8005240 <USB_ActivateEndpoint+0x7c>
      break;
 800523e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8005240:	687a      	ldr	r2, [r7, #4]
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	781b      	ldrb	r3, [r3, #0]
 8005246:	009b      	lsls	r3, r3, #2
 8005248:	441a      	add	r2, r3
 800524a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800524e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005252:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005256:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800525a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800525e:	b29b      	uxth	r3, r3
 8005260:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8005262:	687a      	ldr	r2, [r7, #4]
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	781b      	ldrb	r3, [r3, #0]
 8005268:	009b      	lsls	r3, r3, #2
 800526a:	4413      	add	r3, r2
 800526c:	881b      	ldrh	r3, [r3, #0]
 800526e:	b29b      	uxth	r3, r3
 8005270:	b21b      	sxth	r3, r3
 8005272:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005276:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800527a:	b21a      	sxth	r2, r3
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	781b      	ldrb	r3, [r3, #0]
 8005280:	b21b      	sxth	r3, r3
 8005282:	4313      	orrs	r3, r2
 8005284:	b21b      	sxth	r3, r3
 8005286:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 800528a:	687a      	ldr	r2, [r7, #4]
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	781b      	ldrb	r3, [r3, #0]
 8005290:	009b      	lsls	r3, r3, #2
 8005292:	441a      	add	r2, r3
 8005294:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8005298:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800529c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80052a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80052a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052a8:	b29b      	uxth	r3, r3
 80052aa:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	7b1b      	ldrb	r3, [r3, #12]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	f040 8149 	bne.w	8005548 <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	785b      	ldrb	r3, [r3, #1]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	f000 8084 	beq.w	80053c8 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	617b      	str	r3, [r7, #20]
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80052ca:	b29b      	uxth	r3, r3
 80052cc:	461a      	mov	r2, r3
 80052ce:	697b      	ldr	r3, [r7, #20]
 80052d0:	4413      	add	r3, r2
 80052d2:	617b      	str	r3, [r7, #20]
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	781b      	ldrb	r3, [r3, #0]
 80052d8:	00da      	lsls	r2, r3, #3
 80052da:	697b      	ldr	r3, [r7, #20]
 80052dc:	4413      	add	r3, r2
 80052de:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80052e2:	613b      	str	r3, [r7, #16]
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	88db      	ldrh	r3, [r3, #6]
 80052e8:	085b      	lsrs	r3, r3, #1
 80052ea:	b29b      	uxth	r3, r3
 80052ec:	005b      	lsls	r3, r3, #1
 80052ee:	b29a      	uxth	r2, r3
 80052f0:	693b      	ldr	r3, [r7, #16]
 80052f2:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80052f4:	687a      	ldr	r2, [r7, #4]
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	781b      	ldrb	r3, [r3, #0]
 80052fa:	009b      	lsls	r3, r3, #2
 80052fc:	4413      	add	r3, r2
 80052fe:	881b      	ldrh	r3, [r3, #0]
 8005300:	81fb      	strh	r3, [r7, #14]
 8005302:	89fb      	ldrh	r3, [r7, #14]
 8005304:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005308:	2b00      	cmp	r3, #0
 800530a:	d01b      	beq.n	8005344 <USB_ActivateEndpoint+0x180>
 800530c:	687a      	ldr	r2, [r7, #4]
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	781b      	ldrb	r3, [r3, #0]
 8005312:	009b      	lsls	r3, r3, #2
 8005314:	4413      	add	r3, r2
 8005316:	881b      	ldrh	r3, [r3, #0]
 8005318:	b29b      	uxth	r3, r3
 800531a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800531e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005322:	81bb      	strh	r3, [r7, #12]
 8005324:	687a      	ldr	r2, [r7, #4]
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	781b      	ldrb	r3, [r3, #0]
 800532a:	009b      	lsls	r3, r3, #2
 800532c:	441a      	add	r2, r3
 800532e:	89bb      	ldrh	r3, [r7, #12]
 8005330:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005334:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005338:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800533c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005340:	b29b      	uxth	r3, r3
 8005342:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	78db      	ldrb	r3, [r3, #3]
 8005348:	2b01      	cmp	r3, #1
 800534a:	d020      	beq.n	800538e <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800534c:	687a      	ldr	r2, [r7, #4]
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	781b      	ldrb	r3, [r3, #0]
 8005352:	009b      	lsls	r3, r3, #2
 8005354:	4413      	add	r3, r2
 8005356:	881b      	ldrh	r3, [r3, #0]
 8005358:	b29b      	uxth	r3, r3
 800535a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800535e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005362:	813b      	strh	r3, [r7, #8]
 8005364:	893b      	ldrh	r3, [r7, #8]
 8005366:	f083 0320 	eor.w	r3, r3, #32
 800536a:	813b      	strh	r3, [r7, #8]
 800536c:	687a      	ldr	r2, [r7, #4]
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	781b      	ldrb	r3, [r3, #0]
 8005372:	009b      	lsls	r3, r3, #2
 8005374:	441a      	add	r2, r3
 8005376:	893b      	ldrh	r3, [r7, #8]
 8005378:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800537c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005380:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005384:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005388:	b29b      	uxth	r3, r3
 800538a:	8013      	strh	r3, [r2, #0]
 800538c:	e27f      	b.n	800588e <USB_ActivateEndpoint+0x6ca>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800538e:	687a      	ldr	r2, [r7, #4]
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	781b      	ldrb	r3, [r3, #0]
 8005394:	009b      	lsls	r3, r3, #2
 8005396:	4413      	add	r3, r2
 8005398:	881b      	ldrh	r3, [r3, #0]
 800539a:	b29b      	uxth	r3, r3
 800539c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80053a4:	817b      	strh	r3, [r7, #10]
 80053a6:	687a      	ldr	r2, [r7, #4]
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	781b      	ldrb	r3, [r3, #0]
 80053ac:	009b      	lsls	r3, r3, #2
 80053ae:	441a      	add	r2, r3
 80053b0:	897b      	ldrh	r3, [r7, #10]
 80053b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80053b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80053ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80053be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053c2:	b29b      	uxth	r3, r3
 80053c4:	8013      	strh	r3, [r2, #0]
 80053c6:	e262      	b.n	800588e <USB_ActivateEndpoint+0x6ca>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80053d2:	b29b      	uxth	r3, r3
 80053d4:	461a      	mov	r2, r3
 80053d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053d8:	4413      	add	r3, r2
 80053da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	781b      	ldrb	r3, [r3, #0]
 80053e0:	00da      	lsls	r2, r3, #3
 80053e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053e4:	4413      	add	r3, r2
 80053e6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80053ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	88db      	ldrh	r3, [r3, #6]
 80053f0:	085b      	lsrs	r3, r3, #1
 80053f2:	b29b      	uxth	r3, r3
 80053f4:	005b      	lsls	r3, r3, #1
 80053f6:	b29a      	uxth	r2, r3
 80053f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053fa:	801a      	strh	r2, [r3, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	627b      	str	r3, [r7, #36]	; 0x24
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005406:	b29b      	uxth	r3, r3
 8005408:	461a      	mov	r2, r3
 800540a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800540c:	4413      	add	r3, r2
 800540e:	627b      	str	r3, [r7, #36]	; 0x24
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	781b      	ldrb	r3, [r3, #0]
 8005414:	00da      	lsls	r2, r3, #3
 8005416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005418:	4413      	add	r3, r2
 800541a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800541e:	623b      	str	r3, [r7, #32]
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	691b      	ldr	r3, [r3, #16]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d112      	bne.n	800544e <USB_ActivateEndpoint+0x28a>
 8005428:	6a3b      	ldr	r3, [r7, #32]
 800542a:	881b      	ldrh	r3, [r3, #0]
 800542c:	b29b      	uxth	r3, r3
 800542e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005432:	b29a      	uxth	r2, r3
 8005434:	6a3b      	ldr	r3, [r7, #32]
 8005436:	801a      	strh	r2, [r3, #0]
 8005438:	6a3b      	ldr	r3, [r7, #32]
 800543a:	881b      	ldrh	r3, [r3, #0]
 800543c:	b29b      	uxth	r3, r3
 800543e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005442:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005446:	b29a      	uxth	r2, r3
 8005448:	6a3b      	ldr	r3, [r7, #32]
 800544a:	801a      	strh	r2, [r3, #0]
 800544c:	e02f      	b.n	80054ae <USB_ActivateEndpoint+0x2ea>
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	691b      	ldr	r3, [r3, #16]
 8005452:	2b3e      	cmp	r3, #62	; 0x3e
 8005454:	d813      	bhi.n	800547e <USB_ActivateEndpoint+0x2ba>
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	691b      	ldr	r3, [r3, #16]
 800545a:	085b      	lsrs	r3, r3, #1
 800545c:	663b      	str	r3, [r7, #96]	; 0x60
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	691b      	ldr	r3, [r3, #16]
 8005462:	f003 0301 	and.w	r3, r3, #1
 8005466:	2b00      	cmp	r3, #0
 8005468:	d002      	beq.n	8005470 <USB_ActivateEndpoint+0x2ac>
 800546a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800546c:	3301      	adds	r3, #1
 800546e:	663b      	str	r3, [r7, #96]	; 0x60
 8005470:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005472:	b29b      	uxth	r3, r3
 8005474:	029b      	lsls	r3, r3, #10
 8005476:	b29a      	uxth	r2, r3
 8005478:	6a3b      	ldr	r3, [r7, #32]
 800547a:	801a      	strh	r2, [r3, #0]
 800547c:	e017      	b.n	80054ae <USB_ActivateEndpoint+0x2ea>
 800547e:	683b      	ldr	r3, [r7, #0]
 8005480:	691b      	ldr	r3, [r3, #16]
 8005482:	095b      	lsrs	r3, r3, #5
 8005484:	663b      	str	r3, [r7, #96]	; 0x60
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	691b      	ldr	r3, [r3, #16]
 800548a:	f003 031f 	and.w	r3, r3, #31
 800548e:	2b00      	cmp	r3, #0
 8005490:	d102      	bne.n	8005498 <USB_ActivateEndpoint+0x2d4>
 8005492:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005494:	3b01      	subs	r3, #1
 8005496:	663b      	str	r3, [r7, #96]	; 0x60
 8005498:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800549a:	b29b      	uxth	r3, r3
 800549c:	029b      	lsls	r3, r3, #10
 800549e:	b29b      	uxth	r3, r3
 80054a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80054a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80054a8:	b29a      	uxth	r2, r3
 80054aa:	6a3b      	ldr	r3, [r7, #32]
 80054ac:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80054ae:	687a      	ldr	r2, [r7, #4]
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	781b      	ldrb	r3, [r3, #0]
 80054b4:	009b      	lsls	r3, r3, #2
 80054b6:	4413      	add	r3, r2
 80054b8:	881b      	ldrh	r3, [r3, #0]
 80054ba:	83fb      	strh	r3, [r7, #30]
 80054bc:	8bfb      	ldrh	r3, [r7, #30]
 80054be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d01b      	beq.n	80054fe <USB_ActivateEndpoint+0x33a>
 80054c6:	687a      	ldr	r2, [r7, #4]
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	781b      	ldrb	r3, [r3, #0]
 80054cc:	009b      	lsls	r3, r3, #2
 80054ce:	4413      	add	r3, r2
 80054d0:	881b      	ldrh	r3, [r3, #0]
 80054d2:	b29b      	uxth	r3, r3
 80054d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054dc:	83bb      	strh	r3, [r7, #28]
 80054de:	687a      	ldr	r2, [r7, #4]
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	781b      	ldrb	r3, [r3, #0]
 80054e4:	009b      	lsls	r3, r3, #2
 80054e6:	441a      	add	r2, r3
 80054e8:	8bbb      	ldrh	r3, [r7, #28]
 80054ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80054ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80054f2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80054f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054fa:	b29b      	uxth	r3, r3
 80054fc:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80054fe:	687a      	ldr	r2, [r7, #4]
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	781b      	ldrb	r3, [r3, #0]
 8005504:	009b      	lsls	r3, r3, #2
 8005506:	4413      	add	r3, r2
 8005508:	881b      	ldrh	r3, [r3, #0]
 800550a:	b29b      	uxth	r3, r3
 800550c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005510:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005514:	837b      	strh	r3, [r7, #26]
 8005516:	8b7b      	ldrh	r3, [r7, #26]
 8005518:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800551c:	837b      	strh	r3, [r7, #26]
 800551e:	8b7b      	ldrh	r3, [r7, #26]
 8005520:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005524:	837b      	strh	r3, [r7, #26]
 8005526:	687a      	ldr	r2, [r7, #4]
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	781b      	ldrb	r3, [r3, #0]
 800552c:	009b      	lsls	r3, r3, #2
 800552e:	441a      	add	r2, r3
 8005530:	8b7b      	ldrh	r3, [r7, #26]
 8005532:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005536:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800553a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800553e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005542:	b29b      	uxth	r3, r3
 8005544:	8013      	strh	r3, [r2, #0]
 8005546:	e1a2      	b.n	800588e <USB_ActivateEndpoint+0x6ca>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8005548:	687a      	ldr	r2, [r7, #4]
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	781b      	ldrb	r3, [r3, #0]
 800554e:	009b      	lsls	r3, r3, #2
 8005550:	4413      	add	r3, r2
 8005552:	881b      	ldrh	r3, [r3, #0]
 8005554:	b29b      	uxth	r3, r3
 8005556:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800555a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800555e:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8005562:	687a      	ldr	r2, [r7, #4]
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	781b      	ldrb	r3, [r3, #0]
 8005568:	009b      	lsls	r3, r3, #2
 800556a:	441a      	add	r2, r3
 800556c:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8005570:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005574:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005578:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800557c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005580:	b29b      	uxth	r3, r3
 8005582:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	65bb      	str	r3, [r7, #88]	; 0x58
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800558e:	b29b      	uxth	r3, r3
 8005590:	461a      	mov	r2, r3
 8005592:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005594:	4413      	add	r3, r2
 8005596:	65bb      	str	r3, [r7, #88]	; 0x58
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	781b      	ldrb	r3, [r3, #0]
 800559c:	00da      	lsls	r2, r3, #3
 800559e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80055a0:	4413      	add	r3, r2
 80055a2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80055a6:	657b      	str	r3, [r7, #84]	; 0x54
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	891b      	ldrh	r3, [r3, #8]
 80055ac:	085b      	lsrs	r3, r3, #1
 80055ae:	b29b      	uxth	r3, r3
 80055b0:	005b      	lsls	r3, r3, #1
 80055b2:	b29a      	uxth	r2, r3
 80055b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80055b6:	801a      	strh	r2, [r3, #0]
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	653b      	str	r3, [r7, #80]	; 0x50
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80055c2:	b29b      	uxth	r3, r3
 80055c4:	461a      	mov	r2, r3
 80055c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80055c8:	4413      	add	r3, r2
 80055ca:	653b      	str	r3, [r7, #80]	; 0x50
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	781b      	ldrb	r3, [r3, #0]
 80055d0:	00da      	lsls	r2, r3, #3
 80055d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80055d4:	4413      	add	r3, r2
 80055d6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80055da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80055dc:	683b      	ldr	r3, [r7, #0]
 80055de:	895b      	ldrh	r3, [r3, #10]
 80055e0:	085b      	lsrs	r3, r3, #1
 80055e2:	b29b      	uxth	r3, r3
 80055e4:	005b      	lsls	r3, r3, #1
 80055e6:	b29a      	uxth	r2, r3
 80055e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055ea:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	785b      	ldrb	r3, [r3, #1]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	f040 8091 	bne.w	8005718 <USB_ActivateEndpoint+0x554>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80055f6:	687a      	ldr	r2, [r7, #4]
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	781b      	ldrb	r3, [r3, #0]
 80055fc:	009b      	lsls	r3, r3, #2
 80055fe:	4413      	add	r3, r2
 8005600:	881b      	ldrh	r3, [r3, #0]
 8005602:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8005604:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005606:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800560a:	2b00      	cmp	r3, #0
 800560c:	d01b      	beq.n	8005646 <USB_ActivateEndpoint+0x482>
 800560e:	687a      	ldr	r2, [r7, #4]
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	781b      	ldrb	r3, [r3, #0]
 8005614:	009b      	lsls	r3, r3, #2
 8005616:	4413      	add	r3, r2
 8005618:	881b      	ldrh	r3, [r3, #0]
 800561a:	b29b      	uxth	r3, r3
 800561c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005620:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005624:	877b      	strh	r3, [r7, #58]	; 0x3a
 8005626:	687a      	ldr	r2, [r7, #4]
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	781b      	ldrb	r3, [r3, #0]
 800562c:	009b      	lsls	r3, r3, #2
 800562e:	441a      	add	r2, r3
 8005630:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8005632:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005636:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800563a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800563e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005642:	b29b      	uxth	r3, r3
 8005644:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005646:	687a      	ldr	r2, [r7, #4]
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	781b      	ldrb	r3, [r3, #0]
 800564c:	009b      	lsls	r3, r3, #2
 800564e:	4413      	add	r3, r2
 8005650:	881b      	ldrh	r3, [r3, #0]
 8005652:	873b      	strh	r3, [r7, #56]	; 0x38
 8005654:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005656:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800565a:	2b00      	cmp	r3, #0
 800565c:	d01b      	beq.n	8005696 <USB_ActivateEndpoint+0x4d2>
 800565e:	687a      	ldr	r2, [r7, #4]
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	781b      	ldrb	r3, [r3, #0]
 8005664:	009b      	lsls	r3, r3, #2
 8005666:	4413      	add	r3, r2
 8005668:	881b      	ldrh	r3, [r3, #0]
 800566a:	b29b      	uxth	r3, r3
 800566c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005670:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005674:	86fb      	strh	r3, [r7, #54]	; 0x36
 8005676:	687a      	ldr	r2, [r7, #4]
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	781b      	ldrb	r3, [r3, #0]
 800567c:	009b      	lsls	r3, r3, #2
 800567e:	441a      	add	r2, r3
 8005680:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005682:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005686:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800568a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800568e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005692:	b29b      	uxth	r3, r3
 8005694:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005696:	687a      	ldr	r2, [r7, #4]
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	781b      	ldrb	r3, [r3, #0]
 800569c:	009b      	lsls	r3, r3, #2
 800569e:	4413      	add	r3, r2
 80056a0:	881b      	ldrh	r3, [r3, #0]
 80056a2:	b29b      	uxth	r3, r3
 80056a4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80056a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056ac:	86bb      	strh	r3, [r7, #52]	; 0x34
 80056ae:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80056b0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80056b4:	86bb      	strh	r3, [r7, #52]	; 0x34
 80056b6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80056b8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80056bc:	86bb      	strh	r3, [r7, #52]	; 0x34
 80056be:	687a      	ldr	r2, [r7, #4]
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	781b      	ldrb	r3, [r3, #0]
 80056c4:	009b      	lsls	r3, r3, #2
 80056c6:	441a      	add	r2, r3
 80056c8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80056ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80056ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80056d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80056d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056da:	b29b      	uxth	r3, r3
 80056dc:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80056de:	687a      	ldr	r2, [r7, #4]
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	781b      	ldrb	r3, [r3, #0]
 80056e4:	009b      	lsls	r3, r3, #2
 80056e6:	4413      	add	r3, r2
 80056e8:	881b      	ldrh	r3, [r3, #0]
 80056ea:	b29b      	uxth	r3, r3
 80056ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80056f4:	867b      	strh	r3, [r7, #50]	; 0x32
 80056f6:	687a      	ldr	r2, [r7, #4]
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	781b      	ldrb	r3, [r3, #0]
 80056fc:	009b      	lsls	r3, r3, #2
 80056fe:	441a      	add	r2, r3
 8005700:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8005702:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005706:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800570a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800570e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005712:	b29b      	uxth	r3, r3
 8005714:	8013      	strh	r3, [r2, #0]
 8005716:	e0ba      	b.n	800588e <USB_ActivateEndpoint+0x6ca>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005718:	687a      	ldr	r2, [r7, #4]
 800571a:	683b      	ldr	r3, [r7, #0]
 800571c:	781b      	ldrb	r3, [r3, #0]
 800571e:	009b      	lsls	r3, r3, #2
 8005720:	4413      	add	r3, r2
 8005722:	881b      	ldrh	r3, [r3, #0]
 8005724:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8005728:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800572c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005730:	2b00      	cmp	r3, #0
 8005732:	d01d      	beq.n	8005770 <USB_ActivateEndpoint+0x5ac>
 8005734:	687a      	ldr	r2, [r7, #4]
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	781b      	ldrb	r3, [r3, #0]
 800573a:	009b      	lsls	r3, r3, #2
 800573c:	4413      	add	r3, r2
 800573e:	881b      	ldrh	r3, [r3, #0]
 8005740:	b29b      	uxth	r3, r3
 8005742:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005746:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800574a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800574e:	687a      	ldr	r2, [r7, #4]
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	781b      	ldrb	r3, [r3, #0]
 8005754:	009b      	lsls	r3, r3, #2
 8005756:	441a      	add	r2, r3
 8005758:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800575c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005760:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005764:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005768:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800576c:	b29b      	uxth	r3, r3
 800576e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005770:	687a      	ldr	r2, [r7, #4]
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	781b      	ldrb	r3, [r3, #0]
 8005776:	009b      	lsls	r3, r3, #2
 8005778:	4413      	add	r3, r2
 800577a:	881b      	ldrh	r3, [r3, #0]
 800577c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8005780:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8005784:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005788:	2b00      	cmp	r3, #0
 800578a:	d01d      	beq.n	80057c8 <USB_ActivateEndpoint+0x604>
 800578c:	687a      	ldr	r2, [r7, #4]
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	781b      	ldrb	r3, [r3, #0]
 8005792:	009b      	lsls	r3, r3, #2
 8005794:	4413      	add	r3, r2
 8005796:	881b      	ldrh	r3, [r3, #0]
 8005798:	b29b      	uxth	r3, r3
 800579a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800579e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057a2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80057a6:	687a      	ldr	r2, [r7, #4]
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	781b      	ldrb	r3, [r3, #0]
 80057ac:	009b      	lsls	r3, r3, #2
 80057ae:	441a      	add	r2, r3
 80057b0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80057b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80057b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80057bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80057c0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80057c4:	b29b      	uxth	r3, r3
 80057c6:	8013      	strh	r3, [r2, #0]


      if (ep->type != EP_TYPE_ISOC)
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	78db      	ldrb	r3, [r3, #3]
 80057cc:	2b01      	cmp	r3, #1
 80057ce:	d024      	beq.n	800581a <USB_ActivateEndpoint+0x656>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80057d0:	687a      	ldr	r2, [r7, #4]
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	781b      	ldrb	r3, [r3, #0]
 80057d6:	009b      	lsls	r3, r3, #2
 80057d8:	4413      	add	r3, r2
 80057da:	881b      	ldrh	r3, [r3, #0]
 80057dc:	b29b      	uxth	r3, r3
 80057de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80057e6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80057ea:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80057ee:	f083 0320 	eor.w	r3, r3, #32
 80057f2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80057f6:	687a      	ldr	r2, [r7, #4]
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	781b      	ldrb	r3, [r3, #0]
 80057fc:	009b      	lsls	r3, r3, #2
 80057fe:	441a      	add	r2, r3
 8005800:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005804:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005808:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800580c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005810:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005814:	b29b      	uxth	r3, r3
 8005816:	8013      	strh	r3, [r2, #0]
 8005818:	e01d      	b.n	8005856 <USB_ActivateEndpoint+0x692>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800581a:	687a      	ldr	r2, [r7, #4]
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	781b      	ldrb	r3, [r3, #0]
 8005820:	009b      	lsls	r3, r3, #2
 8005822:	4413      	add	r3, r2
 8005824:	881b      	ldrh	r3, [r3, #0]
 8005826:	b29b      	uxth	r3, r3
 8005828:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800582c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005830:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8005834:	687a      	ldr	r2, [r7, #4]
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	781b      	ldrb	r3, [r3, #0]
 800583a:	009b      	lsls	r3, r3, #2
 800583c:	441a      	add	r2, r3
 800583e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8005842:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005846:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800584a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800584e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005852:	b29b      	uxth	r3, r3
 8005854:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005856:	687a      	ldr	r2, [r7, #4]
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	781b      	ldrb	r3, [r3, #0]
 800585c:	009b      	lsls	r3, r3, #2
 800585e:	4413      	add	r3, r2
 8005860:	881b      	ldrh	r3, [r3, #0]
 8005862:	b29b      	uxth	r3, r3
 8005864:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005868:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800586c:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800586e:	687a      	ldr	r2, [r7, #4]
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	781b      	ldrb	r3, [r3, #0]
 8005874:	009b      	lsls	r3, r3, #2
 8005876:	441a      	add	r2, r3
 8005878:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800587a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800587e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005882:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005886:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800588a:	b29b      	uxth	r3, r3
 800588c:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 800588e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8005892:	4618      	mov	r0, r3
 8005894:	376c      	adds	r7, #108	; 0x6c
 8005896:	46bd      	mov	sp, r7
 8005898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589c:	4770      	bx	lr
 800589e:	bf00      	nop

080058a0 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80058a0:	b480      	push	{r7}
 80058a2:	b08d      	sub	sp, #52	; 0x34
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
 80058a8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	7b1b      	ldrb	r3, [r3, #12]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	f040 808e 	bne.w	80059d0 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	785b      	ldrb	r3, [r3, #1]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d044      	beq.n	8005946 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80058bc:	687a      	ldr	r2, [r7, #4]
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	781b      	ldrb	r3, [r3, #0]
 80058c2:	009b      	lsls	r3, r3, #2
 80058c4:	4413      	add	r3, r2
 80058c6:	881b      	ldrh	r3, [r3, #0]
 80058c8:	81bb      	strh	r3, [r7, #12]
 80058ca:	89bb      	ldrh	r3, [r7, #12]
 80058cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d01b      	beq.n	800590c <USB_DeactivateEndpoint+0x6c>
 80058d4:	687a      	ldr	r2, [r7, #4]
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	781b      	ldrb	r3, [r3, #0]
 80058da:	009b      	lsls	r3, r3, #2
 80058dc:	4413      	add	r3, r2
 80058de:	881b      	ldrh	r3, [r3, #0]
 80058e0:	b29b      	uxth	r3, r3
 80058e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80058e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058ea:	817b      	strh	r3, [r7, #10]
 80058ec:	687a      	ldr	r2, [r7, #4]
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	781b      	ldrb	r3, [r3, #0]
 80058f2:	009b      	lsls	r3, r3, #2
 80058f4:	441a      	add	r2, r3
 80058f6:	897b      	ldrh	r3, [r7, #10]
 80058f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80058fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005900:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005904:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005908:	b29b      	uxth	r3, r3
 800590a:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800590c:	687a      	ldr	r2, [r7, #4]
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	781b      	ldrb	r3, [r3, #0]
 8005912:	009b      	lsls	r3, r3, #2
 8005914:	4413      	add	r3, r2
 8005916:	881b      	ldrh	r3, [r3, #0]
 8005918:	b29b      	uxth	r3, r3
 800591a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800591e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005922:	813b      	strh	r3, [r7, #8]
 8005924:	687a      	ldr	r2, [r7, #4]
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	781b      	ldrb	r3, [r3, #0]
 800592a:	009b      	lsls	r3, r3, #2
 800592c:	441a      	add	r2, r3
 800592e:	893b      	ldrh	r3, [r7, #8]
 8005930:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005934:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005938:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800593c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005940:	b29b      	uxth	r3, r3
 8005942:	8013      	strh	r3, [r2, #0]
 8005944:	e192      	b.n	8005c6c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005946:	687a      	ldr	r2, [r7, #4]
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	781b      	ldrb	r3, [r3, #0]
 800594c:	009b      	lsls	r3, r3, #2
 800594e:	4413      	add	r3, r2
 8005950:	881b      	ldrh	r3, [r3, #0]
 8005952:	827b      	strh	r3, [r7, #18]
 8005954:	8a7b      	ldrh	r3, [r7, #18]
 8005956:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800595a:	2b00      	cmp	r3, #0
 800595c:	d01b      	beq.n	8005996 <USB_DeactivateEndpoint+0xf6>
 800595e:	687a      	ldr	r2, [r7, #4]
 8005960:	683b      	ldr	r3, [r7, #0]
 8005962:	781b      	ldrb	r3, [r3, #0]
 8005964:	009b      	lsls	r3, r3, #2
 8005966:	4413      	add	r3, r2
 8005968:	881b      	ldrh	r3, [r3, #0]
 800596a:	b29b      	uxth	r3, r3
 800596c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005970:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005974:	823b      	strh	r3, [r7, #16]
 8005976:	687a      	ldr	r2, [r7, #4]
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	781b      	ldrb	r3, [r3, #0]
 800597c:	009b      	lsls	r3, r3, #2
 800597e:	441a      	add	r2, r3
 8005980:	8a3b      	ldrh	r3, [r7, #16]
 8005982:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005986:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800598a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800598e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005992:	b29b      	uxth	r3, r3
 8005994:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005996:	687a      	ldr	r2, [r7, #4]
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	781b      	ldrb	r3, [r3, #0]
 800599c:	009b      	lsls	r3, r3, #2
 800599e:	4413      	add	r3, r2
 80059a0:	881b      	ldrh	r3, [r3, #0]
 80059a2:	b29b      	uxth	r3, r3
 80059a4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80059a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059ac:	81fb      	strh	r3, [r7, #14]
 80059ae:	687a      	ldr	r2, [r7, #4]
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	781b      	ldrb	r3, [r3, #0]
 80059b4:	009b      	lsls	r3, r3, #2
 80059b6:	441a      	add	r2, r3
 80059b8:	89fb      	ldrh	r3, [r7, #14]
 80059ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80059be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80059c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80059c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059ca:	b29b      	uxth	r3, r3
 80059cc:	8013      	strh	r3, [r2, #0]
 80059ce:	e14d      	b.n	8005c6c <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	785b      	ldrb	r3, [r3, #1]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	f040 80a5 	bne.w	8005b24 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80059da:	687a      	ldr	r2, [r7, #4]
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	781b      	ldrb	r3, [r3, #0]
 80059e0:	009b      	lsls	r3, r3, #2
 80059e2:	4413      	add	r3, r2
 80059e4:	881b      	ldrh	r3, [r3, #0]
 80059e6:	843b      	strh	r3, [r7, #32]
 80059e8:	8c3b      	ldrh	r3, [r7, #32]
 80059ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d01b      	beq.n	8005a2a <USB_DeactivateEndpoint+0x18a>
 80059f2:	687a      	ldr	r2, [r7, #4]
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	781b      	ldrb	r3, [r3, #0]
 80059f8:	009b      	lsls	r3, r3, #2
 80059fa:	4413      	add	r3, r2
 80059fc:	881b      	ldrh	r3, [r3, #0]
 80059fe:	b29b      	uxth	r3, r3
 8005a00:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a08:	83fb      	strh	r3, [r7, #30]
 8005a0a:	687a      	ldr	r2, [r7, #4]
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	781b      	ldrb	r3, [r3, #0]
 8005a10:	009b      	lsls	r3, r3, #2
 8005a12:	441a      	add	r2, r3
 8005a14:	8bfb      	ldrh	r3, [r7, #30]
 8005a16:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a1a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a1e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005a22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a26:	b29b      	uxth	r3, r3
 8005a28:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005a2a:	687a      	ldr	r2, [r7, #4]
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	781b      	ldrb	r3, [r3, #0]
 8005a30:	009b      	lsls	r3, r3, #2
 8005a32:	4413      	add	r3, r2
 8005a34:	881b      	ldrh	r3, [r3, #0]
 8005a36:	83bb      	strh	r3, [r7, #28]
 8005a38:	8bbb      	ldrh	r3, [r7, #28]
 8005a3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d01b      	beq.n	8005a7a <USB_DeactivateEndpoint+0x1da>
 8005a42:	687a      	ldr	r2, [r7, #4]
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	781b      	ldrb	r3, [r3, #0]
 8005a48:	009b      	lsls	r3, r3, #2
 8005a4a:	4413      	add	r3, r2
 8005a4c:	881b      	ldrh	r3, [r3, #0]
 8005a4e:	b29b      	uxth	r3, r3
 8005a50:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a58:	837b      	strh	r3, [r7, #26]
 8005a5a:	687a      	ldr	r2, [r7, #4]
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	781b      	ldrb	r3, [r3, #0]
 8005a60:	009b      	lsls	r3, r3, #2
 8005a62:	441a      	add	r2, r3
 8005a64:	8b7b      	ldrh	r3, [r7, #26]
 8005a66:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a6a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a72:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005a76:	b29b      	uxth	r3, r3
 8005a78:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8005a7a:	687a      	ldr	r2, [r7, #4]
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	781b      	ldrb	r3, [r3, #0]
 8005a80:	009b      	lsls	r3, r3, #2
 8005a82:	4413      	add	r3, r2
 8005a84:	881b      	ldrh	r3, [r3, #0]
 8005a86:	b29b      	uxth	r3, r3
 8005a88:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a90:	833b      	strh	r3, [r7, #24]
 8005a92:	687a      	ldr	r2, [r7, #4]
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	781b      	ldrb	r3, [r3, #0]
 8005a98:	009b      	lsls	r3, r3, #2
 8005a9a:	441a      	add	r2, r3
 8005a9c:	8b3b      	ldrh	r3, [r7, #24]
 8005a9e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005aa2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005aa6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005aaa:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005aae:	b29b      	uxth	r3, r3
 8005ab0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005ab2:	687a      	ldr	r2, [r7, #4]
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	781b      	ldrb	r3, [r3, #0]
 8005ab8:	009b      	lsls	r3, r3, #2
 8005aba:	4413      	add	r3, r2
 8005abc:	881b      	ldrh	r3, [r3, #0]
 8005abe:	b29b      	uxth	r3, r3
 8005ac0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005ac4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ac8:	82fb      	strh	r3, [r7, #22]
 8005aca:	687a      	ldr	r2, [r7, #4]
 8005acc:	683b      	ldr	r3, [r7, #0]
 8005ace:	781b      	ldrb	r3, [r3, #0]
 8005ad0:	009b      	lsls	r3, r3, #2
 8005ad2:	441a      	add	r2, r3
 8005ad4:	8afb      	ldrh	r3, [r7, #22]
 8005ad6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ada:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ade:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ae2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ae6:	b29b      	uxth	r3, r3
 8005ae8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005aea:	687a      	ldr	r2, [r7, #4]
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	781b      	ldrb	r3, [r3, #0]
 8005af0:	009b      	lsls	r3, r3, #2
 8005af2:	4413      	add	r3, r2
 8005af4:	881b      	ldrh	r3, [r3, #0]
 8005af6:	b29b      	uxth	r3, r3
 8005af8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005afc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b00:	82bb      	strh	r3, [r7, #20]
 8005b02:	687a      	ldr	r2, [r7, #4]
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	781b      	ldrb	r3, [r3, #0]
 8005b08:	009b      	lsls	r3, r3, #2
 8005b0a:	441a      	add	r2, r3
 8005b0c:	8abb      	ldrh	r3, [r7, #20]
 8005b0e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b12:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b1e:	b29b      	uxth	r3, r3
 8005b20:	8013      	strh	r3, [r2, #0]
 8005b22:	e0a3      	b.n	8005c6c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005b24:	687a      	ldr	r2, [r7, #4]
 8005b26:	683b      	ldr	r3, [r7, #0]
 8005b28:	781b      	ldrb	r3, [r3, #0]
 8005b2a:	009b      	lsls	r3, r3, #2
 8005b2c:	4413      	add	r3, r2
 8005b2e:	881b      	ldrh	r3, [r3, #0]
 8005b30:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8005b32:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005b34:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d01b      	beq.n	8005b74 <USB_DeactivateEndpoint+0x2d4>
 8005b3c:	687a      	ldr	r2, [r7, #4]
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	781b      	ldrb	r3, [r3, #0]
 8005b42:	009b      	lsls	r3, r3, #2
 8005b44:	4413      	add	r3, r2
 8005b46:	881b      	ldrh	r3, [r3, #0]
 8005b48:	b29b      	uxth	r3, r3
 8005b4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b52:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8005b54:	687a      	ldr	r2, [r7, #4]
 8005b56:	683b      	ldr	r3, [r7, #0]
 8005b58:	781b      	ldrb	r3, [r3, #0]
 8005b5a:	009b      	lsls	r3, r3, #2
 8005b5c:	441a      	add	r2, r3
 8005b5e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005b60:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b64:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b68:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005b6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b70:	b29b      	uxth	r3, r3
 8005b72:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005b74:	687a      	ldr	r2, [r7, #4]
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	781b      	ldrb	r3, [r3, #0]
 8005b7a:	009b      	lsls	r3, r3, #2
 8005b7c:	4413      	add	r3, r2
 8005b7e:	881b      	ldrh	r3, [r3, #0]
 8005b80:	857b      	strh	r3, [r7, #42]	; 0x2a
 8005b82:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005b84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d01b      	beq.n	8005bc4 <USB_DeactivateEndpoint+0x324>
 8005b8c:	687a      	ldr	r2, [r7, #4]
 8005b8e:	683b      	ldr	r3, [r7, #0]
 8005b90:	781b      	ldrb	r3, [r3, #0]
 8005b92:	009b      	lsls	r3, r3, #2
 8005b94:	4413      	add	r3, r2
 8005b96:	881b      	ldrh	r3, [r3, #0]
 8005b98:	b29b      	uxth	r3, r3
 8005b9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ba2:	853b      	strh	r3, [r7, #40]	; 0x28
 8005ba4:	687a      	ldr	r2, [r7, #4]
 8005ba6:	683b      	ldr	r3, [r7, #0]
 8005ba8:	781b      	ldrb	r3, [r3, #0]
 8005baa:	009b      	lsls	r3, r3, #2
 8005bac:	441a      	add	r2, r3
 8005bae:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005bb0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005bb4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005bb8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005bbc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005bc0:	b29b      	uxth	r3, r3
 8005bc2:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8005bc4:	687a      	ldr	r2, [r7, #4]
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	781b      	ldrb	r3, [r3, #0]
 8005bca:	009b      	lsls	r3, r3, #2
 8005bcc:	4413      	add	r3, r2
 8005bce:	881b      	ldrh	r3, [r3, #0]
 8005bd0:	b29b      	uxth	r3, r3
 8005bd2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005bd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bda:	84fb      	strh	r3, [r7, #38]	; 0x26
 8005bdc:	687a      	ldr	r2, [r7, #4]
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	781b      	ldrb	r3, [r3, #0]
 8005be2:	009b      	lsls	r3, r3, #2
 8005be4:	441a      	add	r2, r3
 8005be6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005be8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005bec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005bf0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005bf4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005bf8:	b29b      	uxth	r3, r3
 8005bfa:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005bfc:	687a      	ldr	r2, [r7, #4]
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	781b      	ldrb	r3, [r3, #0]
 8005c02:	009b      	lsls	r3, r3, #2
 8005c04:	4413      	add	r3, r2
 8005c06:	881b      	ldrh	r3, [r3, #0]
 8005c08:	b29b      	uxth	r3, r3
 8005c0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c0e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c12:	84bb      	strh	r3, [r7, #36]	; 0x24
 8005c14:	687a      	ldr	r2, [r7, #4]
 8005c16:	683b      	ldr	r3, [r7, #0]
 8005c18:	781b      	ldrb	r3, [r3, #0]
 8005c1a:	009b      	lsls	r3, r3, #2
 8005c1c:	441a      	add	r2, r3
 8005c1e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005c20:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c24:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c28:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c30:	b29b      	uxth	r3, r3
 8005c32:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005c34:	687a      	ldr	r2, [r7, #4]
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	781b      	ldrb	r3, [r3, #0]
 8005c3a:	009b      	lsls	r3, r3, #2
 8005c3c:	4413      	add	r3, r2
 8005c3e:	881b      	ldrh	r3, [r3, #0]
 8005c40:	b29b      	uxth	r3, r3
 8005c42:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005c46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c4a:	847b      	strh	r3, [r7, #34]	; 0x22
 8005c4c:	687a      	ldr	r2, [r7, #4]
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	781b      	ldrb	r3, [r3, #0]
 8005c52:	009b      	lsls	r3, r3, #2
 8005c54:	441a      	add	r2, r3
 8005c56:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005c58:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c5c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c60:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c68:	b29b      	uxth	r3, r3
 8005c6a:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8005c6c:	2300      	movs	r3, #0
}
 8005c6e:	4618      	mov	r0, r3
 8005c70:	3734      	adds	r7, #52	; 0x34
 8005c72:	46bd      	mov	sp, r7
 8005c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c78:	4770      	bx	lr

08005c7a <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005c7a:	b580      	push	{r7, lr}
 8005c7c:	b0c4      	sub	sp, #272	; 0x110
 8005c7e:	af00      	add	r7, sp, #0
 8005c80:	1d3b      	adds	r3, r7, #4
 8005c82:	6018      	str	r0, [r3, #0]
 8005c84:	463b      	mov	r3, r7
 8005c86:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint32_t len;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005c88:	463b      	mov	r3, r7
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	785b      	ldrb	r3, [r3, #1]
 8005c8e:	2b01      	cmp	r3, #1
 8005c90:	f040 8566 	bne.w	8006760 <USB_EPStartXfer+0xae6>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8005c94:	463b      	mov	r3, r7
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	699a      	ldr	r2, [r3, #24]
 8005c9a:	463b      	mov	r3, r7
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	691b      	ldr	r3, [r3, #16]
 8005ca0:	429a      	cmp	r2, r3
 8005ca2:	d905      	bls.n	8005cb0 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8005ca4:	463b      	mov	r3, r7
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	691b      	ldr	r3, [r3, #16]
 8005caa:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005cae:	e004      	b.n	8005cba <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8005cb0:	463b      	mov	r3, r7
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	699b      	ldr	r3, [r3, #24]
 8005cb6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8005cba:	463b      	mov	r3, r7
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	7b1b      	ldrb	r3, [r3, #12]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d12c      	bne.n	8005d1e <USB_EPStartXfer+0xa4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8005cc4:	463b      	mov	r3, r7
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	6959      	ldr	r1, [r3, #20]
 8005cca:	463b      	mov	r3, r7
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	88da      	ldrh	r2, [r3, #6]
 8005cd0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005cd4:	b29b      	uxth	r3, r3
 8005cd6:	1d38      	adds	r0, r7, #4
 8005cd8:	6800      	ldr	r0, [r0, #0]
 8005cda:	f001 fa43 	bl	8007164 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005cde:	1d3b      	adds	r3, r7, #4
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	617b      	str	r3, [r7, #20]
 8005ce4:	1d3b      	adds	r3, r7, #4
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005cec:	b29b      	uxth	r3, r3
 8005cee:	461a      	mov	r2, r3
 8005cf0:	697b      	ldr	r3, [r7, #20]
 8005cf2:	4413      	add	r3, r2
 8005cf4:	617b      	str	r3, [r7, #20]
 8005cf6:	463b      	mov	r3, r7
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	781b      	ldrb	r3, [r3, #0]
 8005cfc:	00da      	lsls	r2, r3, #3
 8005cfe:	697b      	ldr	r3, [r7, #20]
 8005d00:	4413      	add	r3, r2
 8005d02:	f203 4202 	addw	r2, r3, #1026	; 0x402
 8005d06:	f107 0310 	add.w	r3, r7, #16
 8005d0a:	601a      	str	r2, [r3, #0]
 8005d0c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005d10:	b29a      	uxth	r2, r3
 8005d12:	f107 0310 	add.w	r3, r7, #16
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	801a      	strh	r2, [r3, #0]
 8005d1a:	f000 bcec 	b.w	80066f6 <USB_EPStartXfer+0xa7c>
    }
    else
    {
      /*double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8005d1e:	463b      	mov	r3, r7
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	78db      	ldrb	r3, [r3, #3]
 8005d24:	2b02      	cmp	r3, #2
 8005d26:	f040 8356 	bne.w	80063d6 <USB_EPStartXfer+0x75c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8005d2a:	463b      	mov	r3, r7
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	6a1a      	ldr	r2, [r3, #32]
 8005d30:	463b      	mov	r3, r7
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	691b      	ldr	r3, [r3, #16]
 8005d36:	429a      	cmp	r2, r3
 8005d38:	f240 82fa 	bls.w	8006330 <USB_EPStartXfer+0x6b6>
        {
          /*enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8005d3c:	1d3b      	adds	r3, r7, #4
 8005d3e:	681a      	ldr	r2, [r3, #0]
 8005d40:	463b      	mov	r3, r7
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	781b      	ldrb	r3, [r3, #0]
 8005d46:	009b      	lsls	r3, r3, #2
 8005d48:	4413      	add	r3, r2
 8005d4a:	881b      	ldrh	r3, [r3, #0]
 8005d4c:	b29b      	uxth	r3, r3
 8005d4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d56:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 8005d5a:	1d3b      	adds	r3, r7, #4
 8005d5c:	681a      	ldr	r2, [r3, #0]
 8005d5e:	463b      	mov	r3, r7
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	781b      	ldrb	r3, [r3, #0]
 8005d64:	009b      	lsls	r3, r3, #2
 8005d66:	441a      	add	r2, r3
 8005d68:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8005d6c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d70:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d74:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005d78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d7c:	b29b      	uxth	r3, r3
 8005d7e:	8013      	strh	r3, [r2, #0]
          len = ep->maxpacket;
 8005d80:	463b      	mov	r3, r7
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	691b      	ldr	r3, [r3, #16]
 8005d86:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          /*each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8005d8a:	463b      	mov	r3, r7
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	6a1a      	ldr	r2, [r3, #32]
 8005d90:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005d94:	1ad2      	subs	r2, r2, r3
 8005d96:	463b      	mov	r3, r7
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1*/
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005d9c:	1d3b      	adds	r3, r7, #4
 8005d9e:	681a      	ldr	r2, [r3, #0]
 8005da0:	463b      	mov	r3, r7
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	781b      	ldrb	r3, [r3, #0]
 8005da6:	009b      	lsls	r3, r3, #2
 8005da8:	4413      	add	r3, r2
 8005daa:	881b      	ldrh	r3, [r3, #0]
 8005dac:	b29b      	uxth	r3, r3
 8005dae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	f000 815e 	beq.w	8006074 <USB_EPStartXfer+0x3fa>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005db8:	1d3b      	adds	r3, r7, #4
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	637b      	str	r3, [r7, #52]	; 0x34
 8005dbe:	463b      	mov	r3, r7
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	785b      	ldrb	r3, [r3, #1]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d164      	bne.n	8005e92 <USB_EPStartXfer+0x218>
 8005dc8:	1d3b      	adds	r3, r7, #4
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005dce:	1d3b      	adds	r3, r7, #4
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005dd6:	b29b      	uxth	r3, r3
 8005dd8:	461a      	mov	r2, r3
 8005dda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ddc:	4413      	add	r3, r2
 8005dde:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005de0:	463b      	mov	r3, r7
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	781b      	ldrb	r3, [r3, #0]
 8005de6:	00da      	lsls	r2, r3, #3
 8005de8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dea:	4413      	add	r3, r2
 8005dec:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005df0:	62bb      	str	r3, [r7, #40]	; 0x28
 8005df2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d112      	bne.n	8005e20 <USB_EPStartXfer+0x1a6>
 8005dfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dfc:	881b      	ldrh	r3, [r3, #0]
 8005dfe:	b29b      	uxth	r3, r3
 8005e00:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005e04:	b29a      	uxth	r2, r3
 8005e06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e08:	801a      	strh	r2, [r3, #0]
 8005e0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e0c:	881b      	ldrh	r3, [r3, #0]
 8005e0e:	b29b      	uxth	r3, r3
 8005e10:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e14:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e18:	b29a      	uxth	r2, r3
 8005e1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e1c:	801a      	strh	r2, [r3, #0]
 8005e1e:	e054      	b.n	8005eca <USB_EPStartXfer+0x250>
 8005e20:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005e24:	2b3e      	cmp	r3, #62	; 0x3e
 8005e26:	d817      	bhi.n	8005e58 <USB_EPStartXfer+0x1de>
 8005e28:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005e2c:	085b      	lsrs	r3, r3, #1
 8005e2e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005e32:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005e36:	f003 0301 	and.w	r3, r3, #1
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d004      	beq.n	8005e48 <USB_EPStartXfer+0x1ce>
 8005e3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e42:	3301      	adds	r3, #1
 8005e44:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005e48:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e4c:	b29b      	uxth	r3, r3
 8005e4e:	029b      	lsls	r3, r3, #10
 8005e50:	b29a      	uxth	r2, r3
 8005e52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e54:	801a      	strh	r2, [r3, #0]
 8005e56:	e038      	b.n	8005eca <USB_EPStartXfer+0x250>
 8005e58:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005e5c:	095b      	lsrs	r3, r3, #5
 8005e5e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005e62:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005e66:	f003 031f 	and.w	r3, r3, #31
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d104      	bne.n	8005e78 <USB_EPStartXfer+0x1fe>
 8005e6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e72:	3b01      	subs	r3, #1
 8005e74:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005e78:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e7c:	b29b      	uxth	r3, r3
 8005e7e:	029b      	lsls	r3, r3, #10
 8005e80:	b29b      	uxth	r3, r3
 8005e82:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e86:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e8a:	b29a      	uxth	r2, r3
 8005e8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e8e:	801a      	strh	r2, [r3, #0]
 8005e90:	e01b      	b.n	8005eca <USB_EPStartXfer+0x250>
 8005e92:	463b      	mov	r3, r7
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	785b      	ldrb	r3, [r3, #1]
 8005e98:	2b01      	cmp	r3, #1
 8005e9a:	d116      	bne.n	8005eca <USB_EPStartXfer+0x250>
 8005e9c:	1d3b      	adds	r3, r7, #4
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ea4:	b29b      	uxth	r3, r3
 8005ea6:	461a      	mov	r2, r3
 8005ea8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005eaa:	4413      	add	r3, r2
 8005eac:	637b      	str	r3, [r7, #52]	; 0x34
 8005eae:	463b      	mov	r3, r7
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	781b      	ldrb	r3, [r3, #0]
 8005eb4:	00da      	lsls	r2, r3, #3
 8005eb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005eb8:	4413      	add	r3, r2
 8005eba:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005ebe:	633b      	str	r3, [r7, #48]	; 0x30
 8005ec0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005ec4:	b29a      	uxth	r2, r3
 8005ec6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ec8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005eca:	463b      	mov	r3, r7
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	895b      	ldrh	r3, [r3, #10]
 8005ed0:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005ed4:	463b      	mov	r3, r7
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	6959      	ldr	r1, [r3, #20]
 8005eda:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005ede:	b29b      	uxth	r3, r3
 8005ee0:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8005ee4:	1d38      	adds	r0, r7, #4
 8005ee6:	6800      	ldr	r0, [r0, #0]
 8005ee8:	f001 f93c 	bl	8007164 <USB_WritePMA>
            ep->xfer_buff += len;
 8005eec:	463b      	mov	r3, r7
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	695a      	ldr	r2, [r3, #20]
 8005ef2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005ef6:	441a      	add	r2, r3
 8005ef8:	463b      	mov	r3, r7
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005efe:	463b      	mov	r3, r7
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	6a1a      	ldr	r2, [r3, #32]
 8005f04:	463b      	mov	r3, r7
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	691b      	ldr	r3, [r3, #16]
 8005f0a:	429a      	cmp	r2, r3
 8005f0c:	d90e      	bls.n	8005f2c <USB_EPStartXfer+0x2b2>
            {
              len = ep->maxpacket;
 8005f0e:	463b      	mov	r3, r7
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	691b      	ldr	r3, [r3, #16]
 8005f14:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db -= len;
 8005f18:	463b      	mov	r3, r7
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	6a1a      	ldr	r2, [r3, #32]
 8005f1e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005f22:	1ad2      	subs	r2, r2, r3
 8005f24:	463b      	mov	r3, r7
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	621a      	str	r2, [r3, #32]
 8005f2a:	e008      	b.n	8005f3e <USB_EPStartXfer+0x2c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8005f2c:	463b      	mov	r3, r7
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	6a1b      	ldr	r3, [r3, #32]
 8005f32:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db = 0;
 8005f36:	463b      	mov	r3, r7
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005f3e:	463b      	mov	r3, r7
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	785b      	ldrb	r3, [r3, #1]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d164      	bne.n	8006012 <USB_EPStartXfer+0x398>
 8005f48:	1d3b      	adds	r3, r7, #4
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	61fb      	str	r3, [r7, #28]
 8005f4e:	1d3b      	adds	r3, r7, #4
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f56:	b29b      	uxth	r3, r3
 8005f58:	461a      	mov	r2, r3
 8005f5a:	69fb      	ldr	r3, [r7, #28]
 8005f5c:	4413      	add	r3, r2
 8005f5e:	61fb      	str	r3, [r7, #28]
 8005f60:	463b      	mov	r3, r7
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	781b      	ldrb	r3, [r3, #0]
 8005f66:	00da      	lsls	r2, r3, #3
 8005f68:	69fb      	ldr	r3, [r7, #28]
 8005f6a:	4413      	add	r3, r2
 8005f6c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005f70:	61bb      	str	r3, [r7, #24]
 8005f72:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d112      	bne.n	8005fa0 <USB_EPStartXfer+0x326>
 8005f7a:	69bb      	ldr	r3, [r7, #24]
 8005f7c:	881b      	ldrh	r3, [r3, #0]
 8005f7e:	b29b      	uxth	r3, r3
 8005f80:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005f84:	b29a      	uxth	r2, r3
 8005f86:	69bb      	ldr	r3, [r7, #24]
 8005f88:	801a      	strh	r2, [r3, #0]
 8005f8a:	69bb      	ldr	r3, [r7, #24]
 8005f8c:	881b      	ldrh	r3, [r3, #0]
 8005f8e:	b29b      	uxth	r3, r3
 8005f90:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f94:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f98:	b29a      	uxth	r2, r3
 8005f9a:	69bb      	ldr	r3, [r7, #24]
 8005f9c:	801a      	strh	r2, [r3, #0]
 8005f9e:	e057      	b.n	8006050 <USB_EPStartXfer+0x3d6>
 8005fa0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005fa4:	2b3e      	cmp	r3, #62	; 0x3e
 8005fa6:	d817      	bhi.n	8005fd8 <USB_EPStartXfer+0x35e>
 8005fa8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005fac:	085b      	lsrs	r3, r3, #1
 8005fae:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005fb2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005fb6:	f003 0301 	and.w	r3, r3, #1
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d004      	beq.n	8005fc8 <USB_EPStartXfer+0x34e>
 8005fbe:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005fc2:	3301      	adds	r3, #1
 8005fc4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005fc8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005fcc:	b29b      	uxth	r3, r3
 8005fce:	029b      	lsls	r3, r3, #10
 8005fd0:	b29a      	uxth	r2, r3
 8005fd2:	69bb      	ldr	r3, [r7, #24]
 8005fd4:	801a      	strh	r2, [r3, #0]
 8005fd6:	e03b      	b.n	8006050 <USB_EPStartXfer+0x3d6>
 8005fd8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005fdc:	095b      	lsrs	r3, r3, #5
 8005fde:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005fe2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005fe6:	f003 031f 	and.w	r3, r3, #31
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d104      	bne.n	8005ff8 <USB_EPStartXfer+0x37e>
 8005fee:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005ff2:	3b01      	subs	r3, #1
 8005ff4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005ff8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005ffc:	b29b      	uxth	r3, r3
 8005ffe:	029b      	lsls	r3, r3, #10
 8006000:	b29b      	uxth	r3, r3
 8006002:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006006:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800600a:	b29a      	uxth	r2, r3
 800600c:	69bb      	ldr	r3, [r7, #24]
 800600e:	801a      	strh	r2, [r3, #0]
 8006010:	e01e      	b.n	8006050 <USB_EPStartXfer+0x3d6>
 8006012:	463b      	mov	r3, r7
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	785b      	ldrb	r3, [r3, #1]
 8006018:	2b01      	cmp	r3, #1
 800601a:	d119      	bne.n	8006050 <USB_EPStartXfer+0x3d6>
 800601c:	1d3b      	adds	r3, r7, #4
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	627b      	str	r3, [r7, #36]	; 0x24
 8006022:	1d3b      	adds	r3, r7, #4
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800602a:	b29b      	uxth	r3, r3
 800602c:	461a      	mov	r2, r3
 800602e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006030:	4413      	add	r3, r2
 8006032:	627b      	str	r3, [r7, #36]	; 0x24
 8006034:	463b      	mov	r3, r7
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	781b      	ldrb	r3, [r3, #0]
 800603a:	00da      	lsls	r2, r3, #3
 800603c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800603e:	4413      	add	r3, r2
 8006040:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006044:	623b      	str	r3, [r7, #32]
 8006046:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800604a:	b29a      	uxth	r2, r3
 800604c:	6a3b      	ldr	r3, [r7, #32]
 800604e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006050:	463b      	mov	r3, r7
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	891b      	ldrh	r3, [r3, #8]
 8006056:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800605a:	463b      	mov	r3, r7
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	6959      	ldr	r1, [r3, #20]
 8006060:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006064:	b29b      	uxth	r3, r3
 8006066:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 800606a:	1d38      	adds	r0, r7, #4
 800606c:	6800      	ldr	r0, [r0, #0]
 800606e:	f001 f879 	bl	8007164 <USB_WritePMA>
 8006072:	e340      	b.n	80066f6 <USB_EPStartXfer+0xa7c>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006074:	463b      	mov	r3, r7
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	785b      	ldrb	r3, [r3, #1]
 800607a:	2b00      	cmp	r3, #0
 800607c:	d164      	bne.n	8006148 <USB_EPStartXfer+0x4ce>
 800607e:	1d3b      	adds	r3, r7, #4
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006084:	1d3b      	adds	r3, r7, #4
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800608c:	b29b      	uxth	r3, r3
 800608e:	461a      	mov	r2, r3
 8006090:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006092:	4413      	add	r3, r2
 8006094:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006096:	463b      	mov	r3, r7
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	781b      	ldrb	r3, [r3, #0]
 800609c:	00da      	lsls	r2, r3, #3
 800609e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80060a0:	4413      	add	r3, r2
 80060a2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80060a6:	64bb      	str	r3, [r7, #72]	; 0x48
 80060a8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d112      	bne.n	80060d6 <USB_EPStartXfer+0x45c>
 80060b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80060b2:	881b      	ldrh	r3, [r3, #0]
 80060b4:	b29b      	uxth	r3, r3
 80060b6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80060ba:	b29a      	uxth	r2, r3
 80060bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80060be:	801a      	strh	r2, [r3, #0]
 80060c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80060c2:	881b      	ldrh	r3, [r3, #0]
 80060c4:	b29b      	uxth	r3, r3
 80060c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80060ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80060ce:	b29a      	uxth	r2, r3
 80060d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80060d2:	801a      	strh	r2, [r3, #0]
 80060d4:	e057      	b.n	8006186 <USB_EPStartXfer+0x50c>
 80060d6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80060da:	2b3e      	cmp	r3, #62	; 0x3e
 80060dc:	d817      	bhi.n	800610e <USB_EPStartXfer+0x494>
 80060de:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80060e2:	085b      	lsrs	r3, r3, #1
 80060e4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80060e8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80060ec:	f003 0301 	and.w	r3, r3, #1
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d004      	beq.n	80060fe <USB_EPStartXfer+0x484>
 80060f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80060f8:	3301      	adds	r3, #1
 80060fa:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80060fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006102:	b29b      	uxth	r3, r3
 8006104:	029b      	lsls	r3, r3, #10
 8006106:	b29a      	uxth	r2, r3
 8006108:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800610a:	801a      	strh	r2, [r3, #0]
 800610c:	e03b      	b.n	8006186 <USB_EPStartXfer+0x50c>
 800610e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006112:	095b      	lsrs	r3, r3, #5
 8006114:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006118:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800611c:	f003 031f 	and.w	r3, r3, #31
 8006120:	2b00      	cmp	r3, #0
 8006122:	d104      	bne.n	800612e <USB_EPStartXfer+0x4b4>
 8006124:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006128:	3b01      	subs	r3, #1
 800612a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800612e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006132:	b29b      	uxth	r3, r3
 8006134:	029b      	lsls	r3, r3, #10
 8006136:	b29b      	uxth	r3, r3
 8006138:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800613c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006140:	b29a      	uxth	r2, r3
 8006142:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006144:	801a      	strh	r2, [r3, #0]
 8006146:	e01e      	b.n	8006186 <USB_EPStartXfer+0x50c>
 8006148:	463b      	mov	r3, r7
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	785b      	ldrb	r3, [r3, #1]
 800614e:	2b01      	cmp	r3, #1
 8006150:	d119      	bne.n	8006186 <USB_EPStartXfer+0x50c>
 8006152:	1d3b      	adds	r3, r7, #4
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	657b      	str	r3, [r7, #84]	; 0x54
 8006158:	1d3b      	adds	r3, r7, #4
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006160:	b29b      	uxth	r3, r3
 8006162:	461a      	mov	r2, r3
 8006164:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006166:	4413      	add	r3, r2
 8006168:	657b      	str	r3, [r7, #84]	; 0x54
 800616a:	463b      	mov	r3, r7
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	781b      	ldrb	r3, [r3, #0]
 8006170:	00da      	lsls	r2, r3, #3
 8006172:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006174:	4413      	add	r3, r2
 8006176:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800617a:	653b      	str	r3, [r7, #80]	; 0x50
 800617c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006180:	b29a      	uxth	r2, r3
 8006182:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006184:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006186:	463b      	mov	r3, r7
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	891b      	ldrh	r3, [r3, #8]
 800618c:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006190:	463b      	mov	r3, r7
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	6959      	ldr	r1, [r3, #20]
 8006196:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800619a:	b29b      	uxth	r3, r3
 800619c:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 80061a0:	1d38      	adds	r0, r7, #4
 80061a2:	6800      	ldr	r0, [r0, #0]
 80061a4:	f000 ffde 	bl	8007164 <USB_WritePMA>
            ep->xfer_buff += len;
 80061a8:	463b      	mov	r3, r7
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	695a      	ldr	r2, [r3, #20]
 80061ae:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80061b2:	441a      	add	r2, r3
 80061b4:	463b      	mov	r3, r7
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80061ba:	463b      	mov	r3, r7
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	6a1a      	ldr	r2, [r3, #32]
 80061c0:	463b      	mov	r3, r7
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	691b      	ldr	r3, [r3, #16]
 80061c6:	429a      	cmp	r2, r3
 80061c8:	d90e      	bls.n	80061e8 <USB_EPStartXfer+0x56e>
            {
              len = ep->maxpacket;
 80061ca:	463b      	mov	r3, r7
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	691b      	ldr	r3, [r3, #16]
 80061d0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db -= len;
 80061d4:	463b      	mov	r3, r7
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	6a1a      	ldr	r2, [r3, #32]
 80061da:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80061de:	1ad2      	subs	r2, r2, r3
 80061e0:	463b      	mov	r3, r7
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	621a      	str	r2, [r3, #32]
 80061e6:	e008      	b.n	80061fa <USB_EPStartXfer+0x580>
            }
            else
            {
              len = ep->xfer_len_db;
 80061e8:	463b      	mov	r3, r7
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	6a1b      	ldr	r3, [r3, #32]
 80061ee:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db = 0;
 80061f2:	463b      	mov	r3, r7
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	2200      	movs	r2, #0
 80061f8:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80061fa:	1d3b      	adds	r3, r7, #4
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	647b      	str	r3, [r7, #68]	; 0x44
 8006200:	463b      	mov	r3, r7
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	785b      	ldrb	r3, [r3, #1]
 8006206:	2b00      	cmp	r3, #0
 8006208:	d164      	bne.n	80062d4 <USB_EPStartXfer+0x65a>
 800620a:	1d3b      	adds	r3, r7, #4
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006210:	1d3b      	adds	r3, r7, #4
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006218:	b29b      	uxth	r3, r3
 800621a:	461a      	mov	r2, r3
 800621c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800621e:	4413      	add	r3, r2
 8006220:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006222:	463b      	mov	r3, r7
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	781b      	ldrb	r3, [r3, #0]
 8006228:	00da      	lsls	r2, r3, #3
 800622a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800622c:	4413      	add	r3, r2
 800622e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006232:	63bb      	str	r3, [r7, #56]	; 0x38
 8006234:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006238:	2b00      	cmp	r3, #0
 800623a:	d112      	bne.n	8006262 <USB_EPStartXfer+0x5e8>
 800623c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800623e:	881b      	ldrh	r3, [r3, #0]
 8006240:	b29b      	uxth	r3, r3
 8006242:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006246:	b29a      	uxth	r2, r3
 8006248:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800624a:	801a      	strh	r2, [r3, #0]
 800624c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800624e:	881b      	ldrh	r3, [r3, #0]
 8006250:	b29b      	uxth	r3, r3
 8006252:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006256:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800625a:	b29a      	uxth	r2, r3
 800625c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800625e:	801a      	strh	r2, [r3, #0]
 8006260:	e054      	b.n	800630c <USB_EPStartXfer+0x692>
 8006262:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006266:	2b3e      	cmp	r3, #62	; 0x3e
 8006268:	d817      	bhi.n	800629a <USB_EPStartXfer+0x620>
 800626a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800626e:	085b      	lsrs	r3, r3, #1
 8006270:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006274:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006278:	f003 0301 	and.w	r3, r3, #1
 800627c:	2b00      	cmp	r3, #0
 800627e:	d004      	beq.n	800628a <USB_EPStartXfer+0x610>
 8006280:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006284:	3301      	adds	r3, #1
 8006286:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800628a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800628e:	b29b      	uxth	r3, r3
 8006290:	029b      	lsls	r3, r3, #10
 8006292:	b29a      	uxth	r2, r3
 8006294:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006296:	801a      	strh	r2, [r3, #0]
 8006298:	e038      	b.n	800630c <USB_EPStartXfer+0x692>
 800629a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800629e:	095b      	lsrs	r3, r3, #5
 80062a0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80062a4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80062a8:	f003 031f 	and.w	r3, r3, #31
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d104      	bne.n	80062ba <USB_EPStartXfer+0x640>
 80062b0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80062b4:	3b01      	subs	r3, #1
 80062b6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80062ba:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80062be:	b29b      	uxth	r3, r3
 80062c0:	029b      	lsls	r3, r3, #10
 80062c2:	b29b      	uxth	r3, r3
 80062c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80062c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80062cc:	b29a      	uxth	r2, r3
 80062ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062d0:	801a      	strh	r2, [r3, #0]
 80062d2:	e01b      	b.n	800630c <USB_EPStartXfer+0x692>
 80062d4:	463b      	mov	r3, r7
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	785b      	ldrb	r3, [r3, #1]
 80062da:	2b01      	cmp	r3, #1
 80062dc:	d116      	bne.n	800630c <USB_EPStartXfer+0x692>
 80062de:	1d3b      	adds	r3, r7, #4
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80062e6:	b29b      	uxth	r3, r3
 80062e8:	461a      	mov	r2, r3
 80062ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80062ec:	4413      	add	r3, r2
 80062ee:	647b      	str	r3, [r7, #68]	; 0x44
 80062f0:	463b      	mov	r3, r7
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	781b      	ldrb	r3, [r3, #0]
 80062f6:	00da      	lsls	r2, r3, #3
 80062f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80062fa:	4413      	add	r3, r2
 80062fc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006300:	643b      	str	r3, [r7, #64]	; 0x40
 8006302:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006306:	b29a      	uxth	r2, r3
 8006308:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800630a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800630c:	463b      	mov	r3, r7
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	895b      	ldrh	r3, [r3, #10]
 8006312:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006316:	463b      	mov	r3, r7
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	6959      	ldr	r1, [r3, #20]
 800631c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006320:	b29b      	uxth	r3, r3
 8006322:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8006326:	1d38      	adds	r0, r7, #4
 8006328:	6800      	ldr	r0, [r0, #0]
 800632a:	f000 ff1b 	bl	8007164 <USB_WritePMA>
 800632e:	e1e2      	b.n	80066f6 <USB_EPStartXfer+0xa7c>
          }
        }
        /*auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer*/
        else
        {
          len = ep->xfer_len_db;
 8006330:	463b      	mov	r3, r7
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	6a1b      	ldr	r3, [r3, #32]
 8006336:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          /*disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 800633a:	1d3b      	adds	r3, r7, #4
 800633c:	681a      	ldr	r2, [r3, #0]
 800633e:	463b      	mov	r3, r7
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	781b      	ldrb	r3, [r3, #0]
 8006344:	009b      	lsls	r3, r3, #2
 8006346:	4413      	add	r3, r2
 8006348:	881b      	ldrh	r3, [r3, #0]
 800634a:	b29b      	uxth	r3, r3
 800634c:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8006350:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006354:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8006358:	1d3b      	adds	r3, r7, #4
 800635a:	681a      	ldr	r2, [r3, #0]
 800635c:	463b      	mov	r3, r7
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	781b      	ldrb	r3, [r3, #0]
 8006362:	009b      	lsls	r3, r3, #2
 8006364:	441a      	add	r2, r3
 8006366:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800636a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800636e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006372:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006376:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800637a:	b29b      	uxth	r3, r3
 800637c:	8013      	strh	r3, [r2, #0]
          /*Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800637e:	1d3b      	adds	r3, r7, #4
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	663b      	str	r3, [r7, #96]	; 0x60
 8006384:	1d3b      	adds	r3, r7, #4
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800638c:	b29b      	uxth	r3, r3
 800638e:	461a      	mov	r2, r3
 8006390:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006392:	4413      	add	r3, r2
 8006394:	663b      	str	r3, [r7, #96]	; 0x60
 8006396:	463b      	mov	r3, r7
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	781b      	ldrb	r3, [r3, #0]
 800639c:	00da      	lsls	r2, r3, #3
 800639e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80063a0:	4413      	add	r3, r2
 80063a2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80063a6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80063a8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80063ac:	b29a      	uxth	r2, r3
 80063ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80063b0:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80063b2:	463b      	mov	r3, r7
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	891b      	ldrh	r3, [r3, #8]
 80063b8:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
          /*Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80063bc:	463b      	mov	r3, r7
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	6959      	ldr	r1, [r3, #20]
 80063c2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80063c6:	b29b      	uxth	r3, r3
 80063c8:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 80063cc:	1d38      	adds	r0, r7, #4
 80063ce:	6800      	ldr	r0, [r0, #0]
 80063d0:	f000 fec8 	bl	8007164 <USB_WritePMA>
 80063d4:	e18f      	b.n	80066f6 <USB_EPStartXfer+0xa7c>

      /*mange isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80063d6:	1d3b      	adds	r3, r7, #4
 80063d8:	681a      	ldr	r2, [r3, #0]
 80063da:	463b      	mov	r3, r7
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	781b      	ldrb	r3, [r3, #0]
 80063e0:	009b      	lsls	r3, r3, #2
 80063e2:	4413      	add	r3, r2
 80063e4:	881b      	ldrh	r3, [r3, #0]
 80063e6:	b29b      	uxth	r3, r3
 80063e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	f000 808f 	beq.w	8006510 <USB_EPStartXfer+0x896>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80063f2:	1d3b      	adds	r3, r7, #4
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	67bb      	str	r3, [r7, #120]	; 0x78
 80063f8:	463b      	mov	r3, r7
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	785b      	ldrb	r3, [r3, #1]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d164      	bne.n	80064cc <USB_EPStartXfer+0x852>
 8006402:	1d3b      	adds	r3, r7, #4
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	673b      	str	r3, [r7, #112]	; 0x70
 8006408:	1d3b      	adds	r3, r7, #4
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006410:	b29b      	uxth	r3, r3
 8006412:	461a      	mov	r2, r3
 8006414:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006416:	4413      	add	r3, r2
 8006418:	673b      	str	r3, [r7, #112]	; 0x70
 800641a:	463b      	mov	r3, r7
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	781b      	ldrb	r3, [r3, #0]
 8006420:	00da      	lsls	r2, r3, #3
 8006422:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006424:	4413      	add	r3, r2
 8006426:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800642a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800642c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006430:	2b00      	cmp	r3, #0
 8006432:	d112      	bne.n	800645a <USB_EPStartXfer+0x7e0>
 8006434:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006436:	881b      	ldrh	r3, [r3, #0]
 8006438:	b29b      	uxth	r3, r3
 800643a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800643e:	b29a      	uxth	r2, r3
 8006440:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006442:	801a      	strh	r2, [r3, #0]
 8006444:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006446:	881b      	ldrh	r3, [r3, #0]
 8006448:	b29b      	uxth	r3, r3
 800644a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800644e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006452:	b29a      	uxth	r2, r3
 8006454:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006456:	801a      	strh	r2, [r3, #0]
 8006458:	e054      	b.n	8006504 <USB_EPStartXfer+0x88a>
 800645a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800645e:	2b3e      	cmp	r3, #62	; 0x3e
 8006460:	d817      	bhi.n	8006492 <USB_EPStartXfer+0x818>
 8006462:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006466:	085b      	lsrs	r3, r3, #1
 8006468:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800646c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006470:	f003 0301 	and.w	r3, r3, #1
 8006474:	2b00      	cmp	r3, #0
 8006476:	d004      	beq.n	8006482 <USB_EPStartXfer+0x808>
 8006478:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800647c:	3301      	adds	r3, #1
 800647e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006482:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006486:	b29b      	uxth	r3, r3
 8006488:	029b      	lsls	r3, r3, #10
 800648a:	b29a      	uxth	r2, r3
 800648c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800648e:	801a      	strh	r2, [r3, #0]
 8006490:	e038      	b.n	8006504 <USB_EPStartXfer+0x88a>
 8006492:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006496:	095b      	lsrs	r3, r3, #5
 8006498:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800649c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80064a0:	f003 031f 	and.w	r3, r3, #31
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d104      	bne.n	80064b2 <USB_EPStartXfer+0x838>
 80064a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064ac:	3b01      	subs	r3, #1
 80064ae:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80064b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064b6:	b29b      	uxth	r3, r3
 80064b8:	029b      	lsls	r3, r3, #10
 80064ba:	b29b      	uxth	r3, r3
 80064bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80064c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80064c4:	b29a      	uxth	r2, r3
 80064c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80064c8:	801a      	strh	r2, [r3, #0]
 80064ca:	e01b      	b.n	8006504 <USB_EPStartXfer+0x88a>
 80064cc:	463b      	mov	r3, r7
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	785b      	ldrb	r3, [r3, #1]
 80064d2:	2b01      	cmp	r3, #1
 80064d4:	d116      	bne.n	8006504 <USB_EPStartXfer+0x88a>
 80064d6:	1d3b      	adds	r3, r7, #4
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80064de:	b29b      	uxth	r3, r3
 80064e0:	461a      	mov	r2, r3
 80064e2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80064e4:	4413      	add	r3, r2
 80064e6:	67bb      	str	r3, [r7, #120]	; 0x78
 80064e8:	463b      	mov	r3, r7
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	781b      	ldrb	r3, [r3, #0]
 80064ee:	00da      	lsls	r2, r3, #3
 80064f0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80064f2:	4413      	add	r3, r2
 80064f4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80064f8:	677b      	str	r3, [r7, #116]	; 0x74
 80064fa:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80064fe:	b29a      	uxth	r2, r3
 8006500:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006502:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8006504:	463b      	mov	r3, r7
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	895b      	ldrh	r3, [r3, #10]
 800650a:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
 800650e:	e097      	b.n	8006640 <USB_EPStartXfer+0x9c6>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006510:	463b      	mov	r3, r7
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	785b      	ldrb	r3, [r3, #1]
 8006516:	2b00      	cmp	r3, #0
 8006518:	d168      	bne.n	80065ec <USB_EPStartXfer+0x972>
 800651a:	1d3b      	adds	r3, r7, #4
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006522:	1d3b      	adds	r3, r7, #4
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800652a:	b29b      	uxth	r3, r3
 800652c:	461a      	mov	r2, r3
 800652e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006532:	4413      	add	r3, r2
 8006534:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006538:	463b      	mov	r3, r7
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	781b      	ldrb	r3, [r3, #0]
 800653e:	00da      	lsls	r2, r3, #3
 8006540:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006544:	4413      	add	r3, r2
 8006546:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800654a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800654c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006550:	2b00      	cmp	r3, #0
 8006552:	d112      	bne.n	800657a <USB_EPStartXfer+0x900>
 8006554:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006556:	881b      	ldrh	r3, [r3, #0]
 8006558:	b29b      	uxth	r3, r3
 800655a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800655e:	b29a      	uxth	r2, r3
 8006560:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006562:	801a      	strh	r2, [r3, #0]
 8006564:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006566:	881b      	ldrh	r3, [r3, #0]
 8006568:	b29b      	uxth	r3, r3
 800656a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800656e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006572:	b29a      	uxth	r2, r3
 8006574:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006576:	801a      	strh	r2, [r3, #0]
 8006578:	e05d      	b.n	8006636 <USB_EPStartXfer+0x9bc>
 800657a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800657e:	2b3e      	cmp	r3, #62	; 0x3e
 8006580:	d817      	bhi.n	80065b2 <USB_EPStartXfer+0x938>
 8006582:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006586:	085b      	lsrs	r3, r3, #1
 8006588:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800658c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006590:	f003 0301 	and.w	r3, r3, #1
 8006594:	2b00      	cmp	r3, #0
 8006596:	d004      	beq.n	80065a2 <USB_EPStartXfer+0x928>
 8006598:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800659c:	3301      	adds	r3, #1
 800659e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80065a2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80065a6:	b29b      	uxth	r3, r3
 80065a8:	029b      	lsls	r3, r3, #10
 80065aa:	b29a      	uxth	r2, r3
 80065ac:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80065ae:	801a      	strh	r2, [r3, #0]
 80065b0:	e041      	b.n	8006636 <USB_EPStartXfer+0x9bc>
 80065b2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80065b6:	095b      	lsrs	r3, r3, #5
 80065b8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80065bc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80065c0:	f003 031f 	and.w	r3, r3, #31
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d104      	bne.n	80065d2 <USB_EPStartXfer+0x958>
 80065c8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80065cc:	3b01      	subs	r3, #1
 80065ce:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80065d2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80065d6:	b29b      	uxth	r3, r3
 80065d8:	029b      	lsls	r3, r3, #10
 80065da:	b29b      	uxth	r3, r3
 80065dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80065e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80065e4:	b29a      	uxth	r2, r3
 80065e6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80065e8:	801a      	strh	r2, [r3, #0]
 80065ea:	e024      	b.n	8006636 <USB_EPStartXfer+0x9bc>
 80065ec:	463b      	mov	r3, r7
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	785b      	ldrb	r3, [r3, #1]
 80065f2:	2b01      	cmp	r3, #1
 80065f4:	d11f      	bne.n	8006636 <USB_EPStartXfer+0x9bc>
 80065f6:	1d3b      	adds	r3, r7, #4
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80065fe:	1d3b      	adds	r3, r7, #4
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006606:	b29b      	uxth	r3, r3
 8006608:	461a      	mov	r2, r3
 800660a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800660e:	4413      	add	r3, r2
 8006610:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006614:	463b      	mov	r3, r7
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	781b      	ldrb	r3, [r3, #0]
 800661a:	00da      	lsls	r2, r3, #3
 800661c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006620:	4413      	add	r3, r2
 8006622:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006626:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800662a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800662e:	b29a      	uxth	r2, r3
 8006630:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006634:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006636:	463b      	mov	r3, r7
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	891b      	ldrh	r3, [r3, #8]
 800663c:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
        }
        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006640:	463b      	mov	r3, r7
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	6959      	ldr	r1, [r3, #20]
 8006646:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800664a:	b29b      	uxth	r3, r3
 800664c:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8006650:	1d38      	adds	r0, r7, #4
 8006652:	6800      	ldr	r0, [r0, #0]
 8006654:	f000 fd86 	bl	8007164 <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8006658:	463b      	mov	r3, r7
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	785b      	ldrb	r3, [r3, #1]
 800665e:	2b00      	cmp	r3, #0
 8006660:	d122      	bne.n	80066a8 <USB_EPStartXfer+0xa2e>
 8006662:	1d3b      	adds	r3, r7, #4
 8006664:	681a      	ldr	r2, [r3, #0]
 8006666:	463b      	mov	r3, r7
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	781b      	ldrb	r3, [r3, #0]
 800666c:	009b      	lsls	r3, r3, #2
 800666e:	4413      	add	r3, r2
 8006670:	881b      	ldrh	r3, [r3, #0]
 8006672:	b29b      	uxth	r3, r3
 8006674:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006678:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800667c:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8006680:	1d3b      	adds	r3, r7, #4
 8006682:	681a      	ldr	r2, [r3, #0]
 8006684:	463b      	mov	r3, r7
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	781b      	ldrb	r3, [r3, #0]
 800668a:	009b      	lsls	r3, r3, #2
 800668c:	441a      	add	r2, r3
 800668e:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8006692:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006696:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800669a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800669e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80066a2:	b29b      	uxth	r3, r3
 80066a4:	8013      	strh	r3, [r2, #0]
 80066a6:	e026      	b.n	80066f6 <USB_EPStartXfer+0xa7c>
 80066a8:	463b      	mov	r3, r7
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	785b      	ldrb	r3, [r3, #1]
 80066ae:	2b01      	cmp	r3, #1
 80066b0:	d121      	bne.n	80066f6 <USB_EPStartXfer+0xa7c>
 80066b2:	1d3b      	adds	r3, r7, #4
 80066b4:	681a      	ldr	r2, [r3, #0]
 80066b6:	463b      	mov	r3, r7
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	781b      	ldrb	r3, [r3, #0]
 80066bc:	009b      	lsls	r3, r3, #2
 80066be:	4413      	add	r3, r2
 80066c0:	881b      	ldrh	r3, [r3, #0]
 80066c2:	b29b      	uxth	r3, r3
 80066c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80066c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066cc:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 80066d0:	1d3b      	adds	r3, r7, #4
 80066d2:	681a      	ldr	r2, [r3, #0]
 80066d4:	463b      	mov	r3, r7
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	781b      	ldrb	r3, [r3, #0]
 80066da:	009b      	lsls	r3, r3, #2
 80066dc:	441a      	add	r2, r3
 80066de:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 80066e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80066e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80066ea:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80066ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066f2:	b29b      	uxth	r3, r3
 80066f4:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80066f6:	1d3b      	adds	r3, r7, #4
 80066f8:	681a      	ldr	r2, [r3, #0]
 80066fa:	463b      	mov	r3, r7
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	781b      	ldrb	r3, [r3, #0]
 8006700:	009b      	lsls	r3, r3, #2
 8006702:	4413      	add	r3, r2
 8006704:	881b      	ldrh	r3, [r3, #0]
 8006706:	b29b      	uxth	r3, r3
 8006708:	f107 020e 	add.w	r2, r7, #14
 800670c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006710:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006714:	8013      	strh	r3, [r2, #0]
 8006716:	f107 030e 	add.w	r3, r7, #14
 800671a:	f107 020e 	add.w	r2, r7, #14
 800671e:	8812      	ldrh	r2, [r2, #0]
 8006720:	f082 0210 	eor.w	r2, r2, #16
 8006724:	801a      	strh	r2, [r3, #0]
 8006726:	f107 030e 	add.w	r3, r7, #14
 800672a:	f107 020e 	add.w	r2, r7, #14
 800672e:	8812      	ldrh	r2, [r2, #0]
 8006730:	f082 0220 	eor.w	r2, r2, #32
 8006734:	801a      	strh	r2, [r3, #0]
 8006736:	1d3b      	adds	r3, r7, #4
 8006738:	681a      	ldr	r2, [r3, #0]
 800673a:	463b      	mov	r3, r7
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	781b      	ldrb	r3, [r3, #0]
 8006740:	009b      	lsls	r3, r3, #2
 8006742:	441a      	add	r2, r3
 8006744:	f107 030e 	add.w	r3, r7, #14
 8006748:	881b      	ldrh	r3, [r3, #0]
 800674a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800674e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006752:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006756:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800675a:	b29b      	uxth	r3, r3
 800675c:	8013      	strh	r3, [r2, #0]
 800675e:	e3b5      	b.n	8006ecc <USB_EPStartXfer+0x1252>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8006760:	463b      	mov	r3, r7
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	7b1b      	ldrb	r3, [r3, #12]
 8006766:	2b00      	cmp	r3, #0
 8006768:	f040 8090 	bne.w	800688c <USB_EPStartXfer+0xc12>
    {
      /* Multi packet transfer*/
      if (ep->xfer_len > ep->maxpacket)
 800676c:	463b      	mov	r3, r7
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	699a      	ldr	r2, [r3, #24]
 8006772:	463b      	mov	r3, r7
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	691b      	ldr	r3, [r3, #16]
 8006778:	429a      	cmp	r2, r3
 800677a:	d90e      	bls.n	800679a <USB_EPStartXfer+0xb20>
      {
        len = ep->maxpacket;
 800677c:	463b      	mov	r3, r7
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	691b      	ldr	r3, [r3, #16]
 8006782:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        ep->xfer_len -= len;
 8006786:	463b      	mov	r3, r7
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	699a      	ldr	r2, [r3, #24]
 800678c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006790:	1ad2      	subs	r2, r2, r3
 8006792:	463b      	mov	r3, r7
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	619a      	str	r2, [r3, #24]
 8006798:	e008      	b.n	80067ac <USB_EPStartXfer+0xb32>
      }
      else
      {
        len = ep->xfer_len;
 800679a:	463b      	mov	r3, r7
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	699b      	ldr	r3, [r3, #24]
 80067a0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        ep->xfer_len = 0U;
 80067a4:	463b      	mov	r3, r7
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	2200      	movs	r2, #0
 80067aa:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80067ac:	1d3b      	adds	r3, r7, #4
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80067b4:	1d3b      	adds	r3, r7, #4
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80067bc:	b29b      	uxth	r3, r3
 80067be:	461a      	mov	r2, r3
 80067c0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80067c4:	4413      	add	r3, r2
 80067c6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80067ca:	463b      	mov	r3, r7
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	781b      	ldrb	r3, [r3, #0]
 80067d0:	00da      	lsls	r2, r3, #3
 80067d2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80067d6:	4413      	add	r3, r2
 80067d8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80067dc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80067e0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d116      	bne.n	8006816 <USB_EPStartXfer+0xb9c>
 80067e8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80067ec:	881b      	ldrh	r3, [r3, #0]
 80067ee:	b29b      	uxth	r3, r3
 80067f0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80067f4:	b29a      	uxth	r2, r3
 80067f6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80067fa:	801a      	strh	r2, [r3, #0]
 80067fc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006800:	881b      	ldrh	r3, [r3, #0]
 8006802:	b29b      	uxth	r3, r3
 8006804:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006808:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800680c:	b29a      	uxth	r2, r3
 800680e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006812:	801a      	strh	r2, [r3, #0]
 8006814:	e32c      	b.n	8006e70 <USB_EPStartXfer+0x11f6>
 8006816:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800681a:	2b3e      	cmp	r3, #62	; 0x3e
 800681c:	d818      	bhi.n	8006850 <USB_EPStartXfer+0xbd6>
 800681e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006822:	085b      	lsrs	r3, r3, #1
 8006824:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006828:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800682c:	f003 0301 	and.w	r3, r3, #1
 8006830:	2b00      	cmp	r3, #0
 8006832:	d004      	beq.n	800683e <USB_EPStartXfer+0xbc4>
 8006834:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006838:	3301      	adds	r3, #1
 800683a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800683e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006842:	b29b      	uxth	r3, r3
 8006844:	029b      	lsls	r3, r3, #10
 8006846:	b29a      	uxth	r2, r3
 8006848:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800684c:	801a      	strh	r2, [r3, #0]
 800684e:	e30f      	b.n	8006e70 <USB_EPStartXfer+0x11f6>
 8006850:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006854:	095b      	lsrs	r3, r3, #5
 8006856:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800685a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800685e:	f003 031f 	and.w	r3, r3, #31
 8006862:	2b00      	cmp	r3, #0
 8006864:	d104      	bne.n	8006870 <USB_EPStartXfer+0xbf6>
 8006866:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800686a:	3b01      	subs	r3, #1
 800686c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006870:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006874:	b29b      	uxth	r3, r3
 8006876:	029b      	lsls	r3, r3, #10
 8006878:	b29b      	uxth	r3, r3
 800687a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800687e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006882:	b29a      	uxth	r2, r3
 8006884:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006888:	801a      	strh	r2, [r3, #0]
 800688a:	e2f1      	b.n	8006e70 <USB_EPStartXfer+0x11f6>
    }
    else
    {
      /*First Transfer Coming From HAL_PCD_EP_Receive & From ISR*/
      /*Set the Double buffer counter*/
      if (ep->type == EP_TYPE_BULK)
 800688c:	463b      	mov	r3, r7
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	78db      	ldrb	r3, [r3, #3]
 8006892:	2b02      	cmp	r3, #2
 8006894:	f040 818f 	bne.w	8006bb6 <USB_EPStartXfer+0xf3c>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8006898:	463b      	mov	r3, r7
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	785b      	ldrb	r3, [r3, #1]
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d175      	bne.n	800698e <USB_EPStartXfer+0xd14>
 80068a2:	1d3b      	adds	r3, r7, #4
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80068aa:	1d3b      	adds	r3, r7, #4
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80068b2:	b29b      	uxth	r3, r3
 80068b4:	461a      	mov	r2, r3
 80068b6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80068ba:	4413      	add	r3, r2
 80068bc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80068c0:	463b      	mov	r3, r7
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	781b      	ldrb	r3, [r3, #0]
 80068c6:	00da      	lsls	r2, r3, #3
 80068c8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80068cc:	4413      	add	r3, r2
 80068ce:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80068d2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80068d6:	463b      	mov	r3, r7
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	691b      	ldr	r3, [r3, #16]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d116      	bne.n	800690e <USB_EPStartXfer+0xc94>
 80068e0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80068e4:	881b      	ldrh	r3, [r3, #0]
 80068e6:	b29b      	uxth	r3, r3
 80068e8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80068ec:	b29a      	uxth	r2, r3
 80068ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80068f2:	801a      	strh	r2, [r3, #0]
 80068f4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80068f8:	881b      	ldrh	r3, [r3, #0]
 80068fa:	b29b      	uxth	r3, r3
 80068fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006900:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006904:	b29a      	uxth	r2, r3
 8006906:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800690a:	801a      	strh	r2, [r3, #0]
 800690c:	e065      	b.n	80069da <USB_EPStartXfer+0xd60>
 800690e:	463b      	mov	r3, r7
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	691b      	ldr	r3, [r3, #16]
 8006914:	2b3e      	cmp	r3, #62	; 0x3e
 8006916:	d81a      	bhi.n	800694e <USB_EPStartXfer+0xcd4>
 8006918:	463b      	mov	r3, r7
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	691b      	ldr	r3, [r3, #16]
 800691e:	085b      	lsrs	r3, r3, #1
 8006920:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006924:	463b      	mov	r3, r7
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	691b      	ldr	r3, [r3, #16]
 800692a:	f003 0301 	and.w	r3, r3, #1
 800692e:	2b00      	cmp	r3, #0
 8006930:	d004      	beq.n	800693c <USB_EPStartXfer+0xcc2>
 8006932:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006936:	3301      	adds	r3, #1
 8006938:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800693c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006940:	b29b      	uxth	r3, r3
 8006942:	029b      	lsls	r3, r3, #10
 8006944:	b29a      	uxth	r2, r3
 8006946:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800694a:	801a      	strh	r2, [r3, #0]
 800694c:	e045      	b.n	80069da <USB_EPStartXfer+0xd60>
 800694e:	463b      	mov	r3, r7
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	691b      	ldr	r3, [r3, #16]
 8006954:	095b      	lsrs	r3, r3, #5
 8006956:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800695a:	463b      	mov	r3, r7
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	691b      	ldr	r3, [r3, #16]
 8006960:	f003 031f 	and.w	r3, r3, #31
 8006964:	2b00      	cmp	r3, #0
 8006966:	d104      	bne.n	8006972 <USB_EPStartXfer+0xcf8>
 8006968:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800696c:	3b01      	subs	r3, #1
 800696e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006972:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006976:	b29b      	uxth	r3, r3
 8006978:	029b      	lsls	r3, r3, #10
 800697a:	b29b      	uxth	r3, r3
 800697c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006980:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006984:	b29a      	uxth	r2, r3
 8006986:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800698a:	801a      	strh	r2, [r3, #0]
 800698c:	e025      	b.n	80069da <USB_EPStartXfer+0xd60>
 800698e:	463b      	mov	r3, r7
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	785b      	ldrb	r3, [r3, #1]
 8006994:	2b01      	cmp	r3, #1
 8006996:	d120      	bne.n	80069da <USB_EPStartXfer+0xd60>
 8006998:	1d3b      	adds	r3, r7, #4
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80069a0:	1d3b      	adds	r3, r7, #4
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80069a8:	b29b      	uxth	r3, r3
 80069aa:	461a      	mov	r2, r3
 80069ac:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80069b0:	4413      	add	r3, r2
 80069b2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80069b6:	463b      	mov	r3, r7
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	781b      	ldrb	r3, [r3, #0]
 80069bc:	00da      	lsls	r2, r3, #3
 80069be:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80069c2:	4413      	add	r3, r2
 80069c4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80069c8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80069cc:	463b      	mov	r3, r7
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	691b      	ldr	r3, [r3, #16]
 80069d2:	b29a      	uxth	r2, r3
 80069d4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80069d8:	801a      	strh	r2, [r3, #0]
 80069da:	1d3b      	adds	r3, r7, #4
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80069e2:	463b      	mov	r3, r7
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	785b      	ldrb	r3, [r3, #1]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d175      	bne.n	8006ad8 <USB_EPStartXfer+0xe5e>
 80069ec:	1d3b      	adds	r3, r7, #4
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80069f4:	1d3b      	adds	r3, r7, #4
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80069fc:	b29b      	uxth	r3, r3
 80069fe:	461a      	mov	r2, r3
 8006a00:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006a04:	4413      	add	r3, r2
 8006a06:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006a0a:	463b      	mov	r3, r7
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	781b      	ldrb	r3, [r3, #0]
 8006a10:	00da      	lsls	r2, r3, #3
 8006a12:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006a16:	4413      	add	r3, r2
 8006a18:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006a1c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006a20:	463b      	mov	r3, r7
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	691b      	ldr	r3, [r3, #16]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d116      	bne.n	8006a58 <USB_EPStartXfer+0xdde>
 8006a2a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006a2e:	881b      	ldrh	r3, [r3, #0]
 8006a30:	b29b      	uxth	r3, r3
 8006a32:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006a36:	b29a      	uxth	r2, r3
 8006a38:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006a3c:	801a      	strh	r2, [r3, #0]
 8006a3e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006a42:	881b      	ldrh	r3, [r3, #0]
 8006a44:	b29b      	uxth	r3, r3
 8006a46:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a4a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a4e:	b29a      	uxth	r2, r3
 8006a50:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006a54:	801a      	strh	r2, [r3, #0]
 8006a56:	e061      	b.n	8006b1c <USB_EPStartXfer+0xea2>
 8006a58:	463b      	mov	r3, r7
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	691b      	ldr	r3, [r3, #16]
 8006a5e:	2b3e      	cmp	r3, #62	; 0x3e
 8006a60:	d81a      	bhi.n	8006a98 <USB_EPStartXfer+0xe1e>
 8006a62:	463b      	mov	r3, r7
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	691b      	ldr	r3, [r3, #16]
 8006a68:	085b      	lsrs	r3, r3, #1
 8006a6a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006a6e:	463b      	mov	r3, r7
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	691b      	ldr	r3, [r3, #16]
 8006a74:	f003 0301 	and.w	r3, r3, #1
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d004      	beq.n	8006a86 <USB_EPStartXfer+0xe0c>
 8006a7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a80:	3301      	adds	r3, #1
 8006a82:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006a86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a8a:	b29b      	uxth	r3, r3
 8006a8c:	029b      	lsls	r3, r3, #10
 8006a8e:	b29a      	uxth	r2, r3
 8006a90:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006a94:	801a      	strh	r2, [r3, #0]
 8006a96:	e041      	b.n	8006b1c <USB_EPStartXfer+0xea2>
 8006a98:	463b      	mov	r3, r7
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	691b      	ldr	r3, [r3, #16]
 8006a9e:	095b      	lsrs	r3, r3, #5
 8006aa0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006aa4:	463b      	mov	r3, r7
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	691b      	ldr	r3, [r3, #16]
 8006aaa:	f003 031f 	and.w	r3, r3, #31
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d104      	bne.n	8006abc <USB_EPStartXfer+0xe42>
 8006ab2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ab6:	3b01      	subs	r3, #1
 8006ab8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006abc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ac0:	b29b      	uxth	r3, r3
 8006ac2:	029b      	lsls	r3, r3, #10
 8006ac4:	b29b      	uxth	r3, r3
 8006ac6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006aca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ace:	b29a      	uxth	r2, r3
 8006ad0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006ad4:	801a      	strh	r2, [r3, #0]
 8006ad6:	e021      	b.n	8006b1c <USB_EPStartXfer+0xea2>
 8006ad8:	463b      	mov	r3, r7
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	785b      	ldrb	r3, [r3, #1]
 8006ade:	2b01      	cmp	r3, #1
 8006ae0:	d11c      	bne.n	8006b1c <USB_EPStartXfer+0xea2>
 8006ae2:	1d3b      	adds	r3, r7, #4
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006aea:	b29b      	uxth	r3, r3
 8006aec:	461a      	mov	r2, r3
 8006aee:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006af2:	4413      	add	r3, r2
 8006af4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006af8:	463b      	mov	r3, r7
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	781b      	ldrb	r3, [r3, #0]
 8006afe:	00da      	lsls	r2, r3, #3
 8006b00:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006b04:	4413      	add	r3, r2
 8006b06:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006b0a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006b0e:	463b      	mov	r3, r7
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	691b      	ldr	r3, [r3, #16]
 8006b14:	b29a      	uxth	r2, r3
 8006b16:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006b1a:	801a      	strh	r2, [r3, #0]
        /*Coming from ISR*/
        if (ep->xfer_count != 0U)
 8006b1c:	463b      	mov	r3, r7
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	69db      	ldr	r3, [r3, #28]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	f000 81a4 	beq.w	8006e70 <USB_EPStartXfer+0x11f6>
        {
          /* update last value to check if there is blocking state*/
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8006b28:	1d3b      	adds	r3, r7, #4
 8006b2a:	681a      	ldr	r2, [r3, #0]
 8006b2c:	463b      	mov	r3, r7
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	781b      	ldrb	r3, [r3, #0]
 8006b32:	009b      	lsls	r3, r3, #2
 8006b34:	4413      	add	r3, r2
 8006b36:	881b      	ldrh	r3, [r3, #0]
 8006b38:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006b3c:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8006b40:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d005      	beq.n	8006b54 <USB_EPStartXfer+0xeda>
 8006b48:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8006b4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d10d      	bne.n	8006b70 <USB_EPStartXfer+0xef6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006b54:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8006b58:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	f040 8187 	bne.w	8006e70 <USB_EPStartXfer+0x11f6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006b62:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8006b66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	f040 8180 	bne.w	8006e70 <USB_EPStartXfer+0x11f6>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8006b70:	1d3b      	adds	r3, r7, #4
 8006b72:	681a      	ldr	r2, [r3, #0]
 8006b74:	463b      	mov	r3, r7
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	781b      	ldrb	r3, [r3, #0]
 8006b7a:	009b      	lsls	r3, r3, #2
 8006b7c:	4413      	add	r3, r2
 8006b7e:	881b      	ldrh	r3, [r3, #0]
 8006b80:	b29b      	uxth	r3, r3
 8006b82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b8a:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 8006b8e:	1d3b      	adds	r3, r7, #4
 8006b90:	681a      	ldr	r2, [r3, #0]
 8006b92:	463b      	mov	r3, r7
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	781b      	ldrb	r3, [r3, #0]
 8006b98:	009b      	lsls	r3, r3, #2
 8006b9a:	441a      	add	r2, r3
 8006b9c:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8006ba0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ba4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ba8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006bac:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006bb0:	b29b      	uxth	r3, r3
 8006bb2:	8013      	strh	r3, [r2, #0]
 8006bb4:	e15c      	b.n	8006e70 <USB_EPStartXfer+0x11f6>
          }
        }
      }
      /*iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8006bb6:	463b      	mov	r3, r7
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	78db      	ldrb	r3, [r3, #3]
 8006bbc:	2b01      	cmp	r3, #1
 8006bbe:	f040 8155 	bne.w	8006e6c <USB_EPStartXfer+0x11f2>
      {
        /* Multi packet transfer*/
        if (ep->xfer_len > ep->maxpacket)
 8006bc2:	463b      	mov	r3, r7
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	699a      	ldr	r2, [r3, #24]
 8006bc8:	463b      	mov	r3, r7
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	691b      	ldr	r3, [r3, #16]
 8006bce:	429a      	cmp	r2, r3
 8006bd0:	d90e      	bls.n	8006bf0 <USB_EPStartXfer+0xf76>
        {
          len = ep->maxpacket;
 8006bd2:	463b      	mov	r3, r7
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	691b      	ldr	r3, [r3, #16]
 8006bd8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          ep->xfer_len -= len;
 8006bdc:	463b      	mov	r3, r7
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	699a      	ldr	r2, [r3, #24]
 8006be2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006be6:	1ad2      	subs	r2, r2, r3
 8006be8:	463b      	mov	r3, r7
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	619a      	str	r2, [r3, #24]
 8006bee:	e008      	b.n	8006c02 <USB_EPStartXfer+0xf88>
        }
        else
        {
          len = ep->xfer_len;
 8006bf0:	463b      	mov	r3, r7
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	699b      	ldr	r3, [r3, #24]
 8006bf6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          ep->xfer_len = 0U;
 8006bfa:	463b      	mov	r3, r7
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	2200      	movs	r2, #0
 8006c00:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8006c02:	463b      	mov	r3, r7
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	785b      	ldrb	r3, [r3, #1]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d16f      	bne.n	8006cec <USB_EPStartXfer+0x1072>
 8006c0c:	1d3b      	adds	r3, r7, #4
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006c14:	1d3b      	adds	r3, r7, #4
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c1c:	b29b      	uxth	r3, r3
 8006c1e:	461a      	mov	r2, r3
 8006c20:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006c24:	4413      	add	r3, r2
 8006c26:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006c2a:	463b      	mov	r3, r7
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	781b      	ldrb	r3, [r3, #0]
 8006c30:	00da      	lsls	r2, r3, #3
 8006c32:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006c36:	4413      	add	r3, r2
 8006c38:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006c3c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006c40:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d116      	bne.n	8006c76 <USB_EPStartXfer+0xffc>
 8006c48:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006c4c:	881b      	ldrh	r3, [r3, #0]
 8006c4e:	b29b      	uxth	r3, r3
 8006c50:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006c54:	b29a      	uxth	r2, r3
 8006c56:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006c5a:	801a      	strh	r2, [r3, #0]
 8006c5c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006c60:	881b      	ldrh	r3, [r3, #0]
 8006c62:	b29b      	uxth	r3, r3
 8006c64:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c68:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c6c:	b29a      	uxth	r2, r3
 8006c6e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006c72:	801a      	strh	r2, [r3, #0]
 8006c74:	e05f      	b.n	8006d36 <USB_EPStartXfer+0x10bc>
 8006c76:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006c7a:	2b3e      	cmp	r3, #62	; 0x3e
 8006c7c:	d818      	bhi.n	8006cb0 <USB_EPStartXfer+0x1036>
 8006c7e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006c82:	085b      	lsrs	r3, r3, #1
 8006c84:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006c88:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006c8c:	f003 0301 	and.w	r3, r3, #1
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d004      	beq.n	8006c9e <USB_EPStartXfer+0x1024>
 8006c94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c98:	3301      	adds	r3, #1
 8006c9a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006c9e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ca2:	b29b      	uxth	r3, r3
 8006ca4:	029b      	lsls	r3, r3, #10
 8006ca6:	b29a      	uxth	r2, r3
 8006ca8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006cac:	801a      	strh	r2, [r3, #0]
 8006cae:	e042      	b.n	8006d36 <USB_EPStartXfer+0x10bc>
 8006cb0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006cb4:	095b      	lsrs	r3, r3, #5
 8006cb6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006cba:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006cbe:	f003 031f 	and.w	r3, r3, #31
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d104      	bne.n	8006cd0 <USB_EPStartXfer+0x1056>
 8006cc6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006cca:	3b01      	subs	r3, #1
 8006ccc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006cd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006cd4:	b29b      	uxth	r3, r3
 8006cd6:	029b      	lsls	r3, r3, #10
 8006cd8:	b29b      	uxth	r3, r3
 8006cda:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006cde:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ce2:	b29a      	uxth	r2, r3
 8006ce4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006ce8:	801a      	strh	r2, [r3, #0]
 8006cea:	e024      	b.n	8006d36 <USB_EPStartXfer+0x10bc>
 8006cec:	463b      	mov	r3, r7
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	785b      	ldrb	r3, [r3, #1]
 8006cf2:	2b01      	cmp	r3, #1
 8006cf4:	d11f      	bne.n	8006d36 <USB_EPStartXfer+0x10bc>
 8006cf6:	1d3b      	adds	r3, r7, #4
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006cfe:	1d3b      	adds	r3, r7, #4
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d06:	b29b      	uxth	r3, r3
 8006d08:	461a      	mov	r2, r3
 8006d0a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006d0e:	4413      	add	r3, r2
 8006d10:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006d14:	463b      	mov	r3, r7
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	781b      	ldrb	r3, [r3, #0]
 8006d1a:	00da      	lsls	r2, r3, #3
 8006d1c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006d20:	4413      	add	r3, r2
 8006d22:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006d26:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006d2a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006d2e:	b29a      	uxth	r2, r3
 8006d30:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006d34:	801a      	strh	r2, [r3, #0]
 8006d36:	1d3b      	adds	r3, r7, #4
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006d3e:	463b      	mov	r3, r7
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	785b      	ldrb	r3, [r3, #1]
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d16f      	bne.n	8006e28 <USB_EPStartXfer+0x11ae>
 8006d48:	1d3b      	adds	r3, r7, #4
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006d50:	1d3b      	adds	r3, r7, #4
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d58:	b29b      	uxth	r3, r3
 8006d5a:	461a      	mov	r2, r3
 8006d5c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006d60:	4413      	add	r3, r2
 8006d62:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006d66:	463b      	mov	r3, r7
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	781b      	ldrb	r3, [r3, #0]
 8006d6c:	00da      	lsls	r2, r3, #3
 8006d6e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006d72:	4413      	add	r3, r2
 8006d74:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006d78:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006d7c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d116      	bne.n	8006db2 <USB_EPStartXfer+0x1138>
 8006d84:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006d88:	881b      	ldrh	r3, [r3, #0]
 8006d8a:	b29b      	uxth	r3, r3
 8006d8c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006d90:	b29a      	uxth	r2, r3
 8006d92:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006d96:	801a      	strh	r2, [r3, #0]
 8006d98:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006d9c:	881b      	ldrh	r3, [r3, #0]
 8006d9e:	b29b      	uxth	r3, r3
 8006da0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006da4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006da8:	b29a      	uxth	r2, r3
 8006daa:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006dae:	801a      	strh	r2, [r3, #0]
 8006db0:	e05e      	b.n	8006e70 <USB_EPStartXfer+0x11f6>
 8006db2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006db6:	2b3e      	cmp	r3, #62	; 0x3e
 8006db8:	d818      	bhi.n	8006dec <USB_EPStartXfer+0x1172>
 8006dba:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006dbe:	085b      	lsrs	r3, r3, #1
 8006dc0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006dc4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006dc8:	f003 0301 	and.w	r3, r3, #1
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d004      	beq.n	8006dda <USB_EPStartXfer+0x1160>
 8006dd0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006dd4:	3301      	adds	r3, #1
 8006dd6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006dda:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006dde:	b29b      	uxth	r3, r3
 8006de0:	029b      	lsls	r3, r3, #10
 8006de2:	b29a      	uxth	r2, r3
 8006de4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006de8:	801a      	strh	r2, [r3, #0]
 8006dea:	e041      	b.n	8006e70 <USB_EPStartXfer+0x11f6>
 8006dec:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006df0:	095b      	lsrs	r3, r3, #5
 8006df2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006df6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006dfa:	f003 031f 	and.w	r3, r3, #31
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d104      	bne.n	8006e0c <USB_EPStartXfer+0x1192>
 8006e02:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006e06:	3b01      	subs	r3, #1
 8006e08:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006e0c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006e10:	b29b      	uxth	r3, r3
 8006e12:	029b      	lsls	r3, r3, #10
 8006e14:	b29b      	uxth	r3, r3
 8006e16:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e1a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e1e:	b29a      	uxth	r2, r3
 8006e20:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006e24:	801a      	strh	r2, [r3, #0]
 8006e26:	e023      	b.n	8006e70 <USB_EPStartXfer+0x11f6>
 8006e28:	463b      	mov	r3, r7
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	785b      	ldrb	r3, [r3, #1]
 8006e2e:	2b01      	cmp	r3, #1
 8006e30:	d11e      	bne.n	8006e70 <USB_EPStartXfer+0x11f6>
 8006e32:	1d3b      	adds	r3, r7, #4
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e3a:	b29b      	uxth	r3, r3
 8006e3c:	461a      	mov	r2, r3
 8006e3e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006e42:	4413      	add	r3, r2
 8006e44:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006e48:	463b      	mov	r3, r7
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	781b      	ldrb	r3, [r3, #0]
 8006e4e:	00da      	lsls	r2, r3, #3
 8006e50:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006e54:	4413      	add	r3, r2
 8006e56:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006e5a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006e5e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006e62:	b29a      	uxth	r2, r3
 8006e64:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006e68:	801a      	strh	r2, [r3, #0]
 8006e6a:	e001      	b.n	8006e70 <USB_EPStartXfer+0x11f6>
      }
      else
      {
        return HAL_ERROR;
 8006e6c:	2301      	movs	r3, #1
 8006e6e:	e02e      	b.n	8006ece <USB_EPStartXfer+0x1254>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006e70:	1d3b      	adds	r3, r7, #4
 8006e72:	681a      	ldr	r2, [r3, #0]
 8006e74:	463b      	mov	r3, r7
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	781b      	ldrb	r3, [r3, #0]
 8006e7a:	009b      	lsls	r3, r3, #2
 8006e7c:	4413      	add	r3, r2
 8006e7e:	881b      	ldrh	r3, [r3, #0]
 8006e80:	b29b      	uxth	r3, r3
 8006e82:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006e86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e8a:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8006e8e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8006e92:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006e96:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8006e9a:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8006e9e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006ea2:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8006ea6:	1d3b      	adds	r3, r7, #4
 8006ea8:	681a      	ldr	r2, [r3, #0]
 8006eaa:	463b      	mov	r3, r7
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	781b      	ldrb	r3, [r3, #0]
 8006eb0:	009b      	lsls	r3, r3, #2
 8006eb2:	441a      	add	r2, r3
 8006eb4:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8006eb8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ebc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ec0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ec4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ec8:	b29b      	uxth	r3, r3
 8006eca:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006ecc:	2300      	movs	r3, #0
}
 8006ece:	4618      	mov	r0, r3
 8006ed0:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	bd80      	pop	{r7, pc}

08006ed8 <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006ed8:	b480      	push	{r7}
 8006eda:	b085      	sub	sp, #20
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	6078      	str	r0, [r7, #4]
 8006ee0:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8006ee2:	683b      	ldr	r3, [r7, #0]
 8006ee4:	785b      	ldrb	r3, [r3, #1]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d020      	beq.n	8006f2c <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8006eea:	687a      	ldr	r2, [r7, #4]
 8006eec:	683b      	ldr	r3, [r7, #0]
 8006eee:	781b      	ldrb	r3, [r3, #0]
 8006ef0:	009b      	lsls	r3, r3, #2
 8006ef2:	4413      	add	r3, r2
 8006ef4:	881b      	ldrh	r3, [r3, #0]
 8006ef6:	b29b      	uxth	r3, r3
 8006ef8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006efc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f00:	81bb      	strh	r3, [r7, #12]
 8006f02:	89bb      	ldrh	r3, [r7, #12]
 8006f04:	f083 0310 	eor.w	r3, r3, #16
 8006f08:	81bb      	strh	r3, [r7, #12]
 8006f0a:	687a      	ldr	r2, [r7, #4]
 8006f0c:	683b      	ldr	r3, [r7, #0]
 8006f0e:	781b      	ldrb	r3, [r3, #0]
 8006f10:	009b      	lsls	r3, r3, #2
 8006f12:	441a      	add	r2, r3
 8006f14:	89bb      	ldrh	r3, [r7, #12]
 8006f16:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f1a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f26:	b29b      	uxth	r3, r3
 8006f28:	8013      	strh	r3, [r2, #0]
 8006f2a:	e01f      	b.n	8006f6c <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8006f2c:	687a      	ldr	r2, [r7, #4]
 8006f2e:	683b      	ldr	r3, [r7, #0]
 8006f30:	781b      	ldrb	r3, [r3, #0]
 8006f32:	009b      	lsls	r3, r3, #2
 8006f34:	4413      	add	r3, r2
 8006f36:	881b      	ldrh	r3, [r3, #0]
 8006f38:	b29b      	uxth	r3, r3
 8006f3a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006f3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f42:	81fb      	strh	r3, [r7, #14]
 8006f44:	89fb      	ldrh	r3, [r7, #14]
 8006f46:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006f4a:	81fb      	strh	r3, [r7, #14]
 8006f4c:	687a      	ldr	r2, [r7, #4]
 8006f4e:	683b      	ldr	r3, [r7, #0]
 8006f50:	781b      	ldrb	r3, [r3, #0]
 8006f52:	009b      	lsls	r3, r3, #2
 8006f54:	441a      	add	r2, r3
 8006f56:	89fb      	ldrh	r3, [r7, #14]
 8006f58:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f5c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f60:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f68:	b29b      	uxth	r3, r3
 8006f6a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006f6c:	2300      	movs	r3, #0
}
 8006f6e:	4618      	mov	r0, r3
 8006f70:	3714      	adds	r7, #20
 8006f72:	46bd      	mov	sp, r7
 8006f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f78:	4770      	bx	lr

08006f7a <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006f7a:	b480      	push	{r7}
 8006f7c:	b087      	sub	sp, #28
 8006f7e:	af00      	add	r7, sp, #0
 8006f80:	6078      	str	r0, [r7, #4]
 8006f82:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006f84:	683b      	ldr	r3, [r7, #0]
 8006f86:	7b1b      	ldrb	r3, [r3, #12]
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	f040 809d 	bne.w	80070c8 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8006f8e:	683b      	ldr	r3, [r7, #0]
 8006f90:	785b      	ldrb	r3, [r3, #1]
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d04c      	beq.n	8007030 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006f96:	687a      	ldr	r2, [r7, #4]
 8006f98:	683b      	ldr	r3, [r7, #0]
 8006f9a:	781b      	ldrb	r3, [r3, #0]
 8006f9c:	009b      	lsls	r3, r3, #2
 8006f9e:	4413      	add	r3, r2
 8006fa0:	881b      	ldrh	r3, [r3, #0]
 8006fa2:	823b      	strh	r3, [r7, #16]
 8006fa4:	8a3b      	ldrh	r3, [r7, #16]
 8006fa6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d01b      	beq.n	8006fe6 <USB_EPClearStall+0x6c>
 8006fae:	687a      	ldr	r2, [r7, #4]
 8006fb0:	683b      	ldr	r3, [r7, #0]
 8006fb2:	781b      	ldrb	r3, [r3, #0]
 8006fb4:	009b      	lsls	r3, r3, #2
 8006fb6:	4413      	add	r3, r2
 8006fb8:	881b      	ldrh	r3, [r3, #0]
 8006fba:	b29b      	uxth	r3, r3
 8006fbc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006fc0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fc4:	81fb      	strh	r3, [r7, #14]
 8006fc6:	687a      	ldr	r2, [r7, #4]
 8006fc8:	683b      	ldr	r3, [r7, #0]
 8006fca:	781b      	ldrb	r3, [r3, #0]
 8006fcc:	009b      	lsls	r3, r3, #2
 8006fce:	441a      	add	r2, r3
 8006fd0:	89fb      	ldrh	r3, [r7, #14]
 8006fd2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006fd6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006fda:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006fde:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006fe2:	b29b      	uxth	r3, r3
 8006fe4:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006fe6:	683b      	ldr	r3, [r7, #0]
 8006fe8:	78db      	ldrb	r3, [r3, #3]
 8006fea:	2b01      	cmp	r3, #1
 8006fec:	d06c      	beq.n	80070c8 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006fee:	687a      	ldr	r2, [r7, #4]
 8006ff0:	683b      	ldr	r3, [r7, #0]
 8006ff2:	781b      	ldrb	r3, [r3, #0]
 8006ff4:	009b      	lsls	r3, r3, #2
 8006ff6:	4413      	add	r3, r2
 8006ff8:	881b      	ldrh	r3, [r3, #0]
 8006ffa:	b29b      	uxth	r3, r3
 8006ffc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007000:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007004:	81bb      	strh	r3, [r7, #12]
 8007006:	89bb      	ldrh	r3, [r7, #12]
 8007008:	f083 0320 	eor.w	r3, r3, #32
 800700c:	81bb      	strh	r3, [r7, #12]
 800700e:	687a      	ldr	r2, [r7, #4]
 8007010:	683b      	ldr	r3, [r7, #0]
 8007012:	781b      	ldrb	r3, [r3, #0]
 8007014:	009b      	lsls	r3, r3, #2
 8007016:	441a      	add	r2, r3
 8007018:	89bb      	ldrh	r3, [r7, #12]
 800701a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800701e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007022:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007026:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800702a:	b29b      	uxth	r3, r3
 800702c:	8013      	strh	r3, [r2, #0]
 800702e:	e04b      	b.n	80070c8 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007030:	687a      	ldr	r2, [r7, #4]
 8007032:	683b      	ldr	r3, [r7, #0]
 8007034:	781b      	ldrb	r3, [r3, #0]
 8007036:	009b      	lsls	r3, r3, #2
 8007038:	4413      	add	r3, r2
 800703a:	881b      	ldrh	r3, [r3, #0]
 800703c:	82fb      	strh	r3, [r7, #22]
 800703e:	8afb      	ldrh	r3, [r7, #22]
 8007040:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007044:	2b00      	cmp	r3, #0
 8007046:	d01b      	beq.n	8007080 <USB_EPClearStall+0x106>
 8007048:	687a      	ldr	r2, [r7, #4]
 800704a:	683b      	ldr	r3, [r7, #0]
 800704c:	781b      	ldrb	r3, [r3, #0]
 800704e:	009b      	lsls	r3, r3, #2
 8007050:	4413      	add	r3, r2
 8007052:	881b      	ldrh	r3, [r3, #0]
 8007054:	b29b      	uxth	r3, r3
 8007056:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800705a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800705e:	82bb      	strh	r3, [r7, #20]
 8007060:	687a      	ldr	r2, [r7, #4]
 8007062:	683b      	ldr	r3, [r7, #0]
 8007064:	781b      	ldrb	r3, [r3, #0]
 8007066:	009b      	lsls	r3, r3, #2
 8007068:	441a      	add	r2, r3
 800706a:	8abb      	ldrh	r3, [r7, #20]
 800706c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007070:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007074:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007078:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800707c:	b29b      	uxth	r3, r3
 800707e:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007080:	687a      	ldr	r2, [r7, #4]
 8007082:	683b      	ldr	r3, [r7, #0]
 8007084:	781b      	ldrb	r3, [r3, #0]
 8007086:	009b      	lsls	r3, r3, #2
 8007088:	4413      	add	r3, r2
 800708a:	881b      	ldrh	r3, [r3, #0]
 800708c:	b29b      	uxth	r3, r3
 800708e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007092:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007096:	827b      	strh	r3, [r7, #18]
 8007098:	8a7b      	ldrh	r3, [r7, #18]
 800709a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800709e:	827b      	strh	r3, [r7, #18]
 80070a0:	8a7b      	ldrh	r3, [r7, #18]
 80070a2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80070a6:	827b      	strh	r3, [r7, #18]
 80070a8:	687a      	ldr	r2, [r7, #4]
 80070aa:	683b      	ldr	r3, [r7, #0]
 80070ac:	781b      	ldrb	r3, [r3, #0]
 80070ae:	009b      	lsls	r3, r3, #2
 80070b0:	441a      	add	r2, r3
 80070b2:	8a7b      	ldrh	r3, [r7, #18]
 80070b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80070b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80070bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80070c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070c4:	b29b      	uxth	r3, r3
 80070c6:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80070c8:	2300      	movs	r3, #0
}
 80070ca:	4618      	mov	r0, r3
 80070cc:	371c      	adds	r7, #28
 80070ce:	46bd      	mov	sp, r7
 80070d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d4:	4770      	bx	lr

080070d6 <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80070d6:	b480      	push	{r7}
 80070d8:	b083      	sub	sp, #12
 80070da:	af00      	add	r7, sp, #0
 80070dc:	6078      	str	r0, [r7, #4]
 80070de:	460b      	mov	r3, r1
 80070e0:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80070e2:	78fb      	ldrb	r3, [r7, #3]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d103      	bne.n	80070f0 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	2280      	movs	r2, #128	; 0x80
 80070ec:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80070f0:	2300      	movs	r3, #0
}
 80070f2:	4618      	mov	r0, r3
 80070f4:	370c      	adds	r7, #12
 80070f6:	46bd      	mov	sp, r7
 80070f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fc:	4770      	bx	lr

080070fe <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80070fe:	b480      	push	{r7}
 8007100:	b083      	sub	sp, #12
 8007102:	af00      	add	r7, sp, #0
 8007104:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800710c:	b29b      	uxth	r3, r3
 800710e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007112:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007116:	b29a      	uxth	r2, r3
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800711e:	2300      	movs	r3, #0
}
 8007120:	4618      	mov	r0, r3
 8007122:	370c      	adds	r7, #12
 8007124:	46bd      	mov	sp, r7
 8007126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712a:	4770      	bx	lr

0800712c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800712c:	b480      	push	{r7}
 800712e:	b085      	sub	sp, #20
 8007130:	af00      	add	r7, sp, #0
 8007132:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800713a:	b29b      	uxth	r3, r3
 800713c:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800713e:	68fb      	ldr	r3, [r7, #12]
}
 8007140:	4618      	mov	r0, r3
 8007142:	3714      	adds	r7, #20
 8007144:	46bd      	mov	sp, r7
 8007146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714a:	4770      	bx	lr

0800714c <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800714c:	b480      	push	{r7}
 800714e:	b083      	sub	sp, #12
 8007150:	af00      	add	r7, sp, #0
 8007152:	6078      	str	r0, [r7, #4]
 8007154:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8007156:	2300      	movs	r3, #0
}
 8007158:	4618      	mov	r0, r3
 800715a:	370c      	adds	r7, #12
 800715c:	46bd      	mov	sp, r7
 800715e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007162:	4770      	bx	lr

08007164 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007164:	b480      	push	{r7}
 8007166:	b08d      	sub	sp, #52	; 0x34
 8007168:	af00      	add	r7, sp, #0
 800716a:	60f8      	str	r0, [r7, #12]
 800716c:	60b9      	str	r1, [r7, #8]
 800716e:	4611      	mov	r1, r2
 8007170:	461a      	mov	r2, r3
 8007172:	460b      	mov	r3, r1
 8007174:	80fb      	strh	r3, [r7, #6]
 8007176:	4613      	mov	r3, r2
 8007178:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800717a:	88bb      	ldrh	r3, [r7, #4]
 800717c:	3301      	adds	r3, #1
 800717e:	085b      	lsrs	r3, r3, #1
 8007180:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007186:	68bb      	ldr	r3, [r7, #8]
 8007188:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800718a:	88fa      	ldrh	r2, [r7, #6]
 800718c:	69fb      	ldr	r3, [r7, #28]
 800718e:	4413      	add	r3, r2
 8007190:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007194:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8007196:	6a3b      	ldr	r3, [r7, #32]
 8007198:	62fb      	str	r3, [r7, #44]	; 0x2c
 800719a:	e01b      	b.n	80071d4 <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 800719c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800719e:	781b      	ldrb	r3, [r3, #0]
 80071a0:	61bb      	str	r3, [r7, #24]
    pBuf++;
 80071a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071a4:	3301      	adds	r3, #1
 80071a6:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 80071a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071aa:	781b      	ldrb	r3, [r3, #0]
 80071ac:	b29b      	uxth	r3, r3
 80071ae:	021b      	lsls	r3, r3, #8
 80071b0:	b29b      	uxth	r3, r3
 80071b2:	461a      	mov	r2, r3
 80071b4:	69bb      	ldr	r3, [r7, #24]
 80071b6:	4313      	orrs	r3, r2
 80071b8:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 80071ba:	697b      	ldr	r3, [r7, #20]
 80071bc:	b29a      	uxth	r2, r3
 80071be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071c0:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80071c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071c4:	3302      	adds	r3, #2
 80071c6:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 80071c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071ca:	3301      	adds	r3, #1
 80071cc:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 80071ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071d0:	3b01      	subs	r3, #1
 80071d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80071d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d1e0      	bne.n	800719c <USB_WritePMA+0x38>
  }
}
 80071da:	bf00      	nop
 80071dc:	3734      	adds	r7, #52	; 0x34
 80071de:	46bd      	mov	sp, r7
 80071e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e4:	4770      	bx	lr

080071e6 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80071e6:	b480      	push	{r7}
 80071e8:	b08b      	sub	sp, #44	; 0x2c
 80071ea:	af00      	add	r7, sp, #0
 80071ec:	60f8      	str	r0, [r7, #12]
 80071ee:	60b9      	str	r1, [r7, #8]
 80071f0:	4611      	mov	r1, r2
 80071f2:	461a      	mov	r2, r3
 80071f4:	460b      	mov	r3, r1
 80071f6:	80fb      	strh	r3, [r7, #6]
 80071f8:	4613      	mov	r3, r2
 80071fa:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80071fc:	88bb      	ldrh	r3, [r7, #4]
 80071fe:	085b      	lsrs	r3, r3, #1
 8007200:	b29b      	uxth	r3, r3
 8007202:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007208:	68bb      	ldr	r3, [r7, #8]
 800720a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800720c:	88fa      	ldrh	r2, [r7, #6]
 800720e:	697b      	ldr	r3, [r7, #20]
 8007210:	4413      	add	r3, r2
 8007212:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007216:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8007218:	69bb      	ldr	r3, [r7, #24]
 800721a:	627b      	str	r3, [r7, #36]	; 0x24
 800721c:	e018      	b.n	8007250 <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800721e:	6a3b      	ldr	r3, [r7, #32]
 8007220:	881b      	ldrh	r3, [r3, #0]
 8007222:	b29b      	uxth	r3, r3
 8007224:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8007226:	6a3b      	ldr	r3, [r7, #32]
 8007228:	3302      	adds	r3, #2
 800722a:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800722c:	693b      	ldr	r3, [r7, #16]
 800722e:	b2da      	uxtb	r2, r3
 8007230:	69fb      	ldr	r3, [r7, #28]
 8007232:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007234:	69fb      	ldr	r3, [r7, #28]
 8007236:	3301      	adds	r3, #1
 8007238:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800723a:	693b      	ldr	r3, [r7, #16]
 800723c:	0a1b      	lsrs	r3, r3, #8
 800723e:	b2da      	uxtb	r2, r3
 8007240:	69fb      	ldr	r3, [r7, #28]
 8007242:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007244:	69fb      	ldr	r3, [r7, #28]
 8007246:	3301      	adds	r3, #1
 8007248:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 800724a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800724c:	3b01      	subs	r3, #1
 800724e:	627b      	str	r3, [r7, #36]	; 0x24
 8007250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007252:	2b00      	cmp	r3, #0
 8007254:	d1e3      	bne.n	800721e <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8007256:	88bb      	ldrh	r3, [r7, #4]
 8007258:	f003 0301 	and.w	r3, r3, #1
 800725c:	b29b      	uxth	r3, r3
 800725e:	2b00      	cmp	r3, #0
 8007260:	d007      	beq.n	8007272 <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 8007262:	6a3b      	ldr	r3, [r7, #32]
 8007264:	881b      	ldrh	r3, [r3, #0]
 8007266:	b29b      	uxth	r3, r3
 8007268:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800726a:	693b      	ldr	r3, [r7, #16]
 800726c:	b2da      	uxtb	r2, r3
 800726e:	69fb      	ldr	r3, [r7, #28]
 8007270:	701a      	strb	r2, [r3, #0]
  }
}
 8007272:	bf00      	nop
 8007274:	372c      	adds	r7, #44	; 0x2c
 8007276:	46bd      	mov	sp, r7
 8007278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727c:	4770      	bx	lr

0800727e <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800727e:	b580      	push	{r7, lr}
 8007280:	b084      	sub	sp, #16
 8007282:	af00      	add	r7, sp, #0
 8007284:	6078      	str	r0, [r7, #4]
 8007286:	460b      	mov	r3, r1
 8007288:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800728a:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800728e:	f002 f89d 	bl	80093cc <USBD_static_malloc>
 8007292:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	2b00      	cmp	r3, #0
 8007298:	d105      	bne.n	80072a6 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	2200      	movs	r2, #0
 800729e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 80072a2:	2302      	movs	r3, #2
 80072a4:	e066      	b.n	8007374 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	68fa      	ldr	r2, [r7, #12]
 80072aa:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	7c1b      	ldrb	r3, [r3, #16]
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d119      	bne.n	80072ea <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80072b6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80072ba:	2202      	movs	r2, #2
 80072bc:	2181      	movs	r1, #129	; 0x81
 80072be:	6878      	ldr	r0, [r7, #4]
 80072c0:	f001 ff29 	bl	8009116 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	2201      	movs	r2, #1
 80072c8:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80072ca:	f44f 7300 	mov.w	r3, #512	; 0x200
 80072ce:	2202      	movs	r2, #2
 80072d0:	2101      	movs	r1, #1
 80072d2:	6878      	ldr	r0, [r7, #4]
 80072d4:	f001 ff1f 	bl	8009116 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	2201      	movs	r2, #1
 80072dc:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	2210      	movs	r2, #16
 80072e4:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 80072e8:	e016      	b.n	8007318 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80072ea:	2340      	movs	r3, #64	; 0x40
 80072ec:	2202      	movs	r2, #2
 80072ee:	2181      	movs	r1, #129	; 0x81
 80072f0:	6878      	ldr	r0, [r7, #4]
 80072f2:	f001 ff10 	bl	8009116 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	2201      	movs	r2, #1
 80072fa:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80072fc:	2340      	movs	r3, #64	; 0x40
 80072fe:	2202      	movs	r2, #2
 8007300:	2101      	movs	r1, #1
 8007302:	6878      	ldr	r0, [r7, #4]
 8007304:	f001 ff07 	bl	8009116 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	2201      	movs	r2, #1
 800730c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	2210      	movs	r2, #16
 8007314:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007318:	2308      	movs	r3, #8
 800731a:	2203      	movs	r2, #3
 800731c:	2182      	movs	r1, #130	; 0x82
 800731e:	6878      	ldr	r0, [r7, #4]
 8007320:	f001 fef9 	bl	8009116 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	2201      	movs	r2, #1
 8007328:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	2200      	movs	r2, #0
 800733a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	2200      	movs	r2, #0
 8007342:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	7c1b      	ldrb	r3, [r3, #16]
 800734a:	2b00      	cmp	r3, #0
 800734c:	d109      	bne.n	8007362 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007354:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007358:	2101      	movs	r1, #1
 800735a:	6878      	ldr	r0, [r7, #4]
 800735c:	f001 ffcb 	bl	80092f6 <USBD_LL_PrepareReceive>
 8007360:	e007      	b.n	8007372 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007368:	2340      	movs	r3, #64	; 0x40
 800736a:	2101      	movs	r1, #1
 800736c:	6878      	ldr	r0, [r7, #4]
 800736e:	f001 ffc2 	bl	80092f6 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007372:	2300      	movs	r3, #0
}
 8007374:	4618      	mov	r0, r3
 8007376:	3710      	adds	r7, #16
 8007378:	46bd      	mov	sp, r7
 800737a:	bd80      	pop	{r7, pc}

0800737c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800737c:	b580      	push	{r7, lr}
 800737e:	b082      	sub	sp, #8
 8007380:	af00      	add	r7, sp, #0
 8007382:	6078      	str	r0, [r7, #4]
 8007384:	460b      	mov	r3, r1
 8007386:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8007388:	2181      	movs	r1, #129	; 0x81
 800738a:	6878      	ldr	r0, [r7, #4]
 800738c:	f001 fee9 	bl	8009162 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	2200      	movs	r2, #0
 8007394:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8007396:	2101      	movs	r1, #1
 8007398:	6878      	ldr	r0, [r7, #4]
 800739a:	f001 fee2 	bl	8009162 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	2200      	movs	r2, #0
 80073a2:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80073a6:	2182      	movs	r1, #130	; 0x82
 80073a8:	6878      	ldr	r0, [r7, #4]
 80073aa:	f001 feda 	bl	8009162 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	2200      	movs	r2, #0
 80073b2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	2200      	movs	r2, #0
 80073ba:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d00e      	beq.n	80073e6 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80073ce:	685b      	ldr	r3, [r3, #4]
 80073d0:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80073d8:	4618      	mov	r0, r3
 80073da:	f002 f805 	bl	80093e8 <USBD_static_free>
    pdev->pClassData = NULL;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	2200      	movs	r2, #0
 80073e2:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80073e6:	2300      	movs	r3, #0
}
 80073e8:	4618      	mov	r0, r3
 80073ea:	3708      	adds	r7, #8
 80073ec:	46bd      	mov	sp, r7
 80073ee:	bd80      	pop	{r7, pc}

080073f0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80073f0:	b580      	push	{r7, lr}
 80073f2:	b086      	sub	sp, #24
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	6078      	str	r0, [r7, #4]
 80073f8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007400:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8007402:	2300      	movs	r3, #0
 8007404:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8007406:	2300      	movs	r3, #0
 8007408:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 800740a:	2300      	movs	r3, #0
 800740c:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800740e:	683b      	ldr	r3, [r7, #0]
 8007410:	781b      	ldrb	r3, [r3, #0]
 8007412:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007416:	2b00      	cmp	r3, #0
 8007418:	d03a      	beq.n	8007490 <USBD_CDC_Setup+0xa0>
 800741a:	2b20      	cmp	r3, #32
 800741c:	f040 8097 	bne.w	800754e <USBD_CDC_Setup+0x15e>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8007420:	683b      	ldr	r3, [r7, #0]
 8007422:	88db      	ldrh	r3, [r3, #6]
 8007424:	2b00      	cmp	r3, #0
 8007426:	d029      	beq.n	800747c <USBD_CDC_Setup+0x8c>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8007428:	683b      	ldr	r3, [r7, #0]
 800742a:	781b      	ldrb	r3, [r3, #0]
 800742c:	b25b      	sxtb	r3, r3
 800742e:	2b00      	cmp	r3, #0
 8007430:	da11      	bge.n	8007456 <USBD_CDC_Setup+0x66>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007438:	689b      	ldr	r3, [r3, #8]
 800743a:	683a      	ldr	r2, [r7, #0]
 800743c:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800743e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007440:	683a      	ldr	r2, [r7, #0]
 8007442:	88d2      	ldrh	r2, [r2, #6]
 8007444:	4798      	blx	r3
                                                            req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 8007446:	6939      	ldr	r1, [r7, #16]
 8007448:	683b      	ldr	r3, [r7, #0]
 800744a:	88db      	ldrh	r3, [r3, #6]
 800744c:	461a      	mov	r2, r3
 800744e:	6878      	ldr	r0, [r7, #4]
 8007450:	f001 fa8d 	bl	800896e <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8007454:	e082      	b.n	800755c <USBD_CDC_Setup+0x16c>
          hcdc->CmdOpCode = req->bRequest;
 8007456:	683b      	ldr	r3, [r7, #0]
 8007458:	785a      	ldrb	r2, [r3, #1]
 800745a:	693b      	ldr	r3, [r7, #16]
 800745c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8007460:	683b      	ldr	r3, [r7, #0]
 8007462:	88db      	ldrh	r3, [r3, #6]
 8007464:	b2da      	uxtb	r2, r3
 8007466:	693b      	ldr	r3, [r7, #16]
 8007468:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800746c:	6939      	ldr	r1, [r7, #16]
 800746e:	683b      	ldr	r3, [r7, #0]
 8007470:	88db      	ldrh	r3, [r3, #6]
 8007472:	461a      	mov	r2, r3
 8007474:	6878      	ldr	r0, [r7, #4]
 8007476:	f001 faa6 	bl	80089c6 <USBD_CtlPrepareRx>
      break;
 800747a:	e06f      	b.n	800755c <USBD_CDC_Setup+0x16c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007482:	689b      	ldr	r3, [r3, #8]
 8007484:	683a      	ldr	r2, [r7, #0]
 8007486:	7850      	ldrb	r0, [r2, #1]
 8007488:	2200      	movs	r2, #0
 800748a:	6839      	ldr	r1, [r7, #0]
 800748c:	4798      	blx	r3
      break;
 800748e:	e065      	b.n	800755c <USBD_CDC_Setup+0x16c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007490:	683b      	ldr	r3, [r7, #0]
 8007492:	785b      	ldrb	r3, [r3, #1]
 8007494:	2b0b      	cmp	r3, #11
 8007496:	d84f      	bhi.n	8007538 <USBD_CDC_Setup+0x148>
 8007498:	a201      	add	r2, pc, #4	; (adr r2, 80074a0 <USBD_CDC_Setup+0xb0>)
 800749a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800749e:	bf00      	nop
 80074a0:	080074d1 	.word	0x080074d1
 80074a4:	08007547 	.word	0x08007547
 80074a8:	08007539 	.word	0x08007539
 80074ac:	08007539 	.word	0x08007539
 80074b0:	08007539 	.word	0x08007539
 80074b4:	08007539 	.word	0x08007539
 80074b8:	08007539 	.word	0x08007539
 80074bc:	08007539 	.word	0x08007539
 80074c0:	08007539 	.word	0x08007539
 80074c4:	08007539 	.word	0x08007539
 80074c8:	080074f9 	.word	0x080074f9
 80074cc:	08007521 	.word	0x08007521
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80074d6:	2b03      	cmp	r3, #3
 80074d8:	d107      	bne.n	80074ea <USBD_CDC_Setup+0xfa>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80074da:	f107 030c 	add.w	r3, r7, #12
 80074de:	2202      	movs	r2, #2
 80074e0:	4619      	mov	r1, r3
 80074e2:	6878      	ldr	r0, [r7, #4]
 80074e4:	f001 fa43 	bl	800896e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80074e8:	e030      	b.n	800754c <USBD_CDC_Setup+0x15c>
            USBD_CtlError(pdev, req);
 80074ea:	6839      	ldr	r1, [r7, #0]
 80074ec:	6878      	ldr	r0, [r7, #4]
 80074ee:	f001 f9cd 	bl	800888c <USBD_CtlError>
            ret = USBD_FAIL;
 80074f2:	2303      	movs	r3, #3
 80074f4:	75fb      	strb	r3, [r7, #23]
          break;
 80074f6:	e029      	b.n	800754c <USBD_CDC_Setup+0x15c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80074fe:	2b03      	cmp	r3, #3
 8007500:	d107      	bne.n	8007512 <USBD_CDC_Setup+0x122>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007502:	f107 030f 	add.w	r3, r7, #15
 8007506:	2201      	movs	r2, #1
 8007508:	4619      	mov	r1, r3
 800750a:	6878      	ldr	r0, [r7, #4]
 800750c:	f001 fa2f 	bl	800896e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007510:	e01c      	b.n	800754c <USBD_CDC_Setup+0x15c>
            USBD_CtlError(pdev, req);
 8007512:	6839      	ldr	r1, [r7, #0]
 8007514:	6878      	ldr	r0, [r7, #4]
 8007516:	f001 f9b9 	bl	800888c <USBD_CtlError>
            ret = USBD_FAIL;
 800751a:	2303      	movs	r3, #3
 800751c:	75fb      	strb	r3, [r7, #23]
          break;
 800751e:	e015      	b.n	800754c <USBD_CDC_Setup+0x15c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007526:	2b03      	cmp	r3, #3
 8007528:	d00f      	beq.n	800754a <USBD_CDC_Setup+0x15a>
          {
            USBD_CtlError(pdev, req);
 800752a:	6839      	ldr	r1, [r7, #0]
 800752c:	6878      	ldr	r0, [r7, #4]
 800752e:	f001 f9ad 	bl	800888c <USBD_CtlError>
            ret = USBD_FAIL;
 8007532:	2303      	movs	r3, #3
 8007534:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007536:	e008      	b.n	800754a <USBD_CDC_Setup+0x15a>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007538:	6839      	ldr	r1, [r7, #0]
 800753a:	6878      	ldr	r0, [r7, #4]
 800753c:	f001 f9a6 	bl	800888c <USBD_CtlError>
          ret = USBD_FAIL;
 8007540:	2303      	movs	r3, #3
 8007542:	75fb      	strb	r3, [r7, #23]
          break;
 8007544:	e002      	b.n	800754c <USBD_CDC_Setup+0x15c>
          break;
 8007546:	bf00      	nop
 8007548:	e008      	b.n	800755c <USBD_CDC_Setup+0x16c>
          break;
 800754a:	bf00      	nop
      }
      break;
 800754c:	e006      	b.n	800755c <USBD_CDC_Setup+0x16c>

    default:
      USBD_CtlError(pdev, req);
 800754e:	6839      	ldr	r1, [r7, #0]
 8007550:	6878      	ldr	r0, [r7, #4]
 8007552:	f001 f99b 	bl	800888c <USBD_CtlError>
      ret = USBD_FAIL;
 8007556:	2303      	movs	r3, #3
 8007558:	75fb      	strb	r3, [r7, #23]
      break;
 800755a:	bf00      	nop
  }

  return (uint8_t)ret;
 800755c:	7dfb      	ldrb	r3, [r7, #23]
}
 800755e:	4618      	mov	r0, r3
 8007560:	3718      	adds	r7, #24
 8007562:	46bd      	mov	sp, r7
 8007564:	bd80      	pop	{r7, pc}
 8007566:	bf00      	nop

08007568 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007568:	b580      	push	{r7, lr}
 800756a:	b084      	sub	sp, #16
 800756c:	af00      	add	r7, sp, #0
 800756e:	6078      	str	r0, [r7, #4]
 8007570:	460b      	mov	r3, r1
 8007572:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800757a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007582:	2b00      	cmp	r3, #0
 8007584:	d101      	bne.n	800758a <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007586:	2303      	movs	r3, #3
 8007588:	e04f      	b.n	800762a <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007590:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8007592:	78fa      	ldrb	r2, [r7, #3]
 8007594:	6879      	ldr	r1, [r7, #4]
 8007596:	4613      	mov	r3, r2
 8007598:	009b      	lsls	r3, r3, #2
 800759a:	4413      	add	r3, r2
 800759c:	009b      	lsls	r3, r3, #2
 800759e:	440b      	add	r3, r1
 80075a0:	3318      	adds	r3, #24
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d029      	beq.n	80075fc <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80075a8:	78fa      	ldrb	r2, [r7, #3]
 80075aa:	6879      	ldr	r1, [r7, #4]
 80075ac:	4613      	mov	r3, r2
 80075ae:	009b      	lsls	r3, r3, #2
 80075b0:	4413      	add	r3, r2
 80075b2:	009b      	lsls	r3, r3, #2
 80075b4:	440b      	add	r3, r1
 80075b6:	3318      	adds	r3, #24
 80075b8:	681a      	ldr	r2, [r3, #0]
 80075ba:	78f9      	ldrb	r1, [r7, #3]
 80075bc:	68f8      	ldr	r0, [r7, #12]
 80075be:	460b      	mov	r3, r1
 80075c0:	009b      	lsls	r3, r3, #2
 80075c2:	440b      	add	r3, r1
 80075c4:	00db      	lsls	r3, r3, #3
 80075c6:	4403      	add	r3, r0
 80075c8:	3338      	adds	r3, #56	; 0x38
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	fbb2 f1f3 	udiv	r1, r2, r3
 80075d0:	fb03 f301 	mul.w	r3, r3, r1
 80075d4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d110      	bne.n	80075fc <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 80075da:	78fa      	ldrb	r2, [r7, #3]
 80075dc:	6879      	ldr	r1, [r7, #4]
 80075de:	4613      	mov	r3, r2
 80075e0:	009b      	lsls	r3, r3, #2
 80075e2:	4413      	add	r3, r2
 80075e4:	009b      	lsls	r3, r3, #2
 80075e6:	440b      	add	r3, r1
 80075e8:	3318      	adds	r3, #24
 80075ea:	2200      	movs	r2, #0
 80075ec:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80075ee:	78f9      	ldrb	r1, [r7, #3]
 80075f0:	2300      	movs	r3, #0
 80075f2:	2200      	movs	r2, #0
 80075f4:	6878      	ldr	r0, [r7, #4]
 80075f6:	f001 fe5d 	bl	80092b4 <USBD_LL_Transmit>
 80075fa:	e015      	b.n	8007628 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 80075fc:	68bb      	ldr	r3, [r7, #8]
 80075fe:	2200      	movs	r2, #0
 8007600:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800760a:	691b      	ldr	r3, [r3, #16]
 800760c:	2b00      	cmp	r3, #0
 800760e:	d00b      	beq.n	8007628 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007616:	691b      	ldr	r3, [r3, #16]
 8007618:	68ba      	ldr	r2, [r7, #8]
 800761a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800761e:	68ba      	ldr	r2, [r7, #8]
 8007620:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8007624:	78fa      	ldrb	r2, [r7, #3]
 8007626:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8007628:	2300      	movs	r3, #0
}
 800762a:	4618      	mov	r0, r3
 800762c:	3710      	adds	r7, #16
 800762e:	46bd      	mov	sp, r7
 8007630:	bd80      	pop	{r7, pc}

08007632 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007632:	b580      	push	{r7, lr}
 8007634:	b084      	sub	sp, #16
 8007636:	af00      	add	r7, sp, #0
 8007638:	6078      	str	r0, [r7, #4]
 800763a:	460b      	mov	r3, r1
 800763c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007644:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800764c:	2b00      	cmp	r3, #0
 800764e:	d101      	bne.n	8007654 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007650:	2303      	movs	r3, #3
 8007652:	e015      	b.n	8007680 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007654:	78fb      	ldrb	r3, [r7, #3]
 8007656:	4619      	mov	r1, r3
 8007658:	6878      	ldr	r0, [r7, #4]
 800765a:	f001 fe6d 	bl	8009338 <USBD_LL_GetRxDataSize>
 800765e:	4602      	mov	r2, r0
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800766c:	68db      	ldr	r3, [r3, #12]
 800766e:	68fa      	ldr	r2, [r7, #12]
 8007670:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007674:	68fa      	ldr	r2, [r7, #12]
 8007676:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800767a:	4611      	mov	r1, r2
 800767c:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800767e:	2300      	movs	r3, #0
}
 8007680:	4618      	mov	r0, r3
 8007682:	3710      	adds	r7, #16
 8007684:	46bd      	mov	sp, r7
 8007686:	bd80      	pop	{r7, pc}

08007688 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007688:	b580      	push	{r7, lr}
 800768a:	b084      	sub	sp, #16
 800768c:	af00      	add	r7, sp, #0
 800768e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007696:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d015      	beq.n	80076ce <USBD_CDC_EP0_RxReady+0x46>
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80076a8:	2bff      	cmp	r3, #255	; 0xff
 80076aa:	d010      	beq.n	80076ce <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80076b2:	689b      	ldr	r3, [r3, #8]
 80076b4:	68fa      	ldr	r2, [r7, #12]
 80076b6:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 80076ba:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80076bc:	68fa      	ldr	r2, [r7, #12]
 80076be:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80076c2:	b292      	uxth	r2, r2
 80076c4:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	22ff      	movs	r2, #255	; 0xff
 80076ca:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80076ce:	2300      	movs	r3, #0
}
 80076d0:	4618      	mov	r0, r3
 80076d2:	3710      	adds	r7, #16
 80076d4:	46bd      	mov	sp, r7
 80076d6:	bd80      	pop	{r7, pc}

080076d8 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80076d8:	b480      	push	{r7}
 80076da:	b083      	sub	sp, #12
 80076dc:	af00      	add	r7, sp, #0
 80076de:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	2243      	movs	r2, #67	; 0x43
 80076e4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 80076e6:	4b03      	ldr	r3, [pc, #12]	; (80076f4 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80076e8:	4618      	mov	r0, r3
 80076ea:	370c      	adds	r7, #12
 80076ec:	46bd      	mov	sp, r7
 80076ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f2:	4770      	bx	lr
 80076f4:	20000094 	.word	0x20000094

080076f8 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80076f8:	b480      	push	{r7}
 80076fa:	b083      	sub	sp, #12
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	2243      	movs	r2, #67	; 0x43
 8007704:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8007706:	4b03      	ldr	r3, [pc, #12]	; (8007714 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8007708:	4618      	mov	r0, r3
 800770a:	370c      	adds	r7, #12
 800770c:	46bd      	mov	sp, r7
 800770e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007712:	4770      	bx	lr
 8007714:	20000050 	.word	0x20000050

08007718 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007718:	b480      	push	{r7}
 800771a:	b083      	sub	sp, #12
 800771c:	af00      	add	r7, sp, #0
 800771e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	2243      	movs	r2, #67	; 0x43
 8007724:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8007726:	4b03      	ldr	r3, [pc, #12]	; (8007734 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8007728:	4618      	mov	r0, r3
 800772a:	370c      	adds	r7, #12
 800772c:	46bd      	mov	sp, r7
 800772e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007732:	4770      	bx	lr
 8007734:	200000d8 	.word	0x200000d8

08007738 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007738:	b480      	push	{r7}
 800773a:	b083      	sub	sp, #12
 800773c:	af00      	add	r7, sp, #0
 800773e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	220a      	movs	r2, #10
 8007744:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8007746:	4b03      	ldr	r3, [pc, #12]	; (8007754 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007748:	4618      	mov	r0, r3
 800774a:	370c      	adds	r7, #12
 800774c:	46bd      	mov	sp, r7
 800774e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007752:	4770      	bx	lr
 8007754:	2000000c 	.word	0x2000000c

08007758 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007758:	b480      	push	{r7}
 800775a:	b083      	sub	sp, #12
 800775c:	af00      	add	r7, sp, #0
 800775e:	6078      	str	r0, [r7, #4]
 8007760:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007762:	683b      	ldr	r3, [r7, #0]
 8007764:	2b00      	cmp	r3, #0
 8007766:	d101      	bne.n	800776c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007768:	2303      	movs	r3, #3
 800776a:	e004      	b.n	8007776 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	683a      	ldr	r2, [r7, #0]
 8007770:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8007774:	2300      	movs	r3, #0
}
 8007776:	4618      	mov	r0, r3
 8007778:	370c      	adds	r7, #12
 800777a:	46bd      	mov	sp, r7
 800777c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007780:	4770      	bx	lr

08007782 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007782:	b480      	push	{r7}
 8007784:	b087      	sub	sp, #28
 8007786:	af00      	add	r7, sp, #0
 8007788:	60f8      	str	r0, [r7, #12]
 800778a:	60b9      	str	r1, [r7, #8]
 800778c:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007794:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8007796:	697b      	ldr	r3, [r7, #20]
 8007798:	68ba      	ldr	r2, [r7, #8]
 800779a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800779e:	697b      	ldr	r3, [r7, #20]
 80077a0:	687a      	ldr	r2, [r7, #4]
 80077a2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80077a6:	2300      	movs	r3, #0
}
 80077a8:	4618      	mov	r0, r3
 80077aa:	371c      	adds	r7, #28
 80077ac:	46bd      	mov	sp, r7
 80077ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b2:	4770      	bx	lr

080077b4 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80077b4:	b480      	push	{r7}
 80077b6:	b085      	sub	sp, #20
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	6078      	str	r0, [r7, #4]
 80077bc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80077c4:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	683a      	ldr	r2, [r7, #0]
 80077ca:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80077ce:	2300      	movs	r3, #0
}
 80077d0:	4618      	mov	r0, r3
 80077d2:	3714      	adds	r7, #20
 80077d4:	46bd      	mov	sp, r7
 80077d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077da:	4770      	bx	lr

080077dc <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80077dc:	b580      	push	{r7, lr}
 80077de:	b084      	sub	sp, #16
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80077ea:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 80077ec:	2301      	movs	r3, #1
 80077ee:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d101      	bne.n	80077fe <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80077fa:	2303      	movs	r3, #3
 80077fc:	e01a      	b.n	8007834 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 80077fe:	68bb      	ldr	r3, [r7, #8]
 8007800:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007804:	2b00      	cmp	r3, #0
 8007806:	d114      	bne.n	8007832 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8007808:	68bb      	ldr	r3, [r7, #8]
 800780a:	2201      	movs	r2, #1
 800780c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8007810:	68bb      	ldr	r3, [r7, #8]
 8007812:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800781a:	68bb      	ldr	r3, [r7, #8]
 800781c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8007820:	68bb      	ldr	r3, [r7, #8]
 8007822:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8007826:	2181      	movs	r1, #129	; 0x81
 8007828:	6878      	ldr	r0, [r7, #4]
 800782a:	f001 fd43 	bl	80092b4 <USBD_LL_Transmit>

    ret = USBD_OK;
 800782e:	2300      	movs	r3, #0
 8007830:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8007832:	7bfb      	ldrb	r3, [r7, #15]
}
 8007834:	4618      	mov	r0, r3
 8007836:	3710      	adds	r7, #16
 8007838:	46bd      	mov	sp, r7
 800783a:	bd80      	pop	{r7, pc}

0800783c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800783c:	b580      	push	{r7, lr}
 800783e:	b084      	sub	sp, #16
 8007840:	af00      	add	r7, sp, #0
 8007842:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800784a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007852:	2b00      	cmp	r3, #0
 8007854:	d101      	bne.n	800785a <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8007856:	2303      	movs	r3, #3
 8007858:	e016      	b.n	8007888 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	7c1b      	ldrb	r3, [r3, #16]
 800785e:	2b00      	cmp	r3, #0
 8007860:	d109      	bne.n	8007876 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007868:	f44f 7300 	mov.w	r3, #512	; 0x200
 800786c:	2101      	movs	r1, #1
 800786e:	6878      	ldr	r0, [r7, #4]
 8007870:	f001 fd41 	bl	80092f6 <USBD_LL_PrepareReceive>
 8007874:	e007      	b.n	8007886 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800787c:	2340      	movs	r3, #64	; 0x40
 800787e:	2101      	movs	r1, #1
 8007880:	6878      	ldr	r0, [r7, #4]
 8007882:	f001 fd38 	bl	80092f6 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007886:	2300      	movs	r3, #0
}
 8007888:	4618      	mov	r0, r3
 800788a:	3710      	adds	r7, #16
 800788c:	46bd      	mov	sp, r7
 800788e:	bd80      	pop	{r7, pc}

08007890 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007890:	b580      	push	{r7, lr}
 8007892:	b086      	sub	sp, #24
 8007894:	af00      	add	r7, sp, #0
 8007896:	60f8      	str	r0, [r7, #12]
 8007898:	60b9      	str	r1, [r7, #8]
 800789a:	4613      	mov	r3, r2
 800789c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d101      	bne.n	80078a8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80078a4:	2303      	movs	r3, #3
 80078a6:	e01f      	b.n	80078e8 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	2200      	movs	r2, #0
 80078ac:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	2200      	movs	r2, #0
 80078b4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	2200      	movs	r2, #0
 80078bc:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80078c0:	68bb      	ldr	r3, [r7, #8]
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d003      	beq.n	80078ce <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	68ba      	ldr	r2, [r7, #8]
 80078ca:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	2201      	movs	r2, #1
 80078d2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	79fa      	ldrb	r2, [r7, #7]
 80078da:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80078dc:	68f8      	ldr	r0, [r7, #12]
 80078de:	f001 fb9f 	bl	8009020 <USBD_LL_Init>
 80078e2:	4603      	mov	r3, r0
 80078e4:	75fb      	strb	r3, [r7, #23]

  return ret;
 80078e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80078e8:	4618      	mov	r0, r3
 80078ea:	3718      	adds	r7, #24
 80078ec:	46bd      	mov	sp, r7
 80078ee:	bd80      	pop	{r7, pc}

080078f0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80078f0:	b580      	push	{r7, lr}
 80078f2:	b084      	sub	sp, #16
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	6078      	str	r0, [r7, #4]
 80078f8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80078fa:	2300      	movs	r3, #0
 80078fc:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80078fe:	683b      	ldr	r3, [r7, #0]
 8007900:	2b00      	cmp	r3, #0
 8007902:	d101      	bne.n	8007908 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8007904:	2303      	movs	r3, #3
 8007906:	e016      	b.n	8007936 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	683a      	ldr	r2, [r7, #0]
 800790c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007918:	2b00      	cmp	r3, #0
 800791a:	d00b      	beq.n	8007934 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007924:	f107 020e 	add.w	r2, r7, #14
 8007928:	4610      	mov	r0, r2
 800792a:	4798      	blx	r3
 800792c:	4602      	mov	r2, r0
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8007934:	2300      	movs	r3, #0
}
 8007936:	4618      	mov	r0, r3
 8007938:	3710      	adds	r7, #16
 800793a:	46bd      	mov	sp, r7
 800793c:	bd80      	pop	{r7, pc}

0800793e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800793e:	b580      	push	{r7, lr}
 8007940:	b082      	sub	sp, #8
 8007942:	af00      	add	r7, sp, #0
 8007944:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007946:	6878      	ldr	r0, [r7, #4]
 8007948:	f001 fbca 	bl	80090e0 <USBD_LL_Start>
 800794c:	4603      	mov	r3, r0
}
 800794e:	4618      	mov	r0, r3
 8007950:	3708      	adds	r7, #8
 8007952:	46bd      	mov	sp, r7
 8007954:	bd80      	pop	{r7, pc}

08007956 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007956:	b480      	push	{r7}
 8007958:	b083      	sub	sp, #12
 800795a:	af00      	add	r7, sp, #0
 800795c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800795e:	2300      	movs	r3, #0
}
 8007960:	4618      	mov	r0, r3
 8007962:	370c      	adds	r7, #12
 8007964:	46bd      	mov	sp, r7
 8007966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796a:	4770      	bx	lr

0800796c <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800796c:	b580      	push	{r7, lr}
 800796e:	b084      	sub	sp, #16
 8007970:	af00      	add	r7, sp, #0
 8007972:	6078      	str	r0, [r7, #4]
 8007974:	460b      	mov	r3, r1
 8007976:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007978:	2303      	movs	r3, #3
 800797a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007982:	2b00      	cmp	r3, #0
 8007984:	d009      	beq.n	800799a <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	78fa      	ldrb	r2, [r7, #3]
 8007990:	4611      	mov	r1, r2
 8007992:	6878      	ldr	r0, [r7, #4]
 8007994:	4798      	blx	r3
 8007996:	4603      	mov	r3, r0
 8007998:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800799a:	7bfb      	ldrb	r3, [r7, #15]
}
 800799c:	4618      	mov	r0, r3
 800799e:	3710      	adds	r7, #16
 80079a0:	46bd      	mov	sp, r7
 80079a2:	bd80      	pop	{r7, pc}

080079a4 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80079a4:	b580      	push	{r7, lr}
 80079a6:	b082      	sub	sp, #8
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	6078      	str	r0, [r7, #4]
 80079ac:	460b      	mov	r3, r1
 80079ae:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d007      	beq.n	80079ca <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079c0:	685b      	ldr	r3, [r3, #4]
 80079c2:	78fa      	ldrb	r2, [r7, #3]
 80079c4:	4611      	mov	r1, r2
 80079c6:	6878      	ldr	r0, [r7, #4]
 80079c8:	4798      	blx	r3
  }

  return USBD_OK;
 80079ca:	2300      	movs	r3, #0
}
 80079cc:	4618      	mov	r0, r3
 80079ce:	3708      	adds	r7, #8
 80079d0:	46bd      	mov	sp, r7
 80079d2:	bd80      	pop	{r7, pc}

080079d4 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80079d4:	b580      	push	{r7, lr}
 80079d6:	b084      	sub	sp, #16
 80079d8:	af00      	add	r7, sp, #0
 80079da:	6078      	str	r0, [r7, #4]
 80079dc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80079e4:	6839      	ldr	r1, [r7, #0]
 80079e6:	4618      	mov	r0, r3
 80079e8:	f000 ff16 	bl	8008818 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	2201      	movs	r2, #1
 80079f0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80079fa:	461a      	mov	r2, r3
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007a08:	f003 031f 	and.w	r3, r3, #31
 8007a0c:	2b01      	cmp	r3, #1
 8007a0e:	d00e      	beq.n	8007a2e <USBD_LL_SetupStage+0x5a>
 8007a10:	2b01      	cmp	r3, #1
 8007a12:	d302      	bcc.n	8007a1a <USBD_LL_SetupStage+0x46>
 8007a14:	2b02      	cmp	r3, #2
 8007a16:	d014      	beq.n	8007a42 <USBD_LL_SetupStage+0x6e>
 8007a18:	e01d      	b.n	8007a56 <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007a20:	4619      	mov	r1, r3
 8007a22:	6878      	ldr	r0, [r7, #4]
 8007a24:	f000 f9d6 	bl	8007dd4 <USBD_StdDevReq>
 8007a28:	4603      	mov	r3, r0
 8007a2a:	73fb      	strb	r3, [r7, #15]
      break;
 8007a2c:	e020      	b.n	8007a70 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007a34:	4619      	mov	r1, r3
 8007a36:	6878      	ldr	r0, [r7, #4]
 8007a38:	f000 fa3a 	bl	8007eb0 <USBD_StdItfReq>
 8007a3c:	4603      	mov	r3, r0
 8007a3e:	73fb      	strb	r3, [r7, #15]
      break;
 8007a40:	e016      	b.n	8007a70 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007a48:	4619      	mov	r1, r3
 8007a4a:	6878      	ldr	r0, [r7, #4]
 8007a4c:	f000 fa76 	bl	8007f3c <USBD_StdEPReq>
 8007a50:	4603      	mov	r3, r0
 8007a52:	73fb      	strb	r3, [r7, #15]
      break;
 8007a54:	e00c      	b.n	8007a70 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007a5c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007a60:	b2db      	uxtb	r3, r3
 8007a62:	4619      	mov	r1, r3
 8007a64:	6878      	ldr	r0, [r7, #4]
 8007a66:	f001 fb9b 	bl	80091a0 <USBD_LL_StallEP>
 8007a6a:	4603      	mov	r3, r0
 8007a6c:	73fb      	strb	r3, [r7, #15]
      break;
 8007a6e:	bf00      	nop
  }

  return ret;
 8007a70:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a72:	4618      	mov	r0, r3
 8007a74:	3710      	adds	r7, #16
 8007a76:	46bd      	mov	sp, r7
 8007a78:	bd80      	pop	{r7, pc}

08007a7a <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007a7a:	b580      	push	{r7, lr}
 8007a7c:	b086      	sub	sp, #24
 8007a7e:	af00      	add	r7, sp, #0
 8007a80:	60f8      	str	r0, [r7, #12]
 8007a82:	460b      	mov	r3, r1
 8007a84:	607a      	str	r2, [r7, #4]
 8007a86:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007a88:	7afb      	ldrb	r3, [r7, #11]
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d137      	bne.n	8007afe <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007a94:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007a9c:	2b03      	cmp	r3, #3
 8007a9e:	d14a      	bne.n	8007b36 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8007aa0:	693b      	ldr	r3, [r7, #16]
 8007aa2:	689a      	ldr	r2, [r3, #8]
 8007aa4:	693b      	ldr	r3, [r7, #16]
 8007aa6:	68db      	ldr	r3, [r3, #12]
 8007aa8:	429a      	cmp	r2, r3
 8007aaa:	d913      	bls.n	8007ad4 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007aac:	693b      	ldr	r3, [r7, #16]
 8007aae:	689a      	ldr	r2, [r3, #8]
 8007ab0:	693b      	ldr	r3, [r7, #16]
 8007ab2:	68db      	ldr	r3, [r3, #12]
 8007ab4:	1ad2      	subs	r2, r2, r3
 8007ab6:	693b      	ldr	r3, [r7, #16]
 8007ab8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007aba:	693b      	ldr	r3, [r7, #16]
 8007abc:	68da      	ldr	r2, [r3, #12]
 8007abe:	693b      	ldr	r3, [r7, #16]
 8007ac0:	689b      	ldr	r3, [r3, #8]
 8007ac2:	4293      	cmp	r3, r2
 8007ac4:	bf28      	it	cs
 8007ac6:	4613      	movcs	r3, r2
 8007ac8:	461a      	mov	r2, r3
 8007aca:	6879      	ldr	r1, [r7, #4]
 8007acc:	68f8      	ldr	r0, [r7, #12]
 8007ace:	f000 ff97 	bl	8008a00 <USBD_CtlContinueRx>
 8007ad2:	e030      	b.n	8007b36 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ada:	691b      	ldr	r3, [r3, #16]
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d00a      	beq.n	8007af6 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007ae6:	2b03      	cmp	r3, #3
 8007ae8:	d105      	bne.n	8007af6 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007af0:	691b      	ldr	r3, [r3, #16]
 8007af2:	68f8      	ldr	r0, [r7, #12]
 8007af4:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 8007af6:	68f8      	ldr	r0, [r7, #12]
 8007af8:	f000 ff93 	bl	8008a22 <USBD_CtlSendStatus>
 8007afc:	e01b      	b.n	8007b36 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b04:	699b      	ldr	r3, [r3, #24]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d013      	beq.n	8007b32 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8007b10:	2b03      	cmp	r3, #3
 8007b12:	d10e      	bne.n	8007b32 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b1a:	699b      	ldr	r3, [r3, #24]
 8007b1c:	7afa      	ldrb	r2, [r7, #11]
 8007b1e:	4611      	mov	r1, r2
 8007b20:	68f8      	ldr	r0, [r7, #12]
 8007b22:	4798      	blx	r3
 8007b24:	4603      	mov	r3, r0
 8007b26:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8007b28:	7dfb      	ldrb	r3, [r7, #23]
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d003      	beq.n	8007b36 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 8007b2e:	7dfb      	ldrb	r3, [r7, #23]
 8007b30:	e002      	b.n	8007b38 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007b32:	2303      	movs	r3, #3
 8007b34:	e000      	b.n	8007b38 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 8007b36:	2300      	movs	r3, #0
}
 8007b38:	4618      	mov	r0, r3
 8007b3a:	3718      	adds	r7, #24
 8007b3c:	46bd      	mov	sp, r7
 8007b3e:	bd80      	pop	{r7, pc}

08007b40 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007b40:	b580      	push	{r7, lr}
 8007b42:	b086      	sub	sp, #24
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	60f8      	str	r0, [r7, #12]
 8007b48:	460b      	mov	r3, r1
 8007b4a:	607a      	str	r2, [r7, #4]
 8007b4c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007b4e:	7afb      	ldrb	r3, [r7, #11]
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d16a      	bne.n	8007c2a <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	3314      	adds	r3, #20
 8007b58:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007b60:	2b02      	cmp	r3, #2
 8007b62:	d155      	bne.n	8007c10 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 8007b64:	693b      	ldr	r3, [r7, #16]
 8007b66:	689a      	ldr	r2, [r3, #8]
 8007b68:	693b      	ldr	r3, [r7, #16]
 8007b6a:	68db      	ldr	r3, [r3, #12]
 8007b6c:	429a      	cmp	r2, r3
 8007b6e:	d914      	bls.n	8007b9a <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007b70:	693b      	ldr	r3, [r7, #16]
 8007b72:	689a      	ldr	r2, [r3, #8]
 8007b74:	693b      	ldr	r3, [r7, #16]
 8007b76:	68db      	ldr	r3, [r3, #12]
 8007b78:	1ad2      	subs	r2, r2, r3
 8007b7a:	693b      	ldr	r3, [r7, #16]
 8007b7c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007b7e:	693b      	ldr	r3, [r7, #16]
 8007b80:	689b      	ldr	r3, [r3, #8]
 8007b82:	461a      	mov	r2, r3
 8007b84:	6879      	ldr	r1, [r7, #4]
 8007b86:	68f8      	ldr	r0, [r7, #12]
 8007b88:	f000 ff0c 	bl	80089a4 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007b8c:	2300      	movs	r3, #0
 8007b8e:	2200      	movs	r2, #0
 8007b90:	2100      	movs	r1, #0
 8007b92:	68f8      	ldr	r0, [r7, #12]
 8007b94:	f001 fbaf 	bl	80092f6 <USBD_LL_PrepareReceive>
 8007b98:	e03a      	b.n	8007c10 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007b9a:	693b      	ldr	r3, [r7, #16]
 8007b9c:	68da      	ldr	r2, [r3, #12]
 8007b9e:	693b      	ldr	r3, [r7, #16]
 8007ba0:	689b      	ldr	r3, [r3, #8]
 8007ba2:	429a      	cmp	r2, r3
 8007ba4:	d11c      	bne.n	8007be0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007ba6:	693b      	ldr	r3, [r7, #16]
 8007ba8:	685a      	ldr	r2, [r3, #4]
 8007baa:	693b      	ldr	r3, [r7, #16]
 8007bac:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007bae:	429a      	cmp	r2, r3
 8007bb0:	d316      	bcc.n	8007be0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007bb2:	693b      	ldr	r3, [r7, #16]
 8007bb4:	685a      	ldr	r2, [r3, #4]
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007bbc:	429a      	cmp	r2, r3
 8007bbe:	d20f      	bcs.n	8007be0 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007bc0:	2200      	movs	r2, #0
 8007bc2:	2100      	movs	r1, #0
 8007bc4:	68f8      	ldr	r0, [r7, #12]
 8007bc6:	f000 feed 	bl	80089a4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	2200      	movs	r2, #0
 8007bce:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007bd2:	2300      	movs	r3, #0
 8007bd4:	2200      	movs	r2, #0
 8007bd6:	2100      	movs	r1, #0
 8007bd8:	68f8      	ldr	r0, [r7, #12]
 8007bda:	f001 fb8c 	bl	80092f6 <USBD_LL_PrepareReceive>
 8007bde:	e017      	b.n	8007c10 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007be6:	68db      	ldr	r3, [r3, #12]
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d00a      	beq.n	8007c02 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007bf2:	2b03      	cmp	r3, #3
 8007bf4:	d105      	bne.n	8007c02 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007bfc:	68db      	ldr	r3, [r3, #12]
 8007bfe:	68f8      	ldr	r0, [r7, #12]
 8007c00:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007c02:	2180      	movs	r1, #128	; 0x80
 8007c04:	68f8      	ldr	r0, [r7, #12]
 8007c06:	f001 facb 	bl	80091a0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007c0a:	68f8      	ldr	r0, [r7, #12]
 8007c0c:	f000 ff1c 	bl	8008a48 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007c16:	2b01      	cmp	r3, #1
 8007c18:	d123      	bne.n	8007c62 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8007c1a:	68f8      	ldr	r0, [r7, #12]
 8007c1c:	f7ff fe9b 	bl	8007956 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	2200      	movs	r2, #0
 8007c24:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007c28:	e01b      	b.n	8007c62 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c30:	695b      	ldr	r3, [r3, #20]
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d013      	beq.n	8007c5e <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8007c3c:	2b03      	cmp	r3, #3
 8007c3e:	d10e      	bne.n	8007c5e <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c46:	695b      	ldr	r3, [r3, #20]
 8007c48:	7afa      	ldrb	r2, [r7, #11]
 8007c4a:	4611      	mov	r1, r2
 8007c4c:	68f8      	ldr	r0, [r7, #12]
 8007c4e:	4798      	blx	r3
 8007c50:	4603      	mov	r3, r0
 8007c52:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8007c54:	7dfb      	ldrb	r3, [r7, #23]
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d003      	beq.n	8007c62 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 8007c5a:	7dfb      	ldrb	r3, [r7, #23]
 8007c5c:	e002      	b.n	8007c64 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007c5e:	2303      	movs	r3, #3
 8007c60:	e000      	b.n	8007c64 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 8007c62:	2300      	movs	r3, #0
}
 8007c64:	4618      	mov	r0, r3
 8007c66:	3718      	adds	r7, #24
 8007c68:	46bd      	mov	sp, r7
 8007c6a:	bd80      	pop	{r7, pc}

08007c6c <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007c6c:	b580      	push	{r7, lr}
 8007c6e:	b082      	sub	sp, #8
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	2201      	movs	r2, #1
 8007c78:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	2200      	movs	r2, #0
 8007c80:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	2200      	movs	r2, #0
 8007c88:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	2200      	movs	r2, #0
 8007c8e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d009      	beq.n	8007cb0 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ca2:	685b      	ldr	r3, [r3, #4]
 8007ca4:	687a      	ldr	r2, [r7, #4]
 8007ca6:	6852      	ldr	r2, [r2, #4]
 8007ca8:	b2d2      	uxtb	r2, r2
 8007caa:	4611      	mov	r1, r2
 8007cac:	6878      	ldr	r0, [r7, #4]
 8007cae:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007cb0:	2340      	movs	r3, #64	; 0x40
 8007cb2:	2200      	movs	r2, #0
 8007cb4:	2100      	movs	r1, #0
 8007cb6:	6878      	ldr	r0, [r7, #4]
 8007cb8:	f001 fa2d 	bl	8009116 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	2201      	movs	r2, #1
 8007cc0:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	2240      	movs	r2, #64	; 0x40
 8007cc8:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007ccc:	2340      	movs	r3, #64	; 0x40
 8007cce:	2200      	movs	r2, #0
 8007cd0:	2180      	movs	r1, #128	; 0x80
 8007cd2:	6878      	ldr	r0, [r7, #4]
 8007cd4:	f001 fa1f 	bl	8009116 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	2201      	movs	r2, #1
 8007cdc:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	2240      	movs	r2, #64	; 0x40
 8007ce2:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8007ce4:	2300      	movs	r3, #0
}
 8007ce6:	4618      	mov	r0, r3
 8007ce8:	3708      	adds	r7, #8
 8007cea:	46bd      	mov	sp, r7
 8007cec:	bd80      	pop	{r7, pc}

08007cee <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007cee:	b480      	push	{r7}
 8007cf0:	b083      	sub	sp, #12
 8007cf2:	af00      	add	r7, sp, #0
 8007cf4:	6078      	str	r0, [r7, #4]
 8007cf6:	460b      	mov	r3, r1
 8007cf8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	78fa      	ldrb	r2, [r7, #3]
 8007cfe:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007d00:	2300      	movs	r3, #0
}
 8007d02:	4618      	mov	r0, r3
 8007d04:	370c      	adds	r7, #12
 8007d06:	46bd      	mov	sp, r7
 8007d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d0c:	4770      	bx	lr

08007d0e <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007d0e:	b480      	push	{r7}
 8007d10:	b083      	sub	sp, #12
 8007d12:	af00      	add	r7, sp, #0
 8007d14:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	2204      	movs	r2, #4
 8007d26:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007d2a:	2300      	movs	r3, #0
}
 8007d2c:	4618      	mov	r0, r3
 8007d2e:	370c      	adds	r7, #12
 8007d30:	46bd      	mov	sp, r7
 8007d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d36:	4770      	bx	lr

08007d38 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007d38:	b480      	push	{r7}
 8007d3a:	b083      	sub	sp, #12
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d46:	2b04      	cmp	r3, #4
 8007d48:	d105      	bne.n	8007d56 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007d56:	2300      	movs	r3, #0
}
 8007d58:	4618      	mov	r0, r3
 8007d5a:	370c      	adds	r7, #12
 8007d5c:	46bd      	mov	sp, r7
 8007d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d62:	4770      	bx	lr

08007d64 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007d64:	b580      	push	{r7, lr}
 8007d66:	b082      	sub	sp, #8
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d72:	2b03      	cmp	r3, #3
 8007d74:	d10b      	bne.n	8007d8e <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d7c:	69db      	ldr	r3, [r3, #28]
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d005      	beq.n	8007d8e <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d88:	69db      	ldr	r3, [r3, #28]
 8007d8a:	6878      	ldr	r0, [r7, #4]
 8007d8c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007d8e:	2300      	movs	r3, #0
}
 8007d90:	4618      	mov	r0, r3
 8007d92:	3708      	adds	r7, #8
 8007d94:	46bd      	mov	sp, r7
 8007d96:	bd80      	pop	{r7, pc}

08007d98 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007d98:	b480      	push	{r7}
 8007d9a:	b087      	sub	sp, #28
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007da4:	697b      	ldr	r3, [r7, #20]
 8007da6:	781b      	ldrb	r3, [r3, #0]
 8007da8:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007daa:	697b      	ldr	r3, [r7, #20]
 8007dac:	3301      	adds	r3, #1
 8007dae:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007db0:	697b      	ldr	r3, [r7, #20]
 8007db2:	781b      	ldrb	r3, [r3, #0]
 8007db4:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007db6:	8a3b      	ldrh	r3, [r7, #16]
 8007db8:	021b      	lsls	r3, r3, #8
 8007dba:	b21a      	sxth	r2, r3
 8007dbc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007dc0:	4313      	orrs	r3, r2
 8007dc2:	b21b      	sxth	r3, r3
 8007dc4:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007dc6:	89fb      	ldrh	r3, [r7, #14]
}
 8007dc8:	4618      	mov	r0, r3
 8007dca:	371c      	adds	r7, #28
 8007dcc:	46bd      	mov	sp, r7
 8007dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd2:	4770      	bx	lr

08007dd4 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007dd4:	b580      	push	{r7, lr}
 8007dd6:	b084      	sub	sp, #16
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	6078      	str	r0, [r7, #4]
 8007ddc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007dde:	2300      	movs	r3, #0
 8007de0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007de2:	683b      	ldr	r3, [r7, #0]
 8007de4:	781b      	ldrb	r3, [r3, #0]
 8007de6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007dea:	2b20      	cmp	r3, #32
 8007dec:	d004      	beq.n	8007df8 <USBD_StdDevReq+0x24>
 8007dee:	2b40      	cmp	r3, #64	; 0x40
 8007df0:	d002      	beq.n	8007df8 <USBD_StdDevReq+0x24>
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d00a      	beq.n	8007e0c <USBD_StdDevReq+0x38>
 8007df6:	e050      	b.n	8007e9a <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007dfe:	689b      	ldr	r3, [r3, #8]
 8007e00:	6839      	ldr	r1, [r7, #0]
 8007e02:	6878      	ldr	r0, [r7, #4]
 8007e04:	4798      	blx	r3
 8007e06:	4603      	mov	r3, r0
 8007e08:	73fb      	strb	r3, [r7, #15]
    break;
 8007e0a:	e04b      	b.n	8007ea4 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8007e0c:	683b      	ldr	r3, [r7, #0]
 8007e0e:	785b      	ldrb	r3, [r3, #1]
 8007e10:	2b09      	cmp	r3, #9
 8007e12:	d83c      	bhi.n	8007e8e <USBD_StdDevReq+0xba>
 8007e14:	a201      	add	r2, pc, #4	; (adr r2, 8007e1c <USBD_StdDevReq+0x48>)
 8007e16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e1a:	bf00      	nop
 8007e1c:	08007e71 	.word	0x08007e71
 8007e20:	08007e85 	.word	0x08007e85
 8007e24:	08007e8f 	.word	0x08007e8f
 8007e28:	08007e7b 	.word	0x08007e7b
 8007e2c:	08007e8f 	.word	0x08007e8f
 8007e30:	08007e4f 	.word	0x08007e4f
 8007e34:	08007e45 	.word	0x08007e45
 8007e38:	08007e8f 	.word	0x08007e8f
 8007e3c:	08007e67 	.word	0x08007e67
 8007e40:	08007e59 	.word	0x08007e59
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 8007e44:	6839      	ldr	r1, [r7, #0]
 8007e46:	6878      	ldr	r0, [r7, #4]
 8007e48:	f000 f9d0 	bl	80081ec <USBD_GetDescriptor>
      break;
 8007e4c:	e024      	b.n	8007e98 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 8007e4e:	6839      	ldr	r1, [r7, #0]
 8007e50:	6878      	ldr	r0, [r7, #4]
 8007e52:	f000 fb5f 	bl	8008514 <USBD_SetAddress>
      break;
 8007e56:	e01f      	b.n	8007e98 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 8007e58:	6839      	ldr	r1, [r7, #0]
 8007e5a:	6878      	ldr	r0, [r7, #4]
 8007e5c:	f000 fb9c 	bl	8008598 <USBD_SetConfig>
 8007e60:	4603      	mov	r3, r0
 8007e62:	73fb      	strb	r3, [r7, #15]
      break;
 8007e64:	e018      	b.n	8007e98 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 8007e66:	6839      	ldr	r1, [r7, #0]
 8007e68:	6878      	ldr	r0, [r7, #4]
 8007e6a:	f000 fc39 	bl	80086e0 <USBD_GetConfig>
      break;
 8007e6e:	e013      	b.n	8007e98 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 8007e70:	6839      	ldr	r1, [r7, #0]
 8007e72:	6878      	ldr	r0, [r7, #4]
 8007e74:	f000 fc68 	bl	8008748 <USBD_GetStatus>
      break;
 8007e78:	e00e      	b.n	8007e98 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 8007e7a:	6839      	ldr	r1, [r7, #0]
 8007e7c:	6878      	ldr	r0, [r7, #4]
 8007e7e:	f000 fc96 	bl	80087ae <USBD_SetFeature>
      break;
 8007e82:	e009      	b.n	8007e98 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 8007e84:	6839      	ldr	r1, [r7, #0]
 8007e86:	6878      	ldr	r0, [r7, #4]
 8007e88:	f000 fca5 	bl	80087d6 <USBD_ClrFeature>
      break;
 8007e8c:	e004      	b.n	8007e98 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 8007e8e:	6839      	ldr	r1, [r7, #0]
 8007e90:	6878      	ldr	r0, [r7, #4]
 8007e92:	f000 fcfb 	bl	800888c <USBD_CtlError>
      break;
 8007e96:	bf00      	nop
    }
    break;
 8007e98:	e004      	b.n	8007ea4 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 8007e9a:	6839      	ldr	r1, [r7, #0]
 8007e9c:	6878      	ldr	r0, [r7, #4]
 8007e9e:	f000 fcf5 	bl	800888c <USBD_CtlError>
    break;
 8007ea2:	bf00      	nop
  }

  return ret;
 8007ea4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ea6:	4618      	mov	r0, r3
 8007ea8:	3710      	adds	r7, #16
 8007eaa:	46bd      	mov	sp, r7
 8007eac:	bd80      	pop	{r7, pc}
 8007eae:	bf00      	nop

08007eb0 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007eb0:	b580      	push	{r7, lr}
 8007eb2:	b084      	sub	sp, #16
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	6078      	str	r0, [r7, #4]
 8007eb8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007eba:	2300      	movs	r3, #0
 8007ebc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007ebe:	683b      	ldr	r3, [r7, #0]
 8007ec0:	781b      	ldrb	r3, [r3, #0]
 8007ec2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007ec6:	2b20      	cmp	r3, #32
 8007ec8:	d003      	beq.n	8007ed2 <USBD_StdItfReq+0x22>
 8007eca:	2b40      	cmp	r3, #64	; 0x40
 8007ecc:	d001      	beq.n	8007ed2 <USBD_StdItfReq+0x22>
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d12a      	bne.n	8007f28 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ed8:	3b01      	subs	r3, #1
 8007eda:	2b02      	cmp	r3, #2
 8007edc:	d81d      	bhi.n	8007f1a <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007ede:	683b      	ldr	r3, [r7, #0]
 8007ee0:	889b      	ldrh	r3, [r3, #4]
 8007ee2:	b2db      	uxtb	r3, r3
 8007ee4:	2b01      	cmp	r3, #1
 8007ee6:	d813      	bhi.n	8007f10 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007eee:	689b      	ldr	r3, [r3, #8]
 8007ef0:	6839      	ldr	r1, [r7, #0]
 8007ef2:	6878      	ldr	r0, [r7, #4]
 8007ef4:	4798      	blx	r3
 8007ef6:	4603      	mov	r3, r0
 8007ef8:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8007efa:	683b      	ldr	r3, [r7, #0]
 8007efc:	88db      	ldrh	r3, [r3, #6]
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d110      	bne.n	8007f24 <USBD_StdItfReq+0x74>
 8007f02:	7bfb      	ldrb	r3, [r7, #15]
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d10d      	bne.n	8007f24 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 8007f08:	6878      	ldr	r0, [r7, #4]
 8007f0a:	f000 fd8a 	bl	8008a22 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8007f0e:	e009      	b.n	8007f24 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8007f10:	6839      	ldr	r1, [r7, #0]
 8007f12:	6878      	ldr	r0, [r7, #4]
 8007f14:	f000 fcba 	bl	800888c <USBD_CtlError>
      break;
 8007f18:	e004      	b.n	8007f24 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 8007f1a:	6839      	ldr	r1, [r7, #0]
 8007f1c:	6878      	ldr	r0, [r7, #4]
 8007f1e:	f000 fcb5 	bl	800888c <USBD_CtlError>
      break;
 8007f22:	e000      	b.n	8007f26 <USBD_StdItfReq+0x76>
      break;
 8007f24:	bf00      	nop
    }
    break;
 8007f26:	e004      	b.n	8007f32 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8007f28:	6839      	ldr	r1, [r7, #0]
 8007f2a:	6878      	ldr	r0, [r7, #4]
 8007f2c:	f000 fcae 	bl	800888c <USBD_CtlError>
    break;
 8007f30:	bf00      	nop
  }

  return ret;
 8007f32:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f34:	4618      	mov	r0, r3
 8007f36:	3710      	adds	r7, #16
 8007f38:	46bd      	mov	sp, r7
 8007f3a:	bd80      	pop	{r7, pc}

08007f3c <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f3c:	b580      	push	{r7, lr}
 8007f3e:	b084      	sub	sp, #16
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	6078      	str	r0, [r7, #4]
 8007f44:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007f46:	2300      	movs	r3, #0
 8007f48:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8007f4a:	683b      	ldr	r3, [r7, #0]
 8007f4c:	889b      	ldrh	r3, [r3, #4]
 8007f4e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007f50:	683b      	ldr	r3, [r7, #0]
 8007f52:	781b      	ldrb	r3, [r3, #0]
 8007f54:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007f58:	2b20      	cmp	r3, #32
 8007f5a:	d004      	beq.n	8007f66 <USBD_StdEPReq+0x2a>
 8007f5c:	2b40      	cmp	r3, #64	; 0x40
 8007f5e:	d002      	beq.n	8007f66 <USBD_StdEPReq+0x2a>
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d00a      	beq.n	8007f7a <USBD_StdEPReq+0x3e>
 8007f64:	e137      	b.n	80081d6 <USBD_StdEPReq+0x29a>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f6c:	689b      	ldr	r3, [r3, #8]
 8007f6e:	6839      	ldr	r1, [r7, #0]
 8007f70:	6878      	ldr	r0, [r7, #4]
 8007f72:	4798      	blx	r3
 8007f74:	4603      	mov	r3, r0
 8007f76:	73fb      	strb	r3, [r7, #15]
    break;
 8007f78:	e132      	b.n	80081e0 <USBD_StdEPReq+0x2a4>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8007f7a:	683b      	ldr	r3, [r7, #0]
 8007f7c:	785b      	ldrb	r3, [r3, #1]
 8007f7e:	2b01      	cmp	r3, #1
 8007f80:	d03e      	beq.n	8008000 <USBD_StdEPReq+0xc4>
 8007f82:	2b03      	cmp	r3, #3
 8007f84:	d002      	beq.n	8007f8c <USBD_StdEPReq+0x50>
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d079      	beq.n	800807e <USBD_StdEPReq+0x142>
 8007f8a:	e11e      	b.n	80081ca <USBD_StdEPReq+0x28e>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f92:	2b02      	cmp	r3, #2
 8007f94:	d002      	beq.n	8007f9c <USBD_StdEPReq+0x60>
 8007f96:	2b03      	cmp	r3, #3
 8007f98:	d015      	beq.n	8007fc6 <USBD_StdEPReq+0x8a>
 8007f9a:	e02b      	b.n	8007ff4 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007f9c:	7bbb      	ldrb	r3, [r7, #14]
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d00c      	beq.n	8007fbc <USBD_StdEPReq+0x80>
 8007fa2:	7bbb      	ldrb	r3, [r7, #14]
 8007fa4:	2b80      	cmp	r3, #128	; 0x80
 8007fa6:	d009      	beq.n	8007fbc <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8007fa8:	7bbb      	ldrb	r3, [r7, #14]
 8007faa:	4619      	mov	r1, r3
 8007fac:	6878      	ldr	r0, [r7, #4]
 8007fae:	f001 f8f7 	bl	80091a0 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007fb2:	2180      	movs	r1, #128	; 0x80
 8007fb4:	6878      	ldr	r0, [r7, #4]
 8007fb6:	f001 f8f3 	bl	80091a0 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8007fba:	e020      	b.n	8007ffe <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 8007fbc:	6839      	ldr	r1, [r7, #0]
 8007fbe:	6878      	ldr	r0, [r7, #4]
 8007fc0:	f000 fc64 	bl	800888c <USBD_CtlError>
        break;
 8007fc4:	e01b      	b.n	8007ffe <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8007fc6:	683b      	ldr	r3, [r7, #0]
 8007fc8:	885b      	ldrh	r3, [r3, #2]
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d10e      	bne.n	8007fec <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007fce:	7bbb      	ldrb	r3, [r7, #14]
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d00b      	beq.n	8007fec <USBD_StdEPReq+0xb0>
 8007fd4:	7bbb      	ldrb	r3, [r7, #14]
 8007fd6:	2b80      	cmp	r3, #128	; 0x80
 8007fd8:	d008      	beq.n	8007fec <USBD_StdEPReq+0xb0>
 8007fda:	683b      	ldr	r3, [r7, #0]
 8007fdc:	88db      	ldrh	r3, [r3, #6]
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d104      	bne.n	8007fec <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 8007fe2:	7bbb      	ldrb	r3, [r7, #14]
 8007fe4:	4619      	mov	r1, r3
 8007fe6:	6878      	ldr	r0, [r7, #4]
 8007fe8:	f001 f8da 	bl	80091a0 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 8007fec:	6878      	ldr	r0, [r7, #4]
 8007fee:	f000 fd18 	bl	8008a22 <USBD_CtlSendStatus>

        break;
 8007ff2:	e004      	b.n	8007ffe <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 8007ff4:	6839      	ldr	r1, [r7, #0]
 8007ff6:	6878      	ldr	r0, [r7, #4]
 8007ff8:	f000 fc48 	bl	800888c <USBD_CtlError>
        break;
 8007ffc:	bf00      	nop
      }
      break;
 8007ffe:	e0e9      	b.n	80081d4 <USBD_StdEPReq+0x298>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008006:	2b02      	cmp	r3, #2
 8008008:	d002      	beq.n	8008010 <USBD_StdEPReq+0xd4>
 800800a:	2b03      	cmp	r3, #3
 800800c:	d015      	beq.n	800803a <USBD_StdEPReq+0xfe>
 800800e:	e02f      	b.n	8008070 <USBD_StdEPReq+0x134>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008010:	7bbb      	ldrb	r3, [r7, #14]
 8008012:	2b00      	cmp	r3, #0
 8008014:	d00c      	beq.n	8008030 <USBD_StdEPReq+0xf4>
 8008016:	7bbb      	ldrb	r3, [r7, #14]
 8008018:	2b80      	cmp	r3, #128	; 0x80
 800801a:	d009      	beq.n	8008030 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800801c:	7bbb      	ldrb	r3, [r7, #14]
 800801e:	4619      	mov	r1, r3
 8008020:	6878      	ldr	r0, [r7, #4]
 8008022:	f001 f8bd 	bl	80091a0 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008026:	2180      	movs	r1, #128	; 0x80
 8008028:	6878      	ldr	r0, [r7, #4]
 800802a:	f001 f8b9 	bl	80091a0 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800802e:	e025      	b.n	800807c <USBD_StdEPReq+0x140>
          USBD_CtlError(pdev, req);
 8008030:	6839      	ldr	r1, [r7, #0]
 8008032:	6878      	ldr	r0, [r7, #4]
 8008034:	f000 fc2a 	bl	800888c <USBD_CtlError>
        break;
 8008038:	e020      	b.n	800807c <USBD_StdEPReq+0x140>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800803a:	683b      	ldr	r3, [r7, #0]
 800803c:	885b      	ldrh	r3, [r3, #2]
 800803e:	2b00      	cmp	r3, #0
 8008040:	d11b      	bne.n	800807a <USBD_StdEPReq+0x13e>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8008042:	7bbb      	ldrb	r3, [r7, #14]
 8008044:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008048:	2b00      	cmp	r3, #0
 800804a:	d004      	beq.n	8008056 <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800804c:	7bbb      	ldrb	r3, [r7, #14]
 800804e:	4619      	mov	r1, r3
 8008050:	6878      	ldr	r0, [r7, #4]
 8008052:	f001 f8c4 	bl	80091de <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 8008056:	6878      	ldr	r0, [r7, #4]
 8008058:	f000 fce3 	bl	8008a22 <USBD_CtlSendStatus>
          ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008062:	689b      	ldr	r3, [r3, #8]
 8008064:	6839      	ldr	r1, [r7, #0]
 8008066:	6878      	ldr	r0, [r7, #4]
 8008068:	4798      	blx	r3
 800806a:	4603      	mov	r3, r0
 800806c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800806e:	e004      	b.n	800807a <USBD_StdEPReq+0x13e>

      default:
        USBD_CtlError(pdev, req);
 8008070:	6839      	ldr	r1, [r7, #0]
 8008072:	6878      	ldr	r0, [r7, #4]
 8008074:	f000 fc0a 	bl	800888c <USBD_CtlError>
        break;
 8008078:	e000      	b.n	800807c <USBD_StdEPReq+0x140>
        break;
 800807a:	bf00      	nop
      }
      break;
 800807c:	e0aa      	b.n	80081d4 <USBD_StdEPReq+0x298>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008084:	2b02      	cmp	r3, #2
 8008086:	d002      	beq.n	800808e <USBD_StdEPReq+0x152>
 8008088:	2b03      	cmp	r3, #3
 800808a:	d032      	beq.n	80080f2 <USBD_StdEPReq+0x1b6>
 800808c:	e097      	b.n	80081be <USBD_StdEPReq+0x282>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800808e:	7bbb      	ldrb	r3, [r7, #14]
 8008090:	2b00      	cmp	r3, #0
 8008092:	d007      	beq.n	80080a4 <USBD_StdEPReq+0x168>
 8008094:	7bbb      	ldrb	r3, [r7, #14]
 8008096:	2b80      	cmp	r3, #128	; 0x80
 8008098:	d004      	beq.n	80080a4 <USBD_StdEPReq+0x168>
        {
          USBD_CtlError(pdev, req);
 800809a:	6839      	ldr	r1, [r7, #0]
 800809c:	6878      	ldr	r0, [r7, #4]
 800809e:	f000 fbf5 	bl	800888c <USBD_CtlError>
          break;
 80080a2:	e091      	b.n	80081c8 <USBD_StdEPReq+0x28c>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80080a4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	da0b      	bge.n	80080c4 <USBD_StdEPReq+0x188>
 80080ac:	7bbb      	ldrb	r3, [r7, #14]
 80080ae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80080b2:	4613      	mov	r3, r2
 80080b4:	009b      	lsls	r3, r3, #2
 80080b6:	4413      	add	r3, r2
 80080b8:	009b      	lsls	r3, r3, #2
 80080ba:	3310      	adds	r3, #16
 80080bc:	687a      	ldr	r2, [r7, #4]
 80080be:	4413      	add	r3, r2
 80080c0:	3304      	adds	r3, #4
 80080c2:	e00b      	b.n	80080dc <USBD_StdEPReq+0x1a0>
              &pdev->ep_out[ep_addr & 0x7FU];
 80080c4:	7bbb      	ldrb	r3, [r7, #14]
 80080c6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80080ca:	4613      	mov	r3, r2
 80080cc:	009b      	lsls	r3, r3, #2
 80080ce:	4413      	add	r3, r2
 80080d0:	009b      	lsls	r3, r3, #2
 80080d2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80080d6:	687a      	ldr	r2, [r7, #4]
 80080d8:	4413      	add	r3, r2
 80080da:	3304      	adds	r3, #4
 80080dc:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 80080de:	68bb      	ldr	r3, [r7, #8]
 80080e0:	2200      	movs	r2, #0
 80080e2:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80080e4:	68bb      	ldr	r3, [r7, #8]
 80080e6:	2202      	movs	r2, #2
 80080e8:	4619      	mov	r1, r3
 80080ea:	6878      	ldr	r0, [r7, #4]
 80080ec:	f000 fc3f 	bl	800896e <USBD_CtlSendData>
        break;
 80080f0:	e06a      	b.n	80081c8 <USBD_StdEPReq+0x28c>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 80080f2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	da11      	bge.n	800811e <USBD_StdEPReq+0x1e2>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80080fa:	7bbb      	ldrb	r3, [r7, #14]
 80080fc:	f003 020f 	and.w	r2, r3, #15
 8008100:	6879      	ldr	r1, [r7, #4]
 8008102:	4613      	mov	r3, r2
 8008104:	009b      	lsls	r3, r3, #2
 8008106:	4413      	add	r3, r2
 8008108:	009b      	lsls	r3, r3, #2
 800810a:	440b      	add	r3, r1
 800810c:	3324      	adds	r3, #36	; 0x24
 800810e:	881b      	ldrh	r3, [r3, #0]
 8008110:	2b00      	cmp	r3, #0
 8008112:	d117      	bne.n	8008144 <USBD_StdEPReq+0x208>
          {
            USBD_CtlError(pdev, req);
 8008114:	6839      	ldr	r1, [r7, #0]
 8008116:	6878      	ldr	r0, [r7, #4]
 8008118:	f000 fbb8 	bl	800888c <USBD_CtlError>
            break;
 800811c:	e054      	b.n	80081c8 <USBD_StdEPReq+0x28c>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800811e:	7bbb      	ldrb	r3, [r7, #14]
 8008120:	f003 020f 	and.w	r2, r3, #15
 8008124:	6879      	ldr	r1, [r7, #4]
 8008126:	4613      	mov	r3, r2
 8008128:	009b      	lsls	r3, r3, #2
 800812a:	4413      	add	r3, r2
 800812c:	009b      	lsls	r3, r3, #2
 800812e:	440b      	add	r3, r1
 8008130:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008134:	881b      	ldrh	r3, [r3, #0]
 8008136:	2b00      	cmp	r3, #0
 8008138:	d104      	bne.n	8008144 <USBD_StdEPReq+0x208>
          {
            USBD_CtlError(pdev, req);
 800813a:	6839      	ldr	r1, [r7, #0]
 800813c:	6878      	ldr	r0, [r7, #4]
 800813e:	f000 fba5 	bl	800888c <USBD_CtlError>
            break;
 8008142:	e041      	b.n	80081c8 <USBD_StdEPReq+0x28c>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008144:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008148:	2b00      	cmp	r3, #0
 800814a:	da0b      	bge.n	8008164 <USBD_StdEPReq+0x228>
 800814c:	7bbb      	ldrb	r3, [r7, #14]
 800814e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008152:	4613      	mov	r3, r2
 8008154:	009b      	lsls	r3, r3, #2
 8008156:	4413      	add	r3, r2
 8008158:	009b      	lsls	r3, r3, #2
 800815a:	3310      	adds	r3, #16
 800815c:	687a      	ldr	r2, [r7, #4]
 800815e:	4413      	add	r3, r2
 8008160:	3304      	adds	r3, #4
 8008162:	e00b      	b.n	800817c <USBD_StdEPReq+0x240>
              &pdev->ep_out[ep_addr & 0x7FU];
 8008164:	7bbb      	ldrb	r3, [r7, #14]
 8008166:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800816a:	4613      	mov	r3, r2
 800816c:	009b      	lsls	r3, r3, #2
 800816e:	4413      	add	r3, r2
 8008170:	009b      	lsls	r3, r3, #2
 8008172:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008176:	687a      	ldr	r2, [r7, #4]
 8008178:	4413      	add	r3, r2
 800817a:	3304      	adds	r3, #4
 800817c:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800817e:	7bbb      	ldrb	r3, [r7, #14]
 8008180:	2b00      	cmp	r3, #0
 8008182:	d002      	beq.n	800818a <USBD_StdEPReq+0x24e>
 8008184:	7bbb      	ldrb	r3, [r7, #14]
 8008186:	2b80      	cmp	r3, #128	; 0x80
 8008188:	d103      	bne.n	8008192 <USBD_StdEPReq+0x256>
          {
            pep->status = 0x0000U;
 800818a:	68bb      	ldr	r3, [r7, #8]
 800818c:	2200      	movs	r2, #0
 800818e:	601a      	str	r2, [r3, #0]
 8008190:	e00e      	b.n	80081b0 <USBD_StdEPReq+0x274>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008192:	7bbb      	ldrb	r3, [r7, #14]
 8008194:	4619      	mov	r1, r3
 8008196:	6878      	ldr	r0, [r7, #4]
 8008198:	f001 f840 	bl	800921c <USBD_LL_IsStallEP>
 800819c:	4603      	mov	r3, r0
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d003      	beq.n	80081aa <USBD_StdEPReq+0x26e>
          {
            pep->status = 0x0001U;
 80081a2:	68bb      	ldr	r3, [r7, #8]
 80081a4:	2201      	movs	r2, #1
 80081a6:	601a      	str	r2, [r3, #0]
 80081a8:	e002      	b.n	80081b0 <USBD_StdEPReq+0x274>
          }
          else
          {
            pep->status = 0x0000U;
 80081aa:	68bb      	ldr	r3, [r7, #8]
 80081ac:	2200      	movs	r2, #0
 80081ae:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80081b0:	68bb      	ldr	r3, [r7, #8]
 80081b2:	2202      	movs	r2, #2
 80081b4:	4619      	mov	r1, r3
 80081b6:	6878      	ldr	r0, [r7, #4]
 80081b8:	f000 fbd9 	bl	800896e <USBD_CtlSendData>
          break;
 80081bc:	e004      	b.n	80081c8 <USBD_StdEPReq+0x28c>

      default:
        USBD_CtlError(pdev, req);
 80081be:	6839      	ldr	r1, [r7, #0]
 80081c0:	6878      	ldr	r0, [r7, #4]
 80081c2:	f000 fb63 	bl	800888c <USBD_CtlError>
        break;
 80081c6:	bf00      	nop
      }
      break;
 80081c8:	e004      	b.n	80081d4 <USBD_StdEPReq+0x298>

    default:
      USBD_CtlError(pdev, req);
 80081ca:	6839      	ldr	r1, [r7, #0]
 80081cc:	6878      	ldr	r0, [r7, #4]
 80081ce:	f000 fb5d 	bl	800888c <USBD_CtlError>
      break;
 80081d2:	bf00      	nop
    }
    break;
 80081d4:	e004      	b.n	80081e0 <USBD_StdEPReq+0x2a4>

  default:
    USBD_CtlError(pdev, req);
 80081d6:	6839      	ldr	r1, [r7, #0]
 80081d8:	6878      	ldr	r0, [r7, #4]
 80081da:	f000 fb57 	bl	800888c <USBD_CtlError>
    break;
 80081de:	bf00      	nop
  }

  return ret;
 80081e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80081e2:	4618      	mov	r0, r3
 80081e4:	3710      	adds	r7, #16
 80081e6:	46bd      	mov	sp, r7
 80081e8:	bd80      	pop	{r7, pc}
	...

080081ec <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80081ec:	b580      	push	{r7, lr}
 80081ee:	b084      	sub	sp, #16
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	6078      	str	r0, [r7, #4]
 80081f4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80081f6:	2300      	movs	r3, #0
 80081f8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80081fa:	2300      	movs	r3, #0
 80081fc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80081fe:	2300      	movs	r3, #0
 8008200:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008202:	683b      	ldr	r3, [r7, #0]
 8008204:	885b      	ldrh	r3, [r3, #2]
 8008206:	0a1b      	lsrs	r3, r3, #8
 8008208:	b29b      	uxth	r3, r3
 800820a:	3b01      	subs	r3, #1
 800820c:	2b0e      	cmp	r3, #14
 800820e:	f200 8152 	bhi.w	80084b6 <USBD_GetDescriptor+0x2ca>
 8008212:	a201      	add	r2, pc, #4	; (adr r2, 8008218 <USBD_GetDescriptor+0x2c>)
 8008214:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008218:	08008289 	.word	0x08008289
 800821c:	080082a1 	.word	0x080082a1
 8008220:	080082e1 	.word	0x080082e1
 8008224:	080084b7 	.word	0x080084b7
 8008228:	080084b7 	.word	0x080084b7
 800822c:	08008457 	.word	0x08008457
 8008230:	08008483 	.word	0x08008483
 8008234:	080084b7 	.word	0x080084b7
 8008238:	080084b7 	.word	0x080084b7
 800823c:	080084b7 	.word	0x080084b7
 8008240:	080084b7 	.word	0x080084b7
 8008244:	080084b7 	.word	0x080084b7
 8008248:	080084b7 	.word	0x080084b7
 800824c:	080084b7 	.word	0x080084b7
 8008250:	08008255 	.word	0x08008255
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
  case USB_DESC_TYPE_BOS:
    if (pdev->pDesc->GetBOSDescriptor != NULL)
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800825a:	69db      	ldr	r3, [r3, #28]
 800825c:	2b00      	cmp	r3, #0
 800825e:	d00b      	beq.n	8008278 <USBD_GetDescriptor+0x8c>
    {
      pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008266:	69db      	ldr	r3, [r3, #28]
 8008268:	687a      	ldr	r2, [r7, #4]
 800826a:	7c12      	ldrb	r2, [r2, #16]
 800826c:	f107 0108 	add.w	r1, r7, #8
 8008270:	4610      	mov	r0, r2
 8008272:	4798      	blx	r3
 8008274:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8008276:	e126      	b.n	80084c6 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 8008278:	6839      	ldr	r1, [r7, #0]
 800827a:	6878      	ldr	r0, [r7, #4]
 800827c:	f000 fb06 	bl	800888c <USBD_CtlError>
      err++;
 8008280:	7afb      	ldrb	r3, [r7, #11]
 8008282:	3301      	adds	r3, #1
 8008284:	72fb      	strb	r3, [r7, #11]
    break;
 8008286:	e11e      	b.n	80084c6 <USBD_GetDescriptor+0x2da>
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	687a      	ldr	r2, [r7, #4]
 8008292:	7c12      	ldrb	r2, [r2, #16]
 8008294:	f107 0108 	add.w	r1, r7, #8
 8008298:	4610      	mov	r0, r2
 800829a:	4798      	blx	r3
 800829c:	60f8      	str	r0, [r7, #12]
    break;
 800829e:	e112      	b.n	80084c6 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	7c1b      	ldrb	r3, [r3, #16]
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d10d      	bne.n	80082c4 <USBD_GetDescriptor+0xd8>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082b0:	f107 0208 	add.w	r2, r7, #8
 80082b4:	4610      	mov	r0, r2
 80082b6:	4798      	blx	r3
 80082b8:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	3301      	adds	r3, #1
 80082be:	2202      	movs	r2, #2
 80082c0:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 80082c2:	e100      	b.n	80084c6 <USBD_GetDescriptor+0x2da>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082cc:	f107 0208 	add.w	r2, r7, #8
 80082d0:	4610      	mov	r0, r2
 80082d2:	4798      	blx	r3
 80082d4:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	3301      	adds	r3, #1
 80082da:	2202      	movs	r2, #2
 80082dc:	701a      	strb	r2, [r3, #0]
    break;
 80082de:	e0f2      	b.n	80084c6 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 80082e0:	683b      	ldr	r3, [r7, #0]
 80082e2:	885b      	ldrh	r3, [r3, #2]
 80082e4:	b2db      	uxtb	r3, r3
 80082e6:	2b05      	cmp	r3, #5
 80082e8:	f200 80ac 	bhi.w	8008444 <USBD_GetDescriptor+0x258>
 80082ec:	a201      	add	r2, pc, #4	; (adr r2, 80082f4 <USBD_GetDescriptor+0x108>)
 80082ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082f2:	bf00      	nop
 80082f4:	0800830d 	.word	0x0800830d
 80082f8:	08008341 	.word	0x08008341
 80082fc:	08008375 	.word	0x08008375
 8008300:	080083a9 	.word	0x080083a9
 8008304:	080083dd 	.word	0x080083dd
 8008308:	08008411 	.word	0x08008411
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008312:	685b      	ldr	r3, [r3, #4]
 8008314:	2b00      	cmp	r3, #0
 8008316:	d00b      	beq.n	8008330 <USBD_GetDescriptor+0x144>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800831e:	685b      	ldr	r3, [r3, #4]
 8008320:	687a      	ldr	r2, [r7, #4]
 8008322:	7c12      	ldrb	r2, [r2, #16]
 8008324:	f107 0108 	add.w	r1, r7, #8
 8008328:	4610      	mov	r0, r2
 800832a:	4798      	blx	r3
 800832c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800832e:	e091      	b.n	8008454 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8008330:	6839      	ldr	r1, [r7, #0]
 8008332:	6878      	ldr	r0, [r7, #4]
 8008334:	f000 faaa 	bl	800888c <USBD_CtlError>
        err++;
 8008338:	7afb      	ldrb	r3, [r7, #11]
 800833a:	3301      	adds	r3, #1
 800833c:	72fb      	strb	r3, [r7, #11]
      break;
 800833e:	e089      	b.n	8008454 <USBD_GetDescriptor+0x268>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008346:	689b      	ldr	r3, [r3, #8]
 8008348:	2b00      	cmp	r3, #0
 800834a:	d00b      	beq.n	8008364 <USBD_GetDescriptor+0x178>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008352:	689b      	ldr	r3, [r3, #8]
 8008354:	687a      	ldr	r2, [r7, #4]
 8008356:	7c12      	ldrb	r2, [r2, #16]
 8008358:	f107 0108 	add.w	r1, r7, #8
 800835c:	4610      	mov	r0, r2
 800835e:	4798      	blx	r3
 8008360:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008362:	e077      	b.n	8008454 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8008364:	6839      	ldr	r1, [r7, #0]
 8008366:	6878      	ldr	r0, [r7, #4]
 8008368:	f000 fa90 	bl	800888c <USBD_CtlError>
        err++;
 800836c:	7afb      	ldrb	r3, [r7, #11]
 800836e:	3301      	adds	r3, #1
 8008370:	72fb      	strb	r3, [r7, #11]
      break;
 8008372:	e06f      	b.n	8008454 <USBD_GetDescriptor+0x268>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800837a:	68db      	ldr	r3, [r3, #12]
 800837c:	2b00      	cmp	r3, #0
 800837e:	d00b      	beq.n	8008398 <USBD_GetDescriptor+0x1ac>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008386:	68db      	ldr	r3, [r3, #12]
 8008388:	687a      	ldr	r2, [r7, #4]
 800838a:	7c12      	ldrb	r2, [r2, #16]
 800838c:	f107 0108 	add.w	r1, r7, #8
 8008390:	4610      	mov	r0, r2
 8008392:	4798      	blx	r3
 8008394:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008396:	e05d      	b.n	8008454 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8008398:	6839      	ldr	r1, [r7, #0]
 800839a:	6878      	ldr	r0, [r7, #4]
 800839c:	f000 fa76 	bl	800888c <USBD_CtlError>
        err++;
 80083a0:	7afb      	ldrb	r3, [r7, #11]
 80083a2:	3301      	adds	r3, #1
 80083a4:	72fb      	strb	r3, [r7, #11]
      break;
 80083a6:	e055      	b.n	8008454 <USBD_GetDescriptor+0x268>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80083ae:	691b      	ldr	r3, [r3, #16]
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d00b      	beq.n	80083cc <USBD_GetDescriptor+0x1e0>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80083ba:	691b      	ldr	r3, [r3, #16]
 80083bc:	687a      	ldr	r2, [r7, #4]
 80083be:	7c12      	ldrb	r2, [r2, #16]
 80083c0:	f107 0108 	add.w	r1, r7, #8
 80083c4:	4610      	mov	r0, r2
 80083c6:	4798      	blx	r3
 80083c8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80083ca:	e043      	b.n	8008454 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 80083cc:	6839      	ldr	r1, [r7, #0]
 80083ce:	6878      	ldr	r0, [r7, #4]
 80083d0:	f000 fa5c 	bl	800888c <USBD_CtlError>
        err++;
 80083d4:	7afb      	ldrb	r3, [r7, #11]
 80083d6:	3301      	adds	r3, #1
 80083d8:	72fb      	strb	r3, [r7, #11]
      break;
 80083da:	e03b      	b.n	8008454 <USBD_GetDescriptor+0x268>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80083e2:	695b      	ldr	r3, [r3, #20]
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d00b      	beq.n	8008400 <USBD_GetDescriptor+0x214>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80083ee:	695b      	ldr	r3, [r3, #20]
 80083f0:	687a      	ldr	r2, [r7, #4]
 80083f2:	7c12      	ldrb	r2, [r2, #16]
 80083f4:	f107 0108 	add.w	r1, r7, #8
 80083f8:	4610      	mov	r0, r2
 80083fa:	4798      	blx	r3
 80083fc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80083fe:	e029      	b.n	8008454 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8008400:	6839      	ldr	r1, [r7, #0]
 8008402:	6878      	ldr	r0, [r7, #4]
 8008404:	f000 fa42 	bl	800888c <USBD_CtlError>
        err++;
 8008408:	7afb      	ldrb	r3, [r7, #11]
 800840a:	3301      	adds	r3, #1
 800840c:	72fb      	strb	r3, [r7, #11]
      break;
 800840e:	e021      	b.n	8008454 <USBD_GetDescriptor+0x268>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008416:	699b      	ldr	r3, [r3, #24]
 8008418:	2b00      	cmp	r3, #0
 800841a:	d00b      	beq.n	8008434 <USBD_GetDescriptor+0x248>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008422:	699b      	ldr	r3, [r3, #24]
 8008424:	687a      	ldr	r2, [r7, #4]
 8008426:	7c12      	ldrb	r2, [r2, #16]
 8008428:	f107 0108 	add.w	r1, r7, #8
 800842c:	4610      	mov	r0, r2
 800842e:	4798      	blx	r3
 8008430:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008432:	e00f      	b.n	8008454 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8008434:	6839      	ldr	r1, [r7, #0]
 8008436:	6878      	ldr	r0, [r7, #4]
 8008438:	f000 fa28 	bl	800888c <USBD_CtlError>
        err++;
 800843c:	7afb      	ldrb	r3, [r7, #11]
 800843e:	3301      	adds	r3, #1
 8008440:	72fb      	strb	r3, [r7, #11]
      break;
 8008442:	e007      	b.n	8008454 <USBD_GetDescriptor+0x268>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8008444:	6839      	ldr	r1, [r7, #0]
 8008446:	6878      	ldr	r0, [r7, #4]
 8008448:	f000 fa20 	bl	800888c <USBD_CtlError>
      err++;
 800844c:	7afb      	ldrb	r3, [r7, #11]
 800844e:	3301      	adds	r3, #1
 8008450:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 8008452:	bf00      	nop
    }
    break;
 8008454:	e037      	b.n	80084c6 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	7c1b      	ldrb	r3, [r3, #16]
 800845a:	2b00      	cmp	r3, #0
 800845c:	d109      	bne.n	8008472 <USBD_GetDescriptor+0x286>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008464:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008466:	f107 0208 	add.w	r2, r7, #8
 800846a:	4610      	mov	r0, r2
 800846c:	4798      	blx	r3
 800846e:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8008470:	e029      	b.n	80084c6 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 8008472:	6839      	ldr	r1, [r7, #0]
 8008474:	6878      	ldr	r0, [r7, #4]
 8008476:	f000 fa09 	bl	800888c <USBD_CtlError>
      err++;
 800847a:	7afb      	ldrb	r3, [r7, #11]
 800847c:	3301      	adds	r3, #1
 800847e:	72fb      	strb	r3, [r7, #11]
    break;
 8008480:	e021      	b.n	80084c6 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	7c1b      	ldrb	r3, [r3, #16]
 8008486:	2b00      	cmp	r3, #0
 8008488:	d10d      	bne.n	80084a6 <USBD_GetDescriptor+0x2ba>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008492:	f107 0208 	add.w	r2, r7, #8
 8008496:	4610      	mov	r0, r2
 8008498:	4798      	blx	r3
 800849a:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	3301      	adds	r3, #1
 80084a0:	2207      	movs	r2, #7
 80084a2:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 80084a4:	e00f      	b.n	80084c6 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 80084a6:	6839      	ldr	r1, [r7, #0]
 80084a8:	6878      	ldr	r0, [r7, #4]
 80084aa:	f000 f9ef 	bl	800888c <USBD_CtlError>
      err++;
 80084ae:	7afb      	ldrb	r3, [r7, #11]
 80084b0:	3301      	adds	r3, #1
 80084b2:	72fb      	strb	r3, [r7, #11]
    break;
 80084b4:	e007      	b.n	80084c6 <USBD_GetDescriptor+0x2da>

  default:
    USBD_CtlError(pdev, req);
 80084b6:	6839      	ldr	r1, [r7, #0]
 80084b8:	6878      	ldr	r0, [r7, #4]
 80084ba:	f000 f9e7 	bl	800888c <USBD_CtlError>
    err++;
 80084be:	7afb      	ldrb	r3, [r7, #11]
 80084c0:	3301      	adds	r3, #1
 80084c2:	72fb      	strb	r3, [r7, #11]
    break;
 80084c4:	bf00      	nop
  }

  if (err != 0U)
 80084c6:	7afb      	ldrb	r3, [r7, #11]
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d11e      	bne.n	800850a <USBD_GetDescriptor+0x31e>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 80084cc:	683b      	ldr	r3, [r7, #0]
 80084ce:	88db      	ldrh	r3, [r3, #6]
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d016      	beq.n	8008502 <USBD_GetDescriptor+0x316>
    {
      if (len != 0U)
 80084d4:	893b      	ldrh	r3, [r7, #8]
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d00e      	beq.n	80084f8 <USBD_GetDescriptor+0x30c>
      {
        len = MIN(len, req->wLength);
 80084da:	683b      	ldr	r3, [r7, #0]
 80084dc:	88da      	ldrh	r2, [r3, #6]
 80084de:	893b      	ldrh	r3, [r7, #8]
 80084e0:	4293      	cmp	r3, r2
 80084e2:	bf28      	it	cs
 80084e4:	4613      	movcs	r3, r2
 80084e6:	b29b      	uxth	r3, r3
 80084e8:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 80084ea:	893b      	ldrh	r3, [r7, #8]
 80084ec:	461a      	mov	r2, r3
 80084ee:	68f9      	ldr	r1, [r7, #12]
 80084f0:	6878      	ldr	r0, [r7, #4]
 80084f2:	f000 fa3c 	bl	800896e <USBD_CtlSendData>
 80084f6:	e009      	b.n	800850c <USBD_GetDescriptor+0x320>
      }
      else
      {
        USBD_CtlError(pdev, req);
 80084f8:	6839      	ldr	r1, [r7, #0]
 80084fa:	6878      	ldr	r0, [r7, #4]
 80084fc:	f000 f9c6 	bl	800888c <USBD_CtlError>
 8008500:	e004      	b.n	800850c <USBD_GetDescriptor+0x320>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8008502:	6878      	ldr	r0, [r7, #4]
 8008504:	f000 fa8d 	bl	8008a22 <USBD_CtlSendStatus>
 8008508:	e000      	b.n	800850c <USBD_GetDescriptor+0x320>
    return;
 800850a:	bf00      	nop
    }
  }
}
 800850c:	3710      	adds	r7, #16
 800850e:	46bd      	mov	sp, r7
 8008510:	bd80      	pop	{r7, pc}
 8008512:	bf00      	nop

08008514 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008514:	b580      	push	{r7, lr}
 8008516:	b084      	sub	sp, #16
 8008518:	af00      	add	r7, sp, #0
 800851a:	6078      	str	r0, [r7, #4]
 800851c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800851e:	683b      	ldr	r3, [r7, #0]
 8008520:	889b      	ldrh	r3, [r3, #4]
 8008522:	2b00      	cmp	r3, #0
 8008524:	d130      	bne.n	8008588 <USBD_SetAddress+0x74>
 8008526:	683b      	ldr	r3, [r7, #0]
 8008528:	88db      	ldrh	r3, [r3, #6]
 800852a:	2b00      	cmp	r3, #0
 800852c:	d12c      	bne.n	8008588 <USBD_SetAddress+0x74>
 800852e:	683b      	ldr	r3, [r7, #0]
 8008530:	885b      	ldrh	r3, [r3, #2]
 8008532:	2b7f      	cmp	r3, #127	; 0x7f
 8008534:	d828      	bhi.n	8008588 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008536:	683b      	ldr	r3, [r7, #0]
 8008538:	885b      	ldrh	r3, [r3, #2]
 800853a:	b2db      	uxtb	r3, r3
 800853c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008540:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008548:	2b03      	cmp	r3, #3
 800854a:	d104      	bne.n	8008556 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800854c:	6839      	ldr	r1, [r7, #0]
 800854e:	6878      	ldr	r0, [r7, #4]
 8008550:	f000 f99c 	bl	800888c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008554:	e01c      	b.n	8008590 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	7bfa      	ldrb	r2, [r7, #15]
 800855a:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800855e:	7bfb      	ldrb	r3, [r7, #15]
 8008560:	4619      	mov	r1, r3
 8008562:	6878      	ldr	r0, [r7, #4]
 8008564:	f000 fe87 	bl	8009276 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008568:	6878      	ldr	r0, [r7, #4]
 800856a:	f000 fa5a 	bl	8008a22 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800856e:	7bfb      	ldrb	r3, [r7, #15]
 8008570:	2b00      	cmp	r3, #0
 8008572:	d004      	beq.n	800857e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	2202      	movs	r2, #2
 8008578:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800857c:	e008      	b.n	8008590 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	2201      	movs	r2, #1
 8008582:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008586:	e003      	b.n	8008590 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008588:	6839      	ldr	r1, [r7, #0]
 800858a:	6878      	ldr	r0, [r7, #4]
 800858c:	f000 f97e 	bl	800888c <USBD_CtlError>
  }
}
 8008590:	bf00      	nop
 8008592:	3710      	adds	r7, #16
 8008594:	46bd      	mov	sp, r7
 8008596:	bd80      	pop	{r7, pc}

08008598 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008598:	b580      	push	{r7, lr}
 800859a:	b084      	sub	sp, #16
 800859c:	af00      	add	r7, sp, #0
 800859e:	6078      	str	r0, [r7, #4]
 80085a0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80085a2:	2300      	movs	r3, #0
 80085a4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80085a6:	683b      	ldr	r3, [r7, #0]
 80085a8:	885b      	ldrh	r3, [r3, #2]
 80085aa:	b2da      	uxtb	r2, r3
 80085ac:	4b4b      	ldr	r3, [pc, #300]	; (80086dc <USBD_SetConfig+0x144>)
 80085ae:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80085b0:	4b4a      	ldr	r3, [pc, #296]	; (80086dc <USBD_SetConfig+0x144>)
 80085b2:	781b      	ldrb	r3, [r3, #0]
 80085b4:	2b01      	cmp	r3, #1
 80085b6:	d905      	bls.n	80085c4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80085b8:	6839      	ldr	r1, [r7, #0]
 80085ba:	6878      	ldr	r0, [r7, #4]
 80085bc:	f000 f966 	bl	800888c <USBD_CtlError>
    return USBD_FAIL;
 80085c0:	2303      	movs	r3, #3
 80085c2:	e087      	b.n	80086d4 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80085ca:	2b02      	cmp	r3, #2
 80085cc:	d002      	beq.n	80085d4 <USBD_SetConfig+0x3c>
 80085ce:	2b03      	cmp	r3, #3
 80085d0:	d025      	beq.n	800861e <USBD_SetConfig+0x86>
 80085d2:	e071      	b.n	80086b8 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 80085d4:	4b41      	ldr	r3, [pc, #260]	; (80086dc <USBD_SetConfig+0x144>)
 80085d6:	781b      	ldrb	r3, [r3, #0]
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d01c      	beq.n	8008616 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 80085dc:	4b3f      	ldr	r3, [pc, #252]	; (80086dc <USBD_SetConfig+0x144>)
 80085de:	781b      	ldrb	r3, [r3, #0]
 80085e0:	461a      	mov	r2, r3
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 80085e6:	4b3d      	ldr	r3, [pc, #244]	; (80086dc <USBD_SetConfig+0x144>)
 80085e8:	781b      	ldrb	r3, [r3, #0]
 80085ea:	4619      	mov	r1, r3
 80085ec:	6878      	ldr	r0, [r7, #4]
 80085ee:	f7ff f9bd 	bl	800796c <USBD_SetClassConfig>
 80085f2:	4603      	mov	r3, r0
 80085f4:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 80085f6:	7bfb      	ldrb	r3, [r7, #15]
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d004      	beq.n	8008606 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 80085fc:	6839      	ldr	r1, [r7, #0]
 80085fe:	6878      	ldr	r0, [r7, #4]
 8008600:	f000 f944 	bl	800888c <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8008604:	e065      	b.n	80086d2 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8008606:	6878      	ldr	r0, [r7, #4]
 8008608:	f000 fa0b 	bl	8008a22 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	2203      	movs	r2, #3
 8008610:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8008614:	e05d      	b.n	80086d2 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8008616:	6878      	ldr	r0, [r7, #4]
 8008618:	f000 fa03 	bl	8008a22 <USBD_CtlSendStatus>
    break;
 800861c:	e059      	b.n	80086d2 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 800861e:	4b2f      	ldr	r3, [pc, #188]	; (80086dc <USBD_SetConfig+0x144>)
 8008620:	781b      	ldrb	r3, [r3, #0]
 8008622:	2b00      	cmp	r3, #0
 8008624:	d112      	bne.n	800864c <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	2202      	movs	r2, #2
 800862a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 800862e:	4b2b      	ldr	r3, [pc, #172]	; (80086dc <USBD_SetConfig+0x144>)
 8008630:	781b      	ldrb	r3, [r3, #0]
 8008632:	461a      	mov	r2, r3
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008638:	4b28      	ldr	r3, [pc, #160]	; (80086dc <USBD_SetConfig+0x144>)
 800863a:	781b      	ldrb	r3, [r3, #0]
 800863c:	4619      	mov	r1, r3
 800863e:	6878      	ldr	r0, [r7, #4]
 8008640:	f7ff f9b0 	bl	80079a4 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8008644:	6878      	ldr	r0, [r7, #4]
 8008646:	f000 f9ec 	bl	8008a22 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800864a:	e042      	b.n	80086d2 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 800864c:	4b23      	ldr	r3, [pc, #140]	; (80086dc <USBD_SetConfig+0x144>)
 800864e:	781b      	ldrb	r3, [r3, #0]
 8008650:	461a      	mov	r2, r3
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	685b      	ldr	r3, [r3, #4]
 8008656:	429a      	cmp	r2, r3
 8008658:	d02a      	beq.n	80086b0 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	685b      	ldr	r3, [r3, #4]
 800865e:	b2db      	uxtb	r3, r3
 8008660:	4619      	mov	r1, r3
 8008662:	6878      	ldr	r0, [r7, #4]
 8008664:	f7ff f99e 	bl	80079a4 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8008668:	4b1c      	ldr	r3, [pc, #112]	; (80086dc <USBD_SetConfig+0x144>)
 800866a:	781b      	ldrb	r3, [r3, #0]
 800866c:	461a      	mov	r2, r3
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8008672:	4b1a      	ldr	r3, [pc, #104]	; (80086dc <USBD_SetConfig+0x144>)
 8008674:	781b      	ldrb	r3, [r3, #0]
 8008676:	4619      	mov	r1, r3
 8008678:	6878      	ldr	r0, [r7, #4]
 800867a:	f7ff f977 	bl	800796c <USBD_SetClassConfig>
 800867e:	4603      	mov	r3, r0
 8008680:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 8008682:	7bfb      	ldrb	r3, [r7, #15]
 8008684:	2b00      	cmp	r3, #0
 8008686:	d00f      	beq.n	80086a8 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8008688:	6839      	ldr	r1, [r7, #0]
 800868a:	6878      	ldr	r0, [r7, #4]
 800868c:	f000 f8fe 	bl	800888c <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	685b      	ldr	r3, [r3, #4]
 8008694:	b2db      	uxtb	r3, r3
 8008696:	4619      	mov	r1, r3
 8008698:	6878      	ldr	r0, [r7, #4]
 800869a:	f7ff f983 	bl	80079a4 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	2202      	movs	r2, #2
 80086a2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 80086a6:	e014      	b.n	80086d2 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 80086a8:	6878      	ldr	r0, [r7, #4]
 80086aa:	f000 f9ba 	bl	8008a22 <USBD_CtlSendStatus>
    break;
 80086ae:	e010      	b.n	80086d2 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 80086b0:	6878      	ldr	r0, [r7, #4]
 80086b2:	f000 f9b6 	bl	8008a22 <USBD_CtlSendStatus>
    break;
 80086b6:	e00c      	b.n	80086d2 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 80086b8:	6839      	ldr	r1, [r7, #0]
 80086ba:	6878      	ldr	r0, [r7, #4]
 80086bc:	f000 f8e6 	bl	800888c <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 80086c0:	4b06      	ldr	r3, [pc, #24]	; (80086dc <USBD_SetConfig+0x144>)
 80086c2:	781b      	ldrb	r3, [r3, #0]
 80086c4:	4619      	mov	r1, r3
 80086c6:	6878      	ldr	r0, [r7, #4]
 80086c8:	f7ff f96c 	bl	80079a4 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 80086cc:	2303      	movs	r3, #3
 80086ce:	73fb      	strb	r3, [r7, #15]
    break;
 80086d0:	bf00      	nop
  }

  return ret;
 80086d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80086d4:	4618      	mov	r0, r3
 80086d6:	3710      	adds	r7, #16
 80086d8:	46bd      	mov	sp, r7
 80086da:	bd80      	pop	{r7, pc}
 80086dc:	200001ad 	.word	0x200001ad

080086e0 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80086e0:	b580      	push	{r7, lr}
 80086e2:	b082      	sub	sp, #8
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	6078      	str	r0, [r7, #4]
 80086e8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80086ea:	683b      	ldr	r3, [r7, #0]
 80086ec:	88db      	ldrh	r3, [r3, #6]
 80086ee:	2b01      	cmp	r3, #1
 80086f0:	d004      	beq.n	80086fc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80086f2:	6839      	ldr	r1, [r7, #0]
 80086f4:	6878      	ldr	r0, [r7, #4]
 80086f6:	f000 f8c9 	bl	800888c <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 80086fa:	e021      	b.n	8008740 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008702:	2b01      	cmp	r3, #1
 8008704:	db17      	blt.n	8008736 <USBD_GetConfig+0x56>
 8008706:	2b02      	cmp	r3, #2
 8008708:	dd02      	ble.n	8008710 <USBD_GetConfig+0x30>
 800870a:	2b03      	cmp	r3, #3
 800870c:	d00b      	beq.n	8008726 <USBD_GetConfig+0x46>
 800870e:	e012      	b.n	8008736 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	2200      	movs	r2, #0
 8008714:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	3308      	adds	r3, #8
 800871a:	2201      	movs	r2, #1
 800871c:	4619      	mov	r1, r3
 800871e:	6878      	ldr	r0, [r7, #4]
 8008720:	f000 f925 	bl	800896e <USBD_CtlSendData>
      break;
 8008724:	e00c      	b.n	8008740 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	3304      	adds	r3, #4
 800872a:	2201      	movs	r2, #1
 800872c:	4619      	mov	r1, r3
 800872e:	6878      	ldr	r0, [r7, #4]
 8008730:	f000 f91d 	bl	800896e <USBD_CtlSendData>
      break;
 8008734:	e004      	b.n	8008740 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 8008736:	6839      	ldr	r1, [r7, #0]
 8008738:	6878      	ldr	r0, [r7, #4]
 800873a:	f000 f8a7 	bl	800888c <USBD_CtlError>
      break;
 800873e:	bf00      	nop
}
 8008740:	bf00      	nop
 8008742:	3708      	adds	r7, #8
 8008744:	46bd      	mov	sp, r7
 8008746:	bd80      	pop	{r7, pc}

08008748 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008748:	b580      	push	{r7, lr}
 800874a:	b082      	sub	sp, #8
 800874c:	af00      	add	r7, sp, #0
 800874e:	6078      	str	r0, [r7, #4]
 8008750:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008758:	3b01      	subs	r3, #1
 800875a:	2b02      	cmp	r3, #2
 800875c:	d81e      	bhi.n	800879c <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 800875e:	683b      	ldr	r3, [r7, #0]
 8008760:	88db      	ldrh	r3, [r3, #6]
 8008762:	2b02      	cmp	r3, #2
 8008764:	d004      	beq.n	8008770 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8008766:	6839      	ldr	r1, [r7, #0]
 8008768:	6878      	ldr	r0, [r7, #4]
 800876a:	f000 f88f 	bl	800888c <USBD_CtlError>
      break;
 800876e:	e01a      	b.n	80087a6 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	2201      	movs	r2, #1
 8008774:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800877c:	2b00      	cmp	r3, #0
 800877e:	d005      	beq.n	800878c <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	68db      	ldr	r3, [r3, #12]
 8008784:	f043 0202 	orr.w	r2, r3, #2
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	330c      	adds	r3, #12
 8008790:	2202      	movs	r2, #2
 8008792:	4619      	mov	r1, r3
 8008794:	6878      	ldr	r0, [r7, #4]
 8008796:	f000 f8ea 	bl	800896e <USBD_CtlSendData>
    break;
 800879a:	e004      	b.n	80087a6 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 800879c:	6839      	ldr	r1, [r7, #0]
 800879e:	6878      	ldr	r0, [r7, #4]
 80087a0:	f000 f874 	bl	800888c <USBD_CtlError>
    break;
 80087a4:	bf00      	nop
  }
}
 80087a6:	bf00      	nop
 80087a8:	3708      	adds	r7, #8
 80087aa:	46bd      	mov	sp, r7
 80087ac:	bd80      	pop	{r7, pc}

080087ae <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80087ae:	b580      	push	{r7, lr}
 80087b0:	b082      	sub	sp, #8
 80087b2:	af00      	add	r7, sp, #0
 80087b4:	6078      	str	r0, [r7, #4]
 80087b6:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80087b8:	683b      	ldr	r3, [r7, #0]
 80087ba:	885b      	ldrh	r3, [r3, #2]
 80087bc:	2b01      	cmp	r3, #1
 80087be:	d106      	bne.n	80087ce <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	2201      	movs	r2, #1
 80087c4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80087c8:	6878      	ldr	r0, [r7, #4]
 80087ca:	f000 f92a 	bl	8008a22 <USBD_CtlSendStatus>
  }
}
 80087ce:	bf00      	nop
 80087d0:	3708      	adds	r7, #8
 80087d2:	46bd      	mov	sp, r7
 80087d4:	bd80      	pop	{r7, pc}

080087d6 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80087d6:	b580      	push	{r7, lr}
 80087d8:	b082      	sub	sp, #8
 80087da:	af00      	add	r7, sp, #0
 80087dc:	6078      	str	r0, [r7, #4]
 80087de:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80087e6:	3b01      	subs	r3, #1
 80087e8:	2b02      	cmp	r3, #2
 80087ea:	d80b      	bhi.n	8008804 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80087ec:	683b      	ldr	r3, [r7, #0]
 80087ee:	885b      	ldrh	r3, [r3, #2]
 80087f0:	2b01      	cmp	r3, #1
 80087f2:	d10c      	bne.n	800880e <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	2200      	movs	r2, #0
 80087f8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80087fc:	6878      	ldr	r0, [r7, #4]
 80087fe:	f000 f910 	bl	8008a22 <USBD_CtlSendStatus>
      }
      break;
 8008802:	e004      	b.n	800880e <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8008804:	6839      	ldr	r1, [r7, #0]
 8008806:	6878      	ldr	r0, [r7, #4]
 8008808:	f000 f840 	bl	800888c <USBD_CtlError>
      break;
 800880c:	e000      	b.n	8008810 <USBD_ClrFeature+0x3a>
      break;
 800880e:	bf00      	nop
  }
}
 8008810:	bf00      	nop
 8008812:	3708      	adds	r7, #8
 8008814:	46bd      	mov	sp, r7
 8008816:	bd80      	pop	{r7, pc}

08008818 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008818:	b580      	push	{r7, lr}
 800881a:	b084      	sub	sp, #16
 800881c:	af00      	add	r7, sp, #0
 800881e:	6078      	str	r0, [r7, #4]
 8008820:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008822:	683b      	ldr	r3, [r7, #0]
 8008824:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	781a      	ldrb	r2, [r3, #0]
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	3301      	adds	r3, #1
 8008832:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	781a      	ldrb	r2, [r3, #0]
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	3301      	adds	r3, #1
 8008840:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008842:	68f8      	ldr	r0, [r7, #12]
 8008844:	f7ff faa8 	bl	8007d98 <SWAPBYTE>
 8008848:	4603      	mov	r3, r0
 800884a:	461a      	mov	r2, r3
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	3301      	adds	r3, #1
 8008854:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	3301      	adds	r3, #1
 800885a:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800885c:	68f8      	ldr	r0, [r7, #12]
 800885e:	f7ff fa9b 	bl	8007d98 <SWAPBYTE>
 8008862:	4603      	mov	r3, r0
 8008864:	461a      	mov	r2, r3
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	3301      	adds	r3, #1
 800886e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	3301      	adds	r3, #1
 8008874:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008876:	68f8      	ldr	r0, [r7, #12]
 8008878:	f7ff fa8e 	bl	8007d98 <SWAPBYTE>
 800887c:	4603      	mov	r3, r0
 800887e:	461a      	mov	r2, r3
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	80da      	strh	r2, [r3, #6]
}
 8008884:	bf00      	nop
 8008886:	3710      	adds	r7, #16
 8008888:	46bd      	mov	sp, r7
 800888a:	bd80      	pop	{r7, pc}

0800888c <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800888c:	b580      	push	{r7, lr}
 800888e:	b082      	sub	sp, #8
 8008890:	af00      	add	r7, sp, #0
 8008892:	6078      	str	r0, [r7, #4]
 8008894:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008896:	2180      	movs	r1, #128	; 0x80
 8008898:	6878      	ldr	r0, [r7, #4]
 800889a:	f000 fc81 	bl	80091a0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800889e:	2100      	movs	r1, #0
 80088a0:	6878      	ldr	r0, [r7, #4]
 80088a2:	f000 fc7d 	bl	80091a0 <USBD_LL_StallEP>
}
 80088a6:	bf00      	nop
 80088a8:	3708      	adds	r7, #8
 80088aa:	46bd      	mov	sp, r7
 80088ac:	bd80      	pop	{r7, pc}

080088ae <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80088ae:	b580      	push	{r7, lr}
 80088b0:	b086      	sub	sp, #24
 80088b2:	af00      	add	r7, sp, #0
 80088b4:	60f8      	str	r0, [r7, #12]
 80088b6:	60b9      	str	r1, [r7, #8]
 80088b8:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80088ba:	2300      	movs	r3, #0
 80088bc:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d036      	beq.n	8008932 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80088c8:	6938      	ldr	r0, [r7, #16]
 80088ca:	f000 f836 	bl	800893a <USBD_GetLen>
 80088ce:	4603      	mov	r3, r0
 80088d0:	3301      	adds	r3, #1
 80088d2:	b29b      	uxth	r3, r3
 80088d4:	005b      	lsls	r3, r3, #1
 80088d6:	b29a      	uxth	r2, r3
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80088dc:	7dfb      	ldrb	r3, [r7, #23]
 80088de:	68ba      	ldr	r2, [r7, #8]
 80088e0:	4413      	add	r3, r2
 80088e2:	687a      	ldr	r2, [r7, #4]
 80088e4:	7812      	ldrb	r2, [r2, #0]
 80088e6:	701a      	strb	r2, [r3, #0]
  idx++;
 80088e8:	7dfb      	ldrb	r3, [r7, #23]
 80088ea:	3301      	adds	r3, #1
 80088ec:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80088ee:	7dfb      	ldrb	r3, [r7, #23]
 80088f0:	68ba      	ldr	r2, [r7, #8]
 80088f2:	4413      	add	r3, r2
 80088f4:	2203      	movs	r2, #3
 80088f6:	701a      	strb	r2, [r3, #0]
  idx++;
 80088f8:	7dfb      	ldrb	r3, [r7, #23]
 80088fa:	3301      	adds	r3, #1
 80088fc:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80088fe:	e013      	b.n	8008928 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008900:	7dfb      	ldrb	r3, [r7, #23]
 8008902:	68ba      	ldr	r2, [r7, #8]
 8008904:	4413      	add	r3, r2
 8008906:	693a      	ldr	r2, [r7, #16]
 8008908:	7812      	ldrb	r2, [r2, #0]
 800890a:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800890c:	693b      	ldr	r3, [r7, #16]
 800890e:	3301      	adds	r3, #1
 8008910:	613b      	str	r3, [r7, #16]
    idx++;
 8008912:	7dfb      	ldrb	r3, [r7, #23]
 8008914:	3301      	adds	r3, #1
 8008916:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008918:	7dfb      	ldrb	r3, [r7, #23]
 800891a:	68ba      	ldr	r2, [r7, #8]
 800891c:	4413      	add	r3, r2
 800891e:	2200      	movs	r2, #0
 8008920:	701a      	strb	r2, [r3, #0]
    idx++;
 8008922:	7dfb      	ldrb	r3, [r7, #23]
 8008924:	3301      	adds	r3, #1
 8008926:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008928:	693b      	ldr	r3, [r7, #16]
 800892a:	781b      	ldrb	r3, [r3, #0]
 800892c:	2b00      	cmp	r3, #0
 800892e:	d1e7      	bne.n	8008900 <USBD_GetString+0x52>
 8008930:	e000      	b.n	8008934 <USBD_GetString+0x86>
    return;
 8008932:	bf00      	nop
  }
}
 8008934:	3718      	adds	r7, #24
 8008936:	46bd      	mov	sp, r7
 8008938:	bd80      	pop	{r7, pc}

0800893a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800893a:	b480      	push	{r7}
 800893c:	b085      	sub	sp, #20
 800893e:	af00      	add	r7, sp, #0
 8008940:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008942:	2300      	movs	r3, #0
 8008944:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800894a:	e005      	b.n	8008958 <USBD_GetLen+0x1e>
  {
    len++;
 800894c:	7bfb      	ldrb	r3, [r7, #15]
 800894e:	3301      	adds	r3, #1
 8008950:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008952:	68bb      	ldr	r3, [r7, #8]
 8008954:	3301      	adds	r3, #1
 8008956:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008958:	68bb      	ldr	r3, [r7, #8]
 800895a:	781b      	ldrb	r3, [r3, #0]
 800895c:	2b00      	cmp	r3, #0
 800895e:	d1f5      	bne.n	800894c <USBD_GetLen+0x12>
  }

  return len;
 8008960:	7bfb      	ldrb	r3, [r7, #15]
}
 8008962:	4618      	mov	r0, r3
 8008964:	3714      	adds	r7, #20
 8008966:	46bd      	mov	sp, r7
 8008968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800896c:	4770      	bx	lr

0800896e <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800896e:	b580      	push	{r7, lr}
 8008970:	b084      	sub	sp, #16
 8008972:	af00      	add	r7, sp, #0
 8008974:	60f8      	str	r0, [r7, #12]
 8008976:	60b9      	str	r1, [r7, #8]
 8008978:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	2202      	movs	r2, #2
 800897e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	687a      	ldr	r2, [r7, #4]
 8008986:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	687a      	ldr	r2, [r7, #4]
 800898c:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	68ba      	ldr	r2, [r7, #8]
 8008992:	2100      	movs	r1, #0
 8008994:	68f8      	ldr	r0, [r7, #12]
 8008996:	f000 fc8d 	bl	80092b4 <USBD_LL_Transmit>

  return USBD_OK;
 800899a:	2300      	movs	r3, #0
}
 800899c:	4618      	mov	r0, r3
 800899e:	3710      	adds	r7, #16
 80089a0:	46bd      	mov	sp, r7
 80089a2:	bd80      	pop	{r7, pc}

080089a4 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80089a4:	b580      	push	{r7, lr}
 80089a6:	b084      	sub	sp, #16
 80089a8:	af00      	add	r7, sp, #0
 80089aa:	60f8      	str	r0, [r7, #12]
 80089ac:	60b9      	str	r1, [r7, #8]
 80089ae:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	68ba      	ldr	r2, [r7, #8]
 80089b4:	2100      	movs	r1, #0
 80089b6:	68f8      	ldr	r0, [r7, #12]
 80089b8:	f000 fc7c 	bl	80092b4 <USBD_LL_Transmit>

  return USBD_OK;
 80089bc:	2300      	movs	r3, #0
}
 80089be:	4618      	mov	r0, r3
 80089c0:	3710      	adds	r7, #16
 80089c2:	46bd      	mov	sp, r7
 80089c4:	bd80      	pop	{r7, pc}

080089c6 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80089c6:	b580      	push	{r7, lr}
 80089c8:	b084      	sub	sp, #16
 80089ca:	af00      	add	r7, sp, #0
 80089cc:	60f8      	str	r0, [r7, #12]
 80089ce:	60b9      	str	r1, [r7, #8]
 80089d0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	2203      	movs	r2, #3
 80089d6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	687a      	ldr	r2, [r7, #4]
 80089de:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	687a      	ldr	r2, [r7, #4]
 80089e6:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	68ba      	ldr	r2, [r7, #8]
 80089ee:	2100      	movs	r1, #0
 80089f0:	68f8      	ldr	r0, [r7, #12]
 80089f2:	f000 fc80 	bl	80092f6 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80089f6:	2300      	movs	r3, #0
}
 80089f8:	4618      	mov	r0, r3
 80089fa:	3710      	adds	r7, #16
 80089fc:	46bd      	mov	sp, r7
 80089fe:	bd80      	pop	{r7, pc}

08008a00 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008a00:	b580      	push	{r7, lr}
 8008a02:	b084      	sub	sp, #16
 8008a04:	af00      	add	r7, sp, #0
 8008a06:	60f8      	str	r0, [r7, #12]
 8008a08:	60b9      	str	r1, [r7, #8]
 8008a0a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	68ba      	ldr	r2, [r7, #8]
 8008a10:	2100      	movs	r1, #0
 8008a12:	68f8      	ldr	r0, [r7, #12]
 8008a14:	f000 fc6f 	bl	80092f6 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008a18:	2300      	movs	r3, #0
}
 8008a1a:	4618      	mov	r0, r3
 8008a1c:	3710      	adds	r7, #16
 8008a1e:	46bd      	mov	sp, r7
 8008a20:	bd80      	pop	{r7, pc}

08008a22 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008a22:	b580      	push	{r7, lr}
 8008a24:	b082      	sub	sp, #8
 8008a26:	af00      	add	r7, sp, #0
 8008a28:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	2204      	movs	r2, #4
 8008a2e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008a32:	2300      	movs	r3, #0
 8008a34:	2200      	movs	r2, #0
 8008a36:	2100      	movs	r1, #0
 8008a38:	6878      	ldr	r0, [r7, #4]
 8008a3a:	f000 fc3b 	bl	80092b4 <USBD_LL_Transmit>

  return USBD_OK;
 8008a3e:	2300      	movs	r3, #0
}
 8008a40:	4618      	mov	r0, r3
 8008a42:	3708      	adds	r7, #8
 8008a44:	46bd      	mov	sp, r7
 8008a46:	bd80      	pop	{r7, pc}

08008a48 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008a48:	b580      	push	{r7, lr}
 8008a4a:	b082      	sub	sp, #8
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	2205      	movs	r2, #5
 8008a54:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008a58:	2300      	movs	r3, #0
 8008a5a:	2200      	movs	r2, #0
 8008a5c:	2100      	movs	r1, #0
 8008a5e:	6878      	ldr	r0, [r7, #4]
 8008a60:	f000 fc49 	bl	80092f6 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008a64:	2300      	movs	r3, #0
}
 8008a66:	4618      	mov	r0, r3
 8008a68:	3708      	adds	r7, #8
 8008a6a:	46bd      	mov	sp, r7
 8008a6c:	bd80      	pop	{r7, pc}
	...

08008a70 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 8008a70:	b580      	push	{r7, lr}
 8008a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 8008a74:	2200      	movs	r2, #0
 8008a76:	4912      	ldr	r1, [pc, #72]	; (8008ac0 <MX_USB_Device_Init+0x50>)
 8008a78:	4812      	ldr	r0, [pc, #72]	; (8008ac4 <MX_USB_Device_Init+0x54>)
 8008a7a:	f7fe ff09 	bl	8007890 <USBD_Init>
 8008a7e:	4603      	mov	r3, r0
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d001      	beq.n	8008a88 <MX_USB_Device_Init+0x18>
    Error_Handler();
 8008a84:	f7f8 f92e 	bl	8000ce4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 8008a88:	490f      	ldr	r1, [pc, #60]	; (8008ac8 <MX_USB_Device_Init+0x58>)
 8008a8a:	480e      	ldr	r0, [pc, #56]	; (8008ac4 <MX_USB_Device_Init+0x54>)
 8008a8c:	f7fe ff30 	bl	80078f0 <USBD_RegisterClass>
 8008a90:	4603      	mov	r3, r0
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d001      	beq.n	8008a9a <MX_USB_Device_Init+0x2a>
    Error_Handler();
 8008a96:	f7f8 f925 	bl	8000ce4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 8008a9a:	490c      	ldr	r1, [pc, #48]	; (8008acc <MX_USB_Device_Init+0x5c>)
 8008a9c:	4809      	ldr	r0, [pc, #36]	; (8008ac4 <MX_USB_Device_Init+0x54>)
 8008a9e:	f7fe fe5b 	bl	8007758 <USBD_CDC_RegisterInterface>
 8008aa2:	4603      	mov	r3, r0
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d001      	beq.n	8008aac <MX_USB_Device_Init+0x3c>
    Error_Handler();
 8008aa8:	f7f8 f91c 	bl	8000ce4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 8008aac:	4805      	ldr	r0, [pc, #20]	; (8008ac4 <MX_USB_Device_Init+0x54>)
 8008aae:	f7fe ff46 	bl	800793e <USBD_Start>
 8008ab2:	4603      	mov	r3, r0
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d001      	beq.n	8008abc <MX_USB_Device_Init+0x4c>
    Error_Handler();
 8008ab8:	f7f8 f914 	bl	8000ce4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 8008abc:	bf00      	nop
 8008abe:	bd80      	pop	{r7, pc}
 8008ac0:	20000130 	.word	0x20000130
 8008ac4:	20000680 	.word	0x20000680
 8008ac8:	20000018 	.word	0x20000018
 8008acc:	2000011c 	.word	0x2000011c

08008ad0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008ad0:	b580      	push	{r7, lr}
 8008ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008ad4:	2200      	movs	r2, #0
 8008ad6:	4905      	ldr	r1, [pc, #20]	; (8008aec <CDC_Init_FS+0x1c>)
 8008ad8:	4805      	ldr	r0, [pc, #20]	; (8008af0 <CDC_Init_FS+0x20>)
 8008ada:	f7fe fe52 	bl	8007782 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008ade:	4905      	ldr	r1, [pc, #20]	; (8008af4 <CDC_Init_FS+0x24>)
 8008ae0:	4803      	ldr	r0, [pc, #12]	; (8008af0 <CDC_Init_FS+0x20>)
 8008ae2:	f7fe fe67 	bl	80077b4 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008ae6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008ae8:	4618      	mov	r0, r3
 8008aea:	bd80      	pop	{r7, pc}
 8008aec:	20000d38 	.word	0x20000d38
 8008af0:	20000680 	.word	0x20000680
 8008af4:	20000950 	.word	0x20000950

08008af8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008af8:	b480      	push	{r7}
 8008afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008afc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008afe:	4618      	mov	r0, r3
 8008b00:	46bd      	mov	sp, r7
 8008b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b06:	4770      	bx	lr

08008b08 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008b08:	b480      	push	{r7}
 8008b0a:	b083      	sub	sp, #12
 8008b0c:	af00      	add	r7, sp, #0
 8008b0e:	4603      	mov	r3, r0
 8008b10:	6039      	str	r1, [r7, #0]
 8008b12:	71fb      	strb	r3, [r7, #7]
 8008b14:	4613      	mov	r3, r2
 8008b16:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008b18:	79fb      	ldrb	r3, [r7, #7]
 8008b1a:	2b23      	cmp	r3, #35	; 0x23
 8008b1c:	d84a      	bhi.n	8008bb4 <CDC_Control_FS+0xac>
 8008b1e:	a201      	add	r2, pc, #4	; (adr r2, 8008b24 <CDC_Control_FS+0x1c>)
 8008b20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b24:	08008bb5 	.word	0x08008bb5
 8008b28:	08008bb5 	.word	0x08008bb5
 8008b2c:	08008bb5 	.word	0x08008bb5
 8008b30:	08008bb5 	.word	0x08008bb5
 8008b34:	08008bb5 	.word	0x08008bb5
 8008b38:	08008bb5 	.word	0x08008bb5
 8008b3c:	08008bb5 	.word	0x08008bb5
 8008b40:	08008bb5 	.word	0x08008bb5
 8008b44:	08008bb5 	.word	0x08008bb5
 8008b48:	08008bb5 	.word	0x08008bb5
 8008b4c:	08008bb5 	.word	0x08008bb5
 8008b50:	08008bb5 	.word	0x08008bb5
 8008b54:	08008bb5 	.word	0x08008bb5
 8008b58:	08008bb5 	.word	0x08008bb5
 8008b5c:	08008bb5 	.word	0x08008bb5
 8008b60:	08008bb5 	.word	0x08008bb5
 8008b64:	08008bb5 	.word	0x08008bb5
 8008b68:	08008bb5 	.word	0x08008bb5
 8008b6c:	08008bb5 	.word	0x08008bb5
 8008b70:	08008bb5 	.word	0x08008bb5
 8008b74:	08008bb5 	.word	0x08008bb5
 8008b78:	08008bb5 	.word	0x08008bb5
 8008b7c:	08008bb5 	.word	0x08008bb5
 8008b80:	08008bb5 	.word	0x08008bb5
 8008b84:	08008bb5 	.word	0x08008bb5
 8008b88:	08008bb5 	.word	0x08008bb5
 8008b8c:	08008bb5 	.word	0x08008bb5
 8008b90:	08008bb5 	.word	0x08008bb5
 8008b94:	08008bb5 	.word	0x08008bb5
 8008b98:	08008bb5 	.word	0x08008bb5
 8008b9c:	08008bb5 	.word	0x08008bb5
 8008ba0:	08008bb5 	.word	0x08008bb5
 8008ba4:	08008bb5 	.word	0x08008bb5
 8008ba8:	08008bb5 	.word	0x08008bb5
 8008bac:	08008bb5 	.word	0x08008bb5
 8008bb0:	08008bb5 	.word	0x08008bb5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008bb4:	bf00      	nop
  }

  return (USBD_OK);
 8008bb6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008bb8:	4618      	mov	r0, r3
 8008bba:	370c      	adds	r7, #12
 8008bbc:	46bd      	mov	sp, r7
 8008bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc2:	4770      	bx	lr

08008bc4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008bc4:	b580      	push	{r7, lr}
 8008bc6:	b082      	sub	sp, #8
 8008bc8:	af00      	add	r7, sp, #0
 8008bca:	6078      	str	r0, [r7, #4]
 8008bcc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  CDC_On_Receive(Buf, Len); // (1)
 8008bce:	6839      	ldr	r1, [r7, #0]
 8008bd0:	6878      	ldr	r0, [r7, #4]
 8008bd2:	f7f7 fb21 	bl	8000218 <CDC_On_Receive>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008bd6:	6879      	ldr	r1, [r7, #4]
 8008bd8:	4805      	ldr	r0, [pc, #20]	; (8008bf0 <CDC_Receive_FS+0x2c>)
 8008bda:	f7fe fdeb 	bl	80077b4 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008bde:	4804      	ldr	r0, [pc, #16]	; (8008bf0 <CDC_Receive_FS+0x2c>)
 8008be0:	f7fe fe2c 	bl	800783c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008be4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008be6:	4618      	mov	r0, r3
 8008be8:	3708      	adds	r7, #8
 8008bea:	46bd      	mov	sp, r7
 8008bec:	bd80      	pop	{r7, pc}
 8008bee:	bf00      	nop
 8008bf0:	20000680 	.word	0x20000680

08008bf4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008bf4:	b580      	push	{r7, lr}
 8008bf6:	b084      	sub	sp, #16
 8008bf8:	af00      	add	r7, sp, #0
 8008bfa:	6078      	str	r0, [r7, #4]
 8008bfc:	460b      	mov	r3, r1
 8008bfe:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008c00:	2300      	movs	r3, #0
 8008c02:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008c04:	4b0d      	ldr	r3, [pc, #52]	; (8008c3c <CDC_Transmit_FS+0x48>)
 8008c06:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008c0a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008c0c:	68bb      	ldr	r3, [r7, #8]
 8008c0e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d001      	beq.n	8008c1a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8008c16:	2301      	movs	r3, #1
 8008c18:	e00b      	b.n	8008c32 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008c1a:	887b      	ldrh	r3, [r7, #2]
 8008c1c:	461a      	mov	r2, r3
 8008c1e:	6879      	ldr	r1, [r7, #4]
 8008c20:	4806      	ldr	r0, [pc, #24]	; (8008c3c <CDC_Transmit_FS+0x48>)
 8008c22:	f7fe fdae 	bl	8007782 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008c26:	4805      	ldr	r0, [pc, #20]	; (8008c3c <CDC_Transmit_FS+0x48>)
 8008c28:	f7fe fdd8 	bl	80077dc <USBD_CDC_TransmitPacket>
 8008c2c:	4603      	mov	r3, r0
 8008c2e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008c30:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c32:	4618      	mov	r0, r3
 8008c34:	3710      	adds	r7, #16
 8008c36:	46bd      	mov	sp, r7
 8008c38:	bd80      	pop	{r7, pc}
 8008c3a:	bf00      	nop
 8008c3c:	20000680 	.word	0x20000680

08008c40 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008c40:	b480      	push	{r7}
 8008c42:	b087      	sub	sp, #28
 8008c44:	af00      	add	r7, sp, #0
 8008c46:	60f8      	str	r0, [r7, #12]
 8008c48:	60b9      	str	r1, [r7, #8]
 8008c4a:	4613      	mov	r3, r2
 8008c4c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8008c4e:	2300      	movs	r3, #0
 8008c50:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8008c52:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008c56:	4618      	mov	r0, r3
 8008c58:	371c      	adds	r7, #28
 8008c5a:	46bd      	mov	sp, r7
 8008c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c60:	4770      	bx	lr
	...

08008c64 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008c64:	b480      	push	{r7}
 8008c66:	b083      	sub	sp, #12
 8008c68:	af00      	add	r7, sp, #0
 8008c6a:	4603      	mov	r3, r0
 8008c6c:	6039      	str	r1, [r7, #0]
 8008c6e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 8008c70:	683b      	ldr	r3, [r7, #0]
 8008c72:	2212      	movs	r2, #18
 8008c74:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 8008c76:	4b03      	ldr	r3, [pc, #12]	; (8008c84 <USBD_CDC_DeviceDescriptor+0x20>)
}
 8008c78:	4618      	mov	r0, r3
 8008c7a:	370c      	adds	r7, #12
 8008c7c:	46bd      	mov	sp, r7
 8008c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c82:	4770      	bx	lr
 8008c84:	20000150 	.word	0x20000150

08008c88 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008c88:	b480      	push	{r7}
 8008c8a:	b083      	sub	sp, #12
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	4603      	mov	r3, r0
 8008c90:	6039      	str	r1, [r7, #0]
 8008c92:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008c94:	683b      	ldr	r3, [r7, #0]
 8008c96:	2204      	movs	r2, #4
 8008c98:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008c9a:	4b03      	ldr	r3, [pc, #12]	; (8008ca8 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 8008c9c:	4618      	mov	r0, r3
 8008c9e:	370c      	adds	r7, #12
 8008ca0:	46bd      	mov	sp, r7
 8008ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca6:	4770      	bx	lr
 8008ca8:	20000164 	.word	0x20000164

08008cac <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008cac:	b580      	push	{r7, lr}
 8008cae:	b082      	sub	sp, #8
 8008cb0:	af00      	add	r7, sp, #0
 8008cb2:	4603      	mov	r3, r0
 8008cb4:	6039      	str	r1, [r7, #0]
 8008cb6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008cb8:	79fb      	ldrb	r3, [r7, #7]
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d105      	bne.n	8008cca <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8008cbe:	683a      	ldr	r2, [r7, #0]
 8008cc0:	4907      	ldr	r1, [pc, #28]	; (8008ce0 <USBD_CDC_ProductStrDescriptor+0x34>)
 8008cc2:	4808      	ldr	r0, [pc, #32]	; (8008ce4 <USBD_CDC_ProductStrDescriptor+0x38>)
 8008cc4:	f7ff fdf3 	bl	80088ae <USBD_GetString>
 8008cc8:	e004      	b.n	8008cd4 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8008cca:	683a      	ldr	r2, [r7, #0]
 8008ccc:	4904      	ldr	r1, [pc, #16]	; (8008ce0 <USBD_CDC_ProductStrDescriptor+0x34>)
 8008cce:	4805      	ldr	r0, [pc, #20]	; (8008ce4 <USBD_CDC_ProductStrDescriptor+0x38>)
 8008cd0:	f7ff fded 	bl	80088ae <USBD_GetString>
  }
  return USBD_StrDesc;
 8008cd4:	4b02      	ldr	r3, [pc, #8]	; (8008ce0 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 8008cd6:	4618      	mov	r0, r3
 8008cd8:	3708      	adds	r7, #8
 8008cda:	46bd      	mov	sp, r7
 8008cdc:	bd80      	pop	{r7, pc}
 8008cde:	bf00      	nop
 8008ce0:	20001120 	.word	0x20001120
 8008ce4:	080094e8 	.word	0x080094e8

08008ce8 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008ce8:	b580      	push	{r7, lr}
 8008cea:	b082      	sub	sp, #8
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	4603      	mov	r3, r0
 8008cf0:	6039      	str	r1, [r7, #0]
 8008cf2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008cf4:	683a      	ldr	r2, [r7, #0]
 8008cf6:	4904      	ldr	r1, [pc, #16]	; (8008d08 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 8008cf8:	4804      	ldr	r0, [pc, #16]	; (8008d0c <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 8008cfa:	f7ff fdd8 	bl	80088ae <USBD_GetString>
  return USBD_StrDesc;
 8008cfe:	4b02      	ldr	r3, [pc, #8]	; (8008d08 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 8008d00:	4618      	mov	r0, r3
 8008d02:	3708      	adds	r7, #8
 8008d04:	46bd      	mov	sp, r7
 8008d06:	bd80      	pop	{r7, pc}
 8008d08:	20001120 	.word	0x20001120
 8008d0c:	08009500 	.word	0x08009500

08008d10 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008d10:	b580      	push	{r7, lr}
 8008d12:	b082      	sub	sp, #8
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	4603      	mov	r3, r0
 8008d18:	6039      	str	r1, [r7, #0]
 8008d1a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008d1c:	683b      	ldr	r3, [r7, #0]
 8008d1e:	221a      	movs	r2, #26
 8008d20:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008d22:	f000 f843 	bl	8008dac <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8008d26:	4b02      	ldr	r3, [pc, #8]	; (8008d30 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 8008d28:	4618      	mov	r0, r3
 8008d2a:	3708      	adds	r7, #8
 8008d2c:	46bd      	mov	sp, r7
 8008d2e:	bd80      	pop	{r7, pc}
 8008d30:	20000168 	.word	0x20000168

08008d34 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008d34:	b580      	push	{r7, lr}
 8008d36:	b082      	sub	sp, #8
 8008d38:	af00      	add	r7, sp, #0
 8008d3a:	4603      	mov	r3, r0
 8008d3c:	6039      	str	r1, [r7, #0]
 8008d3e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008d40:	79fb      	ldrb	r3, [r7, #7]
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d105      	bne.n	8008d52 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8008d46:	683a      	ldr	r2, [r7, #0]
 8008d48:	4907      	ldr	r1, [pc, #28]	; (8008d68 <USBD_CDC_ConfigStrDescriptor+0x34>)
 8008d4a:	4808      	ldr	r0, [pc, #32]	; (8008d6c <USBD_CDC_ConfigStrDescriptor+0x38>)
 8008d4c:	f7ff fdaf 	bl	80088ae <USBD_GetString>
 8008d50:	e004      	b.n	8008d5c <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8008d52:	683a      	ldr	r2, [r7, #0]
 8008d54:	4904      	ldr	r1, [pc, #16]	; (8008d68 <USBD_CDC_ConfigStrDescriptor+0x34>)
 8008d56:	4805      	ldr	r0, [pc, #20]	; (8008d6c <USBD_CDC_ConfigStrDescriptor+0x38>)
 8008d58:	f7ff fda9 	bl	80088ae <USBD_GetString>
  }
  return USBD_StrDesc;
 8008d5c:	4b02      	ldr	r3, [pc, #8]	; (8008d68 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 8008d5e:	4618      	mov	r0, r3
 8008d60:	3708      	adds	r7, #8
 8008d62:	46bd      	mov	sp, r7
 8008d64:	bd80      	pop	{r7, pc}
 8008d66:	bf00      	nop
 8008d68:	20001120 	.word	0x20001120
 8008d6c:	08009514 	.word	0x08009514

08008d70 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008d70:	b580      	push	{r7, lr}
 8008d72:	b082      	sub	sp, #8
 8008d74:	af00      	add	r7, sp, #0
 8008d76:	4603      	mov	r3, r0
 8008d78:	6039      	str	r1, [r7, #0]
 8008d7a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008d7c:	79fb      	ldrb	r3, [r7, #7]
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d105      	bne.n	8008d8e <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8008d82:	683a      	ldr	r2, [r7, #0]
 8008d84:	4907      	ldr	r1, [pc, #28]	; (8008da4 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8008d86:	4808      	ldr	r0, [pc, #32]	; (8008da8 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8008d88:	f7ff fd91 	bl	80088ae <USBD_GetString>
 8008d8c:	e004      	b.n	8008d98 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8008d8e:	683a      	ldr	r2, [r7, #0]
 8008d90:	4904      	ldr	r1, [pc, #16]	; (8008da4 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8008d92:	4805      	ldr	r0, [pc, #20]	; (8008da8 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8008d94:	f7ff fd8b 	bl	80088ae <USBD_GetString>
  }
  return USBD_StrDesc;
 8008d98:	4b02      	ldr	r3, [pc, #8]	; (8008da4 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 8008d9a:	4618      	mov	r0, r3
 8008d9c:	3708      	adds	r7, #8
 8008d9e:	46bd      	mov	sp, r7
 8008da0:	bd80      	pop	{r7, pc}
 8008da2:	bf00      	nop
 8008da4:	20001120 	.word	0x20001120
 8008da8:	08009520 	.word	0x08009520

08008dac <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008dac:	b580      	push	{r7, lr}
 8008dae:	b084      	sub	sp, #16
 8008db0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008db2:	4b0f      	ldr	r3, [pc, #60]	; (8008df0 <Get_SerialNum+0x44>)
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008db8:	4b0e      	ldr	r3, [pc, #56]	; (8008df4 <Get_SerialNum+0x48>)
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008dbe:	4b0e      	ldr	r3, [pc, #56]	; (8008df8 <Get_SerialNum+0x4c>)
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008dc4:	68fa      	ldr	r2, [r7, #12]
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	4413      	add	r3, r2
 8008dca:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d009      	beq.n	8008de6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008dd2:	2208      	movs	r2, #8
 8008dd4:	4909      	ldr	r1, [pc, #36]	; (8008dfc <Get_SerialNum+0x50>)
 8008dd6:	68f8      	ldr	r0, [r7, #12]
 8008dd8:	f000 f814 	bl	8008e04 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008ddc:	2204      	movs	r2, #4
 8008dde:	4908      	ldr	r1, [pc, #32]	; (8008e00 <Get_SerialNum+0x54>)
 8008de0:	68b8      	ldr	r0, [r7, #8]
 8008de2:	f000 f80f 	bl	8008e04 <IntToUnicode>
  }
}
 8008de6:	bf00      	nop
 8008de8:	3710      	adds	r7, #16
 8008dea:	46bd      	mov	sp, r7
 8008dec:	bd80      	pop	{r7, pc}
 8008dee:	bf00      	nop
 8008df0:	1fff7590 	.word	0x1fff7590
 8008df4:	1fff7594 	.word	0x1fff7594
 8008df8:	1fff7598 	.word	0x1fff7598
 8008dfc:	2000016a 	.word	0x2000016a
 8008e00:	2000017a 	.word	0x2000017a

08008e04 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008e04:	b480      	push	{r7}
 8008e06:	b087      	sub	sp, #28
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	60f8      	str	r0, [r7, #12]
 8008e0c:	60b9      	str	r1, [r7, #8]
 8008e0e:	4613      	mov	r3, r2
 8008e10:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008e12:	2300      	movs	r3, #0
 8008e14:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008e16:	2300      	movs	r3, #0
 8008e18:	75fb      	strb	r3, [r7, #23]
 8008e1a:	e027      	b.n	8008e6c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	0f1b      	lsrs	r3, r3, #28
 8008e20:	2b09      	cmp	r3, #9
 8008e22:	d80b      	bhi.n	8008e3c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	0f1b      	lsrs	r3, r3, #28
 8008e28:	b2da      	uxtb	r2, r3
 8008e2a:	7dfb      	ldrb	r3, [r7, #23]
 8008e2c:	005b      	lsls	r3, r3, #1
 8008e2e:	4619      	mov	r1, r3
 8008e30:	68bb      	ldr	r3, [r7, #8]
 8008e32:	440b      	add	r3, r1
 8008e34:	3230      	adds	r2, #48	; 0x30
 8008e36:	b2d2      	uxtb	r2, r2
 8008e38:	701a      	strb	r2, [r3, #0]
 8008e3a:	e00a      	b.n	8008e52 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	0f1b      	lsrs	r3, r3, #28
 8008e40:	b2da      	uxtb	r2, r3
 8008e42:	7dfb      	ldrb	r3, [r7, #23]
 8008e44:	005b      	lsls	r3, r3, #1
 8008e46:	4619      	mov	r1, r3
 8008e48:	68bb      	ldr	r3, [r7, #8]
 8008e4a:	440b      	add	r3, r1
 8008e4c:	3237      	adds	r2, #55	; 0x37
 8008e4e:	b2d2      	uxtb	r2, r2
 8008e50:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	011b      	lsls	r3, r3, #4
 8008e56:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008e58:	7dfb      	ldrb	r3, [r7, #23]
 8008e5a:	005b      	lsls	r3, r3, #1
 8008e5c:	3301      	adds	r3, #1
 8008e5e:	68ba      	ldr	r2, [r7, #8]
 8008e60:	4413      	add	r3, r2
 8008e62:	2200      	movs	r2, #0
 8008e64:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008e66:	7dfb      	ldrb	r3, [r7, #23]
 8008e68:	3301      	adds	r3, #1
 8008e6a:	75fb      	strb	r3, [r7, #23]
 8008e6c:	7dfa      	ldrb	r2, [r7, #23]
 8008e6e:	79fb      	ldrb	r3, [r7, #7]
 8008e70:	429a      	cmp	r2, r3
 8008e72:	d3d3      	bcc.n	8008e1c <IntToUnicode+0x18>
  }
}
 8008e74:	bf00      	nop
 8008e76:	371c      	adds	r7, #28
 8008e78:	46bd      	mov	sp, r7
 8008e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e7e:	4770      	bx	lr

08008e80 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACK == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACK */
{
 8008e80:	b580      	push	{r7, lr}
 8008e82:	b084      	sub	sp, #16
 8008e84:	af00      	add	r7, sp, #0
 8008e86:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	4a0d      	ldr	r2, [pc, #52]	; (8008ec4 <HAL_PCD_MspInit+0x44>)
 8008e8e:	4293      	cmp	r3, r2
 8008e90:	d113      	bne.n	8008eba <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8008e92:	4b0d      	ldr	r3, [pc, #52]	; (8008ec8 <HAL_PCD_MspInit+0x48>)
 8008e94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e96:	4a0c      	ldr	r2, [pc, #48]	; (8008ec8 <HAL_PCD_MspInit+0x48>)
 8008e98:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008e9c:	6593      	str	r3, [r2, #88]	; 0x58
 8008e9e:	4b0a      	ldr	r3, [pc, #40]	; (8008ec8 <HAL_PCD_MspInit+0x48>)
 8008ea0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ea2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008ea6:	60fb      	str	r3, [r7, #12]
 8008ea8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 8008eaa:	2200      	movs	r2, #0
 8008eac:	2100      	movs	r1, #0
 8008eae:	2014      	movs	r0, #20
 8008eb0:	f7f8 fb17 	bl	80014e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8008eb4:	2014      	movs	r0, #20
 8008eb6:	f7f8 fb2e 	bl	8001516 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8008eba:	bf00      	nop
 8008ebc:	3710      	adds	r7, #16
 8008ebe:	46bd      	mov	sp, r7
 8008ec0:	bd80      	pop	{r7, pc}
 8008ec2:	bf00      	nop
 8008ec4:	40005c00 	.word	0x40005c00
 8008ec8:	40021000 	.word	0x40021000

08008ecc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ecc:	b580      	push	{r7, lr}
 8008ece:	b082      	sub	sp, #8
 8008ed0:	af00      	add	r7, sp, #0
 8008ed2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	f8d3 22f0 	ldr.w	r2, [r3, #752]	; 0x2f0
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8008ee0:	4619      	mov	r1, r3
 8008ee2:	4610      	mov	r0, r2
 8008ee4:	f7fe fd76 	bl	80079d4 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 8008ee8:	bf00      	nop
 8008eea:	3708      	adds	r7, #8
 8008eec:	46bd      	mov	sp, r7
 8008eee:	bd80      	pop	{r7, pc}

08008ef0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ef0:	b580      	push	{r7, lr}
 8008ef2:	b082      	sub	sp, #8
 8008ef4:	af00      	add	r7, sp, #0
 8008ef6:	6078      	str	r0, [r7, #4]
 8008ef8:	460b      	mov	r3, r1
 8008efa:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 8008f02:	78fa      	ldrb	r2, [r7, #3]
 8008f04:	6879      	ldr	r1, [r7, #4]
 8008f06:	4613      	mov	r3, r2
 8008f08:	009b      	lsls	r3, r3, #2
 8008f0a:	4413      	add	r3, r2
 8008f0c:	00db      	lsls	r3, r3, #3
 8008f0e:	440b      	add	r3, r1
 8008f10:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8008f14:	681a      	ldr	r2, [r3, #0]
 8008f16:	78fb      	ldrb	r3, [r7, #3]
 8008f18:	4619      	mov	r1, r3
 8008f1a:	f7fe fdae 	bl	8007a7a <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 8008f1e:	bf00      	nop
 8008f20:	3708      	adds	r7, #8
 8008f22:	46bd      	mov	sp, r7
 8008f24:	bd80      	pop	{r7, pc}

08008f26 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f26:	b580      	push	{r7, lr}
 8008f28:	b082      	sub	sp, #8
 8008f2a:	af00      	add	r7, sp, #0
 8008f2c:	6078      	str	r0, [r7, #4]
 8008f2e:	460b      	mov	r3, r1
 8008f30:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 8008f38:	78fa      	ldrb	r2, [r7, #3]
 8008f3a:	6879      	ldr	r1, [r7, #4]
 8008f3c:	4613      	mov	r3, r2
 8008f3e:	009b      	lsls	r3, r3, #2
 8008f40:	4413      	add	r3, r2
 8008f42:	00db      	lsls	r3, r3, #3
 8008f44:	440b      	add	r3, r1
 8008f46:	333c      	adds	r3, #60	; 0x3c
 8008f48:	681a      	ldr	r2, [r3, #0]
 8008f4a:	78fb      	ldrb	r3, [r7, #3]
 8008f4c:	4619      	mov	r1, r3
 8008f4e:	f7fe fdf7 	bl	8007b40 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 8008f52:	bf00      	nop
 8008f54:	3708      	adds	r7, #8
 8008f56:	46bd      	mov	sp, r7
 8008f58:	bd80      	pop	{r7, pc}

08008f5a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f5a:	b580      	push	{r7, lr}
 8008f5c:	b082      	sub	sp, #8
 8008f5e:	af00      	add	r7, sp, #0
 8008f60:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8008f68:	4618      	mov	r0, r3
 8008f6a:	f7fe fefb 	bl	8007d64 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 8008f6e:	bf00      	nop
 8008f70:	3708      	adds	r7, #8
 8008f72:	46bd      	mov	sp, r7
 8008f74:	bd80      	pop	{r7, pc}

08008f76 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f76:	b580      	push	{r7, lr}
 8008f78:	b084      	sub	sp, #16
 8008f7a:	af00      	add	r7, sp, #0
 8008f7c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008f7e:	2301      	movs	r3, #1
 8008f80:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	689b      	ldr	r3, [r3, #8]
 8008f86:	2b02      	cmp	r3, #2
 8008f88:	d001      	beq.n	8008f8e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008f8a:	f7f7 feab 	bl	8000ce4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8008f94:	7bfa      	ldrb	r2, [r7, #15]
 8008f96:	4611      	mov	r1, r2
 8008f98:	4618      	mov	r0, r3
 8008f9a:	f7fe fea8 	bl	8007cee <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8008fa4:	4618      	mov	r0, r3
 8008fa6:	f7fe fe61 	bl	8007c6c <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 8008faa:	bf00      	nop
 8008fac:	3710      	adds	r7, #16
 8008fae:	46bd      	mov	sp, r7
 8008fb0:	bd80      	pop	{r7, pc}
	...

08008fb4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008fb4:	b580      	push	{r7, lr}
 8008fb6:	b082      	sub	sp, #8
 8008fb8:	af00      	add	r7, sp, #0
 8008fba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8008fc2:	4618      	mov	r0, r3
 8008fc4:	f7fe fea3 	bl	8007d0e <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	699b      	ldr	r3, [r3, #24]
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d005      	beq.n	8008fdc <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008fd0:	4b04      	ldr	r3, [pc, #16]	; (8008fe4 <HAL_PCD_SuspendCallback+0x30>)
 8008fd2:	691b      	ldr	r3, [r3, #16]
 8008fd4:	4a03      	ldr	r2, [pc, #12]	; (8008fe4 <HAL_PCD_SuspendCallback+0x30>)
 8008fd6:	f043 0306 	orr.w	r3, r3, #6
 8008fda:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 8008fdc:	bf00      	nop
 8008fde:	3708      	adds	r7, #8
 8008fe0:	46bd      	mov	sp, r7
 8008fe2:	bd80      	pop	{r7, pc}
 8008fe4:	e000ed00 	.word	0xe000ed00

08008fe8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008fe8:	b580      	push	{r7, lr}
 8008fea:	b082      	sub	sp, #8
 8008fec:	af00      	add	r7, sp, #0
 8008fee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	699b      	ldr	r3, [r3, #24]
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d007      	beq.n	8009008 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008ff8:	4b08      	ldr	r3, [pc, #32]	; (800901c <HAL_PCD_ResumeCallback+0x34>)
 8008ffa:	691b      	ldr	r3, [r3, #16]
 8008ffc:	4a07      	ldr	r2, [pc, #28]	; (800901c <HAL_PCD_ResumeCallback+0x34>)
 8008ffe:	f023 0306 	bic.w	r3, r3, #6
 8009002:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8009004:	f000 f9fa 	bl	80093fc <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800900e:	4618      	mov	r0, r3
 8009010:	f7fe fe92 	bl	8007d38 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 8009014:	bf00      	nop
 8009016:	3708      	adds	r7, #8
 8009018:	46bd      	mov	sp, r7
 800901a:	bd80      	pop	{r7, pc}
 800901c:	e000ed00 	.word	0xe000ed00

08009020 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009020:	b580      	push	{r7, lr}
 8009022:	b082      	sub	sp, #8
 8009024:	af00      	add	r7, sp, #0
 8009026:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 8009028:	4a2b      	ldr	r2, [pc, #172]	; (80090d8 <USBD_LL_Init+0xb8>)
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	4a29      	ldr	r2, [pc, #164]	; (80090d8 <USBD_LL_Init+0xb8>)
 8009034:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 8009038:	4b27      	ldr	r3, [pc, #156]	; (80090d8 <USBD_LL_Init+0xb8>)
 800903a:	4a28      	ldr	r2, [pc, #160]	; (80090dc <USBD_LL_Init+0xbc>)
 800903c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800903e:	4b26      	ldr	r3, [pc, #152]	; (80090d8 <USBD_LL_Init+0xb8>)
 8009040:	2208      	movs	r2, #8
 8009042:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8009044:	4b24      	ldr	r3, [pc, #144]	; (80090d8 <USBD_LL_Init+0xb8>)
 8009046:	2202      	movs	r2, #2
 8009048:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800904a:	4b23      	ldr	r3, [pc, #140]	; (80090d8 <USBD_LL_Init+0xb8>)
 800904c:	2202      	movs	r2, #2
 800904e:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8009050:	4b21      	ldr	r3, [pc, #132]	; (80090d8 <USBD_LL_Init+0xb8>)
 8009052:	2200      	movs	r2, #0
 8009054:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8009056:	4b20      	ldr	r3, [pc, #128]	; (80090d8 <USBD_LL_Init+0xb8>)
 8009058:	2200      	movs	r2, #0
 800905a:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800905c:	4b1e      	ldr	r3, [pc, #120]	; (80090d8 <USBD_LL_Init+0xb8>)
 800905e:	2200      	movs	r2, #0
 8009060:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8009062:	4b1d      	ldr	r3, [pc, #116]	; (80090d8 <USBD_LL_Init+0xb8>)
 8009064:	2200      	movs	r2, #0
 8009066:	621a      	str	r2, [r3, #32]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8009068:	481b      	ldr	r0, [pc, #108]	; (80090d8 <USBD_LL_Init+0xb8>)
 800906a:	f7f8 fc23 	bl	80018b4 <HAL_PCD_Init>
 800906e:	4603      	mov	r3, r0
 8009070:	2b00      	cmp	r3, #0
 8009072:	d001      	beq.n	8009078 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 8009074:	f7f7 fe36 	bl	8000ce4 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800907e:	2318      	movs	r3, #24
 8009080:	2200      	movs	r2, #0
 8009082:	2100      	movs	r1, #0
 8009084:	f7f9 ff11 	bl	8002eaa <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800908e:	2358      	movs	r3, #88	; 0x58
 8009090:	2200      	movs	r2, #0
 8009092:	2180      	movs	r1, #128	; 0x80
 8009094:	f7f9 ff09 	bl	8002eaa <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800909e:	23c0      	movs	r3, #192	; 0xc0
 80090a0:	2200      	movs	r2, #0
 80090a2:	2181      	movs	r1, #129	; 0x81
 80090a4:	f7f9 ff01 	bl	8002eaa <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80090ae:	f44f 7388 	mov.w	r3, #272	; 0x110
 80090b2:	2200      	movs	r2, #0
 80090b4:	2101      	movs	r1, #1
 80090b6:	f7f9 fef8 	bl	8002eaa <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80090c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80090c4:	2200      	movs	r2, #0
 80090c6:	2182      	movs	r1, #130	; 0x82
 80090c8:	f7f9 feef 	bl	8002eaa <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 80090cc:	2300      	movs	r3, #0
}
 80090ce:	4618      	mov	r0, r3
 80090d0:	3708      	adds	r7, #8
 80090d2:	46bd      	mov	sp, r7
 80090d4:	bd80      	pop	{r7, pc}
 80090d6:	bf00      	nop
 80090d8:	20001320 	.word	0x20001320
 80090dc:	40005c00 	.word	0x40005c00

080090e0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80090e0:	b580      	push	{r7, lr}
 80090e2:	b084      	sub	sp, #16
 80090e4:	af00      	add	r7, sp, #0
 80090e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80090e8:	2300      	movs	r3, #0
 80090ea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80090ec:	2300      	movs	r3, #0
 80090ee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80090f6:	4618      	mov	r0, r3
 80090f8:	f7f8 fcc1 	bl	8001a7e <HAL_PCD_Start>
 80090fc:	4603      	mov	r3, r0
 80090fe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009100:	7bfb      	ldrb	r3, [r7, #15]
 8009102:	4618      	mov	r0, r3
 8009104:	f000 f980 	bl	8009408 <USBD_Get_USB_Status>
 8009108:	4603      	mov	r3, r0
 800910a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800910c:	7bbb      	ldrb	r3, [r7, #14]
}
 800910e:	4618      	mov	r0, r3
 8009110:	3710      	adds	r7, #16
 8009112:	46bd      	mov	sp, r7
 8009114:	bd80      	pop	{r7, pc}

08009116 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009116:	b580      	push	{r7, lr}
 8009118:	b084      	sub	sp, #16
 800911a:	af00      	add	r7, sp, #0
 800911c:	6078      	str	r0, [r7, #4]
 800911e:	4608      	mov	r0, r1
 8009120:	4611      	mov	r1, r2
 8009122:	461a      	mov	r2, r3
 8009124:	4603      	mov	r3, r0
 8009126:	70fb      	strb	r3, [r7, #3]
 8009128:	460b      	mov	r3, r1
 800912a:	70bb      	strb	r3, [r7, #2]
 800912c:	4613      	mov	r3, r2
 800912e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009130:	2300      	movs	r3, #0
 8009132:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009134:	2300      	movs	r3, #0
 8009136:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800913e:	78bb      	ldrb	r3, [r7, #2]
 8009140:	883a      	ldrh	r2, [r7, #0]
 8009142:	78f9      	ldrb	r1, [r7, #3]
 8009144:	f7f8 fe30 	bl	8001da8 <HAL_PCD_EP_Open>
 8009148:	4603      	mov	r3, r0
 800914a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800914c:	7bfb      	ldrb	r3, [r7, #15]
 800914e:	4618      	mov	r0, r3
 8009150:	f000 f95a 	bl	8009408 <USBD_Get_USB_Status>
 8009154:	4603      	mov	r3, r0
 8009156:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009158:	7bbb      	ldrb	r3, [r7, #14]
}
 800915a:	4618      	mov	r0, r3
 800915c:	3710      	adds	r7, #16
 800915e:	46bd      	mov	sp, r7
 8009160:	bd80      	pop	{r7, pc}

08009162 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009162:	b580      	push	{r7, lr}
 8009164:	b084      	sub	sp, #16
 8009166:	af00      	add	r7, sp, #0
 8009168:	6078      	str	r0, [r7, #4]
 800916a:	460b      	mov	r3, r1
 800916c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800916e:	2300      	movs	r3, #0
 8009170:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009172:	2300      	movs	r3, #0
 8009174:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800917c:	78fa      	ldrb	r2, [r7, #3]
 800917e:	4611      	mov	r1, r2
 8009180:	4618      	mov	r0, r3
 8009182:	f7f8 fe77 	bl	8001e74 <HAL_PCD_EP_Close>
 8009186:	4603      	mov	r3, r0
 8009188:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800918a:	7bfb      	ldrb	r3, [r7, #15]
 800918c:	4618      	mov	r0, r3
 800918e:	f000 f93b 	bl	8009408 <USBD_Get_USB_Status>
 8009192:	4603      	mov	r3, r0
 8009194:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009196:	7bbb      	ldrb	r3, [r7, #14]
}
 8009198:	4618      	mov	r0, r3
 800919a:	3710      	adds	r7, #16
 800919c:	46bd      	mov	sp, r7
 800919e:	bd80      	pop	{r7, pc}

080091a0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80091a0:	b580      	push	{r7, lr}
 80091a2:	b084      	sub	sp, #16
 80091a4:	af00      	add	r7, sp, #0
 80091a6:	6078      	str	r0, [r7, #4]
 80091a8:	460b      	mov	r3, r1
 80091aa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80091ac:	2300      	movs	r3, #0
 80091ae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80091b0:	2300      	movs	r3, #0
 80091b2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80091ba:	78fa      	ldrb	r2, [r7, #3]
 80091bc:	4611      	mov	r1, r2
 80091be:	4618      	mov	r0, r3
 80091c0:	f7f8 ff38 	bl	8002034 <HAL_PCD_EP_SetStall>
 80091c4:	4603      	mov	r3, r0
 80091c6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80091c8:	7bfb      	ldrb	r3, [r7, #15]
 80091ca:	4618      	mov	r0, r3
 80091cc:	f000 f91c 	bl	8009408 <USBD_Get_USB_Status>
 80091d0:	4603      	mov	r3, r0
 80091d2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80091d4:	7bbb      	ldrb	r3, [r7, #14]
}
 80091d6:	4618      	mov	r0, r3
 80091d8:	3710      	adds	r7, #16
 80091da:	46bd      	mov	sp, r7
 80091dc:	bd80      	pop	{r7, pc}

080091de <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80091de:	b580      	push	{r7, lr}
 80091e0:	b084      	sub	sp, #16
 80091e2:	af00      	add	r7, sp, #0
 80091e4:	6078      	str	r0, [r7, #4]
 80091e6:	460b      	mov	r3, r1
 80091e8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80091ea:	2300      	movs	r3, #0
 80091ec:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80091ee:	2300      	movs	r3, #0
 80091f0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80091f8:	78fa      	ldrb	r2, [r7, #3]
 80091fa:	4611      	mov	r1, r2
 80091fc:	4618      	mov	r0, r3
 80091fe:	f7f8 ff79 	bl	80020f4 <HAL_PCD_EP_ClrStall>
 8009202:	4603      	mov	r3, r0
 8009204:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009206:	7bfb      	ldrb	r3, [r7, #15]
 8009208:	4618      	mov	r0, r3
 800920a:	f000 f8fd 	bl	8009408 <USBD_Get_USB_Status>
 800920e:	4603      	mov	r3, r0
 8009210:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009212:	7bbb      	ldrb	r3, [r7, #14]
}
 8009214:	4618      	mov	r0, r3
 8009216:	3710      	adds	r7, #16
 8009218:	46bd      	mov	sp, r7
 800921a:	bd80      	pop	{r7, pc}

0800921c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800921c:	b480      	push	{r7}
 800921e:	b085      	sub	sp, #20
 8009220:	af00      	add	r7, sp, #0
 8009222:	6078      	str	r0, [r7, #4]
 8009224:	460b      	mov	r3, r1
 8009226:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800922e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009230:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009234:	2b00      	cmp	r3, #0
 8009236:	da0c      	bge.n	8009252 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009238:	78fb      	ldrb	r3, [r7, #3]
 800923a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800923e:	68f9      	ldr	r1, [r7, #12]
 8009240:	1c5a      	adds	r2, r3, #1
 8009242:	4613      	mov	r3, r2
 8009244:	009b      	lsls	r3, r3, #2
 8009246:	4413      	add	r3, r2
 8009248:	00db      	lsls	r3, r3, #3
 800924a:	440b      	add	r3, r1
 800924c:	3302      	adds	r3, #2
 800924e:	781b      	ldrb	r3, [r3, #0]
 8009250:	e00b      	b.n	800926a <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009252:	78fb      	ldrb	r3, [r7, #3]
 8009254:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009258:	68f9      	ldr	r1, [r7, #12]
 800925a:	4613      	mov	r3, r2
 800925c:	009b      	lsls	r3, r3, #2
 800925e:	4413      	add	r3, r2
 8009260:	00db      	lsls	r3, r3, #3
 8009262:	440b      	add	r3, r1
 8009264:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8009268:	781b      	ldrb	r3, [r3, #0]
  }
}
 800926a:	4618      	mov	r0, r3
 800926c:	3714      	adds	r7, #20
 800926e:	46bd      	mov	sp, r7
 8009270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009274:	4770      	bx	lr

08009276 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009276:	b580      	push	{r7, lr}
 8009278:	b084      	sub	sp, #16
 800927a:	af00      	add	r7, sp, #0
 800927c:	6078      	str	r0, [r7, #4]
 800927e:	460b      	mov	r3, r1
 8009280:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009282:	2300      	movs	r3, #0
 8009284:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009286:	2300      	movs	r3, #0
 8009288:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009290:	78fa      	ldrb	r2, [r7, #3]
 8009292:	4611      	mov	r1, r2
 8009294:	4618      	mov	r0, r3
 8009296:	f7f8 fd62 	bl	8001d5e <HAL_PCD_SetAddress>
 800929a:	4603      	mov	r3, r0
 800929c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800929e:	7bfb      	ldrb	r3, [r7, #15]
 80092a0:	4618      	mov	r0, r3
 80092a2:	f000 f8b1 	bl	8009408 <USBD_Get_USB_Status>
 80092a6:	4603      	mov	r3, r0
 80092a8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80092aa:	7bbb      	ldrb	r3, [r7, #14]
}
 80092ac:	4618      	mov	r0, r3
 80092ae:	3710      	adds	r7, #16
 80092b0:	46bd      	mov	sp, r7
 80092b2:	bd80      	pop	{r7, pc}

080092b4 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80092b4:	b580      	push	{r7, lr}
 80092b6:	b086      	sub	sp, #24
 80092b8:	af00      	add	r7, sp, #0
 80092ba:	60f8      	str	r0, [r7, #12]
 80092bc:	607a      	str	r2, [r7, #4]
 80092be:	603b      	str	r3, [r7, #0]
 80092c0:	460b      	mov	r3, r1
 80092c2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80092c4:	2300      	movs	r3, #0
 80092c6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80092c8:	2300      	movs	r3, #0
 80092ca:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80092d2:	7af9      	ldrb	r1, [r7, #11]
 80092d4:	683b      	ldr	r3, [r7, #0]
 80092d6:	687a      	ldr	r2, [r7, #4]
 80092d8:	f7f8 fe69 	bl	8001fae <HAL_PCD_EP_Transmit>
 80092dc:	4603      	mov	r3, r0
 80092de:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80092e0:	7dfb      	ldrb	r3, [r7, #23]
 80092e2:	4618      	mov	r0, r3
 80092e4:	f000 f890 	bl	8009408 <USBD_Get_USB_Status>
 80092e8:	4603      	mov	r3, r0
 80092ea:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80092ec:	7dbb      	ldrb	r3, [r7, #22]
}
 80092ee:	4618      	mov	r0, r3
 80092f0:	3718      	adds	r7, #24
 80092f2:	46bd      	mov	sp, r7
 80092f4:	bd80      	pop	{r7, pc}

080092f6 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80092f6:	b580      	push	{r7, lr}
 80092f8:	b086      	sub	sp, #24
 80092fa:	af00      	add	r7, sp, #0
 80092fc:	60f8      	str	r0, [r7, #12]
 80092fe:	607a      	str	r2, [r7, #4]
 8009300:	603b      	str	r3, [r7, #0]
 8009302:	460b      	mov	r3, r1
 8009304:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009306:	2300      	movs	r3, #0
 8009308:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800930a:	2300      	movs	r3, #0
 800930c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009314:	7af9      	ldrb	r1, [r7, #11]
 8009316:	683b      	ldr	r3, [r7, #0]
 8009318:	687a      	ldr	r2, [r7, #4]
 800931a:	f7f8 fdf3 	bl	8001f04 <HAL_PCD_EP_Receive>
 800931e:	4603      	mov	r3, r0
 8009320:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009322:	7dfb      	ldrb	r3, [r7, #23]
 8009324:	4618      	mov	r0, r3
 8009326:	f000 f86f 	bl	8009408 <USBD_Get_USB_Status>
 800932a:	4603      	mov	r3, r0
 800932c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800932e:	7dbb      	ldrb	r3, [r7, #22]
}
 8009330:	4618      	mov	r0, r3
 8009332:	3718      	adds	r7, #24
 8009334:	46bd      	mov	sp, r7
 8009336:	bd80      	pop	{r7, pc}

08009338 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009338:	b580      	push	{r7, lr}
 800933a:	b082      	sub	sp, #8
 800933c:	af00      	add	r7, sp, #0
 800933e:	6078      	str	r0, [r7, #4]
 8009340:	460b      	mov	r3, r1
 8009342:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800934a:	78fa      	ldrb	r2, [r7, #3]
 800934c:	4611      	mov	r1, r2
 800934e:	4618      	mov	r0, r3
 8009350:	f7f8 fe15 	bl	8001f7e <HAL_PCD_EP_GetRxCount>
 8009354:	4603      	mov	r3, r0
}
 8009356:	4618      	mov	r0, r3
 8009358:	3708      	adds	r7, #8
 800935a:	46bd      	mov	sp, r7
 800935c:	bd80      	pop	{r7, pc}
	...

08009360 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009360:	b580      	push	{r7, lr}
 8009362:	b082      	sub	sp, #8
 8009364:	af00      	add	r7, sp, #0
 8009366:	6078      	str	r0, [r7, #4]
 8009368:	460b      	mov	r3, r1
 800936a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800936c:	78fb      	ldrb	r3, [r7, #3]
 800936e:	2b00      	cmp	r3, #0
 8009370:	d002      	beq.n	8009378 <HAL_PCDEx_LPM_Callback+0x18>
 8009372:	2b01      	cmp	r3, #1
 8009374:	d013      	beq.n	800939e <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 8009376:	e023      	b.n	80093c0 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	699b      	ldr	r3, [r3, #24]
 800937c:	2b00      	cmp	r3, #0
 800937e:	d007      	beq.n	8009390 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8009380:	f000 f83c 	bl	80093fc <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009384:	4b10      	ldr	r3, [pc, #64]	; (80093c8 <HAL_PCDEx_LPM_Callback+0x68>)
 8009386:	691b      	ldr	r3, [r3, #16]
 8009388:	4a0f      	ldr	r2, [pc, #60]	; (80093c8 <HAL_PCDEx_LPM_Callback+0x68>)
 800938a:	f023 0306 	bic.w	r3, r3, #6
 800938e:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009396:	4618      	mov	r0, r3
 8009398:	f7fe fcce 	bl	8007d38 <USBD_LL_Resume>
    break;
 800939c:	e010      	b.n	80093c0 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 80093a4:	4618      	mov	r0, r3
 80093a6:	f7fe fcb2 	bl	8007d0e <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	699b      	ldr	r3, [r3, #24]
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d005      	beq.n	80093be <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80093b2:	4b05      	ldr	r3, [pc, #20]	; (80093c8 <HAL_PCDEx_LPM_Callback+0x68>)
 80093b4:	691b      	ldr	r3, [r3, #16]
 80093b6:	4a04      	ldr	r2, [pc, #16]	; (80093c8 <HAL_PCDEx_LPM_Callback+0x68>)
 80093b8:	f043 0306 	orr.w	r3, r3, #6
 80093bc:	6113      	str	r3, [r2, #16]
    break;
 80093be:	bf00      	nop
}
 80093c0:	bf00      	nop
 80093c2:	3708      	adds	r7, #8
 80093c4:	46bd      	mov	sp, r7
 80093c6:	bd80      	pop	{r7, pc}
 80093c8:	e000ed00 	.word	0xe000ed00

080093cc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80093cc:	b480      	push	{r7}
 80093ce:	b083      	sub	sp, #12
 80093d0:	af00      	add	r7, sp, #0
 80093d2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80093d4:	4b03      	ldr	r3, [pc, #12]	; (80093e4 <USBD_static_malloc+0x18>)
}
 80093d6:	4618      	mov	r0, r3
 80093d8:	370c      	adds	r7, #12
 80093da:	46bd      	mov	sp, r7
 80093dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093e0:	4770      	bx	lr
 80093e2:	bf00      	nop
 80093e4:	200001b0 	.word	0x200001b0

080093e8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80093e8:	b480      	push	{r7}
 80093ea:	b083      	sub	sp, #12
 80093ec:	af00      	add	r7, sp, #0
 80093ee:	6078      	str	r0, [r7, #4]

}
 80093f0:	bf00      	nop
 80093f2:	370c      	adds	r7, #12
 80093f4:	46bd      	mov	sp, r7
 80093f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093fa:	4770      	bx	lr

080093fc <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 80093fc:	b580      	push	{r7, lr}
 80093fe:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8009400:	f7f6 ffe8 	bl	80003d4 <SystemClock_Config>
}
 8009404:	bf00      	nop
 8009406:	bd80      	pop	{r7, pc}

08009408 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009408:	b480      	push	{r7}
 800940a:	b085      	sub	sp, #20
 800940c:	af00      	add	r7, sp, #0
 800940e:	4603      	mov	r3, r0
 8009410:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009412:	2300      	movs	r3, #0
 8009414:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009416:	79fb      	ldrb	r3, [r7, #7]
 8009418:	2b03      	cmp	r3, #3
 800941a:	d817      	bhi.n	800944c <USBD_Get_USB_Status+0x44>
 800941c:	a201      	add	r2, pc, #4	; (adr r2, 8009424 <USBD_Get_USB_Status+0x1c>)
 800941e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009422:	bf00      	nop
 8009424:	08009435 	.word	0x08009435
 8009428:	0800943b 	.word	0x0800943b
 800942c:	08009441 	.word	0x08009441
 8009430:	08009447 	.word	0x08009447
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009434:	2300      	movs	r3, #0
 8009436:	73fb      	strb	r3, [r7, #15]
    break;
 8009438:	e00b      	b.n	8009452 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800943a:	2303      	movs	r3, #3
 800943c:	73fb      	strb	r3, [r7, #15]
    break;
 800943e:	e008      	b.n	8009452 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009440:	2301      	movs	r3, #1
 8009442:	73fb      	strb	r3, [r7, #15]
    break;
 8009444:	e005      	b.n	8009452 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009446:	2303      	movs	r3, #3
 8009448:	73fb      	strb	r3, [r7, #15]
    break;
 800944a:	e002      	b.n	8009452 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800944c:	2303      	movs	r3, #3
 800944e:	73fb      	strb	r3, [r7, #15]
    break;
 8009450:	bf00      	nop
  }
  return usb_status;
 8009452:	7bfb      	ldrb	r3, [r7, #15]
}
 8009454:	4618      	mov	r0, r3
 8009456:	3714      	adds	r7, #20
 8009458:	46bd      	mov	sp, r7
 800945a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800945e:	4770      	bx	lr

08009460 <__libc_init_array>:
 8009460:	b570      	push	{r4, r5, r6, lr}
 8009462:	4e0d      	ldr	r6, [pc, #52]	; (8009498 <__libc_init_array+0x38>)
 8009464:	4c0d      	ldr	r4, [pc, #52]	; (800949c <__libc_init_array+0x3c>)
 8009466:	1ba4      	subs	r4, r4, r6
 8009468:	10a4      	asrs	r4, r4, #2
 800946a:	2500      	movs	r5, #0
 800946c:	42a5      	cmp	r5, r4
 800946e:	d109      	bne.n	8009484 <__libc_init_array+0x24>
 8009470:	4e0b      	ldr	r6, [pc, #44]	; (80094a0 <__libc_init_array+0x40>)
 8009472:	4c0c      	ldr	r4, [pc, #48]	; (80094a4 <__libc_init_array+0x44>)
 8009474:	f000 f82c 	bl	80094d0 <_init>
 8009478:	1ba4      	subs	r4, r4, r6
 800947a:	10a4      	asrs	r4, r4, #2
 800947c:	2500      	movs	r5, #0
 800947e:	42a5      	cmp	r5, r4
 8009480:	d105      	bne.n	800948e <__libc_init_array+0x2e>
 8009482:	bd70      	pop	{r4, r5, r6, pc}
 8009484:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009488:	4798      	blx	r3
 800948a:	3501      	adds	r5, #1
 800948c:	e7ee      	b.n	800946c <__libc_init_array+0xc>
 800948e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009492:	4798      	blx	r3
 8009494:	3501      	adds	r5, #1
 8009496:	e7f2      	b.n	800947e <__libc_init_array+0x1e>
 8009498:	08009540 	.word	0x08009540
 800949c:	08009540 	.word	0x08009540
 80094a0:	08009540 	.word	0x08009540
 80094a4:	08009544 	.word	0x08009544

080094a8 <memcpy>:
 80094a8:	b510      	push	{r4, lr}
 80094aa:	1e43      	subs	r3, r0, #1
 80094ac:	440a      	add	r2, r1
 80094ae:	4291      	cmp	r1, r2
 80094b0:	d100      	bne.n	80094b4 <memcpy+0xc>
 80094b2:	bd10      	pop	{r4, pc}
 80094b4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80094b8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80094bc:	e7f7      	b.n	80094ae <memcpy+0x6>

080094be <memset>:
 80094be:	4402      	add	r2, r0
 80094c0:	4603      	mov	r3, r0
 80094c2:	4293      	cmp	r3, r2
 80094c4:	d100      	bne.n	80094c8 <memset+0xa>
 80094c6:	4770      	bx	lr
 80094c8:	f803 1b01 	strb.w	r1, [r3], #1
 80094cc:	e7f9      	b.n	80094c2 <memset+0x4>
	...

080094d0 <_init>:
 80094d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094d2:	bf00      	nop
 80094d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80094d6:	bc08      	pop	{r3}
 80094d8:	469e      	mov	lr, r3
 80094da:	4770      	bx	lr

080094dc <_fini>:
 80094dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094de:	bf00      	nop
 80094e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80094e2:	bc08      	pop	{r3}
 80094e4:	469e      	mov	lr, r3
 80094e6:	4770      	bx	lr
