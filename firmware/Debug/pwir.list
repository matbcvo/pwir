
pwir.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000099b8  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08009b90  08009b90  00019b90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009be8  08009be8  000201d8  2**0
                  CONTENTS
  4 .ARM          00000000  08009be8  08009be8  000201d8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009be8  08009be8  000201d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009be8  08009be8  00019be8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009bec  08009bec  00019bec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  08009bf0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001490  200001d8  08009dc8  000201d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001668  08009dc8  00021668  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001adcb  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003476  00000000  00000000  0003afd3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001398  00000000  00000000  0003e450  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001220  00000000  00000000  0003f7e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000205b2  00000000  00000000  00040a08  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00011bdc  00000000  00000000  00060fba  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c4301  00000000  00000000  00072b96  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00136e97  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000051a4  00000000  00000000  00136f14  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	200001d8 	.word	0x200001d8
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08009b78 	.word	0x08009b78

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	200001dc 	.word	0x200001dc
 8000214:	08009b78 	.word	0x08009b78

08000218 <CDC_On_Receive>:
  .delimiter = 0
}; // (4) Instance of received data.

volatile uint8_t isCommandReceived = 0; // (5) Boolean (0/1) variable to signify that data has been received. Variable is marked volatile to prevent the compiler from removing it during optimisation.

void CDC_On_Receive(uint8_t* buffer, uint32_t* length) { // (6) Define the function that is called when data is received. It is usually preferable to keep interrupt handlers small and fast to avoid blocking other code from executing. Only data copying and setting isCommandReceived to 1 is done in the handler. Rest is handled in the main while loop.
 8000218:	b580      	push	{r7, lr}
 800021a:	b082      	sub	sp, #8
 800021c:	af00      	add	r7, sp, #0
 800021e:	6078      	str	r0, [r7, #4]
 8000220:	6039      	str	r1, [r7, #0]
  //HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
  if (*length == sizeof(Command)) { // (7) Check if received data the has same length as Command struct.
 8000222:	683b      	ldr	r3, [r7, #0]
 8000224:	681b      	ldr	r3, [r3, #0]
 8000226:	2b0c      	cmp	r3, #12
 8000228:	d10d      	bne.n	8000246 <CDC_On_Receive+0x2e>
    memcpy(&command, buffer, sizeof(Command)); // (8) Copy received data to command instance.
 800022a:	220c      	movs	r2, #12
 800022c:	6879      	ldr	r1, [r7, #4]
 800022e:	4808      	ldr	r0, [pc, #32]	; (8000250 <CDC_On_Receive+0x38>)
 8000230:	f009 fc8e 	bl	8009b50 <memcpy>

    if (command.delimiter == 0xAAAA) { // (9) Check the delimiter as a validation of received data.
 8000234:	4b06      	ldr	r3, [pc, #24]	; (8000250 <CDC_On_Receive+0x38>)
 8000236:	895b      	ldrh	r3, [r3, #10]
 8000238:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800023c:	4293      	cmp	r3, r2
 800023e:	d102      	bne.n	8000246 <CDC_On_Receive+0x2e>
      isCommandReceived = 1;
 8000240:	4b04      	ldr	r3, [pc, #16]	; (8000254 <CDC_On_Receive+0x3c>)
 8000242:	2201      	movs	r2, #1
 8000244:	701a      	strb	r2, [r3, #0]
    }
  }
}
 8000246:	bf00      	nop
 8000248:	3708      	adds	r7, #8
 800024a:	46bd      	mov	sp, r7
 800024c:	bd80      	pop	{r7, pc}
 800024e:	bf00      	nop
 8000250:	200001f4 	.word	0x200001f4
 8000254:	20000200 	.word	0x20000200

08000258 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000258:	b580      	push	{r7, lr}
 800025a:	b08a      	sub	sp, #40	; 0x28
 800025c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  // (1) Define an instance of Feedback for sending data.
  Feedback feedback = {
 800025e:	463b      	mov	r3, r7
 8000260:	2228      	movs	r2, #40	; 0x28
 8000262:	2100      	movs	r1, #0
 8000264:	4618      	mov	r0, r3
 8000266:	f009 fc7e 	bl	8009b66 <memset>
 800026a:	f64a 23aa 	movw	r3, #43690	; 0xaaaa
 800026e:	84bb      	strh	r3, [r7, #36]	; 0x24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000270:	f001 f953 	bl	800151a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000274:	f000 f8c2 	bl	80003fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000278:	f000 fd08 	bl	8000c8c <MX_GPIO_Init>
  MX_TIM1_Init();
 800027c:	f000 f926 	bl	80004cc <MX_TIM1_Init>
  MX_TIM2_Init();
 8000280:	f000 f994 	bl	80005ac <MX_TIM2_Init>
  MX_TIM3_Init();
 8000284:	f000 fa12 	bl	80006ac <MX_TIM3_Init>
  MX_TIM4_Init();
 8000288:	f000 fa66 	bl	8000758 <MX_TIM4_Init>
  MX_TIM8_Init();
 800028c:	f000 faf0 	bl	8000870 <MX_TIM8_Init>
  MX_TIM16_Init();
 8000290:	f000 fc08 	bl	8000aa4 <MX_TIM16_Init>
  MX_TIM17_Init();
 8000294:	f000 fc80 	bl	8000b98 <MX_TIM17_Init>
  MX_USB_Device_Init();
 8000298:	f008 ff3e 	bl	8009118 <MX_USB_Device_Init>
  MX_TIM15_Init();
 800029c:	f000 fb7c 	bl	8000998 <MX_TIM15_Init>
  MX_TIM6_Init();
 80002a0:	f000 fab0 	bl	8000804 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_1 | TIM_CHANNEL_2); // Encoder 1
 80002a4:	2104      	movs	r1, #4
 80002a6:	4841      	ldr	r0, [pc, #260]	; (80003ac <main+0x154>)
 80002a8:	f004 fa34 	bl	8004714 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_1 | TIM_CHANNEL_2); // Encoder 2
 80002ac:	2104      	movs	r1, #4
 80002ae:	4840      	ldr	r0, [pc, #256]	; (80003b0 <main+0x158>)
 80002b0:	f004 fa30 	bl	8004714 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_1 | TIM_CHANNEL_2); // Encoder 3
 80002b4:	2104      	movs	r1, #4
 80002b6:	483f      	ldr	r0, [pc, #252]	; (80003b4 <main+0x15c>)
 80002b8:	f004 fa2c 	bl	8004714 <HAL_TIM_Encoder_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1); // Motor PWM for draiver 1
 80002bc:	2100      	movs	r1, #0
 80002be:	483e      	ldr	r0, [pc, #248]	; (80003b8 <main+0x160>)
 80002c0:	f004 f882 	bl	80043c8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2); // Motor PWM for draiver 1
 80002c4:	2104      	movs	r1, #4
 80002c6:	483c      	ldr	r0, [pc, #240]	; (80003b8 <main+0x160>)
 80002c8:	f004 f87e 	bl	80043c8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3); // Motor PWM for draiver 2
 80002cc:	2108      	movs	r1, #8
 80002ce:	483a      	ldr	r0, [pc, #232]	; (80003b8 <main+0x160>)
 80002d0:	f004 f87a 	bl	80043c8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4); // Motor PWM for draiver 2
 80002d4:	210c      	movs	r1, #12
 80002d6:	4838      	ldr	r0, [pc, #224]	; (80003b8 <main+0x160>)
 80002d8:	f004 f876 	bl	80043c8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1); // Motor PWM for draiver 3
 80002dc:	2100      	movs	r1, #0
 80002de:	4837      	ldr	r0, [pc, #220]	; (80003bc <main+0x164>)
 80002e0:	f004 f872 	bl	80043c8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim17, TIM_CHANNEL_1); // Motor PWM for draiver 3
 80002e4:	2100      	movs	r1, #0
 80002e6:	4836      	ldr	r0, [pc, #216]	; (80003c0 <main+0x168>)
 80002e8:	f004 f86e 	bl	80043c8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1); // Thrower PWM
 80002ec:	2100      	movs	r1, #0
 80002ee:	4835      	ldr	r0, [pc, #212]	; (80003c4 <main+0x16c>)
 80002f0:	f004 f86a 	bl	80043c8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_2); // Thrower Angle PWM
 80002f4:	2104      	movs	r1, #4
 80002f6:	4834      	ldr	r0, [pc, #208]	; (80003c8 <main+0x170>)
 80002f8:	f004 f866 	bl	80043c8 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim6);
 80002fc:	4833      	ldr	r0, [pc, #204]	; (80003cc <main+0x174>)
 80002fe:	f003 ffa1 	bl	8004244 <HAL_TIM_Base_Start_IT>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //HAL_Delay(1000);
	if (isCommandReceived) { // (2) Only return data when something has been received.
 8000302:	4b33      	ldr	r3, [pc, #204]	; (80003d0 <main+0x178>)
 8000304:	781b      	ldrb	r3, [r3, #0]
 8000306:	b2db      	uxtb	r3, r3
 8000308:	2b00      	cmp	r3, #0
 800030a:	d0fa      	beq.n	8000302 <main+0xaa>
		isCommandReceived = 0;
 800030c:	4b30      	ldr	r3, [pc, #192]	; (80003d0 <main+0x178>)
 800030e:	2200      	movs	r2, #0
 8000310:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin); // (3) Toggle LED to indicate that data has been received.
 8000312:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000316:	482f      	ldr	r0, [pc, #188]	; (80003d4 <main+0x17c>)
 8000318:	f001 fc1a 	bl	8001b50 <HAL_GPIO_TogglePin>

		motor1.setpoint = command.speed1;
 800031c:	4b2e      	ldr	r3, [pc, #184]	; (80003d8 <main+0x180>)
 800031e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000322:	4b2e      	ldr	r3, [pc, #184]	; (80003dc <main+0x184>)
 8000324:	801a      	strh	r2, [r3, #0]
		motor2.setpoint = command.speed2;
 8000326:	4b2c      	ldr	r3, [pc, #176]	; (80003d8 <main+0x180>)
 8000328:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800032c:	4b2c      	ldr	r3, [pc, #176]	; (80003e0 <main+0x188>)
 800032e:	801a      	strh	r2, [r3, #0]
		motor3.setpoint = command.speed3;
 8000330:	4b29      	ldr	r3, [pc, #164]	; (80003d8 <main+0x180>)
 8000332:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8000336:	4b2b      	ldr	r3, [pc, #172]	; (80003e4 <main+0x18c>)
 8000338:	801a      	strh	r2, [r3, #0]

		// (4) Update feedback with current motor speeds.
		feedback.speed1 = motor1.speed;
 800033a:	4b28      	ldr	r3, [pc, #160]	; (80003dc <main+0x184>)
 800033c:	685b      	ldr	r3, [r3, #4]
 800033e:	603b      	str	r3, [r7, #0]
		feedback.speed2 = motor2.speed;
 8000340:	4b27      	ldr	r3, [pc, #156]	; (80003e0 <main+0x188>)
 8000342:	685b      	ldr	r3, [r3, #4]
 8000344:	607b      	str	r3, [r7, #4]
		feedback.speed3 = motor3.speed;
 8000346:	4b27      	ldr	r3, [pc, #156]	; (80003e4 <main+0x18c>)
 8000348:	685b      	ldr	r3, [r3, #4]
 800034a:	60bb      	str	r3, [r7, #8]
		feedback.positionChange1 = motor1.positionChange;
 800034c:	4b23      	ldr	r3, [pc, #140]	; (80003dc <main+0x184>)
 800034e:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8000352:	81bb      	strh	r3, [r7, #12]
		feedback.positionChange2 = motor2.positionChange;
 8000354:	4b22      	ldr	r3, [pc, #136]	; (80003e0 <main+0x188>)
 8000356:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800035a:	81fb      	strh	r3, [r7, #14]
		feedback.positionChange3 = motor3.positionChange;
 800035c:	4b21      	ldr	r3, [pc, #132]	; (80003e4 <main+0x18c>)
 800035e:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8000362:	823b      	strh	r3, [r7, #16]
		feedback.encoder1 = (int16_t)TIM1->CNT;
 8000364:	4b20      	ldr	r3, [pc, #128]	; (80003e8 <main+0x190>)
 8000366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000368:	b21b      	sxth	r3, r3
 800036a:	827b      	strh	r3, [r7, #18]
		feedback.encoder2 = (int16_t)TIM3->CNT;
 800036c:	4b1f      	ldr	r3, [pc, #124]	; (80003ec <main+0x194>)
 800036e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000370:	b21b      	sxth	r3, r3
 8000372:	82bb      	strh	r3, [r7, #20]
		feedback.encoder3 = (int16_t)TIM4->CNT;
 8000374:	4b1e      	ldr	r3, [pc, #120]	; (80003f0 <main+0x198>)
 8000376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000378:	b21b      	sxth	r3, r3
 800037a:	82fb      	strh	r3, [r7, #22]
		feedback.sumOfErrors1 = motor1.sumOfErrors;
 800037c:	4b17      	ldr	r3, [pc, #92]	; (80003dc <main+0x184>)
 800037e:	699b      	ldr	r3, [r3, #24]
 8000380:	61bb      	str	r3, [r7, #24]
		feedback.sumOfErrors2 = motor2.sumOfErrors;
 8000382:	4b17      	ldr	r3, [pc, #92]	; (80003e0 <main+0x188>)
 8000384:	699b      	ldr	r3, [r3, #24]
 8000386:	61fb      	str	r3, [r7, #28]
		feedback.sumOfErrors3 = motor3.sumOfErrors;
 8000388:	4b16      	ldr	r3, [pc, #88]	; (80003e4 <main+0x18c>)
 800038a:	699b      	ldr	r3, [r3, #24]
 800038c:	623b      	str	r3, [r7, #32]

		// Start thrower ESC at lower than 3200
		// Then set speed to 3200 ... 6400
		TIM8->CCR1 = command.throwerSpeed; // thrower
 800038e:	4b12      	ldr	r3, [pc, #72]	; (80003d8 <main+0x180>)
 8000390:	88da      	ldrh	r2, [r3, #6]
 8000392:	4b18      	ldr	r3, [pc, #96]	; (80003f4 <main+0x19c>)
 8000394:	635a      	str	r2, [r3, #52]	; 0x34

		TIM15->CCR2 = command.throwerAngle; // thrower angle
 8000396:	4b10      	ldr	r3, [pc, #64]	; (80003d8 <main+0x180>)
 8000398:	891a      	ldrh	r2, [r3, #8]
 800039a:	4b17      	ldr	r3, [pc, #92]	; (80003f8 <main+0x1a0>)
 800039c:	639a      	str	r2, [r3, #56]	; 0x38

		CDC_Transmit_FS(&feedback, sizeof(feedback)); // (5) Send data over USB.
 800039e:	463b      	mov	r3, r7
 80003a0:	2128      	movs	r1, #40	; 0x28
 80003a2:	4618      	mov	r0, r3
 80003a4:	f008 ff7a 	bl	800929c <CDC_Transmit_FS>
	if (isCommandReceived) { // (2) Only return data when something has been received.
 80003a8:	e7ab      	b.n	8000302 <main+0xaa>
 80003aa:	bf00      	nop
 80003ac:	200005ec 	.word	0x200005ec
 80003b0:	20000554 	.word	0x20000554
 80003b4:	20000470 	.word	0x20000470
 80003b8:	20000638 	.word	0x20000638
 80003bc:	20000684 	.word	0x20000684
 80003c0:	20000508 	.word	0x20000508
 80003c4:	20000424 	.word	0x20000424
 80003c8:	200004bc 	.word	0x200004bc
 80003cc:	200005a0 	.word	0x200005a0
 80003d0:	20000200 	.word	0x20000200
 80003d4:	48000400 	.word	0x48000400
 80003d8:	200001f4 	.word	0x200001f4
 80003dc:	20000000 	.word	0x20000000
 80003e0:	2000001c 	.word	0x2000001c
 80003e4:	20000038 	.word	0x20000038
 80003e8:	40012c00 	.word	0x40012c00
 80003ec:	40000400 	.word	0x40000400
 80003f0:	40000800 	.word	0x40000800
 80003f4:	40013400 	.word	0x40013400
 80003f8:	40014000 	.word	0x40014000

080003fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003fc:	b580      	push	{r7, lr}
 80003fe:	b0a4      	sub	sp, #144	; 0x90
 8000400:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000402:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000406:	2238      	movs	r2, #56	; 0x38
 8000408:	2100      	movs	r1, #0
 800040a:	4618      	mov	r0, r3
 800040c:	f009 fbab 	bl	8009b66 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000410:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000414:	2200      	movs	r2, #0
 8000416:	601a      	str	r2, [r3, #0]
 8000418:	605a      	str	r2, [r3, #4]
 800041a:	609a      	str	r2, [r3, #8]
 800041c:	60da      	str	r2, [r3, #12]
 800041e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000420:	463b      	mov	r3, r7
 8000422:	2244      	movs	r2, #68	; 0x44
 8000424:	2100      	movs	r1, #0
 8000426:	4618      	mov	r0, r3
 8000428:	f009 fb9d 	bl	8009b66 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800042c:	2000      	movs	r0, #0
 800042e:	f002 ff11 	bl	8003254 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 8000432:	2322      	movs	r3, #34	; 0x22
 8000434:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000436:	f44f 7380 	mov.w	r3, #256	; 0x100
 800043a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800043c:	2340      	movs	r3, #64	; 0x40
 800043e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000440:	2301      	movs	r3, #1
 8000442:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000444:	2302      	movs	r3, #2
 8000446:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000448:	2302      	movs	r3, #2
 800044a:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800044c:	2301      	movs	r3, #1
 800044e:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 20;
 8000450:	2314      	movs	r3, #20
 8000452:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000456:	2302      	movs	r3, #2
 8000458:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 800045c:	2304      	movs	r3, #4
 800045e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000462:	2302      	movs	r3, #2
 8000464:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000468:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800046c:	4618      	mov	r0, r3
 800046e:	f002 ffa5 	bl	80033bc <HAL_RCC_OscConfig>
 8000472:	4603      	mov	r3, r0
 8000474:	2b00      	cmp	r3, #0
 8000476:	d001      	beq.n	800047c <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000478:	f000 fd8c 	bl	8000f94 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800047c:	230f      	movs	r3, #15
 800047e:	647b      	str	r3, [r7, #68]	; 0x44
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000480:	2303      	movs	r3, #3
 8000482:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000484:	2300      	movs	r3, #0
 8000486:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000488:	2300      	movs	r3, #0
 800048a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800048c:	2300      	movs	r3, #0
 800048e:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000490:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000494:	2104      	movs	r1, #4
 8000496:	4618      	mov	r0, r3
 8000498:	f003 faa8 	bl	80039ec <HAL_RCC_ClockConfig>
 800049c:	4603      	mov	r3, r0
 800049e:	2b00      	cmp	r3, #0
 80004a0:	d001      	beq.n	80004a6 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80004a2:	f000 fd77 	bl	8000f94 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80004a6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80004aa:	603b      	str	r3, [r7, #0]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80004ac:	2300      	movs	r3, #0
 80004ae:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80004b0:	463b      	mov	r3, r7
 80004b2:	4618      	mov	r0, r3
 80004b4:	f003 fc7e 	bl	8003db4 <HAL_RCCEx_PeriphCLKConfig>
 80004b8:	4603      	mov	r3, r0
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d001      	beq.n	80004c2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80004be:	f000 fd69 	bl	8000f94 <Error_Handler>
  }
}
 80004c2:	bf00      	nop
 80004c4:	3790      	adds	r7, #144	; 0x90
 80004c6:	46bd      	mov	sp, r7
 80004c8:	bd80      	pop	{r7, pc}
	...

080004cc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b09a      	sub	sp, #104	; 0x68
 80004d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80004d2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80004d6:	2224      	movs	r2, #36	; 0x24
 80004d8:	2100      	movs	r1, #0
 80004da:	4618      	mov	r0, r3
 80004dc:	f009 fb43 	bl	8009b66 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004e0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80004e4:	2200      	movs	r2, #0
 80004e6:	601a      	str	r2, [r3, #0]
 80004e8:	605a      	str	r2, [r3, #4]
 80004ea:	609a      	str	r2, [r3, #8]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80004ec:	1d3b      	adds	r3, r7, #4
 80004ee:	2234      	movs	r2, #52	; 0x34
 80004f0:	2100      	movs	r1, #0
 80004f2:	4618      	mov	r0, r3
 80004f4:	f009 fb37 	bl	8009b66 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80004f8:	4b2a      	ldr	r3, [pc, #168]	; (80005a4 <MX_TIM1_Init+0xd8>)
 80004fa:	4a2b      	ldr	r2, [pc, #172]	; (80005a8 <MX_TIM1_Init+0xdc>)
 80004fc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80004fe:	4b29      	ldr	r3, [pc, #164]	; (80005a4 <MX_TIM1_Init+0xd8>)
 8000500:	2200      	movs	r2, #0
 8000502:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000504:	4b27      	ldr	r3, [pc, #156]	; (80005a4 <MX_TIM1_Init+0xd8>)
 8000506:	2200      	movs	r2, #0
 8000508:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800050a:	4b26      	ldr	r3, [pc, #152]	; (80005a4 <MX_TIM1_Init+0xd8>)
 800050c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000510:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000512:	4b24      	ldr	r3, [pc, #144]	; (80005a4 <MX_TIM1_Init+0xd8>)
 8000514:	2200      	movs	r2, #0
 8000516:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000518:	4b22      	ldr	r3, [pc, #136]	; (80005a4 <MX_TIM1_Init+0xd8>)
 800051a:	2200      	movs	r2, #0
 800051c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800051e:	4b21      	ldr	r3, [pc, #132]	; (80005a4 <MX_TIM1_Init+0xd8>)
 8000520:	2200      	movs	r2, #0
 8000522:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000524:	2301      	movs	r3, #1
 8000526:	647b      	str	r3, [r7, #68]	; 0x44
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000528:	2300      	movs	r3, #0
 800052a:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800052c:	2301      	movs	r3, #1
 800052e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000530:	2300      	movs	r3, #0
 8000532:	653b      	str	r3, [r7, #80]	; 0x50
  sConfig.IC1Filter = 0;
 8000534:	2300      	movs	r3, #0
 8000536:	657b      	str	r3, [r7, #84]	; 0x54
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000538:	2300      	movs	r3, #0
 800053a:	65bb      	str	r3, [r7, #88]	; 0x58
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800053c:	2301      	movs	r3, #1
 800053e:	65fb      	str	r3, [r7, #92]	; 0x5c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000540:	2300      	movs	r3, #0
 8000542:	663b      	str	r3, [r7, #96]	; 0x60
  sConfig.IC2Filter = 0;
 8000544:	2300      	movs	r3, #0
 8000546:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8000548:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800054c:	4619      	mov	r1, r3
 800054e:	4815      	ldr	r0, [pc, #84]	; (80005a4 <MX_TIM1_Init+0xd8>)
 8000550:	f004 f83a 	bl	80045c8 <HAL_TIM_Encoder_Init>
 8000554:	4603      	mov	r3, r0
 8000556:	2b00      	cmp	r3, #0
 8000558:	d001      	beq.n	800055e <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 800055a:	f000 fd1b 	bl	8000f94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800055e:	2300      	movs	r3, #0
 8000560:	63bb      	str	r3, [r7, #56]	; 0x38
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000562:	2300      	movs	r3, #0
 8000564:	63fb      	str	r3, [r7, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000566:	2300      	movs	r3, #0
 8000568:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800056a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800056e:	4619      	mov	r1, r3
 8000570:	480c      	ldr	r0, [pc, #48]	; (80005a4 <MX_TIM1_Init+0xd8>)
 8000572:	f004 ffbf 	bl	80054f4 <HAL_TIMEx_MasterConfigSynchronization>
 8000576:	4603      	mov	r3, r0
 8000578:	2b00      	cmp	r3, #0
 800057a:	d001      	beq.n	8000580 <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 800057c:	f000 fd0a 	bl	8000f94 <Error_Handler>
  }
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000580:	2300      	movs	r3, #0
 8000582:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000584:	2300      	movs	r3, #0
 8000586:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000588:	1d3b      	adds	r3, r7, #4
 800058a:	4619      	mov	r1, r3
 800058c:	4805      	ldr	r0, [pc, #20]	; (80005a4 <MX_TIM1_Init+0xd8>)
 800058e:	f005 f833 	bl	80055f8 <HAL_TIMEx_ConfigBreakDeadTime>
 8000592:	4603      	mov	r3, r0
 8000594:	2b00      	cmp	r3, #0
 8000596:	d001      	beq.n	800059c <MX_TIM1_Init+0xd0>
  {
    Error_Handler();
 8000598:	f000 fcfc 	bl	8000f94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800059c:	bf00      	nop
 800059e:	3768      	adds	r7, #104	; 0x68
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bd80      	pop	{r7, pc}
 80005a4:	200005ec 	.word	0x200005ec
 80005a8:	40012c00 	.word	0x40012c00

080005ac <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b08a      	sub	sp, #40	; 0x28
 80005b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005b2:	f107 031c 	add.w	r3, r7, #28
 80005b6:	2200      	movs	r2, #0
 80005b8:	601a      	str	r2, [r3, #0]
 80005ba:	605a      	str	r2, [r3, #4]
 80005bc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80005be:	463b      	mov	r3, r7
 80005c0:	2200      	movs	r2, #0
 80005c2:	601a      	str	r2, [r3, #0]
 80005c4:	605a      	str	r2, [r3, #4]
 80005c6:	609a      	str	r2, [r3, #8]
 80005c8:	60da      	str	r2, [r3, #12]
 80005ca:	611a      	str	r2, [r3, #16]
 80005cc:	615a      	str	r2, [r3, #20]
 80005ce:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80005d0:	4b35      	ldr	r3, [pc, #212]	; (80006a8 <MX_TIM2_Init+0xfc>)
 80005d2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80005d6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 50 - 1;
 80005d8:	4b33      	ldr	r3, [pc, #204]	; (80006a8 <MX_TIM2_Init+0xfc>)
 80005da:	2231      	movs	r2, #49	; 0x31
 80005dc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005de:	4b32      	ldr	r3, [pc, #200]	; (80006a8 <MX_TIM2_Init+0xfc>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 63999;
 80005e4:	4b30      	ldr	r3, [pc, #192]	; (80006a8 <MX_TIM2_Init+0xfc>)
 80005e6:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 80005ea:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005ec:	4b2e      	ldr	r3, [pc, #184]	; (80006a8 <MX_TIM2_Init+0xfc>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005f2:	4b2d      	ldr	r3, [pc, #180]	; (80006a8 <MX_TIM2_Init+0xfc>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80005f8:	482b      	ldr	r0, [pc, #172]	; (80006a8 <MX_TIM2_Init+0xfc>)
 80005fa:	f003 fe8d 	bl	8004318 <HAL_TIM_PWM_Init>
 80005fe:	4603      	mov	r3, r0
 8000600:	2b00      	cmp	r3, #0
 8000602:	d001      	beq.n	8000608 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8000604:	f000 fcc6 	bl	8000f94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000608:	2300      	movs	r3, #0
 800060a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800060c:	2300      	movs	r3, #0
 800060e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000610:	f107 031c 	add.w	r3, r7, #28
 8000614:	4619      	mov	r1, r3
 8000616:	4824      	ldr	r0, [pc, #144]	; (80006a8 <MX_TIM2_Init+0xfc>)
 8000618:	f004 ff6c 	bl	80054f4 <HAL_TIMEx_MasterConfigSynchronization>
 800061c:	4603      	mov	r3, r0
 800061e:	2b00      	cmp	r3, #0
 8000620:	d001      	beq.n	8000626 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8000622:	f000 fcb7 	bl	8000f94 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000626:	2360      	movs	r3, #96	; 0x60
 8000628:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800062a:	2300      	movs	r3, #0
 800062c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800062e:	2300      	movs	r3, #0
 8000630:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000632:	2300      	movs	r3, #0
 8000634:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000636:	463b      	mov	r3, r7
 8000638:	2200      	movs	r2, #0
 800063a:	4619      	mov	r1, r3
 800063c:	481a      	ldr	r0, [pc, #104]	; (80006a8 <MX_TIM2_Init+0xfc>)
 800063e:	f004 fa75 	bl	8004b2c <HAL_TIM_PWM_ConfigChannel>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8000648:	f000 fca4 	bl	8000f94 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 800064c:	2300      	movs	r3, #0
 800064e:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000650:	463b      	mov	r3, r7
 8000652:	2204      	movs	r2, #4
 8000654:	4619      	mov	r1, r3
 8000656:	4814      	ldr	r0, [pc, #80]	; (80006a8 <MX_TIM2_Init+0xfc>)
 8000658:	f004 fa68 	bl	8004b2c <HAL_TIM_PWM_ConfigChannel>
 800065c:	4603      	mov	r3, r0
 800065e:	2b00      	cmp	r3, #0
 8000660:	d001      	beq.n	8000666 <MX_TIM2_Init+0xba>
  {
    Error_Handler();
 8000662:	f000 fc97 	bl	8000f94 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8000666:	2300      	movs	r3, #0
 8000668:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800066a:	463b      	mov	r3, r7
 800066c:	2208      	movs	r2, #8
 800066e:	4619      	mov	r1, r3
 8000670:	480d      	ldr	r0, [pc, #52]	; (80006a8 <MX_TIM2_Init+0xfc>)
 8000672:	f004 fa5b 	bl	8004b2c <HAL_TIM_PWM_ConfigChannel>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d001      	beq.n	8000680 <MX_TIM2_Init+0xd4>
  {
    Error_Handler();
 800067c:	f000 fc8a 	bl	8000f94 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8000680:	2300      	movs	r3, #0
 8000682:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000684:	463b      	mov	r3, r7
 8000686:	220c      	movs	r2, #12
 8000688:	4619      	mov	r1, r3
 800068a:	4807      	ldr	r0, [pc, #28]	; (80006a8 <MX_TIM2_Init+0xfc>)
 800068c:	f004 fa4e 	bl	8004b2c <HAL_TIM_PWM_ConfigChannel>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d001      	beq.n	800069a <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8000696:	f000 fc7d 	bl	8000f94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800069a:	4803      	ldr	r0, [pc, #12]	; (80006a8 <MX_TIM2_Init+0xfc>)
 800069c:	f000 fde0 	bl	8001260 <HAL_TIM_MspPostInit>

}
 80006a0:	bf00      	nop
 80006a2:	3728      	adds	r7, #40	; 0x28
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	20000638 	.word	0x20000638

080006ac <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b08c      	sub	sp, #48	; 0x30
 80006b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80006b2:	f107 030c 	add.w	r3, r7, #12
 80006b6:	2224      	movs	r2, #36	; 0x24
 80006b8:	2100      	movs	r1, #0
 80006ba:	4618      	mov	r0, r3
 80006bc:	f009 fa53 	bl	8009b66 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006c0:	463b      	mov	r3, r7
 80006c2:	2200      	movs	r2, #0
 80006c4:	601a      	str	r2, [r3, #0]
 80006c6:	605a      	str	r2, [r3, #4]
 80006c8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80006ca:	4b21      	ldr	r3, [pc, #132]	; (8000750 <MX_TIM3_Init+0xa4>)
 80006cc:	4a21      	ldr	r2, [pc, #132]	; (8000754 <MX_TIM3_Init+0xa8>)
 80006ce:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80006d0:	4b1f      	ldr	r3, [pc, #124]	; (8000750 <MX_TIM3_Init+0xa4>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006d6:	4b1e      	ldr	r3, [pc, #120]	; (8000750 <MX_TIM3_Init+0xa4>)
 80006d8:	2200      	movs	r2, #0
 80006da:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80006dc:	4b1c      	ldr	r3, [pc, #112]	; (8000750 <MX_TIM3_Init+0xa4>)
 80006de:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80006e2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006e4:	4b1a      	ldr	r3, [pc, #104]	; (8000750 <MX_TIM3_Init+0xa4>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006ea:	4b19      	ldr	r3, [pc, #100]	; (8000750 <MX_TIM3_Init+0xa4>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80006f0:	2301      	movs	r3, #1
 80006f2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80006f4:	2300      	movs	r3, #0
 80006f6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80006f8:	2301      	movs	r3, #1
 80006fa:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80006fc:	2300      	movs	r3, #0
 80006fe:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000700:	2300      	movs	r3, #0
 8000702:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000704:	2300      	movs	r3, #0
 8000706:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000708:	2301      	movs	r3, #1
 800070a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800070c:	2300      	movs	r3, #0
 800070e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000710:	2300      	movs	r3, #0
 8000712:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000714:	f107 030c 	add.w	r3, r7, #12
 8000718:	4619      	mov	r1, r3
 800071a:	480d      	ldr	r0, [pc, #52]	; (8000750 <MX_TIM3_Init+0xa4>)
 800071c:	f003 ff54 	bl	80045c8 <HAL_TIM_Encoder_Init>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d001      	beq.n	800072a <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8000726:	f000 fc35 	bl	8000f94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800072a:	2300      	movs	r3, #0
 800072c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800072e:	2300      	movs	r3, #0
 8000730:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000732:	463b      	mov	r3, r7
 8000734:	4619      	mov	r1, r3
 8000736:	4806      	ldr	r0, [pc, #24]	; (8000750 <MX_TIM3_Init+0xa4>)
 8000738:	f004 fedc 	bl	80054f4 <HAL_TIMEx_MasterConfigSynchronization>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d001      	beq.n	8000746 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8000742:	f000 fc27 	bl	8000f94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000746:	bf00      	nop
 8000748:	3730      	adds	r7, #48	; 0x30
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	20000554 	.word	0x20000554
 8000754:	40000400 	.word	0x40000400

08000758 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b08c      	sub	sp, #48	; 0x30
 800075c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800075e:	f107 030c 	add.w	r3, r7, #12
 8000762:	2224      	movs	r2, #36	; 0x24
 8000764:	2100      	movs	r1, #0
 8000766:	4618      	mov	r0, r3
 8000768:	f009 f9fd 	bl	8009b66 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800076c:	463b      	mov	r3, r7
 800076e:	2200      	movs	r2, #0
 8000770:	601a      	str	r2, [r3, #0]
 8000772:	605a      	str	r2, [r3, #4]
 8000774:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000776:	4b21      	ldr	r3, [pc, #132]	; (80007fc <MX_TIM4_Init+0xa4>)
 8000778:	4a21      	ldr	r2, [pc, #132]	; (8000800 <MX_TIM4_Init+0xa8>)
 800077a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800077c:	4b1f      	ldr	r3, [pc, #124]	; (80007fc <MX_TIM4_Init+0xa4>)
 800077e:	2200      	movs	r2, #0
 8000780:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000782:	4b1e      	ldr	r3, [pc, #120]	; (80007fc <MX_TIM4_Init+0xa4>)
 8000784:	2200      	movs	r2, #0
 8000786:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000788:	4b1c      	ldr	r3, [pc, #112]	; (80007fc <MX_TIM4_Init+0xa4>)
 800078a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800078e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000790:	4b1a      	ldr	r3, [pc, #104]	; (80007fc <MX_TIM4_Init+0xa4>)
 8000792:	2200      	movs	r2, #0
 8000794:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000796:	4b19      	ldr	r3, [pc, #100]	; (80007fc <MX_TIM4_Init+0xa4>)
 8000798:	2200      	movs	r2, #0
 800079a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800079c:	2301      	movs	r3, #1
 800079e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80007a0:	2300      	movs	r3, #0
 80007a2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80007a4:	2301      	movs	r3, #1
 80007a6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80007a8:	2300      	movs	r3, #0
 80007aa:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80007ac:	2300      	movs	r3, #0
 80007ae:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80007b0:	2300      	movs	r3, #0
 80007b2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80007b4:	2301      	movs	r3, #1
 80007b6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80007b8:	2300      	movs	r3, #0
 80007ba:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80007bc:	2300      	movs	r3, #0
 80007be:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80007c0:	f107 030c 	add.w	r3, r7, #12
 80007c4:	4619      	mov	r1, r3
 80007c6:	480d      	ldr	r0, [pc, #52]	; (80007fc <MX_TIM4_Init+0xa4>)
 80007c8:	f003 fefe 	bl	80045c8 <HAL_TIM_Encoder_Init>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d001      	beq.n	80007d6 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 80007d2:	f000 fbdf 	bl	8000f94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007d6:	2300      	movs	r3, #0
 80007d8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007da:	2300      	movs	r3, #0
 80007dc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80007de:	463b      	mov	r3, r7
 80007e0:	4619      	mov	r1, r3
 80007e2:	4806      	ldr	r0, [pc, #24]	; (80007fc <MX_TIM4_Init+0xa4>)
 80007e4:	f004 fe86 	bl	80054f4 <HAL_TIMEx_MasterConfigSynchronization>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d001      	beq.n	80007f2 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 80007ee:	f000 fbd1 	bl	8000f94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80007f2:	bf00      	nop
 80007f4:	3730      	adds	r7, #48	; 0x30
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	20000470 	.word	0x20000470
 8000800:	40000800 	.word	0x40000800

08000804 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b084      	sub	sp, #16
 8000808:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800080a:	1d3b      	adds	r3, r7, #4
 800080c:	2200      	movs	r2, #0
 800080e:	601a      	str	r2, [r3, #0]
 8000810:	605a      	str	r2, [r3, #4]
 8000812:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000814:	4b14      	ldr	r3, [pc, #80]	; (8000868 <MX_TIM6_Init+0x64>)
 8000816:	4a15      	ldr	r2, [pc, #84]	; (800086c <MX_TIM6_Init+0x68>)
 8000818:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 25 - 1;
 800081a:	4b13      	ldr	r3, [pc, #76]	; (8000868 <MX_TIM6_Init+0x64>)
 800081c:	2218      	movs	r2, #24
 800081e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000820:	4b11      	ldr	r3, [pc, #68]	; (8000868 <MX_TIM6_Init+0x64>)
 8000822:	2200      	movs	r2, #0
 8000824:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 63999;
 8000826:	4b10      	ldr	r3, [pc, #64]	; (8000868 <MX_TIM6_Init+0x64>)
 8000828:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 800082c:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800082e:	4b0e      	ldr	r3, [pc, #56]	; (8000868 <MX_TIM6_Init+0x64>)
 8000830:	2200      	movs	r2, #0
 8000832:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000834:	480c      	ldr	r0, [pc, #48]	; (8000868 <MX_TIM6_Init+0x64>)
 8000836:	f003 fcad 	bl	8004194 <HAL_TIM_Base_Init>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d001      	beq.n	8000844 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000840:	f000 fba8 	bl	8000f94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000844:	2300      	movs	r3, #0
 8000846:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000848:	2300      	movs	r3, #0
 800084a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800084c:	1d3b      	adds	r3, r7, #4
 800084e:	4619      	mov	r1, r3
 8000850:	4805      	ldr	r0, [pc, #20]	; (8000868 <MX_TIM6_Init+0x64>)
 8000852:	f004 fe4f 	bl	80054f4 <HAL_TIMEx_MasterConfigSynchronization>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d001      	beq.n	8000860 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 800085c:	f000 fb9a 	bl	8000f94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000860:	bf00      	nop
 8000862:	3710      	adds	r7, #16
 8000864:	46bd      	mov	sp, r7
 8000866:	bd80      	pop	{r7, pc}
 8000868:	200005a0 	.word	0x200005a0
 800086c:	40001000 	.word	0x40001000

08000870 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b098      	sub	sp, #96	; 0x60
 8000874:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000876:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800087a:	2200      	movs	r2, #0
 800087c:	601a      	str	r2, [r3, #0]
 800087e:	605a      	str	r2, [r3, #4]
 8000880:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000882:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000886:	2200      	movs	r2, #0
 8000888:	601a      	str	r2, [r3, #0]
 800088a:	605a      	str	r2, [r3, #4]
 800088c:	609a      	str	r2, [r3, #8]
 800088e:	60da      	str	r2, [r3, #12]
 8000890:	611a      	str	r2, [r3, #16]
 8000892:	615a      	str	r2, [r3, #20]
 8000894:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000896:	1d3b      	adds	r3, r7, #4
 8000898:	2234      	movs	r2, #52	; 0x34
 800089a:	2100      	movs	r1, #0
 800089c:	4618      	mov	r0, r3
 800089e:	f009 f962 	bl	8009b66 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80008a2:	4b3b      	ldr	r3, [pc, #236]	; (8000990 <MX_TIM8_Init+0x120>)
 80008a4:	4a3b      	ldr	r2, [pc, #236]	; (8000994 <MX_TIM8_Init+0x124>)
 80008a6:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 50 - 1;
 80008a8:	4b39      	ldr	r3, [pc, #228]	; (8000990 <MX_TIM8_Init+0x120>)
 80008aa:	2231      	movs	r2, #49	; 0x31
 80008ac:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008ae:	4b38      	ldr	r3, [pc, #224]	; (8000990 <MX_TIM8_Init+0x120>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 63999;
 80008b4:	4b36      	ldr	r3, [pc, #216]	; (8000990 <MX_TIM8_Init+0x120>)
 80008b6:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 80008ba:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008bc:	4b34      	ldr	r3, [pc, #208]	; (8000990 <MX_TIM8_Init+0x120>)
 80008be:	2200      	movs	r2, #0
 80008c0:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80008c2:	4b33      	ldr	r3, [pc, #204]	; (8000990 <MX_TIM8_Init+0x120>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008c8:	4b31      	ldr	r3, [pc, #196]	; (8000990 <MX_TIM8_Init+0x120>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80008ce:	4830      	ldr	r0, [pc, #192]	; (8000990 <MX_TIM8_Init+0x120>)
 80008d0:	f003 fd22 	bl	8004318 <HAL_TIM_PWM_Init>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d001      	beq.n	80008de <MX_TIM8_Init+0x6e>
  {
    Error_Handler();
 80008da:	f000 fb5b 	bl	8000f94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008de:	2300      	movs	r3, #0
 80008e0:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80008e2:	2300      	movs	r3, #0
 80008e4:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008e6:	2300      	movs	r3, #0
 80008e8:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80008ea:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80008ee:	4619      	mov	r1, r3
 80008f0:	4827      	ldr	r0, [pc, #156]	; (8000990 <MX_TIM8_Init+0x120>)
 80008f2:	f004 fdff 	bl	80054f4 <HAL_TIMEx_MasterConfigSynchronization>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d001      	beq.n	8000900 <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 80008fc:	f000 fb4a 	bl	8000f94 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000900:	2360      	movs	r3, #96	; 0x60
 8000902:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8000904:	2300      	movs	r3, #0
 8000906:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000908:	2300      	movs	r3, #0
 800090a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800090c:	2300      	movs	r3, #0
 800090e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000910:	2300      	movs	r3, #0
 8000912:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000914:	2300      	movs	r3, #0
 8000916:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000918:	2300      	movs	r3, #0
 800091a:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800091c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000920:	2200      	movs	r2, #0
 8000922:	4619      	mov	r1, r3
 8000924:	481a      	ldr	r0, [pc, #104]	; (8000990 <MX_TIM8_Init+0x120>)
 8000926:	f004 f901 	bl	8004b2c <HAL_TIM_PWM_ConfigChannel>
 800092a:	4603      	mov	r3, r0
 800092c:	2b00      	cmp	r3, #0
 800092e:	d001      	beq.n	8000934 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8000930:	f000 fb30 	bl	8000f94 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000934:	2300      	movs	r3, #0
 8000936:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000938:	2300      	movs	r3, #0
 800093a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800093c:	2300      	movs	r3, #0
 800093e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000940:	2300      	movs	r3, #0
 8000942:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000944:	2300      	movs	r3, #0
 8000946:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000948:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800094c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800094e:	2300      	movs	r3, #0
 8000950:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000952:	2300      	movs	r3, #0
 8000954:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000956:	2300      	movs	r3, #0
 8000958:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800095a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800095e:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000960:	2300      	movs	r3, #0
 8000962:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000964:	2300      	movs	r3, #0
 8000966:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000968:	2300      	movs	r3, #0
 800096a:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800096c:	1d3b      	adds	r3, r7, #4
 800096e:	4619      	mov	r1, r3
 8000970:	4807      	ldr	r0, [pc, #28]	; (8000990 <MX_TIM8_Init+0x120>)
 8000972:	f004 fe41 	bl	80055f8 <HAL_TIMEx_ConfigBreakDeadTime>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d001      	beq.n	8000980 <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 800097c:	f000 fb0a 	bl	8000f94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8000980:	4803      	ldr	r0, [pc, #12]	; (8000990 <MX_TIM8_Init+0x120>)
 8000982:	f000 fc6d 	bl	8001260 <HAL_TIM_MspPostInit>

}
 8000986:	bf00      	nop
 8000988:	3760      	adds	r7, #96	; 0x60
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	20000424 	.word	0x20000424
 8000994:	40013400 	.word	0x40013400

08000998 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b098      	sub	sp, #96	; 0x60
 800099c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800099e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80009a2:	2200      	movs	r2, #0
 80009a4:	601a      	str	r2, [r3, #0]
 80009a6:	605a      	str	r2, [r3, #4]
 80009a8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009aa:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80009ae:	2200      	movs	r2, #0
 80009b0:	601a      	str	r2, [r3, #0]
 80009b2:	605a      	str	r2, [r3, #4]
 80009b4:	609a      	str	r2, [r3, #8]
 80009b6:	60da      	str	r2, [r3, #12]
 80009b8:	611a      	str	r2, [r3, #16]
 80009ba:	615a      	str	r2, [r3, #20]
 80009bc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80009be:	1d3b      	adds	r3, r7, #4
 80009c0:	2234      	movs	r2, #52	; 0x34
 80009c2:	2100      	movs	r1, #0
 80009c4:	4618      	mov	r0, r3
 80009c6:	f009 f8ce 	bl	8009b66 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80009ca:	4b34      	ldr	r3, [pc, #208]	; (8000a9c <MX_TIM15_Init+0x104>)
 80009cc:	4a34      	ldr	r2, [pc, #208]	; (8000aa0 <MX_TIM15_Init+0x108>)
 80009ce:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 50 - 1;
 80009d0:	4b32      	ldr	r3, [pc, #200]	; (8000a9c <MX_TIM15_Init+0x104>)
 80009d2:	2231      	movs	r2, #49	; 0x31
 80009d4:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009d6:	4b31      	ldr	r3, [pc, #196]	; (8000a9c <MX_TIM15_Init+0x104>)
 80009d8:	2200      	movs	r2, #0
 80009da:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 63999;
 80009dc:	4b2f      	ldr	r3, [pc, #188]	; (8000a9c <MX_TIM15_Init+0x104>)
 80009de:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 80009e2:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009e4:	4b2d      	ldr	r3, [pc, #180]	; (8000a9c <MX_TIM15_Init+0x104>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80009ea:	4b2c      	ldr	r3, [pc, #176]	; (8000a9c <MX_TIM15_Init+0x104>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009f0:	4b2a      	ldr	r3, [pc, #168]	; (8000a9c <MX_TIM15_Init+0x104>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 80009f6:	4829      	ldr	r0, [pc, #164]	; (8000a9c <MX_TIM15_Init+0x104>)
 80009f8:	f003 fc8e 	bl	8004318 <HAL_TIM_PWM_Init>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d001      	beq.n	8000a06 <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 8000a02:	f000 fac7 	bl	8000f94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a06:	2300      	movs	r3, #0
 8000a08:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8000a0e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000a12:	4619      	mov	r1, r3
 8000a14:	4821      	ldr	r0, [pc, #132]	; (8000a9c <MX_TIM15_Init+0x104>)
 8000a16:	f004 fd6d 	bl	80054f4 <HAL_TIMEx_MasterConfigSynchronization>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d001      	beq.n	8000a24 <MX_TIM15_Init+0x8c>
  {
    Error_Handler();
 8000a20:	f000 fab8 	bl	8000f94 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a24:	2360      	movs	r3, #96	; 0x60
 8000a26:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000a30:	2300      	movs	r3, #0
 8000a32:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a34:	2300      	movs	r3, #0
 8000a36:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000a40:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000a44:	2204      	movs	r2, #4
 8000a46:	4619      	mov	r1, r3
 8000a48:	4814      	ldr	r0, [pc, #80]	; (8000a9c <MX_TIM15_Init+0x104>)
 8000a4a:	f004 f86f 	bl	8004b2c <HAL_TIM_PWM_ConfigChannel>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d001      	beq.n	8000a58 <MX_TIM15_Init+0xc0>
  {
    Error_Handler();
 8000a54:	f000 fa9e 	bl	8000f94 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000a60:	2300      	movs	r3, #0
 8000a62:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000a64:	2300      	movs	r3, #0
 8000a66:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000a6c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a70:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000a72:	2300      	movs	r3, #0
 8000a74:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000a76:	2300      	movs	r3, #0
 8000a78:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8000a7a:	1d3b      	adds	r3, r7, #4
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	4807      	ldr	r0, [pc, #28]	; (8000a9c <MX_TIM15_Init+0x104>)
 8000a80:	f004 fdba 	bl	80055f8 <HAL_TIMEx_ConfigBreakDeadTime>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d001      	beq.n	8000a8e <MX_TIM15_Init+0xf6>
  {
    Error_Handler();
 8000a8a:	f000 fa83 	bl	8000f94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8000a8e:	4803      	ldr	r0, [pc, #12]	; (8000a9c <MX_TIM15_Init+0x104>)
 8000a90:	f000 fbe6 	bl	8001260 <HAL_TIM_MspPostInit>

}
 8000a94:	bf00      	nop
 8000a96:	3760      	adds	r7, #96	; 0x60
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	200004bc 	.word	0x200004bc
 8000aa0:	40014000 	.word	0x40014000

08000aa4 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b094      	sub	sp, #80	; 0x50
 8000aa8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000aaa:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000aae:	2200      	movs	r2, #0
 8000ab0:	601a      	str	r2, [r3, #0]
 8000ab2:	605a      	str	r2, [r3, #4]
 8000ab4:	609a      	str	r2, [r3, #8]
 8000ab6:	60da      	str	r2, [r3, #12]
 8000ab8:	611a      	str	r2, [r3, #16]
 8000aba:	615a      	str	r2, [r3, #20]
 8000abc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000abe:	463b      	mov	r3, r7
 8000ac0:	2234      	movs	r2, #52	; 0x34
 8000ac2:	2100      	movs	r1, #0
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	f009 f84e 	bl	8009b66 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000aca:	4b31      	ldr	r3, [pc, #196]	; (8000b90 <MX_TIM16_Init+0xec>)
 8000acc:	4a31      	ldr	r2, [pc, #196]	; (8000b94 <MX_TIM16_Init+0xf0>)
 8000ace:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 50 - 1;
 8000ad0:	4b2f      	ldr	r3, [pc, #188]	; (8000b90 <MX_TIM16_Init+0xec>)
 8000ad2:	2231      	movs	r2, #49	; 0x31
 8000ad4:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ad6:	4b2e      	ldr	r3, [pc, #184]	; (8000b90 <MX_TIM16_Init+0xec>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 63999;
 8000adc:	4b2c      	ldr	r3, [pc, #176]	; (8000b90 <MX_TIM16_Init+0xec>)
 8000ade:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8000ae2:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ae4:	4b2a      	ldr	r3, [pc, #168]	; (8000b90 <MX_TIM16_Init+0xec>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000aea:	4b29      	ldr	r3, [pc, #164]	; (8000b90 <MX_TIM16_Init+0xec>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000af0:	4b27      	ldr	r3, [pc, #156]	; (8000b90 <MX_TIM16_Init+0xec>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000af6:	4826      	ldr	r0, [pc, #152]	; (8000b90 <MX_TIM16_Init+0xec>)
 8000af8:	f003 fb4c 	bl	8004194 <HAL_TIM_Base_Init>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d001      	beq.n	8000b06 <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 8000b02:	f000 fa47 	bl	8000f94 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8000b06:	4822      	ldr	r0, [pc, #136]	; (8000b90 <MX_TIM16_Init+0xec>)
 8000b08:	f003 fc06 	bl	8004318 <HAL_TIM_PWM_Init>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d001      	beq.n	8000b16 <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 8000b12:	f000 fa3f 	bl	8000f94 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b16:	2360      	movs	r3, #96	; 0x60
 8000b18:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 0;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000b22:	2300      	movs	r3, #0
 8000b24:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b26:	2300      	movs	r3, #0
 8000b28:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b32:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000b36:	2200      	movs	r2, #0
 8000b38:	4619      	mov	r1, r3
 8000b3a:	4815      	ldr	r0, [pc, #84]	; (8000b90 <MX_TIM16_Init+0xec>)
 8000b3c:	f003 fff6 	bl	8004b2c <HAL_TIM_PWM_ConfigChannel>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d001      	beq.n	8000b4a <MX_TIM16_Init+0xa6>
  {
    Error_Handler();
 8000b46:	f000 fa25 	bl	8000f94 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000b52:	2300      	movs	r3, #0
 8000b54:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000b56:	2300      	movs	r3, #0
 8000b58:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000b5e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b62:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000b64:	2300      	movs	r3, #0
 8000b66:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8000b6c:	463b      	mov	r3, r7
 8000b6e:	4619      	mov	r1, r3
 8000b70:	4807      	ldr	r0, [pc, #28]	; (8000b90 <MX_TIM16_Init+0xec>)
 8000b72:	f004 fd41 	bl	80055f8 <HAL_TIMEx_ConfigBreakDeadTime>
 8000b76:	4603      	mov	r3, r0
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d001      	beq.n	8000b80 <MX_TIM16_Init+0xdc>
  {
    Error_Handler();
 8000b7c:	f000 fa0a 	bl	8000f94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8000b80:	4803      	ldr	r0, [pc, #12]	; (8000b90 <MX_TIM16_Init+0xec>)
 8000b82:	f000 fb6d 	bl	8001260 <HAL_TIM_MspPostInit>

}
 8000b86:	bf00      	nop
 8000b88:	3750      	adds	r7, #80	; 0x50
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	20000684 	.word	0x20000684
 8000b94:	40014400 	.word	0x40014400

08000b98 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b094      	sub	sp, #80	; 0x50
 8000b9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b9e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	601a      	str	r2, [r3, #0]
 8000ba6:	605a      	str	r2, [r3, #4]
 8000ba8:	609a      	str	r2, [r3, #8]
 8000baa:	60da      	str	r2, [r3, #12]
 8000bac:	611a      	str	r2, [r3, #16]
 8000bae:	615a      	str	r2, [r3, #20]
 8000bb0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000bb2:	463b      	mov	r3, r7
 8000bb4:	2234      	movs	r2, #52	; 0x34
 8000bb6:	2100      	movs	r1, #0
 8000bb8:	4618      	mov	r0, r3
 8000bba:	f008 ffd4 	bl	8009b66 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8000bbe:	4b31      	ldr	r3, [pc, #196]	; (8000c84 <MX_TIM17_Init+0xec>)
 8000bc0:	4a31      	ldr	r2, [pc, #196]	; (8000c88 <MX_TIM17_Init+0xf0>)
 8000bc2:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 50 - 1;
 8000bc4:	4b2f      	ldr	r3, [pc, #188]	; (8000c84 <MX_TIM17_Init+0xec>)
 8000bc6:	2231      	movs	r2, #49	; 0x31
 8000bc8:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bca:	4b2e      	ldr	r3, [pc, #184]	; (8000c84 <MX_TIM17_Init+0xec>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 63999;
 8000bd0:	4b2c      	ldr	r3, [pc, #176]	; (8000c84 <MX_TIM17_Init+0xec>)
 8000bd2:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8000bd6:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bd8:	4b2a      	ldr	r3, [pc, #168]	; (8000c84 <MX_TIM17_Init+0xec>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8000bde:	4b29      	ldr	r3, [pc, #164]	; (8000c84 <MX_TIM17_Init+0xec>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000be4:	4b27      	ldr	r3, [pc, #156]	; (8000c84 <MX_TIM17_Init+0xec>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8000bea:	4826      	ldr	r0, [pc, #152]	; (8000c84 <MX_TIM17_Init+0xec>)
 8000bec:	f003 fad2 	bl	8004194 <HAL_TIM_Base_Init>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d001      	beq.n	8000bfa <MX_TIM17_Init+0x62>
  {
    Error_Handler();
 8000bf6:	f000 f9cd 	bl	8000f94 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 8000bfa:	4822      	ldr	r0, [pc, #136]	; (8000c84 <MX_TIM17_Init+0xec>)
 8000bfc:	f003 fb8c 	bl	8004318 <HAL_TIM_PWM_Init>
 8000c00:	4603      	mov	r3, r0
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d001      	beq.n	8000c0a <MX_TIM17_Init+0x72>
  {
    Error_Handler();
 8000c06:	f000 f9c5 	bl	8000f94 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c0a:	2360      	movs	r3, #96	; 0x60
 8000c0c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 0;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c12:	2300      	movs	r3, #0
 8000c14:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000c16:	2300      	movs	r3, #0
 8000c18:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000c22:	2300      	movs	r3, #0
 8000c24:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c26:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	4815      	ldr	r0, [pc, #84]	; (8000c84 <MX_TIM17_Init+0xec>)
 8000c30:	f003 ff7c 	bl	8004b2c <HAL_TIM_PWM_ConfigChannel>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d001      	beq.n	8000c3e <MX_TIM17_Init+0xa6>
  {
    Error_Handler();
 8000c3a:	f000 f9ab 	bl	8000f94 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000c42:	2300      	movs	r3, #0
 8000c44:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000c46:	2300      	movs	r3, #0
 8000c48:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000c52:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c56:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8000c60:	463b      	mov	r3, r7
 8000c62:	4619      	mov	r1, r3
 8000c64:	4807      	ldr	r0, [pc, #28]	; (8000c84 <MX_TIM17_Init+0xec>)
 8000c66:	f004 fcc7 	bl	80055f8 <HAL_TIMEx_ConfigBreakDeadTime>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d001      	beq.n	8000c74 <MX_TIM17_Init+0xdc>
  {
    Error_Handler();
 8000c70:	f000 f990 	bl	8000f94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 8000c74:	4803      	ldr	r0, [pc, #12]	; (8000c84 <MX_TIM17_Init+0xec>)
 8000c76:	f000 faf3 	bl	8001260 <HAL_TIM_MspPostInit>

}
 8000c7a:	bf00      	nop
 8000c7c:	3750      	adds	r7, #80	; 0x50
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	20000508 	.word	0x20000508
 8000c88:	40014800 	.word	0x40014800

08000c8c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b088      	sub	sp, #32
 8000c90:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c92:	f107 030c 	add.w	r3, r7, #12
 8000c96:	2200      	movs	r2, #0
 8000c98:	601a      	str	r2, [r3, #0]
 8000c9a:	605a      	str	r2, [r3, #4]
 8000c9c:	609a      	str	r2, [r3, #8]
 8000c9e:	60da      	str	r2, [r3, #12]
 8000ca0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ca2:	4b18      	ldr	r3, [pc, #96]	; (8000d04 <MX_GPIO_Init+0x78>)
 8000ca4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ca6:	4a17      	ldr	r2, [pc, #92]	; (8000d04 <MX_GPIO_Init+0x78>)
 8000ca8:	f043 0301 	orr.w	r3, r3, #1
 8000cac:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cae:	4b15      	ldr	r3, [pc, #84]	; (8000d04 <MX_GPIO_Init+0x78>)
 8000cb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cb2:	f003 0301 	and.w	r3, r3, #1
 8000cb6:	60bb      	str	r3, [r7, #8]
 8000cb8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cba:	4b12      	ldr	r3, [pc, #72]	; (8000d04 <MX_GPIO_Init+0x78>)
 8000cbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cbe:	4a11      	ldr	r2, [pc, #68]	; (8000d04 <MX_GPIO_Init+0x78>)
 8000cc0:	f043 0302 	orr.w	r3, r3, #2
 8000cc4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cc6:	4b0f      	ldr	r3, [pc, #60]	; (8000d04 <MX_GPIO_Init+0x78>)
 8000cc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cca:	f003 0302 	and.w	r3, r3, #2
 8000cce:	607b      	str	r3, [r7, #4]
 8000cd0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000cd8:	480b      	ldr	r0, [pc, #44]	; (8000d08 <MX_GPIO_Init+0x7c>)
 8000cda:	f000 ff21 	bl	8001b20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000cde:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ce2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ce4:	2301      	movs	r3, #1
 8000ce6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cec:	2300      	movs	r3, #0
 8000cee:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000cf0:	f107 030c 	add.w	r3, r7, #12
 8000cf4:	4619      	mov	r1, r3
 8000cf6:	4804      	ldr	r0, [pc, #16]	; (8000d08 <MX_GPIO_Init+0x7c>)
 8000cf8:	f000 fd90 	bl	800181c <HAL_GPIO_Init>

}
 8000cfc:	bf00      	nop
 8000cfe:	3720      	adds	r7, #32
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	40021000 	.word	0x40021000
 8000d08:	48000400 	.word	0x48000400

08000d0c <PID>:

/* USER CODE BEGIN 4 */

int32_t PID(Motor* motor, int16_t position) {
 8000d0c:	b480      	push	{r7}
 8000d0e:	b087      	sub	sp, #28
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
 8000d14:	460b      	mov	r3, r1
 8000d16:	807b      	strh	r3, [r7, #2]
	motor->position = position; // Update motor position from encoder output
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	887a      	ldrh	r2, [r7, #2]
 8000d1c:	81da      	strh	r2, [r3, #14]
	motor->positionChange = ( position - motor->positionPrev );
 8000d1e:	887a      	ldrh	r2, [r7, #2]
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8000d26:	b29b      	uxth	r3, r3
 8000d28:	1ad3      	subs	r3, r2, r3
 8000d2a:	b29b      	uxth	r3, r3
 8000d2c:	b21a      	sxth	r2, r3
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	825a      	strh	r2, [r3, #18]
	motor->error = ( motor->setpoint - motor->positionChange ); // Update current PID error
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d38:	b29a      	uxth	r2, r3
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8000d40:	b29b      	uxth	r3, r3
 8000d42:	1ad3      	subs	r3, r2, r3
 8000d44:	b29b      	uxth	r3, r3
 8000d46:	b21a      	sxth	r2, r3
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	829a      	strh	r2, [r3, #20]
	motor->sumOfErrors += motor->error; // Add current PID error to PID sum of errors
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	699b      	ldr	r3, [r3, #24]
 8000d50:	687a      	ldr	r2, [r7, #4]
 8000d52:	f9b2 2014 	ldrsh.w	r2, [r2, #20]
 8000d56:	441a      	add	r2, r3
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	619a      	str	r2, [r3, #24]
	// PID sum of errors overflow check
	if (motor->sumOfErrors > (65535 / motor->iGain)) {
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	699a      	ldr	r2, [r3, #24]
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8000d66:	4619      	mov	r1, r3
 8000d68:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000d6c:	fb93 f3f1 	sdiv	r3, r3, r1
 8000d70:	429a      	cmp	r2, r3
 8000d72:	dd0a      	ble.n	8000d8a <PID+0x7e>
		motor->sumOfErrors = (65535 / motor->iGain);
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8000d7a:	461a      	mov	r2, r3
 8000d7c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000d80:	fb93 f2f2 	sdiv	r2, r3, r2
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	619a      	str	r2, [r3, #24]
 8000d88:	e013      	b.n	8000db2 <PID+0xa6>
	}
	else if (motor->sumOfErrors < -(65535 / motor->iGain)) {
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	699a      	ldr	r2, [r3, #24]
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8000d94:	4619      	mov	r1, r3
 8000d96:	4b25      	ldr	r3, [pc, #148]	; (8000e2c <PID+0x120>)
 8000d98:	fb93 f3f1 	sdiv	r3, r3, r1
 8000d9c:	429a      	cmp	r2, r3
 8000d9e:	da08      	bge.n	8000db2 <PID+0xa6>
		motor->sumOfErrors = -(65535 / motor->iGain);
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8000da6:	461a      	mov	r2, r3
 8000da8:	4b20      	ldr	r3, [pc, #128]	; (8000e2c <PID+0x120>)
 8000daa:	fb93 f2f2 	sdiv	r2, r3, r2
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	619a      	str	r2, [r3, #24]
	}
	motor->positionPrev = position;
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	887a      	ldrh	r2, [r7, #2]
 8000db6:	821a      	strh	r2, [r3, #16]
	int32_t p = motor->pGain * motor->error;
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8000dbe:	461a      	mov	r2, r3
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8000dc6:	fb03 f302 	mul.w	r3, r3, r2
 8000dca:	617b      	str	r3, [r7, #20]
	int32_t i = motor->iGain * motor->sumOfErrors;
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8000dd2:	461a      	mov	r2, r3
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	699b      	ldr	r3, [r3, #24]
 8000dd8:	fb03 f302 	mul.w	r3, r3, r2
 8000ddc:	613b      	str	r3, [r7, #16]
	int32_t d = motor->dGain * motor->positionChange;
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8000de4:	461a      	mov	r2, r3
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8000dec:	fb03 f302 	mul.w	r3, r3, r2
 8000df0:	60fb      	str	r3, [r7, #12]
	if (motor->setpoint == 0) { // Speed should be zero, reset all PID calculations
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d10b      	bne.n	8000e14 <PID+0x108>
		motor->error = 0;
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	2200      	movs	r2, #0
 8000e00:	829a      	strh	r2, [r3, #20]
		motor->sumOfErrors = 0;
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	2200      	movs	r2, #0
 8000e06:	619a      	str	r2, [r3, #24]
		p = 0;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	617b      	str	r3, [r7, #20]
		i = 0;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	613b      	str	r3, [r7, #16]
		d = 0;
 8000e10:	2300      	movs	r3, #0
 8000e12:	60fb      	str	r3, [r7, #12]
	}
	return (p + i + d); // Return PID controller output (speed)
 8000e14:	697a      	ldr	r2, [r7, #20]
 8000e16:	693b      	ldr	r3, [r7, #16]
 8000e18:	441a      	add	r2, r3
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	4413      	add	r3, r2
}
 8000e1e:	4618      	mov	r0, r3
 8000e20:	371c      	adds	r7, #28
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr
 8000e2a:	bf00      	nop
 8000e2c:	ffff0001 	.word	0xffff0001

08000e30 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b082      	sub	sp, #8
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
	// Second motor <=> J6 encoder socket <=> SECOND ENCODER
	// Third motor <=> J7 encoder socket <=> THIRD ENCODER
	// First motor <=> J3 encoder socket <=> FIRST ENCODER

	// Calculate PID and save PID controller output to motor speed
	motor1.speed = PID(&motor1, (int16_t)TIM1->CNT);
 8000e38:	4b4d      	ldr	r3, [pc, #308]	; (8000f70 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8000e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e3c:	b21b      	sxth	r3, r3
 8000e3e:	4619      	mov	r1, r3
 8000e40:	484c      	ldr	r0, [pc, #304]	; (8000f74 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8000e42:	f7ff ff63 	bl	8000d0c <PID>
 8000e46:	4602      	mov	r2, r0
 8000e48:	4b4a      	ldr	r3, [pc, #296]	; (8000f74 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8000e4a:	605a      	str	r2, [r3, #4]
	motor2.speed = PID(&motor2, (int16_t)TIM3->CNT);
 8000e4c:	4b4a      	ldr	r3, [pc, #296]	; (8000f78 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8000e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e50:	b21b      	sxth	r3, r3
 8000e52:	4619      	mov	r1, r3
 8000e54:	4849      	ldr	r0, [pc, #292]	; (8000f7c <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8000e56:	f7ff ff59 	bl	8000d0c <PID>
 8000e5a:	4602      	mov	r2, r0
 8000e5c:	4b47      	ldr	r3, [pc, #284]	; (8000f7c <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8000e5e:	605a      	str	r2, [r3, #4]
	motor3.speed = PID(&motor3, (int16_t)TIM4->CNT);
 8000e60:	4b47      	ldr	r3, [pc, #284]	; (8000f80 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8000e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e64:	b21b      	sxth	r3, r3
 8000e66:	4619      	mov	r1, r3
 8000e68:	4846      	ldr	r0, [pc, #280]	; (8000f84 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8000e6a:	f7ff ff4f 	bl	8000d0c <PID>
 8000e6e:	4602      	mov	r2, r0
 8000e70:	4b44      	ldr	r3, [pc, #272]	; (8000f84 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8000e72:	605a      	str	r2, [r3, #4]

	// Overflow check
	if (motor1.speed > 65535) {
 8000e74:	4b3f      	ldr	r3, [pc, #252]	; (8000f74 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8000e76:	685b      	ldr	r3, [r3, #4]
 8000e78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e7c:	db04      	blt.n	8000e88 <HAL_TIM_PeriodElapsedCallback+0x58>
		motor1.speed = 65535;
 8000e7e:	4b3d      	ldr	r3, [pc, #244]	; (8000f74 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8000e80:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e84:	605a      	str	r2, [r3, #4]
 8000e86:	e007      	b.n	8000e98 <HAL_TIM_PeriodElapsedCallback+0x68>
	}
	else if (motor1.speed < -65535) {
 8000e88:	4b3a      	ldr	r3, [pc, #232]	; (8000f74 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8000e8a:	685b      	ldr	r3, [r3, #4]
 8000e8c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8000e90:	dc02      	bgt.n	8000e98 <HAL_TIM_PeriodElapsedCallback+0x68>
		motor1.speed = -65535;
 8000e92:	4b38      	ldr	r3, [pc, #224]	; (8000f74 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8000e94:	4a3c      	ldr	r2, [pc, #240]	; (8000f88 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8000e96:	605a      	str	r2, [r3, #4]
	}

	if (motor2.speed > 65535) {
 8000e98:	4b38      	ldr	r3, [pc, #224]	; (8000f7c <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8000e9a:	685b      	ldr	r3, [r3, #4]
 8000e9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ea0:	db04      	blt.n	8000eac <HAL_TIM_PeriodElapsedCallback+0x7c>
		motor2.speed = 65535;
 8000ea2:	4b36      	ldr	r3, [pc, #216]	; (8000f7c <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8000ea4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ea8:	605a      	str	r2, [r3, #4]
 8000eaa:	e007      	b.n	8000ebc <HAL_TIM_PeriodElapsedCallback+0x8c>
	}
	else if (motor2.speed < -65535) {
 8000eac:	4b33      	ldr	r3, [pc, #204]	; (8000f7c <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8000eae:	685b      	ldr	r3, [r3, #4]
 8000eb0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8000eb4:	dc02      	bgt.n	8000ebc <HAL_TIM_PeriodElapsedCallback+0x8c>
		motor2.speed = -65535;
 8000eb6:	4b31      	ldr	r3, [pc, #196]	; (8000f7c <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8000eb8:	4a33      	ldr	r2, [pc, #204]	; (8000f88 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8000eba:	605a      	str	r2, [r3, #4]
	}

	if (motor3.speed > 65535) {
 8000ebc:	4b31      	ldr	r3, [pc, #196]	; (8000f84 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8000ebe:	685b      	ldr	r3, [r3, #4]
 8000ec0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ec4:	db04      	blt.n	8000ed0 <HAL_TIM_PeriodElapsedCallback+0xa0>
		motor3.speed = 65535;
 8000ec6:	4b2f      	ldr	r3, [pc, #188]	; (8000f84 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8000ec8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ecc:	605a      	str	r2, [r3, #4]
 8000ece:	e007      	b.n	8000ee0 <HAL_TIM_PeriodElapsedCallback+0xb0>
	}
	else if (motor3.speed < -65535) {
 8000ed0:	4b2c      	ldr	r3, [pc, #176]	; (8000f84 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8000ed2:	685b      	ldr	r3, [r3, #4]
 8000ed4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8000ed8:	dc02      	bgt.n	8000ee0 <HAL_TIM_PeriodElapsedCallback+0xb0>
		motor3.speed = -65535;
 8000eda:	4b2a      	ldr	r3, [pc, #168]	; (8000f84 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8000edc:	4a2a      	ldr	r2, [pc, #168]	; (8000f88 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8000ede:	605a      	str	r2, [r3, #4]
	}

	// Change PWM duty cycle by motor speed
	if (motor1.speed > 0) {
 8000ee0:	4b24      	ldr	r3, [pc, #144]	; (8000f74 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8000ee2:	685b      	ldr	r3, [r3, #4]
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	dd09      	ble.n	8000efc <HAL_TIM_PeriodElapsedCallback+0xcc>
		TIM2->CCR1 = motor1.speed;
 8000ee8:	4b22      	ldr	r3, [pc, #136]	; (8000f74 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8000eea:	685a      	ldr	r2, [r3, #4]
 8000eec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ef0:	635a      	str	r2, [r3, #52]	; 0x34
		TIM2->CCR2 = 0;
 8000ef2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	639a      	str	r2, [r3, #56]	; 0x38
 8000efa:	e009      	b.n	8000f10 <HAL_TIM_PeriodElapsedCallback+0xe0>
	}
	else {
		TIM2->CCR1 = 0;
 8000efc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f00:	2200      	movs	r2, #0
 8000f02:	635a      	str	r2, [r3, #52]	; 0x34
		TIM2->CCR2 = -motor1.speed;
 8000f04:	4b1b      	ldr	r3, [pc, #108]	; (8000f74 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8000f06:	685b      	ldr	r3, [r3, #4]
 8000f08:	425a      	negs	r2, r3
 8000f0a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f0e:	639a      	str	r2, [r3, #56]	; 0x38
	}

	if (motor2.speed > 0) {
 8000f10:	4b1a      	ldr	r3, [pc, #104]	; (8000f7c <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8000f12:	685b      	ldr	r3, [r3, #4]
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	dd09      	ble.n	8000f2c <HAL_TIM_PeriodElapsedCallback+0xfc>
		TIM2->CCR3 = motor2.speed;
 8000f18:	4b18      	ldr	r3, [pc, #96]	; (8000f7c <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8000f1a:	685a      	ldr	r2, [r3, #4]
 8000f1c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f20:	63da      	str	r2, [r3, #60]	; 0x3c
		TIM2->CCR4 = 0;
 8000f22:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f26:	2200      	movs	r2, #0
 8000f28:	641a      	str	r2, [r3, #64]	; 0x40
 8000f2a:	e009      	b.n	8000f40 <HAL_TIM_PeriodElapsedCallback+0x110>
	}
	else {
		TIM2->CCR3 = 0;
 8000f2c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f30:	2200      	movs	r2, #0
 8000f32:	63da      	str	r2, [r3, #60]	; 0x3c
		TIM2->CCR4 = -motor2.speed;
 8000f34:	4b11      	ldr	r3, [pc, #68]	; (8000f7c <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8000f36:	685b      	ldr	r3, [r3, #4]
 8000f38:	425a      	negs	r2, r3
 8000f3a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f3e:	641a      	str	r2, [r3, #64]	; 0x40
	}

	if (motor3.speed > 0) {
 8000f40:	4b10      	ldr	r3, [pc, #64]	; (8000f84 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8000f42:	685b      	ldr	r3, [r3, #4]
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	dd07      	ble.n	8000f58 <HAL_TIM_PeriodElapsedCallback+0x128>
		TIM16->CCR1 = motor3.speed;
 8000f48:	4b0e      	ldr	r3, [pc, #56]	; (8000f84 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8000f4a:	685a      	ldr	r2, [r3, #4]
 8000f4c:	4b0f      	ldr	r3, [pc, #60]	; (8000f8c <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8000f4e:	635a      	str	r2, [r3, #52]	; 0x34
		TIM17->CCR1 = 0;
 8000f50:	4b0f      	ldr	r3, [pc, #60]	; (8000f90 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	635a      	str	r2, [r3, #52]	; 0x34
	}
	else {
		TIM16->CCR1 = 0;
		TIM17->CCR1 = -motor3.speed;
	}
}
 8000f56:	e007      	b.n	8000f68 <HAL_TIM_PeriodElapsedCallback+0x138>
		TIM16->CCR1 = 0;
 8000f58:	4b0c      	ldr	r3, [pc, #48]	; (8000f8c <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	635a      	str	r2, [r3, #52]	; 0x34
		TIM17->CCR1 = -motor3.speed;
 8000f5e:	4b09      	ldr	r3, [pc, #36]	; (8000f84 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8000f60:	685b      	ldr	r3, [r3, #4]
 8000f62:	425a      	negs	r2, r3
 8000f64:	4b0a      	ldr	r3, [pc, #40]	; (8000f90 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8000f66:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000f68:	bf00      	nop
 8000f6a:	3708      	adds	r7, #8
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	40012c00 	.word	0x40012c00
 8000f74:	20000000 	.word	0x20000000
 8000f78:	40000400 	.word	0x40000400
 8000f7c:	2000001c 	.word	0x2000001c
 8000f80:	40000800 	.word	0x40000800
 8000f84:	20000038 	.word	0x20000038
 8000f88:	ffff0001 	.word	0xffff0001
 8000f8c:	40014400 	.word	0x40014400
 8000f90:	40014800 	.word	0x40014800

08000f94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000f98:	bf00      	nop
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr
	...

08000fa4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b082      	sub	sp, #8
 8000fa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000faa:	4b0f      	ldr	r3, [pc, #60]	; (8000fe8 <HAL_MspInit+0x44>)
 8000fac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fae:	4a0e      	ldr	r2, [pc, #56]	; (8000fe8 <HAL_MspInit+0x44>)
 8000fb0:	f043 0301 	orr.w	r3, r3, #1
 8000fb4:	6613      	str	r3, [r2, #96]	; 0x60
 8000fb6:	4b0c      	ldr	r3, [pc, #48]	; (8000fe8 <HAL_MspInit+0x44>)
 8000fb8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fba:	f003 0301 	and.w	r3, r3, #1
 8000fbe:	607b      	str	r3, [r7, #4]
 8000fc0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fc2:	4b09      	ldr	r3, [pc, #36]	; (8000fe8 <HAL_MspInit+0x44>)
 8000fc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fc6:	4a08      	ldr	r2, [pc, #32]	; (8000fe8 <HAL_MspInit+0x44>)
 8000fc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fcc:	6593      	str	r3, [r2, #88]	; 0x58
 8000fce:	4b06      	ldr	r3, [pc, #24]	; (8000fe8 <HAL_MspInit+0x44>)
 8000fd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fd6:	603b      	str	r3, [r7, #0]
 8000fd8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000fda:	f002 f9df 	bl	800339c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fde:	bf00      	nop
 8000fe0:	3708      	adds	r7, #8
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	40021000 	.word	0x40021000

08000fec <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b08e      	sub	sp, #56	; 0x38
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ff4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	601a      	str	r2, [r3, #0]
 8000ffc:	605a      	str	r2, [r3, #4]
 8000ffe:	609a      	str	r2, [r3, #8]
 8001000:	60da      	str	r2, [r3, #12]
 8001002:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	4a46      	ldr	r2, [pc, #280]	; (8001124 <HAL_TIM_Encoder_MspInit+0x138>)
 800100a:	4293      	cmp	r3, r2
 800100c:	d12a      	bne.n	8001064 <HAL_TIM_Encoder_MspInit+0x78>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800100e:	4b46      	ldr	r3, [pc, #280]	; (8001128 <HAL_TIM_Encoder_MspInit+0x13c>)
 8001010:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001012:	4a45      	ldr	r2, [pc, #276]	; (8001128 <HAL_TIM_Encoder_MspInit+0x13c>)
 8001014:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001018:	6613      	str	r3, [r2, #96]	; 0x60
 800101a:	4b43      	ldr	r3, [pc, #268]	; (8001128 <HAL_TIM_Encoder_MspInit+0x13c>)
 800101c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800101e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001022:	623b      	str	r3, [r7, #32]
 8001024:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001026:	4b40      	ldr	r3, [pc, #256]	; (8001128 <HAL_TIM_Encoder_MspInit+0x13c>)
 8001028:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800102a:	4a3f      	ldr	r2, [pc, #252]	; (8001128 <HAL_TIM_Encoder_MspInit+0x13c>)
 800102c:	f043 0301 	orr.w	r3, r3, #1
 8001030:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001032:	4b3d      	ldr	r3, [pc, #244]	; (8001128 <HAL_TIM_Encoder_MspInit+0x13c>)
 8001034:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001036:	f003 0301 	and.w	r3, r3, #1
 800103a:	61fb      	str	r3, [r7, #28]
 800103c:	69fb      	ldr	r3, [r7, #28]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800103e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001042:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001044:	2302      	movs	r3, #2
 8001046:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001048:	2300      	movs	r3, #0
 800104a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800104c:	2300      	movs	r3, #0
 800104e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001050:	2306      	movs	r3, #6
 8001052:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001054:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001058:	4619      	mov	r1, r3
 800105a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800105e:	f000 fbdd 	bl	800181c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001062:	e05a      	b.n	800111a <HAL_TIM_Encoder_MspInit+0x12e>
  else if(htim_encoder->Instance==TIM3)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	4a30      	ldr	r2, [pc, #192]	; (800112c <HAL_TIM_Encoder_MspInit+0x140>)
 800106a:	4293      	cmp	r3, r2
 800106c:	d128      	bne.n	80010c0 <HAL_TIM_Encoder_MspInit+0xd4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800106e:	4b2e      	ldr	r3, [pc, #184]	; (8001128 <HAL_TIM_Encoder_MspInit+0x13c>)
 8001070:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001072:	4a2d      	ldr	r2, [pc, #180]	; (8001128 <HAL_TIM_Encoder_MspInit+0x13c>)
 8001074:	f043 0302 	orr.w	r3, r3, #2
 8001078:	6593      	str	r3, [r2, #88]	; 0x58
 800107a:	4b2b      	ldr	r3, [pc, #172]	; (8001128 <HAL_TIM_Encoder_MspInit+0x13c>)
 800107c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800107e:	f003 0302 	and.w	r3, r3, #2
 8001082:	61bb      	str	r3, [r7, #24]
 8001084:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001086:	4b28      	ldr	r3, [pc, #160]	; (8001128 <HAL_TIM_Encoder_MspInit+0x13c>)
 8001088:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800108a:	4a27      	ldr	r2, [pc, #156]	; (8001128 <HAL_TIM_Encoder_MspInit+0x13c>)
 800108c:	f043 0302 	orr.w	r3, r3, #2
 8001090:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001092:	4b25      	ldr	r3, [pc, #148]	; (8001128 <HAL_TIM_Encoder_MspInit+0x13c>)
 8001094:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001096:	f003 0302 	and.w	r3, r3, #2
 800109a:	617b      	str	r3, [r7, #20]
 800109c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800109e:	2330      	movs	r3, #48	; 0x30
 80010a0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010a2:	2302      	movs	r3, #2
 80010a4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a6:	2300      	movs	r3, #0
 80010a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010aa:	2300      	movs	r3, #0
 80010ac:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80010ae:	2302      	movs	r3, #2
 80010b0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010b6:	4619      	mov	r1, r3
 80010b8:	481d      	ldr	r0, [pc, #116]	; (8001130 <HAL_TIM_Encoder_MspInit+0x144>)
 80010ba:	f000 fbaf 	bl	800181c <HAL_GPIO_Init>
}
 80010be:	e02c      	b.n	800111a <HAL_TIM_Encoder_MspInit+0x12e>
  else if(htim_encoder->Instance==TIM4)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4a1b      	ldr	r2, [pc, #108]	; (8001134 <HAL_TIM_Encoder_MspInit+0x148>)
 80010c6:	4293      	cmp	r3, r2
 80010c8:	d127      	bne.n	800111a <HAL_TIM_Encoder_MspInit+0x12e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80010ca:	4b17      	ldr	r3, [pc, #92]	; (8001128 <HAL_TIM_Encoder_MspInit+0x13c>)
 80010cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010ce:	4a16      	ldr	r2, [pc, #88]	; (8001128 <HAL_TIM_Encoder_MspInit+0x13c>)
 80010d0:	f043 0304 	orr.w	r3, r3, #4
 80010d4:	6593      	str	r3, [r2, #88]	; 0x58
 80010d6:	4b14      	ldr	r3, [pc, #80]	; (8001128 <HAL_TIM_Encoder_MspInit+0x13c>)
 80010d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010da:	f003 0304 	and.w	r3, r3, #4
 80010de:	613b      	str	r3, [r7, #16]
 80010e0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010e2:	4b11      	ldr	r3, [pc, #68]	; (8001128 <HAL_TIM_Encoder_MspInit+0x13c>)
 80010e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010e6:	4a10      	ldr	r2, [pc, #64]	; (8001128 <HAL_TIM_Encoder_MspInit+0x13c>)
 80010e8:	f043 0302 	orr.w	r3, r3, #2
 80010ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010ee:	4b0e      	ldr	r3, [pc, #56]	; (8001128 <HAL_TIM_Encoder_MspInit+0x13c>)
 80010f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010f2:	f003 0302 	and.w	r3, r3, #2
 80010f6:	60fb      	str	r3, [r7, #12]
 80010f8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80010fa:	23c0      	movs	r3, #192	; 0xc0
 80010fc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010fe:	2302      	movs	r3, #2
 8001100:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001102:	2300      	movs	r3, #0
 8001104:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001106:	2300      	movs	r3, #0
 8001108:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800110a:	2302      	movs	r3, #2
 800110c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800110e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001112:	4619      	mov	r1, r3
 8001114:	4806      	ldr	r0, [pc, #24]	; (8001130 <HAL_TIM_Encoder_MspInit+0x144>)
 8001116:	f000 fb81 	bl	800181c <HAL_GPIO_Init>
}
 800111a:	bf00      	nop
 800111c:	3738      	adds	r7, #56	; 0x38
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	40012c00 	.word	0x40012c00
 8001128:	40021000 	.word	0x40021000
 800112c:	40000400 	.word	0x40000400
 8001130:	48000400 	.word	0x48000400
 8001134:	40000800 	.word	0x40000800

08001138 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001138:	b480      	push	{r7}
 800113a:	b087      	sub	sp, #28
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001148:	d10c      	bne.n	8001164 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800114a:	4b1b      	ldr	r3, [pc, #108]	; (80011b8 <HAL_TIM_PWM_MspInit+0x80>)
 800114c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800114e:	4a1a      	ldr	r2, [pc, #104]	; (80011b8 <HAL_TIM_PWM_MspInit+0x80>)
 8001150:	f043 0301 	orr.w	r3, r3, #1
 8001154:	6593      	str	r3, [r2, #88]	; 0x58
 8001156:	4b18      	ldr	r3, [pc, #96]	; (80011b8 <HAL_TIM_PWM_MspInit+0x80>)
 8001158:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800115a:	f003 0301 	and.w	r3, r3, #1
 800115e:	617b      	str	r3, [r7, #20]
 8001160:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8001162:	e022      	b.n	80011aa <HAL_TIM_PWM_MspInit+0x72>
  else if(htim_pwm->Instance==TIM8)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	4a14      	ldr	r2, [pc, #80]	; (80011bc <HAL_TIM_PWM_MspInit+0x84>)
 800116a:	4293      	cmp	r3, r2
 800116c:	d10c      	bne.n	8001188 <HAL_TIM_PWM_MspInit+0x50>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800116e:	4b12      	ldr	r3, [pc, #72]	; (80011b8 <HAL_TIM_PWM_MspInit+0x80>)
 8001170:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001172:	4a11      	ldr	r2, [pc, #68]	; (80011b8 <HAL_TIM_PWM_MspInit+0x80>)
 8001174:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001178:	6613      	str	r3, [r2, #96]	; 0x60
 800117a:	4b0f      	ldr	r3, [pc, #60]	; (80011b8 <HAL_TIM_PWM_MspInit+0x80>)
 800117c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800117e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001182:	613b      	str	r3, [r7, #16]
 8001184:	693b      	ldr	r3, [r7, #16]
}
 8001186:	e010      	b.n	80011aa <HAL_TIM_PWM_MspInit+0x72>
  else if(htim_pwm->Instance==TIM15)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4a0c      	ldr	r2, [pc, #48]	; (80011c0 <HAL_TIM_PWM_MspInit+0x88>)
 800118e:	4293      	cmp	r3, r2
 8001190:	d10b      	bne.n	80011aa <HAL_TIM_PWM_MspInit+0x72>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8001192:	4b09      	ldr	r3, [pc, #36]	; (80011b8 <HAL_TIM_PWM_MspInit+0x80>)
 8001194:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001196:	4a08      	ldr	r2, [pc, #32]	; (80011b8 <HAL_TIM_PWM_MspInit+0x80>)
 8001198:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800119c:	6613      	str	r3, [r2, #96]	; 0x60
 800119e:	4b06      	ldr	r3, [pc, #24]	; (80011b8 <HAL_TIM_PWM_MspInit+0x80>)
 80011a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011a6:	60fb      	str	r3, [r7, #12]
 80011a8:	68fb      	ldr	r3, [r7, #12]
}
 80011aa:	bf00      	nop
 80011ac:	371c      	adds	r7, #28
 80011ae:	46bd      	mov	sp, r7
 80011b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b4:	4770      	bx	lr
 80011b6:	bf00      	nop
 80011b8:	40021000 	.word	0x40021000
 80011bc:	40013400 	.word	0x40013400
 80011c0:	40014000 	.word	0x40014000

080011c4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b086      	sub	sp, #24
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4a1f      	ldr	r2, [pc, #124]	; (8001250 <HAL_TIM_Base_MspInit+0x8c>)
 80011d2:	4293      	cmp	r3, r2
 80011d4:	d114      	bne.n	8001200 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80011d6:	4b1f      	ldr	r3, [pc, #124]	; (8001254 <HAL_TIM_Base_MspInit+0x90>)
 80011d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011da:	4a1e      	ldr	r2, [pc, #120]	; (8001254 <HAL_TIM_Base_MspInit+0x90>)
 80011dc:	f043 0310 	orr.w	r3, r3, #16
 80011e0:	6593      	str	r3, [r2, #88]	; 0x58
 80011e2:	4b1c      	ldr	r3, [pc, #112]	; (8001254 <HAL_TIM_Base_MspInit+0x90>)
 80011e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011e6:	f003 0310 	and.w	r3, r3, #16
 80011ea:	617b      	str	r3, [r7, #20]
 80011ec:	697b      	ldr	r3, [r7, #20]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80011ee:	2200      	movs	r2, #0
 80011f0:	2100      	movs	r1, #0
 80011f2:	2036      	movs	r0, #54	; 0x36
 80011f4:	f000 fadd 	bl	80017b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80011f8:	2036      	movs	r0, #54	; 0x36
 80011fa:	f000 faf4 	bl	80017e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 80011fe:	e022      	b.n	8001246 <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM16)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	4a14      	ldr	r2, [pc, #80]	; (8001258 <HAL_TIM_Base_MspInit+0x94>)
 8001206:	4293      	cmp	r3, r2
 8001208:	d10c      	bne.n	8001224 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM16_CLK_ENABLE();
 800120a:	4b12      	ldr	r3, [pc, #72]	; (8001254 <HAL_TIM_Base_MspInit+0x90>)
 800120c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800120e:	4a11      	ldr	r2, [pc, #68]	; (8001254 <HAL_TIM_Base_MspInit+0x90>)
 8001210:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001214:	6613      	str	r3, [r2, #96]	; 0x60
 8001216:	4b0f      	ldr	r3, [pc, #60]	; (8001254 <HAL_TIM_Base_MspInit+0x90>)
 8001218:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800121a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800121e:	613b      	str	r3, [r7, #16]
 8001220:	693b      	ldr	r3, [r7, #16]
}
 8001222:	e010      	b.n	8001246 <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM17)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4a0c      	ldr	r2, [pc, #48]	; (800125c <HAL_TIM_Base_MspInit+0x98>)
 800122a:	4293      	cmp	r3, r2
 800122c:	d10b      	bne.n	8001246 <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM17_CLK_ENABLE();
 800122e:	4b09      	ldr	r3, [pc, #36]	; (8001254 <HAL_TIM_Base_MspInit+0x90>)
 8001230:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001232:	4a08      	ldr	r2, [pc, #32]	; (8001254 <HAL_TIM_Base_MspInit+0x90>)
 8001234:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001238:	6613      	str	r3, [r2, #96]	; 0x60
 800123a:	4b06      	ldr	r3, [pc, #24]	; (8001254 <HAL_TIM_Base_MspInit+0x90>)
 800123c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800123e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001242:	60fb      	str	r3, [r7, #12]
 8001244:	68fb      	ldr	r3, [r7, #12]
}
 8001246:	bf00      	nop
 8001248:	3718      	adds	r7, #24
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	40001000 	.word	0x40001000
 8001254:	40021000 	.word	0x40021000
 8001258:	40014400 	.word	0x40014400
 800125c:	40014800 	.word	0x40014800

08001260 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b08c      	sub	sp, #48	; 0x30
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001268:	f107 031c 	add.w	r3, r7, #28
 800126c:	2200      	movs	r2, #0
 800126e:	601a      	str	r2, [r3, #0]
 8001270:	605a      	str	r2, [r3, #4]
 8001272:	609a      	str	r2, [r3, #8]
 8001274:	60da      	str	r2, [r3, #12]
 8001276:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001280:	d12f      	bne.n	80012e2 <HAL_TIM_MspPostInit+0x82>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001282:	4b60      	ldr	r3, [pc, #384]	; (8001404 <HAL_TIM_MspPostInit+0x1a4>)
 8001284:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001286:	4a5f      	ldr	r2, [pc, #380]	; (8001404 <HAL_TIM_MspPostInit+0x1a4>)
 8001288:	f043 0301 	orr.w	r3, r3, #1
 800128c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800128e:	4b5d      	ldr	r3, [pc, #372]	; (8001404 <HAL_TIM_MspPostInit+0x1a4>)
 8001290:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001292:	f003 0301 	and.w	r3, r3, #1
 8001296:	61bb      	str	r3, [r7, #24]
 8001298:	69bb      	ldr	r3, [r7, #24]
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA10     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 800129a:	2307      	movs	r3, #7
 800129c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800129e:	2302      	movs	r3, #2
 80012a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a2:	2300      	movs	r3, #0
 80012a4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012a6:	2300      	movs	r3, #0
 80012a8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80012aa:	2301      	movs	r3, #1
 80012ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012ae:	f107 031c 	add.w	r3, r7, #28
 80012b2:	4619      	mov	r1, r3
 80012b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012b8:	f000 fab0 	bl	800181c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80012bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012c2:	2302      	movs	r3, #2
 80012c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c6:	2300      	movs	r3, #0
 80012c8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ca:	2300      	movs	r3, #0
 80012cc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM2;
 80012ce:	230a      	movs	r3, #10
 80012d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012d2:	f107 031c 	add.w	r3, r7, #28
 80012d6:	4619      	mov	r1, r3
 80012d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012dc:	f000 fa9e 	bl	800181c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 80012e0:	e08b      	b.n	80013fa <HAL_TIM_MspPostInit+0x19a>
  else if(htim->Instance==TIM8)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	4a48      	ldr	r2, [pc, #288]	; (8001408 <HAL_TIM_MspPostInit+0x1a8>)
 80012e8:	4293      	cmp	r3, r2
 80012ea:	d11e      	bne.n	800132a <HAL_TIM_MspPostInit+0xca>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ec:	4b45      	ldr	r3, [pc, #276]	; (8001404 <HAL_TIM_MspPostInit+0x1a4>)
 80012ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012f0:	4a44      	ldr	r2, [pc, #272]	; (8001404 <HAL_TIM_MspPostInit+0x1a4>)
 80012f2:	f043 0301 	orr.w	r3, r3, #1
 80012f6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012f8:	4b42      	ldr	r3, [pc, #264]	; (8001404 <HAL_TIM_MspPostInit+0x1a4>)
 80012fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012fc:	f003 0301 	and.w	r3, r3, #1
 8001300:	617b      	str	r3, [r7, #20]
 8001302:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001304:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001308:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800130a:	2302      	movs	r3, #2
 800130c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130e:	2300      	movs	r3, #0
 8001310:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001312:	2300      	movs	r3, #0
 8001314:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM8;
 8001316:	2302      	movs	r3, #2
 8001318:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800131a:	f107 031c 	add.w	r3, r7, #28
 800131e:	4619      	mov	r1, r3
 8001320:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001324:	f000 fa7a 	bl	800181c <HAL_GPIO_Init>
}
 8001328:	e067      	b.n	80013fa <HAL_TIM_MspPostInit+0x19a>
  else if(htim->Instance==TIM15)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	4a37      	ldr	r2, [pc, #220]	; (800140c <HAL_TIM_MspPostInit+0x1ac>)
 8001330:	4293      	cmp	r3, r2
 8001332:	d11d      	bne.n	8001370 <HAL_TIM_MspPostInit+0x110>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001334:	4b33      	ldr	r3, [pc, #204]	; (8001404 <HAL_TIM_MspPostInit+0x1a4>)
 8001336:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001338:	4a32      	ldr	r2, [pc, #200]	; (8001404 <HAL_TIM_MspPostInit+0x1a4>)
 800133a:	f043 0301 	orr.w	r3, r3, #1
 800133e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001340:	4b30      	ldr	r3, [pc, #192]	; (8001404 <HAL_TIM_MspPostInit+0x1a4>)
 8001342:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001344:	f003 0301 	and.w	r3, r3, #1
 8001348:	613b      	str	r3, [r7, #16]
 800134a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800134c:	2308      	movs	r3, #8
 800134e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001350:	2302      	movs	r3, #2
 8001352:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001354:	2300      	movs	r3, #0
 8001356:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001358:	2300      	movs	r3, #0
 800135a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM15;
 800135c:	2309      	movs	r3, #9
 800135e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001360:	f107 031c 	add.w	r3, r7, #28
 8001364:	4619      	mov	r1, r3
 8001366:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800136a:	f000 fa57 	bl	800181c <HAL_GPIO_Init>
}
 800136e:	e044      	b.n	80013fa <HAL_TIM_MspPostInit+0x19a>
  else if(htim->Instance==TIM16)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4a26      	ldr	r2, [pc, #152]	; (8001410 <HAL_TIM_MspPostInit+0x1b0>)
 8001376:	4293      	cmp	r3, r2
 8001378:	d11d      	bne.n	80013b6 <HAL_TIM_MspPostInit+0x156>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800137a:	4b22      	ldr	r3, [pc, #136]	; (8001404 <HAL_TIM_MspPostInit+0x1a4>)
 800137c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800137e:	4a21      	ldr	r2, [pc, #132]	; (8001404 <HAL_TIM_MspPostInit+0x1a4>)
 8001380:	f043 0301 	orr.w	r3, r3, #1
 8001384:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001386:	4b1f      	ldr	r3, [pc, #124]	; (8001404 <HAL_TIM_MspPostInit+0x1a4>)
 8001388:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800138a:	f003 0301 	and.w	r3, r3, #1
 800138e:	60fb      	str	r3, [r7, #12]
 8001390:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001392:	2340      	movs	r3, #64	; 0x40
 8001394:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001396:	2302      	movs	r3, #2
 8001398:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139a:	2300      	movs	r3, #0
 800139c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800139e:	2300      	movs	r3, #0
 80013a0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 80013a2:	2301      	movs	r3, #1
 80013a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013a6:	f107 031c 	add.w	r3, r7, #28
 80013aa:	4619      	mov	r1, r3
 80013ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013b0:	f000 fa34 	bl	800181c <HAL_GPIO_Init>
}
 80013b4:	e021      	b.n	80013fa <HAL_TIM_MspPostInit+0x19a>
  else if(htim->Instance==TIM17)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	4a16      	ldr	r2, [pc, #88]	; (8001414 <HAL_TIM_MspPostInit+0x1b4>)
 80013bc:	4293      	cmp	r3, r2
 80013be:	d11c      	bne.n	80013fa <HAL_TIM_MspPostInit+0x19a>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013c0:	4b10      	ldr	r3, [pc, #64]	; (8001404 <HAL_TIM_MspPostInit+0x1a4>)
 80013c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013c4:	4a0f      	ldr	r2, [pc, #60]	; (8001404 <HAL_TIM_MspPostInit+0x1a4>)
 80013c6:	f043 0301 	orr.w	r3, r3, #1
 80013ca:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013cc:	4b0d      	ldr	r3, [pc, #52]	; (8001404 <HAL_TIM_MspPostInit+0x1a4>)
 80013ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013d0:	f003 0301 	and.w	r3, r3, #1
 80013d4:	60bb      	str	r3, [r7, #8]
 80013d6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80013d8:	2380      	movs	r3, #128	; 0x80
 80013da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013dc:	2302      	movs	r3, #2
 80013de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e0:	2300      	movs	r3, #0
 80013e2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013e4:	2300      	movs	r3, #0
 80013e6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM17;
 80013e8:	2301      	movs	r3, #1
 80013ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ec:	f107 031c 	add.w	r3, r7, #28
 80013f0:	4619      	mov	r1, r3
 80013f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013f6:	f000 fa11 	bl	800181c <HAL_GPIO_Init>
}
 80013fa:	bf00      	nop
 80013fc:	3730      	adds	r7, #48	; 0x30
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	40021000 	.word	0x40021000
 8001408:	40013400 	.word	0x40013400
 800140c:	40014000 	.word	0x40014000
 8001410:	40014400 	.word	0x40014400
 8001414:	40014800 	.word	0x40014800

08001418 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800141c:	bf00      	nop
 800141e:	46bd      	mov	sp, r7
 8001420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001424:	4770      	bx	lr

08001426 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001426:	b480      	push	{r7}
 8001428:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800142a:	e7fe      	b.n	800142a <HardFault_Handler+0x4>

0800142c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001430:	e7fe      	b.n	8001430 <MemManage_Handler+0x4>

08001432 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001432:	b480      	push	{r7}
 8001434:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001436:	e7fe      	b.n	8001436 <BusFault_Handler+0x4>

08001438 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001438:	b480      	push	{r7}
 800143a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800143c:	e7fe      	b.n	800143c <UsageFault_Handler+0x4>

0800143e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800143e:	b480      	push	{r7}
 8001440:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001442:	bf00      	nop
 8001444:	46bd      	mov	sp, r7
 8001446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144a:	4770      	bx	lr

0800144c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800144c:	b480      	push	{r7}
 800144e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001450:	bf00      	nop
 8001452:	46bd      	mov	sp, r7
 8001454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001458:	4770      	bx	lr

0800145a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800145a:	b480      	push	{r7}
 800145c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800145e:	bf00      	nop
 8001460:	46bd      	mov	sp, r7
 8001462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001466:	4770      	bx	lr

08001468 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800146c:	f000 f8a8 	bl	80015c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001470:	bf00      	nop
 8001472:	bd80      	pop	{r7, pc}

08001474 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001478:	4802      	ldr	r0, [pc, #8]	; (8001484 <USB_LP_IRQHandler+0x10>)
 800147a:	f000 fc8a 	bl	8001d92 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 800147e:	bf00      	nop
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	20001374 	.word	0x20001374

08001488 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800148c:	4802      	ldr	r0, [pc, #8]	; (8001498 <TIM6_DAC_IRQHandler+0x10>)
 800148e:	f003 f9ce 	bl	800482e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001492:	bf00      	nop
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	200005a0 	.word	0x200005a0

0800149c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800149c:	b480      	push	{r7}
 800149e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80014a0:	4b08      	ldr	r3, [pc, #32]	; (80014c4 <SystemInit+0x28>)
 80014a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014a6:	4a07      	ldr	r2, [pc, #28]	; (80014c4 <SystemInit+0x28>)
 80014a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80014b0:	4b04      	ldr	r3, [pc, #16]	; (80014c4 <SystemInit+0x28>)
 80014b2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80014b6:	609a      	str	r2, [r3, #8]
#endif
}
 80014b8:	bf00      	nop
 80014ba:	46bd      	mov	sp, r7
 80014bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c0:	4770      	bx	lr
 80014c2:	bf00      	nop
 80014c4:	e000ed00 	.word	0xe000ed00

080014c8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80014c8:	480d      	ldr	r0, [pc, #52]	; (8001500 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80014ca:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014cc:	480d      	ldr	r0, [pc, #52]	; (8001504 <LoopForever+0x6>)
  ldr r1, =_edata
 80014ce:	490e      	ldr	r1, [pc, #56]	; (8001508 <LoopForever+0xa>)
  ldr r2, =_sidata
 80014d0:	4a0e      	ldr	r2, [pc, #56]	; (800150c <LoopForever+0xe>)
  movs r3, #0
 80014d2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80014d4:	e002      	b.n	80014dc <LoopCopyDataInit>

080014d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014da:	3304      	adds	r3, #4

080014dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014e0:	d3f9      	bcc.n	80014d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014e2:	4a0b      	ldr	r2, [pc, #44]	; (8001510 <LoopForever+0x12>)
  ldr r4, =_ebss
 80014e4:	4c0b      	ldr	r4, [pc, #44]	; (8001514 <LoopForever+0x16>)
  movs r3, #0
 80014e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014e8:	e001      	b.n	80014ee <LoopFillZerobss>

080014ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014ec:	3204      	adds	r2, #4

080014ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014f0:	d3fb      	bcc.n	80014ea <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80014f2:	f7ff ffd3 	bl	800149c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80014f6:	f008 fb07 	bl	8009b08 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80014fa:	f7fe fead 	bl	8000258 <main>

080014fe <LoopForever>:

LoopForever:
    b LoopForever
 80014fe:	e7fe      	b.n	80014fe <LoopForever>
  ldr   r0, =_estack
 8001500:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001504:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001508:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 800150c:	08009bf0 	.word	0x08009bf0
  ldr r2, =_sbss
 8001510:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8001514:	20001668 	.word	0x20001668

08001518 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001518:	e7fe      	b.n	8001518 <ADC1_2_IRQHandler>

0800151a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800151a:	b580      	push	{r7, lr}
 800151c:	b082      	sub	sp, #8
 800151e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001520:	2300      	movs	r3, #0
 8001522:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001524:	2003      	movs	r0, #3
 8001526:	f000 f939 	bl	800179c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800152a:	2000      	movs	r0, #0
 800152c:	f000 f80e 	bl	800154c <HAL_InitTick>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d002      	beq.n	800153c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001536:	2301      	movs	r3, #1
 8001538:	71fb      	strb	r3, [r7, #7]
 800153a:	e001      	b.n	8001540 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800153c:	f7ff fd32 	bl	8000fa4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001540:	79fb      	ldrb	r3, [r7, #7]

}
 8001542:	4618      	mov	r0, r3
 8001544:	3708      	adds	r7, #8
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
	...

0800154c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b084      	sub	sp, #16
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001554:	2300      	movs	r3, #0
 8001556:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001558:	4b16      	ldr	r3, [pc, #88]	; (80015b4 <HAL_InitTick+0x68>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	2b00      	cmp	r3, #0
 800155e:	d022      	beq.n	80015a6 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001560:	4b15      	ldr	r3, [pc, #84]	; (80015b8 <HAL_InitTick+0x6c>)
 8001562:	681a      	ldr	r2, [r3, #0]
 8001564:	4b13      	ldr	r3, [pc, #76]	; (80015b4 <HAL_InitTick+0x68>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800156c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001570:	fbb2 f3f3 	udiv	r3, r2, r3
 8001574:	4618      	mov	r0, r3
 8001576:	f000 f944 	bl	8001802 <HAL_SYSTICK_Config>
 800157a:	4603      	mov	r3, r0
 800157c:	2b00      	cmp	r3, #0
 800157e:	d10f      	bne.n	80015a0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	2b0f      	cmp	r3, #15
 8001584:	d809      	bhi.n	800159a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001586:	2200      	movs	r2, #0
 8001588:	6879      	ldr	r1, [r7, #4]
 800158a:	f04f 30ff 	mov.w	r0, #4294967295
 800158e:	f000 f910 	bl	80017b2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001592:	4a0a      	ldr	r2, [pc, #40]	; (80015bc <HAL_InitTick+0x70>)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	6013      	str	r3, [r2, #0]
 8001598:	e007      	b.n	80015aa <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800159a:	2301      	movs	r3, #1
 800159c:	73fb      	strb	r3, [r7, #15]
 800159e:	e004      	b.n	80015aa <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80015a0:	2301      	movs	r3, #1
 80015a2:	73fb      	strb	r3, [r7, #15]
 80015a4:	e001      	b.n	80015aa <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80015a6:	2301      	movs	r3, #1
 80015a8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80015aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80015ac:	4618      	mov	r0, r3
 80015ae:	3710      	adds	r7, #16
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}
 80015b4:	2000005c 	.word	0x2000005c
 80015b8:	20000054 	.word	0x20000054
 80015bc:	20000058 	.word	0x20000058

080015c0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015c0:	b480      	push	{r7}
 80015c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015c4:	4b05      	ldr	r3, [pc, #20]	; (80015dc <HAL_IncTick+0x1c>)
 80015c6:	681a      	ldr	r2, [r3, #0]
 80015c8:	4b05      	ldr	r3, [pc, #20]	; (80015e0 <HAL_IncTick+0x20>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4413      	add	r3, r2
 80015ce:	4a03      	ldr	r2, [pc, #12]	; (80015dc <HAL_IncTick+0x1c>)
 80015d0:	6013      	str	r3, [r2, #0]
}
 80015d2:	bf00      	nop
 80015d4:	46bd      	mov	sp, r7
 80015d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015da:	4770      	bx	lr
 80015dc:	200006d0 	.word	0x200006d0
 80015e0:	2000005c 	.word	0x2000005c

080015e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0
  return uwTick;
 80015e8:	4b03      	ldr	r3, [pc, #12]	; (80015f8 <HAL_GetTick+0x14>)
 80015ea:	681b      	ldr	r3, [r3, #0]
}
 80015ec:	4618      	mov	r0, r3
 80015ee:	46bd      	mov	sp, r7
 80015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f4:	4770      	bx	lr
 80015f6:	bf00      	nop
 80015f8:	200006d0 	.word	0x200006d0

080015fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015fc:	b480      	push	{r7}
 80015fe:	b085      	sub	sp, #20
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	f003 0307 	and.w	r3, r3, #7
 800160a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800160c:	4b0c      	ldr	r3, [pc, #48]	; (8001640 <__NVIC_SetPriorityGrouping+0x44>)
 800160e:	68db      	ldr	r3, [r3, #12]
 8001610:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001612:	68ba      	ldr	r2, [r7, #8]
 8001614:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001618:	4013      	ands	r3, r2
 800161a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001620:	68bb      	ldr	r3, [r7, #8]
 8001622:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001624:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001628:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800162c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800162e:	4a04      	ldr	r2, [pc, #16]	; (8001640 <__NVIC_SetPriorityGrouping+0x44>)
 8001630:	68bb      	ldr	r3, [r7, #8]
 8001632:	60d3      	str	r3, [r2, #12]
}
 8001634:	bf00      	nop
 8001636:	3714      	adds	r7, #20
 8001638:	46bd      	mov	sp, r7
 800163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163e:	4770      	bx	lr
 8001640:	e000ed00 	.word	0xe000ed00

08001644 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001644:	b480      	push	{r7}
 8001646:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001648:	4b04      	ldr	r3, [pc, #16]	; (800165c <__NVIC_GetPriorityGrouping+0x18>)
 800164a:	68db      	ldr	r3, [r3, #12]
 800164c:	0a1b      	lsrs	r3, r3, #8
 800164e:	f003 0307 	and.w	r3, r3, #7
}
 8001652:	4618      	mov	r0, r3
 8001654:	46bd      	mov	sp, r7
 8001656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165a:	4770      	bx	lr
 800165c:	e000ed00 	.word	0xe000ed00

08001660 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001660:	b480      	push	{r7}
 8001662:	b083      	sub	sp, #12
 8001664:	af00      	add	r7, sp, #0
 8001666:	4603      	mov	r3, r0
 8001668:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800166a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800166e:	2b00      	cmp	r3, #0
 8001670:	db0b      	blt.n	800168a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001672:	79fb      	ldrb	r3, [r7, #7]
 8001674:	f003 021f 	and.w	r2, r3, #31
 8001678:	4907      	ldr	r1, [pc, #28]	; (8001698 <__NVIC_EnableIRQ+0x38>)
 800167a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800167e:	095b      	lsrs	r3, r3, #5
 8001680:	2001      	movs	r0, #1
 8001682:	fa00 f202 	lsl.w	r2, r0, r2
 8001686:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800168a:	bf00      	nop
 800168c:	370c      	adds	r7, #12
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr
 8001696:	bf00      	nop
 8001698:	e000e100 	.word	0xe000e100

0800169c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800169c:	b480      	push	{r7}
 800169e:	b083      	sub	sp, #12
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	4603      	mov	r3, r0
 80016a4:	6039      	str	r1, [r7, #0]
 80016a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	db0a      	blt.n	80016c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	b2da      	uxtb	r2, r3
 80016b4:	490c      	ldr	r1, [pc, #48]	; (80016e8 <__NVIC_SetPriority+0x4c>)
 80016b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ba:	0112      	lsls	r2, r2, #4
 80016bc:	b2d2      	uxtb	r2, r2
 80016be:	440b      	add	r3, r1
 80016c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016c4:	e00a      	b.n	80016dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	b2da      	uxtb	r2, r3
 80016ca:	4908      	ldr	r1, [pc, #32]	; (80016ec <__NVIC_SetPriority+0x50>)
 80016cc:	79fb      	ldrb	r3, [r7, #7]
 80016ce:	f003 030f 	and.w	r3, r3, #15
 80016d2:	3b04      	subs	r3, #4
 80016d4:	0112      	lsls	r2, r2, #4
 80016d6:	b2d2      	uxtb	r2, r2
 80016d8:	440b      	add	r3, r1
 80016da:	761a      	strb	r2, [r3, #24]
}
 80016dc:	bf00      	nop
 80016de:	370c      	adds	r7, #12
 80016e0:	46bd      	mov	sp, r7
 80016e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e6:	4770      	bx	lr
 80016e8:	e000e100 	.word	0xe000e100
 80016ec:	e000ed00 	.word	0xe000ed00

080016f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b089      	sub	sp, #36	; 0x24
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	60f8      	str	r0, [r7, #12]
 80016f8:	60b9      	str	r1, [r7, #8]
 80016fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	f003 0307 	and.w	r3, r3, #7
 8001702:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001704:	69fb      	ldr	r3, [r7, #28]
 8001706:	f1c3 0307 	rsb	r3, r3, #7
 800170a:	2b04      	cmp	r3, #4
 800170c:	bf28      	it	cs
 800170e:	2304      	movcs	r3, #4
 8001710:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001712:	69fb      	ldr	r3, [r7, #28]
 8001714:	3304      	adds	r3, #4
 8001716:	2b06      	cmp	r3, #6
 8001718:	d902      	bls.n	8001720 <NVIC_EncodePriority+0x30>
 800171a:	69fb      	ldr	r3, [r7, #28]
 800171c:	3b03      	subs	r3, #3
 800171e:	e000      	b.n	8001722 <NVIC_EncodePriority+0x32>
 8001720:	2300      	movs	r3, #0
 8001722:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001724:	f04f 32ff 	mov.w	r2, #4294967295
 8001728:	69bb      	ldr	r3, [r7, #24]
 800172a:	fa02 f303 	lsl.w	r3, r2, r3
 800172e:	43da      	mvns	r2, r3
 8001730:	68bb      	ldr	r3, [r7, #8]
 8001732:	401a      	ands	r2, r3
 8001734:	697b      	ldr	r3, [r7, #20]
 8001736:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001738:	f04f 31ff 	mov.w	r1, #4294967295
 800173c:	697b      	ldr	r3, [r7, #20]
 800173e:	fa01 f303 	lsl.w	r3, r1, r3
 8001742:	43d9      	mvns	r1, r3
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001748:	4313      	orrs	r3, r2
         );
}
 800174a:	4618      	mov	r0, r3
 800174c:	3724      	adds	r7, #36	; 0x24
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr
	...

08001758 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b082      	sub	sp, #8
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	3b01      	subs	r3, #1
 8001764:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001768:	d301      	bcc.n	800176e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800176a:	2301      	movs	r3, #1
 800176c:	e00f      	b.n	800178e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800176e:	4a0a      	ldr	r2, [pc, #40]	; (8001798 <SysTick_Config+0x40>)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	3b01      	subs	r3, #1
 8001774:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001776:	210f      	movs	r1, #15
 8001778:	f04f 30ff 	mov.w	r0, #4294967295
 800177c:	f7ff ff8e 	bl	800169c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001780:	4b05      	ldr	r3, [pc, #20]	; (8001798 <SysTick_Config+0x40>)
 8001782:	2200      	movs	r2, #0
 8001784:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001786:	4b04      	ldr	r3, [pc, #16]	; (8001798 <SysTick_Config+0x40>)
 8001788:	2207      	movs	r2, #7
 800178a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800178c:	2300      	movs	r3, #0
}
 800178e:	4618      	mov	r0, r3
 8001790:	3708      	adds	r7, #8
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	e000e010 	.word	0xe000e010

0800179c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b082      	sub	sp, #8
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017a4:	6878      	ldr	r0, [r7, #4]
 80017a6:	f7ff ff29 	bl	80015fc <__NVIC_SetPriorityGrouping>
}
 80017aa:	bf00      	nop
 80017ac:	3708      	adds	r7, #8
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}

080017b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017b2:	b580      	push	{r7, lr}
 80017b4:	b086      	sub	sp, #24
 80017b6:	af00      	add	r7, sp, #0
 80017b8:	4603      	mov	r3, r0
 80017ba:	60b9      	str	r1, [r7, #8]
 80017bc:	607a      	str	r2, [r7, #4]
 80017be:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80017c0:	f7ff ff40 	bl	8001644 <__NVIC_GetPriorityGrouping>
 80017c4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017c6:	687a      	ldr	r2, [r7, #4]
 80017c8:	68b9      	ldr	r1, [r7, #8]
 80017ca:	6978      	ldr	r0, [r7, #20]
 80017cc:	f7ff ff90 	bl	80016f0 <NVIC_EncodePriority>
 80017d0:	4602      	mov	r2, r0
 80017d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017d6:	4611      	mov	r1, r2
 80017d8:	4618      	mov	r0, r3
 80017da:	f7ff ff5f 	bl	800169c <__NVIC_SetPriority>
}
 80017de:	bf00      	nop
 80017e0:	3718      	adds	r7, #24
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}

080017e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017e6:	b580      	push	{r7, lr}
 80017e8:	b082      	sub	sp, #8
 80017ea:	af00      	add	r7, sp, #0
 80017ec:	4603      	mov	r3, r0
 80017ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017f4:	4618      	mov	r0, r3
 80017f6:	f7ff ff33 	bl	8001660 <__NVIC_EnableIRQ>
}
 80017fa:	bf00      	nop
 80017fc:	3708      	adds	r7, #8
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}

08001802 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001802:	b580      	push	{r7, lr}
 8001804:	b082      	sub	sp, #8
 8001806:	af00      	add	r7, sp, #0
 8001808:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800180a:	6878      	ldr	r0, [r7, #4]
 800180c:	f7ff ffa4 	bl	8001758 <SysTick_Config>
 8001810:	4603      	mov	r3, r0
}
 8001812:	4618      	mov	r0, r3
 8001814:	3708      	adds	r7, #8
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}
	...

0800181c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800181c:	b480      	push	{r7}
 800181e:	b087      	sub	sp, #28
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
 8001824:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001826:	2300      	movs	r3, #0
 8001828:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800182a:	e15a      	b.n	8001ae2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	681a      	ldr	r2, [r3, #0]
 8001830:	2101      	movs	r1, #1
 8001832:	697b      	ldr	r3, [r7, #20]
 8001834:	fa01 f303 	lsl.w	r3, r1, r3
 8001838:	4013      	ands	r3, r2
 800183a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	2b00      	cmp	r3, #0
 8001840:	f000 814c 	beq.w	8001adc <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	2b01      	cmp	r3, #1
 800184a:	d00b      	beq.n	8001864 <HAL_GPIO_Init+0x48>
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	2b02      	cmp	r3, #2
 8001852:	d007      	beq.n	8001864 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001858:	2b11      	cmp	r3, #17
 800185a:	d003      	beq.n	8001864 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	2b12      	cmp	r3, #18
 8001862:	d130      	bne.n	80018c6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	689b      	ldr	r3, [r3, #8]
 8001868:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800186a:	697b      	ldr	r3, [r7, #20]
 800186c:	005b      	lsls	r3, r3, #1
 800186e:	2203      	movs	r2, #3
 8001870:	fa02 f303 	lsl.w	r3, r2, r3
 8001874:	43db      	mvns	r3, r3
 8001876:	693a      	ldr	r2, [r7, #16]
 8001878:	4013      	ands	r3, r2
 800187a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	68da      	ldr	r2, [r3, #12]
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	005b      	lsls	r3, r3, #1
 8001884:	fa02 f303 	lsl.w	r3, r2, r3
 8001888:	693a      	ldr	r2, [r7, #16]
 800188a:	4313      	orrs	r3, r2
 800188c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	693a      	ldr	r2, [r7, #16]
 8001892:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800189a:	2201      	movs	r2, #1
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	fa02 f303 	lsl.w	r3, r2, r3
 80018a2:	43db      	mvns	r3, r3
 80018a4:	693a      	ldr	r2, [r7, #16]
 80018a6:	4013      	ands	r3, r2
 80018a8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	091b      	lsrs	r3, r3, #4
 80018b0:	f003 0201 	and.w	r2, r3, #1
 80018b4:	697b      	ldr	r3, [r7, #20]
 80018b6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ba:	693a      	ldr	r2, [r7, #16]
 80018bc:	4313      	orrs	r3, r2
 80018be:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	693a      	ldr	r2, [r7, #16]
 80018c4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	68db      	ldr	r3, [r3, #12]
 80018ca:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80018cc:	697b      	ldr	r3, [r7, #20]
 80018ce:	005b      	lsls	r3, r3, #1
 80018d0:	2203      	movs	r2, #3
 80018d2:	fa02 f303 	lsl.w	r3, r2, r3
 80018d6:	43db      	mvns	r3, r3
 80018d8:	693a      	ldr	r2, [r7, #16]
 80018da:	4013      	ands	r3, r2
 80018dc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	689a      	ldr	r2, [r3, #8]
 80018e2:	697b      	ldr	r3, [r7, #20]
 80018e4:	005b      	lsls	r3, r3, #1
 80018e6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ea:	693a      	ldr	r2, [r7, #16]
 80018ec:	4313      	orrs	r3, r2
 80018ee:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	693a      	ldr	r2, [r7, #16]
 80018f4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	2b02      	cmp	r3, #2
 80018fc:	d003      	beq.n	8001906 <HAL_GPIO_Init+0xea>
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	2b12      	cmp	r3, #18
 8001904:	d123      	bne.n	800194e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001906:	697b      	ldr	r3, [r7, #20]
 8001908:	08da      	lsrs	r2, r3, #3
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	3208      	adds	r2, #8
 800190e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001912:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001914:	697b      	ldr	r3, [r7, #20]
 8001916:	f003 0307 	and.w	r3, r3, #7
 800191a:	009b      	lsls	r3, r3, #2
 800191c:	220f      	movs	r2, #15
 800191e:	fa02 f303 	lsl.w	r3, r2, r3
 8001922:	43db      	mvns	r3, r3
 8001924:	693a      	ldr	r2, [r7, #16]
 8001926:	4013      	ands	r3, r2
 8001928:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	691a      	ldr	r2, [r3, #16]
 800192e:	697b      	ldr	r3, [r7, #20]
 8001930:	f003 0307 	and.w	r3, r3, #7
 8001934:	009b      	lsls	r3, r3, #2
 8001936:	fa02 f303 	lsl.w	r3, r2, r3
 800193a:	693a      	ldr	r2, [r7, #16]
 800193c:	4313      	orrs	r3, r2
 800193e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001940:	697b      	ldr	r3, [r7, #20]
 8001942:	08da      	lsrs	r2, r3, #3
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	3208      	adds	r2, #8
 8001948:	6939      	ldr	r1, [r7, #16]
 800194a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	005b      	lsls	r3, r3, #1
 8001958:	2203      	movs	r2, #3
 800195a:	fa02 f303 	lsl.w	r3, r2, r3
 800195e:	43db      	mvns	r3, r3
 8001960:	693a      	ldr	r2, [r7, #16]
 8001962:	4013      	ands	r3, r2
 8001964:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	f003 0203 	and.w	r2, r3, #3
 800196e:	697b      	ldr	r3, [r7, #20]
 8001970:	005b      	lsls	r3, r3, #1
 8001972:	fa02 f303 	lsl.w	r3, r2, r3
 8001976:	693a      	ldr	r2, [r7, #16]
 8001978:	4313      	orrs	r3, r2
 800197a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	693a      	ldr	r2, [r7, #16]
 8001980:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800198a:	2b00      	cmp	r3, #0
 800198c:	f000 80a6 	beq.w	8001adc <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001990:	4b5b      	ldr	r3, [pc, #364]	; (8001b00 <HAL_GPIO_Init+0x2e4>)
 8001992:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001994:	4a5a      	ldr	r2, [pc, #360]	; (8001b00 <HAL_GPIO_Init+0x2e4>)
 8001996:	f043 0301 	orr.w	r3, r3, #1
 800199a:	6613      	str	r3, [r2, #96]	; 0x60
 800199c:	4b58      	ldr	r3, [pc, #352]	; (8001b00 <HAL_GPIO_Init+0x2e4>)
 800199e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019a0:	f003 0301 	and.w	r3, r3, #1
 80019a4:	60bb      	str	r3, [r7, #8]
 80019a6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80019a8:	4a56      	ldr	r2, [pc, #344]	; (8001b04 <HAL_GPIO_Init+0x2e8>)
 80019aa:	697b      	ldr	r3, [r7, #20]
 80019ac:	089b      	lsrs	r3, r3, #2
 80019ae:	3302      	adds	r3, #2
 80019b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019b4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80019b6:	697b      	ldr	r3, [r7, #20]
 80019b8:	f003 0303 	and.w	r3, r3, #3
 80019bc:	009b      	lsls	r3, r3, #2
 80019be:	220f      	movs	r2, #15
 80019c0:	fa02 f303 	lsl.w	r3, r2, r3
 80019c4:	43db      	mvns	r3, r3
 80019c6:	693a      	ldr	r2, [r7, #16]
 80019c8:	4013      	ands	r3, r2
 80019ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80019d2:	d01f      	beq.n	8001a14 <HAL_GPIO_Init+0x1f8>
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	4a4c      	ldr	r2, [pc, #304]	; (8001b08 <HAL_GPIO_Init+0x2ec>)
 80019d8:	4293      	cmp	r3, r2
 80019da:	d019      	beq.n	8001a10 <HAL_GPIO_Init+0x1f4>
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	4a4b      	ldr	r2, [pc, #300]	; (8001b0c <HAL_GPIO_Init+0x2f0>)
 80019e0:	4293      	cmp	r3, r2
 80019e2:	d013      	beq.n	8001a0c <HAL_GPIO_Init+0x1f0>
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	4a4a      	ldr	r2, [pc, #296]	; (8001b10 <HAL_GPIO_Init+0x2f4>)
 80019e8:	4293      	cmp	r3, r2
 80019ea:	d00d      	beq.n	8001a08 <HAL_GPIO_Init+0x1ec>
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	4a49      	ldr	r2, [pc, #292]	; (8001b14 <HAL_GPIO_Init+0x2f8>)
 80019f0:	4293      	cmp	r3, r2
 80019f2:	d007      	beq.n	8001a04 <HAL_GPIO_Init+0x1e8>
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	4a48      	ldr	r2, [pc, #288]	; (8001b18 <HAL_GPIO_Init+0x2fc>)
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d101      	bne.n	8001a00 <HAL_GPIO_Init+0x1e4>
 80019fc:	2305      	movs	r3, #5
 80019fe:	e00a      	b.n	8001a16 <HAL_GPIO_Init+0x1fa>
 8001a00:	2306      	movs	r3, #6
 8001a02:	e008      	b.n	8001a16 <HAL_GPIO_Init+0x1fa>
 8001a04:	2304      	movs	r3, #4
 8001a06:	e006      	b.n	8001a16 <HAL_GPIO_Init+0x1fa>
 8001a08:	2303      	movs	r3, #3
 8001a0a:	e004      	b.n	8001a16 <HAL_GPIO_Init+0x1fa>
 8001a0c:	2302      	movs	r3, #2
 8001a0e:	e002      	b.n	8001a16 <HAL_GPIO_Init+0x1fa>
 8001a10:	2301      	movs	r3, #1
 8001a12:	e000      	b.n	8001a16 <HAL_GPIO_Init+0x1fa>
 8001a14:	2300      	movs	r3, #0
 8001a16:	697a      	ldr	r2, [r7, #20]
 8001a18:	f002 0203 	and.w	r2, r2, #3
 8001a1c:	0092      	lsls	r2, r2, #2
 8001a1e:	4093      	lsls	r3, r2
 8001a20:	693a      	ldr	r2, [r7, #16]
 8001a22:	4313      	orrs	r3, r2
 8001a24:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a26:	4937      	ldr	r1, [pc, #220]	; (8001b04 <HAL_GPIO_Init+0x2e8>)
 8001a28:	697b      	ldr	r3, [r7, #20]
 8001a2a:	089b      	lsrs	r3, r3, #2
 8001a2c:	3302      	adds	r3, #2
 8001a2e:	693a      	ldr	r2, [r7, #16]
 8001a30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001a34:	4b39      	ldr	r3, [pc, #228]	; (8001b1c <HAL_GPIO_Init+0x300>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	43db      	mvns	r3, r3
 8001a3e:	693a      	ldr	r2, [r7, #16]
 8001a40:	4013      	ands	r3, r2
 8001a42:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d003      	beq.n	8001a58 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001a50:	693a      	ldr	r2, [r7, #16]
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	4313      	orrs	r3, r2
 8001a56:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001a58:	4a30      	ldr	r2, [pc, #192]	; (8001b1c <HAL_GPIO_Init+0x300>)
 8001a5a:	693b      	ldr	r3, [r7, #16]
 8001a5c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001a5e:	4b2f      	ldr	r3, [pc, #188]	; (8001b1c <HAL_GPIO_Init+0x300>)
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	43db      	mvns	r3, r3
 8001a68:	693a      	ldr	r2, [r7, #16]
 8001a6a:	4013      	ands	r3, r2
 8001a6c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d003      	beq.n	8001a82 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001a7a:	693a      	ldr	r2, [r7, #16]
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	4313      	orrs	r3, r2
 8001a80:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001a82:	4a26      	ldr	r2, [pc, #152]	; (8001b1c <HAL_GPIO_Init+0x300>)
 8001a84:	693b      	ldr	r3, [r7, #16]
 8001a86:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001a88:	4b24      	ldr	r3, [pc, #144]	; (8001b1c <HAL_GPIO_Init+0x300>)
 8001a8a:	689b      	ldr	r3, [r3, #8]
 8001a8c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	43db      	mvns	r3, r3
 8001a92:	693a      	ldr	r2, [r7, #16]
 8001a94:	4013      	ands	r3, r2
 8001a96:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d003      	beq.n	8001aac <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001aa4:	693a      	ldr	r2, [r7, #16]
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	4313      	orrs	r3, r2
 8001aaa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001aac:	4a1b      	ldr	r2, [pc, #108]	; (8001b1c <HAL_GPIO_Init+0x300>)
 8001aae:	693b      	ldr	r3, [r7, #16]
 8001ab0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001ab2:	4b1a      	ldr	r3, [pc, #104]	; (8001b1c <HAL_GPIO_Init+0x300>)
 8001ab4:	68db      	ldr	r3, [r3, #12]
 8001ab6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	43db      	mvns	r3, r3
 8001abc:	693a      	ldr	r2, [r7, #16]
 8001abe:	4013      	ands	r3, r2
 8001ac0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d003      	beq.n	8001ad6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001ace:	693a      	ldr	r2, [r7, #16]
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	4313      	orrs	r3, r2
 8001ad4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001ad6:	4a11      	ldr	r2, [pc, #68]	; (8001b1c <HAL_GPIO_Init+0x300>)
 8001ad8:	693b      	ldr	r3, [r7, #16]
 8001ada:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001adc:	697b      	ldr	r3, [r7, #20]
 8001ade:	3301      	adds	r3, #1
 8001ae0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	681a      	ldr	r2, [r3, #0]
 8001ae6:	697b      	ldr	r3, [r7, #20]
 8001ae8:	fa22 f303 	lsr.w	r3, r2, r3
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	f47f ae9d 	bne.w	800182c <HAL_GPIO_Init+0x10>
  }
}
 8001af2:	bf00      	nop
 8001af4:	371c      	adds	r7, #28
 8001af6:	46bd      	mov	sp, r7
 8001af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afc:	4770      	bx	lr
 8001afe:	bf00      	nop
 8001b00:	40021000 	.word	0x40021000
 8001b04:	40010000 	.word	0x40010000
 8001b08:	48000400 	.word	0x48000400
 8001b0c:	48000800 	.word	0x48000800
 8001b10:	48000c00 	.word	0x48000c00
 8001b14:	48001000 	.word	0x48001000
 8001b18:	48001400 	.word	0x48001400
 8001b1c:	40010400 	.word	0x40010400

08001b20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b20:	b480      	push	{r7}
 8001b22:	b083      	sub	sp, #12
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
 8001b28:	460b      	mov	r3, r1
 8001b2a:	807b      	strh	r3, [r7, #2]
 8001b2c:	4613      	mov	r3, r2
 8001b2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b30:	787b      	ldrb	r3, [r7, #1]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d003      	beq.n	8001b3e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001b36:	887a      	ldrh	r2, [r7, #2]
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001b3c:	e002      	b.n	8001b44 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001b3e:	887a      	ldrh	r2, [r7, #2]
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001b44:	bf00      	nop
 8001b46:	370c      	adds	r7, #12
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4e:	4770      	bx	lr

08001b50 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b085      	sub	sp, #20
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
 8001b58:	460b      	mov	r3, r1
 8001b5a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	695b      	ldr	r3, [r3, #20]
 8001b60:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001b62:	887a      	ldrh	r2, [r7, #2]
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	4013      	ands	r3, r2
 8001b68:	041a      	lsls	r2, r3, #16
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	43d9      	mvns	r1, r3
 8001b6e:	887b      	ldrh	r3, [r7, #2]
 8001b70:	400b      	ands	r3, r1
 8001b72:	431a      	orrs	r2, r3
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	619a      	str	r2, [r3, #24]
}
 8001b78:	bf00      	nop
 8001b7a:	3714      	adds	r7, #20
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b82:	4770      	bx	lr

08001b84 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001b84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b86:	b08b      	sub	sp, #44	; 0x2c
 8001b88:	af06      	add	r7, sp, #24
 8001b8a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d101      	bne.n	8001b96 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001b92:	2301      	movs	r3, #1
 8001b94:	e0d7      	b.n	8001d46 <HAL_PCD_Init+0x1c2>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001b9c:	b2db      	uxtb	r3, r3
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d106      	bne.n	8001bb0 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001baa:	6878      	ldr	r0, [r7, #4]
 8001bac:	f007 fcbc 	bl	8009528 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2203      	movs	r2, #3
 8001bb4:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f003 fe18 	bl	80057f2 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	73fb      	strb	r3, [r7, #15]
 8001bc6:	e04c      	b.n	8001c62 <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001bc8:	7bfb      	ldrb	r3, [r7, #15]
 8001bca:	6879      	ldr	r1, [r7, #4]
 8001bcc:	1c5a      	adds	r2, r3, #1
 8001bce:	4613      	mov	r3, r2
 8001bd0:	009b      	lsls	r3, r3, #2
 8001bd2:	4413      	add	r3, r2
 8001bd4:	00db      	lsls	r3, r3, #3
 8001bd6:	440b      	add	r3, r1
 8001bd8:	3301      	adds	r3, #1
 8001bda:	2201      	movs	r2, #1
 8001bdc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001bde:	7bfb      	ldrb	r3, [r7, #15]
 8001be0:	6879      	ldr	r1, [r7, #4]
 8001be2:	1c5a      	adds	r2, r3, #1
 8001be4:	4613      	mov	r3, r2
 8001be6:	009b      	lsls	r3, r3, #2
 8001be8:	4413      	add	r3, r2
 8001bea:	00db      	lsls	r3, r3, #3
 8001bec:	440b      	add	r3, r1
 8001bee:	7bfa      	ldrb	r2, [r7, #15]
 8001bf0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001bf2:	7bfa      	ldrb	r2, [r7, #15]
 8001bf4:	7bfb      	ldrb	r3, [r7, #15]
 8001bf6:	b298      	uxth	r0, r3
 8001bf8:	6879      	ldr	r1, [r7, #4]
 8001bfa:	4613      	mov	r3, r2
 8001bfc:	009b      	lsls	r3, r3, #2
 8001bfe:	4413      	add	r3, r2
 8001c00:	00db      	lsls	r3, r3, #3
 8001c02:	440b      	add	r3, r1
 8001c04:	3336      	adds	r3, #54	; 0x36
 8001c06:	4602      	mov	r2, r0
 8001c08:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001c0a:	7bfb      	ldrb	r3, [r7, #15]
 8001c0c:	6879      	ldr	r1, [r7, #4]
 8001c0e:	1c5a      	adds	r2, r3, #1
 8001c10:	4613      	mov	r3, r2
 8001c12:	009b      	lsls	r3, r3, #2
 8001c14:	4413      	add	r3, r2
 8001c16:	00db      	lsls	r3, r3, #3
 8001c18:	440b      	add	r3, r1
 8001c1a:	3303      	adds	r3, #3
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001c20:	7bfa      	ldrb	r2, [r7, #15]
 8001c22:	6879      	ldr	r1, [r7, #4]
 8001c24:	4613      	mov	r3, r2
 8001c26:	009b      	lsls	r3, r3, #2
 8001c28:	4413      	add	r3, r2
 8001c2a:	00db      	lsls	r3, r3, #3
 8001c2c:	440b      	add	r3, r1
 8001c2e:	3338      	adds	r3, #56	; 0x38
 8001c30:	2200      	movs	r2, #0
 8001c32:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001c34:	7bfa      	ldrb	r2, [r7, #15]
 8001c36:	6879      	ldr	r1, [r7, #4]
 8001c38:	4613      	mov	r3, r2
 8001c3a:	009b      	lsls	r3, r3, #2
 8001c3c:	4413      	add	r3, r2
 8001c3e:	00db      	lsls	r3, r3, #3
 8001c40:	440b      	add	r3, r1
 8001c42:	333c      	adds	r3, #60	; 0x3c
 8001c44:	2200      	movs	r2, #0
 8001c46:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001c48:	7bfa      	ldrb	r2, [r7, #15]
 8001c4a:	6879      	ldr	r1, [r7, #4]
 8001c4c:	4613      	mov	r3, r2
 8001c4e:	009b      	lsls	r3, r3, #2
 8001c50:	4413      	add	r3, r2
 8001c52:	00db      	lsls	r3, r3, #3
 8001c54:	440b      	add	r3, r1
 8001c56:	3340      	adds	r3, #64	; 0x40
 8001c58:	2200      	movs	r2, #0
 8001c5a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c5c:	7bfb      	ldrb	r3, [r7, #15]
 8001c5e:	3301      	adds	r3, #1
 8001c60:	73fb      	strb	r3, [r7, #15]
 8001c62:	7bfa      	ldrb	r2, [r7, #15]
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	429a      	cmp	r2, r3
 8001c6a:	d3ad      	bcc.n	8001bc8 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	73fb      	strb	r3, [r7, #15]
 8001c70:	e044      	b.n	8001cfc <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001c72:	7bfa      	ldrb	r2, [r7, #15]
 8001c74:	6879      	ldr	r1, [r7, #4]
 8001c76:	4613      	mov	r3, r2
 8001c78:	009b      	lsls	r3, r3, #2
 8001c7a:	4413      	add	r3, r2
 8001c7c:	00db      	lsls	r3, r3, #3
 8001c7e:	440b      	add	r3, r1
 8001c80:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001c84:	2200      	movs	r2, #0
 8001c86:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001c88:	7bfa      	ldrb	r2, [r7, #15]
 8001c8a:	6879      	ldr	r1, [r7, #4]
 8001c8c:	4613      	mov	r3, r2
 8001c8e:	009b      	lsls	r3, r3, #2
 8001c90:	4413      	add	r3, r2
 8001c92:	00db      	lsls	r3, r3, #3
 8001c94:	440b      	add	r3, r1
 8001c96:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001c9a:	7bfa      	ldrb	r2, [r7, #15]
 8001c9c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001c9e:	7bfa      	ldrb	r2, [r7, #15]
 8001ca0:	6879      	ldr	r1, [r7, #4]
 8001ca2:	4613      	mov	r3, r2
 8001ca4:	009b      	lsls	r3, r3, #2
 8001ca6:	4413      	add	r3, r2
 8001ca8:	00db      	lsls	r3, r3, #3
 8001caa:	440b      	add	r3, r1
 8001cac:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001cb4:	7bfa      	ldrb	r2, [r7, #15]
 8001cb6:	6879      	ldr	r1, [r7, #4]
 8001cb8:	4613      	mov	r3, r2
 8001cba:	009b      	lsls	r3, r3, #2
 8001cbc:	4413      	add	r3, r2
 8001cbe:	00db      	lsls	r3, r3, #3
 8001cc0:	440b      	add	r3, r1
 8001cc2:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001cca:	7bfa      	ldrb	r2, [r7, #15]
 8001ccc:	6879      	ldr	r1, [r7, #4]
 8001cce:	4613      	mov	r3, r2
 8001cd0:	009b      	lsls	r3, r3, #2
 8001cd2:	4413      	add	r3, r2
 8001cd4:	00db      	lsls	r3, r3, #3
 8001cd6:	440b      	add	r3, r1
 8001cd8:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001cdc:	2200      	movs	r2, #0
 8001cde:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001ce0:	7bfa      	ldrb	r2, [r7, #15]
 8001ce2:	6879      	ldr	r1, [r7, #4]
 8001ce4:	4613      	mov	r3, r2
 8001ce6:	009b      	lsls	r3, r3, #2
 8001ce8:	4413      	add	r3, r2
 8001cea:	00db      	lsls	r3, r3, #3
 8001cec:	440b      	add	r3, r1
 8001cee:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001cf6:	7bfb      	ldrb	r3, [r7, #15]
 8001cf8:	3301      	adds	r3, #1
 8001cfa:	73fb      	strb	r3, [r7, #15]
 8001cfc:	7bfa      	ldrb	r2, [r7, #15]
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	429a      	cmp	r2, r3
 8001d04:	d3b5      	bcc.n	8001c72 <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	603b      	str	r3, [r7, #0]
 8001d0c:	687e      	ldr	r6, [r7, #4]
 8001d0e:	466d      	mov	r5, sp
 8001d10:	f106 0410 	add.w	r4, r6, #16
 8001d14:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d16:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d18:	6823      	ldr	r3, [r4, #0]
 8001d1a:	602b      	str	r3, [r5, #0]
 8001d1c:	1d33      	adds	r3, r6, #4
 8001d1e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d20:	6838      	ldr	r0, [r7, #0]
 8001d22:	f003 fd81 	bl	8005828 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2200      	movs	r2, #0
 8001d2a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2201      	movs	r2, #1
 8001d32:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	69db      	ldr	r3, [r3, #28]
 8001d3a:	2b01      	cmp	r3, #1
 8001d3c:	d102      	bne.n	8001d44 <HAL_PCD_Init+0x1c0>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001d3e:	6878      	ldr	r0, [r7, #4]
 8001d40:	f001 fa5e 	bl	8003200 <HAL_PCDEx_ActivateLPM>
  }
  
  return HAL_OK;
 8001d44:	2300      	movs	r3, #0
}
 8001d46:	4618      	mov	r0, r3
 8001d48:	3714      	adds	r7, #20
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001d4e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001d4e:	b580      	push	{r7, lr}
 8001d50:	b082      	sub	sp, #8
 8001d52:	af00      	add	r7, sp, #0
 8001d54:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001d5c:	2b01      	cmp	r3, #1
 8001d5e:	d101      	bne.n	8001d64 <HAL_PCD_Start+0x16>
 8001d60:	2302      	movs	r3, #2
 8001d62:	e012      	b.n	8001d8a <HAL_PCD_Start+0x3c>
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2201      	movs	r2, #1
 8001d68:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4618      	mov	r0, r3
 8001d72:	f003 fd27 	bl	80057c4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f005 fd13 	bl	80077a6 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2200      	movs	r2, #0
 8001d84:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001d88:	2300      	movs	r3, #0
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	3708      	adds	r7, #8
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}

08001d92 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001d92:	b580      	push	{r7, lr}
 8001d94:	b082      	sub	sp, #8
 8001d96:	af00      	add	r7, sp, #0
 8001d98:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f005 fd18 	bl	80077d4 <USB_ReadInterrupts>
 8001da4:	4603      	mov	r3, r0
 8001da6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001daa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001dae:	d102      	bne.n	8001db6 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001db0:	6878      	ldr	r0, [r7, #4]
 8001db2:	f000 fb5b 	bl	800246c <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f005 fd0a 	bl	80077d4 <USB_ReadInterrupts>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dc6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001dca:	d112      	bne.n	8001df2 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001dd4:	b29a      	uxth	r2, r3
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001dde:	b292      	uxth	r2, r2
 8001de0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001de4:	6878      	ldr	r0, [r7, #4]
 8001de6:	f007 fc1a 	bl	800961e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001dea:	2100      	movs	r1, #0
 8001dec:	6878      	ldr	r0, [r7, #4]
 8001dee:	f000 f91e 	bl	800202e <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4618      	mov	r0, r3
 8001df8:	f005 fcec 	bl	80077d4 <USB_ReadInterrupts>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e02:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001e06:	d10b      	bne.n	8001e20 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e10:	b29a      	uxth	r2, r3
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001e1a:	b292      	uxth	r2, r2
 8001e1c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4618      	mov	r0, r3
 8001e26:	f005 fcd5 	bl	80077d4 <USB_ReadInterrupts>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001e30:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001e34:	d10b      	bne.n	8001e4e <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e3e:	b29a      	uxth	r2, r3
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001e48:	b292      	uxth	r2, r2
 8001e4a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4618      	mov	r0, r3
 8001e54:	f005 fcbe 	bl	80077d4 <USB_ReadInterrupts>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e62:	d133      	bne.n	8001ecc <HAL_PCD_IRQHandler+0x13a>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001e6c:	b29a      	uxth	r2, r3
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f022 0204 	bic.w	r2, r2, #4
 8001e76:	b292      	uxth	r2, r2
 8001e78:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001e84:	b29a      	uxth	r2, r3
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f022 0208 	bic.w	r2, r2, #8
 8001e8e:	b292      	uxth	r2, r2
 8001e90:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8001e9a:	2b01      	cmp	r3, #1
 8001e9c:	d107      	bne.n	8001eae <HAL_PCD_IRQHandler+0x11c>
    {
      hpcd->LPM_State = LPM_L0;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001ea6:	2100      	movs	r1, #0
 8001ea8:	6878      	ldr	r0, [r7, #4]
 8001eaa:	f007 fdad 	bl	8009a08 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001eae:	6878      	ldr	r0, [r7, #4]
 8001eb0:	f007 fbee 	bl	8009690 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001ebc:	b29a      	uxth	r2, r3
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001ec6:	b292      	uxth	r2, r2
 8001ec8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f005 fc7f 	bl	80077d4 <USB_ReadInterrupts>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001edc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001ee0:	d126      	bne.n	8001f30 <HAL_PCD_IRQHandler+0x19e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001eea:	b29a      	uxth	r2, r3
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f042 0208 	orr.w	r2, r2, #8
 8001ef4:	b292      	uxth	r2, r2
 8001ef6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f02:	b29a      	uxth	r2, r3
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f0c:	b292      	uxth	r2, r2
 8001f0e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001f1a:	b29a      	uxth	r2, r3
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f042 0204 	orr.w	r2, r2, #4
 8001f24:	b292      	uxth	r2, r2
 8001f26:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001f2a:	6878      	ldr	r0, [r7, #4]
 8001f2c:	f007 fb96 	bl	800965c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  /* Handle LPM Interrupt */
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4618      	mov	r0, r3
 8001f36:	f005 fc4d 	bl	80077d4 <USB_ReadInterrupts>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f40:	2b80      	cmp	r3, #128	; 0x80
 8001f42:	d13f      	bne.n	8001fc4 <HAL_PCD_IRQHandler+0x232>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f4c:	b29a      	uxth	r2, r3
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f56:	b292      	uxth	r2, r2
 8001f58:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d12b      	bne.n	8001fbe <HAL_PCD_IRQHandler+0x22c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001f6e:	b29a      	uxth	r2, r3
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f042 0204 	orr.w	r2, r2, #4
 8001f78:	b292      	uxth	r2, r2
 8001f7a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001f86:	b29a      	uxth	r2, r3
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f042 0208 	orr.w	r2, r2, #8
 8001f90:	b292      	uxth	r2, r2
 8001f92:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2201      	movs	r2, #1
 8001f9a:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001fa6:	b29b      	uxth	r3, r3
 8001fa8:	089b      	lsrs	r3, r3, #2
 8001faa:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001fb4:	2101      	movs	r1, #1
 8001fb6:	6878      	ldr	r0, [r7, #4]
 8001fb8:	f007 fd26 	bl	8009a08 <HAL_PCDEx_LPM_Callback>
 8001fbc:	e002      	b.n	8001fc4 <HAL_PCD_IRQHandler+0x232>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 8001fbe:	6878      	ldr	r0, [r7, #4]
 8001fc0:	f007 fb4c 	bl	800965c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4618      	mov	r0, r3
 8001fca:	f005 fc03 	bl	80077d4 <USB_ReadInterrupts>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001fd4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001fd8:	d10e      	bne.n	8001ff8 <HAL_PCD_IRQHandler+0x266>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001fe2:	b29a      	uxth	r2, r3
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001fec:	b292      	uxth	r2, r2
 8001fee:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001ff2:	6878      	ldr	r0, [r7, #4]
 8001ff4:	f007 fb05 	bl	8009602 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	f005 fbe9 	bl	80077d4 <USB_ReadInterrupts>
 8002002:	4603      	mov	r3, r0
 8002004:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002008:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800200c:	d10b      	bne.n	8002026 <HAL_PCD_IRQHandler+0x294>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002016:	b29a      	uxth	r2, r3
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002020:	b292      	uxth	r2, r2
 8002022:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8002026:	bf00      	nop
 8002028:	3708      	adds	r7, #8
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}

0800202e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800202e:	b580      	push	{r7, lr}
 8002030:	b082      	sub	sp, #8
 8002032:	af00      	add	r7, sp, #0
 8002034:	6078      	str	r0, [r7, #4]
 8002036:	460b      	mov	r3, r1
 8002038:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002040:	2b01      	cmp	r3, #1
 8002042:	d101      	bne.n	8002048 <HAL_PCD_SetAddress+0x1a>
 8002044:	2302      	movs	r3, #2
 8002046:	e013      	b.n	8002070 <HAL_PCD_SetAddress+0x42>
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2201      	movs	r2, #1
 800204c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	78fa      	ldrb	r2, [r7, #3]
 8002054:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	78fa      	ldrb	r2, [r7, #3]
 800205e:	4611      	mov	r1, r2
 8002060:	4618      	mov	r0, r3
 8002062:	f005 fb8c 	bl	800777e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2200      	movs	r2, #0
 800206a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800206e:	2300      	movs	r3, #0
}
 8002070:	4618      	mov	r0, r3
 8002072:	3708      	adds	r7, #8
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}

08002078 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b084      	sub	sp, #16
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
 8002080:	4608      	mov	r0, r1
 8002082:	4611      	mov	r1, r2
 8002084:	461a      	mov	r2, r3
 8002086:	4603      	mov	r3, r0
 8002088:	70fb      	strb	r3, [r7, #3]
 800208a:	460b      	mov	r3, r1
 800208c:	803b      	strh	r3, [r7, #0]
 800208e:	4613      	mov	r3, r2
 8002090:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002092:	2300      	movs	r3, #0
 8002094:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002096:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800209a:	2b00      	cmp	r3, #0
 800209c:	da0e      	bge.n	80020bc <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800209e:	78fb      	ldrb	r3, [r7, #3]
 80020a0:	f003 0307 	and.w	r3, r3, #7
 80020a4:	1c5a      	adds	r2, r3, #1
 80020a6:	4613      	mov	r3, r2
 80020a8:	009b      	lsls	r3, r3, #2
 80020aa:	4413      	add	r3, r2
 80020ac:	00db      	lsls	r3, r3, #3
 80020ae:	687a      	ldr	r2, [r7, #4]
 80020b0:	4413      	add	r3, r2
 80020b2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	2201      	movs	r2, #1
 80020b8:	705a      	strb	r2, [r3, #1]
 80020ba:	e00e      	b.n	80020da <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80020bc:	78fb      	ldrb	r3, [r7, #3]
 80020be:	f003 0207 	and.w	r2, r3, #7
 80020c2:	4613      	mov	r3, r2
 80020c4:	009b      	lsls	r3, r3, #2
 80020c6:	4413      	add	r3, r2
 80020c8:	00db      	lsls	r3, r3, #3
 80020ca:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80020ce:	687a      	ldr	r2, [r7, #4]
 80020d0:	4413      	add	r3, r2
 80020d2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	2200      	movs	r2, #0
 80020d8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80020da:	78fb      	ldrb	r3, [r7, #3]
 80020dc:	f003 0307 	and.w	r3, r3, #7
 80020e0:	b2da      	uxtb	r2, r3
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80020e6:	883a      	ldrh	r2, [r7, #0]
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	78ba      	ldrb	r2, [r7, #2]
 80020f0:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	785b      	ldrb	r3, [r3, #1]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d004      	beq.n	8002104 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	781b      	ldrb	r3, [r3, #0]
 80020fe:	b29a      	uxth	r2, r3
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002104:	78bb      	ldrb	r3, [r7, #2]
 8002106:	2b02      	cmp	r3, #2
 8002108:	d102      	bne.n	8002110 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	2200      	movs	r2, #0
 800210e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002116:	2b01      	cmp	r3, #1
 8002118:	d101      	bne.n	800211e <HAL_PCD_EP_Open+0xa6>
 800211a:	2302      	movs	r3, #2
 800211c:	e00e      	b.n	800213c <HAL_PCD_EP_Open+0xc4>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2201      	movs	r2, #1
 8002122:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	68f9      	ldr	r1, [r7, #12]
 800212c:	4618      	mov	r0, r3
 800212e:	f003 fb9d 	bl	800586c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2200      	movs	r2, #0
 8002136:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 800213a:	7afb      	ldrb	r3, [r7, #11]
}
 800213c:	4618      	mov	r0, r3
 800213e:	3710      	adds	r7, #16
 8002140:	46bd      	mov	sp, r7
 8002142:	bd80      	pop	{r7, pc}

08002144 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b084      	sub	sp, #16
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
 800214c:	460b      	mov	r3, r1
 800214e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002150:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002154:	2b00      	cmp	r3, #0
 8002156:	da0e      	bge.n	8002176 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002158:	78fb      	ldrb	r3, [r7, #3]
 800215a:	f003 0307 	and.w	r3, r3, #7
 800215e:	1c5a      	adds	r2, r3, #1
 8002160:	4613      	mov	r3, r2
 8002162:	009b      	lsls	r3, r3, #2
 8002164:	4413      	add	r3, r2
 8002166:	00db      	lsls	r3, r3, #3
 8002168:	687a      	ldr	r2, [r7, #4]
 800216a:	4413      	add	r3, r2
 800216c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	2201      	movs	r2, #1
 8002172:	705a      	strb	r2, [r3, #1]
 8002174:	e00e      	b.n	8002194 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002176:	78fb      	ldrb	r3, [r7, #3]
 8002178:	f003 0207 	and.w	r2, r3, #7
 800217c:	4613      	mov	r3, r2
 800217e:	009b      	lsls	r3, r3, #2
 8002180:	4413      	add	r3, r2
 8002182:	00db      	lsls	r3, r3, #3
 8002184:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002188:	687a      	ldr	r2, [r7, #4]
 800218a:	4413      	add	r3, r2
 800218c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	2200      	movs	r2, #0
 8002192:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002194:	78fb      	ldrb	r3, [r7, #3]
 8002196:	f003 0307 	and.w	r3, r3, #7
 800219a:	b2da      	uxtb	r2, r3
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80021a6:	2b01      	cmp	r3, #1
 80021a8:	d101      	bne.n	80021ae <HAL_PCD_EP_Close+0x6a>
 80021aa:	2302      	movs	r3, #2
 80021ac:	e00e      	b.n	80021cc <HAL_PCD_EP_Close+0x88>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2201      	movs	r2, #1
 80021b2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	68f9      	ldr	r1, [r7, #12]
 80021bc:	4618      	mov	r0, r3
 80021be:	f003 fec3 	bl	8005f48 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2200      	movs	r2, #0
 80021c6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 80021ca:	2300      	movs	r3, #0
}
 80021cc:	4618      	mov	r0, r3
 80021ce:	3710      	adds	r7, #16
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bd80      	pop	{r7, pc}

080021d4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b086      	sub	sp, #24
 80021d8:	af00      	add	r7, sp, #0
 80021da:	60f8      	str	r0, [r7, #12]
 80021dc:	607a      	str	r2, [r7, #4]
 80021de:	603b      	str	r3, [r7, #0]
 80021e0:	460b      	mov	r3, r1
 80021e2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80021e4:	7afb      	ldrb	r3, [r7, #11]
 80021e6:	f003 0207 	and.w	r2, r3, #7
 80021ea:	4613      	mov	r3, r2
 80021ec:	009b      	lsls	r3, r3, #2
 80021ee:	4413      	add	r3, r2
 80021f0:	00db      	lsls	r3, r3, #3
 80021f2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80021f6:	68fa      	ldr	r2, [r7, #12]
 80021f8:	4413      	add	r3, r2
 80021fa:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80021fc:	697b      	ldr	r3, [r7, #20]
 80021fe:	687a      	ldr	r2, [r7, #4]
 8002200:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002202:	697b      	ldr	r3, [r7, #20]
 8002204:	683a      	ldr	r2, [r7, #0]
 8002206:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002208:	697b      	ldr	r3, [r7, #20]
 800220a:	2200      	movs	r2, #0
 800220c:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800220e:	697b      	ldr	r3, [r7, #20]
 8002210:	2200      	movs	r2, #0
 8002212:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002214:	7afb      	ldrb	r3, [r7, #11]
 8002216:	f003 0307 	and.w	r3, r3, #7
 800221a:	b2da      	uxtb	r2, r3
 800221c:	697b      	ldr	r3, [r7, #20]
 800221e:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002220:	7afb      	ldrb	r3, [r7, #11]
 8002222:	f003 0307 	and.w	r3, r3, #7
 8002226:	2b00      	cmp	r3, #0
 8002228:	d106      	bne.n	8002238 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	6979      	ldr	r1, [r7, #20]
 8002230:	4618      	mov	r0, r3
 8002232:	f004 f876 	bl	8006322 <USB_EPStartXfer>
 8002236:	e005      	b.n	8002244 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	6979      	ldr	r1, [r7, #20]
 800223e:	4618      	mov	r0, r3
 8002240:	f004 f86f 	bl	8006322 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002244:	2300      	movs	r3, #0
}
 8002246:	4618      	mov	r0, r3
 8002248:	3718      	adds	r7, #24
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}

0800224e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800224e:	b480      	push	{r7}
 8002250:	b083      	sub	sp, #12
 8002252:	af00      	add	r7, sp, #0
 8002254:	6078      	str	r0, [r7, #4]
 8002256:	460b      	mov	r3, r1
 8002258:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800225a:	78fb      	ldrb	r3, [r7, #3]
 800225c:	f003 0207 	and.w	r2, r3, #7
 8002260:	6879      	ldr	r1, [r7, #4]
 8002262:	4613      	mov	r3, r2
 8002264:	009b      	lsls	r3, r3, #2
 8002266:	4413      	add	r3, r2
 8002268:	00db      	lsls	r3, r3, #3
 800226a:	440b      	add	r3, r1
 800226c:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8002270:	681b      	ldr	r3, [r3, #0]
}
 8002272:	4618      	mov	r0, r3
 8002274:	370c      	adds	r7, #12
 8002276:	46bd      	mov	sp, r7
 8002278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227c:	4770      	bx	lr

0800227e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800227e:	b580      	push	{r7, lr}
 8002280:	b086      	sub	sp, #24
 8002282:	af00      	add	r7, sp, #0
 8002284:	60f8      	str	r0, [r7, #12]
 8002286:	607a      	str	r2, [r7, #4]
 8002288:	603b      	str	r3, [r7, #0]
 800228a:	460b      	mov	r3, r1
 800228c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800228e:	7afb      	ldrb	r3, [r7, #11]
 8002290:	f003 0307 	and.w	r3, r3, #7
 8002294:	1c5a      	adds	r2, r3, #1
 8002296:	4613      	mov	r3, r2
 8002298:	009b      	lsls	r3, r3, #2
 800229a:	4413      	add	r3, r2
 800229c:	00db      	lsls	r3, r3, #3
 800229e:	68fa      	ldr	r2, [r7, #12]
 80022a0:	4413      	add	r3, r2
 80022a2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80022a4:	697b      	ldr	r3, [r7, #20]
 80022a6:	687a      	ldr	r2, [r7, #4]
 80022a8:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80022aa:	697b      	ldr	r3, [r7, #20]
 80022ac:	683a      	ldr	r2, [r7, #0]
 80022ae:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 80022b0:	697b      	ldr	r3, [r7, #20]
 80022b2:	2201      	movs	r2, #1
 80022b4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80022b8:	697b      	ldr	r3, [r7, #20]
 80022ba:	683a      	ldr	r2, [r7, #0]
 80022bc:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 80022be:	697b      	ldr	r3, [r7, #20]
 80022c0:	2200      	movs	r2, #0
 80022c2:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80022c4:	697b      	ldr	r3, [r7, #20]
 80022c6:	2201      	movs	r2, #1
 80022c8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80022ca:	7afb      	ldrb	r3, [r7, #11]
 80022cc:	f003 0307 	and.w	r3, r3, #7
 80022d0:	b2da      	uxtb	r2, r3
 80022d2:	697b      	ldr	r3, [r7, #20]
 80022d4:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80022d6:	7afb      	ldrb	r3, [r7, #11]
 80022d8:	f003 0307 	and.w	r3, r3, #7
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d106      	bne.n	80022ee <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	6979      	ldr	r1, [r7, #20]
 80022e6:	4618      	mov	r0, r3
 80022e8:	f004 f81b 	bl	8006322 <USB_EPStartXfer>
 80022ec:	e005      	b.n	80022fa <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	6979      	ldr	r1, [r7, #20]
 80022f4:	4618      	mov	r0, r3
 80022f6:	f004 f814 	bl	8006322 <USB_EPStartXfer>
  }

  return HAL_OK;
 80022fa:	2300      	movs	r3, #0
}
 80022fc:	4618      	mov	r0, r3
 80022fe:	3718      	adds	r7, #24
 8002300:	46bd      	mov	sp, r7
 8002302:	bd80      	pop	{r7, pc}

08002304 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b084      	sub	sp, #16
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
 800230c:	460b      	mov	r3, r1
 800230e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002310:	78fb      	ldrb	r3, [r7, #3]
 8002312:	f003 0207 	and.w	r2, r3, #7
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	429a      	cmp	r2, r3
 800231c:	d901      	bls.n	8002322 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800231e:	2301      	movs	r3, #1
 8002320:	e04c      	b.n	80023bc <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002322:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002326:	2b00      	cmp	r3, #0
 8002328:	da0e      	bge.n	8002348 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800232a:	78fb      	ldrb	r3, [r7, #3]
 800232c:	f003 0307 	and.w	r3, r3, #7
 8002330:	1c5a      	adds	r2, r3, #1
 8002332:	4613      	mov	r3, r2
 8002334:	009b      	lsls	r3, r3, #2
 8002336:	4413      	add	r3, r2
 8002338:	00db      	lsls	r3, r3, #3
 800233a:	687a      	ldr	r2, [r7, #4]
 800233c:	4413      	add	r3, r2
 800233e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	2201      	movs	r2, #1
 8002344:	705a      	strb	r2, [r3, #1]
 8002346:	e00c      	b.n	8002362 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002348:	78fa      	ldrb	r2, [r7, #3]
 800234a:	4613      	mov	r3, r2
 800234c:	009b      	lsls	r3, r3, #2
 800234e:	4413      	add	r3, r2
 8002350:	00db      	lsls	r3, r3, #3
 8002352:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002356:	687a      	ldr	r2, [r7, #4]
 8002358:	4413      	add	r3, r2
 800235a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	2200      	movs	r2, #0
 8002360:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	2201      	movs	r2, #1
 8002366:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002368:	78fb      	ldrb	r3, [r7, #3]
 800236a:	f003 0307 	and.w	r3, r3, #7
 800236e:	b2da      	uxtb	r2, r3
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800237a:	2b01      	cmp	r3, #1
 800237c:	d101      	bne.n	8002382 <HAL_PCD_EP_SetStall+0x7e>
 800237e:	2302      	movs	r3, #2
 8002380:	e01c      	b.n	80023bc <HAL_PCD_EP_SetStall+0xb8>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2201      	movs	r2, #1
 8002386:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	68f9      	ldr	r1, [r7, #12]
 8002390:	4618      	mov	r0, r3
 8002392:	f005 f8f5 	bl	8007580 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002396:	78fb      	ldrb	r3, [r7, #3]
 8002398:	f003 0307 	and.w	r3, r3, #7
 800239c:	2b00      	cmp	r3, #0
 800239e:	d108      	bne.n	80023b2 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681a      	ldr	r2, [r3, #0]
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80023aa:	4619      	mov	r1, r3
 80023ac:	4610      	mov	r0, r2
 80023ae:	f005 fa21 	bl	80077f4 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2200      	movs	r2, #0
 80023b6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80023ba:	2300      	movs	r3, #0
}
 80023bc:	4618      	mov	r0, r3
 80023be:	3710      	adds	r7, #16
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bd80      	pop	{r7, pc}

080023c4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b084      	sub	sp, #16
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
 80023cc:	460b      	mov	r3, r1
 80023ce:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80023d0:	78fb      	ldrb	r3, [r7, #3]
 80023d2:	f003 020f 	and.w	r2, r3, #15
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	429a      	cmp	r2, r3
 80023dc:	d901      	bls.n	80023e2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80023de:	2301      	movs	r3, #1
 80023e0:	e040      	b.n	8002464 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80023e2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	da0e      	bge.n	8002408 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80023ea:	78fb      	ldrb	r3, [r7, #3]
 80023ec:	f003 0307 	and.w	r3, r3, #7
 80023f0:	1c5a      	adds	r2, r3, #1
 80023f2:	4613      	mov	r3, r2
 80023f4:	009b      	lsls	r3, r3, #2
 80023f6:	4413      	add	r3, r2
 80023f8:	00db      	lsls	r3, r3, #3
 80023fa:	687a      	ldr	r2, [r7, #4]
 80023fc:	4413      	add	r3, r2
 80023fe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	2201      	movs	r2, #1
 8002404:	705a      	strb	r2, [r3, #1]
 8002406:	e00e      	b.n	8002426 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002408:	78fb      	ldrb	r3, [r7, #3]
 800240a:	f003 0207 	and.w	r2, r3, #7
 800240e:	4613      	mov	r3, r2
 8002410:	009b      	lsls	r3, r3, #2
 8002412:	4413      	add	r3, r2
 8002414:	00db      	lsls	r3, r3, #3
 8002416:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800241a:	687a      	ldr	r2, [r7, #4]
 800241c:	4413      	add	r3, r2
 800241e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	2200      	movs	r2, #0
 8002424:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	2200      	movs	r2, #0
 800242a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800242c:	78fb      	ldrb	r3, [r7, #3]
 800242e:	f003 0307 	and.w	r3, r3, #7
 8002432:	b2da      	uxtb	r2, r3
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800243e:	2b01      	cmp	r3, #1
 8002440:	d101      	bne.n	8002446 <HAL_PCD_EP_ClrStall+0x82>
 8002442:	2302      	movs	r3, #2
 8002444:	e00e      	b.n	8002464 <HAL_PCD_EP_ClrStall+0xa0>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2201      	movs	r2, #1
 800244a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	68f9      	ldr	r1, [r7, #12]
 8002454:	4618      	mov	r0, r3
 8002456:	f005 f8e4 	bl	8007622 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2200      	movs	r2, #0
 800245e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002462:	2300      	movs	r3, #0
}
 8002464:	4618      	mov	r0, r3
 8002466:	3710      	adds	r7, #16
 8002468:	46bd      	mov	sp, r7
 800246a:	bd80      	pop	{r7, pc}

0800246c <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b08e      	sub	sp, #56	; 0x38
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002474:	e2d1      	b.n	8002a1a <PCD_EP_ISR_Handler+0x5ae>
  {
    wIstr = hpcd->Instance->ISTR;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800247e:	85fb      	strh	r3, [r7, #46]	; 0x2e
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002480:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002482:	b2db      	uxtb	r3, r3
 8002484:	f003 030f 	and.w	r3, r3, #15
 8002488:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 800248c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002490:	2b00      	cmp	r3, #0
 8002492:	f040 8152 	bne.w	800273a <PCD_EP_ISR_Handler+0x2ce>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002496:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002498:	f003 0310 	and.w	r3, r3, #16
 800249c:	2b00      	cmp	r3, #0
 800249e:	d150      	bne.n	8002542 <PCD_EP_ISR_Handler+0xd6>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	881b      	ldrh	r3, [r3, #0]
 80024a6:	b29b      	uxth	r3, r3
 80024a8:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80024ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024b0:	81fb      	strh	r3, [r7, #14]
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681a      	ldr	r2, [r3, #0]
 80024b6:	89fb      	ldrh	r3, [r7, #14]
 80024b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80024bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80024c0:	b29b      	uxth	r3, r3
 80024c2:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	3328      	adds	r3, #40	; 0x28
 80024c8:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80024d2:	b29b      	uxth	r3, r3
 80024d4:	461a      	mov	r2, r3
 80024d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d8:	781b      	ldrb	r3, [r3, #0]
 80024da:	00db      	lsls	r3, r3, #3
 80024dc:	4413      	add	r3, r2
 80024de:	687a      	ldr	r2, [r7, #4]
 80024e0:	6812      	ldr	r2, [r2, #0]
 80024e2:	4413      	add	r3, r2
 80024e4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80024e8:	881b      	ldrh	r3, [r3, #0]
 80024ea:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80024ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f0:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80024f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f4:	695a      	ldr	r2, [r3, #20]
 80024f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f8:	69db      	ldr	r3, [r3, #28]
 80024fa:	441a      	add	r2, r3
 80024fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024fe:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002500:	2100      	movs	r1, #0
 8002502:	6878      	ldr	r0, [r7, #4]
 8002504:	f007 f863 	bl	80095ce <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800250e:	b2db      	uxtb	r3, r3
 8002510:	2b00      	cmp	r3, #0
 8002512:	f000 8282 	beq.w	8002a1a <PCD_EP_ISR_Handler+0x5ae>
 8002516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002518:	699b      	ldr	r3, [r3, #24]
 800251a:	2b00      	cmp	r3, #0
 800251c:	f040 827d 	bne.w	8002a1a <PCD_EP_ISR_Handler+0x5ae>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002526:	b2db      	uxtb	r3, r3
 8002528:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800252c:	b2da      	uxtb	r2, r3
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	b292      	uxth	r2, r2
 8002534:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2200      	movs	r2, #0
 800253c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002540:	e26b      	b.n	8002a1a <PCD_EP_ISR_Handler+0x5ae>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002548:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	881b      	ldrh	r3, [r3, #0]
 8002550:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002552:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002554:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002558:	2b00      	cmp	r3, #0
 800255a:	d032      	beq.n	80025c2 <PCD_EP_ISR_Handler+0x156>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002564:	b29b      	uxth	r3, r3
 8002566:	461a      	mov	r2, r3
 8002568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800256a:	781b      	ldrb	r3, [r3, #0]
 800256c:	00db      	lsls	r3, r3, #3
 800256e:	4413      	add	r3, r2
 8002570:	687a      	ldr	r2, [r7, #4]
 8002572:	6812      	ldr	r2, [r2, #0]
 8002574:	4413      	add	r3, r2
 8002576:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800257a:	881b      	ldrh	r3, [r3, #0]
 800257c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002582:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6818      	ldr	r0, [r3, #0]
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 800258e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002590:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002594:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002596:	b29b      	uxth	r3, r3
 8002598:	f005 f979 	bl	800788e <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	881b      	ldrh	r3, [r3, #0]
 80025a2:	b29a      	uxth	r2, r3
 80025a4:	f640 738f 	movw	r3, #3983	; 0xf8f
 80025a8:	4013      	ands	r3, r2
 80025aa:	823b      	strh	r3, [r7, #16]
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	8a3a      	ldrh	r2, [r7, #16]
 80025b2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80025b6:	b292      	uxth	r2, r2
 80025b8:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80025ba:	6878      	ldr	r0, [r7, #4]
 80025bc:	f006 ffda 	bl	8009574 <HAL_PCD_SetupStageCallback>
 80025c0:	e22b      	b.n	8002a1a <PCD_EP_ISR_Handler+0x5ae>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80025c2:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	f280 8227 	bge.w	8002a1a <PCD_EP_ISR_Handler+0x5ae>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	881b      	ldrh	r3, [r3, #0]
 80025d2:	b29a      	uxth	r2, r3
 80025d4:	f640 738f 	movw	r3, #3983	; 0xf8f
 80025d8:	4013      	ands	r3, r2
 80025da:	83bb      	strh	r3, [r7, #28]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	8bba      	ldrh	r2, [r7, #28]
 80025e2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80025e6:	b292      	uxth	r2, r2
 80025e8:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025f2:	b29b      	uxth	r3, r3
 80025f4:	461a      	mov	r2, r3
 80025f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f8:	781b      	ldrb	r3, [r3, #0]
 80025fa:	00db      	lsls	r3, r3, #3
 80025fc:	4413      	add	r3, r2
 80025fe:	687a      	ldr	r2, [r7, #4]
 8002600:	6812      	ldr	r2, [r2, #0]
 8002602:	4413      	add	r3, r2
 8002604:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002608:	881b      	ldrh	r3, [r3, #0]
 800260a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800260e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002610:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002614:	69db      	ldr	r3, [r3, #28]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d019      	beq.n	800264e <PCD_EP_ISR_Handler+0x1e2>
 800261a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800261c:	695b      	ldr	r3, [r3, #20]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d015      	beq.n	800264e <PCD_EP_ISR_Handler+0x1e2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6818      	ldr	r0, [r3, #0]
 8002626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002628:	6959      	ldr	r1, [r3, #20]
 800262a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800262c:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800262e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002630:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002632:	b29b      	uxth	r3, r3
 8002634:	f005 f92b 	bl	800788e <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800263a:	695a      	ldr	r2, [r3, #20]
 800263c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800263e:	69db      	ldr	r3, [r3, #28]
 8002640:	441a      	add	r2, r3
 8002642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002644:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002646:	2100      	movs	r1, #0
 8002648:	6878      	ldr	r0, [r7, #4]
 800264a:	f006 ffa5 	bl	8009598 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	61bb      	str	r3, [r7, #24]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800265c:	b29b      	uxth	r3, r3
 800265e:	461a      	mov	r2, r3
 8002660:	69bb      	ldr	r3, [r7, #24]
 8002662:	4413      	add	r3, r2
 8002664:	61bb      	str	r3, [r7, #24]
 8002666:	69bb      	ldr	r3, [r7, #24]
 8002668:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800266c:	617b      	str	r3, [r7, #20]
 800266e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002670:	691b      	ldr	r3, [r3, #16]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d112      	bne.n	800269c <PCD_EP_ISR_Handler+0x230>
 8002676:	697b      	ldr	r3, [r7, #20]
 8002678:	881b      	ldrh	r3, [r3, #0]
 800267a:	b29b      	uxth	r3, r3
 800267c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002680:	b29a      	uxth	r2, r3
 8002682:	697b      	ldr	r3, [r7, #20]
 8002684:	801a      	strh	r2, [r3, #0]
 8002686:	697b      	ldr	r3, [r7, #20]
 8002688:	881b      	ldrh	r3, [r3, #0]
 800268a:	b29b      	uxth	r3, r3
 800268c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002690:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002694:	b29a      	uxth	r2, r3
 8002696:	697b      	ldr	r3, [r7, #20]
 8002698:	801a      	strh	r2, [r3, #0]
 800269a:	e02f      	b.n	80026fc <PCD_EP_ISR_Handler+0x290>
 800269c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800269e:	691b      	ldr	r3, [r3, #16]
 80026a0:	2b3e      	cmp	r3, #62	; 0x3e
 80026a2:	d813      	bhi.n	80026cc <PCD_EP_ISR_Handler+0x260>
 80026a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a6:	691b      	ldr	r3, [r3, #16]
 80026a8:	085b      	lsrs	r3, r3, #1
 80026aa:	633b      	str	r3, [r7, #48]	; 0x30
 80026ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ae:	691b      	ldr	r3, [r3, #16]
 80026b0:	f003 0301 	and.w	r3, r3, #1
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d002      	beq.n	80026be <PCD_EP_ISR_Handler+0x252>
 80026b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026ba:	3301      	adds	r3, #1
 80026bc:	633b      	str	r3, [r7, #48]	; 0x30
 80026be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026c0:	b29b      	uxth	r3, r3
 80026c2:	029b      	lsls	r3, r3, #10
 80026c4:	b29a      	uxth	r2, r3
 80026c6:	697b      	ldr	r3, [r7, #20]
 80026c8:	801a      	strh	r2, [r3, #0]
 80026ca:	e017      	b.n	80026fc <PCD_EP_ISR_Handler+0x290>
 80026cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ce:	691b      	ldr	r3, [r3, #16]
 80026d0:	095b      	lsrs	r3, r3, #5
 80026d2:	633b      	str	r3, [r7, #48]	; 0x30
 80026d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d6:	691b      	ldr	r3, [r3, #16]
 80026d8:	f003 031f 	and.w	r3, r3, #31
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d102      	bne.n	80026e6 <PCD_EP_ISR_Handler+0x27a>
 80026e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026e2:	3b01      	subs	r3, #1
 80026e4:	633b      	str	r3, [r7, #48]	; 0x30
 80026e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026e8:	b29b      	uxth	r3, r3
 80026ea:	029b      	lsls	r3, r3, #10
 80026ec:	b29b      	uxth	r3, r3
 80026ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80026f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80026f6:	b29a      	uxth	r2, r3
 80026f8:	697b      	ldr	r3, [r7, #20]
 80026fa:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	881b      	ldrh	r3, [r3, #0]
 8002702:	b29b      	uxth	r3, r3
 8002704:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002708:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800270c:	827b      	strh	r3, [r7, #18]
 800270e:	8a7b      	ldrh	r3, [r7, #18]
 8002710:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002714:	827b      	strh	r3, [r7, #18]
 8002716:	8a7b      	ldrh	r3, [r7, #18]
 8002718:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800271c:	827b      	strh	r3, [r7, #18]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681a      	ldr	r2, [r3, #0]
 8002722:	8a7b      	ldrh	r3, [r7, #18]
 8002724:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002728:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800272c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002730:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002734:	b29b      	uxth	r3, r3
 8002736:	8013      	strh	r3, [r2, #0]
 8002738:	e16f      	b.n	8002a1a <PCD_EP_ISR_Handler+0x5ae>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	461a      	mov	r2, r3
 8002740:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002744:	009b      	lsls	r3, r3, #2
 8002746:	4413      	add	r3, r2
 8002748:	881b      	ldrh	r3, [r3, #0]
 800274a:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800274c:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8002750:	2b00      	cmp	r3, #0
 8002752:	f280 80e4 	bge.w	800291e <PCD_EP_ISR_Handler+0x4b2>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	461a      	mov	r2, r3
 800275c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002760:	009b      	lsls	r3, r3, #2
 8002762:	4413      	add	r3, r2
 8002764:	881b      	ldrh	r3, [r3, #0]
 8002766:	b29a      	uxth	r2, r3
 8002768:	f640 738f 	movw	r3, #3983	; 0xf8f
 800276c:	4013      	ands	r3, r2
 800276e:	853b      	strh	r3, [r7, #40]	; 0x28
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	461a      	mov	r2, r3
 8002776:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800277a:	009b      	lsls	r3, r3, #2
 800277c:	4413      	add	r3, r2
 800277e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002780:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002784:	b292      	uxth	r2, r2
 8002786:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002788:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800278c:	4613      	mov	r3, r2
 800278e:	009b      	lsls	r3, r3, #2
 8002790:	4413      	add	r3, r2
 8002792:	00db      	lsls	r3, r3, #3
 8002794:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002798:	687a      	ldr	r2, [r7, #4]
 800279a:	4413      	add	r3, r2
 800279c:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800279e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a0:	7b1b      	ldrb	r3, [r3, #12]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d120      	bne.n	80027e8 <PCD_EP_ISR_Handler+0x37c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80027ae:	b29b      	uxth	r3, r3
 80027b0:	461a      	mov	r2, r3
 80027b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b4:	781b      	ldrb	r3, [r3, #0]
 80027b6:	00db      	lsls	r3, r3, #3
 80027b8:	4413      	add	r3, r2
 80027ba:	687a      	ldr	r2, [r7, #4]
 80027bc:	6812      	ldr	r2, [r2, #0]
 80027be:	4413      	add	r3, r2
 80027c0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80027c4:	881b      	ldrh	r3, [r3, #0]
 80027c6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80027ca:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 80027cc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	f000 8083 	beq.w	80028da <PCD_EP_ISR_Handler+0x46e>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6818      	ldr	r0, [r3, #0]
 80027d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027da:	6959      	ldr	r1, [r3, #20]
 80027dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027de:	88da      	ldrh	r2, [r3, #6]
 80027e0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80027e2:	f005 f854 	bl	800788e <USB_ReadPMA>
 80027e6:	e078      	b.n	80028da <PCD_EP_ISR_Handler+0x46e>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80027e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ea:	78db      	ldrb	r3, [r3, #3]
 80027ec:	2b02      	cmp	r3, #2
 80027ee:	d108      	bne.n	8002802 <PCD_EP_ISR_Handler+0x396>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80027f0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80027f2:	461a      	mov	r2, r3
 80027f4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80027f6:	6878      	ldr	r0, [r7, #4]
 80027f8:	f000 f91d 	bl	8002a36 <HAL_PCD_EP_DB_Receive>
 80027fc:	4603      	mov	r3, r0
 80027fe:	86fb      	strh	r3, [r7, #54]	; 0x36
 8002800:	e06b      	b.n	80028da <PCD_EP_ISR_Handler+0x46e>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	461a      	mov	r2, r3
 8002808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800280a:	781b      	ldrb	r3, [r3, #0]
 800280c:	009b      	lsls	r3, r3, #2
 800280e:	4413      	add	r3, r2
 8002810:	881b      	ldrh	r3, [r3, #0]
 8002812:	b29b      	uxth	r3, r3
 8002814:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002818:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800281c:	847b      	strh	r3, [r7, #34]	; 0x22
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	461a      	mov	r2, r3
 8002824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002826:	781b      	ldrb	r3, [r3, #0]
 8002828:	009b      	lsls	r3, r3, #2
 800282a:	441a      	add	r2, r3
 800282c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800282e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002832:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002836:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800283a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800283e:	b29b      	uxth	r3, r3
 8002840:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	461a      	mov	r2, r3
 8002848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800284a:	781b      	ldrb	r3, [r3, #0]
 800284c:	009b      	lsls	r3, r3, #2
 800284e:	4413      	add	r3, r2
 8002850:	881b      	ldrh	r3, [r3, #0]
 8002852:	b29b      	uxth	r3, r3
 8002854:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002858:	2b00      	cmp	r3, #0
 800285a:	d01f      	beq.n	800289c <PCD_EP_ISR_Handler+0x430>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002864:	b29b      	uxth	r3, r3
 8002866:	461a      	mov	r2, r3
 8002868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800286a:	781b      	ldrb	r3, [r3, #0]
 800286c:	00db      	lsls	r3, r3, #3
 800286e:	4413      	add	r3, r2
 8002870:	687a      	ldr	r2, [r7, #4]
 8002872:	6812      	ldr	r2, [r2, #0]
 8002874:	4413      	add	r3, r2
 8002876:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800287a:	881b      	ldrh	r3, [r3, #0]
 800287c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002880:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8002882:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002884:	2b00      	cmp	r3, #0
 8002886:	d028      	beq.n	80028da <PCD_EP_ISR_Handler+0x46e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6818      	ldr	r0, [r3, #0]
 800288c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800288e:	6959      	ldr	r1, [r3, #20]
 8002890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002892:	891a      	ldrh	r2, [r3, #8]
 8002894:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002896:	f004 fffa 	bl	800788e <USB_ReadPMA>
 800289a:	e01e      	b.n	80028da <PCD_EP_ISR_Handler+0x46e>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80028a4:	b29b      	uxth	r3, r3
 80028a6:	461a      	mov	r2, r3
 80028a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028aa:	781b      	ldrb	r3, [r3, #0]
 80028ac:	00db      	lsls	r3, r3, #3
 80028ae:	4413      	add	r3, r2
 80028b0:	687a      	ldr	r2, [r7, #4]
 80028b2:	6812      	ldr	r2, [r2, #0]
 80028b4:	4413      	add	r3, r2
 80028b6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80028ba:	881b      	ldrh	r3, [r3, #0]
 80028bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80028c0:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80028c2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d008      	beq.n	80028da <PCD_EP_ISR_Handler+0x46e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6818      	ldr	r0, [r3, #0]
 80028cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ce:	6959      	ldr	r1, [r3, #20]
 80028d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d2:	895a      	ldrh	r2, [r3, #10]
 80028d4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80028d6:	f004 ffda 	bl	800788e <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80028da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028dc:	69da      	ldr	r2, [r3, #28]
 80028de:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80028e0:	441a      	add	r2, r3
 80028e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e4:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80028e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e8:	695a      	ldr	r2, [r3, #20]
 80028ea:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80028ec:	441a      	add	r2, r3
 80028ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f0:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80028f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f4:	699b      	ldr	r3, [r3, #24]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d004      	beq.n	8002904 <PCD_EP_ISR_Handler+0x498>
 80028fa:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80028fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028fe:	691b      	ldr	r3, [r3, #16]
 8002900:	429a      	cmp	r2, r3
 8002902:	d206      	bcs.n	8002912 <PCD_EP_ISR_Handler+0x4a6>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002906:	781b      	ldrb	r3, [r3, #0]
 8002908:	4619      	mov	r1, r3
 800290a:	6878      	ldr	r0, [r7, #4]
 800290c:	f006 fe44 	bl	8009598 <HAL_PCD_DataOutStageCallback>
 8002910:	e005      	b.n	800291e <PCD_EP_ISR_Handler+0x4b2>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002918:	4618      	mov	r0, r3
 800291a:	f003 fd02 	bl	8006322 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800291e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002920:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002924:	2b00      	cmp	r3, #0
 8002926:	d078      	beq.n	8002a1a <PCD_EP_ISR_Handler+0x5ae>
      {
        ep = &hpcd->IN_ep[epindex];
 8002928:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800292c:	1c5a      	adds	r2, r3, #1
 800292e:	4613      	mov	r3, r2
 8002930:	009b      	lsls	r3, r3, #2
 8002932:	4413      	add	r3, r2
 8002934:	00db      	lsls	r3, r3, #3
 8002936:	687a      	ldr	r2, [r7, #4]
 8002938:	4413      	add	r3, r2
 800293a:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	461a      	mov	r2, r3
 8002942:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002946:	009b      	lsls	r3, r3, #2
 8002948:	4413      	add	r3, r2
 800294a:	881b      	ldrh	r3, [r3, #0]
 800294c:	b29b      	uxth	r3, r3
 800294e:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002952:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002956:	843b      	strh	r3, [r7, #32]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	461a      	mov	r2, r3
 800295e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002962:	009b      	lsls	r3, r3, #2
 8002964:	441a      	add	r2, r3
 8002966:	8c3b      	ldrh	r3, [r7, #32]
 8002968:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800296c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002970:	b29b      	uxth	r3, r3
 8002972:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 8002974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002976:	78db      	ldrb	r3, [r3, #3]
 8002978:	2b02      	cmp	r3, #2
 800297a:	d108      	bne.n	800298e <PCD_EP_ISR_Handler+0x522>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 800297c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800297e:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 8002980:	2b02      	cmp	r3, #2
 8002982:	d144      	bne.n	8002a0e <PCD_EP_ISR_Handler+0x5a2>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002984:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002986:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800298a:	2b00      	cmp	r3, #0
 800298c:	d13f      	bne.n	8002a0e <PCD_EP_ISR_Handler+0x5a2>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002996:	b29b      	uxth	r3, r3
 8002998:	461a      	mov	r2, r3
 800299a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800299c:	781b      	ldrb	r3, [r3, #0]
 800299e:	00db      	lsls	r3, r3, #3
 80029a0:	4413      	add	r3, r2
 80029a2:	687a      	ldr	r2, [r7, #4]
 80029a4:	6812      	ldr	r2, [r2, #0]
 80029a6:	4413      	add	r3, r2
 80029a8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80029ac:	881b      	ldrh	r3, [r3, #0]
 80029ae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80029b2:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 80029b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b6:	699a      	ldr	r2, [r3, #24]
 80029b8:	8bfb      	ldrh	r3, [r7, #30]
 80029ba:	429a      	cmp	r2, r3
 80029bc:	d906      	bls.n	80029cc <PCD_EP_ISR_Handler+0x560>
          {
            ep->xfer_len -= TxByteNbre;
 80029be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c0:	699a      	ldr	r2, [r3, #24]
 80029c2:	8bfb      	ldrh	r3, [r7, #30]
 80029c4:	1ad2      	subs	r2, r2, r3
 80029c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c8:	619a      	str	r2, [r3, #24]
 80029ca:	e002      	b.n	80029d2 <PCD_EP_ISR_Handler+0x566>
          }
          else
          {
            ep->xfer_len = 0U;
 80029cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ce:	2200      	movs	r2, #0
 80029d0:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 80029d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d4:	699b      	ldr	r3, [r3, #24]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d106      	bne.n	80029e8 <PCD_EP_ISR_Handler+0x57c>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80029da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029dc:	781b      	ldrb	r3, [r3, #0]
 80029de:	4619      	mov	r1, r3
 80029e0:	6878      	ldr	r0, [r7, #4]
 80029e2:	f006 fdf4 	bl	80095ce <HAL_PCD_DataInStageCallback>
 80029e6:	e018      	b.n	8002a1a <PCD_EP_ISR_Handler+0x5ae>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 80029e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ea:	695a      	ldr	r2, [r3, #20]
 80029ec:	8bfb      	ldrh	r3, [r7, #30]
 80029ee:	441a      	add	r2, r3
 80029f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f2:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 80029f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f6:	69da      	ldr	r2, [r3, #28]
 80029f8:	8bfb      	ldrh	r3, [r7, #30]
 80029fa:	441a      	add	r2, r3
 80029fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029fe:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a06:	4618      	mov	r0, r3
 8002a08:	f003 fc8b 	bl	8006322 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8002a0c:	e005      	b.n	8002a1a <PCD_EP_ISR_Handler+0x5ae>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002a0e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002a10:	461a      	mov	r2, r3
 8002a12:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a14:	6878      	ldr	r0, [r7, #4]
 8002a16:	f000 f917 	bl	8002c48 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002a22:	b29b      	uxth	r3, r3
 8002a24:	b21b      	sxth	r3, r3
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	f6ff ad25 	blt.w	8002476 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002a2c:	2300      	movs	r3, #0
}
 8002a2e:	4618      	mov	r0, r3
 8002a30:	3738      	adds	r7, #56	; 0x38
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd80      	pop	{r7, pc}

08002a36 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002a36:	b580      	push	{r7, lr}
 8002a38:	b088      	sub	sp, #32
 8002a3a:	af00      	add	r7, sp, #0
 8002a3c:	60f8      	str	r0, [r7, #12]
 8002a3e:	60b9      	str	r1, [r7, #8]
 8002a40:	4613      	mov	r3, r2
 8002a42:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002a44:	88fb      	ldrh	r3, [r7, #6]
 8002a46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d07c      	beq.n	8002b48 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a56:	b29b      	uxth	r3, r3
 8002a58:	461a      	mov	r2, r3
 8002a5a:	68bb      	ldr	r3, [r7, #8]
 8002a5c:	781b      	ldrb	r3, [r3, #0]
 8002a5e:	00db      	lsls	r3, r3, #3
 8002a60:	4413      	add	r3, r2
 8002a62:	68fa      	ldr	r2, [r7, #12]
 8002a64:	6812      	ldr	r2, [r2, #0]
 8002a66:	4413      	add	r3, r2
 8002a68:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002a6c:	881b      	ldrh	r3, [r3, #0]
 8002a6e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a72:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002a74:	68bb      	ldr	r3, [r7, #8]
 8002a76:	699a      	ldr	r2, [r3, #24]
 8002a78:	8b7b      	ldrh	r3, [r7, #26]
 8002a7a:	429a      	cmp	r2, r3
 8002a7c:	d306      	bcc.n	8002a8c <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8002a7e:	68bb      	ldr	r3, [r7, #8]
 8002a80:	699a      	ldr	r2, [r3, #24]
 8002a82:	8b7b      	ldrh	r3, [r7, #26]
 8002a84:	1ad2      	subs	r2, r2, r3
 8002a86:	68bb      	ldr	r3, [r7, #8]
 8002a88:	619a      	str	r2, [r3, #24]
 8002a8a:	e002      	b.n	8002a92 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8002a8c:	68bb      	ldr	r3, [r7, #8]
 8002a8e:	2200      	movs	r2, #0
 8002a90:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002a92:	68bb      	ldr	r3, [r7, #8]
 8002a94:	699b      	ldr	r3, [r3, #24]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d123      	bne.n	8002ae2 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	461a      	mov	r2, r3
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	781b      	ldrb	r3, [r3, #0]
 8002aa4:	009b      	lsls	r3, r3, #2
 8002aa6:	4413      	add	r3, r2
 8002aa8:	881b      	ldrh	r3, [r3, #0]
 8002aaa:	b29b      	uxth	r3, r3
 8002aac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002ab0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ab4:	833b      	strh	r3, [r7, #24]
 8002ab6:	8b3b      	ldrh	r3, [r7, #24]
 8002ab8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002abc:	833b      	strh	r3, [r7, #24]
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	461a      	mov	r2, r3
 8002ac4:	68bb      	ldr	r3, [r7, #8]
 8002ac6:	781b      	ldrb	r3, [r3, #0]
 8002ac8:	009b      	lsls	r3, r3, #2
 8002aca:	441a      	add	r2, r3
 8002acc:	8b3b      	ldrh	r3, [r7, #24]
 8002ace:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002ad2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002ad6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ada:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ade:	b29b      	uxth	r3, r3
 8002ae0:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002ae2:	88fb      	ldrh	r3, [r7, #6]
 8002ae4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d01f      	beq.n	8002b2c <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	461a      	mov	r2, r3
 8002af2:	68bb      	ldr	r3, [r7, #8]
 8002af4:	781b      	ldrb	r3, [r3, #0]
 8002af6:	009b      	lsls	r3, r3, #2
 8002af8:	4413      	add	r3, r2
 8002afa:	881b      	ldrh	r3, [r3, #0]
 8002afc:	b29b      	uxth	r3, r3
 8002afe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b06:	82fb      	strh	r3, [r7, #22]
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	461a      	mov	r2, r3
 8002b0e:	68bb      	ldr	r3, [r7, #8]
 8002b10:	781b      	ldrb	r3, [r3, #0]
 8002b12:	009b      	lsls	r3, r3, #2
 8002b14:	441a      	add	r2, r3
 8002b16:	8afb      	ldrh	r3, [r7, #22]
 8002b18:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002b1c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002b20:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b24:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002b28:	b29b      	uxth	r3, r3
 8002b2a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002b2c:	8b7b      	ldrh	r3, [r7, #26]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	f000 8085 	beq.w	8002c3e <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	6818      	ldr	r0, [r3, #0]
 8002b38:	68bb      	ldr	r3, [r7, #8]
 8002b3a:	6959      	ldr	r1, [r3, #20]
 8002b3c:	68bb      	ldr	r3, [r7, #8]
 8002b3e:	891a      	ldrh	r2, [r3, #8]
 8002b40:	8b7b      	ldrh	r3, [r7, #26]
 8002b42:	f004 fea4 	bl	800788e <USB_ReadPMA>
 8002b46:	e07a      	b.n	8002c3e <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b50:	b29b      	uxth	r3, r3
 8002b52:	461a      	mov	r2, r3
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	781b      	ldrb	r3, [r3, #0]
 8002b58:	00db      	lsls	r3, r3, #3
 8002b5a:	4413      	add	r3, r2
 8002b5c:	68fa      	ldr	r2, [r7, #12]
 8002b5e:	6812      	ldr	r2, [r2, #0]
 8002b60:	4413      	add	r3, r2
 8002b62:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002b66:	881b      	ldrh	r3, [r3, #0]
 8002b68:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b6c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002b6e:	68bb      	ldr	r3, [r7, #8]
 8002b70:	699a      	ldr	r2, [r3, #24]
 8002b72:	8b7b      	ldrh	r3, [r7, #26]
 8002b74:	429a      	cmp	r2, r3
 8002b76:	d306      	bcc.n	8002b86 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8002b78:	68bb      	ldr	r3, [r7, #8]
 8002b7a:	699a      	ldr	r2, [r3, #24]
 8002b7c:	8b7b      	ldrh	r3, [r7, #26]
 8002b7e:	1ad2      	subs	r2, r2, r3
 8002b80:	68bb      	ldr	r3, [r7, #8]
 8002b82:	619a      	str	r2, [r3, #24]
 8002b84:	e002      	b.n	8002b8c <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8002b86:	68bb      	ldr	r3, [r7, #8]
 8002b88:	2200      	movs	r2, #0
 8002b8a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	699b      	ldr	r3, [r3, #24]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d123      	bne.n	8002bdc <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	461a      	mov	r2, r3
 8002b9a:	68bb      	ldr	r3, [r7, #8]
 8002b9c:	781b      	ldrb	r3, [r3, #0]
 8002b9e:	009b      	lsls	r3, r3, #2
 8002ba0:	4413      	add	r3, r2
 8002ba2:	881b      	ldrh	r3, [r3, #0]
 8002ba4:	b29b      	uxth	r3, r3
 8002ba6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002baa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bae:	83fb      	strh	r3, [r7, #30]
 8002bb0:	8bfb      	ldrh	r3, [r7, #30]
 8002bb2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002bb6:	83fb      	strh	r3, [r7, #30]
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	461a      	mov	r2, r3
 8002bbe:	68bb      	ldr	r3, [r7, #8]
 8002bc0:	781b      	ldrb	r3, [r3, #0]
 8002bc2:	009b      	lsls	r3, r3, #2
 8002bc4:	441a      	add	r2, r3
 8002bc6:	8bfb      	ldrh	r3, [r7, #30]
 8002bc8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002bcc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002bd0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002bd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002bd8:	b29b      	uxth	r3, r3
 8002bda:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002bdc:	88fb      	ldrh	r3, [r7, #6]
 8002bde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d11f      	bne.n	8002c26 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	461a      	mov	r2, r3
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	781b      	ldrb	r3, [r3, #0]
 8002bf0:	009b      	lsls	r3, r3, #2
 8002bf2:	4413      	add	r3, r2
 8002bf4:	881b      	ldrh	r3, [r3, #0]
 8002bf6:	b29b      	uxth	r3, r3
 8002bf8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002bfc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c00:	83bb      	strh	r3, [r7, #28]
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	461a      	mov	r2, r3
 8002c08:	68bb      	ldr	r3, [r7, #8]
 8002c0a:	781b      	ldrb	r3, [r3, #0]
 8002c0c:	009b      	lsls	r3, r3, #2
 8002c0e:	441a      	add	r2, r3
 8002c10:	8bbb      	ldrh	r3, [r7, #28]
 8002c12:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002c16:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002c1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c1e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002c22:	b29b      	uxth	r3, r3
 8002c24:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002c26:	8b7b      	ldrh	r3, [r7, #26]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d008      	beq.n	8002c3e <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	6818      	ldr	r0, [r3, #0]
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	6959      	ldr	r1, [r3, #20]
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	895a      	ldrh	r2, [r3, #10]
 8002c38:	8b7b      	ldrh	r3, [r7, #26]
 8002c3a:	f004 fe28 	bl	800788e <USB_ReadPMA>
    }
  }

  return count;
 8002c3e:	8b7b      	ldrh	r3, [r7, #26]
}
 8002c40:	4618      	mov	r0, r3
 8002c42:	3720      	adds	r7, #32
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bd80      	pop	{r7, pc}

08002c48 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b092      	sub	sp, #72	; 0x48
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	60f8      	str	r0, [r7, #12]
 8002c50:	60b9      	str	r1, [r7, #8]
 8002c52:	4613      	mov	r3, r2
 8002c54:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002c56:	88fb      	ldrh	r3, [r7, #6]
 8002c58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	f000 8130 	beq.w	8002ec2 <HAL_PCD_EP_DB_Transmit+0x27a>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c6a:	b29b      	uxth	r3, r3
 8002c6c:	461a      	mov	r2, r3
 8002c6e:	68bb      	ldr	r3, [r7, #8]
 8002c70:	781b      	ldrb	r3, [r3, #0]
 8002c72:	00db      	lsls	r3, r3, #3
 8002c74:	4413      	add	r3, r2
 8002c76:	68fa      	ldr	r2, [r7, #12]
 8002c78:	6812      	ldr	r2, [r2, #0]
 8002c7a:	4413      	add	r3, r2
 8002c7c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002c80:	881b      	ldrh	r3, [r3, #0]
 8002c82:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c86:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len > TxByteNbre)
 8002c88:	68bb      	ldr	r3, [r7, #8]
 8002c8a:	699a      	ldr	r2, [r3, #24]
 8002c8c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002c8e:	429a      	cmp	r2, r3
 8002c90:	d906      	bls.n	8002ca0 <HAL_PCD_EP_DB_Transmit+0x58>
    {
      ep->xfer_len -= TxByteNbre;
 8002c92:	68bb      	ldr	r3, [r7, #8]
 8002c94:	699a      	ldr	r2, [r3, #24]
 8002c96:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002c98:	1ad2      	subs	r2, r2, r3
 8002c9a:	68bb      	ldr	r3, [r7, #8]
 8002c9c:	619a      	str	r2, [r3, #24]
 8002c9e:	e002      	b.n	8002ca6 <HAL_PCD_EP_DB_Transmit+0x5e>
    }
    else
    {
      ep->xfer_len = 0U;
 8002ca0:	68bb      	ldr	r3, [r7, #8]
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002ca6:	68bb      	ldr	r3, [r7, #8]
 8002ca8:	699b      	ldr	r3, [r3, #24]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d12c      	bne.n	8002d08 <HAL_PCD_EP_DB_Transmit+0xc0>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002cae:	68bb      	ldr	r3, [r7, #8]
 8002cb0:	781b      	ldrb	r3, [r3, #0]
 8002cb2:	4619      	mov	r1, r3
 8002cb4:	68f8      	ldr	r0, [r7, #12]
 8002cb6:	f006 fc8a 	bl	80095ce <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002cba:	88fb      	ldrh	r3, [r7, #6]
 8002cbc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	f000 822d 	beq.w	8003120 <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	461a      	mov	r2, r3
 8002ccc:	68bb      	ldr	r3, [r7, #8]
 8002cce:	781b      	ldrb	r3, [r3, #0]
 8002cd0:	009b      	lsls	r3, r3, #2
 8002cd2:	4413      	add	r3, r2
 8002cd4:	881b      	ldrh	r3, [r3, #0]
 8002cd6:	b29b      	uxth	r3, r3
 8002cd8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002cdc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ce0:	827b      	strh	r3, [r7, #18]
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	461a      	mov	r2, r3
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	781b      	ldrb	r3, [r3, #0]
 8002cec:	009b      	lsls	r3, r3, #2
 8002cee:	441a      	add	r2, r3
 8002cf0:	8a7b      	ldrh	r3, [r7, #18]
 8002cf2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002cf6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002cfa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002cfe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d02:	b29b      	uxth	r3, r3
 8002d04:	8013      	strh	r3, [r2, #0]
 8002d06:	e20b      	b.n	8003120 <HAL_PCD_EP_DB_Transmit+0x4d8>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002d08:	88fb      	ldrh	r3, [r7, #6]
 8002d0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d01f      	beq.n	8002d52 <HAL_PCD_EP_DB_Transmit+0x10a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	461a      	mov	r2, r3
 8002d18:	68bb      	ldr	r3, [r7, #8]
 8002d1a:	781b      	ldrb	r3, [r3, #0]
 8002d1c:	009b      	lsls	r3, r3, #2
 8002d1e:	4413      	add	r3, r2
 8002d20:	881b      	ldrh	r3, [r3, #0]
 8002d22:	b29b      	uxth	r3, r3
 8002d24:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d2c:	84bb      	strh	r3, [r7, #36]	; 0x24
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	461a      	mov	r2, r3
 8002d34:	68bb      	ldr	r3, [r7, #8]
 8002d36:	781b      	ldrb	r3, [r3, #0]
 8002d38:	009b      	lsls	r3, r3, #2
 8002d3a:	441a      	add	r2, r3
 8002d3c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002d3e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002d42:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002d46:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002d4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d4e:	b29b      	uxth	r3, r3
 8002d50:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002d52:	68bb      	ldr	r3, [r7, #8]
 8002d54:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002d58:	2b01      	cmp	r3, #1
 8002d5a:	f040 81e1 	bne.w	8003120 <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        ep->xfer_buff += TxByteNbre;
 8002d5e:	68bb      	ldr	r3, [r7, #8]
 8002d60:	695a      	ldr	r2, [r3, #20]
 8002d62:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002d64:	441a      	add	r2, r3
 8002d66:	68bb      	ldr	r3, [r7, #8]
 8002d68:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002d6a:	68bb      	ldr	r3, [r7, #8]
 8002d6c:	69da      	ldr	r2, [r3, #28]
 8002d6e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002d70:	441a      	add	r2, r3
 8002d72:	68bb      	ldr	r3, [r7, #8]
 8002d74:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002d76:	68bb      	ldr	r3, [r7, #8]
 8002d78:	6a1a      	ldr	r2, [r3, #32]
 8002d7a:	68bb      	ldr	r3, [r7, #8]
 8002d7c:	691b      	ldr	r3, [r3, #16]
 8002d7e:	429a      	cmp	r2, r3
 8002d80:	d309      	bcc.n	8002d96 <HAL_PCD_EP_DB_Transmit+0x14e>
        {
          len = ep->maxpacket;
 8002d82:	68bb      	ldr	r3, [r7, #8]
 8002d84:	691b      	ldr	r3, [r3, #16]
 8002d86:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 8002d88:	68bb      	ldr	r3, [r7, #8]
 8002d8a:	6a1a      	ldr	r2, [r3, #32]
 8002d8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d8e:	1ad2      	subs	r2, r2, r3
 8002d90:	68bb      	ldr	r3, [r7, #8]
 8002d92:	621a      	str	r2, [r3, #32]
 8002d94:	e014      	b.n	8002dc0 <HAL_PCD_EP_DB_Transmit+0x178>
        }
        else if (ep->xfer_len_db == 0U)
 8002d96:	68bb      	ldr	r3, [r7, #8]
 8002d98:	6a1b      	ldr	r3, [r3, #32]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d106      	bne.n	8002dac <HAL_PCD_EP_DB_Transmit+0x164>
        {
          len = TxByteNbre;
 8002d9e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002da0:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 8002da2:	68bb      	ldr	r3, [r7, #8]
 8002da4:	2200      	movs	r2, #0
 8002da6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002daa:	e009      	b.n	8002dc0 <HAL_PCD_EP_DB_Transmit+0x178>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002dac:	68bb      	ldr	r3, [r7, #8]
 8002dae:	2200      	movs	r2, #0
 8002db0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8002db4:	68bb      	ldr	r3, [r7, #8]
 8002db6:	6a1b      	ldr	r3, [r3, #32]
 8002db8:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 8002dba:	68bb      	ldr	r3, [r7, #8]
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	785b      	ldrb	r3, [r3, #1]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d155      	bne.n	8002e74 <HAL_PCD_EP_DB_Transmit+0x22c>
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	61bb      	str	r3, [r7, #24]
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002dd6:	b29b      	uxth	r3, r3
 8002dd8:	461a      	mov	r2, r3
 8002dda:	69bb      	ldr	r3, [r7, #24]
 8002ddc:	4413      	add	r3, r2
 8002dde:	61bb      	str	r3, [r7, #24]
 8002de0:	68bb      	ldr	r3, [r7, #8]
 8002de2:	781b      	ldrb	r3, [r3, #0]
 8002de4:	00da      	lsls	r2, r3, #3
 8002de6:	69bb      	ldr	r3, [r7, #24]
 8002de8:	4413      	add	r3, r2
 8002dea:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002dee:	617b      	str	r3, [r7, #20]
 8002df0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d112      	bne.n	8002e1c <HAL_PCD_EP_DB_Transmit+0x1d4>
 8002df6:	697b      	ldr	r3, [r7, #20]
 8002df8:	881b      	ldrh	r3, [r3, #0]
 8002dfa:	b29b      	uxth	r3, r3
 8002dfc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002e00:	b29a      	uxth	r2, r3
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	801a      	strh	r2, [r3, #0]
 8002e06:	697b      	ldr	r3, [r7, #20]
 8002e08:	881b      	ldrh	r3, [r3, #0]
 8002e0a:	b29b      	uxth	r3, r3
 8002e0c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002e10:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002e14:	b29a      	uxth	r2, r3
 8002e16:	697b      	ldr	r3, [r7, #20]
 8002e18:	801a      	strh	r2, [r3, #0]
 8002e1a:	e047      	b.n	8002eac <HAL_PCD_EP_DB_Transmit+0x264>
 8002e1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e1e:	2b3e      	cmp	r3, #62	; 0x3e
 8002e20:	d811      	bhi.n	8002e46 <HAL_PCD_EP_DB_Transmit+0x1fe>
 8002e22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e24:	085b      	lsrs	r3, r3, #1
 8002e26:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e2a:	f003 0301 	and.w	r3, r3, #1
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d002      	beq.n	8002e38 <HAL_PCD_EP_DB_Transmit+0x1f0>
 8002e32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e34:	3301      	adds	r3, #1
 8002e36:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e3a:	b29b      	uxth	r3, r3
 8002e3c:	029b      	lsls	r3, r3, #10
 8002e3e:	b29a      	uxth	r2, r3
 8002e40:	697b      	ldr	r3, [r7, #20]
 8002e42:	801a      	strh	r2, [r3, #0]
 8002e44:	e032      	b.n	8002eac <HAL_PCD_EP_DB_Transmit+0x264>
 8002e46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e48:	095b      	lsrs	r3, r3, #5
 8002e4a:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e4e:	f003 031f 	and.w	r3, r3, #31
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d102      	bne.n	8002e5c <HAL_PCD_EP_DB_Transmit+0x214>
 8002e56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e58:	3b01      	subs	r3, #1
 8002e5a:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e5e:	b29b      	uxth	r3, r3
 8002e60:	029b      	lsls	r3, r3, #10
 8002e62:	b29b      	uxth	r3, r3
 8002e64:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002e68:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002e6c:	b29a      	uxth	r2, r3
 8002e6e:	697b      	ldr	r3, [r7, #20]
 8002e70:	801a      	strh	r2, [r3, #0]
 8002e72:	e01b      	b.n	8002eac <HAL_PCD_EP_DB_Transmit+0x264>
 8002e74:	68bb      	ldr	r3, [r7, #8]
 8002e76:	785b      	ldrb	r3, [r3, #1]
 8002e78:	2b01      	cmp	r3, #1
 8002e7a:	d117      	bne.n	8002eac <HAL_PCD_EP_DB_Transmit+0x264>
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	623b      	str	r3, [r7, #32]
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e8a:	b29b      	uxth	r3, r3
 8002e8c:	461a      	mov	r2, r3
 8002e8e:	6a3b      	ldr	r3, [r7, #32]
 8002e90:	4413      	add	r3, r2
 8002e92:	623b      	str	r3, [r7, #32]
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	781b      	ldrb	r3, [r3, #0]
 8002e98:	00da      	lsls	r2, r3, #3
 8002e9a:	6a3b      	ldr	r3, [r7, #32]
 8002e9c:	4413      	add	r3, r2
 8002e9e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002ea2:	61fb      	str	r3, [r7, #28]
 8002ea4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ea6:	b29a      	uxth	r2, r3
 8002ea8:	69fb      	ldr	r3, [r7, #28]
 8002eaa:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	6818      	ldr	r0, [r3, #0]
 8002eb0:	68bb      	ldr	r3, [r7, #8]
 8002eb2:	6959      	ldr	r1, [r3, #20]
 8002eb4:	68bb      	ldr	r3, [r7, #8]
 8002eb6:	891a      	ldrh	r2, [r3, #8]
 8002eb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002eba:	b29b      	uxth	r3, r3
 8002ebc:	f004 fca6 	bl	800780c <USB_WritePMA>
 8002ec0:	e12e      	b.n	8003120 <HAL_PCD_EP_DB_Transmit+0x4d8>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002eca:	b29b      	uxth	r3, r3
 8002ecc:	461a      	mov	r2, r3
 8002ece:	68bb      	ldr	r3, [r7, #8]
 8002ed0:	781b      	ldrb	r3, [r3, #0]
 8002ed2:	00db      	lsls	r3, r3, #3
 8002ed4:	4413      	add	r3, r2
 8002ed6:	68fa      	ldr	r2, [r7, #12]
 8002ed8:	6812      	ldr	r2, [r2, #0]
 8002eda:	4413      	add	r3, r2
 8002edc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002ee0:	881b      	ldrh	r3, [r3, #0]
 8002ee2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ee6:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len >= TxByteNbre)
 8002ee8:	68bb      	ldr	r3, [r7, #8]
 8002eea:	699a      	ldr	r2, [r3, #24]
 8002eec:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002eee:	429a      	cmp	r2, r3
 8002ef0:	d306      	bcc.n	8002f00 <HAL_PCD_EP_DB_Transmit+0x2b8>
    {
      ep->xfer_len -= TxByteNbre;
 8002ef2:	68bb      	ldr	r3, [r7, #8]
 8002ef4:	699a      	ldr	r2, [r3, #24]
 8002ef6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002ef8:	1ad2      	subs	r2, r2, r3
 8002efa:	68bb      	ldr	r3, [r7, #8]
 8002efc:	619a      	str	r2, [r3, #24]
 8002efe:	e002      	b.n	8002f06 <HAL_PCD_EP_DB_Transmit+0x2be>
    }
    else
    {
      ep->xfer_len = 0U;
 8002f00:	68bb      	ldr	r3, [r7, #8]
 8002f02:	2200      	movs	r2, #0
 8002f04:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002f06:	68bb      	ldr	r3, [r7, #8]
 8002f08:	699b      	ldr	r3, [r3, #24]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d12c      	bne.n	8002f68 <HAL_PCD_EP_DB_Transmit+0x320>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002f0e:	68bb      	ldr	r3, [r7, #8]
 8002f10:	781b      	ldrb	r3, [r3, #0]
 8002f12:	4619      	mov	r1, r3
 8002f14:	68f8      	ldr	r0, [r7, #12]
 8002f16:	f006 fb5a 	bl	80095ce <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002f1a:	88fb      	ldrh	r3, [r7, #6]
 8002f1c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	f040 80fd 	bne.w	8003120 <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	461a      	mov	r2, r3
 8002f2c:	68bb      	ldr	r3, [r7, #8]
 8002f2e:	781b      	ldrb	r3, [r3, #0]
 8002f30:	009b      	lsls	r3, r3, #2
 8002f32:	4413      	add	r3, r2
 8002f34:	881b      	ldrh	r3, [r3, #0]
 8002f36:	b29b      	uxth	r3, r3
 8002f38:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f40:	84fb      	strh	r3, [r7, #38]	; 0x26
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	461a      	mov	r2, r3
 8002f48:	68bb      	ldr	r3, [r7, #8]
 8002f4a:	781b      	ldrb	r3, [r3, #0]
 8002f4c:	009b      	lsls	r3, r3, #2
 8002f4e:	441a      	add	r2, r3
 8002f50:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002f52:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002f56:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002f5a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002f5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f62:	b29b      	uxth	r3, r3
 8002f64:	8013      	strh	r3, [r2, #0]
 8002f66:	e0db      	b.n	8003120 <HAL_PCD_EP_DB_Transmit+0x4d8>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002f68:	88fb      	ldrh	r3, [r7, #6]
 8002f6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d11f      	bne.n	8002fb2 <HAL_PCD_EP_DB_Transmit+0x36a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	461a      	mov	r2, r3
 8002f78:	68bb      	ldr	r3, [r7, #8]
 8002f7a:	781b      	ldrb	r3, [r3, #0]
 8002f7c:	009b      	lsls	r3, r3, #2
 8002f7e:	4413      	add	r3, r2
 8002f80:	881b      	ldrh	r3, [r3, #0]
 8002f82:	b29b      	uxth	r3, r3
 8002f84:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f8c:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	461a      	mov	r2, r3
 8002f94:	68bb      	ldr	r3, [r7, #8]
 8002f96:	781b      	ldrb	r3, [r3, #0]
 8002f98:	009b      	lsls	r3, r3, #2
 8002f9a:	441a      	add	r2, r3
 8002f9c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8002f9e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002fa2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002fa6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002faa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002fae:	b29b      	uxth	r3, r3
 8002fb0:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002fb2:	68bb      	ldr	r3, [r7, #8]
 8002fb4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002fb8:	2b01      	cmp	r3, #1
 8002fba:	f040 80b1 	bne.w	8003120 <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        ep->xfer_buff += TxByteNbre;
 8002fbe:	68bb      	ldr	r3, [r7, #8]
 8002fc0:	695a      	ldr	r2, [r3, #20]
 8002fc2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002fc4:	441a      	add	r2, r3
 8002fc6:	68bb      	ldr	r3, [r7, #8]
 8002fc8:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002fca:	68bb      	ldr	r3, [r7, #8]
 8002fcc:	69da      	ldr	r2, [r3, #28]
 8002fce:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002fd0:	441a      	add	r2, r3
 8002fd2:	68bb      	ldr	r3, [r7, #8]
 8002fd4:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002fd6:	68bb      	ldr	r3, [r7, #8]
 8002fd8:	6a1a      	ldr	r2, [r3, #32]
 8002fda:	68bb      	ldr	r3, [r7, #8]
 8002fdc:	691b      	ldr	r3, [r3, #16]
 8002fde:	429a      	cmp	r2, r3
 8002fe0:	d309      	bcc.n	8002ff6 <HAL_PCD_EP_DB_Transmit+0x3ae>
        {
          len = ep->maxpacket;
 8002fe2:	68bb      	ldr	r3, [r7, #8]
 8002fe4:	691b      	ldr	r3, [r3, #16]
 8002fe6:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 8002fe8:	68bb      	ldr	r3, [r7, #8]
 8002fea:	6a1a      	ldr	r2, [r3, #32]
 8002fec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fee:	1ad2      	subs	r2, r2, r3
 8002ff0:	68bb      	ldr	r3, [r7, #8]
 8002ff2:	621a      	str	r2, [r3, #32]
 8002ff4:	e014      	b.n	8003020 <HAL_PCD_EP_DB_Transmit+0x3d8>
        }
        else if (ep->xfer_len_db == 0U)
 8002ff6:	68bb      	ldr	r3, [r7, #8]
 8002ff8:	6a1b      	ldr	r3, [r3, #32]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d106      	bne.n	800300c <HAL_PCD_EP_DB_Transmit+0x3c4>
        {
          len = TxByteNbre;
 8002ffe:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003000:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 8003002:	68bb      	ldr	r3, [r7, #8]
 8003004:	2200      	movs	r2, #0
 8003006:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800300a:	e009      	b.n	8003020 <HAL_PCD_EP_DB_Transmit+0x3d8>
        }
        else
        {
          len = ep->xfer_len_db;
 800300c:	68bb      	ldr	r3, [r7, #8]
 800300e:	6a1b      	ldr	r3, [r3, #32]
 8003010:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 8003012:	68bb      	ldr	r3, [r7, #8]
 8003014:	2200      	movs	r2, #0
 8003016:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	2200      	movs	r2, #0
 800301c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	637b      	str	r3, [r7, #52]	; 0x34
 8003026:	68bb      	ldr	r3, [r7, #8]
 8003028:	785b      	ldrb	r3, [r3, #1]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d155      	bne.n	80030da <HAL_PCD_EP_DB_Transmit+0x492>
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	647b      	str	r3, [r7, #68]	; 0x44
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800303c:	b29b      	uxth	r3, r3
 800303e:	461a      	mov	r2, r3
 8003040:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003042:	4413      	add	r3, r2
 8003044:	647b      	str	r3, [r7, #68]	; 0x44
 8003046:	68bb      	ldr	r3, [r7, #8]
 8003048:	781b      	ldrb	r3, [r3, #0]
 800304a:	00da      	lsls	r2, r3, #3
 800304c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800304e:	4413      	add	r3, r2
 8003050:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003054:	643b      	str	r3, [r7, #64]	; 0x40
 8003056:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003058:	2b00      	cmp	r3, #0
 800305a:	d112      	bne.n	8003082 <HAL_PCD_EP_DB_Transmit+0x43a>
 800305c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800305e:	881b      	ldrh	r3, [r3, #0]
 8003060:	b29b      	uxth	r3, r3
 8003062:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003066:	b29a      	uxth	r2, r3
 8003068:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800306a:	801a      	strh	r2, [r3, #0]
 800306c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800306e:	881b      	ldrh	r3, [r3, #0]
 8003070:	b29b      	uxth	r3, r3
 8003072:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003076:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800307a:	b29a      	uxth	r2, r3
 800307c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800307e:	801a      	strh	r2, [r3, #0]
 8003080:	e044      	b.n	800310c <HAL_PCD_EP_DB_Transmit+0x4c4>
 8003082:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003084:	2b3e      	cmp	r3, #62	; 0x3e
 8003086:	d811      	bhi.n	80030ac <HAL_PCD_EP_DB_Transmit+0x464>
 8003088:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800308a:	085b      	lsrs	r3, r3, #1
 800308c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800308e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003090:	f003 0301 	and.w	r3, r3, #1
 8003094:	2b00      	cmp	r3, #0
 8003096:	d002      	beq.n	800309e <HAL_PCD_EP_DB_Transmit+0x456>
 8003098:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800309a:	3301      	adds	r3, #1
 800309c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800309e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030a0:	b29b      	uxth	r3, r3
 80030a2:	029b      	lsls	r3, r3, #10
 80030a4:	b29a      	uxth	r2, r3
 80030a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030a8:	801a      	strh	r2, [r3, #0]
 80030aa:	e02f      	b.n	800310c <HAL_PCD_EP_DB_Transmit+0x4c4>
 80030ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030ae:	095b      	lsrs	r3, r3, #5
 80030b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80030b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030b4:	f003 031f 	and.w	r3, r3, #31
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d102      	bne.n	80030c2 <HAL_PCD_EP_DB_Transmit+0x47a>
 80030bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030be:	3b01      	subs	r3, #1
 80030c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80030c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030c4:	b29b      	uxth	r3, r3
 80030c6:	029b      	lsls	r3, r3, #10
 80030c8:	b29b      	uxth	r3, r3
 80030ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80030ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80030d2:	b29a      	uxth	r2, r3
 80030d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030d6:	801a      	strh	r2, [r3, #0]
 80030d8:	e018      	b.n	800310c <HAL_PCD_EP_DB_Transmit+0x4c4>
 80030da:	68bb      	ldr	r3, [r7, #8]
 80030dc:	785b      	ldrb	r3, [r3, #1]
 80030de:	2b01      	cmp	r3, #1
 80030e0:	d114      	bne.n	800310c <HAL_PCD_EP_DB_Transmit+0x4c4>
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80030ea:	b29b      	uxth	r3, r3
 80030ec:	461a      	mov	r2, r3
 80030ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030f0:	4413      	add	r3, r2
 80030f2:	637b      	str	r3, [r7, #52]	; 0x34
 80030f4:	68bb      	ldr	r3, [r7, #8]
 80030f6:	781b      	ldrb	r3, [r3, #0]
 80030f8:	00da      	lsls	r2, r3, #3
 80030fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030fc:	4413      	add	r3, r2
 80030fe:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003102:	633b      	str	r3, [r7, #48]	; 0x30
 8003104:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003106:	b29a      	uxth	r2, r3
 8003108:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800310a:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	6818      	ldr	r0, [r3, #0]
 8003110:	68bb      	ldr	r3, [r7, #8]
 8003112:	6959      	ldr	r1, [r3, #20]
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	895a      	ldrh	r2, [r3, #10]
 8003118:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800311a:	b29b      	uxth	r3, r3
 800311c:	f004 fb76 	bl	800780c <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	461a      	mov	r2, r3
 8003126:	68bb      	ldr	r3, [r7, #8]
 8003128:	781b      	ldrb	r3, [r3, #0]
 800312a:	009b      	lsls	r3, r3, #2
 800312c:	4413      	add	r3, r2
 800312e:	881b      	ldrh	r3, [r3, #0]
 8003130:	b29b      	uxth	r3, r3
 8003132:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003136:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800313a:	823b      	strh	r3, [r7, #16]
 800313c:	8a3b      	ldrh	r3, [r7, #16]
 800313e:	f083 0310 	eor.w	r3, r3, #16
 8003142:	823b      	strh	r3, [r7, #16]
 8003144:	8a3b      	ldrh	r3, [r7, #16]
 8003146:	f083 0320 	eor.w	r3, r3, #32
 800314a:	823b      	strh	r3, [r7, #16]
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	461a      	mov	r2, r3
 8003152:	68bb      	ldr	r3, [r7, #8]
 8003154:	781b      	ldrb	r3, [r3, #0]
 8003156:	009b      	lsls	r3, r3, #2
 8003158:	441a      	add	r2, r3
 800315a:	8a3b      	ldrh	r3, [r7, #16]
 800315c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003160:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003164:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003168:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800316c:	b29b      	uxth	r3, r3
 800316e:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8003170:	2300      	movs	r3, #0
}
 8003172:	4618      	mov	r0, r3
 8003174:	3748      	adds	r7, #72	; 0x48
 8003176:	46bd      	mov	sp, r7
 8003178:	bd80      	pop	{r7, pc}

0800317a <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 800317a:	b480      	push	{r7}
 800317c:	b087      	sub	sp, #28
 800317e:	af00      	add	r7, sp, #0
 8003180:	60f8      	str	r0, [r7, #12]
 8003182:	607b      	str	r3, [r7, #4]
 8003184:	460b      	mov	r3, r1
 8003186:	817b      	strh	r3, [r7, #10]
 8003188:	4613      	mov	r3, r2
 800318a:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800318c:	897b      	ldrh	r3, [r7, #10]
 800318e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003192:	b29b      	uxth	r3, r3
 8003194:	2b00      	cmp	r3, #0
 8003196:	d00b      	beq.n	80031b0 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003198:	897b      	ldrh	r3, [r7, #10]
 800319a:	f003 0307 	and.w	r3, r3, #7
 800319e:	1c5a      	adds	r2, r3, #1
 80031a0:	4613      	mov	r3, r2
 80031a2:	009b      	lsls	r3, r3, #2
 80031a4:	4413      	add	r3, r2
 80031a6:	00db      	lsls	r3, r3, #3
 80031a8:	68fa      	ldr	r2, [r7, #12]
 80031aa:	4413      	add	r3, r2
 80031ac:	617b      	str	r3, [r7, #20]
 80031ae:	e009      	b.n	80031c4 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80031b0:	897a      	ldrh	r2, [r7, #10]
 80031b2:	4613      	mov	r3, r2
 80031b4:	009b      	lsls	r3, r3, #2
 80031b6:	4413      	add	r3, r2
 80031b8:	00db      	lsls	r3, r3, #3
 80031ba:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80031be:	68fa      	ldr	r2, [r7, #12]
 80031c0:	4413      	add	r3, r2
 80031c2:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80031c4:	893b      	ldrh	r3, [r7, #8]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d107      	bne.n	80031da <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80031ca:	697b      	ldr	r3, [r7, #20]
 80031cc:	2200      	movs	r2, #0
 80031ce:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	b29a      	uxth	r2, r3
 80031d4:	697b      	ldr	r3, [r7, #20]
 80031d6:	80da      	strh	r2, [r3, #6]
 80031d8:	e00b      	b.n	80031f2 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80031da:	697b      	ldr	r3, [r7, #20]
 80031dc:	2201      	movs	r2, #1
 80031de:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	b29a      	uxth	r2, r3
 80031e4:	697b      	ldr	r3, [r7, #20]
 80031e6:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	0c1b      	lsrs	r3, r3, #16
 80031ec:	b29a      	uxth	r2, r3
 80031ee:	697b      	ldr	r3, [r7, #20]
 80031f0:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 80031f2:	2300      	movs	r3, #0
}
 80031f4:	4618      	mov	r0, r3
 80031f6:	371c      	adds	r7, #28
 80031f8:	46bd      	mov	sp, r7
 80031fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fe:	4770      	bx	lr

08003200 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003200:	b480      	push	{r7}
 8003202:	b085      	sub	sp, #20
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2201      	movs	r2, #1
 8003212:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2200      	movs	r2, #0
 800321a:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003224:	b29b      	uxth	r3, r3
 8003226:	f043 0301 	orr.w	r3, r3, #1
 800322a:	b29a      	uxth	r2, r3
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003238:	b29b      	uxth	r3, r3
 800323a:	f043 0302 	orr.w	r3, r3, #2
 800323e:	b29a      	uxth	r2, r3
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8003246:	2300      	movs	r3, #0
}
 8003248:	4618      	mov	r0, r3
 800324a:	3714      	adds	r7, #20
 800324c:	46bd      	mov	sp, r7
 800324e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003252:	4770      	bx	lr

08003254 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003254:	b480      	push	{r7}
 8003256:	b085      	sub	sp, #20
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d141      	bne.n	80032e6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003262:	4b4b      	ldr	r3, [pc, #300]	; (8003390 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800326a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800326e:	d131      	bne.n	80032d4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003270:	4b47      	ldr	r3, [pc, #284]	; (8003390 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003272:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003276:	4a46      	ldr	r2, [pc, #280]	; (8003390 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003278:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800327c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003280:	4b43      	ldr	r3, [pc, #268]	; (8003390 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003288:	4a41      	ldr	r2, [pc, #260]	; (8003390 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800328a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800328e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003290:	4b40      	ldr	r3, [pc, #256]	; (8003394 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	2232      	movs	r2, #50	; 0x32
 8003296:	fb02 f303 	mul.w	r3, r2, r3
 800329a:	4a3f      	ldr	r2, [pc, #252]	; (8003398 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800329c:	fba2 2303 	umull	r2, r3, r2, r3
 80032a0:	0c9b      	lsrs	r3, r3, #18
 80032a2:	3301      	adds	r3, #1
 80032a4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80032a6:	e002      	b.n	80032ae <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	3b01      	subs	r3, #1
 80032ac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80032ae:	4b38      	ldr	r3, [pc, #224]	; (8003390 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032b0:	695b      	ldr	r3, [r3, #20]
 80032b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032ba:	d102      	bne.n	80032c2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d1f2      	bne.n	80032a8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80032c2:	4b33      	ldr	r3, [pc, #204]	; (8003390 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032c4:	695b      	ldr	r3, [r3, #20]
 80032c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032ce:	d158      	bne.n	8003382 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80032d0:	2303      	movs	r3, #3
 80032d2:	e057      	b.n	8003384 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80032d4:	4b2e      	ldr	r3, [pc, #184]	; (8003390 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80032da:	4a2d      	ldr	r2, [pc, #180]	; (8003390 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80032e0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80032e4:	e04d      	b.n	8003382 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032ec:	d141      	bne.n	8003372 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80032ee:	4b28      	ldr	r3, [pc, #160]	; (8003390 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80032f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032fa:	d131      	bne.n	8003360 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80032fc:	4b24      	ldr	r3, [pc, #144]	; (8003390 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003302:	4a23      	ldr	r2, [pc, #140]	; (8003390 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003304:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003308:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800330c:	4b20      	ldr	r3, [pc, #128]	; (8003390 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003314:	4a1e      	ldr	r2, [pc, #120]	; (8003390 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003316:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800331a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800331c:	4b1d      	ldr	r3, [pc, #116]	; (8003394 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	2232      	movs	r2, #50	; 0x32
 8003322:	fb02 f303 	mul.w	r3, r2, r3
 8003326:	4a1c      	ldr	r2, [pc, #112]	; (8003398 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003328:	fba2 2303 	umull	r2, r3, r2, r3
 800332c:	0c9b      	lsrs	r3, r3, #18
 800332e:	3301      	adds	r3, #1
 8003330:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003332:	e002      	b.n	800333a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	3b01      	subs	r3, #1
 8003338:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800333a:	4b15      	ldr	r3, [pc, #84]	; (8003390 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800333c:	695b      	ldr	r3, [r3, #20]
 800333e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003342:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003346:	d102      	bne.n	800334e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d1f2      	bne.n	8003334 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800334e:	4b10      	ldr	r3, [pc, #64]	; (8003390 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003350:	695b      	ldr	r3, [r3, #20]
 8003352:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003356:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800335a:	d112      	bne.n	8003382 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800335c:	2303      	movs	r3, #3
 800335e:	e011      	b.n	8003384 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003360:	4b0b      	ldr	r3, [pc, #44]	; (8003390 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003362:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003366:	4a0a      	ldr	r2, [pc, #40]	; (8003390 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003368:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800336c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003370:	e007      	b.n	8003382 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003372:	4b07      	ldr	r3, [pc, #28]	; (8003390 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800337a:	4a05      	ldr	r2, [pc, #20]	; (8003390 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800337c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003380:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003382:	2300      	movs	r3, #0
}
 8003384:	4618      	mov	r0, r3
 8003386:	3714      	adds	r7, #20
 8003388:	46bd      	mov	sp, r7
 800338a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338e:	4770      	bx	lr
 8003390:	40007000 	.word	0x40007000
 8003394:	20000054 	.word	0x20000054
 8003398:	431bde83 	.word	0x431bde83

0800339c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800339c:	b480      	push	{r7}
 800339e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80033a0:	4b05      	ldr	r3, [pc, #20]	; (80033b8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80033a2:	689b      	ldr	r3, [r3, #8]
 80033a4:	4a04      	ldr	r2, [pc, #16]	; (80033b8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80033a6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80033aa:	6093      	str	r3, [r2, #8]
}
 80033ac:	bf00      	nop
 80033ae:	46bd      	mov	sp, r7
 80033b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b4:	4770      	bx	lr
 80033b6:	bf00      	nop
 80033b8:	40007000 	.word	0x40007000

080033bc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b088      	sub	sp, #32
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d101      	bne.n	80033ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80033ca:	2301      	movs	r3, #1
 80033cc:	e308      	b.n	80039e0 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f003 0301 	and.w	r3, r3, #1
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d075      	beq.n	80034c6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80033da:	4ba3      	ldr	r3, [pc, #652]	; (8003668 <HAL_RCC_OscConfig+0x2ac>)
 80033dc:	689b      	ldr	r3, [r3, #8]
 80033de:	f003 030c 	and.w	r3, r3, #12
 80033e2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80033e4:	4ba0      	ldr	r3, [pc, #640]	; (8003668 <HAL_RCC_OscConfig+0x2ac>)
 80033e6:	68db      	ldr	r3, [r3, #12]
 80033e8:	f003 0303 	and.w	r3, r3, #3
 80033ec:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80033ee:	69bb      	ldr	r3, [r7, #24]
 80033f0:	2b0c      	cmp	r3, #12
 80033f2:	d102      	bne.n	80033fa <HAL_RCC_OscConfig+0x3e>
 80033f4:	697b      	ldr	r3, [r7, #20]
 80033f6:	2b03      	cmp	r3, #3
 80033f8:	d002      	beq.n	8003400 <HAL_RCC_OscConfig+0x44>
 80033fa:	69bb      	ldr	r3, [r7, #24]
 80033fc:	2b08      	cmp	r3, #8
 80033fe:	d10b      	bne.n	8003418 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003400:	4b99      	ldr	r3, [pc, #612]	; (8003668 <HAL_RCC_OscConfig+0x2ac>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003408:	2b00      	cmp	r3, #0
 800340a:	d05b      	beq.n	80034c4 <HAL_RCC_OscConfig+0x108>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d157      	bne.n	80034c4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003414:	2301      	movs	r3, #1
 8003416:	e2e3      	b.n	80039e0 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003420:	d106      	bne.n	8003430 <HAL_RCC_OscConfig+0x74>
 8003422:	4b91      	ldr	r3, [pc, #580]	; (8003668 <HAL_RCC_OscConfig+0x2ac>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4a90      	ldr	r2, [pc, #576]	; (8003668 <HAL_RCC_OscConfig+0x2ac>)
 8003428:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800342c:	6013      	str	r3, [r2, #0]
 800342e:	e01d      	b.n	800346c <HAL_RCC_OscConfig+0xb0>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003438:	d10c      	bne.n	8003454 <HAL_RCC_OscConfig+0x98>
 800343a:	4b8b      	ldr	r3, [pc, #556]	; (8003668 <HAL_RCC_OscConfig+0x2ac>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4a8a      	ldr	r2, [pc, #552]	; (8003668 <HAL_RCC_OscConfig+0x2ac>)
 8003440:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003444:	6013      	str	r3, [r2, #0]
 8003446:	4b88      	ldr	r3, [pc, #544]	; (8003668 <HAL_RCC_OscConfig+0x2ac>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4a87      	ldr	r2, [pc, #540]	; (8003668 <HAL_RCC_OscConfig+0x2ac>)
 800344c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003450:	6013      	str	r3, [r2, #0]
 8003452:	e00b      	b.n	800346c <HAL_RCC_OscConfig+0xb0>
 8003454:	4b84      	ldr	r3, [pc, #528]	; (8003668 <HAL_RCC_OscConfig+0x2ac>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4a83      	ldr	r2, [pc, #524]	; (8003668 <HAL_RCC_OscConfig+0x2ac>)
 800345a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800345e:	6013      	str	r3, [r2, #0]
 8003460:	4b81      	ldr	r3, [pc, #516]	; (8003668 <HAL_RCC_OscConfig+0x2ac>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4a80      	ldr	r2, [pc, #512]	; (8003668 <HAL_RCC_OscConfig+0x2ac>)
 8003466:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800346a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d013      	beq.n	800349c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003474:	f7fe f8b6 	bl	80015e4 <HAL_GetTick>
 8003478:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800347a:	e008      	b.n	800348e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800347c:	f7fe f8b2 	bl	80015e4 <HAL_GetTick>
 8003480:	4602      	mov	r2, r0
 8003482:	693b      	ldr	r3, [r7, #16]
 8003484:	1ad3      	subs	r3, r2, r3
 8003486:	2b64      	cmp	r3, #100	; 0x64
 8003488:	d901      	bls.n	800348e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800348a:	2303      	movs	r3, #3
 800348c:	e2a8      	b.n	80039e0 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800348e:	4b76      	ldr	r3, [pc, #472]	; (8003668 <HAL_RCC_OscConfig+0x2ac>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003496:	2b00      	cmp	r3, #0
 8003498:	d0f0      	beq.n	800347c <HAL_RCC_OscConfig+0xc0>
 800349a:	e014      	b.n	80034c6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800349c:	f7fe f8a2 	bl	80015e4 <HAL_GetTick>
 80034a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80034a2:	e008      	b.n	80034b6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034a4:	f7fe f89e 	bl	80015e4 <HAL_GetTick>
 80034a8:	4602      	mov	r2, r0
 80034aa:	693b      	ldr	r3, [r7, #16]
 80034ac:	1ad3      	subs	r3, r2, r3
 80034ae:	2b64      	cmp	r3, #100	; 0x64
 80034b0:	d901      	bls.n	80034b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80034b2:	2303      	movs	r3, #3
 80034b4:	e294      	b.n	80039e0 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80034b6:	4b6c      	ldr	r3, [pc, #432]	; (8003668 <HAL_RCC_OscConfig+0x2ac>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d1f0      	bne.n	80034a4 <HAL_RCC_OscConfig+0xe8>
 80034c2:	e000      	b.n	80034c6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f003 0302 	and.w	r3, r3, #2
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d075      	beq.n	80035be <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80034d2:	4b65      	ldr	r3, [pc, #404]	; (8003668 <HAL_RCC_OscConfig+0x2ac>)
 80034d4:	689b      	ldr	r3, [r3, #8]
 80034d6:	f003 030c 	and.w	r3, r3, #12
 80034da:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80034dc:	4b62      	ldr	r3, [pc, #392]	; (8003668 <HAL_RCC_OscConfig+0x2ac>)
 80034de:	68db      	ldr	r3, [r3, #12]
 80034e0:	f003 0303 	and.w	r3, r3, #3
 80034e4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80034e6:	69bb      	ldr	r3, [r7, #24]
 80034e8:	2b0c      	cmp	r3, #12
 80034ea:	d102      	bne.n	80034f2 <HAL_RCC_OscConfig+0x136>
 80034ec:	697b      	ldr	r3, [r7, #20]
 80034ee:	2b02      	cmp	r3, #2
 80034f0:	d002      	beq.n	80034f8 <HAL_RCC_OscConfig+0x13c>
 80034f2:	69bb      	ldr	r3, [r7, #24]
 80034f4:	2b04      	cmp	r3, #4
 80034f6:	d11f      	bne.n	8003538 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80034f8:	4b5b      	ldr	r3, [pc, #364]	; (8003668 <HAL_RCC_OscConfig+0x2ac>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003500:	2b00      	cmp	r3, #0
 8003502:	d005      	beq.n	8003510 <HAL_RCC_OscConfig+0x154>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	68db      	ldr	r3, [r3, #12]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d101      	bne.n	8003510 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800350c:	2301      	movs	r3, #1
 800350e:	e267      	b.n	80039e0 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003510:	4b55      	ldr	r3, [pc, #340]	; (8003668 <HAL_RCC_OscConfig+0x2ac>)
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	691b      	ldr	r3, [r3, #16]
 800351c:	061b      	lsls	r3, r3, #24
 800351e:	4952      	ldr	r1, [pc, #328]	; (8003668 <HAL_RCC_OscConfig+0x2ac>)
 8003520:	4313      	orrs	r3, r2
 8003522:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003524:	4b51      	ldr	r3, [pc, #324]	; (800366c <HAL_RCC_OscConfig+0x2b0>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4618      	mov	r0, r3
 800352a:	f7fe f80f 	bl	800154c <HAL_InitTick>
 800352e:	4603      	mov	r3, r0
 8003530:	2b00      	cmp	r3, #0
 8003532:	d043      	beq.n	80035bc <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003534:	2301      	movs	r3, #1
 8003536:	e253      	b.n	80039e0 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	68db      	ldr	r3, [r3, #12]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d023      	beq.n	8003588 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003540:	4b49      	ldr	r3, [pc, #292]	; (8003668 <HAL_RCC_OscConfig+0x2ac>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a48      	ldr	r2, [pc, #288]	; (8003668 <HAL_RCC_OscConfig+0x2ac>)
 8003546:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800354a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800354c:	f7fe f84a 	bl	80015e4 <HAL_GetTick>
 8003550:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003552:	e008      	b.n	8003566 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003554:	f7fe f846 	bl	80015e4 <HAL_GetTick>
 8003558:	4602      	mov	r2, r0
 800355a:	693b      	ldr	r3, [r7, #16]
 800355c:	1ad3      	subs	r3, r2, r3
 800355e:	2b02      	cmp	r3, #2
 8003560:	d901      	bls.n	8003566 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003562:	2303      	movs	r3, #3
 8003564:	e23c      	b.n	80039e0 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003566:	4b40      	ldr	r3, [pc, #256]	; (8003668 <HAL_RCC_OscConfig+0x2ac>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800356e:	2b00      	cmp	r3, #0
 8003570:	d0f0      	beq.n	8003554 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003572:	4b3d      	ldr	r3, [pc, #244]	; (8003668 <HAL_RCC_OscConfig+0x2ac>)
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	691b      	ldr	r3, [r3, #16]
 800357e:	061b      	lsls	r3, r3, #24
 8003580:	4939      	ldr	r1, [pc, #228]	; (8003668 <HAL_RCC_OscConfig+0x2ac>)
 8003582:	4313      	orrs	r3, r2
 8003584:	604b      	str	r3, [r1, #4]
 8003586:	e01a      	b.n	80035be <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003588:	4b37      	ldr	r3, [pc, #220]	; (8003668 <HAL_RCC_OscConfig+0x2ac>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a36      	ldr	r2, [pc, #216]	; (8003668 <HAL_RCC_OscConfig+0x2ac>)
 800358e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003592:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003594:	f7fe f826 	bl	80015e4 <HAL_GetTick>
 8003598:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800359a:	e008      	b.n	80035ae <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800359c:	f7fe f822 	bl	80015e4 <HAL_GetTick>
 80035a0:	4602      	mov	r2, r0
 80035a2:	693b      	ldr	r3, [r7, #16]
 80035a4:	1ad3      	subs	r3, r2, r3
 80035a6:	2b02      	cmp	r3, #2
 80035a8:	d901      	bls.n	80035ae <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80035aa:	2303      	movs	r3, #3
 80035ac:	e218      	b.n	80039e0 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80035ae:	4b2e      	ldr	r3, [pc, #184]	; (8003668 <HAL_RCC_OscConfig+0x2ac>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d1f0      	bne.n	800359c <HAL_RCC_OscConfig+0x1e0>
 80035ba:	e000      	b.n	80035be <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80035bc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f003 0308 	and.w	r3, r3, #8
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d03c      	beq.n	8003644 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	695b      	ldr	r3, [r3, #20]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d01c      	beq.n	800360c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80035d2:	4b25      	ldr	r3, [pc, #148]	; (8003668 <HAL_RCC_OscConfig+0x2ac>)
 80035d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80035d8:	4a23      	ldr	r2, [pc, #140]	; (8003668 <HAL_RCC_OscConfig+0x2ac>)
 80035da:	f043 0301 	orr.w	r3, r3, #1
 80035de:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035e2:	f7fd ffff 	bl	80015e4 <HAL_GetTick>
 80035e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80035e8:	e008      	b.n	80035fc <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035ea:	f7fd fffb 	bl	80015e4 <HAL_GetTick>
 80035ee:	4602      	mov	r2, r0
 80035f0:	693b      	ldr	r3, [r7, #16]
 80035f2:	1ad3      	subs	r3, r2, r3
 80035f4:	2b02      	cmp	r3, #2
 80035f6:	d901      	bls.n	80035fc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80035f8:	2303      	movs	r3, #3
 80035fa:	e1f1      	b.n	80039e0 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80035fc:	4b1a      	ldr	r3, [pc, #104]	; (8003668 <HAL_RCC_OscConfig+0x2ac>)
 80035fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003602:	f003 0302 	and.w	r3, r3, #2
 8003606:	2b00      	cmp	r3, #0
 8003608:	d0ef      	beq.n	80035ea <HAL_RCC_OscConfig+0x22e>
 800360a:	e01b      	b.n	8003644 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800360c:	4b16      	ldr	r3, [pc, #88]	; (8003668 <HAL_RCC_OscConfig+0x2ac>)
 800360e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003612:	4a15      	ldr	r2, [pc, #84]	; (8003668 <HAL_RCC_OscConfig+0x2ac>)
 8003614:	f023 0301 	bic.w	r3, r3, #1
 8003618:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800361c:	f7fd ffe2 	bl	80015e4 <HAL_GetTick>
 8003620:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003622:	e008      	b.n	8003636 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003624:	f7fd ffde 	bl	80015e4 <HAL_GetTick>
 8003628:	4602      	mov	r2, r0
 800362a:	693b      	ldr	r3, [r7, #16]
 800362c:	1ad3      	subs	r3, r2, r3
 800362e:	2b02      	cmp	r3, #2
 8003630:	d901      	bls.n	8003636 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8003632:	2303      	movs	r3, #3
 8003634:	e1d4      	b.n	80039e0 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003636:	4b0c      	ldr	r3, [pc, #48]	; (8003668 <HAL_RCC_OscConfig+0x2ac>)
 8003638:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800363c:	f003 0302 	and.w	r3, r3, #2
 8003640:	2b00      	cmp	r3, #0
 8003642:	d1ef      	bne.n	8003624 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f003 0304 	and.w	r3, r3, #4
 800364c:	2b00      	cmp	r3, #0
 800364e:	f000 80ab 	beq.w	80037a8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003652:	2300      	movs	r3, #0
 8003654:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003656:	4b04      	ldr	r3, [pc, #16]	; (8003668 <HAL_RCC_OscConfig+0x2ac>)
 8003658:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800365a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800365e:	2b00      	cmp	r3, #0
 8003660:	d106      	bne.n	8003670 <HAL_RCC_OscConfig+0x2b4>
 8003662:	2301      	movs	r3, #1
 8003664:	e005      	b.n	8003672 <HAL_RCC_OscConfig+0x2b6>
 8003666:	bf00      	nop
 8003668:	40021000 	.word	0x40021000
 800366c:	20000058 	.word	0x20000058
 8003670:	2300      	movs	r3, #0
 8003672:	2b00      	cmp	r3, #0
 8003674:	d00d      	beq.n	8003692 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003676:	4baf      	ldr	r3, [pc, #700]	; (8003934 <HAL_RCC_OscConfig+0x578>)
 8003678:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800367a:	4aae      	ldr	r2, [pc, #696]	; (8003934 <HAL_RCC_OscConfig+0x578>)
 800367c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003680:	6593      	str	r3, [r2, #88]	; 0x58
 8003682:	4bac      	ldr	r3, [pc, #688]	; (8003934 <HAL_RCC_OscConfig+0x578>)
 8003684:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003686:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800368a:	60fb      	str	r3, [r7, #12]
 800368c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800368e:	2301      	movs	r3, #1
 8003690:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003692:	4ba9      	ldr	r3, [pc, #676]	; (8003938 <HAL_RCC_OscConfig+0x57c>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800369a:	2b00      	cmp	r3, #0
 800369c:	d118      	bne.n	80036d0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800369e:	4ba6      	ldr	r3, [pc, #664]	; (8003938 <HAL_RCC_OscConfig+0x57c>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4aa5      	ldr	r2, [pc, #660]	; (8003938 <HAL_RCC_OscConfig+0x57c>)
 80036a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80036aa:	f7fd ff9b 	bl	80015e4 <HAL_GetTick>
 80036ae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80036b0:	e008      	b.n	80036c4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036b2:	f7fd ff97 	bl	80015e4 <HAL_GetTick>
 80036b6:	4602      	mov	r2, r0
 80036b8:	693b      	ldr	r3, [r7, #16]
 80036ba:	1ad3      	subs	r3, r2, r3
 80036bc:	2b02      	cmp	r3, #2
 80036be:	d901      	bls.n	80036c4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80036c0:	2303      	movs	r3, #3
 80036c2:	e18d      	b.n	80039e0 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80036c4:	4b9c      	ldr	r3, [pc, #624]	; (8003938 <HAL_RCC_OscConfig+0x57c>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d0f0      	beq.n	80036b2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	689b      	ldr	r3, [r3, #8]
 80036d4:	2b01      	cmp	r3, #1
 80036d6:	d108      	bne.n	80036ea <HAL_RCC_OscConfig+0x32e>
 80036d8:	4b96      	ldr	r3, [pc, #600]	; (8003934 <HAL_RCC_OscConfig+0x578>)
 80036da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036de:	4a95      	ldr	r2, [pc, #596]	; (8003934 <HAL_RCC_OscConfig+0x578>)
 80036e0:	f043 0301 	orr.w	r3, r3, #1
 80036e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80036e8:	e024      	b.n	8003734 <HAL_RCC_OscConfig+0x378>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	689b      	ldr	r3, [r3, #8]
 80036ee:	2b05      	cmp	r3, #5
 80036f0:	d110      	bne.n	8003714 <HAL_RCC_OscConfig+0x358>
 80036f2:	4b90      	ldr	r3, [pc, #576]	; (8003934 <HAL_RCC_OscConfig+0x578>)
 80036f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036f8:	4a8e      	ldr	r2, [pc, #568]	; (8003934 <HAL_RCC_OscConfig+0x578>)
 80036fa:	f043 0304 	orr.w	r3, r3, #4
 80036fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003702:	4b8c      	ldr	r3, [pc, #560]	; (8003934 <HAL_RCC_OscConfig+0x578>)
 8003704:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003708:	4a8a      	ldr	r2, [pc, #552]	; (8003934 <HAL_RCC_OscConfig+0x578>)
 800370a:	f043 0301 	orr.w	r3, r3, #1
 800370e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003712:	e00f      	b.n	8003734 <HAL_RCC_OscConfig+0x378>
 8003714:	4b87      	ldr	r3, [pc, #540]	; (8003934 <HAL_RCC_OscConfig+0x578>)
 8003716:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800371a:	4a86      	ldr	r2, [pc, #536]	; (8003934 <HAL_RCC_OscConfig+0x578>)
 800371c:	f023 0301 	bic.w	r3, r3, #1
 8003720:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003724:	4b83      	ldr	r3, [pc, #524]	; (8003934 <HAL_RCC_OscConfig+0x578>)
 8003726:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800372a:	4a82      	ldr	r2, [pc, #520]	; (8003934 <HAL_RCC_OscConfig+0x578>)
 800372c:	f023 0304 	bic.w	r3, r3, #4
 8003730:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	689b      	ldr	r3, [r3, #8]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d016      	beq.n	800376a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800373c:	f7fd ff52 	bl	80015e4 <HAL_GetTick>
 8003740:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003742:	e00a      	b.n	800375a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003744:	f7fd ff4e 	bl	80015e4 <HAL_GetTick>
 8003748:	4602      	mov	r2, r0
 800374a:	693b      	ldr	r3, [r7, #16]
 800374c:	1ad3      	subs	r3, r2, r3
 800374e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003752:	4293      	cmp	r3, r2
 8003754:	d901      	bls.n	800375a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003756:	2303      	movs	r3, #3
 8003758:	e142      	b.n	80039e0 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800375a:	4b76      	ldr	r3, [pc, #472]	; (8003934 <HAL_RCC_OscConfig+0x578>)
 800375c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003760:	f003 0302 	and.w	r3, r3, #2
 8003764:	2b00      	cmp	r3, #0
 8003766:	d0ed      	beq.n	8003744 <HAL_RCC_OscConfig+0x388>
 8003768:	e015      	b.n	8003796 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800376a:	f7fd ff3b 	bl	80015e4 <HAL_GetTick>
 800376e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003770:	e00a      	b.n	8003788 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003772:	f7fd ff37 	bl	80015e4 <HAL_GetTick>
 8003776:	4602      	mov	r2, r0
 8003778:	693b      	ldr	r3, [r7, #16]
 800377a:	1ad3      	subs	r3, r2, r3
 800377c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003780:	4293      	cmp	r3, r2
 8003782:	d901      	bls.n	8003788 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003784:	2303      	movs	r3, #3
 8003786:	e12b      	b.n	80039e0 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003788:	4b6a      	ldr	r3, [pc, #424]	; (8003934 <HAL_RCC_OscConfig+0x578>)
 800378a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800378e:	f003 0302 	and.w	r3, r3, #2
 8003792:	2b00      	cmp	r3, #0
 8003794:	d1ed      	bne.n	8003772 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003796:	7ffb      	ldrb	r3, [r7, #31]
 8003798:	2b01      	cmp	r3, #1
 800379a:	d105      	bne.n	80037a8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800379c:	4b65      	ldr	r3, [pc, #404]	; (8003934 <HAL_RCC_OscConfig+0x578>)
 800379e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037a0:	4a64      	ldr	r2, [pc, #400]	; (8003934 <HAL_RCC_OscConfig+0x578>)
 80037a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037a6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f003 0320 	and.w	r3, r3, #32
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d03c      	beq.n	800382e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	699b      	ldr	r3, [r3, #24]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d01c      	beq.n	80037f6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80037bc:	4b5d      	ldr	r3, [pc, #372]	; (8003934 <HAL_RCC_OscConfig+0x578>)
 80037be:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80037c2:	4a5c      	ldr	r2, [pc, #368]	; (8003934 <HAL_RCC_OscConfig+0x578>)
 80037c4:	f043 0301 	orr.w	r3, r3, #1
 80037c8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037cc:	f7fd ff0a 	bl	80015e4 <HAL_GetTick>
 80037d0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80037d2:	e008      	b.n	80037e6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80037d4:	f7fd ff06 	bl	80015e4 <HAL_GetTick>
 80037d8:	4602      	mov	r2, r0
 80037da:	693b      	ldr	r3, [r7, #16]
 80037dc:	1ad3      	subs	r3, r2, r3
 80037de:	2b02      	cmp	r3, #2
 80037e0:	d901      	bls.n	80037e6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80037e2:	2303      	movs	r3, #3
 80037e4:	e0fc      	b.n	80039e0 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80037e6:	4b53      	ldr	r3, [pc, #332]	; (8003934 <HAL_RCC_OscConfig+0x578>)
 80037e8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80037ec:	f003 0302 	and.w	r3, r3, #2
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d0ef      	beq.n	80037d4 <HAL_RCC_OscConfig+0x418>
 80037f4:	e01b      	b.n	800382e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80037f6:	4b4f      	ldr	r3, [pc, #316]	; (8003934 <HAL_RCC_OscConfig+0x578>)
 80037f8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80037fc:	4a4d      	ldr	r2, [pc, #308]	; (8003934 <HAL_RCC_OscConfig+0x578>)
 80037fe:	f023 0301 	bic.w	r3, r3, #1
 8003802:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003806:	f7fd feed 	bl	80015e4 <HAL_GetTick>
 800380a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800380c:	e008      	b.n	8003820 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800380e:	f7fd fee9 	bl	80015e4 <HAL_GetTick>
 8003812:	4602      	mov	r2, r0
 8003814:	693b      	ldr	r3, [r7, #16]
 8003816:	1ad3      	subs	r3, r2, r3
 8003818:	2b02      	cmp	r3, #2
 800381a:	d901      	bls.n	8003820 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800381c:	2303      	movs	r3, #3
 800381e:	e0df      	b.n	80039e0 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003820:	4b44      	ldr	r3, [pc, #272]	; (8003934 <HAL_RCC_OscConfig+0x578>)
 8003822:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003826:	f003 0302 	and.w	r3, r3, #2
 800382a:	2b00      	cmp	r3, #0
 800382c:	d1ef      	bne.n	800380e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	69db      	ldr	r3, [r3, #28]
 8003832:	2b00      	cmp	r3, #0
 8003834:	f000 80d3 	beq.w	80039de <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003838:	4b3e      	ldr	r3, [pc, #248]	; (8003934 <HAL_RCC_OscConfig+0x578>)
 800383a:	689b      	ldr	r3, [r3, #8]
 800383c:	f003 030c 	and.w	r3, r3, #12
 8003840:	2b0c      	cmp	r3, #12
 8003842:	f000 808d 	beq.w	8003960 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	69db      	ldr	r3, [r3, #28]
 800384a:	2b02      	cmp	r3, #2
 800384c:	d15a      	bne.n	8003904 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800384e:	4b39      	ldr	r3, [pc, #228]	; (8003934 <HAL_RCC_OscConfig+0x578>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4a38      	ldr	r2, [pc, #224]	; (8003934 <HAL_RCC_OscConfig+0x578>)
 8003854:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003858:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800385a:	f7fd fec3 	bl	80015e4 <HAL_GetTick>
 800385e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003860:	e008      	b.n	8003874 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003862:	f7fd febf 	bl	80015e4 <HAL_GetTick>
 8003866:	4602      	mov	r2, r0
 8003868:	693b      	ldr	r3, [r7, #16]
 800386a:	1ad3      	subs	r3, r2, r3
 800386c:	2b02      	cmp	r3, #2
 800386e:	d901      	bls.n	8003874 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8003870:	2303      	movs	r3, #3
 8003872:	e0b5      	b.n	80039e0 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003874:	4b2f      	ldr	r3, [pc, #188]	; (8003934 <HAL_RCC_OscConfig+0x578>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800387c:	2b00      	cmp	r3, #0
 800387e:	d1f0      	bne.n	8003862 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003880:	4b2c      	ldr	r3, [pc, #176]	; (8003934 <HAL_RCC_OscConfig+0x578>)
 8003882:	68da      	ldr	r2, [r3, #12]
 8003884:	4b2d      	ldr	r3, [pc, #180]	; (800393c <HAL_RCC_OscConfig+0x580>)
 8003886:	4013      	ands	r3, r2
 8003888:	687a      	ldr	r2, [r7, #4]
 800388a:	6a11      	ldr	r1, [r2, #32]
 800388c:	687a      	ldr	r2, [r7, #4]
 800388e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003890:	3a01      	subs	r2, #1
 8003892:	0112      	lsls	r2, r2, #4
 8003894:	4311      	orrs	r1, r2
 8003896:	687a      	ldr	r2, [r7, #4]
 8003898:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800389a:	0212      	lsls	r2, r2, #8
 800389c:	4311      	orrs	r1, r2
 800389e:	687a      	ldr	r2, [r7, #4]
 80038a0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80038a2:	0852      	lsrs	r2, r2, #1
 80038a4:	3a01      	subs	r2, #1
 80038a6:	0552      	lsls	r2, r2, #21
 80038a8:	4311      	orrs	r1, r2
 80038aa:	687a      	ldr	r2, [r7, #4]
 80038ac:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80038ae:	0852      	lsrs	r2, r2, #1
 80038b0:	3a01      	subs	r2, #1
 80038b2:	0652      	lsls	r2, r2, #25
 80038b4:	4311      	orrs	r1, r2
 80038b6:	687a      	ldr	r2, [r7, #4]
 80038b8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80038ba:	06d2      	lsls	r2, r2, #27
 80038bc:	430a      	orrs	r2, r1
 80038be:	491d      	ldr	r1, [pc, #116]	; (8003934 <HAL_RCC_OscConfig+0x578>)
 80038c0:	4313      	orrs	r3, r2
 80038c2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80038c4:	4b1b      	ldr	r3, [pc, #108]	; (8003934 <HAL_RCC_OscConfig+0x578>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a1a      	ldr	r2, [pc, #104]	; (8003934 <HAL_RCC_OscConfig+0x578>)
 80038ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80038ce:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80038d0:	4b18      	ldr	r3, [pc, #96]	; (8003934 <HAL_RCC_OscConfig+0x578>)
 80038d2:	68db      	ldr	r3, [r3, #12]
 80038d4:	4a17      	ldr	r2, [pc, #92]	; (8003934 <HAL_RCC_OscConfig+0x578>)
 80038d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80038da:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038dc:	f7fd fe82 	bl	80015e4 <HAL_GetTick>
 80038e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80038e2:	e008      	b.n	80038f6 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038e4:	f7fd fe7e 	bl	80015e4 <HAL_GetTick>
 80038e8:	4602      	mov	r2, r0
 80038ea:	693b      	ldr	r3, [r7, #16]
 80038ec:	1ad3      	subs	r3, r2, r3
 80038ee:	2b02      	cmp	r3, #2
 80038f0:	d901      	bls.n	80038f6 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 80038f2:	2303      	movs	r3, #3
 80038f4:	e074      	b.n	80039e0 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80038f6:	4b0f      	ldr	r3, [pc, #60]	; (8003934 <HAL_RCC_OscConfig+0x578>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d0f0      	beq.n	80038e4 <HAL_RCC_OscConfig+0x528>
 8003902:	e06c      	b.n	80039de <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003904:	4b0b      	ldr	r3, [pc, #44]	; (8003934 <HAL_RCC_OscConfig+0x578>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4a0a      	ldr	r2, [pc, #40]	; (8003934 <HAL_RCC_OscConfig+0x578>)
 800390a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800390e:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003910:	4b08      	ldr	r3, [pc, #32]	; (8003934 <HAL_RCC_OscConfig+0x578>)
 8003912:	68db      	ldr	r3, [r3, #12]
 8003914:	4a07      	ldr	r2, [pc, #28]	; (8003934 <HAL_RCC_OscConfig+0x578>)
 8003916:	f023 0303 	bic.w	r3, r3, #3
 800391a:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800391c:	4b05      	ldr	r3, [pc, #20]	; (8003934 <HAL_RCC_OscConfig+0x578>)
 800391e:	68db      	ldr	r3, [r3, #12]
 8003920:	4a04      	ldr	r2, [pc, #16]	; (8003934 <HAL_RCC_OscConfig+0x578>)
 8003922:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003926:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800392a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800392c:	f7fd fe5a 	bl	80015e4 <HAL_GetTick>
 8003930:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003932:	e00e      	b.n	8003952 <HAL_RCC_OscConfig+0x596>
 8003934:	40021000 	.word	0x40021000
 8003938:	40007000 	.word	0x40007000
 800393c:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003940:	f7fd fe50 	bl	80015e4 <HAL_GetTick>
 8003944:	4602      	mov	r2, r0
 8003946:	693b      	ldr	r3, [r7, #16]
 8003948:	1ad3      	subs	r3, r2, r3
 800394a:	2b02      	cmp	r3, #2
 800394c:	d901      	bls.n	8003952 <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 800394e:	2303      	movs	r3, #3
 8003950:	e046      	b.n	80039e0 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003952:	4b25      	ldr	r3, [pc, #148]	; (80039e8 <HAL_RCC_OscConfig+0x62c>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800395a:	2b00      	cmp	r3, #0
 800395c:	d1f0      	bne.n	8003940 <HAL_RCC_OscConfig+0x584>
 800395e:	e03e      	b.n	80039de <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	69db      	ldr	r3, [r3, #28]
 8003964:	2b01      	cmp	r3, #1
 8003966:	d101      	bne.n	800396c <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8003968:	2301      	movs	r3, #1
 800396a:	e039      	b.n	80039e0 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800396c:	4b1e      	ldr	r3, [pc, #120]	; (80039e8 <HAL_RCC_OscConfig+0x62c>)
 800396e:	68db      	ldr	r3, [r3, #12]
 8003970:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003972:	697b      	ldr	r3, [r7, #20]
 8003974:	f003 0203 	and.w	r2, r3, #3
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6a1b      	ldr	r3, [r3, #32]
 800397c:	429a      	cmp	r2, r3
 800397e:	d12c      	bne.n	80039da <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003980:	697b      	ldr	r3, [r7, #20]
 8003982:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800398a:	3b01      	subs	r3, #1
 800398c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800398e:	429a      	cmp	r2, r3
 8003990:	d123      	bne.n	80039da <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003992:	697b      	ldr	r3, [r7, #20]
 8003994:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800399c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800399e:	429a      	cmp	r2, r3
 80039a0:	d11b      	bne.n	80039da <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80039a2:	697b      	ldr	r3, [r7, #20]
 80039a4:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039ac:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80039ae:	429a      	cmp	r2, r3
 80039b0:	d113      	bne.n	80039da <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80039b2:	697b      	ldr	r3, [r7, #20]
 80039b4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039bc:	085b      	lsrs	r3, r3, #1
 80039be:	3b01      	subs	r3, #1
 80039c0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80039c2:	429a      	cmp	r2, r3
 80039c4:	d109      	bne.n	80039da <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80039c6:	697b      	ldr	r3, [r7, #20]
 80039c8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039d0:	085b      	lsrs	r3, r3, #1
 80039d2:	3b01      	subs	r3, #1
 80039d4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80039d6:	429a      	cmp	r2, r3
 80039d8:	d001      	beq.n	80039de <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 80039da:	2301      	movs	r3, #1
 80039dc:	e000      	b.n	80039e0 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 80039de:	2300      	movs	r3, #0
}
 80039e0:	4618      	mov	r0, r3
 80039e2:	3720      	adds	r7, #32
 80039e4:	46bd      	mov	sp, r7
 80039e6:	bd80      	pop	{r7, pc}
 80039e8:	40021000 	.word	0x40021000

080039ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b086      	sub	sp, #24
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
 80039f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80039f6:	2300      	movs	r3, #0
 80039f8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d101      	bne.n	8003a04 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003a00:	2301      	movs	r3, #1
 8003a02:	e11e      	b.n	8003c42 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003a04:	4b91      	ldr	r3, [pc, #580]	; (8003c4c <HAL_RCC_ClockConfig+0x260>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f003 030f 	and.w	r3, r3, #15
 8003a0c:	683a      	ldr	r2, [r7, #0]
 8003a0e:	429a      	cmp	r2, r3
 8003a10:	d910      	bls.n	8003a34 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a12:	4b8e      	ldr	r3, [pc, #568]	; (8003c4c <HAL_RCC_ClockConfig+0x260>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f023 020f 	bic.w	r2, r3, #15
 8003a1a:	498c      	ldr	r1, [pc, #560]	; (8003c4c <HAL_RCC_ClockConfig+0x260>)
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a22:	4b8a      	ldr	r3, [pc, #552]	; (8003c4c <HAL_RCC_ClockConfig+0x260>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f003 030f 	and.w	r3, r3, #15
 8003a2a:	683a      	ldr	r2, [r7, #0]
 8003a2c:	429a      	cmp	r2, r3
 8003a2e:	d001      	beq.n	8003a34 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003a30:	2301      	movs	r3, #1
 8003a32:	e106      	b.n	8003c42 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f003 0301 	and.w	r3, r3, #1
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d073      	beq.n	8003b28 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	2b03      	cmp	r3, #3
 8003a46:	d129      	bne.n	8003a9c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a48:	4b81      	ldr	r3, [pc, #516]	; (8003c50 <HAL_RCC_ClockConfig+0x264>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d101      	bne.n	8003a58 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003a54:	2301      	movs	r3, #1
 8003a56:	e0f4      	b.n	8003c42 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003a58:	f000 f966 	bl	8003d28 <RCC_GetSysClockFreqFromPLLSource>
 8003a5c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003a5e:	693b      	ldr	r3, [r7, #16]
 8003a60:	4a7c      	ldr	r2, [pc, #496]	; (8003c54 <HAL_RCC_ClockConfig+0x268>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d93f      	bls.n	8003ae6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003a66:	4b7a      	ldr	r3, [pc, #488]	; (8003c50 <HAL_RCC_ClockConfig+0x264>)
 8003a68:	689b      	ldr	r3, [r3, #8]
 8003a6a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d009      	beq.n	8003a86 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d033      	beq.n	8003ae6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d12f      	bne.n	8003ae6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003a86:	4b72      	ldr	r3, [pc, #456]	; (8003c50 <HAL_RCC_ClockConfig+0x264>)
 8003a88:	689b      	ldr	r3, [r3, #8]
 8003a8a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003a8e:	4a70      	ldr	r2, [pc, #448]	; (8003c50 <HAL_RCC_ClockConfig+0x264>)
 8003a90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a94:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003a96:	2380      	movs	r3, #128	; 0x80
 8003a98:	617b      	str	r3, [r7, #20]
 8003a9a:	e024      	b.n	8003ae6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	2b02      	cmp	r3, #2
 8003aa2:	d107      	bne.n	8003ab4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003aa4:	4b6a      	ldr	r3, [pc, #424]	; (8003c50 <HAL_RCC_ClockConfig+0x264>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d109      	bne.n	8003ac4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	e0c6      	b.n	8003c42 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ab4:	4b66      	ldr	r3, [pc, #408]	; (8003c50 <HAL_RCC_ClockConfig+0x264>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d101      	bne.n	8003ac4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	e0be      	b.n	8003c42 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003ac4:	f000 f8ce 	bl	8003c64 <HAL_RCC_GetSysClockFreq>
 8003ac8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003aca:	693b      	ldr	r3, [r7, #16]
 8003acc:	4a61      	ldr	r2, [pc, #388]	; (8003c54 <HAL_RCC_ClockConfig+0x268>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d909      	bls.n	8003ae6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003ad2:	4b5f      	ldr	r3, [pc, #380]	; (8003c50 <HAL_RCC_ClockConfig+0x264>)
 8003ad4:	689b      	ldr	r3, [r3, #8]
 8003ad6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003ada:	4a5d      	ldr	r2, [pc, #372]	; (8003c50 <HAL_RCC_ClockConfig+0x264>)
 8003adc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ae0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003ae2:	2380      	movs	r3, #128	; 0x80
 8003ae4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003ae6:	4b5a      	ldr	r3, [pc, #360]	; (8003c50 <HAL_RCC_ClockConfig+0x264>)
 8003ae8:	689b      	ldr	r3, [r3, #8]
 8003aea:	f023 0203 	bic.w	r2, r3, #3
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	4957      	ldr	r1, [pc, #348]	; (8003c50 <HAL_RCC_ClockConfig+0x264>)
 8003af4:	4313      	orrs	r3, r2
 8003af6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003af8:	f7fd fd74 	bl	80015e4 <HAL_GetTick>
 8003afc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003afe:	e00a      	b.n	8003b16 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b00:	f7fd fd70 	bl	80015e4 <HAL_GetTick>
 8003b04:	4602      	mov	r2, r0
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	1ad3      	subs	r3, r2, r3
 8003b0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d901      	bls.n	8003b16 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003b12:	2303      	movs	r3, #3
 8003b14:	e095      	b.n	8003c42 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b16:	4b4e      	ldr	r3, [pc, #312]	; (8003c50 <HAL_RCC_ClockConfig+0x264>)
 8003b18:	689b      	ldr	r3, [r3, #8]
 8003b1a:	f003 020c 	and.w	r2, r3, #12
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	009b      	lsls	r3, r3, #2
 8003b24:	429a      	cmp	r2, r3
 8003b26:	d1eb      	bne.n	8003b00 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f003 0302 	and.w	r3, r3, #2
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d023      	beq.n	8003b7c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f003 0304 	and.w	r3, r3, #4
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d005      	beq.n	8003b4c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003b40:	4b43      	ldr	r3, [pc, #268]	; (8003c50 <HAL_RCC_ClockConfig+0x264>)
 8003b42:	689b      	ldr	r3, [r3, #8]
 8003b44:	4a42      	ldr	r2, [pc, #264]	; (8003c50 <HAL_RCC_ClockConfig+0x264>)
 8003b46:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003b4a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f003 0308 	and.w	r3, r3, #8
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d007      	beq.n	8003b68 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003b58:	4b3d      	ldr	r3, [pc, #244]	; (8003c50 <HAL_RCC_ClockConfig+0x264>)
 8003b5a:	689b      	ldr	r3, [r3, #8]
 8003b5c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003b60:	4a3b      	ldr	r2, [pc, #236]	; (8003c50 <HAL_RCC_ClockConfig+0x264>)
 8003b62:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003b66:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b68:	4b39      	ldr	r3, [pc, #228]	; (8003c50 <HAL_RCC_ClockConfig+0x264>)
 8003b6a:	689b      	ldr	r3, [r3, #8]
 8003b6c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	689b      	ldr	r3, [r3, #8]
 8003b74:	4936      	ldr	r1, [pc, #216]	; (8003c50 <HAL_RCC_ClockConfig+0x264>)
 8003b76:	4313      	orrs	r3, r2
 8003b78:	608b      	str	r3, [r1, #8]
 8003b7a:	e008      	b.n	8003b8e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003b7c:	697b      	ldr	r3, [r7, #20]
 8003b7e:	2b80      	cmp	r3, #128	; 0x80
 8003b80:	d105      	bne.n	8003b8e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003b82:	4b33      	ldr	r3, [pc, #204]	; (8003c50 <HAL_RCC_ClockConfig+0x264>)
 8003b84:	689b      	ldr	r3, [r3, #8]
 8003b86:	4a32      	ldr	r2, [pc, #200]	; (8003c50 <HAL_RCC_ClockConfig+0x264>)
 8003b88:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003b8c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003b8e:	4b2f      	ldr	r3, [pc, #188]	; (8003c4c <HAL_RCC_ClockConfig+0x260>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f003 030f 	and.w	r3, r3, #15
 8003b96:	683a      	ldr	r2, [r7, #0]
 8003b98:	429a      	cmp	r2, r3
 8003b9a:	d21d      	bcs.n	8003bd8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b9c:	4b2b      	ldr	r3, [pc, #172]	; (8003c4c <HAL_RCC_ClockConfig+0x260>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f023 020f 	bic.w	r2, r3, #15
 8003ba4:	4929      	ldr	r1, [pc, #164]	; (8003c4c <HAL_RCC_ClockConfig+0x260>)
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	4313      	orrs	r3, r2
 8003baa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003bac:	f7fd fd1a 	bl	80015e4 <HAL_GetTick>
 8003bb0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bb2:	e00a      	b.n	8003bca <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003bb4:	f7fd fd16 	bl	80015e4 <HAL_GetTick>
 8003bb8:	4602      	mov	r2, r0
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	1ad3      	subs	r3, r2, r3
 8003bbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d901      	bls.n	8003bca <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003bc6:	2303      	movs	r3, #3
 8003bc8:	e03b      	b.n	8003c42 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bca:	4b20      	ldr	r3, [pc, #128]	; (8003c4c <HAL_RCC_ClockConfig+0x260>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f003 030f 	and.w	r3, r3, #15
 8003bd2:	683a      	ldr	r2, [r7, #0]
 8003bd4:	429a      	cmp	r2, r3
 8003bd6:	d1ed      	bne.n	8003bb4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f003 0304 	and.w	r3, r3, #4
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d008      	beq.n	8003bf6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003be4:	4b1a      	ldr	r3, [pc, #104]	; (8003c50 <HAL_RCC_ClockConfig+0x264>)
 8003be6:	689b      	ldr	r3, [r3, #8]
 8003be8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	68db      	ldr	r3, [r3, #12]
 8003bf0:	4917      	ldr	r1, [pc, #92]	; (8003c50 <HAL_RCC_ClockConfig+0x264>)
 8003bf2:	4313      	orrs	r3, r2
 8003bf4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f003 0308 	and.w	r3, r3, #8
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d009      	beq.n	8003c16 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003c02:	4b13      	ldr	r3, [pc, #76]	; (8003c50 <HAL_RCC_ClockConfig+0x264>)
 8003c04:	689b      	ldr	r3, [r3, #8]
 8003c06:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	691b      	ldr	r3, [r3, #16]
 8003c0e:	00db      	lsls	r3, r3, #3
 8003c10:	490f      	ldr	r1, [pc, #60]	; (8003c50 <HAL_RCC_ClockConfig+0x264>)
 8003c12:	4313      	orrs	r3, r2
 8003c14:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003c16:	f000 f825 	bl	8003c64 <HAL_RCC_GetSysClockFreq>
 8003c1a:	4601      	mov	r1, r0
 8003c1c:	4b0c      	ldr	r3, [pc, #48]	; (8003c50 <HAL_RCC_ClockConfig+0x264>)
 8003c1e:	689b      	ldr	r3, [r3, #8]
 8003c20:	091b      	lsrs	r3, r3, #4
 8003c22:	f003 030f 	and.w	r3, r3, #15
 8003c26:	4a0c      	ldr	r2, [pc, #48]	; (8003c58 <HAL_RCC_ClockConfig+0x26c>)
 8003c28:	5cd3      	ldrb	r3, [r2, r3]
 8003c2a:	f003 031f 	and.w	r3, r3, #31
 8003c2e:	fa21 f303 	lsr.w	r3, r1, r3
 8003c32:	4a0a      	ldr	r2, [pc, #40]	; (8003c5c <HAL_RCC_ClockConfig+0x270>)
 8003c34:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003c36:	4b0a      	ldr	r3, [pc, #40]	; (8003c60 <HAL_RCC_ClockConfig+0x274>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	f7fd fc86 	bl	800154c <HAL_InitTick>
 8003c40:	4603      	mov	r3, r0
}
 8003c42:	4618      	mov	r0, r3
 8003c44:	3718      	adds	r7, #24
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bd80      	pop	{r7, pc}
 8003c4a:	bf00      	nop
 8003c4c:	40022000 	.word	0x40022000
 8003c50:	40021000 	.word	0x40021000
 8003c54:	04c4b400 	.word	0x04c4b400
 8003c58:	08009bd8 	.word	0x08009bd8
 8003c5c:	20000054 	.word	0x20000054
 8003c60:	20000058 	.word	0x20000058

08003c64 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c64:	b480      	push	{r7}
 8003c66:	b087      	sub	sp, #28
 8003c68:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003c6a:	4b2c      	ldr	r3, [pc, #176]	; (8003d1c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c6c:	689b      	ldr	r3, [r3, #8]
 8003c6e:	f003 030c 	and.w	r3, r3, #12
 8003c72:	2b04      	cmp	r3, #4
 8003c74:	d102      	bne.n	8003c7c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003c76:	4b2a      	ldr	r3, [pc, #168]	; (8003d20 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003c78:	613b      	str	r3, [r7, #16]
 8003c7a:	e047      	b.n	8003d0c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003c7c:	4b27      	ldr	r3, [pc, #156]	; (8003d1c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c7e:	689b      	ldr	r3, [r3, #8]
 8003c80:	f003 030c 	and.w	r3, r3, #12
 8003c84:	2b08      	cmp	r3, #8
 8003c86:	d102      	bne.n	8003c8e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003c88:	4b26      	ldr	r3, [pc, #152]	; (8003d24 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003c8a:	613b      	str	r3, [r7, #16]
 8003c8c:	e03e      	b.n	8003d0c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003c8e:	4b23      	ldr	r3, [pc, #140]	; (8003d1c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c90:	689b      	ldr	r3, [r3, #8]
 8003c92:	f003 030c 	and.w	r3, r3, #12
 8003c96:	2b0c      	cmp	r3, #12
 8003c98:	d136      	bne.n	8003d08 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003c9a:	4b20      	ldr	r3, [pc, #128]	; (8003d1c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c9c:	68db      	ldr	r3, [r3, #12]
 8003c9e:	f003 0303 	and.w	r3, r3, #3
 8003ca2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003ca4:	4b1d      	ldr	r3, [pc, #116]	; (8003d1c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003ca6:	68db      	ldr	r3, [r3, #12]
 8003ca8:	091b      	lsrs	r3, r3, #4
 8003caa:	f003 030f 	and.w	r3, r3, #15
 8003cae:	3301      	adds	r3, #1
 8003cb0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	2b03      	cmp	r3, #3
 8003cb6:	d10c      	bne.n	8003cd2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003cb8:	4a1a      	ldr	r2, [pc, #104]	; (8003d24 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003cba:	68bb      	ldr	r3, [r7, #8]
 8003cbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cc0:	4a16      	ldr	r2, [pc, #88]	; (8003d1c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003cc2:	68d2      	ldr	r2, [r2, #12]
 8003cc4:	0a12      	lsrs	r2, r2, #8
 8003cc6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003cca:	fb02 f303 	mul.w	r3, r2, r3
 8003cce:	617b      	str	r3, [r7, #20]
      break;
 8003cd0:	e00c      	b.n	8003cec <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003cd2:	4a13      	ldr	r2, [pc, #76]	; (8003d20 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003cd4:	68bb      	ldr	r3, [r7, #8]
 8003cd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cda:	4a10      	ldr	r2, [pc, #64]	; (8003d1c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003cdc:	68d2      	ldr	r2, [r2, #12]
 8003cde:	0a12      	lsrs	r2, r2, #8
 8003ce0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003ce4:	fb02 f303 	mul.w	r3, r2, r3
 8003ce8:	617b      	str	r3, [r7, #20]
      break;
 8003cea:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003cec:	4b0b      	ldr	r3, [pc, #44]	; (8003d1c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003cee:	68db      	ldr	r3, [r3, #12]
 8003cf0:	0e5b      	lsrs	r3, r3, #25
 8003cf2:	f003 0303 	and.w	r3, r3, #3
 8003cf6:	3301      	adds	r3, #1
 8003cf8:	005b      	lsls	r3, r3, #1
 8003cfa:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003cfc:	697a      	ldr	r2, [r7, #20]
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d04:	613b      	str	r3, [r7, #16]
 8003d06:	e001      	b.n	8003d0c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003d08:	2300      	movs	r3, #0
 8003d0a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003d0c:	693b      	ldr	r3, [r7, #16]
}
 8003d0e:	4618      	mov	r0, r3
 8003d10:	371c      	adds	r7, #28
 8003d12:	46bd      	mov	sp, r7
 8003d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d18:	4770      	bx	lr
 8003d1a:	bf00      	nop
 8003d1c:	40021000 	.word	0x40021000
 8003d20:	00f42400 	.word	0x00f42400
 8003d24:	007a1200 	.word	0x007a1200

08003d28 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003d28:	b480      	push	{r7}
 8003d2a:	b087      	sub	sp, #28
 8003d2c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003d2e:	4b1e      	ldr	r3, [pc, #120]	; (8003da8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003d30:	68db      	ldr	r3, [r3, #12]
 8003d32:	f003 0303 	and.w	r3, r3, #3
 8003d36:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003d38:	4b1b      	ldr	r3, [pc, #108]	; (8003da8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003d3a:	68db      	ldr	r3, [r3, #12]
 8003d3c:	091b      	lsrs	r3, r3, #4
 8003d3e:	f003 030f 	and.w	r3, r3, #15
 8003d42:	3301      	adds	r3, #1
 8003d44:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003d46:	693b      	ldr	r3, [r7, #16]
 8003d48:	2b03      	cmp	r3, #3
 8003d4a:	d10c      	bne.n	8003d66 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003d4c:	4a17      	ldr	r2, [pc, #92]	; (8003dac <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d54:	4a14      	ldr	r2, [pc, #80]	; (8003da8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003d56:	68d2      	ldr	r2, [r2, #12]
 8003d58:	0a12      	lsrs	r2, r2, #8
 8003d5a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003d5e:	fb02 f303 	mul.w	r3, r2, r3
 8003d62:	617b      	str	r3, [r7, #20]
    break;
 8003d64:	e00c      	b.n	8003d80 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003d66:	4a12      	ldr	r2, [pc, #72]	; (8003db0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d6e:	4a0e      	ldr	r2, [pc, #56]	; (8003da8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003d70:	68d2      	ldr	r2, [r2, #12]
 8003d72:	0a12      	lsrs	r2, r2, #8
 8003d74:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003d78:	fb02 f303 	mul.w	r3, r2, r3
 8003d7c:	617b      	str	r3, [r7, #20]
    break;
 8003d7e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003d80:	4b09      	ldr	r3, [pc, #36]	; (8003da8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003d82:	68db      	ldr	r3, [r3, #12]
 8003d84:	0e5b      	lsrs	r3, r3, #25
 8003d86:	f003 0303 	and.w	r3, r3, #3
 8003d8a:	3301      	adds	r3, #1
 8003d8c:	005b      	lsls	r3, r3, #1
 8003d8e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003d90:	697a      	ldr	r2, [r7, #20]
 8003d92:	68bb      	ldr	r3, [r7, #8]
 8003d94:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d98:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003d9a:	687b      	ldr	r3, [r7, #4]
}
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	371c      	adds	r7, #28
 8003da0:	46bd      	mov	sp, r7
 8003da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da6:	4770      	bx	lr
 8003da8:	40021000 	.word	0x40021000
 8003dac:	007a1200 	.word	0x007a1200
 8003db0:	00f42400 	.word	0x00f42400

08003db4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b086      	sub	sp, #24
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	f000 8098 	beq.w	8003f02 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003dd6:	4b43      	ldr	r3, [pc, #268]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003dd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d10d      	bne.n	8003dfe <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003de2:	4b40      	ldr	r3, [pc, #256]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003de4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003de6:	4a3f      	ldr	r2, [pc, #252]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003de8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003dec:	6593      	str	r3, [r2, #88]	; 0x58
 8003dee:	4b3d      	ldr	r3, [pc, #244]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003df0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003df2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003df6:	60bb      	str	r3, [r7, #8]
 8003df8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003dfe:	4b3a      	ldr	r3, [pc, #232]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4a39      	ldr	r2, [pc, #228]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003e04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e08:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003e0a:	f7fd fbeb 	bl	80015e4 <HAL_GetTick>
 8003e0e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003e10:	e009      	b.n	8003e26 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e12:	f7fd fbe7 	bl	80015e4 <HAL_GetTick>
 8003e16:	4602      	mov	r2, r0
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	1ad3      	subs	r3, r2, r3
 8003e1c:	2b02      	cmp	r3, #2
 8003e1e:	d902      	bls.n	8003e26 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003e20:	2303      	movs	r3, #3
 8003e22:	74fb      	strb	r3, [r7, #19]
        break;
 8003e24:	e005      	b.n	8003e32 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003e26:	4b30      	ldr	r3, [pc, #192]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d0ef      	beq.n	8003e12 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003e32:	7cfb      	ldrb	r3, [r7, #19]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d159      	bne.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003e38:	4b2a      	ldr	r3, [pc, #168]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e42:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003e44:	697b      	ldr	r3, [r7, #20]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d01e      	beq.n	8003e88 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e4e:	697a      	ldr	r2, [r7, #20]
 8003e50:	429a      	cmp	r2, r3
 8003e52:	d019      	beq.n	8003e88 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003e54:	4b23      	ldr	r3, [pc, #140]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e5e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003e60:	4b20      	ldr	r3, [pc, #128]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e66:	4a1f      	ldr	r2, [pc, #124]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e6c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003e70:	4b1c      	ldr	r3, [pc, #112]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e76:	4a1b      	ldr	r2, [pc, #108]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e7c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003e80:	4a18      	ldr	r2, [pc, #96]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e82:	697b      	ldr	r3, [r7, #20]
 8003e84:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003e88:	697b      	ldr	r3, [r7, #20]
 8003e8a:	f003 0301 	and.w	r3, r3, #1
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d016      	beq.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e92:	f7fd fba7 	bl	80015e4 <HAL_GetTick>
 8003e96:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e98:	e00b      	b.n	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e9a:	f7fd fba3 	bl	80015e4 <HAL_GetTick>
 8003e9e:	4602      	mov	r2, r0
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	1ad3      	subs	r3, r2, r3
 8003ea4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d902      	bls.n	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003eac:	2303      	movs	r3, #3
 8003eae:	74fb      	strb	r3, [r7, #19]
            break;
 8003eb0:	e006      	b.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003eb2:	4b0c      	ldr	r3, [pc, #48]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003eb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003eb8:	f003 0302 	and.w	r3, r3, #2
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d0ec      	beq.n	8003e9a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003ec0:	7cfb      	ldrb	r3, [r7, #19]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d10b      	bne.n	8003ede <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ec6:	4b07      	ldr	r3, [pc, #28]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ec8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ecc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ed4:	4903      	ldr	r1, [pc, #12]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ed6:	4313      	orrs	r3, r2
 8003ed8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003edc:	e008      	b.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003ede:	7cfb      	ldrb	r3, [r7, #19]
 8003ee0:	74bb      	strb	r3, [r7, #18]
 8003ee2:	e005      	b.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003ee4:	40021000 	.word	0x40021000
 8003ee8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003eec:	7cfb      	ldrb	r3, [r7, #19]
 8003eee:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003ef0:	7c7b      	ldrb	r3, [r7, #17]
 8003ef2:	2b01      	cmp	r3, #1
 8003ef4:	d105      	bne.n	8003f02 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ef6:	4ba6      	ldr	r3, [pc, #664]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ef8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003efa:	4aa5      	ldr	r2, [pc, #660]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003efc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f00:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f003 0301 	and.w	r3, r3, #1
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d00a      	beq.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003f0e:	4ba0      	ldr	r3, [pc, #640]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f14:	f023 0203 	bic.w	r2, r3, #3
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	499c      	ldr	r1, [pc, #624]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f1e:	4313      	orrs	r3, r2
 8003f20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f003 0302 	and.w	r3, r3, #2
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d00a      	beq.n	8003f46 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003f30:	4b97      	ldr	r3, [pc, #604]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f36:	f023 020c 	bic.w	r2, r3, #12
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	689b      	ldr	r3, [r3, #8]
 8003f3e:	4994      	ldr	r1, [pc, #592]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f40:	4313      	orrs	r3, r2
 8003f42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f003 0304 	and.w	r3, r3, #4
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d00a      	beq.n	8003f68 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003f52:	4b8f      	ldr	r3, [pc, #572]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f58:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	68db      	ldr	r3, [r3, #12]
 8003f60:	498b      	ldr	r1, [pc, #556]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f62:	4313      	orrs	r3, r2
 8003f64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f003 0308 	and.w	r3, r3, #8
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d00a      	beq.n	8003f8a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003f74:	4b86      	ldr	r3, [pc, #536]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f7a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	691b      	ldr	r3, [r3, #16]
 8003f82:	4983      	ldr	r1, [pc, #524]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f84:	4313      	orrs	r3, r2
 8003f86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f003 0320 	and.w	r3, r3, #32
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d00a      	beq.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003f96:	4b7e      	ldr	r3, [pc, #504]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f9c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	695b      	ldr	r3, [r3, #20]
 8003fa4:	497a      	ldr	r1, [pc, #488]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d00a      	beq.n	8003fce <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003fb8:	4b75      	ldr	r3, [pc, #468]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fbe:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	699b      	ldr	r3, [r3, #24]
 8003fc6:	4972      	ldr	r1, [pc, #456]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d00a      	beq.n	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003fda:	4b6d      	ldr	r3, [pc, #436]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fe0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	69db      	ldr	r3, [r3, #28]
 8003fe8:	4969      	ldr	r1, [pc, #420]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fea:	4313      	orrs	r3, r2
 8003fec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d00a      	beq.n	8004012 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003ffc:	4b64      	ldr	r3, [pc, #400]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ffe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004002:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6a1b      	ldr	r3, [r3, #32]
 800400a:	4961      	ldr	r1, [pc, #388]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800400c:	4313      	orrs	r3, r2
 800400e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800401a:	2b00      	cmp	r3, #0
 800401c:	d00a      	beq.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800401e:	4b5c      	ldr	r3, [pc, #368]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004020:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004024:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800402c:	4958      	ldr	r1, [pc, #352]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800402e:	4313      	orrs	r3, r2
 8004030:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800403c:	2b00      	cmp	r3, #0
 800403e:	d015      	beq.n	800406c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004040:	4b53      	ldr	r3, [pc, #332]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004042:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004046:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800404e:	4950      	ldr	r1, [pc, #320]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004050:	4313      	orrs	r3, r2
 8004052:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800405a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800405e:	d105      	bne.n	800406c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004060:	4b4b      	ldr	r3, [pc, #300]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004062:	68db      	ldr	r3, [r3, #12]
 8004064:	4a4a      	ldr	r2, [pc, #296]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004066:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800406a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004074:	2b00      	cmp	r3, #0
 8004076:	d015      	beq.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004078:	4b45      	ldr	r3, [pc, #276]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800407a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800407e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004086:	4942      	ldr	r1, [pc, #264]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004088:	4313      	orrs	r3, r2
 800408a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004092:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004096:	d105      	bne.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004098:	4b3d      	ldr	r3, [pc, #244]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800409a:	68db      	ldr	r3, [r3, #12]
 800409c:	4a3c      	ldr	r2, [pc, #240]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800409e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80040a2:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d015      	beq.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80040b0:	4b37      	ldr	r3, [pc, #220]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040b6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040be:	4934      	ldr	r1, [pc, #208]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040c0:	4313      	orrs	r3, r2
 80040c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040ca:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80040ce:	d105      	bne.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80040d0:	4b2f      	ldr	r3, [pc, #188]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040d2:	68db      	ldr	r3, [r3, #12]
 80040d4:	4a2e      	ldr	r2, [pc, #184]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80040da:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d015      	beq.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80040e8:	4b29      	ldr	r3, [pc, #164]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040ee:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040f6:	4926      	ldr	r1, [pc, #152]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040f8:	4313      	orrs	r3, r2
 80040fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004102:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004106:	d105      	bne.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004108:	4b21      	ldr	r3, [pc, #132]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800410a:	68db      	ldr	r3, [r3, #12]
 800410c:	4a20      	ldr	r2, [pc, #128]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800410e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004112:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800411c:	2b00      	cmp	r3, #0
 800411e:	d015      	beq.n	800414c <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004120:	4b1b      	ldr	r3, [pc, #108]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004122:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004126:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800412e:	4918      	ldr	r1, [pc, #96]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004130:	4313      	orrs	r3, r2
 8004132:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800413a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800413e:	d105      	bne.n	800414c <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004140:	4b13      	ldr	r3, [pc, #76]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004142:	68db      	ldr	r3, [r3, #12]
 8004144:	4a12      	ldr	r2, [pc, #72]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004146:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800414a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004154:	2b00      	cmp	r3, #0
 8004156:	d015      	beq.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004158:	4b0d      	ldr	r3, [pc, #52]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800415a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800415e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004166:	490a      	ldr	r1, [pc, #40]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004168:	4313      	orrs	r3, r2
 800416a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004172:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004176:	d105      	bne.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004178:	4b05      	ldr	r3, [pc, #20]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800417a:	68db      	ldr	r3, [r3, #12]
 800417c:	4a04      	ldr	r2, [pc, #16]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800417e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004182:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004184:	7cbb      	ldrb	r3, [r7, #18]
}
 8004186:	4618      	mov	r0, r3
 8004188:	3718      	adds	r7, #24
 800418a:	46bd      	mov	sp, r7
 800418c:	bd80      	pop	{r7, pc}
 800418e:	bf00      	nop
 8004190:	40021000 	.word	0x40021000

08004194 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b082      	sub	sp, #8
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d101      	bne.n	80041a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80041a2:	2301      	movs	r3, #1
 80041a4:	e049      	b.n	800423a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041ac:	b2db      	uxtb	r3, r3
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d106      	bne.n	80041c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2200      	movs	r2, #0
 80041b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80041ba:	6878      	ldr	r0, [r7, #4]
 80041bc:	f7fd f802 	bl	80011c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2202      	movs	r2, #2
 80041c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681a      	ldr	r2, [r3, #0]
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	3304      	adds	r3, #4
 80041d0:	4619      	mov	r1, r3
 80041d2:	4610      	mov	r0, r2
 80041d4:	f000 fde2 	bl	8004d9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2201      	movs	r2, #1
 80041dc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2201      	movs	r2, #1
 80041e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2201      	movs	r2, #1
 80041ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2201      	movs	r2, #1
 80041f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2201      	movs	r2, #1
 80041fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2201      	movs	r2, #1
 8004204:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2201      	movs	r2, #1
 800420c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2201      	movs	r2, #1
 8004214:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2201      	movs	r2, #1
 800421c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2201      	movs	r2, #1
 8004224:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2201      	movs	r2, #1
 800422c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2201      	movs	r2, #1
 8004234:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004238:	2300      	movs	r3, #0
}
 800423a:	4618      	mov	r0, r3
 800423c:	3708      	adds	r7, #8
 800423e:	46bd      	mov	sp, r7
 8004240:	bd80      	pop	{r7, pc}
	...

08004244 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004244:	b480      	push	{r7}
 8004246:	b085      	sub	sp, #20
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004252:	b2db      	uxtb	r3, r3
 8004254:	2b01      	cmp	r3, #1
 8004256:	d001      	beq.n	800425c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004258:	2301      	movs	r3, #1
 800425a:	e04a      	b.n	80042f2 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2202      	movs	r2, #2
 8004260:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	68da      	ldr	r2, [r3, #12]
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f042 0201 	orr.w	r2, r2, #1
 8004272:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	4a21      	ldr	r2, [pc, #132]	; (8004300 <HAL_TIM_Base_Start_IT+0xbc>)
 800427a:	4293      	cmp	r3, r2
 800427c:	d018      	beq.n	80042b0 <HAL_TIM_Base_Start_IT+0x6c>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004286:	d013      	beq.n	80042b0 <HAL_TIM_Base_Start_IT+0x6c>
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4a1d      	ldr	r2, [pc, #116]	; (8004304 <HAL_TIM_Base_Start_IT+0xc0>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d00e      	beq.n	80042b0 <HAL_TIM_Base_Start_IT+0x6c>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	4a1c      	ldr	r2, [pc, #112]	; (8004308 <HAL_TIM_Base_Start_IT+0xc4>)
 8004298:	4293      	cmp	r3, r2
 800429a:	d009      	beq.n	80042b0 <HAL_TIM_Base_Start_IT+0x6c>
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	4a1a      	ldr	r2, [pc, #104]	; (800430c <HAL_TIM_Base_Start_IT+0xc8>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d004      	beq.n	80042b0 <HAL_TIM_Base_Start_IT+0x6c>
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	4a19      	ldr	r2, [pc, #100]	; (8004310 <HAL_TIM_Base_Start_IT+0xcc>)
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d115      	bne.n	80042dc <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	689a      	ldr	r2, [r3, #8]
 80042b6:	4b17      	ldr	r3, [pc, #92]	; (8004314 <HAL_TIM_Base_Start_IT+0xd0>)
 80042b8:	4013      	ands	r3, r2
 80042ba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	2b06      	cmp	r3, #6
 80042c0:	d015      	beq.n	80042ee <HAL_TIM_Base_Start_IT+0xaa>
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042c8:	d011      	beq.n	80042ee <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	681a      	ldr	r2, [r3, #0]
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f042 0201 	orr.w	r2, r2, #1
 80042d8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042da:	e008      	b.n	80042ee <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	681a      	ldr	r2, [r3, #0]
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f042 0201 	orr.w	r2, r2, #1
 80042ea:	601a      	str	r2, [r3, #0]
 80042ec:	e000      	b.n	80042f0 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042ee:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80042f0:	2300      	movs	r3, #0
}
 80042f2:	4618      	mov	r0, r3
 80042f4:	3714      	adds	r7, #20
 80042f6:	46bd      	mov	sp, r7
 80042f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fc:	4770      	bx	lr
 80042fe:	bf00      	nop
 8004300:	40012c00 	.word	0x40012c00
 8004304:	40000400 	.word	0x40000400
 8004308:	40000800 	.word	0x40000800
 800430c:	40013400 	.word	0x40013400
 8004310:	40014000 	.word	0x40014000
 8004314:	00010007 	.word	0x00010007

08004318 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b082      	sub	sp, #8
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d101      	bne.n	800432a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004326:	2301      	movs	r3, #1
 8004328:	e049      	b.n	80043be <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004330:	b2db      	uxtb	r3, r3
 8004332:	2b00      	cmp	r3, #0
 8004334:	d106      	bne.n	8004344 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2200      	movs	r2, #0
 800433a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800433e:	6878      	ldr	r0, [r7, #4]
 8004340:	f7fc fefa 	bl	8001138 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2202      	movs	r2, #2
 8004348:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681a      	ldr	r2, [r3, #0]
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	3304      	adds	r3, #4
 8004354:	4619      	mov	r1, r3
 8004356:	4610      	mov	r0, r2
 8004358:	f000 fd20 	bl	8004d9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2201      	movs	r2, #1
 8004360:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2201      	movs	r2, #1
 8004368:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2201      	movs	r2, #1
 8004370:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2201      	movs	r2, #1
 8004378:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2201      	movs	r2, #1
 8004380:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2201      	movs	r2, #1
 8004388:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2201      	movs	r2, #1
 8004390:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2201      	movs	r2, #1
 8004398:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2201      	movs	r2, #1
 80043a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2201      	movs	r2, #1
 80043a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2201      	movs	r2, #1
 80043b0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2201      	movs	r2, #1
 80043b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80043bc:	2300      	movs	r3, #0
}
 80043be:	4618      	mov	r0, r3
 80043c0:	3708      	adds	r7, #8
 80043c2:	46bd      	mov	sp, r7
 80043c4:	bd80      	pop	{r7, pc}
	...

080043c8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b084      	sub	sp, #16
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
 80043d0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d109      	bne.n	80043ec <HAL_TIM_PWM_Start+0x24>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80043de:	b2db      	uxtb	r3, r3
 80043e0:	2b01      	cmp	r3, #1
 80043e2:	bf14      	ite	ne
 80043e4:	2301      	movne	r3, #1
 80043e6:	2300      	moveq	r3, #0
 80043e8:	b2db      	uxtb	r3, r3
 80043ea:	e03c      	b.n	8004466 <HAL_TIM_PWM_Start+0x9e>
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	2b04      	cmp	r3, #4
 80043f0:	d109      	bne.n	8004406 <HAL_TIM_PWM_Start+0x3e>
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80043f8:	b2db      	uxtb	r3, r3
 80043fa:	2b01      	cmp	r3, #1
 80043fc:	bf14      	ite	ne
 80043fe:	2301      	movne	r3, #1
 8004400:	2300      	moveq	r3, #0
 8004402:	b2db      	uxtb	r3, r3
 8004404:	e02f      	b.n	8004466 <HAL_TIM_PWM_Start+0x9e>
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	2b08      	cmp	r3, #8
 800440a:	d109      	bne.n	8004420 <HAL_TIM_PWM_Start+0x58>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004412:	b2db      	uxtb	r3, r3
 8004414:	2b01      	cmp	r3, #1
 8004416:	bf14      	ite	ne
 8004418:	2301      	movne	r3, #1
 800441a:	2300      	moveq	r3, #0
 800441c:	b2db      	uxtb	r3, r3
 800441e:	e022      	b.n	8004466 <HAL_TIM_PWM_Start+0x9e>
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	2b0c      	cmp	r3, #12
 8004424:	d109      	bne.n	800443a <HAL_TIM_PWM_Start+0x72>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800442c:	b2db      	uxtb	r3, r3
 800442e:	2b01      	cmp	r3, #1
 8004430:	bf14      	ite	ne
 8004432:	2301      	movne	r3, #1
 8004434:	2300      	moveq	r3, #0
 8004436:	b2db      	uxtb	r3, r3
 8004438:	e015      	b.n	8004466 <HAL_TIM_PWM_Start+0x9e>
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	2b10      	cmp	r3, #16
 800443e:	d109      	bne.n	8004454 <HAL_TIM_PWM_Start+0x8c>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004446:	b2db      	uxtb	r3, r3
 8004448:	2b01      	cmp	r3, #1
 800444a:	bf14      	ite	ne
 800444c:	2301      	movne	r3, #1
 800444e:	2300      	moveq	r3, #0
 8004450:	b2db      	uxtb	r3, r3
 8004452:	e008      	b.n	8004466 <HAL_TIM_PWM_Start+0x9e>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800445a:	b2db      	uxtb	r3, r3
 800445c:	2b01      	cmp	r3, #1
 800445e:	bf14      	ite	ne
 8004460:	2301      	movne	r3, #1
 8004462:	2300      	moveq	r3, #0
 8004464:	b2db      	uxtb	r3, r3
 8004466:	2b00      	cmp	r3, #0
 8004468:	d001      	beq.n	800446e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800446a:	2301      	movs	r3, #1
 800446c:	e097      	b.n	800459e <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d104      	bne.n	800447e <HAL_TIM_PWM_Start+0xb6>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2202      	movs	r2, #2
 8004478:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800447c:	e023      	b.n	80044c6 <HAL_TIM_PWM_Start+0xfe>
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	2b04      	cmp	r3, #4
 8004482:	d104      	bne.n	800448e <HAL_TIM_PWM_Start+0xc6>
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2202      	movs	r2, #2
 8004488:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800448c:	e01b      	b.n	80044c6 <HAL_TIM_PWM_Start+0xfe>
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	2b08      	cmp	r3, #8
 8004492:	d104      	bne.n	800449e <HAL_TIM_PWM_Start+0xd6>
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2202      	movs	r2, #2
 8004498:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800449c:	e013      	b.n	80044c6 <HAL_TIM_PWM_Start+0xfe>
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	2b0c      	cmp	r3, #12
 80044a2:	d104      	bne.n	80044ae <HAL_TIM_PWM_Start+0xe6>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2202      	movs	r2, #2
 80044a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80044ac:	e00b      	b.n	80044c6 <HAL_TIM_PWM_Start+0xfe>
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	2b10      	cmp	r3, #16
 80044b2:	d104      	bne.n	80044be <HAL_TIM_PWM_Start+0xf6>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2202      	movs	r2, #2
 80044b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80044bc:	e003      	b.n	80044c6 <HAL_TIM_PWM_Start+0xfe>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2202      	movs	r2, #2
 80044c2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	2201      	movs	r2, #1
 80044cc:	6839      	ldr	r1, [r7, #0]
 80044ce:	4618      	mov	r0, r3
 80044d0:	f000 ffea 	bl	80054a8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4a33      	ldr	r2, [pc, #204]	; (80045a8 <HAL_TIM_PWM_Start+0x1e0>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d013      	beq.n	8004506 <HAL_TIM_PWM_Start+0x13e>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4a32      	ldr	r2, [pc, #200]	; (80045ac <HAL_TIM_PWM_Start+0x1e4>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d00e      	beq.n	8004506 <HAL_TIM_PWM_Start+0x13e>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4a30      	ldr	r2, [pc, #192]	; (80045b0 <HAL_TIM_PWM_Start+0x1e8>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d009      	beq.n	8004506 <HAL_TIM_PWM_Start+0x13e>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4a2f      	ldr	r2, [pc, #188]	; (80045b4 <HAL_TIM_PWM_Start+0x1ec>)
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d004      	beq.n	8004506 <HAL_TIM_PWM_Start+0x13e>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4a2d      	ldr	r2, [pc, #180]	; (80045b8 <HAL_TIM_PWM_Start+0x1f0>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d101      	bne.n	800450a <HAL_TIM_PWM_Start+0x142>
 8004506:	2301      	movs	r3, #1
 8004508:	e000      	b.n	800450c <HAL_TIM_PWM_Start+0x144>
 800450a:	2300      	movs	r3, #0
 800450c:	2b00      	cmp	r3, #0
 800450e:	d007      	beq.n	8004520 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800451e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4a20      	ldr	r2, [pc, #128]	; (80045a8 <HAL_TIM_PWM_Start+0x1e0>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d018      	beq.n	800455c <HAL_TIM_PWM_Start+0x194>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004532:	d013      	beq.n	800455c <HAL_TIM_PWM_Start+0x194>
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4a20      	ldr	r2, [pc, #128]	; (80045bc <HAL_TIM_PWM_Start+0x1f4>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d00e      	beq.n	800455c <HAL_TIM_PWM_Start+0x194>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	4a1f      	ldr	r2, [pc, #124]	; (80045c0 <HAL_TIM_PWM_Start+0x1f8>)
 8004544:	4293      	cmp	r3, r2
 8004546:	d009      	beq.n	800455c <HAL_TIM_PWM_Start+0x194>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4a17      	ldr	r2, [pc, #92]	; (80045ac <HAL_TIM_PWM_Start+0x1e4>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d004      	beq.n	800455c <HAL_TIM_PWM_Start+0x194>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4a16      	ldr	r2, [pc, #88]	; (80045b0 <HAL_TIM_PWM_Start+0x1e8>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d115      	bne.n	8004588 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	689a      	ldr	r2, [r3, #8]
 8004562:	4b18      	ldr	r3, [pc, #96]	; (80045c4 <HAL_TIM_PWM_Start+0x1fc>)
 8004564:	4013      	ands	r3, r2
 8004566:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	2b06      	cmp	r3, #6
 800456c:	d015      	beq.n	800459a <HAL_TIM_PWM_Start+0x1d2>
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004574:	d011      	beq.n	800459a <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	681a      	ldr	r2, [r3, #0]
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f042 0201 	orr.w	r2, r2, #1
 8004584:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004586:	e008      	b.n	800459a <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	681a      	ldr	r2, [r3, #0]
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f042 0201 	orr.w	r2, r2, #1
 8004596:	601a      	str	r2, [r3, #0]
 8004598:	e000      	b.n	800459c <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800459a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800459c:	2300      	movs	r3, #0
}
 800459e:	4618      	mov	r0, r3
 80045a0:	3710      	adds	r7, #16
 80045a2:	46bd      	mov	sp, r7
 80045a4:	bd80      	pop	{r7, pc}
 80045a6:	bf00      	nop
 80045a8:	40012c00 	.word	0x40012c00
 80045ac:	40013400 	.word	0x40013400
 80045b0:	40014000 	.word	0x40014000
 80045b4:	40014400 	.word	0x40014400
 80045b8:	40014800 	.word	0x40014800
 80045bc:	40000400 	.word	0x40000400
 80045c0:	40000800 	.word	0x40000800
 80045c4:	00010007 	.word	0x00010007

080045c8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b086      	sub	sp, #24
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
 80045d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d101      	bne.n	80045dc <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80045d8:	2301      	movs	r3, #1
 80045da:	e097      	b.n	800470c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045e2:	b2db      	uxtb	r3, r3
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d106      	bne.n	80045f6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2200      	movs	r2, #0
 80045ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80045f0:	6878      	ldr	r0, [r7, #4]
 80045f2:	f7fc fcfb 	bl	8000fec <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	2202      	movs	r2, #2
 80045fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	689b      	ldr	r3, [r3, #8]
 8004604:	687a      	ldr	r2, [r7, #4]
 8004606:	6812      	ldr	r2, [r2, #0]
 8004608:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 800460c:	f023 0307 	bic.w	r3, r3, #7
 8004610:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681a      	ldr	r2, [r3, #0]
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	3304      	adds	r3, #4
 800461a:	4619      	mov	r1, r3
 800461c:	4610      	mov	r0, r2
 800461e:	f000 fbbd 	bl	8004d9c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	689b      	ldr	r3, [r3, #8]
 8004628:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	699b      	ldr	r3, [r3, #24]
 8004630:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	6a1b      	ldr	r3, [r3, #32]
 8004638:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	697a      	ldr	r2, [r7, #20]
 8004640:	4313      	orrs	r3, r2
 8004642:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004644:	693b      	ldr	r3, [r7, #16]
 8004646:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800464a:	f023 0303 	bic.w	r3, r3, #3
 800464e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	689a      	ldr	r2, [r3, #8]
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	699b      	ldr	r3, [r3, #24]
 8004658:	021b      	lsls	r3, r3, #8
 800465a:	4313      	orrs	r3, r2
 800465c:	693a      	ldr	r2, [r7, #16]
 800465e:	4313      	orrs	r3, r2
 8004660:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004662:	693b      	ldr	r3, [r7, #16]
 8004664:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004668:	f023 030c 	bic.w	r3, r3, #12
 800466c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800466e:	693b      	ldr	r3, [r7, #16]
 8004670:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004674:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004678:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	68da      	ldr	r2, [r3, #12]
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	69db      	ldr	r3, [r3, #28]
 8004682:	021b      	lsls	r3, r3, #8
 8004684:	4313      	orrs	r3, r2
 8004686:	693a      	ldr	r2, [r7, #16]
 8004688:	4313      	orrs	r3, r2
 800468a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	691b      	ldr	r3, [r3, #16]
 8004690:	011a      	lsls	r2, r3, #4
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	6a1b      	ldr	r3, [r3, #32]
 8004696:	031b      	lsls	r3, r3, #12
 8004698:	4313      	orrs	r3, r2
 800469a:	693a      	ldr	r2, [r7, #16]
 800469c:	4313      	orrs	r3, r2
 800469e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80046a6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80046ae:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	685a      	ldr	r2, [r3, #4]
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	695b      	ldr	r3, [r3, #20]
 80046b8:	011b      	lsls	r3, r3, #4
 80046ba:	4313      	orrs	r3, r2
 80046bc:	68fa      	ldr	r2, [r7, #12]
 80046be:	4313      	orrs	r3, r2
 80046c0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	697a      	ldr	r2, [r7, #20]
 80046c8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	693a      	ldr	r2, [r7, #16]
 80046d0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	68fa      	ldr	r2, [r7, #12]
 80046d8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2201      	movs	r2, #1
 80046de:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2201      	movs	r2, #1
 80046e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2201      	movs	r2, #1
 80046ee:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2201      	movs	r2, #1
 80046f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2201      	movs	r2, #1
 80046fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2201      	movs	r2, #1
 8004706:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800470a:	2300      	movs	r3, #0
}
 800470c:	4618      	mov	r0, r3
 800470e:	3718      	adds	r7, #24
 8004710:	46bd      	mov	sp, r7
 8004712:	bd80      	pop	{r7, pc}

08004714 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004714:	b580      	push	{r7, lr}
 8004716:	b084      	sub	sp, #16
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
 800471c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004724:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800472c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004734:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800473c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d110      	bne.n	8004766 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004744:	7bfb      	ldrb	r3, [r7, #15]
 8004746:	2b01      	cmp	r3, #1
 8004748:	d102      	bne.n	8004750 <HAL_TIM_Encoder_Start+0x3c>
     || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800474a:	7b7b      	ldrb	r3, [r7, #13]
 800474c:	2b01      	cmp	r3, #1
 800474e:	d001      	beq.n	8004754 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004750:	2301      	movs	r3, #1
 8004752:	e068      	b.n	8004826 <HAL_TIM_Encoder_Start+0x112>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2202      	movs	r2, #2
 8004758:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2202      	movs	r2, #2
 8004760:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004764:	e031      	b.n	80047ca <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	2b04      	cmp	r3, #4
 800476a:	d110      	bne.n	800478e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800476c:	7bbb      	ldrb	r3, [r7, #14]
 800476e:	2b01      	cmp	r3, #1
 8004770:	d102      	bne.n	8004778 <HAL_TIM_Encoder_Start+0x64>
     || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004772:	7b3b      	ldrb	r3, [r7, #12]
 8004774:	2b01      	cmp	r3, #1
 8004776:	d001      	beq.n	800477c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004778:	2301      	movs	r3, #1
 800477a:	e054      	b.n	8004826 <HAL_TIM_Encoder_Start+0x112>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2202      	movs	r2, #2
 8004780:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2202      	movs	r2, #2
 8004788:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800478c:	e01d      	b.n	80047ca <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800478e:	7bfb      	ldrb	r3, [r7, #15]
 8004790:	2b01      	cmp	r3, #1
 8004792:	d108      	bne.n	80047a6 <HAL_TIM_Encoder_Start+0x92>
     || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004794:	7bbb      	ldrb	r3, [r7, #14]
 8004796:	2b01      	cmp	r3, #1
 8004798:	d105      	bne.n	80047a6 <HAL_TIM_Encoder_Start+0x92>
     || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800479a:	7b7b      	ldrb	r3, [r7, #13]
 800479c:	2b01      	cmp	r3, #1
 800479e:	d102      	bne.n	80047a6 <HAL_TIM_Encoder_Start+0x92>
     || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80047a0:	7b3b      	ldrb	r3, [r7, #12]
 80047a2:	2b01      	cmp	r3, #1
 80047a4:	d001      	beq.n	80047aa <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80047a6:	2301      	movs	r3, #1
 80047a8:	e03d      	b.n	8004826 <HAL_TIM_Encoder_Start+0x112>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2202      	movs	r2, #2
 80047ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2202      	movs	r2, #2
 80047b6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2202      	movs	r2, #2
 80047be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2202      	movs	r2, #2
 80047c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d002      	beq.n	80047d6 <HAL_TIM_Encoder_Start+0xc2>
 80047d0:	2b04      	cmp	r3, #4
 80047d2:	d008      	beq.n	80047e6 <HAL_TIM_Encoder_Start+0xd2>
 80047d4:	e00f      	b.n	80047f6 <HAL_TIM_Encoder_Start+0xe2>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	2201      	movs	r2, #1
 80047dc:	2100      	movs	r1, #0
 80047de:	4618      	mov	r0, r3
 80047e0:	f000 fe62 	bl	80054a8 <TIM_CCxChannelCmd>
      break;
 80047e4:	e016      	b.n	8004814 <HAL_TIM_Encoder_Start+0x100>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	2201      	movs	r2, #1
 80047ec:	2104      	movs	r1, #4
 80047ee:	4618      	mov	r0, r3
 80047f0:	f000 fe5a 	bl	80054a8 <TIM_CCxChannelCmd>
      break;
 80047f4:	e00e      	b.n	8004814 <HAL_TIM_Encoder_Start+0x100>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	2201      	movs	r2, #1
 80047fc:	2100      	movs	r1, #0
 80047fe:	4618      	mov	r0, r3
 8004800:	f000 fe52 	bl	80054a8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	2201      	movs	r2, #1
 800480a:	2104      	movs	r1, #4
 800480c:	4618      	mov	r0, r3
 800480e:	f000 fe4b 	bl	80054a8 <TIM_CCxChannelCmd>
      break;
 8004812:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	681a      	ldr	r2, [r3, #0]
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f042 0201 	orr.w	r2, r2, #1
 8004822:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004824:	2300      	movs	r3, #0
}
 8004826:	4618      	mov	r0, r3
 8004828:	3710      	adds	r7, #16
 800482a:	46bd      	mov	sp, r7
 800482c:	bd80      	pop	{r7, pc}

0800482e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800482e:	b580      	push	{r7, lr}
 8004830:	b082      	sub	sp, #8
 8004832:	af00      	add	r7, sp, #0
 8004834:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	691b      	ldr	r3, [r3, #16]
 800483c:	f003 0302 	and.w	r3, r3, #2
 8004840:	2b02      	cmp	r3, #2
 8004842:	d122      	bne.n	800488a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	68db      	ldr	r3, [r3, #12]
 800484a:	f003 0302 	and.w	r3, r3, #2
 800484e:	2b02      	cmp	r3, #2
 8004850:	d11b      	bne.n	800488a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f06f 0202 	mvn.w	r2, #2
 800485a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2201      	movs	r2, #1
 8004860:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	699b      	ldr	r3, [r3, #24]
 8004868:	f003 0303 	and.w	r3, r3, #3
 800486c:	2b00      	cmp	r3, #0
 800486e:	d003      	beq.n	8004878 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004870:	6878      	ldr	r0, [r7, #4]
 8004872:	f000 fa75 	bl	8004d60 <HAL_TIM_IC_CaptureCallback>
 8004876:	e005      	b.n	8004884 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004878:	6878      	ldr	r0, [r7, #4]
 800487a:	f000 fa67 	bl	8004d4c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800487e:	6878      	ldr	r0, [r7, #4]
 8004880:	f000 fa78 	bl	8004d74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2200      	movs	r2, #0
 8004888:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	691b      	ldr	r3, [r3, #16]
 8004890:	f003 0304 	and.w	r3, r3, #4
 8004894:	2b04      	cmp	r3, #4
 8004896:	d122      	bne.n	80048de <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	68db      	ldr	r3, [r3, #12]
 800489e:	f003 0304 	and.w	r3, r3, #4
 80048a2:	2b04      	cmp	r3, #4
 80048a4:	d11b      	bne.n	80048de <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f06f 0204 	mvn.w	r2, #4
 80048ae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2202      	movs	r2, #2
 80048b4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	699b      	ldr	r3, [r3, #24]
 80048bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d003      	beq.n	80048cc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048c4:	6878      	ldr	r0, [r7, #4]
 80048c6:	f000 fa4b 	bl	8004d60 <HAL_TIM_IC_CaptureCallback>
 80048ca:	e005      	b.n	80048d8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048cc:	6878      	ldr	r0, [r7, #4]
 80048ce:	f000 fa3d 	bl	8004d4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048d2:	6878      	ldr	r0, [r7, #4]
 80048d4:	f000 fa4e 	bl	8004d74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2200      	movs	r2, #0
 80048dc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	691b      	ldr	r3, [r3, #16]
 80048e4:	f003 0308 	and.w	r3, r3, #8
 80048e8:	2b08      	cmp	r3, #8
 80048ea:	d122      	bne.n	8004932 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	68db      	ldr	r3, [r3, #12]
 80048f2:	f003 0308 	and.w	r3, r3, #8
 80048f6:	2b08      	cmp	r3, #8
 80048f8:	d11b      	bne.n	8004932 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f06f 0208 	mvn.w	r2, #8
 8004902:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2204      	movs	r2, #4
 8004908:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	69db      	ldr	r3, [r3, #28]
 8004910:	f003 0303 	and.w	r3, r3, #3
 8004914:	2b00      	cmp	r3, #0
 8004916:	d003      	beq.n	8004920 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004918:	6878      	ldr	r0, [r7, #4]
 800491a:	f000 fa21 	bl	8004d60 <HAL_TIM_IC_CaptureCallback>
 800491e:	e005      	b.n	800492c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004920:	6878      	ldr	r0, [r7, #4]
 8004922:	f000 fa13 	bl	8004d4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004926:	6878      	ldr	r0, [r7, #4]
 8004928:	f000 fa24 	bl	8004d74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2200      	movs	r2, #0
 8004930:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	691b      	ldr	r3, [r3, #16]
 8004938:	f003 0310 	and.w	r3, r3, #16
 800493c:	2b10      	cmp	r3, #16
 800493e:	d122      	bne.n	8004986 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	68db      	ldr	r3, [r3, #12]
 8004946:	f003 0310 	and.w	r3, r3, #16
 800494a:	2b10      	cmp	r3, #16
 800494c:	d11b      	bne.n	8004986 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f06f 0210 	mvn.w	r2, #16
 8004956:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2208      	movs	r2, #8
 800495c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	69db      	ldr	r3, [r3, #28]
 8004964:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004968:	2b00      	cmp	r3, #0
 800496a:	d003      	beq.n	8004974 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800496c:	6878      	ldr	r0, [r7, #4]
 800496e:	f000 f9f7 	bl	8004d60 <HAL_TIM_IC_CaptureCallback>
 8004972:	e005      	b.n	8004980 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004974:	6878      	ldr	r0, [r7, #4]
 8004976:	f000 f9e9 	bl	8004d4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800497a:	6878      	ldr	r0, [r7, #4]
 800497c:	f000 f9fa 	bl	8004d74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2200      	movs	r2, #0
 8004984:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	691b      	ldr	r3, [r3, #16]
 800498c:	f003 0301 	and.w	r3, r3, #1
 8004990:	2b01      	cmp	r3, #1
 8004992:	d10e      	bne.n	80049b2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	68db      	ldr	r3, [r3, #12]
 800499a:	f003 0301 	and.w	r3, r3, #1
 800499e:	2b01      	cmp	r3, #1
 80049a0:	d107      	bne.n	80049b2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f06f 0201 	mvn.w	r2, #1
 80049aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80049ac:	6878      	ldr	r0, [r7, #4]
 80049ae:	f7fc fa3f 	bl	8000e30 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	691b      	ldr	r3, [r3, #16]
 80049b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049bc:	2b80      	cmp	r3, #128	; 0x80
 80049be:	d10e      	bne.n	80049de <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	68db      	ldr	r3, [r3, #12]
 80049c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049ca:	2b80      	cmp	r3, #128	; 0x80
 80049cc:	d107      	bne.n	80049de <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80049d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80049d8:	6878      	ldr	r0, [r7, #4]
 80049da:	f000 feb7 	bl	800574c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	691b      	ldr	r3, [r3, #16]
 80049e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049ec:	d10e      	bne.n	8004a0c <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	68db      	ldr	r3, [r3, #12]
 80049f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049f8:	2b80      	cmp	r3, #128	; 0x80
 80049fa:	d107      	bne.n	8004a0c <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004a04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004a06:	6878      	ldr	r0, [r7, #4]
 8004a08:	f000 feaa 	bl	8005760 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	691b      	ldr	r3, [r3, #16]
 8004a12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a16:	2b40      	cmp	r3, #64	; 0x40
 8004a18:	d10e      	bne.n	8004a38 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	68db      	ldr	r3, [r3, #12]
 8004a20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a24:	2b40      	cmp	r3, #64	; 0x40
 8004a26:	d107      	bne.n	8004a38 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004a30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004a32:	6878      	ldr	r0, [r7, #4]
 8004a34:	f000 f9a8 	bl	8004d88 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	691b      	ldr	r3, [r3, #16]
 8004a3e:	f003 0320 	and.w	r3, r3, #32
 8004a42:	2b20      	cmp	r3, #32
 8004a44:	d10e      	bne.n	8004a64 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	68db      	ldr	r3, [r3, #12]
 8004a4c:	f003 0320 	and.w	r3, r3, #32
 8004a50:	2b20      	cmp	r3, #32
 8004a52:	d107      	bne.n	8004a64 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f06f 0220 	mvn.w	r2, #32
 8004a5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004a5e:	6878      	ldr	r0, [r7, #4]
 8004a60:	f000 fe6a 	bl	8005738 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	691b      	ldr	r3, [r3, #16]
 8004a6a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a6e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a72:	d10f      	bne.n	8004a94 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	68db      	ldr	r3, [r3, #12]
 8004a7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a7e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a82:	d107      	bne.n	8004a94 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8004a8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8004a8e:	6878      	ldr	r0, [r7, #4]
 8004a90:	f000 fe70 	bl	8005774 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	691b      	ldr	r3, [r3, #16]
 8004a9a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a9e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004aa2:	d10f      	bne.n	8004ac4 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	68db      	ldr	r3, [r3, #12]
 8004aaa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004aae:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004ab2:	d107      	bne.n	8004ac4 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8004abc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8004abe:	6878      	ldr	r0, [r7, #4]
 8004ac0:	f000 fe62 	bl	8005788 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	691b      	ldr	r3, [r3, #16]
 8004aca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ace:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004ad2:	d10f      	bne.n	8004af4 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	68db      	ldr	r3, [r3, #12]
 8004ada:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ade:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004ae2:	d107      	bne.n	8004af4 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8004aec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8004aee:	6878      	ldr	r0, [r7, #4]
 8004af0:	f000 fe54 	bl	800579c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	691b      	ldr	r3, [r3, #16]
 8004afa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004afe:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004b02:	d10f      	bne.n	8004b24 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	68db      	ldr	r3, [r3, #12]
 8004b0a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004b0e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004b12:	d107      	bne.n	8004b24 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8004b1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8004b1e:	6878      	ldr	r0, [r7, #4]
 8004b20:	f000 fe46 	bl	80057b0 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004b24:	bf00      	nop
 8004b26:	3708      	adds	r7, #8
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	bd80      	pop	{r7, pc}

08004b2c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b084      	sub	sp, #16
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	60f8      	str	r0, [r7, #12]
 8004b34:	60b9      	str	r1, [r7, #8]
 8004b36:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b3e:	2b01      	cmp	r3, #1
 8004b40:	d101      	bne.n	8004b46 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004b42:	2302      	movs	r3, #2
 8004b44:	e0fd      	b.n	8004d42 <HAL_TIM_PWM_ConfigChannel+0x216>
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	2201      	movs	r2, #1
 8004b4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2b14      	cmp	r3, #20
 8004b52:	f200 80f0 	bhi.w	8004d36 <HAL_TIM_PWM_ConfigChannel+0x20a>
 8004b56:	a201      	add	r2, pc, #4	; (adr r2, 8004b5c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8004b58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b5c:	08004bb1 	.word	0x08004bb1
 8004b60:	08004d37 	.word	0x08004d37
 8004b64:	08004d37 	.word	0x08004d37
 8004b68:	08004d37 	.word	0x08004d37
 8004b6c:	08004bf1 	.word	0x08004bf1
 8004b70:	08004d37 	.word	0x08004d37
 8004b74:	08004d37 	.word	0x08004d37
 8004b78:	08004d37 	.word	0x08004d37
 8004b7c:	08004c33 	.word	0x08004c33
 8004b80:	08004d37 	.word	0x08004d37
 8004b84:	08004d37 	.word	0x08004d37
 8004b88:	08004d37 	.word	0x08004d37
 8004b8c:	08004c73 	.word	0x08004c73
 8004b90:	08004d37 	.word	0x08004d37
 8004b94:	08004d37 	.word	0x08004d37
 8004b98:	08004d37 	.word	0x08004d37
 8004b9c:	08004cb5 	.word	0x08004cb5
 8004ba0:	08004d37 	.word	0x08004d37
 8004ba4:	08004d37 	.word	0x08004d37
 8004ba8:	08004d37 	.word	0x08004d37
 8004bac:	08004cf5 	.word	0x08004cf5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	68b9      	ldr	r1, [r7, #8]
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	f000 f980 	bl	8004ebc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	699a      	ldr	r2, [r3, #24]
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f042 0208 	orr.w	r2, r2, #8
 8004bca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	699a      	ldr	r2, [r3, #24]
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f022 0204 	bic.w	r2, r2, #4
 8004bda:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	6999      	ldr	r1, [r3, #24]
 8004be2:	68bb      	ldr	r3, [r7, #8]
 8004be4:	691a      	ldr	r2, [r3, #16]
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	430a      	orrs	r2, r1
 8004bec:	619a      	str	r2, [r3, #24]
      break;
 8004bee:	e0a3      	b.n	8004d38 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	68b9      	ldr	r1, [r7, #8]
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	f000 f9f0 	bl	8004fdc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	699a      	ldr	r2, [r3, #24]
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c0a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	699a      	ldr	r2, [r3, #24]
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c1a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	6999      	ldr	r1, [r3, #24]
 8004c22:	68bb      	ldr	r3, [r7, #8]
 8004c24:	691b      	ldr	r3, [r3, #16]
 8004c26:	021a      	lsls	r2, r3, #8
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	430a      	orrs	r2, r1
 8004c2e:	619a      	str	r2, [r3, #24]
      break;
 8004c30:	e082      	b.n	8004d38 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	68b9      	ldr	r1, [r7, #8]
 8004c38:	4618      	mov	r0, r3
 8004c3a:	f000 fa59 	bl	80050f0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	69da      	ldr	r2, [r3, #28]
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f042 0208 	orr.w	r2, r2, #8
 8004c4c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	69da      	ldr	r2, [r3, #28]
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f022 0204 	bic.w	r2, r2, #4
 8004c5c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	69d9      	ldr	r1, [r3, #28]
 8004c64:	68bb      	ldr	r3, [r7, #8]
 8004c66:	691a      	ldr	r2, [r3, #16]
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	430a      	orrs	r2, r1
 8004c6e:	61da      	str	r2, [r3, #28]
      break;
 8004c70:	e062      	b.n	8004d38 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	68b9      	ldr	r1, [r7, #8]
 8004c78:	4618      	mov	r0, r3
 8004c7a:	f000 fac1 	bl	8005200 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	69da      	ldr	r2, [r3, #28]
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c8c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	69da      	ldr	r2, [r3, #28]
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c9c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	69d9      	ldr	r1, [r3, #28]
 8004ca4:	68bb      	ldr	r3, [r7, #8]
 8004ca6:	691b      	ldr	r3, [r3, #16]
 8004ca8:	021a      	lsls	r2, r3, #8
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	430a      	orrs	r2, r1
 8004cb0:	61da      	str	r2, [r3, #28]
      break;
 8004cb2:	e041      	b.n	8004d38 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	68b9      	ldr	r1, [r7, #8]
 8004cba:	4618      	mov	r0, r3
 8004cbc:	f000 fb2a 	bl	8005314 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f042 0208 	orr.w	r2, r2, #8
 8004cce:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f022 0204 	bic.w	r2, r2, #4
 8004cde:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004ce6:	68bb      	ldr	r3, [r7, #8]
 8004ce8:	691a      	ldr	r2, [r3, #16]
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	430a      	orrs	r2, r1
 8004cf0:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8004cf2:	e021      	b.n	8004d38 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	68b9      	ldr	r1, [r7, #8]
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	f000 fb6e 	bl	80053dc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d0e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d1e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004d26:	68bb      	ldr	r3, [r7, #8]
 8004d28:	691b      	ldr	r3, [r3, #16]
 8004d2a:	021a      	lsls	r2, r3, #8
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	430a      	orrs	r2, r1
 8004d32:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8004d34:	e000      	b.n	8004d38 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8004d36:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004d40:	2300      	movs	r3, #0
}
 8004d42:	4618      	mov	r0, r3
 8004d44:	3710      	adds	r7, #16
 8004d46:	46bd      	mov	sp, r7
 8004d48:	bd80      	pop	{r7, pc}
 8004d4a:	bf00      	nop

08004d4c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004d4c:	b480      	push	{r7}
 8004d4e:	b083      	sub	sp, #12
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004d54:	bf00      	nop
 8004d56:	370c      	adds	r7, #12
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5e:	4770      	bx	lr

08004d60 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004d60:	b480      	push	{r7}
 8004d62:	b083      	sub	sp, #12
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004d68:	bf00      	nop
 8004d6a:	370c      	adds	r7, #12
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d72:	4770      	bx	lr

08004d74 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004d74:	b480      	push	{r7}
 8004d76:	b083      	sub	sp, #12
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004d7c:	bf00      	nop
 8004d7e:	370c      	adds	r7, #12
 8004d80:	46bd      	mov	sp, r7
 8004d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d86:	4770      	bx	lr

08004d88 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004d88:	b480      	push	{r7}
 8004d8a:	b083      	sub	sp, #12
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004d90:	bf00      	nop
 8004d92:	370c      	adds	r7, #12
 8004d94:	46bd      	mov	sp, r7
 8004d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9a:	4770      	bx	lr

08004d9c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004d9c:	b480      	push	{r7}
 8004d9e:	b085      	sub	sp, #20
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
 8004da4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	4a3c      	ldr	r2, [pc, #240]	; (8004ea0 <TIM_Base_SetConfig+0x104>)
 8004db0:	4293      	cmp	r3, r2
 8004db2:	d00f      	beq.n	8004dd4 <TIM_Base_SetConfig+0x38>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004dba:	d00b      	beq.n	8004dd4 <TIM_Base_SetConfig+0x38>
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	4a39      	ldr	r2, [pc, #228]	; (8004ea4 <TIM_Base_SetConfig+0x108>)
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d007      	beq.n	8004dd4 <TIM_Base_SetConfig+0x38>
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	4a38      	ldr	r2, [pc, #224]	; (8004ea8 <TIM_Base_SetConfig+0x10c>)
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d003      	beq.n	8004dd4 <TIM_Base_SetConfig+0x38>
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	4a37      	ldr	r2, [pc, #220]	; (8004eac <TIM_Base_SetConfig+0x110>)
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	d108      	bne.n	8004de6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dda:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	685b      	ldr	r3, [r3, #4]
 8004de0:	68fa      	ldr	r2, [r7, #12]
 8004de2:	4313      	orrs	r3, r2
 8004de4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	4a2d      	ldr	r2, [pc, #180]	; (8004ea0 <TIM_Base_SetConfig+0x104>)
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d01b      	beq.n	8004e26 <TIM_Base_SetConfig+0x8a>
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004df4:	d017      	beq.n	8004e26 <TIM_Base_SetConfig+0x8a>
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	4a2a      	ldr	r2, [pc, #168]	; (8004ea4 <TIM_Base_SetConfig+0x108>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d013      	beq.n	8004e26 <TIM_Base_SetConfig+0x8a>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	4a29      	ldr	r2, [pc, #164]	; (8004ea8 <TIM_Base_SetConfig+0x10c>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d00f      	beq.n	8004e26 <TIM_Base_SetConfig+0x8a>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	4a28      	ldr	r2, [pc, #160]	; (8004eac <TIM_Base_SetConfig+0x110>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d00b      	beq.n	8004e26 <TIM_Base_SetConfig+0x8a>
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	4a27      	ldr	r2, [pc, #156]	; (8004eb0 <TIM_Base_SetConfig+0x114>)
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d007      	beq.n	8004e26 <TIM_Base_SetConfig+0x8a>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	4a26      	ldr	r2, [pc, #152]	; (8004eb4 <TIM_Base_SetConfig+0x118>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d003      	beq.n	8004e26 <TIM_Base_SetConfig+0x8a>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	4a25      	ldr	r2, [pc, #148]	; (8004eb8 <TIM_Base_SetConfig+0x11c>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d108      	bne.n	8004e38 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e2c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	68db      	ldr	r3, [r3, #12]
 8004e32:	68fa      	ldr	r2, [r7, #12]
 8004e34:	4313      	orrs	r3, r2
 8004e36:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	695b      	ldr	r3, [r3, #20]
 8004e42:	4313      	orrs	r3, r2
 8004e44:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	68fa      	ldr	r2, [r7, #12]
 8004e4a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	689a      	ldr	r2, [r3, #8]
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	681a      	ldr	r2, [r3, #0]
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	4a10      	ldr	r2, [pc, #64]	; (8004ea0 <TIM_Base_SetConfig+0x104>)
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d00f      	beq.n	8004e84 <TIM_Base_SetConfig+0xe8>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	4a11      	ldr	r2, [pc, #68]	; (8004eac <TIM_Base_SetConfig+0x110>)
 8004e68:	4293      	cmp	r3, r2
 8004e6a:	d00b      	beq.n	8004e84 <TIM_Base_SetConfig+0xe8>
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	4a10      	ldr	r2, [pc, #64]	; (8004eb0 <TIM_Base_SetConfig+0x114>)
 8004e70:	4293      	cmp	r3, r2
 8004e72:	d007      	beq.n	8004e84 <TIM_Base_SetConfig+0xe8>
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	4a0f      	ldr	r2, [pc, #60]	; (8004eb4 <TIM_Base_SetConfig+0x118>)
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d003      	beq.n	8004e84 <TIM_Base_SetConfig+0xe8>
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	4a0e      	ldr	r2, [pc, #56]	; (8004eb8 <TIM_Base_SetConfig+0x11c>)
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d103      	bne.n	8004e8c <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	691a      	ldr	r2, [r3, #16]
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2201      	movs	r2, #1
 8004e90:	615a      	str	r2, [r3, #20]
}
 8004e92:	bf00      	nop
 8004e94:	3714      	adds	r7, #20
 8004e96:	46bd      	mov	sp, r7
 8004e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9c:	4770      	bx	lr
 8004e9e:	bf00      	nop
 8004ea0:	40012c00 	.word	0x40012c00
 8004ea4:	40000400 	.word	0x40000400
 8004ea8:	40000800 	.word	0x40000800
 8004eac:	40013400 	.word	0x40013400
 8004eb0:	40014000 	.word	0x40014000
 8004eb4:	40014400 	.word	0x40014400
 8004eb8:	40014800 	.word	0x40014800

08004ebc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ebc:	b480      	push	{r7}
 8004ebe:	b087      	sub	sp, #28
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
 8004ec4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6a1b      	ldr	r3, [r3, #32]
 8004eca:	f023 0201 	bic.w	r2, r3, #1
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6a1b      	ldr	r3, [r3, #32]
 8004ed6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	685b      	ldr	r3, [r3, #4]
 8004edc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	699b      	ldr	r3, [r3, #24]
 8004ee2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004eea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004eee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	f023 0303 	bic.w	r3, r3, #3
 8004ef6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	68fa      	ldr	r2, [r7, #12]
 8004efe:	4313      	orrs	r3, r2
 8004f00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004f02:	697b      	ldr	r3, [r7, #20]
 8004f04:	f023 0302 	bic.w	r3, r3, #2
 8004f08:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	689b      	ldr	r3, [r3, #8]
 8004f0e:	697a      	ldr	r2, [r7, #20]
 8004f10:	4313      	orrs	r3, r2
 8004f12:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	4a2c      	ldr	r2, [pc, #176]	; (8004fc8 <TIM_OC1_SetConfig+0x10c>)
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d00f      	beq.n	8004f3c <TIM_OC1_SetConfig+0x80>
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	4a2b      	ldr	r2, [pc, #172]	; (8004fcc <TIM_OC1_SetConfig+0x110>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d00b      	beq.n	8004f3c <TIM_OC1_SetConfig+0x80>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	4a2a      	ldr	r2, [pc, #168]	; (8004fd0 <TIM_OC1_SetConfig+0x114>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d007      	beq.n	8004f3c <TIM_OC1_SetConfig+0x80>
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	4a29      	ldr	r2, [pc, #164]	; (8004fd4 <TIM_OC1_SetConfig+0x118>)
 8004f30:	4293      	cmp	r3, r2
 8004f32:	d003      	beq.n	8004f3c <TIM_OC1_SetConfig+0x80>
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	4a28      	ldr	r2, [pc, #160]	; (8004fd8 <TIM_OC1_SetConfig+0x11c>)
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d10c      	bne.n	8004f56 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004f3c:	697b      	ldr	r3, [r7, #20]
 8004f3e:	f023 0308 	bic.w	r3, r3, #8
 8004f42:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	68db      	ldr	r3, [r3, #12]
 8004f48:	697a      	ldr	r2, [r7, #20]
 8004f4a:	4313      	orrs	r3, r2
 8004f4c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004f4e:	697b      	ldr	r3, [r7, #20]
 8004f50:	f023 0304 	bic.w	r3, r3, #4
 8004f54:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	4a1b      	ldr	r2, [pc, #108]	; (8004fc8 <TIM_OC1_SetConfig+0x10c>)
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d00f      	beq.n	8004f7e <TIM_OC1_SetConfig+0xc2>
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	4a1a      	ldr	r2, [pc, #104]	; (8004fcc <TIM_OC1_SetConfig+0x110>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d00b      	beq.n	8004f7e <TIM_OC1_SetConfig+0xc2>
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	4a19      	ldr	r2, [pc, #100]	; (8004fd0 <TIM_OC1_SetConfig+0x114>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d007      	beq.n	8004f7e <TIM_OC1_SetConfig+0xc2>
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	4a18      	ldr	r2, [pc, #96]	; (8004fd4 <TIM_OC1_SetConfig+0x118>)
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d003      	beq.n	8004f7e <TIM_OC1_SetConfig+0xc2>
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	4a17      	ldr	r2, [pc, #92]	; (8004fd8 <TIM_OC1_SetConfig+0x11c>)
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d111      	bne.n	8004fa2 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004f7e:	693b      	ldr	r3, [r7, #16]
 8004f80:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004f84:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004f86:	693b      	ldr	r3, [r7, #16]
 8004f88:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004f8c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	695b      	ldr	r3, [r3, #20]
 8004f92:	693a      	ldr	r2, [r7, #16]
 8004f94:	4313      	orrs	r3, r2
 8004f96:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	699b      	ldr	r3, [r3, #24]
 8004f9c:	693a      	ldr	r2, [r7, #16]
 8004f9e:	4313      	orrs	r3, r2
 8004fa0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	693a      	ldr	r2, [r7, #16]
 8004fa6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	68fa      	ldr	r2, [r7, #12]
 8004fac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	685a      	ldr	r2, [r3, #4]
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	697a      	ldr	r2, [r7, #20]
 8004fba:	621a      	str	r2, [r3, #32]
}
 8004fbc:	bf00      	nop
 8004fbe:	371c      	adds	r7, #28
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc6:	4770      	bx	lr
 8004fc8:	40012c00 	.word	0x40012c00
 8004fcc:	40013400 	.word	0x40013400
 8004fd0:	40014000 	.word	0x40014000
 8004fd4:	40014400 	.word	0x40014400
 8004fd8:	40014800 	.word	0x40014800

08004fdc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004fdc:	b480      	push	{r7}
 8004fde:	b087      	sub	sp, #28
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
 8004fe4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6a1b      	ldr	r3, [r3, #32]
 8004fea:	f023 0210 	bic.w	r2, r3, #16
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6a1b      	ldr	r3, [r3, #32]
 8004ff6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	685b      	ldr	r3, [r3, #4]
 8004ffc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	699b      	ldr	r3, [r3, #24]
 8005002:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800500a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800500e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005016:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	021b      	lsls	r3, r3, #8
 800501e:	68fa      	ldr	r2, [r7, #12]
 8005020:	4313      	orrs	r3, r2
 8005022:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005024:	697b      	ldr	r3, [r7, #20]
 8005026:	f023 0320 	bic.w	r3, r3, #32
 800502a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	689b      	ldr	r3, [r3, #8]
 8005030:	011b      	lsls	r3, r3, #4
 8005032:	697a      	ldr	r2, [r7, #20]
 8005034:	4313      	orrs	r3, r2
 8005036:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	4a28      	ldr	r2, [pc, #160]	; (80050dc <TIM_OC2_SetConfig+0x100>)
 800503c:	4293      	cmp	r3, r2
 800503e:	d003      	beq.n	8005048 <TIM_OC2_SetConfig+0x6c>
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	4a27      	ldr	r2, [pc, #156]	; (80050e0 <TIM_OC2_SetConfig+0x104>)
 8005044:	4293      	cmp	r3, r2
 8005046:	d10d      	bne.n	8005064 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005048:	697b      	ldr	r3, [r7, #20]
 800504a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800504e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	68db      	ldr	r3, [r3, #12]
 8005054:	011b      	lsls	r3, r3, #4
 8005056:	697a      	ldr	r2, [r7, #20]
 8005058:	4313      	orrs	r3, r2
 800505a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800505c:	697b      	ldr	r3, [r7, #20]
 800505e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005062:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	4a1d      	ldr	r2, [pc, #116]	; (80050dc <TIM_OC2_SetConfig+0x100>)
 8005068:	4293      	cmp	r3, r2
 800506a:	d00f      	beq.n	800508c <TIM_OC2_SetConfig+0xb0>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	4a1c      	ldr	r2, [pc, #112]	; (80050e0 <TIM_OC2_SetConfig+0x104>)
 8005070:	4293      	cmp	r3, r2
 8005072:	d00b      	beq.n	800508c <TIM_OC2_SetConfig+0xb0>
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	4a1b      	ldr	r2, [pc, #108]	; (80050e4 <TIM_OC2_SetConfig+0x108>)
 8005078:	4293      	cmp	r3, r2
 800507a:	d007      	beq.n	800508c <TIM_OC2_SetConfig+0xb0>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	4a1a      	ldr	r2, [pc, #104]	; (80050e8 <TIM_OC2_SetConfig+0x10c>)
 8005080:	4293      	cmp	r3, r2
 8005082:	d003      	beq.n	800508c <TIM_OC2_SetConfig+0xb0>
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	4a19      	ldr	r2, [pc, #100]	; (80050ec <TIM_OC2_SetConfig+0x110>)
 8005088:	4293      	cmp	r3, r2
 800508a:	d113      	bne.n	80050b4 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800508c:	693b      	ldr	r3, [r7, #16]
 800508e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005092:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005094:	693b      	ldr	r3, [r7, #16]
 8005096:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800509a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	695b      	ldr	r3, [r3, #20]
 80050a0:	009b      	lsls	r3, r3, #2
 80050a2:	693a      	ldr	r2, [r7, #16]
 80050a4:	4313      	orrs	r3, r2
 80050a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	699b      	ldr	r3, [r3, #24]
 80050ac:	009b      	lsls	r3, r3, #2
 80050ae:	693a      	ldr	r2, [r7, #16]
 80050b0:	4313      	orrs	r3, r2
 80050b2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	693a      	ldr	r2, [r7, #16]
 80050b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	68fa      	ldr	r2, [r7, #12]
 80050be:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	685a      	ldr	r2, [r3, #4]
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	697a      	ldr	r2, [r7, #20]
 80050cc:	621a      	str	r2, [r3, #32]
}
 80050ce:	bf00      	nop
 80050d0:	371c      	adds	r7, #28
 80050d2:	46bd      	mov	sp, r7
 80050d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d8:	4770      	bx	lr
 80050da:	bf00      	nop
 80050dc:	40012c00 	.word	0x40012c00
 80050e0:	40013400 	.word	0x40013400
 80050e4:	40014000 	.word	0x40014000
 80050e8:	40014400 	.word	0x40014400
 80050ec:	40014800 	.word	0x40014800

080050f0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80050f0:	b480      	push	{r7}
 80050f2:	b087      	sub	sp, #28
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
 80050f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6a1b      	ldr	r3, [r3, #32]
 80050fe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6a1b      	ldr	r3, [r3, #32]
 800510a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	685b      	ldr	r3, [r3, #4]
 8005110:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	69db      	ldr	r3, [r3, #28]
 8005116:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800511e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005122:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	f023 0303 	bic.w	r3, r3, #3
 800512a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	68fa      	ldr	r2, [r7, #12]
 8005132:	4313      	orrs	r3, r2
 8005134:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005136:	697b      	ldr	r3, [r7, #20]
 8005138:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800513c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	689b      	ldr	r3, [r3, #8]
 8005142:	021b      	lsls	r3, r3, #8
 8005144:	697a      	ldr	r2, [r7, #20]
 8005146:	4313      	orrs	r3, r2
 8005148:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	4a27      	ldr	r2, [pc, #156]	; (80051ec <TIM_OC3_SetConfig+0xfc>)
 800514e:	4293      	cmp	r3, r2
 8005150:	d003      	beq.n	800515a <TIM_OC3_SetConfig+0x6a>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	4a26      	ldr	r2, [pc, #152]	; (80051f0 <TIM_OC3_SetConfig+0x100>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d10d      	bne.n	8005176 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800515a:	697b      	ldr	r3, [r7, #20]
 800515c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005160:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	68db      	ldr	r3, [r3, #12]
 8005166:	021b      	lsls	r3, r3, #8
 8005168:	697a      	ldr	r2, [r7, #20]
 800516a:	4313      	orrs	r3, r2
 800516c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800516e:	697b      	ldr	r3, [r7, #20]
 8005170:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005174:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	4a1c      	ldr	r2, [pc, #112]	; (80051ec <TIM_OC3_SetConfig+0xfc>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d00f      	beq.n	800519e <TIM_OC3_SetConfig+0xae>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	4a1b      	ldr	r2, [pc, #108]	; (80051f0 <TIM_OC3_SetConfig+0x100>)
 8005182:	4293      	cmp	r3, r2
 8005184:	d00b      	beq.n	800519e <TIM_OC3_SetConfig+0xae>
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	4a1a      	ldr	r2, [pc, #104]	; (80051f4 <TIM_OC3_SetConfig+0x104>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d007      	beq.n	800519e <TIM_OC3_SetConfig+0xae>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	4a19      	ldr	r2, [pc, #100]	; (80051f8 <TIM_OC3_SetConfig+0x108>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d003      	beq.n	800519e <TIM_OC3_SetConfig+0xae>
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	4a18      	ldr	r2, [pc, #96]	; (80051fc <TIM_OC3_SetConfig+0x10c>)
 800519a:	4293      	cmp	r3, r2
 800519c:	d113      	bne.n	80051c6 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800519e:	693b      	ldr	r3, [r7, #16]
 80051a0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80051a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80051a6:	693b      	ldr	r3, [r7, #16]
 80051a8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80051ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	695b      	ldr	r3, [r3, #20]
 80051b2:	011b      	lsls	r3, r3, #4
 80051b4:	693a      	ldr	r2, [r7, #16]
 80051b6:	4313      	orrs	r3, r2
 80051b8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	699b      	ldr	r3, [r3, #24]
 80051be:	011b      	lsls	r3, r3, #4
 80051c0:	693a      	ldr	r2, [r7, #16]
 80051c2:	4313      	orrs	r3, r2
 80051c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	693a      	ldr	r2, [r7, #16]
 80051ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	68fa      	ldr	r2, [r7, #12]
 80051d0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	685a      	ldr	r2, [r3, #4]
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	697a      	ldr	r2, [r7, #20]
 80051de:	621a      	str	r2, [r3, #32]
}
 80051e0:	bf00      	nop
 80051e2:	371c      	adds	r7, #28
 80051e4:	46bd      	mov	sp, r7
 80051e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ea:	4770      	bx	lr
 80051ec:	40012c00 	.word	0x40012c00
 80051f0:	40013400 	.word	0x40013400
 80051f4:	40014000 	.word	0x40014000
 80051f8:	40014400 	.word	0x40014400
 80051fc:	40014800 	.word	0x40014800

08005200 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005200:	b480      	push	{r7}
 8005202:	b087      	sub	sp, #28
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
 8005208:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6a1b      	ldr	r3, [r3, #32]
 800520e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6a1b      	ldr	r3, [r3, #32]
 800521a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	685b      	ldr	r3, [r3, #4]
 8005220:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	69db      	ldr	r3, [r3, #28]
 8005226:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800522e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005232:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800523a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	021b      	lsls	r3, r3, #8
 8005242:	68fa      	ldr	r2, [r7, #12]
 8005244:	4313      	orrs	r3, r2
 8005246:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005248:	697b      	ldr	r3, [r7, #20]
 800524a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800524e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	689b      	ldr	r3, [r3, #8]
 8005254:	031b      	lsls	r3, r3, #12
 8005256:	697a      	ldr	r2, [r7, #20]
 8005258:	4313      	orrs	r3, r2
 800525a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	4a28      	ldr	r2, [pc, #160]	; (8005300 <TIM_OC4_SetConfig+0x100>)
 8005260:	4293      	cmp	r3, r2
 8005262:	d003      	beq.n	800526c <TIM_OC4_SetConfig+0x6c>
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	4a27      	ldr	r2, [pc, #156]	; (8005304 <TIM_OC4_SetConfig+0x104>)
 8005268:	4293      	cmp	r3, r2
 800526a:	d10d      	bne.n	8005288 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800526c:	697b      	ldr	r3, [r7, #20]
 800526e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005272:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	68db      	ldr	r3, [r3, #12]
 8005278:	031b      	lsls	r3, r3, #12
 800527a:	697a      	ldr	r2, [r7, #20]
 800527c:	4313      	orrs	r3, r2
 800527e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8005280:	697b      	ldr	r3, [r7, #20]
 8005282:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005286:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	4a1d      	ldr	r2, [pc, #116]	; (8005300 <TIM_OC4_SetConfig+0x100>)
 800528c:	4293      	cmp	r3, r2
 800528e:	d00f      	beq.n	80052b0 <TIM_OC4_SetConfig+0xb0>
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	4a1c      	ldr	r2, [pc, #112]	; (8005304 <TIM_OC4_SetConfig+0x104>)
 8005294:	4293      	cmp	r3, r2
 8005296:	d00b      	beq.n	80052b0 <TIM_OC4_SetConfig+0xb0>
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	4a1b      	ldr	r2, [pc, #108]	; (8005308 <TIM_OC4_SetConfig+0x108>)
 800529c:	4293      	cmp	r3, r2
 800529e:	d007      	beq.n	80052b0 <TIM_OC4_SetConfig+0xb0>
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	4a1a      	ldr	r2, [pc, #104]	; (800530c <TIM_OC4_SetConfig+0x10c>)
 80052a4:	4293      	cmp	r3, r2
 80052a6:	d003      	beq.n	80052b0 <TIM_OC4_SetConfig+0xb0>
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	4a19      	ldr	r2, [pc, #100]	; (8005310 <TIM_OC4_SetConfig+0x110>)
 80052ac:	4293      	cmp	r3, r2
 80052ae:	d113      	bne.n	80052d8 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80052b0:	693b      	ldr	r3, [r7, #16]
 80052b2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80052b6:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80052b8:	693b      	ldr	r3, [r7, #16]
 80052ba:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80052be:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	695b      	ldr	r3, [r3, #20]
 80052c4:	019b      	lsls	r3, r3, #6
 80052c6:	693a      	ldr	r2, [r7, #16]
 80052c8:	4313      	orrs	r3, r2
 80052ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	699b      	ldr	r3, [r3, #24]
 80052d0:	019b      	lsls	r3, r3, #6
 80052d2:	693a      	ldr	r2, [r7, #16]
 80052d4:	4313      	orrs	r3, r2
 80052d6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	693a      	ldr	r2, [r7, #16]
 80052dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	68fa      	ldr	r2, [r7, #12]
 80052e2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	685a      	ldr	r2, [r3, #4]
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	697a      	ldr	r2, [r7, #20]
 80052f0:	621a      	str	r2, [r3, #32]
}
 80052f2:	bf00      	nop
 80052f4:	371c      	adds	r7, #28
 80052f6:	46bd      	mov	sp, r7
 80052f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fc:	4770      	bx	lr
 80052fe:	bf00      	nop
 8005300:	40012c00 	.word	0x40012c00
 8005304:	40013400 	.word	0x40013400
 8005308:	40014000 	.word	0x40014000
 800530c:	40014400 	.word	0x40014400
 8005310:	40014800 	.word	0x40014800

08005314 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005314:	b480      	push	{r7}
 8005316:	b087      	sub	sp, #28
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
 800531c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6a1b      	ldr	r3, [r3, #32]
 8005322:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6a1b      	ldr	r3, [r3, #32]
 800532e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	685b      	ldr	r3, [r3, #4]
 8005334:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800533a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005342:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005346:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	68fa      	ldr	r2, [r7, #12]
 800534e:	4313      	orrs	r3, r2
 8005350:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005352:	693b      	ldr	r3, [r7, #16]
 8005354:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005358:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	689b      	ldr	r3, [r3, #8]
 800535e:	041b      	lsls	r3, r3, #16
 8005360:	693a      	ldr	r2, [r7, #16]
 8005362:	4313      	orrs	r3, r2
 8005364:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	4a17      	ldr	r2, [pc, #92]	; (80053c8 <TIM_OC5_SetConfig+0xb4>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d00f      	beq.n	800538e <TIM_OC5_SetConfig+0x7a>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	4a16      	ldr	r2, [pc, #88]	; (80053cc <TIM_OC5_SetConfig+0xb8>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d00b      	beq.n	800538e <TIM_OC5_SetConfig+0x7a>
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	4a15      	ldr	r2, [pc, #84]	; (80053d0 <TIM_OC5_SetConfig+0xbc>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d007      	beq.n	800538e <TIM_OC5_SetConfig+0x7a>
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	4a14      	ldr	r2, [pc, #80]	; (80053d4 <TIM_OC5_SetConfig+0xc0>)
 8005382:	4293      	cmp	r3, r2
 8005384:	d003      	beq.n	800538e <TIM_OC5_SetConfig+0x7a>
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	4a13      	ldr	r2, [pc, #76]	; (80053d8 <TIM_OC5_SetConfig+0xc4>)
 800538a:	4293      	cmp	r3, r2
 800538c:	d109      	bne.n	80053a2 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800538e:	697b      	ldr	r3, [r7, #20]
 8005390:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005394:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	695b      	ldr	r3, [r3, #20]
 800539a:	021b      	lsls	r3, r3, #8
 800539c:	697a      	ldr	r2, [r7, #20]
 800539e:	4313      	orrs	r3, r2
 80053a0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	697a      	ldr	r2, [r7, #20]
 80053a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	68fa      	ldr	r2, [r7, #12]
 80053ac:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	685a      	ldr	r2, [r3, #4]
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	693a      	ldr	r2, [r7, #16]
 80053ba:	621a      	str	r2, [r3, #32]
}
 80053bc:	bf00      	nop
 80053be:	371c      	adds	r7, #28
 80053c0:	46bd      	mov	sp, r7
 80053c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c6:	4770      	bx	lr
 80053c8:	40012c00 	.word	0x40012c00
 80053cc:	40013400 	.word	0x40013400
 80053d0:	40014000 	.word	0x40014000
 80053d4:	40014400 	.word	0x40014400
 80053d8:	40014800 	.word	0x40014800

080053dc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80053dc:	b480      	push	{r7}
 80053de:	b087      	sub	sp, #28
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
 80053e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6a1b      	ldr	r3, [r3, #32]
 80053ea:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6a1b      	ldr	r3, [r3, #32]
 80053f6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	685b      	ldr	r3, [r3, #4]
 80053fc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005402:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800540a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800540e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	021b      	lsls	r3, r3, #8
 8005416:	68fa      	ldr	r2, [r7, #12]
 8005418:	4313      	orrs	r3, r2
 800541a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800541c:	693b      	ldr	r3, [r7, #16]
 800541e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005422:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	689b      	ldr	r3, [r3, #8]
 8005428:	051b      	lsls	r3, r3, #20
 800542a:	693a      	ldr	r2, [r7, #16]
 800542c:	4313      	orrs	r3, r2
 800542e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	4a18      	ldr	r2, [pc, #96]	; (8005494 <TIM_OC6_SetConfig+0xb8>)
 8005434:	4293      	cmp	r3, r2
 8005436:	d00f      	beq.n	8005458 <TIM_OC6_SetConfig+0x7c>
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	4a17      	ldr	r2, [pc, #92]	; (8005498 <TIM_OC6_SetConfig+0xbc>)
 800543c:	4293      	cmp	r3, r2
 800543e:	d00b      	beq.n	8005458 <TIM_OC6_SetConfig+0x7c>
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	4a16      	ldr	r2, [pc, #88]	; (800549c <TIM_OC6_SetConfig+0xc0>)
 8005444:	4293      	cmp	r3, r2
 8005446:	d007      	beq.n	8005458 <TIM_OC6_SetConfig+0x7c>
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	4a15      	ldr	r2, [pc, #84]	; (80054a0 <TIM_OC6_SetConfig+0xc4>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d003      	beq.n	8005458 <TIM_OC6_SetConfig+0x7c>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	4a14      	ldr	r2, [pc, #80]	; (80054a4 <TIM_OC6_SetConfig+0xc8>)
 8005454:	4293      	cmp	r3, r2
 8005456:	d109      	bne.n	800546c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005458:	697b      	ldr	r3, [r7, #20]
 800545a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800545e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	695b      	ldr	r3, [r3, #20]
 8005464:	029b      	lsls	r3, r3, #10
 8005466:	697a      	ldr	r2, [r7, #20]
 8005468:	4313      	orrs	r3, r2
 800546a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	697a      	ldr	r2, [r7, #20]
 8005470:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	68fa      	ldr	r2, [r7, #12]
 8005476:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	685a      	ldr	r2, [r3, #4]
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	693a      	ldr	r2, [r7, #16]
 8005484:	621a      	str	r2, [r3, #32]
}
 8005486:	bf00      	nop
 8005488:	371c      	adds	r7, #28
 800548a:	46bd      	mov	sp, r7
 800548c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005490:	4770      	bx	lr
 8005492:	bf00      	nop
 8005494:	40012c00 	.word	0x40012c00
 8005498:	40013400 	.word	0x40013400
 800549c:	40014000 	.word	0x40014000
 80054a0:	40014400 	.word	0x40014400
 80054a4:	40014800 	.word	0x40014800

080054a8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80054a8:	b480      	push	{r7}
 80054aa:	b087      	sub	sp, #28
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	60f8      	str	r0, [r7, #12]
 80054b0:	60b9      	str	r1, [r7, #8]
 80054b2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80054b4:	68bb      	ldr	r3, [r7, #8]
 80054b6:	f003 031f 	and.w	r3, r3, #31
 80054ba:	2201      	movs	r2, #1
 80054bc:	fa02 f303 	lsl.w	r3, r2, r3
 80054c0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	6a1a      	ldr	r2, [r3, #32]
 80054c6:	697b      	ldr	r3, [r7, #20]
 80054c8:	43db      	mvns	r3, r3
 80054ca:	401a      	ands	r2, r3
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	6a1a      	ldr	r2, [r3, #32]
 80054d4:	68bb      	ldr	r3, [r7, #8]
 80054d6:	f003 031f 	and.w	r3, r3, #31
 80054da:	6879      	ldr	r1, [r7, #4]
 80054dc:	fa01 f303 	lsl.w	r3, r1, r3
 80054e0:	431a      	orrs	r2, r3
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	621a      	str	r2, [r3, #32]
}
 80054e6:	bf00      	nop
 80054e8:	371c      	adds	r7, #28
 80054ea:	46bd      	mov	sp, r7
 80054ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f0:	4770      	bx	lr
	...

080054f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80054f4:	b480      	push	{r7}
 80054f6:	b085      	sub	sp, #20
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
 80054fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005504:	2b01      	cmp	r3, #1
 8005506:	d101      	bne.n	800550c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005508:	2302      	movs	r3, #2
 800550a:	e065      	b.n	80055d8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2201      	movs	r2, #1
 8005510:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2202      	movs	r2, #2
 8005518:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	685b      	ldr	r3, [r3, #4]
 8005522:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	689b      	ldr	r3, [r3, #8]
 800552a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	4a2c      	ldr	r2, [pc, #176]	; (80055e4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005532:	4293      	cmp	r3, r2
 8005534:	d004      	beq.n	8005540 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	4a2b      	ldr	r2, [pc, #172]	; (80055e8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800553c:	4293      	cmp	r3, r2
 800553e:	d108      	bne.n	8005552 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005546:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	685b      	ldr	r3, [r3, #4]
 800554c:	68fa      	ldr	r2, [r7, #12]
 800554e:	4313      	orrs	r3, r2
 8005550:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8005558:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800555c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	68fa      	ldr	r2, [r7, #12]
 8005564:	4313      	orrs	r3, r2
 8005566:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	68fa      	ldr	r2, [r7, #12]
 800556e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	4a1b      	ldr	r2, [pc, #108]	; (80055e4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005576:	4293      	cmp	r3, r2
 8005578:	d018      	beq.n	80055ac <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005582:	d013      	beq.n	80055ac <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	4a18      	ldr	r2, [pc, #96]	; (80055ec <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800558a:	4293      	cmp	r3, r2
 800558c:	d00e      	beq.n	80055ac <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	4a17      	ldr	r2, [pc, #92]	; (80055f0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005594:	4293      	cmp	r3, r2
 8005596:	d009      	beq.n	80055ac <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	4a12      	ldr	r2, [pc, #72]	; (80055e8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	d004      	beq.n	80055ac <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	4a13      	ldr	r2, [pc, #76]	; (80055f4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80055a8:	4293      	cmp	r3, r2
 80055aa:	d10c      	bne.n	80055c6 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80055ac:	68bb      	ldr	r3, [r7, #8]
 80055ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80055b2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	689b      	ldr	r3, [r3, #8]
 80055b8:	68ba      	ldr	r2, [r7, #8]
 80055ba:	4313      	orrs	r3, r2
 80055bc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	68ba      	ldr	r2, [r7, #8]
 80055c4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	2201      	movs	r2, #1
 80055ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2200      	movs	r2, #0
 80055d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80055d6:	2300      	movs	r3, #0
}
 80055d8:	4618      	mov	r0, r3
 80055da:	3714      	adds	r7, #20
 80055dc:	46bd      	mov	sp, r7
 80055de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e2:	4770      	bx	lr
 80055e4:	40012c00 	.word	0x40012c00
 80055e8:	40013400 	.word	0x40013400
 80055ec:	40000400 	.word	0x40000400
 80055f0:	40000800 	.word	0x40000800
 80055f4:	40014000 	.word	0x40014000

080055f8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80055f8:	b480      	push	{r7}
 80055fa:	b085      	sub	sp, #20
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
 8005600:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005602:	2300      	movs	r3, #0
 8005604:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800560c:	2b01      	cmp	r3, #1
 800560e:	d101      	bne.n	8005614 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005610:	2302      	movs	r3, #2
 8005612:	e087      	b.n	8005724 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2201      	movs	r2, #1
 8005618:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	68db      	ldr	r3, [r3, #12]
 8005626:	4313      	orrs	r3, r2
 8005628:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	689b      	ldr	r3, [r3, #8]
 8005634:	4313      	orrs	r3, r2
 8005636:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	685b      	ldr	r3, [r3, #4]
 8005642:	4313      	orrs	r3, r2
 8005644:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	4313      	orrs	r3, r2
 8005652:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	691b      	ldr	r3, [r3, #16]
 800565e:	4313      	orrs	r3, r2
 8005660:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	695b      	ldr	r3, [r3, #20]
 800566c:	4313      	orrs	r3, r2
 800566e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800567a:	4313      	orrs	r3, r2
 800567c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	699b      	ldr	r3, [r3, #24]
 8005688:	041b      	lsls	r3, r3, #16
 800568a:	4313      	orrs	r3, r2
 800568c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	4a27      	ldr	r2, [pc, #156]	; (8005730 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8005694:	4293      	cmp	r3, r2
 8005696:	d004      	beq.n	80056a2 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	4a25      	ldr	r2, [pc, #148]	; (8005734 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800569e:	4293      	cmp	r3, r2
 80056a0:	d106      	bne.n	80056b0 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	69db      	ldr	r3, [r3, #28]
 80056ac:	4313      	orrs	r3, r2
 80056ae:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	4a1e      	ldr	r2, [pc, #120]	; (8005730 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d004      	beq.n	80056c4 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	4a1d      	ldr	r2, [pc, #116]	; (8005734 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80056c0:	4293      	cmp	r3, r2
 80056c2:	d126      	bne.n	8005712 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056ce:	051b      	lsls	r3, r3, #20
 80056d0:	4313      	orrs	r3, r2
 80056d2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80056da:	683b      	ldr	r3, [r7, #0]
 80056dc:	6a1b      	ldr	r3, [r3, #32]
 80056de:	4313      	orrs	r3, r2
 80056e0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ec:	4313      	orrs	r3, r2
 80056ee:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	4a0e      	ldr	r2, [pc, #56]	; (8005730 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80056f6:	4293      	cmp	r3, r2
 80056f8:	d004      	beq.n	8005704 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	4a0d      	ldr	r2, [pc, #52]	; (8005734 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8005700:	4293      	cmp	r3, r2
 8005702:	d106      	bne.n	8005712 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800570a:	683b      	ldr	r3, [r7, #0]
 800570c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800570e:	4313      	orrs	r3, r2
 8005710:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	68fa      	ldr	r2, [r7, #12]
 8005718:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2200      	movs	r2, #0
 800571e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005722:	2300      	movs	r3, #0
}
 8005724:	4618      	mov	r0, r3
 8005726:	3714      	adds	r7, #20
 8005728:	46bd      	mov	sp, r7
 800572a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572e:	4770      	bx	lr
 8005730:	40012c00 	.word	0x40012c00
 8005734:	40013400 	.word	0x40013400

08005738 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005738:	b480      	push	{r7}
 800573a:	b083      	sub	sp, #12
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005740:	bf00      	nop
 8005742:	370c      	adds	r7, #12
 8005744:	46bd      	mov	sp, r7
 8005746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574a:	4770      	bx	lr

0800574c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800574c:	b480      	push	{r7}
 800574e:	b083      	sub	sp, #12
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005754:	bf00      	nop
 8005756:	370c      	adds	r7, #12
 8005758:	46bd      	mov	sp, r7
 800575a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575e:	4770      	bx	lr

08005760 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005760:	b480      	push	{r7}
 8005762:	b083      	sub	sp, #12
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005768:	bf00      	nop
 800576a:	370c      	adds	r7, #12
 800576c:	46bd      	mov	sp, r7
 800576e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005772:	4770      	bx	lr

08005774 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8005774:	b480      	push	{r7}
 8005776:	b083      	sub	sp, #12
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800577c:	bf00      	nop
 800577e:	370c      	adds	r7, #12
 8005780:	46bd      	mov	sp, r7
 8005782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005786:	4770      	bx	lr

08005788 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8005788:	b480      	push	{r7}
 800578a:	b083      	sub	sp, #12
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8005790:	bf00      	nop
 8005792:	370c      	adds	r7, #12
 8005794:	46bd      	mov	sp, r7
 8005796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579a:	4770      	bx	lr

0800579c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800579c:	b480      	push	{r7}
 800579e:	b083      	sub	sp, #12
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80057a4:	bf00      	nop
 80057a6:	370c      	adds	r7, #12
 80057a8:	46bd      	mov	sp, r7
 80057aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ae:	4770      	bx	lr

080057b0 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80057b0:	b480      	push	{r7}
 80057b2:	b083      	sub	sp, #12
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80057b8:	bf00      	nop
 80057ba:	370c      	adds	r7, #12
 80057bc:	46bd      	mov	sp, r7
 80057be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c2:	4770      	bx	lr

080057c4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80057c4:	b480      	push	{r7}
 80057c6:	b085      	sub	sp, #20
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2200      	movs	r2, #0
 80057d0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80057d4:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80057d8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	b29a      	uxth	r2, r3
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80057e4:	2300      	movs	r3, #0
}
 80057e6:	4618      	mov	r0, r3
 80057e8:	3714      	adds	r7, #20
 80057ea:	46bd      	mov	sp, r7
 80057ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f0:	4770      	bx	lr

080057f2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80057f2:	b480      	push	{r7}
 80057f4:	b085      	sub	sp, #20
 80057f6:	af00      	add	r7, sp, #0
 80057f8:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80057fa:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80057fe:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005806:	b29a      	uxth	r2, r3
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	b29b      	uxth	r3, r3
 800580c:	43db      	mvns	r3, r3
 800580e:	b29b      	uxth	r3, r3
 8005810:	4013      	ands	r3, r2
 8005812:	b29a      	uxth	r2, r3
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800581a:	2300      	movs	r3, #0
}
 800581c:	4618      	mov	r0, r3
 800581e:	3714      	adds	r7, #20
 8005820:	46bd      	mov	sp, r7
 8005822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005826:	4770      	bx	lr

08005828 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005828:	b084      	sub	sp, #16
 800582a:	b480      	push	{r7}
 800582c:	b083      	sub	sp, #12
 800582e:	af00      	add	r7, sp, #0
 8005830:	6078      	str	r0, [r7, #4]
 8005832:	f107 0014 	add.w	r0, r7, #20
 8005836:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2201      	movs	r2, #1
 800583e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0U;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	2200      	movs	r2, #0
 8005846:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0U;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	2200      	movs	r2, #0
 800584e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	2200      	movs	r2, #0
 8005856:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800585a:	2300      	movs	r3, #0
}
 800585c:	4618      	mov	r0, r3
 800585e:	370c      	adds	r7, #12
 8005860:	46bd      	mov	sp, r7
 8005862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005866:	b004      	add	sp, #16
 8005868:	4770      	bx	lr
	...

0800586c <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800586c:	b480      	push	{r7}
 800586e:	b09b      	sub	sp, #108	; 0x6c
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
 8005874:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8005876:	2300      	movs	r3, #0
 8005878:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800587c:	687a      	ldr	r2, [r7, #4]
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	781b      	ldrb	r3, [r3, #0]
 8005882:	009b      	lsls	r3, r3, #2
 8005884:	4413      	add	r3, r2
 8005886:	881b      	ldrh	r3, [r3, #0]
 8005888:	b29b      	uxth	r3, r3
 800588a:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800588e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005892:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	78db      	ldrb	r3, [r3, #3]
 800589a:	2b03      	cmp	r3, #3
 800589c:	d81f      	bhi.n	80058de <USB_ActivateEndpoint+0x72>
 800589e:	a201      	add	r2, pc, #4	; (adr r2, 80058a4 <USB_ActivateEndpoint+0x38>)
 80058a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058a4:	080058b5 	.word	0x080058b5
 80058a8:	080058d1 	.word	0x080058d1
 80058ac:	080058e7 	.word	0x080058e7
 80058b0:	080058c3 	.word	0x080058c3
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80058b4:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80058b8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80058bc:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80058c0:	e012      	b.n	80058e8 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80058c2:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80058c6:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80058ca:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80058ce:	e00b      	b.n	80058e8 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80058d0:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80058d4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80058d8:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80058dc:	e004      	b.n	80058e8 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80058de:	2301      	movs	r3, #1
 80058e0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 80058e4:	e000      	b.n	80058e8 <USB_ActivateEndpoint+0x7c>
      break;
 80058e6:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80058e8:	687a      	ldr	r2, [r7, #4]
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	781b      	ldrb	r3, [r3, #0]
 80058ee:	009b      	lsls	r3, r3, #2
 80058f0:	441a      	add	r2, r3
 80058f2:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80058f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80058fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80058fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005902:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005906:	b29b      	uxth	r3, r3
 8005908:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800590a:	687a      	ldr	r2, [r7, #4]
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	781b      	ldrb	r3, [r3, #0]
 8005910:	009b      	lsls	r3, r3, #2
 8005912:	4413      	add	r3, r2
 8005914:	881b      	ldrh	r3, [r3, #0]
 8005916:	b29b      	uxth	r3, r3
 8005918:	b21b      	sxth	r3, r3
 800591a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800591e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005922:	b21a      	sxth	r2, r3
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	781b      	ldrb	r3, [r3, #0]
 8005928:	b21b      	sxth	r3, r3
 800592a:	4313      	orrs	r3, r2
 800592c:	b21b      	sxth	r3, r3
 800592e:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8005932:	687a      	ldr	r2, [r7, #4]
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	781b      	ldrb	r3, [r3, #0]
 8005938:	009b      	lsls	r3, r3, #2
 800593a:	441a      	add	r2, r3
 800593c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8005940:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005944:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005948:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800594c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005950:	b29b      	uxth	r3, r3
 8005952:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	7b1b      	ldrb	r3, [r3, #12]
 8005958:	2b00      	cmp	r3, #0
 800595a:	f040 8149 	bne.w	8005bf0 <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 800595e:	683b      	ldr	r3, [r7, #0]
 8005960:	785b      	ldrb	r3, [r3, #1]
 8005962:	2b00      	cmp	r3, #0
 8005964:	f000 8084 	beq.w	8005a70 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	617b      	str	r3, [r7, #20]
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005972:	b29b      	uxth	r3, r3
 8005974:	461a      	mov	r2, r3
 8005976:	697b      	ldr	r3, [r7, #20]
 8005978:	4413      	add	r3, r2
 800597a:	617b      	str	r3, [r7, #20]
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	781b      	ldrb	r3, [r3, #0]
 8005980:	00da      	lsls	r2, r3, #3
 8005982:	697b      	ldr	r3, [r7, #20]
 8005984:	4413      	add	r3, r2
 8005986:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800598a:	613b      	str	r3, [r7, #16]
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	88db      	ldrh	r3, [r3, #6]
 8005990:	085b      	lsrs	r3, r3, #1
 8005992:	b29b      	uxth	r3, r3
 8005994:	005b      	lsls	r3, r3, #1
 8005996:	b29a      	uxth	r2, r3
 8005998:	693b      	ldr	r3, [r7, #16]
 800599a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800599c:	687a      	ldr	r2, [r7, #4]
 800599e:	683b      	ldr	r3, [r7, #0]
 80059a0:	781b      	ldrb	r3, [r3, #0]
 80059a2:	009b      	lsls	r3, r3, #2
 80059a4:	4413      	add	r3, r2
 80059a6:	881b      	ldrh	r3, [r3, #0]
 80059a8:	81fb      	strh	r3, [r7, #14]
 80059aa:	89fb      	ldrh	r3, [r7, #14]
 80059ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d01b      	beq.n	80059ec <USB_ActivateEndpoint+0x180>
 80059b4:	687a      	ldr	r2, [r7, #4]
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	781b      	ldrb	r3, [r3, #0]
 80059ba:	009b      	lsls	r3, r3, #2
 80059bc:	4413      	add	r3, r2
 80059be:	881b      	ldrh	r3, [r3, #0]
 80059c0:	b29b      	uxth	r3, r3
 80059c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059ca:	81bb      	strh	r3, [r7, #12]
 80059cc:	687a      	ldr	r2, [r7, #4]
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	781b      	ldrb	r3, [r3, #0]
 80059d2:	009b      	lsls	r3, r3, #2
 80059d4:	441a      	add	r2, r3
 80059d6:	89bb      	ldrh	r3, [r7, #12]
 80059d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80059dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80059e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80059e4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80059e8:	b29b      	uxth	r3, r3
 80059ea:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80059ec:	683b      	ldr	r3, [r7, #0]
 80059ee:	78db      	ldrb	r3, [r3, #3]
 80059f0:	2b01      	cmp	r3, #1
 80059f2:	d020      	beq.n	8005a36 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80059f4:	687a      	ldr	r2, [r7, #4]
 80059f6:	683b      	ldr	r3, [r7, #0]
 80059f8:	781b      	ldrb	r3, [r3, #0]
 80059fa:	009b      	lsls	r3, r3, #2
 80059fc:	4413      	add	r3, r2
 80059fe:	881b      	ldrh	r3, [r3, #0]
 8005a00:	b29b      	uxth	r3, r3
 8005a02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a06:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a0a:	813b      	strh	r3, [r7, #8]
 8005a0c:	893b      	ldrh	r3, [r7, #8]
 8005a0e:	f083 0320 	eor.w	r3, r3, #32
 8005a12:	813b      	strh	r3, [r7, #8]
 8005a14:	687a      	ldr	r2, [r7, #4]
 8005a16:	683b      	ldr	r3, [r7, #0]
 8005a18:	781b      	ldrb	r3, [r3, #0]
 8005a1a:	009b      	lsls	r3, r3, #2
 8005a1c:	441a      	add	r2, r3
 8005a1e:	893b      	ldrh	r3, [r7, #8]
 8005a20:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a24:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a28:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a30:	b29b      	uxth	r3, r3
 8005a32:	8013      	strh	r3, [r2, #0]
 8005a34:	e27f      	b.n	8005f36 <USB_ActivateEndpoint+0x6ca>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005a36:	687a      	ldr	r2, [r7, #4]
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	781b      	ldrb	r3, [r3, #0]
 8005a3c:	009b      	lsls	r3, r3, #2
 8005a3e:	4413      	add	r3, r2
 8005a40:	881b      	ldrh	r3, [r3, #0]
 8005a42:	b29b      	uxth	r3, r3
 8005a44:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a48:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a4c:	817b      	strh	r3, [r7, #10]
 8005a4e:	687a      	ldr	r2, [r7, #4]
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	781b      	ldrb	r3, [r3, #0]
 8005a54:	009b      	lsls	r3, r3, #2
 8005a56:	441a      	add	r2, r3
 8005a58:	897b      	ldrh	r3, [r7, #10]
 8005a5a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a5e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a6a:	b29b      	uxth	r3, r3
 8005a6c:	8013      	strh	r3, [r2, #0]
 8005a6e:	e262      	b.n	8005f36 <USB_ActivateEndpoint+0x6ca>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a7a:	b29b      	uxth	r3, r3
 8005a7c:	461a      	mov	r2, r3
 8005a7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a80:	4413      	add	r3, r2
 8005a82:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	781b      	ldrb	r3, [r3, #0]
 8005a88:	00da      	lsls	r2, r3, #3
 8005a8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a8c:	4413      	add	r3, r2
 8005a8e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005a92:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	88db      	ldrh	r3, [r3, #6]
 8005a98:	085b      	lsrs	r3, r3, #1
 8005a9a:	b29b      	uxth	r3, r3
 8005a9c:	005b      	lsls	r3, r3, #1
 8005a9e:	b29a      	uxth	r2, r3
 8005aa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005aa2:	801a      	strh	r2, [r3, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	627b      	str	r3, [r7, #36]	; 0x24
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005aae:	b29b      	uxth	r3, r3
 8005ab0:	461a      	mov	r2, r3
 8005ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ab4:	4413      	add	r3, r2
 8005ab6:	627b      	str	r3, [r7, #36]	; 0x24
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	781b      	ldrb	r3, [r3, #0]
 8005abc:	00da      	lsls	r2, r3, #3
 8005abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ac0:	4413      	add	r3, r2
 8005ac2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005ac6:	623b      	str	r3, [r7, #32]
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	691b      	ldr	r3, [r3, #16]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d112      	bne.n	8005af6 <USB_ActivateEndpoint+0x28a>
 8005ad0:	6a3b      	ldr	r3, [r7, #32]
 8005ad2:	881b      	ldrh	r3, [r3, #0]
 8005ad4:	b29b      	uxth	r3, r3
 8005ad6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005ada:	b29a      	uxth	r2, r3
 8005adc:	6a3b      	ldr	r3, [r7, #32]
 8005ade:	801a      	strh	r2, [r3, #0]
 8005ae0:	6a3b      	ldr	r3, [r7, #32]
 8005ae2:	881b      	ldrh	r3, [r3, #0]
 8005ae4:	b29b      	uxth	r3, r3
 8005ae6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005aea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005aee:	b29a      	uxth	r2, r3
 8005af0:	6a3b      	ldr	r3, [r7, #32]
 8005af2:	801a      	strh	r2, [r3, #0]
 8005af4:	e02f      	b.n	8005b56 <USB_ActivateEndpoint+0x2ea>
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	691b      	ldr	r3, [r3, #16]
 8005afa:	2b3e      	cmp	r3, #62	; 0x3e
 8005afc:	d813      	bhi.n	8005b26 <USB_ActivateEndpoint+0x2ba>
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	691b      	ldr	r3, [r3, #16]
 8005b02:	085b      	lsrs	r3, r3, #1
 8005b04:	663b      	str	r3, [r7, #96]	; 0x60
 8005b06:	683b      	ldr	r3, [r7, #0]
 8005b08:	691b      	ldr	r3, [r3, #16]
 8005b0a:	f003 0301 	and.w	r3, r3, #1
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d002      	beq.n	8005b18 <USB_ActivateEndpoint+0x2ac>
 8005b12:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005b14:	3301      	adds	r3, #1
 8005b16:	663b      	str	r3, [r7, #96]	; 0x60
 8005b18:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005b1a:	b29b      	uxth	r3, r3
 8005b1c:	029b      	lsls	r3, r3, #10
 8005b1e:	b29a      	uxth	r2, r3
 8005b20:	6a3b      	ldr	r3, [r7, #32]
 8005b22:	801a      	strh	r2, [r3, #0]
 8005b24:	e017      	b.n	8005b56 <USB_ActivateEndpoint+0x2ea>
 8005b26:	683b      	ldr	r3, [r7, #0]
 8005b28:	691b      	ldr	r3, [r3, #16]
 8005b2a:	095b      	lsrs	r3, r3, #5
 8005b2c:	663b      	str	r3, [r7, #96]	; 0x60
 8005b2e:	683b      	ldr	r3, [r7, #0]
 8005b30:	691b      	ldr	r3, [r3, #16]
 8005b32:	f003 031f 	and.w	r3, r3, #31
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d102      	bne.n	8005b40 <USB_ActivateEndpoint+0x2d4>
 8005b3a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005b3c:	3b01      	subs	r3, #1
 8005b3e:	663b      	str	r3, [r7, #96]	; 0x60
 8005b40:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005b42:	b29b      	uxth	r3, r3
 8005b44:	029b      	lsls	r3, r3, #10
 8005b46:	b29b      	uxth	r3, r3
 8005b48:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b4c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b50:	b29a      	uxth	r2, r3
 8005b52:	6a3b      	ldr	r3, [r7, #32]
 8005b54:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005b56:	687a      	ldr	r2, [r7, #4]
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	781b      	ldrb	r3, [r3, #0]
 8005b5c:	009b      	lsls	r3, r3, #2
 8005b5e:	4413      	add	r3, r2
 8005b60:	881b      	ldrh	r3, [r3, #0]
 8005b62:	83fb      	strh	r3, [r7, #30]
 8005b64:	8bfb      	ldrh	r3, [r7, #30]
 8005b66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d01b      	beq.n	8005ba6 <USB_ActivateEndpoint+0x33a>
 8005b6e:	687a      	ldr	r2, [r7, #4]
 8005b70:	683b      	ldr	r3, [r7, #0]
 8005b72:	781b      	ldrb	r3, [r3, #0]
 8005b74:	009b      	lsls	r3, r3, #2
 8005b76:	4413      	add	r3, r2
 8005b78:	881b      	ldrh	r3, [r3, #0]
 8005b7a:	b29b      	uxth	r3, r3
 8005b7c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b84:	83bb      	strh	r3, [r7, #28]
 8005b86:	687a      	ldr	r2, [r7, #4]
 8005b88:	683b      	ldr	r3, [r7, #0]
 8005b8a:	781b      	ldrb	r3, [r3, #0]
 8005b8c:	009b      	lsls	r3, r3, #2
 8005b8e:	441a      	add	r2, r3
 8005b90:	8bbb      	ldrh	r3, [r7, #28]
 8005b92:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b96:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b9a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005b9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ba2:	b29b      	uxth	r3, r3
 8005ba4:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005ba6:	687a      	ldr	r2, [r7, #4]
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	781b      	ldrb	r3, [r3, #0]
 8005bac:	009b      	lsls	r3, r3, #2
 8005bae:	4413      	add	r3, r2
 8005bb0:	881b      	ldrh	r3, [r3, #0]
 8005bb2:	b29b      	uxth	r3, r3
 8005bb4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005bb8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bbc:	837b      	strh	r3, [r7, #26]
 8005bbe:	8b7b      	ldrh	r3, [r7, #26]
 8005bc0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005bc4:	837b      	strh	r3, [r7, #26]
 8005bc6:	8b7b      	ldrh	r3, [r7, #26]
 8005bc8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005bcc:	837b      	strh	r3, [r7, #26]
 8005bce:	687a      	ldr	r2, [r7, #4]
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	781b      	ldrb	r3, [r3, #0]
 8005bd4:	009b      	lsls	r3, r3, #2
 8005bd6:	441a      	add	r2, r3
 8005bd8:	8b7b      	ldrh	r3, [r7, #26]
 8005bda:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005bde:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005be2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005be6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005bea:	b29b      	uxth	r3, r3
 8005bec:	8013      	strh	r3, [r2, #0]
 8005bee:	e1a2      	b.n	8005f36 <USB_ActivateEndpoint+0x6ca>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8005bf0:	687a      	ldr	r2, [r7, #4]
 8005bf2:	683b      	ldr	r3, [r7, #0]
 8005bf4:	781b      	ldrb	r3, [r3, #0]
 8005bf6:	009b      	lsls	r3, r3, #2
 8005bf8:	4413      	add	r3, r2
 8005bfa:	881b      	ldrh	r3, [r3, #0]
 8005bfc:	b29b      	uxth	r3, r3
 8005bfe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c06:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8005c0a:	687a      	ldr	r2, [r7, #4]
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	781b      	ldrb	r3, [r3, #0]
 8005c10:	009b      	lsls	r3, r3, #2
 8005c12:	441a      	add	r2, r3
 8005c14:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8005c18:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c1c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c20:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005c24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c28:	b29b      	uxth	r3, r3
 8005c2a:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	65bb      	str	r3, [r7, #88]	; 0x58
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c36:	b29b      	uxth	r3, r3
 8005c38:	461a      	mov	r2, r3
 8005c3a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005c3c:	4413      	add	r3, r2
 8005c3e:	65bb      	str	r3, [r7, #88]	; 0x58
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	781b      	ldrb	r3, [r3, #0]
 8005c44:	00da      	lsls	r2, r3, #3
 8005c46:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005c48:	4413      	add	r3, r2
 8005c4a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005c4e:	657b      	str	r3, [r7, #84]	; 0x54
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	891b      	ldrh	r3, [r3, #8]
 8005c54:	085b      	lsrs	r3, r3, #1
 8005c56:	b29b      	uxth	r3, r3
 8005c58:	005b      	lsls	r3, r3, #1
 8005c5a:	b29a      	uxth	r2, r3
 8005c5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c5e:	801a      	strh	r2, [r3, #0]
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	653b      	str	r3, [r7, #80]	; 0x50
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c6a:	b29b      	uxth	r3, r3
 8005c6c:	461a      	mov	r2, r3
 8005c6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c70:	4413      	add	r3, r2
 8005c72:	653b      	str	r3, [r7, #80]	; 0x50
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	781b      	ldrb	r3, [r3, #0]
 8005c78:	00da      	lsls	r2, r3, #3
 8005c7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c7c:	4413      	add	r3, r2
 8005c7e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005c82:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	895b      	ldrh	r3, [r3, #10]
 8005c88:	085b      	lsrs	r3, r3, #1
 8005c8a:	b29b      	uxth	r3, r3
 8005c8c:	005b      	lsls	r3, r3, #1
 8005c8e:	b29a      	uxth	r2, r3
 8005c90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c92:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	785b      	ldrb	r3, [r3, #1]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	f040 8091 	bne.w	8005dc0 <USB_ActivateEndpoint+0x554>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005c9e:	687a      	ldr	r2, [r7, #4]
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	781b      	ldrb	r3, [r3, #0]
 8005ca4:	009b      	lsls	r3, r3, #2
 8005ca6:	4413      	add	r3, r2
 8005ca8:	881b      	ldrh	r3, [r3, #0]
 8005caa:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8005cac:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005cae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d01b      	beq.n	8005cee <USB_ActivateEndpoint+0x482>
 8005cb6:	687a      	ldr	r2, [r7, #4]
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	781b      	ldrb	r3, [r3, #0]
 8005cbc:	009b      	lsls	r3, r3, #2
 8005cbe:	4413      	add	r3, r2
 8005cc0:	881b      	ldrh	r3, [r3, #0]
 8005cc2:	b29b      	uxth	r3, r3
 8005cc4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005cc8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ccc:	877b      	strh	r3, [r7, #58]	; 0x3a
 8005cce:	687a      	ldr	r2, [r7, #4]
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	781b      	ldrb	r3, [r3, #0]
 8005cd4:	009b      	lsls	r3, r3, #2
 8005cd6:	441a      	add	r2, r3
 8005cd8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8005cda:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005cde:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ce2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005ce6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005cea:	b29b      	uxth	r3, r3
 8005cec:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005cee:	687a      	ldr	r2, [r7, #4]
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	781b      	ldrb	r3, [r3, #0]
 8005cf4:	009b      	lsls	r3, r3, #2
 8005cf6:	4413      	add	r3, r2
 8005cf8:	881b      	ldrh	r3, [r3, #0]
 8005cfa:	873b      	strh	r3, [r7, #56]	; 0x38
 8005cfc:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005cfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d01b      	beq.n	8005d3e <USB_ActivateEndpoint+0x4d2>
 8005d06:	687a      	ldr	r2, [r7, #4]
 8005d08:	683b      	ldr	r3, [r7, #0]
 8005d0a:	781b      	ldrb	r3, [r3, #0]
 8005d0c:	009b      	lsls	r3, r3, #2
 8005d0e:	4413      	add	r3, r2
 8005d10:	881b      	ldrh	r3, [r3, #0]
 8005d12:	b29b      	uxth	r3, r3
 8005d14:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d1c:	86fb      	strh	r3, [r7, #54]	; 0x36
 8005d1e:	687a      	ldr	r2, [r7, #4]
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	781b      	ldrb	r3, [r3, #0]
 8005d24:	009b      	lsls	r3, r3, #2
 8005d26:	441a      	add	r2, r3
 8005d28:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005d2a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d2e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d36:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005d3a:	b29b      	uxth	r3, r3
 8005d3c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005d3e:	687a      	ldr	r2, [r7, #4]
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	781b      	ldrb	r3, [r3, #0]
 8005d44:	009b      	lsls	r3, r3, #2
 8005d46:	4413      	add	r3, r2
 8005d48:	881b      	ldrh	r3, [r3, #0]
 8005d4a:	b29b      	uxth	r3, r3
 8005d4c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005d50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d54:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005d56:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005d58:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005d5c:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005d5e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005d60:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005d64:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005d66:	687a      	ldr	r2, [r7, #4]
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	781b      	ldrb	r3, [r3, #0]
 8005d6c:	009b      	lsls	r3, r3, #2
 8005d6e:	441a      	add	r2, r3
 8005d70:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005d72:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d76:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d82:	b29b      	uxth	r3, r3
 8005d84:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005d86:	687a      	ldr	r2, [r7, #4]
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	781b      	ldrb	r3, [r3, #0]
 8005d8c:	009b      	lsls	r3, r3, #2
 8005d8e:	4413      	add	r3, r2
 8005d90:	881b      	ldrh	r3, [r3, #0]
 8005d92:	b29b      	uxth	r3, r3
 8005d94:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d98:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d9c:	867b      	strh	r3, [r7, #50]	; 0x32
 8005d9e:	687a      	ldr	r2, [r7, #4]
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	781b      	ldrb	r3, [r3, #0]
 8005da4:	009b      	lsls	r3, r3, #2
 8005da6:	441a      	add	r2, r3
 8005da8:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8005daa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005dae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005db2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005db6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005dba:	b29b      	uxth	r3, r3
 8005dbc:	8013      	strh	r3, [r2, #0]
 8005dbe:	e0ba      	b.n	8005f36 <USB_ActivateEndpoint+0x6ca>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005dc0:	687a      	ldr	r2, [r7, #4]
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	781b      	ldrb	r3, [r3, #0]
 8005dc6:	009b      	lsls	r3, r3, #2
 8005dc8:	4413      	add	r3, r2
 8005dca:	881b      	ldrh	r3, [r3, #0]
 8005dcc:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8005dd0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005dd4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d01d      	beq.n	8005e18 <USB_ActivateEndpoint+0x5ac>
 8005ddc:	687a      	ldr	r2, [r7, #4]
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	781b      	ldrb	r3, [r3, #0]
 8005de2:	009b      	lsls	r3, r3, #2
 8005de4:	4413      	add	r3, r2
 8005de6:	881b      	ldrh	r3, [r3, #0]
 8005de8:	b29b      	uxth	r3, r3
 8005dea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005dee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005df2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8005df6:	687a      	ldr	r2, [r7, #4]
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	781b      	ldrb	r3, [r3, #0]
 8005dfc:	009b      	lsls	r3, r3, #2
 8005dfe:	441a      	add	r2, r3
 8005e00:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005e04:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e08:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e0c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005e10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e14:	b29b      	uxth	r3, r3
 8005e16:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005e18:	687a      	ldr	r2, [r7, #4]
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	781b      	ldrb	r3, [r3, #0]
 8005e1e:	009b      	lsls	r3, r3, #2
 8005e20:	4413      	add	r3, r2
 8005e22:	881b      	ldrh	r3, [r3, #0]
 8005e24:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8005e28:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8005e2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d01d      	beq.n	8005e70 <USB_ActivateEndpoint+0x604>
 8005e34:	687a      	ldr	r2, [r7, #4]
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	781b      	ldrb	r3, [r3, #0]
 8005e3a:	009b      	lsls	r3, r3, #2
 8005e3c:	4413      	add	r3, r2
 8005e3e:	881b      	ldrh	r3, [r3, #0]
 8005e40:	b29b      	uxth	r3, r3
 8005e42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e4a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005e4e:	687a      	ldr	r2, [r7, #4]
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	781b      	ldrb	r3, [r3, #0]
 8005e54:	009b      	lsls	r3, r3, #2
 8005e56:	441a      	add	r2, r3
 8005e58:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005e5c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e60:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e64:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e68:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005e6c:	b29b      	uxth	r3, r3
 8005e6e:	8013      	strh	r3, [r2, #0]


      if (ep->type != EP_TYPE_ISOC)
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	78db      	ldrb	r3, [r3, #3]
 8005e74:	2b01      	cmp	r3, #1
 8005e76:	d024      	beq.n	8005ec2 <USB_ActivateEndpoint+0x656>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005e78:	687a      	ldr	r2, [r7, #4]
 8005e7a:	683b      	ldr	r3, [r7, #0]
 8005e7c:	781b      	ldrb	r3, [r3, #0]
 8005e7e:	009b      	lsls	r3, r3, #2
 8005e80:	4413      	add	r3, r2
 8005e82:	881b      	ldrh	r3, [r3, #0]
 8005e84:	b29b      	uxth	r3, r3
 8005e86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e8a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e8e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8005e92:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005e96:	f083 0320 	eor.w	r3, r3, #32
 8005e9a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8005e9e:	687a      	ldr	r2, [r7, #4]
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	781b      	ldrb	r3, [r3, #0]
 8005ea4:	009b      	lsls	r3, r3, #2
 8005ea6:	441a      	add	r2, r3
 8005ea8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005eac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005eb0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005eb4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005eb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ebc:	b29b      	uxth	r3, r3
 8005ebe:	8013      	strh	r3, [r2, #0]
 8005ec0:	e01d      	b.n	8005efe <USB_ActivateEndpoint+0x692>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005ec2:	687a      	ldr	r2, [r7, #4]
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	781b      	ldrb	r3, [r3, #0]
 8005ec8:	009b      	lsls	r3, r3, #2
 8005eca:	4413      	add	r3, r2
 8005ecc:	881b      	ldrh	r3, [r3, #0]
 8005ece:	b29b      	uxth	r3, r3
 8005ed0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ed4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ed8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8005edc:	687a      	ldr	r2, [r7, #4]
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	781b      	ldrb	r3, [r3, #0]
 8005ee2:	009b      	lsls	r3, r3, #2
 8005ee4:	441a      	add	r2, r3
 8005ee6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8005eea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005eee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ef2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ef6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005efa:	b29b      	uxth	r3, r3
 8005efc:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005efe:	687a      	ldr	r2, [r7, #4]
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	781b      	ldrb	r3, [r3, #0]
 8005f04:	009b      	lsls	r3, r3, #2
 8005f06:	4413      	add	r3, r2
 8005f08:	881b      	ldrh	r3, [r3, #0]
 8005f0a:	b29b      	uxth	r3, r3
 8005f0c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005f10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f14:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8005f16:	687a      	ldr	r2, [r7, #4]
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	781b      	ldrb	r3, [r3, #0]
 8005f1c:	009b      	lsls	r3, r3, #2
 8005f1e:	441a      	add	r2, r3
 8005f20:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005f22:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f26:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f32:	b29b      	uxth	r3, r3
 8005f34:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8005f36:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	376c      	adds	r7, #108	; 0x6c
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f44:	4770      	bx	lr
 8005f46:	bf00      	nop

08005f48 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005f48:	b480      	push	{r7}
 8005f4a:	b08d      	sub	sp, #52	; 0x34
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
 8005f50:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005f52:	683b      	ldr	r3, [r7, #0]
 8005f54:	7b1b      	ldrb	r3, [r3, #12]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	f040 808e 	bne.w	8006078 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8005f5c:	683b      	ldr	r3, [r7, #0]
 8005f5e:	785b      	ldrb	r3, [r3, #1]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d044      	beq.n	8005fee <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005f64:	687a      	ldr	r2, [r7, #4]
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	781b      	ldrb	r3, [r3, #0]
 8005f6a:	009b      	lsls	r3, r3, #2
 8005f6c:	4413      	add	r3, r2
 8005f6e:	881b      	ldrh	r3, [r3, #0]
 8005f70:	81bb      	strh	r3, [r7, #12]
 8005f72:	89bb      	ldrh	r3, [r7, #12]
 8005f74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d01b      	beq.n	8005fb4 <USB_DeactivateEndpoint+0x6c>
 8005f7c:	687a      	ldr	r2, [r7, #4]
 8005f7e:	683b      	ldr	r3, [r7, #0]
 8005f80:	781b      	ldrb	r3, [r3, #0]
 8005f82:	009b      	lsls	r3, r3, #2
 8005f84:	4413      	add	r3, r2
 8005f86:	881b      	ldrh	r3, [r3, #0]
 8005f88:	b29b      	uxth	r3, r3
 8005f8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f92:	817b      	strh	r3, [r7, #10]
 8005f94:	687a      	ldr	r2, [r7, #4]
 8005f96:	683b      	ldr	r3, [r7, #0]
 8005f98:	781b      	ldrb	r3, [r3, #0]
 8005f9a:	009b      	lsls	r3, r3, #2
 8005f9c:	441a      	add	r2, r3
 8005f9e:	897b      	ldrh	r3, [r7, #10]
 8005fa0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005fa4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005fa8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005fac:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005fb0:	b29b      	uxth	r3, r3
 8005fb2:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005fb4:	687a      	ldr	r2, [r7, #4]
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	781b      	ldrb	r3, [r3, #0]
 8005fba:	009b      	lsls	r3, r3, #2
 8005fbc:	4413      	add	r3, r2
 8005fbe:	881b      	ldrh	r3, [r3, #0]
 8005fc0:	b29b      	uxth	r3, r3
 8005fc2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005fc6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005fca:	813b      	strh	r3, [r7, #8]
 8005fcc:	687a      	ldr	r2, [r7, #4]
 8005fce:	683b      	ldr	r3, [r7, #0]
 8005fd0:	781b      	ldrb	r3, [r3, #0]
 8005fd2:	009b      	lsls	r3, r3, #2
 8005fd4:	441a      	add	r2, r3
 8005fd6:	893b      	ldrh	r3, [r7, #8]
 8005fd8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005fdc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005fe0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005fe4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005fe8:	b29b      	uxth	r3, r3
 8005fea:	8013      	strh	r3, [r2, #0]
 8005fec:	e192      	b.n	8006314 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005fee:	687a      	ldr	r2, [r7, #4]
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	781b      	ldrb	r3, [r3, #0]
 8005ff4:	009b      	lsls	r3, r3, #2
 8005ff6:	4413      	add	r3, r2
 8005ff8:	881b      	ldrh	r3, [r3, #0]
 8005ffa:	827b      	strh	r3, [r7, #18]
 8005ffc:	8a7b      	ldrh	r3, [r7, #18]
 8005ffe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006002:	2b00      	cmp	r3, #0
 8006004:	d01b      	beq.n	800603e <USB_DeactivateEndpoint+0xf6>
 8006006:	687a      	ldr	r2, [r7, #4]
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	781b      	ldrb	r3, [r3, #0]
 800600c:	009b      	lsls	r3, r3, #2
 800600e:	4413      	add	r3, r2
 8006010:	881b      	ldrh	r3, [r3, #0]
 8006012:	b29b      	uxth	r3, r3
 8006014:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006018:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800601c:	823b      	strh	r3, [r7, #16]
 800601e:	687a      	ldr	r2, [r7, #4]
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	781b      	ldrb	r3, [r3, #0]
 8006024:	009b      	lsls	r3, r3, #2
 8006026:	441a      	add	r2, r3
 8006028:	8a3b      	ldrh	r3, [r7, #16]
 800602a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800602e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006032:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006036:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800603a:	b29b      	uxth	r3, r3
 800603c:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800603e:	687a      	ldr	r2, [r7, #4]
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	781b      	ldrb	r3, [r3, #0]
 8006044:	009b      	lsls	r3, r3, #2
 8006046:	4413      	add	r3, r2
 8006048:	881b      	ldrh	r3, [r3, #0]
 800604a:	b29b      	uxth	r3, r3
 800604c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006050:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006054:	81fb      	strh	r3, [r7, #14]
 8006056:	687a      	ldr	r2, [r7, #4]
 8006058:	683b      	ldr	r3, [r7, #0]
 800605a:	781b      	ldrb	r3, [r3, #0]
 800605c:	009b      	lsls	r3, r3, #2
 800605e:	441a      	add	r2, r3
 8006060:	89fb      	ldrh	r3, [r7, #14]
 8006062:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006066:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800606a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800606e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006072:	b29b      	uxth	r3, r3
 8006074:	8013      	strh	r3, [r2, #0]
 8006076:	e14d      	b.n	8006314 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	785b      	ldrb	r3, [r3, #1]
 800607c:	2b00      	cmp	r3, #0
 800607e:	f040 80a5 	bne.w	80061cc <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006082:	687a      	ldr	r2, [r7, #4]
 8006084:	683b      	ldr	r3, [r7, #0]
 8006086:	781b      	ldrb	r3, [r3, #0]
 8006088:	009b      	lsls	r3, r3, #2
 800608a:	4413      	add	r3, r2
 800608c:	881b      	ldrh	r3, [r3, #0]
 800608e:	843b      	strh	r3, [r7, #32]
 8006090:	8c3b      	ldrh	r3, [r7, #32]
 8006092:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006096:	2b00      	cmp	r3, #0
 8006098:	d01b      	beq.n	80060d2 <USB_DeactivateEndpoint+0x18a>
 800609a:	687a      	ldr	r2, [r7, #4]
 800609c:	683b      	ldr	r3, [r7, #0]
 800609e:	781b      	ldrb	r3, [r3, #0]
 80060a0:	009b      	lsls	r3, r3, #2
 80060a2:	4413      	add	r3, r2
 80060a4:	881b      	ldrh	r3, [r3, #0]
 80060a6:	b29b      	uxth	r3, r3
 80060a8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060b0:	83fb      	strh	r3, [r7, #30]
 80060b2:	687a      	ldr	r2, [r7, #4]
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	781b      	ldrb	r3, [r3, #0]
 80060b8:	009b      	lsls	r3, r3, #2
 80060ba:	441a      	add	r2, r3
 80060bc:	8bfb      	ldrh	r3, [r7, #30]
 80060be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060c6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80060ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060ce:	b29b      	uxth	r3, r3
 80060d0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80060d2:	687a      	ldr	r2, [r7, #4]
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	781b      	ldrb	r3, [r3, #0]
 80060d8:	009b      	lsls	r3, r3, #2
 80060da:	4413      	add	r3, r2
 80060dc:	881b      	ldrh	r3, [r3, #0]
 80060de:	83bb      	strh	r3, [r7, #28]
 80060e0:	8bbb      	ldrh	r3, [r7, #28]
 80060e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d01b      	beq.n	8006122 <USB_DeactivateEndpoint+0x1da>
 80060ea:	687a      	ldr	r2, [r7, #4]
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	781b      	ldrb	r3, [r3, #0]
 80060f0:	009b      	lsls	r3, r3, #2
 80060f2:	4413      	add	r3, r2
 80060f4:	881b      	ldrh	r3, [r3, #0]
 80060f6:	b29b      	uxth	r3, r3
 80060f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006100:	837b      	strh	r3, [r7, #26]
 8006102:	687a      	ldr	r2, [r7, #4]
 8006104:	683b      	ldr	r3, [r7, #0]
 8006106:	781b      	ldrb	r3, [r3, #0]
 8006108:	009b      	lsls	r3, r3, #2
 800610a:	441a      	add	r2, r3
 800610c:	8b7b      	ldrh	r3, [r7, #26]
 800610e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006112:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006116:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800611a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800611e:	b29b      	uxth	r3, r3
 8006120:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8006122:	687a      	ldr	r2, [r7, #4]
 8006124:	683b      	ldr	r3, [r7, #0]
 8006126:	781b      	ldrb	r3, [r3, #0]
 8006128:	009b      	lsls	r3, r3, #2
 800612a:	4413      	add	r3, r2
 800612c:	881b      	ldrh	r3, [r3, #0]
 800612e:	b29b      	uxth	r3, r3
 8006130:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006134:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006138:	833b      	strh	r3, [r7, #24]
 800613a:	687a      	ldr	r2, [r7, #4]
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	781b      	ldrb	r3, [r3, #0]
 8006140:	009b      	lsls	r3, r3, #2
 8006142:	441a      	add	r2, r3
 8006144:	8b3b      	ldrh	r3, [r7, #24]
 8006146:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800614a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800614e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006152:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006156:	b29b      	uxth	r3, r3
 8006158:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800615a:	687a      	ldr	r2, [r7, #4]
 800615c:	683b      	ldr	r3, [r7, #0]
 800615e:	781b      	ldrb	r3, [r3, #0]
 8006160:	009b      	lsls	r3, r3, #2
 8006162:	4413      	add	r3, r2
 8006164:	881b      	ldrh	r3, [r3, #0]
 8006166:	b29b      	uxth	r3, r3
 8006168:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800616c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006170:	82fb      	strh	r3, [r7, #22]
 8006172:	687a      	ldr	r2, [r7, #4]
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	781b      	ldrb	r3, [r3, #0]
 8006178:	009b      	lsls	r3, r3, #2
 800617a:	441a      	add	r2, r3
 800617c:	8afb      	ldrh	r3, [r7, #22]
 800617e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006182:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006186:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800618a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800618e:	b29b      	uxth	r3, r3
 8006190:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006192:	687a      	ldr	r2, [r7, #4]
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	781b      	ldrb	r3, [r3, #0]
 8006198:	009b      	lsls	r3, r3, #2
 800619a:	4413      	add	r3, r2
 800619c:	881b      	ldrh	r3, [r3, #0]
 800619e:	b29b      	uxth	r3, r3
 80061a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80061a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80061a8:	82bb      	strh	r3, [r7, #20]
 80061aa:	687a      	ldr	r2, [r7, #4]
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	781b      	ldrb	r3, [r3, #0]
 80061b0:	009b      	lsls	r3, r3, #2
 80061b2:	441a      	add	r2, r3
 80061b4:	8abb      	ldrh	r3, [r7, #20]
 80061b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80061ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80061be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80061c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061c6:	b29b      	uxth	r3, r3
 80061c8:	8013      	strh	r3, [r2, #0]
 80061ca:	e0a3      	b.n	8006314 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80061cc:	687a      	ldr	r2, [r7, #4]
 80061ce:	683b      	ldr	r3, [r7, #0]
 80061d0:	781b      	ldrb	r3, [r3, #0]
 80061d2:	009b      	lsls	r3, r3, #2
 80061d4:	4413      	add	r3, r2
 80061d6:	881b      	ldrh	r3, [r3, #0]
 80061d8:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80061da:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80061dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d01b      	beq.n	800621c <USB_DeactivateEndpoint+0x2d4>
 80061e4:	687a      	ldr	r2, [r7, #4]
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	781b      	ldrb	r3, [r3, #0]
 80061ea:	009b      	lsls	r3, r3, #2
 80061ec:	4413      	add	r3, r2
 80061ee:	881b      	ldrh	r3, [r3, #0]
 80061f0:	b29b      	uxth	r3, r3
 80061f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80061f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061fa:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80061fc:	687a      	ldr	r2, [r7, #4]
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	781b      	ldrb	r3, [r3, #0]
 8006202:	009b      	lsls	r3, r3, #2
 8006204:	441a      	add	r2, r3
 8006206:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006208:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800620c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006210:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006214:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006218:	b29b      	uxth	r3, r3
 800621a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800621c:	687a      	ldr	r2, [r7, #4]
 800621e:	683b      	ldr	r3, [r7, #0]
 8006220:	781b      	ldrb	r3, [r3, #0]
 8006222:	009b      	lsls	r3, r3, #2
 8006224:	4413      	add	r3, r2
 8006226:	881b      	ldrh	r3, [r3, #0]
 8006228:	857b      	strh	r3, [r7, #42]	; 0x2a
 800622a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800622c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006230:	2b00      	cmp	r3, #0
 8006232:	d01b      	beq.n	800626c <USB_DeactivateEndpoint+0x324>
 8006234:	687a      	ldr	r2, [r7, #4]
 8006236:	683b      	ldr	r3, [r7, #0]
 8006238:	781b      	ldrb	r3, [r3, #0]
 800623a:	009b      	lsls	r3, r3, #2
 800623c:	4413      	add	r3, r2
 800623e:	881b      	ldrh	r3, [r3, #0]
 8006240:	b29b      	uxth	r3, r3
 8006242:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006246:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800624a:	853b      	strh	r3, [r7, #40]	; 0x28
 800624c:	687a      	ldr	r2, [r7, #4]
 800624e:	683b      	ldr	r3, [r7, #0]
 8006250:	781b      	ldrb	r3, [r3, #0]
 8006252:	009b      	lsls	r3, r3, #2
 8006254:	441a      	add	r2, r3
 8006256:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006258:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800625c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006260:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006264:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006268:	b29b      	uxth	r3, r3
 800626a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800626c:	687a      	ldr	r2, [r7, #4]
 800626e:	683b      	ldr	r3, [r7, #0]
 8006270:	781b      	ldrb	r3, [r3, #0]
 8006272:	009b      	lsls	r3, r3, #2
 8006274:	4413      	add	r3, r2
 8006276:	881b      	ldrh	r3, [r3, #0]
 8006278:	b29b      	uxth	r3, r3
 800627a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800627e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006282:	84fb      	strh	r3, [r7, #38]	; 0x26
 8006284:	687a      	ldr	r2, [r7, #4]
 8006286:	683b      	ldr	r3, [r7, #0]
 8006288:	781b      	ldrb	r3, [r3, #0]
 800628a:	009b      	lsls	r3, r3, #2
 800628c:	441a      	add	r2, r3
 800628e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006290:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006294:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006298:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800629c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062a0:	b29b      	uxth	r3, r3
 80062a2:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80062a4:	687a      	ldr	r2, [r7, #4]
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	781b      	ldrb	r3, [r3, #0]
 80062aa:	009b      	lsls	r3, r3, #2
 80062ac:	4413      	add	r3, r2
 80062ae:	881b      	ldrh	r3, [r3, #0]
 80062b0:	b29b      	uxth	r3, r3
 80062b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80062ba:	84bb      	strh	r3, [r7, #36]	; 0x24
 80062bc:	687a      	ldr	r2, [r7, #4]
 80062be:	683b      	ldr	r3, [r7, #0]
 80062c0:	781b      	ldrb	r3, [r3, #0]
 80062c2:	009b      	lsls	r3, r3, #2
 80062c4:	441a      	add	r2, r3
 80062c6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80062c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80062cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80062d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062d8:	b29b      	uxth	r3, r3
 80062da:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80062dc:	687a      	ldr	r2, [r7, #4]
 80062de:	683b      	ldr	r3, [r7, #0]
 80062e0:	781b      	ldrb	r3, [r3, #0]
 80062e2:	009b      	lsls	r3, r3, #2
 80062e4:	4413      	add	r3, r2
 80062e6:	881b      	ldrh	r3, [r3, #0]
 80062e8:	b29b      	uxth	r3, r3
 80062ea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80062ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062f2:	847b      	strh	r3, [r7, #34]	; 0x22
 80062f4:	687a      	ldr	r2, [r7, #4]
 80062f6:	683b      	ldr	r3, [r7, #0]
 80062f8:	781b      	ldrb	r3, [r3, #0]
 80062fa:	009b      	lsls	r3, r3, #2
 80062fc:	441a      	add	r2, r3
 80062fe:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006300:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006304:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006308:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800630c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006310:	b29b      	uxth	r3, r3
 8006312:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006314:	2300      	movs	r3, #0
}
 8006316:	4618      	mov	r0, r3
 8006318:	3734      	adds	r7, #52	; 0x34
 800631a:	46bd      	mov	sp, r7
 800631c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006320:	4770      	bx	lr

08006322 <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006322:	b580      	push	{r7, lr}
 8006324:	b0c4      	sub	sp, #272	; 0x110
 8006326:	af00      	add	r7, sp, #0
 8006328:	1d3b      	adds	r3, r7, #4
 800632a:	6018      	str	r0, [r3, #0]
 800632c:	463b      	mov	r3, r7
 800632e:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint32_t len;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006330:	463b      	mov	r3, r7
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	785b      	ldrb	r3, [r3, #1]
 8006336:	2b01      	cmp	r3, #1
 8006338:	f040 8566 	bne.w	8006e08 <USB_EPStartXfer+0xae6>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800633c:	463b      	mov	r3, r7
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	699a      	ldr	r2, [r3, #24]
 8006342:	463b      	mov	r3, r7
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	691b      	ldr	r3, [r3, #16]
 8006348:	429a      	cmp	r2, r3
 800634a:	d905      	bls.n	8006358 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 800634c:	463b      	mov	r3, r7
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	691b      	ldr	r3, [r3, #16]
 8006352:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006356:	e004      	b.n	8006362 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8006358:	463b      	mov	r3, r7
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	699b      	ldr	r3, [r3, #24]
 800635e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8006362:	463b      	mov	r3, r7
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	7b1b      	ldrb	r3, [r3, #12]
 8006368:	2b00      	cmp	r3, #0
 800636a:	d12c      	bne.n	80063c6 <USB_EPStartXfer+0xa4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800636c:	463b      	mov	r3, r7
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	6959      	ldr	r1, [r3, #20]
 8006372:	463b      	mov	r3, r7
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	88da      	ldrh	r2, [r3, #6]
 8006378:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800637c:	b29b      	uxth	r3, r3
 800637e:	1d38      	adds	r0, r7, #4
 8006380:	6800      	ldr	r0, [r0, #0]
 8006382:	f001 fa43 	bl	800780c <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006386:	1d3b      	adds	r3, r7, #4
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	617b      	str	r3, [r7, #20]
 800638c:	1d3b      	adds	r3, r7, #4
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006394:	b29b      	uxth	r3, r3
 8006396:	461a      	mov	r2, r3
 8006398:	697b      	ldr	r3, [r7, #20]
 800639a:	4413      	add	r3, r2
 800639c:	617b      	str	r3, [r7, #20]
 800639e:	463b      	mov	r3, r7
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	781b      	ldrb	r3, [r3, #0]
 80063a4:	00da      	lsls	r2, r3, #3
 80063a6:	697b      	ldr	r3, [r7, #20]
 80063a8:	4413      	add	r3, r2
 80063aa:	f203 4202 	addw	r2, r3, #1026	; 0x402
 80063ae:	f107 0310 	add.w	r3, r7, #16
 80063b2:	601a      	str	r2, [r3, #0]
 80063b4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80063b8:	b29a      	uxth	r2, r3
 80063ba:	f107 0310 	add.w	r3, r7, #16
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	801a      	strh	r2, [r3, #0]
 80063c2:	f000 bcec 	b.w	8006d9e <USB_EPStartXfer+0xa7c>
    }
    else
    {
      /*double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80063c6:	463b      	mov	r3, r7
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	78db      	ldrb	r3, [r3, #3]
 80063cc:	2b02      	cmp	r3, #2
 80063ce:	f040 8356 	bne.w	8006a7e <USB_EPStartXfer+0x75c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80063d2:	463b      	mov	r3, r7
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	6a1a      	ldr	r2, [r3, #32]
 80063d8:	463b      	mov	r3, r7
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	691b      	ldr	r3, [r3, #16]
 80063de:	429a      	cmp	r2, r3
 80063e0:	f240 82fa 	bls.w	80069d8 <USB_EPStartXfer+0x6b6>
        {
          /*enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 80063e4:	1d3b      	adds	r3, r7, #4
 80063e6:	681a      	ldr	r2, [r3, #0]
 80063e8:	463b      	mov	r3, r7
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	781b      	ldrb	r3, [r3, #0]
 80063ee:	009b      	lsls	r3, r3, #2
 80063f0:	4413      	add	r3, r2
 80063f2:	881b      	ldrh	r3, [r3, #0]
 80063f4:	b29b      	uxth	r3, r3
 80063f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80063fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063fe:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 8006402:	1d3b      	adds	r3, r7, #4
 8006404:	681a      	ldr	r2, [r3, #0]
 8006406:	463b      	mov	r3, r7
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	781b      	ldrb	r3, [r3, #0]
 800640c:	009b      	lsls	r3, r3, #2
 800640e:	441a      	add	r2, r3
 8006410:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8006414:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006418:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800641c:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006420:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006424:	b29b      	uxth	r3, r3
 8006426:	8013      	strh	r3, [r2, #0]
          len = ep->maxpacket;
 8006428:	463b      	mov	r3, r7
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	691b      	ldr	r3, [r3, #16]
 800642e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          /*each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8006432:	463b      	mov	r3, r7
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	6a1a      	ldr	r2, [r3, #32]
 8006438:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800643c:	1ad2      	subs	r2, r2, r3
 800643e:	463b      	mov	r3, r7
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1*/
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006444:	1d3b      	adds	r3, r7, #4
 8006446:	681a      	ldr	r2, [r3, #0]
 8006448:	463b      	mov	r3, r7
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	781b      	ldrb	r3, [r3, #0]
 800644e:	009b      	lsls	r3, r3, #2
 8006450:	4413      	add	r3, r2
 8006452:	881b      	ldrh	r3, [r3, #0]
 8006454:	b29b      	uxth	r3, r3
 8006456:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800645a:	2b00      	cmp	r3, #0
 800645c:	f000 815e 	beq.w	800671c <USB_EPStartXfer+0x3fa>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006460:	1d3b      	adds	r3, r7, #4
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	637b      	str	r3, [r7, #52]	; 0x34
 8006466:	463b      	mov	r3, r7
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	785b      	ldrb	r3, [r3, #1]
 800646c:	2b00      	cmp	r3, #0
 800646e:	d164      	bne.n	800653a <USB_EPStartXfer+0x218>
 8006470:	1d3b      	adds	r3, r7, #4
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006476:	1d3b      	adds	r3, r7, #4
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800647e:	b29b      	uxth	r3, r3
 8006480:	461a      	mov	r2, r3
 8006482:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006484:	4413      	add	r3, r2
 8006486:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006488:	463b      	mov	r3, r7
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	781b      	ldrb	r3, [r3, #0]
 800648e:	00da      	lsls	r2, r3, #3
 8006490:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006492:	4413      	add	r3, r2
 8006494:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006498:	62bb      	str	r3, [r7, #40]	; 0x28
 800649a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d112      	bne.n	80064c8 <USB_EPStartXfer+0x1a6>
 80064a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064a4:	881b      	ldrh	r3, [r3, #0]
 80064a6:	b29b      	uxth	r3, r3
 80064a8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80064ac:	b29a      	uxth	r2, r3
 80064ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064b0:	801a      	strh	r2, [r3, #0]
 80064b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064b4:	881b      	ldrh	r3, [r3, #0]
 80064b6:	b29b      	uxth	r3, r3
 80064b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80064bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80064c0:	b29a      	uxth	r2, r3
 80064c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064c4:	801a      	strh	r2, [r3, #0]
 80064c6:	e054      	b.n	8006572 <USB_EPStartXfer+0x250>
 80064c8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80064cc:	2b3e      	cmp	r3, #62	; 0x3e
 80064ce:	d817      	bhi.n	8006500 <USB_EPStartXfer+0x1de>
 80064d0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80064d4:	085b      	lsrs	r3, r3, #1
 80064d6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80064da:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80064de:	f003 0301 	and.w	r3, r3, #1
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d004      	beq.n	80064f0 <USB_EPStartXfer+0x1ce>
 80064e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064ea:	3301      	adds	r3, #1
 80064ec:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80064f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064f4:	b29b      	uxth	r3, r3
 80064f6:	029b      	lsls	r3, r3, #10
 80064f8:	b29a      	uxth	r2, r3
 80064fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064fc:	801a      	strh	r2, [r3, #0]
 80064fe:	e038      	b.n	8006572 <USB_EPStartXfer+0x250>
 8006500:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006504:	095b      	lsrs	r3, r3, #5
 8006506:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800650a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800650e:	f003 031f 	and.w	r3, r3, #31
 8006512:	2b00      	cmp	r3, #0
 8006514:	d104      	bne.n	8006520 <USB_EPStartXfer+0x1fe>
 8006516:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800651a:	3b01      	subs	r3, #1
 800651c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006520:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006524:	b29b      	uxth	r3, r3
 8006526:	029b      	lsls	r3, r3, #10
 8006528:	b29b      	uxth	r3, r3
 800652a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800652e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006532:	b29a      	uxth	r2, r3
 8006534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006536:	801a      	strh	r2, [r3, #0]
 8006538:	e01b      	b.n	8006572 <USB_EPStartXfer+0x250>
 800653a:	463b      	mov	r3, r7
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	785b      	ldrb	r3, [r3, #1]
 8006540:	2b01      	cmp	r3, #1
 8006542:	d116      	bne.n	8006572 <USB_EPStartXfer+0x250>
 8006544:	1d3b      	adds	r3, r7, #4
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800654c:	b29b      	uxth	r3, r3
 800654e:	461a      	mov	r2, r3
 8006550:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006552:	4413      	add	r3, r2
 8006554:	637b      	str	r3, [r7, #52]	; 0x34
 8006556:	463b      	mov	r3, r7
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	781b      	ldrb	r3, [r3, #0]
 800655c:	00da      	lsls	r2, r3, #3
 800655e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006560:	4413      	add	r3, r2
 8006562:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006566:	633b      	str	r3, [r7, #48]	; 0x30
 8006568:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800656c:	b29a      	uxth	r2, r3
 800656e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006570:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006572:	463b      	mov	r3, r7
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	895b      	ldrh	r3, [r3, #10]
 8006578:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800657c:	463b      	mov	r3, r7
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	6959      	ldr	r1, [r3, #20]
 8006582:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006586:	b29b      	uxth	r3, r3
 8006588:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 800658c:	1d38      	adds	r0, r7, #4
 800658e:	6800      	ldr	r0, [r0, #0]
 8006590:	f001 f93c 	bl	800780c <USB_WritePMA>
            ep->xfer_buff += len;
 8006594:	463b      	mov	r3, r7
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	695a      	ldr	r2, [r3, #20]
 800659a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800659e:	441a      	add	r2, r3
 80065a0:	463b      	mov	r3, r7
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80065a6:	463b      	mov	r3, r7
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	6a1a      	ldr	r2, [r3, #32]
 80065ac:	463b      	mov	r3, r7
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	691b      	ldr	r3, [r3, #16]
 80065b2:	429a      	cmp	r2, r3
 80065b4:	d90e      	bls.n	80065d4 <USB_EPStartXfer+0x2b2>
            {
              len = ep->maxpacket;
 80065b6:	463b      	mov	r3, r7
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	691b      	ldr	r3, [r3, #16]
 80065bc:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db -= len;
 80065c0:	463b      	mov	r3, r7
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	6a1a      	ldr	r2, [r3, #32]
 80065c6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80065ca:	1ad2      	subs	r2, r2, r3
 80065cc:	463b      	mov	r3, r7
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	621a      	str	r2, [r3, #32]
 80065d2:	e008      	b.n	80065e6 <USB_EPStartXfer+0x2c4>
            }
            else
            {
              len = ep->xfer_len_db;
 80065d4:	463b      	mov	r3, r7
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	6a1b      	ldr	r3, [r3, #32]
 80065da:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db = 0;
 80065de:	463b      	mov	r3, r7
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	2200      	movs	r2, #0
 80065e4:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80065e6:	463b      	mov	r3, r7
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	785b      	ldrb	r3, [r3, #1]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d164      	bne.n	80066ba <USB_EPStartXfer+0x398>
 80065f0:	1d3b      	adds	r3, r7, #4
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	61fb      	str	r3, [r7, #28]
 80065f6:	1d3b      	adds	r3, r7, #4
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80065fe:	b29b      	uxth	r3, r3
 8006600:	461a      	mov	r2, r3
 8006602:	69fb      	ldr	r3, [r7, #28]
 8006604:	4413      	add	r3, r2
 8006606:	61fb      	str	r3, [r7, #28]
 8006608:	463b      	mov	r3, r7
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	781b      	ldrb	r3, [r3, #0]
 800660e:	00da      	lsls	r2, r3, #3
 8006610:	69fb      	ldr	r3, [r7, #28]
 8006612:	4413      	add	r3, r2
 8006614:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006618:	61bb      	str	r3, [r7, #24]
 800661a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800661e:	2b00      	cmp	r3, #0
 8006620:	d112      	bne.n	8006648 <USB_EPStartXfer+0x326>
 8006622:	69bb      	ldr	r3, [r7, #24]
 8006624:	881b      	ldrh	r3, [r3, #0]
 8006626:	b29b      	uxth	r3, r3
 8006628:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800662c:	b29a      	uxth	r2, r3
 800662e:	69bb      	ldr	r3, [r7, #24]
 8006630:	801a      	strh	r2, [r3, #0]
 8006632:	69bb      	ldr	r3, [r7, #24]
 8006634:	881b      	ldrh	r3, [r3, #0]
 8006636:	b29b      	uxth	r3, r3
 8006638:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800663c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006640:	b29a      	uxth	r2, r3
 8006642:	69bb      	ldr	r3, [r7, #24]
 8006644:	801a      	strh	r2, [r3, #0]
 8006646:	e057      	b.n	80066f8 <USB_EPStartXfer+0x3d6>
 8006648:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800664c:	2b3e      	cmp	r3, #62	; 0x3e
 800664e:	d817      	bhi.n	8006680 <USB_EPStartXfer+0x35e>
 8006650:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006654:	085b      	lsrs	r3, r3, #1
 8006656:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800665a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800665e:	f003 0301 	and.w	r3, r3, #1
 8006662:	2b00      	cmp	r3, #0
 8006664:	d004      	beq.n	8006670 <USB_EPStartXfer+0x34e>
 8006666:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800666a:	3301      	adds	r3, #1
 800666c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006670:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006674:	b29b      	uxth	r3, r3
 8006676:	029b      	lsls	r3, r3, #10
 8006678:	b29a      	uxth	r2, r3
 800667a:	69bb      	ldr	r3, [r7, #24]
 800667c:	801a      	strh	r2, [r3, #0]
 800667e:	e03b      	b.n	80066f8 <USB_EPStartXfer+0x3d6>
 8006680:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006684:	095b      	lsrs	r3, r3, #5
 8006686:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800668a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800668e:	f003 031f 	and.w	r3, r3, #31
 8006692:	2b00      	cmp	r3, #0
 8006694:	d104      	bne.n	80066a0 <USB_EPStartXfer+0x37e>
 8006696:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800669a:	3b01      	subs	r3, #1
 800669c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80066a0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80066a4:	b29b      	uxth	r3, r3
 80066a6:	029b      	lsls	r3, r3, #10
 80066a8:	b29b      	uxth	r3, r3
 80066aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80066ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80066b2:	b29a      	uxth	r2, r3
 80066b4:	69bb      	ldr	r3, [r7, #24]
 80066b6:	801a      	strh	r2, [r3, #0]
 80066b8:	e01e      	b.n	80066f8 <USB_EPStartXfer+0x3d6>
 80066ba:	463b      	mov	r3, r7
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	785b      	ldrb	r3, [r3, #1]
 80066c0:	2b01      	cmp	r3, #1
 80066c2:	d119      	bne.n	80066f8 <USB_EPStartXfer+0x3d6>
 80066c4:	1d3b      	adds	r3, r7, #4
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	627b      	str	r3, [r7, #36]	; 0x24
 80066ca:	1d3b      	adds	r3, r7, #4
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80066d2:	b29b      	uxth	r3, r3
 80066d4:	461a      	mov	r2, r3
 80066d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066d8:	4413      	add	r3, r2
 80066da:	627b      	str	r3, [r7, #36]	; 0x24
 80066dc:	463b      	mov	r3, r7
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	781b      	ldrb	r3, [r3, #0]
 80066e2:	00da      	lsls	r2, r3, #3
 80066e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066e6:	4413      	add	r3, r2
 80066e8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80066ec:	623b      	str	r3, [r7, #32]
 80066ee:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80066f2:	b29a      	uxth	r2, r3
 80066f4:	6a3b      	ldr	r3, [r7, #32]
 80066f6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80066f8:	463b      	mov	r3, r7
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	891b      	ldrh	r3, [r3, #8]
 80066fe:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006702:	463b      	mov	r3, r7
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	6959      	ldr	r1, [r3, #20]
 8006708:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800670c:	b29b      	uxth	r3, r3
 800670e:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8006712:	1d38      	adds	r0, r7, #4
 8006714:	6800      	ldr	r0, [r0, #0]
 8006716:	f001 f879 	bl	800780c <USB_WritePMA>
 800671a:	e340      	b.n	8006d9e <USB_EPStartXfer+0xa7c>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800671c:	463b      	mov	r3, r7
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	785b      	ldrb	r3, [r3, #1]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d164      	bne.n	80067f0 <USB_EPStartXfer+0x4ce>
 8006726:	1d3b      	adds	r3, r7, #4
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800672c:	1d3b      	adds	r3, r7, #4
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006734:	b29b      	uxth	r3, r3
 8006736:	461a      	mov	r2, r3
 8006738:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800673a:	4413      	add	r3, r2
 800673c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800673e:	463b      	mov	r3, r7
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	781b      	ldrb	r3, [r3, #0]
 8006744:	00da      	lsls	r2, r3, #3
 8006746:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006748:	4413      	add	r3, r2
 800674a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800674e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006750:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006754:	2b00      	cmp	r3, #0
 8006756:	d112      	bne.n	800677e <USB_EPStartXfer+0x45c>
 8006758:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800675a:	881b      	ldrh	r3, [r3, #0]
 800675c:	b29b      	uxth	r3, r3
 800675e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006762:	b29a      	uxth	r2, r3
 8006764:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006766:	801a      	strh	r2, [r3, #0]
 8006768:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800676a:	881b      	ldrh	r3, [r3, #0]
 800676c:	b29b      	uxth	r3, r3
 800676e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006772:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006776:	b29a      	uxth	r2, r3
 8006778:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800677a:	801a      	strh	r2, [r3, #0]
 800677c:	e057      	b.n	800682e <USB_EPStartXfer+0x50c>
 800677e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006782:	2b3e      	cmp	r3, #62	; 0x3e
 8006784:	d817      	bhi.n	80067b6 <USB_EPStartXfer+0x494>
 8006786:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800678a:	085b      	lsrs	r3, r3, #1
 800678c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006790:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006794:	f003 0301 	and.w	r3, r3, #1
 8006798:	2b00      	cmp	r3, #0
 800679a:	d004      	beq.n	80067a6 <USB_EPStartXfer+0x484>
 800679c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80067a0:	3301      	adds	r3, #1
 80067a2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80067a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80067aa:	b29b      	uxth	r3, r3
 80067ac:	029b      	lsls	r3, r3, #10
 80067ae:	b29a      	uxth	r2, r3
 80067b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80067b2:	801a      	strh	r2, [r3, #0]
 80067b4:	e03b      	b.n	800682e <USB_EPStartXfer+0x50c>
 80067b6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80067ba:	095b      	lsrs	r3, r3, #5
 80067bc:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80067c0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80067c4:	f003 031f 	and.w	r3, r3, #31
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d104      	bne.n	80067d6 <USB_EPStartXfer+0x4b4>
 80067cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80067d0:	3b01      	subs	r3, #1
 80067d2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80067d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80067da:	b29b      	uxth	r3, r3
 80067dc:	029b      	lsls	r3, r3, #10
 80067de:	b29b      	uxth	r3, r3
 80067e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067e8:	b29a      	uxth	r2, r3
 80067ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80067ec:	801a      	strh	r2, [r3, #0]
 80067ee:	e01e      	b.n	800682e <USB_EPStartXfer+0x50c>
 80067f0:	463b      	mov	r3, r7
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	785b      	ldrb	r3, [r3, #1]
 80067f6:	2b01      	cmp	r3, #1
 80067f8:	d119      	bne.n	800682e <USB_EPStartXfer+0x50c>
 80067fa:	1d3b      	adds	r3, r7, #4
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	657b      	str	r3, [r7, #84]	; 0x54
 8006800:	1d3b      	adds	r3, r7, #4
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006808:	b29b      	uxth	r3, r3
 800680a:	461a      	mov	r2, r3
 800680c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800680e:	4413      	add	r3, r2
 8006810:	657b      	str	r3, [r7, #84]	; 0x54
 8006812:	463b      	mov	r3, r7
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	781b      	ldrb	r3, [r3, #0]
 8006818:	00da      	lsls	r2, r3, #3
 800681a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800681c:	4413      	add	r3, r2
 800681e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006822:	653b      	str	r3, [r7, #80]	; 0x50
 8006824:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006828:	b29a      	uxth	r2, r3
 800682a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800682c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800682e:	463b      	mov	r3, r7
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	891b      	ldrh	r3, [r3, #8]
 8006834:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006838:	463b      	mov	r3, r7
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	6959      	ldr	r1, [r3, #20]
 800683e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006842:	b29b      	uxth	r3, r3
 8006844:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8006848:	1d38      	adds	r0, r7, #4
 800684a:	6800      	ldr	r0, [r0, #0]
 800684c:	f000 ffde 	bl	800780c <USB_WritePMA>
            ep->xfer_buff += len;
 8006850:	463b      	mov	r3, r7
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	695a      	ldr	r2, [r3, #20]
 8006856:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800685a:	441a      	add	r2, r3
 800685c:	463b      	mov	r3, r7
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006862:	463b      	mov	r3, r7
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	6a1a      	ldr	r2, [r3, #32]
 8006868:	463b      	mov	r3, r7
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	691b      	ldr	r3, [r3, #16]
 800686e:	429a      	cmp	r2, r3
 8006870:	d90e      	bls.n	8006890 <USB_EPStartXfer+0x56e>
            {
              len = ep->maxpacket;
 8006872:	463b      	mov	r3, r7
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	691b      	ldr	r3, [r3, #16]
 8006878:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db -= len;
 800687c:	463b      	mov	r3, r7
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	6a1a      	ldr	r2, [r3, #32]
 8006882:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006886:	1ad2      	subs	r2, r2, r3
 8006888:	463b      	mov	r3, r7
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	621a      	str	r2, [r3, #32]
 800688e:	e008      	b.n	80068a2 <USB_EPStartXfer+0x580>
            }
            else
            {
              len = ep->xfer_len_db;
 8006890:	463b      	mov	r3, r7
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	6a1b      	ldr	r3, [r3, #32]
 8006896:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db = 0;
 800689a:	463b      	mov	r3, r7
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	2200      	movs	r2, #0
 80068a0:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80068a2:	1d3b      	adds	r3, r7, #4
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	647b      	str	r3, [r7, #68]	; 0x44
 80068a8:	463b      	mov	r3, r7
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	785b      	ldrb	r3, [r3, #1]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d164      	bne.n	800697c <USB_EPStartXfer+0x65a>
 80068b2:	1d3b      	adds	r3, r7, #4
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80068b8:	1d3b      	adds	r3, r7, #4
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80068c0:	b29b      	uxth	r3, r3
 80068c2:	461a      	mov	r2, r3
 80068c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068c6:	4413      	add	r3, r2
 80068c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80068ca:	463b      	mov	r3, r7
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	781b      	ldrb	r3, [r3, #0]
 80068d0:	00da      	lsls	r2, r3, #3
 80068d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068d4:	4413      	add	r3, r2
 80068d6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80068da:	63bb      	str	r3, [r7, #56]	; 0x38
 80068dc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d112      	bne.n	800690a <USB_EPStartXfer+0x5e8>
 80068e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068e6:	881b      	ldrh	r3, [r3, #0]
 80068e8:	b29b      	uxth	r3, r3
 80068ea:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80068ee:	b29a      	uxth	r2, r3
 80068f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068f2:	801a      	strh	r2, [r3, #0]
 80068f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068f6:	881b      	ldrh	r3, [r3, #0]
 80068f8:	b29b      	uxth	r3, r3
 80068fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80068fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006902:	b29a      	uxth	r2, r3
 8006904:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006906:	801a      	strh	r2, [r3, #0]
 8006908:	e054      	b.n	80069b4 <USB_EPStartXfer+0x692>
 800690a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800690e:	2b3e      	cmp	r3, #62	; 0x3e
 8006910:	d817      	bhi.n	8006942 <USB_EPStartXfer+0x620>
 8006912:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006916:	085b      	lsrs	r3, r3, #1
 8006918:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800691c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006920:	f003 0301 	and.w	r3, r3, #1
 8006924:	2b00      	cmp	r3, #0
 8006926:	d004      	beq.n	8006932 <USB_EPStartXfer+0x610>
 8006928:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800692c:	3301      	adds	r3, #1
 800692e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006932:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006936:	b29b      	uxth	r3, r3
 8006938:	029b      	lsls	r3, r3, #10
 800693a:	b29a      	uxth	r2, r3
 800693c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800693e:	801a      	strh	r2, [r3, #0]
 8006940:	e038      	b.n	80069b4 <USB_EPStartXfer+0x692>
 8006942:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006946:	095b      	lsrs	r3, r3, #5
 8006948:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800694c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006950:	f003 031f 	and.w	r3, r3, #31
 8006954:	2b00      	cmp	r3, #0
 8006956:	d104      	bne.n	8006962 <USB_EPStartXfer+0x640>
 8006958:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800695c:	3b01      	subs	r3, #1
 800695e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006962:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006966:	b29b      	uxth	r3, r3
 8006968:	029b      	lsls	r3, r3, #10
 800696a:	b29b      	uxth	r3, r3
 800696c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006970:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006974:	b29a      	uxth	r2, r3
 8006976:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006978:	801a      	strh	r2, [r3, #0]
 800697a:	e01b      	b.n	80069b4 <USB_EPStartXfer+0x692>
 800697c:	463b      	mov	r3, r7
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	785b      	ldrb	r3, [r3, #1]
 8006982:	2b01      	cmp	r3, #1
 8006984:	d116      	bne.n	80069b4 <USB_EPStartXfer+0x692>
 8006986:	1d3b      	adds	r3, r7, #4
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800698e:	b29b      	uxth	r3, r3
 8006990:	461a      	mov	r2, r3
 8006992:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006994:	4413      	add	r3, r2
 8006996:	647b      	str	r3, [r7, #68]	; 0x44
 8006998:	463b      	mov	r3, r7
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	781b      	ldrb	r3, [r3, #0]
 800699e:	00da      	lsls	r2, r3, #3
 80069a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80069a2:	4413      	add	r3, r2
 80069a4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80069a8:	643b      	str	r3, [r7, #64]	; 0x40
 80069aa:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80069ae:	b29a      	uxth	r2, r3
 80069b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80069b2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80069b4:	463b      	mov	r3, r7
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	895b      	ldrh	r3, [r3, #10]
 80069ba:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80069be:	463b      	mov	r3, r7
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	6959      	ldr	r1, [r3, #20]
 80069c4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80069c8:	b29b      	uxth	r3, r3
 80069ca:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 80069ce:	1d38      	adds	r0, r7, #4
 80069d0:	6800      	ldr	r0, [r0, #0]
 80069d2:	f000 ff1b 	bl	800780c <USB_WritePMA>
 80069d6:	e1e2      	b.n	8006d9e <USB_EPStartXfer+0xa7c>
          }
        }
        /*auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer*/
        else
        {
          len = ep->xfer_len_db;
 80069d8:	463b      	mov	r3, r7
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	6a1b      	ldr	r3, [r3, #32]
 80069de:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          /*disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 80069e2:	1d3b      	adds	r3, r7, #4
 80069e4:	681a      	ldr	r2, [r3, #0]
 80069e6:	463b      	mov	r3, r7
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	781b      	ldrb	r3, [r3, #0]
 80069ec:	009b      	lsls	r3, r3, #2
 80069ee:	4413      	add	r3, r2
 80069f0:	881b      	ldrh	r3, [r3, #0]
 80069f2:	b29b      	uxth	r3, r3
 80069f4:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80069f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069fc:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8006a00:	1d3b      	adds	r3, r7, #4
 8006a02:	681a      	ldr	r2, [r3, #0]
 8006a04:	463b      	mov	r3, r7
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	781b      	ldrb	r3, [r3, #0]
 8006a0a:	009b      	lsls	r3, r3, #2
 8006a0c:	441a      	add	r2, r3
 8006a0e:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8006a12:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a16:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a22:	b29b      	uxth	r3, r3
 8006a24:	8013      	strh	r3, [r2, #0]
          /*Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006a26:	1d3b      	adds	r3, r7, #4
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	663b      	str	r3, [r7, #96]	; 0x60
 8006a2c:	1d3b      	adds	r3, r7, #4
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a34:	b29b      	uxth	r3, r3
 8006a36:	461a      	mov	r2, r3
 8006a38:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006a3a:	4413      	add	r3, r2
 8006a3c:	663b      	str	r3, [r7, #96]	; 0x60
 8006a3e:	463b      	mov	r3, r7
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	781b      	ldrb	r3, [r3, #0]
 8006a44:	00da      	lsls	r2, r3, #3
 8006a46:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006a48:	4413      	add	r3, r2
 8006a4a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006a4e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006a50:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006a54:	b29a      	uxth	r2, r3
 8006a56:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006a58:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006a5a:	463b      	mov	r3, r7
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	891b      	ldrh	r3, [r3, #8]
 8006a60:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
          /*Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006a64:	463b      	mov	r3, r7
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	6959      	ldr	r1, [r3, #20]
 8006a6a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006a6e:	b29b      	uxth	r3, r3
 8006a70:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8006a74:	1d38      	adds	r0, r7, #4
 8006a76:	6800      	ldr	r0, [r0, #0]
 8006a78:	f000 fec8 	bl	800780c <USB_WritePMA>
 8006a7c:	e18f      	b.n	8006d9e <USB_EPStartXfer+0xa7c>

      /*mange isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006a7e:	1d3b      	adds	r3, r7, #4
 8006a80:	681a      	ldr	r2, [r3, #0]
 8006a82:	463b      	mov	r3, r7
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	781b      	ldrb	r3, [r3, #0]
 8006a88:	009b      	lsls	r3, r3, #2
 8006a8a:	4413      	add	r3, r2
 8006a8c:	881b      	ldrh	r3, [r3, #0]
 8006a8e:	b29b      	uxth	r3, r3
 8006a90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	f000 808f 	beq.w	8006bb8 <USB_EPStartXfer+0x896>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006a9a:	1d3b      	adds	r3, r7, #4
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	67bb      	str	r3, [r7, #120]	; 0x78
 8006aa0:	463b      	mov	r3, r7
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	785b      	ldrb	r3, [r3, #1]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d164      	bne.n	8006b74 <USB_EPStartXfer+0x852>
 8006aaa:	1d3b      	adds	r3, r7, #4
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	673b      	str	r3, [r7, #112]	; 0x70
 8006ab0:	1d3b      	adds	r3, r7, #4
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ab8:	b29b      	uxth	r3, r3
 8006aba:	461a      	mov	r2, r3
 8006abc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006abe:	4413      	add	r3, r2
 8006ac0:	673b      	str	r3, [r7, #112]	; 0x70
 8006ac2:	463b      	mov	r3, r7
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	781b      	ldrb	r3, [r3, #0]
 8006ac8:	00da      	lsls	r2, r3, #3
 8006aca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006acc:	4413      	add	r3, r2
 8006ace:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006ad2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006ad4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d112      	bne.n	8006b02 <USB_EPStartXfer+0x7e0>
 8006adc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ade:	881b      	ldrh	r3, [r3, #0]
 8006ae0:	b29b      	uxth	r3, r3
 8006ae2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006ae6:	b29a      	uxth	r2, r3
 8006ae8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006aea:	801a      	strh	r2, [r3, #0]
 8006aec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006aee:	881b      	ldrh	r3, [r3, #0]
 8006af0:	b29b      	uxth	r3, r3
 8006af2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006af6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006afa:	b29a      	uxth	r2, r3
 8006afc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006afe:	801a      	strh	r2, [r3, #0]
 8006b00:	e054      	b.n	8006bac <USB_EPStartXfer+0x88a>
 8006b02:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006b06:	2b3e      	cmp	r3, #62	; 0x3e
 8006b08:	d817      	bhi.n	8006b3a <USB_EPStartXfer+0x818>
 8006b0a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006b0e:	085b      	lsrs	r3, r3, #1
 8006b10:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006b14:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006b18:	f003 0301 	and.w	r3, r3, #1
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d004      	beq.n	8006b2a <USB_EPStartXfer+0x808>
 8006b20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b24:	3301      	adds	r3, #1
 8006b26:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006b2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b2e:	b29b      	uxth	r3, r3
 8006b30:	029b      	lsls	r3, r3, #10
 8006b32:	b29a      	uxth	r2, r3
 8006b34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b36:	801a      	strh	r2, [r3, #0]
 8006b38:	e038      	b.n	8006bac <USB_EPStartXfer+0x88a>
 8006b3a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006b3e:	095b      	lsrs	r3, r3, #5
 8006b40:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006b44:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006b48:	f003 031f 	and.w	r3, r3, #31
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d104      	bne.n	8006b5a <USB_EPStartXfer+0x838>
 8006b50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b54:	3b01      	subs	r3, #1
 8006b56:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006b5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b5e:	b29b      	uxth	r3, r3
 8006b60:	029b      	lsls	r3, r3, #10
 8006b62:	b29b      	uxth	r3, r3
 8006b64:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b68:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b6c:	b29a      	uxth	r2, r3
 8006b6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b70:	801a      	strh	r2, [r3, #0]
 8006b72:	e01b      	b.n	8006bac <USB_EPStartXfer+0x88a>
 8006b74:	463b      	mov	r3, r7
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	785b      	ldrb	r3, [r3, #1]
 8006b7a:	2b01      	cmp	r3, #1
 8006b7c:	d116      	bne.n	8006bac <USB_EPStartXfer+0x88a>
 8006b7e:	1d3b      	adds	r3, r7, #4
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b86:	b29b      	uxth	r3, r3
 8006b88:	461a      	mov	r2, r3
 8006b8a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006b8c:	4413      	add	r3, r2
 8006b8e:	67bb      	str	r3, [r7, #120]	; 0x78
 8006b90:	463b      	mov	r3, r7
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	781b      	ldrb	r3, [r3, #0]
 8006b96:	00da      	lsls	r2, r3, #3
 8006b98:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006b9a:	4413      	add	r3, r2
 8006b9c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006ba0:	677b      	str	r3, [r7, #116]	; 0x74
 8006ba2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006ba6:	b29a      	uxth	r2, r3
 8006ba8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006baa:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8006bac:	463b      	mov	r3, r7
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	895b      	ldrh	r3, [r3, #10]
 8006bb2:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
 8006bb6:	e097      	b.n	8006ce8 <USB_EPStartXfer+0x9c6>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006bb8:	463b      	mov	r3, r7
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	785b      	ldrb	r3, [r3, #1]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d168      	bne.n	8006c94 <USB_EPStartXfer+0x972>
 8006bc2:	1d3b      	adds	r3, r7, #4
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006bca:	1d3b      	adds	r3, r7, #4
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006bd2:	b29b      	uxth	r3, r3
 8006bd4:	461a      	mov	r2, r3
 8006bd6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006bda:	4413      	add	r3, r2
 8006bdc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006be0:	463b      	mov	r3, r7
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	781b      	ldrb	r3, [r3, #0]
 8006be6:	00da      	lsls	r2, r3, #3
 8006be8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006bec:	4413      	add	r3, r2
 8006bee:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006bf2:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006bf4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d112      	bne.n	8006c22 <USB_EPStartXfer+0x900>
 8006bfc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006bfe:	881b      	ldrh	r3, [r3, #0]
 8006c00:	b29b      	uxth	r3, r3
 8006c02:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006c06:	b29a      	uxth	r2, r3
 8006c08:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006c0a:	801a      	strh	r2, [r3, #0]
 8006c0c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006c0e:	881b      	ldrh	r3, [r3, #0]
 8006c10:	b29b      	uxth	r3, r3
 8006c12:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c16:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c1a:	b29a      	uxth	r2, r3
 8006c1c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006c1e:	801a      	strh	r2, [r3, #0]
 8006c20:	e05d      	b.n	8006cde <USB_EPStartXfer+0x9bc>
 8006c22:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006c26:	2b3e      	cmp	r3, #62	; 0x3e
 8006c28:	d817      	bhi.n	8006c5a <USB_EPStartXfer+0x938>
 8006c2a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006c2e:	085b      	lsrs	r3, r3, #1
 8006c30:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006c34:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006c38:	f003 0301 	and.w	r3, r3, #1
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d004      	beq.n	8006c4a <USB_EPStartXfer+0x928>
 8006c40:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006c44:	3301      	adds	r3, #1
 8006c46:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006c4a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006c4e:	b29b      	uxth	r3, r3
 8006c50:	029b      	lsls	r3, r3, #10
 8006c52:	b29a      	uxth	r2, r3
 8006c54:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006c56:	801a      	strh	r2, [r3, #0]
 8006c58:	e041      	b.n	8006cde <USB_EPStartXfer+0x9bc>
 8006c5a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006c5e:	095b      	lsrs	r3, r3, #5
 8006c60:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006c64:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006c68:	f003 031f 	and.w	r3, r3, #31
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d104      	bne.n	8006c7a <USB_EPStartXfer+0x958>
 8006c70:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006c74:	3b01      	subs	r3, #1
 8006c76:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006c7a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006c7e:	b29b      	uxth	r3, r3
 8006c80:	029b      	lsls	r3, r3, #10
 8006c82:	b29b      	uxth	r3, r3
 8006c84:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c88:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c8c:	b29a      	uxth	r2, r3
 8006c8e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006c90:	801a      	strh	r2, [r3, #0]
 8006c92:	e024      	b.n	8006cde <USB_EPStartXfer+0x9bc>
 8006c94:	463b      	mov	r3, r7
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	785b      	ldrb	r3, [r3, #1]
 8006c9a:	2b01      	cmp	r3, #1
 8006c9c:	d11f      	bne.n	8006cde <USB_EPStartXfer+0x9bc>
 8006c9e:	1d3b      	adds	r3, r7, #4
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006ca6:	1d3b      	adds	r3, r7, #4
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006cae:	b29b      	uxth	r3, r3
 8006cb0:	461a      	mov	r2, r3
 8006cb2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006cb6:	4413      	add	r3, r2
 8006cb8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006cbc:	463b      	mov	r3, r7
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	781b      	ldrb	r3, [r3, #0]
 8006cc2:	00da      	lsls	r2, r3, #3
 8006cc4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006cc8:	4413      	add	r3, r2
 8006cca:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006cce:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006cd2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006cd6:	b29a      	uxth	r2, r3
 8006cd8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006cdc:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006cde:	463b      	mov	r3, r7
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	891b      	ldrh	r3, [r3, #8]
 8006ce4:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
        }
        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006ce8:	463b      	mov	r3, r7
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	6959      	ldr	r1, [r3, #20]
 8006cee:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006cf2:	b29b      	uxth	r3, r3
 8006cf4:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8006cf8:	1d38      	adds	r0, r7, #4
 8006cfa:	6800      	ldr	r0, [r0, #0]
 8006cfc:	f000 fd86 	bl	800780c <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8006d00:	463b      	mov	r3, r7
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	785b      	ldrb	r3, [r3, #1]
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d122      	bne.n	8006d50 <USB_EPStartXfer+0xa2e>
 8006d0a:	1d3b      	adds	r3, r7, #4
 8006d0c:	681a      	ldr	r2, [r3, #0]
 8006d0e:	463b      	mov	r3, r7
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	781b      	ldrb	r3, [r3, #0]
 8006d14:	009b      	lsls	r3, r3, #2
 8006d16:	4413      	add	r3, r2
 8006d18:	881b      	ldrh	r3, [r3, #0]
 8006d1a:	b29b      	uxth	r3, r3
 8006d1c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d24:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8006d28:	1d3b      	adds	r3, r7, #4
 8006d2a:	681a      	ldr	r2, [r3, #0]
 8006d2c:	463b      	mov	r3, r7
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	781b      	ldrb	r3, [r3, #0]
 8006d32:	009b      	lsls	r3, r3, #2
 8006d34:	441a      	add	r2, r3
 8006d36:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8006d3a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d3e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d46:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006d4a:	b29b      	uxth	r3, r3
 8006d4c:	8013      	strh	r3, [r2, #0]
 8006d4e:	e026      	b.n	8006d9e <USB_EPStartXfer+0xa7c>
 8006d50:	463b      	mov	r3, r7
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	785b      	ldrb	r3, [r3, #1]
 8006d56:	2b01      	cmp	r3, #1
 8006d58:	d121      	bne.n	8006d9e <USB_EPStartXfer+0xa7c>
 8006d5a:	1d3b      	adds	r3, r7, #4
 8006d5c:	681a      	ldr	r2, [r3, #0]
 8006d5e:	463b      	mov	r3, r7
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	781b      	ldrb	r3, [r3, #0]
 8006d64:	009b      	lsls	r3, r3, #2
 8006d66:	4413      	add	r3, r2
 8006d68:	881b      	ldrh	r3, [r3, #0]
 8006d6a:	b29b      	uxth	r3, r3
 8006d6c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d74:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 8006d78:	1d3b      	adds	r3, r7, #4
 8006d7a:	681a      	ldr	r2, [r3, #0]
 8006d7c:	463b      	mov	r3, r7
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	781b      	ldrb	r3, [r3, #0]
 8006d82:	009b      	lsls	r3, r3, #2
 8006d84:	441a      	add	r2, r3
 8006d86:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8006d8a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d8e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d92:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006d96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d9a:	b29b      	uxth	r3, r3
 8006d9c:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8006d9e:	1d3b      	adds	r3, r7, #4
 8006da0:	681a      	ldr	r2, [r3, #0]
 8006da2:	463b      	mov	r3, r7
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	781b      	ldrb	r3, [r3, #0]
 8006da8:	009b      	lsls	r3, r3, #2
 8006daa:	4413      	add	r3, r2
 8006dac:	881b      	ldrh	r3, [r3, #0]
 8006dae:	b29b      	uxth	r3, r3
 8006db0:	f107 020e 	add.w	r2, r7, #14
 8006db4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006db8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006dbc:	8013      	strh	r3, [r2, #0]
 8006dbe:	f107 030e 	add.w	r3, r7, #14
 8006dc2:	f107 020e 	add.w	r2, r7, #14
 8006dc6:	8812      	ldrh	r2, [r2, #0]
 8006dc8:	f082 0210 	eor.w	r2, r2, #16
 8006dcc:	801a      	strh	r2, [r3, #0]
 8006dce:	f107 030e 	add.w	r3, r7, #14
 8006dd2:	f107 020e 	add.w	r2, r7, #14
 8006dd6:	8812      	ldrh	r2, [r2, #0]
 8006dd8:	f082 0220 	eor.w	r2, r2, #32
 8006ddc:	801a      	strh	r2, [r3, #0]
 8006dde:	1d3b      	adds	r3, r7, #4
 8006de0:	681a      	ldr	r2, [r3, #0]
 8006de2:	463b      	mov	r3, r7
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	781b      	ldrb	r3, [r3, #0]
 8006de8:	009b      	lsls	r3, r3, #2
 8006dea:	441a      	add	r2, r3
 8006dec:	f107 030e 	add.w	r3, r7, #14
 8006df0:	881b      	ldrh	r3, [r3, #0]
 8006df2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006df6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006dfa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006dfe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e02:	b29b      	uxth	r3, r3
 8006e04:	8013      	strh	r3, [r2, #0]
 8006e06:	e3b5      	b.n	8007574 <USB_EPStartXfer+0x1252>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8006e08:	463b      	mov	r3, r7
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	7b1b      	ldrb	r3, [r3, #12]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	f040 8090 	bne.w	8006f34 <USB_EPStartXfer+0xc12>
    {
      /* Multi packet transfer*/
      if (ep->xfer_len > ep->maxpacket)
 8006e14:	463b      	mov	r3, r7
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	699a      	ldr	r2, [r3, #24]
 8006e1a:	463b      	mov	r3, r7
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	691b      	ldr	r3, [r3, #16]
 8006e20:	429a      	cmp	r2, r3
 8006e22:	d90e      	bls.n	8006e42 <USB_EPStartXfer+0xb20>
      {
        len = ep->maxpacket;
 8006e24:	463b      	mov	r3, r7
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	691b      	ldr	r3, [r3, #16]
 8006e2a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        ep->xfer_len -= len;
 8006e2e:	463b      	mov	r3, r7
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	699a      	ldr	r2, [r3, #24]
 8006e34:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006e38:	1ad2      	subs	r2, r2, r3
 8006e3a:	463b      	mov	r3, r7
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	619a      	str	r2, [r3, #24]
 8006e40:	e008      	b.n	8006e54 <USB_EPStartXfer+0xb32>
      }
      else
      {
        len = ep->xfer_len;
 8006e42:	463b      	mov	r3, r7
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	699b      	ldr	r3, [r3, #24]
 8006e48:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        ep->xfer_len = 0U;
 8006e4c:	463b      	mov	r3, r7
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	2200      	movs	r2, #0
 8006e52:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8006e54:	1d3b      	adds	r3, r7, #4
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006e5c:	1d3b      	adds	r3, r7, #4
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e64:	b29b      	uxth	r3, r3
 8006e66:	461a      	mov	r2, r3
 8006e68:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006e6c:	4413      	add	r3, r2
 8006e6e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006e72:	463b      	mov	r3, r7
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	781b      	ldrb	r3, [r3, #0]
 8006e78:	00da      	lsls	r2, r3, #3
 8006e7a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006e7e:	4413      	add	r3, r2
 8006e80:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006e84:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006e88:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d116      	bne.n	8006ebe <USB_EPStartXfer+0xb9c>
 8006e90:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006e94:	881b      	ldrh	r3, [r3, #0]
 8006e96:	b29b      	uxth	r3, r3
 8006e98:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006e9c:	b29a      	uxth	r2, r3
 8006e9e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006ea2:	801a      	strh	r2, [r3, #0]
 8006ea4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006ea8:	881b      	ldrh	r3, [r3, #0]
 8006eaa:	b29b      	uxth	r3, r3
 8006eac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006eb0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006eb4:	b29a      	uxth	r2, r3
 8006eb6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006eba:	801a      	strh	r2, [r3, #0]
 8006ebc:	e32c      	b.n	8007518 <USB_EPStartXfer+0x11f6>
 8006ebe:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006ec2:	2b3e      	cmp	r3, #62	; 0x3e
 8006ec4:	d818      	bhi.n	8006ef8 <USB_EPStartXfer+0xbd6>
 8006ec6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006eca:	085b      	lsrs	r3, r3, #1
 8006ecc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006ed0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006ed4:	f003 0301 	and.w	r3, r3, #1
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d004      	beq.n	8006ee6 <USB_EPStartXfer+0xbc4>
 8006edc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006ee0:	3301      	adds	r3, #1
 8006ee2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006ee6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006eea:	b29b      	uxth	r3, r3
 8006eec:	029b      	lsls	r3, r3, #10
 8006eee:	b29a      	uxth	r2, r3
 8006ef0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006ef4:	801a      	strh	r2, [r3, #0]
 8006ef6:	e30f      	b.n	8007518 <USB_EPStartXfer+0x11f6>
 8006ef8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006efc:	095b      	lsrs	r3, r3, #5
 8006efe:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006f02:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006f06:	f003 031f 	and.w	r3, r3, #31
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d104      	bne.n	8006f18 <USB_EPStartXfer+0xbf6>
 8006f0e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006f12:	3b01      	subs	r3, #1
 8006f14:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006f18:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006f1c:	b29b      	uxth	r3, r3
 8006f1e:	029b      	lsls	r3, r3, #10
 8006f20:	b29b      	uxth	r3, r3
 8006f22:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f26:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f2a:	b29a      	uxth	r2, r3
 8006f2c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006f30:	801a      	strh	r2, [r3, #0]
 8006f32:	e2f1      	b.n	8007518 <USB_EPStartXfer+0x11f6>
    }
    else
    {
      /*First Transfer Coming From HAL_PCD_EP_Receive & From ISR*/
      /*Set the Double buffer counter*/
      if (ep->type == EP_TYPE_BULK)
 8006f34:	463b      	mov	r3, r7
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	78db      	ldrb	r3, [r3, #3]
 8006f3a:	2b02      	cmp	r3, #2
 8006f3c:	f040 818f 	bne.w	800725e <USB_EPStartXfer+0xf3c>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8006f40:	463b      	mov	r3, r7
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	785b      	ldrb	r3, [r3, #1]
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d175      	bne.n	8007036 <USB_EPStartXfer+0xd14>
 8006f4a:	1d3b      	adds	r3, r7, #4
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006f52:	1d3b      	adds	r3, r7, #4
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f5a:	b29b      	uxth	r3, r3
 8006f5c:	461a      	mov	r2, r3
 8006f5e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006f62:	4413      	add	r3, r2
 8006f64:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006f68:	463b      	mov	r3, r7
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	781b      	ldrb	r3, [r3, #0]
 8006f6e:	00da      	lsls	r2, r3, #3
 8006f70:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006f74:	4413      	add	r3, r2
 8006f76:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006f7a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006f7e:	463b      	mov	r3, r7
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	691b      	ldr	r3, [r3, #16]
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d116      	bne.n	8006fb6 <USB_EPStartXfer+0xc94>
 8006f88:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006f8c:	881b      	ldrh	r3, [r3, #0]
 8006f8e:	b29b      	uxth	r3, r3
 8006f90:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006f94:	b29a      	uxth	r2, r3
 8006f96:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006f9a:	801a      	strh	r2, [r3, #0]
 8006f9c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006fa0:	881b      	ldrh	r3, [r3, #0]
 8006fa2:	b29b      	uxth	r3, r3
 8006fa4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006fa8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006fac:	b29a      	uxth	r2, r3
 8006fae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006fb2:	801a      	strh	r2, [r3, #0]
 8006fb4:	e065      	b.n	8007082 <USB_EPStartXfer+0xd60>
 8006fb6:	463b      	mov	r3, r7
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	691b      	ldr	r3, [r3, #16]
 8006fbc:	2b3e      	cmp	r3, #62	; 0x3e
 8006fbe:	d81a      	bhi.n	8006ff6 <USB_EPStartXfer+0xcd4>
 8006fc0:	463b      	mov	r3, r7
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	691b      	ldr	r3, [r3, #16]
 8006fc6:	085b      	lsrs	r3, r3, #1
 8006fc8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006fcc:	463b      	mov	r3, r7
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	691b      	ldr	r3, [r3, #16]
 8006fd2:	f003 0301 	and.w	r3, r3, #1
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d004      	beq.n	8006fe4 <USB_EPStartXfer+0xcc2>
 8006fda:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006fde:	3301      	adds	r3, #1
 8006fe0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006fe4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006fe8:	b29b      	uxth	r3, r3
 8006fea:	029b      	lsls	r3, r3, #10
 8006fec:	b29a      	uxth	r2, r3
 8006fee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006ff2:	801a      	strh	r2, [r3, #0]
 8006ff4:	e045      	b.n	8007082 <USB_EPStartXfer+0xd60>
 8006ff6:	463b      	mov	r3, r7
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	691b      	ldr	r3, [r3, #16]
 8006ffc:	095b      	lsrs	r3, r3, #5
 8006ffe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007002:	463b      	mov	r3, r7
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	691b      	ldr	r3, [r3, #16]
 8007008:	f003 031f 	and.w	r3, r3, #31
 800700c:	2b00      	cmp	r3, #0
 800700e:	d104      	bne.n	800701a <USB_EPStartXfer+0xcf8>
 8007010:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007014:	3b01      	subs	r3, #1
 8007016:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800701a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800701e:	b29b      	uxth	r3, r3
 8007020:	029b      	lsls	r3, r3, #10
 8007022:	b29b      	uxth	r3, r3
 8007024:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007028:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800702c:	b29a      	uxth	r2, r3
 800702e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007032:	801a      	strh	r2, [r3, #0]
 8007034:	e025      	b.n	8007082 <USB_EPStartXfer+0xd60>
 8007036:	463b      	mov	r3, r7
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	785b      	ldrb	r3, [r3, #1]
 800703c:	2b01      	cmp	r3, #1
 800703e:	d120      	bne.n	8007082 <USB_EPStartXfer+0xd60>
 8007040:	1d3b      	adds	r3, r7, #4
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007048:	1d3b      	adds	r3, r7, #4
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007050:	b29b      	uxth	r3, r3
 8007052:	461a      	mov	r2, r3
 8007054:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007058:	4413      	add	r3, r2
 800705a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800705e:	463b      	mov	r3, r7
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	781b      	ldrb	r3, [r3, #0]
 8007064:	00da      	lsls	r2, r3, #3
 8007066:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800706a:	4413      	add	r3, r2
 800706c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007070:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007074:	463b      	mov	r3, r7
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	691b      	ldr	r3, [r3, #16]
 800707a:	b29a      	uxth	r2, r3
 800707c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007080:	801a      	strh	r2, [r3, #0]
 8007082:	1d3b      	adds	r3, r7, #4
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800708a:	463b      	mov	r3, r7
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	785b      	ldrb	r3, [r3, #1]
 8007090:	2b00      	cmp	r3, #0
 8007092:	d175      	bne.n	8007180 <USB_EPStartXfer+0xe5e>
 8007094:	1d3b      	adds	r3, r7, #4
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800709c:	1d3b      	adds	r3, r7, #4
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80070a4:	b29b      	uxth	r3, r3
 80070a6:	461a      	mov	r2, r3
 80070a8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80070ac:	4413      	add	r3, r2
 80070ae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80070b2:	463b      	mov	r3, r7
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	781b      	ldrb	r3, [r3, #0]
 80070b8:	00da      	lsls	r2, r3, #3
 80070ba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80070be:	4413      	add	r3, r2
 80070c0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80070c4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80070c8:	463b      	mov	r3, r7
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	691b      	ldr	r3, [r3, #16]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d116      	bne.n	8007100 <USB_EPStartXfer+0xdde>
 80070d2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80070d6:	881b      	ldrh	r3, [r3, #0]
 80070d8:	b29b      	uxth	r3, r3
 80070da:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80070de:	b29a      	uxth	r2, r3
 80070e0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80070e4:	801a      	strh	r2, [r3, #0]
 80070e6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80070ea:	881b      	ldrh	r3, [r3, #0]
 80070ec:	b29b      	uxth	r3, r3
 80070ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80070f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80070f6:	b29a      	uxth	r2, r3
 80070f8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80070fc:	801a      	strh	r2, [r3, #0]
 80070fe:	e061      	b.n	80071c4 <USB_EPStartXfer+0xea2>
 8007100:	463b      	mov	r3, r7
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	691b      	ldr	r3, [r3, #16]
 8007106:	2b3e      	cmp	r3, #62	; 0x3e
 8007108:	d81a      	bhi.n	8007140 <USB_EPStartXfer+0xe1e>
 800710a:	463b      	mov	r3, r7
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	691b      	ldr	r3, [r3, #16]
 8007110:	085b      	lsrs	r3, r3, #1
 8007112:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007116:	463b      	mov	r3, r7
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	691b      	ldr	r3, [r3, #16]
 800711c:	f003 0301 	and.w	r3, r3, #1
 8007120:	2b00      	cmp	r3, #0
 8007122:	d004      	beq.n	800712e <USB_EPStartXfer+0xe0c>
 8007124:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007128:	3301      	adds	r3, #1
 800712a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800712e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007132:	b29b      	uxth	r3, r3
 8007134:	029b      	lsls	r3, r3, #10
 8007136:	b29a      	uxth	r2, r3
 8007138:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800713c:	801a      	strh	r2, [r3, #0]
 800713e:	e041      	b.n	80071c4 <USB_EPStartXfer+0xea2>
 8007140:	463b      	mov	r3, r7
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	691b      	ldr	r3, [r3, #16]
 8007146:	095b      	lsrs	r3, r3, #5
 8007148:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800714c:	463b      	mov	r3, r7
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	691b      	ldr	r3, [r3, #16]
 8007152:	f003 031f 	and.w	r3, r3, #31
 8007156:	2b00      	cmp	r3, #0
 8007158:	d104      	bne.n	8007164 <USB_EPStartXfer+0xe42>
 800715a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800715e:	3b01      	subs	r3, #1
 8007160:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007164:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007168:	b29b      	uxth	r3, r3
 800716a:	029b      	lsls	r3, r3, #10
 800716c:	b29b      	uxth	r3, r3
 800716e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007172:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007176:	b29a      	uxth	r2, r3
 8007178:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800717c:	801a      	strh	r2, [r3, #0]
 800717e:	e021      	b.n	80071c4 <USB_EPStartXfer+0xea2>
 8007180:	463b      	mov	r3, r7
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	785b      	ldrb	r3, [r3, #1]
 8007186:	2b01      	cmp	r3, #1
 8007188:	d11c      	bne.n	80071c4 <USB_EPStartXfer+0xea2>
 800718a:	1d3b      	adds	r3, r7, #4
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007192:	b29b      	uxth	r3, r3
 8007194:	461a      	mov	r2, r3
 8007196:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800719a:	4413      	add	r3, r2
 800719c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80071a0:	463b      	mov	r3, r7
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	781b      	ldrb	r3, [r3, #0]
 80071a6:	00da      	lsls	r2, r3, #3
 80071a8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80071ac:	4413      	add	r3, r2
 80071ae:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80071b2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80071b6:	463b      	mov	r3, r7
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	691b      	ldr	r3, [r3, #16]
 80071bc:	b29a      	uxth	r2, r3
 80071be:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80071c2:	801a      	strh	r2, [r3, #0]
        /*Coming from ISR*/
        if (ep->xfer_count != 0U)
 80071c4:	463b      	mov	r3, r7
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	69db      	ldr	r3, [r3, #28]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	f000 81a4 	beq.w	8007518 <USB_EPStartXfer+0x11f6>
        {
          /* update last value to check if there is blocking state*/
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80071d0:	1d3b      	adds	r3, r7, #4
 80071d2:	681a      	ldr	r2, [r3, #0]
 80071d4:	463b      	mov	r3, r7
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	781b      	ldrb	r3, [r3, #0]
 80071da:	009b      	lsls	r3, r3, #2
 80071dc:	4413      	add	r3, r2
 80071de:	881b      	ldrh	r3, [r3, #0]
 80071e0:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80071e4:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80071e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d005      	beq.n	80071fc <USB_EPStartXfer+0xeda>
 80071f0:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80071f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d10d      	bne.n	8007218 <USB_EPStartXfer+0xef6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80071fc:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8007200:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007204:	2b00      	cmp	r3, #0
 8007206:	f040 8187 	bne.w	8007518 <USB_EPStartXfer+0x11f6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800720a:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800720e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007212:	2b00      	cmp	r3, #0
 8007214:	f040 8180 	bne.w	8007518 <USB_EPStartXfer+0x11f6>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8007218:	1d3b      	adds	r3, r7, #4
 800721a:	681a      	ldr	r2, [r3, #0]
 800721c:	463b      	mov	r3, r7
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	781b      	ldrb	r3, [r3, #0]
 8007222:	009b      	lsls	r3, r3, #2
 8007224:	4413      	add	r3, r2
 8007226:	881b      	ldrh	r3, [r3, #0]
 8007228:	b29b      	uxth	r3, r3
 800722a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800722e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007232:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 8007236:	1d3b      	adds	r3, r7, #4
 8007238:	681a      	ldr	r2, [r3, #0]
 800723a:	463b      	mov	r3, r7
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	781b      	ldrb	r3, [r3, #0]
 8007240:	009b      	lsls	r3, r3, #2
 8007242:	441a      	add	r2, r3
 8007244:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8007248:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800724c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007250:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007254:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007258:	b29b      	uxth	r3, r3
 800725a:	8013      	strh	r3, [r2, #0]
 800725c:	e15c      	b.n	8007518 <USB_EPStartXfer+0x11f6>
          }
        }
      }
      /*iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800725e:	463b      	mov	r3, r7
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	78db      	ldrb	r3, [r3, #3]
 8007264:	2b01      	cmp	r3, #1
 8007266:	f040 8155 	bne.w	8007514 <USB_EPStartXfer+0x11f2>
      {
        /* Multi packet transfer*/
        if (ep->xfer_len > ep->maxpacket)
 800726a:	463b      	mov	r3, r7
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	699a      	ldr	r2, [r3, #24]
 8007270:	463b      	mov	r3, r7
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	691b      	ldr	r3, [r3, #16]
 8007276:	429a      	cmp	r2, r3
 8007278:	d90e      	bls.n	8007298 <USB_EPStartXfer+0xf76>
        {
          len = ep->maxpacket;
 800727a:	463b      	mov	r3, r7
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	691b      	ldr	r3, [r3, #16]
 8007280:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          ep->xfer_len -= len;
 8007284:	463b      	mov	r3, r7
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	699a      	ldr	r2, [r3, #24]
 800728a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800728e:	1ad2      	subs	r2, r2, r3
 8007290:	463b      	mov	r3, r7
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	619a      	str	r2, [r3, #24]
 8007296:	e008      	b.n	80072aa <USB_EPStartXfer+0xf88>
        }
        else
        {
          len = ep->xfer_len;
 8007298:	463b      	mov	r3, r7
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	699b      	ldr	r3, [r3, #24]
 800729e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          ep->xfer_len = 0U;
 80072a2:	463b      	mov	r3, r7
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	2200      	movs	r2, #0
 80072a8:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80072aa:	463b      	mov	r3, r7
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	785b      	ldrb	r3, [r3, #1]
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d16f      	bne.n	8007394 <USB_EPStartXfer+0x1072>
 80072b4:	1d3b      	adds	r3, r7, #4
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80072bc:	1d3b      	adds	r3, r7, #4
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80072c4:	b29b      	uxth	r3, r3
 80072c6:	461a      	mov	r2, r3
 80072c8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80072cc:	4413      	add	r3, r2
 80072ce:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80072d2:	463b      	mov	r3, r7
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	781b      	ldrb	r3, [r3, #0]
 80072d8:	00da      	lsls	r2, r3, #3
 80072da:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80072de:	4413      	add	r3, r2
 80072e0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80072e4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80072e8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d116      	bne.n	800731e <USB_EPStartXfer+0xffc>
 80072f0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80072f4:	881b      	ldrh	r3, [r3, #0]
 80072f6:	b29b      	uxth	r3, r3
 80072f8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80072fc:	b29a      	uxth	r2, r3
 80072fe:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007302:	801a      	strh	r2, [r3, #0]
 8007304:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007308:	881b      	ldrh	r3, [r3, #0]
 800730a:	b29b      	uxth	r3, r3
 800730c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007310:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007314:	b29a      	uxth	r2, r3
 8007316:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800731a:	801a      	strh	r2, [r3, #0]
 800731c:	e05f      	b.n	80073de <USB_EPStartXfer+0x10bc>
 800731e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007322:	2b3e      	cmp	r3, #62	; 0x3e
 8007324:	d818      	bhi.n	8007358 <USB_EPStartXfer+0x1036>
 8007326:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800732a:	085b      	lsrs	r3, r3, #1
 800732c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007330:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007334:	f003 0301 	and.w	r3, r3, #1
 8007338:	2b00      	cmp	r3, #0
 800733a:	d004      	beq.n	8007346 <USB_EPStartXfer+0x1024>
 800733c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007340:	3301      	adds	r3, #1
 8007342:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007346:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800734a:	b29b      	uxth	r3, r3
 800734c:	029b      	lsls	r3, r3, #10
 800734e:	b29a      	uxth	r2, r3
 8007350:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007354:	801a      	strh	r2, [r3, #0]
 8007356:	e042      	b.n	80073de <USB_EPStartXfer+0x10bc>
 8007358:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800735c:	095b      	lsrs	r3, r3, #5
 800735e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007362:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007366:	f003 031f 	and.w	r3, r3, #31
 800736a:	2b00      	cmp	r3, #0
 800736c:	d104      	bne.n	8007378 <USB_EPStartXfer+0x1056>
 800736e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007372:	3b01      	subs	r3, #1
 8007374:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007378:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800737c:	b29b      	uxth	r3, r3
 800737e:	029b      	lsls	r3, r3, #10
 8007380:	b29b      	uxth	r3, r3
 8007382:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007386:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800738a:	b29a      	uxth	r2, r3
 800738c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007390:	801a      	strh	r2, [r3, #0]
 8007392:	e024      	b.n	80073de <USB_EPStartXfer+0x10bc>
 8007394:	463b      	mov	r3, r7
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	785b      	ldrb	r3, [r3, #1]
 800739a:	2b01      	cmp	r3, #1
 800739c:	d11f      	bne.n	80073de <USB_EPStartXfer+0x10bc>
 800739e:	1d3b      	adds	r3, r7, #4
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80073a6:	1d3b      	adds	r3, r7, #4
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80073ae:	b29b      	uxth	r3, r3
 80073b0:	461a      	mov	r2, r3
 80073b2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80073b6:	4413      	add	r3, r2
 80073b8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80073bc:	463b      	mov	r3, r7
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	781b      	ldrb	r3, [r3, #0]
 80073c2:	00da      	lsls	r2, r3, #3
 80073c4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80073c8:	4413      	add	r3, r2
 80073ca:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80073ce:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80073d2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80073d6:	b29a      	uxth	r2, r3
 80073d8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80073dc:	801a      	strh	r2, [r3, #0]
 80073de:	1d3b      	adds	r3, r7, #4
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80073e6:	463b      	mov	r3, r7
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	785b      	ldrb	r3, [r3, #1]
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d16f      	bne.n	80074d0 <USB_EPStartXfer+0x11ae>
 80073f0:	1d3b      	adds	r3, r7, #4
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80073f8:	1d3b      	adds	r3, r7, #4
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007400:	b29b      	uxth	r3, r3
 8007402:	461a      	mov	r2, r3
 8007404:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007408:	4413      	add	r3, r2
 800740a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800740e:	463b      	mov	r3, r7
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	781b      	ldrb	r3, [r3, #0]
 8007414:	00da      	lsls	r2, r3, #3
 8007416:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800741a:	4413      	add	r3, r2
 800741c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007420:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007424:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007428:	2b00      	cmp	r3, #0
 800742a:	d116      	bne.n	800745a <USB_EPStartXfer+0x1138>
 800742c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007430:	881b      	ldrh	r3, [r3, #0]
 8007432:	b29b      	uxth	r3, r3
 8007434:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007438:	b29a      	uxth	r2, r3
 800743a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800743e:	801a      	strh	r2, [r3, #0]
 8007440:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007444:	881b      	ldrh	r3, [r3, #0]
 8007446:	b29b      	uxth	r3, r3
 8007448:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800744c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007450:	b29a      	uxth	r2, r3
 8007452:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007456:	801a      	strh	r2, [r3, #0]
 8007458:	e05e      	b.n	8007518 <USB_EPStartXfer+0x11f6>
 800745a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800745e:	2b3e      	cmp	r3, #62	; 0x3e
 8007460:	d818      	bhi.n	8007494 <USB_EPStartXfer+0x1172>
 8007462:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007466:	085b      	lsrs	r3, r3, #1
 8007468:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800746c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007470:	f003 0301 	and.w	r3, r3, #1
 8007474:	2b00      	cmp	r3, #0
 8007476:	d004      	beq.n	8007482 <USB_EPStartXfer+0x1160>
 8007478:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800747c:	3301      	adds	r3, #1
 800747e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007482:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007486:	b29b      	uxth	r3, r3
 8007488:	029b      	lsls	r3, r3, #10
 800748a:	b29a      	uxth	r2, r3
 800748c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007490:	801a      	strh	r2, [r3, #0]
 8007492:	e041      	b.n	8007518 <USB_EPStartXfer+0x11f6>
 8007494:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007498:	095b      	lsrs	r3, r3, #5
 800749a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800749e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80074a2:	f003 031f 	and.w	r3, r3, #31
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d104      	bne.n	80074b4 <USB_EPStartXfer+0x1192>
 80074aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80074ae:	3b01      	subs	r3, #1
 80074b0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80074b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80074b8:	b29b      	uxth	r3, r3
 80074ba:	029b      	lsls	r3, r3, #10
 80074bc:	b29b      	uxth	r3, r3
 80074be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80074c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80074c6:	b29a      	uxth	r2, r3
 80074c8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80074cc:	801a      	strh	r2, [r3, #0]
 80074ce:	e023      	b.n	8007518 <USB_EPStartXfer+0x11f6>
 80074d0:	463b      	mov	r3, r7
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	785b      	ldrb	r3, [r3, #1]
 80074d6:	2b01      	cmp	r3, #1
 80074d8:	d11e      	bne.n	8007518 <USB_EPStartXfer+0x11f6>
 80074da:	1d3b      	adds	r3, r7, #4
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80074e2:	b29b      	uxth	r3, r3
 80074e4:	461a      	mov	r2, r3
 80074e6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80074ea:	4413      	add	r3, r2
 80074ec:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80074f0:	463b      	mov	r3, r7
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	781b      	ldrb	r3, [r3, #0]
 80074f6:	00da      	lsls	r2, r3, #3
 80074f8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80074fc:	4413      	add	r3, r2
 80074fe:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007502:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007506:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800750a:	b29a      	uxth	r2, r3
 800750c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007510:	801a      	strh	r2, [r3, #0]
 8007512:	e001      	b.n	8007518 <USB_EPStartXfer+0x11f6>
      }
      else
      {
        return HAL_ERROR;
 8007514:	2301      	movs	r3, #1
 8007516:	e02e      	b.n	8007576 <USB_EPStartXfer+0x1254>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007518:	1d3b      	adds	r3, r7, #4
 800751a:	681a      	ldr	r2, [r3, #0]
 800751c:	463b      	mov	r3, r7
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	781b      	ldrb	r3, [r3, #0]
 8007522:	009b      	lsls	r3, r3, #2
 8007524:	4413      	add	r3, r2
 8007526:	881b      	ldrh	r3, [r3, #0]
 8007528:	b29b      	uxth	r3, r3
 800752a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800752e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007532:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8007536:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800753a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800753e:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8007542:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8007546:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800754a:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 800754e:	1d3b      	adds	r3, r7, #4
 8007550:	681a      	ldr	r2, [r3, #0]
 8007552:	463b      	mov	r3, r7
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	781b      	ldrb	r3, [r3, #0]
 8007558:	009b      	lsls	r3, r3, #2
 800755a:	441a      	add	r2, r3
 800755c:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8007560:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007564:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007568:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800756c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007570:	b29b      	uxth	r3, r3
 8007572:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007574:	2300      	movs	r3, #0
}
 8007576:	4618      	mov	r0, r3
 8007578:	f507 7788 	add.w	r7, r7, #272	; 0x110
 800757c:	46bd      	mov	sp, r7
 800757e:	bd80      	pop	{r7, pc}

08007580 <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007580:	b480      	push	{r7}
 8007582:	b085      	sub	sp, #20
 8007584:	af00      	add	r7, sp, #0
 8007586:	6078      	str	r0, [r7, #4]
 8007588:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800758a:	683b      	ldr	r3, [r7, #0]
 800758c:	785b      	ldrb	r3, [r3, #1]
 800758e:	2b00      	cmp	r3, #0
 8007590:	d020      	beq.n	80075d4 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8007592:	687a      	ldr	r2, [r7, #4]
 8007594:	683b      	ldr	r3, [r7, #0]
 8007596:	781b      	ldrb	r3, [r3, #0]
 8007598:	009b      	lsls	r3, r3, #2
 800759a:	4413      	add	r3, r2
 800759c:	881b      	ldrh	r3, [r3, #0]
 800759e:	b29b      	uxth	r3, r3
 80075a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80075a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80075a8:	81bb      	strh	r3, [r7, #12]
 80075aa:	89bb      	ldrh	r3, [r7, #12]
 80075ac:	f083 0310 	eor.w	r3, r3, #16
 80075b0:	81bb      	strh	r3, [r7, #12]
 80075b2:	687a      	ldr	r2, [r7, #4]
 80075b4:	683b      	ldr	r3, [r7, #0]
 80075b6:	781b      	ldrb	r3, [r3, #0]
 80075b8:	009b      	lsls	r3, r3, #2
 80075ba:	441a      	add	r2, r3
 80075bc:	89bb      	ldrh	r3, [r7, #12]
 80075be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80075c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80075c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80075ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80075ce:	b29b      	uxth	r3, r3
 80075d0:	8013      	strh	r3, [r2, #0]
 80075d2:	e01f      	b.n	8007614 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80075d4:	687a      	ldr	r2, [r7, #4]
 80075d6:	683b      	ldr	r3, [r7, #0]
 80075d8:	781b      	ldrb	r3, [r3, #0]
 80075da:	009b      	lsls	r3, r3, #2
 80075dc:	4413      	add	r3, r2
 80075de:	881b      	ldrh	r3, [r3, #0]
 80075e0:	b29b      	uxth	r3, r3
 80075e2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80075e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075ea:	81fb      	strh	r3, [r7, #14]
 80075ec:	89fb      	ldrh	r3, [r7, #14]
 80075ee:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80075f2:	81fb      	strh	r3, [r7, #14]
 80075f4:	687a      	ldr	r2, [r7, #4]
 80075f6:	683b      	ldr	r3, [r7, #0]
 80075f8:	781b      	ldrb	r3, [r3, #0]
 80075fa:	009b      	lsls	r3, r3, #2
 80075fc:	441a      	add	r2, r3
 80075fe:	89fb      	ldrh	r3, [r7, #14]
 8007600:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007604:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007608:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800760c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007610:	b29b      	uxth	r3, r3
 8007612:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007614:	2300      	movs	r3, #0
}
 8007616:	4618      	mov	r0, r3
 8007618:	3714      	adds	r7, #20
 800761a:	46bd      	mov	sp, r7
 800761c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007620:	4770      	bx	lr

08007622 <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007622:	b480      	push	{r7}
 8007624:	b087      	sub	sp, #28
 8007626:	af00      	add	r7, sp, #0
 8007628:	6078      	str	r0, [r7, #4]
 800762a:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800762c:	683b      	ldr	r3, [r7, #0]
 800762e:	7b1b      	ldrb	r3, [r3, #12]
 8007630:	2b00      	cmp	r3, #0
 8007632:	f040 809d 	bne.w	8007770 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8007636:	683b      	ldr	r3, [r7, #0]
 8007638:	785b      	ldrb	r3, [r3, #1]
 800763a:	2b00      	cmp	r3, #0
 800763c:	d04c      	beq.n	80076d8 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800763e:	687a      	ldr	r2, [r7, #4]
 8007640:	683b      	ldr	r3, [r7, #0]
 8007642:	781b      	ldrb	r3, [r3, #0]
 8007644:	009b      	lsls	r3, r3, #2
 8007646:	4413      	add	r3, r2
 8007648:	881b      	ldrh	r3, [r3, #0]
 800764a:	823b      	strh	r3, [r7, #16]
 800764c:	8a3b      	ldrh	r3, [r7, #16]
 800764e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007652:	2b00      	cmp	r3, #0
 8007654:	d01b      	beq.n	800768e <USB_EPClearStall+0x6c>
 8007656:	687a      	ldr	r2, [r7, #4]
 8007658:	683b      	ldr	r3, [r7, #0]
 800765a:	781b      	ldrb	r3, [r3, #0]
 800765c:	009b      	lsls	r3, r3, #2
 800765e:	4413      	add	r3, r2
 8007660:	881b      	ldrh	r3, [r3, #0]
 8007662:	b29b      	uxth	r3, r3
 8007664:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007668:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800766c:	81fb      	strh	r3, [r7, #14]
 800766e:	687a      	ldr	r2, [r7, #4]
 8007670:	683b      	ldr	r3, [r7, #0]
 8007672:	781b      	ldrb	r3, [r3, #0]
 8007674:	009b      	lsls	r3, r3, #2
 8007676:	441a      	add	r2, r3
 8007678:	89fb      	ldrh	r3, [r7, #14]
 800767a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800767e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007682:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007686:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800768a:	b29b      	uxth	r3, r3
 800768c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800768e:	683b      	ldr	r3, [r7, #0]
 8007690:	78db      	ldrb	r3, [r3, #3]
 8007692:	2b01      	cmp	r3, #1
 8007694:	d06c      	beq.n	8007770 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007696:	687a      	ldr	r2, [r7, #4]
 8007698:	683b      	ldr	r3, [r7, #0]
 800769a:	781b      	ldrb	r3, [r3, #0]
 800769c:	009b      	lsls	r3, r3, #2
 800769e:	4413      	add	r3, r2
 80076a0:	881b      	ldrh	r3, [r3, #0]
 80076a2:	b29b      	uxth	r3, r3
 80076a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80076a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80076ac:	81bb      	strh	r3, [r7, #12]
 80076ae:	89bb      	ldrh	r3, [r7, #12]
 80076b0:	f083 0320 	eor.w	r3, r3, #32
 80076b4:	81bb      	strh	r3, [r7, #12]
 80076b6:	687a      	ldr	r2, [r7, #4]
 80076b8:	683b      	ldr	r3, [r7, #0]
 80076ba:	781b      	ldrb	r3, [r3, #0]
 80076bc:	009b      	lsls	r3, r3, #2
 80076be:	441a      	add	r2, r3
 80076c0:	89bb      	ldrh	r3, [r7, #12]
 80076c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80076c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80076ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80076ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80076d2:	b29b      	uxth	r3, r3
 80076d4:	8013      	strh	r3, [r2, #0]
 80076d6:	e04b      	b.n	8007770 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80076d8:	687a      	ldr	r2, [r7, #4]
 80076da:	683b      	ldr	r3, [r7, #0]
 80076dc:	781b      	ldrb	r3, [r3, #0]
 80076de:	009b      	lsls	r3, r3, #2
 80076e0:	4413      	add	r3, r2
 80076e2:	881b      	ldrh	r3, [r3, #0]
 80076e4:	82fb      	strh	r3, [r7, #22]
 80076e6:	8afb      	ldrh	r3, [r7, #22]
 80076e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d01b      	beq.n	8007728 <USB_EPClearStall+0x106>
 80076f0:	687a      	ldr	r2, [r7, #4]
 80076f2:	683b      	ldr	r3, [r7, #0]
 80076f4:	781b      	ldrb	r3, [r3, #0]
 80076f6:	009b      	lsls	r3, r3, #2
 80076f8:	4413      	add	r3, r2
 80076fa:	881b      	ldrh	r3, [r3, #0]
 80076fc:	b29b      	uxth	r3, r3
 80076fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007702:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007706:	82bb      	strh	r3, [r7, #20]
 8007708:	687a      	ldr	r2, [r7, #4]
 800770a:	683b      	ldr	r3, [r7, #0]
 800770c:	781b      	ldrb	r3, [r3, #0]
 800770e:	009b      	lsls	r3, r3, #2
 8007710:	441a      	add	r2, r3
 8007712:	8abb      	ldrh	r3, [r7, #20]
 8007714:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007718:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800771c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007720:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007724:	b29b      	uxth	r3, r3
 8007726:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007728:	687a      	ldr	r2, [r7, #4]
 800772a:	683b      	ldr	r3, [r7, #0]
 800772c:	781b      	ldrb	r3, [r3, #0]
 800772e:	009b      	lsls	r3, r3, #2
 8007730:	4413      	add	r3, r2
 8007732:	881b      	ldrh	r3, [r3, #0]
 8007734:	b29b      	uxth	r3, r3
 8007736:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800773a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800773e:	827b      	strh	r3, [r7, #18]
 8007740:	8a7b      	ldrh	r3, [r7, #18]
 8007742:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007746:	827b      	strh	r3, [r7, #18]
 8007748:	8a7b      	ldrh	r3, [r7, #18]
 800774a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800774e:	827b      	strh	r3, [r7, #18]
 8007750:	687a      	ldr	r2, [r7, #4]
 8007752:	683b      	ldr	r3, [r7, #0]
 8007754:	781b      	ldrb	r3, [r3, #0]
 8007756:	009b      	lsls	r3, r3, #2
 8007758:	441a      	add	r2, r3
 800775a:	8a7b      	ldrh	r3, [r7, #18]
 800775c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007760:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007764:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007768:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800776c:	b29b      	uxth	r3, r3
 800776e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8007770:	2300      	movs	r3, #0
}
 8007772:	4618      	mov	r0, r3
 8007774:	371c      	adds	r7, #28
 8007776:	46bd      	mov	sp, r7
 8007778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777c:	4770      	bx	lr

0800777e <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800777e:	b480      	push	{r7}
 8007780:	b083      	sub	sp, #12
 8007782:	af00      	add	r7, sp, #0
 8007784:	6078      	str	r0, [r7, #4]
 8007786:	460b      	mov	r3, r1
 8007788:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800778a:	78fb      	ldrb	r3, [r7, #3]
 800778c:	2b00      	cmp	r3, #0
 800778e:	d103      	bne.n	8007798 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	2280      	movs	r2, #128	; 0x80
 8007794:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8007798:	2300      	movs	r3, #0
}
 800779a:	4618      	mov	r0, r3
 800779c:	370c      	adds	r7, #12
 800779e:	46bd      	mov	sp, r7
 80077a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a4:	4770      	bx	lr

080077a6 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80077a6:	b480      	push	{r7}
 80077a8:	b083      	sub	sp, #12
 80077aa:	af00      	add	r7, sp, #0
 80077ac:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80077b4:	b29b      	uxth	r3, r3
 80077b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80077ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80077be:	b29a      	uxth	r2, r3
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 80077c6:	2300      	movs	r3, #0
}
 80077c8:	4618      	mov	r0, r3
 80077ca:	370c      	adds	r7, #12
 80077cc:	46bd      	mov	sp, r7
 80077ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d2:	4770      	bx	lr

080077d4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 80077d4:	b480      	push	{r7}
 80077d6:	b085      	sub	sp, #20
 80077d8:	af00      	add	r7, sp, #0
 80077da:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80077e2:	b29b      	uxth	r3, r3
 80077e4:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80077e6:	68fb      	ldr	r3, [r7, #12]
}
 80077e8:	4618      	mov	r0, r3
 80077ea:	3714      	adds	r7, #20
 80077ec:	46bd      	mov	sp, r7
 80077ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f2:	4770      	bx	lr

080077f4 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 80077f4:	b480      	push	{r7}
 80077f6:	b083      	sub	sp, #12
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	6078      	str	r0, [r7, #4]
 80077fc:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80077fe:	2300      	movs	r3, #0
}
 8007800:	4618      	mov	r0, r3
 8007802:	370c      	adds	r7, #12
 8007804:	46bd      	mov	sp, r7
 8007806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780a:	4770      	bx	lr

0800780c <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800780c:	b480      	push	{r7}
 800780e:	b08d      	sub	sp, #52	; 0x34
 8007810:	af00      	add	r7, sp, #0
 8007812:	60f8      	str	r0, [r7, #12]
 8007814:	60b9      	str	r1, [r7, #8]
 8007816:	4611      	mov	r1, r2
 8007818:	461a      	mov	r2, r3
 800781a:	460b      	mov	r3, r1
 800781c:	80fb      	strh	r3, [r7, #6]
 800781e:	4613      	mov	r3, r2
 8007820:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007822:	88bb      	ldrh	r3, [r7, #4]
 8007824:	3301      	adds	r3, #1
 8007826:	085b      	lsrs	r3, r3, #1
 8007828:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800782e:	68bb      	ldr	r3, [r7, #8]
 8007830:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007832:	88fa      	ldrh	r2, [r7, #6]
 8007834:	69fb      	ldr	r3, [r7, #28]
 8007836:	4413      	add	r3, r2
 8007838:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800783c:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800783e:	6a3b      	ldr	r3, [r7, #32]
 8007840:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007842:	e01b      	b.n	800787c <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 8007844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007846:	781b      	ldrb	r3, [r3, #0]
 8007848:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800784a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800784c:	3301      	adds	r3, #1
 800784e:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8007850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007852:	781b      	ldrb	r3, [r3, #0]
 8007854:	b29b      	uxth	r3, r3
 8007856:	021b      	lsls	r3, r3, #8
 8007858:	b29b      	uxth	r3, r3
 800785a:	461a      	mov	r2, r3
 800785c:	69bb      	ldr	r3, [r7, #24]
 800785e:	4313      	orrs	r3, r2
 8007860:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8007862:	697b      	ldr	r3, [r7, #20]
 8007864:	b29a      	uxth	r2, r3
 8007866:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007868:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800786a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800786c:	3302      	adds	r3, #2
 800786e:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 8007870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007872:	3301      	adds	r3, #1
 8007874:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8007876:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007878:	3b01      	subs	r3, #1
 800787a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800787c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800787e:	2b00      	cmp	r3, #0
 8007880:	d1e0      	bne.n	8007844 <USB_WritePMA+0x38>
  }
}
 8007882:	bf00      	nop
 8007884:	3734      	adds	r7, #52	; 0x34
 8007886:	46bd      	mov	sp, r7
 8007888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788c:	4770      	bx	lr

0800788e <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800788e:	b480      	push	{r7}
 8007890:	b08b      	sub	sp, #44	; 0x2c
 8007892:	af00      	add	r7, sp, #0
 8007894:	60f8      	str	r0, [r7, #12]
 8007896:	60b9      	str	r1, [r7, #8]
 8007898:	4611      	mov	r1, r2
 800789a:	461a      	mov	r2, r3
 800789c:	460b      	mov	r3, r1
 800789e:	80fb      	strh	r3, [r7, #6]
 80078a0:	4613      	mov	r3, r2
 80078a2:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80078a4:	88bb      	ldrh	r3, [r7, #4]
 80078a6:	085b      	lsrs	r3, r3, #1
 80078a8:	b29b      	uxth	r3, r3
 80078aa:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80078b0:	68bb      	ldr	r3, [r7, #8]
 80078b2:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80078b4:	88fa      	ldrh	r2, [r7, #6]
 80078b6:	697b      	ldr	r3, [r7, #20]
 80078b8:	4413      	add	r3, r2
 80078ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80078be:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 80078c0:	69bb      	ldr	r3, [r7, #24]
 80078c2:	627b      	str	r3, [r7, #36]	; 0x24
 80078c4:	e018      	b.n	80078f8 <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 80078c6:	6a3b      	ldr	r3, [r7, #32]
 80078c8:	881b      	ldrh	r3, [r3, #0]
 80078ca:	b29b      	uxth	r3, r3
 80078cc:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80078ce:	6a3b      	ldr	r3, [r7, #32]
 80078d0:	3302      	adds	r3, #2
 80078d2:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80078d4:	693b      	ldr	r3, [r7, #16]
 80078d6:	b2da      	uxtb	r2, r3
 80078d8:	69fb      	ldr	r3, [r7, #28]
 80078da:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80078dc:	69fb      	ldr	r3, [r7, #28]
 80078de:	3301      	adds	r3, #1
 80078e0:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 80078e2:	693b      	ldr	r3, [r7, #16]
 80078e4:	0a1b      	lsrs	r3, r3, #8
 80078e6:	b2da      	uxtb	r2, r3
 80078e8:	69fb      	ldr	r3, [r7, #28]
 80078ea:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80078ec:	69fb      	ldr	r3, [r7, #28]
 80078ee:	3301      	adds	r3, #1
 80078f0:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 80078f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078f4:	3b01      	subs	r3, #1
 80078f6:	627b      	str	r3, [r7, #36]	; 0x24
 80078f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d1e3      	bne.n	80078c6 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 80078fe:	88bb      	ldrh	r3, [r7, #4]
 8007900:	f003 0301 	and.w	r3, r3, #1
 8007904:	b29b      	uxth	r3, r3
 8007906:	2b00      	cmp	r3, #0
 8007908:	d007      	beq.n	800791a <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 800790a:	6a3b      	ldr	r3, [r7, #32]
 800790c:	881b      	ldrh	r3, [r3, #0]
 800790e:	b29b      	uxth	r3, r3
 8007910:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8007912:	693b      	ldr	r3, [r7, #16]
 8007914:	b2da      	uxtb	r2, r3
 8007916:	69fb      	ldr	r3, [r7, #28]
 8007918:	701a      	strb	r2, [r3, #0]
  }
}
 800791a:	bf00      	nop
 800791c:	372c      	adds	r7, #44	; 0x2c
 800791e:	46bd      	mov	sp, r7
 8007920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007924:	4770      	bx	lr

08007926 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007926:	b580      	push	{r7, lr}
 8007928:	b084      	sub	sp, #16
 800792a:	af00      	add	r7, sp, #0
 800792c:	6078      	str	r0, [r7, #4]
 800792e:	460b      	mov	r3, r1
 8007930:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007932:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007936:	f002 f89d 	bl	8009a74 <USBD_static_malloc>
 800793a:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	2b00      	cmp	r3, #0
 8007940:	d105      	bne.n	800794e <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	2200      	movs	r2, #0
 8007946:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800794a:	2302      	movs	r3, #2
 800794c:	e066      	b.n	8007a1c <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	68fa      	ldr	r2, [r7, #12]
 8007952:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	7c1b      	ldrb	r3, [r3, #16]
 800795a:	2b00      	cmp	r3, #0
 800795c:	d119      	bne.n	8007992 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800795e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007962:	2202      	movs	r2, #2
 8007964:	2181      	movs	r1, #129	; 0x81
 8007966:	6878      	ldr	r0, [r7, #4]
 8007968:	f001 ff29 	bl	80097be <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	2201      	movs	r2, #1
 8007970:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007972:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007976:	2202      	movs	r2, #2
 8007978:	2101      	movs	r1, #1
 800797a:	6878      	ldr	r0, [r7, #4]
 800797c:	f001 ff1f 	bl	80097be <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	2201      	movs	r2, #1
 8007984:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	2210      	movs	r2, #16
 800798c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8007990:	e016      	b.n	80079c0 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007992:	2340      	movs	r3, #64	; 0x40
 8007994:	2202      	movs	r2, #2
 8007996:	2181      	movs	r1, #129	; 0x81
 8007998:	6878      	ldr	r0, [r7, #4]
 800799a:	f001 ff10 	bl	80097be <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	2201      	movs	r2, #1
 80079a2:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80079a4:	2340      	movs	r3, #64	; 0x40
 80079a6:	2202      	movs	r2, #2
 80079a8:	2101      	movs	r1, #1
 80079aa:	6878      	ldr	r0, [r7, #4]
 80079ac:	f001 ff07 	bl	80097be <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	2201      	movs	r2, #1
 80079b4:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	2210      	movs	r2, #16
 80079bc:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80079c0:	2308      	movs	r3, #8
 80079c2:	2203      	movs	r2, #3
 80079c4:	2182      	movs	r1, #130	; 0x82
 80079c6:	6878      	ldr	r0, [r7, #4]
 80079c8:	f001 fef9 	bl	80097be <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	2201      	movs	r2, #1
 80079d0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	2200      	movs	r2, #0
 80079e2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	2200      	movs	r2, #0
 80079ea:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	7c1b      	ldrb	r3, [r3, #16]
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d109      	bne.n	8007a0a <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80079fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007a00:	2101      	movs	r1, #1
 8007a02:	6878      	ldr	r0, [r7, #4]
 8007a04:	f001 ffcb 	bl	800999e <USBD_LL_PrepareReceive>
 8007a08:	e007      	b.n	8007a1a <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007a10:	2340      	movs	r3, #64	; 0x40
 8007a12:	2101      	movs	r1, #1
 8007a14:	6878      	ldr	r0, [r7, #4]
 8007a16:	f001 ffc2 	bl	800999e <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007a1a:	2300      	movs	r3, #0
}
 8007a1c:	4618      	mov	r0, r3
 8007a1e:	3710      	adds	r7, #16
 8007a20:	46bd      	mov	sp, r7
 8007a22:	bd80      	pop	{r7, pc}

08007a24 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007a24:	b580      	push	{r7, lr}
 8007a26:	b082      	sub	sp, #8
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	6078      	str	r0, [r7, #4]
 8007a2c:	460b      	mov	r3, r1
 8007a2e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8007a30:	2181      	movs	r1, #129	; 0x81
 8007a32:	6878      	ldr	r0, [r7, #4]
 8007a34:	f001 fee9 	bl	800980a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	2200      	movs	r2, #0
 8007a3c:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8007a3e:	2101      	movs	r1, #1
 8007a40:	6878      	ldr	r0, [r7, #4]
 8007a42:	f001 fee2 	bl	800980a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	2200      	movs	r2, #0
 8007a4a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8007a4e:	2182      	movs	r1, #130	; 0x82
 8007a50:	6878      	ldr	r0, [r7, #4]
 8007a52:	f001 feda 	bl	800980a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	2200      	movs	r2, #0
 8007a5a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	2200      	movs	r2, #0
 8007a62:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d00e      	beq.n	8007a8e <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007a76:	685b      	ldr	r3, [r3, #4]
 8007a78:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007a80:	4618      	mov	r0, r3
 8007a82:	f002 f805 	bl	8009a90 <USBD_static_free>
    pdev->pClassData = NULL;
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	2200      	movs	r2, #0
 8007a8a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007a8e:	2300      	movs	r3, #0
}
 8007a90:	4618      	mov	r0, r3
 8007a92:	3708      	adds	r7, #8
 8007a94:	46bd      	mov	sp, r7
 8007a96:	bd80      	pop	{r7, pc}

08007a98 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007a98:	b580      	push	{r7, lr}
 8007a9a:	b086      	sub	sp, #24
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	6078      	str	r0, [r7, #4]
 8007aa0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007aa8:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8007aaa:	2300      	movs	r3, #0
 8007aac:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8007aae:	2300      	movs	r3, #0
 8007ab0:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8007ab2:	2300      	movs	r3, #0
 8007ab4:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007ab6:	683b      	ldr	r3, [r7, #0]
 8007ab8:	781b      	ldrb	r3, [r3, #0]
 8007aba:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d03a      	beq.n	8007b38 <USBD_CDC_Setup+0xa0>
 8007ac2:	2b20      	cmp	r3, #32
 8007ac4:	f040 8097 	bne.w	8007bf6 <USBD_CDC_Setup+0x15e>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8007ac8:	683b      	ldr	r3, [r7, #0]
 8007aca:	88db      	ldrh	r3, [r3, #6]
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d029      	beq.n	8007b24 <USBD_CDC_Setup+0x8c>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8007ad0:	683b      	ldr	r3, [r7, #0]
 8007ad2:	781b      	ldrb	r3, [r3, #0]
 8007ad4:	b25b      	sxtb	r3, r3
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	da11      	bge.n	8007afe <USBD_CDC_Setup+0x66>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007ae0:	689b      	ldr	r3, [r3, #8]
 8007ae2:	683a      	ldr	r2, [r7, #0]
 8007ae4:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8007ae6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007ae8:	683a      	ldr	r2, [r7, #0]
 8007aea:	88d2      	ldrh	r2, [r2, #6]
 8007aec:	4798      	blx	r3
                                                            req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 8007aee:	6939      	ldr	r1, [r7, #16]
 8007af0:	683b      	ldr	r3, [r7, #0]
 8007af2:	88db      	ldrh	r3, [r3, #6]
 8007af4:	461a      	mov	r2, r3
 8007af6:	6878      	ldr	r0, [r7, #4]
 8007af8:	f001 fa8d 	bl	8009016 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8007afc:	e082      	b.n	8007c04 <USBD_CDC_Setup+0x16c>
          hcdc->CmdOpCode = req->bRequest;
 8007afe:	683b      	ldr	r3, [r7, #0]
 8007b00:	785a      	ldrb	r2, [r3, #1]
 8007b02:	693b      	ldr	r3, [r7, #16]
 8007b04:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8007b08:	683b      	ldr	r3, [r7, #0]
 8007b0a:	88db      	ldrh	r3, [r3, #6]
 8007b0c:	b2da      	uxtb	r2, r3
 8007b0e:	693b      	ldr	r3, [r7, #16]
 8007b10:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8007b14:	6939      	ldr	r1, [r7, #16]
 8007b16:	683b      	ldr	r3, [r7, #0]
 8007b18:	88db      	ldrh	r3, [r3, #6]
 8007b1a:	461a      	mov	r2, r3
 8007b1c:	6878      	ldr	r0, [r7, #4]
 8007b1e:	f001 faa6 	bl	800906e <USBD_CtlPrepareRx>
      break;
 8007b22:	e06f      	b.n	8007c04 <USBD_CDC_Setup+0x16c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007b2a:	689b      	ldr	r3, [r3, #8]
 8007b2c:	683a      	ldr	r2, [r7, #0]
 8007b2e:	7850      	ldrb	r0, [r2, #1]
 8007b30:	2200      	movs	r2, #0
 8007b32:	6839      	ldr	r1, [r7, #0]
 8007b34:	4798      	blx	r3
      break;
 8007b36:	e065      	b.n	8007c04 <USBD_CDC_Setup+0x16c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007b38:	683b      	ldr	r3, [r7, #0]
 8007b3a:	785b      	ldrb	r3, [r3, #1]
 8007b3c:	2b0b      	cmp	r3, #11
 8007b3e:	d84f      	bhi.n	8007be0 <USBD_CDC_Setup+0x148>
 8007b40:	a201      	add	r2, pc, #4	; (adr r2, 8007b48 <USBD_CDC_Setup+0xb0>)
 8007b42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b46:	bf00      	nop
 8007b48:	08007b79 	.word	0x08007b79
 8007b4c:	08007bef 	.word	0x08007bef
 8007b50:	08007be1 	.word	0x08007be1
 8007b54:	08007be1 	.word	0x08007be1
 8007b58:	08007be1 	.word	0x08007be1
 8007b5c:	08007be1 	.word	0x08007be1
 8007b60:	08007be1 	.word	0x08007be1
 8007b64:	08007be1 	.word	0x08007be1
 8007b68:	08007be1 	.word	0x08007be1
 8007b6c:	08007be1 	.word	0x08007be1
 8007b70:	08007ba1 	.word	0x08007ba1
 8007b74:	08007bc9 	.word	0x08007bc9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b7e:	2b03      	cmp	r3, #3
 8007b80:	d107      	bne.n	8007b92 <USBD_CDC_Setup+0xfa>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007b82:	f107 030c 	add.w	r3, r7, #12
 8007b86:	2202      	movs	r2, #2
 8007b88:	4619      	mov	r1, r3
 8007b8a:	6878      	ldr	r0, [r7, #4]
 8007b8c:	f001 fa43 	bl	8009016 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007b90:	e030      	b.n	8007bf4 <USBD_CDC_Setup+0x15c>
            USBD_CtlError(pdev, req);
 8007b92:	6839      	ldr	r1, [r7, #0]
 8007b94:	6878      	ldr	r0, [r7, #4]
 8007b96:	f001 f9cd 	bl	8008f34 <USBD_CtlError>
            ret = USBD_FAIL;
 8007b9a:	2303      	movs	r3, #3
 8007b9c:	75fb      	strb	r3, [r7, #23]
          break;
 8007b9e:	e029      	b.n	8007bf4 <USBD_CDC_Setup+0x15c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ba6:	2b03      	cmp	r3, #3
 8007ba8:	d107      	bne.n	8007bba <USBD_CDC_Setup+0x122>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007baa:	f107 030f 	add.w	r3, r7, #15
 8007bae:	2201      	movs	r2, #1
 8007bb0:	4619      	mov	r1, r3
 8007bb2:	6878      	ldr	r0, [r7, #4]
 8007bb4:	f001 fa2f 	bl	8009016 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007bb8:	e01c      	b.n	8007bf4 <USBD_CDC_Setup+0x15c>
            USBD_CtlError(pdev, req);
 8007bba:	6839      	ldr	r1, [r7, #0]
 8007bbc:	6878      	ldr	r0, [r7, #4]
 8007bbe:	f001 f9b9 	bl	8008f34 <USBD_CtlError>
            ret = USBD_FAIL;
 8007bc2:	2303      	movs	r3, #3
 8007bc4:	75fb      	strb	r3, [r7, #23]
          break;
 8007bc6:	e015      	b.n	8007bf4 <USBD_CDC_Setup+0x15c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007bce:	2b03      	cmp	r3, #3
 8007bd0:	d00f      	beq.n	8007bf2 <USBD_CDC_Setup+0x15a>
          {
            USBD_CtlError(pdev, req);
 8007bd2:	6839      	ldr	r1, [r7, #0]
 8007bd4:	6878      	ldr	r0, [r7, #4]
 8007bd6:	f001 f9ad 	bl	8008f34 <USBD_CtlError>
            ret = USBD_FAIL;
 8007bda:	2303      	movs	r3, #3
 8007bdc:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007bde:	e008      	b.n	8007bf2 <USBD_CDC_Setup+0x15a>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007be0:	6839      	ldr	r1, [r7, #0]
 8007be2:	6878      	ldr	r0, [r7, #4]
 8007be4:	f001 f9a6 	bl	8008f34 <USBD_CtlError>
          ret = USBD_FAIL;
 8007be8:	2303      	movs	r3, #3
 8007bea:	75fb      	strb	r3, [r7, #23]
          break;
 8007bec:	e002      	b.n	8007bf4 <USBD_CDC_Setup+0x15c>
          break;
 8007bee:	bf00      	nop
 8007bf0:	e008      	b.n	8007c04 <USBD_CDC_Setup+0x16c>
          break;
 8007bf2:	bf00      	nop
      }
      break;
 8007bf4:	e006      	b.n	8007c04 <USBD_CDC_Setup+0x16c>

    default:
      USBD_CtlError(pdev, req);
 8007bf6:	6839      	ldr	r1, [r7, #0]
 8007bf8:	6878      	ldr	r0, [r7, #4]
 8007bfa:	f001 f99b 	bl	8008f34 <USBD_CtlError>
      ret = USBD_FAIL;
 8007bfe:	2303      	movs	r3, #3
 8007c00:	75fb      	strb	r3, [r7, #23]
      break;
 8007c02:	bf00      	nop
  }

  return (uint8_t)ret;
 8007c04:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c06:	4618      	mov	r0, r3
 8007c08:	3718      	adds	r7, #24
 8007c0a:	46bd      	mov	sp, r7
 8007c0c:	bd80      	pop	{r7, pc}
 8007c0e:	bf00      	nop

08007c10 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007c10:	b580      	push	{r7, lr}
 8007c12:	b084      	sub	sp, #16
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	6078      	str	r0, [r7, #4]
 8007c18:	460b      	mov	r3, r1
 8007c1a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007c22:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d101      	bne.n	8007c32 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007c2e:	2303      	movs	r3, #3
 8007c30:	e04f      	b.n	8007cd2 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007c38:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8007c3a:	78fa      	ldrb	r2, [r7, #3]
 8007c3c:	6879      	ldr	r1, [r7, #4]
 8007c3e:	4613      	mov	r3, r2
 8007c40:	009b      	lsls	r3, r3, #2
 8007c42:	4413      	add	r3, r2
 8007c44:	009b      	lsls	r3, r3, #2
 8007c46:	440b      	add	r3, r1
 8007c48:	3318      	adds	r3, #24
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d029      	beq.n	8007ca4 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8007c50:	78fa      	ldrb	r2, [r7, #3]
 8007c52:	6879      	ldr	r1, [r7, #4]
 8007c54:	4613      	mov	r3, r2
 8007c56:	009b      	lsls	r3, r3, #2
 8007c58:	4413      	add	r3, r2
 8007c5a:	009b      	lsls	r3, r3, #2
 8007c5c:	440b      	add	r3, r1
 8007c5e:	3318      	adds	r3, #24
 8007c60:	681a      	ldr	r2, [r3, #0]
 8007c62:	78f9      	ldrb	r1, [r7, #3]
 8007c64:	68f8      	ldr	r0, [r7, #12]
 8007c66:	460b      	mov	r3, r1
 8007c68:	009b      	lsls	r3, r3, #2
 8007c6a:	440b      	add	r3, r1
 8007c6c:	00db      	lsls	r3, r3, #3
 8007c6e:	4403      	add	r3, r0
 8007c70:	3338      	adds	r3, #56	; 0x38
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	fbb2 f1f3 	udiv	r1, r2, r3
 8007c78:	fb03 f301 	mul.w	r3, r3, r1
 8007c7c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d110      	bne.n	8007ca4 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8007c82:	78fa      	ldrb	r2, [r7, #3]
 8007c84:	6879      	ldr	r1, [r7, #4]
 8007c86:	4613      	mov	r3, r2
 8007c88:	009b      	lsls	r3, r3, #2
 8007c8a:	4413      	add	r3, r2
 8007c8c:	009b      	lsls	r3, r3, #2
 8007c8e:	440b      	add	r3, r1
 8007c90:	3318      	adds	r3, #24
 8007c92:	2200      	movs	r2, #0
 8007c94:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007c96:	78f9      	ldrb	r1, [r7, #3]
 8007c98:	2300      	movs	r3, #0
 8007c9a:	2200      	movs	r2, #0
 8007c9c:	6878      	ldr	r0, [r7, #4]
 8007c9e:	f001 fe5d 	bl	800995c <USBD_LL_Transmit>
 8007ca2:	e015      	b.n	8007cd0 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8007ca4:	68bb      	ldr	r3, [r7, #8]
 8007ca6:	2200      	movs	r2, #0
 8007ca8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007cb2:	691b      	ldr	r3, [r3, #16]
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d00b      	beq.n	8007cd0 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007cbe:	691b      	ldr	r3, [r3, #16]
 8007cc0:	68ba      	ldr	r2, [r7, #8]
 8007cc2:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8007cc6:	68ba      	ldr	r2, [r7, #8]
 8007cc8:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8007ccc:	78fa      	ldrb	r2, [r7, #3]
 8007cce:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8007cd0:	2300      	movs	r3, #0
}
 8007cd2:	4618      	mov	r0, r3
 8007cd4:	3710      	adds	r7, #16
 8007cd6:	46bd      	mov	sp, r7
 8007cd8:	bd80      	pop	{r7, pc}

08007cda <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007cda:	b580      	push	{r7, lr}
 8007cdc:	b084      	sub	sp, #16
 8007cde:	af00      	add	r7, sp, #0
 8007ce0:	6078      	str	r0, [r7, #4]
 8007ce2:	460b      	mov	r3, r1
 8007ce4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007cec:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d101      	bne.n	8007cfc <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007cf8:	2303      	movs	r3, #3
 8007cfa:	e015      	b.n	8007d28 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007cfc:	78fb      	ldrb	r3, [r7, #3]
 8007cfe:	4619      	mov	r1, r3
 8007d00:	6878      	ldr	r0, [r7, #4]
 8007d02:	f001 fe6d 	bl	80099e0 <USBD_LL_GetRxDataSize>
 8007d06:	4602      	mov	r2, r0
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007d14:	68db      	ldr	r3, [r3, #12]
 8007d16:	68fa      	ldr	r2, [r7, #12]
 8007d18:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007d1c:	68fa      	ldr	r2, [r7, #12]
 8007d1e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007d22:	4611      	mov	r1, r2
 8007d24:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007d26:	2300      	movs	r3, #0
}
 8007d28:	4618      	mov	r0, r3
 8007d2a:	3710      	adds	r7, #16
 8007d2c:	46bd      	mov	sp, r7
 8007d2e:	bd80      	pop	{r7, pc}

08007d30 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007d30:	b580      	push	{r7, lr}
 8007d32:	b084      	sub	sp, #16
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007d3e:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d015      	beq.n	8007d76 <USBD_CDC_EP0_RxReady+0x46>
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007d50:	2bff      	cmp	r3, #255	; 0xff
 8007d52:	d010      	beq.n	8007d76 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007d5a:	689b      	ldr	r3, [r3, #8]
 8007d5c:	68fa      	ldr	r2, [r7, #12]
 8007d5e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8007d62:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8007d64:	68fa      	ldr	r2, [r7, #12]
 8007d66:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007d6a:	b292      	uxth	r2, r2
 8007d6c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	22ff      	movs	r2, #255	; 0xff
 8007d72:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8007d76:	2300      	movs	r3, #0
}
 8007d78:	4618      	mov	r0, r3
 8007d7a:	3710      	adds	r7, #16
 8007d7c:	46bd      	mov	sp, r7
 8007d7e:	bd80      	pop	{r7, pc}

08007d80 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007d80:	b480      	push	{r7}
 8007d82:	b083      	sub	sp, #12
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	2243      	movs	r2, #67	; 0x43
 8007d8c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8007d8e:	4b03      	ldr	r3, [pc, #12]	; (8007d9c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8007d90:	4618      	mov	r0, r3
 8007d92:	370c      	adds	r7, #12
 8007d94:	46bd      	mov	sp, r7
 8007d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9a:	4770      	bx	lr
 8007d9c:	200000e8 	.word	0x200000e8

08007da0 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007da0:	b480      	push	{r7}
 8007da2:	b083      	sub	sp, #12
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	2243      	movs	r2, #67	; 0x43
 8007dac:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8007dae:	4b03      	ldr	r3, [pc, #12]	; (8007dbc <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8007db0:	4618      	mov	r0, r3
 8007db2:	370c      	adds	r7, #12
 8007db4:	46bd      	mov	sp, r7
 8007db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dba:	4770      	bx	lr
 8007dbc:	200000a4 	.word	0x200000a4

08007dc0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007dc0:	b480      	push	{r7}
 8007dc2:	b083      	sub	sp, #12
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	2243      	movs	r2, #67	; 0x43
 8007dcc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8007dce:	4b03      	ldr	r3, [pc, #12]	; (8007ddc <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8007dd0:	4618      	mov	r0, r3
 8007dd2:	370c      	adds	r7, #12
 8007dd4:	46bd      	mov	sp, r7
 8007dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dda:	4770      	bx	lr
 8007ddc:	2000012c 	.word	0x2000012c

08007de0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007de0:	b480      	push	{r7}
 8007de2:	b083      	sub	sp, #12
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	220a      	movs	r2, #10
 8007dec:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8007dee:	4b03      	ldr	r3, [pc, #12]	; (8007dfc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007df0:	4618      	mov	r0, r3
 8007df2:	370c      	adds	r7, #12
 8007df4:	46bd      	mov	sp, r7
 8007df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfa:	4770      	bx	lr
 8007dfc:	20000060 	.word	0x20000060

08007e00 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007e00:	b480      	push	{r7}
 8007e02:	b083      	sub	sp, #12
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	6078      	str	r0, [r7, #4]
 8007e08:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007e0a:	683b      	ldr	r3, [r7, #0]
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d101      	bne.n	8007e14 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007e10:	2303      	movs	r3, #3
 8007e12:	e004      	b.n	8007e1e <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	683a      	ldr	r2, [r7, #0]
 8007e18:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8007e1c:	2300      	movs	r3, #0
}
 8007e1e:	4618      	mov	r0, r3
 8007e20:	370c      	adds	r7, #12
 8007e22:	46bd      	mov	sp, r7
 8007e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e28:	4770      	bx	lr

08007e2a <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007e2a:	b480      	push	{r7}
 8007e2c:	b087      	sub	sp, #28
 8007e2e:	af00      	add	r7, sp, #0
 8007e30:	60f8      	str	r0, [r7, #12]
 8007e32:	60b9      	str	r1, [r7, #8]
 8007e34:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007e3c:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8007e3e:	697b      	ldr	r3, [r7, #20]
 8007e40:	68ba      	ldr	r2, [r7, #8]
 8007e42:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007e46:	697b      	ldr	r3, [r7, #20]
 8007e48:	687a      	ldr	r2, [r7, #4]
 8007e4a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8007e4e:	2300      	movs	r3, #0
}
 8007e50:	4618      	mov	r0, r3
 8007e52:	371c      	adds	r7, #28
 8007e54:	46bd      	mov	sp, r7
 8007e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e5a:	4770      	bx	lr

08007e5c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007e5c:	b480      	push	{r7}
 8007e5e:	b085      	sub	sp, #20
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	6078      	str	r0, [r7, #4]
 8007e64:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007e6c:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	683a      	ldr	r2, [r7, #0]
 8007e72:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8007e76:	2300      	movs	r3, #0
}
 8007e78:	4618      	mov	r0, r3
 8007e7a:	3714      	adds	r7, #20
 8007e7c:	46bd      	mov	sp, r7
 8007e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e82:	4770      	bx	lr

08007e84 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007e84:	b580      	push	{r7, lr}
 8007e86:	b084      	sub	sp, #16
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007e92:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8007e94:	2301      	movs	r3, #1
 8007e96:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d101      	bne.n	8007ea6 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007ea2:	2303      	movs	r3, #3
 8007ea4:	e01a      	b.n	8007edc <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8007ea6:	68bb      	ldr	r3, [r7, #8]
 8007ea8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d114      	bne.n	8007eda <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8007eb0:	68bb      	ldr	r3, [r7, #8]
 8007eb2:	2201      	movs	r2, #1
 8007eb4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8007eb8:	68bb      	ldr	r3, [r7, #8]
 8007eba:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8007ec2:	68bb      	ldr	r3, [r7, #8]
 8007ec4:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8007ec8:	68bb      	ldr	r3, [r7, #8]
 8007eca:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8007ece:	2181      	movs	r1, #129	; 0x81
 8007ed0:	6878      	ldr	r0, [r7, #4]
 8007ed2:	f001 fd43 	bl	800995c <USBD_LL_Transmit>

    ret = USBD_OK;
 8007ed6:	2300      	movs	r3, #0
 8007ed8:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8007eda:	7bfb      	ldrb	r3, [r7, #15]
}
 8007edc:	4618      	mov	r0, r3
 8007ede:	3710      	adds	r7, #16
 8007ee0:	46bd      	mov	sp, r7
 8007ee2:	bd80      	pop	{r7, pc}

08007ee4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007ee4:	b580      	push	{r7, lr}
 8007ee6:	b084      	sub	sp, #16
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007ef2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d101      	bne.n	8007f02 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8007efe:	2303      	movs	r3, #3
 8007f00:	e016      	b.n	8007f30 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	7c1b      	ldrb	r3, [r3, #16]
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d109      	bne.n	8007f1e <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007f10:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007f14:	2101      	movs	r1, #1
 8007f16:	6878      	ldr	r0, [r7, #4]
 8007f18:	f001 fd41 	bl	800999e <USBD_LL_PrepareReceive>
 8007f1c:	e007      	b.n	8007f2e <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007f24:	2340      	movs	r3, #64	; 0x40
 8007f26:	2101      	movs	r1, #1
 8007f28:	6878      	ldr	r0, [r7, #4]
 8007f2a:	f001 fd38 	bl	800999e <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007f2e:	2300      	movs	r3, #0
}
 8007f30:	4618      	mov	r0, r3
 8007f32:	3710      	adds	r7, #16
 8007f34:	46bd      	mov	sp, r7
 8007f36:	bd80      	pop	{r7, pc}

08007f38 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007f38:	b580      	push	{r7, lr}
 8007f3a:	b086      	sub	sp, #24
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	60f8      	str	r0, [r7, #12]
 8007f40:	60b9      	str	r1, [r7, #8]
 8007f42:	4613      	mov	r3, r2
 8007f44:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d101      	bne.n	8007f50 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007f4c:	2303      	movs	r3, #3
 8007f4e:	e01f      	b.n	8007f90 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	2200      	movs	r2, #0
 8007f54:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	2200      	movs	r2, #0
 8007f5c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	2200      	movs	r2, #0
 8007f64:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007f68:	68bb      	ldr	r3, [r7, #8]
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d003      	beq.n	8007f76 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	68ba      	ldr	r2, [r7, #8]
 8007f72:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	2201      	movs	r2, #1
 8007f7a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	79fa      	ldrb	r2, [r7, #7]
 8007f82:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007f84:	68f8      	ldr	r0, [r7, #12]
 8007f86:	f001 fb9f 	bl	80096c8 <USBD_LL_Init>
 8007f8a:	4603      	mov	r3, r0
 8007f8c:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007f8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f90:	4618      	mov	r0, r3
 8007f92:	3718      	adds	r7, #24
 8007f94:	46bd      	mov	sp, r7
 8007f96:	bd80      	pop	{r7, pc}

08007f98 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007f98:	b580      	push	{r7, lr}
 8007f9a:	b084      	sub	sp, #16
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	6078      	str	r0, [r7, #4]
 8007fa0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007fa2:	2300      	movs	r3, #0
 8007fa4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007fa6:	683b      	ldr	r3, [r7, #0]
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d101      	bne.n	8007fb0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8007fac:	2303      	movs	r3, #3
 8007fae:	e016      	b.n	8007fde <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	683a      	ldr	r2, [r7, #0]
 8007fb4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007fbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d00b      	beq.n	8007fdc <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007fca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fcc:	f107 020e 	add.w	r2, r7, #14
 8007fd0:	4610      	mov	r0, r2
 8007fd2:	4798      	blx	r3
 8007fd4:	4602      	mov	r2, r0
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8007fdc:	2300      	movs	r3, #0
}
 8007fde:	4618      	mov	r0, r3
 8007fe0:	3710      	adds	r7, #16
 8007fe2:	46bd      	mov	sp, r7
 8007fe4:	bd80      	pop	{r7, pc}

08007fe6 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007fe6:	b580      	push	{r7, lr}
 8007fe8:	b082      	sub	sp, #8
 8007fea:	af00      	add	r7, sp, #0
 8007fec:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007fee:	6878      	ldr	r0, [r7, #4]
 8007ff0:	f001 fbca 	bl	8009788 <USBD_LL_Start>
 8007ff4:	4603      	mov	r3, r0
}
 8007ff6:	4618      	mov	r0, r3
 8007ff8:	3708      	adds	r7, #8
 8007ffa:	46bd      	mov	sp, r7
 8007ffc:	bd80      	pop	{r7, pc}

08007ffe <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007ffe:	b480      	push	{r7}
 8008000:	b083      	sub	sp, #12
 8008002:	af00      	add	r7, sp, #0
 8008004:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008006:	2300      	movs	r3, #0
}
 8008008:	4618      	mov	r0, r3
 800800a:	370c      	adds	r7, #12
 800800c:	46bd      	mov	sp, r7
 800800e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008012:	4770      	bx	lr

08008014 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008014:	b580      	push	{r7, lr}
 8008016:	b084      	sub	sp, #16
 8008018:	af00      	add	r7, sp, #0
 800801a:	6078      	str	r0, [r7, #4]
 800801c:	460b      	mov	r3, r1
 800801e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8008020:	2303      	movs	r3, #3
 8008022:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800802a:	2b00      	cmp	r3, #0
 800802c:	d009      	beq.n	8008042 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	78fa      	ldrb	r2, [r7, #3]
 8008038:	4611      	mov	r1, r2
 800803a:	6878      	ldr	r0, [r7, #4]
 800803c:	4798      	blx	r3
 800803e:	4603      	mov	r3, r0
 8008040:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8008042:	7bfb      	ldrb	r3, [r7, #15]
}
 8008044:	4618      	mov	r0, r3
 8008046:	3710      	adds	r7, #16
 8008048:	46bd      	mov	sp, r7
 800804a:	bd80      	pop	{r7, pc}

0800804c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800804c:	b580      	push	{r7, lr}
 800804e:	b082      	sub	sp, #8
 8008050:	af00      	add	r7, sp, #0
 8008052:	6078      	str	r0, [r7, #4]
 8008054:	460b      	mov	r3, r1
 8008056:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800805e:	2b00      	cmp	r3, #0
 8008060:	d007      	beq.n	8008072 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008068:	685b      	ldr	r3, [r3, #4]
 800806a:	78fa      	ldrb	r2, [r7, #3]
 800806c:	4611      	mov	r1, r2
 800806e:	6878      	ldr	r0, [r7, #4]
 8008070:	4798      	blx	r3
  }

  return USBD_OK;
 8008072:	2300      	movs	r3, #0
}
 8008074:	4618      	mov	r0, r3
 8008076:	3708      	adds	r7, #8
 8008078:	46bd      	mov	sp, r7
 800807a:	bd80      	pop	{r7, pc}

0800807c <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800807c:	b580      	push	{r7, lr}
 800807e:	b084      	sub	sp, #16
 8008080:	af00      	add	r7, sp, #0
 8008082:	6078      	str	r0, [r7, #4]
 8008084:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800808c:	6839      	ldr	r1, [r7, #0]
 800808e:	4618      	mov	r0, r3
 8008090:	f000 ff16 	bl	8008ec0 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	2201      	movs	r2, #1
 8008098:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80080a2:	461a      	mov	r2, r3
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80080b0:	f003 031f 	and.w	r3, r3, #31
 80080b4:	2b01      	cmp	r3, #1
 80080b6:	d00e      	beq.n	80080d6 <USBD_LL_SetupStage+0x5a>
 80080b8:	2b01      	cmp	r3, #1
 80080ba:	d302      	bcc.n	80080c2 <USBD_LL_SetupStage+0x46>
 80080bc:	2b02      	cmp	r3, #2
 80080be:	d014      	beq.n	80080ea <USBD_LL_SetupStage+0x6e>
 80080c0:	e01d      	b.n	80080fe <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80080c8:	4619      	mov	r1, r3
 80080ca:	6878      	ldr	r0, [r7, #4]
 80080cc:	f000 f9d6 	bl	800847c <USBD_StdDevReq>
 80080d0:	4603      	mov	r3, r0
 80080d2:	73fb      	strb	r3, [r7, #15]
      break;
 80080d4:	e020      	b.n	8008118 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80080dc:	4619      	mov	r1, r3
 80080de:	6878      	ldr	r0, [r7, #4]
 80080e0:	f000 fa3a 	bl	8008558 <USBD_StdItfReq>
 80080e4:	4603      	mov	r3, r0
 80080e6:	73fb      	strb	r3, [r7, #15]
      break;
 80080e8:	e016      	b.n	8008118 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80080f0:	4619      	mov	r1, r3
 80080f2:	6878      	ldr	r0, [r7, #4]
 80080f4:	f000 fa76 	bl	80085e4 <USBD_StdEPReq>
 80080f8:	4603      	mov	r3, r0
 80080fa:	73fb      	strb	r3, [r7, #15]
      break;
 80080fc:	e00c      	b.n	8008118 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008104:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008108:	b2db      	uxtb	r3, r3
 800810a:	4619      	mov	r1, r3
 800810c:	6878      	ldr	r0, [r7, #4]
 800810e:	f001 fb9b 	bl	8009848 <USBD_LL_StallEP>
 8008112:	4603      	mov	r3, r0
 8008114:	73fb      	strb	r3, [r7, #15]
      break;
 8008116:	bf00      	nop
  }

  return ret;
 8008118:	7bfb      	ldrb	r3, [r7, #15]
}
 800811a:	4618      	mov	r0, r3
 800811c:	3710      	adds	r7, #16
 800811e:	46bd      	mov	sp, r7
 8008120:	bd80      	pop	{r7, pc}

08008122 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008122:	b580      	push	{r7, lr}
 8008124:	b086      	sub	sp, #24
 8008126:	af00      	add	r7, sp, #0
 8008128:	60f8      	str	r0, [r7, #12]
 800812a:	460b      	mov	r3, r1
 800812c:	607a      	str	r2, [r7, #4]
 800812e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8008130:	7afb      	ldrb	r3, [r7, #11]
 8008132:	2b00      	cmp	r3, #0
 8008134:	d137      	bne.n	80081a6 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800813c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008144:	2b03      	cmp	r3, #3
 8008146:	d14a      	bne.n	80081de <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8008148:	693b      	ldr	r3, [r7, #16]
 800814a:	689a      	ldr	r2, [r3, #8]
 800814c:	693b      	ldr	r3, [r7, #16]
 800814e:	68db      	ldr	r3, [r3, #12]
 8008150:	429a      	cmp	r2, r3
 8008152:	d913      	bls.n	800817c <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008154:	693b      	ldr	r3, [r7, #16]
 8008156:	689a      	ldr	r2, [r3, #8]
 8008158:	693b      	ldr	r3, [r7, #16]
 800815a:	68db      	ldr	r3, [r3, #12]
 800815c:	1ad2      	subs	r2, r2, r3
 800815e:	693b      	ldr	r3, [r7, #16]
 8008160:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8008162:	693b      	ldr	r3, [r7, #16]
 8008164:	68da      	ldr	r2, [r3, #12]
 8008166:	693b      	ldr	r3, [r7, #16]
 8008168:	689b      	ldr	r3, [r3, #8]
 800816a:	4293      	cmp	r3, r2
 800816c:	bf28      	it	cs
 800816e:	4613      	movcs	r3, r2
 8008170:	461a      	mov	r2, r3
 8008172:	6879      	ldr	r1, [r7, #4]
 8008174:	68f8      	ldr	r0, [r7, #12]
 8008176:	f000 ff97 	bl	80090a8 <USBD_CtlContinueRx>
 800817a:	e030      	b.n	80081de <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008182:	691b      	ldr	r3, [r3, #16]
 8008184:	2b00      	cmp	r3, #0
 8008186:	d00a      	beq.n	800819e <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800818e:	2b03      	cmp	r3, #3
 8008190:	d105      	bne.n	800819e <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008198:	691b      	ldr	r3, [r3, #16]
 800819a:	68f8      	ldr	r0, [r7, #12]
 800819c:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 800819e:	68f8      	ldr	r0, [r7, #12]
 80081a0:	f000 ff93 	bl	80090ca <USBD_CtlSendStatus>
 80081a4:	e01b      	b.n	80081de <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081ac:	699b      	ldr	r3, [r3, #24]
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d013      	beq.n	80081da <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80081b8:	2b03      	cmp	r3, #3
 80081ba:	d10e      	bne.n	80081da <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081c2:	699b      	ldr	r3, [r3, #24]
 80081c4:	7afa      	ldrb	r2, [r7, #11]
 80081c6:	4611      	mov	r1, r2
 80081c8:	68f8      	ldr	r0, [r7, #12]
 80081ca:	4798      	blx	r3
 80081cc:	4603      	mov	r3, r0
 80081ce:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 80081d0:	7dfb      	ldrb	r3, [r7, #23]
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d003      	beq.n	80081de <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 80081d6:	7dfb      	ldrb	r3, [r7, #23]
 80081d8:	e002      	b.n	80081e0 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80081da:	2303      	movs	r3, #3
 80081dc:	e000      	b.n	80081e0 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 80081de:	2300      	movs	r3, #0
}
 80081e0:	4618      	mov	r0, r3
 80081e2:	3718      	adds	r7, #24
 80081e4:	46bd      	mov	sp, r7
 80081e6:	bd80      	pop	{r7, pc}

080081e8 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80081e8:	b580      	push	{r7, lr}
 80081ea:	b086      	sub	sp, #24
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	60f8      	str	r0, [r7, #12]
 80081f0:	460b      	mov	r3, r1
 80081f2:	607a      	str	r2, [r7, #4]
 80081f4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80081f6:	7afb      	ldrb	r3, [r7, #11]
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d16a      	bne.n	80082d2 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	3314      	adds	r3, #20
 8008200:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008208:	2b02      	cmp	r3, #2
 800820a:	d155      	bne.n	80082b8 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 800820c:	693b      	ldr	r3, [r7, #16]
 800820e:	689a      	ldr	r2, [r3, #8]
 8008210:	693b      	ldr	r3, [r7, #16]
 8008212:	68db      	ldr	r3, [r3, #12]
 8008214:	429a      	cmp	r2, r3
 8008216:	d914      	bls.n	8008242 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008218:	693b      	ldr	r3, [r7, #16]
 800821a:	689a      	ldr	r2, [r3, #8]
 800821c:	693b      	ldr	r3, [r7, #16]
 800821e:	68db      	ldr	r3, [r3, #12]
 8008220:	1ad2      	subs	r2, r2, r3
 8008222:	693b      	ldr	r3, [r7, #16]
 8008224:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008226:	693b      	ldr	r3, [r7, #16]
 8008228:	689b      	ldr	r3, [r3, #8]
 800822a:	461a      	mov	r2, r3
 800822c:	6879      	ldr	r1, [r7, #4]
 800822e:	68f8      	ldr	r0, [r7, #12]
 8008230:	f000 ff0c 	bl	800904c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008234:	2300      	movs	r3, #0
 8008236:	2200      	movs	r2, #0
 8008238:	2100      	movs	r1, #0
 800823a:	68f8      	ldr	r0, [r7, #12]
 800823c:	f001 fbaf 	bl	800999e <USBD_LL_PrepareReceive>
 8008240:	e03a      	b.n	80082b8 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008242:	693b      	ldr	r3, [r7, #16]
 8008244:	68da      	ldr	r2, [r3, #12]
 8008246:	693b      	ldr	r3, [r7, #16]
 8008248:	689b      	ldr	r3, [r3, #8]
 800824a:	429a      	cmp	r2, r3
 800824c:	d11c      	bne.n	8008288 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800824e:	693b      	ldr	r3, [r7, #16]
 8008250:	685a      	ldr	r2, [r3, #4]
 8008252:	693b      	ldr	r3, [r7, #16]
 8008254:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008256:	429a      	cmp	r2, r3
 8008258:	d316      	bcc.n	8008288 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800825a:	693b      	ldr	r3, [r7, #16]
 800825c:	685a      	ldr	r2, [r3, #4]
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008264:	429a      	cmp	r2, r3
 8008266:	d20f      	bcs.n	8008288 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008268:	2200      	movs	r2, #0
 800826a:	2100      	movs	r1, #0
 800826c:	68f8      	ldr	r0, [r7, #12]
 800826e:	f000 feed 	bl	800904c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	2200      	movs	r2, #0
 8008276:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800827a:	2300      	movs	r3, #0
 800827c:	2200      	movs	r2, #0
 800827e:	2100      	movs	r1, #0
 8008280:	68f8      	ldr	r0, [r7, #12]
 8008282:	f001 fb8c 	bl	800999e <USBD_LL_PrepareReceive>
 8008286:	e017      	b.n	80082b8 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800828e:	68db      	ldr	r3, [r3, #12]
 8008290:	2b00      	cmp	r3, #0
 8008292:	d00a      	beq.n	80082aa <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800829a:	2b03      	cmp	r3, #3
 800829c:	d105      	bne.n	80082aa <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082a4:	68db      	ldr	r3, [r3, #12]
 80082a6:	68f8      	ldr	r0, [r7, #12]
 80082a8:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80082aa:	2180      	movs	r1, #128	; 0x80
 80082ac:	68f8      	ldr	r0, [r7, #12]
 80082ae:	f001 facb 	bl	8009848 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80082b2:	68f8      	ldr	r0, [r7, #12]
 80082b4:	f000 ff1c 	bl	80090f0 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80082be:	2b01      	cmp	r3, #1
 80082c0:	d123      	bne.n	800830a <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80082c2:	68f8      	ldr	r0, [r7, #12]
 80082c4:	f7ff fe9b 	bl	8007ffe <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	2200      	movs	r2, #0
 80082cc:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80082d0:	e01b      	b.n	800830a <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082d8:	695b      	ldr	r3, [r3, #20]
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d013      	beq.n	8008306 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80082e4:	2b03      	cmp	r3, #3
 80082e6:	d10e      	bne.n	8008306 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082ee:	695b      	ldr	r3, [r3, #20]
 80082f0:	7afa      	ldrb	r2, [r7, #11]
 80082f2:	4611      	mov	r1, r2
 80082f4:	68f8      	ldr	r0, [r7, #12]
 80082f6:	4798      	blx	r3
 80082f8:	4603      	mov	r3, r0
 80082fa:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 80082fc:	7dfb      	ldrb	r3, [r7, #23]
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d003      	beq.n	800830a <USBD_LL_DataInStage+0x122>
    {
      return ret;
 8008302:	7dfb      	ldrb	r3, [r7, #23]
 8008304:	e002      	b.n	800830c <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008306:	2303      	movs	r3, #3
 8008308:	e000      	b.n	800830c <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 800830a:	2300      	movs	r3, #0
}
 800830c:	4618      	mov	r0, r3
 800830e:	3718      	adds	r7, #24
 8008310:	46bd      	mov	sp, r7
 8008312:	bd80      	pop	{r7, pc}

08008314 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008314:	b580      	push	{r7, lr}
 8008316:	b082      	sub	sp, #8
 8008318:	af00      	add	r7, sp, #0
 800831a:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	2201      	movs	r2, #1
 8008320:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	2200      	movs	r2, #0
 8008328:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	2200      	movs	r2, #0
 8008330:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	2200      	movs	r2, #0
 8008336:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008340:	2b00      	cmp	r3, #0
 8008342:	d009      	beq.n	8008358 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800834a:	685b      	ldr	r3, [r3, #4]
 800834c:	687a      	ldr	r2, [r7, #4]
 800834e:	6852      	ldr	r2, [r2, #4]
 8008350:	b2d2      	uxtb	r2, r2
 8008352:	4611      	mov	r1, r2
 8008354:	6878      	ldr	r0, [r7, #4]
 8008356:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008358:	2340      	movs	r3, #64	; 0x40
 800835a:	2200      	movs	r2, #0
 800835c:	2100      	movs	r1, #0
 800835e:	6878      	ldr	r0, [r7, #4]
 8008360:	f001 fa2d 	bl	80097be <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	2201      	movs	r2, #1
 8008368:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	2240      	movs	r2, #64	; 0x40
 8008370:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008374:	2340      	movs	r3, #64	; 0x40
 8008376:	2200      	movs	r2, #0
 8008378:	2180      	movs	r1, #128	; 0x80
 800837a:	6878      	ldr	r0, [r7, #4]
 800837c:	f001 fa1f 	bl	80097be <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	2201      	movs	r2, #1
 8008384:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	2240      	movs	r2, #64	; 0x40
 800838a:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800838c:	2300      	movs	r3, #0
}
 800838e:	4618      	mov	r0, r3
 8008390:	3708      	adds	r7, #8
 8008392:	46bd      	mov	sp, r7
 8008394:	bd80      	pop	{r7, pc}

08008396 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008396:	b480      	push	{r7}
 8008398:	b083      	sub	sp, #12
 800839a:	af00      	add	r7, sp, #0
 800839c:	6078      	str	r0, [r7, #4]
 800839e:	460b      	mov	r3, r1
 80083a0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	78fa      	ldrb	r2, [r7, #3]
 80083a6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80083a8:	2300      	movs	r3, #0
}
 80083aa:	4618      	mov	r0, r3
 80083ac:	370c      	adds	r7, #12
 80083ae:	46bd      	mov	sp, r7
 80083b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b4:	4770      	bx	lr

080083b6 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80083b6:	b480      	push	{r7}
 80083b8:	b083      	sub	sp, #12
 80083ba:	af00      	add	r7, sp, #0
 80083bc:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	2204      	movs	r2, #4
 80083ce:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80083d2:	2300      	movs	r3, #0
}
 80083d4:	4618      	mov	r0, r3
 80083d6:	370c      	adds	r7, #12
 80083d8:	46bd      	mov	sp, r7
 80083da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083de:	4770      	bx	lr

080083e0 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80083e0:	b480      	push	{r7}
 80083e2:	b083      	sub	sp, #12
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80083ee:	2b04      	cmp	r3, #4
 80083f0:	d105      	bne.n	80083fe <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80083fe:	2300      	movs	r3, #0
}
 8008400:	4618      	mov	r0, r3
 8008402:	370c      	adds	r7, #12
 8008404:	46bd      	mov	sp, r7
 8008406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800840a:	4770      	bx	lr

0800840c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800840c:	b580      	push	{r7, lr}
 800840e:	b082      	sub	sp, #8
 8008410:	af00      	add	r7, sp, #0
 8008412:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800841a:	2b03      	cmp	r3, #3
 800841c:	d10b      	bne.n	8008436 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008424:	69db      	ldr	r3, [r3, #28]
 8008426:	2b00      	cmp	r3, #0
 8008428:	d005      	beq.n	8008436 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008430:	69db      	ldr	r3, [r3, #28]
 8008432:	6878      	ldr	r0, [r7, #4]
 8008434:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008436:	2300      	movs	r3, #0
}
 8008438:	4618      	mov	r0, r3
 800843a:	3708      	adds	r7, #8
 800843c:	46bd      	mov	sp, r7
 800843e:	bd80      	pop	{r7, pc}

08008440 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008440:	b480      	push	{r7}
 8008442:	b087      	sub	sp, #28
 8008444:	af00      	add	r7, sp, #0
 8008446:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800844c:	697b      	ldr	r3, [r7, #20]
 800844e:	781b      	ldrb	r3, [r3, #0]
 8008450:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008452:	697b      	ldr	r3, [r7, #20]
 8008454:	3301      	adds	r3, #1
 8008456:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008458:	697b      	ldr	r3, [r7, #20]
 800845a:	781b      	ldrb	r3, [r3, #0]
 800845c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800845e:	8a3b      	ldrh	r3, [r7, #16]
 8008460:	021b      	lsls	r3, r3, #8
 8008462:	b21a      	sxth	r2, r3
 8008464:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008468:	4313      	orrs	r3, r2
 800846a:	b21b      	sxth	r3, r3
 800846c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800846e:	89fb      	ldrh	r3, [r7, #14]
}
 8008470:	4618      	mov	r0, r3
 8008472:	371c      	adds	r7, #28
 8008474:	46bd      	mov	sp, r7
 8008476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800847a:	4770      	bx	lr

0800847c <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800847c:	b580      	push	{r7, lr}
 800847e:	b084      	sub	sp, #16
 8008480:	af00      	add	r7, sp, #0
 8008482:	6078      	str	r0, [r7, #4]
 8008484:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008486:	2300      	movs	r3, #0
 8008488:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800848a:	683b      	ldr	r3, [r7, #0]
 800848c:	781b      	ldrb	r3, [r3, #0]
 800848e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008492:	2b20      	cmp	r3, #32
 8008494:	d004      	beq.n	80084a0 <USBD_StdDevReq+0x24>
 8008496:	2b40      	cmp	r3, #64	; 0x40
 8008498:	d002      	beq.n	80084a0 <USBD_StdDevReq+0x24>
 800849a:	2b00      	cmp	r3, #0
 800849c:	d00a      	beq.n	80084b4 <USBD_StdDevReq+0x38>
 800849e:	e050      	b.n	8008542 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80084a6:	689b      	ldr	r3, [r3, #8]
 80084a8:	6839      	ldr	r1, [r7, #0]
 80084aa:	6878      	ldr	r0, [r7, #4]
 80084ac:	4798      	blx	r3
 80084ae:	4603      	mov	r3, r0
 80084b0:	73fb      	strb	r3, [r7, #15]
    break;
 80084b2:	e04b      	b.n	800854c <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80084b4:	683b      	ldr	r3, [r7, #0]
 80084b6:	785b      	ldrb	r3, [r3, #1]
 80084b8:	2b09      	cmp	r3, #9
 80084ba:	d83c      	bhi.n	8008536 <USBD_StdDevReq+0xba>
 80084bc:	a201      	add	r2, pc, #4	; (adr r2, 80084c4 <USBD_StdDevReq+0x48>)
 80084be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084c2:	bf00      	nop
 80084c4:	08008519 	.word	0x08008519
 80084c8:	0800852d 	.word	0x0800852d
 80084cc:	08008537 	.word	0x08008537
 80084d0:	08008523 	.word	0x08008523
 80084d4:	08008537 	.word	0x08008537
 80084d8:	080084f7 	.word	0x080084f7
 80084dc:	080084ed 	.word	0x080084ed
 80084e0:	08008537 	.word	0x08008537
 80084e4:	0800850f 	.word	0x0800850f
 80084e8:	08008501 	.word	0x08008501
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 80084ec:	6839      	ldr	r1, [r7, #0]
 80084ee:	6878      	ldr	r0, [r7, #4]
 80084f0:	f000 f9d0 	bl	8008894 <USBD_GetDescriptor>
      break;
 80084f4:	e024      	b.n	8008540 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 80084f6:	6839      	ldr	r1, [r7, #0]
 80084f8:	6878      	ldr	r0, [r7, #4]
 80084fa:	f000 fb5f 	bl	8008bbc <USBD_SetAddress>
      break;
 80084fe:	e01f      	b.n	8008540 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 8008500:	6839      	ldr	r1, [r7, #0]
 8008502:	6878      	ldr	r0, [r7, #4]
 8008504:	f000 fb9c 	bl	8008c40 <USBD_SetConfig>
 8008508:	4603      	mov	r3, r0
 800850a:	73fb      	strb	r3, [r7, #15]
      break;
 800850c:	e018      	b.n	8008540 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 800850e:	6839      	ldr	r1, [r7, #0]
 8008510:	6878      	ldr	r0, [r7, #4]
 8008512:	f000 fc39 	bl	8008d88 <USBD_GetConfig>
      break;
 8008516:	e013      	b.n	8008540 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 8008518:	6839      	ldr	r1, [r7, #0]
 800851a:	6878      	ldr	r0, [r7, #4]
 800851c:	f000 fc68 	bl	8008df0 <USBD_GetStatus>
      break;
 8008520:	e00e      	b.n	8008540 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 8008522:	6839      	ldr	r1, [r7, #0]
 8008524:	6878      	ldr	r0, [r7, #4]
 8008526:	f000 fc96 	bl	8008e56 <USBD_SetFeature>
      break;
 800852a:	e009      	b.n	8008540 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 800852c:	6839      	ldr	r1, [r7, #0]
 800852e:	6878      	ldr	r0, [r7, #4]
 8008530:	f000 fca5 	bl	8008e7e <USBD_ClrFeature>
      break;
 8008534:	e004      	b.n	8008540 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 8008536:	6839      	ldr	r1, [r7, #0]
 8008538:	6878      	ldr	r0, [r7, #4]
 800853a:	f000 fcfb 	bl	8008f34 <USBD_CtlError>
      break;
 800853e:	bf00      	nop
    }
    break;
 8008540:	e004      	b.n	800854c <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 8008542:	6839      	ldr	r1, [r7, #0]
 8008544:	6878      	ldr	r0, [r7, #4]
 8008546:	f000 fcf5 	bl	8008f34 <USBD_CtlError>
    break;
 800854a:	bf00      	nop
  }

  return ret;
 800854c:	7bfb      	ldrb	r3, [r7, #15]
}
 800854e:	4618      	mov	r0, r3
 8008550:	3710      	adds	r7, #16
 8008552:	46bd      	mov	sp, r7
 8008554:	bd80      	pop	{r7, pc}
 8008556:	bf00      	nop

08008558 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008558:	b580      	push	{r7, lr}
 800855a:	b084      	sub	sp, #16
 800855c:	af00      	add	r7, sp, #0
 800855e:	6078      	str	r0, [r7, #4]
 8008560:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008562:	2300      	movs	r3, #0
 8008564:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008566:	683b      	ldr	r3, [r7, #0]
 8008568:	781b      	ldrb	r3, [r3, #0]
 800856a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800856e:	2b20      	cmp	r3, #32
 8008570:	d003      	beq.n	800857a <USBD_StdItfReq+0x22>
 8008572:	2b40      	cmp	r3, #64	; 0x40
 8008574:	d001      	beq.n	800857a <USBD_StdItfReq+0x22>
 8008576:	2b00      	cmp	r3, #0
 8008578:	d12a      	bne.n	80085d0 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008580:	3b01      	subs	r3, #1
 8008582:	2b02      	cmp	r3, #2
 8008584:	d81d      	bhi.n	80085c2 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008586:	683b      	ldr	r3, [r7, #0]
 8008588:	889b      	ldrh	r3, [r3, #4]
 800858a:	b2db      	uxtb	r3, r3
 800858c:	2b01      	cmp	r3, #1
 800858e:	d813      	bhi.n	80085b8 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008596:	689b      	ldr	r3, [r3, #8]
 8008598:	6839      	ldr	r1, [r7, #0]
 800859a:	6878      	ldr	r0, [r7, #4]
 800859c:	4798      	blx	r3
 800859e:	4603      	mov	r3, r0
 80085a0:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 80085a2:	683b      	ldr	r3, [r7, #0]
 80085a4:	88db      	ldrh	r3, [r3, #6]
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d110      	bne.n	80085cc <USBD_StdItfReq+0x74>
 80085aa:	7bfb      	ldrb	r3, [r7, #15]
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d10d      	bne.n	80085cc <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 80085b0:	6878      	ldr	r0, [r7, #4]
 80085b2:	f000 fd8a 	bl	80090ca <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 80085b6:	e009      	b.n	80085cc <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 80085b8:	6839      	ldr	r1, [r7, #0]
 80085ba:	6878      	ldr	r0, [r7, #4]
 80085bc:	f000 fcba 	bl	8008f34 <USBD_CtlError>
      break;
 80085c0:	e004      	b.n	80085cc <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 80085c2:	6839      	ldr	r1, [r7, #0]
 80085c4:	6878      	ldr	r0, [r7, #4]
 80085c6:	f000 fcb5 	bl	8008f34 <USBD_CtlError>
      break;
 80085ca:	e000      	b.n	80085ce <USBD_StdItfReq+0x76>
      break;
 80085cc:	bf00      	nop
    }
    break;
 80085ce:	e004      	b.n	80085da <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 80085d0:	6839      	ldr	r1, [r7, #0]
 80085d2:	6878      	ldr	r0, [r7, #4]
 80085d4:	f000 fcae 	bl	8008f34 <USBD_CtlError>
    break;
 80085d8:	bf00      	nop
  }

  return ret;
 80085da:	7bfb      	ldrb	r3, [r7, #15]
}
 80085dc:	4618      	mov	r0, r3
 80085de:	3710      	adds	r7, #16
 80085e0:	46bd      	mov	sp, r7
 80085e2:	bd80      	pop	{r7, pc}

080085e4 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80085e4:	b580      	push	{r7, lr}
 80085e6:	b084      	sub	sp, #16
 80085e8:	af00      	add	r7, sp, #0
 80085ea:	6078      	str	r0, [r7, #4]
 80085ec:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80085ee:	2300      	movs	r3, #0
 80085f0:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80085f2:	683b      	ldr	r3, [r7, #0]
 80085f4:	889b      	ldrh	r3, [r3, #4]
 80085f6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80085f8:	683b      	ldr	r3, [r7, #0]
 80085fa:	781b      	ldrb	r3, [r3, #0]
 80085fc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008600:	2b20      	cmp	r3, #32
 8008602:	d004      	beq.n	800860e <USBD_StdEPReq+0x2a>
 8008604:	2b40      	cmp	r3, #64	; 0x40
 8008606:	d002      	beq.n	800860e <USBD_StdEPReq+0x2a>
 8008608:	2b00      	cmp	r3, #0
 800860a:	d00a      	beq.n	8008622 <USBD_StdEPReq+0x3e>
 800860c:	e137      	b.n	800887e <USBD_StdEPReq+0x29a>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008614:	689b      	ldr	r3, [r3, #8]
 8008616:	6839      	ldr	r1, [r7, #0]
 8008618:	6878      	ldr	r0, [r7, #4]
 800861a:	4798      	blx	r3
 800861c:	4603      	mov	r3, r0
 800861e:	73fb      	strb	r3, [r7, #15]
    break;
 8008620:	e132      	b.n	8008888 <USBD_StdEPReq+0x2a4>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8008622:	683b      	ldr	r3, [r7, #0]
 8008624:	785b      	ldrb	r3, [r3, #1]
 8008626:	2b01      	cmp	r3, #1
 8008628:	d03e      	beq.n	80086a8 <USBD_StdEPReq+0xc4>
 800862a:	2b03      	cmp	r3, #3
 800862c:	d002      	beq.n	8008634 <USBD_StdEPReq+0x50>
 800862e:	2b00      	cmp	r3, #0
 8008630:	d079      	beq.n	8008726 <USBD_StdEPReq+0x142>
 8008632:	e11e      	b.n	8008872 <USBD_StdEPReq+0x28e>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800863a:	2b02      	cmp	r3, #2
 800863c:	d002      	beq.n	8008644 <USBD_StdEPReq+0x60>
 800863e:	2b03      	cmp	r3, #3
 8008640:	d015      	beq.n	800866e <USBD_StdEPReq+0x8a>
 8008642:	e02b      	b.n	800869c <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008644:	7bbb      	ldrb	r3, [r7, #14]
 8008646:	2b00      	cmp	r3, #0
 8008648:	d00c      	beq.n	8008664 <USBD_StdEPReq+0x80>
 800864a:	7bbb      	ldrb	r3, [r7, #14]
 800864c:	2b80      	cmp	r3, #128	; 0x80
 800864e:	d009      	beq.n	8008664 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8008650:	7bbb      	ldrb	r3, [r7, #14]
 8008652:	4619      	mov	r1, r3
 8008654:	6878      	ldr	r0, [r7, #4]
 8008656:	f001 f8f7 	bl	8009848 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800865a:	2180      	movs	r1, #128	; 0x80
 800865c:	6878      	ldr	r0, [r7, #4]
 800865e:	f001 f8f3 	bl	8009848 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8008662:	e020      	b.n	80086a6 <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 8008664:	6839      	ldr	r1, [r7, #0]
 8008666:	6878      	ldr	r0, [r7, #4]
 8008668:	f000 fc64 	bl	8008f34 <USBD_CtlError>
        break;
 800866c:	e01b      	b.n	80086a6 <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800866e:	683b      	ldr	r3, [r7, #0]
 8008670:	885b      	ldrh	r3, [r3, #2]
 8008672:	2b00      	cmp	r3, #0
 8008674:	d10e      	bne.n	8008694 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008676:	7bbb      	ldrb	r3, [r7, #14]
 8008678:	2b00      	cmp	r3, #0
 800867a:	d00b      	beq.n	8008694 <USBD_StdEPReq+0xb0>
 800867c:	7bbb      	ldrb	r3, [r7, #14]
 800867e:	2b80      	cmp	r3, #128	; 0x80
 8008680:	d008      	beq.n	8008694 <USBD_StdEPReq+0xb0>
 8008682:	683b      	ldr	r3, [r7, #0]
 8008684:	88db      	ldrh	r3, [r3, #6]
 8008686:	2b00      	cmp	r3, #0
 8008688:	d104      	bne.n	8008694 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 800868a:	7bbb      	ldrb	r3, [r7, #14]
 800868c:	4619      	mov	r1, r3
 800868e:	6878      	ldr	r0, [r7, #4]
 8008690:	f001 f8da 	bl	8009848 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 8008694:	6878      	ldr	r0, [r7, #4]
 8008696:	f000 fd18 	bl	80090ca <USBD_CtlSendStatus>

        break;
 800869a:	e004      	b.n	80086a6 <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 800869c:	6839      	ldr	r1, [r7, #0]
 800869e:	6878      	ldr	r0, [r7, #4]
 80086a0:	f000 fc48 	bl	8008f34 <USBD_CtlError>
        break;
 80086a4:	bf00      	nop
      }
      break;
 80086a6:	e0e9      	b.n	800887c <USBD_StdEPReq+0x298>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80086ae:	2b02      	cmp	r3, #2
 80086b0:	d002      	beq.n	80086b8 <USBD_StdEPReq+0xd4>
 80086b2:	2b03      	cmp	r3, #3
 80086b4:	d015      	beq.n	80086e2 <USBD_StdEPReq+0xfe>
 80086b6:	e02f      	b.n	8008718 <USBD_StdEPReq+0x134>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80086b8:	7bbb      	ldrb	r3, [r7, #14]
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d00c      	beq.n	80086d8 <USBD_StdEPReq+0xf4>
 80086be:	7bbb      	ldrb	r3, [r7, #14]
 80086c0:	2b80      	cmp	r3, #128	; 0x80
 80086c2:	d009      	beq.n	80086d8 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 80086c4:	7bbb      	ldrb	r3, [r7, #14]
 80086c6:	4619      	mov	r1, r3
 80086c8:	6878      	ldr	r0, [r7, #4]
 80086ca:	f001 f8bd 	bl	8009848 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80086ce:	2180      	movs	r1, #128	; 0x80
 80086d0:	6878      	ldr	r0, [r7, #4]
 80086d2:	f001 f8b9 	bl	8009848 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80086d6:	e025      	b.n	8008724 <USBD_StdEPReq+0x140>
          USBD_CtlError(pdev, req);
 80086d8:	6839      	ldr	r1, [r7, #0]
 80086da:	6878      	ldr	r0, [r7, #4]
 80086dc:	f000 fc2a 	bl	8008f34 <USBD_CtlError>
        break;
 80086e0:	e020      	b.n	8008724 <USBD_StdEPReq+0x140>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80086e2:	683b      	ldr	r3, [r7, #0]
 80086e4:	885b      	ldrh	r3, [r3, #2]
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d11b      	bne.n	8008722 <USBD_StdEPReq+0x13e>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 80086ea:	7bbb      	ldrb	r3, [r7, #14]
 80086ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d004      	beq.n	80086fe <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80086f4:	7bbb      	ldrb	r3, [r7, #14]
 80086f6:	4619      	mov	r1, r3
 80086f8:	6878      	ldr	r0, [r7, #4]
 80086fa:	f001 f8c4 	bl	8009886 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 80086fe:	6878      	ldr	r0, [r7, #4]
 8008700:	f000 fce3 	bl	80090ca <USBD_CtlSendStatus>
          ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800870a:	689b      	ldr	r3, [r3, #8]
 800870c:	6839      	ldr	r1, [r7, #0]
 800870e:	6878      	ldr	r0, [r7, #4]
 8008710:	4798      	blx	r3
 8008712:	4603      	mov	r3, r0
 8008714:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008716:	e004      	b.n	8008722 <USBD_StdEPReq+0x13e>

      default:
        USBD_CtlError(pdev, req);
 8008718:	6839      	ldr	r1, [r7, #0]
 800871a:	6878      	ldr	r0, [r7, #4]
 800871c:	f000 fc0a 	bl	8008f34 <USBD_CtlError>
        break;
 8008720:	e000      	b.n	8008724 <USBD_StdEPReq+0x140>
        break;
 8008722:	bf00      	nop
      }
      break;
 8008724:	e0aa      	b.n	800887c <USBD_StdEPReq+0x298>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800872c:	2b02      	cmp	r3, #2
 800872e:	d002      	beq.n	8008736 <USBD_StdEPReq+0x152>
 8008730:	2b03      	cmp	r3, #3
 8008732:	d032      	beq.n	800879a <USBD_StdEPReq+0x1b6>
 8008734:	e097      	b.n	8008866 <USBD_StdEPReq+0x282>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008736:	7bbb      	ldrb	r3, [r7, #14]
 8008738:	2b00      	cmp	r3, #0
 800873a:	d007      	beq.n	800874c <USBD_StdEPReq+0x168>
 800873c:	7bbb      	ldrb	r3, [r7, #14]
 800873e:	2b80      	cmp	r3, #128	; 0x80
 8008740:	d004      	beq.n	800874c <USBD_StdEPReq+0x168>
        {
          USBD_CtlError(pdev, req);
 8008742:	6839      	ldr	r1, [r7, #0]
 8008744:	6878      	ldr	r0, [r7, #4]
 8008746:	f000 fbf5 	bl	8008f34 <USBD_CtlError>
          break;
 800874a:	e091      	b.n	8008870 <USBD_StdEPReq+0x28c>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800874c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008750:	2b00      	cmp	r3, #0
 8008752:	da0b      	bge.n	800876c <USBD_StdEPReq+0x188>
 8008754:	7bbb      	ldrb	r3, [r7, #14]
 8008756:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800875a:	4613      	mov	r3, r2
 800875c:	009b      	lsls	r3, r3, #2
 800875e:	4413      	add	r3, r2
 8008760:	009b      	lsls	r3, r3, #2
 8008762:	3310      	adds	r3, #16
 8008764:	687a      	ldr	r2, [r7, #4]
 8008766:	4413      	add	r3, r2
 8008768:	3304      	adds	r3, #4
 800876a:	e00b      	b.n	8008784 <USBD_StdEPReq+0x1a0>
              &pdev->ep_out[ep_addr & 0x7FU];
 800876c:	7bbb      	ldrb	r3, [r7, #14]
 800876e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008772:	4613      	mov	r3, r2
 8008774:	009b      	lsls	r3, r3, #2
 8008776:	4413      	add	r3, r2
 8008778:	009b      	lsls	r3, r3, #2
 800877a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800877e:	687a      	ldr	r2, [r7, #4]
 8008780:	4413      	add	r3, r2
 8008782:	3304      	adds	r3, #4
 8008784:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 8008786:	68bb      	ldr	r3, [r7, #8]
 8008788:	2200      	movs	r2, #0
 800878a:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800878c:	68bb      	ldr	r3, [r7, #8]
 800878e:	2202      	movs	r2, #2
 8008790:	4619      	mov	r1, r3
 8008792:	6878      	ldr	r0, [r7, #4]
 8008794:	f000 fc3f 	bl	8009016 <USBD_CtlSendData>
        break;
 8008798:	e06a      	b.n	8008870 <USBD_StdEPReq+0x28c>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 800879a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800879e:	2b00      	cmp	r3, #0
 80087a0:	da11      	bge.n	80087c6 <USBD_StdEPReq+0x1e2>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80087a2:	7bbb      	ldrb	r3, [r7, #14]
 80087a4:	f003 020f 	and.w	r2, r3, #15
 80087a8:	6879      	ldr	r1, [r7, #4]
 80087aa:	4613      	mov	r3, r2
 80087ac:	009b      	lsls	r3, r3, #2
 80087ae:	4413      	add	r3, r2
 80087b0:	009b      	lsls	r3, r3, #2
 80087b2:	440b      	add	r3, r1
 80087b4:	3324      	adds	r3, #36	; 0x24
 80087b6:	881b      	ldrh	r3, [r3, #0]
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d117      	bne.n	80087ec <USBD_StdEPReq+0x208>
          {
            USBD_CtlError(pdev, req);
 80087bc:	6839      	ldr	r1, [r7, #0]
 80087be:	6878      	ldr	r0, [r7, #4]
 80087c0:	f000 fbb8 	bl	8008f34 <USBD_CtlError>
            break;
 80087c4:	e054      	b.n	8008870 <USBD_StdEPReq+0x28c>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80087c6:	7bbb      	ldrb	r3, [r7, #14]
 80087c8:	f003 020f 	and.w	r2, r3, #15
 80087cc:	6879      	ldr	r1, [r7, #4]
 80087ce:	4613      	mov	r3, r2
 80087d0:	009b      	lsls	r3, r3, #2
 80087d2:	4413      	add	r3, r2
 80087d4:	009b      	lsls	r3, r3, #2
 80087d6:	440b      	add	r3, r1
 80087d8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80087dc:	881b      	ldrh	r3, [r3, #0]
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d104      	bne.n	80087ec <USBD_StdEPReq+0x208>
          {
            USBD_CtlError(pdev, req);
 80087e2:	6839      	ldr	r1, [r7, #0]
 80087e4:	6878      	ldr	r0, [r7, #4]
 80087e6:	f000 fba5 	bl	8008f34 <USBD_CtlError>
            break;
 80087ea:	e041      	b.n	8008870 <USBD_StdEPReq+0x28c>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80087ec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	da0b      	bge.n	800880c <USBD_StdEPReq+0x228>
 80087f4:	7bbb      	ldrb	r3, [r7, #14]
 80087f6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80087fa:	4613      	mov	r3, r2
 80087fc:	009b      	lsls	r3, r3, #2
 80087fe:	4413      	add	r3, r2
 8008800:	009b      	lsls	r3, r3, #2
 8008802:	3310      	adds	r3, #16
 8008804:	687a      	ldr	r2, [r7, #4]
 8008806:	4413      	add	r3, r2
 8008808:	3304      	adds	r3, #4
 800880a:	e00b      	b.n	8008824 <USBD_StdEPReq+0x240>
              &pdev->ep_out[ep_addr & 0x7FU];
 800880c:	7bbb      	ldrb	r3, [r7, #14]
 800880e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008812:	4613      	mov	r3, r2
 8008814:	009b      	lsls	r3, r3, #2
 8008816:	4413      	add	r3, r2
 8008818:	009b      	lsls	r3, r3, #2
 800881a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800881e:	687a      	ldr	r2, [r7, #4]
 8008820:	4413      	add	r3, r2
 8008822:	3304      	adds	r3, #4
 8008824:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008826:	7bbb      	ldrb	r3, [r7, #14]
 8008828:	2b00      	cmp	r3, #0
 800882a:	d002      	beq.n	8008832 <USBD_StdEPReq+0x24e>
 800882c:	7bbb      	ldrb	r3, [r7, #14]
 800882e:	2b80      	cmp	r3, #128	; 0x80
 8008830:	d103      	bne.n	800883a <USBD_StdEPReq+0x256>
          {
            pep->status = 0x0000U;
 8008832:	68bb      	ldr	r3, [r7, #8]
 8008834:	2200      	movs	r2, #0
 8008836:	601a      	str	r2, [r3, #0]
 8008838:	e00e      	b.n	8008858 <USBD_StdEPReq+0x274>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800883a:	7bbb      	ldrb	r3, [r7, #14]
 800883c:	4619      	mov	r1, r3
 800883e:	6878      	ldr	r0, [r7, #4]
 8008840:	f001 f840 	bl	80098c4 <USBD_LL_IsStallEP>
 8008844:	4603      	mov	r3, r0
 8008846:	2b00      	cmp	r3, #0
 8008848:	d003      	beq.n	8008852 <USBD_StdEPReq+0x26e>
          {
            pep->status = 0x0001U;
 800884a:	68bb      	ldr	r3, [r7, #8]
 800884c:	2201      	movs	r2, #1
 800884e:	601a      	str	r2, [r3, #0]
 8008850:	e002      	b.n	8008858 <USBD_StdEPReq+0x274>
          }
          else
          {
            pep->status = 0x0000U;
 8008852:	68bb      	ldr	r3, [r7, #8]
 8008854:	2200      	movs	r2, #0
 8008856:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008858:	68bb      	ldr	r3, [r7, #8]
 800885a:	2202      	movs	r2, #2
 800885c:	4619      	mov	r1, r3
 800885e:	6878      	ldr	r0, [r7, #4]
 8008860:	f000 fbd9 	bl	8009016 <USBD_CtlSendData>
          break;
 8008864:	e004      	b.n	8008870 <USBD_StdEPReq+0x28c>

      default:
        USBD_CtlError(pdev, req);
 8008866:	6839      	ldr	r1, [r7, #0]
 8008868:	6878      	ldr	r0, [r7, #4]
 800886a:	f000 fb63 	bl	8008f34 <USBD_CtlError>
        break;
 800886e:	bf00      	nop
      }
      break;
 8008870:	e004      	b.n	800887c <USBD_StdEPReq+0x298>

    default:
      USBD_CtlError(pdev, req);
 8008872:	6839      	ldr	r1, [r7, #0]
 8008874:	6878      	ldr	r0, [r7, #4]
 8008876:	f000 fb5d 	bl	8008f34 <USBD_CtlError>
      break;
 800887a:	bf00      	nop
    }
    break;
 800887c:	e004      	b.n	8008888 <USBD_StdEPReq+0x2a4>

  default:
    USBD_CtlError(pdev, req);
 800887e:	6839      	ldr	r1, [r7, #0]
 8008880:	6878      	ldr	r0, [r7, #4]
 8008882:	f000 fb57 	bl	8008f34 <USBD_CtlError>
    break;
 8008886:	bf00      	nop
  }

  return ret;
 8008888:	7bfb      	ldrb	r3, [r7, #15]
}
 800888a:	4618      	mov	r0, r3
 800888c:	3710      	adds	r7, #16
 800888e:	46bd      	mov	sp, r7
 8008890:	bd80      	pop	{r7, pc}
	...

08008894 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008894:	b580      	push	{r7, lr}
 8008896:	b084      	sub	sp, #16
 8008898:	af00      	add	r7, sp, #0
 800889a:	6078      	str	r0, [r7, #4]
 800889c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800889e:	2300      	movs	r3, #0
 80088a0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80088a2:	2300      	movs	r3, #0
 80088a4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80088a6:	2300      	movs	r3, #0
 80088a8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80088aa:	683b      	ldr	r3, [r7, #0]
 80088ac:	885b      	ldrh	r3, [r3, #2]
 80088ae:	0a1b      	lsrs	r3, r3, #8
 80088b0:	b29b      	uxth	r3, r3
 80088b2:	3b01      	subs	r3, #1
 80088b4:	2b0e      	cmp	r3, #14
 80088b6:	f200 8152 	bhi.w	8008b5e <USBD_GetDescriptor+0x2ca>
 80088ba:	a201      	add	r2, pc, #4	; (adr r2, 80088c0 <USBD_GetDescriptor+0x2c>)
 80088bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088c0:	08008931 	.word	0x08008931
 80088c4:	08008949 	.word	0x08008949
 80088c8:	08008989 	.word	0x08008989
 80088cc:	08008b5f 	.word	0x08008b5f
 80088d0:	08008b5f 	.word	0x08008b5f
 80088d4:	08008aff 	.word	0x08008aff
 80088d8:	08008b2b 	.word	0x08008b2b
 80088dc:	08008b5f 	.word	0x08008b5f
 80088e0:	08008b5f 	.word	0x08008b5f
 80088e4:	08008b5f 	.word	0x08008b5f
 80088e8:	08008b5f 	.word	0x08008b5f
 80088ec:	08008b5f 	.word	0x08008b5f
 80088f0:	08008b5f 	.word	0x08008b5f
 80088f4:	08008b5f 	.word	0x08008b5f
 80088f8:	080088fd 	.word	0x080088fd
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
  case USB_DESC_TYPE_BOS:
    if (pdev->pDesc->GetBOSDescriptor != NULL)
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008902:	69db      	ldr	r3, [r3, #28]
 8008904:	2b00      	cmp	r3, #0
 8008906:	d00b      	beq.n	8008920 <USBD_GetDescriptor+0x8c>
    {
      pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800890e:	69db      	ldr	r3, [r3, #28]
 8008910:	687a      	ldr	r2, [r7, #4]
 8008912:	7c12      	ldrb	r2, [r2, #16]
 8008914:	f107 0108 	add.w	r1, r7, #8
 8008918:	4610      	mov	r0, r2
 800891a:	4798      	blx	r3
 800891c:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800891e:	e126      	b.n	8008b6e <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 8008920:	6839      	ldr	r1, [r7, #0]
 8008922:	6878      	ldr	r0, [r7, #4]
 8008924:	f000 fb06 	bl	8008f34 <USBD_CtlError>
      err++;
 8008928:	7afb      	ldrb	r3, [r7, #11]
 800892a:	3301      	adds	r3, #1
 800892c:	72fb      	strb	r3, [r7, #11]
    break;
 800892e:	e11e      	b.n	8008b6e <USBD_GetDescriptor+0x2da>
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	687a      	ldr	r2, [r7, #4]
 800893a:	7c12      	ldrb	r2, [r2, #16]
 800893c:	f107 0108 	add.w	r1, r7, #8
 8008940:	4610      	mov	r0, r2
 8008942:	4798      	blx	r3
 8008944:	60f8      	str	r0, [r7, #12]
    break;
 8008946:	e112      	b.n	8008b6e <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	7c1b      	ldrb	r3, [r3, #16]
 800894c:	2b00      	cmp	r3, #0
 800894e:	d10d      	bne.n	800896c <USBD_GetDescriptor+0xd8>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008956:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008958:	f107 0208 	add.w	r2, r7, #8
 800895c:	4610      	mov	r0, r2
 800895e:	4798      	blx	r3
 8008960:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	3301      	adds	r3, #1
 8008966:	2202      	movs	r2, #2
 8008968:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800896a:	e100      	b.n	8008b6e <USBD_GetDescriptor+0x2da>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008974:	f107 0208 	add.w	r2, r7, #8
 8008978:	4610      	mov	r0, r2
 800897a:	4798      	blx	r3
 800897c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	3301      	adds	r3, #1
 8008982:	2202      	movs	r2, #2
 8008984:	701a      	strb	r2, [r3, #0]
    break;
 8008986:	e0f2      	b.n	8008b6e <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8008988:	683b      	ldr	r3, [r7, #0]
 800898a:	885b      	ldrh	r3, [r3, #2]
 800898c:	b2db      	uxtb	r3, r3
 800898e:	2b05      	cmp	r3, #5
 8008990:	f200 80ac 	bhi.w	8008aec <USBD_GetDescriptor+0x258>
 8008994:	a201      	add	r2, pc, #4	; (adr r2, 800899c <USBD_GetDescriptor+0x108>)
 8008996:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800899a:	bf00      	nop
 800899c:	080089b5 	.word	0x080089b5
 80089a0:	080089e9 	.word	0x080089e9
 80089a4:	08008a1d 	.word	0x08008a1d
 80089a8:	08008a51 	.word	0x08008a51
 80089ac:	08008a85 	.word	0x08008a85
 80089b0:	08008ab9 	.word	0x08008ab9
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089ba:	685b      	ldr	r3, [r3, #4]
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d00b      	beq.n	80089d8 <USBD_GetDescriptor+0x144>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089c6:	685b      	ldr	r3, [r3, #4]
 80089c8:	687a      	ldr	r2, [r7, #4]
 80089ca:	7c12      	ldrb	r2, [r2, #16]
 80089cc:	f107 0108 	add.w	r1, r7, #8
 80089d0:	4610      	mov	r0, r2
 80089d2:	4798      	blx	r3
 80089d4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80089d6:	e091      	b.n	8008afc <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 80089d8:	6839      	ldr	r1, [r7, #0]
 80089da:	6878      	ldr	r0, [r7, #4]
 80089dc:	f000 faaa 	bl	8008f34 <USBD_CtlError>
        err++;
 80089e0:	7afb      	ldrb	r3, [r7, #11]
 80089e2:	3301      	adds	r3, #1
 80089e4:	72fb      	strb	r3, [r7, #11]
      break;
 80089e6:	e089      	b.n	8008afc <USBD_GetDescriptor+0x268>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089ee:	689b      	ldr	r3, [r3, #8]
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d00b      	beq.n	8008a0c <USBD_GetDescriptor+0x178>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089fa:	689b      	ldr	r3, [r3, #8]
 80089fc:	687a      	ldr	r2, [r7, #4]
 80089fe:	7c12      	ldrb	r2, [r2, #16]
 8008a00:	f107 0108 	add.w	r1, r7, #8
 8008a04:	4610      	mov	r0, r2
 8008a06:	4798      	blx	r3
 8008a08:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008a0a:	e077      	b.n	8008afc <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8008a0c:	6839      	ldr	r1, [r7, #0]
 8008a0e:	6878      	ldr	r0, [r7, #4]
 8008a10:	f000 fa90 	bl	8008f34 <USBD_CtlError>
        err++;
 8008a14:	7afb      	ldrb	r3, [r7, #11]
 8008a16:	3301      	adds	r3, #1
 8008a18:	72fb      	strb	r3, [r7, #11]
      break;
 8008a1a:	e06f      	b.n	8008afc <USBD_GetDescriptor+0x268>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a22:	68db      	ldr	r3, [r3, #12]
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d00b      	beq.n	8008a40 <USBD_GetDescriptor+0x1ac>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a2e:	68db      	ldr	r3, [r3, #12]
 8008a30:	687a      	ldr	r2, [r7, #4]
 8008a32:	7c12      	ldrb	r2, [r2, #16]
 8008a34:	f107 0108 	add.w	r1, r7, #8
 8008a38:	4610      	mov	r0, r2
 8008a3a:	4798      	blx	r3
 8008a3c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008a3e:	e05d      	b.n	8008afc <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8008a40:	6839      	ldr	r1, [r7, #0]
 8008a42:	6878      	ldr	r0, [r7, #4]
 8008a44:	f000 fa76 	bl	8008f34 <USBD_CtlError>
        err++;
 8008a48:	7afb      	ldrb	r3, [r7, #11]
 8008a4a:	3301      	adds	r3, #1
 8008a4c:	72fb      	strb	r3, [r7, #11]
      break;
 8008a4e:	e055      	b.n	8008afc <USBD_GetDescriptor+0x268>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a56:	691b      	ldr	r3, [r3, #16]
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d00b      	beq.n	8008a74 <USBD_GetDescriptor+0x1e0>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a62:	691b      	ldr	r3, [r3, #16]
 8008a64:	687a      	ldr	r2, [r7, #4]
 8008a66:	7c12      	ldrb	r2, [r2, #16]
 8008a68:	f107 0108 	add.w	r1, r7, #8
 8008a6c:	4610      	mov	r0, r2
 8008a6e:	4798      	blx	r3
 8008a70:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008a72:	e043      	b.n	8008afc <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8008a74:	6839      	ldr	r1, [r7, #0]
 8008a76:	6878      	ldr	r0, [r7, #4]
 8008a78:	f000 fa5c 	bl	8008f34 <USBD_CtlError>
        err++;
 8008a7c:	7afb      	ldrb	r3, [r7, #11]
 8008a7e:	3301      	adds	r3, #1
 8008a80:	72fb      	strb	r3, [r7, #11]
      break;
 8008a82:	e03b      	b.n	8008afc <USBD_GetDescriptor+0x268>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a8a:	695b      	ldr	r3, [r3, #20]
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d00b      	beq.n	8008aa8 <USBD_GetDescriptor+0x214>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a96:	695b      	ldr	r3, [r3, #20]
 8008a98:	687a      	ldr	r2, [r7, #4]
 8008a9a:	7c12      	ldrb	r2, [r2, #16]
 8008a9c:	f107 0108 	add.w	r1, r7, #8
 8008aa0:	4610      	mov	r0, r2
 8008aa2:	4798      	blx	r3
 8008aa4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008aa6:	e029      	b.n	8008afc <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8008aa8:	6839      	ldr	r1, [r7, #0]
 8008aaa:	6878      	ldr	r0, [r7, #4]
 8008aac:	f000 fa42 	bl	8008f34 <USBD_CtlError>
        err++;
 8008ab0:	7afb      	ldrb	r3, [r7, #11]
 8008ab2:	3301      	adds	r3, #1
 8008ab4:	72fb      	strb	r3, [r7, #11]
      break;
 8008ab6:	e021      	b.n	8008afc <USBD_GetDescriptor+0x268>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008abe:	699b      	ldr	r3, [r3, #24]
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d00b      	beq.n	8008adc <USBD_GetDescriptor+0x248>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008aca:	699b      	ldr	r3, [r3, #24]
 8008acc:	687a      	ldr	r2, [r7, #4]
 8008ace:	7c12      	ldrb	r2, [r2, #16]
 8008ad0:	f107 0108 	add.w	r1, r7, #8
 8008ad4:	4610      	mov	r0, r2
 8008ad6:	4798      	blx	r3
 8008ad8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008ada:	e00f      	b.n	8008afc <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8008adc:	6839      	ldr	r1, [r7, #0]
 8008ade:	6878      	ldr	r0, [r7, #4]
 8008ae0:	f000 fa28 	bl	8008f34 <USBD_CtlError>
        err++;
 8008ae4:	7afb      	ldrb	r3, [r7, #11]
 8008ae6:	3301      	adds	r3, #1
 8008ae8:	72fb      	strb	r3, [r7, #11]
      break;
 8008aea:	e007      	b.n	8008afc <USBD_GetDescriptor+0x268>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8008aec:	6839      	ldr	r1, [r7, #0]
 8008aee:	6878      	ldr	r0, [r7, #4]
 8008af0:	f000 fa20 	bl	8008f34 <USBD_CtlError>
      err++;
 8008af4:	7afb      	ldrb	r3, [r7, #11]
 8008af6:	3301      	adds	r3, #1
 8008af8:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 8008afa:	bf00      	nop
    }
    break;
 8008afc:	e037      	b.n	8008b6e <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	7c1b      	ldrb	r3, [r3, #16]
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d109      	bne.n	8008b1a <USBD_GetDescriptor+0x286>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b0e:	f107 0208 	add.w	r2, r7, #8
 8008b12:	4610      	mov	r0, r2
 8008b14:	4798      	blx	r3
 8008b16:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8008b18:	e029      	b.n	8008b6e <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 8008b1a:	6839      	ldr	r1, [r7, #0]
 8008b1c:	6878      	ldr	r0, [r7, #4]
 8008b1e:	f000 fa09 	bl	8008f34 <USBD_CtlError>
      err++;
 8008b22:	7afb      	ldrb	r3, [r7, #11]
 8008b24:	3301      	adds	r3, #1
 8008b26:	72fb      	strb	r3, [r7, #11]
    break;
 8008b28:	e021      	b.n	8008b6e <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	7c1b      	ldrb	r3, [r3, #16]
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d10d      	bne.n	8008b4e <USBD_GetDescriptor+0x2ba>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b3a:	f107 0208 	add.w	r2, r7, #8
 8008b3e:	4610      	mov	r0, r2
 8008b40:	4798      	blx	r3
 8008b42:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	3301      	adds	r3, #1
 8008b48:	2207      	movs	r2, #7
 8008b4a:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8008b4c:	e00f      	b.n	8008b6e <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 8008b4e:	6839      	ldr	r1, [r7, #0]
 8008b50:	6878      	ldr	r0, [r7, #4]
 8008b52:	f000 f9ef 	bl	8008f34 <USBD_CtlError>
      err++;
 8008b56:	7afb      	ldrb	r3, [r7, #11]
 8008b58:	3301      	adds	r3, #1
 8008b5a:	72fb      	strb	r3, [r7, #11]
    break;
 8008b5c:	e007      	b.n	8008b6e <USBD_GetDescriptor+0x2da>

  default:
    USBD_CtlError(pdev, req);
 8008b5e:	6839      	ldr	r1, [r7, #0]
 8008b60:	6878      	ldr	r0, [r7, #4]
 8008b62:	f000 f9e7 	bl	8008f34 <USBD_CtlError>
    err++;
 8008b66:	7afb      	ldrb	r3, [r7, #11]
 8008b68:	3301      	adds	r3, #1
 8008b6a:	72fb      	strb	r3, [r7, #11]
    break;
 8008b6c:	bf00      	nop
  }

  if (err != 0U)
 8008b6e:	7afb      	ldrb	r3, [r7, #11]
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d11e      	bne.n	8008bb2 <USBD_GetDescriptor+0x31e>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8008b74:	683b      	ldr	r3, [r7, #0]
 8008b76:	88db      	ldrh	r3, [r3, #6]
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d016      	beq.n	8008baa <USBD_GetDescriptor+0x316>
    {
      if (len != 0U)
 8008b7c:	893b      	ldrh	r3, [r7, #8]
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d00e      	beq.n	8008ba0 <USBD_GetDescriptor+0x30c>
      {
        len = MIN(len, req->wLength);
 8008b82:	683b      	ldr	r3, [r7, #0]
 8008b84:	88da      	ldrh	r2, [r3, #6]
 8008b86:	893b      	ldrh	r3, [r7, #8]
 8008b88:	4293      	cmp	r3, r2
 8008b8a:	bf28      	it	cs
 8008b8c:	4613      	movcs	r3, r2
 8008b8e:	b29b      	uxth	r3, r3
 8008b90:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8008b92:	893b      	ldrh	r3, [r7, #8]
 8008b94:	461a      	mov	r2, r3
 8008b96:	68f9      	ldr	r1, [r7, #12]
 8008b98:	6878      	ldr	r0, [r7, #4]
 8008b9a:	f000 fa3c 	bl	8009016 <USBD_CtlSendData>
 8008b9e:	e009      	b.n	8008bb4 <USBD_GetDescriptor+0x320>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8008ba0:	6839      	ldr	r1, [r7, #0]
 8008ba2:	6878      	ldr	r0, [r7, #4]
 8008ba4:	f000 f9c6 	bl	8008f34 <USBD_CtlError>
 8008ba8:	e004      	b.n	8008bb4 <USBD_GetDescriptor+0x320>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8008baa:	6878      	ldr	r0, [r7, #4]
 8008bac:	f000 fa8d 	bl	80090ca <USBD_CtlSendStatus>
 8008bb0:	e000      	b.n	8008bb4 <USBD_GetDescriptor+0x320>
    return;
 8008bb2:	bf00      	nop
    }
  }
}
 8008bb4:	3710      	adds	r7, #16
 8008bb6:	46bd      	mov	sp, r7
 8008bb8:	bd80      	pop	{r7, pc}
 8008bba:	bf00      	nop

08008bbc <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008bbc:	b580      	push	{r7, lr}
 8008bbe:	b084      	sub	sp, #16
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	6078      	str	r0, [r7, #4]
 8008bc4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008bc6:	683b      	ldr	r3, [r7, #0]
 8008bc8:	889b      	ldrh	r3, [r3, #4]
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d130      	bne.n	8008c30 <USBD_SetAddress+0x74>
 8008bce:	683b      	ldr	r3, [r7, #0]
 8008bd0:	88db      	ldrh	r3, [r3, #6]
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d12c      	bne.n	8008c30 <USBD_SetAddress+0x74>
 8008bd6:	683b      	ldr	r3, [r7, #0]
 8008bd8:	885b      	ldrh	r3, [r3, #2]
 8008bda:	2b7f      	cmp	r3, #127	; 0x7f
 8008bdc:	d828      	bhi.n	8008c30 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008bde:	683b      	ldr	r3, [r7, #0]
 8008be0:	885b      	ldrh	r3, [r3, #2]
 8008be2:	b2db      	uxtb	r3, r3
 8008be4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008be8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008bf0:	2b03      	cmp	r3, #3
 8008bf2:	d104      	bne.n	8008bfe <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8008bf4:	6839      	ldr	r1, [r7, #0]
 8008bf6:	6878      	ldr	r0, [r7, #4]
 8008bf8:	f000 f99c 	bl	8008f34 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008bfc:	e01c      	b.n	8008c38 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	7bfa      	ldrb	r2, [r7, #15]
 8008c02:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008c06:	7bfb      	ldrb	r3, [r7, #15]
 8008c08:	4619      	mov	r1, r3
 8008c0a:	6878      	ldr	r0, [r7, #4]
 8008c0c:	f000 fe87 	bl	800991e <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008c10:	6878      	ldr	r0, [r7, #4]
 8008c12:	f000 fa5a 	bl	80090ca <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008c16:	7bfb      	ldrb	r3, [r7, #15]
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d004      	beq.n	8008c26 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	2202      	movs	r2, #2
 8008c20:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c24:	e008      	b.n	8008c38 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	2201      	movs	r2, #1
 8008c2a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c2e:	e003      	b.n	8008c38 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008c30:	6839      	ldr	r1, [r7, #0]
 8008c32:	6878      	ldr	r0, [r7, #4]
 8008c34:	f000 f97e 	bl	8008f34 <USBD_CtlError>
  }
}
 8008c38:	bf00      	nop
 8008c3a:	3710      	adds	r7, #16
 8008c3c:	46bd      	mov	sp, r7
 8008c3e:	bd80      	pop	{r7, pc}

08008c40 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008c40:	b580      	push	{r7, lr}
 8008c42:	b084      	sub	sp, #16
 8008c44:	af00      	add	r7, sp, #0
 8008c46:	6078      	str	r0, [r7, #4]
 8008c48:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008c4a:	2300      	movs	r3, #0
 8008c4c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008c4e:	683b      	ldr	r3, [r7, #0]
 8008c50:	885b      	ldrh	r3, [r3, #2]
 8008c52:	b2da      	uxtb	r2, r3
 8008c54:	4b4b      	ldr	r3, [pc, #300]	; (8008d84 <USBD_SetConfig+0x144>)
 8008c56:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008c58:	4b4a      	ldr	r3, [pc, #296]	; (8008d84 <USBD_SetConfig+0x144>)
 8008c5a:	781b      	ldrb	r3, [r3, #0]
 8008c5c:	2b01      	cmp	r3, #1
 8008c5e:	d905      	bls.n	8008c6c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008c60:	6839      	ldr	r1, [r7, #0]
 8008c62:	6878      	ldr	r0, [r7, #4]
 8008c64:	f000 f966 	bl	8008f34 <USBD_CtlError>
    return USBD_FAIL;
 8008c68:	2303      	movs	r3, #3
 8008c6a:	e087      	b.n	8008d7c <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c72:	2b02      	cmp	r3, #2
 8008c74:	d002      	beq.n	8008c7c <USBD_SetConfig+0x3c>
 8008c76:	2b03      	cmp	r3, #3
 8008c78:	d025      	beq.n	8008cc6 <USBD_SetConfig+0x86>
 8008c7a:	e071      	b.n	8008d60 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8008c7c:	4b41      	ldr	r3, [pc, #260]	; (8008d84 <USBD_SetConfig+0x144>)
 8008c7e:	781b      	ldrb	r3, [r3, #0]
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d01c      	beq.n	8008cbe <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8008c84:	4b3f      	ldr	r3, [pc, #252]	; (8008d84 <USBD_SetConfig+0x144>)
 8008c86:	781b      	ldrb	r3, [r3, #0]
 8008c88:	461a      	mov	r2, r3
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 8008c8e:	4b3d      	ldr	r3, [pc, #244]	; (8008d84 <USBD_SetConfig+0x144>)
 8008c90:	781b      	ldrb	r3, [r3, #0]
 8008c92:	4619      	mov	r1, r3
 8008c94:	6878      	ldr	r0, [r7, #4]
 8008c96:	f7ff f9bd 	bl	8008014 <USBD_SetClassConfig>
 8008c9a:	4603      	mov	r3, r0
 8008c9c:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 8008c9e:	7bfb      	ldrb	r3, [r7, #15]
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d004      	beq.n	8008cae <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8008ca4:	6839      	ldr	r1, [r7, #0]
 8008ca6:	6878      	ldr	r0, [r7, #4]
 8008ca8:	f000 f944 	bl	8008f34 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8008cac:	e065      	b.n	8008d7a <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8008cae:	6878      	ldr	r0, [r7, #4]
 8008cb0:	f000 fa0b 	bl	80090ca <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	2203      	movs	r2, #3
 8008cb8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8008cbc:	e05d      	b.n	8008d7a <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8008cbe:	6878      	ldr	r0, [r7, #4]
 8008cc0:	f000 fa03 	bl	80090ca <USBD_CtlSendStatus>
    break;
 8008cc4:	e059      	b.n	8008d7a <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 8008cc6:	4b2f      	ldr	r3, [pc, #188]	; (8008d84 <USBD_SetConfig+0x144>)
 8008cc8:	781b      	ldrb	r3, [r3, #0]
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d112      	bne.n	8008cf4 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	2202      	movs	r2, #2
 8008cd2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8008cd6:	4b2b      	ldr	r3, [pc, #172]	; (8008d84 <USBD_SetConfig+0x144>)
 8008cd8:	781b      	ldrb	r3, [r3, #0]
 8008cda:	461a      	mov	r2, r3
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008ce0:	4b28      	ldr	r3, [pc, #160]	; (8008d84 <USBD_SetConfig+0x144>)
 8008ce2:	781b      	ldrb	r3, [r3, #0]
 8008ce4:	4619      	mov	r1, r3
 8008ce6:	6878      	ldr	r0, [r7, #4]
 8008ce8:	f7ff f9b0 	bl	800804c <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8008cec:	6878      	ldr	r0, [r7, #4]
 8008cee:	f000 f9ec 	bl	80090ca <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8008cf2:	e042      	b.n	8008d7a <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8008cf4:	4b23      	ldr	r3, [pc, #140]	; (8008d84 <USBD_SetConfig+0x144>)
 8008cf6:	781b      	ldrb	r3, [r3, #0]
 8008cf8:	461a      	mov	r2, r3
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	685b      	ldr	r3, [r3, #4]
 8008cfe:	429a      	cmp	r2, r3
 8008d00:	d02a      	beq.n	8008d58 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	685b      	ldr	r3, [r3, #4]
 8008d06:	b2db      	uxtb	r3, r3
 8008d08:	4619      	mov	r1, r3
 8008d0a:	6878      	ldr	r0, [r7, #4]
 8008d0c:	f7ff f99e 	bl	800804c <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8008d10:	4b1c      	ldr	r3, [pc, #112]	; (8008d84 <USBD_SetConfig+0x144>)
 8008d12:	781b      	ldrb	r3, [r3, #0]
 8008d14:	461a      	mov	r2, r3
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8008d1a:	4b1a      	ldr	r3, [pc, #104]	; (8008d84 <USBD_SetConfig+0x144>)
 8008d1c:	781b      	ldrb	r3, [r3, #0]
 8008d1e:	4619      	mov	r1, r3
 8008d20:	6878      	ldr	r0, [r7, #4]
 8008d22:	f7ff f977 	bl	8008014 <USBD_SetClassConfig>
 8008d26:	4603      	mov	r3, r0
 8008d28:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 8008d2a:	7bfb      	ldrb	r3, [r7, #15]
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d00f      	beq.n	8008d50 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8008d30:	6839      	ldr	r1, [r7, #0]
 8008d32:	6878      	ldr	r0, [r7, #4]
 8008d34:	f000 f8fe 	bl	8008f34 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	685b      	ldr	r3, [r3, #4]
 8008d3c:	b2db      	uxtb	r3, r3
 8008d3e:	4619      	mov	r1, r3
 8008d40:	6878      	ldr	r0, [r7, #4]
 8008d42:	f7ff f983 	bl	800804c <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	2202      	movs	r2, #2
 8008d4a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8008d4e:	e014      	b.n	8008d7a <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8008d50:	6878      	ldr	r0, [r7, #4]
 8008d52:	f000 f9ba 	bl	80090ca <USBD_CtlSendStatus>
    break;
 8008d56:	e010      	b.n	8008d7a <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8008d58:	6878      	ldr	r0, [r7, #4]
 8008d5a:	f000 f9b6 	bl	80090ca <USBD_CtlSendStatus>
    break;
 8008d5e:	e00c      	b.n	8008d7a <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8008d60:	6839      	ldr	r1, [r7, #0]
 8008d62:	6878      	ldr	r0, [r7, #4]
 8008d64:	f000 f8e6 	bl	8008f34 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008d68:	4b06      	ldr	r3, [pc, #24]	; (8008d84 <USBD_SetConfig+0x144>)
 8008d6a:	781b      	ldrb	r3, [r3, #0]
 8008d6c:	4619      	mov	r1, r3
 8008d6e:	6878      	ldr	r0, [r7, #4]
 8008d70:	f7ff f96c 	bl	800804c <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8008d74:	2303      	movs	r3, #3
 8008d76:	73fb      	strb	r3, [r7, #15]
    break;
 8008d78:	bf00      	nop
  }

  return ret;
 8008d7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d7c:	4618      	mov	r0, r3
 8008d7e:	3710      	adds	r7, #16
 8008d80:	46bd      	mov	sp, r7
 8008d82:	bd80      	pop	{r7, pc}
 8008d84:	20000201 	.word	0x20000201

08008d88 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d88:	b580      	push	{r7, lr}
 8008d8a:	b082      	sub	sp, #8
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	6078      	str	r0, [r7, #4]
 8008d90:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008d92:	683b      	ldr	r3, [r7, #0]
 8008d94:	88db      	ldrh	r3, [r3, #6]
 8008d96:	2b01      	cmp	r3, #1
 8008d98:	d004      	beq.n	8008da4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008d9a:	6839      	ldr	r1, [r7, #0]
 8008d9c:	6878      	ldr	r0, [r7, #4]
 8008d9e:	f000 f8c9 	bl	8008f34 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 8008da2:	e021      	b.n	8008de8 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008daa:	2b01      	cmp	r3, #1
 8008dac:	db17      	blt.n	8008dde <USBD_GetConfig+0x56>
 8008dae:	2b02      	cmp	r3, #2
 8008db0:	dd02      	ble.n	8008db8 <USBD_GetConfig+0x30>
 8008db2:	2b03      	cmp	r3, #3
 8008db4:	d00b      	beq.n	8008dce <USBD_GetConfig+0x46>
 8008db6:	e012      	b.n	8008dde <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	2200      	movs	r2, #0
 8008dbc:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	3308      	adds	r3, #8
 8008dc2:	2201      	movs	r2, #1
 8008dc4:	4619      	mov	r1, r3
 8008dc6:	6878      	ldr	r0, [r7, #4]
 8008dc8:	f000 f925 	bl	8009016 <USBD_CtlSendData>
      break;
 8008dcc:	e00c      	b.n	8008de8 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	3304      	adds	r3, #4
 8008dd2:	2201      	movs	r2, #1
 8008dd4:	4619      	mov	r1, r3
 8008dd6:	6878      	ldr	r0, [r7, #4]
 8008dd8:	f000 f91d 	bl	8009016 <USBD_CtlSendData>
      break;
 8008ddc:	e004      	b.n	8008de8 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 8008dde:	6839      	ldr	r1, [r7, #0]
 8008de0:	6878      	ldr	r0, [r7, #4]
 8008de2:	f000 f8a7 	bl	8008f34 <USBD_CtlError>
      break;
 8008de6:	bf00      	nop
}
 8008de8:	bf00      	nop
 8008dea:	3708      	adds	r7, #8
 8008dec:	46bd      	mov	sp, r7
 8008dee:	bd80      	pop	{r7, pc}

08008df0 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008df0:	b580      	push	{r7, lr}
 8008df2:	b082      	sub	sp, #8
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	6078      	str	r0, [r7, #4]
 8008df8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e00:	3b01      	subs	r3, #1
 8008e02:	2b02      	cmp	r3, #2
 8008e04:	d81e      	bhi.n	8008e44 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 8008e06:	683b      	ldr	r3, [r7, #0]
 8008e08:	88db      	ldrh	r3, [r3, #6]
 8008e0a:	2b02      	cmp	r3, #2
 8008e0c:	d004      	beq.n	8008e18 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8008e0e:	6839      	ldr	r1, [r7, #0]
 8008e10:	6878      	ldr	r0, [r7, #4]
 8008e12:	f000 f88f 	bl	8008f34 <USBD_CtlError>
      break;
 8008e16:	e01a      	b.n	8008e4e <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	2201      	movs	r2, #1
 8008e1c:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d005      	beq.n	8008e34 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	68db      	ldr	r3, [r3, #12]
 8008e2c:	f043 0202 	orr.w	r2, r3, #2
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	330c      	adds	r3, #12
 8008e38:	2202      	movs	r2, #2
 8008e3a:	4619      	mov	r1, r3
 8008e3c:	6878      	ldr	r0, [r7, #4]
 8008e3e:	f000 f8ea 	bl	8009016 <USBD_CtlSendData>
    break;
 8008e42:	e004      	b.n	8008e4e <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 8008e44:	6839      	ldr	r1, [r7, #0]
 8008e46:	6878      	ldr	r0, [r7, #4]
 8008e48:	f000 f874 	bl	8008f34 <USBD_CtlError>
    break;
 8008e4c:	bf00      	nop
  }
}
 8008e4e:	bf00      	nop
 8008e50:	3708      	adds	r7, #8
 8008e52:	46bd      	mov	sp, r7
 8008e54:	bd80      	pop	{r7, pc}

08008e56 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e56:	b580      	push	{r7, lr}
 8008e58:	b082      	sub	sp, #8
 8008e5a:	af00      	add	r7, sp, #0
 8008e5c:	6078      	str	r0, [r7, #4]
 8008e5e:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008e60:	683b      	ldr	r3, [r7, #0]
 8008e62:	885b      	ldrh	r3, [r3, #2]
 8008e64:	2b01      	cmp	r3, #1
 8008e66:	d106      	bne.n	8008e76 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	2201      	movs	r2, #1
 8008e6c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008e70:	6878      	ldr	r0, [r7, #4]
 8008e72:	f000 f92a 	bl	80090ca <USBD_CtlSendStatus>
  }
}
 8008e76:	bf00      	nop
 8008e78:	3708      	adds	r7, #8
 8008e7a:	46bd      	mov	sp, r7
 8008e7c:	bd80      	pop	{r7, pc}

08008e7e <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e7e:	b580      	push	{r7, lr}
 8008e80:	b082      	sub	sp, #8
 8008e82:	af00      	add	r7, sp, #0
 8008e84:	6078      	str	r0, [r7, #4]
 8008e86:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e8e:	3b01      	subs	r3, #1
 8008e90:	2b02      	cmp	r3, #2
 8008e92:	d80b      	bhi.n	8008eac <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008e94:	683b      	ldr	r3, [r7, #0]
 8008e96:	885b      	ldrh	r3, [r3, #2]
 8008e98:	2b01      	cmp	r3, #1
 8008e9a:	d10c      	bne.n	8008eb6 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	2200      	movs	r2, #0
 8008ea0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008ea4:	6878      	ldr	r0, [r7, #4]
 8008ea6:	f000 f910 	bl	80090ca <USBD_CtlSendStatus>
      }
      break;
 8008eaa:	e004      	b.n	8008eb6 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8008eac:	6839      	ldr	r1, [r7, #0]
 8008eae:	6878      	ldr	r0, [r7, #4]
 8008eb0:	f000 f840 	bl	8008f34 <USBD_CtlError>
      break;
 8008eb4:	e000      	b.n	8008eb8 <USBD_ClrFeature+0x3a>
      break;
 8008eb6:	bf00      	nop
  }
}
 8008eb8:	bf00      	nop
 8008eba:	3708      	adds	r7, #8
 8008ebc:	46bd      	mov	sp, r7
 8008ebe:	bd80      	pop	{r7, pc}

08008ec0 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008ec0:	b580      	push	{r7, lr}
 8008ec2:	b084      	sub	sp, #16
 8008ec4:	af00      	add	r7, sp, #0
 8008ec6:	6078      	str	r0, [r7, #4]
 8008ec8:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008eca:	683b      	ldr	r3, [r7, #0]
 8008ecc:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	781a      	ldrb	r2, [r3, #0]
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	3301      	adds	r3, #1
 8008eda:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	781a      	ldrb	r2, [r3, #0]
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	3301      	adds	r3, #1
 8008ee8:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008eea:	68f8      	ldr	r0, [r7, #12]
 8008eec:	f7ff faa8 	bl	8008440 <SWAPBYTE>
 8008ef0:	4603      	mov	r3, r0
 8008ef2:	461a      	mov	r2, r3
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	3301      	adds	r3, #1
 8008efc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	3301      	adds	r3, #1
 8008f02:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008f04:	68f8      	ldr	r0, [r7, #12]
 8008f06:	f7ff fa9b 	bl	8008440 <SWAPBYTE>
 8008f0a:	4603      	mov	r3, r0
 8008f0c:	461a      	mov	r2, r3
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	3301      	adds	r3, #1
 8008f16:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	3301      	adds	r3, #1
 8008f1c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008f1e:	68f8      	ldr	r0, [r7, #12]
 8008f20:	f7ff fa8e 	bl	8008440 <SWAPBYTE>
 8008f24:	4603      	mov	r3, r0
 8008f26:	461a      	mov	r2, r3
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	80da      	strh	r2, [r3, #6]
}
 8008f2c:	bf00      	nop
 8008f2e:	3710      	adds	r7, #16
 8008f30:	46bd      	mov	sp, r7
 8008f32:	bd80      	pop	{r7, pc}

08008f34 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008f34:	b580      	push	{r7, lr}
 8008f36:	b082      	sub	sp, #8
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	6078      	str	r0, [r7, #4]
 8008f3c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008f3e:	2180      	movs	r1, #128	; 0x80
 8008f40:	6878      	ldr	r0, [r7, #4]
 8008f42:	f000 fc81 	bl	8009848 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008f46:	2100      	movs	r1, #0
 8008f48:	6878      	ldr	r0, [r7, #4]
 8008f4a:	f000 fc7d 	bl	8009848 <USBD_LL_StallEP>
}
 8008f4e:	bf00      	nop
 8008f50:	3708      	adds	r7, #8
 8008f52:	46bd      	mov	sp, r7
 8008f54:	bd80      	pop	{r7, pc}

08008f56 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008f56:	b580      	push	{r7, lr}
 8008f58:	b086      	sub	sp, #24
 8008f5a:	af00      	add	r7, sp, #0
 8008f5c:	60f8      	str	r0, [r7, #12]
 8008f5e:	60b9      	str	r1, [r7, #8]
 8008f60:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008f62:	2300      	movs	r3, #0
 8008f64:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d036      	beq.n	8008fda <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008f70:	6938      	ldr	r0, [r7, #16]
 8008f72:	f000 f836 	bl	8008fe2 <USBD_GetLen>
 8008f76:	4603      	mov	r3, r0
 8008f78:	3301      	adds	r3, #1
 8008f7a:	b29b      	uxth	r3, r3
 8008f7c:	005b      	lsls	r3, r3, #1
 8008f7e:	b29a      	uxth	r2, r3
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008f84:	7dfb      	ldrb	r3, [r7, #23]
 8008f86:	68ba      	ldr	r2, [r7, #8]
 8008f88:	4413      	add	r3, r2
 8008f8a:	687a      	ldr	r2, [r7, #4]
 8008f8c:	7812      	ldrb	r2, [r2, #0]
 8008f8e:	701a      	strb	r2, [r3, #0]
  idx++;
 8008f90:	7dfb      	ldrb	r3, [r7, #23]
 8008f92:	3301      	adds	r3, #1
 8008f94:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008f96:	7dfb      	ldrb	r3, [r7, #23]
 8008f98:	68ba      	ldr	r2, [r7, #8]
 8008f9a:	4413      	add	r3, r2
 8008f9c:	2203      	movs	r2, #3
 8008f9e:	701a      	strb	r2, [r3, #0]
  idx++;
 8008fa0:	7dfb      	ldrb	r3, [r7, #23]
 8008fa2:	3301      	adds	r3, #1
 8008fa4:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008fa6:	e013      	b.n	8008fd0 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008fa8:	7dfb      	ldrb	r3, [r7, #23]
 8008faa:	68ba      	ldr	r2, [r7, #8]
 8008fac:	4413      	add	r3, r2
 8008fae:	693a      	ldr	r2, [r7, #16]
 8008fb0:	7812      	ldrb	r2, [r2, #0]
 8008fb2:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008fb4:	693b      	ldr	r3, [r7, #16]
 8008fb6:	3301      	adds	r3, #1
 8008fb8:	613b      	str	r3, [r7, #16]
    idx++;
 8008fba:	7dfb      	ldrb	r3, [r7, #23]
 8008fbc:	3301      	adds	r3, #1
 8008fbe:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008fc0:	7dfb      	ldrb	r3, [r7, #23]
 8008fc2:	68ba      	ldr	r2, [r7, #8]
 8008fc4:	4413      	add	r3, r2
 8008fc6:	2200      	movs	r2, #0
 8008fc8:	701a      	strb	r2, [r3, #0]
    idx++;
 8008fca:	7dfb      	ldrb	r3, [r7, #23]
 8008fcc:	3301      	adds	r3, #1
 8008fce:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008fd0:	693b      	ldr	r3, [r7, #16]
 8008fd2:	781b      	ldrb	r3, [r3, #0]
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d1e7      	bne.n	8008fa8 <USBD_GetString+0x52>
 8008fd8:	e000      	b.n	8008fdc <USBD_GetString+0x86>
    return;
 8008fda:	bf00      	nop
  }
}
 8008fdc:	3718      	adds	r7, #24
 8008fde:	46bd      	mov	sp, r7
 8008fe0:	bd80      	pop	{r7, pc}

08008fe2 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008fe2:	b480      	push	{r7}
 8008fe4:	b085      	sub	sp, #20
 8008fe6:	af00      	add	r7, sp, #0
 8008fe8:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008fea:	2300      	movs	r3, #0
 8008fec:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008ff2:	e005      	b.n	8009000 <USBD_GetLen+0x1e>
  {
    len++;
 8008ff4:	7bfb      	ldrb	r3, [r7, #15]
 8008ff6:	3301      	adds	r3, #1
 8008ff8:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008ffa:	68bb      	ldr	r3, [r7, #8]
 8008ffc:	3301      	adds	r3, #1
 8008ffe:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009000:	68bb      	ldr	r3, [r7, #8]
 8009002:	781b      	ldrb	r3, [r3, #0]
 8009004:	2b00      	cmp	r3, #0
 8009006:	d1f5      	bne.n	8008ff4 <USBD_GetLen+0x12>
  }

  return len;
 8009008:	7bfb      	ldrb	r3, [r7, #15]
}
 800900a:	4618      	mov	r0, r3
 800900c:	3714      	adds	r7, #20
 800900e:	46bd      	mov	sp, r7
 8009010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009014:	4770      	bx	lr

08009016 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009016:	b580      	push	{r7, lr}
 8009018:	b084      	sub	sp, #16
 800901a:	af00      	add	r7, sp, #0
 800901c:	60f8      	str	r0, [r7, #12]
 800901e:	60b9      	str	r1, [r7, #8]
 8009020:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	2202      	movs	r2, #2
 8009026:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	687a      	ldr	r2, [r7, #4]
 800902e:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	687a      	ldr	r2, [r7, #4]
 8009034:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	68ba      	ldr	r2, [r7, #8]
 800903a:	2100      	movs	r1, #0
 800903c:	68f8      	ldr	r0, [r7, #12]
 800903e:	f000 fc8d 	bl	800995c <USBD_LL_Transmit>

  return USBD_OK;
 8009042:	2300      	movs	r3, #0
}
 8009044:	4618      	mov	r0, r3
 8009046:	3710      	adds	r7, #16
 8009048:	46bd      	mov	sp, r7
 800904a:	bd80      	pop	{r7, pc}

0800904c <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800904c:	b580      	push	{r7, lr}
 800904e:	b084      	sub	sp, #16
 8009050:	af00      	add	r7, sp, #0
 8009052:	60f8      	str	r0, [r7, #12]
 8009054:	60b9      	str	r1, [r7, #8]
 8009056:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	68ba      	ldr	r2, [r7, #8]
 800905c:	2100      	movs	r1, #0
 800905e:	68f8      	ldr	r0, [r7, #12]
 8009060:	f000 fc7c 	bl	800995c <USBD_LL_Transmit>

  return USBD_OK;
 8009064:	2300      	movs	r3, #0
}
 8009066:	4618      	mov	r0, r3
 8009068:	3710      	adds	r7, #16
 800906a:	46bd      	mov	sp, r7
 800906c:	bd80      	pop	{r7, pc}

0800906e <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800906e:	b580      	push	{r7, lr}
 8009070:	b084      	sub	sp, #16
 8009072:	af00      	add	r7, sp, #0
 8009074:	60f8      	str	r0, [r7, #12]
 8009076:	60b9      	str	r1, [r7, #8]
 8009078:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	2203      	movs	r2, #3
 800907e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	687a      	ldr	r2, [r7, #4]
 8009086:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	687a      	ldr	r2, [r7, #4]
 800908e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	68ba      	ldr	r2, [r7, #8]
 8009096:	2100      	movs	r1, #0
 8009098:	68f8      	ldr	r0, [r7, #12]
 800909a:	f000 fc80 	bl	800999e <USBD_LL_PrepareReceive>

  return USBD_OK;
 800909e:	2300      	movs	r3, #0
}
 80090a0:	4618      	mov	r0, r3
 80090a2:	3710      	adds	r7, #16
 80090a4:	46bd      	mov	sp, r7
 80090a6:	bd80      	pop	{r7, pc}

080090a8 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80090a8:	b580      	push	{r7, lr}
 80090aa:	b084      	sub	sp, #16
 80090ac:	af00      	add	r7, sp, #0
 80090ae:	60f8      	str	r0, [r7, #12]
 80090b0:	60b9      	str	r1, [r7, #8]
 80090b2:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	68ba      	ldr	r2, [r7, #8]
 80090b8:	2100      	movs	r1, #0
 80090ba:	68f8      	ldr	r0, [r7, #12]
 80090bc:	f000 fc6f 	bl	800999e <USBD_LL_PrepareReceive>

  return USBD_OK;
 80090c0:	2300      	movs	r3, #0
}
 80090c2:	4618      	mov	r0, r3
 80090c4:	3710      	adds	r7, #16
 80090c6:	46bd      	mov	sp, r7
 80090c8:	bd80      	pop	{r7, pc}

080090ca <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80090ca:	b580      	push	{r7, lr}
 80090cc:	b082      	sub	sp, #8
 80090ce:	af00      	add	r7, sp, #0
 80090d0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	2204      	movs	r2, #4
 80090d6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80090da:	2300      	movs	r3, #0
 80090dc:	2200      	movs	r2, #0
 80090de:	2100      	movs	r1, #0
 80090e0:	6878      	ldr	r0, [r7, #4]
 80090e2:	f000 fc3b 	bl	800995c <USBD_LL_Transmit>

  return USBD_OK;
 80090e6:	2300      	movs	r3, #0
}
 80090e8:	4618      	mov	r0, r3
 80090ea:	3708      	adds	r7, #8
 80090ec:	46bd      	mov	sp, r7
 80090ee:	bd80      	pop	{r7, pc}

080090f0 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80090f0:	b580      	push	{r7, lr}
 80090f2:	b082      	sub	sp, #8
 80090f4:	af00      	add	r7, sp, #0
 80090f6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	2205      	movs	r2, #5
 80090fc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009100:	2300      	movs	r3, #0
 8009102:	2200      	movs	r2, #0
 8009104:	2100      	movs	r1, #0
 8009106:	6878      	ldr	r0, [r7, #4]
 8009108:	f000 fc49 	bl	800999e <USBD_LL_PrepareReceive>

  return USBD_OK;
 800910c:	2300      	movs	r3, #0
}
 800910e:	4618      	mov	r0, r3
 8009110:	3708      	adds	r7, #8
 8009112:	46bd      	mov	sp, r7
 8009114:	bd80      	pop	{r7, pc}
	...

08009118 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 8009118:	b580      	push	{r7, lr}
 800911a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 800911c:	2200      	movs	r2, #0
 800911e:	4912      	ldr	r1, [pc, #72]	; (8009168 <MX_USB_Device_Init+0x50>)
 8009120:	4812      	ldr	r0, [pc, #72]	; (800916c <MX_USB_Device_Init+0x54>)
 8009122:	f7fe ff09 	bl	8007f38 <USBD_Init>
 8009126:	4603      	mov	r3, r0
 8009128:	2b00      	cmp	r3, #0
 800912a:	d001      	beq.n	8009130 <MX_USB_Device_Init+0x18>
    Error_Handler();
 800912c:	f7f7 ff32 	bl	8000f94 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 8009130:	490f      	ldr	r1, [pc, #60]	; (8009170 <MX_USB_Device_Init+0x58>)
 8009132:	480e      	ldr	r0, [pc, #56]	; (800916c <MX_USB_Device_Init+0x54>)
 8009134:	f7fe ff30 	bl	8007f98 <USBD_RegisterClass>
 8009138:	4603      	mov	r3, r0
 800913a:	2b00      	cmp	r3, #0
 800913c:	d001      	beq.n	8009142 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800913e:	f7f7 ff29 	bl	8000f94 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 8009142:	490c      	ldr	r1, [pc, #48]	; (8009174 <MX_USB_Device_Init+0x5c>)
 8009144:	4809      	ldr	r0, [pc, #36]	; (800916c <MX_USB_Device_Init+0x54>)
 8009146:	f7fe fe5b 	bl	8007e00 <USBD_CDC_RegisterInterface>
 800914a:	4603      	mov	r3, r0
 800914c:	2b00      	cmp	r3, #0
 800914e:	d001      	beq.n	8009154 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 8009150:	f7f7 ff20 	bl	8000f94 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 8009154:	4805      	ldr	r0, [pc, #20]	; (800916c <MX_USB_Device_Init+0x54>)
 8009156:	f7fe ff46 	bl	8007fe6 <USBD_Start>
 800915a:	4603      	mov	r3, r0
 800915c:	2b00      	cmp	r3, #0
 800915e:	d001      	beq.n	8009164 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 8009160:	f7f7 ff18 	bl	8000f94 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 8009164:	bf00      	nop
 8009166:	bd80      	pop	{r7, pc}
 8009168:	20000184 	.word	0x20000184
 800916c:	200006d4 	.word	0x200006d4
 8009170:	2000006c 	.word	0x2000006c
 8009174:	20000170 	.word	0x20000170

08009178 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009178:	b580      	push	{r7, lr}
 800917a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800917c:	2200      	movs	r2, #0
 800917e:	4905      	ldr	r1, [pc, #20]	; (8009194 <CDC_Init_FS+0x1c>)
 8009180:	4805      	ldr	r0, [pc, #20]	; (8009198 <CDC_Init_FS+0x20>)
 8009182:	f7fe fe52 	bl	8007e2a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009186:	4905      	ldr	r1, [pc, #20]	; (800919c <CDC_Init_FS+0x24>)
 8009188:	4803      	ldr	r0, [pc, #12]	; (8009198 <CDC_Init_FS+0x20>)
 800918a:	f7fe fe67 	bl	8007e5c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800918e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009190:	4618      	mov	r0, r3
 8009192:	bd80      	pop	{r7, pc}
 8009194:	20000d8c 	.word	0x20000d8c
 8009198:	200006d4 	.word	0x200006d4
 800919c:	200009a4 	.word	0x200009a4

080091a0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80091a0:	b480      	push	{r7}
 80091a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80091a4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80091a6:	4618      	mov	r0, r3
 80091a8:	46bd      	mov	sp, r7
 80091aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ae:	4770      	bx	lr

080091b0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80091b0:	b480      	push	{r7}
 80091b2:	b083      	sub	sp, #12
 80091b4:	af00      	add	r7, sp, #0
 80091b6:	4603      	mov	r3, r0
 80091b8:	6039      	str	r1, [r7, #0]
 80091ba:	71fb      	strb	r3, [r7, #7]
 80091bc:	4613      	mov	r3, r2
 80091be:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80091c0:	79fb      	ldrb	r3, [r7, #7]
 80091c2:	2b23      	cmp	r3, #35	; 0x23
 80091c4:	d84a      	bhi.n	800925c <CDC_Control_FS+0xac>
 80091c6:	a201      	add	r2, pc, #4	; (adr r2, 80091cc <CDC_Control_FS+0x1c>)
 80091c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091cc:	0800925d 	.word	0x0800925d
 80091d0:	0800925d 	.word	0x0800925d
 80091d4:	0800925d 	.word	0x0800925d
 80091d8:	0800925d 	.word	0x0800925d
 80091dc:	0800925d 	.word	0x0800925d
 80091e0:	0800925d 	.word	0x0800925d
 80091e4:	0800925d 	.word	0x0800925d
 80091e8:	0800925d 	.word	0x0800925d
 80091ec:	0800925d 	.word	0x0800925d
 80091f0:	0800925d 	.word	0x0800925d
 80091f4:	0800925d 	.word	0x0800925d
 80091f8:	0800925d 	.word	0x0800925d
 80091fc:	0800925d 	.word	0x0800925d
 8009200:	0800925d 	.word	0x0800925d
 8009204:	0800925d 	.word	0x0800925d
 8009208:	0800925d 	.word	0x0800925d
 800920c:	0800925d 	.word	0x0800925d
 8009210:	0800925d 	.word	0x0800925d
 8009214:	0800925d 	.word	0x0800925d
 8009218:	0800925d 	.word	0x0800925d
 800921c:	0800925d 	.word	0x0800925d
 8009220:	0800925d 	.word	0x0800925d
 8009224:	0800925d 	.word	0x0800925d
 8009228:	0800925d 	.word	0x0800925d
 800922c:	0800925d 	.word	0x0800925d
 8009230:	0800925d 	.word	0x0800925d
 8009234:	0800925d 	.word	0x0800925d
 8009238:	0800925d 	.word	0x0800925d
 800923c:	0800925d 	.word	0x0800925d
 8009240:	0800925d 	.word	0x0800925d
 8009244:	0800925d 	.word	0x0800925d
 8009248:	0800925d 	.word	0x0800925d
 800924c:	0800925d 	.word	0x0800925d
 8009250:	0800925d 	.word	0x0800925d
 8009254:	0800925d 	.word	0x0800925d
 8009258:	0800925d 	.word	0x0800925d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800925c:	bf00      	nop
  }

  return (USBD_OK);
 800925e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009260:	4618      	mov	r0, r3
 8009262:	370c      	adds	r7, #12
 8009264:	46bd      	mov	sp, r7
 8009266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800926a:	4770      	bx	lr

0800926c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800926c:	b580      	push	{r7, lr}
 800926e:	b082      	sub	sp, #8
 8009270:	af00      	add	r7, sp, #0
 8009272:	6078      	str	r0, [r7, #4]
 8009274:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  CDC_On_Receive(Buf, Len); // (1)
 8009276:	6839      	ldr	r1, [r7, #0]
 8009278:	6878      	ldr	r0, [r7, #4]
 800927a:	f7f6 ffcd 	bl	8000218 <CDC_On_Receive>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800927e:	6879      	ldr	r1, [r7, #4]
 8009280:	4805      	ldr	r0, [pc, #20]	; (8009298 <CDC_Receive_FS+0x2c>)
 8009282:	f7fe fdeb 	bl	8007e5c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009286:	4804      	ldr	r0, [pc, #16]	; (8009298 <CDC_Receive_FS+0x2c>)
 8009288:	f7fe fe2c 	bl	8007ee4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800928c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800928e:	4618      	mov	r0, r3
 8009290:	3708      	adds	r7, #8
 8009292:	46bd      	mov	sp, r7
 8009294:	bd80      	pop	{r7, pc}
 8009296:	bf00      	nop
 8009298:	200006d4 	.word	0x200006d4

0800929c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800929c:	b580      	push	{r7, lr}
 800929e:	b084      	sub	sp, #16
 80092a0:	af00      	add	r7, sp, #0
 80092a2:	6078      	str	r0, [r7, #4]
 80092a4:	460b      	mov	r3, r1
 80092a6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80092a8:	2300      	movs	r3, #0
 80092aa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80092ac:	4b0d      	ldr	r3, [pc, #52]	; (80092e4 <CDC_Transmit_FS+0x48>)
 80092ae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80092b2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80092b4:	68bb      	ldr	r3, [r7, #8]
 80092b6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d001      	beq.n	80092c2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80092be:	2301      	movs	r3, #1
 80092c0:	e00b      	b.n	80092da <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80092c2:	887b      	ldrh	r3, [r7, #2]
 80092c4:	461a      	mov	r2, r3
 80092c6:	6879      	ldr	r1, [r7, #4]
 80092c8:	4806      	ldr	r0, [pc, #24]	; (80092e4 <CDC_Transmit_FS+0x48>)
 80092ca:	f7fe fdae 	bl	8007e2a <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80092ce:	4805      	ldr	r0, [pc, #20]	; (80092e4 <CDC_Transmit_FS+0x48>)
 80092d0:	f7fe fdd8 	bl	8007e84 <USBD_CDC_TransmitPacket>
 80092d4:	4603      	mov	r3, r0
 80092d6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80092d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80092da:	4618      	mov	r0, r3
 80092dc:	3710      	adds	r7, #16
 80092de:	46bd      	mov	sp, r7
 80092e0:	bd80      	pop	{r7, pc}
 80092e2:	bf00      	nop
 80092e4:	200006d4 	.word	0x200006d4

080092e8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80092e8:	b480      	push	{r7}
 80092ea:	b087      	sub	sp, #28
 80092ec:	af00      	add	r7, sp, #0
 80092ee:	60f8      	str	r0, [r7, #12]
 80092f0:	60b9      	str	r1, [r7, #8]
 80092f2:	4613      	mov	r3, r2
 80092f4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80092f6:	2300      	movs	r3, #0
 80092f8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80092fa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80092fe:	4618      	mov	r0, r3
 8009300:	371c      	adds	r7, #28
 8009302:	46bd      	mov	sp, r7
 8009304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009308:	4770      	bx	lr
	...

0800930c <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800930c:	b480      	push	{r7}
 800930e:	b083      	sub	sp, #12
 8009310:	af00      	add	r7, sp, #0
 8009312:	4603      	mov	r3, r0
 8009314:	6039      	str	r1, [r7, #0]
 8009316:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 8009318:	683b      	ldr	r3, [r7, #0]
 800931a:	2212      	movs	r2, #18
 800931c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800931e:	4b03      	ldr	r3, [pc, #12]	; (800932c <USBD_CDC_DeviceDescriptor+0x20>)
}
 8009320:	4618      	mov	r0, r3
 8009322:	370c      	adds	r7, #12
 8009324:	46bd      	mov	sp, r7
 8009326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800932a:	4770      	bx	lr
 800932c:	200001a4 	.word	0x200001a4

08009330 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009330:	b480      	push	{r7}
 8009332:	b083      	sub	sp, #12
 8009334:	af00      	add	r7, sp, #0
 8009336:	4603      	mov	r3, r0
 8009338:	6039      	str	r1, [r7, #0]
 800933a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800933c:	683b      	ldr	r3, [r7, #0]
 800933e:	2204      	movs	r2, #4
 8009340:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009342:	4b03      	ldr	r3, [pc, #12]	; (8009350 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 8009344:	4618      	mov	r0, r3
 8009346:	370c      	adds	r7, #12
 8009348:	46bd      	mov	sp, r7
 800934a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800934e:	4770      	bx	lr
 8009350:	200001b8 	.word	0x200001b8

08009354 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009354:	b580      	push	{r7, lr}
 8009356:	b082      	sub	sp, #8
 8009358:	af00      	add	r7, sp, #0
 800935a:	4603      	mov	r3, r0
 800935c:	6039      	str	r1, [r7, #0]
 800935e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009360:	79fb      	ldrb	r3, [r7, #7]
 8009362:	2b00      	cmp	r3, #0
 8009364:	d105      	bne.n	8009372 <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8009366:	683a      	ldr	r2, [r7, #0]
 8009368:	4907      	ldr	r1, [pc, #28]	; (8009388 <USBD_CDC_ProductStrDescriptor+0x34>)
 800936a:	4808      	ldr	r0, [pc, #32]	; (800938c <USBD_CDC_ProductStrDescriptor+0x38>)
 800936c:	f7ff fdf3 	bl	8008f56 <USBD_GetString>
 8009370:	e004      	b.n	800937c <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8009372:	683a      	ldr	r2, [r7, #0]
 8009374:	4904      	ldr	r1, [pc, #16]	; (8009388 <USBD_CDC_ProductStrDescriptor+0x34>)
 8009376:	4805      	ldr	r0, [pc, #20]	; (800938c <USBD_CDC_ProductStrDescriptor+0x38>)
 8009378:	f7ff fded 	bl	8008f56 <USBD_GetString>
  }
  return USBD_StrDesc;
 800937c:	4b02      	ldr	r3, [pc, #8]	; (8009388 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800937e:	4618      	mov	r0, r3
 8009380:	3708      	adds	r7, #8
 8009382:	46bd      	mov	sp, r7
 8009384:	bd80      	pop	{r7, pc}
 8009386:	bf00      	nop
 8009388:	20001174 	.word	0x20001174
 800938c:	08009b90 	.word	0x08009b90

08009390 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009390:	b580      	push	{r7, lr}
 8009392:	b082      	sub	sp, #8
 8009394:	af00      	add	r7, sp, #0
 8009396:	4603      	mov	r3, r0
 8009398:	6039      	str	r1, [r7, #0]
 800939a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800939c:	683a      	ldr	r2, [r7, #0]
 800939e:	4904      	ldr	r1, [pc, #16]	; (80093b0 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 80093a0:	4804      	ldr	r0, [pc, #16]	; (80093b4 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 80093a2:	f7ff fdd8 	bl	8008f56 <USBD_GetString>
  return USBD_StrDesc;
 80093a6:	4b02      	ldr	r3, [pc, #8]	; (80093b0 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 80093a8:	4618      	mov	r0, r3
 80093aa:	3708      	adds	r7, #8
 80093ac:	46bd      	mov	sp, r7
 80093ae:	bd80      	pop	{r7, pc}
 80093b0:	20001174 	.word	0x20001174
 80093b4:	08009ba8 	.word	0x08009ba8

080093b8 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80093b8:	b580      	push	{r7, lr}
 80093ba:	b082      	sub	sp, #8
 80093bc:	af00      	add	r7, sp, #0
 80093be:	4603      	mov	r3, r0
 80093c0:	6039      	str	r1, [r7, #0]
 80093c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80093c4:	683b      	ldr	r3, [r7, #0]
 80093c6:	221a      	movs	r2, #26
 80093c8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80093ca:	f000 f843 	bl	8009454 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 80093ce:	4b02      	ldr	r3, [pc, #8]	; (80093d8 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 80093d0:	4618      	mov	r0, r3
 80093d2:	3708      	adds	r7, #8
 80093d4:	46bd      	mov	sp, r7
 80093d6:	bd80      	pop	{r7, pc}
 80093d8:	200001bc 	.word	0x200001bc

080093dc <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80093dc:	b580      	push	{r7, lr}
 80093de:	b082      	sub	sp, #8
 80093e0:	af00      	add	r7, sp, #0
 80093e2:	4603      	mov	r3, r0
 80093e4:	6039      	str	r1, [r7, #0]
 80093e6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80093e8:	79fb      	ldrb	r3, [r7, #7]
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d105      	bne.n	80093fa <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 80093ee:	683a      	ldr	r2, [r7, #0]
 80093f0:	4907      	ldr	r1, [pc, #28]	; (8009410 <USBD_CDC_ConfigStrDescriptor+0x34>)
 80093f2:	4808      	ldr	r0, [pc, #32]	; (8009414 <USBD_CDC_ConfigStrDescriptor+0x38>)
 80093f4:	f7ff fdaf 	bl	8008f56 <USBD_GetString>
 80093f8:	e004      	b.n	8009404 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 80093fa:	683a      	ldr	r2, [r7, #0]
 80093fc:	4904      	ldr	r1, [pc, #16]	; (8009410 <USBD_CDC_ConfigStrDescriptor+0x34>)
 80093fe:	4805      	ldr	r0, [pc, #20]	; (8009414 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8009400:	f7ff fda9 	bl	8008f56 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009404:	4b02      	ldr	r3, [pc, #8]	; (8009410 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 8009406:	4618      	mov	r0, r3
 8009408:	3708      	adds	r7, #8
 800940a:	46bd      	mov	sp, r7
 800940c:	bd80      	pop	{r7, pc}
 800940e:	bf00      	nop
 8009410:	20001174 	.word	0x20001174
 8009414:	08009bbc 	.word	0x08009bbc

08009418 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009418:	b580      	push	{r7, lr}
 800941a:	b082      	sub	sp, #8
 800941c:	af00      	add	r7, sp, #0
 800941e:	4603      	mov	r3, r0
 8009420:	6039      	str	r1, [r7, #0]
 8009422:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009424:	79fb      	ldrb	r3, [r7, #7]
 8009426:	2b00      	cmp	r3, #0
 8009428:	d105      	bne.n	8009436 <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800942a:	683a      	ldr	r2, [r7, #0]
 800942c:	4907      	ldr	r1, [pc, #28]	; (800944c <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800942e:	4808      	ldr	r0, [pc, #32]	; (8009450 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8009430:	f7ff fd91 	bl	8008f56 <USBD_GetString>
 8009434:	e004      	b.n	8009440 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8009436:	683a      	ldr	r2, [r7, #0]
 8009438:	4904      	ldr	r1, [pc, #16]	; (800944c <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800943a:	4805      	ldr	r0, [pc, #20]	; (8009450 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800943c:	f7ff fd8b 	bl	8008f56 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009440:	4b02      	ldr	r3, [pc, #8]	; (800944c <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 8009442:	4618      	mov	r0, r3
 8009444:	3708      	adds	r7, #8
 8009446:	46bd      	mov	sp, r7
 8009448:	bd80      	pop	{r7, pc}
 800944a:	bf00      	nop
 800944c:	20001174 	.word	0x20001174
 8009450:	08009bc8 	.word	0x08009bc8

08009454 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009454:	b580      	push	{r7, lr}
 8009456:	b084      	sub	sp, #16
 8009458:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800945a:	4b0f      	ldr	r3, [pc, #60]	; (8009498 <Get_SerialNum+0x44>)
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009460:	4b0e      	ldr	r3, [pc, #56]	; (800949c <Get_SerialNum+0x48>)
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009466:	4b0e      	ldr	r3, [pc, #56]	; (80094a0 <Get_SerialNum+0x4c>)
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800946c:	68fa      	ldr	r2, [r7, #12]
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	4413      	add	r3, r2
 8009472:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	2b00      	cmp	r3, #0
 8009478:	d009      	beq.n	800948e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800947a:	2208      	movs	r2, #8
 800947c:	4909      	ldr	r1, [pc, #36]	; (80094a4 <Get_SerialNum+0x50>)
 800947e:	68f8      	ldr	r0, [r7, #12]
 8009480:	f000 f814 	bl	80094ac <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009484:	2204      	movs	r2, #4
 8009486:	4908      	ldr	r1, [pc, #32]	; (80094a8 <Get_SerialNum+0x54>)
 8009488:	68b8      	ldr	r0, [r7, #8]
 800948a:	f000 f80f 	bl	80094ac <IntToUnicode>
  }
}
 800948e:	bf00      	nop
 8009490:	3710      	adds	r7, #16
 8009492:	46bd      	mov	sp, r7
 8009494:	bd80      	pop	{r7, pc}
 8009496:	bf00      	nop
 8009498:	1fff7590 	.word	0x1fff7590
 800949c:	1fff7594 	.word	0x1fff7594
 80094a0:	1fff7598 	.word	0x1fff7598
 80094a4:	200001be 	.word	0x200001be
 80094a8:	200001ce 	.word	0x200001ce

080094ac <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80094ac:	b480      	push	{r7}
 80094ae:	b087      	sub	sp, #28
 80094b0:	af00      	add	r7, sp, #0
 80094b2:	60f8      	str	r0, [r7, #12]
 80094b4:	60b9      	str	r1, [r7, #8]
 80094b6:	4613      	mov	r3, r2
 80094b8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80094ba:	2300      	movs	r3, #0
 80094bc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80094be:	2300      	movs	r3, #0
 80094c0:	75fb      	strb	r3, [r7, #23]
 80094c2:	e027      	b.n	8009514 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	0f1b      	lsrs	r3, r3, #28
 80094c8:	2b09      	cmp	r3, #9
 80094ca:	d80b      	bhi.n	80094e4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	0f1b      	lsrs	r3, r3, #28
 80094d0:	b2da      	uxtb	r2, r3
 80094d2:	7dfb      	ldrb	r3, [r7, #23]
 80094d4:	005b      	lsls	r3, r3, #1
 80094d6:	4619      	mov	r1, r3
 80094d8:	68bb      	ldr	r3, [r7, #8]
 80094da:	440b      	add	r3, r1
 80094dc:	3230      	adds	r2, #48	; 0x30
 80094de:	b2d2      	uxtb	r2, r2
 80094e0:	701a      	strb	r2, [r3, #0]
 80094e2:	e00a      	b.n	80094fa <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	0f1b      	lsrs	r3, r3, #28
 80094e8:	b2da      	uxtb	r2, r3
 80094ea:	7dfb      	ldrb	r3, [r7, #23]
 80094ec:	005b      	lsls	r3, r3, #1
 80094ee:	4619      	mov	r1, r3
 80094f0:	68bb      	ldr	r3, [r7, #8]
 80094f2:	440b      	add	r3, r1
 80094f4:	3237      	adds	r2, #55	; 0x37
 80094f6:	b2d2      	uxtb	r2, r2
 80094f8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	011b      	lsls	r3, r3, #4
 80094fe:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009500:	7dfb      	ldrb	r3, [r7, #23]
 8009502:	005b      	lsls	r3, r3, #1
 8009504:	3301      	adds	r3, #1
 8009506:	68ba      	ldr	r2, [r7, #8]
 8009508:	4413      	add	r3, r2
 800950a:	2200      	movs	r2, #0
 800950c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800950e:	7dfb      	ldrb	r3, [r7, #23]
 8009510:	3301      	adds	r3, #1
 8009512:	75fb      	strb	r3, [r7, #23]
 8009514:	7dfa      	ldrb	r2, [r7, #23]
 8009516:	79fb      	ldrb	r3, [r7, #7]
 8009518:	429a      	cmp	r2, r3
 800951a:	d3d3      	bcc.n	80094c4 <IntToUnicode+0x18>
  }
}
 800951c:	bf00      	nop
 800951e:	371c      	adds	r7, #28
 8009520:	46bd      	mov	sp, r7
 8009522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009526:	4770      	bx	lr

08009528 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACK == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACK */
{
 8009528:	b580      	push	{r7, lr}
 800952a:	b084      	sub	sp, #16
 800952c:	af00      	add	r7, sp, #0
 800952e:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	4a0d      	ldr	r2, [pc, #52]	; (800956c <HAL_PCD_MspInit+0x44>)
 8009536:	4293      	cmp	r3, r2
 8009538:	d113      	bne.n	8009562 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800953a:	4b0d      	ldr	r3, [pc, #52]	; (8009570 <HAL_PCD_MspInit+0x48>)
 800953c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800953e:	4a0c      	ldr	r2, [pc, #48]	; (8009570 <HAL_PCD_MspInit+0x48>)
 8009540:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009544:	6593      	str	r3, [r2, #88]	; 0x58
 8009546:	4b0a      	ldr	r3, [pc, #40]	; (8009570 <HAL_PCD_MspInit+0x48>)
 8009548:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800954a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800954e:	60fb      	str	r3, [r7, #12]
 8009550:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 8009552:	2200      	movs	r2, #0
 8009554:	2100      	movs	r1, #0
 8009556:	2014      	movs	r0, #20
 8009558:	f7f8 f92b 	bl	80017b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800955c:	2014      	movs	r0, #20
 800955e:	f7f8 f942 	bl	80017e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8009562:	bf00      	nop
 8009564:	3710      	adds	r7, #16
 8009566:	46bd      	mov	sp, r7
 8009568:	bd80      	pop	{r7, pc}
 800956a:	bf00      	nop
 800956c:	40005c00 	.word	0x40005c00
 8009570:	40021000 	.word	0x40021000

08009574 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009574:	b580      	push	{r7, lr}
 8009576:	b082      	sub	sp, #8
 8009578:	af00      	add	r7, sp, #0
 800957a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	f8d3 22f0 	ldr.w	r2, [r3, #752]	; 0x2f0
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8009588:	4619      	mov	r1, r3
 800958a:	4610      	mov	r0, r2
 800958c:	f7fe fd76 	bl	800807c <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 8009590:	bf00      	nop
 8009592:	3708      	adds	r7, #8
 8009594:	46bd      	mov	sp, r7
 8009596:	bd80      	pop	{r7, pc}

08009598 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009598:	b580      	push	{r7, lr}
 800959a:	b082      	sub	sp, #8
 800959c:	af00      	add	r7, sp, #0
 800959e:	6078      	str	r0, [r7, #4]
 80095a0:	460b      	mov	r3, r1
 80095a2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 80095aa:	78fa      	ldrb	r2, [r7, #3]
 80095ac:	6879      	ldr	r1, [r7, #4]
 80095ae:	4613      	mov	r3, r2
 80095b0:	009b      	lsls	r3, r3, #2
 80095b2:	4413      	add	r3, r2
 80095b4:	00db      	lsls	r3, r3, #3
 80095b6:	440b      	add	r3, r1
 80095b8:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80095bc:	681a      	ldr	r2, [r3, #0]
 80095be:	78fb      	ldrb	r3, [r7, #3]
 80095c0:	4619      	mov	r1, r3
 80095c2:	f7fe fdae 	bl	8008122 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 80095c6:	bf00      	nop
 80095c8:	3708      	adds	r7, #8
 80095ca:	46bd      	mov	sp, r7
 80095cc:	bd80      	pop	{r7, pc}

080095ce <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80095ce:	b580      	push	{r7, lr}
 80095d0:	b082      	sub	sp, #8
 80095d2:	af00      	add	r7, sp, #0
 80095d4:	6078      	str	r0, [r7, #4]
 80095d6:	460b      	mov	r3, r1
 80095d8:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 80095e0:	78fa      	ldrb	r2, [r7, #3]
 80095e2:	6879      	ldr	r1, [r7, #4]
 80095e4:	4613      	mov	r3, r2
 80095e6:	009b      	lsls	r3, r3, #2
 80095e8:	4413      	add	r3, r2
 80095ea:	00db      	lsls	r3, r3, #3
 80095ec:	440b      	add	r3, r1
 80095ee:	333c      	adds	r3, #60	; 0x3c
 80095f0:	681a      	ldr	r2, [r3, #0]
 80095f2:	78fb      	ldrb	r3, [r7, #3]
 80095f4:	4619      	mov	r1, r3
 80095f6:	f7fe fdf7 	bl	80081e8 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 80095fa:	bf00      	nop
 80095fc:	3708      	adds	r7, #8
 80095fe:	46bd      	mov	sp, r7
 8009600:	bd80      	pop	{r7, pc}

08009602 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009602:	b580      	push	{r7, lr}
 8009604:	b082      	sub	sp, #8
 8009606:	af00      	add	r7, sp, #0
 8009608:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009610:	4618      	mov	r0, r3
 8009612:	f7fe fefb 	bl	800840c <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 8009616:	bf00      	nop
 8009618:	3708      	adds	r7, #8
 800961a:	46bd      	mov	sp, r7
 800961c:	bd80      	pop	{r7, pc}

0800961e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800961e:	b580      	push	{r7, lr}
 8009620:	b084      	sub	sp, #16
 8009622:	af00      	add	r7, sp, #0
 8009624:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009626:	2301      	movs	r3, #1
 8009628:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	689b      	ldr	r3, [r3, #8]
 800962e:	2b02      	cmp	r3, #2
 8009630:	d001      	beq.n	8009636 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009632:	f7f7 fcaf 	bl	8000f94 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800963c:	7bfa      	ldrb	r2, [r7, #15]
 800963e:	4611      	mov	r1, r2
 8009640:	4618      	mov	r0, r3
 8009642:	f7fe fea8 	bl	8008396 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800964c:	4618      	mov	r0, r3
 800964e:	f7fe fe61 	bl	8008314 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 8009652:	bf00      	nop
 8009654:	3710      	adds	r7, #16
 8009656:	46bd      	mov	sp, r7
 8009658:	bd80      	pop	{r7, pc}
	...

0800965c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800965c:	b580      	push	{r7, lr}
 800965e:	b082      	sub	sp, #8
 8009660:	af00      	add	r7, sp, #0
 8009662:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800966a:	4618      	mov	r0, r3
 800966c:	f7fe fea3 	bl	80083b6 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	699b      	ldr	r3, [r3, #24]
 8009674:	2b00      	cmp	r3, #0
 8009676:	d005      	beq.n	8009684 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009678:	4b04      	ldr	r3, [pc, #16]	; (800968c <HAL_PCD_SuspendCallback+0x30>)
 800967a:	691b      	ldr	r3, [r3, #16]
 800967c:	4a03      	ldr	r2, [pc, #12]	; (800968c <HAL_PCD_SuspendCallback+0x30>)
 800967e:	f043 0306 	orr.w	r3, r3, #6
 8009682:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 8009684:	bf00      	nop
 8009686:	3708      	adds	r7, #8
 8009688:	46bd      	mov	sp, r7
 800968a:	bd80      	pop	{r7, pc}
 800968c:	e000ed00 	.word	0xe000ed00

08009690 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009690:	b580      	push	{r7, lr}
 8009692:	b082      	sub	sp, #8
 8009694:	af00      	add	r7, sp, #0
 8009696:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	699b      	ldr	r3, [r3, #24]
 800969c:	2b00      	cmp	r3, #0
 800969e:	d007      	beq.n	80096b0 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80096a0:	4b08      	ldr	r3, [pc, #32]	; (80096c4 <HAL_PCD_ResumeCallback+0x34>)
 80096a2:	691b      	ldr	r3, [r3, #16]
 80096a4:	4a07      	ldr	r2, [pc, #28]	; (80096c4 <HAL_PCD_ResumeCallback+0x34>)
 80096a6:	f023 0306 	bic.w	r3, r3, #6
 80096aa:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 80096ac:	f000 f9fa 	bl	8009aa4 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 80096b6:	4618      	mov	r0, r3
 80096b8:	f7fe fe92 	bl	80083e0 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 80096bc:	bf00      	nop
 80096be:	3708      	adds	r7, #8
 80096c0:	46bd      	mov	sp, r7
 80096c2:	bd80      	pop	{r7, pc}
 80096c4:	e000ed00 	.word	0xe000ed00

080096c8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80096c8:	b580      	push	{r7, lr}
 80096ca:	b082      	sub	sp, #8
 80096cc:	af00      	add	r7, sp, #0
 80096ce:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 80096d0:	4a2b      	ldr	r2, [pc, #172]	; (8009780 <USBD_LL_Init+0xb8>)
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	4a29      	ldr	r2, [pc, #164]	; (8009780 <USBD_LL_Init+0xb8>)
 80096dc:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 80096e0:	4b27      	ldr	r3, [pc, #156]	; (8009780 <USBD_LL_Init+0xb8>)
 80096e2:	4a28      	ldr	r2, [pc, #160]	; (8009784 <USBD_LL_Init+0xbc>)
 80096e4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80096e6:	4b26      	ldr	r3, [pc, #152]	; (8009780 <USBD_LL_Init+0xb8>)
 80096e8:	2208      	movs	r2, #8
 80096ea:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80096ec:	4b24      	ldr	r3, [pc, #144]	; (8009780 <USBD_LL_Init+0xb8>)
 80096ee:	2202      	movs	r2, #2
 80096f0:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80096f2:	4b23      	ldr	r3, [pc, #140]	; (8009780 <USBD_LL_Init+0xb8>)
 80096f4:	2202      	movs	r2, #2
 80096f6:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 80096f8:	4b21      	ldr	r3, [pc, #132]	; (8009780 <USBD_LL_Init+0xb8>)
 80096fa:	2200      	movs	r2, #0
 80096fc:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80096fe:	4b20      	ldr	r3, [pc, #128]	; (8009780 <USBD_LL_Init+0xb8>)
 8009700:	2200      	movs	r2, #0
 8009702:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8009704:	4b1e      	ldr	r3, [pc, #120]	; (8009780 <USBD_LL_Init+0xb8>)
 8009706:	2200      	movs	r2, #0
 8009708:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800970a:	4b1d      	ldr	r3, [pc, #116]	; (8009780 <USBD_LL_Init+0xb8>)
 800970c:	2200      	movs	r2, #0
 800970e:	621a      	str	r2, [r3, #32]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8009710:	481b      	ldr	r0, [pc, #108]	; (8009780 <USBD_LL_Init+0xb8>)
 8009712:	f7f8 fa37 	bl	8001b84 <HAL_PCD_Init>
 8009716:	4603      	mov	r3, r0
 8009718:	2b00      	cmp	r3, #0
 800971a:	d001      	beq.n	8009720 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 800971c:	f7f7 fc3a 	bl	8000f94 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009726:	2318      	movs	r3, #24
 8009728:	2200      	movs	r2, #0
 800972a:	2100      	movs	r1, #0
 800972c:	f7f9 fd25 	bl	800317a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009736:	2358      	movs	r3, #88	; 0x58
 8009738:	2200      	movs	r2, #0
 800973a:	2180      	movs	r1, #128	; 0x80
 800973c:	f7f9 fd1d 	bl	800317a <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009746:	23c0      	movs	r3, #192	; 0xc0
 8009748:	2200      	movs	r2, #0
 800974a:	2181      	movs	r1, #129	; 0x81
 800974c:	f7f9 fd15 	bl	800317a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009756:	f44f 7388 	mov.w	r3, #272	; 0x110
 800975a:	2200      	movs	r2, #0
 800975c:	2101      	movs	r1, #1
 800975e:	f7f9 fd0c 	bl	800317a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009768:	f44f 7380 	mov.w	r3, #256	; 0x100
 800976c:	2200      	movs	r2, #0
 800976e:	2182      	movs	r1, #130	; 0x82
 8009770:	f7f9 fd03 	bl	800317a <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8009774:	2300      	movs	r3, #0
}
 8009776:	4618      	mov	r0, r3
 8009778:	3708      	adds	r7, #8
 800977a:	46bd      	mov	sp, r7
 800977c:	bd80      	pop	{r7, pc}
 800977e:	bf00      	nop
 8009780:	20001374 	.word	0x20001374
 8009784:	40005c00 	.word	0x40005c00

08009788 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009788:	b580      	push	{r7, lr}
 800978a:	b084      	sub	sp, #16
 800978c:	af00      	add	r7, sp, #0
 800978e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009790:	2300      	movs	r3, #0
 8009792:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009794:	2300      	movs	r3, #0
 8009796:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800979e:	4618      	mov	r0, r3
 80097a0:	f7f8 fad5 	bl	8001d4e <HAL_PCD_Start>
 80097a4:	4603      	mov	r3, r0
 80097a6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80097a8:	7bfb      	ldrb	r3, [r7, #15]
 80097aa:	4618      	mov	r0, r3
 80097ac:	f000 f980 	bl	8009ab0 <USBD_Get_USB_Status>
 80097b0:	4603      	mov	r3, r0
 80097b2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80097b4:	7bbb      	ldrb	r3, [r7, #14]
}
 80097b6:	4618      	mov	r0, r3
 80097b8:	3710      	adds	r7, #16
 80097ba:	46bd      	mov	sp, r7
 80097bc:	bd80      	pop	{r7, pc}

080097be <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80097be:	b580      	push	{r7, lr}
 80097c0:	b084      	sub	sp, #16
 80097c2:	af00      	add	r7, sp, #0
 80097c4:	6078      	str	r0, [r7, #4]
 80097c6:	4608      	mov	r0, r1
 80097c8:	4611      	mov	r1, r2
 80097ca:	461a      	mov	r2, r3
 80097cc:	4603      	mov	r3, r0
 80097ce:	70fb      	strb	r3, [r7, #3]
 80097d0:	460b      	mov	r3, r1
 80097d2:	70bb      	strb	r3, [r7, #2]
 80097d4:	4613      	mov	r3, r2
 80097d6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80097d8:	2300      	movs	r3, #0
 80097da:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80097dc:	2300      	movs	r3, #0
 80097de:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80097e6:	78bb      	ldrb	r3, [r7, #2]
 80097e8:	883a      	ldrh	r2, [r7, #0]
 80097ea:	78f9      	ldrb	r1, [r7, #3]
 80097ec:	f7f8 fc44 	bl	8002078 <HAL_PCD_EP_Open>
 80097f0:	4603      	mov	r3, r0
 80097f2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80097f4:	7bfb      	ldrb	r3, [r7, #15]
 80097f6:	4618      	mov	r0, r3
 80097f8:	f000 f95a 	bl	8009ab0 <USBD_Get_USB_Status>
 80097fc:	4603      	mov	r3, r0
 80097fe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009800:	7bbb      	ldrb	r3, [r7, #14]
}
 8009802:	4618      	mov	r0, r3
 8009804:	3710      	adds	r7, #16
 8009806:	46bd      	mov	sp, r7
 8009808:	bd80      	pop	{r7, pc}

0800980a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800980a:	b580      	push	{r7, lr}
 800980c:	b084      	sub	sp, #16
 800980e:	af00      	add	r7, sp, #0
 8009810:	6078      	str	r0, [r7, #4]
 8009812:	460b      	mov	r3, r1
 8009814:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009816:	2300      	movs	r3, #0
 8009818:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800981a:	2300      	movs	r3, #0
 800981c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009824:	78fa      	ldrb	r2, [r7, #3]
 8009826:	4611      	mov	r1, r2
 8009828:	4618      	mov	r0, r3
 800982a:	f7f8 fc8b 	bl	8002144 <HAL_PCD_EP_Close>
 800982e:	4603      	mov	r3, r0
 8009830:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009832:	7bfb      	ldrb	r3, [r7, #15]
 8009834:	4618      	mov	r0, r3
 8009836:	f000 f93b 	bl	8009ab0 <USBD_Get_USB_Status>
 800983a:	4603      	mov	r3, r0
 800983c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800983e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009840:	4618      	mov	r0, r3
 8009842:	3710      	adds	r7, #16
 8009844:	46bd      	mov	sp, r7
 8009846:	bd80      	pop	{r7, pc}

08009848 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009848:	b580      	push	{r7, lr}
 800984a:	b084      	sub	sp, #16
 800984c:	af00      	add	r7, sp, #0
 800984e:	6078      	str	r0, [r7, #4]
 8009850:	460b      	mov	r3, r1
 8009852:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009854:	2300      	movs	r3, #0
 8009856:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009858:	2300      	movs	r3, #0
 800985a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009862:	78fa      	ldrb	r2, [r7, #3]
 8009864:	4611      	mov	r1, r2
 8009866:	4618      	mov	r0, r3
 8009868:	f7f8 fd4c 	bl	8002304 <HAL_PCD_EP_SetStall>
 800986c:	4603      	mov	r3, r0
 800986e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009870:	7bfb      	ldrb	r3, [r7, #15]
 8009872:	4618      	mov	r0, r3
 8009874:	f000 f91c 	bl	8009ab0 <USBD_Get_USB_Status>
 8009878:	4603      	mov	r3, r0
 800987a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800987c:	7bbb      	ldrb	r3, [r7, #14]
}
 800987e:	4618      	mov	r0, r3
 8009880:	3710      	adds	r7, #16
 8009882:	46bd      	mov	sp, r7
 8009884:	bd80      	pop	{r7, pc}

08009886 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009886:	b580      	push	{r7, lr}
 8009888:	b084      	sub	sp, #16
 800988a:	af00      	add	r7, sp, #0
 800988c:	6078      	str	r0, [r7, #4]
 800988e:	460b      	mov	r3, r1
 8009890:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009892:	2300      	movs	r3, #0
 8009894:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009896:	2300      	movs	r3, #0
 8009898:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80098a0:	78fa      	ldrb	r2, [r7, #3]
 80098a2:	4611      	mov	r1, r2
 80098a4:	4618      	mov	r0, r3
 80098a6:	f7f8 fd8d 	bl	80023c4 <HAL_PCD_EP_ClrStall>
 80098aa:	4603      	mov	r3, r0
 80098ac:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80098ae:	7bfb      	ldrb	r3, [r7, #15]
 80098b0:	4618      	mov	r0, r3
 80098b2:	f000 f8fd 	bl	8009ab0 <USBD_Get_USB_Status>
 80098b6:	4603      	mov	r3, r0
 80098b8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80098ba:	7bbb      	ldrb	r3, [r7, #14]
}
 80098bc:	4618      	mov	r0, r3
 80098be:	3710      	adds	r7, #16
 80098c0:	46bd      	mov	sp, r7
 80098c2:	bd80      	pop	{r7, pc}

080098c4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80098c4:	b480      	push	{r7}
 80098c6:	b085      	sub	sp, #20
 80098c8:	af00      	add	r7, sp, #0
 80098ca:	6078      	str	r0, [r7, #4]
 80098cc:	460b      	mov	r3, r1
 80098ce:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80098d6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80098d8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80098dc:	2b00      	cmp	r3, #0
 80098de:	da0c      	bge.n	80098fa <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80098e0:	78fb      	ldrb	r3, [r7, #3]
 80098e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80098e6:	68f9      	ldr	r1, [r7, #12]
 80098e8:	1c5a      	adds	r2, r3, #1
 80098ea:	4613      	mov	r3, r2
 80098ec:	009b      	lsls	r3, r3, #2
 80098ee:	4413      	add	r3, r2
 80098f0:	00db      	lsls	r3, r3, #3
 80098f2:	440b      	add	r3, r1
 80098f4:	3302      	adds	r3, #2
 80098f6:	781b      	ldrb	r3, [r3, #0]
 80098f8:	e00b      	b.n	8009912 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80098fa:	78fb      	ldrb	r3, [r7, #3]
 80098fc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009900:	68f9      	ldr	r1, [r7, #12]
 8009902:	4613      	mov	r3, r2
 8009904:	009b      	lsls	r3, r3, #2
 8009906:	4413      	add	r3, r2
 8009908:	00db      	lsls	r3, r3, #3
 800990a:	440b      	add	r3, r1
 800990c:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8009910:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009912:	4618      	mov	r0, r3
 8009914:	3714      	adds	r7, #20
 8009916:	46bd      	mov	sp, r7
 8009918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800991c:	4770      	bx	lr

0800991e <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800991e:	b580      	push	{r7, lr}
 8009920:	b084      	sub	sp, #16
 8009922:	af00      	add	r7, sp, #0
 8009924:	6078      	str	r0, [r7, #4]
 8009926:	460b      	mov	r3, r1
 8009928:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800992a:	2300      	movs	r3, #0
 800992c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800992e:	2300      	movs	r3, #0
 8009930:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009938:	78fa      	ldrb	r2, [r7, #3]
 800993a:	4611      	mov	r1, r2
 800993c:	4618      	mov	r0, r3
 800993e:	f7f8 fb76 	bl	800202e <HAL_PCD_SetAddress>
 8009942:	4603      	mov	r3, r0
 8009944:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009946:	7bfb      	ldrb	r3, [r7, #15]
 8009948:	4618      	mov	r0, r3
 800994a:	f000 f8b1 	bl	8009ab0 <USBD_Get_USB_Status>
 800994e:	4603      	mov	r3, r0
 8009950:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009952:	7bbb      	ldrb	r3, [r7, #14]
}
 8009954:	4618      	mov	r0, r3
 8009956:	3710      	adds	r7, #16
 8009958:	46bd      	mov	sp, r7
 800995a:	bd80      	pop	{r7, pc}

0800995c <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800995c:	b580      	push	{r7, lr}
 800995e:	b086      	sub	sp, #24
 8009960:	af00      	add	r7, sp, #0
 8009962:	60f8      	str	r0, [r7, #12]
 8009964:	607a      	str	r2, [r7, #4]
 8009966:	603b      	str	r3, [r7, #0]
 8009968:	460b      	mov	r3, r1
 800996a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800996c:	2300      	movs	r3, #0
 800996e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009970:	2300      	movs	r3, #0
 8009972:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800997a:	7af9      	ldrb	r1, [r7, #11]
 800997c:	683b      	ldr	r3, [r7, #0]
 800997e:	687a      	ldr	r2, [r7, #4]
 8009980:	f7f8 fc7d 	bl	800227e <HAL_PCD_EP_Transmit>
 8009984:	4603      	mov	r3, r0
 8009986:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009988:	7dfb      	ldrb	r3, [r7, #23]
 800998a:	4618      	mov	r0, r3
 800998c:	f000 f890 	bl	8009ab0 <USBD_Get_USB_Status>
 8009990:	4603      	mov	r3, r0
 8009992:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009994:	7dbb      	ldrb	r3, [r7, #22]
}
 8009996:	4618      	mov	r0, r3
 8009998:	3718      	adds	r7, #24
 800999a:	46bd      	mov	sp, r7
 800999c:	bd80      	pop	{r7, pc}

0800999e <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800999e:	b580      	push	{r7, lr}
 80099a0:	b086      	sub	sp, #24
 80099a2:	af00      	add	r7, sp, #0
 80099a4:	60f8      	str	r0, [r7, #12]
 80099a6:	607a      	str	r2, [r7, #4]
 80099a8:	603b      	str	r3, [r7, #0]
 80099aa:	460b      	mov	r3, r1
 80099ac:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80099ae:	2300      	movs	r3, #0
 80099b0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80099b2:	2300      	movs	r3, #0
 80099b4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80099bc:	7af9      	ldrb	r1, [r7, #11]
 80099be:	683b      	ldr	r3, [r7, #0]
 80099c0:	687a      	ldr	r2, [r7, #4]
 80099c2:	f7f8 fc07 	bl	80021d4 <HAL_PCD_EP_Receive>
 80099c6:	4603      	mov	r3, r0
 80099c8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80099ca:	7dfb      	ldrb	r3, [r7, #23]
 80099cc:	4618      	mov	r0, r3
 80099ce:	f000 f86f 	bl	8009ab0 <USBD_Get_USB_Status>
 80099d2:	4603      	mov	r3, r0
 80099d4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80099d6:	7dbb      	ldrb	r3, [r7, #22]
}
 80099d8:	4618      	mov	r0, r3
 80099da:	3718      	adds	r7, #24
 80099dc:	46bd      	mov	sp, r7
 80099de:	bd80      	pop	{r7, pc}

080099e0 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80099e0:	b580      	push	{r7, lr}
 80099e2:	b082      	sub	sp, #8
 80099e4:	af00      	add	r7, sp, #0
 80099e6:	6078      	str	r0, [r7, #4]
 80099e8:	460b      	mov	r3, r1
 80099ea:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80099f2:	78fa      	ldrb	r2, [r7, #3]
 80099f4:	4611      	mov	r1, r2
 80099f6:	4618      	mov	r0, r3
 80099f8:	f7f8 fc29 	bl	800224e <HAL_PCD_EP_GetRxCount>
 80099fc:	4603      	mov	r3, r0
}
 80099fe:	4618      	mov	r0, r3
 8009a00:	3708      	adds	r7, #8
 8009a02:	46bd      	mov	sp, r7
 8009a04:	bd80      	pop	{r7, pc}
	...

08009a08 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a08:	b580      	push	{r7, lr}
 8009a0a:	b082      	sub	sp, #8
 8009a0c:	af00      	add	r7, sp, #0
 8009a0e:	6078      	str	r0, [r7, #4]
 8009a10:	460b      	mov	r3, r1
 8009a12:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 8009a14:	78fb      	ldrb	r3, [r7, #3]
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d002      	beq.n	8009a20 <HAL_PCDEx_LPM_Callback+0x18>
 8009a1a:	2b01      	cmp	r3, #1
 8009a1c:	d013      	beq.n	8009a46 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 8009a1e:	e023      	b.n	8009a68 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	699b      	ldr	r3, [r3, #24]
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d007      	beq.n	8009a38 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8009a28:	f000 f83c 	bl	8009aa4 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009a2c:	4b10      	ldr	r3, [pc, #64]	; (8009a70 <HAL_PCDEx_LPM_Callback+0x68>)
 8009a2e:	691b      	ldr	r3, [r3, #16]
 8009a30:	4a0f      	ldr	r2, [pc, #60]	; (8009a70 <HAL_PCDEx_LPM_Callback+0x68>)
 8009a32:	f023 0306 	bic.w	r3, r3, #6
 8009a36:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009a3e:	4618      	mov	r0, r3
 8009a40:	f7fe fcce 	bl	80083e0 <USBD_LL_Resume>
    break;
 8009a44:	e010      	b.n	8009a68 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009a4c:	4618      	mov	r0, r3
 8009a4e:	f7fe fcb2 	bl	80083b6 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	699b      	ldr	r3, [r3, #24]
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d005      	beq.n	8009a66 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009a5a:	4b05      	ldr	r3, [pc, #20]	; (8009a70 <HAL_PCDEx_LPM_Callback+0x68>)
 8009a5c:	691b      	ldr	r3, [r3, #16]
 8009a5e:	4a04      	ldr	r2, [pc, #16]	; (8009a70 <HAL_PCDEx_LPM_Callback+0x68>)
 8009a60:	f043 0306 	orr.w	r3, r3, #6
 8009a64:	6113      	str	r3, [r2, #16]
    break;
 8009a66:	bf00      	nop
}
 8009a68:	bf00      	nop
 8009a6a:	3708      	adds	r7, #8
 8009a6c:	46bd      	mov	sp, r7
 8009a6e:	bd80      	pop	{r7, pc}
 8009a70:	e000ed00 	.word	0xe000ed00

08009a74 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009a74:	b480      	push	{r7}
 8009a76:	b083      	sub	sp, #12
 8009a78:	af00      	add	r7, sp, #0
 8009a7a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009a7c:	4b03      	ldr	r3, [pc, #12]	; (8009a8c <USBD_static_malloc+0x18>)
}
 8009a7e:	4618      	mov	r0, r3
 8009a80:	370c      	adds	r7, #12
 8009a82:	46bd      	mov	sp, r7
 8009a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a88:	4770      	bx	lr
 8009a8a:	bf00      	nop
 8009a8c:	20000204 	.word	0x20000204

08009a90 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009a90:	b480      	push	{r7}
 8009a92:	b083      	sub	sp, #12
 8009a94:	af00      	add	r7, sp, #0
 8009a96:	6078      	str	r0, [r7, #4]

}
 8009a98:	bf00      	nop
 8009a9a:	370c      	adds	r7, #12
 8009a9c:	46bd      	mov	sp, r7
 8009a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aa2:	4770      	bx	lr

08009aa4 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8009aa4:	b580      	push	{r7, lr}
 8009aa6:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8009aa8:	f7f6 fca8 	bl	80003fc <SystemClock_Config>
}
 8009aac:	bf00      	nop
 8009aae:	bd80      	pop	{r7, pc}

08009ab0 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009ab0:	b480      	push	{r7}
 8009ab2:	b085      	sub	sp, #20
 8009ab4:	af00      	add	r7, sp, #0
 8009ab6:	4603      	mov	r3, r0
 8009ab8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009aba:	2300      	movs	r3, #0
 8009abc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009abe:	79fb      	ldrb	r3, [r7, #7]
 8009ac0:	2b03      	cmp	r3, #3
 8009ac2:	d817      	bhi.n	8009af4 <USBD_Get_USB_Status+0x44>
 8009ac4:	a201      	add	r2, pc, #4	; (adr r2, 8009acc <USBD_Get_USB_Status+0x1c>)
 8009ac6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009aca:	bf00      	nop
 8009acc:	08009add 	.word	0x08009add
 8009ad0:	08009ae3 	.word	0x08009ae3
 8009ad4:	08009ae9 	.word	0x08009ae9
 8009ad8:	08009aef 	.word	0x08009aef
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009adc:	2300      	movs	r3, #0
 8009ade:	73fb      	strb	r3, [r7, #15]
    break;
 8009ae0:	e00b      	b.n	8009afa <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009ae2:	2303      	movs	r3, #3
 8009ae4:	73fb      	strb	r3, [r7, #15]
    break;
 8009ae6:	e008      	b.n	8009afa <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009ae8:	2301      	movs	r3, #1
 8009aea:	73fb      	strb	r3, [r7, #15]
    break;
 8009aec:	e005      	b.n	8009afa <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009aee:	2303      	movs	r3, #3
 8009af0:	73fb      	strb	r3, [r7, #15]
    break;
 8009af2:	e002      	b.n	8009afa <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009af4:	2303      	movs	r3, #3
 8009af6:	73fb      	strb	r3, [r7, #15]
    break;
 8009af8:	bf00      	nop
  }
  return usb_status;
 8009afa:	7bfb      	ldrb	r3, [r7, #15]
}
 8009afc:	4618      	mov	r0, r3
 8009afe:	3714      	adds	r7, #20
 8009b00:	46bd      	mov	sp, r7
 8009b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b06:	4770      	bx	lr

08009b08 <__libc_init_array>:
 8009b08:	b570      	push	{r4, r5, r6, lr}
 8009b0a:	4e0d      	ldr	r6, [pc, #52]	; (8009b40 <__libc_init_array+0x38>)
 8009b0c:	4c0d      	ldr	r4, [pc, #52]	; (8009b44 <__libc_init_array+0x3c>)
 8009b0e:	1ba4      	subs	r4, r4, r6
 8009b10:	10a4      	asrs	r4, r4, #2
 8009b12:	2500      	movs	r5, #0
 8009b14:	42a5      	cmp	r5, r4
 8009b16:	d109      	bne.n	8009b2c <__libc_init_array+0x24>
 8009b18:	4e0b      	ldr	r6, [pc, #44]	; (8009b48 <__libc_init_array+0x40>)
 8009b1a:	4c0c      	ldr	r4, [pc, #48]	; (8009b4c <__libc_init_array+0x44>)
 8009b1c:	f000 f82c 	bl	8009b78 <_init>
 8009b20:	1ba4      	subs	r4, r4, r6
 8009b22:	10a4      	asrs	r4, r4, #2
 8009b24:	2500      	movs	r5, #0
 8009b26:	42a5      	cmp	r5, r4
 8009b28:	d105      	bne.n	8009b36 <__libc_init_array+0x2e>
 8009b2a:	bd70      	pop	{r4, r5, r6, pc}
 8009b2c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009b30:	4798      	blx	r3
 8009b32:	3501      	adds	r5, #1
 8009b34:	e7ee      	b.n	8009b14 <__libc_init_array+0xc>
 8009b36:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009b3a:	4798      	blx	r3
 8009b3c:	3501      	adds	r5, #1
 8009b3e:	e7f2      	b.n	8009b26 <__libc_init_array+0x1e>
 8009b40:	08009be8 	.word	0x08009be8
 8009b44:	08009be8 	.word	0x08009be8
 8009b48:	08009be8 	.word	0x08009be8
 8009b4c:	08009bec 	.word	0x08009bec

08009b50 <memcpy>:
 8009b50:	b510      	push	{r4, lr}
 8009b52:	1e43      	subs	r3, r0, #1
 8009b54:	440a      	add	r2, r1
 8009b56:	4291      	cmp	r1, r2
 8009b58:	d100      	bne.n	8009b5c <memcpy+0xc>
 8009b5a:	bd10      	pop	{r4, pc}
 8009b5c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009b60:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009b64:	e7f7      	b.n	8009b56 <memcpy+0x6>

08009b66 <memset>:
 8009b66:	4402      	add	r2, r0
 8009b68:	4603      	mov	r3, r0
 8009b6a:	4293      	cmp	r3, r2
 8009b6c:	d100      	bne.n	8009b70 <memset+0xa>
 8009b6e:	4770      	bx	lr
 8009b70:	f803 1b01 	strb.w	r1, [r3], #1
 8009b74:	e7f9      	b.n	8009b6a <memset+0x4>
	...

08009b78 <_init>:
 8009b78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b7a:	bf00      	nop
 8009b7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b7e:	bc08      	pop	{r3}
 8009b80:	469e      	mov	lr, r3
 8009b82:	4770      	bx	lr

08009b84 <_fini>:
 8009b84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b86:	bf00      	nop
 8009b88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b8a:	bc08      	pop	{r3}
 8009b8c:	469e      	mov	lr, r3
 8009b8e:	4770      	bx	lr
