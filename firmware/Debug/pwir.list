
pwir.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000099a8  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08009b80  08009b80  00019b80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009bd8  08009bd8  00020184  2**0
                  CONTENTS
  4 .ARM          00000000  08009bd8  08009bd8  00020184  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009bd8  08009bd8  00020184  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009bd8  08009bd8  00019bd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009bdc  08009bdc  00019bdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000184  20000000  08009be0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001444  20000184  08009d64  00020184  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200015c8  08009d64  000215c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020184  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a320  00000000  00000000  000201b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000033e7  00000000  00000000  0003a4d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001380  00000000  00000000  0003d8c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001208  00000000  00000000  0003ec40  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000205b2  00000000  00000000  0003fe48  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00011b54  00000000  00000000  000603fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c4204  00000000  00000000  00071f4e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00136152  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005268  00000000  00000000  001361d0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000184 	.word	0x20000184
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08009b68 	.word	0x08009b68

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000188 	.word	0x20000188
 8000214:	08009b68 	.word	0x08009b68

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	; 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000356:	f1a4 0401 	sub.w	r4, r4, #1
 800035a:	d1e9      	bne.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__aeabi_d2uiz>:
 80009b4:	004a      	lsls	r2, r1, #1
 80009b6:	d211      	bcs.n	80009dc <__aeabi_d2uiz+0x28>
 80009b8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009bc:	d211      	bcs.n	80009e2 <__aeabi_d2uiz+0x2e>
 80009be:	d50d      	bpl.n	80009dc <__aeabi_d2uiz+0x28>
 80009c0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009c4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009c8:	d40e      	bmi.n	80009e8 <__aeabi_d2uiz+0x34>
 80009ca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009ce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009d2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009d6:	fa23 f002 	lsr.w	r0, r3, r2
 80009da:	4770      	bx	lr
 80009dc:	f04f 0000 	mov.w	r0, #0
 80009e0:	4770      	bx	lr
 80009e2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009e6:	d102      	bne.n	80009ee <__aeabi_d2uiz+0x3a>
 80009e8:	f04f 30ff 	mov.w	r0, #4294967295
 80009ec:	4770      	bx	lr
 80009ee:	f04f 0000 	mov.w	r0, #0
 80009f2:	4770      	bx	lr

080009f4 <CDC_On_Receive>:
  .delimiter = 0
}; // (4) Instance of received data.

volatile uint8_t isCommandReceived = 0; // (5) Boolean (0/1) variable to signify that data has been received. Variable is marked volatile to prevent the compiler from removing it during optimisation.

void CDC_On_Receive(uint8_t* buffer, uint32_t* length) { // (6) Define the function that is called when data is received. It is usually preferable to keep interrupt handlers small and fast to avoid blocking other code from executing. Only data copying and setting isCommandReceived to 1 is done in the handler. Rest is handled in the main while loop.
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b082      	sub	sp, #8
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
 80009fc:	6039      	str	r1, [r7, #0]
  //HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
  if (*length == sizeof(Command)) { // (7) Check if received data the has same length as Command struct.
 80009fe:	683b      	ldr	r3, [r7, #0]
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	2b0c      	cmp	r3, #12
 8000a04:	d10d      	bne.n	8000a22 <CDC_On_Receive+0x2e>
    memcpy(&command, buffer, sizeof(Command)); // (8) Copy received data to command instance.
 8000a06:	220c      	movs	r2, #12
 8000a08:	6879      	ldr	r1, [r7, #4]
 8000a0a:	4808      	ldr	r0, [pc, #32]	; (8000a2c <CDC_On_Receive+0x38>)
 8000a0c:	f009 f898 	bl	8009b40 <memcpy>

    if (command.delimiter == 0xAAAA) { // (9) Check the delimiter as a validation of received data.
 8000a10:	4b06      	ldr	r3, [pc, #24]	; (8000a2c <CDC_On_Receive+0x38>)
 8000a12:	895b      	ldrh	r3, [r3, #10]
 8000a14:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8000a18:	4293      	cmp	r3, r2
 8000a1a:	d102      	bne.n	8000a22 <CDC_On_Receive+0x2e>
      isCommandReceived = 1;
 8000a1c:	4b04      	ldr	r3, [pc, #16]	; (8000a30 <CDC_On_Receive+0x3c>)
 8000a1e:	2201      	movs	r2, #1
 8000a20:	701a      	strb	r2, [r3, #0]
    }
  }
}
 8000a22:	bf00      	nop
 8000a24:	3708      	adds	r7, #8
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	200001a0 	.word	0x200001a0
 8000a30:	200001ac 	.word	0x200001ac
 8000a34:	00000000 	.word	0x00000000

08000a38 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a38:	b590      	push	{r4, r7, lr}
 8000a3a:	b083      	sub	sp, #12
 8000a3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  // (1) Define an instance of Feedback for sending data.
  Feedback feedback = {
 8000a3e:	2300      	movs	r3, #0
 8000a40:	803b      	strh	r3, [r7, #0]
 8000a42:	2300      	movs	r3, #0
 8000a44:	807b      	strh	r3, [r7, #2]
 8000a46:	2300      	movs	r3, #0
 8000a48:	80bb      	strh	r3, [r7, #4]
 8000a4a:	f64a 23aa 	movw	r3, #43690	; 0xaaaa
 8000a4e:	80fb      	strh	r3, [r7, #6]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a50:	f000 ffb3 	bl	80019ba <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a54:	f000 f8c0 	bl	8000bd8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a58:	f000 fcd0 	bl	80013fc <MX_GPIO_Init>
  MX_TIM1_Init();
 8000a5c:	f000 f924 	bl	8000ca8 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000a60:	f000 f992 	bl	8000d88 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000a64:	f000 fa10 	bl	8000e88 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000a68:	f000 fa64 	bl	8000f34 <MX_TIM4_Init>
  MX_TIM8_Init();
 8000a6c:	f000 fab8 	bl	8000fe0 <MX_TIM8_Init>
  MX_TIM16_Init();
 8000a70:	f000 fbd0 	bl	8001214 <MX_TIM16_Init>
  MX_TIM17_Init();
 8000a74:	f000 fc48 	bl	8001308 <MX_TIM17_Init>
  MX_USB_Device_Init();
 8000a78:	f008 fb46 	bl	8009108 <MX_USB_Device_Init>
  MX_TIM15_Init();
 8000a7c:	f000 fb44 	bl	8001108 <MX_TIM15_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_1 | TIM_CHANNEL_2); // Encoder 1
 8000a80:	2104      	movs	r1, #4
 8000a82:	4843      	ldr	r0, [pc, #268]	; (8000b90 <main+0x158>)
 8000a84:	f004 f82a 	bl	8004adc <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_1 | TIM_CHANNEL_2); // Encoder 2
 8000a88:	2104      	movs	r1, #4
 8000a8a:	4842      	ldr	r0, [pc, #264]	; (8000b94 <main+0x15c>)
 8000a8c:	f004 f826 	bl	8004adc <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_1 | TIM_CHANNEL_2); // Encoder 3
 8000a90:	2104      	movs	r1, #4
 8000a92:	4841      	ldr	r0, [pc, #260]	; (8000b98 <main+0x160>)
 8000a94:	f004 f822 	bl	8004adc <HAL_TIM_Encoder_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1); // Motor PWM for draiver 1
 8000a98:	2100      	movs	r1, #0
 8000a9a:	4840      	ldr	r0, [pc, #256]	; (8000b9c <main+0x164>)
 8000a9c:	f003 fe78 	bl	8004790 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2); // Motor PWM for draiver 1
 8000aa0:	2104      	movs	r1, #4
 8000aa2:	483e      	ldr	r0, [pc, #248]	; (8000b9c <main+0x164>)
 8000aa4:	f003 fe74 	bl	8004790 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3); // Motor PWM for draiver 2
 8000aa8:	2108      	movs	r1, #8
 8000aaa:	483c      	ldr	r0, [pc, #240]	; (8000b9c <main+0x164>)
 8000aac:	f003 fe70 	bl	8004790 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4); // Motor PWM for draiver 2
 8000ab0:	210c      	movs	r1, #12
 8000ab2:	483a      	ldr	r0, [pc, #232]	; (8000b9c <main+0x164>)
 8000ab4:	f003 fe6c 	bl	8004790 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1); // Motor PWM for draiver 3
 8000ab8:	2100      	movs	r1, #0
 8000aba:	4839      	ldr	r0, [pc, #228]	; (8000ba0 <main+0x168>)
 8000abc:	f003 fe68 	bl	8004790 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim17, TIM_CHANNEL_1); // Motor PWM for draiver 3
 8000ac0:	2100      	movs	r1, #0
 8000ac2:	4838      	ldr	r0, [pc, #224]	; (8000ba4 <main+0x16c>)
 8000ac4:	f003 fe64 	bl	8004790 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1); // Thrower PWM
 8000ac8:	2100      	movs	r1, #0
 8000aca:	4837      	ldr	r0, [pc, #220]	; (8000ba8 <main+0x170>)
 8000acc:	f003 fe60 	bl	8004790 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_2); // Thrower Angle PWM
 8000ad0:	2104      	movs	r1, #4
 8000ad2:	4836      	ldr	r0, [pc, #216]	; (8000bac <main+0x174>)
 8000ad4:	f003 fe5c 	bl	8004790 <HAL_TIM_PWM_Start>
    /* USER CODE BEGIN 3 */
	  //HAL_Delay(1000);
	  // Send command: 00 00 00 00 00 00 00 00 AA AA
	  //               01
	  //               02
	if (isCommandReceived) { // (2) Only return data when something has been received.
 8000ad8:	4b35      	ldr	r3, [pc, #212]	; (8000bb0 <main+0x178>)
 8000ada:	781b      	ldrb	r3, [r3, #0]
 8000adc:	b2db      	uxtb	r3, r3
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d0fa      	beq.n	8000ad8 <main+0xa0>
		isCommandReceived = 0;
 8000ae2:	4b33      	ldr	r3, [pc, #204]	; (8000bb0 <main+0x178>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin); // (3) Toggle LED to indicate that data has been received.
 8000ae8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000aec:	4831      	ldr	r0, [pc, #196]	; (8000bb4 <main+0x17c>)
 8000aee:	f001 fa7f 	bl	8001ff0 <HAL_GPIO_TogglePin>
		// (4) Update feedback with current motor speeds.
		/*feedback.speed1 = motor1Control.speed;
		feedback.speed2 = motor2Control.speed;
		feedback.speed3 = motor3Control.speed;*/
		feedback.speed1 = (int16_t)TIM1->CNT;
 8000af2:	4b31      	ldr	r3, [pc, #196]	; (8000bb8 <main+0x180>)
 8000af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000af6:	b21b      	sxth	r3, r3
 8000af8:	803b      	strh	r3, [r7, #0]
		feedback.speed2 = (int16_t)TIM3->CNT;
 8000afa:	4b30      	ldr	r3, [pc, #192]	; (8000bbc <main+0x184>)
 8000afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000afe:	b21b      	sxth	r3, r3
 8000b00:	807b      	strh	r3, [r7, #2]
		feedback.speed3 = (int16_t)TIM4->CNT;
 8000b02:	4b2f      	ldr	r3, [pc, #188]	; (8000bc0 <main+0x188>)
 8000b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b06:	b21b      	sxth	r3, r3
 8000b08:	80bb      	strh	r3, [r7, #4]
		TIM2->CCR1 = TIM2->ARR / 2; // esimene draiver
 8000b0a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b10:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b14:	085b      	lsrs	r3, r3, #1
 8000b16:	6353      	str	r3, [r2, #52]	; 0x34
		TIM2->CCR2 = 0; // esimene draiver
 8000b18:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	639a      	str	r2, [r3, #56]	; 0x38
		TIM2->CCR3 = TIM2->ARR / 2; // teine draiver
 8000b20:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000b24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b26:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b2a:	085b      	lsrs	r3, r3, #1
 8000b2c:	63d3      	str	r3, [r2, #60]	; 0x3c
		TIM2->CCR4 = 0; // teine draiver
 8000b2e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000b32:	2200      	movs	r2, #0
 8000b34:	641a      	str	r2, [r3, #64]	; 0x40
		TIM16->CCR1 = TIM16->ARR / 2; // kolmas draiver
 8000b36:	4b23      	ldr	r3, [pc, #140]	; (8000bc4 <main+0x18c>)
 8000b38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b3a:	4a22      	ldr	r2, [pc, #136]	; (8000bc4 <main+0x18c>)
 8000b3c:	085b      	lsrs	r3, r3, #1
 8000b3e:	6353      	str	r3, [r2, #52]	; 0x34
		TIM17->CCR1 = 0; // kolmas draiver
 8000b40:	4b21      	ldr	r3, [pc, #132]	; (8000bc8 <main+0x190>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	635a      	str	r2, [r3, #52]	; 0x34
		else {
			TIM2->CCR1 = 0; // esimene draiver
			TIM2->CCR2 = 0; // esimene draiver
		}*/

		TIM8->CCR1 = command.throwerSpeed; // thrower
 8000b46:	4b21      	ldr	r3, [pc, #132]	; (8000bcc <main+0x194>)
 8000b48:	88da      	ldrh	r2, [r3, #6]
 8000b4a:	4b21      	ldr	r3, [pc, #132]	; (8000bd0 <main+0x198>)
 8000b4c:	635a      	str	r2, [r3, #52]	; 0x34
		TIM15->CCR2 = (int) TIM15->ARR * 0.1; // thrower angle
 8000b4e:	4b21      	ldr	r3, [pc, #132]	; (8000bd4 <main+0x19c>)
 8000b50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b52:	4618      	mov	r0, r3
 8000b54:	f7ff fcb2 	bl	80004bc <__aeabi_i2d>
 8000b58:	a30b      	add	r3, pc, #44	; (adr r3, 8000b88 <main+0x150>)
 8000b5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b5e:	f7ff fd17 	bl	8000590 <__aeabi_dmul>
 8000b62:	4603      	mov	r3, r0
 8000b64:	460c      	mov	r4, r1
 8000b66:	461a      	mov	r2, r3
 8000b68:	4623      	mov	r3, r4
 8000b6a:	4c1a      	ldr	r4, [pc, #104]	; (8000bd4 <main+0x19c>)
 8000b6c:	4610      	mov	r0, r2
 8000b6e:	4619      	mov	r1, r3
 8000b70:	f7ff ff20 	bl	80009b4 <__aeabi_d2uiz>
 8000b74:	4603      	mov	r3, r0
 8000b76:	63a3      	str	r3, [r4, #56]	; 0x38

		//TIM2->CCR3 = 0; // teine draiver
		//TIM2->CCR4 = 0; // teine draiver
		//TIM16->CCR1 = 0; // kolmas draiver
		//TIM17->CCR1 = 0; // kolmas draiver
		CDC_Transmit_FS(&feedback, sizeof(feedback)); // (5) Send data over USB.
 8000b78:	463b      	mov	r3, r7
 8000b7a:	2108      	movs	r1, #8
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	f008 fb85 	bl	800928c <CDC_Transmit_FS>
	if (isCommandReceived) { // (2) Only return data when something has been received.
 8000b82:	e7a9      	b.n	8000ad8 <main+0xa0>
 8000b84:	f3af 8000 	nop.w
 8000b88:	9999999a 	.word	0x9999999a
 8000b8c:	3fb99999 	.word	0x3fb99999
 8000b90:	2000054c 	.word	0x2000054c
 8000b94:	20000500 	.word	0x20000500
 8000b98:	2000041c 	.word	0x2000041c
 8000b9c:	20000598 	.word	0x20000598
 8000ba0:	200005e4 	.word	0x200005e4
 8000ba4:	200004b4 	.word	0x200004b4
 8000ba8:	200003d0 	.word	0x200003d0
 8000bac:	20000468 	.word	0x20000468
 8000bb0:	200001ac 	.word	0x200001ac
 8000bb4:	48000400 	.word	0x48000400
 8000bb8:	40012c00 	.word	0x40012c00
 8000bbc:	40000400 	.word	0x40000400
 8000bc0:	40000800 	.word	0x40000800
 8000bc4:	40014400 	.word	0x40014400
 8000bc8:	40014800 	.word	0x40014800
 8000bcc:	200001a0 	.word	0x200001a0
 8000bd0:	40013400 	.word	0x40013400
 8000bd4:	40014000 	.word	0x40014000

08000bd8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b0a4      	sub	sp, #144	; 0x90
 8000bdc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bde:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000be2:	2238      	movs	r2, #56	; 0x38
 8000be4:	2100      	movs	r1, #0
 8000be6:	4618      	mov	r0, r3
 8000be8:	f008 ffb5 	bl	8009b56 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bec:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	601a      	str	r2, [r3, #0]
 8000bf4:	605a      	str	r2, [r3, #4]
 8000bf6:	609a      	str	r2, [r3, #8]
 8000bf8:	60da      	str	r2, [r3, #12]
 8000bfa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000bfc:	463b      	mov	r3, r7
 8000bfe:	2244      	movs	r2, #68	; 0x44
 8000c00:	2100      	movs	r1, #0
 8000c02:	4618      	mov	r0, r3
 8000c04:	f008 ffa7 	bl	8009b56 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000c08:	2000      	movs	r0, #0
 8000c0a:	f002 fd73 	bl	80036f4 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 8000c0e:	2322      	movs	r3, #34	; 0x22
 8000c10:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c12:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c16:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c18:	2340      	movs	r3, #64	; 0x40
 8000c1a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000c1c:	2301      	movs	r3, #1
 8000c1e:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c20:	2302      	movs	r3, #2
 8000c22:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c24:	2302      	movs	r3, #2
 8000c26:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000c28:	2301      	movs	r3, #1
 8000c2a:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 20;
 8000c2c:	2314      	movs	r3, #20
 8000c2e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c32:	2302      	movs	r3, #2
 8000c34:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 8000c38:	2304      	movs	r3, #4
 8000c3a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000c3e:	2302      	movs	r3, #2
 8000c40:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c44:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000c48:	4618      	mov	r0, r3
 8000c4a:	f002 fe07 	bl	800385c <HAL_RCC_OscConfig>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d001      	beq.n	8000c58 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000c54:	f000 fc12 	bl	800147c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c58:	230f      	movs	r3, #15
 8000c5a:	647b      	str	r3, [r7, #68]	; 0x44
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c5c:	2303      	movs	r3, #3
 8000c5e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c60:	2300      	movs	r3, #0
 8000c62:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c64:	2300      	movs	r3, #0
 8000c66:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000c6c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000c70:	2104      	movs	r1, #4
 8000c72:	4618      	mov	r0, r3
 8000c74:	f003 f90a 	bl	8003e8c <HAL_RCC_ClockConfig>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d001      	beq.n	8000c82 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000c7e:	f000 fbfd 	bl	800147c <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000c82:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c86:	603b      	str	r3, [r7, #0]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c8c:	463b      	mov	r3, r7
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f003 fae0 	bl	8004254 <HAL_RCCEx_PeriphCLKConfig>
 8000c94:	4603      	mov	r3, r0
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d001      	beq.n	8000c9e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000c9a:	f000 fbef 	bl	800147c <Error_Handler>
  }
}
 8000c9e:	bf00      	nop
 8000ca0:	3790      	adds	r7, #144	; 0x90
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
	...

08000ca8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b09a      	sub	sp, #104	; 0x68
 8000cac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000cae:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000cb2:	2224      	movs	r2, #36	; 0x24
 8000cb4:	2100      	movs	r1, #0
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f008 ff4d 	bl	8009b56 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cbc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	601a      	str	r2, [r3, #0]
 8000cc4:	605a      	str	r2, [r3, #4]
 8000cc6:	609a      	str	r2, [r3, #8]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000cc8:	1d3b      	adds	r3, r7, #4
 8000cca:	2234      	movs	r2, #52	; 0x34
 8000ccc:	2100      	movs	r1, #0
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f008 ff41 	bl	8009b56 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000cd4:	4b2a      	ldr	r3, [pc, #168]	; (8000d80 <MX_TIM1_Init+0xd8>)
 8000cd6:	4a2b      	ldr	r2, [pc, #172]	; (8000d84 <MX_TIM1_Init+0xdc>)
 8000cd8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000cda:	4b29      	ldr	r3, [pc, #164]	; (8000d80 <MX_TIM1_Init+0xd8>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ce0:	4b27      	ldr	r3, [pc, #156]	; (8000d80 <MX_TIM1_Init+0xd8>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000ce6:	4b26      	ldr	r3, [pc, #152]	; (8000d80 <MX_TIM1_Init+0xd8>)
 8000ce8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000cec:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cee:	4b24      	ldr	r3, [pc, #144]	; (8000d80 <MX_TIM1_Init+0xd8>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000cf4:	4b22      	ldr	r3, [pc, #136]	; (8000d80 <MX_TIM1_Init+0xd8>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cfa:	4b21      	ldr	r3, [pc, #132]	; (8000d80 <MX_TIM1_Init+0xd8>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000d00:	2301      	movs	r3, #1
 8000d02:	647b      	str	r3, [r7, #68]	; 0x44
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000d04:	2300      	movs	r3, #0
 8000d06:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000d08:	2301      	movs	r3, #1
 8000d0a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	653b      	str	r3, [r7, #80]	; 0x50
  sConfig.IC1Filter = 0;
 8000d10:	2300      	movs	r3, #0
 8000d12:	657b      	str	r3, [r7, #84]	; 0x54
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000d14:	2300      	movs	r3, #0
 8000d16:	65bb      	str	r3, [r7, #88]	; 0x58
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000d18:	2301      	movs	r3, #1
 8000d1a:	65fb      	str	r3, [r7, #92]	; 0x5c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	663b      	str	r3, [r7, #96]	; 0x60
  sConfig.IC2Filter = 0;
 8000d20:	2300      	movs	r3, #0
 8000d22:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8000d24:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000d28:	4619      	mov	r1, r3
 8000d2a:	4815      	ldr	r0, [pc, #84]	; (8000d80 <MX_TIM1_Init+0xd8>)
 8000d2c:	f003 fe30 	bl	8004990 <HAL_TIM_Encoder_Init>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d001      	beq.n	8000d3a <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8000d36:	f000 fba1 	bl	800147c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	63bb      	str	r3, [r7, #56]	; 0x38
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	63fb      	str	r3, [r7, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d42:	2300      	movs	r3, #0
 8000d44:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000d46:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000d4a:	4619      	mov	r1, r3
 8000d4c:	480c      	ldr	r0, [pc, #48]	; (8000d80 <MX_TIM1_Init+0xd8>)
 8000d4e:	f004 fc0f 	bl	8005570 <HAL_TIMEx_MasterConfigSynchronization>
 8000d52:	4603      	mov	r3, r0
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d001      	beq.n	8000d5c <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 8000d58:	f000 fb90 	bl	800147c <Error_Handler>
  }
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000d60:	2300      	movs	r3, #0
 8000d62:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000d64:	1d3b      	adds	r3, r7, #4
 8000d66:	4619      	mov	r1, r3
 8000d68:	4805      	ldr	r0, [pc, #20]	; (8000d80 <MX_TIM1_Init+0xd8>)
 8000d6a:	f004 fc83 	bl	8005674 <HAL_TIMEx_ConfigBreakDeadTime>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d001      	beq.n	8000d78 <MX_TIM1_Init+0xd0>
  {
    Error_Handler();
 8000d74:	f000 fb82 	bl	800147c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000d78:	bf00      	nop
 8000d7a:	3768      	adds	r7, #104	; 0x68
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}
 8000d80:	2000054c 	.word	0x2000054c
 8000d84:	40012c00 	.word	0x40012c00

08000d88 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b08a      	sub	sp, #40	; 0x28
 8000d8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d8e:	f107 031c 	add.w	r3, r7, #28
 8000d92:	2200      	movs	r2, #0
 8000d94:	601a      	str	r2, [r3, #0]
 8000d96:	605a      	str	r2, [r3, #4]
 8000d98:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d9a:	463b      	mov	r3, r7
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	601a      	str	r2, [r3, #0]
 8000da0:	605a      	str	r2, [r3, #4]
 8000da2:	609a      	str	r2, [r3, #8]
 8000da4:	60da      	str	r2, [r3, #12]
 8000da6:	611a      	str	r2, [r3, #16]
 8000da8:	615a      	str	r2, [r3, #20]
 8000daa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000dac:	4b35      	ldr	r3, [pc, #212]	; (8000e84 <MX_TIM2_Init+0xfc>)
 8000dae:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000db2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 50 - 1;
 8000db4:	4b33      	ldr	r3, [pc, #204]	; (8000e84 <MX_TIM2_Init+0xfc>)
 8000db6:	2231      	movs	r2, #49	; 0x31
 8000db8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dba:	4b32      	ldr	r3, [pc, #200]	; (8000e84 <MX_TIM2_Init+0xfc>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 63999;
 8000dc0:	4b30      	ldr	r3, [pc, #192]	; (8000e84 <MX_TIM2_Init+0xfc>)
 8000dc2:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8000dc6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dc8:	4b2e      	ldr	r3, [pc, #184]	; (8000e84 <MX_TIM2_Init+0xfc>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dce:	4b2d      	ldr	r3, [pc, #180]	; (8000e84 <MX_TIM2_Init+0xfc>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000dd4:	482b      	ldr	r0, [pc, #172]	; (8000e84 <MX_TIM2_Init+0xfc>)
 8000dd6:	f003 fc84 	bl	80046e2 <HAL_TIM_PWM_Init>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d001      	beq.n	8000de4 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8000de0:	f000 fb4c 	bl	800147c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000de4:	2300      	movs	r3, #0
 8000de6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000de8:	2300      	movs	r3, #0
 8000dea:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000dec:	f107 031c 	add.w	r3, r7, #28
 8000df0:	4619      	mov	r1, r3
 8000df2:	4824      	ldr	r0, [pc, #144]	; (8000e84 <MX_TIM2_Init+0xfc>)
 8000df4:	f004 fbbc 	bl	8005570 <HAL_TIMEx_MasterConfigSynchronization>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d001      	beq.n	8000e02 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8000dfe:	f000 fb3d 	bl	800147c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e02:	2360      	movs	r3, #96	; 0x60
 8000e04:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000e06:	2300      	movs	r3, #0
 8000e08:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e12:	463b      	mov	r3, r7
 8000e14:	2200      	movs	r2, #0
 8000e16:	4619      	mov	r1, r3
 8000e18:	481a      	ldr	r0, [pc, #104]	; (8000e84 <MX_TIM2_Init+0xfc>)
 8000e1a:	f003 feed 	bl	8004bf8 <HAL_TIM_PWM_ConfigChannel>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d001      	beq.n	8000e28 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8000e24:	f000 fb2a 	bl	800147c <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000e2c:	463b      	mov	r3, r7
 8000e2e:	2204      	movs	r2, #4
 8000e30:	4619      	mov	r1, r3
 8000e32:	4814      	ldr	r0, [pc, #80]	; (8000e84 <MX_TIM2_Init+0xfc>)
 8000e34:	f003 fee0 	bl	8004bf8 <HAL_TIM_PWM_ConfigChannel>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d001      	beq.n	8000e42 <MX_TIM2_Init+0xba>
  {
    Error_Handler();
 8000e3e:	f000 fb1d 	bl	800147c <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8000e42:	2300      	movs	r3, #0
 8000e44:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000e46:	463b      	mov	r3, r7
 8000e48:	2208      	movs	r2, #8
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	480d      	ldr	r0, [pc, #52]	; (8000e84 <MX_TIM2_Init+0xfc>)
 8000e4e:	f003 fed3 	bl	8004bf8 <HAL_TIM_PWM_ConfigChannel>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d001      	beq.n	8000e5c <MX_TIM2_Init+0xd4>
  {
    Error_Handler();
 8000e58:	f000 fb10 	bl	800147c <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000e60:	463b      	mov	r3, r7
 8000e62:	220c      	movs	r2, #12
 8000e64:	4619      	mov	r1, r3
 8000e66:	4807      	ldr	r0, [pc, #28]	; (8000e84 <MX_TIM2_Init+0xfc>)
 8000e68:	f003 fec6 	bl	8004bf8 <HAL_TIM_PWM_ConfigChannel>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d001      	beq.n	8000e76 <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8000e72:	f000 fb03 	bl	800147c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000e76:	4803      	ldr	r0, [pc, #12]	; (8000e84 <MX_TIM2_Init+0xfc>)
 8000e78:	f000 fc4c 	bl	8001714 <HAL_TIM_MspPostInit>

}
 8000e7c:	bf00      	nop
 8000e7e:	3728      	adds	r7, #40	; 0x28
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	20000598 	.word	0x20000598

08000e88 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b08c      	sub	sp, #48	; 0x30
 8000e8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000e8e:	f107 030c 	add.w	r3, r7, #12
 8000e92:	2224      	movs	r2, #36	; 0x24
 8000e94:	2100      	movs	r1, #0
 8000e96:	4618      	mov	r0, r3
 8000e98:	f008 fe5d 	bl	8009b56 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e9c:	463b      	mov	r3, r7
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	601a      	str	r2, [r3, #0]
 8000ea2:	605a      	str	r2, [r3, #4]
 8000ea4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000ea6:	4b21      	ldr	r3, [pc, #132]	; (8000f2c <MX_TIM3_Init+0xa4>)
 8000ea8:	4a21      	ldr	r2, [pc, #132]	; (8000f30 <MX_TIM3_Init+0xa8>)
 8000eaa:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000eac:	4b1f      	ldr	r3, [pc, #124]	; (8000f2c <MX_TIM3_Init+0xa4>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000eb2:	4b1e      	ldr	r3, [pc, #120]	; (8000f2c <MX_TIM3_Init+0xa4>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000eb8:	4b1c      	ldr	r3, [pc, #112]	; (8000f2c <MX_TIM3_Init+0xa4>)
 8000eba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ebe:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ec0:	4b1a      	ldr	r3, [pc, #104]	; (8000f2c <MX_TIM3_Init+0xa4>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ec6:	4b19      	ldr	r3, [pc, #100]	; (8000f2c <MX_TIM3_Init+0xa4>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000ecc:	2301      	movs	r3, #1
 8000ece:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000ed4:	2301      	movs	r3, #1
 8000ed6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000edc:	2300      	movs	r3, #0
 8000ede:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000ee4:	2301      	movs	r3, #1
 8000ee6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000eec:	2300      	movs	r3, #0
 8000eee:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000ef0:	f107 030c 	add.w	r3, r7, #12
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	480d      	ldr	r0, [pc, #52]	; (8000f2c <MX_TIM3_Init+0xa4>)
 8000ef8:	f003 fd4a 	bl	8004990 <HAL_TIM_Encoder_Init>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d001      	beq.n	8000f06 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8000f02:	f000 fabb 	bl	800147c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f06:	2300      	movs	r3, #0
 8000f08:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000f0e:	463b      	mov	r3, r7
 8000f10:	4619      	mov	r1, r3
 8000f12:	4806      	ldr	r0, [pc, #24]	; (8000f2c <MX_TIM3_Init+0xa4>)
 8000f14:	f004 fb2c 	bl	8005570 <HAL_TIMEx_MasterConfigSynchronization>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d001      	beq.n	8000f22 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8000f1e:	f000 faad 	bl	800147c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000f22:	bf00      	nop
 8000f24:	3730      	adds	r7, #48	; 0x30
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	20000500 	.word	0x20000500
 8000f30:	40000400 	.word	0x40000400

08000f34 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b08c      	sub	sp, #48	; 0x30
 8000f38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000f3a:	f107 030c 	add.w	r3, r7, #12
 8000f3e:	2224      	movs	r2, #36	; 0x24
 8000f40:	2100      	movs	r1, #0
 8000f42:	4618      	mov	r0, r3
 8000f44:	f008 fe07 	bl	8009b56 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f48:	463b      	mov	r3, r7
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	601a      	str	r2, [r3, #0]
 8000f4e:	605a      	str	r2, [r3, #4]
 8000f50:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000f52:	4b21      	ldr	r3, [pc, #132]	; (8000fd8 <MX_TIM4_Init+0xa4>)
 8000f54:	4a21      	ldr	r2, [pc, #132]	; (8000fdc <MX_TIM4_Init+0xa8>)
 8000f56:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000f58:	4b1f      	ldr	r3, [pc, #124]	; (8000fd8 <MX_TIM4_Init+0xa4>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f5e:	4b1e      	ldr	r3, [pc, #120]	; (8000fd8 <MX_TIM4_Init+0xa4>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000f64:	4b1c      	ldr	r3, [pc, #112]	; (8000fd8 <MX_TIM4_Init+0xa4>)
 8000f66:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f6a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f6c:	4b1a      	ldr	r3, [pc, #104]	; (8000fd8 <MX_TIM4_Init+0xa4>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f72:	4b19      	ldr	r3, [pc, #100]	; (8000fd8 <MX_TIM4_Init+0xa4>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000f78:	2301      	movs	r3, #1
 8000f7a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000f80:	2301      	movs	r3, #1
 8000f82:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000f84:	2300      	movs	r3, #0
 8000f86:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000f90:	2301      	movs	r3, #1
 8000f92:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000f94:	2300      	movs	r3, #0
 8000f96:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8000f9c:	f107 030c 	add.w	r3, r7, #12
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	480d      	ldr	r0, [pc, #52]	; (8000fd8 <MX_TIM4_Init+0xa4>)
 8000fa4:	f003 fcf4 	bl	8004990 <HAL_TIM_Encoder_Init>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d001      	beq.n	8000fb2 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8000fae:	f000 fa65 	bl	800147c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000fba:	463b      	mov	r3, r7
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	4806      	ldr	r0, [pc, #24]	; (8000fd8 <MX_TIM4_Init+0xa4>)
 8000fc0:	f004 fad6 	bl	8005570 <HAL_TIMEx_MasterConfigSynchronization>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d001      	beq.n	8000fce <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8000fca:	f000 fa57 	bl	800147c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000fce:	bf00      	nop
 8000fd0:	3730      	adds	r7, #48	; 0x30
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	2000041c 	.word	0x2000041c
 8000fdc:	40000800 	.word	0x40000800

08000fe0 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b098      	sub	sp, #96	; 0x60
 8000fe4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fe6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000fea:	2200      	movs	r2, #0
 8000fec:	601a      	str	r2, [r3, #0]
 8000fee:	605a      	str	r2, [r3, #4]
 8000ff0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ff2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	601a      	str	r2, [r3, #0]
 8000ffa:	605a      	str	r2, [r3, #4]
 8000ffc:	609a      	str	r2, [r3, #8]
 8000ffe:	60da      	str	r2, [r3, #12]
 8001000:	611a      	str	r2, [r3, #16]
 8001002:	615a      	str	r2, [r3, #20]
 8001004:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001006:	1d3b      	adds	r3, r7, #4
 8001008:	2234      	movs	r2, #52	; 0x34
 800100a:	2100      	movs	r1, #0
 800100c:	4618      	mov	r0, r3
 800100e:	f008 fda2 	bl	8009b56 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001012:	4b3b      	ldr	r3, [pc, #236]	; (8001100 <MX_TIM8_Init+0x120>)
 8001014:	4a3b      	ldr	r2, [pc, #236]	; (8001104 <MX_TIM8_Init+0x124>)
 8001016:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 50 - 1;
 8001018:	4b39      	ldr	r3, [pc, #228]	; (8001100 <MX_TIM8_Init+0x120>)
 800101a:	2231      	movs	r2, #49	; 0x31
 800101c:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800101e:	4b38      	ldr	r3, [pc, #224]	; (8001100 <MX_TIM8_Init+0x120>)
 8001020:	2200      	movs	r2, #0
 8001022:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 63999;
 8001024:	4b36      	ldr	r3, [pc, #216]	; (8001100 <MX_TIM8_Init+0x120>)
 8001026:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 800102a:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800102c:	4b34      	ldr	r3, [pc, #208]	; (8001100 <MX_TIM8_Init+0x120>)
 800102e:	2200      	movs	r2, #0
 8001030:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001032:	4b33      	ldr	r3, [pc, #204]	; (8001100 <MX_TIM8_Init+0x120>)
 8001034:	2200      	movs	r2, #0
 8001036:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001038:	4b31      	ldr	r3, [pc, #196]	; (8001100 <MX_TIM8_Init+0x120>)
 800103a:	2200      	movs	r2, #0
 800103c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800103e:	4830      	ldr	r0, [pc, #192]	; (8001100 <MX_TIM8_Init+0x120>)
 8001040:	f003 fb4f 	bl	80046e2 <HAL_TIM_PWM_Init>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d001      	beq.n	800104e <MX_TIM8_Init+0x6e>
  {
    Error_Handler();
 800104a:	f000 fa17 	bl	800147c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800104e:	2300      	movs	r3, #0
 8001050:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001052:	2300      	movs	r3, #0
 8001054:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001056:	2300      	movs	r3, #0
 8001058:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800105a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800105e:	4619      	mov	r1, r3
 8001060:	4827      	ldr	r0, [pc, #156]	; (8001100 <MX_TIM8_Init+0x120>)
 8001062:	f004 fa85 	bl	8005570 <HAL_TIMEx_MasterConfigSynchronization>
 8001066:	4603      	mov	r3, r0
 8001068:	2b00      	cmp	r3, #0
 800106a:	d001      	beq.n	8001070 <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 800106c:	f000 fa06 	bl	800147c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001070:	2360      	movs	r3, #96	; 0x60
 8001072:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8001074:	2300      	movs	r3, #0
 8001076:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001078:	2300      	movs	r3, #0
 800107a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800107c:	2300      	movs	r3, #0
 800107e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001080:	2300      	movs	r3, #0
 8001082:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001084:	2300      	movs	r3, #0
 8001086:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001088:	2300      	movs	r3, #0
 800108a:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800108c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001090:	2200      	movs	r2, #0
 8001092:	4619      	mov	r1, r3
 8001094:	481a      	ldr	r0, [pc, #104]	; (8001100 <MX_TIM8_Init+0x120>)
 8001096:	f003 fdaf 	bl	8004bf8 <HAL_TIM_PWM_ConfigChannel>
 800109a:	4603      	mov	r3, r0
 800109c:	2b00      	cmp	r3, #0
 800109e:	d001      	beq.n	80010a4 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 80010a0:	f000 f9ec 	bl	800147c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80010a4:	2300      	movs	r3, #0
 80010a6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80010a8:	2300      	movs	r3, #0
 80010aa:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80010ac:	2300      	movs	r3, #0
 80010ae:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80010b0:	2300      	movs	r3, #0
 80010b2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80010b4:	2300      	movs	r3, #0
 80010b6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80010b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010bc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80010be:	2300      	movs	r3, #0
 80010c0:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80010c2:	2300      	movs	r3, #0
 80010c4:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80010c6:	2300      	movs	r3, #0
 80010c8:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80010ca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80010ce:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80010d0:	2300      	movs	r3, #0
 80010d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80010d4:	2300      	movs	r3, #0
 80010d6:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80010d8:	2300      	movs	r3, #0
 80010da:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80010dc:	1d3b      	adds	r3, r7, #4
 80010de:	4619      	mov	r1, r3
 80010e0:	4807      	ldr	r0, [pc, #28]	; (8001100 <MX_TIM8_Init+0x120>)
 80010e2:	f004 fac7 	bl	8005674 <HAL_TIMEx_ConfigBreakDeadTime>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d001      	beq.n	80010f0 <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 80010ec:	f000 f9c6 	bl	800147c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80010f0:	4803      	ldr	r0, [pc, #12]	; (8001100 <MX_TIM8_Init+0x120>)
 80010f2:	f000 fb0f 	bl	8001714 <HAL_TIM_MspPostInit>

}
 80010f6:	bf00      	nop
 80010f8:	3760      	adds	r7, #96	; 0x60
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	200003d0 	.word	0x200003d0
 8001104:	40013400 	.word	0x40013400

08001108 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b098      	sub	sp, #96	; 0x60
 800110c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800110e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001112:	2200      	movs	r2, #0
 8001114:	601a      	str	r2, [r3, #0]
 8001116:	605a      	str	r2, [r3, #4]
 8001118:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800111a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800111e:	2200      	movs	r2, #0
 8001120:	601a      	str	r2, [r3, #0]
 8001122:	605a      	str	r2, [r3, #4]
 8001124:	609a      	str	r2, [r3, #8]
 8001126:	60da      	str	r2, [r3, #12]
 8001128:	611a      	str	r2, [r3, #16]
 800112a:	615a      	str	r2, [r3, #20]
 800112c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800112e:	1d3b      	adds	r3, r7, #4
 8001130:	2234      	movs	r2, #52	; 0x34
 8001132:	2100      	movs	r1, #0
 8001134:	4618      	mov	r0, r3
 8001136:	f008 fd0e 	bl	8009b56 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 800113a:	4b34      	ldr	r3, [pc, #208]	; (800120c <MX_TIM15_Init+0x104>)
 800113c:	4a34      	ldr	r2, [pc, #208]	; (8001210 <MX_TIM15_Init+0x108>)
 800113e:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 50 - 1;
 8001140:	4b32      	ldr	r3, [pc, #200]	; (800120c <MX_TIM15_Init+0x104>)
 8001142:	2231      	movs	r2, #49	; 0x31
 8001144:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001146:	4b31      	ldr	r3, [pc, #196]	; (800120c <MX_TIM15_Init+0x104>)
 8001148:	2200      	movs	r2, #0
 800114a:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 63999;
 800114c:	4b2f      	ldr	r3, [pc, #188]	; (800120c <MX_TIM15_Init+0x104>)
 800114e:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8001152:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001154:	4b2d      	ldr	r3, [pc, #180]	; (800120c <MX_TIM15_Init+0x104>)
 8001156:	2200      	movs	r2, #0
 8001158:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 800115a:	4b2c      	ldr	r3, [pc, #176]	; (800120c <MX_TIM15_Init+0x104>)
 800115c:	2200      	movs	r2, #0
 800115e:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001160:	4b2a      	ldr	r3, [pc, #168]	; (800120c <MX_TIM15_Init+0x104>)
 8001162:	2200      	movs	r2, #0
 8001164:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8001166:	4829      	ldr	r0, [pc, #164]	; (800120c <MX_TIM15_Init+0x104>)
 8001168:	f003 fabb 	bl	80046e2 <HAL_TIM_PWM_Init>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d001      	beq.n	8001176 <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 8001172:	f000 f983 	bl	800147c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001176:	2300      	movs	r3, #0
 8001178:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800117a:	2300      	movs	r3, #0
 800117c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 800117e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001182:	4619      	mov	r1, r3
 8001184:	4821      	ldr	r0, [pc, #132]	; (800120c <MX_TIM15_Init+0x104>)
 8001186:	f004 f9f3 	bl	8005570 <HAL_TIMEx_MasterConfigSynchronization>
 800118a:	4603      	mov	r3, r0
 800118c:	2b00      	cmp	r3, #0
 800118e:	d001      	beq.n	8001194 <MX_TIM15_Init+0x8c>
  {
    Error_Handler();
 8001190:	f000 f974 	bl	800147c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001194:	2360      	movs	r3, #96	; 0x60
 8001196:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8001198:	2300      	movs	r3, #0
 800119a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800119c:	2300      	movs	r3, #0
 800119e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80011a0:	2300      	movs	r3, #0
 80011a2:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011a4:	2300      	movs	r3, #0
 80011a6:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80011a8:	2300      	movs	r3, #0
 80011aa:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80011ac:	2300      	movs	r3, #0
 80011ae:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80011b0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80011b4:	2204      	movs	r2, #4
 80011b6:	4619      	mov	r1, r3
 80011b8:	4814      	ldr	r0, [pc, #80]	; (800120c <MX_TIM15_Init+0x104>)
 80011ba:	f003 fd1d 	bl	8004bf8 <HAL_TIM_PWM_ConfigChannel>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d001      	beq.n	80011c8 <MX_TIM15_Init+0xc0>
  {
    Error_Handler();
 80011c4:	f000 f95a 	bl	800147c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80011c8:	2300      	movs	r3, #0
 80011ca:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80011cc:	2300      	movs	r3, #0
 80011ce:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80011d0:	2300      	movs	r3, #0
 80011d2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80011d4:	2300      	movs	r3, #0
 80011d6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80011d8:	2300      	movs	r3, #0
 80011da:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80011dc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011e0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80011e2:	2300      	movs	r3, #0
 80011e4:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80011e6:	2300      	movs	r3, #0
 80011e8:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 80011ea:	1d3b      	adds	r3, r7, #4
 80011ec:	4619      	mov	r1, r3
 80011ee:	4807      	ldr	r0, [pc, #28]	; (800120c <MX_TIM15_Init+0x104>)
 80011f0:	f004 fa40 	bl	8005674 <HAL_TIMEx_ConfigBreakDeadTime>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d001      	beq.n	80011fe <MX_TIM15_Init+0xf6>
  {
    Error_Handler();
 80011fa:	f000 f93f 	bl	800147c <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 80011fe:	4803      	ldr	r0, [pc, #12]	; (800120c <MX_TIM15_Init+0x104>)
 8001200:	f000 fa88 	bl	8001714 <HAL_TIM_MspPostInit>

}
 8001204:	bf00      	nop
 8001206:	3760      	adds	r7, #96	; 0x60
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}
 800120c:	20000468 	.word	0x20000468
 8001210:	40014000 	.word	0x40014000

08001214 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b094      	sub	sp, #80	; 0x50
 8001218:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800121a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800121e:	2200      	movs	r2, #0
 8001220:	601a      	str	r2, [r3, #0]
 8001222:	605a      	str	r2, [r3, #4]
 8001224:	609a      	str	r2, [r3, #8]
 8001226:	60da      	str	r2, [r3, #12]
 8001228:	611a      	str	r2, [r3, #16]
 800122a:	615a      	str	r2, [r3, #20]
 800122c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800122e:	463b      	mov	r3, r7
 8001230:	2234      	movs	r2, #52	; 0x34
 8001232:	2100      	movs	r1, #0
 8001234:	4618      	mov	r0, r3
 8001236:	f008 fc8e 	bl	8009b56 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 800123a:	4b31      	ldr	r3, [pc, #196]	; (8001300 <MX_TIM16_Init+0xec>)
 800123c:	4a31      	ldr	r2, [pc, #196]	; (8001304 <MX_TIM16_Init+0xf0>)
 800123e:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 50 - 1;
 8001240:	4b2f      	ldr	r3, [pc, #188]	; (8001300 <MX_TIM16_Init+0xec>)
 8001242:	2231      	movs	r2, #49	; 0x31
 8001244:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001246:	4b2e      	ldr	r3, [pc, #184]	; (8001300 <MX_TIM16_Init+0xec>)
 8001248:	2200      	movs	r2, #0
 800124a:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 63999;
 800124c:	4b2c      	ldr	r3, [pc, #176]	; (8001300 <MX_TIM16_Init+0xec>)
 800124e:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8001252:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001254:	4b2a      	ldr	r3, [pc, #168]	; (8001300 <MX_TIM16_Init+0xec>)
 8001256:	2200      	movs	r2, #0
 8001258:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800125a:	4b29      	ldr	r3, [pc, #164]	; (8001300 <MX_TIM16_Init+0xec>)
 800125c:	2200      	movs	r2, #0
 800125e:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001260:	4b27      	ldr	r3, [pc, #156]	; (8001300 <MX_TIM16_Init+0xec>)
 8001262:	2200      	movs	r2, #0
 8001264:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001266:	4826      	ldr	r0, [pc, #152]	; (8001300 <MX_TIM16_Init+0xec>)
 8001268:	f003 f9e4 	bl	8004634 <HAL_TIM_Base_Init>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d001      	beq.n	8001276 <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 8001272:	f000 f903 	bl	800147c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8001276:	4822      	ldr	r0, [pc, #136]	; (8001300 <MX_TIM16_Init+0xec>)
 8001278:	f003 fa33 	bl	80046e2 <HAL_TIM_PWM_Init>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d001      	beq.n	8001286 <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 8001282:	f000 f8fb 	bl	800147c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001286:	2360      	movs	r3, #96	; 0x60
 8001288:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 0;
 800128a:	2300      	movs	r3, #0
 800128c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800128e:	2300      	movs	r3, #0
 8001290:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001292:	2300      	movs	r3, #0
 8001294:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001296:	2300      	movs	r3, #0
 8001298:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800129a:	2300      	movs	r3, #0
 800129c:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800129e:	2300      	movs	r3, #0
 80012a0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012a2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80012a6:	2200      	movs	r2, #0
 80012a8:	4619      	mov	r1, r3
 80012aa:	4815      	ldr	r0, [pc, #84]	; (8001300 <MX_TIM16_Init+0xec>)
 80012ac:	f003 fca4 	bl	8004bf8 <HAL_TIM_PWM_ConfigChannel>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d001      	beq.n	80012ba <MX_TIM16_Init+0xa6>
  {
    Error_Handler();
 80012b6:	f000 f8e1 	bl	800147c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80012ba:	2300      	movs	r3, #0
 80012bc:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80012be:	2300      	movs	r3, #0
 80012c0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80012c2:	2300      	movs	r3, #0
 80012c4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80012c6:	2300      	movs	r3, #0
 80012c8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80012ca:	2300      	movs	r3, #0
 80012cc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80012ce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012d2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80012d4:	2300      	movs	r3, #0
 80012d6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80012d8:	2300      	movs	r3, #0
 80012da:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 80012dc:	463b      	mov	r3, r7
 80012de:	4619      	mov	r1, r3
 80012e0:	4807      	ldr	r0, [pc, #28]	; (8001300 <MX_TIM16_Init+0xec>)
 80012e2:	f004 f9c7 	bl	8005674 <HAL_TIMEx_ConfigBreakDeadTime>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d001      	beq.n	80012f0 <MX_TIM16_Init+0xdc>
  {
    Error_Handler();
 80012ec:	f000 f8c6 	bl	800147c <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 80012f0:	4803      	ldr	r0, [pc, #12]	; (8001300 <MX_TIM16_Init+0xec>)
 80012f2:	f000 fa0f 	bl	8001714 <HAL_TIM_MspPostInit>

}
 80012f6:	bf00      	nop
 80012f8:	3750      	adds	r7, #80	; 0x50
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	200005e4 	.word	0x200005e4
 8001304:	40014400 	.word	0x40014400

08001308 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b094      	sub	sp, #80	; 0x50
 800130c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800130e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001312:	2200      	movs	r2, #0
 8001314:	601a      	str	r2, [r3, #0]
 8001316:	605a      	str	r2, [r3, #4]
 8001318:	609a      	str	r2, [r3, #8]
 800131a:	60da      	str	r2, [r3, #12]
 800131c:	611a      	str	r2, [r3, #16]
 800131e:	615a      	str	r2, [r3, #20]
 8001320:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001322:	463b      	mov	r3, r7
 8001324:	2234      	movs	r2, #52	; 0x34
 8001326:	2100      	movs	r1, #0
 8001328:	4618      	mov	r0, r3
 800132a:	f008 fc14 	bl	8009b56 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 800132e:	4b31      	ldr	r3, [pc, #196]	; (80013f4 <MX_TIM17_Init+0xec>)
 8001330:	4a31      	ldr	r2, [pc, #196]	; (80013f8 <MX_TIM17_Init+0xf0>)
 8001332:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 50 - 1;
 8001334:	4b2f      	ldr	r3, [pc, #188]	; (80013f4 <MX_TIM17_Init+0xec>)
 8001336:	2231      	movs	r2, #49	; 0x31
 8001338:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 800133a:	4b2e      	ldr	r3, [pc, #184]	; (80013f4 <MX_TIM17_Init+0xec>)
 800133c:	2200      	movs	r2, #0
 800133e:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 63999;
 8001340:	4b2c      	ldr	r3, [pc, #176]	; (80013f4 <MX_TIM17_Init+0xec>)
 8001342:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8001346:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001348:	4b2a      	ldr	r3, [pc, #168]	; (80013f4 <MX_TIM17_Init+0xec>)
 800134a:	2200      	movs	r2, #0
 800134c:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 800134e:	4b29      	ldr	r3, [pc, #164]	; (80013f4 <MX_TIM17_Init+0xec>)
 8001350:	2200      	movs	r2, #0
 8001352:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001354:	4b27      	ldr	r3, [pc, #156]	; (80013f4 <MX_TIM17_Init+0xec>)
 8001356:	2200      	movs	r2, #0
 8001358:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 800135a:	4826      	ldr	r0, [pc, #152]	; (80013f4 <MX_TIM17_Init+0xec>)
 800135c:	f003 f96a 	bl	8004634 <HAL_TIM_Base_Init>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d001      	beq.n	800136a <MX_TIM17_Init+0x62>
  {
    Error_Handler();
 8001366:	f000 f889 	bl	800147c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 800136a:	4822      	ldr	r0, [pc, #136]	; (80013f4 <MX_TIM17_Init+0xec>)
 800136c:	f003 f9b9 	bl	80046e2 <HAL_TIM_PWM_Init>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d001      	beq.n	800137a <MX_TIM17_Init+0x72>
  {
    Error_Handler();
 8001376:	f000 f881 	bl	800147c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800137a:	2360      	movs	r3, #96	; 0x60
 800137c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 0;
 800137e:	2300      	movs	r3, #0
 8001380:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001382:	2300      	movs	r3, #0
 8001384:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001386:	2300      	movs	r3, #0
 8001388:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800138a:	2300      	movs	r3, #0
 800138c:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800138e:	2300      	movs	r3, #0
 8001390:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001392:	2300      	movs	r3, #0
 8001394:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001396:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800139a:	2200      	movs	r2, #0
 800139c:	4619      	mov	r1, r3
 800139e:	4815      	ldr	r0, [pc, #84]	; (80013f4 <MX_TIM17_Init+0xec>)
 80013a0:	f003 fc2a 	bl	8004bf8 <HAL_TIM_PWM_ConfigChannel>
 80013a4:	4603      	mov	r3, r0
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d001      	beq.n	80013ae <MX_TIM17_Init+0xa6>
  {
    Error_Handler();
 80013aa:	f000 f867 	bl	800147c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80013ae:	2300      	movs	r3, #0
 80013b0:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80013b2:	2300      	movs	r3, #0
 80013b4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80013b6:	2300      	movs	r3, #0
 80013b8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80013ba:	2300      	movs	r3, #0
 80013bc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80013be:	2300      	movs	r3, #0
 80013c0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80013c2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013c6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80013c8:	2300      	movs	r3, #0
 80013ca:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80013cc:	2300      	movs	r3, #0
 80013ce:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 80013d0:	463b      	mov	r3, r7
 80013d2:	4619      	mov	r1, r3
 80013d4:	4807      	ldr	r0, [pc, #28]	; (80013f4 <MX_TIM17_Init+0xec>)
 80013d6:	f004 f94d 	bl	8005674 <HAL_TIMEx_ConfigBreakDeadTime>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d001      	beq.n	80013e4 <MX_TIM17_Init+0xdc>
  {
    Error_Handler();
 80013e0:	f000 f84c 	bl	800147c <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 80013e4:	4803      	ldr	r0, [pc, #12]	; (80013f4 <MX_TIM17_Init+0xec>)
 80013e6:	f000 f995 	bl	8001714 <HAL_TIM_MspPostInit>

}
 80013ea:	bf00      	nop
 80013ec:	3750      	adds	r7, #80	; 0x50
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	200004b4 	.word	0x200004b4
 80013f8:	40014800 	.word	0x40014800

080013fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b088      	sub	sp, #32
 8001400:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001402:	f107 030c 	add.w	r3, r7, #12
 8001406:	2200      	movs	r2, #0
 8001408:	601a      	str	r2, [r3, #0]
 800140a:	605a      	str	r2, [r3, #4]
 800140c:	609a      	str	r2, [r3, #8]
 800140e:	60da      	str	r2, [r3, #12]
 8001410:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001412:	4b18      	ldr	r3, [pc, #96]	; (8001474 <MX_GPIO_Init+0x78>)
 8001414:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001416:	4a17      	ldr	r2, [pc, #92]	; (8001474 <MX_GPIO_Init+0x78>)
 8001418:	f043 0301 	orr.w	r3, r3, #1
 800141c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800141e:	4b15      	ldr	r3, [pc, #84]	; (8001474 <MX_GPIO_Init+0x78>)
 8001420:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001422:	f003 0301 	and.w	r3, r3, #1
 8001426:	60bb      	str	r3, [r7, #8]
 8001428:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800142a:	4b12      	ldr	r3, [pc, #72]	; (8001474 <MX_GPIO_Init+0x78>)
 800142c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800142e:	4a11      	ldr	r2, [pc, #68]	; (8001474 <MX_GPIO_Init+0x78>)
 8001430:	f043 0302 	orr.w	r3, r3, #2
 8001434:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001436:	4b0f      	ldr	r3, [pc, #60]	; (8001474 <MX_GPIO_Init+0x78>)
 8001438:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800143a:	f003 0302 	and.w	r3, r3, #2
 800143e:	607b      	str	r3, [r7, #4]
 8001440:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001442:	2200      	movs	r2, #0
 8001444:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001448:	480b      	ldr	r0, [pc, #44]	; (8001478 <MX_GPIO_Init+0x7c>)
 800144a:	f000 fdb9 	bl	8001fc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 800144e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001452:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001454:	2301      	movs	r3, #1
 8001456:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001458:	2300      	movs	r3, #0
 800145a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800145c:	2300      	movs	r3, #0
 800145e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001460:	f107 030c 	add.w	r3, r7, #12
 8001464:	4619      	mov	r1, r3
 8001466:	4804      	ldr	r0, [pc, #16]	; (8001478 <MX_GPIO_Init+0x7c>)
 8001468:	f000 fc28 	bl	8001cbc <HAL_GPIO_Init>

}
 800146c:	bf00      	nop
 800146e:	3720      	adds	r7, #32
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}
 8001474:	40021000 	.word	0x40021000
 8001478:	48000400 	.word	0x48000400

0800147c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001480:	bf00      	nop
 8001482:	46bd      	mov	sp, r7
 8001484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001488:	4770      	bx	lr
	...

0800148c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b082      	sub	sp, #8
 8001490:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001492:	4b0f      	ldr	r3, [pc, #60]	; (80014d0 <HAL_MspInit+0x44>)
 8001494:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001496:	4a0e      	ldr	r2, [pc, #56]	; (80014d0 <HAL_MspInit+0x44>)
 8001498:	f043 0301 	orr.w	r3, r3, #1
 800149c:	6613      	str	r3, [r2, #96]	; 0x60
 800149e:	4b0c      	ldr	r3, [pc, #48]	; (80014d0 <HAL_MspInit+0x44>)
 80014a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014a2:	f003 0301 	and.w	r3, r3, #1
 80014a6:	607b      	str	r3, [r7, #4]
 80014a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014aa:	4b09      	ldr	r3, [pc, #36]	; (80014d0 <HAL_MspInit+0x44>)
 80014ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014ae:	4a08      	ldr	r2, [pc, #32]	; (80014d0 <HAL_MspInit+0x44>)
 80014b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014b4:	6593      	str	r3, [r2, #88]	; 0x58
 80014b6:	4b06      	ldr	r3, [pc, #24]	; (80014d0 <HAL_MspInit+0x44>)
 80014b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014be:	603b      	str	r3, [r7, #0]
 80014c0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80014c2:	f002 f9bb 	bl	800383c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014c6:	bf00      	nop
 80014c8:	3708      	adds	r7, #8
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	40021000 	.word	0x40021000

080014d4 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b08e      	sub	sp, #56	; 0x38
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014e0:	2200      	movs	r2, #0
 80014e2:	601a      	str	r2, [r3, #0]
 80014e4:	605a      	str	r2, [r3, #4]
 80014e6:	609a      	str	r2, [r3, #8]
 80014e8:	60da      	str	r2, [r3, #12]
 80014ea:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4a46      	ldr	r2, [pc, #280]	; (800160c <HAL_TIM_Encoder_MspInit+0x138>)
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d12a      	bne.n	800154c <HAL_TIM_Encoder_MspInit+0x78>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80014f6:	4b46      	ldr	r3, [pc, #280]	; (8001610 <HAL_TIM_Encoder_MspInit+0x13c>)
 80014f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014fa:	4a45      	ldr	r2, [pc, #276]	; (8001610 <HAL_TIM_Encoder_MspInit+0x13c>)
 80014fc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001500:	6613      	str	r3, [r2, #96]	; 0x60
 8001502:	4b43      	ldr	r3, [pc, #268]	; (8001610 <HAL_TIM_Encoder_MspInit+0x13c>)
 8001504:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001506:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800150a:	623b      	str	r3, [r7, #32]
 800150c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800150e:	4b40      	ldr	r3, [pc, #256]	; (8001610 <HAL_TIM_Encoder_MspInit+0x13c>)
 8001510:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001512:	4a3f      	ldr	r2, [pc, #252]	; (8001610 <HAL_TIM_Encoder_MspInit+0x13c>)
 8001514:	f043 0301 	orr.w	r3, r3, #1
 8001518:	64d3      	str	r3, [r2, #76]	; 0x4c
 800151a:	4b3d      	ldr	r3, [pc, #244]	; (8001610 <HAL_TIM_Encoder_MspInit+0x13c>)
 800151c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800151e:	f003 0301 	and.w	r3, r3, #1
 8001522:	61fb      	str	r3, [r7, #28]
 8001524:	69fb      	ldr	r3, [r7, #28]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001526:	f44f 7340 	mov.w	r3, #768	; 0x300
 800152a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800152c:	2302      	movs	r3, #2
 800152e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001530:	2300      	movs	r3, #0
 8001532:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001534:	2300      	movs	r3, #0
 8001536:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001538:	2306      	movs	r3, #6
 800153a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800153c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001540:	4619      	mov	r1, r3
 8001542:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001546:	f000 fbb9 	bl	8001cbc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800154a:	e05a      	b.n	8001602 <HAL_TIM_Encoder_MspInit+0x12e>
  else if(htim_encoder->Instance==TIM3)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a30      	ldr	r2, [pc, #192]	; (8001614 <HAL_TIM_Encoder_MspInit+0x140>)
 8001552:	4293      	cmp	r3, r2
 8001554:	d128      	bne.n	80015a8 <HAL_TIM_Encoder_MspInit+0xd4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001556:	4b2e      	ldr	r3, [pc, #184]	; (8001610 <HAL_TIM_Encoder_MspInit+0x13c>)
 8001558:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800155a:	4a2d      	ldr	r2, [pc, #180]	; (8001610 <HAL_TIM_Encoder_MspInit+0x13c>)
 800155c:	f043 0302 	orr.w	r3, r3, #2
 8001560:	6593      	str	r3, [r2, #88]	; 0x58
 8001562:	4b2b      	ldr	r3, [pc, #172]	; (8001610 <HAL_TIM_Encoder_MspInit+0x13c>)
 8001564:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001566:	f003 0302 	and.w	r3, r3, #2
 800156a:	61bb      	str	r3, [r7, #24]
 800156c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800156e:	4b28      	ldr	r3, [pc, #160]	; (8001610 <HAL_TIM_Encoder_MspInit+0x13c>)
 8001570:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001572:	4a27      	ldr	r2, [pc, #156]	; (8001610 <HAL_TIM_Encoder_MspInit+0x13c>)
 8001574:	f043 0302 	orr.w	r3, r3, #2
 8001578:	64d3      	str	r3, [r2, #76]	; 0x4c
 800157a:	4b25      	ldr	r3, [pc, #148]	; (8001610 <HAL_TIM_Encoder_MspInit+0x13c>)
 800157c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800157e:	f003 0302 	and.w	r3, r3, #2
 8001582:	617b      	str	r3, [r7, #20]
 8001584:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001586:	2330      	movs	r3, #48	; 0x30
 8001588:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800158a:	2302      	movs	r3, #2
 800158c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158e:	2300      	movs	r3, #0
 8001590:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001592:	2300      	movs	r3, #0
 8001594:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001596:	2302      	movs	r3, #2
 8001598:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800159a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800159e:	4619      	mov	r1, r3
 80015a0:	481d      	ldr	r0, [pc, #116]	; (8001618 <HAL_TIM_Encoder_MspInit+0x144>)
 80015a2:	f000 fb8b 	bl	8001cbc <HAL_GPIO_Init>
}
 80015a6:	e02c      	b.n	8001602 <HAL_TIM_Encoder_MspInit+0x12e>
  else if(htim_encoder->Instance==TIM4)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4a1b      	ldr	r2, [pc, #108]	; (800161c <HAL_TIM_Encoder_MspInit+0x148>)
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d127      	bne.n	8001602 <HAL_TIM_Encoder_MspInit+0x12e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80015b2:	4b17      	ldr	r3, [pc, #92]	; (8001610 <HAL_TIM_Encoder_MspInit+0x13c>)
 80015b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015b6:	4a16      	ldr	r2, [pc, #88]	; (8001610 <HAL_TIM_Encoder_MspInit+0x13c>)
 80015b8:	f043 0304 	orr.w	r3, r3, #4
 80015bc:	6593      	str	r3, [r2, #88]	; 0x58
 80015be:	4b14      	ldr	r3, [pc, #80]	; (8001610 <HAL_TIM_Encoder_MspInit+0x13c>)
 80015c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015c2:	f003 0304 	and.w	r3, r3, #4
 80015c6:	613b      	str	r3, [r7, #16]
 80015c8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015ca:	4b11      	ldr	r3, [pc, #68]	; (8001610 <HAL_TIM_Encoder_MspInit+0x13c>)
 80015cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015ce:	4a10      	ldr	r2, [pc, #64]	; (8001610 <HAL_TIM_Encoder_MspInit+0x13c>)
 80015d0:	f043 0302 	orr.w	r3, r3, #2
 80015d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015d6:	4b0e      	ldr	r3, [pc, #56]	; (8001610 <HAL_TIM_Encoder_MspInit+0x13c>)
 80015d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015da:	f003 0302 	and.w	r3, r3, #2
 80015de:	60fb      	str	r3, [r7, #12]
 80015e0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80015e2:	23c0      	movs	r3, #192	; 0xc0
 80015e4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015e6:	2302      	movs	r3, #2
 80015e8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ea:	2300      	movs	r3, #0
 80015ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ee:	2300      	movs	r3, #0
 80015f0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80015f2:	2302      	movs	r3, #2
 80015f4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015fa:	4619      	mov	r1, r3
 80015fc:	4806      	ldr	r0, [pc, #24]	; (8001618 <HAL_TIM_Encoder_MspInit+0x144>)
 80015fe:	f000 fb5d 	bl	8001cbc <HAL_GPIO_Init>
}
 8001602:	bf00      	nop
 8001604:	3738      	adds	r7, #56	; 0x38
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	40012c00 	.word	0x40012c00
 8001610:	40021000 	.word	0x40021000
 8001614:	40000400 	.word	0x40000400
 8001618:	48000400 	.word	0x48000400
 800161c:	40000800 	.word	0x40000800

08001620 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001620:	b480      	push	{r7}
 8001622:	b087      	sub	sp, #28
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001630:	d10c      	bne.n	800164c <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001632:	4b1b      	ldr	r3, [pc, #108]	; (80016a0 <HAL_TIM_PWM_MspInit+0x80>)
 8001634:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001636:	4a1a      	ldr	r2, [pc, #104]	; (80016a0 <HAL_TIM_PWM_MspInit+0x80>)
 8001638:	f043 0301 	orr.w	r3, r3, #1
 800163c:	6593      	str	r3, [r2, #88]	; 0x58
 800163e:	4b18      	ldr	r3, [pc, #96]	; (80016a0 <HAL_TIM_PWM_MspInit+0x80>)
 8001640:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001642:	f003 0301 	and.w	r3, r3, #1
 8001646:	617b      	str	r3, [r7, #20]
 8001648:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 800164a:	e022      	b.n	8001692 <HAL_TIM_PWM_MspInit+0x72>
  else if(htim_pwm->Instance==TIM8)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4a14      	ldr	r2, [pc, #80]	; (80016a4 <HAL_TIM_PWM_MspInit+0x84>)
 8001652:	4293      	cmp	r3, r2
 8001654:	d10c      	bne.n	8001670 <HAL_TIM_PWM_MspInit+0x50>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001656:	4b12      	ldr	r3, [pc, #72]	; (80016a0 <HAL_TIM_PWM_MspInit+0x80>)
 8001658:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800165a:	4a11      	ldr	r2, [pc, #68]	; (80016a0 <HAL_TIM_PWM_MspInit+0x80>)
 800165c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001660:	6613      	str	r3, [r2, #96]	; 0x60
 8001662:	4b0f      	ldr	r3, [pc, #60]	; (80016a0 <HAL_TIM_PWM_MspInit+0x80>)
 8001664:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001666:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800166a:	613b      	str	r3, [r7, #16]
 800166c:	693b      	ldr	r3, [r7, #16]
}
 800166e:	e010      	b.n	8001692 <HAL_TIM_PWM_MspInit+0x72>
  else if(htim_pwm->Instance==TIM15)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4a0c      	ldr	r2, [pc, #48]	; (80016a8 <HAL_TIM_PWM_MspInit+0x88>)
 8001676:	4293      	cmp	r3, r2
 8001678:	d10b      	bne.n	8001692 <HAL_TIM_PWM_MspInit+0x72>
    __HAL_RCC_TIM15_CLK_ENABLE();
 800167a:	4b09      	ldr	r3, [pc, #36]	; (80016a0 <HAL_TIM_PWM_MspInit+0x80>)
 800167c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800167e:	4a08      	ldr	r2, [pc, #32]	; (80016a0 <HAL_TIM_PWM_MspInit+0x80>)
 8001680:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001684:	6613      	str	r3, [r2, #96]	; 0x60
 8001686:	4b06      	ldr	r3, [pc, #24]	; (80016a0 <HAL_TIM_PWM_MspInit+0x80>)
 8001688:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800168a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800168e:	60fb      	str	r3, [r7, #12]
 8001690:	68fb      	ldr	r3, [r7, #12]
}
 8001692:	bf00      	nop
 8001694:	371c      	adds	r7, #28
 8001696:	46bd      	mov	sp, r7
 8001698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169c:	4770      	bx	lr
 800169e:	bf00      	nop
 80016a0:	40021000 	.word	0x40021000
 80016a4:	40013400 	.word	0x40013400
 80016a8:	40014000 	.word	0x40014000

080016ac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80016ac:	b480      	push	{r7}
 80016ae:	b085      	sub	sp, #20
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4a13      	ldr	r2, [pc, #76]	; (8001708 <HAL_TIM_Base_MspInit+0x5c>)
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d10c      	bne.n	80016d8 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 80016be:	4b13      	ldr	r3, [pc, #76]	; (800170c <HAL_TIM_Base_MspInit+0x60>)
 80016c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016c2:	4a12      	ldr	r2, [pc, #72]	; (800170c <HAL_TIM_Base_MspInit+0x60>)
 80016c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016c8:	6613      	str	r3, [r2, #96]	; 0x60
 80016ca:	4b10      	ldr	r3, [pc, #64]	; (800170c <HAL_TIM_Base_MspInit+0x60>)
 80016cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016d2:	60fb      	str	r3, [r7, #12]
 80016d4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 80016d6:	e010      	b.n	80016fa <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM17)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4a0c      	ldr	r2, [pc, #48]	; (8001710 <HAL_TIM_Base_MspInit+0x64>)
 80016de:	4293      	cmp	r3, r2
 80016e0:	d10b      	bne.n	80016fa <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM17_CLK_ENABLE();
 80016e2:	4b0a      	ldr	r3, [pc, #40]	; (800170c <HAL_TIM_Base_MspInit+0x60>)
 80016e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016e6:	4a09      	ldr	r2, [pc, #36]	; (800170c <HAL_TIM_Base_MspInit+0x60>)
 80016e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016ec:	6613      	str	r3, [r2, #96]	; 0x60
 80016ee:	4b07      	ldr	r3, [pc, #28]	; (800170c <HAL_TIM_Base_MspInit+0x60>)
 80016f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80016f6:	60bb      	str	r3, [r7, #8]
 80016f8:	68bb      	ldr	r3, [r7, #8]
}
 80016fa:	bf00      	nop
 80016fc:	3714      	adds	r7, #20
 80016fe:	46bd      	mov	sp, r7
 8001700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001704:	4770      	bx	lr
 8001706:	bf00      	nop
 8001708:	40014400 	.word	0x40014400
 800170c:	40021000 	.word	0x40021000
 8001710:	40014800 	.word	0x40014800

08001714 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b08c      	sub	sp, #48	; 0x30
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800171c:	f107 031c 	add.w	r3, r7, #28
 8001720:	2200      	movs	r2, #0
 8001722:	601a      	str	r2, [r3, #0]
 8001724:	605a      	str	r2, [r3, #4]
 8001726:	609a      	str	r2, [r3, #8]
 8001728:	60da      	str	r2, [r3, #12]
 800172a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001734:	d12f      	bne.n	8001796 <HAL_TIM_MspPostInit+0x82>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001736:	4b60      	ldr	r3, [pc, #384]	; (80018b8 <HAL_TIM_MspPostInit+0x1a4>)
 8001738:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800173a:	4a5f      	ldr	r2, [pc, #380]	; (80018b8 <HAL_TIM_MspPostInit+0x1a4>)
 800173c:	f043 0301 	orr.w	r3, r3, #1
 8001740:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001742:	4b5d      	ldr	r3, [pc, #372]	; (80018b8 <HAL_TIM_MspPostInit+0x1a4>)
 8001744:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001746:	f003 0301 	and.w	r3, r3, #1
 800174a:	61bb      	str	r3, [r7, #24]
 800174c:	69bb      	ldr	r3, [r7, #24]
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA10     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 800174e:	2307      	movs	r3, #7
 8001750:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001752:	2302      	movs	r3, #2
 8001754:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001756:	2300      	movs	r3, #0
 8001758:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800175a:	2300      	movs	r3, #0
 800175c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800175e:	2301      	movs	r3, #1
 8001760:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001762:	f107 031c 	add.w	r3, r7, #28
 8001766:	4619      	mov	r1, r3
 8001768:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800176c:	f000 faa6 	bl	8001cbc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001770:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001774:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001776:	2302      	movs	r3, #2
 8001778:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800177a:	2300      	movs	r3, #0
 800177c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800177e:	2300      	movs	r3, #0
 8001780:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM2;
 8001782:	230a      	movs	r3, #10
 8001784:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001786:	f107 031c 	add.w	r3, r7, #28
 800178a:	4619      	mov	r1, r3
 800178c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001790:	f000 fa94 	bl	8001cbc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 8001794:	e08b      	b.n	80018ae <HAL_TIM_MspPostInit+0x19a>
  else if(htim->Instance==TIM8)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	4a48      	ldr	r2, [pc, #288]	; (80018bc <HAL_TIM_MspPostInit+0x1a8>)
 800179c:	4293      	cmp	r3, r2
 800179e:	d11e      	bne.n	80017de <HAL_TIM_MspPostInit+0xca>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017a0:	4b45      	ldr	r3, [pc, #276]	; (80018b8 <HAL_TIM_MspPostInit+0x1a4>)
 80017a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017a4:	4a44      	ldr	r2, [pc, #272]	; (80018b8 <HAL_TIM_MspPostInit+0x1a4>)
 80017a6:	f043 0301 	orr.w	r3, r3, #1
 80017aa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017ac:	4b42      	ldr	r3, [pc, #264]	; (80018b8 <HAL_TIM_MspPostInit+0x1a4>)
 80017ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017b0:	f003 0301 	and.w	r3, r3, #1
 80017b4:	617b      	str	r3, [r7, #20]
 80017b6:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80017b8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80017bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017be:	2302      	movs	r3, #2
 80017c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c2:	2300      	movs	r3, #0
 80017c4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017c6:	2300      	movs	r3, #0
 80017c8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM8;
 80017ca:	2302      	movs	r3, #2
 80017cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017ce:	f107 031c 	add.w	r3, r7, #28
 80017d2:	4619      	mov	r1, r3
 80017d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017d8:	f000 fa70 	bl	8001cbc <HAL_GPIO_Init>
}
 80017dc:	e067      	b.n	80018ae <HAL_TIM_MspPostInit+0x19a>
  else if(htim->Instance==TIM15)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4a37      	ldr	r2, [pc, #220]	; (80018c0 <HAL_TIM_MspPostInit+0x1ac>)
 80017e4:	4293      	cmp	r3, r2
 80017e6:	d11d      	bne.n	8001824 <HAL_TIM_MspPostInit+0x110>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017e8:	4b33      	ldr	r3, [pc, #204]	; (80018b8 <HAL_TIM_MspPostInit+0x1a4>)
 80017ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017ec:	4a32      	ldr	r2, [pc, #200]	; (80018b8 <HAL_TIM_MspPostInit+0x1a4>)
 80017ee:	f043 0301 	orr.w	r3, r3, #1
 80017f2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017f4:	4b30      	ldr	r3, [pc, #192]	; (80018b8 <HAL_TIM_MspPostInit+0x1a4>)
 80017f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017f8:	f003 0301 	and.w	r3, r3, #1
 80017fc:	613b      	str	r3, [r7, #16]
 80017fe:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001800:	2308      	movs	r3, #8
 8001802:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001804:	2302      	movs	r3, #2
 8001806:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001808:	2300      	movs	r3, #0
 800180a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800180c:	2300      	movs	r3, #0
 800180e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM15;
 8001810:	2309      	movs	r3, #9
 8001812:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001814:	f107 031c 	add.w	r3, r7, #28
 8001818:	4619      	mov	r1, r3
 800181a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800181e:	f000 fa4d 	bl	8001cbc <HAL_GPIO_Init>
}
 8001822:	e044      	b.n	80018ae <HAL_TIM_MspPostInit+0x19a>
  else if(htim->Instance==TIM16)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4a26      	ldr	r2, [pc, #152]	; (80018c4 <HAL_TIM_MspPostInit+0x1b0>)
 800182a:	4293      	cmp	r3, r2
 800182c:	d11d      	bne.n	800186a <HAL_TIM_MspPostInit+0x156>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800182e:	4b22      	ldr	r3, [pc, #136]	; (80018b8 <HAL_TIM_MspPostInit+0x1a4>)
 8001830:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001832:	4a21      	ldr	r2, [pc, #132]	; (80018b8 <HAL_TIM_MspPostInit+0x1a4>)
 8001834:	f043 0301 	orr.w	r3, r3, #1
 8001838:	64d3      	str	r3, [r2, #76]	; 0x4c
 800183a:	4b1f      	ldr	r3, [pc, #124]	; (80018b8 <HAL_TIM_MspPostInit+0x1a4>)
 800183c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800183e:	f003 0301 	and.w	r3, r3, #1
 8001842:	60fb      	str	r3, [r7, #12]
 8001844:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001846:	2340      	movs	r3, #64	; 0x40
 8001848:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800184a:	2302      	movs	r3, #2
 800184c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800184e:	2300      	movs	r3, #0
 8001850:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001852:	2300      	movs	r3, #0
 8001854:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 8001856:	2301      	movs	r3, #1
 8001858:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800185a:	f107 031c 	add.w	r3, r7, #28
 800185e:	4619      	mov	r1, r3
 8001860:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001864:	f000 fa2a 	bl	8001cbc <HAL_GPIO_Init>
}
 8001868:	e021      	b.n	80018ae <HAL_TIM_MspPostInit+0x19a>
  else if(htim->Instance==TIM17)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4a16      	ldr	r2, [pc, #88]	; (80018c8 <HAL_TIM_MspPostInit+0x1b4>)
 8001870:	4293      	cmp	r3, r2
 8001872:	d11c      	bne.n	80018ae <HAL_TIM_MspPostInit+0x19a>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001874:	4b10      	ldr	r3, [pc, #64]	; (80018b8 <HAL_TIM_MspPostInit+0x1a4>)
 8001876:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001878:	4a0f      	ldr	r2, [pc, #60]	; (80018b8 <HAL_TIM_MspPostInit+0x1a4>)
 800187a:	f043 0301 	orr.w	r3, r3, #1
 800187e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001880:	4b0d      	ldr	r3, [pc, #52]	; (80018b8 <HAL_TIM_MspPostInit+0x1a4>)
 8001882:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001884:	f003 0301 	and.w	r3, r3, #1
 8001888:	60bb      	str	r3, [r7, #8]
 800188a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800188c:	2380      	movs	r3, #128	; 0x80
 800188e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001890:	2302      	movs	r3, #2
 8001892:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001894:	2300      	movs	r3, #0
 8001896:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001898:	2300      	movs	r3, #0
 800189a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM17;
 800189c:	2301      	movs	r3, #1
 800189e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018a0:	f107 031c 	add.w	r3, r7, #28
 80018a4:	4619      	mov	r1, r3
 80018a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018aa:	f000 fa07 	bl	8001cbc <HAL_GPIO_Init>
}
 80018ae:	bf00      	nop
 80018b0:	3730      	adds	r7, #48	; 0x30
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	40021000 	.word	0x40021000
 80018bc:	40013400 	.word	0x40013400
 80018c0:	40014000 	.word	0x40014000
 80018c4:	40014400 	.word	0x40014400
 80018c8:	40014800 	.word	0x40014800

080018cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018cc:	b480      	push	{r7}
 80018ce:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80018d0:	bf00      	nop
 80018d2:	46bd      	mov	sp, r7
 80018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d8:	4770      	bx	lr

080018da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018da:	b480      	push	{r7}
 80018dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018de:	e7fe      	b.n	80018de <HardFault_Handler+0x4>

080018e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018e0:	b480      	push	{r7}
 80018e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018e4:	e7fe      	b.n	80018e4 <MemManage_Handler+0x4>

080018e6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018e6:	b480      	push	{r7}
 80018e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018ea:	e7fe      	b.n	80018ea <BusFault_Handler+0x4>

080018ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018ec:	b480      	push	{r7}
 80018ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018f0:	e7fe      	b.n	80018f0 <UsageFault_Handler+0x4>

080018f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018f2:	b480      	push	{r7}
 80018f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018f6:	bf00      	nop
 80018f8:	46bd      	mov	sp, r7
 80018fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fe:	4770      	bx	lr

08001900 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001900:	b480      	push	{r7}
 8001902:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001904:	bf00      	nop
 8001906:	46bd      	mov	sp, r7
 8001908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190c:	4770      	bx	lr

0800190e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800190e:	b480      	push	{r7}
 8001910:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001912:	bf00      	nop
 8001914:	46bd      	mov	sp, r7
 8001916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191a:	4770      	bx	lr

0800191c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001920:	f000 f89e 	bl	8001a60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001924:	bf00      	nop
 8001926:	bd80      	pop	{r7, pc}

08001928 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800192c:	4802      	ldr	r0, [pc, #8]	; (8001938 <USB_LP_IRQHandler+0x10>)
 800192e:	f000 fc80 	bl	8002232 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8001932:	bf00      	nop
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	200012d4 	.word	0x200012d4

0800193c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800193c:	b480      	push	{r7}
 800193e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001940:	4b08      	ldr	r3, [pc, #32]	; (8001964 <SystemInit+0x28>)
 8001942:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001946:	4a07      	ldr	r2, [pc, #28]	; (8001964 <SystemInit+0x28>)
 8001948:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800194c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001950:	4b04      	ldr	r3, [pc, #16]	; (8001964 <SystemInit+0x28>)
 8001952:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001956:	609a      	str	r2, [r3, #8]
#endif
}
 8001958:	bf00      	nop
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr
 8001962:	bf00      	nop
 8001964:	e000ed00 	.word	0xe000ed00

08001968 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001968:	480d      	ldr	r0, [pc, #52]	; (80019a0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800196a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800196c:	480d      	ldr	r0, [pc, #52]	; (80019a4 <LoopForever+0x6>)
  ldr r1, =_edata
 800196e:	490e      	ldr	r1, [pc, #56]	; (80019a8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001970:	4a0e      	ldr	r2, [pc, #56]	; (80019ac <LoopForever+0xe>)
  movs r3, #0
 8001972:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001974:	e002      	b.n	800197c <LoopCopyDataInit>

08001976 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001976:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001978:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800197a:	3304      	adds	r3, #4

0800197c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800197c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800197e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001980:	d3f9      	bcc.n	8001976 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001982:	4a0b      	ldr	r2, [pc, #44]	; (80019b0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001984:	4c0b      	ldr	r4, [pc, #44]	; (80019b4 <LoopForever+0x16>)
  movs r3, #0
 8001986:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001988:	e001      	b.n	800198e <LoopFillZerobss>

0800198a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800198a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800198c:	3204      	adds	r2, #4

0800198e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800198e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001990:	d3fb      	bcc.n	800198a <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001992:	f7ff ffd3 	bl	800193c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001996:	f008 f8af 	bl	8009af8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800199a:	f7ff f84d 	bl	8000a38 <main>

0800199e <LoopForever>:

LoopForever:
    b LoopForever
 800199e:	e7fe      	b.n	800199e <LoopForever>
  ldr   r0, =_estack
 80019a0:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80019a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019a8:	20000184 	.word	0x20000184
  ldr r2, =_sidata
 80019ac:	08009be0 	.word	0x08009be0
  ldr r2, =_sbss
 80019b0:	20000184 	.word	0x20000184
  ldr r4, =_ebss
 80019b4:	200015c8 	.word	0x200015c8

080019b8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80019b8:	e7fe      	b.n	80019b8 <ADC1_2_IRQHandler>

080019ba <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019ba:	b580      	push	{r7, lr}
 80019bc:	b082      	sub	sp, #8
 80019be:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80019c0:	2300      	movs	r3, #0
 80019c2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019c4:	2003      	movs	r0, #3
 80019c6:	f000 f939 	bl	8001c3c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80019ca:	2000      	movs	r0, #0
 80019cc:	f000 f80e 	bl	80019ec <HAL_InitTick>
 80019d0:	4603      	mov	r3, r0
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d002      	beq.n	80019dc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80019d6:	2301      	movs	r3, #1
 80019d8:	71fb      	strb	r3, [r7, #7]
 80019da:	e001      	b.n	80019e0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80019dc:	f7ff fd56 	bl	800148c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80019e0:	79fb      	ldrb	r3, [r7, #7]

}
 80019e2:	4618      	mov	r0, r3
 80019e4:	3708      	adds	r7, #8
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}
	...

080019ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b084      	sub	sp, #16
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80019f4:	2300      	movs	r3, #0
 80019f6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80019f8:	4b16      	ldr	r3, [pc, #88]	; (8001a54 <HAL_InitTick+0x68>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d022      	beq.n	8001a46 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001a00:	4b15      	ldr	r3, [pc, #84]	; (8001a58 <HAL_InitTick+0x6c>)
 8001a02:	681a      	ldr	r2, [r3, #0]
 8001a04:	4b13      	ldr	r3, [pc, #76]	; (8001a54 <HAL_InitTick+0x68>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001a0c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001a10:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a14:	4618      	mov	r0, r3
 8001a16:	f000 f944 	bl	8001ca2 <HAL_SYSTICK_Config>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d10f      	bne.n	8001a40 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2b0f      	cmp	r3, #15
 8001a24:	d809      	bhi.n	8001a3a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a26:	2200      	movs	r2, #0
 8001a28:	6879      	ldr	r1, [r7, #4]
 8001a2a:	f04f 30ff 	mov.w	r0, #4294967295
 8001a2e:	f000 f910 	bl	8001c52 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001a32:	4a0a      	ldr	r2, [pc, #40]	; (8001a5c <HAL_InitTick+0x70>)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6013      	str	r3, [r2, #0]
 8001a38:	e007      	b.n	8001a4a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	73fb      	strb	r3, [r7, #15]
 8001a3e:	e004      	b.n	8001a4a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001a40:	2301      	movs	r3, #1
 8001a42:	73fb      	strb	r3, [r7, #15]
 8001a44:	e001      	b.n	8001a4a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001a46:	2301      	movs	r3, #1
 8001a48:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001a4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	3710      	adds	r7, #16
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd80      	pop	{r7, pc}
 8001a54:	20000008 	.word	0x20000008
 8001a58:	20000000 	.word	0x20000000
 8001a5c:	20000004 	.word	0x20000004

08001a60 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a60:	b480      	push	{r7}
 8001a62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a64:	4b05      	ldr	r3, [pc, #20]	; (8001a7c <HAL_IncTick+0x1c>)
 8001a66:	681a      	ldr	r2, [r3, #0]
 8001a68:	4b05      	ldr	r3, [pc, #20]	; (8001a80 <HAL_IncTick+0x20>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4413      	add	r3, r2
 8001a6e:	4a03      	ldr	r2, [pc, #12]	; (8001a7c <HAL_IncTick+0x1c>)
 8001a70:	6013      	str	r3, [r2, #0]
}
 8001a72:	bf00      	nop
 8001a74:	46bd      	mov	sp, r7
 8001a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7a:	4770      	bx	lr
 8001a7c:	20000630 	.word	0x20000630
 8001a80:	20000008 	.word	0x20000008

08001a84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a84:	b480      	push	{r7}
 8001a86:	af00      	add	r7, sp, #0
  return uwTick;
 8001a88:	4b03      	ldr	r3, [pc, #12]	; (8001a98 <HAL_GetTick+0x14>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
}
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a94:	4770      	bx	lr
 8001a96:	bf00      	nop
 8001a98:	20000630 	.word	0x20000630

08001a9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	b085      	sub	sp, #20
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	f003 0307 	and.w	r3, r3, #7
 8001aaa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001aac:	4b0c      	ldr	r3, [pc, #48]	; (8001ae0 <__NVIC_SetPriorityGrouping+0x44>)
 8001aae:	68db      	ldr	r3, [r3, #12]
 8001ab0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ab2:	68ba      	ldr	r2, [r7, #8]
 8001ab4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ab8:	4013      	ands	r3, r2
 8001aba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ac0:	68bb      	ldr	r3, [r7, #8]
 8001ac2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ac4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ac8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001acc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ace:	4a04      	ldr	r2, [pc, #16]	; (8001ae0 <__NVIC_SetPriorityGrouping+0x44>)
 8001ad0:	68bb      	ldr	r3, [r7, #8]
 8001ad2:	60d3      	str	r3, [r2, #12]
}
 8001ad4:	bf00      	nop
 8001ad6:	3714      	adds	r7, #20
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ade:	4770      	bx	lr
 8001ae0:	e000ed00 	.word	0xe000ed00

08001ae4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ae8:	4b04      	ldr	r3, [pc, #16]	; (8001afc <__NVIC_GetPriorityGrouping+0x18>)
 8001aea:	68db      	ldr	r3, [r3, #12]
 8001aec:	0a1b      	lsrs	r3, r3, #8
 8001aee:	f003 0307 	and.w	r3, r3, #7
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	46bd      	mov	sp, r7
 8001af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afa:	4770      	bx	lr
 8001afc:	e000ed00 	.word	0xe000ed00

08001b00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b00:	b480      	push	{r7}
 8001b02:	b083      	sub	sp, #12
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	4603      	mov	r3, r0
 8001b08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	db0b      	blt.n	8001b2a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b12:	79fb      	ldrb	r3, [r7, #7]
 8001b14:	f003 021f 	and.w	r2, r3, #31
 8001b18:	4907      	ldr	r1, [pc, #28]	; (8001b38 <__NVIC_EnableIRQ+0x38>)
 8001b1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b1e:	095b      	lsrs	r3, r3, #5
 8001b20:	2001      	movs	r0, #1
 8001b22:	fa00 f202 	lsl.w	r2, r0, r2
 8001b26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001b2a:	bf00      	nop
 8001b2c:	370c      	adds	r7, #12
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b34:	4770      	bx	lr
 8001b36:	bf00      	nop
 8001b38:	e000e100 	.word	0xe000e100

08001b3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b083      	sub	sp, #12
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	4603      	mov	r3, r0
 8001b44:	6039      	str	r1, [r7, #0]
 8001b46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	db0a      	blt.n	8001b66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	b2da      	uxtb	r2, r3
 8001b54:	490c      	ldr	r1, [pc, #48]	; (8001b88 <__NVIC_SetPriority+0x4c>)
 8001b56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b5a:	0112      	lsls	r2, r2, #4
 8001b5c:	b2d2      	uxtb	r2, r2
 8001b5e:	440b      	add	r3, r1
 8001b60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b64:	e00a      	b.n	8001b7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	b2da      	uxtb	r2, r3
 8001b6a:	4908      	ldr	r1, [pc, #32]	; (8001b8c <__NVIC_SetPriority+0x50>)
 8001b6c:	79fb      	ldrb	r3, [r7, #7]
 8001b6e:	f003 030f 	and.w	r3, r3, #15
 8001b72:	3b04      	subs	r3, #4
 8001b74:	0112      	lsls	r2, r2, #4
 8001b76:	b2d2      	uxtb	r2, r2
 8001b78:	440b      	add	r3, r1
 8001b7a:	761a      	strb	r2, [r3, #24]
}
 8001b7c:	bf00      	nop
 8001b7e:	370c      	adds	r7, #12
 8001b80:	46bd      	mov	sp, r7
 8001b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b86:	4770      	bx	lr
 8001b88:	e000e100 	.word	0xe000e100
 8001b8c:	e000ed00 	.word	0xe000ed00

08001b90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b089      	sub	sp, #36	; 0x24
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	60f8      	str	r0, [r7, #12]
 8001b98:	60b9      	str	r1, [r7, #8]
 8001b9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	f003 0307 	and.w	r3, r3, #7
 8001ba2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ba4:	69fb      	ldr	r3, [r7, #28]
 8001ba6:	f1c3 0307 	rsb	r3, r3, #7
 8001baa:	2b04      	cmp	r3, #4
 8001bac:	bf28      	it	cs
 8001bae:	2304      	movcs	r3, #4
 8001bb0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bb2:	69fb      	ldr	r3, [r7, #28]
 8001bb4:	3304      	adds	r3, #4
 8001bb6:	2b06      	cmp	r3, #6
 8001bb8:	d902      	bls.n	8001bc0 <NVIC_EncodePriority+0x30>
 8001bba:	69fb      	ldr	r3, [r7, #28]
 8001bbc:	3b03      	subs	r3, #3
 8001bbe:	e000      	b.n	8001bc2 <NVIC_EncodePriority+0x32>
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bc4:	f04f 32ff 	mov.w	r2, #4294967295
 8001bc8:	69bb      	ldr	r3, [r7, #24]
 8001bca:	fa02 f303 	lsl.w	r3, r2, r3
 8001bce:	43da      	mvns	r2, r3
 8001bd0:	68bb      	ldr	r3, [r7, #8]
 8001bd2:	401a      	ands	r2, r3
 8001bd4:	697b      	ldr	r3, [r7, #20]
 8001bd6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bd8:	f04f 31ff 	mov.w	r1, #4294967295
 8001bdc:	697b      	ldr	r3, [r7, #20]
 8001bde:	fa01 f303 	lsl.w	r3, r1, r3
 8001be2:	43d9      	mvns	r1, r3
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001be8:	4313      	orrs	r3, r2
         );
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	3724      	adds	r7, #36	; 0x24
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf4:	4770      	bx	lr
	...

08001bf8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b082      	sub	sp, #8
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	3b01      	subs	r3, #1
 8001c04:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c08:	d301      	bcc.n	8001c0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	e00f      	b.n	8001c2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c0e:	4a0a      	ldr	r2, [pc, #40]	; (8001c38 <SysTick_Config+0x40>)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	3b01      	subs	r3, #1
 8001c14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c16:	210f      	movs	r1, #15
 8001c18:	f04f 30ff 	mov.w	r0, #4294967295
 8001c1c:	f7ff ff8e 	bl	8001b3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c20:	4b05      	ldr	r3, [pc, #20]	; (8001c38 <SysTick_Config+0x40>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c26:	4b04      	ldr	r3, [pc, #16]	; (8001c38 <SysTick_Config+0x40>)
 8001c28:	2207      	movs	r2, #7
 8001c2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c2c:	2300      	movs	r3, #0
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	3708      	adds	r7, #8
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	e000e010 	.word	0xe000e010

08001c3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b082      	sub	sp, #8
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c44:	6878      	ldr	r0, [r7, #4]
 8001c46:	f7ff ff29 	bl	8001a9c <__NVIC_SetPriorityGrouping>
}
 8001c4a:	bf00      	nop
 8001c4c:	3708      	adds	r7, #8
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}

08001c52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c52:	b580      	push	{r7, lr}
 8001c54:	b086      	sub	sp, #24
 8001c56:	af00      	add	r7, sp, #0
 8001c58:	4603      	mov	r3, r0
 8001c5a:	60b9      	str	r1, [r7, #8]
 8001c5c:	607a      	str	r2, [r7, #4]
 8001c5e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001c60:	f7ff ff40 	bl	8001ae4 <__NVIC_GetPriorityGrouping>
 8001c64:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c66:	687a      	ldr	r2, [r7, #4]
 8001c68:	68b9      	ldr	r1, [r7, #8]
 8001c6a:	6978      	ldr	r0, [r7, #20]
 8001c6c:	f7ff ff90 	bl	8001b90 <NVIC_EncodePriority>
 8001c70:	4602      	mov	r2, r0
 8001c72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c76:	4611      	mov	r1, r2
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f7ff ff5f 	bl	8001b3c <__NVIC_SetPriority>
}
 8001c7e:	bf00      	nop
 8001c80:	3718      	adds	r7, #24
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}

08001c86 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c86:	b580      	push	{r7, lr}
 8001c88:	b082      	sub	sp, #8
 8001c8a:	af00      	add	r7, sp, #0
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c94:	4618      	mov	r0, r3
 8001c96:	f7ff ff33 	bl	8001b00 <__NVIC_EnableIRQ>
}
 8001c9a:	bf00      	nop
 8001c9c:	3708      	adds	r7, #8
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}

08001ca2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ca2:	b580      	push	{r7, lr}
 8001ca4:	b082      	sub	sp, #8
 8001ca6:	af00      	add	r7, sp, #0
 8001ca8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001caa:	6878      	ldr	r0, [r7, #4]
 8001cac:	f7ff ffa4 	bl	8001bf8 <SysTick_Config>
 8001cb0:	4603      	mov	r3, r0
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	3708      	adds	r7, #8
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}
	...

08001cbc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b087      	sub	sp, #28
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
 8001cc4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001cca:	e15a      	b.n	8001f82 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	681a      	ldr	r2, [r3, #0]
 8001cd0:	2101      	movs	r1, #1
 8001cd2:	697b      	ldr	r3, [r7, #20]
 8001cd4:	fa01 f303 	lsl.w	r3, r1, r3
 8001cd8:	4013      	ands	r3, r2
 8001cda:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	f000 814c 	beq.w	8001f7c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	2b01      	cmp	r3, #1
 8001cea:	d00b      	beq.n	8001d04 <HAL_GPIO_Init+0x48>
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	2b02      	cmp	r3, #2
 8001cf2:	d007      	beq.n	8001d04 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001cf8:	2b11      	cmp	r3, #17
 8001cfa:	d003      	beq.n	8001d04 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	2b12      	cmp	r3, #18
 8001d02:	d130      	bne.n	8001d66 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	689b      	ldr	r3, [r3, #8]
 8001d08:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001d0a:	697b      	ldr	r3, [r7, #20]
 8001d0c:	005b      	lsls	r3, r3, #1
 8001d0e:	2203      	movs	r2, #3
 8001d10:	fa02 f303 	lsl.w	r3, r2, r3
 8001d14:	43db      	mvns	r3, r3
 8001d16:	693a      	ldr	r2, [r7, #16]
 8001d18:	4013      	ands	r3, r2
 8001d1a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	68da      	ldr	r2, [r3, #12]
 8001d20:	697b      	ldr	r3, [r7, #20]
 8001d22:	005b      	lsls	r3, r3, #1
 8001d24:	fa02 f303 	lsl.w	r3, r2, r3
 8001d28:	693a      	ldr	r2, [r7, #16]
 8001d2a:	4313      	orrs	r3, r2
 8001d2c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	693a      	ldr	r2, [r7, #16]
 8001d32:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001d3a:	2201      	movs	r2, #1
 8001d3c:	697b      	ldr	r3, [r7, #20]
 8001d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d42:	43db      	mvns	r3, r3
 8001d44:	693a      	ldr	r2, [r7, #16]
 8001d46:	4013      	ands	r3, r2
 8001d48:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	091b      	lsrs	r3, r3, #4
 8001d50:	f003 0201 	and.w	r2, r3, #1
 8001d54:	697b      	ldr	r3, [r7, #20]
 8001d56:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5a:	693a      	ldr	r2, [r7, #16]
 8001d5c:	4313      	orrs	r3, r2
 8001d5e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	693a      	ldr	r2, [r7, #16]
 8001d64:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	68db      	ldr	r3, [r3, #12]
 8001d6a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001d6c:	697b      	ldr	r3, [r7, #20]
 8001d6e:	005b      	lsls	r3, r3, #1
 8001d70:	2203      	movs	r2, #3
 8001d72:	fa02 f303 	lsl.w	r3, r2, r3
 8001d76:	43db      	mvns	r3, r3
 8001d78:	693a      	ldr	r2, [r7, #16]
 8001d7a:	4013      	ands	r3, r2
 8001d7c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	689a      	ldr	r2, [r3, #8]
 8001d82:	697b      	ldr	r3, [r7, #20]
 8001d84:	005b      	lsls	r3, r3, #1
 8001d86:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8a:	693a      	ldr	r2, [r7, #16]
 8001d8c:	4313      	orrs	r3, r2
 8001d8e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	693a      	ldr	r2, [r7, #16]
 8001d94:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	2b02      	cmp	r3, #2
 8001d9c:	d003      	beq.n	8001da6 <HAL_GPIO_Init+0xea>
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	2b12      	cmp	r3, #18
 8001da4:	d123      	bne.n	8001dee <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001da6:	697b      	ldr	r3, [r7, #20]
 8001da8:	08da      	lsrs	r2, r3, #3
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	3208      	adds	r2, #8
 8001dae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001db2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	f003 0307 	and.w	r3, r3, #7
 8001dba:	009b      	lsls	r3, r3, #2
 8001dbc:	220f      	movs	r2, #15
 8001dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc2:	43db      	mvns	r3, r3
 8001dc4:	693a      	ldr	r2, [r7, #16]
 8001dc6:	4013      	ands	r3, r2
 8001dc8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	691a      	ldr	r2, [r3, #16]
 8001dce:	697b      	ldr	r3, [r7, #20]
 8001dd0:	f003 0307 	and.w	r3, r3, #7
 8001dd4:	009b      	lsls	r3, r3, #2
 8001dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dda:	693a      	ldr	r2, [r7, #16]
 8001ddc:	4313      	orrs	r3, r2
 8001dde:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	08da      	lsrs	r2, r3, #3
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	3208      	adds	r2, #8
 8001de8:	6939      	ldr	r1, [r7, #16]
 8001dea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001df4:	697b      	ldr	r3, [r7, #20]
 8001df6:	005b      	lsls	r3, r3, #1
 8001df8:	2203      	movs	r2, #3
 8001dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfe:	43db      	mvns	r3, r3
 8001e00:	693a      	ldr	r2, [r7, #16]
 8001e02:	4013      	ands	r3, r2
 8001e04:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	f003 0203 	and.w	r2, r3, #3
 8001e0e:	697b      	ldr	r3, [r7, #20]
 8001e10:	005b      	lsls	r3, r3, #1
 8001e12:	fa02 f303 	lsl.w	r3, r2, r3
 8001e16:	693a      	ldr	r2, [r7, #16]
 8001e18:	4313      	orrs	r3, r2
 8001e1a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	693a      	ldr	r2, [r7, #16]
 8001e20:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	f000 80a6 	beq.w	8001f7c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e30:	4b5b      	ldr	r3, [pc, #364]	; (8001fa0 <HAL_GPIO_Init+0x2e4>)
 8001e32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e34:	4a5a      	ldr	r2, [pc, #360]	; (8001fa0 <HAL_GPIO_Init+0x2e4>)
 8001e36:	f043 0301 	orr.w	r3, r3, #1
 8001e3a:	6613      	str	r3, [r2, #96]	; 0x60
 8001e3c:	4b58      	ldr	r3, [pc, #352]	; (8001fa0 <HAL_GPIO_Init+0x2e4>)
 8001e3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e40:	f003 0301 	and.w	r3, r3, #1
 8001e44:	60bb      	str	r3, [r7, #8]
 8001e46:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e48:	4a56      	ldr	r2, [pc, #344]	; (8001fa4 <HAL_GPIO_Init+0x2e8>)
 8001e4a:	697b      	ldr	r3, [r7, #20]
 8001e4c:	089b      	lsrs	r3, r3, #2
 8001e4e:	3302      	adds	r3, #2
 8001e50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e54:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001e56:	697b      	ldr	r3, [r7, #20]
 8001e58:	f003 0303 	and.w	r3, r3, #3
 8001e5c:	009b      	lsls	r3, r3, #2
 8001e5e:	220f      	movs	r2, #15
 8001e60:	fa02 f303 	lsl.w	r3, r2, r3
 8001e64:	43db      	mvns	r3, r3
 8001e66:	693a      	ldr	r2, [r7, #16]
 8001e68:	4013      	ands	r3, r2
 8001e6a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001e72:	d01f      	beq.n	8001eb4 <HAL_GPIO_Init+0x1f8>
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	4a4c      	ldr	r2, [pc, #304]	; (8001fa8 <HAL_GPIO_Init+0x2ec>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d019      	beq.n	8001eb0 <HAL_GPIO_Init+0x1f4>
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	4a4b      	ldr	r2, [pc, #300]	; (8001fac <HAL_GPIO_Init+0x2f0>)
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d013      	beq.n	8001eac <HAL_GPIO_Init+0x1f0>
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	4a4a      	ldr	r2, [pc, #296]	; (8001fb0 <HAL_GPIO_Init+0x2f4>)
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d00d      	beq.n	8001ea8 <HAL_GPIO_Init+0x1ec>
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	4a49      	ldr	r2, [pc, #292]	; (8001fb4 <HAL_GPIO_Init+0x2f8>)
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d007      	beq.n	8001ea4 <HAL_GPIO_Init+0x1e8>
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	4a48      	ldr	r2, [pc, #288]	; (8001fb8 <HAL_GPIO_Init+0x2fc>)
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d101      	bne.n	8001ea0 <HAL_GPIO_Init+0x1e4>
 8001e9c:	2305      	movs	r3, #5
 8001e9e:	e00a      	b.n	8001eb6 <HAL_GPIO_Init+0x1fa>
 8001ea0:	2306      	movs	r3, #6
 8001ea2:	e008      	b.n	8001eb6 <HAL_GPIO_Init+0x1fa>
 8001ea4:	2304      	movs	r3, #4
 8001ea6:	e006      	b.n	8001eb6 <HAL_GPIO_Init+0x1fa>
 8001ea8:	2303      	movs	r3, #3
 8001eaa:	e004      	b.n	8001eb6 <HAL_GPIO_Init+0x1fa>
 8001eac:	2302      	movs	r3, #2
 8001eae:	e002      	b.n	8001eb6 <HAL_GPIO_Init+0x1fa>
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	e000      	b.n	8001eb6 <HAL_GPIO_Init+0x1fa>
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	697a      	ldr	r2, [r7, #20]
 8001eb8:	f002 0203 	and.w	r2, r2, #3
 8001ebc:	0092      	lsls	r2, r2, #2
 8001ebe:	4093      	lsls	r3, r2
 8001ec0:	693a      	ldr	r2, [r7, #16]
 8001ec2:	4313      	orrs	r3, r2
 8001ec4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ec6:	4937      	ldr	r1, [pc, #220]	; (8001fa4 <HAL_GPIO_Init+0x2e8>)
 8001ec8:	697b      	ldr	r3, [r7, #20]
 8001eca:	089b      	lsrs	r3, r3, #2
 8001ecc:	3302      	adds	r3, #2
 8001ece:	693a      	ldr	r2, [r7, #16]
 8001ed0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001ed4:	4b39      	ldr	r3, [pc, #228]	; (8001fbc <HAL_GPIO_Init+0x300>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	43db      	mvns	r3, r3
 8001ede:	693a      	ldr	r2, [r7, #16]
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d003      	beq.n	8001ef8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001ef0:	693a      	ldr	r2, [r7, #16]
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001ef8:	4a30      	ldr	r2, [pc, #192]	; (8001fbc <HAL_GPIO_Init+0x300>)
 8001efa:	693b      	ldr	r3, [r7, #16]
 8001efc:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001efe:	4b2f      	ldr	r3, [pc, #188]	; (8001fbc <HAL_GPIO_Init+0x300>)
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	43db      	mvns	r3, r3
 8001f08:	693a      	ldr	r2, [r7, #16]
 8001f0a:	4013      	ands	r3, r2
 8001f0c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d003      	beq.n	8001f22 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001f1a:	693a      	ldr	r2, [r7, #16]
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	4313      	orrs	r3, r2
 8001f20:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001f22:	4a26      	ldr	r2, [pc, #152]	; (8001fbc <HAL_GPIO_Init+0x300>)
 8001f24:	693b      	ldr	r3, [r7, #16]
 8001f26:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001f28:	4b24      	ldr	r3, [pc, #144]	; (8001fbc <HAL_GPIO_Init+0x300>)
 8001f2a:	689b      	ldr	r3, [r3, #8]
 8001f2c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	43db      	mvns	r3, r3
 8001f32:	693a      	ldr	r2, [r7, #16]
 8001f34:	4013      	ands	r3, r2
 8001f36:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d003      	beq.n	8001f4c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001f44:	693a      	ldr	r2, [r7, #16]
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	4313      	orrs	r3, r2
 8001f4a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001f4c:	4a1b      	ldr	r2, [pc, #108]	; (8001fbc <HAL_GPIO_Init+0x300>)
 8001f4e:	693b      	ldr	r3, [r7, #16]
 8001f50:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001f52:	4b1a      	ldr	r3, [pc, #104]	; (8001fbc <HAL_GPIO_Init+0x300>)
 8001f54:	68db      	ldr	r3, [r3, #12]
 8001f56:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	43db      	mvns	r3, r3
 8001f5c:	693a      	ldr	r2, [r7, #16]
 8001f5e:	4013      	ands	r3, r2
 8001f60:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d003      	beq.n	8001f76 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001f6e:	693a      	ldr	r2, [r7, #16]
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	4313      	orrs	r3, r2
 8001f74:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001f76:	4a11      	ldr	r2, [pc, #68]	; (8001fbc <HAL_GPIO_Init+0x300>)
 8001f78:	693b      	ldr	r3, [r7, #16]
 8001f7a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001f7c:	697b      	ldr	r3, [r7, #20]
 8001f7e:	3301      	adds	r3, #1
 8001f80:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	681a      	ldr	r2, [r3, #0]
 8001f86:	697b      	ldr	r3, [r7, #20]
 8001f88:	fa22 f303 	lsr.w	r3, r2, r3
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	f47f ae9d 	bne.w	8001ccc <HAL_GPIO_Init+0x10>
  }
}
 8001f92:	bf00      	nop
 8001f94:	371c      	adds	r7, #28
 8001f96:	46bd      	mov	sp, r7
 8001f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9c:	4770      	bx	lr
 8001f9e:	bf00      	nop
 8001fa0:	40021000 	.word	0x40021000
 8001fa4:	40010000 	.word	0x40010000
 8001fa8:	48000400 	.word	0x48000400
 8001fac:	48000800 	.word	0x48000800
 8001fb0:	48000c00 	.word	0x48000c00
 8001fb4:	48001000 	.word	0x48001000
 8001fb8:	48001400 	.word	0x48001400
 8001fbc:	40010400 	.word	0x40010400

08001fc0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b083      	sub	sp, #12
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
 8001fc8:	460b      	mov	r3, r1
 8001fca:	807b      	strh	r3, [r7, #2]
 8001fcc:	4613      	mov	r3, r2
 8001fce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001fd0:	787b      	ldrb	r3, [r7, #1]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d003      	beq.n	8001fde <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001fd6:	887a      	ldrh	r2, [r7, #2]
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001fdc:	e002      	b.n	8001fe4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001fde:	887a      	ldrh	r2, [r7, #2]
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001fe4:	bf00      	nop
 8001fe6:	370c      	adds	r7, #12
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fee:	4770      	bx	lr

08001ff0 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b085      	sub	sp, #20
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
 8001ff8:	460b      	mov	r3, r1
 8001ffa:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	695b      	ldr	r3, [r3, #20]
 8002000:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002002:	887a      	ldrh	r2, [r7, #2]
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	4013      	ands	r3, r2
 8002008:	041a      	lsls	r2, r3, #16
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	43d9      	mvns	r1, r3
 800200e:	887b      	ldrh	r3, [r7, #2]
 8002010:	400b      	ands	r3, r1
 8002012:	431a      	orrs	r2, r3
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	619a      	str	r2, [r3, #24]
}
 8002018:	bf00      	nop
 800201a:	3714      	adds	r7, #20
 800201c:	46bd      	mov	sp, r7
 800201e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002022:	4770      	bx	lr

08002024 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002024:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002026:	b08b      	sub	sp, #44	; 0x2c
 8002028:	af06      	add	r7, sp, #24
 800202a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d101      	bne.n	8002036 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002032:	2301      	movs	r3, #1
 8002034:	e0d7      	b.n	80021e6 <HAL_PCD_Init+0x1c2>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 800203c:	b2db      	uxtb	r3, r3
 800203e:	2b00      	cmp	r3, #0
 8002040:	d106      	bne.n	8002050 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2200      	movs	r2, #0
 8002046:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800204a:	6878      	ldr	r0, [r7, #4]
 800204c:	f007 fa64 	bl	8009518 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2203      	movs	r2, #3
 8002054:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4618      	mov	r0, r3
 800205e:	f003 fbc0 	bl	80057e2 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002062:	2300      	movs	r3, #0
 8002064:	73fb      	strb	r3, [r7, #15]
 8002066:	e04c      	b.n	8002102 <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002068:	7bfb      	ldrb	r3, [r7, #15]
 800206a:	6879      	ldr	r1, [r7, #4]
 800206c:	1c5a      	adds	r2, r3, #1
 800206e:	4613      	mov	r3, r2
 8002070:	009b      	lsls	r3, r3, #2
 8002072:	4413      	add	r3, r2
 8002074:	00db      	lsls	r3, r3, #3
 8002076:	440b      	add	r3, r1
 8002078:	3301      	adds	r3, #1
 800207a:	2201      	movs	r2, #1
 800207c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800207e:	7bfb      	ldrb	r3, [r7, #15]
 8002080:	6879      	ldr	r1, [r7, #4]
 8002082:	1c5a      	adds	r2, r3, #1
 8002084:	4613      	mov	r3, r2
 8002086:	009b      	lsls	r3, r3, #2
 8002088:	4413      	add	r3, r2
 800208a:	00db      	lsls	r3, r3, #3
 800208c:	440b      	add	r3, r1
 800208e:	7bfa      	ldrb	r2, [r7, #15]
 8002090:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002092:	7bfa      	ldrb	r2, [r7, #15]
 8002094:	7bfb      	ldrb	r3, [r7, #15]
 8002096:	b298      	uxth	r0, r3
 8002098:	6879      	ldr	r1, [r7, #4]
 800209a:	4613      	mov	r3, r2
 800209c:	009b      	lsls	r3, r3, #2
 800209e:	4413      	add	r3, r2
 80020a0:	00db      	lsls	r3, r3, #3
 80020a2:	440b      	add	r3, r1
 80020a4:	3336      	adds	r3, #54	; 0x36
 80020a6:	4602      	mov	r2, r0
 80020a8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80020aa:	7bfb      	ldrb	r3, [r7, #15]
 80020ac:	6879      	ldr	r1, [r7, #4]
 80020ae:	1c5a      	adds	r2, r3, #1
 80020b0:	4613      	mov	r3, r2
 80020b2:	009b      	lsls	r3, r3, #2
 80020b4:	4413      	add	r3, r2
 80020b6:	00db      	lsls	r3, r3, #3
 80020b8:	440b      	add	r3, r1
 80020ba:	3303      	adds	r3, #3
 80020bc:	2200      	movs	r2, #0
 80020be:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80020c0:	7bfa      	ldrb	r2, [r7, #15]
 80020c2:	6879      	ldr	r1, [r7, #4]
 80020c4:	4613      	mov	r3, r2
 80020c6:	009b      	lsls	r3, r3, #2
 80020c8:	4413      	add	r3, r2
 80020ca:	00db      	lsls	r3, r3, #3
 80020cc:	440b      	add	r3, r1
 80020ce:	3338      	adds	r3, #56	; 0x38
 80020d0:	2200      	movs	r2, #0
 80020d2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80020d4:	7bfa      	ldrb	r2, [r7, #15]
 80020d6:	6879      	ldr	r1, [r7, #4]
 80020d8:	4613      	mov	r3, r2
 80020da:	009b      	lsls	r3, r3, #2
 80020dc:	4413      	add	r3, r2
 80020de:	00db      	lsls	r3, r3, #3
 80020e0:	440b      	add	r3, r1
 80020e2:	333c      	adds	r3, #60	; 0x3c
 80020e4:	2200      	movs	r2, #0
 80020e6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80020e8:	7bfa      	ldrb	r2, [r7, #15]
 80020ea:	6879      	ldr	r1, [r7, #4]
 80020ec:	4613      	mov	r3, r2
 80020ee:	009b      	lsls	r3, r3, #2
 80020f0:	4413      	add	r3, r2
 80020f2:	00db      	lsls	r3, r3, #3
 80020f4:	440b      	add	r3, r1
 80020f6:	3340      	adds	r3, #64	; 0x40
 80020f8:	2200      	movs	r2, #0
 80020fa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020fc:	7bfb      	ldrb	r3, [r7, #15]
 80020fe:	3301      	adds	r3, #1
 8002100:	73fb      	strb	r3, [r7, #15]
 8002102:	7bfa      	ldrb	r2, [r7, #15]
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	429a      	cmp	r2, r3
 800210a:	d3ad      	bcc.n	8002068 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800210c:	2300      	movs	r3, #0
 800210e:	73fb      	strb	r3, [r7, #15]
 8002110:	e044      	b.n	800219c <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002112:	7bfa      	ldrb	r2, [r7, #15]
 8002114:	6879      	ldr	r1, [r7, #4]
 8002116:	4613      	mov	r3, r2
 8002118:	009b      	lsls	r3, r3, #2
 800211a:	4413      	add	r3, r2
 800211c:	00db      	lsls	r3, r3, #3
 800211e:	440b      	add	r3, r1
 8002120:	f203 1369 	addw	r3, r3, #361	; 0x169
 8002124:	2200      	movs	r2, #0
 8002126:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002128:	7bfa      	ldrb	r2, [r7, #15]
 800212a:	6879      	ldr	r1, [r7, #4]
 800212c:	4613      	mov	r3, r2
 800212e:	009b      	lsls	r3, r3, #2
 8002130:	4413      	add	r3, r2
 8002132:	00db      	lsls	r3, r3, #3
 8002134:	440b      	add	r3, r1
 8002136:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800213a:	7bfa      	ldrb	r2, [r7, #15]
 800213c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800213e:	7bfa      	ldrb	r2, [r7, #15]
 8002140:	6879      	ldr	r1, [r7, #4]
 8002142:	4613      	mov	r3, r2
 8002144:	009b      	lsls	r3, r3, #2
 8002146:	4413      	add	r3, r2
 8002148:	00db      	lsls	r3, r3, #3
 800214a:	440b      	add	r3, r1
 800214c:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8002150:	2200      	movs	r2, #0
 8002152:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002154:	7bfa      	ldrb	r2, [r7, #15]
 8002156:	6879      	ldr	r1, [r7, #4]
 8002158:	4613      	mov	r3, r2
 800215a:	009b      	lsls	r3, r3, #2
 800215c:	4413      	add	r3, r2
 800215e:	00db      	lsls	r3, r3, #3
 8002160:	440b      	add	r3, r1
 8002162:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8002166:	2200      	movs	r2, #0
 8002168:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800216a:	7bfa      	ldrb	r2, [r7, #15]
 800216c:	6879      	ldr	r1, [r7, #4]
 800216e:	4613      	mov	r3, r2
 8002170:	009b      	lsls	r3, r3, #2
 8002172:	4413      	add	r3, r2
 8002174:	00db      	lsls	r3, r3, #3
 8002176:	440b      	add	r3, r1
 8002178:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800217c:	2200      	movs	r2, #0
 800217e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002180:	7bfa      	ldrb	r2, [r7, #15]
 8002182:	6879      	ldr	r1, [r7, #4]
 8002184:	4613      	mov	r3, r2
 8002186:	009b      	lsls	r3, r3, #2
 8002188:	4413      	add	r3, r2
 800218a:	00db      	lsls	r3, r3, #3
 800218c:	440b      	add	r3, r1
 800218e:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002192:	2200      	movs	r2, #0
 8002194:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002196:	7bfb      	ldrb	r3, [r7, #15]
 8002198:	3301      	adds	r3, #1
 800219a:	73fb      	strb	r3, [r7, #15]
 800219c:	7bfa      	ldrb	r2, [r7, #15]
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	429a      	cmp	r2, r3
 80021a4:	d3b5      	bcc.n	8002112 <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	603b      	str	r3, [r7, #0]
 80021ac:	687e      	ldr	r6, [r7, #4]
 80021ae:	466d      	mov	r5, sp
 80021b0:	f106 0410 	add.w	r4, r6, #16
 80021b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021b8:	6823      	ldr	r3, [r4, #0]
 80021ba:	602b      	str	r3, [r5, #0]
 80021bc:	1d33      	adds	r3, r6, #4
 80021be:	cb0e      	ldmia	r3, {r1, r2, r3}
 80021c0:	6838      	ldr	r0, [r7, #0]
 80021c2:	f003 fb29 	bl	8005818 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2200      	movs	r2, #0
 80021ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2201      	movs	r2, #1
 80021d2:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	69db      	ldr	r3, [r3, #28]
 80021da:	2b01      	cmp	r3, #1
 80021dc:	d102      	bne.n	80021e4 <HAL_PCD_Init+0x1c0>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80021de:	6878      	ldr	r0, [r7, #4]
 80021e0:	f001 fa5e 	bl	80036a0 <HAL_PCDEx_ActivateLPM>
  }
  
  return HAL_OK;
 80021e4:	2300      	movs	r3, #0
}
 80021e6:	4618      	mov	r0, r3
 80021e8:	3714      	adds	r7, #20
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bdf0      	pop	{r4, r5, r6, r7, pc}

080021ee <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80021ee:	b580      	push	{r7, lr}
 80021f0:	b082      	sub	sp, #8
 80021f2:	af00      	add	r7, sp, #0
 80021f4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80021fc:	2b01      	cmp	r3, #1
 80021fe:	d101      	bne.n	8002204 <HAL_PCD_Start+0x16>
 8002200:	2302      	movs	r3, #2
 8002202:	e012      	b.n	800222a <HAL_PCD_Start+0x3c>
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2201      	movs	r2, #1
 8002208:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4618      	mov	r0, r3
 8002212:	f003 facf 	bl	80057b4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4618      	mov	r0, r3
 800221c:	f005 fabb 	bl	8007796 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2200      	movs	r2, #0
 8002224:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002228:	2300      	movs	r3, #0
}
 800222a:	4618      	mov	r0, r3
 800222c:	3708      	adds	r7, #8
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}

08002232 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002232:	b580      	push	{r7, lr}
 8002234:	b082      	sub	sp, #8
 8002236:	af00      	add	r7, sp, #0
 8002238:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4618      	mov	r0, r3
 8002240:	f005 fac0 	bl	80077c4 <USB_ReadInterrupts>
 8002244:	4603      	mov	r3, r0
 8002246:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800224a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800224e:	d102      	bne.n	8002256 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002250:	6878      	ldr	r0, [r7, #4]
 8002252:	f000 fb5b 	bl	800290c <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4618      	mov	r0, r3
 800225c:	f005 fab2 	bl	80077c4 <USB_ReadInterrupts>
 8002260:	4603      	mov	r3, r0
 8002262:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002266:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800226a:	d112      	bne.n	8002292 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002274:	b29a      	uxth	r2, r3
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800227e:	b292      	uxth	r2, r2
 8002280:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002284:	6878      	ldr	r0, [r7, #4]
 8002286:	f007 f9c2 	bl	800960e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800228a:	2100      	movs	r1, #0
 800228c:	6878      	ldr	r0, [r7, #4]
 800228e:	f000 f91e 	bl	80024ce <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4618      	mov	r0, r3
 8002298:	f005 fa94 	bl	80077c4 <USB_ReadInterrupts>
 800229c:	4603      	mov	r3, r0
 800229e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022a2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80022a6:	d10b      	bne.n	80022c0 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80022b0:	b29a      	uxth	r2, r3
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80022ba:	b292      	uxth	r2, r2
 80022bc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4618      	mov	r0, r3
 80022c6:	f005 fa7d 	bl	80077c4 <USB_ReadInterrupts>
 80022ca:	4603      	mov	r3, r0
 80022cc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80022d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80022d4:	d10b      	bne.n	80022ee <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80022de:	b29a      	uxth	r2, r3
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80022e8:	b292      	uxth	r2, r2
 80022ea:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4618      	mov	r0, r3
 80022f4:	f005 fa66 	bl	80077c4 <USB_ReadInterrupts>
 80022f8:	4603      	mov	r3, r0
 80022fa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80022fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002302:	d133      	bne.n	800236c <HAL_PCD_IRQHandler+0x13a>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800230c:	b29a      	uxth	r2, r3
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f022 0204 	bic.w	r2, r2, #4
 8002316:	b292      	uxth	r2, r2
 8002318:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002324:	b29a      	uxth	r2, r3
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f022 0208 	bic.w	r2, r2, #8
 800232e:	b292      	uxth	r2, r2
 8002330:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 800233a:	2b01      	cmp	r3, #1
 800233c:	d107      	bne.n	800234e <HAL_PCD_IRQHandler+0x11c>
    {
      hpcd->LPM_State = LPM_L0;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2200      	movs	r2, #0
 8002342:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002346:	2100      	movs	r1, #0
 8002348:	6878      	ldr	r0, [r7, #4]
 800234a:	f007 fb55 	bl	80099f8 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800234e:	6878      	ldr	r0, [r7, #4]
 8002350:	f007 f996 	bl	8009680 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800235c:	b29a      	uxth	r2, r3
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002366:	b292      	uxth	r2, r2
 8002368:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4618      	mov	r0, r3
 8002372:	f005 fa27 	bl	80077c4 <USB_ReadInterrupts>
 8002376:	4603      	mov	r3, r0
 8002378:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800237c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002380:	d126      	bne.n	80023d0 <HAL_PCD_IRQHandler+0x19e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800238a:	b29a      	uxth	r2, r3
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f042 0208 	orr.w	r2, r2, #8
 8002394:	b292      	uxth	r2, r2
 8002396:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80023a2:	b29a      	uxth	r2, r3
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80023ac:	b292      	uxth	r2, r2
 80023ae:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80023ba:	b29a      	uxth	r2, r3
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f042 0204 	orr.w	r2, r2, #4
 80023c4:	b292      	uxth	r2, r2
 80023c6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80023ca:	6878      	ldr	r0, [r7, #4]
 80023cc:	f007 f93e 	bl	800964c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  /* Handle LPM Interrupt */
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4618      	mov	r0, r3
 80023d6:	f005 f9f5 	bl	80077c4 <USB_ReadInterrupts>
 80023da:	4603      	mov	r3, r0
 80023dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023e0:	2b80      	cmp	r3, #128	; 0x80
 80023e2:	d13f      	bne.n	8002464 <HAL_PCD_IRQHandler+0x232>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80023ec:	b29a      	uxth	r2, r3
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80023f6:	b292      	uxth	r2, r2
 80023f8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8002402:	2b00      	cmp	r3, #0
 8002404:	d12b      	bne.n	800245e <HAL_PCD_IRQHandler+0x22c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800240e:	b29a      	uxth	r2, r3
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f042 0204 	orr.w	r2, r2, #4
 8002418:	b292      	uxth	r2, r2
 800241a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002426:	b29a      	uxth	r2, r3
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f042 0208 	orr.w	r2, r2, #8
 8002430:	b292      	uxth	r2, r2
 8002432:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2201      	movs	r2, #1
 800243a:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002446:	b29b      	uxth	r3, r3
 8002448:	089b      	lsrs	r3, r3, #2
 800244a:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002454:	2101      	movs	r1, #1
 8002456:	6878      	ldr	r0, [r7, #4]
 8002458:	f007 face 	bl	80099f8 <HAL_PCDEx_LPM_Callback>
 800245c:	e002      	b.n	8002464 <HAL_PCD_IRQHandler+0x232>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 800245e:	6878      	ldr	r0, [r7, #4]
 8002460:	f007 f8f4 	bl	800964c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4618      	mov	r0, r3
 800246a:	f005 f9ab 	bl	80077c4 <USB_ReadInterrupts>
 800246e:	4603      	mov	r3, r0
 8002470:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002474:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002478:	d10e      	bne.n	8002498 <HAL_PCD_IRQHandler+0x266>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002482:	b29a      	uxth	r2, r3
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800248c:	b292      	uxth	r2, r2
 800248e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002492:	6878      	ldr	r0, [r7, #4]
 8002494:	f007 f8ad 	bl	80095f2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4618      	mov	r0, r3
 800249e:	f005 f991 	bl	80077c4 <USB_ReadInterrupts>
 80024a2:	4603      	mov	r3, r0
 80024a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80024ac:	d10b      	bne.n	80024c6 <HAL_PCD_IRQHandler+0x294>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80024b6:	b29a      	uxth	r2, r3
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80024c0:	b292      	uxth	r2, r2
 80024c2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 80024c6:	bf00      	nop
 80024c8:	3708      	adds	r7, #8
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}

080024ce <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80024ce:	b580      	push	{r7, lr}
 80024d0:	b082      	sub	sp, #8
 80024d2:	af00      	add	r7, sp, #0
 80024d4:	6078      	str	r0, [r7, #4]
 80024d6:	460b      	mov	r3, r1
 80024d8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80024e0:	2b01      	cmp	r3, #1
 80024e2:	d101      	bne.n	80024e8 <HAL_PCD_SetAddress+0x1a>
 80024e4:	2302      	movs	r3, #2
 80024e6:	e013      	b.n	8002510 <HAL_PCD_SetAddress+0x42>
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2201      	movs	r2, #1
 80024ec:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	78fa      	ldrb	r2, [r7, #3]
 80024f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	78fa      	ldrb	r2, [r7, #3]
 80024fe:	4611      	mov	r1, r2
 8002500:	4618      	mov	r0, r3
 8002502:	f005 f934 	bl	800776e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2200      	movs	r2, #0
 800250a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800250e:	2300      	movs	r3, #0
}
 8002510:	4618      	mov	r0, r3
 8002512:	3708      	adds	r7, #8
 8002514:	46bd      	mov	sp, r7
 8002516:	bd80      	pop	{r7, pc}

08002518 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b084      	sub	sp, #16
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
 8002520:	4608      	mov	r0, r1
 8002522:	4611      	mov	r1, r2
 8002524:	461a      	mov	r2, r3
 8002526:	4603      	mov	r3, r0
 8002528:	70fb      	strb	r3, [r7, #3]
 800252a:	460b      	mov	r3, r1
 800252c:	803b      	strh	r3, [r7, #0]
 800252e:	4613      	mov	r3, r2
 8002530:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002532:	2300      	movs	r3, #0
 8002534:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002536:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800253a:	2b00      	cmp	r3, #0
 800253c:	da0e      	bge.n	800255c <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800253e:	78fb      	ldrb	r3, [r7, #3]
 8002540:	f003 0307 	and.w	r3, r3, #7
 8002544:	1c5a      	adds	r2, r3, #1
 8002546:	4613      	mov	r3, r2
 8002548:	009b      	lsls	r3, r3, #2
 800254a:	4413      	add	r3, r2
 800254c:	00db      	lsls	r3, r3, #3
 800254e:	687a      	ldr	r2, [r7, #4]
 8002550:	4413      	add	r3, r2
 8002552:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	2201      	movs	r2, #1
 8002558:	705a      	strb	r2, [r3, #1]
 800255a:	e00e      	b.n	800257a <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800255c:	78fb      	ldrb	r3, [r7, #3]
 800255e:	f003 0207 	and.w	r2, r3, #7
 8002562:	4613      	mov	r3, r2
 8002564:	009b      	lsls	r3, r3, #2
 8002566:	4413      	add	r3, r2
 8002568:	00db      	lsls	r3, r3, #3
 800256a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800256e:	687a      	ldr	r2, [r7, #4]
 8002570:	4413      	add	r3, r2
 8002572:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	2200      	movs	r2, #0
 8002578:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800257a:	78fb      	ldrb	r3, [r7, #3]
 800257c:	f003 0307 	and.w	r3, r3, #7
 8002580:	b2da      	uxtb	r2, r3
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002586:	883a      	ldrh	r2, [r7, #0]
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	78ba      	ldrb	r2, [r7, #2]
 8002590:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	785b      	ldrb	r3, [r3, #1]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d004      	beq.n	80025a4 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	781b      	ldrb	r3, [r3, #0]
 800259e:	b29a      	uxth	r2, r3
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80025a4:	78bb      	ldrb	r3, [r7, #2]
 80025a6:	2b02      	cmp	r3, #2
 80025a8:	d102      	bne.n	80025b0 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	2200      	movs	r2, #0
 80025ae:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80025b6:	2b01      	cmp	r3, #1
 80025b8:	d101      	bne.n	80025be <HAL_PCD_EP_Open+0xa6>
 80025ba:	2302      	movs	r3, #2
 80025bc:	e00e      	b.n	80025dc <HAL_PCD_EP_Open+0xc4>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2201      	movs	r2, #1
 80025c2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	68f9      	ldr	r1, [r7, #12]
 80025cc:	4618      	mov	r0, r3
 80025ce:	f003 f945 	bl	800585c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2200      	movs	r2, #0
 80025d6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 80025da:	7afb      	ldrb	r3, [r7, #11]
}
 80025dc:	4618      	mov	r0, r3
 80025de:	3710      	adds	r7, #16
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bd80      	pop	{r7, pc}

080025e4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b084      	sub	sp, #16
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
 80025ec:	460b      	mov	r3, r1
 80025ee:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80025f0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	da0e      	bge.n	8002616 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80025f8:	78fb      	ldrb	r3, [r7, #3]
 80025fa:	f003 0307 	and.w	r3, r3, #7
 80025fe:	1c5a      	adds	r2, r3, #1
 8002600:	4613      	mov	r3, r2
 8002602:	009b      	lsls	r3, r3, #2
 8002604:	4413      	add	r3, r2
 8002606:	00db      	lsls	r3, r3, #3
 8002608:	687a      	ldr	r2, [r7, #4]
 800260a:	4413      	add	r3, r2
 800260c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	2201      	movs	r2, #1
 8002612:	705a      	strb	r2, [r3, #1]
 8002614:	e00e      	b.n	8002634 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002616:	78fb      	ldrb	r3, [r7, #3]
 8002618:	f003 0207 	and.w	r2, r3, #7
 800261c:	4613      	mov	r3, r2
 800261e:	009b      	lsls	r3, r3, #2
 8002620:	4413      	add	r3, r2
 8002622:	00db      	lsls	r3, r3, #3
 8002624:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002628:	687a      	ldr	r2, [r7, #4]
 800262a:	4413      	add	r3, r2
 800262c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	2200      	movs	r2, #0
 8002632:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002634:	78fb      	ldrb	r3, [r7, #3]
 8002636:	f003 0307 	and.w	r3, r3, #7
 800263a:	b2da      	uxtb	r2, r3
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002646:	2b01      	cmp	r3, #1
 8002648:	d101      	bne.n	800264e <HAL_PCD_EP_Close+0x6a>
 800264a:	2302      	movs	r3, #2
 800264c:	e00e      	b.n	800266c <HAL_PCD_EP_Close+0x88>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2201      	movs	r2, #1
 8002652:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	68f9      	ldr	r1, [r7, #12]
 800265c:	4618      	mov	r0, r3
 800265e:	f003 fc6b 	bl	8005f38 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2200      	movs	r2, #0
 8002666:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 800266a:	2300      	movs	r3, #0
}
 800266c:	4618      	mov	r0, r3
 800266e:	3710      	adds	r7, #16
 8002670:	46bd      	mov	sp, r7
 8002672:	bd80      	pop	{r7, pc}

08002674 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b086      	sub	sp, #24
 8002678:	af00      	add	r7, sp, #0
 800267a:	60f8      	str	r0, [r7, #12]
 800267c:	607a      	str	r2, [r7, #4]
 800267e:	603b      	str	r3, [r7, #0]
 8002680:	460b      	mov	r3, r1
 8002682:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002684:	7afb      	ldrb	r3, [r7, #11]
 8002686:	f003 0207 	and.w	r2, r3, #7
 800268a:	4613      	mov	r3, r2
 800268c:	009b      	lsls	r3, r3, #2
 800268e:	4413      	add	r3, r2
 8002690:	00db      	lsls	r3, r3, #3
 8002692:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002696:	68fa      	ldr	r2, [r7, #12]
 8002698:	4413      	add	r3, r2
 800269a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800269c:	697b      	ldr	r3, [r7, #20]
 800269e:	687a      	ldr	r2, [r7, #4]
 80026a0:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80026a2:	697b      	ldr	r3, [r7, #20]
 80026a4:	683a      	ldr	r2, [r7, #0]
 80026a6:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80026a8:	697b      	ldr	r3, [r7, #20]
 80026aa:	2200      	movs	r2, #0
 80026ac:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80026ae:	697b      	ldr	r3, [r7, #20]
 80026b0:	2200      	movs	r2, #0
 80026b2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80026b4:	7afb      	ldrb	r3, [r7, #11]
 80026b6:	f003 0307 	and.w	r3, r3, #7
 80026ba:	b2da      	uxtb	r2, r3
 80026bc:	697b      	ldr	r3, [r7, #20]
 80026be:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80026c0:	7afb      	ldrb	r3, [r7, #11]
 80026c2:	f003 0307 	and.w	r3, r3, #7
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d106      	bne.n	80026d8 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	6979      	ldr	r1, [r7, #20]
 80026d0:	4618      	mov	r0, r3
 80026d2:	f003 fe1e 	bl	8006312 <USB_EPStartXfer>
 80026d6:	e005      	b.n	80026e4 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	6979      	ldr	r1, [r7, #20]
 80026de:	4618      	mov	r0, r3
 80026e0:	f003 fe17 	bl	8006312 <USB_EPStartXfer>
  }

  return HAL_OK;
 80026e4:	2300      	movs	r3, #0
}
 80026e6:	4618      	mov	r0, r3
 80026e8:	3718      	adds	r7, #24
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}

080026ee <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80026ee:	b480      	push	{r7}
 80026f0:	b083      	sub	sp, #12
 80026f2:	af00      	add	r7, sp, #0
 80026f4:	6078      	str	r0, [r7, #4]
 80026f6:	460b      	mov	r3, r1
 80026f8:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80026fa:	78fb      	ldrb	r3, [r7, #3]
 80026fc:	f003 0207 	and.w	r2, r3, #7
 8002700:	6879      	ldr	r1, [r7, #4]
 8002702:	4613      	mov	r3, r2
 8002704:	009b      	lsls	r3, r3, #2
 8002706:	4413      	add	r3, r2
 8002708:	00db      	lsls	r3, r3, #3
 800270a:	440b      	add	r3, r1
 800270c:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8002710:	681b      	ldr	r3, [r3, #0]
}
 8002712:	4618      	mov	r0, r3
 8002714:	370c      	adds	r7, #12
 8002716:	46bd      	mov	sp, r7
 8002718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271c:	4770      	bx	lr

0800271e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800271e:	b580      	push	{r7, lr}
 8002720:	b086      	sub	sp, #24
 8002722:	af00      	add	r7, sp, #0
 8002724:	60f8      	str	r0, [r7, #12]
 8002726:	607a      	str	r2, [r7, #4]
 8002728:	603b      	str	r3, [r7, #0]
 800272a:	460b      	mov	r3, r1
 800272c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800272e:	7afb      	ldrb	r3, [r7, #11]
 8002730:	f003 0307 	and.w	r3, r3, #7
 8002734:	1c5a      	adds	r2, r3, #1
 8002736:	4613      	mov	r3, r2
 8002738:	009b      	lsls	r3, r3, #2
 800273a:	4413      	add	r3, r2
 800273c:	00db      	lsls	r3, r3, #3
 800273e:	68fa      	ldr	r2, [r7, #12]
 8002740:	4413      	add	r3, r2
 8002742:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002744:	697b      	ldr	r3, [r7, #20]
 8002746:	687a      	ldr	r2, [r7, #4]
 8002748:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800274a:	697b      	ldr	r3, [r7, #20]
 800274c:	683a      	ldr	r2, [r7, #0]
 800274e:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	2201      	movs	r2, #1
 8002754:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8002758:	697b      	ldr	r3, [r7, #20]
 800275a:	683a      	ldr	r2, [r7, #0]
 800275c:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 800275e:	697b      	ldr	r3, [r7, #20]
 8002760:	2200      	movs	r2, #0
 8002762:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002764:	697b      	ldr	r3, [r7, #20]
 8002766:	2201      	movs	r2, #1
 8002768:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800276a:	7afb      	ldrb	r3, [r7, #11]
 800276c:	f003 0307 	and.w	r3, r3, #7
 8002770:	b2da      	uxtb	r2, r3
 8002772:	697b      	ldr	r3, [r7, #20]
 8002774:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002776:	7afb      	ldrb	r3, [r7, #11]
 8002778:	f003 0307 	and.w	r3, r3, #7
 800277c:	2b00      	cmp	r3, #0
 800277e:	d106      	bne.n	800278e <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	6979      	ldr	r1, [r7, #20]
 8002786:	4618      	mov	r0, r3
 8002788:	f003 fdc3 	bl	8006312 <USB_EPStartXfer>
 800278c:	e005      	b.n	800279a <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	6979      	ldr	r1, [r7, #20]
 8002794:	4618      	mov	r0, r3
 8002796:	f003 fdbc 	bl	8006312 <USB_EPStartXfer>
  }

  return HAL_OK;
 800279a:	2300      	movs	r3, #0
}
 800279c:	4618      	mov	r0, r3
 800279e:	3718      	adds	r7, #24
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bd80      	pop	{r7, pc}

080027a4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b084      	sub	sp, #16
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
 80027ac:	460b      	mov	r3, r1
 80027ae:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80027b0:	78fb      	ldrb	r3, [r7, #3]
 80027b2:	f003 0207 	and.w	r2, r3, #7
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	429a      	cmp	r2, r3
 80027bc:	d901      	bls.n	80027c2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80027be:	2301      	movs	r3, #1
 80027c0:	e04c      	b.n	800285c <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80027c2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	da0e      	bge.n	80027e8 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80027ca:	78fb      	ldrb	r3, [r7, #3]
 80027cc:	f003 0307 	and.w	r3, r3, #7
 80027d0:	1c5a      	adds	r2, r3, #1
 80027d2:	4613      	mov	r3, r2
 80027d4:	009b      	lsls	r3, r3, #2
 80027d6:	4413      	add	r3, r2
 80027d8:	00db      	lsls	r3, r3, #3
 80027da:	687a      	ldr	r2, [r7, #4]
 80027dc:	4413      	add	r3, r2
 80027de:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	2201      	movs	r2, #1
 80027e4:	705a      	strb	r2, [r3, #1]
 80027e6:	e00c      	b.n	8002802 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80027e8:	78fa      	ldrb	r2, [r7, #3]
 80027ea:	4613      	mov	r3, r2
 80027ec:	009b      	lsls	r3, r3, #2
 80027ee:	4413      	add	r3, r2
 80027f0:	00db      	lsls	r3, r3, #3
 80027f2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80027f6:	687a      	ldr	r2, [r7, #4]
 80027f8:	4413      	add	r3, r2
 80027fa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	2200      	movs	r2, #0
 8002800:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	2201      	movs	r2, #1
 8002806:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002808:	78fb      	ldrb	r3, [r7, #3]
 800280a:	f003 0307 	and.w	r3, r3, #7
 800280e:	b2da      	uxtb	r2, r3
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800281a:	2b01      	cmp	r3, #1
 800281c:	d101      	bne.n	8002822 <HAL_PCD_EP_SetStall+0x7e>
 800281e:	2302      	movs	r3, #2
 8002820:	e01c      	b.n	800285c <HAL_PCD_EP_SetStall+0xb8>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2201      	movs	r2, #1
 8002826:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	68f9      	ldr	r1, [r7, #12]
 8002830:	4618      	mov	r0, r3
 8002832:	f004 fe9d 	bl	8007570 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002836:	78fb      	ldrb	r3, [r7, #3]
 8002838:	f003 0307 	and.w	r3, r3, #7
 800283c:	2b00      	cmp	r3, #0
 800283e:	d108      	bne.n	8002852 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681a      	ldr	r2, [r3, #0]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800284a:	4619      	mov	r1, r3
 800284c:	4610      	mov	r0, r2
 800284e:	f004 ffc9 	bl	80077e4 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2200      	movs	r2, #0
 8002856:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800285a:	2300      	movs	r3, #0
}
 800285c:	4618      	mov	r0, r3
 800285e:	3710      	adds	r7, #16
 8002860:	46bd      	mov	sp, r7
 8002862:	bd80      	pop	{r7, pc}

08002864 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b084      	sub	sp, #16
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
 800286c:	460b      	mov	r3, r1
 800286e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002870:	78fb      	ldrb	r3, [r7, #3]
 8002872:	f003 020f 	and.w	r2, r3, #15
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	429a      	cmp	r2, r3
 800287c:	d901      	bls.n	8002882 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800287e:	2301      	movs	r3, #1
 8002880:	e040      	b.n	8002904 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002882:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002886:	2b00      	cmp	r3, #0
 8002888:	da0e      	bge.n	80028a8 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800288a:	78fb      	ldrb	r3, [r7, #3]
 800288c:	f003 0307 	and.w	r3, r3, #7
 8002890:	1c5a      	adds	r2, r3, #1
 8002892:	4613      	mov	r3, r2
 8002894:	009b      	lsls	r3, r3, #2
 8002896:	4413      	add	r3, r2
 8002898:	00db      	lsls	r3, r3, #3
 800289a:	687a      	ldr	r2, [r7, #4]
 800289c:	4413      	add	r3, r2
 800289e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	2201      	movs	r2, #1
 80028a4:	705a      	strb	r2, [r3, #1]
 80028a6:	e00e      	b.n	80028c6 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80028a8:	78fb      	ldrb	r3, [r7, #3]
 80028aa:	f003 0207 	and.w	r2, r3, #7
 80028ae:	4613      	mov	r3, r2
 80028b0:	009b      	lsls	r3, r3, #2
 80028b2:	4413      	add	r3, r2
 80028b4:	00db      	lsls	r3, r3, #3
 80028b6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80028ba:	687a      	ldr	r2, [r7, #4]
 80028bc:	4413      	add	r3, r2
 80028be:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	2200      	movs	r2, #0
 80028c4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	2200      	movs	r2, #0
 80028ca:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80028cc:	78fb      	ldrb	r3, [r7, #3]
 80028ce:	f003 0307 	and.w	r3, r3, #7
 80028d2:	b2da      	uxtb	r2, r3
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80028de:	2b01      	cmp	r3, #1
 80028e0:	d101      	bne.n	80028e6 <HAL_PCD_EP_ClrStall+0x82>
 80028e2:	2302      	movs	r3, #2
 80028e4:	e00e      	b.n	8002904 <HAL_PCD_EP_ClrStall+0xa0>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2201      	movs	r2, #1
 80028ea:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	68f9      	ldr	r1, [r7, #12]
 80028f4:	4618      	mov	r0, r3
 80028f6:	f004 fe8c 	bl	8007612 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2200      	movs	r2, #0
 80028fe:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002902:	2300      	movs	r3, #0
}
 8002904:	4618      	mov	r0, r3
 8002906:	3710      	adds	r7, #16
 8002908:	46bd      	mov	sp, r7
 800290a:	bd80      	pop	{r7, pc}

0800290c <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b08e      	sub	sp, #56	; 0x38
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002914:	e2d1      	b.n	8002eba <PCD_EP_ISR_Handler+0x5ae>
  {
    wIstr = hpcd->Instance->ISTR;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800291e:	85fb      	strh	r3, [r7, #46]	; 0x2e
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002920:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002922:	b2db      	uxtb	r3, r3
 8002924:	f003 030f 	and.w	r3, r3, #15
 8002928:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 800292c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002930:	2b00      	cmp	r3, #0
 8002932:	f040 8152 	bne.w	8002bda <PCD_EP_ISR_Handler+0x2ce>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002936:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002938:	f003 0310 	and.w	r3, r3, #16
 800293c:	2b00      	cmp	r3, #0
 800293e:	d150      	bne.n	80029e2 <PCD_EP_ISR_Handler+0xd6>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	881b      	ldrh	r3, [r3, #0]
 8002946:	b29b      	uxth	r3, r3
 8002948:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800294c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002950:	81fb      	strh	r3, [r7, #14]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681a      	ldr	r2, [r3, #0]
 8002956:	89fb      	ldrh	r3, [r7, #14]
 8002958:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800295c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002960:	b29b      	uxth	r3, r3
 8002962:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	3328      	adds	r3, #40	; 0x28
 8002968:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002972:	b29b      	uxth	r3, r3
 8002974:	461a      	mov	r2, r3
 8002976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002978:	781b      	ldrb	r3, [r3, #0]
 800297a:	00db      	lsls	r3, r3, #3
 800297c:	4413      	add	r3, r2
 800297e:	687a      	ldr	r2, [r7, #4]
 8002980:	6812      	ldr	r2, [r2, #0]
 8002982:	4413      	add	r3, r2
 8002984:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002988:	881b      	ldrh	r3, [r3, #0]
 800298a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800298e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002990:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002994:	695a      	ldr	r2, [r3, #20]
 8002996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002998:	69db      	ldr	r3, [r3, #28]
 800299a:	441a      	add	r2, r3
 800299c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800299e:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80029a0:	2100      	movs	r1, #0
 80029a2:	6878      	ldr	r0, [r7, #4]
 80029a4:	f006 fe0b 	bl	80095be <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80029ae:	b2db      	uxtb	r3, r3
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	f000 8282 	beq.w	8002eba <PCD_EP_ISR_Handler+0x5ae>
 80029b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b8:	699b      	ldr	r3, [r3, #24]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	f040 827d 	bne.w	8002eba <PCD_EP_ISR_Handler+0x5ae>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80029c6:	b2db      	uxtb	r3, r3
 80029c8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80029cc:	b2da      	uxtb	r2, r3
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	b292      	uxth	r2, r2
 80029d4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2200      	movs	r2, #0
 80029dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80029e0:	e26b      	b.n	8002eba <PCD_EP_ISR_Handler+0x5ae>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80029e8:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	881b      	ldrh	r3, [r3, #0]
 80029f0:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80029f2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80029f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d032      	beq.n	8002a62 <PCD_EP_ISR_Handler+0x156>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a04:	b29b      	uxth	r3, r3
 8002a06:	461a      	mov	r2, r3
 8002a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a0a:	781b      	ldrb	r3, [r3, #0]
 8002a0c:	00db      	lsls	r3, r3, #3
 8002a0e:	4413      	add	r3, r2
 8002a10:	687a      	ldr	r2, [r7, #4]
 8002a12:	6812      	ldr	r2, [r2, #0]
 8002a14:	4413      	add	r3, r2
 8002a16:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002a1a:	881b      	ldrh	r3, [r3, #0]
 8002a1c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a22:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6818      	ldr	r0, [r3, #0]
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8002a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a30:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a34:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002a36:	b29b      	uxth	r3, r3
 8002a38:	f004 ff21 	bl	800787e <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	881b      	ldrh	r3, [r3, #0]
 8002a42:	b29a      	uxth	r2, r3
 8002a44:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002a48:	4013      	ands	r3, r2
 8002a4a:	823b      	strh	r3, [r7, #16]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	8a3a      	ldrh	r2, [r7, #16]
 8002a52:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002a56:	b292      	uxth	r2, r2
 8002a58:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002a5a:	6878      	ldr	r0, [r7, #4]
 8002a5c:	f006 fd82 	bl	8009564 <HAL_PCD_SetupStageCallback>
 8002a60:	e22b      	b.n	8002eba <PCD_EP_ISR_Handler+0x5ae>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002a62:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	f280 8227 	bge.w	8002eba <PCD_EP_ISR_Handler+0x5ae>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	881b      	ldrh	r3, [r3, #0]
 8002a72:	b29a      	uxth	r2, r3
 8002a74:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002a78:	4013      	ands	r3, r2
 8002a7a:	83bb      	strh	r3, [r7, #28]
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	8bba      	ldrh	r2, [r7, #28]
 8002a82:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002a86:	b292      	uxth	r2, r2
 8002a88:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a92:	b29b      	uxth	r3, r3
 8002a94:	461a      	mov	r2, r3
 8002a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a98:	781b      	ldrb	r3, [r3, #0]
 8002a9a:	00db      	lsls	r3, r3, #3
 8002a9c:	4413      	add	r3, r2
 8002a9e:	687a      	ldr	r2, [r7, #4]
 8002aa0:	6812      	ldr	r2, [r2, #0]
 8002aa2:	4413      	add	r3, r2
 8002aa4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002aa8:	881b      	ldrh	r3, [r3, #0]
 8002aaa:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ab0:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ab4:	69db      	ldr	r3, [r3, #28]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d019      	beq.n	8002aee <PCD_EP_ISR_Handler+0x1e2>
 8002aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002abc:	695b      	ldr	r3, [r3, #20]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d015      	beq.n	8002aee <PCD_EP_ISR_Handler+0x1e2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6818      	ldr	r0, [r3, #0]
 8002ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac8:	6959      	ldr	r1, [r3, #20]
 8002aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002acc:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad0:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002ad2:	b29b      	uxth	r3, r3
 8002ad4:	f004 fed3 	bl	800787e <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ada:	695a      	ldr	r2, [r3, #20]
 8002adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ade:	69db      	ldr	r3, [r3, #28]
 8002ae0:	441a      	add	r2, r3
 8002ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae4:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002ae6:	2100      	movs	r1, #0
 8002ae8:	6878      	ldr	r0, [r7, #4]
 8002aea:	f006 fd4d 	bl	8009588 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	61bb      	str	r3, [r7, #24]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002afc:	b29b      	uxth	r3, r3
 8002afe:	461a      	mov	r2, r3
 8002b00:	69bb      	ldr	r3, [r7, #24]
 8002b02:	4413      	add	r3, r2
 8002b04:	61bb      	str	r3, [r7, #24]
 8002b06:	69bb      	ldr	r3, [r7, #24]
 8002b08:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002b0c:	617b      	str	r3, [r7, #20]
 8002b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b10:	691b      	ldr	r3, [r3, #16]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d112      	bne.n	8002b3c <PCD_EP_ISR_Handler+0x230>
 8002b16:	697b      	ldr	r3, [r7, #20]
 8002b18:	881b      	ldrh	r3, [r3, #0]
 8002b1a:	b29b      	uxth	r3, r3
 8002b1c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002b20:	b29a      	uxth	r2, r3
 8002b22:	697b      	ldr	r3, [r7, #20]
 8002b24:	801a      	strh	r2, [r3, #0]
 8002b26:	697b      	ldr	r3, [r7, #20]
 8002b28:	881b      	ldrh	r3, [r3, #0]
 8002b2a:	b29b      	uxth	r3, r3
 8002b2c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b30:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b34:	b29a      	uxth	r2, r3
 8002b36:	697b      	ldr	r3, [r7, #20]
 8002b38:	801a      	strh	r2, [r3, #0]
 8002b3a:	e02f      	b.n	8002b9c <PCD_EP_ISR_Handler+0x290>
 8002b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b3e:	691b      	ldr	r3, [r3, #16]
 8002b40:	2b3e      	cmp	r3, #62	; 0x3e
 8002b42:	d813      	bhi.n	8002b6c <PCD_EP_ISR_Handler+0x260>
 8002b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b46:	691b      	ldr	r3, [r3, #16]
 8002b48:	085b      	lsrs	r3, r3, #1
 8002b4a:	633b      	str	r3, [r7, #48]	; 0x30
 8002b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b4e:	691b      	ldr	r3, [r3, #16]
 8002b50:	f003 0301 	and.w	r3, r3, #1
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d002      	beq.n	8002b5e <PCD_EP_ISR_Handler+0x252>
 8002b58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b5a:	3301      	adds	r3, #1
 8002b5c:	633b      	str	r3, [r7, #48]	; 0x30
 8002b5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b60:	b29b      	uxth	r3, r3
 8002b62:	029b      	lsls	r3, r3, #10
 8002b64:	b29a      	uxth	r2, r3
 8002b66:	697b      	ldr	r3, [r7, #20]
 8002b68:	801a      	strh	r2, [r3, #0]
 8002b6a:	e017      	b.n	8002b9c <PCD_EP_ISR_Handler+0x290>
 8002b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b6e:	691b      	ldr	r3, [r3, #16]
 8002b70:	095b      	lsrs	r3, r3, #5
 8002b72:	633b      	str	r3, [r7, #48]	; 0x30
 8002b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b76:	691b      	ldr	r3, [r3, #16]
 8002b78:	f003 031f 	and.w	r3, r3, #31
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d102      	bne.n	8002b86 <PCD_EP_ISR_Handler+0x27a>
 8002b80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b82:	3b01      	subs	r3, #1
 8002b84:	633b      	str	r3, [r7, #48]	; 0x30
 8002b86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b88:	b29b      	uxth	r3, r3
 8002b8a:	029b      	lsls	r3, r3, #10
 8002b8c:	b29b      	uxth	r3, r3
 8002b8e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b92:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b96:	b29a      	uxth	r2, r3
 8002b98:	697b      	ldr	r3, [r7, #20]
 8002b9a:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	881b      	ldrh	r3, [r3, #0]
 8002ba2:	b29b      	uxth	r3, r3
 8002ba4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002ba8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bac:	827b      	strh	r3, [r7, #18]
 8002bae:	8a7b      	ldrh	r3, [r7, #18]
 8002bb0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002bb4:	827b      	strh	r3, [r7, #18]
 8002bb6:	8a7b      	ldrh	r3, [r7, #18]
 8002bb8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002bbc:	827b      	strh	r3, [r7, #18]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681a      	ldr	r2, [r3, #0]
 8002bc2:	8a7b      	ldrh	r3, [r7, #18]
 8002bc4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002bc8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002bcc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002bd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002bd4:	b29b      	uxth	r3, r3
 8002bd6:	8013      	strh	r3, [r2, #0]
 8002bd8:	e16f      	b.n	8002eba <PCD_EP_ISR_Handler+0x5ae>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	461a      	mov	r2, r3
 8002be0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002be4:	009b      	lsls	r3, r3, #2
 8002be6:	4413      	add	r3, r2
 8002be8:	881b      	ldrh	r3, [r3, #0]
 8002bea:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002bec:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	f280 80e4 	bge.w	8002dbe <PCD_EP_ISR_Handler+0x4b2>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	461a      	mov	r2, r3
 8002bfc:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002c00:	009b      	lsls	r3, r3, #2
 8002c02:	4413      	add	r3, r2
 8002c04:	881b      	ldrh	r3, [r3, #0]
 8002c06:	b29a      	uxth	r2, r3
 8002c08:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002c0c:	4013      	ands	r3, r2
 8002c0e:	853b      	strh	r3, [r7, #40]	; 0x28
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	461a      	mov	r2, r3
 8002c16:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002c1a:	009b      	lsls	r3, r3, #2
 8002c1c:	4413      	add	r3, r2
 8002c1e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002c20:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002c24:	b292      	uxth	r2, r2
 8002c26:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002c28:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8002c2c:	4613      	mov	r3, r2
 8002c2e:	009b      	lsls	r3, r3, #2
 8002c30:	4413      	add	r3, r2
 8002c32:	00db      	lsls	r3, r3, #3
 8002c34:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002c38:	687a      	ldr	r2, [r7, #4]
 8002c3a:	4413      	add	r3, r2
 8002c3c:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c40:	7b1b      	ldrb	r3, [r3, #12]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d120      	bne.n	8002c88 <PCD_EP_ISR_Handler+0x37c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c4e:	b29b      	uxth	r3, r3
 8002c50:	461a      	mov	r2, r3
 8002c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c54:	781b      	ldrb	r3, [r3, #0]
 8002c56:	00db      	lsls	r3, r3, #3
 8002c58:	4413      	add	r3, r2
 8002c5a:	687a      	ldr	r2, [r7, #4]
 8002c5c:	6812      	ldr	r2, [r2, #0]
 8002c5e:	4413      	add	r3, r2
 8002c60:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002c64:	881b      	ldrh	r3, [r3, #0]
 8002c66:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c6a:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8002c6c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	f000 8083 	beq.w	8002d7a <PCD_EP_ISR_Handler+0x46e>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6818      	ldr	r0, [r3, #0]
 8002c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c7a:	6959      	ldr	r1, [r3, #20]
 8002c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c7e:	88da      	ldrh	r2, [r3, #6]
 8002c80:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002c82:	f004 fdfc 	bl	800787e <USB_ReadPMA>
 8002c86:	e078      	b.n	8002d7a <PCD_EP_ISR_Handler+0x46e>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c8a:	78db      	ldrb	r3, [r3, #3]
 8002c8c:	2b02      	cmp	r3, #2
 8002c8e:	d108      	bne.n	8002ca2 <PCD_EP_ISR_Handler+0x396>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002c90:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002c92:	461a      	mov	r2, r3
 8002c94:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002c96:	6878      	ldr	r0, [r7, #4]
 8002c98:	f000 f91d 	bl	8002ed6 <HAL_PCD_EP_DB_Receive>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	86fb      	strh	r3, [r7, #54]	; 0x36
 8002ca0:	e06b      	b.n	8002d7a <PCD_EP_ISR_Handler+0x46e>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	461a      	mov	r2, r3
 8002ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002caa:	781b      	ldrb	r3, [r3, #0]
 8002cac:	009b      	lsls	r3, r3, #2
 8002cae:	4413      	add	r3, r2
 8002cb0:	881b      	ldrh	r3, [r3, #0]
 8002cb2:	b29b      	uxth	r3, r3
 8002cb4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002cb8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cbc:	847b      	strh	r3, [r7, #34]	; 0x22
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	461a      	mov	r2, r3
 8002cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cc6:	781b      	ldrb	r3, [r3, #0]
 8002cc8:	009b      	lsls	r3, r3, #2
 8002cca:	441a      	add	r2, r3
 8002ccc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002cce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002cd2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002cd6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002cda:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002cde:	b29b      	uxth	r3, r3
 8002ce0:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	461a      	mov	r2, r3
 8002ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cea:	781b      	ldrb	r3, [r3, #0]
 8002cec:	009b      	lsls	r3, r3, #2
 8002cee:	4413      	add	r3, r2
 8002cf0:	881b      	ldrh	r3, [r3, #0]
 8002cf2:	b29b      	uxth	r3, r3
 8002cf4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d01f      	beq.n	8002d3c <PCD_EP_ISR_Handler+0x430>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d04:	b29b      	uxth	r3, r3
 8002d06:	461a      	mov	r2, r3
 8002d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d0a:	781b      	ldrb	r3, [r3, #0]
 8002d0c:	00db      	lsls	r3, r3, #3
 8002d0e:	4413      	add	r3, r2
 8002d10:	687a      	ldr	r2, [r7, #4]
 8002d12:	6812      	ldr	r2, [r2, #0]
 8002d14:	4413      	add	r3, r2
 8002d16:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002d1a:	881b      	ldrh	r3, [r3, #0]
 8002d1c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d20:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8002d22:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d028      	beq.n	8002d7a <PCD_EP_ISR_Handler+0x46e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6818      	ldr	r0, [r3, #0]
 8002d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d2e:	6959      	ldr	r1, [r3, #20]
 8002d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d32:	891a      	ldrh	r2, [r3, #8]
 8002d34:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002d36:	f004 fda2 	bl	800787e <USB_ReadPMA>
 8002d3a:	e01e      	b.n	8002d7a <PCD_EP_ISR_Handler+0x46e>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d44:	b29b      	uxth	r3, r3
 8002d46:	461a      	mov	r2, r3
 8002d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d4a:	781b      	ldrb	r3, [r3, #0]
 8002d4c:	00db      	lsls	r3, r3, #3
 8002d4e:	4413      	add	r3, r2
 8002d50:	687a      	ldr	r2, [r7, #4]
 8002d52:	6812      	ldr	r2, [r2, #0]
 8002d54:	4413      	add	r3, r2
 8002d56:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002d5a:	881b      	ldrh	r3, [r3, #0]
 8002d5c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d60:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8002d62:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d008      	beq.n	8002d7a <PCD_EP_ISR_Handler+0x46e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6818      	ldr	r0, [r3, #0]
 8002d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d6e:	6959      	ldr	r1, [r3, #20]
 8002d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d72:	895a      	ldrh	r2, [r3, #10]
 8002d74:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002d76:	f004 fd82 	bl	800787e <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d7c:	69da      	ldr	r2, [r3, #28]
 8002d7e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002d80:	441a      	add	r2, r3
 8002d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d84:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d88:	695a      	ldr	r2, [r3, #20]
 8002d8a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002d8c:	441a      	add	r2, r3
 8002d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d90:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d94:	699b      	ldr	r3, [r3, #24]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d004      	beq.n	8002da4 <PCD_EP_ISR_Handler+0x498>
 8002d9a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8002d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d9e:	691b      	ldr	r3, [r3, #16]
 8002da0:	429a      	cmp	r2, r3
 8002da2:	d206      	bcs.n	8002db2 <PCD_EP_ISR_Handler+0x4a6>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002da6:	781b      	ldrb	r3, [r3, #0]
 8002da8:	4619      	mov	r1, r3
 8002daa:	6878      	ldr	r0, [r7, #4]
 8002dac:	f006 fbec 	bl	8009588 <HAL_PCD_DataOutStageCallback>
 8002db0:	e005      	b.n	8002dbe <PCD_EP_ISR_Handler+0x4b2>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002db8:	4618      	mov	r0, r3
 8002dba:	f003 faaa 	bl	8006312 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002dbe:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002dc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d078      	beq.n	8002eba <PCD_EP_ISR_Handler+0x5ae>
      {
        ep = &hpcd->IN_ep[epindex];
 8002dc8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002dcc:	1c5a      	adds	r2, r3, #1
 8002dce:	4613      	mov	r3, r2
 8002dd0:	009b      	lsls	r3, r3, #2
 8002dd2:	4413      	add	r3, r2
 8002dd4:	00db      	lsls	r3, r3, #3
 8002dd6:	687a      	ldr	r2, [r7, #4]
 8002dd8:	4413      	add	r3, r2
 8002dda:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	461a      	mov	r2, r3
 8002de2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002de6:	009b      	lsls	r3, r3, #2
 8002de8:	4413      	add	r3, r2
 8002dea:	881b      	ldrh	r3, [r3, #0]
 8002dec:	b29b      	uxth	r3, r3
 8002dee:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002df2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002df6:	843b      	strh	r3, [r7, #32]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	461a      	mov	r2, r3
 8002dfe:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002e02:	009b      	lsls	r3, r3, #2
 8002e04:	441a      	add	r2, r3
 8002e06:	8c3b      	ldrh	r3, [r7, #32]
 8002e08:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002e0c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002e10:	b29b      	uxth	r3, r3
 8002e12:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 8002e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e16:	78db      	ldrb	r3, [r3, #3]
 8002e18:	2b02      	cmp	r3, #2
 8002e1a:	d108      	bne.n	8002e2e <PCD_EP_ISR_Handler+0x522>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e1e:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 8002e20:	2b02      	cmp	r3, #2
 8002e22:	d144      	bne.n	8002eae <PCD_EP_ISR_Handler+0x5a2>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002e24:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002e26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d13f      	bne.n	8002eae <PCD_EP_ISR_Handler+0x5a2>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e36:	b29b      	uxth	r3, r3
 8002e38:	461a      	mov	r2, r3
 8002e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e3c:	781b      	ldrb	r3, [r3, #0]
 8002e3e:	00db      	lsls	r3, r3, #3
 8002e40:	4413      	add	r3, r2
 8002e42:	687a      	ldr	r2, [r7, #4]
 8002e44:	6812      	ldr	r2, [r2, #0]
 8002e46:	4413      	add	r3, r2
 8002e48:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002e4c:	881b      	ldrh	r3, [r3, #0]
 8002e4e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002e52:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8002e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e56:	699a      	ldr	r2, [r3, #24]
 8002e58:	8bfb      	ldrh	r3, [r7, #30]
 8002e5a:	429a      	cmp	r2, r3
 8002e5c:	d906      	bls.n	8002e6c <PCD_EP_ISR_Handler+0x560>
          {
            ep->xfer_len -= TxByteNbre;
 8002e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e60:	699a      	ldr	r2, [r3, #24]
 8002e62:	8bfb      	ldrh	r3, [r7, #30]
 8002e64:	1ad2      	subs	r2, r2, r3
 8002e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e68:	619a      	str	r2, [r3, #24]
 8002e6a:	e002      	b.n	8002e72 <PCD_EP_ISR_Handler+0x566>
          }
          else
          {
            ep->xfer_len = 0U;
 8002e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e6e:	2200      	movs	r2, #0
 8002e70:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8002e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e74:	699b      	ldr	r3, [r3, #24]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d106      	bne.n	8002e88 <PCD_EP_ISR_Handler+0x57c>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e7c:	781b      	ldrb	r3, [r3, #0]
 8002e7e:	4619      	mov	r1, r3
 8002e80:	6878      	ldr	r0, [r7, #4]
 8002e82:	f006 fb9c 	bl	80095be <HAL_PCD_DataInStageCallback>
 8002e86:	e018      	b.n	8002eba <PCD_EP_ISR_Handler+0x5ae>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8002e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e8a:	695a      	ldr	r2, [r3, #20]
 8002e8c:	8bfb      	ldrh	r3, [r7, #30]
 8002e8e:	441a      	add	r2, r3
 8002e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e92:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8002e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e96:	69da      	ldr	r2, [r3, #28]
 8002e98:	8bfb      	ldrh	r3, [r7, #30]
 8002e9a:	441a      	add	r2, r3
 8002e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e9e:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	f003 fa33 	bl	8006312 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8002eac:	e005      	b.n	8002eba <PCD_EP_ISR_Handler+0x5ae>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002eae:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002eb0:	461a      	mov	r2, r3
 8002eb2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002eb4:	6878      	ldr	r0, [r7, #4]
 8002eb6:	f000 f917 	bl	80030e8 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002ec2:	b29b      	uxth	r3, r3
 8002ec4:	b21b      	sxth	r3, r3
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	f6ff ad25 	blt.w	8002916 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002ecc:	2300      	movs	r3, #0
}
 8002ece:	4618      	mov	r0, r3
 8002ed0:	3738      	adds	r7, #56	; 0x38
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd80      	pop	{r7, pc}

08002ed6 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002ed6:	b580      	push	{r7, lr}
 8002ed8:	b088      	sub	sp, #32
 8002eda:	af00      	add	r7, sp, #0
 8002edc:	60f8      	str	r0, [r7, #12]
 8002ede:	60b9      	str	r1, [r7, #8]
 8002ee0:	4613      	mov	r3, r2
 8002ee2:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002ee4:	88fb      	ldrh	r3, [r7, #6]
 8002ee6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d07c      	beq.n	8002fe8 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ef6:	b29b      	uxth	r3, r3
 8002ef8:	461a      	mov	r2, r3
 8002efa:	68bb      	ldr	r3, [r7, #8]
 8002efc:	781b      	ldrb	r3, [r3, #0]
 8002efe:	00db      	lsls	r3, r3, #3
 8002f00:	4413      	add	r3, r2
 8002f02:	68fa      	ldr	r2, [r7, #12]
 8002f04:	6812      	ldr	r2, [r2, #0]
 8002f06:	4413      	add	r3, r2
 8002f08:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002f0c:	881b      	ldrh	r3, [r3, #0]
 8002f0e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f12:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	699a      	ldr	r2, [r3, #24]
 8002f18:	8b7b      	ldrh	r3, [r7, #26]
 8002f1a:	429a      	cmp	r2, r3
 8002f1c:	d306      	bcc.n	8002f2c <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8002f1e:	68bb      	ldr	r3, [r7, #8]
 8002f20:	699a      	ldr	r2, [r3, #24]
 8002f22:	8b7b      	ldrh	r3, [r7, #26]
 8002f24:	1ad2      	subs	r2, r2, r3
 8002f26:	68bb      	ldr	r3, [r7, #8]
 8002f28:	619a      	str	r2, [r3, #24]
 8002f2a:	e002      	b.n	8002f32 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8002f2c:	68bb      	ldr	r3, [r7, #8]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002f32:	68bb      	ldr	r3, [r7, #8]
 8002f34:	699b      	ldr	r3, [r3, #24]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d123      	bne.n	8002f82 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	461a      	mov	r2, r3
 8002f40:	68bb      	ldr	r3, [r7, #8]
 8002f42:	781b      	ldrb	r3, [r3, #0]
 8002f44:	009b      	lsls	r3, r3, #2
 8002f46:	4413      	add	r3, r2
 8002f48:	881b      	ldrh	r3, [r3, #0]
 8002f4a:	b29b      	uxth	r3, r3
 8002f4c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002f50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f54:	833b      	strh	r3, [r7, #24]
 8002f56:	8b3b      	ldrh	r3, [r7, #24]
 8002f58:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002f5c:	833b      	strh	r3, [r7, #24]
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	461a      	mov	r2, r3
 8002f64:	68bb      	ldr	r3, [r7, #8]
 8002f66:	781b      	ldrb	r3, [r3, #0]
 8002f68:	009b      	lsls	r3, r3, #2
 8002f6a:	441a      	add	r2, r3
 8002f6c:	8b3b      	ldrh	r3, [r7, #24]
 8002f6e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002f72:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002f76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f7e:	b29b      	uxth	r3, r3
 8002f80:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002f82:	88fb      	ldrh	r3, [r7, #6]
 8002f84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d01f      	beq.n	8002fcc <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	461a      	mov	r2, r3
 8002f92:	68bb      	ldr	r3, [r7, #8]
 8002f94:	781b      	ldrb	r3, [r3, #0]
 8002f96:	009b      	lsls	r3, r3, #2
 8002f98:	4413      	add	r3, r2
 8002f9a:	881b      	ldrh	r3, [r3, #0]
 8002f9c:	b29b      	uxth	r3, r3
 8002f9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002fa2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fa6:	82fb      	strh	r3, [r7, #22]
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	461a      	mov	r2, r3
 8002fae:	68bb      	ldr	r3, [r7, #8]
 8002fb0:	781b      	ldrb	r3, [r3, #0]
 8002fb2:	009b      	lsls	r3, r3, #2
 8002fb4:	441a      	add	r2, r3
 8002fb6:	8afb      	ldrh	r3, [r7, #22]
 8002fb8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002fbc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002fc0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002fc4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002fc8:	b29b      	uxth	r3, r3
 8002fca:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002fcc:	8b7b      	ldrh	r3, [r7, #26]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	f000 8085 	beq.w	80030de <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	6818      	ldr	r0, [r3, #0]
 8002fd8:	68bb      	ldr	r3, [r7, #8]
 8002fda:	6959      	ldr	r1, [r3, #20]
 8002fdc:	68bb      	ldr	r3, [r7, #8]
 8002fde:	891a      	ldrh	r2, [r3, #8]
 8002fe0:	8b7b      	ldrh	r3, [r7, #26]
 8002fe2:	f004 fc4c 	bl	800787e <USB_ReadPMA>
 8002fe6:	e07a      	b.n	80030de <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ff0:	b29b      	uxth	r3, r3
 8002ff2:	461a      	mov	r2, r3
 8002ff4:	68bb      	ldr	r3, [r7, #8]
 8002ff6:	781b      	ldrb	r3, [r3, #0]
 8002ff8:	00db      	lsls	r3, r3, #3
 8002ffa:	4413      	add	r3, r2
 8002ffc:	68fa      	ldr	r2, [r7, #12]
 8002ffe:	6812      	ldr	r2, [r2, #0]
 8003000:	4413      	add	r3, r2
 8003002:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003006:	881b      	ldrh	r3, [r3, #0]
 8003008:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800300c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800300e:	68bb      	ldr	r3, [r7, #8]
 8003010:	699a      	ldr	r2, [r3, #24]
 8003012:	8b7b      	ldrh	r3, [r7, #26]
 8003014:	429a      	cmp	r2, r3
 8003016:	d306      	bcc.n	8003026 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	699a      	ldr	r2, [r3, #24]
 800301c:	8b7b      	ldrh	r3, [r7, #26]
 800301e:	1ad2      	subs	r2, r2, r3
 8003020:	68bb      	ldr	r3, [r7, #8]
 8003022:	619a      	str	r2, [r3, #24]
 8003024:	e002      	b.n	800302c <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8003026:	68bb      	ldr	r3, [r7, #8]
 8003028:	2200      	movs	r2, #0
 800302a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800302c:	68bb      	ldr	r3, [r7, #8]
 800302e:	699b      	ldr	r3, [r3, #24]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d123      	bne.n	800307c <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	461a      	mov	r2, r3
 800303a:	68bb      	ldr	r3, [r7, #8]
 800303c:	781b      	ldrb	r3, [r3, #0]
 800303e:	009b      	lsls	r3, r3, #2
 8003040:	4413      	add	r3, r2
 8003042:	881b      	ldrh	r3, [r3, #0]
 8003044:	b29b      	uxth	r3, r3
 8003046:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800304a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800304e:	83fb      	strh	r3, [r7, #30]
 8003050:	8bfb      	ldrh	r3, [r7, #30]
 8003052:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003056:	83fb      	strh	r3, [r7, #30]
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	461a      	mov	r2, r3
 800305e:	68bb      	ldr	r3, [r7, #8]
 8003060:	781b      	ldrb	r3, [r3, #0]
 8003062:	009b      	lsls	r3, r3, #2
 8003064:	441a      	add	r2, r3
 8003066:	8bfb      	ldrh	r3, [r7, #30]
 8003068:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800306c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003070:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003074:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003078:	b29b      	uxth	r3, r3
 800307a:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800307c:	88fb      	ldrh	r3, [r7, #6]
 800307e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003082:	2b00      	cmp	r3, #0
 8003084:	d11f      	bne.n	80030c6 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	461a      	mov	r2, r3
 800308c:	68bb      	ldr	r3, [r7, #8]
 800308e:	781b      	ldrb	r3, [r3, #0]
 8003090:	009b      	lsls	r3, r3, #2
 8003092:	4413      	add	r3, r2
 8003094:	881b      	ldrh	r3, [r3, #0]
 8003096:	b29b      	uxth	r3, r3
 8003098:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800309c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030a0:	83bb      	strh	r3, [r7, #28]
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	461a      	mov	r2, r3
 80030a8:	68bb      	ldr	r3, [r7, #8]
 80030aa:	781b      	ldrb	r3, [r3, #0]
 80030ac:	009b      	lsls	r3, r3, #2
 80030ae:	441a      	add	r2, r3
 80030b0:	8bbb      	ldrh	r3, [r7, #28]
 80030b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80030b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80030ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80030be:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80030c2:	b29b      	uxth	r3, r3
 80030c4:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80030c6:	8b7b      	ldrh	r3, [r7, #26]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d008      	beq.n	80030de <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	6818      	ldr	r0, [r3, #0]
 80030d0:	68bb      	ldr	r3, [r7, #8]
 80030d2:	6959      	ldr	r1, [r3, #20]
 80030d4:	68bb      	ldr	r3, [r7, #8]
 80030d6:	895a      	ldrh	r2, [r3, #10]
 80030d8:	8b7b      	ldrh	r3, [r7, #26]
 80030da:	f004 fbd0 	bl	800787e <USB_ReadPMA>
    }
  }

  return count;
 80030de:	8b7b      	ldrh	r3, [r7, #26]
}
 80030e0:	4618      	mov	r0, r3
 80030e2:	3720      	adds	r7, #32
 80030e4:	46bd      	mov	sp, r7
 80030e6:	bd80      	pop	{r7, pc}

080030e8 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b092      	sub	sp, #72	; 0x48
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	60f8      	str	r0, [r7, #12]
 80030f0:	60b9      	str	r1, [r7, #8]
 80030f2:	4613      	mov	r3, r2
 80030f4:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80030f6:	88fb      	ldrh	r3, [r7, #6]
 80030f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	f000 8130 	beq.w	8003362 <HAL_PCD_EP_DB_Transmit+0x27a>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800310a:	b29b      	uxth	r3, r3
 800310c:	461a      	mov	r2, r3
 800310e:	68bb      	ldr	r3, [r7, #8]
 8003110:	781b      	ldrb	r3, [r3, #0]
 8003112:	00db      	lsls	r3, r3, #3
 8003114:	4413      	add	r3, r2
 8003116:	68fa      	ldr	r2, [r7, #12]
 8003118:	6812      	ldr	r2, [r2, #0]
 800311a:	4413      	add	r3, r2
 800311c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003120:	881b      	ldrh	r3, [r3, #0]
 8003122:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003126:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len > TxByteNbre)
 8003128:	68bb      	ldr	r3, [r7, #8]
 800312a:	699a      	ldr	r2, [r3, #24]
 800312c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800312e:	429a      	cmp	r2, r3
 8003130:	d906      	bls.n	8003140 <HAL_PCD_EP_DB_Transmit+0x58>
    {
      ep->xfer_len -= TxByteNbre;
 8003132:	68bb      	ldr	r3, [r7, #8]
 8003134:	699a      	ldr	r2, [r3, #24]
 8003136:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003138:	1ad2      	subs	r2, r2, r3
 800313a:	68bb      	ldr	r3, [r7, #8]
 800313c:	619a      	str	r2, [r3, #24]
 800313e:	e002      	b.n	8003146 <HAL_PCD_EP_DB_Transmit+0x5e>
    }
    else
    {
      ep->xfer_len = 0U;
 8003140:	68bb      	ldr	r3, [r7, #8]
 8003142:	2200      	movs	r2, #0
 8003144:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003146:	68bb      	ldr	r3, [r7, #8]
 8003148:	699b      	ldr	r3, [r3, #24]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d12c      	bne.n	80031a8 <HAL_PCD_EP_DB_Transmit+0xc0>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800314e:	68bb      	ldr	r3, [r7, #8]
 8003150:	781b      	ldrb	r3, [r3, #0]
 8003152:	4619      	mov	r1, r3
 8003154:	68f8      	ldr	r0, [r7, #12]
 8003156:	f006 fa32 	bl	80095be <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800315a:	88fb      	ldrh	r3, [r7, #6]
 800315c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003160:	2b00      	cmp	r3, #0
 8003162:	f000 822d 	beq.w	80035c0 <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	461a      	mov	r2, r3
 800316c:	68bb      	ldr	r3, [r7, #8]
 800316e:	781b      	ldrb	r3, [r3, #0]
 8003170:	009b      	lsls	r3, r3, #2
 8003172:	4413      	add	r3, r2
 8003174:	881b      	ldrh	r3, [r3, #0]
 8003176:	b29b      	uxth	r3, r3
 8003178:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800317c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003180:	827b      	strh	r3, [r7, #18]
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	461a      	mov	r2, r3
 8003188:	68bb      	ldr	r3, [r7, #8]
 800318a:	781b      	ldrb	r3, [r3, #0]
 800318c:	009b      	lsls	r3, r3, #2
 800318e:	441a      	add	r2, r3
 8003190:	8a7b      	ldrh	r3, [r7, #18]
 8003192:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003196:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800319a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800319e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031a2:	b29b      	uxth	r3, r3
 80031a4:	8013      	strh	r3, [r2, #0]
 80031a6:	e20b      	b.n	80035c0 <HAL_PCD_EP_DB_Transmit+0x4d8>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80031a8:	88fb      	ldrh	r3, [r7, #6]
 80031aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d01f      	beq.n	80031f2 <HAL_PCD_EP_DB_Transmit+0x10a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	461a      	mov	r2, r3
 80031b8:	68bb      	ldr	r3, [r7, #8]
 80031ba:	781b      	ldrb	r3, [r3, #0]
 80031bc:	009b      	lsls	r3, r3, #2
 80031be:	4413      	add	r3, r2
 80031c0:	881b      	ldrh	r3, [r3, #0]
 80031c2:	b29b      	uxth	r3, r3
 80031c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80031c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031cc:	84bb      	strh	r3, [r7, #36]	; 0x24
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	461a      	mov	r2, r3
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	781b      	ldrb	r3, [r3, #0]
 80031d8:	009b      	lsls	r3, r3, #2
 80031da:	441a      	add	r2, r3
 80031dc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80031de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80031e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80031e6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80031ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031ee:	b29b      	uxth	r3, r3
 80031f0:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80031f2:	68bb      	ldr	r3, [r7, #8]
 80031f4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80031f8:	2b01      	cmp	r3, #1
 80031fa:	f040 81e1 	bne.w	80035c0 <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        ep->xfer_buff += TxByteNbre;
 80031fe:	68bb      	ldr	r3, [r7, #8]
 8003200:	695a      	ldr	r2, [r3, #20]
 8003202:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003204:	441a      	add	r2, r3
 8003206:	68bb      	ldr	r3, [r7, #8]
 8003208:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 800320a:	68bb      	ldr	r3, [r7, #8]
 800320c:	69da      	ldr	r2, [r3, #28]
 800320e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003210:	441a      	add	r2, r3
 8003212:	68bb      	ldr	r3, [r7, #8]
 8003214:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003216:	68bb      	ldr	r3, [r7, #8]
 8003218:	6a1a      	ldr	r2, [r3, #32]
 800321a:	68bb      	ldr	r3, [r7, #8]
 800321c:	691b      	ldr	r3, [r3, #16]
 800321e:	429a      	cmp	r2, r3
 8003220:	d309      	bcc.n	8003236 <HAL_PCD_EP_DB_Transmit+0x14e>
        {
          len = ep->maxpacket;
 8003222:	68bb      	ldr	r3, [r7, #8]
 8003224:	691b      	ldr	r3, [r3, #16]
 8003226:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 8003228:	68bb      	ldr	r3, [r7, #8]
 800322a:	6a1a      	ldr	r2, [r3, #32]
 800322c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800322e:	1ad2      	subs	r2, r2, r3
 8003230:	68bb      	ldr	r3, [r7, #8]
 8003232:	621a      	str	r2, [r3, #32]
 8003234:	e014      	b.n	8003260 <HAL_PCD_EP_DB_Transmit+0x178>
        }
        else if (ep->xfer_len_db == 0U)
 8003236:	68bb      	ldr	r3, [r7, #8]
 8003238:	6a1b      	ldr	r3, [r3, #32]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d106      	bne.n	800324c <HAL_PCD_EP_DB_Transmit+0x164>
        {
          len = TxByteNbre;
 800323e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003240:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 8003242:	68bb      	ldr	r3, [r7, #8]
 8003244:	2200      	movs	r2, #0
 8003246:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800324a:	e009      	b.n	8003260 <HAL_PCD_EP_DB_Transmit+0x178>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800324c:	68bb      	ldr	r3, [r7, #8]
 800324e:	2200      	movs	r2, #0
 8003250:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8003254:	68bb      	ldr	r3, [r7, #8]
 8003256:	6a1b      	ldr	r3, [r3, #32]
 8003258:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 800325a:	68bb      	ldr	r3, [r7, #8]
 800325c:	2200      	movs	r2, #0
 800325e:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003260:	68bb      	ldr	r3, [r7, #8]
 8003262:	785b      	ldrb	r3, [r3, #1]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d155      	bne.n	8003314 <HAL_PCD_EP_DB_Transmit+0x22c>
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	61bb      	str	r3, [r7, #24]
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003276:	b29b      	uxth	r3, r3
 8003278:	461a      	mov	r2, r3
 800327a:	69bb      	ldr	r3, [r7, #24]
 800327c:	4413      	add	r3, r2
 800327e:	61bb      	str	r3, [r7, #24]
 8003280:	68bb      	ldr	r3, [r7, #8]
 8003282:	781b      	ldrb	r3, [r3, #0]
 8003284:	00da      	lsls	r2, r3, #3
 8003286:	69bb      	ldr	r3, [r7, #24]
 8003288:	4413      	add	r3, r2
 800328a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800328e:	617b      	str	r3, [r7, #20]
 8003290:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003292:	2b00      	cmp	r3, #0
 8003294:	d112      	bne.n	80032bc <HAL_PCD_EP_DB_Transmit+0x1d4>
 8003296:	697b      	ldr	r3, [r7, #20]
 8003298:	881b      	ldrh	r3, [r3, #0]
 800329a:	b29b      	uxth	r3, r3
 800329c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80032a0:	b29a      	uxth	r2, r3
 80032a2:	697b      	ldr	r3, [r7, #20]
 80032a4:	801a      	strh	r2, [r3, #0]
 80032a6:	697b      	ldr	r3, [r7, #20]
 80032a8:	881b      	ldrh	r3, [r3, #0]
 80032aa:	b29b      	uxth	r3, r3
 80032ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80032b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80032b4:	b29a      	uxth	r2, r3
 80032b6:	697b      	ldr	r3, [r7, #20]
 80032b8:	801a      	strh	r2, [r3, #0]
 80032ba:	e047      	b.n	800334c <HAL_PCD_EP_DB_Transmit+0x264>
 80032bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032be:	2b3e      	cmp	r3, #62	; 0x3e
 80032c0:	d811      	bhi.n	80032e6 <HAL_PCD_EP_DB_Transmit+0x1fe>
 80032c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032c4:	085b      	lsrs	r3, r3, #1
 80032c6:	62bb      	str	r3, [r7, #40]	; 0x28
 80032c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032ca:	f003 0301 	and.w	r3, r3, #1
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d002      	beq.n	80032d8 <HAL_PCD_EP_DB_Transmit+0x1f0>
 80032d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032d4:	3301      	adds	r3, #1
 80032d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80032d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032da:	b29b      	uxth	r3, r3
 80032dc:	029b      	lsls	r3, r3, #10
 80032de:	b29a      	uxth	r2, r3
 80032e0:	697b      	ldr	r3, [r7, #20]
 80032e2:	801a      	strh	r2, [r3, #0]
 80032e4:	e032      	b.n	800334c <HAL_PCD_EP_DB_Transmit+0x264>
 80032e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032e8:	095b      	lsrs	r3, r3, #5
 80032ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80032ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032ee:	f003 031f 	and.w	r3, r3, #31
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d102      	bne.n	80032fc <HAL_PCD_EP_DB_Transmit+0x214>
 80032f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032f8:	3b01      	subs	r3, #1
 80032fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80032fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032fe:	b29b      	uxth	r3, r3
 8003300:	029b      	lsls	r3, r3, #10
 8003302:	b29b      	uxth	r3, r3
 8003304:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003308:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800330c:	b29a      	uxth	r2, r3
 800330e:	697b      	ldr	r3, [r7, #20]
 8003310:	801a      	strh	r2, [r3, #0]
 8003312:	e01b      	b.n	800334c <HAL_PCD_EP_DB_Transmit+0x264>
 8003314:	68bb      	ldr	r3, [r7, #8]
 8003316:	785b      	ldrb	r3, [r3, #1]
 8003318:	2b01      	cmp	r3, #1
 800331a:	d117      	bne.n	800334c <HAL_PCD_EP_DB_Transmit+0x264>
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	623b      	str	r3, [r7, #32]
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800332a:	b29b      	uxth	r3, r3
 800332c:	461a      	mov	r2, r3
 800332e:	6a3b      	ldr	r3, [r7, #32]
 8003330:	4413      	add	r3, r2
 8003332:	623b      	str	r3, [r7, #32]
 8003334:	68bb      	ldr	r3, [r7, #8]
 8003336:	781b      	ldrb	r3, [r3, #0]
 8003338:	00da      	lsls	r2, r3, #3
 800333a:	6a3b      	ldr	r3, [r7, #32]
 800333c:	4413      	add	r3, r2
 800333e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003342:	61fb      	str	r3, [r7, #28]
 8003344:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003346:	b29a      	uxth	r2, r3
 8003348:	69fb      	ldr	r3, [r7, #28]
 800334a:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	6818      	ldr	r0, [r3, #0]
 8003350:	68bb      	ldr	r3, [r7, #8]
 8003352:	6959      	ldr	r1, [r3, #20]
 8003354:	68bb      	ldr	r3, [r7, #8]
 8003356:	891a      	ldrh	r2, [r3, #8]
 8003358:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800335a:	b29b      	uxth	r3, r3
 800335c:	f004 fa4e 	bl	80077fc <USB_WritePMA>
 8003360:	e12e      	b.n	80035c0 <HAL_PCD_EP_DB_Transmit+0x4d8>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800336a:	b29b      	uxth	r3, r3
 800336c:	461a      	mov	r2, r3
 800336e:	68bb      	ldr	r3, [r7, #8]
 8003370:	781b      	ldrb	r3, [r3, #0]
 8003372:	00db      	lsls	r3, r3, #3
 8003374:	4413      	add	r3, r2
 8003376:	68fa      	ldr	r2, [r7, #12]
 8003378:	6812      	ldr	r2, [r2, #0]
 800337a:	4413      	add	r3, r2
 800337c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003380:	881b      	ldrh	r3, [r3, #0]
 8003382:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003386:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len >= TxByteNbre)
 8003388:	68bb      	ldr	r3, [r7, #8]
 800338a:	699a      	ldr	r2, [r3, #24]
 800338c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800338e:	429a      	cmp	r2, r3
 8003390:	d306      	bcc.n	80033a0 <HAL_PCD_EP_DB_Transmit+0x2b8>
    {
      ep->xfer_len -= TxByteNbre;
 8003392:	68bb      	ldr	r3, [r7, #8]
 8003394:	699a      	ldr	r2, [r3, #24]
 8003396:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003398:	1ad2      	subs	r2, r2, r3
 800339a:	68bb      	ldr	r3, [r7, #8]
 800339c:	619a      	str	r2, [r3, #24]
 800339e:	e002      	b.n	80033a6 <HAL_PCD_EP_DB_Transmit+0x2be>
    }
    else
    {
      ep->xfer_len = 0U;
 80033a0:	68bb      	ldr	r3, [r7, #8]
 80033a2:	2200      	movs	r2, #0
 80033a4:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80033a6:	68bb      	ldr	r3, [r7, #8]
 80033a8:	699b      	ldr	r3, [r3, #24]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d12c      	bne.n	8003408 <HAL_PCD_EP_DB_Transmit+0x320>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80033ae:	68bb      	ldr	r3, [r7, #8]
 80033b0:	781b      	ldrb	r3, [r3, #0]
 80033b2:	4619      	mov	r1, r3
 80033b4:	68f8      	ldr	r0, [r7, #12]
 80033b6:	f006 f902 	bl	80095be <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80033ba:	88fb      	ldrh	r3, [r7, #6]
 80033bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	f040 80fd 	bne.w	80035c0 <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	461a      	mov	r2, r3
 80033cc:	68bb      	ldr	r3, [r7, #8]
 80033ce:	781b      	ldrb	r3, [r3, #0]
 80033d0:	009b      	lsls	r3, r3, #2
 80033d2:	4413      	add	r3, r2
 80033d4:	881b      	ldrh	r3, [r3, #0]
 80033d6:	b29b      	uxth	r3, r3
 80033d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80033dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033e0:	84fb      	strh	r3, [r7, #38]	; 0x26
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	461a      	mov	r2, r3
 80033e8:	68bb      	ldr	r3, [r7, #8]
 80033ea:	781b      	ldrb	r3, [r3, #0]
 80033ec:	009b      	lsls	r3, r3, #2
 80033ee:	441a      	add	r2, r3
 80033f0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80033f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80033f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80033fa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80033fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003402:	b29b      	uxth	r3, r3
 8003404:	8013      	strh	r3, [r2, #0]
 8003406:	e0db      	b.n	80035c0 <HAL_PCD_EP_DB_Transmit+0x4d8>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003408:	88fb      	ldrh	r3, [r7, #6]
 800340a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800340e:	2b00      	cmp	r3, #0
 8003410:	d11f      	bne.n	8003452 <HAL_PCD_EP_DB_Transmit+0x36a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	461a      	mov	r2, r3
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	781b      	ldrb	r3, [r3, #0]
 800341c:	009b      	lsls	r3, r3, #2
 800341e:	4413      	add	r3, r2
 8003420:	881b      	ldrh	r3, [r3, #0]
 8003422:	b29b      	uxth	r3, r3
 8003424:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003428:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800342c:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	461a      	mov	r2, r3
 8003434:	68bb      	ldr	r3, [r7, #8]
 8003436:	781b      	ldrb	r3, [r3, #0]
 8003438:	009b      	lsls	r3, r3, #2
 800343a:	441a      	add	r2, r3
 800343c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800343e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003442:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003446:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800344a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800344e:	b29b      	uxth	r3, r3
 8003450:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003452:	68bb      	ldr	r3, [r7, #8]
 8003454:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003458:	2b01      	cmp	r3, #1
 800345a:	f040 80b1 	bne.w	80035c0 <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        ep->xfer_buff += TxByteNbre;
 800345e:	68bb      	ldr	r3, [r7, #8]
 8003460:	695a      	ldr	r2, [r3, #20]
 8003462:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003464:	441a      	add	r2, r3
 8003466:	68bb      	ldr	r3, [r7, #8]
 8003468:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 800346a:	68bb      	ldr	r3, [r7, #8]
 800346c:	69da      	ldr	r2, [r3, #28]
 800346e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003470:	441a      	add	r2, r3
 8003472:	68bb      	ldr	r3, [r7, #8]
 8003474:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003476:	68bb      	ldr	r3, [r7, #8]
 8003478:	6a1a      	ldr	r2, [r3, #32]
 800347a:	68bb      	ldr	r3, [r7, #8]
 800347c:	691b      	ldr	r3, [r3, #16]
 800347e:	429a      	cmp	r2, r3
 8003480:	d309      	bcc.n	8003496 <HAL_PCD_EP_DB_Transmit+0x3ae>
        {
          len = ep->maxpacket;
 8003482:	68bb      	ldr	r3, [r7, #8]
 8003484:	691b      	ldr	r3, [r3, #16]
 8003486:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 8003488:	68bb      	ldr	r3, [r7, #8]
 800348a:	6a1a      	ldr	r2, [r3, #32]
 800348c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800348e:	1ad2      	subs	r2, r2, r3
 8003490:	68bb      	ldr	r3, [r7, #8]
 8003492:	621a      	str	r2, [r3, #32]
 8003494:	e014      	b.n	80034c0 <HAL_PCD_EP_DB_Transmit+0x3d8>
        }
        else if (ep->xfer_len_db == 0U)
 8003496:	68bb      	ldr	r3, [r7, #8]
 8003498:	6a1b      	ldr	r3, [r3, #32]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d106      	bne.n	80034ac <HAL_PCD_EP_DB_Transmit+0x3c4>
        {
          len = TxByteNbre;
 800349e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80034a0:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 80034a2:	68bb      	ldr	r3, [r7, #8]
 80034a4:	2200      	movs	r2, #0
 80034a6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80034aa:	e009      	b.n	80034c0 <HAL_PCD_EP_DB_Transmit+0x3d8>
        }
        else
        {
          len = ep->xfer_len_db;
 80034ac:	68bb      	ldr	r3, [r7, #8]
 80034ae:	6a1b      	ldr	r3, [r3, #32]
 80034b0:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 80034b2:	68bb      	ldr	r3, [r7, #8]
 80034b4:	2200      	movs	r2, #0
 80034b6:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	2200      	movs	r2, #0
 80034bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	637b      	str	r3, [r7, #52]	; 0x34
 80034c6:	68bb      	ldr	r3, [r7, #8]
 80034c8:	785b      	ldrb	r3, [r3, #1]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d155      	bne.n	800357a <HAL_PCD_EP_DB_Transmit+0x492>
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	647b      	str	r3, [r7, #68]	; 0x44
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80034dc:	b29b      	uxth	r3, r3
 80034de:	461a      	mov	r2, r3
 80034e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80034e2:	4413      	add	r3, r2
 80034e4:	647b      	str	r3, [r7, #68]	; 0x44
 80034e6:	68bb      	ldr	r3, [r7, #8]
 80034e8:	781b      	ldrb	r3, [r3, #0]
 80034ea:	00da      	lsls	r2, r3, #3
 80034ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80034ee:	4413      	add	r3, r2
 80034f0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80034f4:	643b      	str	r3, [r7, #64]	; 0x40
 80034f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d112      	bne.n	8003522 <HAL_PCD_EP_DB_Transmit+0x43a>
 80034fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80034fe:	881b      	ldrh	r3, [r3, #0]
 8003500:	b29b      	uxth	r3, r3
 8003502:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003506:	b29a      	uxth	r2, r3
 8003508:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800350a:	801a      	strh	r2, [r3, #0]
 800350c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800350e:	881b      	ldrh	r3, [r3, #0]
 8003510:	b29b      	uxth	r3, r3
 8003512:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003516:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800351a:	b29a      	uxth	r2, r3
 800351c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800351e:	801a      	strh	r2, [r3, #0]
 8003520:	e044      	b.n	80035ac <HAL_PCD_EP_DB_Transmit+0x4c4>
 8003522:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003524:	2b3e      	cmp	r3, #62	; 0x3e
 8003526:	d811      	bhi.n	800354c <HAL_PCD_EP_DB_Transmit+0x464>
 8003528:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800352a:	085b      	lsrs	r3, r3, #1
 800352c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800352e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003530:	f003 0301 	and.w	r3, r3, #1
 8003534:	2b00      	cmp	r3, #0
 8003536:	d002      	beq.n	800353e <HAL_PCD_EP_DB_Transmit+0x456>
 8003538:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800353a:	3301      	adds	r3, #1
 800353c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800353e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003540:	b29b      	uxth	r3, r3
 8003542:	029b      	lsls	r3, r3, #10
 8003544:	b29a      	uxth	r2, r3
 8003546:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003548:	801a      	strh	r2, [r3, #0]
 800354a:	e02f      	b.n	80035ac <HAL_PCD_EP_DB_Transmit+0x4c4>
 800354c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800354e:	095b      	lsrs	r3, r3, #5
 8003550:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003552:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003554:	f003 031f 	and.w	r3, r3, #31
 8003558:	2b00      	cmp	r3, #0
 800355a:	d102      	bne.n	8003562 <HAL_PCD_EP_DB_Transmit+0x47a>
 800355c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800355e:	3b01      	subs	r3, #1
 8003560:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003562:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003564:	b29b      	uxth	r3, r3
 8003566:	029b      	lsls	r3, r3, #10
 8003568:	b29b      	uxth	r3, r3
 800356a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800356e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003572:	b29a      	uxth	r2, r3
 8003574:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003576:	801a      	strh	r2, [r3, #0]
 8003578:	e018      	b.n	80035ac <HAL_PCD_EP_DB_Transmit+0x4c4>
 800357a:	68bb      	ldr	r3, [r7, #8]
 800357c:	785b      	ldrb	r3, [r3, #1]
 800357e:	2b01      	cmp	r3, #1
 8003580:	d114      	bne.n	80035ac <HAL_PCD_EP_DB_Transmit+0x4c4>
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800358a:	b29b      	uxth	r3, r3
 800358c:	461a      	mov	r2, r3
 800358e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003590:	4413      	add	r3, r2
 8003592:	637b      	str	r3, [r7, #52]	; 0x34
 8003594:	68bb      	ldr	r3, [r7, #8]
 8003596:	781b      	ldrb	r3, [r3, #0]
 8003598:	00da      	lsls	r2, r3, #3
 800359a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800359c:	4413      	add	r3, r2
 800359e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80035a2:	633b      	str	r3, [r7, #48]	; 0x30
 80035a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035a6:	b29a      	uxth	r2, r3
 80035a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035aa:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	6818      	ldr	r0, [r3, #0]
 80035b0:	68bb      	ldr	r3, [r7, #8]
 80035b2:	6959      	ldr	r1, [r3, #20]
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	895a      	ldrh	r2, [r3, #10]
 80035b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035ba:	b29b      	uxth	r3, r3
 80035bc:	f004 f91e 	bl	80077fc <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	461a      	mov	r2, r3
 80035c6:	68bb      	ldr	r3, [r7, #8]
 80035c8:	781b      	ldrb	r3, [r3, #0]
 80035ca:	009b      	lsls	r3, r3, #2
 80035cc:	4413      	add	r3, r2
 80035ce:	881b      	ldrh	r3, [r3, #0]
 80035d0:	b29b      	uxth	r3, r3
 80035d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80035d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80035da:	823b      	strh	r3, [r7, #16]
 80035dc:	8a3b      	ldrh	r3, [r7, #16]
 80035de:	f083 0310 	eor.w	r3, r3, #16
 80035e2:	823b      	strh	r3, [r7, #16]
 80035e4:	8a3b      	ldrh	r3, [r7, #16]
 80035e6:	f083 0320 	eor.w	r3, r3, #32
 80035ea:	823b      	strh	r3, [r7, #16]
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	461a      	mov	r2, r3
 80035f2:	68bb      	ldr	r3, [r7, #8]
 80035f4:	781b      	ldrb	r3, [r3, #0]
 80035f6:	009b      	lsls	r3, r3, #2
 80035f8:	441a      	add	r2, r3
 80035fa:	8a3b      	ldrh	r3, [r7, #16]
 80035fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003600:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003604:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003608:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800360c:	b29b      	uxth	r3, r3
 800360e:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8003610:	2300      	movs	r3, #0
}
 8003612:	4618      	mov	r0, r3
 8003614:	3748      	adds	r7, #72	; 0x48
 8003616:	46bd      	mov	sp, r7
 8003618:	bd80      	pop	{r7, pc}

0800361a <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 800361a:	b480      	push	{r7}
 800361c:	b087      	sub	sp, #28
 800361e:	af00      	add	r7, sp, #0
 8003620:	60f8      	str	r0, [r7, #12]
 8003622:	607b      	str	r3, [r7, #4]
 8003624:	460b      	mov	r3, r1
 8003626:	817b      	strh	r3, [r7, #10]
 8003628:	4613      	mov	r3, r2
 800362a:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800362c:	897b      	ldrh	r3, [r7, #10]
 800362e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003632:	b29b      	uxth	r3, r3
 8003634:	2b00      	cmp	r3, #0
 8003636:	d00b      	beq.n	8003650 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003638:	897b      	ldrh	r3, [r7, #10]
 800363a:	f003 0307 	and.w	r3, r3, #7
 800363e:	1c5a      	adds	r2, r3, #1
 8003640:	4613      	mov	r3, r2
 8003642:	009b      	lsls	r3, r3, #2
 8003644:	4413      	add	r3, r2
 8003646:	00db      	lsls	r3, r3, #3
 8003648:	68fa      	ldr	r2, [r7, #12]
 800364a:	4413      	add	r3, r2
 800364c:	617b      	str	r3, [r7, #20]
 800364e:	e009      	b.n	8003664 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003650:	897a      	ldrh	r2, [r7, #10]
 8003652:	4613      	mov	r3, r2
 8003654:	009b      	lsls	r3, r3, #2
 8003656:	4413      	add	r3, r2
 8003658:	00db      	lsls	r3, r3, #3
 800365a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800365e:	68fa      	ldr	r2, [r7, #12]
 8003660:	4413      	add	r3, r2
 8003662:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003664:	893b      	ldrh	r3, [r7, #8]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d107      	bne.n	800367a <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800366a:	697b      	ldr	r3, [r7, #20]
 800366c:	2200      	movs	r2, #0
 800366e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	b29a      	uxth	r2, r3
 8003674:	697b      	ldr	r3, [r7, #20]
 8003676:	80da      	strh	r2, [r3, #6]
 8003678:	e00b      	b.n	8003692 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800367a:	697b      	ldr	r3, [r7, #20]
 800367c:	2201      	movs	r2, #1
 800367e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	b29a      	uxth	r2, r3
 8003684:	697b      	ldr	r3, [r7, #20]
 8003686:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	0c1b      	lsrs	r3, r3, #16
 800368c:	b29a      	uxth	r2, r3
 800368e:	697b      	ldr	r3, [r7, #20]
 8003690:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8003692:	2300      	movs	r3, #0
}
 8003694:	4618      	mov	r0, r3
 8003696:	371c      	adds	r7, #28
 8003698:	46bd      	mov	sp, r7
 800369a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369e:	4770      	bx	lr

080036a0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80036a0:	b480      	push	{r7}
 80036a2:	b085      	sub	sp, #20
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2201      	movs	r2, #1
 80036b2:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2200      	movs	r2, #0
 80036ba:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80036c4:	b29b      	uxth	r3, r3
 80036c6:	f043 0301 	orr.w	r3, r3, #1
 80036ca:	b29a      	uxth	r2, r3
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80036d8:	b29b      	uxth	r3, r3
 80036da:	f043 0302 	orr.w	r3, r3, #2
 80036de:	b29a      	uxth	r2, r3
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 80036e6:	2300      	movs	r3, #0
}
 80036e8:	4618      	mov	r0, r3
 80036ea:	3714      	adds	r7, #20
 80036ec:	46bd      	mov	sp, r7
 80036ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f2:	4770      	bx	lr

080036f4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80036f4:	b480      	push	{r7}
 80036f6:	b085      	sub	sp, #20
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d141      	bne.n	8003786 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003702:	4b4b      	ldr	r3, [pc, #300]	; (8003830 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800370a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800370e:	d131      	bne.n	8003774 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003710:	4b47      	ldr	r3, [pc, #284]	; (8003830 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003712:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003716:	4a46      	ldr	r2, [pc, #280]	; (8003830 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003718:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800371c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003720:	4b43      	ldr	r3, [pc, #268]	; (8003830 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003728:	4a41      	ldr	r2, [pc, #260]	; (8003830 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800372a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800372e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003730:	4b40      	ldr	r3, [pc, #256]	; (8003834 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	2232      	movs	r2, #50	; 0x32
 8003736:	fb02 f303 	mul.w	r3, r2, r3
 800373a:	4a3f      	ldr	r2, [pc, #252]	; (8003838 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800373c:	fba2 2303 	umull	r2, r3, r2, r3
 8003740:	0c9b      	lsrs	r3, r3, #18
 8003742:	3301      	adds	r3, #1
 8003744:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003746:	e002      	b.n	800374e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	3b01      	subs	r3, #1
 800374c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800374e:	4b38      	ldr	r3, [pc, #224]	; (8003830 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003750:	695b      	ldr	r3, [r3, #20]
 8003752:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003756:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800375a:	d102      	bne.n	8003762 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d1f2      	bne.n	8003748 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003762:	4b33      	ldr	r3, [pc, #204]	; (8003830 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003764:	695b      	ldr	r3, [r3, #20]
 8003766:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800376a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800376e:	d158      	bne.n	8003822 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003770:	2303      	movs	r3, #3
 8003772:	e057      	b.n	8003824 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003774:	4b2e      	ldr	r3, [pc, #184]	; (8003830 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003776:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800377a:	4a2d      	ldr	r2, [pc, #180]	; (8003830 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800377c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003780:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003784:	e04d      	b.n	8003822 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800378c:	d141      	bne.n	8003812 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800378e:	4b28      	ldr	r3, [pc, #160]	; (8003830 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003796:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800379a:	d131      	bne.n	8003800 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800379c:	4b24      	ldr	r3, [pc, #144]	; (8003830 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800379e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80037a2:	4a23      	ldr	r2, [pc, #140]	; (8003830 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037a8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80037ac:	4b20      	ldr	r3, [pc, #128]	; (8003830 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80037b4:	4a1e      	ldr	r2, [pc, #120]	; (8003830 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80037ba:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80037bc:	4b1d      	ldr	r3, [pc, #116]	; (8003834 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	2232      	movs	r2, #50	; 0x32
 80037c2:	fb02 f303 	mul.w	r3, r2, r3
 80037c6:	4a1c      	ldr	r2, [pc, #112]	; (8003838 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80037c8:	fba2 2303 	umull	r2, r3, r2, r3
 80037cc:	0c9b      	lsrs	r3, r3, #18
 80037ce:	3301      	adds	r3, #1
 80037d0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80037d2:	e002      	b.n	80037da <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	3b01      	subs	r3, #1
 80037d8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80037da:	4b15      	ldr	r3, [pc, #84]	; (8003830 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037dc:	695b      	ldr	r3, [r3, #20]
 80037de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037e6:	d102      	bne.n	80037ee <HAL_PWREx_ControlVoltageScaling+0xfa>
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d1f2      	bne.n	80037d4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80037ee:	4b10      	ldr	r3, [pc, #64]	; (8003830 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037f0:	695b      	ldr	r3, [r3, #20]
 80037f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037fa:	d112      	bne.n	8003822 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80037fc:	2303      	movs	r3, #3
 80037fe:	e011      	b.n	8003824 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003800:	4b0b      	ldr	r3, [pc, #44]	; (8003830 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003802:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003806:	4a0a      	ldr	r2, [pc, #40]	; (8003830 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003808:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800380c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003810:	e007      	b.n	8003822 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003812:	4b07      	ldr	r3, [pc, #28]	; (8003830 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800381a:	4a05      	ldr	r2, [pc, #20]	; (8003830 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800381c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003820:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003822:	2300      	movs	r3, #0
}
 8003824:	4618      	mov	r0, r3
 8003826:	3714      	adds	r7, #20
 8003828:	46bd      	mov	sp, r7
 800382a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382e:	4770      	bx	lr
 8003830:	40007000 	.word	0x40007000
 8003834:	20000000 	.word	0x20000000
 8003838:	431bde83 	.word	0x431bde83

0800383c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800383c:	b480      	push	{r7}
 800383e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003840:	4b05      	ldr	r3, [pc, #20]	; (8003858 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003842:	689b      	ldr	r3, [r3, #8]
 8003844:	4a04      	ldr	r2, [pc, #16]	; (8003858 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003846:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800384a:	6093      	str	r3, [r2, #8]
}
 800384c:	bf00      	nop
 800384e:	46bd      	mov	sp, r7
 8003850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003854:	4770      	bx	lr
 8003856:	bf00      	nop
 8003858:	40007000 	.word	0x40007000

0800385c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b088      	sub	sp, #32
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d101      	bne.n	800386e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800386a:	2301      	movs	r3, #1
 800386c:	e308      	b.n	8003e80 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f003 0301 	and.w	r3, r3, #1
 8003876:	2b00      	cmp	r3, #0
 8003878:	d075      	beq.n	8003966 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800387a:	4ba3      	ldr	r3, [pc, #652]	; (8003b08 <HAL_RCC_OscConfig+0x2ac>)
 800387c:	689b      	ldr	r3, [r3, #8]
 800387e:	f003 030c 	and.w	r3, r3, #12
 8003882:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003884:	4ba0      	ldr	r3, [pc, #640]	; (8003b08 <HAL_RCC_OscConfig+0x2ac>)
 8003886:	68db      	ldr	r3, [r3, #12]
 8003888:	f003 0303 	and.w	r3, r3, #3
 800388c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800388e:	69bb      	ldr	r3, [r7, #24]
 8003890:	2b0c      	cmp	r3, #12
 8003892:	d102      	bne.n	800389a <HAL_RCC_OscConfig+0x3e>
 8003894:	697b      	ldr	r3, [r7, #20]
 8003896:	2b03      	cmp	r3, #3
 8003898:	d002      	beq.n	80038a0 <HAL_RCC_OscConfig+0x44>
 800389a:	69bb      	ldr	r3, [r7, #24]
 800389c:	2b08      	cmp	r3, #8
 800389e:	d10b      	bne.n	80038b8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038a0:	4b99      	ldr	r3, [pc, #612]	; (8003b08 <HAL_RCC_OscConfig+0x2ac>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d05b      	beq.n	8003964 <HAL_RCC_OscConfig+0x108>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d157      	bne.n	8003964 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80038b4:	2301      	movs	r3, #1
 80038b6:	e2e3      	b.n	8003e80 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038c0:	d106      	bne.n	80038d0 <HAL_RCC_OscConfig+0x74>
 80038c2:	4b91      	ldr	r3, [pc, #580]	; (8003b08 <HAL_RCC_OscConfig+0x2ac>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a90      	ldr	r2, [pc, #576]	; (8003b08 <HAL_RCC_OscConfig+0x2ac>)
 80038c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038cc:	6013      	str	r3, [r2, #0]
 80038ce:	e01d      	b.n	800390c <HAL_RCC_OscConfig+0xb0>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80038d8:	d10c      	bne.n	80038f4 <HAL_RCC_OscConfig+0x98>
 80038da:	4b8b      	ldr	r3, [pc, #556]	; (8003b08 <HAL_RCC_OscConfig+0x2ac>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4a8a      	ldr	r2, [pc, #552]	; (8003b08 <HAL_RCC_OscConfig+0x2ac>)
 80038e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80038e4:	6013      	str	r3, [r2, #0]
 80038e6:	4b88      	ldr	r3, [pc, #544]	; (8003b08 <HAL_RCC_OscConfig+0x2ac>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4a87      	ldr	r2, [pc, #540]	; (8003b08 <HAL_RCC_OscConfig+0x2ac>)
 80038ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038f0:	6013      	str	r3, [r2, #0]
 80038f2:	e00b      	b.n	800390c <HAL_RCC_OscConfig+0xb0>
 80038f4:	4b84      	ldr	r3, [pc, #528]	; (8003b08 <HAL_RCC_OscConfig+0x2ac>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a83      	ldr	r2, [pc, #524]	; (8003b08 <HAL_RCC_OscConfig+0x2ac>)
 80038fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038fe:	6013      	str	r3, [r2, #0]
 8003900:	4b81      	ldr	r3, [pc, #516]	; (8003b08 <HAL_RCC_OscConfig+0x2ac>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a80      	ldr	r2, [pc, #512]	; (8003b08 <HAL_RCC_OscConfig+0x2ac>)
 8003906:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800390a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d013      	beq.n	800393c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003914:	f7fe f8b6 	bl	8001a84 <HAL_GetTick>
 8003918:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800391a:	e008      	b.n	800392e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800391c:	f7fe f8b2 	bl	8001a84 <HAL_GetTick>
 8003920:	4602      	mov	r2, r0
 8003922:	693b      	ldr	r3, [r7, #16]
 8003924:	1ad3      	subs	r3, r2, r3
 8003926:	2b64      	cmp	r3, #100	; 0x64
 8003928:	d901      	bls.n	800392e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800392a:	2303      	movs	r3, #3
 800392c:	e2a8      	b.n	8003e80 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800392e:	4b76      	ldr	r3, [pc, #472]	; (8003b08 <HAL_RCC_OscConfig+0x2ac>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003936:	2b00      	cmp	r3, #0
 8003938:	d0f0      	beq.n	800391c <HAL_RCC_OscConfig+0xc0>
 800393a:	e014      	b.n	8003966 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800393c:	f7fe f8a2 	bl	8001a84 <HAL_GetTick>
 8003940:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003942:	e008      	b.n	8003956 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003944:	f7fe f89e 	bl	8001a84 <HAL_GetTick>
 8003948:	4602      	mov	r2, r0
 800394a:	693b      	ldr	r3, [r7, #16]
 800394c:	1ad3      	subs	r3, r2, r3
 800394e:	2b64      	cmp	r3, #100	; 0x64
 8003950:	d901      	bls.n	8003956 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003952:	2303      	movs	r3, #3
 8003954:	e294      	b.n	8003e80 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003956:	4b6c      	ldr	r3, [pc, #432]	; (8003b08 <HAL_RCC_OscConfig+0x2ac>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800395e:	2b00      	cmp	r3, #0
 8003960:	d1f0      	bne.n	8003944 <HAL_RCC_OscConfig+0xe8>
 8003962:	e000      	b.n	8003966 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003964:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f003 0302 	and.w	r3, r3, #2
 800396e:	2b00      	cmp	r3, #0
 8003970:	d075      	beq.n	8003a5e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003972:	4b65      	ldr	r3, [pc, #404]	; (8003b08 <HAL_RCC_OscConfig+0x2ac>)
 8003974:	689b      	ldr	r3, [r3, #8]
 8003976:	f003 030c 	and.w	r3, r3, #12
 800397a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800397c:	4b62      	ldr	r3, [pc, #392]	; (8003b08 <HAL_RCC_OscConfig+0x2ac>)
 800397e:	68db      	ldr	r3, [r3, #12]
 8003980:	f003 0303 	and.w	r3, r3, #3
 8003984:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003986:	69bb      	ldr	r3, [r7, #24]
 8003988:	2b0c      	cmp	r3, #12
 800398a:	d102      	bne.n	8003992 <HAL_RCC_OscConfig+0x136>
 800398c:	697b      	ldr	r3, [r7, #20]
 800398e:	2b02      	cmp	r3, #2
 8003990:	d002      	beq.n	8003998 <HAL_RCC_OscConfig+0x13c>
 8003992:	69bb      	ldr	r3, [r7, #24]
 8003994:	2b04      	cmp	r3, #4
 8003996:	d11f      	bne.n	80039d8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003998:	4b5b      	ldr	r3, [pc, #364]	; (8003b08 <HAL_RCC_OscConfig+0x2ac>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d005      	beq.n	80039b0 <HAL_RCC_OscConfig+0x154>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	68db      	ldr	r3, [r3, #12]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d101      	bne.n	80039b0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80039ac:	2301      	movs	r3, #1
 80039ae:	e267      	b.n	8003e80 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039b0:	4b55      	ldr	r3, [pc, #340]	; (8003b08 <HAL_RCC_OscConfig+0x2ac>)
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	691b      	ldr	r3, [r3, #16]
 80039bc:	061b      	lsls	r3, r3, #24
 80039be:	4952      	ldr	r1, [pc, #328]	; (8003b08 <HAL_RCC_OscConfig+0x2ac>)
 80039c0:	4313      	orrs	r3, r2
 80039c2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80039c4:	4b51      	ldr	r3, [pc, #324]	; (8003b0c <HAL_RCC_OscConfig+0x2b0>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4618      	mov	r0, r3
 80039ca:	f7fe f80f 	bl	80019ec <HAL_InitTick>
 80039ce:	4603      	mov	r3, r0
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d043      	beq.n	8003a5c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80039d4:	2301      	movs	r3, #1
 80039d6:	e253      	b.n	8003e80 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	68db      	ldr	r3, [r3, #12]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d023      	beq.n	8003a28 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80039e0:	4b49      	ldr	r3, [pc, #292]	; (8003b08 <HAL_RCC_OscConfig+0x2ac>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a48      	ldr	r2, [pc, #288]	; (8003b08 <HAL_RCC_OscConfig+0x2ac>)
 80039e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039ec:	f7fe f84a 	bl	8001a84 <HAL_GetTick>
 80039f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80039f2:	e008      	b.n	8003a06 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039f4:	f7fe f846 	bl	8001a84 <HAL_GetTick>
 80039f8:	4602      	mov	r2, r0
 80039fa:	693b      	ldr	r3, [r7, #16]
 80039fc:	1ad3      	subs	r3, r2, r3
 80039fe:	2b02      	cmp	r3, #2
 8003a00:	d901      	bls.n	8003a06 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003a02:	2303      	movs	r3, #3
 8003a04:	e23c      	b.n	8003e80 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a06:	4b40      	ldr	r3, [pc, #256]	; (8003b08 <HAL_RCC_OscConfig+0x2ac>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d0f0      	beq.n	80039f4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a12:	4b3d      	ldr	r3, [pc, #244]	; (8003b08 <HAL_RCC_OscConfig+0x2ac>)
 8003a14:	685b      	ldr	r3, [r3, #4]
 8003a16:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	691b      	ldr	r3, [r3, #16]
 8003a1e:	061b      	lsls	r3, r3, #24
 8003a20:	4939      	ldr	r1, [pc, #228]	; (8003b08 <HAL_RCC_OscConfig+0x2ac>)
 8003a22:	4313      	orrs	r3, r2
 8003a24:	604b      	str	r3, [r1, #4]
 8003a26:	e01a      	b.n	8003a5e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a28:	4b37      	ldr	r3, [pc, #220]	; (8003b08 <HAL_RCC_OscConfig+0x2ac>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a36      	ldr	r2, [pc, #216]	; (8003b08 <HAL_RCC_OscConfig+0x2ac>)
 8003a2e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003a32:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a34:	f7fe f826 	bl	8001a84 <HAL_GetTick>
 8003a38:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003a3a:	e008      	b.n	8003a4e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a3c:	f7fe f822 	bl	8001a84 <HAL_GetTick>
 8003a40:	4602      	mov	r2, r0
 8003a42:	693b      	ldr	r3, [r7, #16]
 8003a44:	1ad3      	subs	r3, r2, r3
 8003a46:	2b02      	cmp	r3, #2
 8003a48:	d901      	bls.n	8003a4e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003a4a:	2303      	movs	r3, #3
 8003a4c:	e218      	b.n	8003e80 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003a4e:	4b2e      	ldr	r3, [pc, #184]	; (8003b08 <HAL_RCC_OscConfig+0x2ac>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d1f0      	bne.n	8003a3c <HAL_RCC_OscConfig+0x1e0>
 8003a5a:	e000      	b.n	8003a5e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a5c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f003 0308 	and.w	r3, r3, #8
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d03c      	beq.n	8003ae4 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	695b      	ldr	r3, [r3, #20]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d01c      	beq.n	8003aac <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a72:	4b25      	ldr	r3, [pc, #148]	; (8003b08 <HAL_RCC_OscConfig+0x2ac>)
 8003a74:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a78:	4a23      	ldr	r2, [pc, #140]	; (8003b08 <HAL_RCC_OscConfig+0x2ac>)
 8003a7a:	f043 0301 	orr.w	r3, r3, #1
 8003a7e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a82:	f7fd ffff 	bl	8001a84 <HAL_GetTick>
 8003a86:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003a88:	e008      	b.n	8003a9c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a8a:	f7fd fffb 	bl	8001a84 <HAL_GetTick>
 8003a8e:	4602      	mov	r2, r0
 8003a90:	693b      	ldr	r3, [r7, #16]
 8003a92:	1ad3      	subs	r3, r2, r3
 8003a94:	2b02      	cmp	r3, #2
 8003a96:	d901      	bls.n	8003a9c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003a98:	2303      	movs	r3, #3
 8003a9a:	e1f1      	b.n	8003e80 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003a9c:	4b1a      	ldr	r3, [pc, #104]	; (8003b08 <HAL_RCC_OscConfig+0x2ac>)
 8003a9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003aa2:	f003 0302 	and.w	r3, r3, #2
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d0ef      	beq.n	8003a8a <HAL_RCC_OscConfig+0x22e>
 8003aaa:	e01b      	b.n	8003ae4 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003aac:	4b16      	ldr	r3, [pc, #88]	; (8003b08 <HAL_RCC_OscConfig+0x2ac>)
 8003aae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ab2:	4a15      	ldr	r2, [pc, #84]	; (8003b08 <HAL_RCC_OscConfig+0x2ac>)
 8003ab4:	f023 0301 	bic.w	r3, r3, #1
 8003ab8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003abc:	f7fd ffe2 	bl	8001a84 <HAL_GetTick>
 8003ac0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003ac2:	e008      	b.n	8003ad6 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ac4:	f7fd ffde 	bl	8001a84 <HAL_GetTick>
 8003ac8:	4602      	mov	r2, r0
 8003aca:	693b      	ldr	r3, [r7, #16]
 8003acc:	1ad3      	subs	r3, r2, r3
 8003ace:	2b02      	cmp	r3, #2
 8003ad0:	d901      	bls.n	8003ad6 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8003ad2:	2303      	movs	r3, #3
 8003ad4:	e1d4      	b.n	8003e80 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003ad6:	4b0c      	ldr	r3, [pc, #48]	; (8003b08 <HAL_RCC_OscConfig+0x2ac>)
 8003ad8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003adc:	f003 0302 	and.w	r3, r3, #2
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d1ef      	bne.n	8003ac4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f003 0304 	and.w	r3, r3, #4
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	f000 80ab 	beq.w	8003c48 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003af2:	2300      	movs	r3, #0
 8003af4:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003af6:	4b04      	ldr	r3, [pc, #16]	; (8003b08 <HAL_RCC_OscConfig+0x2ac>)
 8003af8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003afa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d106      	bne.n	8003b10 <HAL_RCC_OscConfig+0x2b4>
 8003b02:	2301      	movs	r3, #1
 8003b04:	e005      	b.n	8003b12 <HAL_RCC_OscConfig+0x2b6>
 8003b06:	bf00      	nop
 8003b08:	40021000 	.word	0x40021000
 8003b0c:	20000004 	.word	0x20000004
 8003b10:	2300      	movs	r3, #0
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d00d      	beq.n	8003b32 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b16:	4baf      	ldr	r3, [pc, #700]	; (8003dd4 <HAL_RCC_OscConfig+0x578>)
 8003b18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b1a:	4aae      	ldr	r2, [pc, #696]	; (8003dd4 <HAL_RCC_OscConfig+0x578>)
 8003b1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b20:	6593      	str	r3, [r2, #88]	; 0x58
 8003b22:	4bac      	ldr	r3, [pc, #688]	; (8003dd4 <HAL_RCC_OscConfig+0x578>)
 8003b24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b2a:	60fb      	str	r3, [r7, #12]
 8003b2c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003b2e:	2301      	movs	r3, #1
 8003b30:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b32:	4ba9      	ldr	r3, [pc, #676]	; (8003dd8 <HAL_RCC_OscConfig+0x57c>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d118      	bne.n	8003b70 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003b3e:	4ba6      	ldr	r3, [pc, #664]	; (8003dd8 <HAL_RCC_OscConfig+0x57c>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4aa5      	ldr	r2, [pc, #660]	; (8003dd8 <HAL_RCC_OscConfig+0x57c>)
 8003b44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b48:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b4a:	f7fd ff9b 	bl	8001a84 <HAL_GetTick>
 8003b4e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b50:	e008      	b.n	8003b64 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b52:	f7fd ff97 	bl	8001a84 <HAL_GetTick>
 8003b56:	4602      	mov	r2, r0
 8003b58:	693b      	ldr	r3, [r7, #16]
 8003b5a:	1ad3      	subs	r3, r2, r3
 8003b5c:	2b02      	cmp	r3, #2
 8003b5e:	d901      	bls.n	8003b64 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003b60:	2303      	movs	r3, #3
 8003b62:	e18d      	b.n	8003e80 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b64:	4b9c      	ldr	r3, [pc, #624]	; (8003dd8 <HAL_RCC_OscConfig+0x57c>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d0f0      	beq.n	8003b52 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	689b      	ldr	r3, [r3, #8]
 8003b74:	2b01      	cmp	r3, #1
 8003b76:	d108      	bne.n	8003b8a <HAL_RCC_OscConfig+0x32e>
 8003b78:	4b96      	ldr	r3, [pc, #600]	; (8003dd4 <HAL_RCC_OscConfig+0x578>)
 8003b7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b7e:	4a95      	ldr	r2, [pc, #596]	; (8003dd4 <HAL_RCC_OscConfig+0x578>)
 8003b80:	f043 0301 	orr.w	r3, r3, #1
 8003b84:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003b88:	e024      	b.n	8003bd4 <HAL_RCC_OscConfig+0x378>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	689b      	ldr	r3, [r3, #8]
 8003b8e:	2b05      	cmp	r3, #5
 8003b90:	d110      	bne.n	8003bb4 <HAL_RCC_OscConfig+0x358>
 8003b92:	4b90      	ldr	r3, [pc, #576]	; (8003dd4 <HAL_RCC_OscConfig+0x578>)
 8003b94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b98:	4a8e      	ldr	r2, [pc, #568]	; (8003dd4 <HAL_RCC_OscConfig+0x578>)
 8003b9a:	f043 0304 	orr.w	r3, r3, #4
 8003b9e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003ba2:	4b8c      	ldr	r3, [pc, #560]	; (8003dd4 <HAL_RCC_OscConfig+0x578>)
 8003ba4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ba8:	4a8a      	ldr	r2, [pc, #552]	; (8003dd4 <HAL_RCC_OscConfig+0x578>)
 8003baa:	f043 0301 	orr.w	r3, r3, #1
 8003bae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003bb2:	e00f      	b.n	8003bd4 <HAL_RCC_OscConfig+0x378>
 8003bb4:	4b87      	ldr	r3, [pc, #540]	; (8003dd4 <HAL_RCC_OscConfig+0x578>)
 8003bb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bba:	4a86      	ldr	r2, [pc, #536]	; (8003dd4 <HAL_RCC_OscConfig+0x578>)
 8003bbc:	f023 0301 	bic.w	r3, r3, #1
 8003bc0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003bc4:	4b83      	ldr	r3, [pc, #524]	; (8003dd4 <HAL_RCC_OscConfig+0x578>)
 8003bc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bca:	4a82      	ldr	r2, [pc, #520]	; (8003dd4 <HAL_RCC_OscConfig+0x578>)
 8003bcc:	f023 0304 	bic.w	r3, r3, #4
 8003bd0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	689b      	ldr	r3, [r3, #8]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d016      	beq.n	8003c0a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bdc:	f7fd ff52 	bl	8001a84 <HAL_GetTick>
 8003be0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003be2:	e00a      	b.n	8003bfa <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003be4:	f7fd ff4e 	bl	8001a84 <HAL_GetTick>
 8003be8:	4602      	mov	r2, r0
 8003bea:	693b      	ldr	r3, [r7, #16]
 8003bec:	1ad3      	subs	r3, r2, r3
 8003bee:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d901      	bls.n	8003bfa <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003bf6:	2303      	movs	r3, #3
 8003bf8:	e142      	b.n	8003e80 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003bfa:	4b76      	ldr	r3, [pc, #472]	; (8003dd4 <HAL_RCC_OscConfig+0x578>)
 8003bfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c00:	f003 0302 	and.w	r3, r3, #2
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d0ed      	beq.n	8003be4 <HAL_RCC_OscConfig+0x388>
 8003c08:	e015      	b.n	8003c36 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c0a:	f7fd ff3b 	bl	8001a84 <HAL_GetTick>
 8003c0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003c10:	e00a      	b.n	8003c28 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c12:	f7fd ff37 	bl	8001a84 <HAL_GetTick>
 8003c16:	4602      	mov	r2, r0
 8003c18:	693b      	ldr	r3, [r7, #16]
 8003c1a:	1ad3      	subs	r3, r2, r3
 8003c1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d901      	bls.n	8003c28 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003c24:	2303      	movs	r3, #3
 8003c26:	e12b      	b.n	8003e80 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003c28:	4b6a      	ldr	r3, [pc, #424]	; (8003dd4 <HAL_RCC_OscConfig+0x578>)
 8003c2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c2e:	f003 0302 	and.w	r3, r3, #2
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d1ed      	bne.n	8003c12 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003c36:	7ffb      	ldrb	r3, [r7, #31]
 8003c38:	2b01      	cmp	r3, #1
 8003c3a:	d105      	bne.n	8003c48 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c3c:	4b65      	ldr	r3, [pc, #404]	; (8003dd4 <HAL_RCC_OscConfig+0x578>)
 8003c3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c40:	4a64      	ldr	r2, [pc, #400]	; (8003dd4 <HAL_RCC_OscConfig+0x578>)
 8003c42:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c46:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f003 0320 	and.w	r3, r3, #32
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d03c      	beq.n	8003cce <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	699b      	ldr	r3, [r3, #24]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d01c      	beq.n	8003c96 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003c5c:	4b5d      	ldr	r3, [pc, #372]	; (8003dd4 <HAL_RCC_OscConfig+0x578>)
 8003c5e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003c62:	4a5c      	ldr	r2, [pc, #368]	; (8003dd4 <HAL_RCC_OscConfig+0x578>)
 8003c64:	f043 0301 	orr.w	r3, r3, #1
 8003c68:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c6c:	f7fd ff0a 	bl	8001a84 <HAL_GetTick>
 8003c70:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003c72:	e008      	b.n	8003c86 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003c74:	f7fd ff06 	bl	8001a84 <HAL_GetTick>
 8003c78:	4602      	mov	r2, r0
 8003c7a:	693b      	ldr	r3, [r7, #16]
 8003c7c:	1ad3      	subs	r3, r2, r3
 8003c7e:	2b02      	cmp	r3, #2
 8003c80:	d901      	bls.n	8003c86 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003c82:	2303      	movs	r3, #3
 8003c84:	e0fc      	b.n	8003e80 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003c86:	4b53      	ldr	r3, [pc, #332]	; (8003dd4 <HAL_RCC_OscConfig+0x578>)
 8003c88:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003c8c:	f003 0302 	and.w	r3, r3, #2
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d0ef      	beq.n	8003c74 <HAL_RCC_OscConfig+0x418>
 8003c94:	e01b      	b.n	8003cce <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003c96:	4b4f      	ldr	r3, [pc, #316]	; (8003dd4 <HAL_RCC_OscConfig+0x578>)
 8003c98:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003c9c:	4a4d      	ldr	r2, [pc, #308]	; (8003dd4 <HAL_RCC_OscConfig+0x578>)
 8003c9e:	f023 0301 	bic.w	r3, r3, #1
 8003ca2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ca6:	f7fd feed 	bl	8001a84 <HAL_GetTick>
 8003caa:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003cac:	e008      	b.n	8003cc0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003cae:	f7fd fee9 	bl	8001a84 <HAL_GetTick>
 8003cb2:	4602      	mov	r2, r0
 8003cb4:	693b      	ldr	r3, [r7, #16]
 8003cb6:	1ad3      	subs	r3, r2, r3
 8003cb8:	2b02      	cmp	r3, #2
 8003cba:	d901      	bls.n	8003cc0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003cbc:	2303      	movs	r3, #3
 8003cbe:	e0df      	b.n	8003e80 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003cc0:	4b44      	ldr	r3, [pc, #272]	; (8003dd4 <HAL_RCC_OscConfig+0x578>)
 8003cc2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003cc6:	f003 0302 	and.w	r3, r3, #2
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d1ef      	bne.n	8003cae <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	69db      	ldr	r3, [r3, #28]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	f000 80d3 	beq.w	8003e7e <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003cd8:	4b3e      	ldr	r3, [pc, #248]	; (8003dd4 <HAL_RCC_OscConfig+0x578>)
 8003cda:	689b      	ldr	r3, [r3, #8]
 8003cdc:	f003 030c 	and.w	r3, r3, #12
 8003ce0:	2b0c      	cmp	r3, #12
 8003ce2:	f000 808d 	beq.w	8003e00 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	69db      	ldr	r3, [r3, #28]
 8003cea:	2b02      	cmp	r3, #2
 8003cec:	d15a      	bne.n	8003da4 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cee:	4b39      	ldr	r3, [pc, #228]	; (8003dd4 <HAL_RCC_OscConfig+0x578>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4a38      	ldr	r2, [pc, #224]	; (8003dd4 <HAL_RCC_OscConfig+0x578>)
 8003cf4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003cf8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cfa:	f7fd fec3 	bl	8001a84 <HAL_GetTick>
 8003cfe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d00:	e008      	b.n	8003d14 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d02:	f7fd febf 	bl	8001a84 <HAL_GetTick>
 8003d06:	4602      	mov	r2, r0
 8003d08:	693b      	ldr	r3, [r7, #16]
 8003d0a:	1ad3      	subs	r3, r2, r3
 8003d0c:	2b02      	cmp	r3, #2
 8003d0e:	d901      	bls.n	8003d14 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8003d10:	2303      	movs	r3, #3
 8003d12:	e0b5      	b.n	8003e80 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d14:	4b2f      	ldr	r3, [pc, #188]	; (8003dd4 <HAL_RCC_OscConfig+0x578>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d1f0      	bne.n	8003d02 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003d20:	4b2c      	ldr	r3, [pc, #176]	; (8003dd4 <HAL_RCC_OscConfig+0x578>)
 8003d22:	68da      	ldr	r2, [r3, #12]
 8003d24:	4b2d      	ldr	r3, [pc, #180]	; (8003ddc <HAL_RCC_OscConfig+0x580>)
 8003d26:	4013      	ands	r3, r2
 8003d28:	687a      	ldr	r2, [r7, #4]
 8003d2a:	6a11      	ldr	r1, [r2, #32]
 8003d2c:	687a      	ldr	r2, [r7, #4]
 8003d2e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003d30:	3a01      	subs	r2, #1
 8003d32:	0112      	lsls	r2, r2, #4
 8003d34:	4311      	orrs	r1, r2
 8003d36:	687a      	ldr	r2, [r7, #4]
 8003d38:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003d3a:	0212      	lsls	r2, r2, #8
 8003d3c:	4311      	orrs	r1, r2
 8003d3e:	687a      	ldr	r2, [r7, #4]
 8003d40:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003d42:	0852      	lsrs	r2, r2, #1
 8003d44:	3a01      	subs	r2, #1
 8003d46:	0552      	lsls	r2, r2, #21
 8003d48:	4311      	orrs	r1, r2
 8003d4a:	687a      	ldr	r2, [r7, #4]
 8003d4c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003d4e:	0852      	lsrs	r2, r2, #1
 8003d50:	3a01      	subs	r2, #1
 8003d52:	0652      	lsls	r2, r2, #25
 8003d54:	4311      	orrs	r1, r2
 8003d56:	687a      	ldr	r2, [r7, #4]
 8003d58:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003d5a:	06d2      	lsls	r2, r2, #27
 8003d5c:	430a      	orrs	r2, r1
 8003d5e:	491d      	ldr	r1, [pc, #116]	; (8003dd4 <HAL_RCC_OscConfig+0x578>)
 8003d60:	4313      	orrs	r3, r2
 8003d62:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d64:	4b1b      	ldr	r3, [pc, #108]	; (8003dd4 <HAL_RCC_OscConfig+0x578>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a1a      	ldr	r2, [pc, #104]	; (8003dd4 <HAL_RCC_OscConfig+0x578>)
 8003d6a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d6e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003d70:	4b18      	ldr	r3, [pc, #96]	; (8003dd4 <HAL_RCC_OscConfig+0x578>)
 8003d72:	68db      	ldr	r3, [r3, #12]
 8003d74:	4a17      	ldr	r2, [pc, #92]	; (8003dd4 <HAL_RCC_OscConfig+0x578>)
 8003d76:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d7a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d7c:	f7fd fe82 	bl	8001a84 <HAL_GetTick>
 8003d80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d82:	e008      	b.n	8003d96 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d84:	f7fd fe7e 	bl	8001a84 <HAL_GetTick>
 8003d88:	4602      	mov	r2, r0
 8003d8a:	693b      	ldr	r3, [r7, #16]
 8003d8c:	1ad3      	subs	r3, r2, r3
 8003d8e:	2b02      	cmp	r3, #2
 8003d90:	d901      	bls.n	8003d96 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8003d92:	2303      	movs	r3, #3
 8003d94:	e074      	b.n	8003e80 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d96:	4b0f      	ldr	r3, [pc, #60]	; (8003dd4 <HAL_RCC_OscConfig+0x578>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d0f0      	beq.n	8003d84 <HAL_RCC_OscConfig+0x528>
 8003da2:	e06c      	b.n	8003e7e <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003da4:	4b0b      	ldr	r3, [pc, #44]	; (8003dd4 <HAL_RCC_OscConfig+0x578>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a0a      	ldr	r2, [pc, #40]	; (8003dd4 <HAL_RCC_OscConfig+0x578>)
 8003daa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003dae:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003db0:	4b08      	ldr	r3, [pc, #32]	; (8003dd4 <HAL_RCC_OscConfig+0x578>)
 8003db2:	68db      	ldr	r3, [r3, #12]
 8003db4:	4a07      	ldr	r2, [pc, #28]	; (8003dd4 <HAL_RCC_OscConfig+0x578>)
 8003db6:	f023 0303 	bic.w	r3, r3, #3
 8003dba:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003dbc:	4b05      	ldr	r3, [pc, #20]	; (8003dd4 <HAL_RCC_OscConfig+0x578>)
 8003dbe:	68db      	ldr	r3, [r3, #12]
 8003dc0:	4a04      	ldr	r2, [pc, #16]	; (8003dd4 <HAL_RCC_OscConfig+0x578>)
 8003dc2:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003dc6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003dca:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dcc:	f7fd fe5a 	bl	8001a84 <HAL_GetTick>
 8003dd0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003dd2:	e00e      	b.n	8003df2 <HAL_RCC_OscConfig+0x596>
 8003dd4:	40021000 	.word	0x40021000
 8003dd8:	40007000 	.word	0x40007000
 8003ddc:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003de0:	f7fd fe50 	bl	8001a84 <HAL_GetTick>
 8003de4:	4602      	mov	r2, r0
 8003de6:	693b      	ldr	r3, [r7, #16]
 8003de8:	1ad3      	subs	r3, r2, r3
 8003dea:	2b02      	cmp	r3, #2
 8003dec:	d901      	bls.n	8003df2 <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8003dee:	2303      	movs	r3, #3
 8003df0:	e046      	b.n	8003e80 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003df2:	4b25      	ldr	r3, [pc, #148]	; (8003e88 <HAL_RCC_OscConfig+0x62c>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d1f0      	bne.n	8003de0 <HAL_RCC_OscConfig+0x584>
 8003dfe:	e03e      	b.n	8003e7e <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	69db      	ldr	r3, [r3, #28]
 8003e04:	2b01      	cmp	r3, #1
 8003e06:	d101      	bne.n	8003e0c <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8003e08:	2301      	movs	r3, #1
 8003e0a:	e039      	b.n	8003e80 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003e0c:	4b1e      	ldr	r3, [pc, #120]	; (8003e88 <HAL_RCC_OscConfig+0x62c>)
 8003e0e:	68db      	ldr	r3, [r3, #12]
 8003e10:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e12:	697b      	ldr	r3, [r7, #20]
 8003e14:	f003 0203 	and.w	r2, r3, #3
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6a1b      	ldr	r3, [r3, #32]
 8003e1c:	429a      	cmp	r2, r3
 8003e1e:	d12c      	bne.n	8003e7a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003e20:	697b      	ldr	r3, [r7, #20]
 8003e22:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e2a:	3b01      	subs	r3, #1
 8003e2c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e2e:	429a      	cmp	r2, r3
 8003e30:	d123      	bne.n	8003e7a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003e32:	697b      	ldr	r3, [r7, #20]
 8003e34:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e3c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003e3e:	429a      	cmp	r2, r3
 8003e40:	d11b      	bne.n	8003e7a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003e42:	697b      	ldr	r3, [r7, #20]
 8003e44:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e4c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003e4e:	429a      	cmp	r2, r3
 8003e50:	d113      	bne.n	8003e7a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003e52:	697b      	ldr	r3, [r7, #20]
 8003e54:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e5c:	085b      	lsrs	r3, r3, #1
 8003e5e:	3b01      	subs	r3, #1
 8003e60:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003e62:	429a      	cmp	r2, r3
 8003e64:	d109      	bne.n	8003e7a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003e66:	697b      	ldr	r3, [r7, #20]
 8003e68:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e70:	085b      	lsrs	r3, r3, #1
 8003e72:	3b01      	subs	r3, #1
 8003e74:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003e76:	429a      	cmp	r2, r3
 8003e78:	d001      	beq.n	8003e7e <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	e000      	b.n	8003e80 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 8003e7e:	2300      	movs	r3, #0
}
 8003e80:	4618      	mov	r0, r3
 8003e82:	3720      	adds	r7, #32
 8003e84:	46bd      	mov	sp, r7
 8003e86:	bd80      	pop	{r7, pc}
 8003e88:	40021000 	.word	0x40021000

08003e8c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b086      	sub	sp, #24
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
 8003e94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003e96:	2300      	movs	r3, #0
 8003e98:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d101      	bne.n	8003ea4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	e11e      	b.n	80040e2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003ea4:	4b91      	ldr	r3, [pc, #580]	; (80040ec <HAL_RCC_ClockConfig+0x260>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f003 030f 	and.w	r3, r3, #15
 8003eac:	683a      	ldr	r2, [r7, #0]
 8003eae:	429a      	cmp	r2, r3
 8003eb0:	d910      	bls.n	8003ed4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003eb2:	4b8e      	ldr	r3, [pc, #568]	; (80040ec <HAL_RCC_ClockConfig+0x260>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f023 020f 	bic.w	r2, r3, #15
 8003eba:	498c      	ldr	r1, [pc, #560]	; (80040ec <HAL_RCC_ClockConfig+0x260>)
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	4313      	orrs	r3, r2
 8003ec0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ec2:	4b8a      	ldr	r3, [pc, #552]	; (80040ec <HAL_RCC_ClockConfig+0x260>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f003 030f 	and.w	r3, r3, #15
 8003eca:	683a      	ldr	r2, [r7, #0]
 8003ecc:	429a      	cmp	r2, r3
 8003ece:	d001      	beq.n	8003ed4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	e106      	b.n	80040e2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f003 0301 	and.w	r3, r3, #1
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d073      	beq.n	8003fc8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	685b      	ldr	r3, [r3, #4]
 8003ee4:	2b03      	cmp	r3, #3
 8003ee6:	d129      	bne.n	8003f3c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ee8:	4b81      	ldr	r3, [pc, #516]	; (80040f0 <HAL_RCC_ClockConfig+0x264>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d101      	bne.n	8003ef8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	e0f4      	b.n	80040e2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003ef8:	f000 f966 	bl	80041c8 <RCC_GetSysClockFreqFromPLLSource>
 8003efc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003efe:	693b      	ldr	r3, [r7, #16]
 8003f00:	4a7c      	ldr	r2, [pc, #496]	; (80040f4 <HAL_RCC_ClockConfig+0x268>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d93f      	bls.n	8003f86 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003f06:	4b7a      	ldr	r3, [pc, #488]	; (80040f0 <HAL_RCC_ClockConfig+0x264>)
 8003f08:	689b      	ldr	r3, [r3, #8]
 8003f0a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d009      	beq.n	8003f26 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d033      	beq.n	8003f86 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d12f      	bne.n	8003f86 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003f26:	4b72      	ldr	r3, [pc, #456]	; (80040f0 <HAL_RCC_ClockConfig+0x264>)
 8003f28:	689b      	ldr	r3, [r3, #8]
 8003f2a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003f2e:	4a70      	ldr	r2, [pc, #448]	; (80040f0 <HAL_RCC_ClockConfig+0x264>)
 8003f30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f34:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003f36:	2380      	movs	r3, #128	; 0x80
 8003f38:	617b      	str	r3, [r7, #20]
 8003f3a:	e024      	b.n	8003f86 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	685b      	ldr	r3, [r3, #4]
 8003f40:	2b02      	cmp	r3, #2
 8003f42:	d107      	bne.n	8003f54 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003f44:	4b6a      	ldr	r3, [pc, #424]	; (80040f0 <HAL_RCC_ClockConfig+0x264>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d109      	bne.n	8003f64 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003f50:	2301      	movs	r3, #1
 8003f52:	e0c6      	b.n	80040e2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003f54:	4b66      	ldr	r3, [pc, #408]	; (80040f0 <HAL_RCC_ClockConfig+0x264>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d101      	bne.n	8003f64 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003f60:	2301      	movs	r3, #1
 8003f62:	e0be      	b.n	80040e2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003f64:	f000 f8ce 	bl	8004104 <HAL_RCC_GetSysClockFreq>
 8003f68:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003f6a:	693b      	ldr	r3, [r7, #16]
 8003f6c:	4a61      	ldr	r2, [pc, #388]	; (80040f4 <HAL_RCC_ClockConfig+0x268>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d909      	bls.n	8003f86 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003f72:	4b5f      	ldr	r3, [pc, #380]	; (80040f0 <HAL_RCC_ClockConfig+0x264>)
 8003f74:	689b      	ldr	r3, [r3, #8]
 8003f76:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003f7a:	4a5d      	ldr	r2, [pc, #372]	; (80040f0 <HAL_RCC_ClockConfig+0x264>)
 8003f7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f80:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003f82:	2380      	movs	r3, #128	; 0x80
 8003f84:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003f86:	4b5a      	ldr	r3, [pc, #360]	; (80040f0 <HAL_RCC_ClockConfig+0x264>)
 8003f88:	689b      	ldr	r3, [r3, #8]
 8003f8a:	f023 0203 	bic.w	r2, r3, #3
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	685b      	ldr	r3, [r3, #4]
 8003f92:	4957      	ldr	r1, [pc, #348]	; (80040f0 <HAL_RCC_ClockConfig+0x264>)
 8003f94:	4313      	orrs	r3, r2
 8003f96:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f98:	f7fd fd74 	bl	8001a84 <HAL_GetTick>
 8003f9c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f9e:	e00a      	b.n	8003fb6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003fa0:	f7fd fd70 	bl	8001a84 <HAL_GetTick>
 8003fa4:	4602      	mov	r2, r0
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	1ad3      	subs	r3, r2, r3
 8003faa:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d901      	bls.n	8003fb6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003fb2:	2303      	movs	r3, #3
 8003fb4:	e095      	b.n	80040e2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fb6:	4b4e      	ldr	r3, [pc, #312]	; (80040f0 <HAL_RCC_ClockConfig+0x264>)
 8003fb8:	689b      	ldr	r3, [r3, #8]
 8003fba:	f003 020c 	and.w	r2, r3, #12
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	685b      	ldr	r3, [r3, #4]
 8003fc2:	009b      	lsls	r3, r3, #2
 8003fc4:	429a      	cmp	r2, r3
 8003fc6:	d1eb      	bne.n	8003fa0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f003 0302 	and.w	r3, r3, #2
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d023      	beq.n	800401c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f003 0304 	and.w	r3, r3, #4
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d005      	beq.n	8003fec <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003fe0:	4b43      	ldr	r3, [pc, #268]	; (80040f0 <HAL_RCC_ClockConfig+0x264>)
 8003fe2:	689b      	ldr	r3, [r3, #8]
 8003fe4:	4a42      	ldr	r2, [pc, #264]	; (80040f0 <HAL_RCC_ClockConfig+0x264>)
 8003fe6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003fea:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f003 0308 	and.w	r3, r3, #8
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d007      	beq.n	8004008 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003ff8:	4b3d      	ldr	r3, [pc, #244]	; (80040f0 <HAL_RCC_ClockConfig+0x264>)
 8003ffa:	689b      	ldr	r3, [r3, #8]
 8003ffc:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004000:	4a3b      	ldr	r2, [pc, #236]	; (80040f0 <HAL_RCC_ClockConfig+0x264>)
 8004002:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004006:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004008:	4b39      	ldr	r3, [pc, #228]	; (80040f0 <HAL_RCC_ClockConfig+0x264>)
 800400a:	689b      	ldr	r3, [r3, #8]
 800400c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	689b      	ldr	r3, [r3, #8]
 8004014:	4936      	ldr	r1, [pc, #216]	; (80040f0 <HAL_RCC_ClockConfig+0x264>)
 8004016:	4313      	orrs	r3, r2
 8004018:	608b      	str	r3, [r1, #8]
 800401a:	e008      	b.n	800402e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800401c:	697b      	ldr	r3, [r7, #20]
 800401e:	2b80      	cmp	r3, #128	; 0x80
 8004020:	d105      	bne.n	800402e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004022:	4b33      	ldr	r3, [pc, #204]	; (80040f0 <HAL_RCC_ClockConfig+0x264>)
 8004024:	689b      	ldr	r3, [r3, #8]
 8004026:	4a32      	ldr	r2, [pc, #200]	; (80040f0 <HAL_RCC_ClockConfig+0x264>)
 8004028:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800402c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800402e:	4b2f      	ldr	r3, [pc, #188]	; (80040ec <HAL_RCC_ClockConfig+0x260>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f003 030f 	and.w	r3, r3, #15
 8004036:	683a      	ldr	r2, [r7, #0]
 8004038:	429a      	cmp	r2, r3
 800403a:	d21d      	bcs.n	8004078 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800403c:	4b2b      	ldr	r3, [pc, #172]	; (80040ec <HAL_RCC_ClockConfig+0x260>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f023 020f 	bic.w	r2, r3, #15
 8004044:	4929      	ldr	r1, [pc, #164]	; (80040ec <HAL_RCC_ClockConfig+0x260>)
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	4313      	orrs	r3, r2
 800404a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800404c:	f7fd fd1a 	bl	8001a84 <HAL_GetTick>
 8004050:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004052:	e00a      	b.n	800406a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004054:	f7fd fd16 	bl	8001a84 <HAL_GetTick>
 8004058:	4602      	mov	r2, r0
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	1ad3      	subs	r3, r2, r3
 800405e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004062:	4293      	cmp	r3, r2
 8004064:	d901      	bls.n	800406a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004066:	2303      	movs	r3, #3
 8004068:	e03b      	b.n	80040e2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800406a:	4b20      	ldr	r3, [pc, #128]	; (80040ec <HAL_RCC_ClockConfig+0x260>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f003 030f 	and.w	r3, r3, #15
 8004072:	683a      	ldr	r2, [r7, #0]
 8004074:	429a      	cmp	r2, r3
 8004076:	d1ed      	bne.n	8004054 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f003 0304 	and.w	r3, r3, #4
 8004080:	2b00      	cmp	r3, #0
 8004082:	d008      	beq.n	8004096 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004084:	4b1a      	ldr	r3, [pc, #104]	; (80040f0 <HAL_RCC_ClockConfig+0x264>)
 8004086:	689b      	ldr	r3, [r3, #8]
 8004088:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	68db      	ldr	r3, [r3, #12]
 8004090:	4917      	ldr	r1, [pc, #92]	; (80040f0 <HAL_RCC_ClockConfig+0x264>)
 8004092:	4313      	orrs	r3, r2
 8004094:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f003 0308 	and.w	r3, r3, #8
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d009      	beq.n	80040b6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80040a2:	4b13      	ldr	r3, [pc, #76]	; (80040f0 <HAL_RCC_ClockConfig+0x264>)
 80040a4:	689b      	ldr	r3, [r3, #8]
 80040a6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	691b      	ldr	r3, [r3, #16]
 80040ae:	00db      	lsls	r3, r3, #3
 80040b0:	490f      	ldr	r1, [pc, #60]	; (80040f0 <HAL_RCC_ClockConfig+0x264>)
 80040b2:	4313      	orrs	r3, r2
 80040b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80040b6:	f000 f825 	bl	8004104 <HAL_RCC_GetSysClockFreq>
 80040ba:	4601      	mov	r1, r0
 80040bc:	4b0c      	ldr	r3, [pc, #48]	; (80040f0 <HAL_RCC_ClockConfig+0x264>)
 80040be:	689b      	ldr	r3, [r3, #8]
 80040c0:	091b      	lsrs	r3, r3, #4
 80040c2:	f003 030f 	and.w	r3, r3, #15
 80040c6:	4a0c      	ldr	r2, [pc, #48]	; (80040f8 <HAL_RCC_ClockConfig+0x26c>)
 80040c8:	5cd3      	ldrb	r3, [r2, r3]
 80040ca:	f003 031f 	and.w	r3, r3, #31
 80040ce:	fa21 f303 	lsr.w	r3, r1, r3
 80040d2:	4a0a      	ldr	r2, [pc, #40]	; (80040fc <HAL_RCC_ClockConfig+0x270>)
 80040d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80040d6:	4b0a      	ldr	r3, [pc, #40]	; (8004100 <HAL_RCC_ClockConfig+0x274>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	4618      	mov	r0, r3
 80040dc:	f7fd fc86 	bl	80019ec <HAL_InitTick>
 80040e0:	4603      	mov	r3, r0
}
 80040e2:	4618      	mov	r0, r3
 80040e4:	3718      	adds	r7, #24
 80040e6:	46bd      	mov	sp, r7
 80040e8:	bd80      	pop	{r7, pc}
 80040ea:	bf00      	nop
 80040ec:	40022000 	.word	0x40022000
 80040f0:	40021000 	.word	0x40021000
 80040f4:	04c4b400 	.word	0x04c4b400
 80040f8:	08009bc8 	.word	0x08009bc8
 80040fc:	20000000 	.word	0x20000000
 8004100:	20000004 	.word	0x20000004

08004104 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004104:	b480      	push	{r7}
 8004106:	b087      	sub	sp, #28
 8004108:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800410a:	4b2c      	ldr	r3, [pc, #176]	; (80041bc <HAL_RCC_GetSysClockFreq+0xb8>)
 800410c:	689b      	ldr	r3, [r3, #8]
 800410e:	f003 030c 	and.w	r3, r3, #12
 8004112:	2b04      	cmp	r3, #4
 8004114:	d102      	bne.n	800411c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004116:	4b2a      	ldr	r3, [pc, #168]	; (80041c0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004118:	613b      	str	r3, [r7, #16]
 800411a:	e047      	b.n	80041ac <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800411c:	4b27      	ldr	r3, [pc, #156]	; (80041bc <HAL_RCC_GetSysClockFreq+0xb8>)
 800411e:	689b      	ldr	r3, [r3, #8]
 8004120:	f003 030c 	and.w	r3, r3, #12
 8004124:	2b08      	cmp	r3, #8
 8004126:	d102      	bne.n	800412e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004128:	4b26      	ldr	r3, [pc, #152]	; (80041c4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800412a:	613b      	str	r3, [r7, #16]
 800412c:	e03e      	b.n	80041ac <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800412e:	4b23      	ldr	r3, [pc, #140]	; (80041bc <HAL_RCC_GetSysClockFreq+0xb8>)
 8004130:	689b      	ldr	r3, [r3, #8]
 8004132:	f003 030c 	and.w	r3, r3, #12
 8004136:	2b0c      	cmp	r3, #12
 8004138:	d136      	bne.n	80041a8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800413a:	4b20      	ldr	r3, [pc, #128]	; (80041bc <HAL_RCC_GetSysClockFreq+0xb8>)
 800413c:	68db      	ldr	r3, [r3, #12]
 800413e:	f003 0303 	and.w	r3, r3, #3
 8004142:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004144:	4b1d      	ldr	r3, [pc, #116]	; (80041bc <HAL_RCC_GetSysClockFreq+0xb8>)
 8004146:	68db      	ldr	r3, [r3, #12]
 8004148:	091b      	lsrs	r3, r3, #4
 800414a:	f003 030f 	and.w	r3, r3, #15
 800414e:	3301      	adds	r3, #1
 8004150:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	2b03      	cmp	r3, #3
 8004156:	d10c      	bne.n	8004172 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004158:	4a1a      	ldr	r2, [pc, #104]	; (80041c4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800415a:	68bb      	ldr	r3, [r7, #8]
 800415c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004160:	4a16      	ldr	r2, [pc, #88]	; (80041bc <HAL_RCC_GetSysClockFreq+0xb8>)
 8004162:	68d2      	ldr	r2, [r2, #12]
 8004164:	0a12      	lsrs	r2, r2, #8
 8004166:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800416a:	fb02 f303 	mul.w	r3, r2, r3
 800416e:	617b      	str	r3, [r7, #20]
      break;
 8004170:	e00c      	b.n	800418c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004172:	4a13      	ldr	r2, [pc, #76]	; (80041c0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004174:	68bb      	ldr	r3, [r7, #8]
 8004176:	fbb2 f3f3 	udiv	r3, r2, r3
 800417a:	4a10      	ldr	r2, [pc, #64]	; (80041bc <HAL_RCC_GetSysClockFreq+0xb8>)
 800417c:	68d2      	ldr	r2, [r2, #12]
 800417e:	0a12      	lsrs	r2, r2, #8
 8004180:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004184:	fb02 f303 	mul.w	r3, r2, r3
 8004188:	617b      	str	r3, [r7, #20]
      break;
 800418a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800418c:	4b0b      	ldr	r3, [pc, #44]	; (80041bc <HAL_RCC_GetSysClockFreq+0xb8>)
 800418e:	68db      	ldr	r3, [r3, #12]
 8004190:	0e5b      	lsrs	r3, r3, #25
 8004192:	f003 0303 	and.w	r3, r3, #3
 8004196:	3301      	adds	r3, #1
 8004198:	005b      	lsls	r3, r3, #1
 800419a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800419c:	697a      	ldr	r2, [r7, #20]
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80041a4:	613b      	str	r3, [r7, #16]
 80041a6:	e001      	b.n	80041ac <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80041a8:	2300      	movs	r3, #0
 80041aa:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80041ac:	693b      	ldr	r3, [r7, #16]
}
 80041ae:	4618      	mov	r0, r3
 80041b0:	371c      	adds	r7, #28
 80041b2:	46bd      	mov	sp, r7
 80041b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b8:	4770      	bx	lr
 80041ba:	bf00      	nop
 80041bc:	40021000 	.word	0x40021000
 80041c0:	00f42400 	.word	0x00f42400
 80041c4:	007a1200 	.word	0x007a1200

080041c8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80041c8:	b480      	push	{r7}
 80041ca:	b087      	sub	sp, #28
 80041cc:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80041ce:	4b1e      	ldr	r3, [pc, #120]	; (8004248 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80041d0:	68db      	ldr	r3, [r3, #12]
 80041d2:	f003 0303 	and.w	r3, r3, #3
 80041d6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80041d8:	4b1b      	ldr	r3, [pc, #108]	; (8004248 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80041da:	68db      	ldr	r3, [r3, #12]
 80041dc:	091b      	lsrs	r3, r3, #4
 80041de:	f003 030f 	and.w	r3, r3, #15
 80041e2:	3301      	adds	r3, #1
 80041e4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80041e6:	693b      	ldr	r3, [r7, #16]
 80041e8:	2b03      	cmp	r3, #3
 80041ea:	d10c      	bne.n	8004206 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80041ec:	4a17      	ldr	r2, [pc, #92]	; (800424c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80041f4:	4a14      	ldr	r2, [pc, #80]	; (8004248 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80041f6:	68d2      	ldr	r2, [r2, #12]
 80041f8:	0a12      	lsrs	r2, r2, #8
 80041fa:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80041fe:	fb02 f303 	mul.w	r3, r2, r3
 8004202:	617b      	str	r3, [r7, #20]
    break;
 8004204:	e00c      	b.n	8004220 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004206:	4a12      	ldr	r2, [pc, #72]	; (8004250 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	fbb2 f3f3 	udiv	r3, r2, r3
 800420e:	4a0e      	ldr	r2, [pc, #56]	; (8004248 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004210:	68d2      	ldr	r2, [r2, #12]
 8004212:	0a12      	lsrs	r2, r2, #8
 8004214:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004218:	fb02 f303 	mul.w	r3, r2, r3
 800421c:	617b      	str	r3, [r7, #20]
    break;
 800421e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004220:	4b09      	ldr	r3, [pc, #36]	; (8004248 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004222:	68db      	ldr	r3, [r3, #12]
 8004224:	0e5b      	lsrs	r3, r3, #25
 8004226:	f003 0303 	and.w	r3, r3, #3
 800422a:	3301      	adds	r3, #1
 800422c:	005b      	lsls	r3, r3, #1
 800422e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004230:	697a      	ldr	r2, [r7, #20]
 8004232:	68bb      	ldr	r3, [r7, #8]
 8004234:	fbb2 f3f3 	udiv	r3, r2, r3
 8004238:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800423a:	687b      	ldr	r3, [r7, #4]
}
 800423c:	4618      	mov	r0, r3
 800423e:	371c      	adds	r7, #28
 8004240:	46bd      	mov	sp, r7
 8004242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004246:	4770      	bx	lr
 8004248:	40021000 	.word	0x40021000
 800424c:	007a1200 	.word	0x007a1200
 8004250:	00f42400 	.word	0x00f42400

08004254 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b086      	sub	sp, #24
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800425c:	2300      	movs	r3, #0
 800425e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004260:	2300      	movs	r3, #0
 8004262:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800426c:	2b00      	cmp	r3, #0
 800426e:	f000 8098 	beq.w	80043a2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004272:	2300      	movs	r3, #0
 8004274:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004276:	4b43      	ldr	r3, [pc, #268]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004278:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800427a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800427e:	2b00      	cmp	r3, #0
 8004280:	d10d      	bne.n	800429e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004282:	4b40      	ldr	r3, [pc, #256]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004284:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004286:	4a3f      	ldr	r2, [pc, #252]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004288:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800428c:	6593      	str	r3, [r2, #88]	; 0x58
 800428e:	4b3d      	ldr	r3, [pc, #244]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004290:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004292:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004296:	60bb      	str	r3, [r7, #8]
 8004298:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800429a:	2301      	movs	r3, #1
 800429c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800429e:	4b3a      	ldr	r3, [pc, #232]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4a39      	ldr	r2, [pc, #228]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80042a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042a8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80042aa:	f7fd fbeb 	bl	8001a84 <HAL_GetTick>
 80042ae:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80042b0:	e009      	b.n	80042c6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042b2:	f7fd fbe7 	bl	8001a84 <HAL_GetTick>
 80042b6:	4602      	mov	r2, r0
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	1ad3      	subs	r3, r2, r3
 80042bc:	2b02      	cmp	r3, #2
 80042be:	d902      	bls.n	80042c6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80042c0:	2303      	movs	r3, #3
 80042c2:	74fb      	strb	r3, [r7, #19]
        break;
 80042c4:	e005      	b.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80042c6:	4b30      	ldr	r3, [pc, #192]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d0ef      	beq.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80042d2:	7cfb      	ldrb	r3, [r7, #19]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d159      	bne.n	800438c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80042d8:	4b2a      	ldr	r3, [pc, #168]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80042da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042e2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80042e4:	697b      	ldr	r3, [r7, #20]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d01e      	beq.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ee:	697a      	ldr	r2, [r7, #20]
 80042f0:	429a      	cmp	r2, r3
 80042f2:	d019      	beq.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80042f4:	4b23      	ldr	r3, [pc, #140]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80042f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042fe:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004300:	4b20      	ldr	r3, [pc, #128]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004302:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004306:	4a1f      	ldr	r2, [pc, #124]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004308:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800430c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004310:	4b1c      	ldr	r3, [pc, #112]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004312:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004316:	4a1b      	ldr	r2, [pc, #108]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004318:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800431c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004320:	4a18      	ldr	r2, [pc, #96]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004322:	697b      	ldr	r3, [r7, #20]
 8004324:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004328:	697b      	ldr	r3, [r7, #20]
 800432a:	f003 0301 	and.w	r3, r3, #1
 800432e:	2b00      	cmp	r3, #0
 8004330:	d016      	beq.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004332:	f7fd fba7 	bl	8001a84 <HAL_GetTick>
 8004336:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004338:	e00b      	b.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800433a:	f7fd fba3 	bl	8001a84 <HAL_GetTick>
 800433e:	4602      	mov	r2, r0
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	1ad3      	subs	r3, r2, r3
 8004344:	f241 3288 	movw	r2, #5000	; 0x1388
 8004348:	4293      	cmp	r3, r2
 800434a:	d902      	bls.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800434c:	2303      	movs	r3, #3
 800434e:	74fb      	strb	r3, [r7, #19]
            break;
 8004350:	e006      	b.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004352:	4b0c      	ldr	r3, [pc, #48]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004354:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004358:	f003 0302 	and.w	r3, r3, #2
 800435c:	2b00      	cmp	r3, #0
 800435e:	d0ec      	beq.n	800433a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004360:	7cfb      	ldrb	r3, [r7, #19]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d10b      	bne.n	800437e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004366:	4b07      	ldr	r3, [pc, #28]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004368:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800436c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004374:	4903      	ldr	r1, [pc, #12]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004376:	4313      	orrs	r3, r2
 8004378:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800437c:	e008      	b.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800437e:	7cfb      	ldrb	r3, [r7, #19]
 8004380:	74bb      	strb	r3, [r7, #18]
 8004382:	e005      	b.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004384:	40021000 	.word	0x40021000
 8004388:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800438c:	7cfb      	ldrb	r3, [r7, #19]
 800438e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004390:	7c7b      	ldrb	r3, [r7, #17]
 8004392:	2b01      	cmp	r3, #1
 8004394:	d105      	bne.n	80043a2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004396:	4ba6      	ldr	r3, [pc, #664]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004398:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800439a:	4aa5      	ldr	r2, [pc, #660]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800439c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80043a0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f003 0301 	and.w	r3, r3, #1
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d00a      	beq.n	80043c4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80043ae:	4ba0      	ldr	r3, [pc, #640]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80043b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043b4:	f023 0203 	bic.w	r2, r3, #3
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	685b      	ldr	r3, [r3, #4]
 80043bc:	499c      	ldr	r1, [pc, #624]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80043be:	4313      	orrs	r3, r2
 80043c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f003 0302 	and.w	r3, r3, #2
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d00a      	beq.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80043d0:	4b97      	ldr	r3, [pc, #604]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80043d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043d6:	f023 020c 	bic.w	r2, r3, #12
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	689b      	ldr	r3, [r3, #8]
 80043de:	4994      	ldr	r1, [pc, #592]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80043e0:	4313      	orrs	r3, r2
 80043e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f003 0304 	and.w	r3, r3, #4
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d00a      	beq.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80043f2:	4b8f      	ldr	r3, [pc, #572]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80043f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043f8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	68db      	ldr	r3, [r3, #12]
 8004400:	498b      	ldr	r1, [pc, #556]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004402:	4313      	orrs	r3, r2
 8004404:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f003 0308 	and.w	r3, r3, #8
 8004410:	2b00      	cmp	r3, #0
 8004412:	d00a      	beq.n	800442a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004414:	4b86      	ldr	r3, [pc, #536]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004416:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800441a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	691b      	ldr	r3, [r3, #16]
 8004422:	4983      	ldr	r1, [pc, #524]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004424:	4313      	orrs	r3, r2
 8004426:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f003 0320 	and.w	r3, r3, #32
 8004432:	2b00      	cmp	r3, #0
 8004434:	d00a      	beq.n	800444c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004436:	4b7e      	ldr	r3, [pc, #504]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004438:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800443c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	695b      	ldr	r3, [r3, #20]
 8004444:	497a      	ldr	r1, [pc, #488]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004446:	4313      	orrs	r3, r2
 8004448:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004454:	2b00      	cmp	r3, #0
 8004456:	d00a      	beq.n	800446e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004458:	4b75      	ldr	r3, [pc, #468]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800445a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800445e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	699b      	ldr	r3, [r3, #24]
 8004466:	4972      	ldr	r1, [pc, #456]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004468:	4313      	orrs	r3, r2
 800446a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004476:	2b00      	cmp	r3, #0
 8004478:	d00a      	beq.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800447a:	4b6d      	ldr	r3, [pc, #436]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800447c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004480:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	69db      	ldr	r3, [r3, #28]
 8004488:	4969      	ldr	r1, [pc, #420]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800448a:	4313      	orrs	r3, r2
 800448c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004498:	2b00      	cmp	r3, #0
 800449a:	d00a      	beq.n	80044b2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800449c:	4b64      	ldr	r3, [pc, #400]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800449e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044a2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6a1b      	ldr	r3, [r3, #32]
 80044aa:	4961      	ldr	r1, [pc, #388]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80044ac:	4313      	orrs	r3, r2
 80044ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d00a      	beq.n	80044d4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80044be:	4b5c      	ldr	r3, [pc, #368]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80044c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044c4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044cc:	4958      	ldr	r1, [pc, #352]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80044ce:	4313      	orrs	r3, r2
 80044d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d015      	beq.n	800450c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80044e0:	4b53      	ldr	r3, [pc, #332]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80044e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044e6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044ee:	4950      	ldr	r1, [pc, #320]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80044f0:	4313      	orrs	r3, r2
 80044f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80044fe:	d105      	bne.n	800450c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004500:	4b4b      	ldr	r3, [pc, #300]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004502:	68db      	ldr	r3, [r3, #12]
 8004504:	4a4a      	ldr	r2, [pc, #296]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004506:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800450a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004514:	2b00      	cmp	r3, #0
 8004516:	d015      	beq.n	8004544 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004518:	4b45      	ldr	r3, [pc, #276]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800451a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800451e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004526:	4942      	ldr	r1, [pc, #264]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004528:	4313      	orrs	r3, r2
 800452a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004532:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004536:	d105      	bne.n	8004544 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004538:	4b3d      	ldr	r3, [pc, #244]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800453a:	68db      	ldr	r3, [r3, #12]
 800453c:	4a3c      	ldr	r2, [pc, #240]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800453e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004542:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800454c:	2b00      	cmp	r3, #0
 800454e:	d015      	beq.n	800457c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004550:	4b37      	ldr	r3, [pc, #220]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004552:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004556:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800455e:	4934      	ldr	r1, [pc, #208]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004560:	4313      	orrs	r3, r2
 8004562:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800456a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800456e:	d105      	bne.n	800457c <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004570:	4b2f      	ldr	r3, [pc, #188]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004572:	68db      	ldr	r3, [r3, #12]
 8004574:	4a2e      	ldr	r2, [pc, #184]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004576:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800457a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004584:	2b00      	cmp	r3, #0
 8004586:	d015      	beq.n	80045b4 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004588:	4b29      	ldr	r3, [pc, #164]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800458a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800458e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004596:	4926      	ldr	r1, [pc, #152]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004598:	4313      	orrs	r3, r2
 800459a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045a2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80045a6:	d105      	bne.n	80045b4 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80045a8:	4b21      	ldr	r3, [pc, #132]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80045aa:	68db      	ldr	r3, [r3, #12]
 80045ac:	4a20      	ldr	r2, [pc, #128]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80045ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80045b2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d015      	beq.n	80045ec <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80045c0:	4b1b      	ldr	r3, [pc, #108]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80045c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045c6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045ce:	4918      	ldr	r1, [pc, #96]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80045d0:	4313      	orrs	r3, r2
 80045d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045da:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80045de:	d105      	bne.n	80045ec <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80045e0:	4b13      	ldr	r3, [pc, #76]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80045e2:	68db      	ldr	r3, [r3, #12]
 80045e4:	4a12      	ldr	r2, [pc, #72]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80045e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80045ea:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d015      	beq.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80045f8:	4b0d      	ldr	r3, [pc, #52]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80045fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045fe:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004606:	490a      	ldr	r1, [pc, #40]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004608:	4313      	orrs	r3, r2
 800460a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004612:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004616:	d105      	bne.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004618:	4b05      	ldr	r3, [pc, #20]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800461a:	68db      	ldr	r3, [r3, #12]
 800461c:	4a04      	ldr	r2, [pc, #16]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800461e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004622:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004624:	7cbb      	ldrb	r3, [r7, #18]
}
 8004626:	4618      	mov	r0, r3
 8004628:	3718      	adds	r7, #24
 800462a:	46bd      	mov	sp, r7
 800462c:	bd80      	pop	{r7, pc}
 800462e:	bf00      	nop
 8004630:	40021000 	.word	0x40021000

08004634 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b082      	sub	sp, #8
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d101      	bne.n	8004646 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004642:	2301      	movs	r3, #1
 8004644:	e049      	b.n	80046da <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800464c:	b2db      	uxtb	r3, r3
 800464e:	2b00      	cmp	r3, #0
 8004650:	d106      	bne.n	8004660 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2200      	movs	r2, #0
 8004656:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800465a:	6878      	ldr	r0, [r7, #4]
 800465c:	f7fd f826 	bl	80016ac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2202      	movs	r2, #2
 8004664:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681a      	ldr	r2, [r3, #0]
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	3304      	adds	r3, #4
 8004670:	4619      	mov	r1, r3
 8004672:	4610      	mov	r0, r2
 8004674:	f000 fbd0 	bl	8004e18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2201      	movs	r2, #1
 800467c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2201      	movs	r2, #1
 8004684:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2201      	movs	r2, #1
 800468c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2201      	movs	r2, #1
 8004694:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2201      	movs	r2, #1
 800469c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2201      	movs	r2, #1
 80046a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2201      	movs	r2, #1
 80046ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2201      	movs	r2, #1
 80046b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2201      	movs	r2, #1
 80046bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2201      	movs	r2, #1
 80046c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2201      	movs	r2, #1
 80046cc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2201      	movs	r2, #1
 80046d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80046d8:	2300      	movs	r3, #0
}
 80046da:	4618      	mov	r0, r3
 80046dc:	3708      	adds	r7, #8
 80046de:	46bd      	mov	sp, r7
 80046e0:	bd80      	pop	{r7, pc}

080046e2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80046e2:	b580      	push	{r7, lr}
 80046e4:	b082      	sub	sp, #8
 80046e6:	af00      	add	r7, sp, #0
 80046e8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d101      	bne.n	80046f4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80046f0:	2301      	movs	r3, #1
 80046f2:	e049      	b.n	8004788 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046fa:	b2db      	uxtb	r3, r3
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d106      	bne.n	800470e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2200      	movs	r2, #0
 8004704:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004708:	6878      	ldr	r0, [r7, #4]
 800470a:	f7fc ff89 	bl	8001620 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2202      	movs	r2, #2
 8004712:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681a      	ldr	r2, [r3, #0]
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	3304      	adds	r3, #4
 800471e:	4619      	mov	r1, r3
 8004720:	4610      	mov	r0, r2
 8004722:	f000 fb79 	bl	8004e18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2201      	movs	r2, #1
 800472a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2201      	movs	r2, #1
 8004732:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2201      	movs	r2, #1
 800473a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2201      	movs	r2, #1
 8004742:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2201      	movs	r2, #1
 800474a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2201      	movs	r2, #1
 8004752:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2201      	movs	r2, #1
 800475a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	2201      	movs	r2, #1
 8004762:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2201      	movs	r2, #1
 800476a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2201      	movs	r2, #1
 8004772:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2201      	movs	r2, #1
 800477a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2201      	movs	r2, #1
 8004782:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004786:	2300      	movs	r3, #0
}
 8004788:	4618      	mov	r0, r3
 800478a:	3708      	adds	r7, #8
 800478c:	46bd      	mov	sp, r7
 800478e:	bd80      	pop	{r7, pc}

08004790 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b084      	sub	sp, #16
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
 8004798:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d109      	bne.n	80047b4 <HAL_TIM_PWM_Start+0x24>
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80047a6:	b2db      	uxtb	r3, r3
 80047a8:	2b01      	cmp	r3, #1
 80047aa:	bf14      	ite	ne
 80047ac:	2301      	movne	r3, #1
 80047ae:	2300      	moveq	r3, #0
 80047b0:	b2db      	uxtb	r3, r3
 80047b2:	e03c      	b.n	800482e <HAL_TIM_PWM_Start+0x9e>
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	2b04      	cmp	r3, #4
 80047b8:	d109      	bne.n	80047ce <HAL_TIM_PWM_Start+0x3e>
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80047c0:	b2db      	uxtb	r3, r3
 80047c2:	2b01      	cmp	r3, #1
 80047c4:	bf14      	ite	ne
 80047c6:	2301      	movne	r3, #1
 80047c8:	2300      	moveq	r3, #0
 80047ca:	b2db      	uxtb	r3, r3
 80047cc:	e02f      	b.n	800482e <HAL_TIM_PWM_Start+0x9e>
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	2b08      	cmp	r3, #8
 80047d2:	d109      	bne.n	80047e8 <HAL_TIM_PWM_Start+0x58>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80047da:	b2db      	uxtb	r3, r3
 80047dc:	2b01      	cmp	r3, #1
 80047de:	bf14      	ite	ne
 80047e0:	2301      	movne	r3, #1
 80047e2:	2300      	moveq	r3, #0
 80047e4:	b2db      	uxtb	r3, r3
 80047e6:	e022      	b.n	800482e <HAL_TIM_PWM_Start+0x9e>
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	2b0c      	cmp	r3, #12
 80047ec:	d109      	bne.n	8004802 <HAL_TIM_PWM_Start+0x72>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80047f4:	b2db      	uxtb	r3, r3
 80047f6:	2b01      	cmp	r3, #1
 80047f8:	bf14      	ite	ne
 80047fa:	2301      	movne	r3, #1
 80047fc:	2300      	moveq	r3, #0
 80047fe:	b2db      	uxtb	r3, r3
 8004800:	e015      	b.n	800482e <HAL_TIM_PWM_Start+0x9e>
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	2b10      	cmp	r3, #16
 8004806:	d109      	bne.n	800481c <HAL_TIM_PWM_Start+0x8c>
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800480e:	b2db      	uxtb	r3, r3
 8004810:	2b01      	cmp	r3, #1
 8004812:	bf14      	ite	ne
 8004814:	2301      	movne	r3, #1
 8004816:	2300      	moveq	r3, #0
 8004818:	b2db      	uxtb	r3, r3
 800481a:	e008      	b.n	800482e <HAL_TIM_PWM_Start+0x9e>
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004822:	b2db      	uxtb	r3, r3
 8004824:	2b01      	cmp	r3, #1
 8004826:	bf14      	ite	ne
 8004828:	2301      	movne	r3, #1
 800482a:	2300      	moveq	r3, #0
 800482c:	b2db      	uxtb	r3, r3
 800482e:	2b00      	cmp	r3, #0
 8004830:	d001      	beq.n	8004836 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004832:	2301      	movs	r3, #1
 8004834:	e097      	b.n	8004966 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d104      	bne.n	8004846 <HAL_TIM_PWM_Start+0xb6>
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2202      	movs	r2, #2
 8004840:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004844:	e023      	b.n	800488e <HAL_TIM_PWM_Start+0xfe>
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	2b04      	cmp	r3, #4
 800484a:	d104      	bne.n	8004856 <HAL_TIM_PWM_Start+0xc6>
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2202      	movs	r2, #2
 8004850:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004854:	e01b      	b.n	800488e <HAL_TIM_PWM_Start+0xfe>
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	2b08      	cmp	r3, #8
 800485a:	d104      	bne.n	8004866 <HAL_TIM_PWM_Start+0xd6>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2202      	movs	r2, #2
 8004860:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004864:	e013      	b.n	800488e <HAL_TIM_PWM_Start+0xfe>
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	2b0c      	cmp	r3, #12
 800486a:	d104      	bne.n	8004876 <HAL_TIM_PWM_Start+0xe6>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2202      	movs	r2, #2
 8004870:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004874:	e00b      	b.n	800488e <HAL_TIM_PWM_Start+0xfe>
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	2b10      	cmp	r3, #16
 800487a:	d104      	bne.n	8004886 <HAL_TIM_PWM_Start+0xf6>
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2202      	movs	r2, #2
 8004880:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004884:	e003      	b.n	800488e <HAL_TIM_PWM_Start+0xfe>
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2202      	movs	r2, #2
 800488a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	2201      	movs	r2, #1
 8004894:	6839      	ldr	r1, [r7, #0]
 8004896:	4618      	mov	r0, r3
 8004898:	f000 fe44 	bl	8005524 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4a33      	ldr	r2, [pc, #204]	; (8004970 <HAL_TIM_PWM_Start+0x1e0>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d013      	beq.n	80048ce <HAL_TIM_PWM_Start+0x13e>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4a32      	ldr	r2, [pc, #200]	; (8004974 <HAL_TIM_PWM_Start+0x1e4>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d00e      	beq.n	80048ce <HAL_TIM_PWM_Start+0x13e>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4a30      	ldr	r2, [pc, #192]	; (8004978 <HAL_TIM_PWM_Start+0x1e8>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d009      	beq.n	80048ce <HAL_TIM_PWM_Start+0x13e>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4a2f      	ldr	r2, [pc, #188]	; (800497c <HAL_TIM_PWM_Start+0x1ec>)
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d004      	beq.n	80048ce <HAL_TIM_PWM_Start+0x13e>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4a2d      	ldr	r2, [pc, #180]	; (8004980 <HAL_TIM_PWM_Start+0x1f0>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d101      	bne.n	80048d2 <HAL_TIM_PWM_Start+0x142>
 80048ce:	2301      	movs	r3, #1
 80048d0:	e000      	b.n	80048d4 <HAL_TIM_PWM_Start+0x144>
 80048d2:	2300      	movs	r3, #0
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d007      	beq.n	80048e8 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80048e6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	4a20      	ldr	r2, [pc, #128]	; (8004970 <HAL_TIM_PWM_Start+0x1e0>)
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d018      	beq.n	8004924 <HAL_TIM_PWM_Start+0x194>
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048fa:	d013      	beq.n	8004924 <HAL_TIM_PWM_Start+0x194>
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4a20      	ldr	r2, [pc, #128]	; (8004984 <HAL_TIM_PWM_Start+0x1f4>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d00e      	beq.n	8004924 <HAL_TIM_PWM_Start+0x194>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	4a1f      	ldr	r2, [pc, #124]	; (8004988 <HAL_TIM_PWM_Start+0x1f8>)
 800490c:	4293      	cmp	r3, r2
 800490e:	d009      	beq.n	8004924 <HAL_TIM_PWM_Start+0x194>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4a17      	ldr	r2, [pc, #92]	; (8004974 <HAL_TIM_PWM_Start+0x1e4>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d004      	beq.n	8004924 <HAL_TIM_PWM_Start+0x194>
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	4a16      	ldr	r2, [pc, #88]	; (8004978 <HAL_TIM_PWM_Start+0x1e8>)
 8004920:	4293      	cmp	r3, r2
 8004922:	d115      	bne.n	8004950 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	689a      	ldr	r2, [r3, #8]
 800492a:	4b18      	ldr	r3, [pc, #96]	; (800498c <HAL_TIM_PWM_Start+0x1fc>)
 800492c:	4013      	ands	r3, r2
 800492e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	2b06      	cmp	r3, #6
 8004934:	d015      	beq.n	8004962 <HAL_TIM_PWM_Start+0x1d2>
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800493c:	d011      	beq.n	8004962 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	681a      	ldr	r2, [r3, #0]
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f042 0201 	orr.w	r2, r2, #1
 800494c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800494e:	e008      	b.n	8004962 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	681a      	ldr	r2, [r3, #0]
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f042 0201 	orr.w	r2, r2, #1
 800495e:	601a      	str	r2, [r3, #0]
 8004960:	e000      	b.n	8004964 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004962:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004964:	2300      	movs	r3, #0
}
 8004966:	4618      	mov	r0, r3
 8004968:	3710      	adds	r7, #16
 800496a:	46bd      	mov	sp, r7
 800496c:	bd80      	pop	{r7, pc}
 800496e:	bf00      	nop
 8004970:	40012c00 	.word	0x40012c00
 8004974:	40013400 	.word	0x40013400
 8004978:	40014000 	.word	0x40014000
 800497c:	40014400 	.word	0x40014400
 8004980:	40014800 	.word	0x40014800
 8004984:	40000400 	.word	0x40000400
 8004988:	40000800 	.word	0x40000800
 800498c:	00010007 	.word	0x00010007

08004990 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004990:	b580      	push	{r7, lr}
 8004992:	b086      	sub	sp, #24
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
 8004998:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d101      	bne.n	80049a4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80049a0:	2301      	movs	r3, #1
 80049a2:	e097      	b.n	8004ad4 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049aa:	b2db      	uxtb	r3, r3
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d106      	bne.n	80049be <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2200      	movs	r2, #0
 80049b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80049b8:	6878      	ldr	r0, [r7, #4]
 80049ba:	f7fc fd8b 	bl	80014d4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2202      	movs	r2, #2
 80049c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	689b      	ldr	r3, [r3, #8]
 80049cc:	687a      	ldr	r2, [r7, #4]
 80049ce:	6812      	ldr	r2, [r2, #0]
 80049d0:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 80049d4:	f023 0307 	bic.w	r3, r3, #7
 80049d8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681a      	ldr	r2, [r3, #0]
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	3304      	adds	r3, #4
 80049e2:	4619      	mov	r1, r3
 80049e4:	4610      	mov	r0, r2
 80049e6:	f000 fa17 	bl	8004e18 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	689b      	ldr	r3, [r3, #8]
 80049f0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	699b      	ldr	r3, [r3, #24]
 80049f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	6a1b      	ldr	r3, [r3, #32]
 8004a00:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	697a      	ldr	r2, [r7, #20]
 8004a08:	4313      	orrs	r3, r2
 8004a0a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004a0c:	693b      	ldr	r3, [r7, #16]
 8004a0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a12:	f023 0303 	bic.w	r3, r3, #3
 8004a16:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	689a      	ldr	r2, [r3, #8]
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	699b      	ldr	r3, [r3, #24]
 8004a20:	021b      	lsls	r3, r3, #8
 8004a22:	4313      	orrs	r3, r2
 8004a24:	693a      	ldr	r2, [r7, #16]
 8004a26:	4313      	orrs	r3, r2
 8004a28:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004a2a:	693b      	ldr	r3, [r7, #16]
 8004a2c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004a30:	f023 030c 	bic.w	r3, r3, #12
 8004a34:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004a36:	693b      	ldr	r3, [r7, #16]
 8004a38:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004a3c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004a40:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	68da      	ldr	r2, [r3, #12]
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	69db      	ldr	r3, [r3, #28]
 8004a4a:	021b      	lsls	r3, r3, #8
 8004a4c:	4313      	orrs	r3, r2
 8004a4e:	693a      	ldr	r2, [r7, #16]
 8004a50:	4313      	orrs	r3, r2
 8004a52:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	691b      	ldr	r3, [r3, #16]
 8004a58:	011a      	lsls	r2, r3, #4
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	6a1b      	ldr	r3, [r3, #32]
 8004a5e:	031b      	lsls	r3, r3, #12
 8004a60:	4313      	orrs	r3, r2
 8004a62:	693a      	ldr	r2, [r7, #16]
 8004a64:	4313      	orrs	r3, r2
 8004a66:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004a6e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8004a76:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	685a      	ldr	r2, [r3, #4]
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	695b      	ldr	r3, [r3, #20]
 8004a80:	011b      	lsls	r3, r3, #4
 8004a82:	4313      	orrs	r3, r2
 8004a84:	68fa      	ldr	r2, [r7, #12]
 8004a86:	4313      	orrs	r3, r2
 8004a88:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	697a      	ldr	r2, [r7, #20]
 8004a90:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	693a      	ldr	r2, [r7, #16]
 8004a98:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	68fa      	ldr	r2, [r7, #12]
 8004aa0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2201      	movs	r2, #1
 8004aa6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2201      	movs	r2, #1
 8004aae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2201      	movs	r2, #1
 8004ab6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2201      	movs	r2, #1
 8004abe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2201      	movs	r2, #1
 8004ac6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2201      	movs	r2, #1
 8004ace:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004ad2:	2300      	movs	r3, #0
}
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	3718      	adds	r7, #24
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	bd80      	pop	{r7, pc}

08004adc <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b084      	sub	sp, #16
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
 8004ae4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004aec:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004af4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004afc:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004b04:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d110      	bne.n	8004b2e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004b0c:	7bfb      	ldrb	r3, [r7, #15]
 8004b0e:	2b01      	cmp	r3, #1
 8004b10:	d102      	bne.n	8004b18 <HAL_TIM_Encoder_Start+0x3c>
     || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004b12:	7b7b      	ldrb	r3, [r7, #13]
 8004b14:	2b01      	cmp	r3, #1
 8004b16:	d001      	beq.n	8004b1c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004b18:	2301      	movs	r3, #1
 8004b1a:	e068      	b.n	8004bee <HAL_TIM_Encoder_Start+0x112>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2202      	movs	r2, #2
 8004b20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2202      	movs	r2, #2
 8004b28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b2c:	e031      	b.n	8004b92 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	2b04      	cmp	r3, #4
 8004b32:	d110      	bne.n	8004b56 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004b34:	7bbb      	ldrb	r3, [r7, #14]
 8004b36:	2b01      	cmp	r3, #1
 8004b38:	d102      	bne.n	8004b40 <HAL_TIM_Encoder_Start+0x64>
     || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004b3a:	7b3b      	ldrb	r3, [r7, #12]
 8004b3c:	2b01      	cmp	r3, #1
 8004b3e:	d001      	beq.n	8004b44 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004b40:	2301      	movs	r3, #1
 8004b42:	e054      	b.n	8004bee <HAL_TIM_Encoder_Start+0x112>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2202      	movs	r2, #2
 8004b48:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2202      	movs	r2, #2
 8004b50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004b54:	e01d      	b.n	8004b92 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004b56:	7bfb      	ldrb	r3, [r7, #15]
 8004b58:	2b01      	cmp	r3, #1
 8004b5a:	d108      	bne.n	8004b6e <HAL_TIM_Encoder_Start+0x92>
     || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004b5c:	7bbb      	ldrb	r3, [r7, #14]
 8004b5e:	2b01      	cmp	r3, #1
 8004b60:	d105      	bne.n	8004b6e <HAL_TIM_Encoder_Start+0x92>
     || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004b62:	7b7b      	ldrb	r3, [r7, #13]
 8004b64:	2b01      	cmp	r3, #1
 8004b66:	d102      	bne.n	8004b6e <HAL_TIM_Encoder_Start+0x92>
     || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004b68:	7b3b      	ldrb	r3, [r7, #12]
 8004b6a:	2b01      	cmp	r3, #1
 8004b6c:	d001      	beq.n	8004b72 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8004b6e:	2301      	movs	r3, #1
 8004b70:	e03d      	b.n	8004bee <HAL_TIM_Encoder_Start+0x112>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2202      	movs	r2, #2
 8004b76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2202      	movs	r2, #2
 8004b7e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2202      	movs	r2, #2
 8004b86:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2202      	movs	r2, #2
 8004b8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d002      	beq.n	8004b9e <HAL_TIM_Encoder_Start+0xc2>
 8004b98:	2b04      	cmp	r3, #4
 8004b9a:	d008      	beq.n	8004bae <HAL_TIM_Encoder_Start+0xd2>
 8004b9c:	e00f      	b.n	8004bbe <HAL_TIM_Encoder_Start+0xe2>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	2201      	movs	r2, #1
 8004ba4:	2100      	movs	r1, #0
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	f000 fcbc 	bl	8005524 <TIM_CCxChannelCmd>
      break;
 8004bac:	e016      	b.n	8004bdc <HAL_TIM_Encoder_Start+0x100>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	2201      	movs	r2, #1
 8004bb4:	2104      	movs	r1, #4
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	f000 fcb4 	bl	8005524 <TIM_CCxChannelCmd>
      break;
 8004bbc:	e00e      	b.n	8004bdc <HAL_TIM_Encoder_Start+0x100>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	2201      	movs	r2, #1
 8004bc4:	2100      	movs	r1, #0
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	f000 fcac 	bl	8005524 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	2201      	movs	r2, #1
 8004bd2:	2104      	movs	r1, #4
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	f000 fca5 	bl	8005524 <TIM_CCxChannelCmd>
      break;
 8004bda:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	681a      	ldr	r2, [r3, #0]
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f042 0201 	orr.w	r2, r2, #1
 8004bea:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004bec:	2300      	movs	r3, #0
}
 8004bee:	4618      	mov	r0, r3
 8004bf0:	3710      	adds	r7, #16
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	bd80      	pop	{r7, pc}
	...

08004bf8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b084      	sub	sp, #16
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	60f8      	str	r0, [r7, #12]
 8004c00:	60b9      	str	r1, [r7, #8]
 8004c02:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c0a:	2b01      	cmp	r3, #1
 8004c0c:	d101      	bne.n	8004c12 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004c0e:	2302      	movs	r3, #2
 8004c10:	e0fd      	b.n	8004e0e <HAL_TIM_PWM_ConfigChannel+0x216>
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	2201      	movs	r2, #1
 8004c16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	2b14      	cmp	r3, #20
 8004c1e:	f200 80f0 	bhi.w	8004e02 <HAL_TIM_PWM_ConfigChannel+0x20a>
 8004c22:	a201      	add	r2, pc, #4	; (adr r2, 8004c28 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8004c24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c28:	08004c7d 	.word	0x08004c7d
 8004c2c:	08004e03 	.word	0x08004e03
 8004c30:	08004e03 	.word	0x08004e03
 8004c34:	08004e03 	.word	0x08004e03
 8004c38:	08004cbd 	.word	0x08004cbd
 8004c3c:	08004e03 	.word	0x08004e03
 8004c40:	08004e03 	.word	0x08004e03
 8004c44:	08004e03 	.word	0x08004e03
 8004c48:	08004cff 	.word	0x08004cff
 8004c4c:	08004e03 	.word	0x08004e03
 8004c50:	08004e03 	.word	0x08004e03
 8004c54:	08004e03 	.word	0x08004e03
 8004c58:	08004d3f 	.word	0x08004d3f
 8004c5c:	08004e03 	.word	0x08004e03
 8004c60:	08004e03 	.word	0x08004e03
 8004c64:	08004e03 	.word	0x08004e03
 8004c68:	08004d81 	.word	0x08004d81
 8004c6c:	08004e03 	.word	0x08004e03
 8004c70:	08004e03 	.word	0x08004e03
 8004c74:	08004e03 	.word	0x08004e03
 8004c78:	08004dc1 	.word	0x08004dc1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	68b9      	ldr	r1, [r7, #8]
 8004c82:	4618      	mov	r0, r3
 8004c84:	f000 f958 	bl	8004f38 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	699a      	ldr	r2, [r3, #24]
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f042 0208 	orr.w	r2, r2, #8
 8004c96:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	699a      	ldr	r2, [r3, #24]
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f022 0204 	bic.w	r2, r2, #4
 8004ca6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	6999      	ldr	r1, [r3, #24]
 8004cae:	68bb      	ldr	r3, [r7, #8]
 8004cb0:	691a      	ldr	r2, [r3, #16]
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	430a      	orrs	r2, r1
 8004cb8:	619a      	str	r2, [r3, #24]
      break;
 8004cba:	e0a3      	b.n	8004e04 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	68b9      	ldr	r1, [r7, #8]
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	f000 f9c8 	bl	8005058 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	699a      	ldr	r2, [r3, #24]
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004cd6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	699a      	ldr	r2, [r3, #24]
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ce6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	6999      	ldr	r1, [r3, #24]
 8004cee:	68bb      	ldr	r3, [r7, #8]
 8004cf0:	691b      	ldr	r3, [r3, #16]
 8004cf2:	021a      	lsls	r2, r3, #8
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	430a      	orrs	r2, r1
 8004cfa:	619a      	str	r2, [r3, #24]
      break;
 8004cfc:	e082      	b.n	8004e04 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	68b9      	ldr	r1, [r7, #8]
 8004d04:	4618      	mov	r0, r3
 8004d06:	f000 fa31 	bl	800516c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	69da      	ldr	r2, [r3, #28]
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f042 0208 	orr.w	r2, r2, #8
 8004d18:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	69da      	ldr	r2, [r3, #28]
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f022 0204 	bic.w	r2, r2, #4
 8004d28:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	69d9      	ldr	r1, [r3, #28]
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	691a      	ldr	r2, [r3, #16]
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	430a      	orrs	r2, r1
 8004d3a:	61da      	str	r2, [r3, #28]
      break;
 8004d3c:	e062      	b.n	8004e04 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	68b9      	ldr	r1, [r7, #8]
 8004d44:	4618      	mov	r0, r3
 8004d46:	f000 fa99 	bl	800527c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	69da      	ldr	r2, [r3, #28]
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d58:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	69da      	ldr	r2, [r3, #28]
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d68:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	69d9      	ldr	r1, [r3, #28]
 8004d70:	68bb      	ldr	r3, [r7, #8]
 8004d72:	691b      	ldr	r3, [r3, #16]
 8004d74:	021a      	lsls	r2, r3, #8
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	430a      	orrs	r2, r1
 8004d7c:	61da      	str	r2, [r3, #28]
      break;
 8004d7e:	e041      	b.n	8004e04 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	68b9      	ldr	r1, [r7, #8]
 8004d86:	4618      	mov	r0, r3
 8004d88:	f000 fb02 	bl	8005390 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f042 0208 	orr.w	r2, r2, #8
 8004d9a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f022 0204 	bic.w	r2, r2, #4
 8004daa:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004db2:	68bb      	ldr	r3, [r7, #8]
 8004db4:	691a      	ldr	r2, [r3, #16]
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	430a      	orrs	r2, r1
 8004dbc:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8004dbe:	e021      	b.n	8004e04 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	68b9      	ldr	r1, [r7, #8]
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	f000 fb46 	bl	8005458 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004dda:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004dea:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004df2:	68bb      	ldr	r3, [r7, #8]
 8004df4:	691b      	ldr	r3, [r3, #16]
 8004df6:	021a      	lsls	r2, r3, #8
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	430a      	orrs	r2, r1
 8004dfe:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8004e00:	e000      	b.n	8004e04 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8004e02:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	2200      	movs	r2, #0
 8004e08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004e0c:	2300      	movs	r3, #0
}
 8004e0e:	4618      	mov	r0, r3
 8004e10:	3710      	adds	r7, #16
 8004e12:	46bd      	mov	sp, r7
 8004e14:	bd80      	pop	{r7, pc}
 8004e16:	bf00      	nop

08004e18 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004e18:	b480      	push	{r7}
 8004e1a:	b085      	sub	sp, #20
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
 8004e20:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	4a3c      	ldr	r2, [pc, #240]	; (8004f1c <TIM_Base_SetConfig+0x104>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d00f      	beq.n	8004e50 <TIM_Base_SetConfig+0x38>
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e36:	d00b      	beq.n	8004e50 <TIM_Base_SetConfig+0x38>
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	4a39      	ldr	r2, [pc, #228]	; (8004f20 <TIM_Base_SetConfig+0x108>)
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d007      	beq.n	8004e50 <TIM_Base_SetConfig+0x38>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	4a38      	ldr	r2, [pc, #224]	; (8004f24 <TIM_Base_SetConfig+0x10c>)
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d003      	beq.n	8004e50 <TIM_Base_SetConfig+0x38>
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	4a37      	ldr	r2, [pc, #220]	; (8004f28 <TIM_Base_SetConfig+0x110>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d108      	bne.n	8004e62 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e56:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	685b      	ldr	r3, [r3, #4]
 8004e5c:	68fa      	ldr	r2, [r7, #12]
 8004e5e:	4313      	orrs	r3, r2
 8004e60:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	4a2d      	ldr	r2, [pc, #180]	; (8004f1c <TIM_Base_SetConfig+0x104>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d01b      	beq.n	8004ea2 <TIM_Base_SetConfig+0x8a>
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e70:	d017      	beq.n	8004ea2 <TIM_Base_SetConfig+0x8a>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	4a2a      	ldr	r2, [pc, #168]	; (8004f20 <TIM_Base_SetConfig+0x108>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d013      	beq.n	8004ea2 <TIM_Base_SetConfig+0x8a>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	4a29      	ldr	r2, [pc, #164]	; (8004f24 <TIM_Base_SetConfig+0x10c>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d00f      	beq.n	8004ea2 <TIM_Base_SetConfig+0x8a>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	4a28      	ldr	r2, [pc, #160]	; (8004f28 <TIM_Base_SetConfig+0x110>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d00b      	beq.n	8004ea2 <TIM_Base_SetConfig+0x8a>
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	4a27      	ldr	r2, [pc, #156]	; (8004f2c <TIM_Base_SetConfig+0x114>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d007      	beq.n	8004ea2 <TIM_Base_SetConfig+0x8a>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	4a26      	ldr	r2, [pc, #152]	; (8004f30 <TIM_Base_SetConfig+0x118>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d003      	beq.n	8004ea2 <TIM_Base_SetConfig+0x8a>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	4a25      	ldr	r2, [pc, #148]	; (8004f34 <TIM_Base_SetConfig+0x11c>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d108      	bne.n	8004eb4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ea8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	68db      	ldr	r3, [r3, #12]
 8004eae:	68fa      	ldr	r2, [r7, #12]
 8004eb0:	4313      	orrs	r3, r2
 8004eb2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	695b      	ldr	r3, [r3, #20]
 8004ebe:	4313      	orrs	r3, r2
 8004ec0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	68fa      	ldr	r2, [r7, #12]
 8004ec6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	689a      	ldr	r2, [r3, #8]
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	681a      	ldr	r2, [r3, #0]
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	4a10      	ldr	r2, [pc, #64]	; (8004f1c <TIM_Base_SetConfig+0x104>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d00f      	beq.n	8004f00 <TIM_Base_SetConfig+0xe8>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	4a11      	ldr	r2, [pc, #68]	; (8004f28 <TIM_Base_SetConfig+0x110>)
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d00b      	beq.n	8004f00 <TIM_Base_SetConfig+0xe8>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	4a10      	ldr	r2, [pc, #64]	; (8004f2c <TIM_Base_SetConfig+0x114>)
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d007      	beq.n	8004f00 <TIM_Base_SetConfig+0xe8>
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	4a0f      	ldr	r2, [pc, #60]	; (8004f30 <TIM_Base_SetConfig+0x118>)
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	d003      	beq.n	8004f00 <TIM_Base_SetConfig+0xe8>
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	4a0e      	ldr	r2, [pc, #56]	; (8004f34 <TIM_Base_SetConfig+0x11c>)
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d103      	bne.n	8004f08 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	691a      	ldr	r2, [r3, #16]
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2201      	movs	r2, #1
 8004f0c:	615a      	str	r2, [r3, #20]
}
 8004f0e:	bf00      	nop
 8004f10:	3714      	adds	r7, #20
 8004f12:	46bd      	mov	sp, r7
 8004f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f18:	4770      	bx	lr
 8004f1a:	bf00      	nop
 8004f1c:	40012c00 	.word	0x40012c00
 8004f20:	40000400 	.word	0x40000400
 8004f24:	40000800 	.word	0x40000800
 8004f28:	40013400 	.word	0x40013400
 8004f2c:	40014000 	.word	0x40014000
 8004f30:	40014400 	.word	0x40014400
 8004f34:	40014800 	.word	0x40014800

08004f38 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004f38:	b480      	push	{r7}
 8004f3a:	b087      	sub	sp, #28
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
 8004f40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6a1b      	ldr	r3, [r3, #32]
 8004f46:	f023 0201 	bic.w	r2, r3, #1
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6a1b      	ldr	r3, [r3, #32]
 8004f52:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	685b      	ldr	r3, [r3, #4]
 8004f58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	699b      	ldr	r3, [r3, #24]
 8004f5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	f023 0303 	bic.w	r3, r3, #3
 8004f72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	68fa      	ldr	r2, [r7, #12]
 8004f7a:	4313      	orrs	r3, r2
 8004f7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004f7e:	697b      	ldr	r3, [r7, #20]
 8004f80:	f023 0302 	bic.w	r3, r3, #2
 8004f84:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	689b      	ldr	r3, [r3, #8]
 8004f8a:	697a      	ldr	r2, [r7, #20]
 8004f8c:	4313      	orrs	r3, r2
 8004f8e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	4a2c      	ldr	r2, [pc, #176]	; (8005044 <TIM_OC1_SetConfig+0x10c>)
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d00f      	beq.n	8004fb8 <TIM_OC1_SetConfig+0x80>
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	4a2b      	ldr	r2, [pc, #172]	; (8005048 <TIM_OC1_SetConfig+0x110>)
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d00b      	beq.n	8004fb8 <TIM_OC1_SetConfig+0x80>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	4a2a      	ldr	r2, [pc, #168]	; (800504c <TIM_OC1_SetConfig+0x114>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d007      	beq.n	8004fb8 <TIM_OC1_SetConfig+0x80>
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	4a29      	ldr	r2, [pc, #164]	; (8005050 <TIM_OC1_SetConfig+0x118>)
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d003      	beq.n	8004fb8 <TIM_OC1_SetConfig+0x80>
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	4a28      	ldr	r2, [pc, #160]	; (8005054 <TIM_OC1_SetConfig+0x11c>)
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d10c      	bne.n	8004fd2 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004fb8:	697b      	ldr	r3, [r7, #20]
 8004fba:	f023 0308 	bic.w	r3, r3, #8
 8004fbe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	68db      	ldr	r3, [r3, #12]
 8004fc4:	697a      	ldr	r2, [r7, #20]
 8004fc6:	4313      	orrs	r3, r2
 8004fc8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004fca:	697b      	ldr	r3, [r7, #20]
 8004fcc:	f023 0304 	bic.w	r3, r3, #4
 8004fd0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	4a1b      	ldr	r2, [pc, #108]	; (8005044 <TIM_OC1_SetConfig+0x10c>)
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d00f      	beq.n	8004ffa <TIM_OC1_SetConfig+0xc2>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	4a1a      	ldr	r2, [pc, #104]	; (8005048 <TIM_OC1_SetConfig+0x110>)
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d00b      	beq.n	8004ffa <TIM_OC1_SetConfig+0xc2>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	4a19      	ldr	r2, [pc, #100]	; (800504c <TIM_OC1_SetConfig+0x114>)
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d007      	beq.n	8004ffa <TIM_OC1_SetConfig+0xc2>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	4a18      	ldr	r2, [pc, #96]	; (8005050 <TIM_OC1_SetConfig+0x118>)
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	d003      	beq.n	8004ffa <TIM_OC1_SetConfig+0xc2>
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	4a17      	ldr	r2, [pc, #92]	; (8005054 <TIM_OC1_SetConfig+0x11c>)
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d111      	bne.n	800501e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004ffa:	693b      	ldr	r3, [r7, #16]
 8004ffc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005000:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005002:	693b      	ldr	r3, [r7, #16]
 8005004:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005008:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	695b      	ldr	r3, [r3, #20]
 800500e:	693a      	ldr	r2, [r7, #16]
 8005010:	4313      	orrs	r3, r2
 8005012:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	699b      	ldr	r3, [r3, #24]
 8005018:	693a      	ldr	r2, [r7, #16]
 800501a:	4313      	orrs	r3, r2
 800501c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	693a      	ldr	r2, [r7, #16]
 8005022:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	68fa      	ldr	r2, [r7, #12]
 8005028:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	685a      	ldr	r2, [r3, #4]
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	697a      	ldr	r2, [r7, #20]
 8005036:	621a      	str	r2, [r3, #32]
}
 8005038:	bf00      	nop
 800503a:	371c      	adds	r7, #28
 800503c:	46bd      	mov	sp, r7
 800503e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005042:	4770      	bx	lr
 8005044:	40012c00 	.word	0x40012c00
 8005048:	40013400 	.word	0x40013400
 800504c:	40014000 	.word	0x40014000
 8005050:	40014400 	.word	0x40014400
 8005054:	40014800 	.word	0x40014800

08005058 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005058:	b480      	push	{r7}
 800505a:	b087      	sub	sp, #28
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
 8005060:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6a1b      	ldr	r3, [r3, #32]
 8005066:	f023 0210 	bic.w	r2, r3, #16
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6a1b      	ldr	r3, [r3, #32]
 8005072:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	685b      	ldr	r3, [r3, #4]
 8005078:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	699b      	ldr	r3, [r3, #24]
 800507e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005086:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800508a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005092:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	021b      	lsls	r3, r3, #8
 800509a:	68fa      	ldr	r2, [r7, #12]
 800509c:	4313      	orrs	r3, r2
 800509e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80050a0:	697b      	ldr	r3, [r7, #20]
 80050a2:	f023 0320 	bic.w	r3, r3, #32
 80050a6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	689b      	ldr	r3, [r3, #8]
 80050ac:	011b      	lsls	r3, r3, #4
 80050ae:	697a      	ldr	r2, [r7, #20]
 80050b0:	4313      	orrs	r3, r2
 80050b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	4a28      	ldr	r2, [pc, #160]	; (8005158 <TIM_OC2_SetConfig+0x100>)
 80050b8:	4293      	cmp	r3, r2
 80050ba:	d003      	beq.n	80050c4 <TIM_OC2_SetConfig+0x6c>
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	4a27      	ldr	r2, [pc, #156]	; (800515c <TIM_OC2_SetConfig+0x104>)
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d10d      	bne.n	80050e0 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80050c4:	697b      	ldr	r3, [r7, #20]
 80050c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80050ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	68db      	ldr	r3, [r3, #12]
 80050d0:	011b      	lsls	r3, r3, #4
 80050d2:	697a      	ldr	r2, [r7, #20]
 80050d4:	4313      	orrs	r3, r2
 80050d6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80050d8:	697b      	ldr	r3, [r7, #20]
 80050da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80050de:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	4a1d      	ldr	r2, [pc, #116]	; (8005158 <TIM_OC2_SetConfig+0x100>)
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d00f      	beq.n	8005108 <TIM_OC2_SetConfig+0xb0>
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	4a1c      	ldr	r2, [pc, #112]	; (800515c <TIM_OC2_SetConfig+0x104>)
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d00b      	beq.n	8005108 <TIM_OC2_SetConfig+0xb0>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	4a1b      	ldr	r2, [pc, #108]	; (8005160 <TIM_OC2_SetConfig+0x108>)
 80050f4:	4293      	cmp	r3, r2
 80050f6:	d007      	beq.n	8005108 <TIM_OC2_SetConfig+0xb0>
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	4a1a      	ldr	r2, [pc, #104]	; (8005164 <TIM_OC2_SetConfig+0x10c>)
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d003      	beq.n	8005108 <TIM_OC2_SetConfig+0xb0>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	4a19      	ldr	r2, [pc, #100]	; (8005168 <TIM_OC2_SetConfig+0x110>)
 8005104:	4293      	cmp	r3, r2
 8005106:	d113      	bne.n	8005130 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005108:	693b      	ldr	r3, [r7, #16]
 800510a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800510e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005110:	693b      	ldr	r3, [r7, #16]
 8005112:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005116:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	695b      	ldr	r3, [r3, #20]
 800511c:	009b      	lsls	r3, r3, #2
 800511e:	693a      	ldr	r2, [r7, #16]
 8005120:	4313      	orrs	r3, r2
 8005122:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	699b      	ldr	r3, [r3, #24]
 8005128:	009b      	lsls	r3, r3, #2
 800512a:	693a      	ldr	r2, [r7, #16]
 800512c:	4313      	orrs	r3, r2
 800512e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	693a      	ldr	r2, [r7, #16]
 8005134:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	68fa      	ldr	r2, [r7, #12]
 800513a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	685a      	ldr	r2, [r3, #4]
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	697a      	ldr	r2, [r7, #20]
 8005148:	621a      	str	r2, [r3, #32]
}
 800514a:	bf00      	nop
 800514c:	371c      	adds	r7, #28
 800514e:	46bd      	mov	sp, r7
 8005150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005154:	4770      	bx	lr
 8005156:	bf00      	nop
 8005158:	40012c00 	.word	0x40012c00
 800515c:	40013400 	.word	0x40013400
 8005160:	40014000 	.word	0x40014000
 8005164:	40014400 	.word	0x40014400
 8005168:	40014800 	.word	0x40014800

0800516c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800516c:	b480      	push	{r7}
 800516e:	b087      	sub	sp, #28
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
 8005174:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6a1b      	ldr	r3, [r3, #32]
 800517a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6a1b      	ldr	r3, [r3, #32]
 8005186:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	685b      	ldr	r3, [r3, #4]
 800518c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	69db      	ldr	r3, [r3, #28]
 8005192:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800519a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800519e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	f023 0303 	bic.w	r3, r3, #3
 80051a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	68fa      	ldr	r2, [r7, #12]
 80051ae:	4313      	orrs	r3, r2
 80051b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80051b2:	697b      	ldr	r3, [r7, #20]
 80051b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80051b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	689b      	ldr	r3, [r3, #8]
 80051be:	021b      	lsls	r3, r3, #8
 80051c0:	697a      	ldr	r2, [r7, #20]
 80051c2:	4313      	orrs	r3, r2
 80051c4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	4a27      	ldr	r2, [pc, #156]	; (8005268 <TIM_OC3_SetConfig+0xfc>)
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d003      	beq.n	80051d6 <TIM_OC3_SetConfig+0x6a>
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	4a26      	ldr	r2, [pc, #152]	; (800526c <TIM_OC3_SetConfig+0x100>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d10d      	bne.n	80051f2 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80051d6:	697b      	ldr	r3, [r7, #20]
 80051d8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80051dc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	68db      	ldr	r3, [r3, #12]
 80051e2:	021b      	lsls	r3, r3, #8
 80051e4:	697a      	ldr	r2, [r7, #20]
 80051e6:	4313      	orrs	r3, r2
 80051e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80051ea:	697b      	ldr	r3, [r7, #20]
 80051ec:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80051f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	4a1c      	ldr	r2, [pc, #112]	; (8005268 <TIM_OC3_SetConfig+0xfc>)
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d00f      	beq.n	800521a <TIM_OC3_SetConfig+0xae>
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	4a1b      	ldr	r2, [pc, #108]	; (800526c <TIM_OC3_SetConfig+0x100>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	d00b      	beq.n	800521a <TIM_OC3_SetConfig+0xae>
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	4a1a      	ldr	r2, [pc, #104]	; (8005270 <TIM_OC3_SetConfig+0x104>)
 8005206:	4293      	cmp	r3, r2
 8005208:	d007      	beq.n	800521a <TIM_OC3_SetConfig+0xae>
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	4a19      	ldr	r2, [pc, #100]	; (8005274 <TIM_OC3_SetConfig+0x108>)
 800520e:	4293      	cmp	r3, r2
 8005210:	d003      	beq.n	800521a <TIM_OC3_SetConfig+0xae>
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	4a18      	ldr	r2, [pc, #96]	; (8005278 <TIM_OC3_SetConfig+0x10c>)
 8005216:	4293      	cmp	r3, r2
 8005218:	d113      	bne.n	8005242 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800521a:	693b      	ldr	r3, [r7, #16]
 800521c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005220:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005222:	693b      	ldr	r3, [r7, #16]
 8005224:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005228:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	695b      	ldr	r3, [r3, #20]
 800522e:	011b      	lsls	r3, r3, #4
 8005230:	693a      	ldr	r2, [r7, #16]
 8005232:	4313      	orrs	r3, r2
 8005234:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	699b      	ldr	r3, [r3, #24]
 800523a:	011b      	lsls	r3, r3, #4
 800523c:	693a      	ldr	r2, [r7, #16]
 800523e:	4313      	orrs	r3, r2
 8005240:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	693a      	ldr	r2, [r7, #16]
 8005246:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	68fa      	ldr	r2, [r7, #12]
 800524c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	685a      	ldr	r2, [r3, #4]
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	697a      	ldr	r2, [r7, #20]
 800525a:	621a      	str	r2, [r3, #32]
}
 800525c:	bf00      	nop
 800525e:	371c      	adds	r7, #28
 8005260:	46bd      	mov	sp, r7
 8005262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005266:	4770      	bx	lr
 8005268:	40012c00 	.word	0x40012c00
 800526c:	40013400 	.word	0x40013400
 8005270:	40014000 	.word	0x40014000
 8005274:	40014400 	.word	0x40014400
 8005278:	40014800 	.word	0x40014800

0800527c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800527c:	b480      	push	{r7}
 800527e:	b087      	sub	sp, #28
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
 8005284:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6a1b      	ldr	r3, [r3, #32]
 800528a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6a1b      	ldr	r3, [r3, #32]
 8005296:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	685b      	ldr	r3, [r3, #4]
 800529c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	69db      	ldr	r3, [r3, #28]
 80052a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80052aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	021b      	lsls	r3, r3, #8
 80052be:	68fa      	ldr	r2, [r7, #12]
 80052c0:	4313      	orrs	r3, r2
 80052c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80052c4:	697b      	ldr	r3, [r7, #20]
 80052c6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80052ca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	689b      	ldr	r3, [r3, #8]
 80052d0:	031b      	lsls	r3, r3, #12
 80052d2:	697a      	ldr	r2, [r7, #20]
 80052d4:	4313      	orrs	r3, r2
 80052d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	4a28      	ldr	r2, [pc, #160]	; (800537c <TIM_OC4_SetConfig+0x100>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	d003      	beq.n	80052e8 <TIM_OC4_SetConfig+0x6c>
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	4a27      	ldr	r2, [pc, #156]	; (8005380 <TIM_OC4_SetConfig+0x104>)
 80052e4:	4293      	cmp	r3, r2
 80052e6:	d10d      	bne.n	8005304 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80052e8:	697b      	ldr	r3, [r7, #20]
 80052ea:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80052ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	68db      	ldr	r3, [r3, #12]
 80052f4:	031b      	lsls	r3, r3, #12
 80052f6:	697a      	ldr	r2, [r7, #20]
 80052f8:	4313      	orrs	r3, r2
 80052fa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80052fc:	697b      	ldr	r3, [r7, #20]
 80052fe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005302:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	4a1d      	ldr	r2, [pc, #116]	; (800537c <TIM_OC4_SetConfig+0x100>)
 8005308:	4293      	cmp	r3, r2
 800530a:	d00f      	beq.n	800532c <TIM_OC4_SetConfig+0xb0>
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	4a1c      	ldr	r2, [pc, #112]	; (8005380 <TIM_OC4_SetConfig+0x104>)
 8005310:	4293      	cmp	r3, r2
 8005312:	d00b      	beq.n	800532c <TIM_OC4_SetConfig+0xb0>
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	4a1b      	ldr	r2, [pc, #108]	; (8005384 <TIM_OC4_SetConfig+0x108>)
 8005318:	4293      	cmp	r3, r2
 800531a:	d007      	beq.n	800532c <TIM_OC4_SetConfig+0xb0>
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	4a1a      	ldr	r2, [pc, #104]	; (8005388 <TIM_OC4_SetConfig+0x10c>)
 8005320:	4293      	cmp	r3, r2
 8005322:	d003      	beq.n	800532c <TIM_OC4_SetConfig+0xb0>
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	4a19      	ldr	r2, [pc, #100]	; (800538c <TIM_OC4_SetConfig+0x110>)
 8005328:	4293      	cmp	r3, r2
 800532a:	d113      	bne.n	8005354 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800532c:	693b      	ldr	r3, [r7, #16]
 800532e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005332:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8005334:	693b      	ldr	r3, [r7, #16]
 8005336:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800533a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	695b      	ldr	r3, [r3, #20]
 8005340:	019b      	lsls	r3, r3, #6
 8005342:	693a      	ldr	r2, [r7, #16]
 8005344:	4313      	orrs	r3, r2
 8005346:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	699b      	ldr	r3, [r3, #24]
 800534c:	019b      	lsls	r3, r3, #6
 800534e:	693a      	ldr	r2, [r7, #16]
 8005350:	4313      	orrs	r3, r2
 8005352:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	693a      	ldr	r2, [r7, #16]
 8005358:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	68fa      	ldr	r2, [r7, #12]
 800535e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	685a      	ldr	r2, [r3, #4]
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	697a      	ldr	r2, [r7, #20]
 800536c:	621a      	str	r2, [r3, #32]
}
 800536e:	bf00      	nop
 8005370:	371c      	adds	r7, #28
 8005372:	46bd      	mov	sp, r7
 8005374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005378:	4770      	bx	lr
 800537a:	bf00      	nop
 800537c:	40012c00 	.word	0x40012c00
 8005380:	40013400 	.word	0x40013400
 8005384:	40014000 	.word	0x40014000
 8005388:	40014400 	.word	0x40014400
 800538c:	40014800 	.word	0x40014800

08005390 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005390:	b480      	push	{r7}
 8005392:	b087      	sub	sp, #28
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
 8005398:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6a1b      	ldr	r3, [r3, #32]
 800539e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6a1b      	ldr	r3, [r3, #32]
 80053aa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	685b      	ldr	r3, [r3, #4]
 80053b0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80053be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	68fa      	ldr	r2, [r7, #12]
 80053ca:	4313      	orrs	r3, r2
 80053cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80053ce:	693b      	ldr	r3, [r7, #16]
 80053d0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80053d4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	689b      	ldr	r3, [r3, #8]
 80053da:	041b      	lsls	r3, r3, #16
 80053dc:	693a      	ldr	r2, [r7, #16]
 80053de:	4313      	orrs	r3, r2
 80053e0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	4a17      	ldr	r2, [pc, #92]	; (8005444 <TIM_OC5_SetConfig+0xb4>)
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d00f      	beq.n	800540a <TIM_OC5_SetConfig+0x7a>
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	4a16      	ldr	r2, [pc, #88]	; (8005448 <TIM_OC5_SetConfig+0xb8>)
 80053ee:	4293      	cmp	r3, r2
 80053f0:	d00b      	beq.n	800540a <TIM_OC5_SetConfig+0x7a>
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	4a15      	ldr	r2, [pc, #84]	; (800544c <TIM_OC5_SetConfig+0xbc>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d007      	beq.n	800540a <TIM_OC5_SetConfig+0x7a>
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	4a14      	ldr	r2, [pc, #80]	; (8005450 <TIM_OC5_SetConfig+0xc0>)
 80053fe:	4293      	cmp	r3, r2
 8005400:	d003      	beq.n	800540a <TIM_OC5_SetConfig+0x7a>
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	4a13      	ldr	r2, [pc, #76]	; (8005454 <TIM_OC5_SetConfig+0xc4>)
 8005406:	4293      	cmp	r3, r2
 8005408:	d109      	bne.n	800541e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800540a:	697b      	ldr	r3, [r7, #20]
 800540c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005410:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	695b      	ldr	r3, [r3, #20]
 8005416:	021b      	lsls	r3, r3, #8
 8005418:	697a      	ldr	r2, [r7, #20]
 800541a:	4313      	orrs	r3, r2
 800541c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	697a      	ldr	r2, [r7, #20]
 8005422:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	68fa      	ldr	r2, [r7, #12]
 8005428:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	685a      	ldr	r2, [r3, #4]
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	693a      	ldr	r2, [r7, #16]
 8005436:	621a      	str	r2, [r3, #32]
}
 8005438:	bf00      	nop
 800543a:	371c      	adds	r7, #28
 800543c:	46bd      	mov	sp, r7
 800543e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005442:	4770      	bx	lr
 8005444:	40012c00 	.word	0x40012c00
 8005448:	40013400 	.word	0x40013400
 800544c:	40014000 	.word	0x40014000
 8005450:	40014400 	.word	0x40014400
 8005454:	40014800 	.word	0x40014800

08005458 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005458:	b480      	push	{r7}
 800545a:	b087      	sub	sp, #28
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
 8005460:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6a1b      	ldr	r3, [r3, #32]
 8005466:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6a1b      	ldr	r3, [r3, #32]
 8005472:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	685b      	ldr	r3, [r3, #4]
 8005478:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800547e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005486:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800548a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	021b      	lsls	r3, r3, #8
 8005492:	68fa      	ldr	r2, [r7, #12]
 8005494:	4313      	orrs	r3, r2
 8005496:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005498:	693b      	ldr	r3, [r7, #16]
 800549a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800549e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	689b      	ldr	r3, [r3, #8]
 80054a4:	051b      	lsls	r3, r3, #20
 80054a6:	693a      	ldr	r2, [r7, #16]
 80054a8:	4313      	orrs	r3, r2
 80054aa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	4a18      	ldr	r2, [pc, #96]	; (8005510 <TIM_OC6_SetConfig+0xb8>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d00f      	beq.n	80054d4 <TIM_OC6_SetConfig+0x7c>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	4a17      	ldr	r2, [pc, #92]	; (8005514 <TIM_OC6_SetConfig+0xbc>)
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d00b      	beq.n	80054d4 <TIM_OC6_SetConfig+0x7c>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	4a16      	ldr	r2, [pc, #88]	; (8005518 <TIM_OC6_SetConfig+0xc0>)
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d007      	beq.n	80054d4 <TIM_OC6_SetConfig+0x7c>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	4a15      	ldr	r2, [pc, #84]	; (800551c <TIM_OC6_SetConfig+0xc4>)
 80054c8:	4293      	cmp	r3, r2
 80054ca:	d003      	beq.n	80054d4 <TIM_OC6_SetConfig+0x7c>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	4a14      	ldr	r2, [pc, #80]	; (8005520 <TIM_OC6_SetConfig+0xc8>)
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d109      	bne.n	80054e8 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80054d4:	697b      	ldr	r3, [r7, #20]
 80054d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80054da:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	695b      	ldr	r3, [r3, #20]
 80054e0:	029b      	lsls	r3, r3, #10
 80054e2:	697a      	ldr	r2, [r7, #20]
 80054e4:	4313      	orrs	r3, r2
 80054e6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	697a      	ldr	r2, [r7, #20]
 80054ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	68fa      	ldr	r2, [r7, #12]
 80054f2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	685a      	ldr	r2, [r3, #4]
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	693a      	ldr	r2, [r7, #16]
 8005500:	621a      	str	r2, [r3, #32]
}
 8005502:	bf00      	nop
 8005504:	371c      	adds	r7, #28
 8005506:	46bd      	mov	sp, r7
 8005508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550c:	4770      	bx	lr
 800550e:	bf00      	nop
 8005510:	40012c00 	.word	0x40012c00
 8005514:	40013400 	.word	0x40013400
 8005518:	40014000 	.word	0x40014000
 800551c:	40014400 	.word	0x40014400
 8005520:	40014800 	.word	0x40014800

08005524 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005524:	b480      	push	{r7}
 8005526:	b087      	sub	sp, #28
 8005528:	af00      	add	r7, sp, #0
 800552a:	60f8      	str	r0, [r7, #12]
 800552c:	60b9      	str	r1, [r7, #8]
 800552e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005530:	68bb      	ldr	r3, [r7, #8]
 8005532:	f003 031f 	and.w	r3, r3, #31
 8005536:	2201      	movs	r2, #1
 8005538:	fa02 f303 	lsl.w	r3, r2, r3
 800553c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	6a1a      	ldr	r2, [r3, #32]
 8005542:	697b      	ldr	r3, [r7, #20]
 8005544:	43db      	mvns	r3, r3
 8005546:	401a      	ands	r2, r3
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	6a1a      	ldr	r2, [r3, #32]
 8005550:	68bb      	ldr	r3, [r7, #8]
 8005552:	f003 031f 	and.w	r3, r3, #31
 8005556:	6879      	ldr	r1, [r7, #4]
 8005558:	fa01 f303 	lsl.w	r3, r1, r3
 800555c:	431a      	orrs	r2, r3
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	621a      	str	r2, [r3, #32]
}
 8005562:	bf00      	nop
 8005564:	371c      	adds	r7, #28
 8005566:	46bd      	mov	sp, r7
 8005568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556c:	4770      	bx	lr
	...

08005570 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005570:	b480      	push	{r7}
 8005572:	b085      	sub	sp, #20
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
 8005578:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005580:	2b01      	cmp	r3, #1
 8005582:	d101      	bne.n	8005588 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005584:	2302      	movs	r3, #2
 8005586:	e065      	b.n	8005654 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2201      	movs	r2, #1
 800558c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2202      	movs	r2, #2
 8005594:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	685b      	ldr	r3, [r3, #4]
 800559e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	689b      	ldr	r3, [r3, #8]
 80055a6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	4a2c      	ldr	r2, [pc, #176]	; (8005660 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80055ae:	4293      	cmp	r3, r2
 80055b0:	d004      	beq.n	80055bc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	4a2b      	ldr	r2, [pc, #172]	; (8005664 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80055b8:	4293      	cmp	r3, r2
 80055ba:	d108      	bne.n	80055ce <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80055c2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	685b      	ldr	r3, [r3, #4]
 80055c8:	68fa      	ldr	r2, [r7, #12]
 80055ca:	4313      	orrs	r3, r2
 80055cc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80055d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055d8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	68fa      	ldr	r2, [r7, #12]
 80055e0:	4313      	orrs	r3, r2
 80055e2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	68fa      	ldr	r2, [r7, #12]
 80055ea:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	4a1b      	ldr	r2, [pc, #108]	; (8005660 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80055f2:	4293      	cmp	r3, r2
 80055f4:	d018      	beq.n	8005628 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055fe:	d013      	beq.n	8005628 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	4a18      	ldr	r2, [pc, #96]	; (8005668 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005606:	4293      	cmp	r3, r2
 8005608:	d00e      	beq.n	8005628 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	4a17      	ldr	r2, [pc, #92]	; (800566c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005610:	4293      	cmp	r3, r2
 8005612:	d009      	beq.n	8005628 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	4a12      	ldr	r2, [pc, #72]	; (8005664 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800561a:	4293      	cmp	r3, r2
 800561c:	d004      	beq.n	8005628 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	4a13      	ldr	r2, [pc, #76]	; (8005670 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005624:	4293      	cmp	r3, r2
 8005626:	d10c      	bne.n	8005642 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005628:	68bb      	ldr	r3, [r7, #8]
 800562a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800562e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	689b      	ldr	r3, [r3, #8]
 8005634:	68ba      	ldr	r2, [r7, #8]
 8005636:	4313      	orrs	r3, r2
 8005638:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	68ba      	ldr	r2, [r7, #8]
 8005640:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	2201      	movs	r2, #1
 8005646:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	2200      	movs	r2, #0
 800564e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005652:	2300      	movs	r3, #0
}
 8005654:	4618      	mov	r0, r3
 8005656:	3714      	adds	r7, #20
 8005658:	46bd      	mov	sp, r7
 800565a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565e:	4770      	bx	lr
 8005660:	40012c00 	.word	0x40012c00
 8005664:	40013400 	.word	0x40013400
 8005668:	40000400 	.word	0x40000400
 800566c:	40000800 	.word	0x40000800
 8005670:	40014000 	.word	0x40014000

08005674 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005674:	b480      	push	{r7}
 8005676:	b085      	sub	sp, #20
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
 800567c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800567e:	2300      	movs	r3, #0
 8005680:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005688:	2b01      	cmp	r3, #1
 800568a:	d101      	bne.n	8005690 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800568c:	2302      	movs	r3, #2
 800568e:	e087      	b.n	80057a0 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2201      	movs	r2, #1
 8005694:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	68db      	ldr	r3, [r3, #12]
 80056a2:	4313      	orrs	r3, r2
 80056a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	689b      	ldr	r3, [r3, #8]
 80056b0:	4313      	orrs	r3, r2
 80056b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	685b      	ldr	r3, [r3, #4]
 80056be:	4313      	orrs	r3, r2
 80056c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	4313      	orrs	r3, r2
 80056ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	691b      	ldr	r3, [r3, #16]
 80056da:	4313      	orrs	r3, r2
 80056dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	695b      	ldr	r3, [r3, #20]
 80056e8:	4313      	orrs	r3, r2
 80056ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056f6:	4313      	orrs	r3, r2
 80056f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	699b      	ldr	r3, [r3, #24]
 8005704:	041b      	lsls	r3, r3, #16
 8005706:	4313      	orrs	r3, r2
 8005708:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	4a27      	ldr	r2, [pc, #156]	; (80057ac <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8005710:	4293      	cmp	r3, r2
 8005712:	d004      	beq.n	800571e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	4a25      	ldr	r2, [pc, #148]	; (80057b0 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800571a:	4293      	cmp	r3, r2
 800571c:	d106      	bne.n	800572c <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	69db      	ldr	r3, [r3, #28]
 8005728:	4313      	orrs	r3, r2
 800572a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	4a1e      	ldr	r2, [pc, #120]	; (80057ac <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8005732:	4293      	cmp	r3, r2
 8005734:	d004      	beq.n	8005740 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	4a1d      	ldr	r2, [pc, #116]	; (80057b0 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800573c:	4293      	cmp	r3, r2
 800573e:	d126      	bne.n	800578e <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800574a:	051b      	lsls	r3, r3, #20
 800574c:	4313      	orrs	r3, r2
 800574e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	6a1b      	ldr	r3, [r3, #32]
 800575a:	4313      	orrs	r3, r2
 800575c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005768:	4313      	orrs	r3, r2
 800576a:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	4a0e      	ldr	r2, [pc, #56]	; (80057ac <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8005772:	4293      	cmp	r3, r2
 8005774:	d004      	beq.n	8005780 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	4a0d      	ldr	r2, [pc, #52]	; (80057b0 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800577c:	4293      	cmp	r3, r2
 800577e:	d106      	bne.n	800578e <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800578a:	4313      	orrs	r3, r2
 800578c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	68fa      	ldr	r2, [r7, #12]
 8005794:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	2200      	movs	r2, #0
 800579a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800579e:	2300      	movs	r3, #0
}
 80057a0:	4618      	mov	r0, r3
 80057a2:	3714      	adds	r7, #20
 80057a4:	46bd      	mov	sp, r7
 80057a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057aa:	4770      	bx	lr
 80057ac:	40012c00 	.word	0x40012c00
 80057b0:	40013400 	.word	0x40013400

080057b4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80057b4:	b480      	push	{r7}
 80057b6:	b085      	sub	sp, #20
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2200      	movs	r2, #0
 80057c0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80057c4:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80057c8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	b29a      	uxth	r2, r3
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80057d4:	2300      	movs	r3, #0
}
 80057d6:	4618      	mov	r0, r3
 80057d8:	3714      	adds	r7, #20
 80057da:	46bd      	mov	sp, r7
 80057dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e0:	4770      	bx	lr

080057e2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80057e2:	b480      	push	{r7}
 80057e4:	b085      	sub	sp, #20
 80057e6:	af00      	add	r7, sp, #0
 80057e8:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80057ea:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80057ee:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80057f6:	b29a      	uxth	r2, r3
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	b29b      	uxth	r3, r3
 80057fc:	43db      	mvns	r3, r3
 80057fe:	b29b      	uxth	r3, r3
 8005800:	4013      	ands	r3, r2
 8005802:	b29a      	uxth	r2, r3
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800580a:	2300      	movs	r3, #0
}
 800580c:	4618      	mov	r0, r3
 800580e:	3714      	adds	r7, #20
 8005810:	46bd      	mov	sp, r7
 8005812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005816:	4770      	bx	lr

08005818 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005818:	b084      	sub	sp, #16
 800581a:	b480      	push	{r7}
 800581c:	b083      	sub	sp, #12
 800581e:	af00      	add	r7, sp, #0
 8005820:	6078      	str	r0, [r7, #4]
 8005822:	f107 0014 	add.w	r0, r7, #20
 8005826:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	2201      	movs	r2, #1
 800582e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0U;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	2200      	movs	r2, #0
 8005836:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0U;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2200      	movs	r2, #0
 800583e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	2200      	movs	r2, #0
 8005846:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800584a:	2300      	movs	r3, #0
}
 800584c:	4618      	mov	r0, r3
 800584e:	370c      	adds	r7, #12
 8005850:	46bd      	mov	sp, r7
 8005852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005856:	b004      	add	sp, #16
 8005858:	4770      	bx	lr
	...

0800585c <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800585c:	b480      	push	{r7}
 800585e:	b09b      	sub	sp, #108	; 0x6c
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
 8005864:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8005866:	2300      	movs	r3, #0
 8005868:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800586c:	687a      	ldr	r2, [r7, #4]
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	781b      	ldrb	r3, [r3, #0]
 8005872:	009b      	lsls	r3, r3, #2
 8005874:	4413      	add	r3, r2
 8005876:	881b      	ldrh	r3, [r3, #0]
 8005878:	b29b      	uxth	r3, r3
 800587a:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800587e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005882:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8005886:	683b      	ldr	r3, [r7, #0]
 8005888:	78db      	ldrb	r3, [r3, #3]
 800588a:	2b03      	cmp	r3, #3
 800588c:	d81f      	bhi.n	80058ce <USB_ActivateEndpoint+0x72>
 800588e:	a201      	add	r2, pc, #4	; (adr r2, 8005894 <USB_ActivateEndpoint+0x38>)
 8005890:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005894:	080058a5 	.word	0x080058a5
 8005898:	080058c1 	.word	0x080058c1
 800589c:	080058d7 	.word	0x080058d7
 80058a0:	080058b3 	.word	0x080058b3
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80058a4:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80058a8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80058ac:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80058b0:	e012      	b.n	80058d8 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80058b2:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80058b6:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80058ba:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80058be:	e00b      	b.n	80058d8 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80058c0:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80058c4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80058c8:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80058cc:	e004      	b.n	80058d8 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80058ce:	2301      	movs	r3, #1
 80058d0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 80058d4:	e000      	b.n	80058d8 <USB_ActivateEndpoint+0x7c>
      break;
 80058d6:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80058d8:	687a      	ldr	r2, [r7, #4]
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	781b      	ldrb	r3, [r3, #0]
 80058de:	009b      	lsls	r3, r3, #2
 80058e0:	441a      	add	r2, r3
 80058e2:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80058e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80058ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80058ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80058f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058f6:	b29b      	uxth	r3, r3
 80058f8:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80058fa:	687a      	ldr	r2, [r7, #4]
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	781b      	ldrb	r3, [r3, #0]
 8005900:	009b      	lsls	r3, r3, #2
 8005902:	4413      	add	r3, r2
 8005904:	881b      	ldrh	r3, [r3, #0]
 8005906:	b29b      	uxth	r3, r3
 8005908:	b21b      	sxth	r3, r3
 800590a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800590e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005912:	b21a      	sxth	r2, r3
 8005914:	683b      	ldr	r3, [r7, #0]
 8005916:	781b      	ldrb	r3, [r3, #0]
 8005918:	b21b      	sxth	r3, r3
 800591a:	4313      	orrs	r3, r2
 800591c:	b21b      	sxth	r3, r3
 800591e:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8005922:	687a      	ldr	r2, [r7, #4]
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	781b      	ldrb	r3, [r3, #0]
 8005928:	009b      	lsls	r3, r3, #2
 800592a:	441a      	add	r2, r3
 800592c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8005930:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005934:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005938:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800593c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005940:	b29b      	uxth	r3, r3
 8005942:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	7b1b      	ldrb	r3, [r3, #12]
 8005948:	2b00      	cmp	r3, #0
 800594a:	f040 8149 	bne.w	8005be0 <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 800594e:	683b      	ldr	r3, [r7, #0]
 8005950:	785b      	ldrb	r3, [r3, #1]
 8005952:	2b00      	cmp	r3, #0
 8005954:	f000 8084 	beq.w	8005a60 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	617b      	str	r3, [r7, #20]
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005962:	b29b      	uxth	r3, r3
 8005964:	461a      	mov	r2, r3
 8005966:	697b      	ldr	r3, [r7, #20]
 8005968:	4413      	add	r3, r2
 800596a:	617b      	str	r3, [r7, #20]
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	781b      	ldrb	r3, [r3, #0]
 8005970:	00da      	lsls	r2, r3, #3
 8005972:	697b      	ldr	r3, [r7, #20]
 8005974:	4413      	add	r3, r2
 8005976:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800597a:	613b      	str	r3, [r7, #16]
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	88db      	ldrh	r3, [r3, #6]
 8005980:	085b      	lsrs	r3, r3, #1
 8005982:	b29b      	uxth	r3, r3
 8005984:	005b      	lsls	r3, r3, #1
 8005986:	b29a      	uxth	r2, r3
 8005988:	693b      	ldr	r3, [r7, #16]
 800598a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800598c:	687a      	ldr	r2, [r7, #4]
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	781b      	ldrb	r3, [r3, #0]
 8005992:	009b      	lsls	r3, r3, #2
 8005994:	4413      	add	r3, r2
 8005996:	881b      	ldrh	r3, [r3, #0]
 8005998:	81fb      	strh	r3, [r7, #14]
 800599a:	89fb      	ldrh	r3, [r7, #14]
 800599c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d01b      	beq.n	80059dc <USB_ActivateEndpoint+0x180>
 80059a4:	687a      	ldr	r2, [r7, #4]
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	781b      	ldrb	r3, [r3, #0]
 80059aa:	009b      	lsls	r3, r3, #2
 80059ac:	4413      	add	r3, r2
 80059ae:	881b      	ldrh	r3, [r3, #0]
 80059b0:	b29b      	uxth	r3, r3
 80059b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059ba:	81bb      	strh	r3, [r7, #12]
 80059bc:	687a      	ldr	r2, [r7, #4]
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	781b      	ldrb	r3, [r3, #0]
 80059c2:	009b      	lsls	r3, r3, #2
 80059c4:	441a      	add	r2, r3
 80059c6:	89bb      	ldrh	r3, [r7, #12]
 80059c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80059cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80059d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80059d4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80059d8:	b29b      	uxth	r3, r3
 80059da:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	78db      	ldrb	r3, [r3, #3]
 80059e0:	2b01      	cmp	r3, #1
 80059e2:	d020      	beq.n	8005a26 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80059e4:	687a      	ldr	r2, [r7, #4]
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	781b      	ldrb	r3, [r3, #0]
 80059ea:	009b      	lsls	r3, r3, #2
 80059ec:	4413      	add	r3, r2
 80059ee:	881b      	ldrh	r3, [r3, #0]
 80059f0:	b29b      	uxth	r3, r3
 80059f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80059fa:	813b      	strh	r3, [r7, #8]
 80059fc:	893b      	ldrh	r3, [r7, #8]
 80059fe:	f083 0320 	eor.w	r3, r3, #32
 8005a02:	813b      	strh	r3, [r7, #8]
 8005a04:	687a      	ldr	r2, [r7, #4]
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	781b      	ldrb	r3, [r3, #0]
 8005a0a:	009b      	lsls	r3, r3, #2
 8005a0c:	441a      	add	r2, r3
 8005a0e:	893b      	ldrh	r3, [r7, #8]
 8005a10:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a14:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a18:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a20:	b29b      	uxth	r3, r3
 8005a22:	8013      	strh	r3, [r2, #0]
 8005a24:	e27f      	b.n	8005f26 <USB_ActivateEndpoint+0x6ca>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005a26:	687a      	ldr	r2, [r7, #4]
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	781b      	ldrb	r3, [r3, #0]
 8005a2c:	009b      	lsls	r3, r3, #2
 8005a2e:	4413      	add	r3, r2
 8005a30:	881b      	ldrh	r3, [r3, #0]
 8005a32:	b29b      	uxth	r3, r3
 8005a34:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a38:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a3c:	817b      	strh	r3, [r7, #10]
 8005a3e:	687a      	ldr	r2, [r7, #4]
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	781b      	ldrb	r3, [r3, #0]
 8005a44:	009b      	lsls	r3, r3, #2
 8005a46:	441a      	add	r2, r3
 8005a48:	897b      	ldrh	r3, [r7, #10]
 8005a4a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a4e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a5a:	b29b      	uxth	r3, r3
 8005a5c:	8013      	strh	r3, [r2, #0]
 8005a5e:	e262      	b.n	8005f26 <USB_ActivateEndpoint+0x6ca>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a6a:	b29b      	uxth	r3, r3
 8005a6c:	461a      	mov	r2, r3
 8005a6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a70:	4413      	add	r3, r2
 8005a72:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	781b      	ldrb	r3, [r3, #0]
 8005a78:	00da      	lsls	r2, r3, #3
 8005a7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a7c:	4413      	add	r3, r2
 8005a7e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005a82:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	88db      	ldrh	r3, [r3, #6]
 8005a88:	085b      	lsrs	r3, r3, #1
 8005a8a:	b29b      	uxth	r3, r3
 8005a8c:	005b      	lsls	r3, r3, #1
 8005a8e:	b29a      	uxth	r2, r3
 8005a90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a92:	801a      	strh	r2, [r3, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	627b      	str	r3, [r7, #36]	; 0x24
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a9e:	b29b      	uxth	r3, r3
 8005aa0:	461a      	mov	r2, r3
 8005aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aa4:	4413      	add	r3, r2
 8005aa6:	627b      	str	r3, [r7, #36]	; 0x24
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	781b      	ldrb	r3, [r3, #0]
 8005aac:	00da      	lsls	r2, r3, #3
 8005aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ab0:	4413      	add	r3, r2
 8005ab2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005ab6:	623b      	str	r3, [r7, #32]
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	691b      	ldr	r3, [r3, #16]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d112      	bne.n	8005ae6 <USB_ActivateEndpoint+0x28a>
 8005ac0:	6a3b      	ldr	r3, [r7, #32]
 8005ac2:	881b      	ldrh	r3, [r3, #0]
 8005ac4:	b29b      	uxth	r3, r3
 8005ac6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005aca:	b29a      	uxth	r2, r3
 8005acc:	6a3b      	ldr	r3, [r7, #32]
 8005ace:	801a      	strh	r2, [r3, #0]
 8005ad0:	6a3b      	ldr	r3, [r7, #32]
 8005ad2:	881b      	ldrh	r3, [r3, #0]
 8005ad4:	b29b      	uxth	r3, r3
 8005ad6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ada:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ade:	b29a      	uxth	r2, r3
 8005ae0:	6a3b      	ldr	r3, [r7, #32]
 8005ae2:	801a      	strh	r2, [r3, #0]
 8005ae4:	e02f      	b.n	8005b46 <USB_ActivateEndpoint+0x2ea>
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	691b      	ldr	r3, [r3, #16]
 8005aea:	2b3e      	cmp	r3, #62	; 0x3e
 8005aec:	d813      	bhi.n	8005b16 <USB_ActivateEndpoint+0x2ba>
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	691b      	ldr	r3, [r3, #16]
 8005af2:	085b      	lsrs	r3, r3, #1
 8005af4:	663b      	str	r3, [r7, #96]	; 0x60
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	691b      	ldr	r3, [r3, #16]
 8005afa:	f003 0301 	and.w	r3, r3, #1
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d002      	beq.n	8005b08 <USB_ActivateEndpoint+0x2ac>
 8005b02:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005b04:	3301      	adds	r3, #1
 8005b06:	663b      	str	r3, [r7, #96]	; 0x60
 8005b08:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005b0a:	b29b      	uxth	r3, r3
 8005b0c:	029b      	lsls	r3, r3, #10
 8005b0e:	b29a      	uxth	r2, r3
 8005b10:	6a3b      	ldr	r3, [r7, #32]
 8005b12:	801a      	strh	r2, [r3, #0]
 8005b14:	e017      	b.n	8005b46 <USB_ActivateEndpoint+0x2ea>
 8005b16:	683b      	ldr	r3, [r7, #0]
 8005b18:	691b      	ldr	r3, [r3, #16]
 8005b1a:	095b      	lsrs	r3, r3, #5
 8005b1c:	663b      	str	r3, [r7, #96]	; 0x60
 8005b1e:	683b      	ldr	r3, [r7, #0]
 8005b20:	691b      	ldr	r3, [r3, #16]
 8005b22:	f003 031f 	and.w	r3, r3, #31
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d102      	bne.n	8005b30 <USB_ActivateEndpoint+0x2d4>
 8005b2a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005b2c:	3b01      	subs	r3, #1
 8005b2e:	663b      	str	r3, [r7, #96]	; 0x60
 8005b30:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005b32:	b29b      	uxth	r3, r3
 8005b34:	029b      	lsls	r3, r3, #10
 8005b36:	b29b      	uxth	r3, r3
 8005b38:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b3c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b40:	b29a      	uxth	r2, r3
 8005b42:	6a3b      	ldr	r3, [r7, #32]
 8005b44:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005b46:	687a      	ldr	r2, [r7, #4]
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	781b      	ldrb	r3, [r3, #0]
 8005b4c:	009b      	lsls	r3, r3, #2
 8005b4e:	4413      	add	r3, r2
 8005b50:	881b      	ldrh	r3, [r3, #0]
 8005b52:	83fb      	strh	r3, [r7, #30]
 8005b54:	8bfb      	ldrh	r3, [r7, #30]
 8005b56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d01b      	beq.n	8005b96 <USB_ActivateEndpoint+0x33a>
 8005b5e:	687a      	ldr	r2, [r7, #4]
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	781b      	ldrb	r3, [r3, #0]
 8005b64:	009b      	lsls	r3, r3, #2
 8005b66:	4413      	add	r3, r2
 8005b68:	881b      	ldrh	r3, [r3, #0]
 8005b6a:	b29b      	uxth	r3, r3
 8005b6c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b74:	83bb      	strh	r3, [r7, #28]
 8005b76:	687a      	ldr	r2, [r7, #4]
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	781b      	ldrb	r3, [r3, #0]
 8005b7c:	009b      	lsls	r3, r3, #2
 8005b7e:	441a      	add	r2, r3
 8005b80:	8bbb      	ldrh	r3, [r7, #28]
 8005b82:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b86:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b8a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005b8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b92:	b29b      	uxth	r3, r3
 8005b94:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005b96:	687a      	ldr	r2, [r7, #4]
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	781b      	ldrb	r3, [r3, #0]
 8005b9c:	009b      	lsls	r3, r3, #2
 8005b9e:	4413      	add	r3, r2
 8005ba0:	881b      	ldrh	r3, [r3, #0]
 8005ba2:	b29b      	uxth	r3, r3
 8005ba4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005ba8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bac:	837b      	strh	r3, [r7, #26]
 8005bae:	8b7b      	ldrh	r3, [r7, #26]
 8005bb0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005bb4:	837b      	strh	r3, [r7, #26]
 8005bb6:	8b7b      	ldrh	r3, [r7, #26]
 8005bb8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005bbc:	837b      	strh	r3, [r7, #26]
 8005bbe:	687a      	ldr	r2, [r7, #4]
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	781b      	ldrb	r3, [r3, #0]
 8005bc4:	009b      	lsls	r3, r3, #2
 8005bc6:	441a      	add	r2, r3
 8005bc8:	8b7b      	ldrh	r3, [r7, #26]
 8005bca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005bce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005bd2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005bd6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005bda:	b29b      	uxth	r3, r3
 8005bdc:	8013      	strh	r3, [r2, #0]
 8005bde:	e1a2      	b.n	8005f26 <USB_ActivateEndpoint+0x6ca>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8005be0:	687a      	ldr	r2, [r7, #4]
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	781b      	ldrb	r3, [r3, #0]
 8005be6:	009b      	lsls	r3, r3, #2
 8005be8:	4413      	add	r3, r2
 8005bea:	881b      	ldrh	r3, [r3, #0]
 8005bec:	b29b      	uxth	r3, r3
 8005bee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005bf2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bf6:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8005bfa:	687a      	ldr	r2, [r7, #4]
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	781b      	ldrb	r3, [r3, #0]
 8005c00:	009b      	lsls	r3, r3, #2
 8005c02:	441a      	add	r2, r3
 8005c04:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8005c08:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c0c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c10:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005c14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c18:	b29b      	uxth	r3, r3
 8005c1a:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	65bb      	str	r3, [r7, #88]	; 0x58
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c26:	b29b      	uxth	r3, r3
 8005c28:	461a      	mov	r2, r3
 8005c2a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005c2c:	4413      	add	r3, r2
 8005c2e:	65bb      	str	r3, [r7, #88]	; 0x58
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	781b      	ldrb	r3, [r3, #0]
 8005c34:	00da      	lsls	r2, r3, #3
 8005c36:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005c38:	4413      	add	r3, r2
 8005c3a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005c3e:	657b      	str	r3, [r7, #84]	; 0x54
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	891b      	ldrh	r3, [r3, #8]
 8005c44:	085b      	lsrs	r3, r3, #1
 8005c46:	b29b      	uxth	r3, r3
 8005c48:	005b      	lsls	r3, r3, #1
 8005c4a:	b29a      	uxth	r2, r3
 8005c4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c4e:	801a      	strh	r2, [r3, #0]
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	653b      	str	r3, [r7, #80]	; 0x50
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c5a:	b29b      	uxth	r3, r3
 8005c5c:	461a      	mov	r2, r3
 8005c5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c60:	4413      	add	r3, r2
 8005c62:	653b      	str	r3, [r7, #80]	; 0x50
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	781b      	ldrb	r3, [r3, #0]
 8005c68:	00da      	lsls	r2, r3, #3
 8005c6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c6c:	4413      	add	r3, r2
 8005c6e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005c72:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	895b      	ldrh	r3, [r3, #10]
 8005c78:	085b      	lsrs	r3, r3, #1
 8005c7a:	b29b      	uxth	r3, r3
 8005c7c:	005b      	lsls	r3, r3, #1
 8005c7e:	b29a      	uxth	r2, r3
 8005c80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c82:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	785b      	ldrb	r3, [r3, #1]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	f040 8091 	bne.w	8005db0 <USB_ActivateEndpoint+0x554>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005c8e:	687a      	ldr	r2, [r7, #4]
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	781b      	ldrb	r3, [r3, #0]
 8005c94:	009b      	lsls	r3, r3, #2
 8005c96:	4413      	add	r3, r2
 8005c98:	881b      	ldrh	r3, [r3, #0]
 8005c9a:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8005c9c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005c9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d01b      	beq.n	8005cde <USB_ActivateEndpoint+0x482>
 8005ca6:	687a      	ldr	r2, [r7, #4]
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	781b      	ldrb	r3, [r3, #0]
 8005cac:	009b      	lsls	r3, r3, #2
 8005cae:	4413      	add	r3, r2
 8005cb0:	881b      	ldrh	r3, [r3, #0]
 8005cb2:	b29b      	uxth	r3, r3
 8005cb4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005cb8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cbc:	877b      	strh	r3, [r7, #58]	; 0x3a
 8005cbe:	687a      	ldr	r2, [r7, #4]
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	781b      	ldrb	r3, [r3, #0]
 8005cc4:	009b      	lsls	r3, r3, #2
 8005cc6:	441a      	add	r2, r3
 8005cc8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8005cca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005cce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005cd2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005cd6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005cda:	b29b      	uxth	r3, r3
 8005cdc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005cde:	687a      	ldr	r2, [r7, #4]
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	781b      	ldrb	r3, [r3, #0]
 8005ce4:	009b      	lsls	r3, r3, #2
 8005ce6:	4413      	add	r3, r2
 8005ce8:	881b      	ldrh	r3, [r3, #0]
 8005cea:	873b      	strh	r3, [r7, #56]	; 0x38
 8005cec:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005cee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d01b      	beq.n	8005d2e <USB_ActivateEndpoint+0x4d2>
 8005cf6:	687a      	ldr	r2, [r7, #4]
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	781b      	ldrb	r3, [r3, #0]
 8005cfc:	009b      	lsls	r3, r3, #2
 8005cfe:	4413      	add	r3, r2
 8005d00:	881b      	ldrh	r3, [r3, #0]
 8005d02:	b29b      	uxth	r3, r3
 8005d04:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d0c:	86fb      	strh	r3, [r7, #54]	; 0x36
 8005d0e:	687a      	ldr	r2, [r7, #4]
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	781b      	ldrb	r3, [r3, #0]
 8005d14:	009b      	lsls	r3, r3, #2
 8005d16:	441a      	add	r2, r3
 8005d18:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005d1a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d1e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d26:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005d2a:	b29b      	uxth	r3, r3
 8005d2c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005d2e:	687a      	ldr	r2, [r7, #4]
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	781b      	ldrb	r3, [r3, #0]
 8005d34:	009b      	lsls	r3, r3, #2
 8005d36:	4413      	add	r3, r2
 8005d38:	881b      	ldrh	r3, [r3, #0]
 8005d3a:	b29b      	uxth	r3, r3
 8005d3c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005d40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d44:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005d46:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005d48:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005d4c:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005d4e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005d50:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005d54:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005d56:	687a      	ldr	r2, [r7, #4]
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	781b      	ldrb	r3, [r3, #0]
 8005d5c:	009b      	lsls	r3, r3, #2
 8005d5e:	441a      	add	r2, r3
 8005d60:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005d62:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d66:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d72:	b29b      	uxth	r3, r3
 8005d74:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005d76:	687a      	ldr	r2, [r7, #4]
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	781b      	ldrb	r3, [r3, #0]
 8005d7c:	009b      	lsls	r3, r3, #2
 8005d7e:	4413      	add	r3, r2
 8005d80:	881b      	ldrh	r3, [r3, #0]
 8005d82:	b29b      	uxth	r3, r3
 8005d84:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d88:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d8c:	867b      	strh	r3, [r7, #50]	; 0x32
 8005d8e:	687a      	ldr	r2, [r7, #4]
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	781b      	ldrb	r3, [r3, #0]
 8005d94:	009b      	lsls	r3, r3, #2
 8005d96:	441a      	add	r2, r3
 8005d98:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8005d9a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d9e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005da2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005da6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005daa:	b29b      	uxth	r3, r3
 8005dac:	8013      	strh	r3, [r2, #0]
 8005dae:	e0ba      	b.n	8005f26 <USB_ActivateEndpoint+0x6ca>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005db0:	687a      	ldr	r2, [r7, #4]
 8005db2:	683b      	ldr	r3, [r7, #0]
 8005db4:	781b      	ldrb	r3, [r3, #0]
 8005db6:	009b      	lsls	r3, r3, #2
 8005db8:	4413      	add	r3, r2
 8005dba:	881b      	ldrh	r3, [r3, #0]
 8005dbc:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8005dc0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005dc4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d01d      	beq.n	8005e08 <USB_ActivateEndpoint+0x5ac>
 8005dcc:	687a      	ldr	r2, [r7, #4]
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	781b      	ldrb	r3, [r3, #0]
 8005dd2:	009b      	lsls	r3, r3, #2
 8005dd4:	4413      	add	r3, r2
 8005dd6:	881b      	ldrh	r3, [r3, #0]
 8005dd8:	b29b      	uxth	r3, r3
 8005dda:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005dde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005de2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8005de6:	687a      	ldr	r2, [r7, #4]
 8005de8:	683b      	ldr	r3, [r7, #0]
 8005dea:	781b      	ldrb	r3, [r3, #0]
 8005dec:	009b      	lsls	r3, r3, #2
 8005dee:	441a      	add	r2, r3
 8005df0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005df4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005df8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005dfc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005e00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e04:	b29b      	uxth	r3, r3
 8005e06:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005e08:	687a      	ldr	r2, [r7, #4]
 8005e0a:	683b      	ldr	r3, [r7, #0]
 8005e0c:	781b      	ldrb	r3, [r3, #0]
 8005e0e:	009b      	lsls	r3, r3, #2
 8005e10:	4413      	add	r3, r2
 8005e12:	881b      	ldrh	r3, [r3, #0]
 8005e14:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8005e18:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8005e1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d01d      	beq.n	8005e60 <USB_ActivateEndpoint+0x604>
 8005e24:	687a      	ldr	r2, [r7, #4]
 8005e26:	683b      	ldr	r3, [r7, #0]
 8005e28:	781b      	ldrb	r3, [r3, #0]
 8005e2a:	009b      	lsls	r3, r3, #2
 8005e2c:	4413      	add	r3, r2
 8005e2e:	881b      	ldrh	r3, [r3, #0]
 8005e30:	b29b      	uxth	r3, r3
 8005e32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e3a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005e3e:	687a      	ldr	r2, [r7, #4]
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	781b      	ldrb	r3, [r3, #0]
 8005e44:	009b      	lsls	r3, r3, #2
 8005e46:	441a      	add	r2, r3
 8005e48:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005e4c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e50:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e54:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e58:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005e5c:	b29b      	uxth	r3, r3
 8005e5e:	8013      	strh	r3, [r2, #0]


      if (ep->type != EP_TYPE_ISOC)
 8005e60:	683b      	ldr	r3, [r7, #0]
 8005e62:	78db      	ldrb	r3, [r3, #3]
 8005e64:	2b01      	cmp	r3, #1
 8005e66:	d024      	beq.n	8005eb2 <USB_ActivateEndpoint+0x656>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005e68:	687a      	ldr	r2, [r7, #4]
 8005e6a:	683b      	ldr	r3, [r7, #0]
 8005e6c:	781b      	ldrb	r3, [r3, #0]
 8005e6e:	009b      	lsls	r3, r3, #2
 8005e70:	4413      	add	r3, r2
 8005e72:	881b      	ldrh	r3, [r3, #0]
 8005e74:	b29b      	uxth	r3, r3
 8005e76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e7a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e7e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8005e82:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005e86:	f083 0320 	eor.w	r3, r3, #32
 8005e8a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8005e8e:	687a      	ldr	r2, [r7, #4]
 8005e90:	683b      	ldr	r3, [r7, #0]
 8005e92:	781b      	ldrb	r3, [r3, #0]
 8005e94:	009b      	lsls	r3, r3, #2
 8005e96:	441a      	add	r2, r3
 8005e98:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005e9c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ea0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ea4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ea8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005eac:	b29b      	uxth	r3, r3
 8005eae:	8013      	strh	r3, [r2, #0]
 8005eb0:	e01d      	b.n	8005eee <USB_ActivateEndpoint+0x692>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005eb2:	687a      	ldr	r2, [r7, #4]
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	781b      	ldrb	r3, [r3, #0]
 8005eb8:	009b      	lsls	r3, r3, #2
 8005eba:	4413      	add	r3, r2
 8005ebc:	881b      	ldrh	r3, [r3, #0]
 8005ebe:	b29b      	uxth	r3, r3
 8005ec0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ec4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ec8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8005ecc:	687a      	ldr	r2, [r7, #4]
 8005ece:	683b      	ldr	r3, [r7, #0]
 8005ed0:	781b      	ldrb	r3, [r3, #0]
 8005ed2:	009b      	lsls	r3, r3, #2
 8005ed4:	441a      	add	r2, r3
 8005ed6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8005eda:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ede:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ee2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ee6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005eea:	b29b      	uxth	r3, r3
 8005eec:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005eee:	687a      	ldr	r2, [r7, #4]
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	781b      	ldrb	r3, [r3, #0]
 8005ef4:	009b      	lsls	r3, r3, #2
 8005ef6:	4413      	add	r3, r2
 8005ef8:	881b      	ldrh	r3, [r3, #0]
 8005efa:	b29b      	uxth	r3, r3
 8005efc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005f00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f04:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8005f06:	687a      	ldr	r2, [r7, #4]
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	781b      	ldrb	r3, [r3, #0]
 8005f0c:	009b      	lsls	r3, r3, #2
 8005f0e:	441a      	add	r2, r3
 8005f10:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005f12:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f16:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f22:	b29b      	uxth	r3, r3
 8005f24:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8005f26:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	376c      	adds	r7, #108	; 0x6c
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f34:	4770      	bx	lr
 8005f36:	bf00      	nop

08005f38 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005f38:	b480      	push	{r7}
 8005f3a:	b08d      	sub	sp, #52	; 0x34
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
 8005f40:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005f42:	683b      	ldr	r3, [r7, #0]
 8005f44:	7b1b      	ldrb	r3, [r3, #12]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	f040 808e 	bne.w	8006068 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8005f4c:	683b      	ldr	r3, [r7, #0]
 8005f4e:	785b      	ldrb	r3, [r3, #1]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d044      	beq.n	8005fde <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005f54:	687a      	ldr	r2, [r7, #4]
 8005f56:	683b      	ldr	r3, [r7, #0]
 8005f58:	781b      	ldrb	r3, [r3, #0]
 8005f5a:	009b      	lsls	r3, r3, #2
 8005f5c:	4413      	add	r3, r2
 8005f5e:	881b      	ldrh	r3, [r3, #0]
 8005f60:	81bb      	strh	r3, [r7, #12]
 8005f62:	89bb      	ldrh	r3, [r7, #12]
 8005f64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d01b      	beq.n	8005fa4 <USB_DeactivateEndpoint+0x6c>
 8005f6c:	687a      	ldr	r2, [r7, #4]
 8005f6e:	683b      	ldr	r3, [r7, #0]
 8005f70:	781b      	ldrb	r3, [r3, #0]
 8005f72:	009b      	lsls	r3, r3, #2
 8005f74:	4413      	add	r3, r2
 8005f76:	881b      	ldrh	r3, [r3, #0]
 8005f78:	b29b      	uxth	r3, r3
 8005f7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f82:	817b      	strh	r3, [r7, #10]
 8005f84:	687a      	ldr	r2, [r7, #4]
 8005f86:	683b      	ldr	r3, [r7, #0]
 8005f88:	781b      	ldrb	r3, [r3, #0]
 8005f8a:	009b      	lsls	r3, r3, #2
 8005f8c:	441a      	add	r2, r3
 8005f8e:	897b      	ldrh	r3, [r7, #10]
 8005f90:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f94:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f98:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f9c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005fa0:	b29b      	uxth	r3, r3
 8005fa2:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005fa4:	687a      	ldr	r2, [r7, #4]
 8005fa6:	683b      	ldr	r3, [r7, #0]
 8005fa8:	781b      	ldrb	r3, [r3, #0]
 8005faa:	009b      	lsls	r3, r3, #2
 8005fac:	4413      	add	r3, r2
 8005fae:	881b      	ldrh	r3, [r3, #0]
 8005fb0:	b29b      	uxth	r3, r3
 8005fb2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005fb6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005fba:	813b      	strh	r3, [r7, #8]
 8005fbc:	687a      	ldr	r2, [r7, #4]
 8005fbe:	683b      	ldr	r3, [r7, #0]
 8005fc0:	781b      	ldrb	r3, [r3, #0]
 8005fc2:	009b      	lsls	r3, r3, #2
 8005fc4:	441a      	add	r2, r3
 8005fc6:	893b      	ldrh	r3, [r7, #8]
 8005fc8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005fcc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005fd0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005fd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005fd8:	b29b      	uxth	r3, r3
 8005fda:	8013      	strh	r3, [r2, #0]
 8005fdc:	e192      	b.n	8006304 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005fde:	687a      	ldr	r2, [r7, #4]
 8005fe0:	683b      	ldr	r3, [r7, #0]
 8005fe2:	781b      	ldrb	r3, [r3, #0]
 8005fe4:	009b      	lsls	r3, r3, #2
 8005fe6:	4413      	add	r3, r2
 8005fe8:	881b      	ldrh	r3, [r3, #0]
 8005fea:	827b      	strh	r3, [r7, #18]
 8005fec:	8a7b      	ldrh	r3, [r7, #18]
 8005fee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d01b      	beq.n	800602e <USB_DeactivateEndpoint+0xf6>
 8005ff6:	687a      	ldr	r2, [r7, #4]
 8005ff8:	683b      	ldr	r3, [r7, #0]
 8005ffa:	781b      	ldrb	r3, [r3, #0]
 8005ffc:	009b      	lsls	r3, r3, #2
 8005ffe:	4413      	add	r3, r2
 8006000:	881b      	ldrh	r3, [r3, #0]
 8006002:	b29b      	uxth	r3, r3
 8006004:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006008:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800600c:	823b      	strh	r3, [r7, #16]
 800600e:	687a      	ldr	r2, [r7, #4]
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	781b      	ldrb	r3, [r3, #0]
 8006014:	009b      	lsls	r3, r3, #2
 8006016:	441a      	add	r2, r3
 8006018:	8a3b      	ldrh	r3, [r7, #16]
 800601a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800601e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006022:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006026:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800602a:	b29b      	uxth	r3, r3
 800602c:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800602e:	687a      	ldr	r2, [r7, #4]
 8006030:	683b      	ldr	r3, [r7, #0]
 8006032:	781b      	ldrb	r3, [r3, #0]
 8006034:	009b      	lsls	r3, r3, #2
 8006036:	4413      	add	r3, r2
 8006038:	881b      	ldrh	r3, [r3, #0]
 800603a:	b29b      	uxth	r3, r3
 800603c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006040:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006044:	81fb      	strh	r3, [r7, #14]
 8006046:	687a      	ldr	r2, [r7, #4]
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	781b      	ldrb	r3, [r3, #0]
 800604c:	009b      	lsls	r3, r3, #2
 800604e:	441a      	add	r2, r3
 8006050:	89fb      	ldrh	r3, [r7, #14]
 8006052:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006056:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800605a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800605e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006062:	b29b      	uxth	r3, r3
 8006064:	8013      	strh	r3, [r2, #0]
 8006066:	e14d      	b.n	8006304 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8006068:	683b      	ldr	r3, [r7, #0]
 800606a:	785b      	ldrb	r3, [r3, #1]
 800606c:	2b00      	cmp	r3, #0
 800606e:	f040 80a5 	bne.w	80061bc <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006072:	687a      	ldr	r2, [r7, #4]
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	781b      	ldrb	r3, [r3, #0]
 8006078:	009b      	lsls	r3, r3, #2
 800607a:	4413      	add	r3, r2
 800607c:	881b      	ldrh	r3, [r3, #0]
 800607e:	843b      	strh	r3, [r7, #32]
 8006080:	8c3b      	ldrh	r3, [r7, #32]
 8006082:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006086:	2b00      	cmp	r3, #0
 8006088:	d01b      	beq.n	80060c2 <USB_DeactivateEndpoint+0x18a>
 800608a:	687a      	ldr	r2, [r7, #4]
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	781b      	ldrb	r3, [r3, #0]
 8006090:	009b      	lsls	r3, r3, #2
 8006092:	4413      	add	r3, r2
 8006094:	881b      	ldrh	r3, [r3, #0]
 8006096:	b29b      	uxth	r3, r3
 8006098:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800609c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060a0:	83fb      	strh	r3, [r7, #30]
 80060a2:	687a      	ldr	r2, [r7, #4]
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	781b      	ldrb	r3, [r3, #0]
 80060a8:	009b      	lsls	r3, r3, #2
 80060aa:	441a      	add	r2, r3
 80060ac:	8bfb      	ldrh	r3, [r7, #30]
 80060ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060b6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80060ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060be:	b29b      	uxth	r3, r3
 80060c0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80060c2:	687a      	ldr	r2, [r7, #4]
 80060c4:	683b      	ldr	r3, [r7, #0]
 80060c6:	781b      	ldrb	r3, [r3, #0]
 80060c8:	009b      	lsls	r3, r3, #2
 80060ca:	4413      	add	r3, r2
 80060cc:	881b      	ldrh	r3, [r3, #0]
 80060ce:	83bb      	strh	r3, [r7, #28]
 80060d0:	8bbb      	ldrh	r3, [r7, #28]
 80060d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d01b      	beq.n	8006112 <USB_DeactivateEndpoint+0x1da>
 80060da:	687a      	ldr	r2, [r7, #4]
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	781b      	ldrb	r3, [r3, #0]
 80060e0:	009b      	lsls	r3, r3, #2
 80060e2:	4413      	add	r3, r2
 80060e4:	881b      	ldrh	r3, [r3, #0]
 80060e6:	b29b      	uxth	r3, r3
 80060e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060f0:	837b      	strh	r3, [r7, #26]
 80060f2:	687a      	ldr	r2, [r7, #4]
 80060f4:	683b      	ldr	r3, [r7, #0]
 80060f6:	781b      	ldrb	r3, [r3, #0]
 80060f8:	009b      	lsls	r3, r3, #2
 80060fa:	441a      	add	r2, r3
 80060fc:	8b7b      	ldrh	r3, [r7, #26]
 80060fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006102:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006106:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800610a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800610e:	b29b      	uxth	r3, r3
 8006110:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8006112:	687a      	ldr	r2, [r7, #4]
 8006114:	683b      	ldr	r3, [r7, #0]
 8006116:	781b      	ldrb	r3, [r3, #0]
 8006118:	009b      	lsls	r3, r3, #2
 800611a:	4413      	add	r3, r2
 800611c:	881b      	ldrh	r3, [r3, #0]
 800611e:	b29b      	uxth	r3, r3
 8006120:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006124:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006128:	833b      	strh	r3, [r7, #24]
 800612a:	687a      	ldr	r2, [r7, #4]
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	781b      	ldrb	r3, [r3, #0]
 8006130:	009b      	lsls	r3, r3, #2
 8006132:	441a      	add	r2, r3
 8006134:	8b3b      	ldrh	r3, [r7, #24]
 8006136:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800613a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800613e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006142:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006146:	b29b      	uxth	r3, r3
 8006148:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800614a:	687a      	ldr	r2, [r7, #4]
 800614c:	683b      	ldr	r3, [r7, #0]
 800614e:	781b      	ldrb	r3, [r3, #0]
 8006150:	009b      	lsls	r3, r3, #2
 8006152:	4413      	add	r3, r2
 8006154:	881b      	ldrh	r3, [r3, #0]
 8006156:	b29b      	uxth	r3, r3
 8006158:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800615c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006160:	82fb      	strh	r3, [r7, #22]
 8006162:	687a      	ldr	r2, [r7, #4]
 8006164:	683b      	ldr	r3, [r7, #0]
 8006166:	781b      	ldrb	r3, [r3, #0]
 8006168:	009b      	lsls	r3, r3, #2
 800616a:	441a      	add	r2, r3
 800616c:	8afb      	ldrh	r3, [r7, #22]
 800616e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006172:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006176:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800617a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800617e:	b29b      	uxth	r3, r3
 8006180:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006182:	687a      	ldr	r2, [r7, #4]
 8006184:	683b      	ldr	r3, [r7, #0]
 8006186:	781b      	ldrb	r3, [r3, #0]
 8006188:	009b      	lsls	r3, r3, #2
 800618a:	4413      	add	r3, r2
 800618c:	881b      	ldrh	r3, [r3, #0]
 800618e:	b29b      	uxth	r3, r3
 8006190:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006194:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006198:	82bb      	strh	r3, [r7, #20]
 800619a:	687a      	ldr	r2, [r7, #4]
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	781b      	ldrb	r3, [r3, #0]
 80061a0:	009b      	lsls	r3, r3, #2
 80061a2:	441a      	add	r2, r3
 80061a4:	8abb      	ldrh	r3, [r7, #20]
 80061a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80061aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80061ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80061b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061b6:	b29b      	uxth	r3, r3
 80061b8:	8013      	strh	r3, [r2, #0]
 80061ba:	e0a3      	b.n	8006304 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80061bc:	687a      	ldr	r2, [r7, #4]
 80061be:	683b      	ldr	r3, [r7, #0]
 80061c0:	781b      	ldrb	r3, [r3, #0]
 80061c2:	009b      	lsls	r3, r3, #2
 80061c4:	4413      	add	r3, r2
 80061c6:	881b      	ldrh	r3, [r3, #0]
 80061c8:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80061ca:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80061cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d01b      	beq.n	800620c <USB_DeactivateEndpoint+0x2d4>
 80061d4:	687a      	ldr	r2, [r7, #4]
 80061d6:	683b      	ldr	r3, [r7, #0]
 80061d8:	781b      	ldrb	r3, [r3, #0]
 80061da:	009b      	lsls	r3, r3, #2
 80061dc:	4413      	add	r3, r2
 80061de:	881b      	ldrh	r3, [r3, #0]
 80061e0:	b29b      	uxth	r3, r3
 80061e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80061e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061ea:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80061ec:	687a      	ldr	r2, [r7, #4]
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	781b      	ldrb	r3, [r3, #0]
 80061f2:	009b      	lsls	r3, r3, #2
 80061f4:	441a      	add	r2, r3
 80061f6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80061f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80061fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006200:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006204:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006208:	b29b      	uxth	r3, r3
 800620a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800620c:	687a      	ldr	r2, [r7, #4]
 800620e:	683b      	ldr	r3, [r7, #0]
 8006210:	781b      	ldrb	r3, [r3, #0]
 8006212:	009b      	lsls	r3, r3, #2
 8006214:	4413      	add	r3, r2
 8006216:	881b      	ldrh	r3, [r3, #0]
 8006218:	857b      	strh	r3, [r7, #42]	; 0x2a
 800621a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800621c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006220:	2b00      	cmp	r3, #0
 8006222:	d01b      	beq.n	800625c <USB_DeactivateEndpoint+0x324>
 8006224:	687a      	ldr	r2, [r7, #4]
 8006226:	683b      	ldr	r3, [r7, #0]
 8006228:	781b      	ldrb	r3, [r3, #0]
 800622a:	009b      	lsls	r3, r3, #2
 800622c:	4413      	add	r3, r2
 800622e:	881b      	ldrh	r3, [r3, #0]
 8006230:	b29b      	uxth	r3, r3
 8006232:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006236:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800623a:	853b      	strh	r3, [r7, #40]	; 0x28
 800623c:	687a      	ldr	r2, [r7, #4]
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	781b      	ldrb	r3, [r3, #0]
 8006242:	009b      	lsls	r3, r3, #2
 8006244:	441a      	add	r2, r3
 8006246:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006248:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800624c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006250:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006254:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006258:	b29b      	uxth	r3, r3
 800625a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800625c:	687a      	ldr	r2, [r7, #4]
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	781b      	ldrb	r3, [r3, #0]
 8006262:	009b      	lsls	r3, r3, #2
 8006264:	4413      	add	r3, r2
 8006266:	881b      	ldrh	r3, [r3, #0]
 8006268:	b29b      	uxth	r3, r3
 800626a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800626e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006272:	84fb      	strh	r3, [r7, #38]	; 0x26
 8006274:	687a      	ldr	r2, [r7, #4]
 8006276:	683b      	ldr	r3, [r7, #0]
 8006278:	781b      	ldrb	r3, [r3, #0]
 800627a:	009b      	lsls	r3, r3, #2
 800627c:	441a      	add	r2, r3
 800627e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006280:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006284:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006288:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800628c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006290:	b29b      	uxth	r3, r3
 8006292:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006294:	687a      	ldr	r2, [r7, #4]
 8006296:	683b      	ldr	r3, [r7, #0]
 8006298:	781b      	ldrb	r3, [r3, #0]
 800629a:	009b      	lsls	r3, r3, #2
 800629c:	4413      	add	r3, r2
 800629e:	881b      	ldrh	r3, [r3, #0]
 80062a0:	b29b      	uxth	r3, r3
 80062a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80062aa:	84bb      	strh	r3, [r7, #36]	; 0x24
 80062ac:	687a      	ldr	r2, [r7, #4]
 80062ae:	683b      	ldr	r3, [r7, #0]
 80062b0:	781b      	ldrb	r3, [r3, #0]
 80062b2:	009b      	lsls	r3, r3, #2
 80062b4:	441a      	add	r2, r3
 80062b6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80062b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80062bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80062c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062c8:	b29b      	uxth	r3, r3
 80062ca:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80062cc:	687a      	ldr	r2, [r7, #4]
 80062ce:	683b      	ldr	r3, [r7, #0]
 80062d0:	781b      	ldrb	r3, [r3, #0]
 80062d2:	009b      	lsls	r3, r3, #2
 80062d4:	4413      	add	r3, r2
 80062d6:	881b      	ldrh	r3, [r3, #0]
 80062d8:	b29b      	uxth	r3, r3
 80062da:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80062de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062e2:	847b      	strh	r3, [r7, #34]	; 0x22
 80062e4:	687a      	ldr	r2, [r7, #4]
 80062e6:	683b      	ldr	r3, [r7, #0]
 80062e8:	781b      	ldrb	r3, [r3, #0]
 80062ea:	009b      	lsls	r3, r3, #2
 80062ec:	441a      	add	r2, r3
 80062ee:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80062f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80062f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80062f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006300:	b29b      	uxth	r3, r3
 8006302:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006304:	2300      	movs	r3, #0
}
 8006306:	4618      	mov	r0, r3
 8006308:	3734      	adds	r7, #52	; 0x34
 800630a:	46bd      	mov	sp, r7
 800630c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006310:	4770      	bx	lr

08006312 <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006312:	b580      	push	{r7, lr}
 8006314:	b0c4      	sub	sp, #272	; 0x110
 8006316:	af00      	add	r7, sp, #0
 8006318:	1d3b      	adds	r3, r7, #4
 800631a:	6018      	str	r0, [r3, #0]
 800631c:	463b      	mov	r3, r7
 800631e:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint32_t len;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006320:	463b      	mov	r3, r7
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	785b      	ldrb	r3, [r3, #1]
 8006326:	2b01      	cmp	r3, #1
 8006328:	f040 8566 	bne.w	8006df8 <USB_EPStartXfer+0xae6>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800632c:	463b      	mov	r3, r7
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	699a      	ldr	r2, [r3, #24]
 8006332:	463b      	mov	r3, r7
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	691b      	ldr	r3, [r3, #16]
 8006338:	429a      	cmp	r2, r3
 800633a:	d905      	bls.n	8006348 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 800633c:	463b      	mov	r3, r7
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	691b      	ldr	r3, [r3, #16]
 8006342:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006346:	e004      	b.n	8006352 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8006348:	463b      	mov	r3, r7
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	699b      	ldr	r3, [r3, #24]
 800634e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8006352:	463b      	mov	r3, r7
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	7b1b      	ldrb	r3, [r3, #12]
 8006358:	2b00      	cmp	r3, #0
 800635a:	d12c      	bne.n	80063b6 <USB_EPStartXfer+0xa4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800635c:	463b      	mov	r3, r7
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	6959      	ldr	r1, [r3, #20]
 8006362:	463b      	mov	r3, r7
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	88da      	ldrh	r2, [r3, #6]
 8006368:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800636c:	b29b      	uxth	r3, r3
 800636e:	1d38      	adds	r0, r7, #4
 8006370:	6800      	ldr	r0, [r0, #0]
 8006372:	f001 fa43 	bl	80077fc <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006376:	1d3b      	adds	r3, r7, #4
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	617b      	str	r3, [r7, #20]
 800637c:	1d3b      	adds	r3, r7, #4
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006384:	b29b      	uxth	r3, r3
 8006386:	461a      	mov	r2, r3
 8006388:	697b      	ldr	r3, [r7, #20]
 800638a:	4413      	add	r3, r2
 800638c:	617b      	str	r3, [r7, #20]
 800638e:	463b      	mov	r3, r7
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	781b      	ldrb	r3, [r3, #0]
 8006394:	00da      	lsls	r2, r3, #3
 8006396:	697b      	ldr	r3, [r7, #20]
 8006398:	4413      	add	r3, r2
 800639a:	f203 4202 	addw	r2, r3, #1026	; 0x402
 800639e:	f107 0310 	add.w	r3, r7, #16
 80063a2:	601a      	str	r2, [r3, #0]
 80063a4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80063a8:	b29a      	uxth	r2, r3
 80063aa:	f107 0310 	add.w	r3, r7, #16
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	801a      	strh	r2, [r3, #0]
 80063b2:	f000 bcec 	b.w	8006d8e <USB_EPStartXfer+0xa7c>
    }
    else
    {
      /*double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80063b6:	463b      	mov	r3, r7
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	78db      	ldrb	r3, [r3, #3]
 80063bc:	2b02      	cmp	r3, #2
 80063be:	f040 8356 	bne.w	8006a6e <USB_EPStartXfer+0x75c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80063c2:	463b      	mov	r3, r7
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	6a1a      	ldr	r2, [r3, #32]
 80063c8:	463b      	mov	r3, r7
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	691b      	ldr	r3, [r3, #16]
 80063ce:	429a      	cmp	r2, r3
 80063d0:	f240 82fa 	bls.w	80069c8 <USB_EPStartXfer+0x6b6>
        {
          /*enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 80063d4:	1d3b      	adds	r3, r7, #4
 80063d6:	681a      	ldr	r2, [r3, #0]
 80063d8:	463b      	mov	r3, r7
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	781b      	ldrb	r3, [r3, #0]
 80063de:	009b      	lsls	r3, r3, #2
 80063e0:	4413      	add	r3, r2
 80063e2:	881b      	ldrh	r3, [r3, #0]
 80063e4:	b29b      	uxth	r3, r3
 80063e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80063ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063ee:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 80063f2:	1d3b      	adds	r3, r7, #4
 80063f4:	681a      	ldr	r2, [r3, #0]
 80063f6:	463b      	mov	r3, r7
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	781b      	ldrb	r3, [r3, #0]
 80063fc:	009b      	lsls	r3, r3, #2
 80063fe:	441a      	add	r2, r3
 8006400:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8006404:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006408:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800640c:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006410:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006414:	b29b      	uxth	r3, r3
 8006416:	8013      	strh	r3, [r2, #0]
          len = ep->maxpacket;
 8006418:	463b      	mov	r3, r7
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	691b      	ldr	r3, [r3, #16]
 800641e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          /*each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8006422:	463b      	mov	r3, r7
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	6a1a      	ldr	r2, [r3, #32]
 8006428:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800642c:	1ad2      	subs	r2, r2, r3
 800642e:	463b      	mov	r3, r7
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1*/
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006434:	1d3b      	adds	r3, r7, #4
 8006436:	681a      	ldr	r2, [r3, #0]
 8006438:	463b      	mov	r3, r7
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	781b      	ldrb	r3, [r3, #0]
 800643e:	009b      	lsls	r3, r3, #2
 8006440:	4413      	add	r3, r2
 8006442:	881b      	ldrh	r3, [r3, #0]
 8006444:	b29b      	uxth	r3, r3
 8006446:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800644a:	2b00      	cmp	r3, #0
 800644c:	f000 815e 	beq.w	800670c <USB_EPStartXfer+0x3fa>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006450:	1d3b      	adds	r3, r7, #4
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	637b      	str	r3, [r7, #52]	; 0x34
 8006456:	463b      	mov	r3, r7
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	785b      	ldrb	r3, [r3, #1]
 800645c:	2b00      	cmp	r3, #0
 800645e:	d164      	bne.n	800652a <USB_EPStartXfer+0x218>
 8006460:	1d3b      	adds	r3, r7, #4
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006466:	1d3b      	adds	r3, r7, #4
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800646e:	b29b      	uxth	r3, r3
 8006470:	461a      	mov	r2, r3
 8006472:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006474:	4413      	add	r3, r2
 8006476:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006478:	463b      	mov	r3, r7
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	781b      	ldrb	r3, [r3, #0]
 800647e:	00da      	lsls	r2, r3, #3
 8006480:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006482:	4413      	add	r3, r2
 8006484:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006488:	62bb      	str	r3, [r7, #40]	; 0x28
 800648a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800648e:	2b00      	cmp	r3, #0
 8006490:	d112      	bne.n	80064b8 <USB_EPStartXfer+0x1a6>
 8006492:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006494:	881b      	ldrh	r3, [r3, #0]
 8006496:	b29b      	uxth	r3, r3
 8006498:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800649c:	b29a      	uxth	r2, r3
 800649e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064a0:	801a      	strh	r2, [r3, #0]
 80064a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064a4:	881b      	ldrh	r3, [r3, #0]
 80064a6:	b29b      	uxth	r3, r3
 80064a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80064ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80064b0:	b29a      	uxth	r2, r3
 80064b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064b4:	801a      	strh	r2, [r3, #0]
 80064b6:	e054      	b.n	8006562 <USB_EPStartXfer+0x250>
 80064b8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80064bc:	2b3e      	cmp	r3, #62	; 0x3e
 80064be:	d817      	bhi.n	80064f0 <USB_EPStartXfer+0x1de>
 80064c0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80064c4:	085b      	lsrs	r3, r3, #1
 80064c6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80064ca:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80064ce:	f003 0301 	and.w	r3, r3, #1
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d004      	beq.n	80064e0 <USB_EPStartXfer+0x1ce>
 80064d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064da:	3301      	adds	r3, #1
 80064dc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80064e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064e4:	b29b      	uxth	r3, r3
 80064e6:	029b      	lsls	r3, r3, #10
 80064e8:	b29a      	uxth	r2, r3
 80064ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064ec:	801a      	strh	r2, [r3, #0]
 80064ee:	e038      	b.n	8006562 <USB_EPStartXfer+0x250>
 80064f0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80064f4:	095b      	lsrs	r3, r3, #5
 80064f6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80064fa:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80064fe:	f003 031f 	and.w	r3, r3, #31
 8006502:	2b00      	cmp	r3, #0
 8006504:	d104      	bne.n	8006510 <USB_EPStartXfer+0x1fe>
 8006506:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800650a:	3b01      	subs	r3, #1
 800650c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006510:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006514:	b29b      	uxth	r3, r3
 8006516:	029b      	lsls	r3, r3, #10
 8006518:	b29b      	uxth	r3, r3
 800651a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800651e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006522:	b29a      	uxth	r2, r3
 8006524:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006526:	801a      	strh	r2, [r3, #0]
 8006528:	e01b      	b.n	8006562 <USB_EPStartXfer+0x250>
 800652a:	463b      	mov	r3, r7
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	785b      	ldrb	r3, [r3, #1]
 8006530:	2b01      	cmp	r3, #1
 8006532:	d116      	bne.n	8006562 <USB_EPStartXfer+0x250>
 8006534:	1d3b      	adds	r3, r7, #4
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800653c:	b29b      	uxth	r3, r3
 800653e:	461a      	mov	r2, r3
 8006540:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006542:	4413      	add	r3, r2
 8006544:	637b      	str	r3, [r7, #52]	; 0x34
 8006546:	463b      	mov	r3, r7
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	781b      	ldrb	r3, [r3, #0]
 800654c:	00da      	lsls	r2, r3, #3
 800654e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006550:	4413      	add	r3, r2
 8006552:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006556:	633b      	str	r3, [r7, #48]	; 0x30
 8006558:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800655c:	b29a      	uxth	r2, r3
 800655e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006560:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006562:	463b      	mov	r3, r7
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	895b      	ldrh	r3, [r3, #10]
 8006568:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800656c:	463b      	mov	r3, r7
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	6959      	ldr	r1, [r3, #20]
 8006572:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006576:	b29b      	uxth	r3, r3
 8006578:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 800657c:	1d38      	adds	r0, r7, #4
 800657e:	6800      	ldr	r0, [r0, #0]
 8006580:	f001 f93c 	bl	80077fc <USB_WritePMA>
            ep->xfer_buff += len;
 8006584:	463b      	mov	r3, r7
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	695a      	ldr	r2, [r3, #20]
 800658a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800658e:	441a      	add	r2, r3
 8006590:	463b      	mov	r3, r7
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006596:	463b      	mov	r3, r7
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	6a1a      	ldr	r2, [r3, #32]
 800659c:	463b      	mov	r3, r7
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	691b      	ldr	r3, [r3, #16]
 80065a2:	429a      	cmp	r2, r3
 80065a4:	d90e      	bls.n	80065c4 <USB_EPStartXfer+0x2b2>
            {
              len = ep->maxpacket;
 80065a6:	463b      	mov	r3, r7
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	691b      	ldr	r3, [r3, #16]
 80065ac:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db -= len;
 80065b0:	463b      	mov	r3, r7
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	6a1a      	ldr	r2, [r3, #32]
 80065b6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80065ba:	1ad2      	subs	r2, r2, r3
 80065bc:	463b      	mov	r3, r7
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	621a      	str	r2, [r3, #32]
 80065c2:	e008      	b.n	80065d6 <USB_EPStartXfer+0x2c4>
            }
            else
            {
              len = ep->xfer_len_db;
 80065c4:	463b      	mov	r3, r7
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	6a1b      	ldr	r3, [r3, #32]
 80065ca:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db = 0;
 80065ce:	463b      	mov	r3, r7
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	2200      	movs	r2, #0
 80065d4:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80065d6:	463b      	mov	r3, r7
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	785b      	ldrb	r3, [r3, #1]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d164      	bne.n	80066aa <USB_EPStartXfer+0x398>
 80065e0:	1d3b      	adds	r3, r7, #4
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	61fb      	str	r3, [r7, #28]
 80065e6:	1d3b      	adds	r3, r7, #4
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80065ee:	b29b      	uxth	r3, r3
 80065f0:	461a      	mov	r2, r3
 80065f2:	69fb      	ldr	r3, [r7, #28]
 80065f4:	4413      	add	r3, r2
 80065f6:	61fb      	str	r3, [r7, #28]
 80065f8:	463b      	mov	r3, r7
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	781b      	ldrb	r3, [r3, #0]
 80065fe:	00da      	lsls	r2, r3, #3
 8006600:	69fb      	ldr	r3, [r7, #28]
 8006602:	4413      	add	r3, r2
 8006604:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006608:	61bb      	str	r3, [r7, #24]
 800660a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800660e:	2b00      	cmp	r3, #0
 8006610:	d112      	bne.n	8006638 <USB_EPStartXfer+0x326>
 8006612:	69bb      	ldr	r3, [r7, #24]
 8006614:	881b      	ldrh	r3, [r3, #0]
 8006616:	b29b      	uxth	r3, r3
 8006618:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800661c:	b29a      	uxth	r2, r3
 800661e:	69bb      	ldr	r3, [r7, #24]
 8006620:	801a      	strh	r2, [r3, #0]
 8006622:	69bb      	ldr	r3, [r7, #24]
 8006624:	881b      	ldrh	r3, [r3, #0]
 8006626:	b29b      	uxth	r3, r3
 8006628:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800662c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006630:	b29a      	uxth	r2, r3
 8006632:	69bb      	ldr	r3, [r7, #24]
 8006634:	801a      	strh	r2, [r3, #0]
 8006636:	e057      	b.n	80066e8 <USB_EPStartXfer+0x3d6>
 8006638:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800663c:	2b3e      	cmp	r3, #62	; 0x3e
 800663e:	d817      	bhi.n	8006670 <USB_EPStartXfer+0x35e>
 8006640:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006644:	085b      	lsrs	r3, r3, #1
 8006646:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800664a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800664e:	f003 0301 	and.w	r3, r3, #1
 8006652:	2b00      	cmp	r3, #0
 8006654:	d004      	beq.n	8006660 <USB_EPStartXfer+0x34e>
 8006656:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800665a:	3301      	adds	r3, #1
 800665c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006660:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006664:	b29b      	uxth	r3, r3
 8006666:	029b      	lsls	r3, r3, #10
 8006668:	b29a      	uxth	r2, r3
 800666a:	69bb      	ldr	r3, [r7, #24]
 800666c:	801a      	strh	r2, [r3, #0]
 800666e:	e03b      	b.n	80066e8 <USB_EPStartXfer+0x3d6>
 8006670:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006674:	095b      	lsrs	r3, r3, #5
 8006676:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800667a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800667e:	f003 031f 	and.w	r3, r3, #31
 8006682:	2b00      	cmp	r3, #0
 8006684:	d104      	bne.n	8006690 <USB_EPStartXfer+0x37e>
 8006686:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800668a:	3b01      	subs	r3, #1
 800668c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006690:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006694:	b29b      	uxth	r3, r3
 8006696:	029b      	lsls	r3, r3, #10
 8006698:	b29b      	uxth	r3, r3
 800669a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800669e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80066a2:	b29a      	uxth	r2, r3
 80066a4:	69bb      	ldr	r3, [r7, #24]
 80066a6:	801a      	strh	r2, [r3, #0]
 80066a8:	e01e      	b.n	80066e8 <USB_EPStartXfer+0x3d6>
 80066aa:	463b      	mov	r3, r7
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	785b      	ldrb	r3, [r3, #1]
 80066b0:	2b01      	cmp	r3, #1
 80066b2:	d119      	bne.n	80066e8 <USB_EPStartXfer+0x3d6>
 80066b4:	1d3b      	adds	r3, r7, #4
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	627b      	str	r3, [r7, #36]	; 0x24
 80066ba:	1d3b      	adds	r3, r7, #4
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80066c2:	b29b      	uxth	r3, r3
 80066c4:	461a      	mov	r2, r3
 80066c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066c8:	4413      	add	r3, r2
 80066ca:	627b      	str	r3, [r7, #36]	; 0x24
 80066cc:	463b      	mov	r3, r7
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	781b      	ldrb	r3, [r3, #0]
 80066d2:	00da      	lsls	r2, r3, #3
 80066d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066d6:	4413      	add	r3, r2
 80066d8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80066dc:	623b      	str	r3, [r7, #32]
 80066de:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80066e2:	b29a      	uxth	r2, r3
 80066e4:	6a3b      	ldr	r3, [r7, #32]
 80066e6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80066e8:	463b      	mov	r3, r7
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	891b      	ldrh	r3, [r3, #8]
 80066ee:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80066f2:	463b      	mov	r3, r7
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	6959      	ldr	r1, [r3, #20]
 80066f8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80066fc:	b29b      	uxth	r3, r3
 80066fe:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8006702:	1d38      	adds	r0, r7, #4
 8006704:	6800      	ldr	r0, [r0, #0]
 8006706:	f001 f879 	bl	80077fc <USB_WritePMA>
 800670a:	e340      	b.n	8006d8e <USB_EPStartXfer+0xa7c>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800670c:	463b      	mov	r3, r7
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	785b      	ldrb	r3, [r3, #1]
 8006712:	2b00      	cmp	r3, #0
 8006714:	d164      	bne.n	80067e0 <USB_EPStartXfer+0x4ce>
 8006716:	1d3b      	adds	r3, r7, #4
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800671c:	1d3b      	adds	r3, r7, #4
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006724:	b29b      	uxth	r3, r3
 8006726:	461a      	mov	r2, r3
 8006728:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800672a:	4413      	add	r3, r2
 800672c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800672e:	463b      	mov	r3, r7
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	781b      	ldrb	r3, [r3, #0]
 8006734:	00da      	lsls	r2, r3, #3
 8006736:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006738:	4413      	add	r3, r2
 800673a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800673e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006740:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006744:	2b00      	cmp	r3, #0
 8006746:	d112      	bne.n	800676e <USB_EPStartXfer+0x45c>
 8006748:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800674a:	881b      	ldrh	r3, [r3, #0]
 800674c:	b29b      	uxth	r3, r3
 800674e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006752:	b29a      	uxth	r2, r3
 8006754:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006756:	801a      	strh	r2, [r3, #0]
 8006758:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800675a:	881b      	ldrh	r3, [r3, #0]
 800675c:	b29b      	uxth	r3, r3
 800675e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006762:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006766:	b29a      	uxth	r2, r3
 8006768:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800676a:	801a      	strh	r2, [r3, #0]
 800676c:	e057      	b.n	800681e <USB_EPStartXfer+0x50c>
 800676e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006772:	2b3e      	cmp	r3, #62	; 0x3e
 8006774:	d817      	bhi.n	80067a6 <USB_EPStartXfer+0x494>
 8006776:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800677a:	085b      	lsrs	r3, r3, #1
 800677c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006780:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006784:	f003 0301 	and.w	r3, r3, #1
 8006788:	2b00      	cmp	r3, #0
 800678a:	d004      	beq.n	8006796 <USB_EPStartXfer+0x484>
 800678c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006790:	3301      	adds	r3, #1
 8006792:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006796:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800679a:	b29b      	uxth	r3, r3
 800679c:	029b      	lsls	r3, r3, #10
 800679e:	b29a      	uxth	r2, r3
 80067a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80067a2:	801a      	strh	r2, [r3, #0]
 80067a4:	e03b      	b.n	800681e <USB_EPStartXfer+0x50c>
 80067a6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80067aa:	095b      	lsrs	r3, r3, #5
 80067ac:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80067b0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80067b4:	f003 031f 	and.w	r3, r3, #31
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d104      	bne.n	80067c6 <USB_EPStartXfer+0x4b4>
 80067bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80067c0:	3b01      	subs	r3, #1
 80067c2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80067c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80067ca:	b29b      	uxth	r3, r3
 80067cc:	029b      	lsls	r3, r3, #10
 80067ce:	b29b      	uxth	r3, r3
 80067d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067d8:	b29a      	uxth	r2, r3
 80067da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80067dc:	801a      	strh	r2, [r3, #0]
 80067de:	e01e      	b.n	800681e <USB_EPStartXfer+0x50c>
 80067e0:	463b      	mov	r3, r7
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	785b      	ldrb	r3, [r3, #1]
 80067e6:	2b01      	cmp	r3, #1
 80067e8:	d119      	bne.n	800681e <USB_EPStartXfer+0x50c>
 80067ea:	1d3b      	adds	r3, r7, #4
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	657b      	str	r3, [r7, #84]	; 0x54
 80067f0:	1d3b      	adds	r3, r7, #4
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80067f8:	b29b      	uxth	r3, r3
 80067fa:	461a      	mov	r2, r3
 80067fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80067fe:	4413      	add	r3, r2
 8006800:	657b      	str	r3, [r7, #84]	; 0x54
 8006802:	463b      	mov	r3, r7
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	781b      	ldrb	r3, [r3, #0]
 8006808:	00da      	lsls	r2, r3, #3
 800680a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800680c:	4413      	add	r3, r2
 800680e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006812:	653b      	str	r3, [r7, #80]	; 0x50
 8006814:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006818:	b29a      	uxth	r2, r3
 800681a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800681c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800681e:	463b      	mov	r3, r7
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	891b      	ldrh	r3, [r3, #8]
 8006824:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006828:	463b      	mov	r3, r7
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	6959      	ldr	r1, [r3, #20]
 800682e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006832:	b29b      	uxth	r3, r3
 8006834:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8006838:	1d38      	adds	r0, r7, #4
 800683a:	6800      	ldr	r0, [r0, #0]
 800683c:	f000 ffde 	bl	80077fc <USB_WritePMA>
            ep->xfer_buff += len;
 8006840:	463b      	mov	r3, r7
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	695a      	ldr	r2, [r3, #20]
 8006846:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800684a:	441a      	add	r2, r3
 800684c:	463b      	mov	r3, r7
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006852:	463b      	mov	r3, r7
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	6a1a      	ldr	r2, [r3, #32]
 8006858:	463b      	mov	r3, r7
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	691b      	ldr	r3, [r3, #16]
 800685e:	429a      	cmp	r2, r3
 8006860:	d90e      	bls.n	8006880 <USB_EPStartXfer+0x56e>
            {
              len = ep->maxpacket;
 8006862:	463b      	mov	r3, r7
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	691b      	ldr	r3, [r3, #16]
 8006868:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db -= len;
 800686c:	463b      	mov	r3, r7
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	6a1a      	ldr	r2, [r3, #32]
 8006872:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006876:	1ad2      	subs	r2, r2, r3
 8006878:	463b      	mov	r3, r7
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	621a      	str	r2, [r3, #32]
 800687e:	e008      	b.n	8006892 <USB_EPStartXfer+0x580>
            }
            else
            {
              len = ep->xfer_len_db;
 8006880:	463b      	mov	r3, r7
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	6a1b      	ldr	r3, [r3, #32]
 8006886:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db = 0;
 800688a:	463b      	mov	r3, r7
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	2200      	movs	r2, #0
 8006890:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006892:	1d3b      	adds	r3, r7, #4
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	647b      	str	r3, [r7, #68]	; 0x44
 8006898:	463b      	mov	r3, r7
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	785b      	ldrb	r3, [r3, #1]
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d164      	bne.n	800696c <USB_EPStartXfer+0x65a>
 80068a2:	1d3b      	adds	r3, r7, #4
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80068a8:	1d3b      	adds	r3, r7, #4
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80068b0:	b29b      	uxth	r3, r3
 80068b2:	461a      	mov	r2, r3
 80068b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068b6:	4413      	add	r3, r2
 80068b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80068ba:	463b      	mov	r3, r7
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	781b      	ldrb	r3, [r3, #0]
 80068c0:	00da      	lsls	r2, r3, #3
 80068c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068c4:	4413      	add	r3, r2
 80068c6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80068ca:	63bb      	str	r3, [r7, #56]	; 0x38
 80068cc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d112      	bne.n	80068fa <USB_EPStartXfer+0x5e8>
 80068d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068d6:	881b      	ldrh	r3, [r3, #0]
 80068d8:	b29b      	uxth	r3, r3
 80068da:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80068de:	b29a      	uxth	r2, r3
 80068e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068e2:	801a      	strh	r2, [r3, #0]
 80068e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068e6:	881b      	ldrh	r3, [r3, #0]
 80068e8:	b29b      	uxth	r3, r3
 80068ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80068ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80068f2:	b29a      	uxth	r2, r3
 80068f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068f6:	801a      	strh	r2, [r3, #0]
 80068f8:	e054      	b.n	80069a4 <USB_EPStartXfer+0x692>
 80068fa:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80068fe:	2b3e      	cmp	r3, #62	; 0x3e
 8006900:	d817      	bhi.n	8006932 <USB_EPStartXfer+0x620>
 8006902:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006906:	085b      	lsrs	r3, r3, #1
 8006908:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800690c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006910:	f003 0301 	and.w	r3, r3, #1
 8006914:	2b00      	cmp	r3, #0
 8006916:	d004      	beq.n	8006922 <USB_EPStartXfer+0x610>
 8006918:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800691c:	3301      	adds	r3, #1
 800691e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006922:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006926:	b29b      	uxth	r3, r3
 8006928:	029b      	lsls	r3, r3, #10
 800692a:	b29a      	uxth	r2, r3
 800692c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800692e:	801a      	strh	r2, [r3, #0]
 8006930:	e038      	b.n	80069a4 <USB_EPStartXfer+0x692>
 8006932:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006936:	095b      	lsrs	r3, r3, #5
 8006938:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800693c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006940:	f003 031f 	and.w	r3, r3, #31
 8006944:	2b00      	cmp	r3, #0
 8006946:	d104      	bne.n	8006952 <USB_EPStartXfer+0x640>
 8006948:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800694c:	3b01      	subs	r3, #1
 800694e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006952:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006956:	b29b      	uxth	r3, r3
 8006958:	029b      	lsls	r3, r3, #10
 800695a:	b29b      	uxth	r3, r3
 800695c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006960:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006964:	b29a      	uxth	r2, r3
 8006966:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006968:	801a      	strh	r2, [r3, #0]
 800696a:	e01b      	b.n	80069a4 <USB_EPStartXfer+0x692>
 800696c:	463b      	mov	r3, r7
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	785b      	ldrb	r3, [r3, #1]
 8006972:	2b01      	cmp	r3, #1
 8006974:	d116      	bne.n	80069a4 <USB_EPStartXfer+0x692>
 8006976:	1d3b      	adds	r3, r7, #4
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800697e:	b29b      	uxth	r3, r3
 8006980:	461a      	mov	r2, r3
 8006982:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006984:	4413      	add	r3, r2
 8006986:	647b      	str	r3, [r7, #68]	; 0x44
 8006988:	463b      	mov	r3, r7
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	781b      	ldrb	r3, [r3, #0]
 800698e:	00da      	lsls	r2, r3, #3
 8006990:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006992:	4413      	add	r3, r2
 8006994:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006998:	643b      	str	r3, [r7, #64]	; 0x40
 800699a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800699e:	b29a      	uxth	r2, r3
 80069a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80069a2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80069a4:	463b      	mov	r3, r7
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	895b      	ldrh	r3, [r3, #10]
 80069aa:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80069ae:	463b      	mov	r3, r7
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	6959      	ldr	r1, [r3, #20]
 80069b4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80069b8:	b29b      	uxth	r3, r3
 80069ba:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 80069be:	1d38      	adds	r0, r7, #4
 80069c0:	6800      	ldr	r0, [r0, #0]
 80069c2:	f000 ff1b 	bl	80077fc <USB_WritePMA>
 80069c6:	e1e2      	b.n	8006d8e <USB_EPStartXfer+0xa7c>
          }
        }
        /*auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer*/
        else
        {
          len = ep->xfer_len_db;
 80069c8:	463b      	mov	r3, r7
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	6a1b      	ldr	r3, [r3, #32]
 80069ce:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          /*disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 80069d2:	1d3b      	adds	r3, r7, #4
 80069d4:	681a      	ldr	r2, [r3, #0]
 80069d6:	463b      	mov	r3, r7
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	781b      	ldrb	r3, [r3, #0]
 80069dc:	009b      	lsls	r3, r3, #2
 80069de:	4413      	add	r3, r2
 80069e0:	881b      	ldrh	r3, [r3, #0]
 80069e2:	b29b      	uxth	r3, r3
 80069e4:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80069e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069ec:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 80069f0:	1d3b      	adds	r3, r7, #4
 80069f2:	681a      	ldr	r2, [r3, #0]
 80069f4:	463b      	mov	r3, r7
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	781b      	ldrb	r3, [r3, #0]
 80069fa:	009b      	lsls	r3, r3, #2
 80069fc:	441a      	add	r2, r3
 80069fe:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8006a02:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a06:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a12:	b29b      	uxth	r3, r3
 8006a14:	8013      	strh	r3, [r2, #0]
          /*Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006a16:	1d3b      	adds	r3, r7, #4
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	663b      	str	r3, [r7, #96]	; 0x60
 8006a1c:	1d3b      	adds	r3, r7, #4
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a24:	b29b      	uxth	r3, r3
 8006a26:	461a      	mov	r2, r3
 8006a28:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006a2a:	4413      	add	r3, r2
 8006a2c:	663b      	str	r3, [r7, #96]	; 0x60
 8006a2e:	463b      	mov	r3, r7
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	781b      	ldrb	r3, [r3, #0]
 8006a34:	00da      	lsls	r2, r3, #3
 8006a36:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006a38:	4413      	add	r3, r2
 8006a3a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006a3e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006a40:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006a44:	b29a      	uxth	r2, r3
 8006a46:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006a48:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006a4a:	463b      	mov	r3, r7
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	891b      	ldrh	r3, [r3, #8]
 8006a50:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
          /*Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006a54:	463b      	mov	r3, r7
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	6959      	ldr	r1, [r3, #20]
 8006a5a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006a5e:	b29b      	uxth	r3, r3
 8006a60:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8006a64:	1d38      	adds	r0, r7, #4
 8006a66:	6800      	ldr	r0, [r0, #0]
 8006a68:	f000 fec8 	bl	80077fc <USB_WritePMA>
 8006a6c:	e18f      	b.n	8006d8e <USB_EPStartXfer+0xa7c>

      /*mange isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006a6e:	1d3b      	adds	r3, r7, #4
 8006a70:	681a      	ldr	r2, [r3, #0]
 8006a72:	463b      	mov	r3, r7
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	781b      	ldrb	r3, [r3, #0]
 8006a78:	009b      	lsls	r3, r3, #2
 8006a7a:	4413      	add	r3, r2
 8006a7c:	881b      	ldrh	r3, [r3, #0]
 8006a7e:	b29b      	uxth	r3, r3
 8006a80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	f000 808f 	beq.w	8006ba8 <USB_EPStartXfer+0x896>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006a8a:	1d3b      	adds	r3, r7, #4
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	67bb      	str	r3, [r7, #120]	; 0x78
 8006a90:	463b      	mov	r3, r7
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	785b      	ldrb	r3, [r3, #1]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d164      	bne.n	8006b64 <USB_EPStartXfer+0x852>
 8006a9a:	1d3b      	adds	r3, r7, #4
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	673b      	str	r3, [r7, #112]	; 0x70
 8006aa0:	1d3b      	adds	r3, r7, #4
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006aa8:	b29b      	uxth	r3, r3
 8006aaa:	461a      	mov	r2, r3
 8006aac:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006aae:	4413      	add	r3, r2
 8006ab0:	673b      	str	r3, [r7, #112]	; 0x70
 8006ab2:	463b      	mov	r3, r7
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	781b      	ldrb	r3, [r3, #0]
 8006ab8:	00da      	lsls	r2, r3, #3
 8006aba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006abc:	4413      	add	r3, r2
 8006abe:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006ac2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006ac4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d112      	bne.n	8006af2 <USB_EPStartXfer+0x7e0>
 8006acc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ace:	881b      	ldrh	r3, [r3, #0]
 8006ad0:	b29b      	uxth	r3, r3
 8006ad2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006ad6:	b29a      	uxth	r2, r3
 8006ad8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ada:	801a      	strh	r2, [r3, #0]
 8006adc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ade:	881b      	ldrh	r3, [r3, #0]
 8006ae0:	b29b      	uxth	r3, r3
 8006ae2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ae6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006aea:	b29a      	uxth	r2, r3
 8006aec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006aee:	801a      	strh	r2, [r3, #0]
 8006af0:	e054      	b.n	8006b9c <USB_EPStartXfer+0x88a>
 8006af2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006af6:	2b3e      	cmp	r3, #62	; 0x3e
 8006af8:	d817      	bhi.n	8006b2a <USB_EPStartXfer+0x818>
 8006afa:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006afe:	085b      	lsrs	r3, r3, #1
 8006b00:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006b04:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006b08:	f003 0301 	and.w	r3, r3, #1
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d004      	beq.n	8006b1a <USB_EPStartXfer+0x808>
 8006b10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b14:	3301      	adds	r3, #1
 8006b16:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006b1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b1e:	b29b      	uxth	r3, r3
 8006b20:	029b      	lsls	r3, r3, #10
 8006b22:	b29a      	uxth	r2, r3
 8006b24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b26:	801a      	strh	r2, [r3, #0]
 8006b28:	e038      	b.n	8006b9c <USB_EPStartXfer+0x88a>
 8006b2a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006b2e:	095b      	lsrs	r3, r3, #5
 8006b30:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006b34:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006b38:	f003 031f 	and.w	r3, r3, #31
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d104      	bne.n	8006b4a <USB_EPStartXfer+0x838>
 8006b40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b44:	3b01      	subs	r3, #1
 8006b46:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006b4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b4e:	b29b      	uxth	r3, r3
 8006b50:	029b      	lsls	r3, r3, #10
 8006b52:	b29b      	uxth	r3, r3
 8006b54:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b58:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b5c:	b29a      	uxth	r2, r3
 8006b5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b60:	801a      	strh	r2, [r3, #0]
 8006b62:	e01b      	b.n	8006b9c <USB_EPStartXfer+0x88a>
 8006b64:	463b      	mov	r3, r7
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	785b      	ldrb	r3, [r3, #1]
 8006b6a:	2b01      	cmp	r3, #1
 8006b6c:	d116      	bne.n	8006b9c <USB_EPStartXfer+0x88a>
 8006b6e:	1d3b      	adds	r3, r7, #4
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b76:	b29b      	uxth	r3, r3
 8006b78:	461a      	mov	r2, r3
 8006b7a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006b7c:	4413      	add	r3, r2
 8006b7e:	67bb      	str	r3, [r7, #120]	; 0x78
 8006b80:	463b      	mov	r3, r7
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	781b      	ldrb	r3, [r3, #0]
 8006b86:	00da      	lsls	r2, r3, #3
 8006b88:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006b8a:	4413      	add	r3, r2
 8006b8c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006b90:	677b      	str	r3, [r7, #116]	; 0x74
 8006b92:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006b96:	b29a      	uxth	r2, r3
 8006b98:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006b9a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8006b9c:	463b      	mov	r3, r7
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	895b      	ldrh	r3, [r3, #10]
 8006ba2:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
 8006ba6:	e097      	b.n	8006cd8 <USB_EPStartXfer+0x9c6>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006ba8:	463b      	mov	r3, r7
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	785b      	ldrb	r3, [r3, #1]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d168      	bne.n	8006c84 <USB_EPStartXfer+0x972>
 8006bb2:	1d3b      	adds	r3, r7, #4
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006bba:	1d3b      	adds	r3, r7, #4
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006bc2:	b29b      	uxth	r3, r3
 8006bc4:	461a      	mov	r2, r3
 8006bc6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006bca:	4413      	add	r3, r2
 8006bcc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006bd0:	463b      	mov	r3, r7
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	781b      	ldrb	r3, [r3, #0]
 8006bd6:	00da      	lsls	r2, r3, #3
 8006bd8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006bdc:	4413      	add	r3, r2
 8006bde:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006be2:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006be4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d112      	bne.n	8006c12 <USB_EPStartXfer+0x900>
 8006bec:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006bee:	881b      	ldrh	r3, [r3, #0]
 8006bf0:	b29b      	uxth	r3, r3
 8006bf2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006bf6:	b29a      	uxth	r2, r3
 8006bf8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006bfa:	801a      	strh	r2, [r3, #0]
 8006bfc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006bfe:	881b      	ldrh	r3, [r3, #0]
 8006c00:	b29b      	uxth	r3, r3
 8006c02:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c06:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c0a:	b29a      	uxth	r2, r3
 8006c0c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006c0e:	801a      	strh	r2, [r3, #0]
 8006c10:	e05d      	b.n	8006cce <USB_EPStartXfer+0x9bc>
 8006c12:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006c16:	2b3e      	cmp	r3, #62	; 0x3e
 8006c18:	d817      	bhi.n	8006c4a <USB_EPStartXfer+0x938>
 8006c1a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006c1e:	085b      	lsrs	r3, r3, #1
 8006c20:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006c24:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006c28:	f003 0301 	and.w	r3, r3, #1
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d004      	beq.n	8006c3a <USB_EPStartXfer+0x928>
 8006c30:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006c34:	3301      	adds	r3, #1
 8006c36:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006c3a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006c3e:	b29b      	uxth	r3, r3
 8006c40:	029b      	lsls	r3, r3, #10
 8006c42:	b29a      	uxth	r2, r3
 8006c44:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006c46:	801a      	strh	r2, [r3, #0]
 8006c48:	e041      	b.n	8006cce <USB_EPStartXfer+0x9bc>
 8006c4a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006c4e:	095b      	lsrs	r3, r3, #5
 8006c50:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006c54:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006c58:	f003 031f 	and.w	r3, r3, #31
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d104      	bne.n	8006c6a <USB_EPStartXfer+0x958>
 8006c60:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006c64:	3b01      	subs	r3, #1
 8006c66:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006c6a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006c6e:	b29b      	uxth	r3, r3
 8006c70:	029b      	lsls	r3, r3, #10
 8006c72:	b29b      	uxth	r3, r3
 8006c74:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c78:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c7c:	b29a      	uxth	r2, r3
 8006c7e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006c80:	801a      	strh	r2, [r3, #0]
 8006c82:	e024      	b.n	8006cce <USB_EPStartXfer+0x9bc>
 8006c84:	463b      	mov	r3, r7
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	785b      	ldrb	r3, [r3, #1]
 8006c8a:	2b01      	cmp	r3, #1
 8006c8c:	d11f      	bne.n	8006cce <USB_EPStartXfer+0x9bc>
 8006c8e:	1d3b      	adds	r3, r7, #4
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006c96:	1d3b      	adds	r3, r7, #4
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c9e:	b29b      	uxth	r3, r3
 8006ca0:	461a      	mov	r2, r3
 8006ca2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006ca6:	4413      	add	r3, r2
 8006ca8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006cac:	463b      	mov	r3, r7
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	781b      	ldrb	r3, [r3, #0]
 8006cb2:	00da      	lsls	r2, r3, #3
 8006cb4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006cb8:	4413      	add	r3, r2
 8006cba:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006cbe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006cc2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006cc6:	b29a      	uxth	r2, r3
 8006cc8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006ccc:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006cce:	463b      	mov	r3, r7
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	891b      	ldrh	r3, [r3, #8]
 8006cd4:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
        }
        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006cd8:	463b      	mov	r3, r7
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	6959      	ldr	r1, [r3, #20]
 8006cde:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006ce2:	b29b      	uxth	r3, r3
 8006ce4:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8006ce8:	1d38      	adds	r0, r7, #4
 8006cea:	6800      	ldr	r0, [r0, #0]
 8006cec:	f000 fd86 	bl	80077fc <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8006cf0:	463b      	mov	r3, r7
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	785b      	ldrb	r3, [r3, #1]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d122      	bne.n	8006d40 <USB_EPStartXfer+0xa2e>
 8006cfa:	1d3b      	adds	r3, r7, #4
 8006cfc:	681a      	ldr	r2, [r3, #0]
 8006cfe:	463b      	mov	r3, r7
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	781b      	ldrb	r3, [r3, #0]
 8006d04:	009b      	lsls	r3, r3, #2
 8006d06:	4413      	add	r3, r2
 8006d08:	881b      	ldrh	r3, [r3, #0]
 8006d0a:	b29b      	uxth	r3, r3
 8006d0c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d14:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8006d18:	1d3b      	adds	r3, r7, #4
 8006d1a:	681a      	ldr	r2, [r3, #0]
 8006d1c:	463b      	mov	r3, r7
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	781b      	ldrb	r3, [r3, #0]
 8006d22:	009b      	lsls	r3, r3, #2
 8006d24:	441a      	add	r2, r3
 8006d26:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8006d2a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d2e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d36:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006d3a:	b29b      	uxth	r3, r3
 8006d3c:	8013      	strh	r3, [r2, #0]
 8006d3e:	e026      	b.n	8006d8e <USB_EPStartXfer+0xa7c>
 8006d40:	463b      	mov	r3, r7
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	785b      	ldrb	r3, [r3, #1]
 8006d46:	2b01      	cmp	r3, #1
 8006d48:	d121      	bne.n	8006d8e <USB_EPStartXfer+0xa7c>
 8006d4a:	1d3b      	adds	r3, r7, #4
 8006d4c:	681a      	ldr	r2, [r3, #0]
 8006d4e:	463b      	mov	r3, r7
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	781b      	ldrb	r3, [r3, #0]
 8006d54:	009b      	lsls	r3, r3, #2
 8006d56:	4413      	add	r3, r2
 8006d58:	881b      	ldrh	r3, [r3, #0]
 8006d5a:	b29b      	uxth	r3, r3
 8006d5c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d64:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 8006d68:	1d3b      	adds	r3, r7, #4
 8006d6a:	681a      	ldr	r2, [r3, #0]
 8006d6c:	463b      	mov	r3, r7
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	781b      	ldrb	r3, [r3, #0]
 8006d72:	009b      	lsls	r3, r3, #2
 8006d74:	441a      	add	r2, r3
 8006d76:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8006d7a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d7e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d82:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006d86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d8a:	b29b      	uxth	r3, r3
 8006d8c:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8006d8e:	1d3b      	adds	r3, r7, #4
 8006d90:	681a      	ldr	r2, [r3, #0]
 8006d92:	463b      	mov	r3, r7
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	781b      	ldrb	r3, [r3, #0]
 8006d98:	009b      	lsls	r3, r3, #2
 8006d9a:	4413      	add	r3, r2
 8006d9c:	881b      	ldrh	r3, [r3, #0]
 8006d9e:	b29b      	uxth	r3, r3
 8006da0:	f107 020e 	add.w	r2, r7, #14
 8006da4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006da8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006dac:	8013      	strh	r3, [r2, #0]
 8006dae:	f107 030e 	add.w	r3, r7, #14
 8006db2:	f107 020e 	add.w	r2, r7, #14
 8006db6:	8812      	ldrh	r2, [r2, #0]
 8006db8:	f082 0210 	eor.w	r2, r2, #16
 8006dbc:	801a      	strh	r2, [r3, #0]
 8006dbe:	f107 030e 	add.w	r3, r7, #14
 8006dc2:	f107 020e 	add.w	r2, r7, #14
 8006dc6:	8812      	ldrh	r2, [r2, #0]
 8006dc8:	f082 0220 	eor.w	r2, r2, #32
 8006dcc:	801a      	strh	r2, [r3, #0]
 8006dce:	1d3b      	adds	r3, r7, #4
 8006dd0:	681a      	ldr	r2, [r3, #0]
 8006dd2:	463b      	mov	r3, r7
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	781b      	ldrb	r3, [r3, #0]
 8006dd8:	009b      	lsls	r3, r3, #2
 8006dda:	441a      	add	r2, r3
 8006ddc:	f107 030e 	add.w	r3, r7, #14
 8006de0:	881b      	ldrh	r3, [r3, #0]
 8006de2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006de6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006dea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006dee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006df2:	b29b      	uxth	r3, r3
 8006df4:	8013      	strh	r3, [r2, #0]
 8006df6:	e3b5      	b.n	8007564 <USB_EPStartXfer+0x1252>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8006df8:	463b      	mov	r3, r7
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	7b1b      	ldrb	r3, [r3, #12]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	f040 8090 	bne.w	8006f24 <USB_EPStartXfer+0xc12>
    {
      /* Multi packet transfer*/
      if (ep->xfer_len > ep->maxpacket)
 8006e04:	463b      	mov	r3, r7
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	699a      	ldr	r2, [r3, #24]
 8006e0a:	463b      	mov	r3, r7
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	691b      	ldr	r3, [r3, #16]
 8006e10:	429a      	cmp	r2, r3
 8006e12:	d90e      	bls.n	8006e32 <USB_EPStartXfer+0xb20>
      {
        len = ep->maxpacket;
 8006e14:	463b      	mov	r3, r7
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	691b      	ldr	r3, [r3, #16]
 8006e1a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        ep->xfer_len -= len;
 8006e1e:	463b      	mov	r3, r7
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	699a      	ldr	r2, [r3, #24]
 8006e24:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006e28:	1ad2      	subs	r2, r2, r3
 8006e2a:	463b      	mov	r3, r7
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	619a      	str	r2, [r3, #24]
 8006e30:	e008      	b.n	8006e44 <USB_EPStartXfer+0xb32>
      }
      else
      {
        len = ep->xfer_len;
 8006e32:	463b      	mov	r3, r7
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	699b      	ldr	r3, [r3, #24]
 8006e38:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        ep->xfer_len = 0U;
 8006e3c:	463b      	mov	r3, r7
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	2200      	movs	r2, #0
 8006e42:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8006e44:	1d3b      	adds	r3, r7, #4
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006e4c:	1d3b      	adds	r3, r7, #4
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e54:	b29b      	uxth	r3, r3
 8006e56:	461a      	mov	r2, r3
 8006e58:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006e5c:	4413      	add	r3, r2
 8006e5e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006e62:	463b      	mov	r3, r7
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	781b      	ldrb	r3, [r3, #0]
 8006e68:	00da      	lsls	r2, r3, #3
 8006e6a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006e6e:	4413      	add	r3, r2
 8006e70:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006e74:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006e78:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d116      	bne.n	8006eae <USB_EPStartXfer+0xb9c>
 8006e80:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006e84:	881b      	ldrh	r3, [r3, #0]
 8006e86:	b29b      	uxth	r3, r3
 8006e88:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006e8c:	b29a      	uxth	r2, r3
 8006e8e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006e92:	801a      	strh	r2, [r3, #0]
 8006e94:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006e98:	881b      	ldrh	r3, [r3, #0]
 8006e9a:	b29b      	uxth	r3, r3
 8006e9c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ea0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ea4:	b29a      	uxth	r2, r3
 8006ea6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006eaa:	801a      	strh	r2, [r3, #0]
 8006eac:	e32c      	b.n	8007508 <USB_EPStartXfer+0x11f6>
 8006eae:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006eb2:	2b3e      	cmp	r3, #62	; 0x3e
 8006eb4:	d818      	bhi.n	8006ee8 <USB_EPStartXfer+0xbd6>
 8006eb6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006eba:	085b      	lsrs	r3, r3, #1
 8006ebc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006ec0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006ec4:	f003 0301 	and.w	r3, r3, #1
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d004      	beq.n	8006ed6 <USB_EPStartXfer+0xbc4>
 8006ecc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006ed0:	3301      	adds	r3, #1
 8006ed2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006ed6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006eda:	b29b      	uxth	r3, r3
 8006edc:	029b      	lsls	r3, r3, #10
 8006ede:	b29a      	uxth	r2, r3
 8006ee0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006ee4:	801a      	strh	r2, [r3, #0]
 8006ee6:	e30f      	b.n	8007508 <USB_EPStartXfer+0x11f6>
 8006ee8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006eec:	095b      	lsrs	r3, r3, #5
 8006eee:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006ef2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006ef6:	f003 031f 	and.w	r3, r3, #31
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d104      	bne.n	8006f08 <USB_EPStartXfer+0xbf6>
 8006efe:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006f02:	3b01      	subs	r3, #1
 8006f04:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006f08:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006f0c:	b29b      	uxth	r3, r3
 8006f0e:	029b      	lsls	r3, r3, #10
 8006f10:	b29b      	uxth	r3, r3
 8006f12:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f16:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f1a:	b29a      	uxth	r2, r3
 8006f1c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006f20:	801a      	strh	r2, [r3, #0]
 8006f22:	e2f1      	b.n	8007508 <USB_EPStartXfer+0x11f6>
    }
    else
    {
      /*First Transfer Coming From HAL_PCD_EP_Receive & From ISR*/
      /*Set the Double buffer counter*/
      if (ep->type == EP_TYPE_BULK)
 8006f24:	463b      	mov	r3, r7
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	78db      	ldrb	r3, [r3, #3]
 8006f2a:	2b02      	cmp	r3, #2
 8006f2c:	f040 818f 	bne.w	800724e <USB_EPStartXfer+0xf3c>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8006f30:	463b      	mov	r3, r7
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	785b      	ldrb	r3, [r3, #1]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d175      	bne.n	8007026 <USB_EPStartXfer+0xd14>
 8006f3a:	1d3b      	adds	r3, r7, #4
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006f42:	1d3b      	adds	r3, r7, #4
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f4a:	b29b      	uxth	r3, r3
 8006f4c:	461a      	mov	r2, r3
 8006f4e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006f52:	4413      	add	r3, r2
 8006f54:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006f58:	463b      	mov	r3, r7
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	781b      	ldrb	r3, [r3, #0]
 8006f5e:	00da      	lsls	r2, r3, #3
 8006f60:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006f64:	4413      	add	r3, r2
 8006f66:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006f6a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006f6e:	463b      	mov	r3, r7
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	691b      	ldr	r3, [r3, #16]
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d116      	bne.n	8006fa6 <USB_EPStartXfer+0xc94>
 8006f78:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006f7c:	881b      	ldrh	r3, [r3, #0]
 8006f7e:	b29b      	uxth	r3, r3
 8006f80:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006f84:	b29a      	uxth	r2, r3
 8006f86:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006f8a:	801a      	strh	r2, [r3, #0]
 8006f8c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006f90:	881b      	ldrh	r3, [r3, #0]
 8006f92:	b29b      	uxth	r3, r3
 8006f94:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f98:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f9c:	b29a      	uxth	r2, r3
 8006f9e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006fa2:	801a      	strh	r2, [r3, #0]
 8006fa4:	e065      	b.n	8007072 <USB_EPStartXfer+0xd60>
 8006fa6:	463b      	mov	r3, r7
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	691b      	ldr	r3, [r3, #16]
 8006fac:	2b3e      	cmp	r3, #62	; 0x3e
 8006fae:	d81a      	bhi.n	8006fe6 <USB_EPStartXfer+0xcd4>
 8006fb0:	463b      	mov	r3, r7
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	691b      	ldr	r3, [r3, #16]
 8006fb6:	085b      	lsrs	r3, r3, #1
 8006fb8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006fbc:	463b      	mov	r3, r7
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	691b      	ldr	r3, [r3, #16]
 8006fc2:	f003 0301 	and.w	r3, r3, #1
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d004      	beq.n	8006fd4 <USB_EPStartXfer+0xcc2>
 8006fca:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006fce:	3301      	adds	r3, #1
 8006fd0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006fd4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006fd8:	b29b      	uxth	r3, r3
 8006fda:	029b      	lsls	r3, r3, #10
 8006fdc:	b29a      	uxth	r2, r3
 8006fde:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006fe2:	801a      	strh	r2, [r3, #0]
 8006fe4:	e045      	b.n	8007072 <USB_EPStartXfer+0xd60>
 8006fe6:	463b      	mov	r3, r7
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	691b      	ldr	r3, [r3, #16]
 8006fec:	095b      	lsrs	r3, r3, #5
 8006fee:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006ff2:	463b      	mov	r3, r7
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	691b      	ldr	r3, [r3, #16]
 8006ff8:	f003 031f 	and.w	r3, r3, #31
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d104      	bne.n	800700a <USB_EPStartXfer+0xcf8>
 8007000:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007004:	3b01      	subs	r3, #1
 8007006:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800700a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800700e:	b29b      	uxth	r3, r3
 8007010:	029b      	lsls	r3, r3, #10
 8007012:	b29b      	uxth	r3, r3
 8007014:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007018:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800701c:	b29a      	uxth	r2, r3
 800701e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007022:	801a      	strh	r2, [r3, #0]
 8007024:	e025      	b.n	8007072 <USB_EPStartXfer+0xd60>
 8007026:	463b      	mov	r3, r7
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	785b      	ldrb	r3, [r3, #1]
 800702c:	2b01      	cmp	r3, #1
 800702e:	d120      	bne.n	8007072 <USB_EPStartXfer+0xd60>
 8007030:	1d3b      	adds	r3, r7, #4
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007038:	1d3b      	adds	r3, r7, #4
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007040:	b29b      	uxth	r3, r3
 8007042:	461a      	mov	r2, r3
 8007044:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007048:	4413      	add	r3, r2
 800704a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800704e:	463b      	mov	r3, r7
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	781b      	ldrb	r3, [r3, #0]
 8007054:	00da      	lsls	r2, r3, #3
 8007056:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800705a:	4413      	add	r3, r2
 800705c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007060:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007064:	463b      	mov	r3, r7
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	691b      	ldr	r3, [r3, #16]
 800706a:	b29a      	uxth	r2, r3
 800706c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007070:	801a      	strh	r2, [r3, #0]
 8007072:	1d3b      	adds	r3, r7, #4
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800707a:	463b      	mov	r3, r7
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	785b      	ldrb	r3, [r3, #1]
 8007080:	2b00      	cmp	r3, #0
 8007082:	d175      	bne.n	8007170 <USB_EPStartXfer+0xe5e>
 8007084:	1d3b      	adds	r3, r7, #4
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800708c:	1d3b      	adds	r3, r7, #4
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007094:	b29b      	uxth	r3, r3
 8007096:	461a      	mov	r2, r3
 8007098:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800709c:	4413      	add	r3, r2
 800709e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80070a2:	463b      	mov	r3, r7
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	781b      	ldrb	r3, [r3, #0]
 80070a8:	00da      	lsls	r2, r3, #3
 80070aa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80070ae:	4413      	add	r3, r2
 80070b0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80070b4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80070b8:	463b      	mov	r3, r7
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	691b      	ldr	r3, [r3, #16]
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d116      	bne.n	80070f0 <USB_EPStartXfer+0xdde>
 80070c2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80070c6:	881b      	ldrh	r3, [r3, #0]
 80070c8:	b29b      	uxth	r3, r3
 80070ca:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80070ce:	b29a      	uxth	r2, r3
 80070d0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80070d4:	801a      	strh	r2, [r3, #0]
 80070d6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80070da:	881b      	ldrh	r3, [r3, #0]
 80070dc:	b29b      	uxth	r3, r3
 80070de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80070e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80070e6:	b29a      	uxth	r2, r3
 80070e8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80070ec:	801a      	strh	r2, [r3, #0]
 80070ee:	e061      	b.n	80071b4 <USB_EPStartXfer+0xea2>
 80070f0:	463b      	mov	r3, r7
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	691b      	ldr	r3, [r3, #16]
 80070f6:	2b3e      	cmp	r3, #62	; 0x3e
 80070f8:	d81a      	bhi.n	8007130 <USB_EPStartXfer+0xe1e>
 80070fa:	463b      	mov	r3, r7
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	691b      	ldr	r3, [r3, #16]
 8007100:	085b      	lsrs	r3, r3, #1
 8007102:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007106:	463b      	mov	r3, r7
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	691b      	ldr	r3, [r3, #16]
 800710c:	f003 0301 	and.w	r3, r3, #1
 8007110:	2b00      	cmp	r3, #0
 8007112:	d004      	beq.n	800711e <USB_EPStartXfer+0xe0c>
 8007114:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007118:	3301      	adds	r3, #1
 800711a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800711e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007122:	b29b      	uxth	r3, r3
 8007124:	029b      	lsls	r3, r3, #10
 8007126:	b29a      	uxth	r2, r3
 8007128:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800712c:	801a      	strh	r2, [r3, #0]
 800712e:	e041      	b.n	80071b4 <USB_EPStartXfer+0xea2>
 8007130:	463b      	mov	r3, r7
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	691b      	ldr	r3, [r3, #16]
 8007136:	095b      	lsrs	r3, r3, #5
 8007138:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800713c:	463b      	mov	r3, r7
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	691b      	ldr	r3, [r3, #16]
 8007142:	f003 031f 	and.w	r3, r3, #31
 8007146:	2b00      	cmp	r3, #0
 8007148:	d104      	bne.n	8007154 <USB_EPStartXfer+0xe42>
 800714a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800714e:	3b01      	subs	r3, #1
 8007150:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007154:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007158:	b29b      	uxth	r3, r3
 800715a:	029b      	lsls	r3, r3, #10
 800715c:	b29b      	uxth	r3, r3
 800715e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007162:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007166:	b29a      	uxth	r2, r3
 8007168:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800716c:	801a      	strh	r2, [r3, #0]
 800716e:	e021      	b.n	80071b4 <USB_EPStartXfer+0xea2>
 8007170:	463b      	mov	r3, r7
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	785b      	ldrb	r3, [r3, #1]
 8007176:	2b01      	cmp	r3, #1
 8007178:	d11c      	bne.n	80071b4 <USB_EPStartXfer+0xea2>
 800717a:	1d3b      	adds	r3, r7, #4
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007182:	b29b      	uxth	r3, r3
 8007184:	461a      	mov	r2, r3
 8007186:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800718a:	4413      	add	r3, r2
 800718c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007190:	463b      	mov	r3, r7
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	781b      	ldrb	r3, [r3, #0]
 8007196:	00da      	lsls	r2, r3, #3
 8007198:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800719c:	4413      	add	r3, r2
 800719e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80071a2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80071a6:	463b      	mov	r3, r7
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	691b      	ldr	r3, [r3, #16]
 80071ac:	b29a      	uxth	r2, r3
 80071ae:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80071b2:	801a      	strh	r2, [r3, #0]
        /*Coming from ISR*/
        if (ep->xfer_count != 0U)
 80071b4:	463b      	mov	r3, r7
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	69db      	ldr	r3, [r3, #28]
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	f000 81a4 	beq.w	8007508 <USB_EPStartXfer+0x11f6>
        {
          /* update last value to check if there is blocking state*/
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80071c0:	1d3b      	adds	r3, r7, #4
 80071c2:	681a      	ldr	r2, [r3, #0]
 80071c4:	463b      	mov	r3, r7
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	781b      	ldrb	r3, [r3, #0]
 80071ca:	009b      	lsls	r3, r3, #2
 80071cc:	4413      	add	r3, r2
 80071ce:	881b      	ldrh	r3, [r3, #0]
 80071d0:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80071d4:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80071d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d005      	beq.n	80071ec <USB_EPStartXfer+0xeda>
 80071e0:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80071e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d10d      	bne.n	8007208 <USB_EPStartXfer+0xef6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80071ec:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80071f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	f040 8187 	bne.w	8007508 <USB_EPStartXfer+0x11f6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80071fa:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80071fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007202:	2b00      	cmp	r3, #0
 8007204:	f040 8180 	bne.w	8007508 <USB_EPStartXfer+0x11f6>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8007208:	1d3b      	adds	r3, r7, #4
 800720a:	681a      	ldr	r2, [r3, #0]
 800720c:	463b      	mov	r3, r7
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	781b      	ldrb	r3, [r3, #0]
 8007212:	009b      	lsls	r3, r3, #2
 8007214:	4413      	add	r3, r2
 8007216:	881b      	ldrh	r3, [r3, #0]
 8007218:	b29b      	uxth	r3, r3
 800721a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800721e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007222:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 8007226:	1d3b      	adds	r3, r7, #4
 8007228:	681a      	ldr	r2, [r3, #0]
 800722a:	463b      	mov	r3, r7
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	781b      	ldrb	r3, [r3, #0]
 8007230:	009b      	lsls	r3, r3, #2
 8007232:	441a      	add	r2, r3
 8007234:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8007238:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800723c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007240:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007244:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007248:	b29b      	uxth	r3, r3
 800724a:	8013      	strh	r3, [r2, #0]
 800724c:	e15c      	b.n	8007508 <USB_EPStartXfer+0x11f6>
          }
        }
      }
      /*iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800724e:	463b      	mov	r3, r7
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	78db      	ldrb	r3, [r3, #3]
 8007254:	2b01      	cmp	r3, #1
 8007256:	f040 8155 	bne.w	8007504 <USB_EPStartXfer+0x11f2>
      {
        /* Multi packet transfer*/
        if (ep->xfer_len > ep->maxpacket)
 800725a:	463b      	mov	r3, r7
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	699a      	ldr	r2, [r3, #24]
 8007260:	463b      	mov	r3, r7
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	691b      	ldr	r3, [r3, #16]
 8007266:	429a      	cmp	r2, r3
 8007268:	d90e      	bls.n	8007288 <USB_EPStartXfer+0xf76>
        {
          len = ep->maxpacket;
 800726a:	463b      	mov	r3, r7
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	691b      	ldr	r3, [r3, #16]
 8007270:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          ep->xfer_len -= len;
 8007274:	463b      	mov	r3, r7
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	699a      	ldr	r2, [r3, #24]
 800727a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800727e:	1ad2      	subs	r2, r2, r3
 8007280:	463b      	mov	r3, r7
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	619a      	str	r2, [r3, #24]
 8007286:	e008      	b.n	800729a <USB_EPStartXfer+0xf88>
        }
        else
        {
          len = ep->xfer_len;
 8007288:	463b      	mov	r3, r7
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	699b      	ldr	r3, [r3, #24]
 800728e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          ep->xfer_len = 0U;
 8007292:	463b      	mov	r3, r7
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	2200      	movs	r2, #0
 8007298:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800729a:	463b      	mov	r3, r7
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	785b      	ldrb	r3, [r3, #1]
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d16f      	bne.n	8007384 <USB_EPStartXfer+0x1072>
 80072a4:	1d3b      	adds	r3, r7, #4
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80072ac:	1d3b      	adds	r3, r7, #4
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80072b4:	b29b      	uxth	r3, r3
 80072b6:	461a      	mov	r2, r3
 80072b8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80072bc:	4413      	add	r3, r2
 80072be:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80072c2:	463b      	mov	r3, r7
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	781b      	ldrb	r3, [r3, #0]
 80072c8:	00da      	lsls	r2, r3, #3
 80072ca:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80072ce:	4413      	add	r3, r2
 80072d0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80072d4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80072d8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d116      	bne.n	800730e <USB_EPStartXfer+0xffc>
 80072e0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80072e4:	881b      	ldrh	r3, [r3, #0]
 80072e6:	b29b      	uxth	r3, r3
 80072e8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80072ec:	b29a      	uxth	r2, r3
 80072ee:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80072f2:	801a      	strh	r2, [r3, #0]
 80072f4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80072f8:	881b      	ldrh	r3, [r3, #0]
 80072fa:	b29b      	uxth	r3, r3
 80072fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007300:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007304:	b29a      	uxth	r2, r3
 8007306:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800730a:	801a      	strh	r2, [r3, #0]
 800730c:	e05f      	b.n	80073ce <USB_EPStartXfer+0x10bc>
 800730e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007312:	2b3e      	cmp	r3, #62	; 0x3e
 8007314:	d818      	bhi.n	8007348 <USB_EPStartXfer+0x1036>
 8007316:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800731a:	085b      	lsrs	r3, r3, #1
 800731c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007320:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007324:	f003 0301 	and.w	r3, r3, #1
 8007328:	2b00      	cmp	r3, #0
 800732a:	d004      	beq.n	8007336 <USB_EPStartXfer+0x1024>
 800732c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007330:	3301      	adds	r3, #1
 8007332:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007336:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800733a:	b29b      	uxth	r3, r3
 800733c:	029b      	lsls	r3, r3, #10
 800733e:	b29a      	uxth	r2, r3
 8007340:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007344:	801a      	strh	r2, [r3, #0]
 8007346:	e042      	b.n	80073ce <USB_EPStartXfer+0x10bc>
 8007348:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800734c:	095b      	lsrs	r3, r3, #5
 800734e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007352:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007356:	f003 031f 	and.w	r3, r3, #31
 800735a:	2b00      	cmp	r3, #0
 800735c:	d104      	bne.n	8007368 <USB_EPStartXfer+0x1056>
 800735e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007362:	3b01      	subs	r3, #1
 8007364:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007368:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800736c:	b29b      	uxth	r3, r3
 800736e:	029b      	lsls	r3, r3, #10
 8007370:	b29b      	uxth	r3, r3
 8007372:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007376:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800737a:	b29a      	uxth	r2, r3
 800737c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007380:	801a      	strh	r2, [r3, #0]
 8007382:	e024      	b.n	80073ce <USB_EPStartXfer+0x10bc>
 8007384:	463b      	mov	r3, r7
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	785b      	ldrb	r3, [r3, #1]
 800738a:	2b01      	cmp	r3, #1
 800738c:	d11f      	bne.n	80073ce <USB_EPStartXfer+0x10bc>
 800738e:	1d3b      	adds	r3, r7, #4
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007396:	1d3b      	adds	r3, r7, #4
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800739e:	b29b      	uxth	r3, r3
 80073a0:	461a      	mov	r2, r3
 80073a2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80073a6:	4413      	add	r3, r2
 80073a8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80073ac:	463b      	mov	r3, r7
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	781b      	ldrb	r3, [r3, #0]
 80073b2:	00da      	lsls	r2, r3, #3
 80073b4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80073b8:	4413      	add	r3, r2
 80073ba:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80073be:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80073c2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80073c6:	b29a      	uxth	r2, r3
 80073c8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80073cc:	801a      	strh	r2, [r3, #0]
 80073ce:	1d3b      	adds	r3, r7, #4
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80073d6:	463b      	mov	r3, r7
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	785b      	ldrb	r3, [r3, #1]
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d16f      	bne.n	80074c0 <USB_EPStartXfer+0x11ae>
 80073e0:	1d3b      	adds	r3, r7, #4
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80073e8:	1d3b      	adds	r3, r7, #4
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80073f0:	b29b      	uxth	r3, r3
 80073f2:	461a      	mov	r2, r3
 80073f4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80073f8:	4413      	add	r3, r2
 80073fa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80073fe:	463b      	mov	r3, r7
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	781b      	ldrb	r3, [r3, #0]
 8007404:	00da      	lsls	r2, r3, #3
 8007406:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800740a:	4413      	add	r3, r2
 800740c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007410:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007414:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007418:	2b00      	cmp	r3, #0
 800741a:	d116      	bne.n	800744a <USB_EPStartXfer+0x1138>
 800741c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007420:	881b      	ldrh	r3, [r3, #0]
 8007422:	b29b      	uxth	r3, r3
 8007424:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007428:	b29a      	uxth	r2, r3
 800742a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800742e:	801a      	strh	r2, [r3, #0]
 8007430:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007434:	881b      	ldrh	r3, [r3, #0]
 8007436:	b29b      	uxth	r3, r3
 8007438:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800743c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007440:	b29a      	uxth	r2, r3
 8007442:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007446:	801a      	strh	r2, [r3, #0]
 8007448:	e05e      	b.n	8007508 <USB_EPStartXfer+0x11f6>
 800744a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800744e:	2b3e      	cmp	r3, #62	; 0x3e
 8007450:	d818      	bhi.n	8007484 <USB_EPStartXfer+0x1172>
 8007452:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007456:	085b      	lsrs	r3, r3, #1
 8007458:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800745c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007460:	f003 0301 	and.w	r3, r3, #1
 8007464:	2b00      	cmp	r3, #0
 8007466:	d004      	beq.n	8007472 <USB_EPStartXfer+0x1160>
 8007468:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800746c:	3301      	adds	r3, #1
 800746e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007472:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007476:	b29b      	uxth	r3, r3
 8007478:	029b      	lsls	r3, r3, #10
 800747a:	b29a      	uxth	r2, r3
 800747c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007480:	801a      	strh	r2, [r3, #0]
 8007482:	e041      	b.n	8007508 <USB_EPStartXfer+0x11f6>
 8007484:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007488:	095b      	lsrs	r3, r3, #5
 800748a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800748e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007492:	f003 031f 	and.w	r3, r3, #31
 8007496:	2b00      	cmp	r3, #0
 8007498:	d104      	bne.n	80074a4 <USB_EPStartXfer+0x1192>
 800749a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800749e:	3b01      	subs	r3, #1
 80074a0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80074a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80074a8:	b29b      	uxth	r3, r3
 80074aa:	029b      	lsls	r3, r3, #10
 80074ac:	b29b      	uxth	r3, r3
 80074ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80074b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80074b6:	b29a      	uxth	r2, r3
 80074b8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80074bc:	801a      	strh	r2, [r3, #0]
 80074be:	e023      	b.n	8007508 <USB_EPStartXfer+0x11f6>
 80074c0:	463b      	mov	r3, r7
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	785b      	ldrb	r3, [r3, #1]
 80074c6:	2b01      	cmp	r3, #1
 80074c8:	d11e      	bne.n	8007508 <USB_EPStartXfer+0x11f6>
 80074ca:	1d3b      	adds	r3, r7, #4
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80074d2:	b29b      	uxth	r3, r3
 80074d4:	461a      	mov	r2, r3
 80074d6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80074da:	4413      	add	r3, r2
 80074dc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80074e0:	463b      	mov	r3, r7
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	781b      	ldrb	r3, [r3, #0]
 80074e6:	00da      	lsls	r2, r3, #3
 80074e8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80074ec:	4413      	add	r3, r2
 80074ee:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80074f2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80074f6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80074fa:	b29a      	uxth	r2, r3
 80074fc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007500:	801a      	strh	r2, [r3, #0]
 8007502:	e001      	b.n	8007508 <USB_EPStartXfer+0x11f6>
      }
      else
      {
        return HAL_ERROR;
 8007504:	2301      	movs	r3, #1
 8007506:	e02e      	b.n	8007566 <USB_EPStartXfer+0x1254>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007508:	1d3b      	adds	r3, r7, #4
 800750a:	681a      	ldr	r2, [r3, #0]
 800750c:	463b      	mov	r3, r7
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	781b      	ldrb	r3, [r3, #0]
 8007512:	009b      	lsls	r3, r3, #2
 8007514:	4413      	add	r3, r2
 8007516:	881b      	ldrh	r3, [r3, #0]
 8007518:	b29b      	uxth	r3, r3
 800751a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800751e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007522:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8007526:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800752a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800752e:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8007532:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8007536:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800753a:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 800753e:	1d3b      	adds	r3, r7, #4
 8007540:	681a      	ldr	r2, [r3, #0]
 8007542:	463b      	mov	r3, r7
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	781b      	ldrb	r3, [r3, #0]
 8007548:	009b      	lsls	r3, r3, #2
 800754a:	441a      	add	r2, r3
 800754c:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8007550:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007554:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007558:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800755c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007560:	b29b      	uxth	r3, r3
 8007562:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007564:	2300      	movs	r3, #0
}
 8007566:	4618      	mov	r0, r3
 8007568:	f507 7788 	add.w	r7, r7, #272	; 0x110
 800756c:	46bd      	mov	sp, r7
 800756e:	bd80      	pop	{r7, pc}

08007570 <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007570:	b480      	push	{r7}
 8007572:	b085      	sub	sp, #20
 8007574:	af00      	add	r7, sp, #0
 8007576:	6078      	str	r0, [r7, #4]
 8007578:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800757a:	683b      	ldr	r3, [r7, #0]
 800757c:	785b      	ldrb	r3, [r3, #1]
 800757e:	2b00      	cmp	r3, #0
 8007580:	d020      	beq.n	80075c4 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8007582:	687a      	ldr	r2, [r7, #4]
 8007584:	683b      	ldr	r3, [r7, #0]
 8007586:	781b      	ldrb	r3, [r3, #0]
 8007588:	009b      	lsls	r3, r3, #2
 800758a:	4413      	add	r3, r2
 800758c:	881b      	ldrh	r3, [r3, #0]
 800758e:	b29b      	uxth	r3, r3
 8007590:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007594:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007598:	81bb      	strh	r3, [r7, #12]
 800759a:	89bb      	ldrh	r3, [r7, #12]
 800759c:	f083 0310 	eor.w	r3, r3, #16
 80075a0:	81bb      	strh	r3, [r7, #12]
 80075a2:	687a      	ldr	r2, [r7, #4]
 80075a4:	683b      	ldr	r3, [r7, #0]
 80075a6:	781b      	ldrb	r3, [r3, #0]
 80075a8:	009b      	lsls	r3, r3, #2
 80075aa:	441a      	add	r2, r3
 80075ac:	89bb      	ldrh	r3, [r7, #12]
 80075ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80075b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80075b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80075ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80075be:	b29b      	uxth	r3, r3
 80075c0:	8013      	strh	r3, [r2, #0]
 80075c2:	e01f      	b.n	8007604 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80075c4:	687a      	ldr	r2, [r7, #4]
 80075c6:	683b      	ldr	r3, [r7, #0]
 80075c8:	781b      	ldrb	r3, [r3, #0]
 80075ca:	009b      	lsls	r3, r3, #2
 80075cc:	4413      	add	r3, r2
 80075ce:	881b      	ldrh	r3, [r3, #0]
 80075d0:	b29b      	uxth	r3, r3
 80075d2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80075d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075da:	81fb      	strh	r3, [r7, #14]
 80075dc:	89fb      	ldrh	r3, [r7, #14]
 80075de:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80075e2:	81fb      	strh	r3, [r7, #14]
 80075e4:	687a      	ldr	r2, [r7, #4]
 80075e6:	683b      	ldr	r3, [r7, #0]
 80075e8:	781b      	ldrb	r3, [r3, #0]
 80075ea:	009b      	lsls	r3, r3, #2
 80075ec:	441a      	add	r2, r3
 80075ee:	89fb      	ldrh	r3, [r7, #14]
 80075f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80075f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80075f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80075fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007600:	b29b      	uxth	r3, r3
 8007602:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007604:	2300      	movs	r3, #0
}
 8007606:	4618      	mov	r0, r3
 8007608:	3714      	adds	r7, #20
 800760a:	46bd      	mov	sp, r7
 800760c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007610:	4770      	bx	lr

08007612 <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007612:	b480      	push	{r7}
 8007614:	b087      	sub	sp, #28
 8007616:	af00      	add	r7, sp, #0
 8007618:	6078      	str	r0, [r7, #4]
 800761a:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800761c:	683b      	ldr	r3, [r7, #0]
 800761e:	7b1b      	ldrb	r3, [r3, #12]
 8007620:	2b00      	cmp	r3, #0
 8007622:	f040 809d 	bne.w	8007760 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8007626:	683b      	ldr	r3, [r7, #0]
 8007628:	785b      	ldrb	r3, [r3, #1]
 800762a:	2b00      	cmp	r3, #0
 800762c:	d04c      	beq.n	80076c8 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800762e:	687a      	ldr	r2, [r7, #4]
 8007630:	683b      	ldr	r3, [r7, #0]
 8007632:	781b      	ldrb	r3, [r3, #0]
 8007634:	009b      	lsls	r3, r3, #2
 8007636:	4413      	add	r3, r2
 8007638:	881b      	ldrh	r3, [r3, #0]
 800763a:	823b      	strh	r3, [r7, #16]
 800763c:	8a3b      	ldrh	r3, [r7, #16]
 800763e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007642:	2b00      	cmp	r3, #0
 8007644:	d01b      	beq.n	800767e <USB_EPClearStall+0x6c>
 8007646:	687a      	ldr	r2, [r7, #4]
 8007648:	683b      	ldr	r3, [r7, #0]
 800764a:	781b      	ldrb	r3, [r3, #0]
 800764c:	009b      	lsls	r3, r3, #2
 800764e:	4413      	add	r3, r2
 8007650:	881b      	ldrh	r3, [r3, #0]
 8007652:	b29b      	uxth	r3, r3
 8007654:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007658:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800765c:	81fb      	strh	r3, [r7, #14]
 800765e:	687a      	ldr	r2, [r7, #4]
 8007660:	683b      	ldr	r3, [r7, #0]
 8007662:	781b      	ldrb	r3, [r3, #0]
 8007664:	009b      	lsls	r3, r3, #2
 8007666:	441a      	add	r2, r3
 8007668:	89fb      	ldrh	r3, [r7, #14]
 800766a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800766e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007672:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007676:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800767a:	b29b      	uxth	r3, r3
 800767c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800767e:	683b      	ldr	r3, [r7, #0]
 8007680:	78db      	ldrb	r3, [r3, #3]
 8007682:	2b01      	cmp	r3, #1
 8007684:	d06c      	beq.n	8007760 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007686:	687a      	ldr	r2, [r7, #4]
 8007688:	683b      	ldr	r3, [r7, #0]
 800768a:	781b      	ldrb	r3, [r3, #0]
 800768c:	009b      	lsls	r3, r3, #2
 800768e:	4413      	add	r3, r2
 8007690:	881b      	ldrh	r3, [r3, #0]
 8007692:	b29b      	uxth	r3, r3
 8007694:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007698:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800769c:	81bb      	strh	r3, [r7, #12]
 800769e:	89bb      	ldrh	r3, [r7, #12]
 80076a0:	f083 0320 	eor.w	r3, r3, #32
 80076a4:	81bb      	strh	r3, [r7, #12]
 80076a6:	687a      	ldr	r2, [r7, #4]
 80076a8:	683b      	ldr	r3, [r7, #0]
 80076aa:	781b      	ldrb	r3, [r3, #0]
 80076ac:	009b      	lsls	r3, r3, #2
 80076ae:	441a      	add	r2, r3
 80076b0:	89bb      	ldrh	r3, [r7, #12]
 80076b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80076b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80076ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80076be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80076c2:	b29b      	uxth	r3, r3
 80076c4:	8013      	strh	r3, [r2, #0]
 80076c6:	e04b      	b.n	8007760 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80076c8:	687a      	ldr	r2, [r7, #4]
 80076ca:	683b      	ldr	r3, [r7, #0]
 80076cc:	781b      	ldrb	r3, [r3, #0]
 80076ce:	009b      	lsls	r3, r3, #2
 80076d0:	4413      	add	r3, r2
 80076d2:	881b      	ldrh	r3, [r3, #0]
 80076d4:	82fb      	strh	r3, [r7, #22]
 80076d6:	8afb      	ldrh	r3, [r7, #22]
 80076d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d01b      	beq.n	8007718 <USB_EPClearStall+0x106>
 80076e0:	687a      	ldr	r2, [r7, #4]
 80076e2:	683b      	ldr	r3, [r7, #0]
 80076e4:	781b      	ldrb	r3, [r3, #0]
 80076e6:	009b      	lsls	r3, r3, #2
 80076e8:	4413      	add	r3, r2
 80076ea:	881b      	ldrh	r3, [r3, #0]
 80076ec:	b29b      	uxth	r3, r3
 80076ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80076f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076f6:	82bb      	strh	r3, [r7, #20]
 80076f8:	687a      	ldr	r2, [r7, #4]
 80076fa:	683b      	ldr	r3, [r7, #0]
 80076fc:	781b      	ldrb	r3, [r3, #0]
 80076fe:	009b      	lsls	r3, r3, #2
 8007700:	441a      	add	r2, r3
 8007702:	8abb      	ldrh	r3, [r7, #20]
 8007704:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007708:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800770c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007710:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007714:	b29b      	uxth	r3, r3
 8007716:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007718:	687a      	ldr	r2, [r7, #4]
 800771a:	683b      	ldr	r3, [r7, #0]
 800771c:	781b      	ldrb	r3, [r3, #0]
 800771e:	009b      	lsls	r3, r3, #2
 8007720:	4413      	add	r3, r2
 8007722:	881b      	ldrh	r3, [r3, #0]
 8007724:	b29b      	uxth	r3, r3
 8007726:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800772a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800772e:	827b      	strh	r3, [r7, #18]
 8007730:	8a7b      	ldrh	r3, [r7, #18]
 8007732:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007736:	827b      	strh	r3, [r7, #18]
 8007738:	8a7b      	ldrh	r3, [r7, #18]
 800773a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800773e:	827b      	strh	r3, [r7, #18]
 8007740:	687a      	ldr	r2, [r7, #4]
 8007742:	683b      	ldr	r3, [r7, #0]
 8007744:	781b      	ldrb	r3, [r3, #0]
 8007746:	009b      	lsls	r3, r3, #2
 8007748:	441a      	add	r2, r3
 800774a:	8a7b      	ldrh	r3, [r7, #18]
 800774c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007750:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007754:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007758:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800775c:	b29b      	uxth	r3, r3
 800775e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8007760:	2300      	movs	r3, #0
}
 8007762:	4618      	mov	r0, r3
 8007764:	371c      	adds	r7, #28
 8007766:	46bd      	mov	sp, r7
 8007768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776c:	4770      	bx	lr

0800776e <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800776e:	b480      	push	{r7}
 8007770:	b083      	sub	sp, #12
 8007772:	af00      	add	r7, sp, #0
 8007774:	6078      	str	r0, [r7, #4]
 8007776:	460b      	mov	r3, r1
 8007778:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800777a:	78fb      	ldrb	r3, [r7, #3]
 800777c:	2b00      	cmp	r3, #0
 800777e:	d103      	bne.n	8007788 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	2280      	movs	r2, #128	; 0x80
 8007784:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8007788:	2300      	movs	r3, #0
}
 800778a:	4618      	mov	r0, r3
 800778c:	370c      	adds	r7, #12
 800778e:	46bd      	mov	sp, r7
 8007790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007794:	4770      	bx	lr

08007796 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8007796:	b480      	push	{r7}
 8007798:	b083      	sub	sp, #12
 800779a:	af00      	add	r7, sp, #0
 800779c:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80077a4:	b29b      	uxth	r3, r3
 80077a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80077aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80077ae:	b29a      	uxth	r2, r3
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 80077b6:	2300      	movs	r3, #0
}
 80077b8:	4618      	mov	r0, r3
 80077ba:	370c      	adds	r7, #12
 80077bc:	46bd      	mov	sp, r7
 80077be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c2:	4770      	bx	lr

080077c4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 80077c4:	b480      	push	{r7}
 80077c6:	b085      	sub	sp, #20
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80077d2:	b29b      	uxth	r3, r3
 80077d4:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80077d6:	68fb      	ldr	r3, [r7, #12]
}
 80077d8:	4618      	mov	r0, r3
 80077da:	3714      	adds	r7, #20
 80077dc:	46bd      	mov	sp, r7
 80077de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e2:	4770      	bx	lr

080077e4 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 80077e4:	b480      	push	{r7}
 80077e6:	b083      	sub	sp, #12
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	6078      	str	r0, [r7, #4]
 80077ec:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80077ee:	2300      	movs	r3, #0
}
 80077f0:	4618      	mov	r0, r3
 80077f2:	370c      	adds	r7, #12
 80077f4:	46bd      	mov	sp, r7
 80077f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fa:	4770      	bx	lr

080077fc <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80077fc:	b480      	push	{r7}
 80077fe:	b08d      	sub	sp, #52	; 0x34
 8007800:	af00      	add	r7, sp, #0
 8007802:	60f8      	str	r0, [r7, #12]
 8007804:	60b9      	str	r1, [r7, #8]
 8007806:	4611      	mov	r1, r2
 8007808:	461a      	mov	r2, r3
 800780a:	460b      	mov	r3, r1
 800780c:	80fb      	strh	r3, [r7, #6]
 800780e:	4613      	mov	r3, r2
 8007810:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007812:	88bb      	ldrh	r3, [r7, #4]
 8007814:	3301      	adds	r3, #1
 8007816:	085b      	lsrs	r3, r3, #1
 8007818:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800781e:	68bb      	ldr	r3, [r7, #8]
 8007820:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007822:	88fa      	ldrh	r2, [r7, #6]
 8007824:	69fb      	ldr	r3, [r7, #28]
 8007826:	4413      	add	r3, r2
 8007828:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800782c:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800782e:	6a3b      	ldr	r3, [r7, #32]
 8007830:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007832:	e01b      	b.n	800786c <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 8007834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007836:	781b      	ldrb	r3, [r3, #0]
 8007838:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800783a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800783c:	3301      	adds	r3, #1
 800783e:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8007840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007842:	781b      	ldrb	r3, [r3, #0]
 8007844:	b29b      	uxth	r3, r3
 8007846:	021b      	lsls	r3, r3, #8
 8007848:	b29b      	uxth	r3, r3
 800784a:	461a      	mov	r2, r3
 800784c:	69bb      	ldr	r3, [r7, #24]
 800784e:	4313      	orrs	r3, r2
 8007850:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8007852:	697b      	ldr	r3, [r7, #20]
 8007854:	b29a      	uxth	r2, r3
 8007856:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007858:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800785a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800785c:	3302      	adds	r3, #2
 800785e:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 8007860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007862:	3301      	adds	r3, #1
 8007864:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8007866:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007868:	3b01      	subs	r3, #1
 800786a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800786c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800786e:	2b00      	cmp	r3, #0
 8007870:	d1e0      	bne.n	8007834 <USB_WritePMA+0x38>
  }
}
 8007872:	bf00      	nop
 8007874:	3734      	adds	r7, #52	; 0x34
 8007876:	46bd      	mov	sp, r7
 8007878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787c:	4770      	bx	lr

0800787e <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800787e:	b480      	push	{r7}
 8007880:	b08b      	sub	sp, #44	; 0x2c
 8007882:	af00      	add	r7, sp, #0
 8007884:	60f8      	str	r0, [r7, #12]
 8007886:	60b9      	str	r1, [r7, #8]
 8007888:	4611      	mov	r1, r2
 800788a:	461a      	mov	r2, r3
 800788c:	460b      	mov	r3, r1
 800788e:	80fb      	strh	r3, [r7, #6]
 8007890:	4613      	mov	r3, r2
 8007892:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8007894:	88bb      	ldrh	r3, [r7, #4]
 8007896:	085b      	lsrs	r3, r3, #1
 8007898:	b29b      	uxth	r3, r3
 800789a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80078a0:	68bb      	ldr	r3, [r7, #8]
 80078a2:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80078a4:	88fa      	ldrh	r2, [r7, #6]
 80078a6:	697b      	ldr	r3, [r7, #20]
 80078a8:	4413      	add	r3, r2
 80078aa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80078ae:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 80078b0:	69bb      	ldr	r3, [r7, #24]
 80078b2:	627b      	str	r3, [r7, #36]	; 0x24
 80078b4:	e018      	b.n	80078e8 <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 80078b6:	6a3b      	ldr	r3, [r7, #32]
 80078b8:	881b      	ldrh	r3, [r3, #0]
 80078ba:	b29b      	uxth	r3, r3
 80078bc:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80078be:	6a3b      	ldr	r3, [r7, #32]
 80078c0:	3302      	adds	r3, #2
 80078c2:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80078c4:	693b      	ldr	r3, [r7, #16]
 80078c6:	b2da      	uxtb	r2, r3
 80078c8:	69fb      	ldr	r3, [r7, #28]
 80078ca:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80078cc:	69fb      	ldr	r3, [r7, #28]
 80078ce:	3301      	adds	r3, #1
 80078d0:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 80078d2:	693b      	ldr	r3, [r7, #16]
 80078d4:	0a1b      	lsrs	r3, r3, #8
 80078d6:	b2da      	uxtb	r2, r3
 80078d8:	69fb      	ldr	r3, [r7, #28]
 80078da:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80078dc:	69fb      	ldr	r3, [r7, #28]
 80078de:	3301      	adds	r3, #1
 80078e0:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 80078e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078e4:	3b01      	subs	r3, #1
 80078e6:	627b      	str	r3, [r7, #36]	; 0x24
 80078e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d1e3      	bne.n	80078b6 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 80078ee:	88bb      	ldrh	r3, [r7, #4]
 80078f0:	f003 0301 	and.w	r3, r3, #1
 80078f4:	b29b      	uxth	r3, r3
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d007      	beq.n	800790a <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 80078fa:	6a3b      	ldr	r3, [r7, #32]
 80078fc:	881b      	ldrh	r3, [r3, #0]
 80078fe:	b29b      	uxth	r3, r3
 8007900:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8007902:	693b      	ldr	r3, [r7, #16]
 8007904:	b2da      	uxtb	r2, r3
 8007906:	69fb      	ldr	r3, [r7, #28]
 8007908:	701a      	strb	r2, [r3, #0]
  }
}
 800790a:	bf00      	nop
 800790c:	372c      	adds	r7, #44	; 0x2c
 800790e:	46bd      	mov	sp, r7
 8007910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007914:	4770      	bx	lr

08007916 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007916:	b580      	push	{r7, lr}
 8007918:	b084      	sub	sp, #16
 800791a:	af00      	add	r7, sp, #0
 800791c:	6078      	str	r0, [r7, #4]
 800791e:	460b      	mov	r3, r1
 8007920:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007922:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007926:	f002 f89d 	bl	8009a64 <USBD_static_malloc>
 800792a:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	2b00      	cmp	r3, #0
 8007930:	d105      	bne.n	800793e <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	2200      	movs	r2, #0
 8007936:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800793a:	2302      	movs	r3, #2
 800793c:	e066      	b.n	8007a0c <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	68fa      	ldr	r2, [r7, #12]
 8007942:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	7c1b      	ldrb	r3, [r3, #16]
 800794a:	2b00      	cmp	r3, #0
 800794c:	d119      	bne.n	8007982 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800794e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007952:	2202      	movs	r2, #2
 8007954:	2181      	movs	r1, #129	; 0x81
 8007956:	6878      	ldr	r0, [r7, #4]
 8007958:	f001 ff29 	bl	80097ae <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	2201      	movs	r2, #1
 8007960:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007962:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007966:	2202      	movs	r2, #2
 8007968:	2101      	movs	r1, #1
 800796a:	6878      	ldr	r0, [r7, #4]
 800796c:	f001 ff1f 	bl	80097ae <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	2201      	movs	r2, #1
 8007974:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	2210      	movs	r2, #16
 800797c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8007980:	e016      	b.n	80079b0 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007982:	2340      	movs	r3, #64	; 0x40
 8007984:	2202      	movs	r2, #2
 8007986:	2181      	movs	r1, #129	; 0x81
 8007988:	6878      	ldr	r0, [r7, #4]
 800798a:	f001 ff10 	bl	80097ae <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	2201      	movs	r2, #1
 8007992:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007994:	2340      	movs	r3, #64	; 0x40
 8007996:	2202      	movs	r2, #2
 8007998:	2101      	movs	r1, #1
 800799a:	6878      	ldr	r0, [r7, #4]
 800799c:	f001 ff07 	bl	80097ae <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	2201      	movs	r2, #1
 80079a4:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	2210      	movs	r2, #16
 80079ac:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80079b0:	2308      	movs	r3, #8
 80079b2:	2203      	movs	r2, #3
 80079b4:	2182      	movs	r1, #130	; 0x82
 80079b6:	6878      	ldr	r0, [r7, #4]
 80079b8:	f001 fef9 	bl	80097ae <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	2201      	movs	r2, #1
 80079c0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	2200      	movs	r2, #0
 80079d2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	2200      	movs	r2, #0
 80079da:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	7c1b      	ldrb	r3, [r3, #16]
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d109      	bne.n	80079fa <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80079ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80079f0:	2101      	movs	r1, #1
 80079f2:	6878      	ldr	r0, [r7, #4]
 80079f4:	f001 ffcb 	bl	800998e <USBD_LL_PrepareReceive>
 80079f8:	e007      	b.n	8007a0a <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007a00:	2340      	movs	r3, #64	; 0x40
 8007a02:	2101      	movs	r1, #1
 8007a04:	6878      	ldr	r0, [r7, #4]
 8007a06:	f001 ffc2 	bl	800998e <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007a0a:	2300      	movs	r3, #0
}
 8007a0c:	4618      	mov	r0, r3
 8007a0e:	3710      	adds	r7, #16
 8007a10:	46bd      	mov	sp, r7
 8007a12:	bd80      	pop	{r7, pc}

08007a14 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007a14:	b580      	push	{r7, lr}
 8007a16:	b082      	sub	sp, #8
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	6078      	str	r0, [r7, #4]
 8007a1c:	460b      	mov	r3, r1
 8007a1e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8007a20:	2181      	movs	r1, #129	; 0x81
 8007a22:	6878      	ldr	r0, [r7, #4]
 8007a24:	f001 fee9 	bl	80097fa <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	2200      	movs	r2, #0
 8007a2c:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8007a2e:	2101      	movs	r1, #1
 8007a30:	6878      	ldr	r0, [r7, #4]
 8007a32:	f001 fee2 	bl	80097fa <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	2200      	movs	r2, #0
 8007a3a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8007a3e:	2182      	movs	r1, #130	; 0x82
 8007a40:	6878      	ldr	r0, [r7, #4]
 8007a42:	f001 feda 	bl	80097fa <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	2200      	movs	r2, #0
 8007a4a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	2200      	movs	r2, #0
 8007a52:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d00e      	beq.n	8007a7e <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007a66:	685b      	ldr	r3, [r3, #4]
 8007a68:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007a70:	4618      	mov	r0, r3
 8007a72:	f002 f805 	bl	8009a80 <USBD_static_free>
    pdev->pClassData = NULL;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	2200      	movs	r2, #0
 8007a7a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007a7e:	2300      	movs	r3, #0
}
 8007a80:	4618      	mov	r0, r3
 8007a82:	3708      	adds	r7, #8
 8007a84:	46bd      	mov	sp, r7
 8007a86:	bd80      	pop	{r7, pc}

08007a88 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007a88:	b580      	push	{r7, lr}
 8007a8a:	b086      	sub	sp, #24
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	6078      	str	r0, [r7, #4]
 8007a90:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007a98:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8007a9a:	2300      	movs	r3, #0
 8007a9c:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8007a9e:	2300      	movs	r3, #0
 8007aa0:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8007aa2:	2300      	movs	r3, #0
 8007aa4:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007aa6:	683b      	ldr	r3, [r7, #0]
 8007aa8:	781b      	ldrb	r3, [r3, #0]
 8007aaa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d03a      	beq.n	8007b28 <USBD_CDC_Setup+0xa0>
 8007ab2:	2b20      	cmp	r3, #32
 8007ab4:	f040 8097 	bne.w	8007be6 <USBD_CDC_Setup+0x15e>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8007ab8:	683b      	ldr	r3, [r7, #0]
 8007aba:	88db      	ldrh	r3, [r3, #6]
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d029      	beq.n	8007b14 <USBD_CDC_Setup+0x8c>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8007ac0:	683b      	ldr	r3, [r7, #0]
 8007ac2:	781b      	ldrb	r3, [r3, #0]
 8007ac4:	b25b      	sxtb	r3, r3
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	da11      	bge.n	8007aee <USBD_CDC_Setup+0x66>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007ad0:	689b      	ldr	r3, [r3, #8]
 8007ad2:	683a      	ldr	r2, [r7, #0]
 8007ad4:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8007ad6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007ad8:	683a      	ldr	r2, [r7, #0]
 8007ada:	88d2      	ldrh	r2, [r2, #6]
 8007adc:	4798      	blx	r3
                                                            req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 8007ade:	6939      	ldr	r1, [r7, #16]
 8007ae0:	683b      	ldr	r3, [r7, #0]
 8007ae2:	88db      	ldrh	r3, [r3, #6]
 8007ae4:	461a      	mov	r2, r3
 8007ae6:	6878      	ldr	r0, [r7, #4]
 8007ae8:	f001 fa8d 	bl	8009006 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8007aec:	e082      	b.n	8007bf4 <USBD_CDC_Setup+0x16c>
          hcdc->CmdOpCode = req->bRequest;
 8007aee:	683b      	ldr	r3, [r7, #0]
 8007af0:	785a      	ldrb	r2, [r3, #1]
 8007af2:	693b      	ldr	r3, [r7, #16]
 8007af4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8007af8:	683b      	ldr	r3, [r7, #0]
 8007afa:	88db      	ldrh	r3, [r3, #6]
 8007afc:	b2da      	uxtb	r2, r3
 8007afe:	693b      	ldr	r3, [r7, #16]
 8007b00:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8007b04:	6939      	ldr	r1, [r7, #16]
 8007b06:	683b      	ldr	r3, [r7, #0]
 8007b08:	88db      	ldrh	r3, [r3, #6]
 8007b0a:	461a      	mov	r2, r3
 8007b0c:	6878      	ldr	r0, [r7, #4]
 8007b0e:	f001 faa6 	bl	800905e <USBD_CtlPrepareRx>
      break;
 8007b12:	e06f      	b.n	8007bf4 <USBD_CDC_Setup+0x16c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007b1a:	689b      	ldr	r3, [r3, #8]
 8007b1c:	683a      	ldr	r2, [r7, #0]
 8007b1e:	7850      	ldrb	r0, [r2, #1]
 8007b20:	2200      	movs	r2, #0
 8007b22:	6839      	ldr	r1, [r7, #0]
 8007b24:	4798      	blx	r3
      break;
 8007b26:	e065      	b.n	8007bf4 <USBD_CDC_Setup+0x16c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007b28:	683b      	ldr	r3, [r7, #0]
 8007b2a:	785b      	ldrb	r3, [r3, #1]
 8007b2c:	2b0b      	cmp	r3, #11
 8007b2e:	d84f      	bhi.n	8007bd0 <USBD_CDC_Setup+0x148>
 8007b30:	a201      	add	r2, pc, #4	; (adr r2, 8007b38 <USBD_CDC_Setup+0xb0>)
 8007b32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b36:	bf00      	nop
 8007b38:	08007b69 	.word	0x08007b69
 8007b3c:	08007bdf 	.word	0x08007bdf
 8007b40:	08007bd1 	.word	0x08007bd1
 8007b44:	08007bd1 	.word	0x08007bd1
 8007b48:	08007bd1 	.word	0x08007bd1
 8007b4c:	08007bd1 	.word	0x08007bd1
 8007b50:	08007bd1 	.word	0x08007bd1
 8007b54:	08007bd1 	.word	0x08007bd1
 8007b58:	08007bd1 	.word	0x08007bd1
 8007b5c:	08007bd1 	.word	0x08007bd1
 8007b60:	08007b91 	.word	0x08007b91
 8007b64:	08007bb9 	.word	0x08007bb9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b6e:	2b03      	cmp	r3, #3
 8007b70:	d107      	bne.n	8007b82 <USBD_CDC_Setup+0xfa>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007b72:	f107 030c 	add.w	r3, r7, #12
 8007b76:	2202      	movs	r2, #2
 8007b78:	4619      	mov	r1, r3
 8007b7a:	6878      	ldr	r0, [r7, #4]
 8007b7c:	f001 fa43 	bl	8009006 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007b80:	e030      	b.n	8007be4 <USBD_CDC_Setup+0x15c>
            USBD_CtlError(pdev, req);
 8007b82:	6839      	ldr	r1, [r7, #0]
 8007b84:	6878      	ldr	r0, [r7, #4]
 8007b86:	f001 f9cd 	bl	8008f24 <USBD_CtlError>
            ret = USBD_FAIL;
 8007b8a:	2303      	movs	r3, #3
 8007b8c:	75fb      	strb	r3, [r7, #23]
          break;
 8007b8e:	e029      	b.n	8007be4 <USBD_CDC_Setup+0x15c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b96:	2b03      	cmp	r3, #3
 8007b98:	d107      	bne.n	8007baa <USBD_CDC_Setup+0x122>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007b9a:	f107 030f 	add.w	r3, r7, #15
 8007b9e:	2201      	movs	r2, #1
 8007ba0:	4619      	mov	r1, r3
 8007ba2:	6878      	ldr	r0, [r7, #4]
 8007ba4:	f001 fa2f 	bl	8009006 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007ba8:	e01c      	b.n	8007be4 <USBD_CDC_Setup+0x15c>
            USBD_CtlError(pdev, req);
 8007baa:	6839      	ldr	r1, [r7, #0]
 8007bac:	6878      	ldr	r0, [r7, #4]
 8007bae:	f001 f9b9 	bl	8008f24 <USBD_CtlError>
            ret = USBD_FAIL;
 8007bb2:	2303      	movs	r3, #3
 8007bb4:	75fb      	strb	r3, [r7, #23]
          break;
 8007bb6:	e015      	b.n	8007be4 <USBD_CDC_Setup+0x15c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007bbe:	2b03      	cmp	r3, #3
 8007bc0:	d00f      	beq.n	8007be2 <USBD_CDC_Setup+0x15a>
          {
            USBD_CtlError(pdev, req);
 8007bc2:	6839      	ldr	r1, [r7, #0]
 8007bc4:	6878      	ldr	r0, [r7, #4]
 8007bc6:	f001 f9ad 	bl	8008f24 <USBD_CtlError>
            ret = USBD_FAIL;
 8007bca:	2303      	movs	r3, #3
 8007bcc:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007bce:	e008      	b.n	8007be2 <USBD_CDC_Setup+0x15a>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007bd0:	6839      	ldr	r1, [r7, #0]
 8007bd2:	6878      	ldr	r0, [r7, #4]
 8007bd4:	f001 f9a6 	bl	8008f24 <USBD_CtlError>
          ret = USBD_FAIL;
 8007bd8:	2303      	movs	r3, #3
 8007bda:	75fb      	strb	r3, [r7, #23]
          break;
 8007bdc:	e002      	b.n	8007be4 <USBD_CDC_Setup+0x15c>
          break;
 8007bde:	bf00      	nop
 8007be0:	e008      	b.n	8007bf4 <USBD_CDC_Setup+0x16c>
          break;
 8007be2:	bf00      	nop
      }
      break;
 8007be4:	e006      	b.n	8007bf4 <USBD_CDC_Setup+0x16c>

    default:
      USBD_CtlError(pdev, req);
 8007be6:	6839      	ldr	r1, [r7, #0]
 8007be8:	6878      	ldr	r0, [r7, #4]
 8007bea:	f001 f99b 	bl	8008f24 <USBD_CtlError>
      ret = USBD_FAIL;
 8007bee:	2303      	movs	r3, #3
 8007bf0:	75fb      	strb	r3, [r7, #23]
      break;
 8007bf2:	bf00      	nop
  }

  return (uint8_t)ret;
 8007bf4:	7dfb      	ldrb	r3, [r7, #23]
}
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	3718      	adds	r7, #24
 8007bfa:	46bd      	mov	sp, r7
 8007bfc:	bd80      	pop	{r7, pc}
 8007bfe:	bf00      	nop

08007c00 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007c00:	b580      	push	{r7, lr}
 8007c02:	b084      	sub	sp, #16
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	6078      	str	r0, [r7, #4]
 8007c08:	460b      	mov	r3, r1
 8007c0a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007c12:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d101      	bne.n	8007c22 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007c1e:	2303      	movs	r3, #3
 8007c20:	e04f      	b.n	8007cc2 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007c28:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8007c2a:	78fa      	ldrb	r2, [r7, #3]
 8007c2c:	6879      	ldr	r1, [r7, #4]
 8007c2e:	4613      	mov	r3, r2
 8007c30:	009b      	lsls	r3, r3, #2
 8007c32:	4413      	add	r3, r2
 8007c34:	009b      	lsls	r3, r3, #2
 8007c36:	440b      	add	r3, r1
 8007c38:	3318      	adds	r3, #24
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d029      	beq.n	8007c94 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8007c40:	78fa      	ldrb	r2, [r7, #3]
 8007c42:	6879      	ldr	r1, [r7, #4]
 8007c44:	4613      	mov	r3, r2
 8007c46:	009b      	lsls	r3, r3, #2
 8007c48:	4413      	add	r3, r2
 8007c4a:	009b      	lsls	r3, r3, #2
 8007c4c:	440b      	add	r3, r1
 8007c4e:	3318      	adds	r3, #24
 8007c50:	681a      	ldr	r2, [r3, #0]
 8007c52:	78f9      	ldrb	r1, [r7, #3]
 8007c54:	68f8      	ldr	r0, [r7, #12]
 8007c56:	460b      	mov	r3, r1
 8007c58:	009b      	lsls	r3, r3, #2
 8007c5a:	440b      	add	r3, r1
 8007c5c:	00db      	lsls	r3, r3, #3
 8007c5e:	4403      	add	r3, r0
 8007c60:	3338      	adds	r3, #56	; 0x38
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	fbb2 f1f3 	udiv	r1, r2, r3
 8007c68:	fb03 f301 	mul.w	r3, r3, r1
 8007c6c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d110      	bne.n	8007c94 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8007c72:	78fa      	ldrb	r2, [r7, #3]
 8007c74:	6879      	ldr	r1, [r7, #4]
 8007c76:	4613      	mov	r3, r2
 8007c78:	009b      	lsls	r3, r3, #2
 8007c7a:	4413      	add	r3, r2
 8007c7c:	009b      	lsls	r3, r3, #2
 8007c7e:	440b      	add	r3, r1
 8007c80:	3318      	adds	r3, #24
 8007c82:	2200      	movs	r2, #0
 8007c84:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007c86:	78f9      	ldrb	r1, [r7, #3]
 8007c88:	2300      	movs	r3, #0
 8007c8a:	2200      	movs	r2, #0
 8007c8c:	6878      	ldr	r0, [r7, #4]
 8007c8e:	f001 fe5d 	bl	800994c <USBD_LL_Transmit>
 8007c92:	e015      	b.n	8007cc0 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8007c94:	68bb      	ldr	r3, [r7, #8]
 8007c96:	2200      	movs	r2, #0
 8007c98:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007ca2:	691b      	ldr	r3, [r3, #16]
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d00b      	beq.n	8007cc0 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007cae:	691b      	ldr	r3, [r3, #16]
 8007cb0:	68ba      	ldr	r2, [r7, #8]
 8007cb2:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8007cb6:	68ba      	ldr	r2, [r7, #8]
 8007cb8:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8007cbc:	78fa      	ldrb	r2, [r7, #3]
 8007cbe:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8007cc0:	2300      	movs	r3, #0
}
 8007cc2:	4618      	mov	r0, r3
 8007cc4:	3710      	adds	r7, #16
 8007cc6:	46bd      	mov	sp, r7
 8007cc8:	bd80      	pop	{r7, pc}

08007cca <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007cca:	b580      	push	{r7, lr}
 8007ccc:	b084      	sub	sp, #16
 8007cce:	af00      	add	r7, sp, #0
 8007cd0:	6078      	str	r0, [r7, #4]
 8007cd2:	460b      	mov	r3, r1
 8007cd4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007cdc:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d101      	bne.n	8007cec <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007ce8:	2303      	movs	r3, #3
 8007cea:	e015      	b.n	8007d18 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007cec:	78fb      	ldrb	r3, [r7, #3]
 8007cee:	4619      	mov	r1, r3
 8007cf0:	6878      	ldr	r0, [r7, #4]
 8007cf2:	f001 fe6d 	bl	80099d0 <USBD_LL_GetRxDataSize>
 8007cf6:	4602      	mov	r2, r0
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007d04:	68db      	ldr	r3, [r3, #12]
 8007d06:	68fa      	ldr	r2, [r7, #12]
 8007d08:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007d0c:	68fa      	ldr	r2, [r7, #12]
 8007d0e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007d12:	4611      	mov	r1, r2
 8007d14:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007d16:	2300      	movs	r3, #0
}
 8007d18:	4618      	mov	r0, r3
 8007d1a:	3710      	adds	r7, #16
 8007d1c:	46bd      	mov	sp, r7
 8007d1e:	bd80      	pop	{r7, pc}

08007d20 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007d20:	b580      	push	{r7, lr}
 8007d22:	b084      	sub	sp, #16
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007d2e:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d015      	beq.n	8007d66 <USBD_CDC_EP0_RxReady+0x46>
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007d40:	2bff      	cmp	r3, #255	; 0xff
 8007d42:	d010      	beq.n	8007d66 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007d4a:	689b      	ldr	r3, [r3, #8]
 8007d4c:	68fa      	ldr	r2, [r7, #12]
 8007d4e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8007d52:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8007d54:	68fa      	ldr	r2, [r7, #12]
 8007d56:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007d5a:	b292      	uxth	r2, r2
 8007d5c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	22ff      	movs	r2, #255	; 0xff
 8007d62:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8007d66:	2300      	movs	r3, #0
}
 8007d68:	4618      	mov	r0, r3
 8007d6a:	3710      	adds	r7, #16
 8007d6c:	46bd      	mov	sp, r7
 8007d6e:	bd80      	pop	{r7, pc}

08007d70 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007d70:	b480      	push	{r7}
 8007d72:	b083      	sub	sp, #12
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	2243      	movs	r2, #67	; 0x43
 8007d7c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8007d7e:	4b03      	ldr	r3, [pc, #12]	; (8007d8c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8007d80:	4618      	mov	r0, r3
 8007d82:	370c      	adds	r7, #12
 8007d84:	46bd      	mov	sp, r7
 8007d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d8a:	4770      	bx	lr
 8007d8c:	20000094 	.word	0x20000094

08007d90 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007d90:	b480      	push	{r7}
 8007d92:	b083      	sub	sp, #12
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	2243      	movs	r2, #67	; 0x43
 8007d9c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8007d9e:	4b03      	ldr	r3, [pc, #12]	; (8007dac <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8007da0:	4618      	mov	r0, r3
 8007da2:	370c      	adds	r7, #12
 8007da4:	46bd      	mov	sp, r7
 8007da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007daa:	4770      	bx	lr
 8007dac:	20000050 	.word	0x20000050

08007db0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007db0:	b480      	push	{r7}
 8007db2:	b083      	sub	sp, #12
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	2243      	movs	r2, #67	; 0x43
 8007dbc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8007dbe:	4b03      	ldr	r3, [pc, #12]	; (8007dcc <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8007dc0:	4618      	mov	r0, r3
 8007dc2:	370c      	adds	r7, #12
 8007dc4:	46bd      	mov	sp, r7
 8007dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dca:	4770      	bx	lr
 8007dcc:	200000d8 	.word	0x200000d8

08007dd0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007dd0:	b480      	push	{r7}
 8007dd2:	b083      	sub	sp, #12
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	220a      	movs	r2, #10
 8007ddc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8007dde:	4b03      	ldr	r3, [pc, #12]	; (8007dec <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007de0:	4618      	mov	r0, r3
 8007de2:	370c      	adds	r7, #12
 8007de4:	46bd      	mov	sp, r7
 8007de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dea:	4770      	bx	lr
 8007dec:	2000000c 	.word	0x2000000c

08007df0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007df0:	b480      	push	{r7}
 8007df2:	b083      	sub	sp, #12
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	6078      	str	r0, [r7, #4]
 8007df8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007dfa:	683b      	ldr	r3, [r7, #0]
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d101      	bne.n	8007e04 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007e00:	2303      	movs	r3, #3
 8007e02:	e004      	b.n	8007e0e <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	683a      	ldr	r2, [r7, #0]
 8007e08:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8007e0c:	2300      	movs	r3, #0
}
 8007e0e:	4618      	mov	r0, r3
 8007e10:	370c      	adds	r7, #12
 8007e12:	46bd      	mov	sp, r7
 8007e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e18:	4770      	bx	lr

08007e1a <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007e1a:	b480      	push	{r7}
 8007e1c:	b087      	sub	sp, #28
 8007e1e:	af00      	add	r7, sp, #0
 8007e20:	60f8      	str	r0, [r7, #12]
 8007e22:	60b9      	str	r1, [r7, #8]
 8007e24:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007e2c:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8007e2e:	697b      	ldr	r3, [r7, #20]
 8007e30:	68ba      	ldr	r2, [r7, #8]
 8007e32:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007e36:	697b      	ldr	r3, [r7, #20]
 8007e38:	687a      	ldr	r2, [r7, #4]
 8007e3a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8007e3e:	2300      	movs	r3, #0
}
 8007e40:	4618      	mov	r0, r3
 8007e42:	371c      	adds	r7, #28
 8007e44:	46bd      	mov	sp, r7
 8007e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e4a:	4770      	bx	lr

08007e4c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007e4c:	b480      	push	{r7}
 8007e4e:	b085      	sub	sp, #20
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	6078      	str	r0, [r7, #4]
 8007e54:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007e5c:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	683a      	ldr	r2, [r7, #0]
 8007e62:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8007e66:	2300      	movs	r3, #0
}
 8007e68:	4618      	mov	r0, r3
 8007e6a:	3714      	adds	r7, #20
 8007e6c:	46bd      	mov	sp, r7
 8007e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e72:	4770      	bx	lr

08007e74 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007e74:	b580      	push	{r7, lr}
 8007e76:	b084      	sub	sp, #16
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007e82:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8007e84:	2301      	movs	r3, #1
 8007e86:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d101      	bne.n	8007e96 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007e92:	2303      	movs	r3, #3
 8007e94:	e01a      	b.n	8007ecc <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8007e96:	68bb      	ldr	r3, [r7, #8]
 8007e98:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d114      	bne.n	8007eca <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8007ea0:	68bb      	ldr	r3, [r7, #8]
 8007ea2:	2201      	movs	r2, #1
 8007ea4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8007ea8:	68bb      	ldr	r3, [r7, #8]
 8007eaa:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8007eb2:	68bb      	ldr	r3, [r7, #8]
 8007eb4:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8007eb8:	68bb      	ldr	r3, [r7, #8]
 8007eba:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8007ebe:	2181      	movs	r1, #129	; 0x81
 8007ec0:	6878      	ldr	r0, [r7, #4]
 8007ec2:	f001 fd43 	bl	800994c <USBD_LL_Transmit>

    ret = USBD_OK;
 8007ec6:	2300      	movs	r3, #0
 8007ec8:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8007eca:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ecc:	4618      	mov	r0, r3
 8007ece:	3710      	adds	r7, #16
 8007ed0:	46bd      	mov	sp, r7
 8007ed2:	bd80      	pop	{r7, pc}

08007ed4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007ed4:	b580      	push	{r7, lr}
 8007ed6:	b084      	sub	sp, #16
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007ee2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d101      	bne.n	8007ef2 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8007eee:	2303      	movs	r3, #3
 8007ef0:	e016      	b.n	8007f20 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	7c1b      	ldrb	r3, [r3, #16]
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d109      	bne.n	8007f0e <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007f00:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007f04:	2101      	movs	r1, #1
 8007f06:	6878      	ldr	r0, [r7, #4]
 8007f08:	f001 fd41 	bl	800998e <USBD_LL_PrepareReceive>
 8007f0c:	e007      	b.n	8007f1e <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007f14:	2340      	movs	r3, #64	; 0x40
 8007f16:	2101      	movs	r1, #1
 8007f18:	6878      	ldr	r0, [r7, #4]
 8007f1a:	f001 fd38 	bl	800998e <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007f1e:	2300      	movs	r3, #0
}
 8007f20:	4618      	mov	r0, r3
 8007f22:	3710      	adds	r7, #16
 8007f24:	46bd      	mov	sp, r7
 8007f26:	bd80      	pop	{r7, pc}

08007f28 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007f28:	b580      	push	{r7, lr}
 8007f2a:	b086      	sub	sp, #24
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	60f8      	str	r0, [r7, #12]
 8007f30:	60b9      	str	r1, [r7, #8]
 8007f32:	4613      	mov	r3, r2
 8007f34:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d101      	bne.n	8007f40 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007f3c:	2303      	movs	r3, #3
 8007f3e:	e01f      	b.n	8007f80 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	2200      	movs	r2, #0
 8007f44:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	2200      	movs	r2, #0
 8007f4c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	2200      	movs	r2, #0
 8007f54:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007f58:	68bb      	ldr	r3, [r7, #8]
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d003      	beq.n	8007f66 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	68ba      	ldr	r2, [r7, #8]
 8007f62:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	2201      	movs	r2, #1
 8007f6a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	79fa      	ldrb	r2, [r7, #7]
 8007f72:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007f74:	68f8      	ldr	r0, [r7, #12]
 8007f76:	f001 fb9f 	bl	80096b8 <USBD_LL_Init>
 8007f7a:	4603      	mov	r3, r0
 8007f7c:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007f7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f80:	4618      	mov	r0, r3
 8007f82:	3718      	adds	r7, #24
 8007f84:	46bd      	mov	sp, r7
 8007f86:	bd80      	pop	{r7, pc}

08007f88 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007f88:	b580      	push	{r7, lr}
 8007f8a:	b084      	sub	sp, #16
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	6078      	str	r0, [r7, #4]
 8007f90:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007f92:	2300      	movs	r3, #0
 8007f94:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007f96:	683b      	ldr	r3, [r7, #0]
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d101      	bne.n	8007fa0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8007f9c:	2303      	movs	r3, #3
 8007f9e:	e016      	b.n	8007fce <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	683a      	ldr	r2, [r7, #0]
 8007fa4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007fae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d00b      	beq.n	8007fcc <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fbc:	f107 020e 	add.w	r2, r7, #14
 8007fc0:	4610      	mov	r0, r2
 8007fc2:	4798      	blx	r3
 8007fc4:	4602      	mov	r2, r0
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8007fcc:	2300      	movs	r3, #0
}
 8007fce:	4618      	mov	r0, r3
 8007fd0:	3710      	adds	r7, #16
 8007fd2:	46bd      	mov	sp, r7
 8007fd4:	bd80      	pop	{r7, pc}

08007fd6 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007fd6:	b580      	push	{r7, lr}
 8007fd8:	b082      	sub	sp, #8
 8007fda:	af00      	add	r7, sp, #0
 8007fdc:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007fde:	6878      	ldr	r0, [r7, #4]
 8007fe0:	f001 fbca 	bl	8009778 <USBD_LL_Start>
 8007fe4:	4603      	mov	r3, r0
}
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	3708      	adds	r7, #8
 8007fea:	46bd      	mov	sp, r7
 8007fec:	bd80      	pop	{r7, pc}

08007fee <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007fee:	b480      	push	{r7}
 8007ff0:	b083      	sub	sp, #12
 8007ff2:	af00      	add	r7, sp, #0
 8007ff4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007ff6:	2300      	movs	r3, #0
}
 8007ff8:	4618      	mov	r0, r3
 8007ffa:	370c      	adds	r7, #12
 8007ffc:	46bd      	mov	sp, r7
 8007ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008002:	4770      	bx	lr

08008004 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008004:	b580      	push	{r7, lr}
 8008006:	b084      	sub	sp, #16
 8008008:	af00      	add	r7, sp, #0
 800800a:	6078      	str	r0, [r7, #4]
 800800c:	460b      	mov	r3, r1
 800800e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8008010:	2303      	movs	r3, #3
 8008012:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800801a:	2b00      	cmp	r3, #0
 800801c:	d009      	beq.n	8008032 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	78fa      	ldrb	r2, [r7, #3]
 8008028:	4611      	mov	r1, r2
 800802a:	6878      	ldr	r0, [r7, #4]
 800802c:	4798      	blx	r3
 800802e:	4603      	mov	r3, r0
 8008030:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8008032:	7bfb      	ldrb	r3, [r7, #15]
}
 8008034:	4618      	mov	r0, r3
 8008036:	3710      	adds	r7, #16
 8008038:	46bd      	mov	sp, r7
 800803a:	bd80      	pop	{r7, pc}

0800803c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800803c:	b580      	push	{r7, lr}
 800803e:	b082      	sub	sp, #8
 8008040:	af00      	add	r7, sp, #0
 8008042:	6078      	str	r0, [r7, #4]
 8008044:	460b      	mov	r3, r1
 8008046:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800804e:	2b00      	cmp	r3, #0
 8008050:	d007      	beq.n	8008062 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008058:	685b      	ldr	r3, [r3, #4]
 800805a:	78fa      	ldrb	r2, [r7, #3]
 800805c:	4611      	mov	r1, r2
 800805e:	6878      	ldr	r0, [r7, #4]
 8008060:	4798      	blx	r3
  }

  return USBD_OK;
 8008062:	2300      	movs	r3, #0
}
 8008064:	4618      	mov	r0, r3
 8008066:	3708      	adds	r7, #8
 8008068:	46bd      	mov	sp, r7
 800806a:	bd80      	pop	{r7, pc}

0800806c <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800806c:	b580      	push	{r7, lr}
 800806e:	b084      	sub	sp, #16
 8008070:	af00      	add	r7, sp, #0
 8008072:	6078      	str	r0, [r7, #4]
 8008074:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800807c:	6839      	ldr	r1, [r7, #0]
 800807e:	4618      	mov	r0, r3
 8008080:	f000 ff16 	bl	8008eb0 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	2201      	movs	r2, #1
 8008088:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8008092:	461a      	mov	r2, r3
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80080a0:	f003 031f 	and.w	r3, r3, #31
 80080a4:	2b01      	cmp	r3, #1
 80080a6:	d00e      	beq.n	80080c6 <USBD_LL_SetupStage+0x5a>
 80080a8:	2b01      	cmp	r3, #1
 80080aa:	d302      	bcc.n	80080b2 <USBD_LL_SetupStage+0x46>
 80080ac:	2b02      	cmp	r3, #2
 80080ae:	d014      	beq.n	80080da <USBD_LL_SetupStage+0x6e>
 80080b0:	e01d      	b.n	80080ee <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80080b8:	4619      	mov	r1, r3
 80080ba:	6878      	ldr	r0, [r7, #4]
 80080bc:	f000 f9d6 	bl	800846c <USBD_StdDevReq>
 80080c0:	4603      	mov	r3, r0
 80080c2:	73fb      	strb	r3, [r7, #15]
      break;
 80080c4:	e020      	b.n	8008108 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80080cc:	4619      	mov	r1, r3
 80080ce:	6878      	ldr	r0, [r7, #4]
 80080d0:	f000 fa3a 	bl	8008548 <USBD_StdItfReq>
 80080d4:	4603      	mov	r3, r0
 80080d6:	73fb      	strb	r3, [r7, #15]
      break;
 80080d8:	e016      	b.n	8008108 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80080e0:	4619      	mov	r1, r3
 80080e2:	6878      	ldr	r0, [r7, #4]
 80080e4:	f000 fa76 	bl	80085d4 <USBD_StdEPReq>
 80080e8:	4603      	mov	r3, r0
 80080ea:	73fb      	strb	r3, [r7, #15]
      break;
 80080ec:	e00c      	b.n	8008108 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80080f4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80080f8:	b2db      	uxtb	r3, r3
 80080fa:	4619      	mov	r1, r3
 80080fc:	6878      	ldr	r0, [r7, #4]
 80080fe:	f001 fb9b 	bl	8009838 <USBD_LL_StallEP>
 8008102:	4603      	mov	r3, r0
 8008104:	73fb      	strb	r3, [r7, #15]
      break;
 8008106:	bf00      	nop
  }

  return ret;
 8008108:	7bfb      	ldrb	r3, [r7, #15]
}
 800810a:	4618      	mov	r0, r3
 800810c:	3710      	adds	r7, #16
 800810e:	46bd      	mov	sp, r7
 8008110:	bd80      	pop	{r7, pc}

08008112 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008112:	b580      	push	{r7, lr}
 8008114:	b086      	sub	sp, #24
 8008116:	af00      	add	r7, sp, #0
 8008118:	60f8      	str	r0, [r7, #12]
 800811a:	460b      	mov	r3, r1
 800811c:	607a      	str	r2, [r7, #4]
 800811e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8008120:	7afb      	ldrb	r3, [r7, #11]
 8008122:	2b00      	cmp	r3, #0
 8008124:	d137      	bne.n	8008196 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800812c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008134:	2b03      	cmp	r3, #3
 8008136:	d14a      	bne.n	80081ce <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8008138:	693b      	ldr	r3, [r7, #16]
 800813a:	689a      	ldr	r2, [r3, #8]
 800813c:	693b      	ldr	r3, [r7, #16]
 800813e:	68db      	ldr	r3, [r3, #12]
 8008140:	429a      	cmp	r2, r3
 8008142:	d913      	bls.n	800816c <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008144:	693b      	ldr	r3, [r7, #16]
 8008146:	689a      	ldr	r2, [r3, #8]
 8008148:	693b      	ldr	r3, [r7, #16]
 800814a:	68db      	ldr	r3, [r3, #12]
 800814c:	1ad2      	subs	r2, r2, r3
 800814e:	693b      	ldr	r3, [r7, #16]
 8008150:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8008152:	693b      	ldr	r3, [r7, #16]
 8008154:	68da      	ldr	r2, [r3, #12]
 8008156:	693b      	ldr	r3, [r7, #16]
 8008158:	689b      	ldr	r3, [r3, #8]
 800815a:	4293      	cmp	r3, r2
 800815c:	bf28      	it	cs
 800815e:	4613      	movcs	r3, r2
 8008160:	461a      	mov	r2, r3
 8008162:	6879      	ldr	r1, [r7, #4]
 8008164:	68f8      	ldr	r0, [r7, #12]
 8008166:	f000 ff97 	bl	8009098 <USBD_CtlContinueRx>
 800816a:	e030      	b.n	80081ce <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008172:	691b      	ldr	r3, [r3, #16]
 8008174:	2b00      	cmp	r3, #0
 8008176:	d00a      	beq.n	800818e <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800817e:	2b03      	cmp	r3, #3
 8008180:	d105      	bne.n	800818e <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008188:	691b      	ldr	r3, [r3, #16]
 800818a:	68f8      	ldr	r0, [r7, #12]
 800818c:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 800818e:	68f8      	ldr	r0, [r7, #12]
 8008190:	f000 ff93 	bl	80090ba <USBD_CtlSendStatus>
 8008194:	e01b      	b.n	80081ce <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800819c:	699b      	ldr	r3, [r3, #24]
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d013      	beq.n	80081ca <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80081a8:	2b03      	cmp	r3, #3
 80081aa:	d10e      	bne.n	80081ca <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081b2:	699b      	ldr	r3, [r3, #24]
 80081b4:	7afa      	ldrb	r2, [r7, #11]
 80081b6:	4611      	mov	r1, r2
 80081b8:	68f8      	ldr	r0, [r7, #12]
 80081ba:	4798      	blx	r3
 80081bc:	4603      	mov	r3, r0
 80081be:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 80081c0:	7dfb      	ldrb	r3, [r7, #23]
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d003      	beq.n	80081ce <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 80081c6:	7dfb      	ldrb	r3, [r7, #23]
 80081c8:	e002      	b.n	80081d0 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80081ca:	2303      	movs	r3, #3
 80081cc:	e000      	b.n	80081d0 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 80081ce:	2300      	movs	r3, #0
}
 80081d0:	4618      	mov	r0, r3
 80081d2:	3718      	adds	r7, #24
 80081d4:	46bd      	mov	sp, r7
 80081d6:	bd80      	pop	{r7, pc}

080081d8 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80081d8:	b580      	push	{r7, lr}
 80081da:	b086      	sub	sp, #24
 80081dc:	af00      	add	r7, sp, #0
 80081de:	60f8      	str	r0, [r7, #12]
 80081e0:	460b      	mov	r3, r1
 80081e2:	607a      	str	r2, [r7, #4]
 80081e4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80081e6:	7afb      	ldrb	r3, [r7, #11]
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d16a      	bne.n	80082c2 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	3314      	adds	r3, #20
 80081f0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80081f8:	2b02      	cmp	r3, #2
 80081fa:	d155      	bne.n	80082a8 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 80081fc:	693b      	ldr	r3, [r7, #16]
 80081fe:	689a      	ldr	r2, [r3, #8]
 8008200:	693b      	ldr	r3, [r7, #16]
 8008202:	68db      	ldr	r3, [r3, #12]
 8008204:	429a      	cmp	r2, r3
 8008206:	d914      	bls.n	8008232 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008208:	693b      	ldr	r3, [r7, #16]
 800820a:	689a      	ldr	r2, [r3, #8]
 800820c:	693b      	ldr	r3, [r7, #16]
 800820e:	68db      	ldr	r3, [r3, #12]
 8008210:	1ad2      	subs	r2, r2, r3
 8008212:	693b      	ldr	r3, [r7, #16]
 8008214:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008216:	693b      	ldr	r3, [r7, #16]
 8008218:	689b      	ldr	r3, [r3, #8]
 800821a:	461a      	mov	r2, r3
 800821c:	6879      	ldr	r1, [r7, #4]
 800821e:	68f8      	ldr	r0, [r7, #12]
 8008220:	f000 ff0c 	bl	800903c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008224:	2300      	movs	r3, #0
 8008226:	2200      	movs	r2, #0
 8008228:	2100      	movs	r1, #0
 800822a:	68f8      	ldr	r0, [r7, #12]
 800822c:	f001 fbaf 	bl	800998e <USBD_LL_PrepareReceive>
 8008230:	e03a      	b.n	80082a8 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008232:	693b      	ldr	r3, [r7, #16]
 8008234:	68da      	ldr	r2, [r3, #12]
 8008236:	693b      	ldr	r3, [r7, #16]
 8008238:	689b      	ldr	r3, [r3, #8]
 800823a:	429a      	cmp	r2, r3
 800823c:	d11c      	bne.n	8008278 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800823e:	693b      	ldr	r3, [r7, #16]
 8008240:	685a      	ldr	r2, [r3, #4]
 8008242:	693b      	ldr	r3, [r7, #16]
 8008244:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008246:	429a      	cmp	r2, r3
 8008248:	d316      	bcc.n	8008278 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800824a:	693b      	ldr	r3, [r7, #16]
 800824c:	685a      	ldr	r2, [r3, #4]
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008254:	429a      	cmp	r2, r3
 8008256:	d20f      	bcs.n	8008278 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008258:	2200      	movs	r2, #0
 800825a:	2100      	movs	r1, #0
 800825c:	68f8      	ldr	r0, [r7, #12]
 800825e:	f000 feed 	bl	800903c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	2200      	movs	r2, #0
 8008266:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800826a:	2300      	movs	r3, #0
 800826c:	2200      	movs	r2, #0
 800826e:	2100      	movs	r1, #0
 8008270:	68f8      	ldr	r0, [r7, #12]
 8008272:	f001 fb8c 	bl	800998e <USBD_LL_PrepareReceive>
 8008276:	e017      	b.n	80082a8 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800827e:	68db      	ldr	r3, [r3, #12]
 8008280:	2b00      	cmp	r3, #0
 8008282:	d00a      	beq.n	800829a <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800828a:	2b03      	cmp	r3, #3
 800828c:	d105      	bne.n	800829a <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008294:	68db      	ldr	r3, [r3, #12]
 8008296:	68f8      	ldr	r0, [r7, #12]
 8008298:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800829a:	2180      	movs	r1, #128	; 0x80
 800829c:	68f8      	ldr	r0, [r7, #12]
 800829e:	f001 facb 	bl	8009838 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80082a2:	68f8      	ldr	r0, [r7, #12]
 80082a4:	f000 ff1c 	bl	80090e0 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80082ae:	2b01      	cmp	r3, #1
 80082b0:	d123      	bne.n	80082fa <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80082b2:	68f8      	ldr	r0, [r7, #12]
 80082b4:	f7ff fe9b 	bl	8007fee <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	2200      	movs	r2, #0
 80082bc:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80082c0:	e01b      	b.n	80082fa <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082c8:	695b      	ldr	r3, [r3, #20]
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d013      	beq.n	80082f6 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80082d4:	2b03      	cmp	r3, #3
 80082d6:	d10e      	bne.n	80082f6 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082de:	695b      	ldr	r3, [r3, #20]
 80082e0:	7afa      	ldrb	r2, [r7, #11]
 80082e2:	4611      	mov	r1, r2
 80082e4:	68f8      	ldr	r0, [r7, #12]
 80082e6:	4798      	blx	r3
 80082e8:	4603      	mov	r3, r0
 80082ea:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 80082ec:	7dfb      	ldrb	r3, [r7, #23]
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d003      	beq.n	80082fa <USBD_LL_DataInStage+0x122>
    {
      return ret;
 80082f2:	7dfb      	ldrb	r3, [r7, #23]
 80082f4:	e002      	b.n	80082fc <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80082f6:	2303      	movs	r3, #3
 80082f8:	e000      	b.n	80082fc <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 80082fa:	2300      	movs	r3, #0
}
 80082fc:	4618      	mov	r0, r3
 80082fe:	3718      	adds	r7, #24
 8008300:	46bd      	mov	sp, r7
 8008302:	bd80      	pop	{r7, pc}

08008304 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008304:	b580      	push	{r7, lr}
 8008306:	b082      	sub	sp, #8
 8008308:	af00      	add	r7, sp, #0
 800830a:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	2201      	movs	r2, #1
 8008310:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	2200      	movs	r2, #0
 8008318:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	2200      	movs	r2, #0
 8008320:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	2200      	movs	r2, #0
 8008326:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008330:	2b00      	cmp	r3, #0
 8008332:	d009      	beq.n	8008348 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800833a:	685b      	ldr	r3, [r3, #4]
 800833c:	687a      	ldr	r2, [r7, #4]
 800833e:	6852      	ldr	r2, [r2, #4]
 8008340:	b2d2      	uxtb	r2, r2
 8008342:	4611      	mov	r1, r2
 8008344:	6878      	ldr	r0, [r7, #4]
 8008346:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008348:	2340      	movs	r3, #64	; 0x40
 800834a:	2200      	movs	r2, #0
 800834c:	2100      	movs	r1, #0
 800834e:	6878      	ldr	r0, [r7, #4]
 8008350:	f001 fa2d 	bl	80097ae <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	2201      	movs	r2, #1
 8008358:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	2240      	movs	r2, #64	; 0x40
 8008360:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008364:	2340      	movs	r3, #64	; 0x40
 8008366:	2200      	movs	r2, #0
 8008368:	2180      	movs	r1, #128	; 0x80
 800836a:	6878      	ldr	r0, [r7, #4]
 800836c:	f001 fa1f 	bl	80097ae <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	2201      	movs	r2, #1
 8008374:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	2240      	movs	r2, #64	; 0x40
 800837a:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800837c:	2300      	movs	r3, #0
}
 800837e:	4618      	mov	r0, r3
 8008380:	3708      	adds	r7, #8
 8008382:	46bd      	mov	sp, r7
 8008384:	bd80      	pop	{r7, pc}

08008386 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008386:	b480      	push	{r7}
 8008388:	b083      	sub	sp, #12
 800838a:	af00      	add	r7, sp, #0
 800838c:	6078      	str	r0, [r7, #4]
 800838e:	460b      	mov	r3, r1
 8008390:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	78fa      	ldrb	r2, [r7, #3]
 8008396:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008398:	2300      	movs	r3, #0
}
 800839a:	4618      	mov	r0, r3
 800839c:	370c      	adds	r7, #12
 800839e:	46bd      	mov	sp, r7
 80083a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a4:	4770      	bx	lr

080083a6 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80083a6:	b480      	push	{r7}
 80083a8:	b083      	sub	sp, #12
 80083aa:	af00      	add	r7, sp, #0
 80083ac:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	2204      	movs	r2, #4
 80083be:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80083c2:	2300      	movs	r3, #0
}
 80083c4:	4618      	mov	r0, r3
 80083c6:	370c      	adds	r7, #12
 80083c8:	46bd      	mov	sp, r7
 80083ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ce:	4770      	bx	lr

080083d0 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80083d0:	b480      	push	{r7}
 80083d2:	b083      	sub	sp, #12
 80083d4:	af00      	add	r7, sp, #0
 80083d6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80083de:	2b04      	cmp	r3, #4
 80083e0:	d105      	bne.n	80083ee <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80083ee:	2300      	movs	r3, #0
}
 80083f0:	4618      	mov	r0, r3
 80083f2:	370c      	adds	r7, #12
 80083f4:	46bd      	mov	sp, r7
 80083f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083fa:	4770      	bx	lr

080083fc <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80083fc:	b580      	push	{r7, lr}
 80083fe:	b082      	sub	sp, #8
 8008400:	af00      	add	r7, sp, #0
 8008402:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800840a:	2b03      	cmp	r3, #3
 800840c:	d10b      	bne.n	8008426 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008414:	69db      	ldr	r3, [r3, #28]
 8008416:	2b00      	cmp	r3, #0
 8008418:	d005      	beq.n	8008426 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008420:	69db      	ldr	r3, [r3, #28]
 8008422:	6878      	ldr	r0, [r7, #4]
 8008424:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008426:	2300      	movs	r3, #0
}
 8008428:	4618      	mov	r0, r3
 800842a:	3708      	adds	r7, #8
 800842c:	46bd      	mov	sp, r7
 800842e:	bd80      	pop	{r7, pc}

08008430 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008430:	b480      	push	{r7}
 8008432:	b087      	sub	sp, #28
 8008434:	af00      	add	r7, sp, #0
 8008436:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800843c:	697b      	ldr	r3, [r7, #20]
 800843e:	781b      	ldrb	r3, [r3, #0]
 8008440:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008442:	697b      	ldr	r3, [r7, #20]
 8008444:	3301      	adds	r3, #1
 8008446:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008448:	697b      	ldr	r3, [r7, #20]
 800844a:	781b      	ldrb	r3, [r3, #0]
 800844c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800844e:	8a3b      	ldrh	r3, [r7, #16]
 8008450:	021b      	lsls	r3, r3, #8
 8008452:	b21a      	sxth	r2, r3
 8008454:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008458:	4313      	orrs	r3, r2
 800845a:	b21b      	sxth	r3, r3
 800845c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800845e:	89fb      	ldrh	r3, [r7, #14]
}
 8008460:	4618      	mov	r0, r3
 8008462:	371c      	adds	r7, #28
 8008464:	46bd      	mov	sp, r7
 8008466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800846a:	4770      	bx	lr

0800846c <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800846c:	b580      	push	{r7, lr}
 800846e:	b084      	sub	sp, #16
 8008470:	af00      	add	r7, sp, #0
 8008472:	6078      	str	r0, [r7, #4]
 8008474:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008476:	2300      	movs	r3, #0
 8008478:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800847a:	683b      	ldr	r3, [r7, #0]
 800847c:	781b      	ldrb	r3, [r3, #0]
 800847e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008482:	2b20      	cmp	r3, #32
 8008484:	d004      	beq.n	8008490 <USBD_StdDevReq+0x24>
 8008486:	2b40      	cmp	r3, #64	; 0x40
 8008488:	d002      	beq.n	8008490 <USBD_StdDevReq+0x24>
 800848a:	2b00      	cmp	r3, #0
 800848c:	d00a      	beq.n	80084a4 <USBD_StdDevReq+0x38>
 800848e:	e050      	b.n	8008532 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008496:	689b      	ldr	r3, [r3, #8]
 8008498:	6839      	ldr	r1, [r7, #0]
 800849a:	6878      	ldr	r0, [r7, #4]
 800849c:	4798      	blx	r3
 800849e:	4603      	mov	r3, r0
 80084a0:	73fb      	strb	r3, [r7, #15]
    break;
 80084a2:	e04b      	b.n	800853c <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80084a4:	683b      	ldr	r3, [r7, #0]
 80084a6:	785b      	ldrb	r3, [r3, #1]
 80084a8:	2b09      	cmp	r3, #9
 80084aa:	d83c      	bhi.n	8008526 <USBD_StdDevReq+0xba>
 80084ac:	a201      	add	r2, pc, #4	; (adr r2, 80084b4 <USBD_StdDevReq+0x48>)
 80084ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084b2:	bf00      	nop
 80084b4:	08008509 	.word	0x08008509
 80084b8:	0800851d 	.word	0x0800851d
 80084bc:	08008527 	.word	0x08008527
 80084c0:	08008513 	.word	0x08008513
 80084c4:	08008527 	.word	0x08008527
 80084c8:	080084e7 	.word	0x080084e7
 80084cc:	080084dd 	.word	0x080084dd
 80084d0:	08008527 	.word	0x08008527
 80084d4:	080084ff 	.word	0x080084ff
 80084d8:	080084f1 	.word	0x080084f1
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 80084dc:	6839      	ldr	r1, [r7, #0]
 80084de:	6878      	ldr	r0, [r7, #4]
 80084e0:	f000 f9d0 	bl	8008884 <USBD_GetDescriptor>
      break;
 80084e4:	e024      	b.n	8008530 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 80084e6:	6839      	ldr	r1, [r7, #0]
 80084e8:	6878      	ldr	r0, [r7, #4]
 80084ea:	f000 fb5f 	bl	8008bac <USBD_SetAddress>
      break;
 80084ee:	e01f      	b.n	8008530 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 80084f0:	6839      	ldr	r1, [r7, #0]
 80084f2:	6878      	ldr	r0, [r7, #4]
 80084f4:	f000 fb9c 	bl	8008c30 <USBD_SetConfig>
 80084f8:	4603      	mov	r3, r0
 80084fa:	73fb      	strb	r3, [r7, #15]
      break;
 80084fc:	e018      	b.n	8008530 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 80084fe:	6839      	ldr	r1, [r7, #0]
 8008500:	6878      	ldr	r0, [r7, #4]
 8008502:	f000 fc39 	bl	8008d78 <USBD_GetConfig>
      break;
 8008506:	e013      	b.n	8008530 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 8008508:	6839      	ldr	r1, [r7, #0]
 800850a:	6878      	ldr	r0, [r7, #4]
 800850c:	f000 fc68 	bl	8008de0 <USBD_GetStatus>
      break;
 8008510:	e00e      	b.n	8008530 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 8008512:	6839      	ldr	r1, [r7, #0]
 8008514:	6878      	ldr	r0, [r7, #4]
 8008516:	f000 fc96 	bl	8008e46 <USBD_SetFeature>
      break;
 800851a:	e009      	b.n	8008530 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 800851c:	6839      	ldr	r1, [r7, #0]
 800851e:	6878      	ldr	r0, [r7, #4]
 8008520:	f000 fca5 	bl	8008e6e <USBD_ClrFeature>
      break;
 8008524:	e004      	b.n	8008530 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 8008526:	6839      	ldr	r1, [r7, #0]
 8008528:	6878      	ldr	r0, [r7, #4]
 800852a:	f000 fcfb 	bl	8008f24 <USBD_CtlError>
      break;
 800852e:	bf00      	nop
    }
    break;
 8008530:	e004      	b.n	800853c <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 8008532:	6839      	ldr	r1, [r7, #0]
 8008534:	6878      	ldr	r0, [r7, #4]
 8008536:	f000 fcf5 	bl	8008f24 <USBD_CtlError>
    break;
 800853a:	bf00      	nop
  }

  return ret;
 800853c:	7bfb      	ldrb	r3, [r7, #15]
}
 800853e:	4618      	mov	r0, r3
 8008540:	3710      	adds	r7, #16
 8008542:	46bd      	mov	sp, r7
 8008544:	bd80      	pop	{r7, pc}
 8008546:	bf00      	nop

08008548 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008548:	b580      	push	{r7, lr}
 800854a:	b084      	sub	sp, #16
 800854c:	af00      	add	r7, sp, #0
 800854e:	6078      	str	r0, [r7, #4]
 8008550:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008552:	2300      	movs	r3, #0
 8008554:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008556:	683b      	ldr	r3, [r7, #0]
 8008558:	781b      	ldrb	r3, [r3, #0]
 800855a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800855e:	2b20      	cmp	r3, #32
 8008560:	d003      	beq.n	800856a <USBD_StdItfReq+0x22>
 8008562:	2b40      	cmp	r3, #64	; 0x40
 8008564:	d001      	beq.n	800856a <USBD_StdItfReq+0x22>
 8008566:	2b00      	cmp	r3, #0
 8008568:	d12a      	bne.n	80085c0 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008570:	3b01      	subs	r3, #1
 8008572:	2b02      	cmp	r3, #2
 8008574:	d81d      	bhi.n	80085b2 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008576:	683b      	ldr	r3, [r7, #0]
 8008578:	889b      	ldrh	r3, [r3, #4]
 800857a:	b2db      	uxtb	r3, r3
 800857c:	2b01      	cmp	r3, #1
 800857e:	d813      	bhi.n	80085a8 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008586:	689b      	ldr	r3, [r3, #8]
 8008588:	6839      	ldr	r1, [r7, #0]
 800858a:	6878      	ldr	r0, [r7, #4]
 800858c:	4798      	blx	r3
 800858e:	4603      	mov	r3, r0
 8008590:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8008592:	683b      	ldr	r3, [r7, #0]
 8008594:	88db      	ldrh	r3, [r3, #6]
 8008596:	2b00      	cmp	r3, #0
 8008598:	d110      	bne.n	80085bc <USBD_StdItfReq+0x74>
 800859a:	7bfb      	ldrb	r3, [r7, #15]
 800859c:	2b00      	cmp	r3, #0
 800859e:	d10d      	bne.n	80085bc <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 80085a0:	6878      	ldr	r0, [r7, #4]
 80085a2:	f000 fd8a 	bl	80090ba <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 80085a6:	e009      	b.n	80085bc <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 80085a8:	6839      	ldr	r1, [r7, #0]
 80085aa:	6878      	ldr	r0, [r7, #4]
 80085ac:	f000 fcba 	bl	8008f24 <USBD_CtlError>
      break;
 80085b0:	e004      	b.n	80085bc <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 80085b2:	6839      	ldr	r1, [r7, #0]
 80085b4:	6878      	ldr	r0, [r7, #4]
 80085b6:	f000 fcb5 	bl	8008f24 <USBD_CtlError>
      break;
 80085ba:	e000      	b.n	80085be <USBD_StdItfReq+0x76>
      break;
 80085bc:	bf00      	nop
    }
    break;
 80085be:	e004      	b.n	80085ca <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 80085c0:	6839      	ldr	r1, [r7, #0]
 80085c2:	6878      	ldr	r0, [r7, #4]
 80085c4:	f000 fcae 	bl	8008f24 <USBD_CtlError>
    break;
 80085c8:	bf00      	nop
  }

  return ret;
 80085ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80085cc:	4618      	mov	r0, r3
 80085ce:	3710      	adds	r7, #16
 80085d0:	46bd      	mov	sp, r7
 80085d2:	bd80      	pop	{r7, pc}

080085d4 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80085d4:	b580      	push	{r7, lr}
 80085d6:	b084      	sub	sp, #16
 80085d8:	af00      	add	r7, sp, #0
 80085da:	6078      	str	r0, [r7, #4]
 80085dc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80085de:	2300      	movs	r3, #0
 80085e0:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80085e2:	683b      	ldr	r3, [r7, #0]
 80085e4:	889b      	ldrh	r3, [r3, #4]
 80085e6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80085e8:	683b      	ldr	r3, [r7, #0]
 80085ea:	781b      	ldrb	r3, [r3, #0]
 80085ec:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80085f0:	2b20      	cmp	r3, #32
 80085f2:	d004      	beq.n	80085fe <USBD_StdEPReq+0x2a>
 80085f4:	2b40      	cmp	r3, #64	; 0x40
 80085f6:	d002      	beq.n	80085fe <USBD_StdEPReq+0x2a>
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d00a      	beq.n	8008612 <USBD_StdEPReq+0x3e>
 80085fc:	e137      	b.n	800886e <USBD_StdEPReq+0x29a>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008604:	689b      	ldr	r3, [r3, #8]
 8008606:	6839      	ldr	r1, [r7, #0]
 8008608:	6878      	ldr	r0, [r7, #4]
 800860a:	4798      	blx	r3
 800860c:	4603      	mov	r3, r0
 800860e:	73fb      	strb	r3, [r7, #15]
    break;
 8008610:	e132      	b.n	8008878 <USBD_StdEPReq+0x2a4>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8008612:	683b      	ldr	r3, [r7, #0]
 8008614:	785b      	ldrb	r3, [r3, #1]
 8008616:	2b01      	cmp	r3, #1
 8008618:	d03e      	beq.n	8008698 <USBD_StdEPReq+0xc4>
 800861a:	2b03      	cmp	r3, #3
 800861c:	d002      	beq.n	8008624 <USBD_StdEPReq+0x50>
 800861e:	2b00      	cmp	r3, #0
 8008620:	d079      	beq.n	8008716 <USBD_StdEPReq+0x142>
 8008622:	e11e      	b.n	8008862 <USBD_StdEPReq+0x28e>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800862a:	2b02      	cmp	r3, #2
 800862c:	d002      	beq.n	8008634 <USBD_StdEPReq+0x60>
 800862e:	2b03      	cmp	r3, #3
 8008630:	d015      	beq.n	800865e <USBD_StdEPReq+0x8a>
 8008632:	e02b      	b.n	800868c <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008634:	7bbb      	ldrb	r3, [r7, #14]
 8008636:	2b00      	cmp	r3, #0
 8008638:	d00c      	beq.n	8008654 <USBD_StdEPReq+0x80>
 800863a:	7bbb      	ldrb	r3, [r7, #14]
 800863c:	2b80      	cmp	r3, #128	; 0x80
 800863e:	d009      	beq.n	8008654 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8008640:	7bbb      	ldrb	r3, [r7, #14]
 8008642:	4619      	mov	r1, r3
 8008644:	6878      	ldr	r0, [r7, #4]
 8008646:	f001 f8f7 	bl	8009838 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800864a:	2180      	movs	r1, #128	; 0x80
 800864c:	6878      	ldr	r0, [r7, #4]
 800864e:	f001 f8f3 	bl	8009838 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8008652:	e020      	b.n	8008696 <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 8008654:	6839      	ldr	r1, [r7, #0]
 8008656:	6878      	ldr	r0, [r7, #4]
 8008658:	f000 fc64 	bl	8008f24 <USBD_CtlError>
        break;
 800865c:	e01b      	b.n	8008696 <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800865e:	683b      	ldr	r3, [r7, #0]
 8008660:	885b      	ldrh	r3, [r3, #2]
 8008662:	2b00      	cmp	r3, #0
 8008664:	d10e      	bne.n	8008684 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008666:	7bbb      	ldrb	r3, [r7, #14]
 8008668:	2b00      	cmp	r3, #0
 800866a:	d00b      	beq.n	8008684 <USBD_StdEPReq+0xb0>
 800866c:	7bbb      	ldrb	r3, [r7, #14]
 800866e:	2b80      	cmp	r3, #128	; 0x80
 8008670:	d008      	beq.n	8008684 <USBD_StdEPReq+0xb0>
 8008672:	683b      	ldr	r3, [r7, #0]
 8008674:	88db      	ldrh	r3, [r3, #6]
 8008676:	2b00      	cmp	r3, #0
 8008678:	d104      	bne.n	8008684 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 800867a:	7bbb      	ldrb	r3, [r7, #14]
 800867c:	4619      	mov	r1, r3
 800867e:	6878      	ldr	r0, [r7, #4]
 8008680:	f001 f8da 	bl	8009838 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 8008684:	6878      	ldr	r0, [r7, #4]
 8008686:	f000 fd18 	bl	80090ba <USBD_CtlSendStatus>

        break;
 800868a:	e004      	b.n	8008696 <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 800868c:	6839      	ldr	r1, [r7, #0]
 800868e:	6878      	ldr	r0, [r7, #4]
 8008690:	f000 fc48 	bl	8008f24 <USBD_CtlError>
        break;
 8008694:	bf00      	nop
      }
      break;
 8008696:	e0e9      	b.n	800886c <USBD_StdEPReq+0x298>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800869e:	2b02      	cmp	r3, #2
 80086a0:	d002      	beq.n	80086a8 <USBD_StdEPReq+0xd4>
 80086a2:	2b03      	cmp	r3, #3
 80086a4:	d015      	beq.n	80086d2 <USBD_StdEPReq+0xfe>
 80086a6:	e02f      	b.n	8008708 <USBD_StdEPReq+0x134>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80086a8:	7bbb      	ldrb	r3, [r7, #14]
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d00c      	beq.n	80086c8 <USBD_StdEPReq+0xf4>
 80086ae:	7bbb      	ldrb	r3, [r7, #14]
 80086b0:	2b80      	cmp	r3, #128	; 0x80
 80086b2:	d009      	beq.n	80086c8 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 80086b4:	7bbb      	ldrb	r3, [r7, #14]
 80086b6:	4619      	mov	r1, r3
 80086b8:	6878      	ldr	r0, [r7, #4]
 80086ba:	f001 f8bd 	bl	8009838 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80086be:	2180      	movs	r1, #128	; 0x80
 80086c0:	6878      	ldr	r0, [r7, #4]
 80086c2:	f001 f8b9 	bl	8009838 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80086c6:	e025      	b.n	8008714 <USBD_StdEPReq+0x140>
          USBD_CtlError(pdev, req);
 80086c8:	6839      	ldr	r1, [r7, #0]
 80086ca:	6878      	ldr	r0, [r7, #4]
 80086cc:	f000 fc2a 	bl	8008f24 <USBD_CtlError>
        break;
 80086d0:	e020      	b.n	8008714 <USBD_StdEPReq+0x140>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80086d2:	683b      	ldr	r3, [r7, #0]
 80086d4:	885b      	ldrh	r3, [r3, #2]
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d11b      	bne.n	8008712 <USBD_StdEPReq+0x13e>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 80086da:	7bbb      	ldrb	r3, [r7, #14]
 80086dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d004      	beq.n	80086ee <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80086e4:	7bbb      	ldrb	r3, [r7, #14]
 80086e6:	4619      	mov	r1, r3
 80086e8:	6878      	ldr	r0, [r7, #4]
 80086ea:	f001 f8c4 	bl	8009876 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 80086ee:	6878      	ldr	r0, [r7, #4]
 80086f0:	f000 fce3 	bl	80090ba <USBD_CtlSendStatus>
          ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80086fa:	689b      	ldr	r3, [r3, #8]
 80086fc:	6839      	ldr	r1, [r7, #0]
 80086fe:	6878      	ldr	r0, [r7, #4]
 8008700:	4798      	blx	r3
 8008702:	4603      	mov	r3, r0
 8008704:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008706:	e004      	b.n	8008712 <USBD_StdEPReq+0x13e>

      default:
        USBD_CtlError(pdev, req);
 8008708:	6839      	ldr	r1, [r7, #0]
 800870a:	6878      	ldr	r0, [r7, #4]
 800870c:	f000 fc0a 	bl	8008f24 <USBD_CtlError>
        break;
 8008710:	e000      	b.n	8008714 <USBD_StdEPReq+0x140>
        break;
 8008712:	bf00      	nop
      }
      break;
 8008714:	e0aa      	b.n	800886c <USBD_StdEPReq+0x298>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800871c:	2b02      	cmp	r3, #2
 800871e:	d002      	beq.n	8008726 <USBD_StdEPReq+0x152>
 8008720:	2b03      	cmp	r3, #3
 8008722:	d032      	beq.n	800878a <USBD_StdEPReq+0x1b6>
 8008724:	e097      	b.n	8008856 <USBD_StdEPReq+0x282>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008726:	7bbb      	ldrb	r3, [r7, #14]
 8008728:	2b00      	cmp	r3, #0
 800872a:	d007      	beq.n	800873c <USBD_StdEPReq+0x168>
 800872c:	7bbb      	ldrb	r3, [r7, #14]
 800872e:	2b80      	cmp	r3, #128	; 0x80
 8008730:	d004      	beq.n	800873c <USBD_StdEPReq+0x168>
        {
          USBD_CtlError(pdev, req);
 8008732:	6839      	ldr	r1, [r7, #0]
 8008734:	6878      	ldr	r0, [r7, #4]
 8008736:	f000 fbf5 	bl	8008f24 <USBD_CtlError>
          break;
 800873a:	e091      	b.n	8008860 <USBD_StdEPReq+0x28c>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800873c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008740:	2b00      	cmp	r3, #0
 8008742:	da0b      	bge.n	800875c <USBD_StdEPReq+0x188>
 8008744:	7bbb      	ldrb	r3, [r7, #14]
 8008746:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800874a:	4613      	mov	r3, r2
 800874c:	009b      	lsls	r3, r3, #2
 800874e:	4413      	add	r3, r2
 8008750:	009b      	lsls	r3, r3, #2
 8008752:	3310      	adds	r3, #16
 8008754:	687a      	ldr	r2, [r7, #4]
 8008756:	4413      	add	r3, r2
 8008758:	3304      	adds	r3, #4
 800875a:	e00b      	b.n	8008774 <USBD_StdEPReq+0x1a0>
              &pdev->ep_out[ep_addr & 0x7FU];
 800875c:	7bbb      	ldrb	r3, [r7, #14]
 800875e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008762:	4613      	mov	r3, r2
 8008764:	009b      	lsls	r3, r3, #2
 8008766:	4413      	add	r3, r2
 8008768:	009b      	lsls	r3, r3, #2
 800876a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800876e:	687a      	ldr	r2, [r7, #4]
 8008770:	4413      	add	r3, r2
 8008772:	3304      	adds	r3, #4
 8008774:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 8008776:	68bb      	ldr	r3, [r7, #8]
 8008778:	2200      	movs	r2, #0
 800877a:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800877c:	68bb      	ldr	r3, [r7, #8]
 800877e:	2202      	movs	r2, #2
 8008780:	4619      	mov	r1, r3
 8008782:	6878      	ldr	r0, [r7, #4]
 8008784:	f000 fc3f 	bl	8009006 <USBD_CtlSendData>
        break;
 8008788:	e06a      	b.n	8008860 <USBD_StdEPReq+0x28c>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 800878a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800878e:	2b00      	cmp	r3, #0
 8008790:	da11      	bge.n	80087b6 <USBD_StdEPReq+0x1e2>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008792:	7bbb      	ldrb	r3, [r7, #14]
 8008794:	f003 020f 	and.w	r2, r3, #15
 8008798:	6879      	ldr	r1, [r7, #4]
 800879a:	4613      	mov	r3, r2
 800879c:	009b      	lsls	r3, r3, #2
 800879e:	4413      	add	r3, r2
 80087a0:	009b      	lsls	r3, r3, #2
 80087a2:	440b      	add	r3, r1
 80087a4:	3324      	adds	r3, #36	; 0x24
 80087a6:	881b      	ldrh	r3, [r3, #0]
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d117      	bne.n	80087dc <USBD_StdEPReq+0x208>
          {
            USBD_CtlError(pdev, req);
 80087ac:	6839      	ldr	r1, [r7, #0]
 80087ae:	6878      	ldr	r0, [r7, #4]
 80087b0:	f000 fbb8 	bl	8008f24 <USBD_CtlError>
            break;
 80087b4:	e054      	b.n	8008860 <USBD_StdEPReq+0x28c>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80087b6:	7bbb      	ldrb	r3, [r7, #14]
 80087b8:	f003 020f 	and.w	r2, r3, #15
 80087bc:	6879      	ldr	r1, [r7, #4]
 80087be:	4613      	mov	r3, r2
 80087c0:	009b      	lsls	r3, r3, #2
 80087c2:	4413      	add	r3, r2
 80087c4:	009b      	lsls	r3, r3, #2
 80087c6:	440b      	add	r3, r1
 80087c8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80087cc:	881b      	ldrh	r3, [r3, #0]
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d104      	bne.n	80087dc <USBD_StdEPReq+0x208>
          {
            USBD_CtlError(pdev, req);
 80087d2:	6839      	ldr	r1, [r7, #0]
 80087d4:	6878      	ldr	r0, [r7, #4]
 80087d6:	f000 fba5 	bl	8008f24 <USBD_CtlError>
            break;
 80087da:	e041      	b.n	8008860 <USBD_StdEPReq+0x28c>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80087dc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	da0b      	bge.n	80087fc <USBD_StdEPReq+0x228>
 80087e4:	7bbb      	ldrb	r3, [r7, #14]
 80087e6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80087ea:	4613      	mov	r3, r2
 80087ec:	009b      	lsls	r3, r3, #2
 80087ee:	4413      	add	r3, r2
 80087f0:	009b      	lsls	r3, r3, #2
 80087f2:	3310      	adds	r3, #16
 80087f4:	687a      	ldr	r2, [r7, #4]
 80087f6:	4413      	add	r3, r2
 80087f8:	3304      	adds	r3, #4
 80087fa:	e00b      	b.n	8008814 <USBD_StdEPReq+0x240>
              &pdev->ep_out[ep_addr & 0x7FU];
 80087fc:	7bbb      	ldrb	r3, [r7, #14]
 80087fe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008802:	4613      	mov	r3, r2
 8008804:	009b      	lsls	r3, r3, #2
 8008806:	4413      	add	r3, r2
 8008808:	009b      	lsls	r3, r3, #2
 800880a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800880e:	687a      	ldr	r2, [r7, #4]
 8008810:	4413      	add	r3, r2
 8008812:	3304      	adds	r3, #4
 8008814:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008816:	7bbb      	ldrb	r3, [r7, #14]
 8008818:	2b00      	cmp	r3, #0
 800881a:	d002      	beq.n	8008822 <USBD_StdEPReq+0x24e>
 800881c:	7bbb      	ldrb	r3, [r7, #14]
 800881e:	2b80      	cmp	r3, #128	; 0x80
 8008820:	d103      	bne.n	800882a <USBD_StdEPReq+0x256>
          {
            pep->status = 0x0000U;
 8008822:	68bb      	ldr	r3, [r7, #8]
 8008824:	2200      	movs	r2, #0
 8008826:	601a      	str	r2, [r3, #0]
 8008828:	e00e      	b.n	8008848 <USBD_StdEPReq+0x274>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800882a:	7bbb      	ldrb	r3, [r7, #14]
 800882c:	4619      	mov	r1, r3
 800882e:	6878      	ldr	r0, [r7, #4]
 8008830:	f001 f840 	bl	80098b4 <USBD_LL_IsStallEP>
 8008834:	4603      	mov	r3, r0
 8008836:	2b00      	cmp	r3, #0
 8008838:	d003      	beq.n	8008842 <USBD_StdEPReq+0x26e>
          {
            pep->status = 0x0001U;
 800883a:	68bb      	ldr	r3, [r7, #8]
 800883c:	2201      	movs	r2, #1
 800883e:	601a      	str	r2, [r3, #0]
 8008840:	e002      	b.n	8008848 <USBD_StdEPReq+0x274>
          }
          else
          {
            pep->status = 0x0000U;
 8008842:	68bb      	ldr	r3, [r7, #8]
 8008844:	2200      	movs	r2, #0
 8008846:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008848:	68bb      	ldr	r3, [r7, #8]
 800884a:	2202      	movs	r2, #2
 800884c:	4619      	mov	r1, r3
 800884e:	6878      	ldr	r0, [r7, #4]
 8008850:	f000 fbd9 	bl	8009006 <USBD_CtlSendData>
          break;
 8008854:	e004      	b.n	8008860 <USBD_StdEPReq+0x28c>

      default:
        USBD_CtlError(pdev, req);
 8008856:	6839      	ldr	r1, [r7, #0]
 8008858:	6878      	ldr	r0, [r7, #4]
 800885a:	f000 fb63 	bl	8008f24 <USBD_CtlError>
        break;
 800885e:	bf00      	nop
      }
      break;
 8008860:	e004      	b.n	800886c <USBD_StdEPReq+0x298>

    default:
      USBD_CtlError(pdev, req);
 8008862:	6839      	ldr	r1, [r7, #0]
 8008864:	6878      	ldr	r0, [r7, #4]
 8008866:	f000 fb5d 	bl	8008f24 <USBD_CtlError>
      break;
 800886a:	bf00      	nop
    }
    break;
 800886c:	e004      	b.n	8008878 <USBD_StdEPReq+0x2a4>

  default:
    USBD_CtlError(pdev, req);
 800886e:	6839      	ldr	r1, [r7, #0]
 8008870:	6878      	ldr	r0, [r7, #4]
 8008872:	f000 fb57 	bl	8008f24 <USBD_CtlError>
    break;
 8008876:	bf00      	nop
  }

  return ret;
 8008878:	7bfb      	ldrb	r3, [r7, #15]
}
 800887a:	4618      	mov	r0, r3
 800887c:	3710      	adds	r7, #16
 800887e:	46bd      	mov	sp, r7
 8008880:	bd80      	pop	{r7, pc}
	...

08008884 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008884:	b580      	push	{r7, lr}
 8008886:	b084      	sub	sp, #16
 8008888:	af00      	add	r7, sp, #0
 800888a:	6078      	str	r0, [r7, #4]
 800888c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800888e:	2300      	movs	r3, #0
 8008890:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008892:	2300      	movs	r3, #0
 8008894:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008896:	2300      	movs	r3, #0
 8008898:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800889a:	683b      	ldr	r3, [r7, #0]
 800889c:	885b      	ldrh	r3, [r3, #2]
 800889e:	0a1b      	lsrs	r3, r3, #8
 80088a0:	b29b      	uxth	r3, r3
 80088a2:	3b01      	subs	r3, #1
 80088a4:	2b0e      	cmp	r3, #14
 80088a6:	f200 8152 	bhi.w	8008b4e <USBD_GetDescriptor+0x2ca>
 80088aa:	a201      	add	r2, pc, #4	; (adr r2, 80088b0 <USBD_GetDescriptor+0x2c>)
 80088ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088b0:	08008921 	.word	0x08008921
 80088b4:	08008939 	.word	0x08008939
 80088b8:	08008979 	.word	0x08008979
 80088bc:	08008b4f 	.word	0x08008b4f
 80088c0:	08008b4f 	.word	0x08008b4f
 80088c4:	08008aef 	.word	0x08008aef
 80088c8:	08008b1b 	.word	0x08008b1b
 80088cc:	08008b4f 	.word	0x08008b4f
 80088d0:	08008b4f 	.word	0x08008b4f
 80088d4:	08008b4f 	.word	0x08008b4f
 80088d8:	08008b4f 	.word	0x08008b4f
 80088dc:	08008b4f 	.word	0x08008b4f
 80088e0:	08008b4f 	.word	0x08008b4f
 80088e4:	08008b4f 	.word	0x08008b4f
 80088e8:	080088ed 	.word	0x080088ed
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
  case USB_DESC_TYPE_BOS:
    if (pdev->pDesc->GetBOSDescriptor != NULL)
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80088f2:	69db      	ldr	r3, [r3, #28]
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d00b      	beq.n	8008910 <USBD_GetDescriptor+0x8c>
    {
      pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80088fe:	69db      	ldr	r3, [r3, #28]
 8008900:	687a      	ldr	r2, [r7, #4]
 8008902:	7c12      	ldrb	r2, [r2, #16]
 8008904:	f107 0108 	add.w	r1, r7, #8
 8008908:	4610      	mov	r0, r2
 800890a:	4798      	blx	r3
 800890c:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800890e:	e126      	b.n	8008b5e <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 8008910:	6839      	ldr	r1, [r7, #0]
 8008912:	6878      	ldr	r0, [r7, #4]
 8008914:	f000 fb06 	bl	8008f24 <USBD_CtlError>
      err++;
 8008918:	7afb      	ldrb	r3, [r7, #11]
 800891a:	3301      	adds	r3, #1
 800891c:	72fb      	strb	r3, [r7, #11]
    break;
 800891e:	e11e      	b.n	8008b5e <USBD_GetDescriptor+0x2da>
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	687a      	ldr	r2, [r7, #4]
 800892a:	7c12      	ldrb	r2, [r2, #16]
 800892c:	f107 0108 	add.w	r1, r7, #8
 8008930:	4610      	mov	r0, r2
 8008932:	4798      	blx	r3
 8008934:	60f8      	str	r0, [r7, #12]
    break;
 8008936:	e112      	b.n	8008b5e <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	7c1b      	ldrb	r3, [r3, #16]
 800893c:	2b00      	cmp	r3, #0
 800893e:	d10d      	bne.n	800895c <USBD_GetDescriptor+0xd8>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008946:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008948:	f107 0208 	add.w	r2, r7, #8
 800894c:	4610      	mov	r0, r2
 800894e:	4798      	blx	r3
 8008950:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	3301      	adds	r3, #1
 8008956:	2202      	movs	r2, #2
 8008958:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800895a:	e100      	b.n	8008b5e <USBD_GetDescriptor+0x2da>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008964:	f107 0208 	add.w	r2, r7, #8
 8008968:	4610      	mov	r0, r2
 800896a:	4798      	blx	r3
 800896c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	3301      	adds	r3, #1
 8008972:	2202      	movs	r2, #2
 8008974:	701a      	strb	r2, [r3, #0]
    break;
 8008976:	e0f2      	b.n	8008b5e <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8008978:	683b      	ldr	r3, [r7, #0]
 800897a:	885b      	ldrh	r3, [r3, #2]
 800897c:	b2db      	uxtb	r3, r3
 800897e:	2b05      	cmp	r3, #5
 8008980:	f200 80ac 	bhi.w	8008adc <USBD_GetDescriptor+0x258>
 8008984:	a201      	add	r2, pc, #4	; (adr r2, 800898c <USBD_GetDescriptor+0x108>)
 8008986:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800898a:	bf00      	nop
 800898c:	080089a5 	.word	0x080089a5
 8008990:	080089d9 	.word	0x080089d9
 8008994:	08008a0d 	.word	0x08008a0d
 8008998:	08008a41 	.word	0x08008a41
 800899c:	08008a75 	.word	0x08008a75
 80089a0:	08008aa9 	.word	0x08008aa9
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089aa:	685b      	ldr	r3, [r3, #4]
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d00b      	beq.n	80089c8 <USBD_GetDescriptor+0x144>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089b6:	685b      	ldr	r3, [r3, #4]
 80089b8:	687a      	ldr	r2, [r7, #4]
 80089ba:	7c12      	ldrb	r2, [r2, #16]
 80089bc:	f107 0108 	add.w	r1, r7, #8
 80089c0:	4610      	mov	r0, r2
 80089c2:	4798      	blx	r3
 80089c4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80089c6:	e091      	b.n	8008aec <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 80089c8:	6839      	ldr	r1, [r7, #0]
 80089ca:	6878      	ldr	r0, [r7, #4]
 80089cc:	f000 faaa 	bl	8008f24 <USBD_CtlError>
        err++;
 80089d0:	7afb      	ldrb	r3, [r7, #11]
 80089d2:	3301      	adds	r3, #1
 80089d4:	72fb      	strb	r3, [r7, #11]
      break;
 80089d6:	e089      	b.n	8008aec <USBD_GetDescriptor+0x268>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089de:	689b      	ldr	r3, [r3, #8]
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d00b      	beq.n	80089fc <USBD_GetDescriptor+0x178>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089ea:	689b      	ldr	r3, [r3, #8]
 80089ec:	687a      	ldr	r2, [r7, #4]
 80089ee:	7c12      	ldrb	r2, [r2, #16]
 80089f0:	f107 0108 	add.w	r1, r7, #8
 80089f4:	4610      	mov	r0, r2
 80089f6:	4798      	blx	r3
 80089f8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80089fa:	e077      	b.n	8008aec <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 80089fc:	6839      	ldr	r1, [r7, #0]
 80089fe:	6878      	ldr	r0, [r7, #4]
 8008a00:	f000 fa90 	bl	8008f24 <USBD_CtlError>
        err++;
 8008a04:	7afb      	ldrb	r3, [r7, #11]
 8008a06:	3301      	adds	r3, #1
 8008a08:	72fb      	strb	r3, [r7, #11]
      break;
 8008a0a:	e06f      	b.n	8008aec <USBD_GetDescriptor+0x268>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a12:	68db      	ldr	r3, [r3, #12]
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d00b      	beq.n	8008a30 <USBD_GetDescriptor+0x1ac>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a1e:	68db      	ldr	r3, [r3, #12]
 8008a20:	687a      	ldr	r2, [r7, #4]
 8008a22:	7c12      	ldrb	r2, [r2, #16]
 8008a24:	f107 0108 	add.w	r1, r7, #8
 8008a28:	4610      	mov	r0, r2
 8008a2a:	4798      	blx	r3
 8008a2c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008a2e:	e05d      	b.n	8008aec <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8008a30:	6839      	ldr	r1, [r7, #0]
 8008a32:	6878      	ldr	r0, [r7, #4]
 8008a34:	f000 fa76 	bl	8008f24 <USBD_CtlError>
        err++;
 8008a38:	7afb      	ldrb	r3, [r7, #11]
 8008a3a:	3301      	adds	r3, #1
 8008a3c:	72fb      	strb	r3, [r7, #11]
      break;
 8008a3e:	e055      	b.n	8008aec <USBD_GetDescriptor+0x268>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a46:	691b      	ldr	r3, [r3, #16]
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d00b      	beq.n	8008a64 <USBD_GetDescriptor+0x1e0>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a52:	691b      	ldr	r3, [r3, #16]
 8008a54:	687a      	ldr	r2, [r7, #4]
 8008a56:	7c12      	ldrb	r2, [r2, #16]
 8008a58:	f107 0108 	add.w	r1, r7, #8
 8008a5c:	4610      	mov	r0, r2
 8008a5e:	4798      	blx	r3
 8008a60:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008a62:	e043      	b.n	8008aec <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8008a64:	6839      	ldr	r1, [r7, #0]
 8008a66:	6878      	ldr	r0, [r7, #4]
 8008a68:	f000 fa5c 	bl	8008f24 <USBD_CtlError>
        err++;
 8008a6c:	7afb      	ldrb	r3, [r7, #11]
 8008a6e:	3301      	adds	r3, #1
 8008a70:	72fb      	strb	r3, [r7, #11]
      break;
 8008a72:	e03b      	b.n	8008aec <USBD_GetDescriptor+0x268>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a7a:	695b      	ldr	r3, [r3, #20]
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d00b      	beq.n	8008a98 <USBD_GetDescriptor+0x214>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a86:	695b      	ldr	r3, [r3, #20]
 8008a88:	687a      	ldr	r2, [r7, #4]
 8008a8a:	7c12      	ldrb	r2, [r2, #16]
 8008a8c:	f107 0108 	add.w	r1, r7, #8
 8008a90:	4610      	mov	r0, r2
 8008a92:	4798      	blx	r3
 8008a94:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008a96:	e029      	b.n	8008aec <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8008a98:	6839      	ldr	r1, [r7, #0]
 8008a9a:	6878      	ldr	r0, [r7, #4]
 8008a9c:	f000 fa42 	bl	8008f24 <USBD_CtlError>
        err++;
 8008aa0:	7afb      	ldrb	r3, [r7, #11]
 8008aa2:	3301      	adds	r3, #1
 8008aa4:	72fb      	strb	r3, [r7, #11]
      break;
 8008aa6:	e021      	b.n	8008aec <USBD_GetDescriptor+0x268>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008aae:	699b      	ldr	r3, [r3, #24]
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d00b      	beq.n	8008acc <USBD_GetDescriptor+0x248>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008aba:	699b      	ldr	r3, [r3, #24]
 8008abc:	687a      	ldr	r2, [r7, #4]
 8008abe:	7c12      	ldrb	r2, [r2, #16]
 8008ac0:	f107 0108 	add.w	r1, r7, #8
 8008ac4:	4610      	mov	r0, r2
 8008ac6:	4798      	blx	r3
 8008ac8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008aca:	e00f      	b.n	8008aec <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8008acc:	6839      	ldr	r1, [r7, #0]
 8008ace:	6878      	ldr	r0, [r7, #4]
 8008ad0:	f000 fa28 	bl	8008f24 <USBD_CtlError>
        err++;
 8008ad4:	7afb      	ldrb	r3, [r7, #11]
 8008ad6:	3301      	adds	r3, #1
 8008ad8:	72fb      	strb	r3, [r7, #11]
      break;
 8008ada:	e007      	b.n	8008aec <USBD_GetDescriptor+0x268>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8008adc:	6839      	ldr	r1, [r7, #0]
 8008ade:	6878      	ldr	r0, [r7, #4]
 8008ae0:	f000 fa20 	bl	8008f24 <USBD_CtlError>
      err++;
 8008ae4:	7afb      	ldrb	r3, [r7, #11]
 8008ae6:	3301      	adds	r3, #1
 8008ae8:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 8008aea:	bf00      	nop
    }
    break;
 8008aec:	e037      	b.n	8008b5e <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	7c1b      	ldrb	r3, [r3, #16]
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d109      	bne.n	8008b0a <USBD_GetDescriptor+0x286>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008afc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008afe:	f107 0208 	add.w	r2, r7, #8
 8008b02:	4610      	mov	r0, r2
 8008b04:	4798      	blx	r3
 8008b06:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8008b08:	e029      	b.n	8008b5e <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 8008b0a:	6839      	ldr	r1, [r7, #0]
 8008b0c:	6878      	ldr	r0, [r7, #4]
 8008b0e:	f000 fa09 	bl	8008f24 <USBD_CtlError>
      err++;
 8008b12:	7afb      	ldrb	r3, [r7, #11]
 8008b14:	3301      	adds	r3, #1
 8008b16:	72fb      	strb	r3, [r7, #11]
    break;
 8008b18:	e021      	b.n	8008b5e <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	7c1b      	ldrb	r3, [r3, #16]
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d10d      	bne.n	8008b3e <USBD_GetDescriptor+0x2ba>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b2a:	f107 0208 	add.w	r2, r7, #8
 8008b2e:	4610      	mov	r0, r2
 8008b30:	4798      	blx	r3
 8008b32:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	3301      	adds	r3, #1
 8008b38:	2207      	movs	r2, #7
 8008b3a:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8008b3c:	e00f      	b.n	8008b5e <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 8008b3e:	6839      	ldr	r1, [r7, #0]
 8008b40:	6878      	ldr	r0, [r7, #4]
 8008b42:	f000 f9ef 	bl	8008f24 <USBD_CtlError>
      err++;
 8008b46:	7afb      	ldrb	r3, [r7, #11]
 8008b48:	3301      	adds	r3, #1
 8008b4a:	72fb      	strb	r3, [r7, #11]
    break;
 8008b4c:	e007      	b.n	8008b5e <USBD_GetDescriptor+0x2da>

  default:
    USBD_CtlError(pdev, req);
 8008b4e:	6839      	ldr	r1, [r7, #0]
 8008b50:	6878      	ldr	r0, [r7, #4]
 8008b52:	f000 f9e7 	bl	8008f24 <USBD_CtlError>
    err++;
 8008b56:	7afb      	ldrb	r3, [r7, #11]
 8008b58:	3301      	adds	r3, #1
 8008b5a:	72fb      	strb	r3, [r7, #11]
    break;
 8008b5c:	bf00      	nop
  }

  if (err != 0U)
 8008b5e:	7afb      	ldrb	r3, [r7, #11]
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d11e      	bne.n	8008ba2 <USBD_GetDescriptor+0x31e>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8008b64:	683b      	ldr	r3, [r7, #0]
 8008b66:	88db      	ldrh	r3, [r3, #6]
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d016      	beq.n	8008b9a <USBD_GetDescriptor+0x316>
    {
      if (len != 0U)
 8008b6c:	893b      	ldrh	r3, [r7, #8]
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d00e      	beq.n	8008b90 <USBD_GetDescriptor+0x30c>
      {
        len = MIN(len, req->wLength);
 8008b72:	683b      	ldr	r3, [r7, #0]
 8008b74:	88da      	ldrh	r2, [r3, #6]
 8008b76:	893b      	ldrh	r3, [r7, #8]
 8008b78:	4293      	cmp	r3, r2
 8008b7a:	bf28      	it	cs
 8008b7c:	4613      	movcs	r3, r2
 8008b7e:	b29b      	uxth	r3, r3
 8008b80:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8008b82:	893b      	ldrh	r3, [r7, #8]
 8008b84:	461a      	mov	r2, r3
 8008b86:	68f9      	ldr	r1, [r7, #12]
 8008b88:	6878      	ldr	r0, [r7, #4]
 8008b8a:	f000 fa3c 	bl	8009006 <USBD_CtlSendData>
 8008b8e:	e009      	b.n	8008ba4 <USBD_GetDescriptor+0x320>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8008b90:	6839      	ldr	r1, [r7, #0]
 8008b92:	6878      	ldr	r0, [r7, #4]
 8008b94:	f000 f9c6 	bl	8008f24 <USBD_CtlError>
 8008b98:	e004      	b.n	8008ba4 <USBD_GetDescriptor+0x320>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8008b9a:	6878      	ldr	r0, [r7, #4]
 8008b9c:	f000 fa8d 	bl	80090ba <USBD_CtlSendStatus>
 8008ba0:	e000      	b.n	8008ba4 <USBD_GetDescriptor+0x320>
    return;
 8008ba2:	bf00      	nop
    }
  }
}
 8008ba4:	3710      	adds	r7, #16
 8008ba6:	46bd      	mov	sp, r7
 8008ba8:	bd80      	pop	{r7, pc}
 8008baa:	bf00      	nop

08008bac <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008bac:	b580      	push	{r7, lr}
 8008bae:	b084      	sub	sp, #16
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	6078      	str	r0, [r7, #4]
 8008bb4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008bb6:	683b      	ldr	r3, [r7, #0]
 8008bb8:	889b      	ldrh	r3, [r3, #4]
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d130      	bne.n	8008c20 <USBD_SetAddress+0x74>
 8008bbe:	683b      	ldr	r3, [r7, #0]
 8008bc0:	88db      	ldrh	r3, [r3, #6]
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d12c      	bne.n	8008c20 <USBD_SetAddress+0x74>
 8008bc6:	683b      	ldr	r3, [r7, #0]
 8008bc8:	885b      	ldrh	r3, [r3, #2]
 8008bca:	2b7f      	cmp	r3, #127	; 0x7f
 8008bcc:	d828      	bhi.n	8008c20 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008bce:	683b      	ldr	r3, [r7, #0]
 8008bd0:	885b      	ldrh	r3, [r3, #2]
 8008bd2:	b2db      	uxtb	r3, r3
 8008bd4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008bd8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008be0:	2b03      	cmp	r3, #3
 8008be2:	d104      	bne.n	8008bee <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8008be4:	6839      	ldr	r1, [r7, #0]
 8008be6:	6878      	ldr	r0, [r7, #4]
 8008be8:	f000 f99c 	bl	8008f24 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008bec:	e01c      	b.n	8008c28 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	7bfa      	ldrb	r2, [r7, #15]
 8008bf2:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008bf6:	7bfb      	ldrb	r3, [r7, #15]
 8008bf8:	4619      	mov	r1, r3
 8008bfa:	6878      	ldr	r0, [r7, #4]
 8008bfc:	f000 fe87 	bl	800990e <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008c00:	6878      	ldr	r0, [r7, #4]
 8008c02:	f000 fa5a 	bl	80090ba <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008c06:	7bfb      	ldrb	r3, [r7, #15]
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d004      	beq.n	8008c16 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	2202      	movs	r2, #2
 8008c10:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c14:	e008      	b.n	8008c28 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	2201      	movs	r2, #1
 8008c1a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c1e:	e003      	b.n	8008c28 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008c20:	6839      	ldr	r1, [r7, #0]
 8008c22:	6878      	ldr	r0, [r7, #4]
 8008c24:	f000 f97e 	bl	8008f24 <USBD_CtlError>
  }
}
 8008c28:	bf00      	nop
 8008c2a:	3710      	adds	r7, #16
 8008c2c:	46bd      	mov	sp, r7
 8008c2e:	bd80      	pop	{r7, pc}

08008c30 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008c30:	b580      	push	{r7, lr}
 8008c32:	b084      	sub	sp, #16
 8008c34:	af00      	add	r7, sp, #0
 8008c36:	6078      	str	r0, [r7, #4]
 8008c38:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008c3a:	2300      	movs	r3, #0
 8008c3c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008c3e:	683b      	ldr	r3, [r7, #0]
 8008c40:	885b      	ldrh	r3, [r3, #2]
 8008c42:	b2da      	uxtb	r2, r3
 8008c44:	4b4b      	ldr	r3, [pc, #300]	; (8008d74 <USBD_SetConfig+0x144>)
 8008c46:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008c48:	4b4a      	ldr	r3, [pc, #296]	; (8008d74 <USBD_SetConfig+0x144>)
 8008c4a:	781b      	ldrb	r3, [r3, #0]
 8008c4c:	2b01      	cmp	r3, #1
 8008c4e:	d905      	bls.n	8008c5c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008c50:	6839      	ldr	r1, [r7, #0]
 8008c52:	6878      	ldr	r0, [r7, #4]
 8008c54:	f000 f966 	bl	8008f24 <USBD_CtlError>
    return USBD_FAIL;
 8008c58:	2303      	movs	r3, #3
 8008c5a:	e087      	b.n	8008d6c <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c62:	2b02      	cmp	r3, #2
 8008c64:	d002      	beq.n	8008c6c <USBD_SetConfig+0x3c>
 8008c66:	2b03      	cmp	r3, #3
 8008c68:	d025      	beq.n	8008cb6 <USBD_SetConfig+0x86>
 8008c6a:	e071      	b.n	8008d50 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8008c6c:	4b41      	ldr	r3, [pc, #260]	; (8008d74 <USBD_SetConfig+0x144>)
 8008c6e:	781b      	ldrb	r3, [r3, #0]
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d01c      	beq.n	8008cae <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8008c74:	4b3f      	ldr	r3, [pc, #252]	; (8008d74 <USBD_SetConfig+0x144>)
 8008c76:	781b      	ldrb	r3, [r3, #0]
 8008c78:	461a      	mov	r2, r3
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 8008c7e:	4b3d      	ldr	r3, [pc, #244]	; (8008d74 <USBD_SetConfig+0x144>)
 8008c80:	781b      	ldrb	r3, [r3, #0]
 8008c82:	4619      	mov	r1, r3
 8008c84:	6878      	ldr	r0, [r7, #4]
 8008c86:	f7ff f9bd 	bl	8008004 <USBD_SetClassConfig>
 8008c8a:	4603      	mov	r3, r0
 8008c8c:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 8008c8e:	7bfb      	ldrb	r3, [r7, #15]
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d004      	beq.n	8008c9e <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8008c94:	6839      	ldr	r1, [r7, #0]
 8008c96:	6878      	ldr	r0, [r7, #4]
 8008c98:	f000 f944 	bl	8008f24 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8008c9c:	e065      	b.n	8008d6a <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8008c9e:	6878      	ldr	r0, [r7, #4]
 8008ca0:	f000 fa0b 	bl	80090ba <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	2203      	movs	r2, #3
 8008ca8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8008cac:	e05d      	b.n	8008d6a <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8008cae:	6878      	ldr	r0, [r7, #4]
 8008cb0:	f000 fa03 	bl	80090ba <USBD_CtlSendStatus>
    break;
 8008cb4:	e059      	b.n	8008d6a <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 8008cb6:	4b2f      	ldr	r3, [pc, #188]	; (8008d74 <USBD_SetConfig+0x144>)
 8008cb8:	781b      	ldrb	r3, [r3, #0]
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d112      	bne.n	8008ce4 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	2202      	movs	r2, #2
 8008cc2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8008cc6:	4b2b      	ldr	r3, [pc, #172]	; (8008d74 <USBD_SetConfig+0x144>)
 8008cc8:	781b      	ldrb	r3, [r3, #0]
 8008cca:	461a      	mov	r2, r3
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008cd0:	4b28      	ldr	r3, [pc, #160]	; (8008d74 <USBD_SetConfig+0x144>)
 8008cd2:	781b      	ldrb	r3, [r3, #0]
 8008cd4:	4619      	mov	r1, r3
 8008cd6:	6878      	ldr	r0, [r7, #4]
 8008cd8:	f7ff f9b0 	bl	800803c <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8008cdc:	6878      	ldr	r0, [r7, #4]
 8008cde:	f000 f9ec 	bl	80090ba <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8008ce2:	e042      	b.n	8008d6a <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8008ce4:	4b23      	ldr	r3, [pc, #140]	; (8008d74 <USBD_SetConfig+0x144>)
 8008ce6:	781b      	ldrb	r3, [r3, #0]
 8008ce8:	461a      	mov	r2, r3
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	685b      	ldr	r3, [r3, #4]
 8008cee:	429a      	cmp	r2, r3
 8008cf0:	d02a      	beq.n	8008d48 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	685b      	ldr	r3, [r3, #4]
 8008cf6:	b2db      	uxtb	r3, r3
 8008cf8:	4619      	mov	r1, r3
 8008cfa:	6878      	ldr	r0, [r7, #4]
 8008cfc:	f7ff f99e 	bl	800803c <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8008d00:	4b1c      	ldr	r3, [pc, #112]	; (8008d74 <USBD_SetConfig+0x144>)
 8008d02:	781b      	ldrb	r3, [r3, #0]
 8008d04:	461a      	mov	r2, r3
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8008d0a:	4b1a      	ldr	r3, [pc, #104]	; (8008d74 <USBD_SetConfig+0x144>)
 8008d0c:	781b      	ldrb	r3, [r3, #0]
 8008d0e:	4619      	mov	r1, r3
 8008d10:	6878      	ldr	r0, [r7, #4]
 8008d12:	f7ff f977 	bl	8008004 <USBD_SetClassConfig>
 8008d16:	4603      	mov	r3, r0
 8008d18:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 8008d1a:	7bfb      	ldrb	r3, [r7, #15]
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d00f      	beq.n	8008d40 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8008d20:	6839      	ldr	r1, [r7, #0]
 8008d22:	6878      	ldr	r0, [r7, #4]
 8008d24:	f000 f8fe 	bl	8008f24 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	685b      	ldr	r3, [r3, #4]
 8008d2c:	b2db      	uxtb	r3, r3
 8008d2e:	4619      	mov	r1, r3
 8008d30:	6878      	ldr	r0, [r7, #4]
 8008d32:	f7ff f983 	bl	800803c <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	2202      	movs	r2, #2
 8008d3a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8008d3e:	e014      	b.n	8008d6a <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8008d40:	6878      	ldr	r0, [r7, #4]
 8008d42:	f000 f9ba 	bl	80090ba <USBD_CtlSendStatus>
    break;
 8008d46:	e010      	b.n	8008d6a <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8008d48:	6878      	ldr	r0, [r7, #4]
 8008d4a:	f000 f9b6 	bl	80090ba <USBD_CtlSendStatus>
    break;
 8008d4e:	e00c      	b.n	8008d6a <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8008d50:	6839      	ldr	r1, [r7, #0]
 8008d52:	6878      	ldr	r0, [r7, #4]
 8008d54:	f000 f8e6 	bl	8008f24 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008d58:	4b06      	ldr	r3, [pc, #24]	; (8008d74 <USBD_SetConfig+0x144>)
 8008d5a:	781b      	ldrb	r3, [r3, #0]
 8008d5c:	4619      	mov	r1, r3
 8008d5e:	6878      	ldr	r0, [r7, #4]
 8008d60:	f7ff f96c 	bl	800803c <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8008d64:	2303      	movs	r3, #3
 8008d66:	73fb      	strb	r3, [r7, #15]
    break;
 8008d68:	bf00      	nop
  }

  return ret;
 8008d6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d6c:	4618      	mov	r0, r3
 8008d6e:	3710      	adds	r7, #16
 8008d70:	46bd      	mov	sp, r7
 8008d72:	bd80      	pop	{r7, pc}
 8008d74:	200001ad 	.word	0x200001ad

08008d78 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d78:	b580      	push	{r7, lr}
 8008d7a:	b082      	sub	sp, #8
 8008d7c:	af00      	add	r7, sp, #0
 8008d7e:	6078      	str	r0, [r7, #4]
 8008d80:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008d82:	683b      	ldr	r3, [r7, #0]
 8008d84:	88db      	ldrh	r3, [r3, #6]
 8008d86:	2b01      	cmp	r3, #1
 8008d88:	d004      	beq.n	8008d94 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008d8a:	6839      	ldr	r1, [r7, #0]
 8008d8c:	6878      	ldr	r0, [r7, #4]
 8008d8e:	f000 f8c9 	bl	8008f24 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 8008d92:	e021      	b.n	8008dd8 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d9a:	2b01      	cmp	r3, #1
 8008d9c:	db17      	blt.n	8008dce <USBD_GetConfig+0x56>
 8008d9e:	2b02      	cmp	r3, #2
 8008da0:	dd02      	ble.n	8008da8 <USBD_GetConfig+0x30>
 8008da2:	2b03      	cmp	r3, #3
 8008da4:	d00b      	beq.n	8008dbe <USBD_GetConfig+0x46>
 8008da6:	e012      	b.n	8008dce <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	2200      	movs	r2, #0
 8008dac:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	3308      	adds	r3, #8
 8008db2:	2201      	movs	r2, #1
 8008db4:	4619      	mov	r1, r3
 8008db6:	6878      	ldr	r0, [r7, #4]
 8008db8:	f000 f925 	bl	8009006 <USBD_CtlSendData>
      break;
 8008dbc:	e00c      	b.n	8008dd8 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	3304      	adds	r3, #4
 8008dc2:	2201      	movs	r2, #1
 8008dc4:	4619      	mov	r1, r3
 8008dc6:	6878      	ldr	r0, [r7, #4]
 8008dc8:	f000 f91d 	bl	8009006 <USBD_CtlSendData>
      break;
 8008dcc:	e004      	b.n	8008dd8 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 8008dce:	6839      	ldr	r1, [r7, #0]
 8008dd0:	6878      	ldr	r0, [r7, #4]
 8008dd2:	f000 f8a7 	bl	8008f24 <USBD_CtlError>
      break;
 8008dd6:	bf00      	nop
}
 8008dd8:	bf00      	nop
 8008dda:	3708      	adds	r7, #8
 8008ddc:	46bd      	mov	sp, r7
 8008dde:	bd80      	pop	{r7, pc}

08008de0 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008de0:	b580      	push	{r7, lr}
 8008de2:	b082      	sub	sp, #8
 8008de4:	af00      	add	r7, sp, #0
 8008de6:	6078      	str	r0, [r7, #4]
 8008de8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008df0:	3b01      	subs	r3, #1
 8008df2:	2b02      	cmp	r3, #2
 8008df4:	d81e      	bhi.n	8008e34 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 8008df6:	683b      	ldr	r3, [r7, #0]
 8008df8:	88db      	ldrh	r3, [r3, #6]
 8008dfa:	2b02      	cmp	r3, #2
 8008dfc:	d004      	beq.n	8008e08 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8008dfe:	6839      	ldr	r1, [r7, #0]
 8008e00:	6878      	ldr	r0, [r7, #4]
 8008e02:	f000 f88f 	bl	8008f24 <USBD_CtlError>
      break;
 8008e06:	e01a      	b.n	8008e3e <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	2201      	movs	r2, #1
 8008e0c:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d005      	beq.n	8008e24 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	68db      	ldr	r3, [r3, #12]
 8008e1c:	f043 0202 	orr.w	r2, r3, #2
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	330c      	adds	r3, #12
 8008e28:	2202      	movs	r2, #2
 8008e2a:	4619      	mov	r1, r3
 8008e2c:	6878      	ldr	r0, [r7, #4]
 8008e2e:	f000 f8ea 	bl	8009006 <USBD_CtlSendData>
    break;
 8008e32:	e004      	b.n	8008e3e <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 8008e34:	6839      	ldr	r1, [r7, #0]
 8008e36:	6878      	ldr	r0, [r7, #4]
 8008e38:	f000 f874 	bl	8008f24 <USBD_CtlError>
    break;
 8008e3c:	bf00      	nop
  }
}
 8008e3e:	bf00      	nop
 8008e40:	3708      	adds	r7, #8
 8008e42:	46bd      	mov	sp, r7
 8008e44:	bd80      	pop	{r7, pc}

08008e46 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e46:	b580      	push	{r7, lr}
 8008e48:	b082      	sub	sp, #8
 8008e4a:	af00      	add	r7, sp, #0
 8008e4c:	6078      	str	r0, [r7, #4]
 8008e4e:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008e50:	683b      	ldr	r3, [r7, #0]
 8008e52:	885b      	ldrh	r3, [r3, #2]
 8008e54:	2b01      	cmp	r3, #1
 8008e56:	d106      	bne.n	8008e66 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	2201      	movs	r2, #1
 8008e5c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008e60:	6878      	ldr	r0, [r7, #4]
 8008e62:	f000 f92a 	bl	80090ba <USBD_CtlSendStatus>
  }
}
 8008e66:	bf00      	nop
 8008e68:	3708      	adds	r7, #8
 8008e6a:	46bd      	mov	sp, r7
 8008e6c:	bd80      	pop	{r7, pc}

08008e6e <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e6e:	b580      	push	{r7, lr}
 8008e70:	b082      	sub	sp, #8
 8008e72:	af00      	add	r7, sp, #0
 8008e74:	6078      	str	r0, [r7, #4]
 8008e76:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e7e:	3b01      	subs	r3, #1
 8008e80:	2b02      	cmp	r3, #2
 8008e82:	d80b      	bhi.n	8008e9c <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008e84:	683b      	ldr	r3, [r7, #0]
 8008e86:	885b      	ldrh	r3, [r3, #2]
 8008e88:	2b01      	cmp	r3, #1
 8008e8a:	d10c      	bne.n	8008ea6 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	2200      	movs	r2, #0
 8008e90:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008e94:	6878      	ldr	r0, [r7, #4]
 8008e96:	f000 f910 	bl	80090ba <USBD_CtlSendStatus>
      }
      break;
 8008e9a:	e004      	b.n	8008ea6 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8008e9c:	6839      	ldr	r1, [r7, #0]
 8008e9e:	6878      	ldr	r0, [r7, #4]
 8008ea0:	f000 f840 	bl	8008f24 <USBD_CtlError>
      break;
 8008ea4:	e000      	b.n	8008ea8 <USBD_ClrFeature+0x3a>
      break;
 8008ea6:	bf00      	nop
  }
}
 8008ea8:	bf00      	nop
 8008eaa:	3708      	adds	r7, #8
 8008eac:	46bd      	mov	sp, r7
 8008eae:	bd80      	pop	{r7, pc}

08008eb0 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008eb0:	b580      	push	{r7, lr}
 8008eb2:	b084      	sub	sp, #16
 8008eb4:	af00      	add	r7, sp, #0
 8008eb6:	6078      	str	r0, [r7, #4]
 8008eb8:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008eba:	683b      	ldr	r3, [r7, #0]
 8008ebc:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	781a      	ldrb	r2, [r3, #0]
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	3301      	adds	r3, #1
 8008eca:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	781a      	ldrb	r2, [r3, #0]
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	3301      	adds	r3, #1
 8008ed8:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008eda:	68f8      	ldr	r0, [r7, #12]
 8008edc:	f7ff faa8 	bl	8008430 <SWAPBYTE>
 8008ee0:	4603      	mov	r3, r0
 8008ee2:	461a      	mov	r2, r3
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	3301      	adds	r3, #1
 8008eec:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	3301      	adds	r3, #1
 8008ef2:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008ef4:	68f8      	ldr	r0, [r7, #12]
 8008ef6:	f7ff fa9b 	bl	8008430 <SWAPBYTE>
 8008efa:	4603      	mov	r3, r0
 8008efc:	461a      	mov	r2, r3
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	3301      	adds	r3, #1
 8008f06:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	3301      	adds	r3, #1
 8008f0c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008f0e:	68f8      	ldr	r0, [r7, #12]
 8008f10:	f7ff fa8e 	bl	8008430 <SWAPBYTE>
 8008f14:	4603      	mov	r3, r0
 8008f16:	461a      	mov	r2, r3
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	80da      	strh	r2, [r3, #6]
}
 8008f1c:	bf00      	nop
 8008f1e:	3710      	adds	r7, #16
 8008f20:	46bd      	mov	sp, r7
 8008f22:	bd80      	pop	{r7, pc}

08008f24 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008f24:	b580      	push	{r7, lr}
 8008f26:	b082      	sub	sp, #8
 8008f28:	af00      	add	r7, sp, #0
 8008f2a:	6078      	str	r0, [r7, #4]
 8008f2c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008f2e:	2180      	movs	r1, #128	; 0x80
 8008f30:	6878      	ldr	r0, [r7, #4]
 8008f32:	f000 fc81 	bl	8009838 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008f36:	2100      	movs	r1, #0
 8008f38:	6878      	ldr	r0, [r7, #4]
 8008f3a:	f000 fc7d 	bl	8009838 <USBD_LL_StallEP>
}
 8008f3e:	bf00      	nop
 8008f40:	3708      	adds	r7, #8
 8008f42:	46bd      	mov	sp, r7
 8008f44:	bd80      	pop	{r7, pc}

08008f46 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008f46:	b580      	push	{r7, lr}
 8008f48:	b086      	sub	sp, #24
 8008f4a:	af00      	add	r7, sp, #0
 8008f4c:	60f8      	str	r0, [r7, #12]
 8008f4e:	60b9      	str	r1, [r7, #8]
 8008f50:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008f52:	2300      	movs	r3, #0
 8008f54:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d036      	beq.n	8008fca <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008f60:	6938      	ldr	r0, [r7, #16]
 8008f62:	f000 f836 	bl	8008fd2 <USBD_GetLen>
 8008f66:	4603      	mov	r3, r0
 8008f68:	3301      	adds	r3, #1
 8008f6a:	b29b      	uxth	r3, r3
 8008f6c:	005b      	lsls	r3, r3, #1
 8008f6e:	b29a      	uxth	r2, r3
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008f74:	7dfb      	ldrb	r3, [r7, #23]
 8008f76:	68ba      	ldr	r2, [r7, #8]
 8008f78:	4413      	add	r3, r2
 8008f7a:	687a      	ldr	r2, [r7, #4]
 8008f7c:	7812      	ldrb	r2, [r2, #0]
 8008f7e:	701a      	strb	r2, [r3, #0]
  idx++;
 8008f80:	7dfb      	ldrb	r3, [r7, #23]
 8008f82:	3301      	adds	r3, #1
 8008f84:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008f86:	7dfb      	ldrb	r3, [r7, #23]
 8008f88:	68ba      	ldr	r2, [r7, #8]
 8008f8a:	4413      	add	r3, r2
 8008f8c:	2203      	movs	r2, #3
 8008f8e:	701a      	strb	r2, [r3, #0]
  idx++;
 8008f90:	7dfb      	ldrb	r3, [r7, #23]
 8008f92:	3301      	adds	r3, #1
 8008f94:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008f96:	e013      	b.n	8008fc0 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008f98:	7dfb      	ldrb	r3, [r7, #23]
 8008f9a:	68ba      	ldr	r2, [r7, #8]
 8008f9c:	4413      	add	r3, r2
 8008f9e:	693a      	ldr	r2, [r7, #16]
 8008fa0:	7812      	ldrb	r2, [r2, #0]
 8008fa2:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008fa4:	693b      	ldr	r3, [r7, #16]
 8008fa6:	3301      	adds	r3, #1
 8008fa8:	613b      	str	r3, [r7, #16]
    idx++;
 8008faa:	7dfb      	ldrb	r3, [r7, #23]
 8008fac:	3301      	adds	r3, #1
 8008fae:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008fb0:	7dfb      	ldrb	r3, [r7, #23]
 8008fb2:	68ba      	ldr	r2, [r7, #8]
 8008fb4:	4413      	add	r3, r2
 8008fb6:	2200      	movs	r2, #0
 8008fb8:	701a      	strb	r2, [r3, #0]
    idx++;
 8008fba:	7dfb      	ldrb	r3, [r7, #23]
 8008fbc:	3301      	adds	r3, #1
 8008fbe:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008fc0:	693b      	ldr	r3, [r7, #16]
 8008fc2:	781b      	ldrb	r3, [r3, #0]
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d1e7      	bne.n	8008f98 <USBD_GetString+0x52>
 8008fc8:	e000      	b.n	8008fcc <USBD_GetString+0x86>
    return;
 8008fca:	bf00      	nop
  }
}
 8008fcc:	3718      	adds	r7, #24
 8008fce:	46bd      	mov	sp, r7
 8008fd0:	bd80      	pop	{r7, pc}

08008fd2 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008fd2:	b480      	push	{r7}
 8008fd4:	b085      	sub	sp, #20
 8008fd6:	af00      	add	r7, sp, #0
 8008fd8:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008fda:	2300      	movs	r3, #0
 8008fdc:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008fe2:	e005      	b.n	8008ff0 <USBD_GetLen+0x1e>
  {
    len++;
 8008fe4:	7bfb      	ldrb	r3, [r7, #15]
 8008fe6:	3301      	adds	r3, #1
 8008fe8:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008fea:	68bb      	ldr	r3, [r7, #8]
 8008fec:	3301      	adds	r3, #1
 8008fee:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008ff0:	68bb      	ldr	r3, [r7, #8]
 8008ff2:	781b      	ldrb	r3, [r3, #0]
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d1f5      	bne.n	8008fe4 <USBD_GetLen+0x12>
  }

  return len;
 8008ff8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ffa:	4618      	mov	r0, r3
 8008ffc:	3714      	adds	r7, #20
 8008ffe:	46bd      	mov	sp, r7
 8009000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009004:	4770      	bx	lr

08009006 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009006:	b580      	push	{r7, lr}
 8009008:	b084      	sub	sp, #16
 800900a:	af00      	add	r7, sp, #0
 800900c:	60f8      	str	r0, [r7, #12]
 800900e:	60b9      	str	r1, [r7, #8]
 8009010:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	2202      	movs	r2, #2
 8009016:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	687a      	ldr	r2, [r7, #4]
 800901e:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	687a      	ldr	r2, [r7, #4]
 8009024:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	68ba      	ldr	r2, [r7, #8]
 800902a:	2100      	movs	r1, #0
 800902c:	68f8      	ldr	r0, [r7, #12]
 800902e:	f000 fc8d 	bl	800994c <USBD_LL_Transmit>

  return USBD_OK;
 8009032:	2300      	movs	r3, #0
}
 8009034:	4618      	mov	r0, r3
 8009036:	3710      	adds	r7, #16
 8009038:	46bd      	mov	sp, r7
 800903a:	bd80      	pop	{r7, pc}

0800903c <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800903c:	b580      	push	{r7, lr}
 800903e:	b084      	sub	sp, #16
 8009040:	af00      	add	r7, sp, #0
 8009042:	60f8      	str	r0, [r7, #12]
 8009044:	60b9      	str	r1, [r7, #8]
 8009046:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	68ba      	ldr	r2, [r7, #8]
 800904c:	2100      	movs	r1, #0
 800904e:	68f8      	ldr	r0, [r7, #12]
 8009050:	f000 fc7c 	bl	800994c <USBD_LL_Transmit>

  return USBD_OK;
 8009054:	2300      	movs	r3, #0
}
 8009056:	4618      	mov	r0, r3
 8009058:	3710      	adds	r7, #16
 800905a:	46bd      	mov	sp, r7
 800905c:	bd80      	pop	{r7, pc}

0800905e <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800905e:	b580      	push	{r7, lr}
 8009060:	b084      	sub	sp, #16
 8009062:	af00      	add	r7, sp, #0
 8009064:	60f8      	str	r0, [r7, #12]
 8009066:	60b9      	str	r1, [r7, #8]
 8009068:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	2203      	movs	r2, #3
 800906e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	687a      	ldr	r2, [r7, #4]
 8009076:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	687a      	ldr	r2, [r7, #4]
 800907e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	68ba      	ldr	r2, [r7, #8]
 8009086:	2100      	movs	r1, #0
 8009088:	68f8      	ldr	r0, [r7, #12]
 800908a:	f000 fc80 	bl	800998e <USBD_LL_PrepareReceive>

  return USBD_OK;
 800908e:	2300      	movs	r3, #0
}
 8009090:	4618      	mov	r0, r3
 8009092:	3710      	adds	r7, #16
 8009094:	46bd      	mov	sp, r7
 8009096:	bd80      	pop	{r7, pc}

08009098 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009098:	b580      	push	{r7, lr}
 800909a:	b084      	sub	sp, #16
 800909c:	af00      	add	r7, sp, #0
 800909e:	60f8      	str	r0, [r7, #12]
 80090a0:	60b9      	str	r1, [r7, #8]
 80090a2:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	68ba      	ldr	r2, [r7, #8]
 80090a8:	2100      	movs	r1, #0
 80090aa:	68f8      	ldr	r0, [r7, #12]
 80090ac:	f000 fc6f 	bl	800998e <USBD_LL_PrepareReceive>

  return USBD_OK;
 80090b0:	2300      	movs	r3, #0
}
 80090b2:	4618      	mov	r0, r3
 80090b4:	3710      	adds	r7, #16
 80090b6:	46bd      	mov	sp, r7
 80090b8:	bd80      	pop	{r7, pc}

080090ba <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80090ba:	b580      	push	{r7, lr}
 80090bc:	b082      	sub	sp, #8
 80090be:	af00      	add	r7, sp, #0
 80090c0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	2204      	movs	r2, #4
 80090c6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80090ca:	2300      	movs	r3, #0
 80090cc:	2200      	movs	r2, #0
 80090ce:	2100      	movs	r1, #0
 80090d0:	6878      	ldr	r0, [r7, #4]
 80090d2:	f000 fc3b 	bl	800994c <USBD_LL_Transmit>

  return USBD_OK;
 80090d6:	2300      	movs	r3, #0
}
 80090d8:	4618      	mov	r0, r3
 80090da:	3708      	adds	r7, #8
 80090dc:	46bd      	mov	sp, r7
 80090de:	bd80      	pop	{r7, pc}

080090e0 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80090e0:	b580      	push	{r7, lr}
 80090e2:	b082      	sub	sp, #8
 80090e4:	af00      	add	r7, sp, #0
 80090e6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	2205      	movs	r2, #5
 80090ec:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80090f0:	2300      	movs	r3, #0
 80090f2:	2200      	movs	r2, #0
 80090f4:	2100      	movs	r1, #0
 80090f6:	6878      	ldr	r0, [r7, #4]
 80090f8:	f000 fc49 	bl	800998e <USBD_LL_PrepareReceive>

  return USBD_OK;
 80090fc:	2300      	movs	r3, #0
}
 80090fe:	4618      	mov	r0, r3
 8009100:	3708      	adds	r7, #8
 8009102:	46bd      	mov	sp, r7
 8009104:	bd80      	pop	{r7, pc}
	...

08009108 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 8009108:	b580      	push	{r7, lr}
 800910a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 800910c:	2200      	movs	r2, #0
 800910e:	4912      	ldr	r1, [pc, #72]	; (8009158 <MX_USB_Device_Init+0x50>)
 8009110:	4812      	ldr	r0, [pc, #72]	; (800915c <MX_USB_Device_Init+0x54>)
 8009112:	f7fe ff09 	bl	8007f28 <USBD_Init>
 8009116:	4603      	mov	r3, r0
 8009118:	2b00      	cmp	r3, #0
 800911a:	d001      	beq.n	8009120 <MX_USB_Device_Init+0x18>
    Error_Handler();
 800911c:	f7f8 f9ae 	bl	800147c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 8009120:	490f      	ldr	r1, [pc, #60]	; (8009160 <MX_USB_Device_Init+0x58>)
 8009122:	480e      	ldr	r0, [pc, #56]	; (800915c <MX_USB_Device_Init+0x54>)
 8009124:	f7fe ff30 	bl	8007f88 <USBD_RegisterClass>
 8009128:	4603      	mov	r3, r0
 800912a:	2b00      	cmp	r3, #0
 800912c:	d001      	beq.n	8009132 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800912e:	f7f8 f9a5 	bl	800147c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 8009132:	490c      	ldr	r1, [pc, #48]	; (8009164 <MX_USB_Device_Init+0x5c>)
 8009134:	4809      	ldr	r0, [pc, #36]	; (800915c <MX_USB_Device_Init+0x54>)
 8009136:	f7fe fe5b 	bl	8007df0 <USBD_CDC_RegisterInterface>
 800913a:	4603      	mov	r3, r0
 800913c:	2b00      	cmp	r3, #0
 800913e:	d001      	beq.n	8009144 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 8009140:	f7f8 f99c 	bl	800147c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 8009144:	4805      	ldr	r0, [pc, #20]	; (800915c <MX_USB_Device_Init+0x54>)
 8009146:	f7fe ff46 	bl	8007fd6 <USBD_Start>
 800914a:	4603      	mov	r3, r0
 800914c:	2b00      	cmp	r3, #0
 800914e:	d001      	beq.n	8009154 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 8009150:	f7f8 f994 	bl	800147c <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 8009154:	bf00      	nop
 8009156:	bd80      	pop	{r7, pc}
 8009158:	20000130 	.word	0x20000130
 800915c:	20000634 	.word	0x20000634
 8009160:	20000018 	.word	0x20000018
 8009164:	2000011c 	.word	0x2000011c

08009168 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009168:	b580      	push	{r7, lr}
 800916a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800916c:	2200      	movs	r2, #0
 800916e:	4905      	ldr	r1, [pc, #20]	; (8009184 <CDC_Init_FS+0x1c>)
 8009170:	4805      	ldr	r0, [pc, #20]	; (8009188 <CDC_Init_FS+0x20>)
 8009172:	f7fe fe52 	bl	8007e1a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009176:	4905      	ldr	r1, [pc, #20]	; (800918c <CDC_Init_FS+0x24>)
 8009178:	4803      	ldr	r0, [pc, #12]	; (8009188 <CDC_Init_FS+0x20>)
 800917a:	f7fe fe67 	bl	8007e4c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800917e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009180:	4618      	mov	r0, r3
 8009182:	bd80      	pop	{r7, pc}
 8009184:	20000cec 	.word	0x20000cec
 8009188:	20000634 	.word	0x20000634
 800918c:	20000904 	.word	0x20000904

08009190 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009190:	b480      	push	{r7}
 8009192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009194:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009196:	4618      	mov	r0, r3
 8009198:	46bd      	mov	sp, r7
 800919a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800919e:	4770      	bx	lr

080091a0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80091a0:	b480      	push	{r7}
 80091a2:	b083      	sub	sp, #12
 80091a4:	af00      	add	r7, sp, #0
 80091a6:	4603      	mov	r3, r0
 80091a8:	6039      	str	r1, [r7, #0]
 80091aa:	71fb      	strb	r3, [r7, #7]
 80091ac:	4613      	mov	r3, r2
 80091ae:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80091b0:	79fb      	ldrb	r3, [r7, #7]
 80091b2:	2b23      	cmp	r3, #35	; 0x23
 80091b4:	d84a      	bhi.n	800924c <CDC_Control_FS+0xac>
 80091b6:	a201      	add	r2, pc, #4	; (adr r2, 80091bc <CDC_Control_FS+0x1c>)
 80091b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091bc:	0800924d 	.word	0x0800924d
 80091c0:	0800924d 	.word	0x0800924d
 80091c4:	0800924d 	.word	0x0800924d
 80091c8:	0800924d 	.word	0x0800924d
 80091cc:	0800924d 	.word	0x0800924d
 80091d0:	0800924d 	.word	0x0800924d
 80091d4:	0800924d 	.word	0x0800924d
 80091d8:	0800924d 	.word	0x0800924d
 80091dc:	0800924d 	.word	0x0800924d
 80091e0:	0800924d 	.word	0x0800924d
 80091e4:	0800924d 	.word	0x0800924d
 80091e8:	0800924d 	.word	0x0800924d
 80091ec:	0800924d 	.word	0x0800924d
 80091f0:	0800924d 	.word	0x0800924d
 80091f4:	0800924d 	.word	0x0800924d
 80091f8:	0800924d 	.word	0x0800924d
 80091fc:	0800924d 	.word	0x0800924d
 8009200:	0800924d 	.word	0x0800924d
 8009204:	0800924d 	.word	0x0800924d
 8009208:	0800924d 	.word	0x0800924d
 800920c:	0800924d 	.word	0x0800924d
 8009210:	0800924d 	.word	0x0800924d
 8009214:	0800924d 	.word	0x0800924d
 8009218:	0800924d 	.word	0x0800924d
 800921c:	0800924d 	.word	0x0800924d
 8009220:	0800924d 	.word	0x0800924d
 8009224:	0800924d 	.word	0x0800924d
 8009228:	0800924d 	.word	0x0800924d
 800922c:	0800924d 	.word	0x0800924d
 8009230:	0800924d 	.word	0x0800924d
 8009234:	0800924d 	.word	0x0800924d
 8009238:	0800924d 	.word	0x0800924d
 800923c:	0800924d 	.word	0x0800924d
 8009240:	0800924d 	.word	0x0800924d
 8009244:	0800924d 	.word	0x0800924d
 8009248:	0800924d 	.word	0x0800924d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800924c:	bf00      	nop
  }

  return (USBD_OK);
 800924e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009250:	4618      	mov	r0, r3
 8009252:	370c      	adds	r7, #12
 8009254:	46bd      	mov	sp, r7
 8009256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800925a:	4770      	bx	lr

0800925c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800925c:	b580      	push	{r7, lr}
 800925e:	b082      	sub	sp, #8
 8009260:	af00      	add	r7, sp, #0
 8009262:	6078      	str	r0, [r7, #4]
 8009264:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  CDC_On_Receive(Buf, Len); // (1)
 8009266:	6839      	ldr	r1, [r7, #0]
 8009268:	6878      	ldr	r0, [r7, #4]
 800926a:	f7f7 fbc3 	bl	80009f4 <CDC_On_Receive>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800926e:	6879      	ldr	r1, [r7, #4]
 8009270:	4805      	ldr	r0, [pc, #20]	; (8009288 <CDC_Receive_FS+0x2c>)
 8009272:	f7fe fdeb 	bl	8007e4c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009276:	4804      	ldr	r0, [pc, #16]	; (8009288 <CDC_Receive_FS+0x2c>)
 8009278:	f7fe fe2c 	bl	8007ed4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800927c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800927e:	4618      	mov	r0, r3
 8009280:	3708      	adds	r7, #8
 8009282:	46bd      	mov	sp, r7
 8009284:	bd80      	pop	{r7, pc}
 8009286:	bf00      	nop
 8009288:	20000634 	.word	0x20000634

0800928c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800928c:	b580      	push	{r7, lr}
 800928e:	b084      	sub	sp, #16
 8009290:	af00      	add	r7, sp, #0
 8009292:	6078      	str	r0, [r7, #4]
 8009294:	460b      	mov	r3, r1
 8009296:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8009298:	2300      	movs	r3, #0
 800929a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800929c:	4b0d      	ldr	r3, [pc, #52]	; (80092d4 <CDC_Transmit_FS+0x48>)
 800929e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80092a2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80092a4:	68bb      	ldr	r3, [r7, #8]
 80092a6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d001      	beq.n	80092b2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80092ae:	2301      	movs	r3, #1
 80092b0:	e00b      	b.n	80092ca <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80092b2:	887b      	ldrh	r3, [r7, #2]
 80092b4:	461a      	mov	r2, r3
 80092b6:	6879      	ldr	r1, [r7, #4]
 80092b8:	4806      	ldr	r0, [pc, #24]	; (80092d4 <CDC_Transmit_FS+0x48>)
 80092ba:	f7fe fdae 	bl	8007e1a <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80092be:	4805      	ldr	r0, [pc, #20]	; (80092d4 <CDC_Transmit_FS+0x48>)
 80092c0:	f7fe fdd8 	bl	8007e74 <USBD_CDC_TransmitPacket>
 80092c4:	4603      	mov	r3, r0
 80092c6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80092c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80092ca:	4618      	mov	r0, r3
 80092cc:	3710      	adds	r7, #16
 80092ce:	46bd      	mov	sp, r7
 80092d0:	bd80      	pop	{r7, pc}
 80092d2:	bf00      	nop
 80092d4:	20000634 	.word	0x20000634

080092d8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80092d8:	b480      	push	{r7}
 80092da:	b087      	sub	sp, #28
 80092dc:	af00      	add	r7, sp, #0
 80092de:	60f8      	str	r0, [r7, #12]
 80092e0:	60b9      	str	r1, [r7, #8]
 80092e2:	4613      	mov	r3, r2
 80092e4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80092e6:	2300      	movs	r3, #0
 80092e8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80092ea:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80092ee:	4618      	mov	r0, r3
 80092f0:	371c      	adds	r7, #28
 80092f2:	46bd      	mov	sp, r7
 80092f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f8:	4770      	bx	lr
	...

080092fc <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80092fc:	b480      	push	{r7}
 80092fe:	b083      	sub	sp, #12
 8009300:	af00      	add	r7, sp, #0
 8009302:	4603      	mov	r3, r0
 8009304:	6039      	str	r1, [r7, #0]
 8009306:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 8009308:	683b      	ldr	r3, [r7, #0]
 800930a:	2212      	movs	r2, #18
 800930c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800930e:	4b03      	ldr	r3, [pc, #12]	; (800931c <USBD_CDC_DeviceDescriptor+0x20>)
}
 8009310:	4618      	mov	r0, r3
 8009312:	370c      	adds	r7, #12
 8009314:	46bd      	mov	sp, r7
 8009316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800931a:	4770      	bx	lr
 800931c:	20000150 	.word	0x20000150

08009320 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009320:	b480      	push	{r7}
 8009322:	b083      	sub	sp, #12
 8009324:	af00      	add	r7, sp, #0
 8009326:	4603      	mov	r3, r0
 8009328:	6039      	str	r1, [r7, #0]
 800932a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800932c:	683b      	ldr	r3, [r7, #0]
 800932e:	2204      	movs	r2, #4
 8009330:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009332:	4b03      	ldr	r3, [pc, #12]	; (8009340 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 8009334:	4618      	mov	r0, r3
 8009336:	370c      	adds	r7, #12
 8009338:	46bd      	mov	sp, r7
 800933a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800933e:	4770      	bx	lr
 8009340:	20000164 	.word	0x20000164

08009344 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009344:	b580      	push	{r7, lr}
 8009346:	b082      	sub	sp, #8
 8009348:	af00      	add	r7, sp, #0
 800934a:	4603      	mov	r3, r0
 800934c:	6039      	str	r1, [r7, #0]
 800934e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009350:	79fb      	ldrb	r3, [r7, #7]
 8009352:	2b00      	cmp	r3, #0
 8009354:	d105      	bne.n	8009362 <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8009356:	683a      	ldr	r2, [r7, #0]
 8009358:	4907      	ldr	r1, [pc, #28]	; (8009378 <USBD_CDC_ProductStrDescriptor+0x34>)
 800935a:	4808      	ldr	r0, [pc, #32]	; (800937c <USBD_CDC_ProductStrDescriptor+0x38>)
 800935c:	f7ff fdf3 	bl	8008f46 <USBD_GetString>
 8009360:	e004      	b.n	800936c <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8009362:	683a      	ldr	r2, [r7, #0]
 8009364:	4904      	ldr	r1, [pc, #16]	; (8009378 <USBD_CDC_ProductStrDescriptor+0x34>)
 8009366:	4805      	ldr	r0, [pc, #20]	; (800937c <USBD_CDC_ProductStrDescriptor+0x38>)
 8009368:	f7ff fded 	bl	8008f46 <USBD_GetString>
  }
  return USBD_StrDesc;
 800936c:	4b02      	ldr	r3, [pc, #8]	; (8009378 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800936e:	4618      	mov	r0, r3
 8009370:	3708      	adds	r7, #8
 8009372:	46bd      	mov	sp, r7
 8009374:	bd80      	pop	{r7, pc}
 8009376:	bf00      	nop
 8009378:	200010d4 	.word	0x200010d4
 800937c:	08009b80 	.word	0x08009b80

08009380 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009380:	b580      	push	{r7, lr}
 8009382:	b082      	sub	sp, #8
 8009384:	af00      	add	r7, sp, #0
 8009386:	4603      	mov	r3, r0
 8009388:	6039      	str	r1, [r7, #0]
 800938a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800938c:	683a      	ldr	r2, [r7, #0]
 800938e:	4904      	ldr	r1, [pc, #16]	; (80093a0 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 8009390:	4804      	ldr	r0, [pc, #16]	; (80093a4 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 8009392:	f7ff fdd8 	bl	8008f46 <USBD_GetString>
  return USBD_StrDesc;
 8009396:	4b02      	ldr	r3, [pc, #8]	; (80093a0 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 8009398:	4618      	mov	r0, r3
 800939a:	3708      	adds	r7, #8
 800939c:	46bd      	mov	sp, r7
 800939e:	bd80      	pop	{r7, pc}
 80093a0:	200010d4 	.word	0x200010d4
 80093a4:	08009b98 	.word	0x08009b98

080093a8 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80093a8:	b580      	push	{r7, lr}
 80093aa:	b082      	sub	sp, #8
 80093ac:	af00      	add	r7, sp, #0
 80093ae:	4603      	mov	r3, r0
 80093b0:	6039      	str	r1, [r7, #0]
 80093b2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80093b4:	683b      	ldr	r3, [r7, #0]
 80093b6:	221a      	movs	r2, #26
 80093b8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80093ba:	f000 f843 	bl	8009444 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 80093be:	4b02      	ldr	r3, [pc, #8]	; (80093c8 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 80093c0:	4618      	mov	r0, r3
 80093c2:	3708      	adds	r7, #8
 80093c4:	46bd      	mov	sp, r7
 80093c6:	bd80      	pop	{r7, pc}
 80093c8:	20000168 	.word	0x20000168

080093cc <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80093cc:	b580      	push	{r7, lr}
 80093ce:	b082      	sub	sp, #8
 80093d0:	af00      	add	r7, sp, #0
 80093d2:	4603      	mov	r3, r0
 80093d4:	6039      	str	r1, [r7, #0]
 80093d6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80093d8:	79fb      	ldrb	r3, [r7, #7]
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d105      	bne.n	80093ea <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 80093de:	683a      	ldr	r2, [r7, #0]
 80093e0:	4907      	ldr	r1, [pc, #28]	; (8009400 <USBD_CDC_ConfigStrDescriptor+0x34>)
 80093e2:	4808      	ldr	r0, [pc, #32]	; (8009404 <USBD_CDC_ConfigStrDescriptor+0x38>)
 80093e4:	f7ff fdaf 	bl	8008f46 <USBD_GetString>
 80093e8:	e004      	b.n	80093f4 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 80093ea:	683a      	ldr	r2, [r7, #0]
 80093ec:	4904      	ldr	r1, [pc, #16]	; (8009400 <USBD_CDC_ConfigStrDescriptor+0x34>)
 80093ee:	4805      	ldr	r0, [pc, #20]	; (8009404 <USBD_CDC_ConfigStrDescriptor+0x38>)
 80093f0:	f7ff fda9 	bl	8008f46 <USBD_GetString>
  }
  return USBD_StrDesc;
 80093f4:	4b02      	ldr	r3, [pc, #8]	; (8009400 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 80093f6:	4618      	mov	r0, r3
 80093f8:	3708      	adds	r7, #8
 80093fa:	46bd      	mov	sp, r7
 80093fc:	bd80      	pop	{r7, pc}
 80093fe:	bf00      	nop
 8009400:	200010d4 	.word	0x200010d4
 8009404:	08009bac 	.word	0x08009bac

08009408 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009408:	b580      	push	{r7, lr}
 800940a:	b082      	sub	sp, #8
 800940c:	af00      	add	r7, sp, #0
 800940e:	4603      	mov	r3, r0
 8009410:	6039      	str	r1, [r7, #0]
 8009412:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009414:	79fb      	ldrb	r3, [r7, #7]
 8009416:	2b00      	cmp	r3, #0
 8009418:	d105      	bne.n	8009426 <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800941a:	683a      	ldr	r2, [r7, #0]
 800941c:	4907      	ldr	r1, [pc, #28]	; (800943c <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800941e:	4808      	ldr	r0, [pc, #32]	; (8009440 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8009420:	f7ff fd91 	bl	8008f46 <USBD_GetString>
 8009424:	e004      	b.n	8009430 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8009426:	683a      	ldr	r2, [r7, #0]
 8009428:	4904      	ldr	r1, [pc, #16]	; (800943c <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800942a:	4805      	ldr	r0, [pc, #20]	; (8009440 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800942c:	f7ff fd8b 	bl	8008f46 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009430:	4b02      	ldr	r3, [pc, #8]	; (800943c <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 8009432:	4618      	mov	r0, r3
 8009434:	3708      	adds	r7, #8
 8009436:	46bd      	mov	sp, r7
 8009438:	bd80      	pop	{r7, pc}
 800943a:	bf00      	nop
 800943c:	200010d4 	.word	0x200010d4
 8009440:	08009bb8 	.word	0x08009bb8

08009444 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009444:	b580      	push	{r7, lr}
 8009446:	b084      	sub	sp, #16
 8009448:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800944a:	4b0f      	ldr	r3, [pc, #60]	; (8009488 <Get_SerialNum+0x44>)
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009450:	4b0e      	ldr	r3, [pc, #56]	; (800948c <Get_SerialNum+0x48>)
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009456:	4b0e      	ldr	r3, [pc, #56]	; (8009490 <Get_SerialNum+0x4c>)
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800945c:	68fa      	ldr	r2, [r7, #12]
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	4413      	add	r3, r2
 8009462:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	2b00      	cmp	r3, #0
 8009468:	d009      	beq.n	800947e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800946a:	2208      	movs	r2, #8
 800946c:	4909      	ldr	r1, [pc, #36]	; (8009494 <Get_SerialNum+0x50>)
 800946e:	68f8      	ldr	r0, [r7, #12]
 8009470:	f000 f814 	bl	800949c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009474:	2204      	movs	r2, #4
 8009476:	4908      	ldr	r1, [pc, #32]	; (8009498 <Get_SerialNum+0x54>)
 8009478:	68b8      	ldr	r0, [r7, #8]
 800947a:	f000 f80f 	bl	800949c <IntToUnicode>
  }
}
 800947e:	bf00      	nop
 8009480:	3710      	adds	r7, #16
 8009482:	46bd      	mov	sp, r7
 8009484:	bd80      	pop	{r7, pc}
 8009486:	bf00      	nop
 8009488:	1fff7590 	.word	0x1fff7590
 800948c:	1fff7594 	.word	0x1fff7594
 8009490:	1fff7598 	.word	0x1fff7598
 8009494:	2000016a 	.word	0x2000016a
 8009498:	2000017a 	.word	0x2000017a

0800949c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800949c:	b480      	push	{r7}
 800949e:	b087      	sub	sp, #28
 80094a0:	af00      	add	r7, sp, #0
 80094a2:	60f8      	str	r0, [r7, #12]
 80094a4:	60b9      	str	r1, [r7, #8]
 80094a6:	4613      	mov	r3, r2
 80094a8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80094aa:	2300      	movs	r3, #0
 80094ac:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80094ae:	2300      	movs	r3, #0
 80094b0:	75fb      	strb	r3, [r7, #23]
 80094b2:	e027      	b.n	8009504 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	0f1b      	lsrs	r3, r3, #28
 80094b8:	2b09      	cmp	r3, #9
 80094ba:	d80b      	bhi.n	80094d4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	0f1b      	lsrs	r3, r3, #28
 80094c0:	b2da      	uxtb	r2, r3
 80094c2:	7dfb      	ldrb	r3, [r7, #23]
 80094c4:	005b      	lsls	r3, r3, #1
 80094c6:	4619      	mov	r1, r3
 80094c8:	68bb      	ldr	r3, [r7, #8]
 80094ca:	440b      	add	r3, r1
 80094cc:	3230      	adds	r2, #48	; 0x30
 80094ce:	b2d2      	uxtb	r2, r2
 80094d0:	701a      	strb	r2, [r3, #0]
 80094d2:	e00a      	b.n	80094ea <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	0f1b      	lsrs	r3, r3, #28
 80094d8:	b2da      	uxtb	r2, r3
 80094da:	7dfb      	ldrb	r3, [r7, #23]
 80094dc:	005b      	lsls	r3, r3, #1
 80094de:	4619      	mov	r1, r3
 80094e0:	68bb      	ldr	r3, [r7, #8]
 80094e2:	440b      	add	r3, r1
 80094e4:	3237      	adds	r2, #55	; 0x37
 80094e6:	b2d2      	uxtb	r2, r2
 80094e8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	011b      	lsls	r3, r3, #4
 80094ee:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80094f0:	7dfb      	ldrb	r3, [r7, #23]
 80094f2:	005b      	lsls	r3, r3, #1
 80094f4:	3301      	adds	r3, #1
 80094f6:	68ba      	ldr	r2, [r7, #8]
 80094f8:	4413      	add	r3, r2
 80094fa:	2200      	movs	r2, #0
 80094fc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80094fe:	7dfb      	ldrb	r3, [r7, #23]
 8009500:	3301      	adds	r3, #1
 8009502:	75fb      	strb	r3, [r7, #23]
 8009504:	7dfa      	ldrb	r2, [r7, #23]
 8009506:	79fb      	ldrb	r3, [r7, #7]
 8009508:	429a      	cmp	r2, r3
 800950a:	d3d3      	bcc.n	80094b4 <IntToUnicode+0x18>
  }
}
 800950c:	bf00      	nop
 800950e:	371c      	adds	r7, #28
 8009510:	46bd      	mov	sp, r7
 8009512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009516:	4770      	bx	lr

08009518 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACK == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACK */
{
 8009518:	b580      	push	{r7, lr}
 800951a:	b084      	sub	sp, #16
 800951c:	af00      	add	r7, sp, #0
 800951e:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	4a0d      	ldr	r2, [pc, #52]	; (800955c <HAL_PCD_MspInit+0x44>)
 8009526:	4293      	cmp	r3, r2
 8009528:	d113      	bne.n	8009552 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800952a:	4b0d      	ldr	r3, [pc, #52]	; (8009560 <HAL_PCD_MspInit+0x48>)
 800952c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800952e:	4a0c      	ldr	r2, [pc, #48]	; (8009560 <HAL_PCD_MspInit+0x48>)
 8009530:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009534:	6593      	str	r3, [r2, #88]	; 0x58
 8009536:	4b0a      	ldr	r3, [pc, #40]	; (8009560 <HAL_PCD_MspInit+0x48>)
 8009538:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800953a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800953e:	60fb      	str	r3, [r7, #12]
 8009540:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 8009542:	2200      	movs	r2, #0
 8009544:	2100      	movs	r1, #0
 8009546:	2014      	movs	r0, #20
 8009548:	f7f8 fb83 	bl	8001c52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800954c:	2014      	movs	r0, #20
 800954e:	f7f8 fb9a 	bl	8001c86 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8009552:	bf00      	nop
 8009554:	3710      	adds	r7, #16
 8009556:	46bd      	mov	sp, r7
 8009558:	bd80      	pop	{r7, pc}
 800955a:	bf00      	nop
 800955c:	40005c00 	.word	0x40005c00
 8009560:	40021000 	.word	0x40021000

08009564 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009564:	b580      	push	{r7, lr}
 8009566:	b082      	sub	sp, #8
 8009568:	af00      	add	r7, sp, #0
 800956a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	f8d3 22f0 	ldr.w	r2, [r3, #752]	; 0x2f0
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8009578:	4619      	mov	r1, r3
 800957a:	4610      	mov	r0, r2
 800957c:	f7fe fd76 	bl	800806c <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 8009580:	bf00      	nop
 8009582:	3708      	adds	r7, #8
 8009584:	46bd      	mov	sp, r7
 8009586:	bd80      	pop	{r7, pc}

08009588 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009588:	b580      	push	{r7, lr}
 800958a:	b082      	sub	sp, #8
 800958c:	af00      	add	r7, sp, #0
 800958e:	6078      	str	r0, [r7, #4]
 8009590:	460b      	mov	r3, r1
 8009592:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 800959a:	78fa      	ldrb	r2, [r7, #3]
 800959c:	6879      	ldr	r1, [r7, #4]
 800959e:	4613      	mov	r3, r2
 80095a0:	009b      	lsls	r3, r3, #2
 80095a2:	4413      	add	r3, r2
 80095a4:	00db      	lsls	r3, r3, #3
 80095a6:	440b      	add	r3, r1
 80095a8:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80095ac:	681a      	ldr	r2, [r3, #0]
 80095ae:	78fb      	ldrb	r3, [r7, #3]
 80095b0:	4619      	mov	r1, r3
 80095b2:	f7fe fdae 	bl	8008112 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 80095b6:	bf00      	nop
 80095b8:	3708      	adds	r7, #8
 80095ba:	46bd      	mov	sp, r7
 80095bc:	bd80      	pop	{r7, pc}

080095be <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80095be:	b580      	push	{r7, lr}
 80095c0:	b082      	sub	sp, #8
 80095c2:	af00      	add	r7, sp, #0
 80095c4:	6078      	str	r0, [r7, #4]
 80095c6:	460b      	mov	r3, r1
 80095c8:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 80095d0:	78fa      	ldrb	r2, [r7, #3]
 80095d2:	6879      	ldr	r1, [r7, #4]
 80095d4:	4613      	mov	r3, r2
 80095d6:	009b      	lsls	r3, r3, #2
 80095d8:	4413      	add	r3, r2
 80095da:	00db      	lsls	r3, r3, #3
 80095dc:	440b      	add	r3, r1
 80095de:	333c      	adds	r3, #60	; 0x3c
 80095e0:	681a      	ldr	r2, [r3, #0]
 80095e2:	78fb      	ldrb	r3, [r7, #3]
 80095e4:	4619      	mov	r1, r3
 80095e6:	f7fe fdf7 	bl	80081d8 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 80095ea:	bf00      	nop
 80095ec:	3708      	adds	r7, #8
 80095ee:	46bd      	mov	sp, r7
 80095f0:	bd80      	pop	{r7, pc}

080095f2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80095f2:	b580      	push	{r7, lr}
 80095f4:	b082      	sub	sp, #8
 80095f6:	af00      	add	r7, sp, #0
 80095f8:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009600:	4618      	mov	r0, r3
 8009602:	f7fe fefb 	bl	80083fc <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 8009606:	bf00      	nop
 8009608:	3708      	adds	r7, #8
 800960a:	46bd      	mov	sp, r7
 800960c:	bd80      	pop	{r7, pc}

0800960e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800960e:	b580      	push	{r7, lr}
 8009610:	b084      	sub	sp, #16
 8009612:	af00      	add	r7, sp, #0
 8009614:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009616:	2301      	movs	r3, #1
 8009618:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	689b      	ldr	r3, [r3, #8]
 800961e:	2b02      	cmp	r3, #2
 8009620:	d001      	beq.n	8009626 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009622:	f7f7 ff2b 	bl	800147c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800962c:	7bfa      	ldrb	r2, [r7, #15]
 800962e:	4611      	mov	r1, r2
 8009630:	4618      	mov	r0, r3
 8009632:	f7fe fea8 	bl	8008386 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800963c:	4618      	mov	r0, r3
 800963e:	f7fe fe61 	bl	8008304 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 8009642:	bf00      	nop
 8009644:	3710      	adds	r7, #16
 8009646:	46bd      	mov	sp, r7
 8009648:	bd80      	pop	{r7, pc}
	...

0800964c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800964c:	b580      	push	{r7, lr}
 800964e:	b082      	sub	sp, #8
 8009650:	af00      	add	r7, sp, #0
 8009652:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800965a:	4618      	mov	r0, r3
 800965c:	f7fe fea3 	bl	80083a6 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	699b      	ldr	r3, [r3, #24]
 8009664:	2b00      	cmp	r3, #0
 8009666:	d005      	beq.n	8009674 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009668:	4b04      	ldr	r3, [pc, #16]	; (800967c <HAL_PCD_SuspendCallback+0x30>)
 800966a:	691b      	ldr	r3, [r3, #16]
 800966c:	4a03      	ldr	r2, [pc, #12]	; (800967c <HAL_PCD_SuspendCallback+0x30>)
 800966e:	f043 0306 	orr.w	r3, r3, #6
 8009672:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 8009674:	bf00      	nop
 8009676:	3708      	adds	r7, #8
 8009678:	46bd      	mov	sp, r7
 800967a:	bd80      	pop	{r7, pc}
 800967c:	e000ed00 	.word	0xe000ed00

08009680 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009680:	b580      	push	{r7, lr}
 8009682:	b082      	sub	sp, #8
 8009684:	af00      	add	r7, sp, #0
 8009686:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	699b      	ldr	r3, [r3, #24]
 800968c:	2b00      	cmp	r3, #0
 800968e:	d007      	beq.n	80096a0 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009690:	4b08      	ldr	r3, [pc, #32]	; (80096b4 <HAL_PCD_ResumeCallback+0x34>)
 8009692:	691b      	ldr	r3, [r3, #16]
 8009694:	4a07      	ldr	r2, [pc, #28]	; (80096b4 <HAL_PCD_ResumeCallback+0x34>)
 8009696:	f023 0306 	bic.w	r3, r3, #6
 800969a:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800969c:	f000 f9fa 	bl	8009a94 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 80096a6:	4618      	mov	r0, r3
 80096a8:	f7fe fe92 	bl	80083d0 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 80096ac:	bf00      	nop
 80096ae:	3708      	adds	r7, #8
 80096b0:	46bd      	mov	sp, r7
 80096b2:	bd80      	pop	{r7, pc}
 80096b4:	e000ed00 	.word	0xe000ed00

080096b8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80096b8:	b580      	push	{r7, lr}
 80096ba:	b082      	sub	sp, #8
 80096bc:	af00      	add	r7, sp, #0
 80096be:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 80096c0:	4a2b      	ldr	r2, [pc, #172]	; (8009770 <USBD_LL_Init+0xb8>)
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	4a29      	ldr	r2, [pc, #164]	; (8009770 <USBD_LL_Init+0xb8>)
 80096cc:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 80096d0:	4b27      	ldr	r3, [pc, #156]	; (8009770 <USBD_LL_Init+0xb8>)
 80096d2:	4a28      	ldr	r2, [pc, #160]	; (8009774 <USBD_LL_Init+0xbc>)
 80096d4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80096d6:	4b26      	ldr	r3, [pc, #152]	; (8009770 <USBD_LL_Init+0xb8>)
 80096d8:	2208      	movs	r2, #8
 80096da:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80096dc:	4b24      	ldr	r3, [pc, #144]	; (8009770 <USBD_LL_Init+0xb8>)
 80096de:	2202      	movs	r2, #2
 80096e0:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80096e2:	4b23      	ldr	r3, [pc, #140]	; (8009770 <USBD_LL_Init+0xb8>)
 80096e4:	2202      	movs	r2, #2
 80096e6:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 80096e8:	4b21      	ldr	r3, [pc, #132]	; (8009770 <USBD_LL_Init+0xb8>)
 80096ea:	2200      	movs	r2, #0
 80096ec:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80096ee:	4b20      	ldr	r3, [pc, #128]	; (8009770 <USBD_LL_Init+0xb8>)
 80096f0:	2200      	movs	r2, #0
 80096f2:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80096f4:	4b1e      	ldr	r3, [pc, #120]	; (8009770 <USBD_LL_Init+0xb8>)
 80096f6:	2200      	movs	r2, #0
 80096f8:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80096fa:	4b1d      	ldr	r3, [pc, #116]	; (8009770 <USBD_LL_Init+0xb8>)
 80096fc:	2200      	movs	r2, #0
 80096fe:	621a      	str	r2, [r3, #32]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8009700:	481b      	ldr	r0, [pc, #108]	; (8009770 <USBD_LL_Init+0xb8>)
 8009702:	f7f8 fc8f 	bl	8002024 <HAL_PCD_Init>
 8009706:	4603      	mov	r3, r0
 8009708:	2b00      	cmp	r3, #0
 800970a:	d001      	beq.n	8009710 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 800970c:	f7f7 feb6 	bl	800147c <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009716:	2318      	movs	r3, #24
 8009718:	2200      	movs	r2, #0
 800971a:	2100      	movs	r1, #0
 800971c:	f7f9 ff7d 	bl	800361a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009726:	2358      	movs	r3, #88	; 0x58
 8009728:	2200      	movs	r2, #0
 800972a:	2180      	movs	r1, #128	; 0x80
 800972c:	f7f9 ff75 	bl	800361a <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009736:	23c0      	movs	r3, #192	; 0xc0
 8009738:	2200      	movs	r2, #0
 800973a:	2181      	movs	r1, #129	; 0x81
 800973c:	f7f9 ff6d 	bl	800361a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009746:	f44f 7388 	mov.w	r3, #272	; 0x110
 800974a:	2200      	movs	r2, #0
 800974c:	2101      	movs	r1, #1
 800974e:	f7f9 ff64 	bl	800361a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009758:	f44f 7380 	mov.w	r3, #256	; 0x100
 800975c:	2200      	movs	r2, #0
 800975e:	2182      	movs	r1, #130	; 0x82
 8009760:	f7f9 ff5b 	bl	800361a <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8009764:	2300      	movs	r3, #0
}
 8009766:	4618      	mov	r0, r3
 8009768:	3708      	adds	r7, #8
 800976a:	46bd      	mov	sp, r7
 800976c:	bd80      	pop	{r7, pc}
 800976e:	bf00      	nop
 8009770:	200012d4 	.word	0x200012d4
 8009774:	40005c00 	.word	0x40005c00

08009778 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009778:	b580      	push	{r7, lr}
 800977a:	b084      	sub	sp, #16
 800977c:	af00      	add	r7, sp, #0
 800977e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009780:	2300      	movs	r3, #0
 8009782:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009784:	2300      	movs	r3, #0
 8009786:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800978e:	4618      	mov	r0, r3
 8009790:	f7f8 fd2d 	bl	80021ee <HAL_PCD_Start>
 8009794:	4603      	mov	r3, r0
 8009796:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009798:	7bfb      	ldrb	r3, [r7, #15]
 800979a:	4618      	mov	r0, r3
 800979c:	f000 f980 	bl	8009aa0 <USBD_Get_USB_Status>
 80097a0:	4603      	mov	r3, r0
 80097a2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80097a4:	7bbb      	ldrb	r3, [r7, #14]
}
 80097a6:	4618      	mov	r0, r3
 80097a8:	3710      	adds	r7, #16
 80097aa:	46bd      	mov	sp, r7
 80097ac:	bd80      	pop	{r7, pc}

080097ae <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80097ae:	b580      	push	{r7, lr}
 80097b0:	b084      	sub	sp, #16
 80097b2:	af00      	add	r7, sp, #0
 80097b4:	6078      	str	r0, [r7, #4]
 80097b6:	4608      	mov	r0, r1
 80097b8:	4611      	mov	r1, r2
 80097ba:	461a      	mov	r2, r3
 80097bc:	4603      	mov	r3, r0
 80097be:	70fb      	strb	r3, [r7, #3]
 80097c0:	460b      	mov	r3, r1
 80097c2:	70bb      	strb	r3, [r7, #2]
 80097c4:	4613      	mov	r3, r2
 80097c6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80097c8:	2300      	movs	r3, #0
 80097ca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80097cc:	2300      	movs	r3, #0
 80097ce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80097d6:	78bb      	ldrb	r3, [r7, #2]
 80097d8:	883a      	ldrh	r2, [r7, #0]
 80097da:	78f9      	ldrb	r1, [r7, #3]
 80097dc:	f7f8 fe9c 	bl	8002518 <HAL_PCD_EP_Open>
 80097e0:	4603      	mov	r3, r0
 80097e2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80097e4:	7bfb      	ldrb	r3, [r7, #15]
 80097e6:	4618      	mov	r0, r3
 80097e8:	f000 f95a 	bl	8009aa0 <USBD_Get_USB_Status>
 80097ec:	4603      	mov	r3, r0
 80097ee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80097f0:	7bbb      	ldrb	r3, [r7, #14]
}
 80097f2:	4618      	mov	r0, r3
 80097f4:	3710      	adds	r7, #16
 80097f6:	46bd      	mov	sp, r7
 80097f8:	bd80      	pop	{r7, pc}

080097fa <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80097fa:	b580      	push	{r7, lr}
 80097fc:	b084      	sub	sp, #16
 80097fe:	af00      	add	r7, sp, #0
 8009800:	6078      	str	r0, [r7, #4]
 8009802:	460b      	mov	r3, r1
 8009804:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009806:	2300      	movs	r3, #0
 8009808:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800980a:	2300      	movs	r3, #0
 800980c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009814:	78fa      	ldrb	r2, [r7, #3]
 8009816:	4611      	mov	r1, r2
 8009818:	4618      	mov	r0, r3
 800981a:	f7f8 fee3 	bl	80025e4 <HAL_PCD_EP_Close>
 800981e:	4603      	mov	r3, r0
 8009820:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009822:	7bfb      	ldrb	r3, [r7, #15]
 8009824:	4618      	mov	r0, r3
 8009826:	f000 f93b 	bl	8009aa0 <USBD_Get_USB_Status>
 800982a:	4603      	mov	r3, r0
 800982c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800982e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009830:	4618      	mov	r0, r3
 8009832:	3710      	adds	r7, #16
 8009834:	46bd      	mov	sp, r7
 8009836:	bd80      	pop	{r7, pc}

08009838 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009838:	b580      	push	{r7, lr}
 800983a:	b084      	sub	sp, #16
 800983c:	af00      	add	r7, sp, #0
 800983e:	6078      	str	r0, [r7, #4]
 8009840:	460b      	mov	r3, r1
 8009842:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009844:	2300      	movs	r3, #0
 8009846:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009848:	2300      	movs	r3, #0
 800984a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009852:	78fa      	ldrb	r2, [r7, #3]
 8009854:	4611      	mov	r1, r2
 8009856:	4618      	mov	r0, r3
 8009858:	f7f8 ffa4 	bl	80027a4 <HAL_PCD_EP_SetStall>
 800985c:	4603      	mov	r3, r0
 800985e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009860:	7bfb      	ldrb	r3, [r7, #15]
 8009862:	4618      	mov	r0, r3
 8009864:	f000 f91c 	bl	8009aa0 <USBD_Get_USB_Status>
 8009868:	4603      	mov	r3, r0
 800986a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800986c:	7bbb      	ldrb	r3, [r7, #14]
}
 800986e:	4618      	mov	r0, r3
 8009870:	3710      	adds	r7, #16
 8009872:	46bd      	mov	sp, r7
 8009874:	bd80      	pop	{r7, pc}

08009876 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009876:	b580      	push	{r7, lr}
 8009878:	b084      	sub	sp, #16
 800987a:	af00      	add	r7, sp, #0
 800987c:	6078      	str	r0, [r7, #4]
 800987e:	460b      	mov	r3, r1
 8009880:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009882:	2300      	movs	r3, #0
 8009884:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009886:	2300      	movs	r3, #0
 8009888:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009890:	78fa      	ldrb	r2, [r7, #3]
 8009892:	4611      	mov	r1, r2
 8009894:	4618      	mov	r0, r3
 8009896:	f7f8 ffe5 	bl	8002864 <HAL_PCD_EP_ClrStall>
 800989a:	4603      	mov	r3, r0
 800989c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800989e:	7bfb      	ldrb	r3, [r7, #15]
 80098a0:	4618      	mov	r0, r3
 80098a2:	f000 f8fd 	bl	8009aa0 <USBD_Get_USB_Status>
 80098a6:	4603      	mov	r3, r0
 80098a8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80098aa:	7bbb      	ldrb	r3, [r7, #14]
}
 80098ac:	4618      	mov	r0, r3
 80098ae:	3710      	adds	r7, #16
 80098b0:	46bd      	mov	sp, r7
 80098b2:	bd80      	pop	{r7, pc}

080098b4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80098b4:	b480      	push	{r7}
 80098b6:	b085      	sub	sp, #20
 80098b8:	af00      	add	r7, sp, #0
 80098ba:	6078      	str	r0, [r7, #4]
 80098bc:	460b      	mov	r3, r1
 80098be:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80098c6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80098c8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	da0c      	bge.n	80098ea <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80098d0:	78fb      	ldrb	r3, [r7, #3]
 80098d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80098d6:	68f9      	ldr	r1, [r7, #12]
 80098d8:	1c5a      	adds	r2, r3, #1
 80098da:	4613      	mov	r3, r2
 80098dc:	009b      	lsls	r3, r3, #2
 80098de:	4413      	add	r3, r2
 80098e0:	00db      	lsls	r3, r3, #3
 80098e2:	440b      	add	r3, r1
 80098e4:	3302      	adds	r3, #2
 80098e6:	781b      	ldrb	r3, [r3, #0]
 80098e8:	e00b      	b.n	8009902 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80098ea:	78fb      	ldrb	r3, [r7, #3]
 80098ec:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80098f0:	68f9      	ldr	r1, [r7, #12]
 80098f2:	4613      	mov	r3, r2
 80098f4:	009b      	lsls	r3, r3, #2
 80098f6:	4413      	add	r3, r2
 80098f8:	00db      	lsls	r3, r3, #3
 80098fa:	440b      	add	r3, r1
 80098fc:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8009900:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009902:	4618      	mov	r0, r3
 8009904:	3714      	adds	r7, #20
 8009906:	46bd      	mov	sp, r7
 8009908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800990c:	4770      	bx	lr

0800990e <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800990e:	b580      	push	{r7, lr}
 8009910:	b084      	sub	sp, #16
 8009912:	af00      	add	r7, sp, #0
 8009914:	6078      	str	r0, [r7, #4]
 8009916:	460b      	mov	r3, r1
 8009918:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800991a:	2300      	movs	r3, #0
 800991c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800991e:	2300      	movs	r3, #0
 8009920:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009928:	78fa      	ldrb	r2, [r7, #3]
 800992a:	4611      	mov	r1, r2
 800992c:	4618      	mov	r0, r3
 800992e:	f7f8 fdce 	bl	80024ce <HAL_PCD_SetAddress>
 8009932:	4603      	mov	r3, r0
 8009934:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009936:	7bfb      	ldrb	r3, [r7, #15]
 8009938:	4618      	mov	r0, r3
 800993a:	f000 f8b1 	bl	8009aa0 <USBD_Get_USB_Status>
 800993e:	4603      	mov	r3, r0
 8009940:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009942:	7bbb      	ldrb	r3, [r7, #14]
}
 8009944:	4618      	mov	r0, r3
 8009946:	3710      	adds	r7, #16
 8009948:	46bd      	mov	sp, r7
 800994a:	bd80      	pop	{r7, pc}

0800994c <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800994c:	b580      	push	{r7, lr}
 800994e:	b086      	sub	sp, #24
 8009950:	af00      	add	r7, sp, #0
 8009952:	60f8      	str	r0, [r7, #12]
 8009954:	607a      	str	r2, [r7, #4]
 8009956:	603b      	str	r3, [r7, #0]
 8009958:	460b      	mov	r3, r1
 800995a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800995c:	2300      	movs	r3, #0
 800995e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009960:	2300      	movs	r3, #0
 8009962:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800996a:	7af9      	ldrb	r1, [r7, #11]
 800996c:	683b      	ldr	r3, [r7, #0]
 800996e:	687a      	ldr	r2, [r7, #4]
 8009970:	f7f8 fed5 	bl	800271e <HAL_PCD_EP_Transmit>
 8009974:	4603      	mov	r3, r0
 8009976:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009978:	7dfb      	ldrb	r3, [r7, #23]
 800997a:	4618      	mov	r0, r3
 800997c:	f000 f890 	bl	8009aa0 <USBD_Get_USB_Status>
 8009980:	4603      	mov	r3, r0
 8009982:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009984:	7dbb      	ldrb	r3, [r7, #22]
}
 8009986:	4618      	mov	r0, r3
 8009988:	3718      	adds	r7, #24
 800998a:	46bd      	mov	sp, r7
 800998c:	bd80      	pop	{r7, pc}

0800998e <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800998e:	b580      	push	{r7, lr}
 8009990:	b086      	sub	sp, #24
 8009992:	af00      	add	r7, sp, #0
 8009994:	60f8      	str	r0, [r7, #12]
 8009996:	607a      	str	r2, [r7, #4]
 8009998:	603b      	str	r3, [r7, #0]
 800999a:	460b      	mov	r3, r1
 800999c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800999e:	2300      	movs	r3, #0
 80099a0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80099a2:	2300      	movs	r3, #0
 80099a4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80099ac:	7af9      	ldrb	r1, [r7, #11]
 80099ae:	683b      	ldr	r3, [r7, #0]
 80099b0:	687a      	ldr	r2, [r7, #4]
 80099b2:	f7f8 fe5f 	bl	8002674 <HAL_PCD_EP_Receive>
 80099b6:	4603      	mov	r3, r0
 80099b8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80099ba:	7dfb      	ldrb	r3, [r7, #23]
 80099bc:	4618      	mov	r0, r3
 80099be:	f000 f86f 	bl	8009aa0 <USBD_Get_USB_Status>
 80099c2:	4603      	mov	r3, r0
 80099c4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80099c6:	7dbb      	ldrb	r3, [r7, #22]
}
 80099c8:	4618      	mov	r0, r3
 80099ca:	3718      	adds	r7, #24
 80099cc:	46bd      	mov	sp, r7
 80099ce:	bd80      	pop	{r7, pc}

080099d0 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80099d0:	b580      	push	{r7, lr}
 80099d2:	b082      	sub	sp, #8
 80099d4:	af00      	add	r7, sp, #0
 80099d6:	6078      	str	r0, [r7, #4]
 80099d8:	460b      	mov	r3, r1
 80099da:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80099e2:	78fa      	ldrb	r2, [r7, #3]
 80099e4:	4611      	mov	r1, r2
 80099e6:	4618      	mov	r0, r3
 80099e8:	f7f8 fe81 	bl	80026ee <HAL_PCD_EP_GetRxCount>
 80099ec:	4603      	mov	r3, r0
}
 80099ee:	4618      	mov	r0, r3
 80099f0:	3708      	adds	r7, #8
 80099f2:	46bd      	mov	sp, r7
 80099f4:	bd80      	pop	{r7, pc}
	...

080099f8 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80099f8:	b580      	push	{r7, lr}
 80099fa:	b082      	sub	sp, #8
 80099fc:	af00      	add	r7, sp, #0
 80099fe:	6078      	str	r0, [r7, #4]
 8009a00:	460b      	mov	r3, r1
 8009a02:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 8009a04:	78fb      	ldrb	r3, [r7, #3]
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d002      	beq.n	8009a10 <HAL_PCDEx_LPM_Callback+0x18>
 8009a0a:	2b01      	cmp	r3, #1
 8009a0c:	d013      	beq.n	8009a36 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 8009a0e:	e023      	b.n	8009a58 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	699b      	ldr	r3, [r3, #24]
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d007      	beq.n	8009a28 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8009a18:	f000 f83c 	bl	8009a94 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009a1c:	4b10      	ldr	r3, [pc, #64]	; (8009a60 <HAL_PCDEx_LPM_Callback+0x68>)
 8009a1e:	691b      	ldr	r3, [r3, #16]
 8009a20:	4a0f      	ldr	r2, [pc, #60]	; (8009a60 <HAL_PCDEx_LPM_Callback+0x68>)
 8009a22:	f023 0306 	bic.w	r3, r3, #6
 8009a26:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009a2e:	4618      	mov	r0, r3
 8009a30:	f7fe fcce 	bl	80083d0 <USBD_LL_Resume>
    break;
 8009a34:	e010      	b.n	8009a58 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009a3c:	4618      	mov	r0, r3
 8009a3e:	f7fe fcb2 	bl	80083a6 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	699b      	ldr	r3, [r3, #24]
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d005      	beq.n	8009a56 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009a4a:	4b05      	ldr	r3, [pc, #20]	; (8009a60 <HAL_PCDEx_LPM_Callback+0x68>)
 8009a4c:	691b      	ldr	r3, [r3, #16]
 8009a4e:	4a04      	ldr	r2, [pc, #16]	; (8009a60 <HAL_PCDEx_LPM_Callback+0x68>)
 8009a50:	f043 0306 	orr.w	r3, r3, #6
 8009a54:	6113      	str	r3, [r2, #16]
    break;
 8009a56:	bf00      	nop
}
 8009a58:	bf00      	nop
 8009a5a:	3708      	adds	r7, #8
 8009a5c:	46bd      	mov	sp, r7
 8009a5e:	bd80      	pop	{r7, pc}
 8009a60:	e000ed00 	.word	0xe000ed00

08009a64 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009a64:	b480      	push	{r7}
 8009a66:	b083      	sub	sp, #12
 8009a68:	af00      	add	r7, sp, #0
 8009a6a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009a6c:	4b03      	ldr	r3, [pc, #12]	; (8009a7c <USBD_static_malloc+0x18>)
}
 8009a6e:	4618      	mov	r0, r3
 8009a70:	370c      	adds	r7, #12
 8009a72:	46bd      	mov	sp, r7
 8009a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a78:	4770      	bx	lr
 8009a7a:	bf00      	nop
 8009a7c:	200001b0 	.word	0x200001b0

08009a80 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009a80:	b480      	push	{r7}
 8009a82:	b083      	sub	sp, #12
 8009a84:	af00      	add	r7, sp, #0
 8009a86:	6078      	str	r0, [r7, #4]

}
 8009a88:	bf00      	nop
 8009a8a:	370c      	adds	r7, #12
 8009a8c:	46bd      	mov	sp, r7
 8009a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a92:	4770      	bx	lr

08009a94 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8009a94:	b580      	push	{r7, lr}
 8009a96:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8009a98:	f7f7 f89e 	bl	8000bd8 <SystemClock_Config>
}
 8009a9c:	bf00      	nop
 8009a9e:	bd80      	pop	{r7, pc}

08009aa0 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009aa0:	b480      	push	{r7}
 8009aa2:	b085      	sub	sp, #20
 8009aa4:	af00      	add	r7, sp, #0
 8009aa6:	4603      	mov	r3, r0
 8009aa8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009aaa:	2300      	movs	r3, #0
 8009aac:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009aae:	79fb      	ldrb	r3, [r7, #7]
 8009ab0:	2b03      	cmp	r3, #3
 8009ab2:	d817      	bhi.n	8009ae4 <USBD_Get_USB_Status+0x44>
 8009ab4:	a201      	add	r2, pc, #4	; (adr r2, 8009abc <USBD_Get_USB_Status+0x1c>)
 8009ab6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009aba:	bf00      	nop
 8009abc:	08009acd 	.word	0x08009acd
 8009ac0:	08009ad3 	.word	0x08009ad3
 8009ac4:	08009ad9 	.word	0x08009ad9
 8009ac8:	08009adf 	.word	0x08009adf
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009acc:	2300      	movs	r3, #0
 8009ace:	73fb      	strb	r3, [r7, #15]
    break;
 8009ad0:	e00b      	b.n	8009aea <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009ad2:	2303      	movs	r3, #3
 8009ad4:	73fb      	strb	r3, [r7, #15]
    break;
 8009ad6:	e008      	b.n	8009aea <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009ad8:	2301      	movs	r3, #1
 8009ada:	73fb      	strb	r3, [r7, #15]
    break;
 8009adc:	e005      	b.n	8009aea <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009ade:	2303      	movs	r3, #3
 8009ae0:	73fb      	strb	r3, [r7, #15]
    break;
 8009ae2:	e002      	b.n	8009aea <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009ae4:	2303      	movs	r3, #3
 8009ae6:	73fb      	strb	r3, [r7, #15]
    break;
 8009ae8:	bf00      	nop
  }
  return usb_status;
 8009aea:	7bfb      	ldrb	r3, [r7, #15]
}
 8009aec:	4618      	mov	r0, r3
 8009aee:	3714      	adds	r7, #20
 8009af0:	46bd      	mov	sp, r7
 8009af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af6:	4770      	bx	lr

08009af8 <__libc_init_array>:
 8009af8:	b570      	push	{r4, r5, r6, lr}
 8009afa:	4e0d      	ldr	r6, [pc, #52]	; (8009b30 <__libc_init_array+0x38>)
 8009afc:	4c0d      	ldr	r4, [pc, #52]	; (8009b34 <__libc_init_array+0x3c>)
 8009afe:	1ba4      	subs	r4, r4, r6
 8009b00:	10a4      	asrs	r4, r4, #2
 8009b02:	2500      	movs	r5, #0
 8009b04:	42a5      	cmp	r5, r4
 8009b06:	d109      	bne.n	8009b1c <__libc_init_array+0x24>
 8009b08:	4e0b      	ldr	r6, [pc, #44]	; (8009b38 <__libc_init_array+0x40>)
 8009b0a:	4c0c      	ldr	r4, [pc, #48]	; (8009b3c <__libc_init_array+0x44>)
 8009b0c:	f000 f82c 	bl	8009b68 <_init>
 8009b10:	1ba4      	subs	r4, r4, r6
 8009b12:	10a4      	asrs	r4, r4, #2
 8009b14:	2500      	movs	r5, #0
 8009b16:	42a5      	cmp	r5, r4
 8009b18:	d105      	bne.n	8009b26 <__libc_init_array+0x2e>
 8009b1a:	bd70      	pop	{r4, r5, r6, pc}
 8009b1c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009b20:	4798      	blx	r3
 8009b22:	3501      	adds	r5, #1
 8009b24:	e7ee      	b.n	8009b04 <__libc_init_array+0xc>
 8009b26:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009b2a:	4798      	blx	r3
 8009b2c:	3501      	adds	r5, #1
 8009b2e:	e7f2      	b.n	8009b16 <__libc_init_array+0x1e>
 8009b30:	08009bd8 	.word	0x08009bd8
 8009b34:	08009bd8 	.word	0x08009bd8
 8009b38:	08009bd8 	.word	0x08009bd8
 8009b3c:	08009bdc 	.word	0x08009bdc

08009b40 <memcpy>:
 8009b40:	b510      	push	{r4, lr}
 8009b42:	1e43      	subs	r3, r0, #1
 8009b44:	440a      	add	r2, r1
 8009b46:	4291      	cmp	r1, r2
 8009b48:	d100      	bne.n	8009b4c <memcpy+0xc>
 8009b4a:	bd10      	pop	{r4, pc}
 8009b4c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009b50:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009b54:	e7f7      	b.n	8009b46 <memcpy+0x6>

08009b56 <memset>:
 8009b56:	4402      	add	r2, r0
 8009b58:	4603      	mov	r3, r0
 8009b5a:	4293      	cmp	r3, r2
 8009b5c:	d100      	bne.n	8009b60 <memset+0xa>
 8009b5e:	4770      	bx	lr
 8009b60:	f803 1b01 	strb.w	r1, [r3], #1
 8009b64:	e7f9      	b.n	8009b5a <memset+0x4>
	...

08009b68 <_init>:
 8009b68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b6a:	bf00      	nop
 8009b6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b6e:	bc08      	pop	{r3}
 8009b70:	469e      	mov	lr, r3
 8009b72:	4770      	bx	lr

08009b74 <_fini>:
 8009b74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b76:	bf00      	nop
 8009b78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b7a:	bc08      	pop	{r3}
 8009b7c:	469e      	mov	lr, r3
 8009b7e:	4770      	bx	lr
