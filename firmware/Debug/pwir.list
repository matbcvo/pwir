
pwir.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000099e4  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08009bbc  08009bbc  00019bbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009c14  08009c14  000201d8  2**0
                  CONTENTS
  4 .ARM          00000000  08009c14  08009c14  000201d8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009c14  08009c14  000201d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009c14  08009c14  00019c14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009c18  08009c18  00019c18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  08009c1c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001490  200001d8  08009df4  000201d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001668  08009df4  00021668  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001adcb  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003476  00000000  00000000  0003afd3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001398  00000000  00000000  0003e450  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001220  00000000  00000000  0003f7e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000205b2  00000000  00000000  00040a08  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00011be0  00000000  00000000  00060fba  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c4301  00000000  00000000  00072b9a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00136e9b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000051a4  00000000  00000000  00136f18  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	200001d8 	.word	0x200001d8
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08009ba4 	.word	0x08009ba4

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	200001dc 	.word	0x200001dc
 8000214:	08009ba4 	.word	0x08009ba4

08000218 <CDC_On_Receive>:
  .delimiter = 0
}; // (4) Instance of received data.

volatile uint8_t isCommandReceived = 0; // (5) Boolean (0/1) variable to signify that data has been received. Variable is marked volatile to prevent the compiler from removing it during optimisation.

void CDC_On_Receive(uint8_t* buffer, uint32_t* length) { // (6) Define the function that is called when data is received. It is usually preferable to keep interrupt handlers small and fast to avoid blocking other code from executing. Only data copying and setting isCommandReceived to 1 is done in the handler. Rest is handled in the main while loop.
 8000218:	b580      	push	{r7, lr}
 800021a:	b082      	sub	sp, #8
 800021c:	af00      	add	r7, sp, #0
 800021e:	6078      	str	r0, [r7, #4]
 8000220:	6039      	str	r1, [r7, #0]
  //HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
  if (*length == sizeof(Command)) { // (7) Check if received data the has same length as Command struct.
 8000222:	683b      	ldr	r3, [r7, #0]
 8000224:	681b      	ldr	r3, [r3, #0]
 8000226:	2b0c      	cmp	r3, #12
 8000228:	d10d      	bne.n	8000246 <CDC_On_Receive+0x2e>
    memcpy(&command, buffer, sizeof(Command)); // (8) Copy received data to command instance.
 800022a:	220c      	movs	r2, #12
 800022c:	6879      	ldr	r1, [r7, #4]
 800022e:	4808      	ldr	r0, [pc, #32]	; (8000250 <CDC_On_Receive+0x38>)
 8000230:	f009 fca4 	bl	8009b7c <memcpy>

    if (command.delimiter == 0xAAAA) { // (9) Check the delimiter as a validation of received data.
 8000234:	4b06      	ldr	r3, [pc, #24]	; (8000250 <CDC_On_Receive+0x38>)
 8000236:	895b      	ldrh	r3, [r3, #10]
 8000238:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800023c:	4293      	cmp	r3, r2
 800023e:	d102      	bne.n	8000246 <CDC_On_Receive+0x2e>
      isCommandReceived = 1;
 8000240:	4b04      	ldr	r3, [pc, #16]	; (8000254 <CDC_On_Receive+0x3c>)
 8000242:	2201      	movs	r2, #1
 8000244:	701a      	strb	r2, [r3, #0]
    }
  }
}
 8000246:	bf00      	nop
 8000248:	3708      	adds	r7, #8
 800024a:	46bd      	mov	sp, r7
 800024c:	bd80      	pop	{r7, pc}
 800024e:	bf00      	nop
 8000250:	200001f4 	.word	0x200001f4
 8000254:	20000200 	.word	0x20000200

08000258 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000258:	b580      	push	{r7, lr}
 800025a:	b08a      	sub	sp, #40	; 0x28
 800025c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  // (1) Define an instance of Feedback for sending data.
  Feedback feedback = {
 800025e:	463b      	mov	r3, r7
 8000260:	2228      	movs	r2, #40	; 0x28
 8000262:	2100      	movs	r1, #0
 8000264:	4618      	mov	r0, r3
 8000266:	f009 fc94 	bl	8009b92 <memset>
 800026a:	f64a 23aa 	movw	r3, #43690	; 0xaaaa
 800026e:	84bb      	strh	r3, [r7, #36]	; 0x24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000270:	f001 f969 	bl	8001546 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000274:	f000 f8d8 	bl	8000428 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000278:	f000 fd1e 	bl	8000cb8 <MX_GPIO_Init>
  MX_TIM1_Init();
 800027c:	f000 f93c 	bl	80004f8 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000280:	f000 f9aa 	bl	80005d8 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000284:	f000 fa28 	bl	80006d8 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000288:	f000 fa7c 	bl	8000784 <MX_TIM4_Init>
  MX_TIM8_Init();
 800028c:	f000 fb06 	bl	800089c <MX_TIM8_Init>
  MX_TIM16_Init();
 8000290:	f000 fc1e 	bl	8000ad0 <MX_TIM16_Init>
  MX_TIM17_Init();
 8000294:	f000 fc96 	bl	8000bc4 <MX_TIM17_Init>
  MX_USB_Device_Init();
 8000298:	f008 ff54 	bl	8009144 <MX_USB_Device_Init>
  MX_TIM15_Init();
 800029c:	f000 fb92 	bl	80009c4 <MX_TIM15_Init>
  MX_TIM6_Init();
 80002a0:	f000 fac6 	bl	8000830 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_1 | TIM_CHANNEL_2); // Encoder 1
 80002a4:	2104      	movs	r1, #4
 80002a6:	484c      	ldr	r0, [pc, #304]	; (80003d8 <main+0x180>)
 80002a8:	f004 fa4a 	bl	8004740 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_1 | TIM_CHANNEL_2); // Encoder 2
 80002ac:	2104      	movs	r1, #4
 80002ae:	484b      	ldr	r0, [pc, #300]	; (80003dc <main+0x184>)
 80002b0:	f004 fa46 	bl	8004740 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_1 | TIM_CHANNEL_2); // Encoder 3
 80002b4:	2104      	movs	r1, #4
 80002b6:	484a      	ldr	r0, [pc, #296]	; (80003e0 <main+0x188>)
 80002b8:	f004 fa42 	bl	8004740 <HAL_TIM_Encoder_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1); // Motor PWM for draiver 1
 80002bc:	2100      	movs	r1, #0
 80002be:	4849      	ldr	r0, [pc, #292]	; (80003e4 <main+0x18c>)
 80002c0:	f004 f898 	bl	80043f4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2); // Motor PWM for draiver 1
 80002c4:	2104      	movs	r1, #4
 80002c6:	4847      	ldr	r0, [pc, #284]	; (80003e4 <main+0x18c>)
 80002c8:	f004 f894 	bl	80043f4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3); // Motor PWM for draiver 2
 80002cc:	2108      	movs	r1, #8
 80002ce:	4845      	ldr	r0, [pc, #276]	; (80003e4 <main+0x18c>)
 80002d0:	f004 f890 	bl	80043f4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4); // Motor PWM for draiver 2
 80002d4:	210c      	movs	r1, #12
 80002d6:	4843      	ldr	r0, [pc, #268]	; (80003e4 <main+0x18c>)
 80002d8:	f004 f88c 	bl	80043f4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1); // Motor PWM for draiver 3
 80002dc:	2100      	movs	r1, #0
 80002de:	4842      	ldr	r0, [pc, #264]	; (80003e8 <main+0x190>)
 80002e0:	f004 f888 	bl	80043f4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim17, TIM_CHANNEL_1); // Motor PWM for draiver 3
 80002e4:	2100      	movs	r1, #0
 80002e6:	4841      	ldr	r0, [pc, #260]	; (80003ec <main+0x194>)
 80002e8:	f004 f884 	bl	80043f4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1); // Thrower PWM
 80002ec:	2100      	movs	r1, #0
 80002ee:	4840      	ldr	r0, [pc, #256]	; (80003f0 <main+0x198>)
 80002f0:	f004 f880 	bl	80043f4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_2); // Thrower Angle PWM
 80002f4:	2104      	movs	r1, #4
 80002f6:	483f      	ldr	r0, [pc, #252]	; (80003f4 <main+0x19c>)
 80002f8:	f004 f87c 	bl	80043f4 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim6);
 80002fc:	483e      	ldr	r0, [pc, #248]	; (80003f8 <main+0x1a0>)
 80002fe:	f003 ffb7 	bl	8004270 <HAL_TIM_Base_Start_IT>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //HAL_Delay(1000);
	if (isCommandReceived) { // (2) Only return data when something has been received.
 8000302:	4b3e      	ldr	r3, [pc, #248]	; (80003fc <main+0x1a4>)
 8000304:	781b      	ldrb	r3, [r3, #0]
 8000306:	b2db      	uxtb	r3, r3
 8000308:	2b00      	cmp	r3, #0
 800030a:	d0fa      	beq.n	8000302 <main+0xaa>
		isCommandReceived = 0;
 800030c:	4b3b      	ldr	r3, [pc, #236]	; (80003fc <main+0x1a4>)
 800030e:	2200      	movs	r2, #0
 8000310:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin); // (3) Toggle LED to indicate that data has been received.
 8000312:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000316:	483a      	ldr	r0, [pc, #232]	; (8000400 <main+0x1a8>)
 8000318:	f001 fc30 	bl	8001b7c <HAL_GPIO_TogglePin>

		motor1.setpoint = command.speed1;
 800031c:	4b39      	ldr	r3, [pc, #228]	; (8000404 <main+0x1ac>)
 800031e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000322:	4b39      	ldr	r3, [pc, #228]	; (8000408 <main+0x1b0>)
 8000324:	801a      	strh	r2, [r3, #0]
		motor2.setpoint = command.speed2;
 8000326:	4b37      	ldr	r3, [pc, #220]	; (8000404 <main+0x1ac>)
 8000328:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800032c:	4b37      	ldr	r3, [pc, #220]	; (800040c <main+0x1b4>)
 800032e:	801a      	strh	r2, [r3, #0]
		motor3.setpoint = command.speed3;
 8000330:	4b34      	ldr	r3, [pc, #208]	; (8000404 <main+0x1ac>)
 8000332:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8000336:	4b36      	ldr	r3, [pc, #216]	; (8000410 <main+0x1b8>)
 8000338:	801a      	strh	r2, [r3, #0]

		// (4) Update feedback with current motor speeds.
		feedback.speed1 = motor1.speed;
 800033a:	4b33      	ldr	r3, [pc, #204]	; (8000408 <main+0x1b0>)
 800033c:	685b      	ldr	r3, [r3, #4]
 800033e:	603b      	str	r3, [r7, #0]
		feedback.speed2 = motor2.speed;
 8000340:	4b32      	ldr	r3, [pc, #200]	; (800040c <main+0x1b4>)
 8000342:	685b      	ldr	r3, [r3, #4]
 8000344:	607b      	str	r3, [r7, #4]
		feedback.speed3 = motor3.speed;
 8000346:	4b32      	ldr	r3, [pc, #200]	; (8000410 <main+0x1b8>)
 8000348:	685b      	ldr	r3, [r3, #4]
 800034a:	60bb      	str	r3, [r7, #8]
		feedback.positionChange1 = motor1.positionChange;
 800034c:	4b2e      	ldr	r3, [pc, #184]	; (8000408 <main+0x1b0>)
 800034e:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8000352:	81bb      	strh	r3, [r7, #12]
		feedback.positionChange2 = motor2.positionChange;
 8000354:	4b2d      	ldr	r3, [pc, #180]	; (800040c <main+0x1b4>)
 8000356:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800035a:	81fb      	strh	r3, [r7, #14]
		feedback.positionChange3 = motor3.positionChange;
 800035c:	4b2c      	ldr	r3, [pc, #176]	; (8000410 <main+0x1b8>)
 800035e:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8000362:	823b      	strh	r3, [r7, #16]
		feedback.encoder1 = (int16_t)TIM1->CNT;
 8000364:	4b2b      	ldr	r3, [pc, #172]	; (8000414 <main+0x1bc>)
 8000366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000368:	b21b      	sxth	r3, r3
 800036a:	827b      	strh	r3, [r7, #18]
		feedback.encoder2 = (int16_t)TIM3->CNT;
 800036c:	4b2a      	ldr	r3, [pc, #168]	; (8000418 <main+0x1c0>)
 800036e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000370:	b21b      	sxth	r3, r3
 8000372:	82bb      	strh	r3, [r7, #20]
		feedback.encoder3 = (int16_t)TIM4->CNT;
 8000374:	4b29      	ldr	r3, [pc, #164]	; (800041c <main+0x1c4>)
 8000376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000378:	b21b      	sxth	r3, r3
 800037a:	82fb      	strh	r3, [r7, #22]
		feedback.sumOfErrors1 = motor1.sumOfErrors;
 800037c:	4b22      	ldr	r3, [pc, #136]	; (8000408 <main+0x1b0>)
 800037e:	699b      	ldr	r3, [r3, #24]
 8000380:	61bb      	str	r3, [r7, #24]
		feedback.sumOfErrors2 = motor2.sumOfErrors;
 8000382:	4b22      	ldr	r3, [pc, #136]	; (800040c <main+0x1b4>)
 8000384:	699b      	ldr	r3, [r3, #24]
 8000386:	61fb      	str	r3, [r7, #28]
		feedback.sumOfErrors3 = motor3.sumOfErrors;
 8000388:	4b21      	ldr	r3, [pc, #132]	; (8000410 <main+0x1b8>)
 800038a:	699b      	ldr	r3, [r3, #24]
 800038c:	623b      	str	r3, [r7, #32]

		// Start thrower ESC at lower than 3200
		// Then set speed to 3200 ... 6400
		TIM8->CCR1 = command.throwerSpeed; // thrower
 800038e:	4b1d      	ldr	r3, [pc, #116]	; (8000404 <main+0x1ac>)
 8000390:	88da      	ldrh	r2, [r3, #6]
 8000392:	4b23      	ldr	r3, [pc, #140]	; (8000420 <main+0x1c8>)
 8000394:	635a      	str	r2, [r3, #52]	; 0x34

		// Thrower angle overflow check (2700 min 6900 max)
		if (command.throwerAngle > 6900) {
 8000396:	4b1b      	ldr	r3, [pc, #108]	; (8000404 <main+0x1ac>)
 8000398:	891b      	ldrh	r3, [r3, #8]
 800039a:	f641 22f4 	movw	r2, #6900	; 0x1af4
 800039e:	4293      	cmp	r3, r2
 80003a0:	d904      	bls.n	80003ac <main+0x154>
			TIM15->CCR2 = 6900;
 80003a2:	4b20      	ldr	r3, [pc, #128]	; (8000424 <main+0x1cc>)
 80003a4:	f641 22f4 	movw	r2, #6900	; 0x1af4
 80003a8:	639a      	str	r2, [r3, #56]	; 0x38
 80003aa:	e00e      	b.n	80003ca <main+0x172>
		}
		else if (command.throwerAngle < 2700) {
 80003ac:	4b15      	ldr	r3, [pc, #84]	; (8000404 <main+0x1ac>)
 80003ae:	891b      	ldrh	r3, [r3, #8]
 80003b0:	f640 228b 	movw	r2, #2699	; 0xa8b
 80003b4:	4293      	cmp	r3, r2
 80003b6:	d804      	bhi.n	80003c2 <main+0x16a>
			TIM15->CCR2 = 2700;
 80003b8:	4b1a      	ldr	r3, [pc, #104]	; (8000424 <main+0x1cc>)
 80003ba:	f640 228c 	movw	r2, #2700	; 0xa8c
 80003be:	639a      	str	r2, [r3, #56]	; 0x38
 80003c0:	e003      	b.n	80003ca <main+0x172>
		}
		else {
			TIM15->CCR2 = command.throwerAngle;
 80003c2:	4b10      	ldr	r3, [pc, #64]	; (8000404 <main+0x1ac>)
 80003c4:	891a      	ldrh	r2, [r3, #8]
 80003c6:	4b17      	ldr	r3, [pc, #92]	; (8000424 <main+0x1cc>)
 80003c8:	639a      	str	r2, [r3, #56]	; 0x38
		}

		CDC_Transmit_FS(&feedback, sizeof(feedback)); // (5) Send data over USB.
 80003ca:	463b      	mov	r3, r7
 80003cc:	2128      	movs	r1, #40	; 0x28
 80003ce:	4618      	mov	r0, r3
 80003d0:	f008 ff7a 	bl	80092c8 <CDC_Transmit_FS>
	if (isCommandReceived) { // (2) Only return data when something has been received.
 80003d4:	e795      	b.n	8000302 <main+0xaa>
 80003d6:	bf00      	nop
 80003d8:	200005ec 	.word	0x200005ec
 80003dc:	20000554 	.word	0x20000554
 80003e0:	20000470 	.word	0x20000470
 80003e4:	20000638 	.word	0x20000638
 80003e8:	20000684 	.word	0x20000684
 80003ec:	20000508 	.word	0x20000508
 80003f0:	20000424 	.word	0x20000424
 80003f4:	200004bc 	.word	0x200004bc
 80003f8:	200005a0 	.word	0x200005a0
 80003fc:	20000200 	.word	0x20000200
 8000400:	48000400 	.word	0x48000400
 8000404:	200001f4 	.word	0x200001f4
 8000408:	20000000 	.word	0x20000000
 800040c:	2000001c 	.word	0x2000001c
 8000410:	20000038 	.word	0x20000038
 8000414:	40012c00 	.word	0x40012c00
 8000418:	40000400 	.word	0x40000400
 800041c:	40000800 	.word	0x40000800
 8000420:	40013400 	.word	0x40013400
 8000424:	40014000 	.word	0x40014000

08000428 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000428:	b580      	push	{r7, lr}
 800042a:	b0a4      	sub	sp, #144	; 0x90
 800042c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800042e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000432:	2238      	movs	r2, #56	; 0x38
 8000434:	2100      	movs	r1, #0
 8000436:	4618      	mov	r0, r3
 8000438:	f009 fbab 	bl	8009b92 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800043c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000440:	2200      	movs	r2, #0
 8000442:	601a      	str	r2, [r3, #0]
 8000444:	605a      	str	r2, [r3, #4]
 8000446:	609a      	str	r2, [r3, #8]
 8000448:	60da      	str	r2, [r3, #12]
 800044a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800044c:	463b      	mov	r3, r7
 800044e:	2244      	movs	r2, #68	; 0x44
 8000450:	2100      	movs	r1, #0
 8000452:	4618      	mov	r0, r3
 8000454:	f009 fb9d 	bl	8009b92 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000458:	2000      	movs	r0, #0
 800045a:	f002 ff11 	bl	8003280 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 800045e:	2322      	movs	r3, #34	; 0x22
 8000460:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000462:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000466:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000468:	2340      	movs	r3, #64	; 0x40
 800046a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800046c:	2301      	movs	r3, #1
 800046e:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000470:	2302      	movs	r3, #2
 8000472:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000474:	2302      	movs	r3, #2
 8000476:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000478:	2301      	movs	r3, #1
 800047a:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 20;
 800047c:	2314      	movs	r3, #20
 800047e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000482:	2302      	movs	r3, #2
 8000484:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 8000488:	2304      	movs	r3, #4
 800048a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800048e:	2302      	movs	r3, #2
 8000490:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000494:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000498:	4618      	mov	r0, r3
 800049a:	f002 ffa5 	bl	80033e8 <HAL_RCC_OscConfig>
 800049e:	4603      	mov	r3, r0
 80004a0:	2b00      	cmp	r3, #0
 80004a2:	d001      	beq.n	80004a8 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80004a4:	f000 fd8c 	bl	8000fc0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004a8:	230f      	movs	r3, #15
 80004aa:	647b      	str	r3, [r7, #68]	; 0x44
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004ac:	2303      	movs	r3, #3
 80004ae:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004b0:	2300      	movs	r3, #0
 80004b2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80004b4:	2300      	movs	r3, #0
 80004b6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004b8:	2300      	movs	r3, #0
 80004ba:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80004bc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80004c0:	2104      	movs	r1, #4
 80004c2:	4618      	mov	r0, r3
 80004c4:	f003 faa8 	bl	8003a18 <HAL_RCC_ClockConfig>
 80004c8:	4603      	mov	r3, r0
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	d001      	beq.n	80004d2 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80004ce:	f000 fd77 	bl	8000fc0 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80004d2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80004d6:	603b      	str	r3, [r7, #0]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80004d8:	2300      	movs	r3, #0
 80004da:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80004dc:	463b      	mov	r3, r7
 80004de:	4618      	mov	r0, r3
 80004e0:	f003 fc7e 	bl	8003de0 <HAL_RCCEx_PeriphCLKConfig>
 80004e4:	4603      	mov	r3, r0
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	d001      	beq.n	80004ee <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80004ea:	f000 fd69 	bl	8000fc0 <Error_Handler>
  }
}
 80004ee:	bf00      	nop
 80004f0:	3790      	adds	r7, #144	; 0x90
 80004f2:	46bd      	mov	sp, r7
 80004f4:	bd80      	pop	{r7, pc}
	...

080004f8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b09a      	sub	sp, #104	; 0x68
 80004fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80004fe:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000502:	2224      	movs	r2, #36	; 0x24
 8000504:	2100      	movs	r1, #0
 8000506:	4618      	mov	r0, r3
 8000508:	f009 fb43 	bl	8009b92 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800050c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000510:	2200      	movs	r2, #0
 8000512:	601a      	str	r2, [r3, #0]
 8000514:	605a      	str	r2, [r3, #4]
 8000516:	609a      	str	r2, [r3, #8]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000518:	1d3b      	adds	r3, r7, #4
 800051a:	2234      	movs	r2, #52	; 0x34
 800051c:	2100      	movs	r1, #0
 800051e:	4618      	mov	r0, r3
 8000520:	f009 fb37 	bl	8009b92 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000524:	4b2a      	ldr	r3, [pc, #168]	; (80005d0 <MX_TIM1_Init+0xd8>)
 8000526:	4a2b      	ldr	r2, [pc, #172]	; (80005d4 <MX_TIM1_Init+0xdc>)
 8000528:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800052a:	4b29      	ldr	r3, [pc, #164]	; (80005d0 <MX_TIM1_Init+0xd8>)
 800052c:	2200      	movs	r2, #0
 800052e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000530:	4b27      	ldr	r3, [pc, #156]	; (80005d0 <MX_TIM1_Init+0xd8>)
 8000532:	2200      	movs	r2, #0
 8000534:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000536:	4b26      	ldr	r3, [pc, #152]	; (80005d0 <MX_TIM1_Init+0xd8>)
 8000538:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800053c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800053e:	4b24      	ldr	r3, [pc, #144]	; (80005d0 <MX_TIM1_Init+0xd8>)
 8000540:	2200      	movs	r2, #0
 8000542:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000544:	4b22      	ldr	r3, [pc, #136]	; (80005d0 <MX_TIM1_Init+0xd8>)
 8000546:	2200      	movs	r2, #0
 8000548:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800054a:	4b21      	ldr	r3, [pc, #132]	; (80005d0 <MX_TIM1_Init+0xd8>)
 800054c:	2200      	movs	r2, #0
 800054e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000550:	2301      	movs	r3, #1
 8000552:	647b      	str	r3, [r7, #68]	; 0x44
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000554:	2300      	movs	r3, #0
 8000556:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000558:	2301      	movs	r3, #1
 800055a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800055c:	2300      	movs	r3, #0
 800055e:	653b      	str	r3, [r7, #80]	; 0x50
  sConfig.IC1Filter = 0;
 8000560:	2300      	movs	r3, #0
 8000562:	657b      	str	r3, [r7, #84]	; 0x54
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000564:	2300      	movs	r3, #0
 8000566:	65bb      	str	r3, [r7, #88]	; 0x58
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000568:	2301      	movs	r3, #1
 800056a:	65fb      	str	r3, [r7, #92]	; 0x5c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800056c:	2300      	movs	r3, #0
 800056e:	663b      	str	r3, [r7, #96]	; 0x60
  sConfig.IC2Filter = 0;
 8000570:	2300      	movs	r3, #0
 8000572:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8000574:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000578:	4619      	mov	r1, r3
 800057a:	4815      	ldr	r0, [pc, #84]	; (80005d0 <MX_TIM1_Init+0xd8>)
 800057c:	f004 f83a 	bl	80045f4 <HAL_TIM_Encoder_Init>
 8000580:	4603      	mov	r3, r0
 8000582:	2b00      	cmp	r3, #0
 8000584:	d001      	beq.n	800058a <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8000586:	f000 fd1b 	bl	8000fc0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800058a:	2300      	movs	r3, #0
 800058c:	63bb      	str	r3, [r7, #56]	; 0x38
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800058e:	2300      	movs	r3, #0
 8000590:	63fb      	str	r3, [r7, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000592:	2300      	movs	r3, #0
 8000594:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000596:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800059a:	4619      	mov	r1, r3
 800059c:	480c      	ldr	r0, [pc, #48]	; (80005d0 <MX_TIM1_Init+0xd8>)
 800059e:	f004 ffbf 	bl	8005520 <HAL_TIMEx_MasterConfigSynchronization>
 80005a2:	4603      	mov	r3, r0
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d001      	beq.n	80005ac <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 80005a8:	f000 fd0a 	bl	8000fc0 <Error_Handler>
  }
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80005ac:	2300      	movs	r3, #0
 80005ae:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80005b0:	2300      	movs	r3, #0
 80005b2:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80005b4:	1d3b      	adds	r3, r7, #4
 80005b6:	4619      	mov	r1, r3
 80005b8:	4805      	ldr	r0, [pc, #20]	; (80005d0 <MX_TIM1_Init+0xd8>)
 80005ba:	f005 f833 	bl	8005624 <HAL_TIMEx_ConfigBreakDeadTime>
 80005be:	4603      	mov	r3, r0
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d001      	beq.n	80005c8 <MX_TIM1_Init+0xd0>
  {
    Error_Handler();
 80005c4:	f000 fcfc 	bl	8000fc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80005c8:	bf00      	nop
 80005ca:	3768      	adds	r7, #104	; 0x68
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bd80      	pop	{r7, pc}
 80005d0:	200005ec 	.word	0x200005ec
 80005d4:	40012c00 	.word	0x40012c00

080005d8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b08a      	sub	sp, #40	; 0x28
 80005dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005de:	f107 031c 	add.w	r3, r7, #28
 80005e2:	2200      	movs	r2, #0
 80005e4:	601a      	str	r2, [r3, #0]
 80005e6:	605a      	str	r2, [r3, #4]
 80005e8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80005ea:	463b      	mov	r3, r7
 80005ec:	2200      	movs	r2, #0
 80005ee:	601a      	str	r2, [r3, #0]
 80005f0:	605a      	str	r2, [r3, #4]
 80005f2:	609a      	str	r2, [r3, #8]
 80005f4:	60da      	str	r2, [r3, #12]
 80005f6:	611a      	str	r2, [r3, #16]
 80005f8:	615a      	str	r2, [r3, #20]
 80005fa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80005fc:	4b35      	ldr	r3, [pc, #212]	; (80006d4 <MX_TIM2_Init+0xfc>)
 80005fe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000602:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 50 - 1;
 8000604:	4b33      	ldr	r3, [pc, #204]	; (80006d4 <MX_TIM2_Init+0xfc>)
 8000606:	2231      	movs	r2, #49	; 0x31
 8000608:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800060a:	4b32      	ldr	r3, [pc, #200]	; (80006d4 <MX_TIM2_Init+0xfc>)
 800060c:	2200      	movs	r2, #0
 800060e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 63999;
 8000610:	4b30      	ldr	r3, [pc, #192]	; (80006d4 <MX_TIM2_Init+0xfc>)
 8000612:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8000616:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000618:	4b2e      	ldr	r3, [pc, #184]	; (80006d4 <MX_TIM2_Init+0xfc>)
 800061a:	2200      	movs	r2, #0
 800061c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800061e:	4b2d      	ldr	r3, [pc, #180]	; (80006d4 <MX_TIM2_Init+0xfc>)
 8000620:	2200      	movs	r2, #0
 8000622:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000624:	482b      	ldr	r0, [pc, #172]	; (80006d4 <MX_TIM2_Init+0xfc>)
 8000626:	f003 fe8d 	bl	8004344 <HAL_TIM_PWM_Init>
 800062a:	4603      	mov	r3, r0
 800062c:	2b00      	cmp	r3, #0
 800062e:	d001      	beq.n	8000634 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8000630:	f000 fcc6 	bl	8000fc0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000634:	2300      	movs	r3, #0
 8000636:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000638:	2300      	movs	r3, #0
 800063a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800063c:	f107 031c 	add.w	r3, r7, #28
 8000640:	4619      	mov	r1, r3
 8000642:	4824      	ldr	r0, [pc, #144]	; (80006d4 <MX_TIM2_Init+0xfc>)
 8000644:	f004 ff6c 	bl	8005520 <HAL_TIMEx_MasterConfigSynchronization>
 8000648:	4603      	mov	r3, r0
 800064a:	2b00      	cmp	r3, #0
 800064c:	d001      	beq.n	8000652 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 800064e:	f000 fcb7 	bl	8000fc0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000652:	2360      	movs	r3, #96	; 0x60
 8000654:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000656:	2300      	movs	r3, #0
 8000658:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800065a:	2300      	movs	r3, #0
 800065c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800065e:	2300      	movs	r3, #0
 8000660:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000662:	463b      	mov	r3, r7
 8000664:	2200      	movs	r2, #0
 8000666:	4619      	mov	r1, r3
 8000668:	481a      	ldr	r0, [pc, #104]	; (80006d4 <MX_TIM2_Init+0xfc>)
 800066a:	f004 fa75 	bl	8004b58 <HAL_TIM_PWM_ConfigChannel>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8000674:	f000 fca4 	bl	8000fc0 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8000678:	2300      	movs	r3, #0
 800067a:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800067c:	463b      	mov	r3, r7
 800067e:	2204      	movs	r2, #4
 8000680:	4619      	mov	r1, r3
 8000682:	4814      	ldr	r0, [pc, #80]	; (80006d4 <MX_TIM2_Init+0xfc>)
 8000684:	f004 fa68 	bl	8004b58 <HAL_TIM_PWM_ConfigChannel>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <MX_TIM2_Init+0xba>
  {
    Error_Handler();
 800068e:	f000 fc97 	bl	8000fc0 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8000692:	2300      	movs	r3, #0
 8000694:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000696:	463b      	mov	r3, r7
 8000698:	2208      	movs	r2, #8
 800069a:	4619      	mov	r1, r3
 800069c:	480d      	ldr	r0, [pc, #52]	; (80006d4 <MX_TIM2_Init+0xfc>)
 800069e:	f004 fa5b 	bl	8004b58 <HAL_TIM_PWM_ConfigChannel>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d001      	beq.n	80006ac <MX_TIM2_Init+0xd4>
  {
    Error_Handler();
 80006a8:	f000 fc8a 	bl	8000fc0 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 80006ac:	2300      	movs	r3, #0
 80006ae:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80006b0:	463b      	mov	r3, r7
 80006b2:	220c      	movs	r2, #12
 80006b4:	4619      	mov	r1, r3
 80006b6:	4807      	ldr	r0, [pc, #28]	; (80006d4 <MX_TIM2_Init+0xfc>)
 80006b8:	f004 fa4e 	bl	8004b58 <HAL_TIM_PWM_ConfigChannel>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d001      	beq.n	80006c6 <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 80006c2:	f000 fc7d 	bl	8000fc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80006c6:	4803      	ldr	r0, [pc, #12]	; (80006d4 <MX_TIM2_Init+0xfc>)
 80006c8:	f000 fde0 	bl	800128c <HAL_TIM_MspPostInit>

}
 80006cc:	bf00      	nop
 80006ce:	3728      	adds	r7, #40	; 0x28
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	20000638 	.word	0x20000638

080006d8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b08c      	sub	sp, #48	; 0x30
 80006dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80006de:	f107 030c 	add.w	r3, r7, #12
 80006e2:	2224      	movs	r2, #36	; 0x24
 80006e4:	2100      	movs	r1, #0
 80006e6:	4618      	mov	r0, r3
 80006e8:	f009 fa53 	bl	8009b92 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006ec:	463b      	mov	r3, r7
 80006ee:	2200      	movs	r2, #0
 80006f0:	601a      	str	r2, [r3, #0]
 80006f2:	605a      	str	r2, [r3, #4]
 80006f4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80006f6:	4b21      	ldr	r3, [pc, #132]	; (800077c <MX_TIM3_Init+0xa4>)
 80006f8:	4a21      	ldr	r2, [pc, #132]	; (8000780 <MX_TIM3_Init+0xa8>)
 80006fa:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80006fc:	4b1f      	ldr	r3, [pc, #124]	; (800077c <MX_TIM3_Init+0xa4>)
 80006fe:	2200      	movs	r2, #0
 8000700:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000702:	4b1e      	ldr	r3, [pc, #120]	; (800077c <MX_TIM3_Init+0xa4>)
 8000704:	2200      	movs	r2, #0
 8000706:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000708:	4b1c      	ldr	r3, [pc, #112]	; (800077c <MX_TIM3_Init+0xa4>)
 800070a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800070e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000710:	4b1a      	ldr	r3, [pc, #104]	; (800077c <MX_TIM3_Init+0xa4>)
 8000712:	2200      	movs	r2, #0
 8000714:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000716:	4b19      	ldr	r3, [pc, #100]	; (800077c <MX_TIM3_Init+0xa4>)
 8000718:	2200      	movs	r2, #0
 800071a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800071c:	2301      	movs	r3, #1
 800071e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000720:	2300      	movs	r3, #0
 8000722:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000724:	2301      	movs	r3, #1
 8000726:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000728:	2300      	movs	r3, #0
 800072a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800072c:	2300      	movs	r3, #0
 800072e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000730:	2300      	movs	r3, #0
 8000732:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000734:	2301      	movs	r3, #1
 8000736:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000738:	2300      	movs	r3, #0
 800073a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800073c:	2300      	movs	r3, #0
 800073e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000740:	f107 030c 	add.w	r3, r7, #12
 8000744:	4619      	mov	r1, r3
 8000746:	480d      	ldr	r0, [pc, #52]	; (800077c <MX_TIM3_Init+0xa4>)
 8000748:	f003 ff54 	bl	80045f4 <HAL_TIM_Encoder_Init>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8000752:	f000 fc35 	bl	8000fc0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000756:	2300      	movs	r3, #0
 8000758:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800075a:	2300      	movs	r3, #0
 800075c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800075e:	463b      	mov	r3, r7
 8000760:	4619      	mov	r1, r3
 8000762:	4806      	ldr	r0, [pc, #24]	; (800077c <MX_TIM3_Init+0xa4>)
 8000764:	f004 fedc 	bl	8005520 <HAL_TIMEx_MasterConfigSynchronization>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 800076e:	f000 fc27 	bl	8000fc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000772:	bf00      	nop
 8000774:	3730      	adds	r7, #48	; 0x30
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	20000554 	.word	0x20000554
 8000780:	40000400 	.word	0x40000400

08000784 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b08c      	sub	sp, #48	; 0x30
 8000788:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800078a:	f107 030c 	add.w	r3, r7, #12
 800078e:	2224      	movs	r2, #36	; 0x24
 8000790:	2100      	movs	r1, #0
 8000792:	4618      	mov	r0, r3
 8000794:	f009 f9fd 	bl	8009b92 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000798:	463b      	mov	r3, r7
 800079a:	2200      	movs	r2, #0
 800079c:	601a      	str	r2, [r3, #0]
 800079e:	605a      	str	r2, [r3, #4]
 80007a0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80007a2:	4b21      	ldr	r3, [pc, #132]	; (8000828 <MX_TIM4_Init+0xa4>)
 80007a4:	4a21      	ldr	r2, [pc, #132]	; (800082c <MX_TIM4_Init+0xa8>)
 80007a6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80007a8:	4b1f      	ldr	r3, [pc, #124]	; (8000828 <MX_TIM4_Init+0xa4>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007ae:	4b1e      	ldr	r3, [pc, #120]	; (8000828 <MX_TIM4_Init+0xa4>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80007b4:	4b1c      	ldr	r3, [pc, #112]	; (8000828 <MX_TIM4_Init+0xa4>)
 80007b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80007ba:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007bc:	4b1a      	ldr	r3, [pc, #104]	; (8000828 <MX_TIM4_Init+0xa4>)
 80007be:	2200      	movs	r2, #0
 80007c0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007c2:	4b19      	ldr	r3, [pc, #100]	; (8000828 <MX_TIM4_Init+0xa4>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80007c8:	2301      	movs	r3, #1
 80007ca:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80007cc:	2300      	movs	r3, #0
 80007ce:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80007d0:	2301      	movs	r3, #1
 80007d2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80007d4:	2300      	movs	r3, #0
 80007d6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80007d8:	2300      	movs	r3, #0
 80007da:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80007dc:	2300      	movs	r3, #0
 80007de:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80007e0:	2301      	movs	r3, #1
 80007e2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80007e4:	2300      	movs	r3, #0
 80007e6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80007e8:	2300      	movs	r3, #0
 80007ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80007ec:	f107 030c 	add.w	r3, r7, #12
 80007f0:	4619      	mov	r1, r3
 80007f2:	480d      	ldr	r0, [pc, #52]	; (8000828 <MX_TIM4_Init+0xa4>)
 80007f4:	f003 fefe 	bl	80045f4 <HAL_TIM_Encoder_Init>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 80007fe:	f000 fbdf 	bl	8000fc0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000802:	2300      	movs	r3, #0
 8000804:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000806:	2300      	movs	r3, #0
 8000808:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800080a:	463b      	mov	r3, r7
 800080c:	4619      	mov	r1, r3
 800080e:	4806      	ldr	r0, [pc, #24]	; (8000828 <MX_TIM4_Init+0xa4>)
 8000810:	f004 fe86 	bl	8005520 <HAL_TIMEx_MasterConfigSynchronization>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d001      	beq.n	800081e <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 800081a:	f000 fbd1 	bl	8000fc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800081e:	bf00      	nop
 8000820:	3730      	adds	r7, #48	; 0x30
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	20000470 	.word	0x20000470
 800082c:	40000800 	.word	0x40000800

08000830 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b084      	sub	sp, #16
 8000834:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000836:	1d3b      	adds	r3, r7, #4
 8000838:	2200      	movs	r2, #0
 800083a:	601a      	str	r2, [r3, #0]
 800083c:	605a      	str	r2, [r3, #4]
 800083e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000840:	4b14      	ldr	r3, [pc, #80]	; (8000894 <MX_TIM6_Init+0x64>)
 8000842:	4a15      	ldr	r2, [pc, #84]	; (8000898 <MX_TIM6_Init+0x68>)
 8000844:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 25 - 1;
 8000846:	4b13      	ldr	r3, [pc, #76]	; (8000894 <MX_TIM6_Init+0x64>)
 8000848:	2218      	movs	r2, #24
 800084a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800084c:	4b11      	ldr	r3, [pc, #68]	; (8000894 <MX_TIM6_Init+0x64>)
 800084e:	2200      	movs	r2, #0
 8000850:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 63999;
 8000852:	4b10      	ldr	r3, [pc, #64]	; (8000894 <MX_TIM6_Init+0x64>)
 8000854:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8000858:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800085a:	4b0e      	ldr	r3, [pc, #56]	; (8000894 <MX_TIM6_Init+0x64>)
 800085c:	2200      	movs	r2, #0
 800085e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000860:	480c      	ldr	r0, [pc, #48]	; (8000894 <MX_TIM6_Init+0x64>)
 8000862:	f003 fcad 	bl	80041c0 <HAL_TIM_Base_Init>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d001      	beq.n	8000870 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 800086c:	f000 fba8 	bl	8000fc0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000870:	2300      	movs	r3, #0
 8000872:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000874:	2300      	movs	r3, #0
 8000876:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000878:	1d3b      	adds	r3, r7, #4
 800087a:	4619      	mov	r1, r3
 800087c:	4805      	ldr	r0, [pc, #20]	; (8000894 <MX_TIM6_Init+0x64>)
 800087e:	f004 fe4f 	bl	8005520 <HAL_TIMEx_MasterConfigSynchronization>
 8000882:	4603      	mov	r3, r0
 8000884:	2b00      	cmp	r3, #0
 8000886:	d001      	beq.n	800088c <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000888:	f000 fb9a 	bl	8000fc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800088c:	bf00      	nop
 800088e:	3710      	adds	r7, #16
 8000890:	46bd      	mov	sp, r7
 8000892:	bd80      	pop	{r7, pc}
 8000894:	200005a0 	.word	0x200005a0
 8000898:	40001000 	.word	0x40001000

0800089c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b098      	sub	sp, #96	; 0x60
 80008a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008a2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80008a6:	2200      	movs	r2, #0
 80008a8:	601a      	str	r2, [r3, #0]
 80008aa:	605a      	str	r2, [r3, #4]
 80008ac:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008ae:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80008b2:	2200      	movs	r2, #0
 80008b4:	601a      	str	r2, [r3, #0]
 80008b6:	605a      	str	r2, [r3, #4]
 80008b8:	609a      	str	r2, [r3, #8]
 80008ba:	60da      	str	r2, [r3, #12]
 80008bc:	611a      	str	r2, [r3, #16]
 80008be:	615a      	str	r2, [r3, #20]
 80008c0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80008c2:	1d3b      	adds	r3, r7, #4
 80008c4:	2234      	movs	r2, #52	; 0x34
 80008c6:	2100      	movs	r1, #0
 80008c8:	4618      	mov	r0, r3
 80008ca:	f009 f962 	bl	8009b92 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80008ce:	4b3b      	ldr	r3, [pc, #236]	; (80009bc <MX_TIM8_Init+0x120>)
 80008d0:	4a3b      	ldr	r2, [pc, #236]	; (80009c0 <MX_TIM8_Init+0x124>)
 80008d2:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 50 - 1;
 80008d4:	4b39      	ldr	r3, [pc, #228]	; (80009bc <MX_TIM8_Init+0x120>)
 80008d6:	2231      	movs	r2, #49	; 0x31
 80008d8:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008da:	4b38      	ldr	r3, [pc, #224]	; (80009bc <MX_TIM8_Init+0x120>)
 80008dc:	2200      	movs	r2, #0
 80008de:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 63999;
 80008e0:	4b36      	ldr	r3, [pc, #216]	; (80009bc <MX_TIM8_Init+0x120>)
 80008e2:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 80008e6:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008e8:	4b34      	ldr	r3, [pc, #208]	; (80009bc <MX_TIM8_Init+0x120>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80008ee:	4b33      	ldr	r3, [pc, #204]	; (80009bc <MX_TIM8_Init+0x120>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008f4:	4b31      	ldr	r3, [pc, #196]	; (80009bc <MX_TIM8_Init+0x120>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80008fa:	4830      	ldr	r0, [pc, #192]	; (80009bc <MX_TIM8_Init+0x120>)
 80008fc:	f003 fd22 	bl	8004344 <HAL_TIM_PWM_Init>
 8000900:	4603      	mov	r3, r0
 8000902:	2b00      	cmp	r3, #0
 8000904:	d001      	beq.n	800090a <MX_TIM8_Init+0x6e>
  {
    Error_Handler();
 8000906:	f000 fb5b 	bl	8000fc0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800090a:	2300      	movs	r3, #0
 800090c:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800090e:	2300      	movs	r3, #0
 8000910:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000912:	2300      	movs	r3, #0
 8000914:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000916:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800091a:	4619      	mov	r1, r3
 800091c:	4827      	ldr	r0, [pc, #156]	; (80009bc <MX_TIM8_Init+0x120>)
 800091e:	f004 fdff 	bl	8005520 <HAL_TIMEx_MasterConfigSynchronization>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	d001      	beq.n	800092c <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 8000928:	f000 fb4a 	bl	8000fc0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800092c:	2360      	movs	r3, #96	; 0x60
 800092e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8000930:	2300      	movs	r3, #0
 8000932:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000934:	2300      	movs	r3, #0
 8000936:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000938:	2300      	movs	r3, #0
 800093a:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800093c:	2300      	movs	r3, #0
 800093e:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000940:	2300      	movs	r3, #0
 8000942:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000944:	2300      	movs	r3, #0
 8000946:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000948:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800094c:	2200      	movs	r2, #0
 800094e:	4619      	mov	r1, r3
 8000950:	481a      	ldr	r0, [pc, #104]	; (80009bc <MX_TIM8_Init+0x120>)
 8000952:	f004 f901 	bl	8004b58 <HAL_TIM_PWM_ConfigChannel>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d001      	beq.n	8000960 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 800095c:	f000 fb30 	bl	8000fc0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000960:	2300      	movs	r3, #0
 8000962:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000964:	2300      	movs	r3, #0
 8000966:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000968:	2300      	movs	r3, #0
 800096a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800096c:	2300      	movs	r3, #0
 800096e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000970:	2300      	movs	r3, #0
 8000972:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000974:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000978:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800097a:	2300      	movs	r3, #0
 800097c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800097e:	2300      	movs	r3, #0
 8000980:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000982:	2300      	movs	r3, #0
 8000984:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000986:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800098a:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800098c:	2300      	movs	r3, #0
 800098e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000990:	2300      	movs	r3, #0
 8000992:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000994:	2300      	movs	r3, #0
 8000996:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8000998:	1d3b      	adds	r3, r7, #4
 800099a:	4619      	mov	r1, r3
 800099c:	4807      	ldr	r0, [pc, #28]	; (80009bc <MX_TIM8_Init+0x120>)
 800099e:	f004 fe41 	bl	8005624 <HAL_TIMEx_ConfigBreakDeadTime>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d001      	beq.n	80009ac <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 80009a8:	f000 fb0a 	bl	8000fc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80009ac:	4803      	ldr	r0, [pc, #12]	; (80009bc <MX_TIM8_Init+0x120>)
 80009ae:	f000 fc6d 	bl	800128c <HAL_TIM_MspPostInit>

}
 80009b2:	bf00      	nop
 80009b4:	3760      	adds	r7, #96	; 0x60
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	20000424 	.word	0x20000424
 80009c0:	40013400 	.word	0x40013400

080009c4 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b098      	sub	sp, #96	; 0x60
 80009c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009ca:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80009ce:	2200      	movs	r2, #0
 80009d0:	601a      	str	r2, [r3, #0]
 80009d2:	605a      	str	r2, [r3, #4]
 80009d4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009d6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80009da:	2200      	movs	r2, #0
 80009dc:	601a      	str	r2, [r3, #0]
 80009de:	605a      	str	r2, [r3, #4]
 80009e0:	609a      	str	r2, [r3, #8]
 80009e2:	60da      	str	r2, [r3, #12]
 80009e4:	611a      	str	r2, [r3, #16]
 80009e6:	615a      	str	r2, [r3, #20]
 80009e8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80009ea:	1d3b      	adds	r3, r7, #4
 80009ec:	2234      	movs	r2, #52	; 0x34
 80009ee:	2100      	movs	r1, #0
 80009f0:	4618      	mov	r0, r3
 80009f2:	f009 f8ce 	bl	8009b92 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80009f6:	4b34      	ldr	r3, [pc, #208]	; (8000ac8 <MX_TIM15_Init+0x104>)
 80009f8:	4a34      	ldr	r2, [pc, #208]	; (8000acc <MX_TIM15_Init+0x108>)
 80009fa:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 50 - 1;
 80009fc:	4b32      	ldr	r3, [pc, #200]	; (8000ac8 <MX_TIM15_Init+0x104>)
 80009fe:	2231      	movs	r2, #49	; 0x31
 8000a00:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a02:	4b31      	ldr	r3, [pc, #196]	; (8000ac8 <MX_TIM15_Init+0x104>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 63999;
 8000a08:	4b2f      	ldr	r3, [pc, #188]	; (8000ac8 <MX_TIM15_Init+0x104>)
 8000a0a:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8000a0e:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a10:	4b2d      	ldr	r3, [pc, #180]	; (8000ac8 <MX_TIM15_Init+0x104>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8000a16:	4b2c      	ldr	r3, [pc, #176]	; (8000ac8 <MX_TIM15_Init+0x104>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a1c:	4b2a      	ldr	r3, [pc, #168]	; (8000ac8 <MX_TIM15_Init+0x104>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8000a22:	4829      	ldr	r0, [pc, #164]	; (8000ac8 <MX_TIM15_Init+0x104>)
 8000a24:	f003 fc8e 	bl	8004344 <HAL_TIM_PWM_Init>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d001      	beq.n	8000a32 <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 8000a2e:	f000 fac7 	bl	8000fc0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a32:	2300      	movs	r3, #0
 8000a34:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a36:	2300      	movs	r3, #0
 8000a38:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8000a3a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000a3e:	4619      	mov	r1, r3
 8000a40:	4821      	ldr	r0, [pc, #132]	; (8000ac8 <MX_TIM15_Init+0x104>)
 8000a42:	f004 fd6d 	bl	8005520 <HAL_TIMEx_MasterConfigSynchronization>
 8000a46:	4603      	mov	r3, r0
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d001      	beq.n	8000a50 <MX_TIM15_Init+0x8c>
  {
    Error_Handler();
 8000a4c:	f000 fab8 	bl	8000fc0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a50:	2360      	movs	r3, #96	; 0x60
 8000a52:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8000a54:	2300      	movs	r3, #0
 8000a56:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a60:	2300      	movs	r3, #0
 8000a62:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000a64:	2300      	movs	r3, #0
 8000a66:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000a6c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000a70:	2204      	movs	r2, #4
 8000a72:	4619      	mov	r1, r3
 8000a74:	4814      	ldr	r0, [pc, #80]	; (8000ac8 <MX_TIM15_Init+0x104>)
 8000a76:	f004 f86f 	bl	8004b58 <HAL_TIM_PWM_ConfigChannel>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d001      	beq.n	8000a84 <MX_TIM15_Init+0xc0>
  {
    Error_Handler();
 8000a80:	f000 fa9e 	bl	8000fc0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000a84:	2300      	movs	r3, #0
 8000a86:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000a90:	2300      	movs	r3, #0
 8000a92:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000a94:	2300      	movs	r3, #0
 8000a96:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000a98:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a9c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8000aa6:	1d3b      	adds	r3, r7, #4
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	4807      	ldr	r0, [pc, #28]	; (8000ac8 <MX_TIM15_Init+0x104>)
 8000aac:	f004 fdba 	bl	8005624 <HAL_TIMEx_ConfigBreakDeadTime>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d001      	beq.n	8000aba <MX_TIM15_Init+0xf6>
  {
    Error_Handler();
 8000ab6:	f000 fa83 	bl	8000fc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8000aba:	4803      	ldr	r0, [pc, #12]	; (8000ac8 <MX_TIM15_Init+0x104>)
 8000abc:	f000 fbe6 	bl	800128c <HAL_TIM_MspPostInit>

}
 8000ac0:	bf00      	nop
 8000ac2:	3760      	adds	r7, #96	; 0x60
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	200004bc 	.word	0x200004bc
 8000acc:	40014000 	.word	0x40014000

08000ad0 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b094      	sub	sp, #80	; 0x50
 8000ad4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ad6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000ada:	2200      	movs	r2, #0
 8000adc:	601a      	str	r2, [r3, #0]
 8000ade:	605a      	str	r2, [r3, #4]
 8000ae0:	609a      	str	r2, [r3, #8]
 8000ae2:	60da      	str	r2, [r3, #12]
 8000ae4:	611a      	str	r2, [r3, #16]
 8000ae6:	615a      	str	r2, [r3, #20]
 8000ae8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000aea:	463b      	mov	r3, r7
 8000aec:	2234      	movs	r2, #52	; 0x34
 8000aee:	2100      	movs	r1, #0
 8000af0:	4618      	mov	r0, r3
 8000af2:	f009 f84e 	bl	8009b92 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000af6:	4b31      	ldr	r3, [pc, #196]	; (8000bbc <MX_TIM16_Init+0xec>)
 8000af8:	4a31      	ldr	r2, [pc, #196]	; (8000bc0 <MX_TIM16_Init+0xf0>)
 8000afa:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 50 - 1;
 8000afc:	4b2f      	ldr	r3, [pc, #188]	; (8000bbc <MX_TIM16_Init+0xec>)
 8000afe:	2231      	movs	r2, #49	; 0x31
 8000b00:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b02:	4b2e      	ldr	r3, [pc, #184]	; (8000bbc <MX_TIM16_Init+0xec>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 63999;
 8000b08:	4b2c      	ldr	r3, [pc, #176]	; (8000bbc <MX_TIM16_Init+0xec>)
 8000b0a:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8000b0e:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b10:	4b2a      	ldr	r3, [pc, #168]	; (8000bbc <MX_TIM16_Init+0xec>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000b16:	4b29      	ldr	r3, [pc, #164]	; (8000bbc <MX_TIM16_Init+0xec>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b1c:	4b27      	ldr	r3, [pc, #156]	; (8000bbc <MX_TIM16_Init+0xec>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000b22:	4826      	ldr	r0, [pc, #152]	; (8000bbc <MX_TIM16_Init+0xec>)
 8000b24:	f003 fb4c 	bl	80041c0 <HAL_TIM_Base_Init>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d001      	beq.n	8000b32 <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 8000b2e:	f000 fa47 	bl	8000fc0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8000b32:	4822      	ldr	r0, [pc, #136]	; (8000bbc <MX_TIM16_Init+0xec>)
 8000b34:	f003 fc06 	bl	8004344 <HAL_TIM_PWM_Init>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d001      	beq.n	8000b42 <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 8000b3e:	f000 fa3f 	bl	8000fc0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b42:	2360      	movs	r3, #96	; 0x60
 8000b44:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 0;
 8000b46:	2300      	movs	r3, #0
 8000b48:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b52:	2300      	movs	r3, #0
 8000b54:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000b56:	2300      	movs	r3, #0
 8000b58:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b5e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000b62:	2200      	movs	r2, #0
 8000b64:	4619      	mov	r1, r3
 8000b66:	4815      	ldr	r0, [pc, #84]	; (8000bbc <MX_TIM16_Init+0xec>)
 8000b68:	f003 fff6 	bl	8004b58 <HAL_TIM_PWM_ConfigChannel>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d001      	beq.n	8000b76 <MX_TIM16_Init+0xa6>
  {
    Error_Handler();
 8000b72:	f000 fa25 	bl	8000fc0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000b76:	2300      	movs	r3, #0
 8000b78:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000b82:	2300      	movs	r3, #0
 8000b84:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000b86:	2300      	movs	r3, #0
 8000b88:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000b8a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b8e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000b90:	2300      	movs	r3, #0
 8000b92:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000b94:	2300      	movs	r3, #0
 8000b96:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8000b98:	463b      	mov	r3, r7
 8000b9a:	4619      	mov	r1, r3
 8000b9c:	4807      	ldr	r0, [pc, #28]	; (8000bbc <MX_TIM16_Init+0xec>)
 8000b9e:	f004 fd41 	bl	8005624 <HAL_TIMEx_ConfigBreakDeadTime>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d001      	beq.n	8000bac <MX_TIM16_Init+0xdc>
  {
    Error_Handler();
 8000ba8:	f000 fa0a 	bl	8000fc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8000bac:	4803      	ldr	r0, [pc, #12]	; (8000bbc <MX_TIM16_Init+0xec>)
 8000bae:	f000 fb6d 	bl	800128c <HAL_TIM_MspPostInit>

}
 8000bb2:	bf00      	nop
 8000bb4:	3750      	adds	r7, #80	; 0x50
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	20000684 	.word	0x20000684
 8000bc0:	40014400 	.word	0x40014400

08000bc4 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b094      	sub	sp, #80	; 0x50
 8000bc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000bca:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000bce:	2200      	movs	r2, #0
 8000bd0:	601a      	str	r2, [r3, #0]
 8000bd2:	605a      	str	r2, [r3, #4]
 8000bd4:	609a      	str	r2, [r3, #8]
 8000bd6:	60da      	str	r2, [r3, #12]
 8000bd8:	611a      	str	r2, [r3, #16]
 8000bda:	615a      	str	r2, [r3, #20]
 8000bdc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000bde:	463b      	mov	r3, r7
 8000be0:	2234      	movs	r2, #52	; 0x34
 8000be2:	2100      	movs	r1, #0
 8000be4:	4618      	mov	r0, r3
 8000be6:	f008 ffd4 	bl	8009b92 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8000bea:	4b31      	ldr	r3, [pc, #196]	; (8000cb0 <MX_TIM17_Init+0xec>)
 8000bec:	4a31      	ldr	r2, [pc, #196]	; (8000cb4 <MX_TIM17_Init+0xf0>)
 8000bee:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 50 - 1;
 8000bf0:	4b2f      	ldr	r3, [pc, #188]	; (8000cb0 <MX_TIM17_Init+0xec>)
 8000bf2:	2231      	movs	r2, #49	; 0x31
 8000bf4:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bf6:	4b2e      	ldr	r3, [pc, #184]	; (8000cb0 <MX_TIM17_Init+0xec>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 63999;
 8000bfc:	4b2c      	ldr	r3, [pc, #176]	; (8000cb0 <MX_TIM17_Init+0xec>)
 8000bfe:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8000c02:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c04:	4b2a      	ldr	r3, [pc, #168]	; (8000cb0 <MX_TIM17_Init+0xec>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8000c0a:	4b29      	ldr	r3, [pc, #164]	; (8000cb0 <MX_TIM17_Init+0xec>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c10:	4b27      	ldr	r3, [pc, #156]	; (8000cb0 <MX_TIM17_Init+0xec>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8000c16:	4826      	ldr	r0, [pc, #152]	; (8000cb0 <MX_TIM17_Init+0xec>)
 8000c18:	f003 fad2 	bl	80041c0 <HAL_TIM_Base_Init>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d001      	beq.n	8000c26 <MX_TIM17_Init+0x62>
  {
    Error_Handler();
 8000c22:	f000 f9cd 	bl	8000fc0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 8000c26:	4822      	ldr	r0, [pc, #136]	; (8000cb0 <MX_TIM17_Init+0xec>)
 8000c28:	f003 fb8c 	bl	8004344 <HAL_TIM_PWM_Init>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d001      	beq.n	8000c36 <MX_TIM17_Init+0x72>
  {
    Error_Handler();
 8000c32:	f000 f9c5 	bl	8000fc0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c36:	2360      	movs	r3, #96	; 0x60
 8000c38:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 0;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000c42:	2300      	movs	r3, #0
 8000c44:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c46:	2300      	movs	r3, #0
 8000c48:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c52:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000c56:	2200      	movs	r2, #0
 8000c58:	4619      	mov	r1, r3
 8000c5a:	4815      	ldr	r0, [pc, #84]	; (8000cb0 <MX_TIM17_Init+0xec>)
 8000c5c:	f003 ff7c 	bl	8004b58 <HAL_TIM_PWM_ConfigChannel>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d001      	beq.n	8000c6a <MX_TIM17_Init+0xa6>
  {
    Error_Handler();
 8000c66:	f000 f9ab 	bl	8000fc0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000c72:	2300      	movs	r3, #0
 8000c74:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000c76:	2300      	movs	r3, #0
 8000c78:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000c7e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c82:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000c84:	2300      	movs	r3, #0
 8000c86:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8000c8c:	463b      	mov	r3, r7
 8000c8e:	4619      	mov	r1, r3
 8000c90:	4807      	ldr	r0, [pc, #28]	; (8000cb0 <MX_TIM17_Init+0xec>)
 8000c92:	f004 fcc7 	bl	8005624 <HAL_TIMEx_ConfigBreakDeadTime>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d001      	beq.n	8000ca0 <MX_TIM17_Init+0xdc>
  {
    Error_Handler();
 8000c9c:	f000 f990 	bl	8000fc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 8000ca0:	4803      	ldr	r0, [pc, #12]	; (8000cb0 <MX_TIM17_Init+0xec>)
 8000ca2:	f000 faf3 	bl	800128c <HAL_TIM_MspPostInit>

}
 8000ca6:	bf00      	nop
 8000ca8:	3750      	adds	r7, #80	; 0x50
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	20000508 	.word	0x20000508
 8000cb4:	40014800 	.word	0x40014800

08000cb8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b088      	sub	sp, #32
 8000cbc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cbe:	f107 030c 	add.w	r3, r7, #12
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	601a      	str	r2, [r3, #0]
 8000cc6:	605a      	str	r2, [r3, #4]
 8000cc8:	609a      	str	r2, [r3, #8]
 8000cca:	60da      	str	r2, [r3, #12]
 8000ccc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cce:	4b18      	ldr	r3, [pc, #96]	; (8000d30 <MX_GPIO_Init+0x78>)
 8000cd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cd2:	4a17      	ldr	r2, [pc, #92]	; (8000d30 <MX_GPIO_Init+0x78>)
 8000cd4:	f043 0301 	orr.w	r3, r3, #1
 8000cd8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cda:	4b15      	ldr	r3, [pc, #84]	; (8000d30 <MX_GPIO_Init+0x78>)
 8000cdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cde:	f003 0301 	and.w	r3, r3, #1
 8000ce2:	60bb      	str	r3, [r7, #8]
 8000ce4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ce6:	4b12      	ldr	r3, [pc, #72]	; (8000d30 <MX_GPIO_Init+0x78>)
 8000ce8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cea:	4a11      	ldr	r2, [pc, #68]	; (8000d30 <MX_GPIO_Init+0x78>)
 8000cec:	f043 0302 	orr.w	r3, r3, #2
 8000cf0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cf2:	4b0f      	ldr	r3, [pc, #60]	; (8000d30 <MX_GPIO_Init+0x78>)
 8000cf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cf6:	f003 0302 	and.w	r3, r3, #2
 8000cfa:	607b      	str	r3, [r7, #4]
 8000cfc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000cfe:	2200      	movs	r2, #0
 8000d00:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d04:	480b      	ldr	r0, [pc, #44]	; (8000d34 <MX_GPIO_Init+0x7c>)
 8000d06:	f000 ff21 	bl	8001b4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000d0a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d0e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d10:	2301      	movs	r3, #1
 8000d12:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d14:	2300      	movs	r3, #0
 8000d16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000d1c:	f107 030c 	add.w	r3, r7, #12
 8000d20:	4619      	mov	r1, r3
 8000d22:	4804      	ldr	r0, [pc, #16]	; (8000d34 <MX_GPIO_Init+0x7c>)
 8000d24:	f000 fd90 	bl	8001848 <HAL_GPIO_Init>

}
 8000d28:	bf00      	nop
 8000d2a:	3720      	adds	r7, #32
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	40021000 	.word	0x40021000
 8000d34:	48000400 	.word	0x48000400

08000d38 <PID>:

/* USER CODE BEGIN 4 */

int32_t PID(Motor* motor, int16_t position) {
 8000d38:	b480      	push	{r7}
 8000d3a:	b087      	sub	sp, #28
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
 8000d40:	460b      	mov	r3, r1
 8000d42:	807b      	strh	r3, [r7, #2]
	motor->position = position; // Update motor position from encoder output
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	887a      	ldrh	r2, [r7, #2]
 8000d48:	81da      	strh	r2, [r3, #14]
	motor->positionChange = ( position - motor->positionPrev );
 8000d4a:	887a      	ldrh	r2, [r7, #2]
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8000d52:	b29b      	uxth	r3, r3
 8000d54:	1ad3      	subs	r3, r2, r3
 8000d56:	b29b      	uxth	r3, r3
 8000d58:	b21a      	sxth	r2, r3
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	825a      	strh	r2, [r3, #18]
	motor->error = ( motor->setpoint - motor->positionChange ); // Update current PID error
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d64:	b29a      	uxth	r2, r3
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8000d6c:	b29b      	uxth	r3, r3
 8000d6e:	1ad3      	subs	r3, r2, r3
 8000d70:	b29b      	uxth	r3, r3
 8000d72:	b21a      	sxth	r2, r3
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	829a      	strh	r2, [r3, #20]
	motor->sumOfErrors += motor->error; // Add current PID error to PID sum of errors
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	699b      	ldr	r3, [r3, #24]
 8000d7c:	687a      	ldr	r2, [r7, #4]
 8000d7e:	f9b2 2014 	ldrsh.w	r2, [r2, #20]
 8000d82:	441a      	add	r2, r3
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	619a      	str	r2, [r3, #24]
	// PID sum of errors overflow check
	if (motor->sumOfErrors > (65535 / motor->iGain)) {
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	699a      	ldr	r2, [r3, #24]
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8000d92:	4619      	mov	r1, r3
 8000d94:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000d98:	fb93 f3f1 	sdiv	r3, r3, r1
 8000d9c:	429a      	cmp	r2, r3
 8000d9e:	dd0a      	ble.n	8000db6 <PID+0x7e>
		motor->sumOfErrors = (65535 / motor->iGain);
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8000da6:	461a      	mov	r2, r3
 8000da8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000dac:	fb93 f2f2 	sdiv	r2, r3, r2
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	619a      	str	r2, [r3, #24]
 8000db4:	e013      	b.n	8000dde <PID+0xa6>
	}
	else if (motor->sumOfErrors < -(65535 / motor->iGain)) {
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	699a      	ldr	r2, [r3, #24]
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	4b25      	ldr	r3, [pc, #148]	; (8000e58 <PID+0x120>)
 8000dc4:	fb93 f3f1 	sdiv	r3, r3, r1
 8000dc8:	429a      	cmp	r2, r3
 8000dca:	da08      	bge.n	8000dde <PID+0xa6>
		motor->sumOfErrors = -(65535 / motor->iGain);
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8000dd2:	461a      	mov	r2, r3
 8000dd4:	4b20      	ldr	r3, [pc, #128]	; (8000e58 <PID+0x120>)
 8000dd6:	fb93 f2f2 	sdiv	r2, r3, r2
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	619a      	str	r2, [r3, #24]
	}
	motor->positionPrev = position;
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	887a      	ldrh	r2, [r7, #2]
 8000de2:	821a      	strh	r2, [r3, #16]
	int32_t p = motor->pGain * motor->error;
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8000dea:	461a      	mov	r2, r3
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8000df2:	fb03 f302 	mul.w	r3, r3, r2
 8000df6:	617b      	str	r3, [r7, #20]
	int32_t i = motor->iGain * motor->sumOfErrors;
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8000dfe:	461a      	mov	r2, r3
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	699b      	ldr	r3, [r3, #24]
 8000e04:	fb03 f302 	mul.w	r3, r3, r2
 8000e08:	613b      	str	r3, [r7, #16]
	int32_t d = motor->dGain * motor->positionChange;
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8000e10:	461a      	mov	r2, r3
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8000e18:	fb03 f302 	mul.w	r3, r3, r2
 8000e1c:	60fb      	str	r3, [r7, #12]
	if (motor->setpoint == 0) { // Speed should be zero, reset all PID calculations
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d10b      	bne.n	8000e40 <PID+0x108>
		motor->error = 0;
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	829a      	strh	r2, [r3, #20]
		motor->sumOfErrors = 0;
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	2200      	movs	r2, #0
 8000e32:	619a      	str	r2, [r3, #24]
		p = 0;
 8000e34:	2300      	movs	r3, #0
 8000e36:	617b      	str	r3, [r7, #20]
		i = 0;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	613b      	str	r3, [r7, #16]
		d = 0;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	60fb      	str	r3, [r7, #12]
	}
	return (p + i + d); // Return PID controller output (speed)
 8000e40:	697a      	ldr	r2, [r7, #20]
 8000e42:	693b      	ldr	r3, [r7, #16]
 8000e44:	441a      	add	r2, r3
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	4413      	add	r3, r2
}
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	371c      	adds	r7, #28
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr
 8000e56:	bf00      	nop
 8000e58:	ffff0001 	.word	0xffff0001

08000e5c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b082      	sub	sp, #8
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
	// Second motor <=> J6 encoder socket <=> SECOND ENCODER
	// Third motor <=> J7 encoder socket <=> THIRD ENCODER
	// First motor <=> J3 encoder socket <=> FIRST ENCODER

	// Calculate PID and save PID controller output to motor speed
	motor1.speed = PID(&motor1, (int16_t)TIM1->CNT);
 8000e64:	4b4d      	ldr	r3, [pc, #308]	; (8000f9c <HAL_TIM_PeriodElapsedCallback+0x140>)
 8000e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e68:	b21b      	sxth	r3, r3
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	484c      	ldr	r0, [pc, #304]	; (8000fa0 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8000e6e:	f7ff ff63 	bl	8000d38 <PID>
 8000e72:	4602      	mov	r2, r0
 8000e74:	4b4a      	ldr	r3, [pc, #296]	; (8000fa0 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8000e76:	605a      	str	r2, [r3, #4]
	motor2.speed = PID(&motor2, (int16_t)TIM3->CNT);
 8000e78:	4b4a      	ldr	r3, [pc, #296]	; (8000fa4 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8000e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e7c:	b21b      	sxth	r3, r3
 8000e7e:	4619      	mov	r1, r3
 8000e80:	4849      	ldr	r0, [pc, #292]	; (8000fa8 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8000e82:	f7ff ff59 	bl	8000d38 <PID>
 8000e86:	4602      	mov	r2, r0
 8000e88:	4b47      	ldr	r3, [pc, #284]	; (8000fa8 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8000e8a:	605a      	str	r2, [r3, #4]
	motor3.speed = PID(&motor3, (int16_t)TIM4->CNT);
 8000e8c:	4b47      	ldr	r3, [pc, #284]	; (8000fac <HAL_TIM_PeriodElapsedCallback+0x150>)
 8000e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e90:	b21b      	sxth	r3, r3
 8000e92:	4619      	mov	r1, r3
 8000e94:	4846      	ldr	r0, [pc, #280]	; (8000fb0 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8000e96:	f7ff ff4f 	bl	8000d38 <PID>
 8000e9a:	4602      	mov	r2, r0
 8000e9c:	4b44      	ldr	r3, [pc, #272]	; (8000fb0 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8000e9e:	605a      	str	r2, [r3, #4]

	// Overflow check
	if (motor1.speed > 65535) {
 8000ea0:	4b3f      	ldr	r3, [pc, #252]	; (8000fa0 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8000ea2:	685b      	ldr	r3, [r3, #4]
 8000ea4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ea8:	db04      	blt.n	8000eb4 <HAL_TIM_PeriodElapsedCallback+0x58>
		motor1.speed = 65535;
 8000eaa:	4b3d      	ldr	r3, [pc, #244]	; (8000fa0 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8000eac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000eb0:	605a      	str	r2, [r3, #4]
 8000eb2:	e007      	b.n	8000ec4 <HAL_TIM_PeriodElapsedCallback+0x68>
	}
	else if (motor1.speed < -65535) {
 8000eb4:	4b3a      	ldr	r3, [pc, #232]	; (8000fa0 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8000eb6:	685b      	ldr	r3, [r3, #4]
 8000eb8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8000ebc:	dc02      	bgt.n	8000ec4 <HAL_TIM_PeriodElapsedCallback+0x68>
		motor1.speed = -65535;
 8000ebe:	4b38      	ldr	r3, [pc, #224]	; (8000fa0 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8000ec0:	4a3c      	ldr	r2, [pc, #240]	; (8000fb4 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8000ec2:	605a      	str	r2, [r3, #4]
	}

	if (motor2.speed > 65535) {
 8000ec4:	4b38      	ldr	r3, [pc, #224]	; (8000fa8 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8000ec6:	685b      	ldr	r3, [r3, #4]
 8000ec8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ecc:	db04      	blt.n	8000ed8 <HAL_TIM_PeriodElapsedCallback+0x7c>
		motor2.speed = 65535;
 8000ece:	4b36      	ldr	r3, [pc, #216]	; (8000fa8 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8000ed0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ed4:	605a      	str	r2, [r3, #4]
 8000ed6:	e007      	b.n	8000ee8 <HAL_TIM_PeriodElapsedCallback+0x8c>
	}
	else if (motor2.speed < -65535) {
 8000ed8:	4b33      	ldr	r3, [pc, #204]	; (8000fa8 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8000eda:	685b      	ldr	r3, [r3, #4]
 8000edc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8000ee0:	dc02      	bgt.n	8000ee8 <HAL_TIM_PeriodElapsedCallback+0x8c>
		motor2.speed = -65535;
 8000ee2:	4b31      	ldr	r3, [pc, #196]	; (8000fa8 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8000ee4:	4a33      	ldr	r2, [pc, #204]	; (8000fb4 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8000ee6:	605a      	str	r2, [r3, #4]
	}

	if (motor3.speed > 65535) {
 8000ee8:	4b31      	ldr	r3, [pc, #196]	; (8000fb0 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8000eea:	685b      	ldr	r3, [r3, #4]
 8000eec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ef0:	db04      	blt.n	8000efc <HAL_TIM_PeriodElapsedCallback+0xa0>
		motor3.speed = 65535;
 8000ef2:	4b2f      	ldr	r3, [pc, #188]	; (8000fb0 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8000ef4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ef8:	605a      	str	r2, [r3, #4]
 8000efa:	e007      	b.n	8000f0c <HAL_TIM_PeriodElapsedCallback+0xb0>
	}
	else if (motor3.speed < -65535) {
 8000efc:	4b2c      	ldr	r3, [pc, #176]	; (8000fb0 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8000efe:	685b      	ldr	r3, [r3, #4]
 8000f00:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8000f04:	dc02      	bgt.n	8000f0c <HAL_TIM_PeriodElapsedCallback+0xb0>
		motor3.speed = -65535;
 8000f06:	4b2a      	ldr	r3, [pc, #168]	; (8000fb0 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8000f08:	4a2a      	ldr	r2, [pc, #168]	; (8000fb4 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8000f0a:	605a      	str	r2, [r3, #4]
	}

	// Change PWM duty cycle by motor speed
	if (motor1.speed > 0) {
 8000f0c:	4b24      	ldr	r3, [pc, #144]	; (8000fa0 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8000f0e:	685b      	ldr	r3, [r3, #4]
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	dd09      	ble.n	8000f28 <HAL_TIM_PeriodElapsedCallback+0xcc>
		TIM2->CCR1 = motor1.speed;
 8000f14:	4b22      	ldr	r3, [pc, #136]	; (8000fa0 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8000f16:	685a      	ldr	r2, [r3, #4]
 8000f18:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f1c:	635a      	str	r2, [r3, #52]	; 0x34
		TIM2->CCR2 = 0;
 8000f1e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f22:	2200      	movs	r2, #0
 8000f24:	639a      	str	r2, [r3, #56]	; 0x38
 8000f26:	e009      	b.n	8000f3c <HAL_TIM_PeriodElapsedCallback+0xe0>
	}
	else {
		TIM2->CCR1 = 0;
 8000f28:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	635a      	str	r2, [r3, #52]	; 0x34
		TIM2->CCR2 = -motor1.speed;
 8000f30:	4b1b      	ldr	r3, [pc, #108]	; (8000fa0 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8000f32:	685b      	ldr	r3, [r3, #4]
 8000f34:	425a      	negs	r2, r3
 8000f36:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f3a:	639a      	str	r2, [r3, #56]	; 0x38
	}

	if (motor2.speed > 0) {
 8000f3c:	4b1a      	ldr	r3, [pc, #104]	; (8000fa8 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8000f3e:	685b      	ldr	r3, [r3, #4]
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	dd09      	ble.n	8000f58 <HAL_TIM_PeriodElapsedCallback+0xfc>
		TIM2->CCR3 = motor2.speed;
 8000f44:	4b18      	ldr	r3, [pc, #96]	; (8000fa8 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8000f46:	685a      	ldr	r2, [r3, #4]
 8000f48:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f4c:	63da      	str	r2, [r3, #60]	; 0x3c
		TIM2->CCR4 = 0;
 8000f4e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f52:	2200      	movs	r2, #0
 8000f54:	641a      	str	r2, [r3, #64]	; 0x40
 8000f56:	e009      	b.n	8000f6c <HAL_TIM_PeriodElapsedCallback+0x110>
	}
	else {
		TIM2->CCR3 = 0;
 8000f58:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	63da      	str	r2, [r3, #60]	; 0x3c
		TIM2->CCR4 = -motor2.speed;
 8000f60:	4b11      	ldr	r3, [pc, #68]	; (8000fa8 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8000f62:	685b      	ldr	r3, [r3, #4]
 8000f64:	425a      	negs	r2, r3
 8000f66:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f6a:	641a      	str	r2, [r3, #64]	; 0x40
	}

	if (motor3.speed > 0) {
 8000f6c:	4b10      	ldr	r3, [pc, #64]	; (8000fb0 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8000f6e:	685b      	ldr	r3, [r3, #4]
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	dd07      	ble.n	8000f84 <HAL_TIM_PeriodElapsedCallback+0x128>
		TIM16->CCR1 = motor3.speed;
 8000f74:	4b0e      	ldr	r3, [pc, #56]	; (8000fb0 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8000f76:	685a      	ldr	r2, [r3, #4]
 8000f78:	4b0f      	ldr	r3, [pc, #60]	; (8000fb8 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8000f7a:	635a      	str	r2, [r3, #52]	; 0x34
		TIM17->CCR1 = 0;
 8000f7c:	4b0f      	ldr	r3, [pc, #60]	; (8000fbc <HAL_TIM_PeriodElapsedCallback+0x160>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	635a      	str	r2, [r3, #52]	; 0x34
	}
	else {
		TIM16->CCR1 = 0;
		TIM17->CCR1 = -motor3.speed;
	}
}
 8000f82:	e007      	b.n	8000f94 <HAL_TIM_PeriodElapsedCallback+0x138>
		TIM16->CCR1 = 0;
 8000f84:	4b0c      	ldr	r3, [pc, #48]	; (8000fb8 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	635a      	str	r2, [r3, #52]	; 0x34
		TIM17->CCR1 = -motor3.speed;
 8000f8a:	4b09      	ldr	r3, [pc, #36]	; (8000fb0 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8000f8c:	685b      	ldr	r3, [r3, #4]
 8000f8e:	425a      	negs	r2, r3
 8000f90:	4b0a      	ldr	r3, [pc, #40]	; (8000fbc <HAL_TIM_PeriodElapsedCallback+0x160>)
 8000f92:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000f94:	bf00      	nop
 8000f96:	3708      	adds	r7, #8
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	40012c00 	.word	0x40012c00
 8000fa0:	20000000 	.word	0x20000000
 8000fa4:	40000400 	.word	0x40000400
 8000fa8:	2000001c 	.word	0x2000001c
 8000fac:	40000800 	.word	0x40000800
 8000fb0:	20000038 	.word	0x20000038
 8000fb4:	ffff0001 	.word	0xffff0001
 8000fb8:	40014400 	.word	0x40014400
 8000fbc:	40014800 	.word	0x40014800

08000fc0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000fc4:	bf00      	nop
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr
	...

08000fd0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fd6:	4b0f      	ldr	r3, [pc, #60]	; (8001014 <HAL_MspInit+0x44>)
 8000fd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fda:	4a0e      	ldr	r2, [pc, #56]	; (8001014 <HAL_MspInit+0x44>)
 8000fdc:	f043 0301 	orr.w	r3, r3, #1
 8000fe0:	6613      	str	r3, [r2, #96]	; 0x60
 8000fe2:	4b0c      	ldr	r3, [pc, #48]	; (8001014 <HAL_MspInit+0x44>)
 8000fe4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fe6:	f003 0301 	and.w	r3, r3, #1
 8000fea:	607b      	str	r3, [r7, #4]
 8000fec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fee:	4b09      	ldr	r3, [pc, #36]	; (8001014 <HAL_MspInit+0x44>)
 8000ff0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ff2:	4a08      	ldr	r2, [pc, #32]	; (8001014 <HAL_MspInit+0x44>)
 8000ff4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ff8:	6593      	str	r3, [r2, #88]	; 0x58
 8000ffa:	4b06      	ldr	r3, [pc, #24]	; (8001014 <HAL_MspInit+0x44>)
 8000ffc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ffe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001002:	603b      	str	r3, [r7, #0]
 8001004:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001006:	f002 f9df 	bl	80033c8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800100a:	bf00      	nop
 800100c:	3708      	adds	r7, #8
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	40021000 	.word	0x40021000

08001018 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b08e      	sub	sp, #56	; 0x38
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001020:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001024:	2200      	movs	r2, #0
 8001026:	601a      	str	r2, [r3, #0]
 8001028:	605a      	str	r2, [r3, #4]
 800102a:	609a      	str	r2, [r3, #8]
 800102c:	60da      	str	r2, [r3, #12]
 800102e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	4a46      	ldr	r2, [pc, #280]	; (8001150 <HAL_TIM_Encoder_MspInit+0x138>)
 8001036:	4293      	cmp	r3, r2
 8001038:	d12a      	bne.n	8001090 <HAL_TIM_Encoder_MspInit+0x78>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800103a:	4b46      	ldr	r3, [pc, #280]	; (8001154 <HAL_TIM_Encoder_MspInit+0x13c>)
 800103c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800103e:	4a45      	ldr	r2, [pc, #276]	; (8001154 <HAL_TIM_Encoder_MspInit+0x13c>)
 8001040:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001044:	6613      	str	r3, [r2, #96]	; 0x60
 8001046:	4b43      	ldr	r3, [pc, #268]	; (8001154 <HAL_TIM_Encoder_MspInit+0x13c>)
 8001048:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800104a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800104e:	623b      	str	r3, [r7, #32]
 8001050:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001052:	4b40      	ldr	r3, [pc, #256]	; (8001154 <HAL_TIM_Encoder_MspInit+0x13c>)
 8001054:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001056:	4a3f      	ldr	r2, [pc, #252]	; (8001154 <HAL_TIM_Encoder_MspInit+0x13c>)
 8001058:	f043 0301 	orr.w	r3, r3, #1
 800105c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800105e:	4b3d      	ldr	r3, [pc, #244]	; (8001154 <HAL_TIM_Encoder_MspInit+0x13c>)
 8001060:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001062:	f003 0301 	and.w	r3, r3, #1
 8001066:	61fb      	str	r3, [r7, #28]
 8001068:	69fb      	ldr	r3, [r7, #28]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800106a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800106e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001070:	2302      	movs	r3, #2
 8001072:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001074:	2300      	movs	r3, #0
 8001076:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001078:	2300      	movs	r3, #0
 800107a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 800107c:	2306      	movs	r3, #6
 800107e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001080:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001084:	4619      	mov	r1, r3
 8001086:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800108a:	f000 fbdd 	bl	8001848 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800108e:	e05a      	b.n	8001146 <HAL_TIM_Encoder_MspInit+0x12e>
  else if(htim_encoder->Instance==TIM3)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	4a30      	ldr	r2, [pc, #192]	; (8001158 <HAL_TIM_Encoder_MspInit+0x140>)
 8001096:	4293      	cmp	r3, r2
 8001098:	d128      	bne.n	80010ec <HAL_TIM_Encoder_MspInit+0xd4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800109a:	4b2e      	ldr	r3, [pc, #184]	; (8001154 <HAL_TIM_Encoder_MspInit+0x13c>)
 800109c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800109e:	4a2d      	ldr	r2, [pc, #180]	; (8001154 <HAL_TIM_Encoder_MspInit+0x13c>)
 80010a0:	f043 0302 	orr.w	r3, r3, #2
 80010a4:	6593      	str	r3, [r2, #88]	; 0x58
 80010a6:	4b2b      	ldr	r3, [pc, #172]	; (8001154 <HAL_TIM_Encoder_MspInit+0x13c>)
 80010a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010aa:	f003 0302 	and.w	r3, r3, #2
 80010ae:	61bb      	str	r3, [r7, #24]
 80010b0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010b2:	4b28      	ldr	r3, [pc, #160]	; (8001154 <HAL_TIM_Encoder_MspInit+0x13c>)
 80010b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010b6:	4a27      	ldr	r2, [pc, #156]	; (8001154 <HAL_TIM_Encoder_MspInit+0x13c>)
 80010b8:	f043 0302 	orr.w	r3, r3, #2
 80010bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010be:	4b25      	ldr	r3, [pc, #148]	; (8001154 <HAL_TIM_Encoder_MspInit+0x13c>)
 80010c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010c2:	f003 0302 	and.w	r3, r3, #2
 80010c6:	617b      	str	r3, [r7, #20]
 80010c8:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80010ca:	2330      	movs	r3, #48	; 0x30
 80010cc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ce:	2302      	movs	r3, #2
 80010d0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d2:	2300      	movs	r3, #0
 80010d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010d6:	2300      	movs	r3, #0
 80010d8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80010da:	2302      	movs	r3, #2
 80010dc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010e2:	4619      	mov	r1, r3
 80010e4:	481d      	ldr	r0, [pc, #116]	; (800115c <HAL_TIM_Encoder_MspInit+0x144>)
 80010e6:	f000 fbaf 	bl	8001848 <HAL_GPIO_Init>
}
 80010ea:	e02c      	b.n	8001146 <HAL_TIM_Encoder_MspInit+0x12e>
  else if(htim_encoder->Instance==TIM4)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4a1b      	ldr	r2, [pc, #108]	; (8001160 <HAL_TIM_Encoder_MspInit+0x148>)
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d127      	bne.n	8001146 <HAL_TIM_Encoder_MspInit+0x12e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80010f6:	4b17      	ldr	r3, [pc, #92]	; (8001154 <HAL_TIM_Encoder_MspInit+0x13c>)
 80010f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010fa:	4a16      	ldr	r2, [pc, #88]	; (8001154 <HAL_TIM_Encoder_MspInit+0x13c>)
 80010fc:	f043 0304 	orr.w	r3, r3, #4
 8001100:	6593      	str	r3, [r2, #88]	; 0x58
 8001102:	4b14      	ldr	r3, [pc, #80]	; (8001154 <HAL_TIM_Encoder_MspInit+0x13c>)
 8001104:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001106:	f003 0304 	and.w	r3, r3, #4
 800110a:	613b      	str	r3, [r7, #16]
 800110c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800110e:	4b11      	ldr	r3, [pc, #68]	; (8001154 <HAL_TIM_Encoder_MspInit+0x13c>)
 8001110:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001112:	4a10      	ldr	r2, [pc, #64]	; (8001154 <HAL_TIM_Encoder_MspInit+0x13c>)
 8001114:	f043 0302 	orr.w	r3, r3, #2
 8001118:	64d3      	str	r3, [r2, #76]	; 0x4c
 800111a:	4b0e      	ldr	r3, [pc, #56]	; (8001154 <HAL_TIM_Encoder_MspInit+0x13c>)
 800111c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800111e:	f003 0302 	and.w	r3, r3, #2
 8001122:	60fb      	str	r3, [r7, #12]
 8001124:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001126:	23c0      	movs	r3, #192	; 0xc0
 8001128:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800112a:	2302      	movs	r3, #2
 800112c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112e:	2300      	movs	r3, #0
 8001130:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001132:	2300      	movs	r3, #0
 8001134:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001136:	2302      	movs	r3, #2
 8001138:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800113a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800113e:	4619      	mov	r1, r3
 8001140:	4806      	ldr	r0, [pc, #24]	; (800115c <HAL_TIM_Encoder_MspInit+0x144>)
 8001142:	f000 fb81 	bl	8001848 <HAL_GPIO_Init>
}
 8001146:	bf00      	nop
 8001148:	3738      	adds	r7, #56	; 0x38
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	40012c00 	.word	0x40012c00
 8001154:	40021000 	.word	0x40021000
 8001158:	40000400 	.word	0x40000400
 800115c:	48000400 	.word	0x48000400
 8001160:	40000800 	.word	0x40000800

08001164 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001164:	b480      	push	{r7}
 8001166:	b087      	sub	sp, #28
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001174:	d10c      	bne.n	8001190 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001176:	4b1b      	ldr	r3, [pc, #108]	; (80011e4 <HAL_TIM_PWM_MspInit+0x80>)
 8001178:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800117a:	4a1a      	ldr	r2, [pc, #104]	; (80011e4 <HAL_TIM_PWM_MspInit+0x80>)
 800117c:	f043 0301 	orr.w	r3, r3, #1
 8001180:	6593      	str	r3, [r2, #88]	; 0x58
 8001182:	4b18      	ldr	r3, [pc, #96]	; (80011e4 <HAL_TIM_PWM_MspInit+0x80>)
 8001184:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001186:	f003 0301 	and.w	r3, r3, #1
 800118a:	617b      	str	r3, [r7, #20]
 800118c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 800118e:	e022      	b.n	80011d6 <HAL_TIM_PWM_MspInit+0x72>
  else if(htim_pwm->Instance==TIM8)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	4a14      	ldr	r2, [pc, #80]	; (80011e8 <HAL_TIM_PWM_MspInit+0x84>)
 8001196:	4293      	cmp	r3, r2
 8001198:	d10c      	bne.n	80011b4 <HAL_TIM_PWM_MspInit+0x50>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800119a:	4b12      	ldr	r3, [pc, #72]	; (80011e4 <HAL_TIM_PWM_MspInit+0x80>)
 800119c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800119e:	4a11      	ldr	r2, [pc, #68]	; (80011e4 <HAL_TIM_PWM_MspInit+0x80>)
 80011a0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80011a4:	6613      	str	r3, [r2, #96]	; 0x60
 80011a6:	4b0f      	ldr	r3, [pc, #60]	; (80011e4 <HAL_TIM_PWM_MspInit+0x80>)
 80011a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011aa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80011ae:	613b      	str	r3, [r7, #16]
 80011b0:	693b      	ldr	r3, [r7, #16]
}
 80011b2:	e010      	b.n	80011d6 <HAL_TIM_PWM_MspInit+0x72>
  else if(htim_pwm->Instance==TIM15)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	4a0c      	ldr	r2, [pc, #48]	; (80011ec <HAL_TIM_PWM_MspInit+0x88>)
 80011ba:	4293      	cmp	r3, r2
 80011bc:	d10b      	bne.n	80011d6 <HAL_TIM_PWM_MspInit+0x72>
    __HAL_RCC_TIM15_CLK_ENABLE();
 80011be:	4b09      	ldr	r3, [pc, #36]	; (80011e4 <HAL_TIM_PWM_MspInit+0x80>)
 80011c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011c2:	4a08      	ldr	r2, [pc, #32]	; (80011e4 <HAL_TIM_PWM_MspInit+0x80>)
 80011c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011c8:	6613      	str	r3, [r2, #96]	; 0x60
 80011ca:	4b06      	ldr	r3, [pc, #24]	; (80011e4 <HAL_TIM_PWM_MspInit+0x80>)
 80011cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011d2:	60fb      	str	r3, [r7, #12]
 80011d4:	68fb      	ldr	r3, [r7, #12]
}
 80011d6:	bf00      	nop
 80011d8:	371c      	adds	r7, #28
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr
 80011e2:	bf00      	nop
 80011e4:	40021000 	.word	0x40021000
 80011e8:	40013400 	.word	0x40013400
 80011ec:	40014000 	.word	0x40014000

080011f0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b086      	sub	sp, #24
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	4a1f      	ldr	r2, [pc, #124]	; (800127c <HAL_TIM_Base_MspInit+0x8c>)
 80011fe:	4293      	cmp	r3, r2
 8001200:	d114      	bne.n	800122c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001202:	4b1f      	ldr	r3, [pc, #124]	; (8001280 <HAL_TIM_Base_MspInit+0x90>)
 8001204:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001206:	4a1e      	ldr	r2, [pc, #120]	; (8001280 <HAL_TIM_Base_MspInit+0x90>)
 8001208:	f043 0310 	orr.w	r3, r3, #16
 800120c:	6593      	str	r3, [r2, #88]	; 0x58
 800120e:	4b1c      	ldr	r3, [pc, #112]	; (8001280 <HAL_TIM_Base_MspInit+0x90>)
 8001210:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001212:	f003 0310 	and.w	r3, r3, #16
 8001216:	617b      	str	r3, [r7, #20]
 8001218:	697b      	ldr	r3, [r7, #20]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800121a:	2200      	movs	r2, #0
 800121c:	2100      	movs	r1, #0
 800121e:	2036      	movs	r0, #54	; 0x36
 8001220:	f000 fadd 	bl	80017de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001224:	2036      	movs	r0, #54	; 0x36
 8001226:	f000 faf4 	bl	8001812 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 800122a:	e022      	b.n	8001272 <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM16)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4a14      	ldr	r2, [pc, #80]	; (8001284 <HAL_TIM_Base_MspInit+0x94>)
 8001232:	4293      	cmp	r3, r2
 8001234:	d10c      	bne.n	8001250 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001236:	4b12      	ldr	r3, [pc, #72]	; (8001280 <HAL_TIM_Base_MspInit+0x90>)
 8001238:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800123a:	4a11      	ldr	r2, [pc, #68]	; (8001280 <HAL_TIM_Base_MspInit+0x90>)
 800123c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001240:	6613      	str	r3, [r2, #96]	; 0x60
 8001242:	4b0f      	ldr	r3, [pc, #60]	; (8001280 <HAL_TIM_Base_MspInit+0x90>)
 8001244:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001246:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800124a:	613b      	str	r3, [r7, #16]
 800124c:	693b      	ldr	r3, [r7, #16]
}
 800124e:	e010      	b.n	8001272 <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM17)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4a0c      	ldr	r2, [pc, #48]	; (8001288 <HAL_TIM_Base_MspInit+0x98>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d10b      	bne.n	8001272 <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM17_CLK_ENABLE();
 800125a:	4b09      	ldr	r3, [pc, #36]	; (8001280 <HAL_TIM_Base_MspInit+0x90>)
 800125c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800125e:	4a08      	ldr	r2, [pc, #32]	; (8001280 <HAL_TIM_Base_MspInit+0x90>)
 8001260:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001264:	6613      	str	r3, [r2, #96]	; 0x60
 8001266:	4b06      	ldr	r3, [pc, #24]	; (8001280 <HAL_TIM_Base_MspInit+0x90>)
 8001268:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800126a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800126e:	60fb      	str	r3, [r7, #12]
 8001270:	68fb      	ldr	r3, [r7, #12]
}
 8001272:	bf00      	nop
 8001274:	3718      	adds	r7, #24
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	40001000 	.word	0x40001000
 8001280:	40021000 	.word	0x40021000
 8001284:	40014400 	.word	0x40014400
 8001288:	40014800 	.word	0x40014800

0800128c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b08c      	sub	sp, #48	; 0x30
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001294:	f107 031c 	add.w	r3, r7, #28
 8001298:	2200      	movs	r2, #0
 800129a:	601a      	str	r2, [r3, #0]
 800129c:	605a      	str	r2, [r3, #4]
 800129e:	609a      	str	r2, [r3, #8]
 80012a0:	60da      	str	r2, [r3, #12]
 80012a2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80012ac:	d12f      	bne.n	800130e <HAL_TIM_MspPostInit+0x82>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ae:	4b60      	ldr	r3, [pc, #384]	; (8001430 <HAL_TIM_MspPostInit+0x1a4>)
 80012b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012b2:	4a5f      	ldr	r2, [pc, #380]	; (8001430 <HAL_TIM_MspPostInit+0x1a4>)
 80012b4:	f043 0301 	orr.w	r3, r3, #1
 80012b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012ba:	4b5d      	ldr	r3, [pc, #372]	; (8001430 <HAL_TIM_MspPostInit+0x1a4>)
 80012bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012be:	f003 0301 	and.w	r3, r3, #1
 80012c2:	61bb      	str	r3, [r7, #24]
 80012c4:	69bb      	ldr	r3, [r7, #24]
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA10     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 80012c6:	2307      	movs	r3, #7
 80012c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ca:	2302      	movs	r3, #2
 80012cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ce:	2300      	movs	r3, #0
 80012d0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012d2:	2300      	movs	r3, #0
 80012d4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80012d6:	2301      	movs	r3, #1
 80012d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012da:	f107 031c 	add.w	r3, r7, #28
 80012de:	4619      	mov	r1, r3
 80012e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012e4:	f000 fab0 	bl	8001848 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80012e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ee:	2302      	movs	r3, #2
 80012f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f2:	2300      	movs	r3, #0
 80012f4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012f6:	2300      	movs	r3, #0
 80012f8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM2;
 80012fa:	230a      	movs	r3, #10
 80012fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012fe:	f107 031c 	add.w	r3, r7, #28
 8001302:	4619      	mov	r1, r3
 8001304:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001308:	f000 fa9e 	bl	8001848 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 800130c:	e08b      	b.n	8001426 <HAL_TIM_MspPostInit+0x19a>
  else if(htim->Instance==TIM8)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	4a48      	ldr	r2, [pc, #288]	; (8001434 <HAL_TIM_MspPostInit+0x1a8>)
 8001314:	4293      	cmp	r3, r2
 8001316:	d11e      	bne.n	8001356 <HAL_TIM_MspPostInit+0xca>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001318:	4b45      	ldr	r3, [pc, #276]	; (8001430 <HAL_TIM_MspPostInit+0x1a4>)
 800131a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800131c:	4a44      	ldr	r2, [pc, #272]	; (8001430 <HAL_TIM_MspPostInit+0x1a4>)
 800131e:	f043 0301 	orr.w	r3, r3, #1
 8001322:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001324:	4b42      	ldr	r3, [pc, #264]	; (8001430 <HAL_TIM_MspPostInit+0x1a4>)
 8001326:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001328:	f003 0301 	and.w	r3, r3, #1
 800132c:	617b      	str	r3, [r7, #20]
 800132e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001330:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001334:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001336:	2302      	movs	r3, #2
 8001338:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133a:	2300      	movs	r3, #0
 800133c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800133e:	2300      	movs	r3, #0
 8001340:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM8;
 8001342:	2302      	movs	r3, #2
 8001344:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001346:	f107 031c 	add.w	r3, r7, #28
 800134a:	4619      	mov	r1, r3
 800134c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001350:	f000 fa7a 	bl	8001848 <HAL_GPIO_Init>
}
 8001354:	e067      	b.n	8001426 <HAL_TIM_MspPostInit+0x19a>
  else if(htim->Instance==TIM15)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	4a37      	ldr	r2, [pc, #220]	; (8001438 <HAL_TIM_MspPostInit+0x1ac>)
 800135c:	4293      	cmp	r3, r2
 800135e:	d11d      	bne.n	800139c <HAL_TIM_MspPostInit+0x110>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001360:	4b33      	ldr	r3, [pc, #204]	; (8001430 <HAL_TIM_MspPostInit+0x1a4>)
 8001362:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001364:	4a32      	ldr	r2, [pc, #200]	; (8001430 <HAL_TIM_MspPostInit+0x1a4>)
 8001366:	f043 0301 	orr.w	r3, r3, #1
 800136a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800136c:	4b30      	ldr	r3, [pc, #192]	; (8001430 <HAL_TIM_MspPostInit+0x1a4>)
 800136e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001370:	f003 0301 	and.w	r3, r3, #1
 8001374:	613b      	str	r3, [r7, #16]
 8001376:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001378:	2308      	movs	r3, #8
 800137a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800137c:	2302      	movs	r3, #2
 800137e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001380:	2300      	movs	r3, #0
 8001382:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001384:	2300      	movs	r3, #0
 8001386:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM15;
 8001388:	2309      	movs	r3, #9
 800138a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800138c:	f107 031c 	add.w	r3, r7, #28
 8001390:	4619      	mov	r1, r3
 8001392:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001396:	f000 fa57 	bl	8001848 <HAL_GPIO_Init>
}
 800139a:	e044      	b.n	8001426 <HAL_TIM_MspPostInit+0x19a>
  else if(htim->Instance==TIM16)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4a26      	ldr	r2, [pc, #152]	; (800143c <HAL_TIM_MspPostInit+0x1b0>)
 80013a2:	4293      	cmp	r3, r2
 80013a4:	d11d      	bne.n	80013e2 <HAL_TIM_MspPostInit+0x156>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013a6:	4b22      	ldr	r3, [pc, #136]	; (8001430 <HAL_TIM_MspPostInit+0x1a4>)
 80013a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013aa:	4a21      	ldr	r2, [pc, #132]	; (8001430 <HAL_TIM_MspPostInit+0x1a4>)
 80013ac:	f043 0301 	orr.w	r3, r3, #1
 80013b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013b2:	4b1f      	ldr	r3, [pc, #124]	; (8001430 <HAL_TIM_MspPostInit+0x1a4>)
 80013b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013b6:	f003 0301 	and.w	r3, r3, #1
 80013ba:	60fb      	str	r3, [r7, #12]
 80013bc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80013be:	2340      	movs	r3, #64	; 0x40
 80013c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013c2:	2302      	movs	r3, #2
 80013c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c6:	2300      	movs	r3, #0
 80013c8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ca:	2300      	movs	r3, #0
 80013cc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 80013ce:	2301      	movs	r3, #1
 80013d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013d2:	f107 031c 	add.w	r3, r7, #28
 80013d6:	4619      	mov	r1, r3
 80013d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013dc:	f000 fa34 	bl	8001848 <HAL_GPIO_Init>
}
 80013e0:	e021      	b.n	8001426 <HAL_TIM_MspPostInit+0x19a>
  else if(htim->Instance==TIM17)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	4a16      	ldr	r2, [pc, #88]	; (8001440 <HAL_TIM_MspPostInit+0x1b4>)
 80013e8:	4293      	cmp	r3, r2
 80013ea:	d11c      	bne.n	8001426 <HAL_TIM_MspPostInit+0x19a>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ec:	4b10      	ldr	r3, [pc, #64]	; (8001430 <HAL_TIM_MspPostInit+0x1a4>)
 80013ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013f0:	4a0f      	ldr	r2, [pc, #60]	; (8001430 <HAL_TIM_MspPostInit+0x1a4>)
 80013f2:	f043 0301 	orr.w	r3, r3, #1
 80013f6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013f8:	4b0d      	ldr	r3, [pc, #52]	; (8001430 <HAL_TIM_MspPostInit+0x1a4>)
 80013fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013fc:	f003 0301 	and.w	r3, r3, #1
 8001400:	60bb      	str	r3, [r7, #8]
 8001402:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001404:	2380      	movs	r3, #128	; 0x80
 8001406:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001408:	2302      	movs	r3, #2
 800140a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140c:	2300      	movs	r3, #0
 800140e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001410:	2300      	movs	r3, #0
 8001412:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM17;
 8001414:	2301      	movs	r3, #1
 8001416:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001418:	f107 031c 	add.w	r3, r7, #28
 800141c:	4619      	mov	r1, r3
 800141e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001422:	f000 fa11 	bl	8001848 <HAL_GPIO_Init>
}
 8001426:	bf00      	nop
 8001428:	3730      	adds	r7, #48	; 0x30
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	40021000 	.word	0x40021000
 8001434:	40013400 	.word	0x40013400
 8001438:	40014000 	.word	0x40014000
 800143c:	40014400 	.word	0x40014400
 8001440:	40014800 	.word	0x40014800

08001444 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001448:	bf00      	nop
 800144a:	46bd      	mov	sp, r7
 800144c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001450:	4770      	bx	lr

08001452 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001452:	b480      	push	{r7}
 8001454:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001456:	e7fe      	b.n	8001456 <HardFault_Handler+0x4>

08001458 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001458:	b480      	push	{r7}
 800145a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800145c:	e7fe      	b.n	800145c <MemManage_Handler+0x4>

0800145e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800145e:	b480      	push	{r7}
 8001460:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001462:	e7fe      	b.n	8001462 <BusFault_Handler+0x4>

08001464 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001464:	b480      	push	{r7}
 8001466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001468:	e7fe      	b.n	8001468 <UsageFault_Handler+0x4>

0800146a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800146a:	b480      	push	{r7}
 800146c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800146e:	bf00      	nop
 8001470:	46bd      	mov	sp, r7
 8001472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001476:	4770      	bx	lr

08001478 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800147c:	bf00      	nop
 800147e:	46bd      	mov	sp, r7
 8001480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001484:	4770      	bx	lr

08001486 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001486:	b480      	push	{r7}
 8001488:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800148a:	bf00      	nop
 800148c:	46bd      	mov	sp, r7
 800148e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001492:	4770      	bx	lr

08001494 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001498:	f000 f8a8 	bl	80015ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800149c:	bf00      	nop
 800149e:	bd80      	pop	{r7, pc}

080014a0 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80014a4:	4802      	ldr	r0, [pc, #8]	; (80014b0 <USB_LP_IRQHandler+0x10>)
 80014a6:	f000 fc8a 	bl	8001dbe <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 80014aa:	bf00      	nop
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	20001374 	.word	0x20001374

080014b4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80014b8:	4802      	ldr	r0, [pc, #8]	; (80014c4 <TIM6_DAC_IRQHandler+0x10>)
 80014ba:	f003 f9ce 	bl	800485a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80014be:	bf00      	nop
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	200005a0 	.word	0x200005a0

080014c8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80014cc:	4b08      	ldr	r3, [pc, #32]	; (80014f0 <SystemInit+0x28>)
 80014ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014d2:	4a07      	ldr	r2, [pc, #28]	; (80014f0 <SystemInit+0x28>)
 80014d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80014dc:	4b04      	ldr	r3, [pc, #16]	; (80014f0 <SystemInit+0x28>)
 80014de:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80014e2:	609a      	str	r2, [r3, #8]
#endif
}
 80014e4:	bf00      	nop
 80014e6:	46bd      	mov	sp, r7
 80014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ec:	4770      	bx	lr
 80014ee:	bf00      	nop
 80014f0:	e000ed00 	.word	0xe000ed00

080014f4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80014f4:	480d      	ldr	r0, [pc, #52]	; (800152c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80014f6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014f8:	480d      	ldr	r0, [pc, #52]	; (8001530 <LoopForever+0x6>)
  ldr r1, =_edata
 80014fa:	490e      	ldr	r1, [pc, #56]	; (8001534 <LoopForever+0xa>)
  ldr r2, =_sidata
 80014fc:	4a0e      	ldr	r2, [pc, #56]	; (8001538 <LoopForever+0xe>)
  movs r3, #0
 80014fe:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001500:	e002      	b.n	8001508 <LoopCopyDataInit>

08001502 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001502:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001504:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001506:	3304      	adds	r3, #4

08001508 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001508:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800150a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800150c:	d3f9      	bcc.n	8001502 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800150e:	4a0b      	ldr	r2, [pc, #44]	; (800153c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001510:	4c0b      	ldr	r4, [pc, #44]	; (8001540 <LoopForever+0x16>)
  movs r3, #0
 8001512:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001514:	e001      	b.n	800151a <LoopFillZerobss>

08001516 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001516:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001518:	3204      	adds	r2, #4

0800151a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800151a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800151c:	d3fb      	bcc.n	8001516 <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800151e:	f7ff ffd3 	bl	80014c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001522:	f008 fb07 	bl	8009b34 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001526:	f7fe fe97 	bl	8000258 <main>

0800152a <LoopForever>:

LoopForever:
    b LoopForever
 800152a:	e7fe      	b.n	800152a <LoopForever>
  ldr   r0, =_estack
 800152c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001530:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001534:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8001538:	08009c1c 	.word	0x08009c1c
  ldr r2, =_sbss
 800153c:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8001540:	20001668 	.word	0x20001668

08001544 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001544:	e7fe      	b.n	8001544 <ADC1_2_IRQHandler>

08001546 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001546:	b580      	push	{r7, lr}
 8001548:	b082      	sub	sp, #8
 800154a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800154c:	2300      	movs	r3, #0
 800154e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001550:	2003      	movs	r0, #3
 8001552:	f000 f939 	bl	80017c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001556:	2000      	movs	r0, #0
 8001558:	f000 f80e 	bl	8001578 <HAL_InitTick>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	d002      	beq.n	8001568 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001562:	2301      	movs	r3, #1
 8001564:	71fb      	strb	r3, [r7, #7]
 8001566:	e001      	b.n	800156c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001568:	f7ff fd32 	bl	8000fd0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800156c:	79fb      	ldrb	r3, [r7, #7]

}
 800156e:	4618      	mov	r0, r3
 8001570:	3708      	adds	r7, #8
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}
	...

08001578 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b084      	sub	sp, #16
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001580:	2300      	movs	r3, #0
 8001582:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001584:	4b16      	ldr	r3, [pc, #88]	; (80015e0 <HAL_InitTick+0x68>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d022      	beq.n	80015d2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800158c:	4b15      	ldr	r3, [pc, #84]	; (80015e4 <HAL_InitTick+0x6c>)
 800158e:	681a      	ldr	r2, [r3, #0]
 8001590:	4b13      	ldr	r3, [pc, #76]	; (80015e0 <HAL_InitTick+0x68>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001598:	fbb1 f3f3 	udiv	r3, r1, r3
 800159c:	fbb2 f3f3 	udiv	r3, r2, r3
 80015a0:	4618      	mov	r0, r3
 80015a2:	f000 f944 	bl	800182e <HAL_SYSTICK_Config>
 80015a6:	4603      	mov	r3, r0
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d10f      	bne.n	80015cc <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2b0f      	cmp	r3, #15
 80015b0:	d809      	bhi.n	80015c6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015b2:	2200      	movs	r2, #0
 80015b4:	6879      	ldr	r1, [r7, #4]
 80015b6:	f04f 30ff 	mov.w	r0, #4294967295
 80015ba:	f000 f910 	bl	80017de <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80015be:	4a0a      	ldr	r2, [pc, #40]	; (80015e8 <HAL_InitTick+0x70>)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	6013      	str	r3, [r2, #0]
 80015c4:	e007      	b.n	80015d6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80015c6:	2301      	movs	r3, #1
 80015c8:	73fb      	strb	r3, [r7, #15]
 80015ca:	e004      	b.n	80015d6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80015cc:	2301      	movs	r3, #1
 80015ce:	73fb      	strb	r3, [r7, #15]
 80015d0:	e001      	b.n	80015d6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80015d2:	2301      	movs	r3, #1
 80015d4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80015d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80015d8:	4618      	mov	r0, r3
 80015da:	3710      	adds	r7, #16
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	2000005c 	.word	0x2000005c
 80015e4:	20000054 	.word	0x20000054
 80015e8:	20000058 	.word	0x20000058

080015ec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015ec:	b480      	push	{r7}
 80015ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015f0:	4b05      	ldr	r3, [pc, #20]	; (8001608 <HAL_IncTick+0x1c>)
 80015f2:	681a      	ldr	r2, [r3, #0]
 80015f4:	4b05      	ldr	r3, [pc, #20]	; (800160c <HAL_IncTick+0x20>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4413      	add	r3, r2
 80015fa:	4a03      	ldr	r2, [pc, #12]	; (8001608 <HAL_IncTick+0x1c>)
 80015fc:	6013      	str	r3, [r2, #0]
}
 80015fe:	bf00      	nop
 8001600:	46bd      	mov	sp, r7
 8001602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001606:	4770      	bx	lr
 8001608:	200006d0 	.word	0x200006d0
 800160c:	2000005c 	.word	0x2000005c

08001610 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0
  return uwTick;
 8001614:	4b03      	ldr	r3, [pc, #12]	; (8001624 <HAL_GetTick+0x14>)
 8001616:	681b      	ldr	r3, [r3, #0]
}
 8001618:	4618      	mov	r0, r3
 800161a:	46bd      	mov	sp, r7
 800161c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001620:	4770      	bx	lr
 8001622:	bf00      	nop
 8001624:	200006d0 	.word	0x200006d0

08001628 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001628:	b480      	push	{r7}
 800162a:	b085      	sub	sp, #20
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	f003 0307 	and.w	r3, r3, #7
 8001636:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001638:	4b0c      	ldr	r3, [pc, #48]	; (800166c <__NVIC_SetPriorityGrouping+0x44>)
 800163a:	68db      	ldr	r3, [r3, #12]
 800163c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800163e:	68ba      	ldr	r2, [r7, #8]
 8001640:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001644:	4013      	ands	r3, r2
 8001646:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800164c:	68bb      	ldr	r3, [r7, #8]
 800164e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001650:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001654:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001658:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800165a:	4a04      	ldr	r2, [pc, #16]	; (800166c <__NVIC_SetPriorityGrouping+0x44>)
 800165c:	68bb      	ldr	r3, [r7, #8]
 800165e:	60d3      	str	r3, [r2, #12]
}
 8001660:	bf00      	nop
 8001662:	3714      	adds	r7, #20
 8001664:	46bd      	mov	sp, r7
 8001666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166a:	4770      	bx	lr
 800166c:	e000ed00 	.word	0xe000ed00

08001670 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001670:	b480      	push	{r7}
 8001672:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001674:	4b04      	ldr	r3, [pc, #16]	; (8001688 <__NVIC_GetPriorityGrouping+0x18>)
 8001676:	68db      	ldr	r3, [r3, #12]
 8001678:	0a1b      	lsrs	r3, r3, #8
 800167a:	f003 0307 	and.w	r3, r3, #7
}
 800167e:	4618      	mov	r0, r3
 8001680:	46bd      	mov	sp, r7
 8001682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001686:	4770      	bx	lr
 8001688:	e000ed00 	.word	0xe000ed00

0800168c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800168c:	b480      	push	{r7}
 800168e:	b083      	sub	sp, #12
 8001690:	af00      	add	r7, sp, #0
 8001692:	4603      	mov	r3, r0
 8001694:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001696:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800169a:	2b00      	cmp	r3, #0
 800169c:	db0b      	blt.n	80016b6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800169e:	79fb      	ldrb	r3, [r7, #7]
 80016a0:	f003 021f 	and.w	r2, r3, #31
 80016a4:	4907      	ldr	r1, [pc, #28]	; (80016c4 <__NVIC_EnableIRQ+0x38>)
 80016a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016aa:	095b      	lsrs	r3, r3, #5
 80016ac:	2001      	movs	r0, #1
 80016ae:	fa00 f202 	lsl.w	r2, r0, r2
 80016b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80016b6:	bf00      	nop
 80016b8:	370c      	adds	r7, #12
 80016ba:	46bd      	mov	sp, r7
 80016bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c0:	4770      	bx	lr
 80016c2:	bf00      	nop
 80016c4:	e000e100 	.word	0xe000e100

080016c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b083      	sub	sp, #12
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	4603      	mov	r3, r0
 80016d0:	6039      	str	r1, [r7, #0]
 80016d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	db0a      	blt.n	80016f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	b2da      	uxtb	r2, r3
 80016e0:	490c      	ldr	r1, [pc, #48]	; (8001714 <__NVIC_SetPriority+0x4c>)
 80016e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016e6:	0112      	lsls	r2, r2, #4
 80016e8:	b2d2      	uxtb	r2, r2
 80016ea:	440b      	add	r3, r1
 80016ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016f0:	e00a      	b.n	8001708 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	b2da      	uxtb	r2, r3
 80016f6:	4908      	ldr	r1, [pc, #32]	; (8001718 <__NVIC_SetPriority+0x50>)
 80016f8:	79fb      	ldrb	r3, [r7, #7]
 80016fa:	f003 030f 	and.w	r3, r3, #15
 80016fe:	3b04      	subs	r3, #4
 8001700:	0112      	lsls	r2, r2, #4
 8001702:	b2d2      	uxtb	r2, r2
 8001704:	440b      	add	r3, r1
 8001706:	761a      	strb	r2, [r3, #24]
}
 8001708:	bf00      	nop
 800170a:	370c      	adds	r7, #12
 800170c:	46bd      	mov	sp, r7
 800170e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001712:	4770      	bx	lr
 8001714:	e000e100 	.word	0xe000e100
 8001718:	e000ed00 	.word	0xe000ed00

0800171c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800171c:	b480      	push	{r7}
 800171e:	b089      	sub	sp, #36	; 0x24
 8001720:	af00      	add	r7, sp, #0
 8001722:	60f8      	str	r0, [r7, #12]
 8001724:	60b9      	str	r1, [r7, #8]
 8001726:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	f003 0307 	and.w	r3, r3, #7
 800172e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001730:	69fb      	ldr	r3, [r7, #28]
 8001732:	f1c3 0307 	rsb	r3, r3, #7
 8001736:	2b04      	cmp	r3, #4
 8001738:	bf28      	it	cs
 800173a:	2304      	movcs	r3, #4
 800173c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800173e:	69fb      	ldr	r3, [r7, #28]
 8001740:	3304      	adds	r3, #4
 8001742:	2b06      	cmp	r3, #6
 8001744:	d902      	bls.n	800174c <NVIC_EncodePriority+0x30>
 8001746:	69fb      	ldr	r3, [r7, #28]
 8001748:	3b03      	subs	r3, #3
 800174a:	e000      	b.n	800174e <NVIC_EncodePriority+0x32>
 800174c:	2300      	movs	r3, #0
 800174e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001750:	f04f 32ff 	mov.w	r2, #4294967295
 8001754:	69bb      	ldr	r3, [r7, #24]
 8001756:	fa02 f303 	lsl.w	r3, r2, r3
 800175a:	43da      	mvns	r2, r3
 800175c:	68bb      	ldr	r3, [r7, #8]
 800175e:	401a      	ands	r2, r3
 8001760:	697b      	ldr	r3, [r7, #20]
 8001762:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001764:	f04f 31ff 	mov.w	r1, #4294967295
 8001768:	697b      	ldr	r3, [r7, #20]
 800176a:	fa01 f303 	lsl.w	r3, r1, r3
 800176e:	43d9      	mvns	r1, r3
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001774:	4313      	orrs	r3, r2
         );
}
 8001776:	4618      	mov	r0, r3
 8001778:	3724      	adds	r7, #36	; 0x24
 800177a:	46bd      	mov	sp, r7
 800177c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001780:	4770      	bx	lr
	...

08001784 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b082      	sub	sp, #8
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	3b01      	subs	r3, #1
 8001790:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001794:	d301      	bcc.n	800179a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001796:	2301      	movs	r3, #1
 8001798:	e00f      	b.n	80017ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800179a:	4a0a      	ldr	r2, [pc, #40]	; (80017c4 <SysTick_Config+0x40>)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	3b01      	subs	r3, #1
 80017a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017a2:	210f      	movs	r1, #15
 80017a4:	f04f 30ff 	mov.w	r0, #4294967295
 80017a8:	f7ff ff8e 	bl	80016c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017ac:	4b05      	ldr	r3, [pc, #20]	; (80017c4 <SysTick_Config+0x40>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017b2:	4b04      	ldr	r3, [pc, #16]	; (80017c4 <SysTick_Config+0x40>)
 80017b4:	2207      	movs	r2, #7
 80017b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017b8:	2300      	movs	r3, #0
}
 80017ba:	4618      	mov	r0, r3
 80017bc:	3708      	adds	r7, #8
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	e000e010 	.word	0xe000e010

080017c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b082      	sub	sp, #8
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017d0:	6878      	ldr	r0, [r7, #4]
 80017d2:	f7ff ff29 	bl	8001628 <__NVIC_SetPriorityGrouping>
}
 80017d6:	bf00      	nop
 80017d8:	3708      	adds	r7, #8
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}

080017de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017de:	b580      	push	{r7, lr}
 80017e0:	b086      	sub	sp, #24
 80017e2:	af00      	add	r7, sp, #0
 80017e4:	4603      	mov	r3, r0
 80017e6:	60b9      	str	r1, [r7, #8]
 80017e8:	607a      	str	r2, [r7, #4]
 80017ea:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80017ec:	f7ff ff40 	bl	8001670 <__NVIC_GetPriorityGrouping>
 80017f0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017f2:	687a      	ldr	r2, [r7, #4]
 80017f4:	68b9      	ldr	r1, [r7, #8]
 80017f6:	6978      	ldr	r0, [r7, #20]
 80017f8:	f7ff ff90 	bl	800171c <NVIC_EncodePriority>
 80017fc:	4602      	mov	r2, r0
 80017fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001802:	4611      	mov	r1, r2
 8001804:	4618      	mov	r0, r3
 8001806:	f7ff ff5f 	bl	80016c8 <__NVIC_SetPriority>
}
 800180a:	bf00      	nop
 800180c:	3718      	adds	r7, #24
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}

08001812 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001812:	b580      	push	{r7, lr}
 8001814:	b082      	sub	sp, #8
 8001816:	af00      	add	r7, sp, #0
 8001818:	4603      	mov	r3, r0
 800181a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800181c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001820:	4618      	mov	r0, r3
 8001822:	f7ff ff33 	bl	800168c <__NVIC_EnableIRQ>
}
 8001826:	bf00      	nop
 8001828:	3708      	adds	r7, #8
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}

0800182e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800182e:	b580      	push	{r7, lr}
 8001830:	b082      	sub	sp, #8
 8001832:	af00      	add	r7, sp, #0
 8001834:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001836:	6878      	ldr	r0, [r7, #4]
 8001838:	f7ff ffa4 	bl	8001784 <SysTick_Config>
 800183c:	4603      	mov	r3, r0
}
 800183e:	4618      	mov	r0, r3
 8001840:	3708      	adds	r7, #8
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}
	...

08001848 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001848:	b480      	push	{r7}
 800184a:	b087      	sub	sp, #28
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
 8001850:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001852:	2300      	movs	r3, #0
 8001854:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001856:	e15a      	b.n	8001b0e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	681a      	ldr	r2, [r3, #0]
 800185c:	2101      	movs	r1, #1
 800185e:	697b      	ldr	r3, [r7, #20]
 8001860:	fa01 f303 	lsl.w	r3, r1, r3
 8001864:	4013      	ands	r3, r2
 8001866:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	2b00      	cmp	r3, #0
 800186c:	f000 814c 	beq.w	8001b08 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	2b01      	cmp	r3, #1
 8001876:	d00b      	beq.n	8001890 <HAL_GPIO_Init+0x48>
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	2b02      	cmp	r3, #2
 800187e:	d007      	beq.n	8001890 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001884:	2b11      	cmp	r3, #17
 8001886:	d003      	beq.n	8001890 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	2b12      	cmp	r3, #18
 800188e:	d130      	bne.n	80018f2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	689b      	ldr	r3, [r3, #8]
 8001894:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001896:	697b      	ldr	r3, [r7, #20]
 8001898:	005b      	lsls	r3, r3, #1
 800189a:	2203      	movs	r2, #3
 800189c:	fa02 f303 	lsl.w	r3, r2, r3
 80018a0:	43db      	mvns	r3, r3
 80018a2:	693a      	ldr	r2, [r7, #16]
 80018a4:	4013      	ands	r3, r2
 80018a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	68da      	ldr	r2, [r3, #12]
 80018ac:	697b      	ldr	r3, [r7, #20]
 80018ae:	005b      	lsls	r3, r3, #1
 80018b0:	fa02 f303 	lsl.w	r3, r2, r3
 80018b4:	693a      	ldr	r2, [r7, #16]
 80018b6:	4313      	orrs	r3, r2
 80018b8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	693a      	ldr	r2, [r7, #16]
 80018be:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80018c6:	2201      	movs	r2, #1
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	fa02 f303 	lsl.w	r3, r2, r3
 80018ce:	43db      	mvns	r3, r3
 80018d0:	693a      	ldr	r2, [r7, #16]
 80018d2:	4013      	ands	r3, r2
 80018d4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	091b      	lsrs	r3, r3, #4
 80018dc:	f003 0201 	and.w	r2, r3, #1
 80018e0:	697b      	ldr	r3, [r7, #20]
 80018e2:	fa02 f303 	lsl.w	r3, r2, r3
 80018e6:	693a      	ldr	r2, [r7, #16]
 80018e8:	4313      	orrs	r3, r2
 80018ea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	693a      	ldr	r2, [r7, #16]
 80018f0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	68db      	ldr	r3, [r3, #12]
 80018f6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80018f8:	697b      	ldr	r3, [r7, #20]
 80018fa:	005b      	lsls	r3, r3, #1
 80018fc:	2203      	movs	r2, #3
 80018fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001902:	43db      	mvns	r3, r3
 8001904:	693a      	ldr	r2, [r7, #16]
 8001906:	4013      	ands	r3, r2
 8001908:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	689a      	ldr	r2, [r3, #8]
 800190e:	697b      	ldr	r3, [r7, #20]
 8001910:	005b      	lsls	r3, r3, #1
 8001912:	fa02 f303 	lsl.w	r3, r2, r3
 8001916:	693a      	ldr	r2, [r7, #16]
 8001918:	4313      	orrs	r3, r2
 800191a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	693a      	ldr	r2, [r7, #16]
 8001920:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	2b02      	cmp	r3, #2
 8001928:	d003      	beq.n	8001932 <HAL_GPIO_Init+0xea>
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	2b12      	cmp	r3, #18
 8001930:	d123      	bne.n	800197a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001932:	697b      	ldr	r3, [r7, #20]
 8001934:	08da      	lsrs	r2, r3, #3
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	3208      	adds	r2, #8
 800193a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800193e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001940:	697b      	ldr	r3, [r7, #20]
 8001942:	f003 0307 	and.w	r3, r3, #7
 8001946:	009b      	lsls	r3, r3, #2
 8001948:	220f      	movs	r2, #15
 800194a:	fa02 f303 	lsl.w	r3, r2, r3
 800194e:	43db      	mvns	r3, r3
 8001950:	693a      	ldr	r2, [r7, #16]
 8001952:	4013      	ands	r3, r2
 8001954:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	691a      	ldr	r2, [r3, #16]
 800195a:	697b      	ldr	r3, [r7, #20]
 800195c:	f003 0307 	and.w	r3, r3, #7
 8001960:	009b      	lsls	r3, r3, #2
 8001962:	fa02 f303 	lsl.w	r3, r2, r3
 8001966:	693a      	ldr	r2, [r7, #16]
 8001968:	4313      	orrs	r3, r2
 800196a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800196c:	697b      	ldr	r3, [r7, #20]
 800196e:	08da      	lsrs	r2, r3, #3
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	3208      	adds	r2, #8
 8001974:	6939      	ldr	r1, [r7, #16]
 8001976:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001980:	697b      	ldr	r3, [r7, #20]
 8001982:	005b      	lsls	r3, r3, #1
 8001984:	2203      	movs	r2, #3
 8001986:	fa02 f303 	lsl.w	r3, r2, r3
 800198a:	43db      	mvns	r3, r3
 800198c:	693a      	ldr	r2, [r7, #16]
 800198e:	4013      	ands	r3, r2
 8001990:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	f003 0203 	and.w	r2, r3, #3
 800199a:	697b      	ldr	r3, [r7, #20]
 800199c:	005b      	lsls	r3, r3, #1
 800199e:	fa02 f303 	lsl.w	r3, r2, r3
 80019a2:	693a      	ldr	r2, [r7, #16]
 80019a4:	4313      	orrs	r3, r2
 80019a6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	693a      	ldr	r2, [r7, #16]
 80019ac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	f000 80a6 	beq.w	8001b08 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019bc:	4b5b      	ldr	r3, [pc, #364]	; (8001b2c <HAL_GPIO_Init+0x2e4>)
 80019be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019c0:	4a5a      	ldr	r2, [pc, #360]	; (8001b2c <HAL_GPIO_Init+0x2e4>)
 80019c2:	f043 0301 	orr.w	r3, r3, #1
 80019c6:	6613      	str	r3, [r2, #96]	; 0x60
 80019c8:	4b58      	ldr	r3, [pc, #352]	; (8001b2c <HAL_GPIO_Init+0x2e4>)
 80019ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019cc:	f003 0301 	and.w	r3, r3, #1
 80019d0:	60bb      	str	r3, [r7, #8]
 80019d2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80019d4:	4a56      	ldr	r2, [pc, #344]	; (8001b30 <HAL_GPIO_Init+0x2e8>)
 80019d6:	697b      	ldr	r3, [r7, #20]
 80019d8:	089b      	lsrs	r3, r3, #2
 80019da:	3302      	adds	r3, #2
 80019dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019e0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80019e2:	697b      	ldr	r3, [r7, #20]
 80019e4:	f003 0303 	and.w	r3, r3, #3
 80019e8:	009b      	lsls	r3, r3, #2
 80019ea:	220f      	movs	r2, #15
 80019ec:	fa02 f303 	lsl.w	r3, r2, r3
 80019f0:	43db      	mvns	r3, r3
 80019f2:	693a      	ldr	r2, [r7, #16]
 80019f4:	4013      	ands	r3, r2
 80019f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80019fe:	d01f      	beq.n	8001a40 <HAL_GPIO_Init+0x1f8>
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	4a4c      	ldr	r2, [pc, #304]	; (8001b34 <HAL_GPIO_Init+0x2ec>)
 8001a04:	4293      	cmp	r3, r2
 8001a06:	d019      	beq.n	8001a3c <HAL_GPIO_Init+0x1f4>
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	4a4b      	ldr	r2, [pc, #300]	; (8001b38 <HAL_GPIO_Init+0x2f0>)
 8001a0c:	4293      	cmp	r3, r2
 8001a0e:	d013      	beq.n	8001a38 <HAL_GPIO_Init+0x1f0>
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	4a4a      	ldr	r2, [pc, #296]	; (8001b3c <HAL_GPIO_Init+0x2f4>)
 8001a14:	4293      	cmp	r3, r2
 8001a16:	d00d      	beq.n	8001a34 <HAL_GPIO_Init+0x1ec>
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	4a49      	ldr	r2, [pc, #292]	; (8001b40 <HAL_GPIO_Init+0x2f8>)
 8001a1c:	4293      	cmp	r3, r2
 8001a1e:	d007      	beq.n	8001a30 <HAL_GPIO_Init+0x1e8>
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	4a48      	ldr	r2, [pc, #288]	; (8001b44 <HAL_GPIO_Init+0x2fc>)
 8001a24:	4293      	cmp	r3, r2
 8001a26:	d101      	bne.n	8001a2c <HAL_GPIO_Init+0x1e4>
 8001a28:	2305      	movs	r3, #5
 8001a2a:	e00a      	b.n	8001a42 <HAL_GPIO_Init+0x1fa>
 8001a2c:	2306      	movs	r3, #6
 8001a2e:	e008      	b.n	8001a42 <HAL_GPIO_Init+0x1fa>
 8001a30:	2304      	movs	r3, #4
 8001a32:	e006      	b.n	8001a42 <HAL_GPIO_Init+0x1fa>
 8001a34:	2303      	movs	r3, #3
 8001a36:	e004      	b.n	8001a42 <HAL_GPIO_Init+0x1fa>
 8001a38:	2302      	movs	r3, #2
 8001a3a:	e002      	b.n	8001a42 <HAL_GPIO_Init+0x1fa>
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	e000      	b.n	8001a42 <HAL_GPIO_Init+0x1fa>
 8001a40:	2300      	movs	r3, #0
 8001a42:	697a      	ldr	r2, [r7, #20]
 8001a44:	f002 0203 	and.w	r2, r2, #3
 8001a48:	0092      	lsls	r2, r2, #2
 8001a4a:	4093      	lsls	r3, r2
 8001a4c:	693a      	ldr	r2, [r7, #16]
 8001a4e:	4313      	orrs	r3, r2
 8001a50:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a52:	4937      	ldr	r1, [pc, #220]	; (8001b30 <HAL_GPIO_Init+0x2e8>)
 8001a54:	697b      	ldr	r3, [r7, #20]
 8001a56:	089b      	lsrs	r3, r3, #2
 8001a58:	3302      	adds	r3, #2
 8001a5a:	693a      	ldr	r2, [r7, #16]
 8001a5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001a60:	4b39      	ldr	r3, [pc, #228]	; (8001b48 <HAL_GPIO_Init+0x300>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	43db      	mvns	r3, r3
 8001a6a:	693a      	ldr	r2, [r7, #16]
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d003      	beq.n	8001a84 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001a7c:	693a      	ldr	r2, [r7, #16]
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	4313      	orrs	r3, r2
 8001a82:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001a84:	4a30      	ldr	r2, [pc, #192]	; (8001b48 <HAL_GPIO_Init+0x300>)
 8001a86:	693b      	ldr	r3, [r7, #16]
 8001a88:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001a8a:	4b2f      	ldr	r3, [pc, #188]	; (8001b48 <HAL_GPIO_Init+0x300>)
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	43db      	mvns	r3, r3
 8001a94:	693a      	ldr	r2, [r7, #16]
 8001a96:	4013      	ands	r3, r2
 8001a98:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d003      	beq.n	8001aae <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001aa6:	693a      	ldr	r2, [r7, #16]
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	4313      	orrs	r3, r2
 8001aac:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001aae:	4a26      	ldr	r2, [pc, #152]	; (8001b48 <HAL_GPIO_Init+0x300>)
 8001ab0:	693b      	ldr	r3, [r7, #16]
 8001ab2:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001ab4:	4b24      	ldr	r3, [pc, #144]	; (8001b48 <HAL_GPIO_Init+0x300>)
 8001ab6:	689b      	ldr	r3, [r3, #8]
 8001ab8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	43db      	mvns	r3, r3
 8001abe:	693a      	ldr	r2, [r7, #16]
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d003      	beq.n	8001ad8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001ad0:	693a      	ldr	r2, [r7, #16]
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	4313      	orrs	r3, r2
 8001ad6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001ad8:	4a1b      	ldr	r2, [pc, #108]	; (8001b48 <HAL_GPIO_Init+0x300>)
 8001ada:	693b      	ldr	r3, [r7, #16]
 8001adc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001ade:	4b1a      	ldr	r3, [pc, #104]	; (8001b48 <HAL_GPIO_Init+0x300>)
 8001ae0:	68db      	ldr	r3, [r3, #12]
 8001ae2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	43db      	mvns	r3, r3
 8001ae8:	693a      	ldr	r2, [r7, #16]
 8001aea:	4013      	ands	r3, r2
 8001aec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d003      	beq.n	8001b02 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001afa:	693a      	ldr	r2, [r7, #16]
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	4313      	orrs	r3, r2
 8001b00:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001b02:	4a11      	ldr	r2, [pc, #68]	; (8001b48 <HAL_GPIO_Init+0x300>)
 8001b04:	693b      	ldr	r3, [r7, #16]
 8001b06:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001b08:	697b      	ldr	r3, [r7, #20]
 8001b0a:	3301      	adds	r3, #1
 8001b0c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	681a      	ldr	r2, [r3, #0]
 8001b12:	697b      	ldr	r3, [r7, #20]
 8001b14:	fa22 f303 	lsr.w	r3, r2, r3
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	f47f ae9d 	bne.w	8001858 <HAL_GPIO_Init+0x10>
  }
}
 8001b1e:	bf00      	nop
 8001b20:	371c      	adds	r7, #28
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr
 8001b2a:	bf00      	nop
 8001b2c:	40021000 	.word	0x40021000
 8001b30:	40010000 	.word	0x40010000
 8001b34:	48000400 	.word	0x48000400
 8001b38:	48000800 	.word	0x48000800
 8001b3c:	48000c00 	.word	0x48000c00
 8001b40:	48001000 	.word	0x48001000
 8001b44:	48001400 	.word	0x48001400
 8001b48:	40010400 	.word	0x40010400

08001b4c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b083      	sub	sp, #12
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
 8001b54:	460b      	mov	r3, r1
 8001b56:	807b      	strh	r3, [r7, #2]
 8001b58:	4613      	mov	r3, r2
 8001b5a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b5c:	787b      	ldrb	r3, [r7, #1]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d003      	beq.n	8001b6a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001b62:	887a      	ldrh	r2, [r7, #2]
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001b68:	e002      	b.n	8001b70 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001b6a:	887a      	ldrh	r2, [r7, #2]
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001b70:	bf00      	nop
 8001b72:	370c      	adds	r7, #12
 8001b74:	46bd      	mov	sp, r7
 8001b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7a:	4770      	bx	lr

08001b7c <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b085      	sub	sp, #20
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
 8001b84:	460b      	mov	r3, r1
 8001b86:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	695b      	ldr	r3, [r3, #20]
 8001b8c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001b8e:	887a      	ldrh	r2, [r7, #2]
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	4013      	ands	r3, r2
 8001b94:	041a      	lsls	r2, r3, #16
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	43d9      	mvns	r1, r3
 8001b9a:	887b      	ldrh	r3, [r7, #2]
 8001b9c:	400b      	ands	r3, r1
 8001b9e:	431a      	orrs	r2, r3
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	619a      	str	r2, [r3, #24]
}
 8001ba4:	bf00      	nop
 8001ba6:	3714      	adds	r7, #20
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bae:	4770      	bx	lr

08001bb0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001bb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bb2:	b08b      	sub	sp, #44	; 0x2c
 8001bb4:	af06      	add	r7, sp, #24
 8001bb6:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d101      	bne.n	8001bc2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	e0d7      	b.n	8001d72 <HAL_PCD_Init+0x1c2>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001bc8:	b2db      	uxtb	r3, r3
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d106      	bne.n	8001bdc <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001bd6:	6878      	ldr	r0, [r7, #4]
 8001bd8:	f007 fcbc 	bl	8009554 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2203      	movs	r2, #3
 8001be0:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4618      	mov	r0, r3
 8001bea:	f003 fe18 	bl	800581e <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001bee:	2300      	movs	r3, #0
 8001bf0:	73fb      	strb	r3, [r7, #15]
 8001bf2:	e04c      	b.n	8001c8e <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001bf4:	7bfb      	ldrb	r3, [r7, #15]
 8001bf6:	6879      	ldr	r1, [r7, #4]
 8001bf8:	1c5a      	adds	r2, r3, #1
 8001bfa:	4613      	mov	r3, r2
 8001bfc:	009b      	lsls	r3, r3, #2
 8001bfe:	4413      	add	r3, r2
 8001c00:	00db      	lsls	r3, r3, #3
 8001c02:	440b      	add	r3, r1
 8001c04:	3301      	adds	r3, #1
 8001c06:	2201      	movs	r2, #1
 8001c08:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001c0a:	7bfb      	ldrb	r3, [r7, #15]
 8001c0c:	6879      	ldr	r1, [r7, #4]
 8001c0e:	1c5a      	adds	r2, r3, #1
 8001c10:	4613      	mov	r3, r2
 8001c12:	009b      	lsls	r3, r3, #2
 8001c14:	4413      	add	r3, r2
 8001c16:	00db      	lsls	r3, r3, #3
 8001c18:	440b      	add	r3, r1
 8001c1a:	7bfa      	ldrb	r2, [r7, #15]
 8001c1c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001c1e:	7bfa      	ldrb	r2, [r7, #15]
 8001c20:	7bfb      	ldrb	r3, [r7, #15]
 8001c22:	b298      	uxth	r0, r3
 8001c24:	6879      	ldr	r1, [r7, #4]
 8001c26:	4613      	mov	r3, r2
 8001c28:	009b      	lsls	r3, r3, #2
 8001c2a:	4413      	add	r3, r2
 8001c2c:	00db      	lsls	r3, r3, #3
 8001c2e:	440b      	add	r3, r1
 8001c30:	3336      	adds	r3, #54	; 0x36
 8001c32:	4602      	mov	r2, r0
 8001c34:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001c36:	7bfb      	ldrb	r3, [r7, #15]
 8001c38:	6879      	ldr	r1, [r7, #4]
 8001c3a:	1c5a      	adds	r2, r3, #1
 8001c3c:	4613      	mov	r3, r2
 8001c3e:	009b      	lsls	r3, r3, #2
 8001c40:	4413      	add	r3, r2
 8001c42:	00db      	lsls	r3, r3, #3
 8001c44:	440b      	add	r3, r1
 8001c46:	3303      	adds	r3, #3
 8001c48:	2200      	movs	r2, #0
 8001c4a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001c4c:	7bfa      	ldrb	r2, [r7, #15]
 8001c4e:	6879      	ldr	r1, [r7, #4]
 8001c50:	4613      	mov	r3, r2
 8001c52:	009b      	lsls	r3, r3, #2
 8001c54:	4413      	add	r3, r2
 8001c56:	00db      	lsls	r3, r3, #3
 8001c58:	440b      	add	r3, r1
 8001c5a:	3338      	adds	r3, #56	; 0x38
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001c60:	7bfa      	ldrb	r2, [r7, #15]
 8001c62:	6879      	ldr	r1, [r7, #4]
 8001c64:	4613      	mov	r3, r2
 8001c66:	009b      	lsls	r3, r3, #2
 8001c68:	4413      	add	r3, r2
 8001c6a:	00db      	lsls	r3, r3, #3
 8001c6c:	440b      	add	r3, r1
 8001c6e:	333c      	adds	r3, #60	; 0x3c
 8001c70:	2200      	movs	r2, #0
 8001c72:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001c74:	7bfa      	ldrb	r2, [r7, #15]
 8001c76:	6879      	ldr	r1, [r7, #4]
 8001c78:	4613      	mov	r3, r2
 8001c7a:	009b      	lsls	r3, r3, #2
 8001c7c:	4413      	add	r3, r2
 8001c7e:	00db      	lsls	r3, r3, #3
 8001c80:	440b      	add	r3, r1
 8001c82:	3340      	adds	r3, #64	; 0x40
 8001c84:	2200      	movs	r2, #0
 8001c86:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c88:	7bfb      	ldrb	r3, [r7, #15]
 8001c8a:	3301      	adds	r3, #1
 8001c8c:	73fb      	strb	r3, [r7, #15]
 8001c8e:	7bfa      	ldrb	r2, [r7, #15]
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	429a      	cmp	r2, r3
 8001c96:	d3ad      	bcc.n	8001bf4 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c98:	2300      	movs	r3, #0
 8001c9a:	73fb      	strb	r3, [r7, #15]
 8001c9c:	e044      	b.n	8001d28 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001c9e:	7bfa      	ldrb	r2, [r7, #15]
 8001ca0:	6879      	ldr	r1, [r7, #4]
 8001ca2:	4613      	mov	r3, r2
 8001ca4:	009b      	lsls	r3, r3, #2
 8001ca6:	4413      	add	r3, r2
 8001ca8:	00db      	lsls	r3, r3, #3
 8001caa:	440b      	add	r3, r1
 8001cac:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001cb4:	7bfa      	ldrb	r2, [r7, #15]
 8001cb6:	6879      	ldr	r1, [r7, #4]
 8001cb8:	4613      	mov	r3, r2
 8001cba:	009b      	lsls	r3, r3, #2
 8001cbc:	4413      	add	r3, r2
 8001cbe:	00db      	lsls	r3, r3, #3
 8001cc0:	440b      	add	r3, r1
 8001cc2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001cc6:	7bfa      	ldrb	r2, [r7, #15]
 8001cc8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001cca:	7bfa      	ldrb	r2, [r7, #15]
 8001ccc:	6879      	ldr	r1, [r7, #4]
 8001cce:	4613      	mov	r3, r2
 8001cd0:	009b      	lsls	r3, r3, #2
 8001cd2:	4413      	add	r3, r2
 8001cd4:	00db      	lsls	r3, r3, #3
 8001cd6:	440b      	add	r3, r1
 8001cd8:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001cdc:	2200      	movs	r2, #0
 8001cde:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001ce0:	7bfa      	ldrb	r2, [r7, #15]
 8001ce2:	6879      	ldr	r1, [r7, #4]
 8001ce4:	4613      	mov	r3, r2
 8001ce6:	009b      	lsls	r3, r3, #2
 8001ce8:	4413      	add	r3, r2
 8001cea:	00db      	lsls	r3, r3, #3
 8001cec:	440b      	add	r3, r1
 8001cee:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001cf6:	7bfa      	ldrb	r2, [r7, #15]
 8001cf8:	6879      	ldr	r1, [r7, #4]
 8001cfa:	4613      	mov	r3, r2
 8001cfc:	009b      	lsls	r3, r3, #2
 8001cfe:	4413      	add	r3, r2
 8001d00:	00db      	lsls	r3, r3, #3
 8001d02:	440b      	add	r3, r1
 8001d04:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001d08:	2200      	movs	r2, #0
 8001d0a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001d0c:	7bfa      	ldrb	r2, [r7, #15]
 8001d0e:	6879      	ldr	r1, [r7, #4]
 8001d10:	4613      	mov	r3, r2
 8001d12:	009b      	lsls	r3, r3, #2
 8001d14:	4413      	add	r3, r2
 8001d16:	00db      	lsls	r3, r3, #3
 8001d18:	440b      	add	r3, r1
 8001d1a:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001d1e:	2200      	movs	r2, #0
 8001d20:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d22:	7bfb      	ldrb	r3, [r7, #15]
 8001d24:	3301      	adds	r3, #1
 8001d26:	73fb      	strb	r3, [r7, #15]
 8001d28:	7bfa      	ldrb	r2, [r7, #15]
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	429a      	cmp	r2, r3
 8001d30:	d3b5      	bcc.n	8001c9e <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	603b      	str	r3, [r7, #0]
 8001d38:	687e      	ldr	r6, [r7, #4]
 8001d3a:	466d      	mov	r5, sp
 8001d3c:	f106 0410 	add.w	r4, r6, #16
 8001d40:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d42:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d44:	6823      	ldr	r3, [r4, #0]
 8001d46:	602b      	str	r3, [r5, #0]
 8001d48:	1d33      	adds	r3, r6, #4
 8001d4a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d4c:	6838      	ldr	r0, [r7, #0]
 8001d4e:	f003 fd81 	bl	8005854 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2200      	movs	r2, #0
 8001d56:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2201      	movs	r2, #1
 8001d5e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	69db      	ldr	r3, [r3, #28]
 8001d66:	2b01      	cmp	r3, #1
 8001d68:	d102      	bne.n	8001d70 <HAL_PCD_Init+0x1c0>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001d6a:	6878      	ldr	r0, [r7, #4]
 8001d6c:	f001 fa5e 	bl	800322c <HAL_PCDEx_ActivateLPM>
  }
  
  return HAL_OK;
 8001d70:	2300      	movs	r3, #0
}
 8001d72:	4618      	mov	r0, r3
 8001d74:	3714      	adds	r7, #20
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001d7a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001d7a:	b580      	push	{r7, lr}
 8001d7c:	b082      	sub	sp, #8
 8001d7e:	af00      	add	r7, sp, #0
 8001d80:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001d88:	2b01      	cmp	r3, #1
 8001d8a:	d101      	bne.n	8001d90 <HAL_PCD_Start+0x16>
 8001d8c:	2302      	movs	r3, #2
 8001d8e:	e012      	b.n	8001db6 <HAL_PCD_Start+0x3c>
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2201      	movs	r2, #1
 8001d94:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f003 fd27 	bl	80057f0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4618      	mov	r0, r3
 8001da8:	f005 fd13 	bl	80077d2 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2200      	movs	r2, #0
 8001db0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001db4:	2300      	movs	r3, #0
}
 8001db6:	4618      	mov	r0, r3
 8001db8:	3708      	adds	r7, #8
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}

08001dbe <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001dbe:	b580      	push	{r7, lr}
 8001dc0:	b082      	sub	sp, #8
 8001dc2:	af00      	add	r7, sp, #0
 8001dc4:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f005 fd18 	bl	8007800 <USB_ReadInterrupts>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001dd6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001dda:	d102      	bne.n	8001de2 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001ddc:	6878      	ldr	r0, [r7, #4]
 8001dde:	f000 fb5b 	bl	8002498 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4618      	mov	r0, r3
 8001de8:	f005 fd0a 	bl	8007800 <USB_ReadInterrupts>
 8001dec:	4603      	mov	r3, r0
 8001dee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001df2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001df6:	d112      	bne.n	8001e1e <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e00:	b29a      	uxth	r2, r3
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e0a:	b292      	uxth	r2, r2
 8001e0c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001e10:	6878      	ldr	r0, [r7, #4]
 8001e12:	f007 fc1a 	bl	800964a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001e16:	2100      	movs	r1, #0
 8001e18:	6878      	ldr	r0, [r7, #4]
 8001e1a:	f000 f91e 	bl	800205a <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4618      	mov	r0, r3
 8001e24:	f005 fcec 	bl	8007800 <USB_ReadInterrupts>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e2e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001e32:	d10b      	bne.n	8001e4c <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e3c:	b29a      	uxth	r2, r3
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001e46:	b292      	uxth	r2, r2
 8001e48:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4618      	mov	r0, r3
 8001e52:	f005 fcd5 	bl	8007800 <USB_ReadInterrupts>
 8001e56:	4603      	mov	r3, r0
 8001e58:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001e5c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001e60:	d10b      	bne.n	8001e7a <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e6a:	b29a      	uxth	r2, r3
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001e74:	b292      	uxth	r2, r2
 8001e76:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4618      	mov	r0, r3
 8001e80:	f005 fcbe 	bl	8007800 <USB_ReadInterrupts>
 8001e84:	4603      	mov	r3, r0
 8001e86:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e8e:	d133      	bne.n	8001ef8 <HAL_PCD_IRQHandler+0x13a>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001e98:	b29a      	uxth	r2, r3
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f022 0204 	bic.w	r2, r2, #4
 8001ea2:	b292      	uxth	r2, r2
 8001ea4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001eb0:	b29a      	uxth	r2, r3
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f022 0208 	bic.w	r2, r2, #8
 8001eba:	b292      	uxth	r2, r2
 8001ebc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8001ec6:	2b01      	cmp	r3, #1
 8001ec8:	d107      	bne.n	8001eda <HAL_PCD_IRQHandler+0x11c>
    {
      hpcd->LPM_State = LPM_L0;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2200      	movs	r2, #0
 8001ece:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001ed2:	2100      	movs	r1, #0
 8001ed4:	6878      	ldr	r0, [r7, #4]
 8001ed6:	f007 fdad 	bl	8009a34 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001eda:	6878      	ldr	r0, [r7, #4]
 8001edc:	f007 fbee 	bl	80096bc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001ee8:	b29a      	uxth	r2, r3
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001ef2:	b292      	uxth	r2, r2
 8001ef4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4618      	mov	r0, r3
 8001efe:	f005 fc7f 	bl	8007800 <USB_ReadInterrupts>
 8001f02:	4603      	mov	r3, r0
 8001f04:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f08:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001f0c:	d126      	bne.n	8001f5c <HAL_PCD_IRQHandler+0x19e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001f16:	b29a      	uxth	r2, r3
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f042 0208 	orr.w	r2, r2, #8
 8001f20:	b292      	uxth	r2, r2
 8001f22:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f2e:	b29a      	uxth	r2, r3
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f38:	b292      	uxth	r2, r2
 8001f3a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001f46:	b29a      	uxth	r2, r3
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f042 0204 	orr.w	r2, r2, #4
 8001f50:	b292      	uxth	r2, r2
 8001f52:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001f56:	6878      	ldr	r0, [r7, #4]
 8001f58:	f007 fb96 	bl	8009688 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  /* Handle LPM Interrupt */
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4618      	mov	r0, r3
 8001f62:	f005 fc4d 	bl	8007800 <USB_ReadInterrupts>
 8001f66:	4603      	mov	r3, r0
 8001f68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f6c:	2b80      	cmp	r3, #128	; 0x80
 8001f6e:	d13f      	bne.n	8001ff0 <HAL_PCD_IRQHandler+0x232>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f78:	b29a      	uxth	r2, r3
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f82:	b292      	uxth	r2, r2
 8001f84:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d12b      	bne.n	8001fea <HAL_PCD_IRQHandler+0x22c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001f9a:	b29a      	uxth	r2, r3
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f042 0204 	orr.w	r2, r2, #4
 8001fa4:	b292      	uxth	r2, r2
 8001fa6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001fb2:	b29a      	uxth	r2, r3
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f042 0208 	orr.w	r2, r2, #8
 8001fbc:	b292      	uxth	r2, r2
 8001fbe:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2201      	movs	r2, #1
 8001fc6:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001fd2:	b29b      	uxth	r3, r3
 8001fd4:	089b      	lsrs	r3, r3, #2
 8001fd6:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001fe0:	2101      	movs	r1, #1
 8001fe2:	6878      	ldr	r0, [r7, #4]
 8001fe4:	f007 fd26 	bl	8009a34 <HAL_PCDEx_LPM_Callback>
 8001fe8:	e002      	b.n	8001ff0 <HAL_PCD_IRQHandler+0x232>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 8001fea:	6878      	ldr	r0, [r7, #4]
 8001fec:	f007 fb4c 	bl	8009688 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f005 fc03 	bl	8007800 <USB_ReadInterrupts>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002000:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002004:	d10e      	bne.n	8002024 <HAL_PCD_IRQHandler+0x266>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800200e:	b29a      	uxth	r2, r3
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002018:	b292      	uxth	r2, r2
 800201a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800201e:	6878      	ldr	r0, [r7, #4]
 8002020:	f007 fb05 	bl	800962e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4618      	mov	r0, r3
 800202a:	f005 fbe9 	bl	8007800 <USB_ReadInterrupts>
 800202e:	4603      	mov	r3, r0
 8002030:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002034:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002038:	d10b      	bne.n	8002052 <HAL_PCD_IRQHandler+0x294>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002042:	b29a      	uxth	r2, r3
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800204c:	b292      	uxth	r2, r2
 800204e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8002052:	bf00      	nop
 8002054:	3708      	adds	r7, #8
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}

0800205a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800205a:	b580      	push	{r7, lr}
 800205c:	b082      	sub	sp, #8
 800205e:	af00      	add	r7, sp, #0
 8002060:	6078      	str	r0, [r7, #4]
 8002062:	460b      	mov	r3, r1
 8002064:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800206c:	2b01      	cmp	r3, #1
 800206e:	d101      	bne.n	8002074 <HAL_PCD_SetAddress+0x1a>
 8002070:	2302      	movs	r3, #2
 8002072:	e013      	b.n	800209c <HAL_PCD_SetAddress+0x42>
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2201      	movs	r2, #1
 8002078:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	78fa      	ldrb	r2, [r7, #3]
 8002080:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	78fa      	ldrb	r2, [r7, #3]
 800208a:	4611      	mov	r1, r2
 800208c:	4618      	mov	r0, r3
 800208e:	f005 fb8c 	bl	80077aa <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2200      	movs	r2, #0
 8002096:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800209a:	2300      	movs	r3, #0
}
 800209c:	4618      	mov	r0, r3
 800209e:	3708      	adds	r7, #8
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}

080020a4 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b084      	sub	sp, #16
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
 80020ac:	4608      	mov	r0, r1
 80020ae:	4611      	mov	r1, r2
 80020b0:	461a      	mov	r2, r3
 80020b2:	4603      	mov	r3, r0
 80020b4:	70fb      	strb	r3, [r7, #3]
 80020b6:	460b      	mov	r3, r1
 80020b8:	803b      	strh	r3, [r7, #0]
 80020ba:	4613      	mov	r3, r2
 80020bc:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80020be:	2300      	movs	r3, #0
 80020c0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80020c2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	da0e      	bge.n	80020e8 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80020ca:	78fb      	ldrb	r3, [r7, #3]
 80020cc:	f003 0307 	and.w	r3, r3, #7
 80020d0:	1c5a      	adds	r2, r3, #1
 80020d2:	4613      	mov	r3, r2
 80020d4:	009b      	lsls	r3, r3, #2
 80020d6:	4413      	add	r3, r2
 80020d8:	00db      	lsls	r3, r3, #3
 80020da:	687a      	ldr	r2, [r7, #4]
 80020dc:	4413      	add	r3, r2
 80020de:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	2201      	movs	r2, #1
 80020e4:	705a      	strb	r2, [r3, #1]
 80020e6:	e00e      	b.n	8002106 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80020e8:	78fb      	ldrb	r3, [r7, #3]
 80020ea:	f003 0207 	and.w	r2, r3, #7
 80020ee:	4613      	mov	r3, r2
 80020f0:	009b      	lsls	r3, r3, #2
 80020f2:	4413      	add	r3, r2
 80020f4:	00db      	lsls	r3, r3, #3
 80020f6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80020fa:	687a      	ldr	r2, [r7, #4]
 80020fc:	4413      	add	r3, r2
 80020fe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	2200      	movs	r2, #0
 8002104:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002106:	78fb      	ldrb	r3, [r7, #3]
 8002108:	f003 0307 	and.w	r3, r3, #7
 800210c:	b2da      	uxtb	r2, r3
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002112:	883a      	ldrh	r2, [r7, #0]
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	78ba      	ldrb	r2, [r7, #2]
 800211c:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	785b      	ldrb	r3, [r3, #1]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d004      	beq.n	8002130 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	781b      	ldrb	r3, [r3, #0]
 800212a:	b29a      	uxth	r2, r3
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002130:	78bb      	ldrb	r3, [r7, #2]
 8002132:	2b02      	cmp	r3, #2
 8002134:	d102      	bne.n	800213c <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	2200      	movs	r2, #0
 800213a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002142:	2b01      	cmp	r3, #1
 8002144:	d101      	bne.n	800214a <HAL_PCD_EP_Open+0xa6>
 8002146:	2302      	movs	r3, #2
 8002148:	e00e      	b.n	8002168 <HAL_PCD_EP_Open+0xc4>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2201      	movs	r2, #1
 800214e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	68f9      	ldr	r1, [r7, #12]
 8002158:	4618      	mov	r0, r3
 800215a:	f003 fb9d 	bl	8005898 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2200      	movs	r2, #0
 8002162:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8002166:	7afb      	ldrb	r3, [r7, #11]
}
 8002168:	4618      	mov	r0, r3
 800216a:	3710      	adds	r7, #16
 800216c:	46bd      	mov	sp, r7
 800216e:	bd80      	pop	{r7, pc}

08002170 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b084      	sub	sp, #16
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
 8002178:	460b      	mov	r3, r1
 800217a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800217c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002180:	2b00      	cmp	r3, #0
 8002182:	da0e      	bge.n	80021a2 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002184:	78fb      	ldrb	r3, [r7, #3]
 8002186:	f003 0307 	and.w	r3, r3, #7
 800218a:	1c5a      	adds	r2, r3, #1
 800218c:	4613      	mov	r3, r2
 800218e:	009b      	lsls	r3, r3, #2
 8002190:	4413      	add	r3, r2
 8002192:	00db      	lsls	r3, r3, #3
 8002194:	687a      	ldr	r2, [r7, #4]
 8002196:	4413      	add	r3, r2
 8002198:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	2201      	movs	r2, #1
 800219e:	705a      	strb	r2, [r3, #1]
 80021a0:	e00e      	b.n	80021c0 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80021a2:	78fb      	ldrb	r3, [r7, #3]
 80021a4:	f003 0207 	and.w	r2, r3, #7
 80021a8:	4613      	mov	r3, r2
 80021aa:	009b      	lsls	r3, r3, #2
 80021ac:	4413      	add	r3, r2
 80021ae:	00db      	lsls	r3, r3, #3
 80021b0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80021b4:	687a      	ldr	r2, [r7, #4]
 80021b6:	4413      	add	r3, r2
 80021b8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	2200      	movs	r2, #0
 80021be:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80021c0:	78fb      	ldrb	r3, [r7, #3]
 80021c2:	f003 0307 	and.w	r3, r3, #7
 80021c6:	b2da      	uxtb	r2, r3
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80021d2:	2b01      	cmp	r3, #1
 80021d4:	d101      	bne.n	80021da <HAL_PCD_EP_Close+0x6a>
 80021d6:	2302      	movs	r3, #2
 80021d8:	e00e      	b.n	80021f8 <HAL_PCD_EP_Close+0x88>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2201      	movs	r2, #1
 80021de:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	68f9      	ldr	r1, [r7, #12]
 80021e8:	4618      	mov	r0, r3
 80021ea:	f003 fec3 	bl	8005f74 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2200      	movs	r2, #0
 80021f2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 80021f6:	2300      	movs	r3, #0
}
 80021f8:	4618      	mov	r0, r3
 80021fa:	3710      	adds	r7, #16
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}

08002200 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b086      	sub	sp, #24
 8002204:	af00      	add	r7, sp, #0
 8002206:	60f8      	str	r0, [r7, #12]
 8002208:	607a      	str	r2, [r7, #4]
 800220a:	603b      	str	r3, [r7, #0]
 800220c:	460b      	mov	r3, r1
 800220e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002210:	7afb      	ldrb	r3, [r7, #11]
 8002212:	f003 0207 	and.w	r2, r3, #7
 8002216:	4613      	mov	r3, r2
 8002218:	009b      	lsls	r3, r3, #2
 800221a:	4413      	add	r3, r2
 800221c:	00db      	lsls	r3, r3, #3
 800221e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002222:	68fa      	ldr	r2, [r7, #12]
 8002224:	4413      	add	r3, r2
 8002226:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	687a      	ldr	r2, [r7, #4]
 800222c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800222e:	697b      	ldr	r3, [r7, #20]
 8002230:	683a      	ldr	r2, [r7, #0]
 8002232:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002234:	697b      	ldr	r3, [r7, #20]
 8002236:	2200      	movs	r2, #0
 8002238:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800223a:	697b      	ldr	r3, [r7, #20]
 800223c:	2200      	movs	r2, #0
 800223e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002240:	7afb      	ldrb	r3, [r7, #11]
 8002242:	f003 0307 	and.w	r3, r3, #7
 8002246:	b2da      	uxtb	r2, r3
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800224c:	7afb      	ldrb	r3, [r7, #11]
 800224e:	f003 0307 	and.w	r3, r3, #7
 8002252:	2b00      	cmp	r3, #0
 8002254:	d106      	bne.n	8002264 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	6979      	ldr	r1, [r7, #20]
 800225c:	4618      	mov	r0, r3
 800225e:	f004 f876 	bl	800634e <USB_EPStartXfer>
 8002262:	e005      	b.n	8002270 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	6979      	ldr	r1, [r7, #20]
 800226a:	4618      	mov	r0, r3
 800226c:	f004 f86f 	bl	800634e <USB_EPStartXfer>
  }

  return HAL_OK;
 8002270:	2300      	movs	r3, #0
}
 8002272:	4618      	mov	r0, r3
 8002274:	3718      	adds	r7, #24
 8002276:	46bd      	mov	sp, r7
 8002278:	bd80      	pop	{r7, pc}

0800227a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800227a:	b480      	push	{r7}
 800227c:	b083      	sub	sp, #12
 800227e:	af00      	add	r7, sp, #0
 8002280:	6078      	str	r0, [r7, #4]
 8002282:	460b      	mov	r3, r1
 8002284:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002286:	78fb      	ldrb	r3, [r7, #3]
 8002288:	f003 0207 	and.w	r2, r3, #7
 800228c:	6879      	ldr	r1, [r7, #4]
 800228e:	4613      	mov	r3, r2
 8002290:	009b      	lsls	r3, r3, #2
 8002292:	4413      	add	r3, r2
 8002294:	00db      	lsls	r3, r3, #3
 8002296:	440b      	add	r3, r1
 8002298:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800229c:	681b      	ldr	r3, [r3, #0]
}
 800229e:	4618      	mov	r0, r3
 80022a0:	370c      	adds	r7, #12
 80022a2:	46bd      	mov	sp, r7
 80022a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a8:	4770      	bx	lr

080022aa <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80022aa:	b580      	push	{r7, lr}
 80022ac:	b086      	sub	sp, #24
 80022ae:	af00      	add	r7, sp, #0
 80022b0:	60f8      	str	r0, [r7, #12]
 80022b2:	607a      	str	r2, [r7, #4]
 80022b4:	603b      	str	r3, [r7, #0]
 80022b6:	460b      	mov	r3, r1
 80022b8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80022ba:	7afb      	ldrb	r3, [r7, #11]
 80022bc:	f003 0307 	and.w	r3, r3, #7
 80022c0:	1c5a      	adds	r2, r3, #1
 80022c2:	4613      	mov	r3, r2
 80022c4:	009b      	lsls	r3, r3, #2
 80022c6:	4413      	add	r3, r2
 80022c8:	00db      	lsls	r3, r3, #3
 80022ca:	68fa      	ldr	r2, [r7, #12]
 80022cc:	4413      	add	r3, r2
 80022ce:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80022d0:	697b      	ldr	r3, [r7, #20]
 80022d2:	687a      	ldr	r2, [r7, #4]
 80022d4:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80022d6:	697b      	ldr	r3, [r7, #20]
 80022d8:	683a      	ldr	r2, [r7, #0]
 80022da:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 80022dc:	697b      	ldr	r3, [r7, #20]
 80022de:	2201      	movs	r2, #1
 80022e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80022e4:	697b      	ldr	r3, [r7, #20]
 80022e6:	683a      	ldr	r2, [r7, #0]
 80022e8:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 80022ea:	697b      	ldr	r3, [r7, #20]
 80022ec:	2200      	movs	r2, #0
 80022ee:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80022f0:	697b      	ldr	r3, [r7, #20]
 80022f2:	2201      	movs	r2, #1
 80022f4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80022f6:	7afb      	ldrb	r3, [r7, #11]
 80022f8:	f003 0307 	and.w	r3, r3, #7
 80022fc:	b2da      	uxtb	r2, r3
 80022fe:	697b      	ldr	r3, [r7, #20]
 8002300:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002302:	7afb      	ldrb	r3, [r7, #11]
 8002304:	f003 0307 	and.w	r3, r3, #7
 8002308:	2b00      	cmp	r3, #0
 800230a:	d106      	bne.n	800231a <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	6979      	ldr	r1, [r7, #20]
 8002312:	4618      	mov	r0, r3
 8002314:	f004 f81b 	bl	800634e <USB_EPStartXfer>
 8002318:	e005      	b.n	8002326 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	6979      	ldr	r1, [r7, #20]
 8002320:	4618      	mov	r0, r3
 8002322:	f004 f814 	bl	800634e <USB_EPStartXfer>
  }

  return HAL_OK;
 8002326:	2300      	movs	r3, #0
}
 8002328:	4618      	mov	r0, r3
 800232a:	3718      	adds	r7, #24
 800232c:	46bd      	mov	sp, r7
 800232e:	bd80      	pop	{r7, pc}

08002330 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b084      	sub	sp, #16
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
 8002338:	460b      	mov	r3, r1
 800233a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800233c:	78fb      	ldrb	r3, [r7, #3]
 800233e:	f003 0207 	and.w	r2, r3, #7
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	429a      	cmp	r2, r3
 8002348:	d901      	bls.n	800234e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800234a:	2301      	movs	r3, #1
 800234c:	e04c      	b.n	80023e8 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800234e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002352:	2b00      	cmp	r3, #0
 8002354:	da0e      	bge.n	8002374 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002356:	78fb      	ldrb	r3, [r7, #3]
 8002358:	f003 0307 	and.w	r3, r3, #7
 800235c:	1c5a      	adds	r2, r3, #1
 800235e:	4613      	mov	r3, r2
 8002360:	009b      	lsls	r3, r3, #2
 8002362:	4413      	add	r3, r2
 8002364:	00db      	lsls	r3, r3, #3
 8002366:	687a      	ldr	r2, [r7, #4]
 8002368:	4413      	add	r3, r2
 800236a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	2201      	movs	r2, #1
 8002370:	705a      	strb	r2, [r3, #1]
 8002372:	e00c      	b.n	800238e <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002374:	78fa      	ldrb	r2, [r7, #3]
 8002376:	4613      	mov	r3, r2
 8002378:	009b      	lsls	r3, r3, #2
 800237a:	4413      	add	r3, r2
 800237c:	00db      	lsls	r3, r3, #3
 800237e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002382:	687a      	ldr	r2, [r7, #4]
 8002384:	4413      	add	r3, r2
 8002386:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	2200      	movs	r2, #0
 800238c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	2201      	movs	r2, #1
 8002392:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002394:	78fb      	ldrb	r3, [r7, #3]
 8002396:	f003 0307 	and.w	r3, r3, #7
 800239a:	b2da      	uxtb	r2, r3
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80023a6:	2b01      	cmp	r3, #1
 80023a8:	d101      	bne.n	80023ae <HAL_PCD_EP_SetStall+0x7e>
 80023aa:	2302      	movs	r3, #2
 80023ac:	e01c      	b.n	80023e8 <HAL_PCD_EP_SetStall+0xb8>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2201      	movs	r2, #1
 80023b2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	68f9      	ldr	r1, [r7, #12]
 80023bc:	4618      	mov	r0, r3
 80023be:	f005 f8f5 	bl	80075ac <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80023c2:	78fb      	ldrb	r3, [r7, #3]
 80023c4:	f003 0307 	and.w	r3, r3, #7
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d108      	bne.n	80023de <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681a      	ldr	r2, [r3, #0]
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80023d6:	4619      	mov	r1, r3
 80023d8:	4610      	mov	r0, r2
 80023da:	f005 fa21 	bl	8007820 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2200      	movs	r2, #0
 80023e2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80023e6:	2300      	movs	r3, #0
}
 80023e8:	4618      	mov	r0, r3
 80023ea:	3710      	adds	r7, #16
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bd80      	pop	{r7, pc}

080023f0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b084      	sub	sp, #16
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
 80023f8:	460b      	mov	r3, r1
 80023fa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80023fc:	78fb      	ldrb	r3, [r7, #3]
 80023fe:	f003 020f 	and.w	r2, r3, #15
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	429a      	cmp	r2, r3
 8002408:	d901      	bls.n	800240e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800240a:	2301      	movs	r3, #1
 800240c:	e040      	b.n	8002490 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800240e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002412:	2b00      	cmp	r3, #0
 8002414:	da0e      	bge.n	8002434 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002416:	78fb      	ldrb	r3, [r7, #3]
 8002418:	f003 0307 	and.w	r3, r3, #7
 800241c:	1c5a      	adds	r2, r3, #1
 800241e:	4613      	mov	r3, r2
 8002420:	009b      	lsls	r3, r3, #2
 8002422:	4413      	add	r3, r2
 8002424:	00db      	lsls	r3, r3, #3
 8002426:	687a      	ldr	r2, [r7, #4]
 8002428:	4413      	add	r3, r2
 800242a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	2201      	movs	r2, #1
 8002430:	705a      	strb	r2, [r3, #1]
 8002432:	e00e      	b.n	8002452 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002434:	78fb      	ldrb	r3, [r7, #3]
 8002436:	f003 0207 	and.w	r2, r3, #7
 800243a:	4613      	mov	r3, r2
 800243c:	009b      	lsls	r3, r3, #2
 800243e:	4413      	add	r3, r2
 8002440:	00db      	lsls	r3, r3, #3
 8002442:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002446:	687a      	ldr	r2, [r7, #4]
 8002448:	4413      	add	r3, r2
 800244a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	2200      	movs	r2, #0
 8002450:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	2200      	movs	r2, #0
 8002456:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002458:	78fb      	ldrb	r3, [r7, #3]
 800245a:	f003 0307 	and.w	r3, r3, #7
 800245e:	b2da      	uxtb	r2, r3
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800246a:	2b01      	cmp	r3, #1
 800246c:	d101      	bne.n	8002472 <HAL_PCD_EP_ClrStall+0x82>
 800246e:	2302      	movs	r3, #2
 8002470:	e00e      	b.n	8002490 <HAL_PCD_EP_ClrStall+0xa0>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2201      	movs	r2, #1
 8002476:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	68f9      	ldr	r1, [r7, #12]
 8002480:	4618      	mov	r0, r3
 8002482:	f005 f8e4 	bl	800764e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2200      	movs	r2, #0
 800248a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800248e:	2300      	movs	r3, #0
}
 8002490:	4618      	mov	r0, r3
 8002492:	3710      	adds	r7, #16
 8002494:	46bd      	mov	sp, r7
 8002496:	bd80      	pop	{r7, pc}

08002498 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b08e      	sub	sp, #56	; 0x38
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80024a0:	e2d1      	b.n	8002a46 <PCD_EP_ISR_Handler+0x5ae>
  {
    wIstr = hpcd->Instance->ISTR;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80024aa:	85fb      	strh	r3, [r7, #46]	; 0x2e
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80024ac:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80024ae:	b2db      	uxtb	r3, r3
 80024b0:	f003 030f 	and.w	r3, r3, #15
 80024b4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 80024b8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80024bc:	2b00      	cmp	r3, #0
 80024be:	f040 8152 	bne.w	8002766 <PCD_EP_ISR_Handler+0x2ce>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80024c2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80024c4:	f003 0310 	and.w	r3, r3, #16
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d150      	bne.n	800256e <PCD_EP_ISR_Handler+0xd6>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	881b      	ldrh	r3, [r3, #0]
 80024d2:	b29b      	uxth	r3, r3
 80024d4:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80024d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024dc:	81fb      	strh	r3, [r7, #14]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681a      	ldr	r2, [r3, #0]
 80024e2:	89fb      	ldrh	r3, [r7, #14]
 80024e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80024e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80024ec:	b29b      	uxth	r3, r3
 80024ee:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	3328      	adds	r3, #40	; 0x28
 80024f4:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80024fe:	b29b      	uxth	r3, r3
 8002500:	461a      	mov	r2, r3
 8002502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002504:	781b      	ldrb	r3, [r3, #0]
 8002506:	00db      	lsls	r3, r3, #3
 8002508:	4413      	add	r3, r2
 800250a:	687a      	ldr	r2, [r7, #4]
 800250c:	6812      	ldr	r2, [r2, #0]
 800250e:	4413      	add	r3, r2
 8002510:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002514:	881b      	ldrh	r3, [r3, #0]
 8002516:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800251a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800251c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800251e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002520:	695a      	ldr	r2, [r3, #20]
 8002522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002524:	69db      	ldr	r3, [r3, #28]
 8002526:	441a      	add	r2, r3
 8002528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800252a:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800252c:	2100      	movs	r1, #0
 800252e:	6878      	ldr	r0, [r7, #4]
 8002530:	f007 f863 	bl	80095fa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800253a:	b2db      	uxtb	r3, r3
 800253c:	2b00      	cmp	r3, #0
 800253e:	f000 8282 	beq.w	8002a46 <PCD_EP_ISR_Handler+0x5ae>
 8002542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002544:	699b      	ldr	r3, [r3, #24]
 8002546:	2b00      	cmp	r3, #0
 8002548:	f040 827d 	bne.w	8002a46 <PCD_EP_ISR_Handler+0x5ae>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002552:	b2db      	uxtb	r3, r3
 8002554:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002558:	b2da      	uxtb	r2, r3
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	b292      	uxth	r2, r2
 8002560:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2200      	movs	r2, #0
 8002568:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800256c:	e26b      	b.n	8002a46 <PCD_EP_ISR_Handler+0x5ae>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002574:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	881b      	ldrh	r3, [r3, #0]
 800257c:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800257e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002580:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002584:	2b00      	cmp	r3, #0
 8002586:	d032      	beq.n	80025ee <PCD_EP_ISR_Handler+0x156>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002590:	b29b      	uxth	r3, r3
 8002592:	461a      	mov	r2, r3
 8002594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002596:	781b      	ldrb	r3, [r3, #0]
 8002598:	00db      	lsls	r3, r3, #3
 800259a:	4413      	add	r3, r2
 800259c:	687a      	ldr	r2, [r7, #4]
 800259e:	6812      	ldr	r2, [r2, #0]
 80025a0:	4413      	add	r3, r2
 80025a2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80025a6:	881b      	ldrh	r3, [r3, #0]
 80025a8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80025ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ae:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6818      	ldr	r0, [r3, #0]
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 80025ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025bc:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80025be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c0:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80025c2:	b29b      	uxth	r3, r3
 80025c4:	f005 f979 	bl	80078ba <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	881b      	ldrh	r3, [r3, #0]
 80025ce:	b29a      	uxth	r2, r3
 80025d0:	f640 738f 	movw	r3, #3983	; 0xf8f
 80025d4:	4013      	ands	r3, r2
 80025d6:	823b      	strh	r3, [r7, #16]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	8a3a      	ldrh	r2, [r7, #16]
 80025de:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80025e2:	b292      	uxth	r2, r2
 80025e4:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80025e6:	6878      	ldr	r0, [r7, #4]
 80025e8:	f006 ffda 	bl	80095a0 <HAL_PCD_SetupStageCallback>
 80025ec:	e22b      	b.n	8002a46 <PCD_EP_ISR_Handler+0x5ae>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80025ee:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	f280 8227 	bge.w	8002a46 <PCD_EP_ISR_Handler+0x5ae>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	881b      	ldrh	r3, [r3, #0]
 80025fe:	b29a      	uxth	r2, r3
 8002600:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002604:	4013      	ands	r3, r2
 8002606:	83bb      	strh	r3, [r7, #28]
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	8bba      	ldrh	r2, [r7, #28]
 800260e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002612:	b292      	uxth	r2, r2
 8002614:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800261e:	b29b      	uxth	r3, r3
 8002620:	461a      	mov	r2, r3
 8002622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002624:	781b      	ldrb	r3, [r3, #0]
 8002626:	00db      	lsls	r3, r3, #3
 8002628:	4413      	add	r3, r2
 800262a:	687a      	ldr	r2, [r7, #4]
 800262c:	6812      	ldr	r2, [r2, #0]
 800262e:	4413      	add	r3, r2
 8002630:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002634:	881b      	ldrh	r3, [r3, #0]
 8002636:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800263a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800263c:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800263e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002640:	69db      	ldr	r3, [r3, #28]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d019      	beq.n	800267a <PCD_EP_ISR_Handler+0x1e2>
 8002646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002648:	695b      	ldr	r3, [r3, #20]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d015      	beq.n	800267a <PCD_EP_ISR_Handler+0x1e2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6818      	ldr	r0, [r3, #0]
 8002652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002654:	6959      	ldr	r1, [r3, #20]
 8002656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002658:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800265a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800265c:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800265e:	b29b      	uxth	r3, r3
 8002660:	f005 f92b 	bl	80078ba <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002666:	695a      	ldr	r2, [r3, #20]
 8002668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800266a:	69db      	ldr	r3, [r3, #28]
 800266c:	441a      	add	r2, r3
 800266e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002670:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002672:	2100      	movs	r1, #0
 8002674:	6878      	ldr	r0, [r7, #4]
 8002676:	f006 ffa5 	bl	80095c4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	61bb      	str	r3, [r7, #24]
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002688:	b29b      	uxth	r3, r3
 800268a:	461a      	mov	r2, r3
 800268c:	69bb      	ldr	r3, [r7, #24]
 800268e:	4413      	add	r3, r2
 8002690:	61bb      	str	r3, [r7, #24]
 8002692:	69bb      	ldr	r3, [r7, #24]
 8002694:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002698:	617b      	str	r3, [r7, #20]
 800269a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800269c:	691b      	ldr	r3, [r3, #16]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d112      	bne.n	80026c8 <PCD_EP_ISR_Handler+0x230>
 80026a2:	697b      	ldr	r3, [r7, #20]
 80026a4:	881b      	ldrh	r3, [r3, #0]
 80026a6:	b29b      	uxth	r3, r3
 80026a8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80026ac:	b29a      	uxth	r2, r3
 80026ae:	697b      	ldr	r3, [r7, #20]
 80026b0:	801a      	strh	r2, [r3, #0]
 80026b2:	697b      	ldr	r3, [r7, #20]
 80026b4:	881b      	ldrh	r3, [r3, #0]
 80026b6:	b29b      	uxth	r3, r3
 80026b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80026bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80026c0:	b29a      	uxth	r2, r3
 80026c2:	697b      	ldr	r3, [r7, #20]
 80026c4:	801a      	strh	r2, [r3, #0]
 80026c6:	e02f      	b.n	8002728 <PCD_EP_ISR_Handler+0x290>
 80026c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ca:	691b      	ldr	r3, [r3, #16]
 80026cc:	2b3e      	cmp	r3, #62	; 0x3e
 80026ce:	d813      	bhi.n	80026f8 <PCD_EP_ISR_Handler+0x260>
 80026d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d2:	691b      	ldr	r3, [r3, #16]
 80026d4:	085b      	lsrs	r3, r3, #1
 80026d6:	633b      	str	r3, [r7, #48]	; 0x30
 80026d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026da:	691b      	ldr	r3, [r3, #16]
 80026dc:	f003 0301 	and.w	r3, r3, #1
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d002      	beq.n	80026ea <PCD_EP_ISR_Handler+0x252>
 80026e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026e6:	3301      	adds	r3, #1
 80026e8:	633b      	str	r3, [r7, #48]	; 0x30
 80026ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026ec:	b29b      	uxth	r3, r3
 80026ee:	029b      	lsls	r3, r3, #10
 80026f0:	b29a      	uxth	r2, r3
 80026f2:	697b      	ldr	r3, [r7, #20]
 80026f4:	801a      	strh	r2, [r3, #0]
 80026f6:	e017      	b.n	8002728 <PCD_EP_ISR_Handler+0x290>
 80026f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026fa:	691b      	ldr	r3, [r3, #16]
 80026fc:	095b      	lsrs	r3, r3, #5
 80026fe:	633b      	str	r3, [r7, #48]	; 0x30
 8002700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002702:	691b      	ldr	r3, [r3, #16]
 8002704:	f003 031f 	and.w	r3, r3, #31
 8002708:	2b00      	cmp	r3, #0
 800270a:	d102      	bne.n	8002712 <PCD_EP_ISR_Handler+0x27a>
 800270c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800270e:	3b01      	subs	r3, #1
 8002710:	633b      	str	r3, [r7, #48]	; 0x30
 8002712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002714:	b29b      	uxth	r3, r3
 8002716:	029b      	lsls	r3, r3, #10
 8002718:	b29b      	uxth	r3, r3
 800271a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800271e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002722:	b29a      	uxth	r2, r3
 8002724:	697b      	ldr	r3, [r7, #20]
 8002726:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	881b      	ldrh	r3, [r3, #0]
 800272e:	b29b      	uxth	r3, r3
 8002730:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002734:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002738:	827b      	strh	r3, [r7, #18]
 800273a:	8a7b      	ldrh	r3, [r7, #18]
 800273c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002740:	827b      	strh	r3, [r7, #18]
 8002742:	8a7b      	ldrh	r3, [r7, #18]
 8002744:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002748:	827b      	strh	r3, [r7, #18]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681a      	ldr	r2, [r3, #0]
 800274e:	8a7b      	ldrh	r3, [r7, #18]
 8002750:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002754:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002758:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800275c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002760:	b29b      	uxth	r3, r3
 8002762:	8013      	strh	r3, [r2, #0]
 8002764:	e16f      	b.n	8002a46 <PCD_EP_ISR_Handler+0x5ae>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	461a      	mov	r2, r3
 800276c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002770:	009b      	lsls	r3, r3, #2
 8002772:	4413      	add	r3, r2
 8002774:	881b      	ldrh	r3, [r3, #0]
 8002776:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002778:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800277c:	2b00      	cmp	r3, #0
 800277e:	f280 80e4 	bge.w	800294a <PCD_EP_ISR_Handler+0x4b2>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	461a      	mov	r2, r3
 8002788:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800278c:	009b      	lsls	r3, r3, #2
 800278e:	4413      	add	r3, r2
 8002790:	881b      	ldrh	r3, [r3, #0]
 8002792:	b29a      	uxth	r2, r3
 8002794:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002798:	4013      	ands	r3, r2
 800279a:	853b      	strh	r3, [r7, #40]	; 0x28
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	461a      	mov	r2, r3
 80027a2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80027a6:	009b      	lsls	r3, r3, #2
 80027a8:	4413      	add	r3, r2
 80027aa:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80027ac:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80027b0:	b292      	uxth	r2, r2
 80027b2:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80027b4:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80027b8:	4613      	mov	r3, r2
 80027ba:	009b      	lsls	r3, r3, #2
 80027bc:	4413      	add	r3, r2
 80027be:	00db      	lsls	r3, r3, #3
 80027c0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80027c4:	687a      	ldr	r2, [r7, #4]
 80027c6:	4413      	add	r3, r2
 80027c8:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80027ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027cc:	7b1b      	ldrb	r3, [r3, #12]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d120      	bne.n	8002814 <PCD_EP_ISR_Handler+0x37c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80027da:	b29b      	uxth	r3, r3
 80027dc:	461a      	mov	r2, r3
 80027de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e0:	781b      	ldrb	r3, [r3, #0]
 80027e2:	00db      	lsls	r3, r3, #3
 80027e4:	4413      	add	r3, r2
 80027e6:	687a      	ldr	r2, [r7, #4]
 80027e8:	6812      	ldr	r2, [r2, #0]
 80027ea:	4413      	add	r3, r2
 80027ec:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80027f0:	881b      	ldrh	r3, [r3, #0]
 80027f2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80027f6:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 80027f8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	f000 8083 	beq.w	8002906 <PCD_EP_ISR_Handler+0x46e>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6818      	ldr	r0, [r3, #0]
 8002804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002806:	6959      	ldr	r1, [r3, #20]
 8002808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800280a:	88da      	ldrh	r2, [r3, #6]
 800280c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800280e:	f005 f854 	bl	80078ba <USB_ReadPMA>
 8002812:	e078      	b.n	8002906 <PCD_EP_ISR_Handler+0x46e>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002816:	78db      	ldrb	r3, [r3, #3]
 8002818:	2b02      	cmp	r3, #2
 800281a:	d108      	bne.n	800282e <PCD_EP_ISR_Handler+0x396>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800281c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800281e:	461a      	mov	r2, r3
 8002820:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002822:	6878      	ldr	r0, [r7, #4]
 8002824:	f000 f91d 	bl	8002a62 <HAL_PCD_EP_DB_Receive>
 8002828:	4603      	mov	r3, r0
 800282a:	86fb      	strh	r3, [r7, #54]	; 0x36
 800282c:	e06b      	b.n	8002906 <PCD_EP_ISR_Handler+0x46e>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	461a      	mov	r2, r3
 8002834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002836:	781b      	ldrb	r3, [r3, #0]
 8002838:	009b      	lsls	r3, r3, #2
 800283a:	4413      	add	r3, r2
 800283c:	881b      	ldrh	r3, [r3, #0]
 800283e:	b29b      	uxth	r3, r3
 8002840:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002844:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002848:	847b      	strh	r3, [r7, #34]	; 0x22
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	461a      	mov	r2, r3
 8002850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002852:	781b      	ldrb	r3, [r3, #0]
 8002854:	009b      	lsls	r3, r3, #2
 8002856:	441a      	add	r2, r3
 8002858:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800285a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800285e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002862:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002866:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800286a:	b29b      	uxth	r3, r3
 800286c:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	461a      	mov	r2, r3
 8002874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002876:	781b      	ldrb	r3, [r3, #0]
 8002878:	009b      	lsls	r3, r3, #2
 800287a:	4413      	add	r3, r2
 800287c:	881b      	ldrh	r3, [r3, #0]
 800287e:	b29b      	uxth	r3, r3
 8002880:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002884:	2b00      	cmp	r3, #0
 8002886:	d01f      	beq.n	80028c8 <PCD_EP_ISR_Handler+0x430>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002890:	b29b      	uxth	r3, r3
 8002892:	461a      	mov	r2, r3
 8002894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002896:	781b      	ldrb	r3, [r3, #0]
 8002898:	00db      	lsls	r3, r3, #3
 800289a:	4413      	add	r3, r2
 800289c:	687a      	ldr	r2, [r7, #4]
 800289e:	6812      	ldr	r2, [r2, #0]
 80028a0:	4413      	add	r3, r2
 80028a2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80028a6:	881b      	ldrh	r3, [r3, #0]
 80028a8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80028ac:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80028ae:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d028      	beq.n	8002906 <PCD_EP_ISR_Handler+0x46e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6818      	ldr	r0, [r3, #0]
 80028b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ba:	6959      	ldr	r1, [r3, #20]
 80028bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028be:	891a      	ldrh	r2, [r3, #8]
 80028c0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80028c2:	f004 fffa 	bl	80078ba <USB_ReadPMA>
 80028c6:	e01e      	b.n	8002906 <PCD_EP_ISR_Handler+0x46e>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80028d0:	b29b      	uxth	r3, r3
 80028d2:	461a      	mov	r2, r3
 80028d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d6:	781b      	ldrb	r3, [r3, #0]
 80028d8:	00db      	lsls	r3, r3, #3
 80028da:	4413      	add	r3, r2
 80028dc:	687a      	ldr	r2, [r7, #4]
 80028de:	6812      	ldr	r2, [r2, #0]
 80028e0:	4413      	add	r3, r2
 80028e2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80028e6:	881b      	ldrh	r3, [r3, #0]
 80028e8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80028ec:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80028ee:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d008      	beq.n	8002906 <PCD_EP_ISR_Handler+0x46e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6818      	ldr	r0, [r3, #0]
 80028f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028fa:	6959      	ldr	r1, [r3, #20]
 80028fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028fe:	895a      	ldrh	r2, [r3, #10]
 8002900:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002902:	f004 ffda 	bl	80078ba <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002908:	69da      	ldr	r2, [r3, #28]
 800290a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800290c:	441a      	add	r2, r3
 800290e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002910:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002914:	695a      	ldr	r2, [r3, #20]
 8002916:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002918:	441a      	add	r2, r3
 800291a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800291c:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800291e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002920:	699b      	ldr	r3, [r3, #24]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d004      	beq.n	8002930 <PCD_EP_ISR_Handler+0x498>
 8002926:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8002928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800292a:	691b      	ldr	r3, [r3, #16]
 800292c:	429a      	cmp	r2, r3
 800292e:	d206      	bcs.n	800293e <PCD_EP_ISR_Handler+0x4a6>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002932:	781b      	ldrb	r3, [r3, #0]
 8002934:	4619      	mov	r1, r3
 8002936:	6878      	ldr	r0, [r7, #4]
 8002938:	f006 fe44 	bl	80095c4 <HAL_PCD_DataOutStageCallback>
 800293c:	e005      	b.n	800294a <PCD_EP_ISR_Handler+0x4b2>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002944:	4618      	mov	r0, r3
 8002946:	f003 fd02 	bl	800634e <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800294a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800294c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002950:	2b00      	cmp	r3, #0
 8002952:	d078      	beq.n	8002a46 <PCD_EP_ISR_Handler+0x5ae>
      {
        ep = &hpcd->IN_ep[epindex];
 8002954:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002958:	1c5a      	adds	r2, r3, #1
 800295a:	4613      	mov	r3, r2
 800295c:	009b      	lsls	r3, r3, #2
 800295e:	4413      	add	r3, r2
 8002960:	00db      	lsls	r3, r3, #3
 8002962:	687a      	ldr	r2, [r7, #4]
 8002964:	4413      	add	r3, r2
 8002966:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	461a      	mov	r2, r3
 800296e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002972:	009b      	lsls	r3, r3, #2
 8002974:	4413      	add	r3, r2
 8002976:	881b      	ldrh	r3, [r3, #0]
 8002978:	b29b      	uxth	r3, r3
 800297a:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800297e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002982:	843b      	strh	r3, [r7, #32]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	461a      	mov	r2, r3
 800298a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800298e:	009b      	lsls	r3, r3, #2
 8002990:	441a      	add	r2, r3
 8002992:	8c3b      	ldrh	r3, [r7, #32]
 8002994:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002998:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800299c:	b29b      	uxth	r3, r3
 800299e:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 80029a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a2:	78db      	ldrb	r3, [r3, #3]
 80029a4:	2b02      	cmp	r3, #2
 80029a6:	d108      	bne.n	80029ba <PCD_EP_ISR_Handler+0x522>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80029a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029aa:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 80029ac:	2b02      	cmp	r3, #2
 80029ae:	d144      	bne.n	8002a3a <PCD_EP_ISR_Handler+0x5a2>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80029b0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80029b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d13f      	bne.n	8002a3a <PCD_EP_ISR_Handler+0x5a2>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80029c2:	b29b      	uxth	r3, r3
 80029c4:	461a      	mov	r2, r3
 80029c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c8:	781b      	ldrb	r3, [r3, #0]
 80029ca:	00db      	lsls	r3, r3, #3
 80029cc:	4413      	add	r3, r2
 80029ce:	687a      	ldr	r2, [r7, #4]
 80029d0:	6812      	ldr	r2, [r2, #0]
 80029d2:	4413      	add	r3, r2
 80029d4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80029d8:	881b      	ldrh	r3, [r3, #0]
 80029da:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80029de:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 80029e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e2:	699a      	ldr	r2, [r3, #24]
 80029e4:	8bfb      	ldrh	r3, [r7, #30]
 80029e6:	429a      	cmp	r2, r3
 80029e8:	d906      	bls.n	80029f8 <PCD_EP_ISR_Handler+0x560>
          {
            ep->xfer_len -= TxByteNbre;
 80029ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ec:	699a      	ldr	r2, [r3, #24]
 80029ee:	8bfb      	ldrh	r3, [r7, #30]
 80029f0:	1ad2      	subs	r2, r2, r3
 80029f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f4:	619a      	str	r2, [r3, #24]
 80029f6:	e002      	b.n	80029fe <PCD_EP_ISR_Handler+0x566>
          }
          else
          {
            ep->xfer_len = 0U;
 80029f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029fa:	2200      	movs	r2, #0
 80029fc:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 80029fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a00:	699b      	ldr	r3, [r3, #24]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d106      	bne.n	8002a14 <PCD_EP_ISR_Handler+0x57c>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a08:	781b      	ldrb	r3, [r3, #0]
 8002a0a:	4619      	mov	r1, r3
 8002a0c:	6878      	ldr	r0, [r7, #4]
 8002a0e:	f006 fdf4 	bl	80095fa <HAL_PCD_DataInStageCallback>
 8002a12:	e018      	b.n	8002a46 <PCD_EP_ISR_Handler+0x5ae>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8002a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a16:	695a      	ldr	r2, [r3, #20]
 8002a18:	8bfb      	ldrh	r3, [r7, #30]
 8002a1a:	441a      	add	r2, r3
 8002a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a1e:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8002a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a22:	69da      	ldr	r2, [r3, #28]
 8002a24:	8bfb      	ldrh	r3, [r7, #30]
 8002a26:	441a      	add	r2, r3
 8002a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a2a:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a32:	4618      	mov	r0, r3
 8002a34:	f003 fc8b 	bl	800634e <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8002a38:	e005      	b.n	8002a46 <PCD_EP_ISR_Handler+0x5ae>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002a3a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002a3c:	461a      	mov	r2, r3
 8002a3e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a40:	6878      	ldr	r0, [r7, #4]
 8002a42:	f000 f917 	bl	8002c74 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002a4e:	b29b      	uxth	r3, r3
 8002a50:	b21b      	sxth	r3, r3
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	f6ff ad25 	blt.w	80024a2 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002a58:	2300      	movs	r3, #0
}
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	3738      	adds	r7, #56	; 0x38
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}

08002a62 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002a62:	b580      	push	{r7, lr}
 8002a64:	b088      	sub	sp, #32
 8002a66:	af00      	add	r7, sp, #0
 8002a68:	60f8      	str	r0, [r7, #12]
 8002a6a:	60b9      	str	r1, [r7, #8]
 8002a6c:	4613      	mov	r3, r2
 8002a6e:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002a70:	88fb      	ldrh	r3, [r7, #6]
 8002a72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d07c      	beq.n	8002b74 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a82:	b29b      	uxth	r3, r3
 8002a84:	461a      	mov	r2, r3
 8002a86:	68bb      	ldr	r3, [r7, #8]
 8002a88:	781b      	ldrb	r3, [r3, #0]
 8002a8a:	00db      	lsls	r3, r3, #3
 8002a8c:	4413      	add	r3, r2
 8002a8e:	68fa      	ldr	r2, [r7, #12]
 8002a90:	6812      	ldr	r2, [r2, #0]
 8002a92:	4413      	add	r3, r2
 8002a94:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002a98:	881b      	ldrh	r3, [r3, #0]
 8002a9a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a9e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	699a      	ldr	r2, [r3, #24]
 8002aa4:	8b7b      	ldrh	r3, [r7, #26]
 8002aa6:	429a      	cmp	r2, r3
 8002aa8:	d306      	bcc.n	8002ab8 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8002aaa:	68bb      	ldr	r3, [r7, #8]
 8002aac:	699a      	ldr	r2, [r3, #24]
 8002aae:	8b7b      	ldrh	r3, [r7, #26]
 8002ab0:	1ad2      	subs	r2, r2, r3
 8002ab2:	68bb      	ldr	r3, [r7, #8]
 8002ab4:	619a      	str	r2, [r3, #24]
 8002ab6:	e002      	b.n	8002abe <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8002ab8:	68bb      	ldr	r3, [r7, #8]
 8002aba:	2200      	movs	r2, #0
 8002abc:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002abe:	68bb      	ldr	r3, [r7, #8]
 8002ac0:	699b      	ldr	r3, [r3, #24]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d123      	bne.n	8002b0e <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	461a      	mov	r2, r3
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	781b      	ldrb	r3, [r3, #0]
 8002ad0:	009b      	lsls	r3, r3, #2
 8002ad2:	4413      	add	r3, r2
 8002ad4:	881b      	ldrh	r3, [r3, #0]
 8002ad6:	b29b      	uxth	r3, r3
 8002ad8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002adc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ae0:	833b      	strh	r3, [r7, #24]
 8002ae2:	8b3b      	ldrh	r3, [r7, #24]
 8002ae4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002ae8:	833b      	strh	r3, [r7, #24]
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	461a      	mov	r2, r3
 8002af0:	68bb      	ldr	r3, [r7, #8]
 8002af2:	781b      	ldrb	r3, [r3, #0]
 8002af4:	009b      	lsls	r3, r3, #2
 8002af6:	441a      	add	r2, r3
 8002af8:	8b3b      	ldrh	r3, [r7, #24]
 8002afa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002afe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002b02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b0a:	b29b      	uxth	r3, r3
 8002b0c:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002b0e:	88fb      	ldrh	r3, [r7, #6]
 8002b10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d01f      	beq.n	8002b58 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	461a      	mov	r2, r3
 8002b1e:	68bb      	ldr	r3, [r7, #8]
 8002b20:	781b      	ldrb	r3, [r3, #0]
 8002b22:	009b      	lsls	r3, r3, #2
 8002b24:	4413      	add	r3, r2
 8002b26:	881b      	ldrh	r3, [r3, #0]
 8002b28:	b29b      	uxth	r3, r3
 8002b2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b32:	82fb      	strh	r3, [r7, #22]
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	461a      	mov	r2, r3
 8002b3a:	68bb      	ldr	r3, [r7, #8]
 8002b3c:	781b      	ldrb	r3, [r3, #0]
 8002b3e:	009b      	lsls	r3, r3, #2
 8002b40:	441a      	add	r2, r3
 8002b42:	8afb      	ldrh	r3, [r7, #22]
 8002b44:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002b48:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002b4c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b50:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002b54:	b29b      	uxth	r3, r3
 8002b56:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002b58:	8b7b      	ldrh	r3, [r7, #26]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	f000 8085 	beq.w	8002c6a <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	6818      	ldr	r0, [r3, #0]
 8002b64:	68bb      	ldr	r3, [r7, #8]
 8002b66:	6959      	ldr	r1, [r3, #20]
 8002b68:	68bb      	ldr	r3, [r7, #8]
 8002b6a:	891a      	ldrh	r2, [r3, #8]
 8002b6c:	8b7b      	ldrh	r3, [r7, #26]
 8002b6e:	f004 fea4 	bl	80078ba <USB_ReadPMA>
 8002b72:	e07a      	b.n	8002c6a <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b7c:	b29b      	uxth	r3, r3
 8002b7e:	461a      	mov	r2, r3
 8002b80:	68bb      	ldr	r3, [r7, #8]
 8002b82:	781b      	ldrb	r3, [r3, #0]
 8002b84:	00db      	lsls	r3, r3, #3
 8002b86:	4413      	add	r3, r2
 8002b88:	68fa      	ldr	r2, [r7, #12]
 8002b8a:	6812      	ldr	r2, [r2, #0]
 8002b8c:	4413      	add	r3, r2
 8002b8e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002b92:	881b      	ldrh	r3, [r3, #0]
 8002b94:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b98:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002b9a:	68bb      	ldr	r3, [r7, #8]
 8002b9c:	699a      	ldr	r2, [r3, #24]
 8002b9e:	8b7b      	ldrh	r3, [r7, #26]
 8002ba0:	429a      	cmp	r2, r3
 8002ba2:	d306      	bcc.n	8002bb2 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	699a      	ldr	r2, [r3, #24]
 8002ba8:	8b7b      	ldrh	r3, [r7, #26]
 8002baa:	1ad2      	subs	r2, r2, r3
 8002bac:	68bb      	ldr	r3, [r7, #8]
 8002bae:	619a      	str	r2, [r3, #24]
 8002bb0:	e002      	b.n	8002bb8 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8002bb2:	68bb      	ldr	r3, [r7, #8]
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	699b      	ldr	r3, [r3, #24]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d123      	bne.n	8002c08 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	461a      	mov	r2, r3
 8002bc6:	68bb      	ldr	r3, [r7, #8]
 8002bc8:	781b      	ldrb	r3, [r3, #0]
 8002bca:	009b      	lsls	r3, r3, #2
 8002bcc:	4413      	add	r3, r2
 8002bce:	881b      	ldrh	r3, [r3, #0]
 8002bd0:	b29b      	uxth	r3, r3
 8002bd2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002bd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bda:	83fb      	strh	r3, [r7, #30]
 8002bdc:	8bfb      	ldrh	r3, [r7, #30]
 8002bde:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002be2:	83fb      	strh	r3, [r7, #30]
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	461a      	mov	r2, r3
 8002bea:	68bb      	ldr	r3, [r7, #8]
 8002bec:	781b      	ldrb	r3, [r3, #0]
 8002bee:	009b      	lsls	r3, r3, #2
 8002bf0:	441a      	add	r2, r3
 8002bf2:	8bfb      	ldrh	r3, [r7, #30]
 8002bf4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002bf8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002bfc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c04:	b29b      	uxth	r3, r3
 8002c06:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002c08:	88fb      	ldrh	r3, [r7, #6]
 8002c0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d11f      	bne.n	8002c52 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	461a      	mov	r2, r3
 8002c18:	68bb      	ldr	r3, [r7, #8]
 8002c1a:	781b      	ldrb	r3, [r3, #0]
 8002c1c:	009b      	lsls	r3, r3, #2
 8002c1e:	4413      	add	r3, r2
 8002c20:	881b      	ldrh	r3, [r3, #0]
 8002c22:	b29b      	uxth	r3, r3
 8002c24:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c2c:	83bb      	strh	r3, [r7, #28]
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	461a      	mov	r2, r3
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	781b      	ldrb	r3, [r3, #0]
 8002c38:	009b      	lsls	r3, r3, #2
 8002c3a:	441a      	add	r2, r3
 8002c3c:	8bbb      	ldrh	r3, [r7, #28]
 8002c3e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002c42:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002c46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c4a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002c4e:	b29b      	uxth	r3, r3
 8002c50:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002c52:	8b7b      	ldrh	r3, [r7, #26]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d008      	beq.n	8002c6a <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	6818      	ldr	r0, [r3, #0]
 8002c5c:	68bb      	ldr	r3, [r7, #8]
 8002c5e:	6959      	ldr	r1, [r3, #20]
 8002c60:	68bb      	ldr	r3, [r7, #8]
 8002c62:	895a      	ldrh	r2, [r3, #10]
 8002c64:	8b7b      	ldrh	r3, [r7, #26]
 8002c66:	f004 fe28 	bl	80078ba <USB_ReadPMA>
    }
  }

  return count;
 8002c6a:	8b7b      	ldrh	r3, [r7, #26]
}
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	3720      	adds	r7, #32
 8002c70:	46bd      	mov	sp, r7
 8002c72:	bd80      	pop	{r7, pc}

08002c74 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b092      	sub	sp, #72	; 0x48
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	60f8      	str	r0, [r7, #12]
 8002c7c:	60b9      	str	r1, [r7, #8]
 8002c7e:	4613      	mov	r3, r2
 8002c80:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002c82:	88fb      	ldrh	r3, [r7, #6]
 8002c84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	f000 8130 	beq.w	8002eee <HAL_PCD_EP_DB_Transmit+0x27a>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c96:	b29b      	uxth	r3, r3
 8002c98:	461a      	mov	r2, r3
 8002c9a:	68bb      	ldr	r3, [r7, #8]
 8002c9c:	781b      	ldrb	r3, [r3, #0]
 8002c9e:	00db      	lsls	r3, r3, #3
 8002ca0:	4413      	add	r3, r2
 8002ca2:	68fa      	ldr	r2, [r7, #12]
 8002ca4:	6812      	ldr	r2, [r2, #0]
 8002ca6:	4413      	add	r3, r2
 8002ca8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002cac:	881b      	ldrh	r3, [r3, #0]
 8002cae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002cb2:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len > TxByteNbre)
 8002cb4:	68bb      	ldr	r3, [r7, #8]
 8002cb6:	699a      	ldr	r2, [r3, #24]
 8002cb8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002cba:	429a      	cmp	r2, r3
 8002cbc:	d906      	bls.n	8002ccc <HAL_PCD_EP_DB_Transmit+0x58>
    {
      ep->xfer_len -= TxByteNbre;
 8002cbe:	68bb      	ldr	r3, [r7, #8]
 8002cc0:	699a      	ldr	r2, [r3, #24]
 8002cc2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002cc4:	1ad2      	subs	r2, r2, r3
 8002cc6:	68bb      	ldr	r3, [r7, #8]
 8002cc8:	619a      	str	r2, [r3, #24]
 8002cca:	e002      	b.n	8002cd2 <HAL_PCD_EP_DB_Transmit+0x5e>
    }
    else
    {
      ep->xfer_len = 0U;
 8002ccc:	68bb      	ldr	r3, [r7, #8]
 8002cce:	2200      	movs	r2, #0
 8002cd0:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002cd2:	68bb      	ldr	r3, [r7, #8]
 8002cd4:	699b      	ldr	r3, [r3, #24]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d12c      	bne.n	8002d34 <HAL_PCD_EP_DB_Transmit+0xc0>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002cda:	68bb      	ldr	r3, [r7, #8]
 8002cdc:	781b      	ldrb	r3, [r3, #0]
 8002cde:	4619      	mov	r1, r3
 8002ce0:	68f8      	ldr	r0, [r7, #12]
 8002ce2:	f006 fc8a 	bl	80095fa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002ce6:	88fb      	ldrh	r3, [r7, #6]
 8002ce8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	f000 822d 	beq.w	800314c <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	461a      	mov	r2, r3
 8002cf8:	68bb      	ldr	r3, [r7, #8]
 8002cfa:	781b      	ldrb	r3, [r3, #0]
 8002cfc:	009b      	lsls	r3, r3, #2
 8002cfe:	4413      	add	r3, r2
 8002d00:	881b      	ldrh	r3, [r3, #0]
 8002d02:	b29b      	uxth	r3, r3
 8002d04:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d0c:	827b      	strh	r3, [r7, #18]
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	461a      	mov	r2, r3
 8002d14:	68bb      	ldr	r3, [r7, #8]
 8002d16:	781b      	ldrb	r3, [r3, #0]
 8002d18:	009b      	lsls	r3, r3, #2
 8002d1a:	441a      	add	r2, r3
 8002d1c:	8a7b      	ldrh	r3, [r7, #18]
 8002d1e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002d22:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002d26:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002d2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d2e:	b29b      	uxth	r3, r3
 8002d30:	8013      	strh	r3, [r2, #0]
 8002d32:	e20b      	b.n	800314c <HAL_PCD_EP_DB_Transmit+0x4d8>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002d34:	88fb      	ldrh	r3, [r7, #6]
 8002d36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d01f      	beq.n	8002d7e <HAL_PCD_EP_DB_Transmit+0x10a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	461a      	mov	r2, r3
 8002d44:	68bb      	ldr	r3, [r7, #8]
 8002d46:	781b      	ldrb	r3, [r3, #0]
 8002d48:	009b      	lsls	r3, r3, #2
 8002d4a:	4413      	add	r3, r2
 8002d4c:	881b      	ldrh	r3, [r3, #0]
 8002d4e:	b29b      	uxth	r3, r3
 8002d50:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d58:	84bb      	strh	r3, [r7, #36]	; 0x24
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	461a      	mov	r2, r3
 8002d60:	68bb      	ldr	r3, [r7, #8]
 8002d62:	781b      	ldrb	r3, [r3, #0]
 8002d64:	009b      	lsls	r3, r3, #2
 8002d66:	441a      	add	r2, r3
 8002d68:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002d6a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002d6e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002d72:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002d76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d7a:	b29b      	uxth	r3, r3
 8002d7c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002d7e:	68bb      	ldr	r3, [r7, #8]
 8002d80:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002d84:	2b01      	cmp	r3, #1
 8002d86:	f040 81e1 	bne.w	800314c <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        ep->xfer_buff += TxByteNbre;
 8002d8a:	68bb      	ldr	r3, [r7, #8]
 8002d8c:	695a      	ldr	r2, [r3, #20]
 8002d8e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002d90:	441a      	add	r2, r3
 8002d92:	68bb      	ldr	r3, [r7, #8]
 8002d94:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002d96:	68bb      	ldr	r3, [r7, #8]
 8002d98:	69da      	ldr	r2, [r3, #28]
 8002d9a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002d9c:	441a      	add	r2, r3
 8002d9e:	68bb      	ldr	r3, [r7, #8]
 8002da0:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002da2:	68bb      	ldr	r3, [r7, #8]
 8002da4:	6a1a      	ldr	r2, [r3, #32]
 8002da6:	68bb      	ldr	r3, [r7, #8]
 8002da8:	691b      	ldr	r3, [r3, #16]
 8002daa:	429a      	cmp	r2, r3
 8002dac:	d309      	bcc.n	8002dc2 <HAL_PCD_EP_DB_Transmit+0x14e>
        {
          len = ep->maxpacket;
 8002dae:	68bb      	ldr	r3, [r7, #8]
 8002db0:	691b      	ldr	r3, [r3, #16]
 8002db2:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 8002db4:	68bb      	ldr	r3, [r7, #8]
 8002db6:	6a1a      	ldr	r2, [r3, #32]
 8002db8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dba:	1ad2      	subs	r2, r2, r3
 8002dbc:	68bb      	ldr	r3, [r7, #8]
 8002dbe:	621a      	str	r2, [r3, #32]
 8002dc0:	e014      	b.n	8002dec <HAL_PCD_EP_DB_Transmit+0x178>
        }
        else if (ep->xfer_len_db == 0U)
 8002dc2:	68bb      	ldr	r3, [r7, #8]
 8002dc4:	6a1b      	ldr	r3, [r3, #32]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d106      	bne.n	8002dd8 <HAL_PCD_EP_DB_Transmit+0x164>
        {
          len = TxByteNbre;
 8002dca:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002dcc:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 8002dce:	68bb      	ldr	r3, [r7, #8]
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002dd6:	e009      	b.n	8002dec <HAL_PCD_EP_DB_Transmit+0x178>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002dd8:	68bb      	ldr	r3, [r7, #8]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8002de0:	68bb      	ldr	r3, [r7, #8]
 8002de2:	6a1b      	ldr	r3, [r3, #32]
 8002de4:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 8002de6:	68bb      	ldr	r3, [r7, #8]
 8002de8:	2200      	movs	r2, #0
 8002dea:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002dec:	68bb      	ldr	r3, [r7, #8]
 8002dee:	785b      	ldrb	r3, [r3, #1]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d155      	bne.n	8002ea0 <HAL_PCD_EP_DB_Transmit+0x22c>
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	61bb      	str	r3, [r7, #24]
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e02:	b29b      	uxth	r3, r3
 8002e04:	461a      	mov	r2, r3
 8002e06:	69bb      	ldr	r3, [r7, #24]
 8002e08:	4413      	add	r3, r2
 8002e0a:	61bb      	str	r3, [r7, #24]
 8002e0c:	68bb      	ldr	r3, [r7, #8]
 8002e0e:	781b      	ldrb	r3, [r3, #0]
 8002e10:	00da      	lsls	r2, r3, #3
 8002e12:	69bb      	ldr	r3, [r7, #24]
 8002e14:	4413      	add	r3, r2
 8002e16:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002e1a:	617b      	str	r3, [r7, #20]
 8002e1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d112      	bne.n	8002e48 <HAL_PCD_EP_DB_Transmit+0x1d4>
 8002e22:	697b      	ldr	r3, [r7, #20]
 8002e24:	881b      	ldrh	r3, [r3, #0]
 8002e26:	b29b      	uxth	r3, r3
 8002e28:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002e2c:	b29a      	uxth	r2, r3
 8002e2e:	697b      	ldr	r3, [r7, #20]
 8002e30:	801a      	strh	r2, [r3, #0]
 8002e32:	697b      	ldr	r3, [r7, #20]
 8002e34:	881b      	ldrh	r3, [r3, #0]
 8002e36:	b29b      	uxth	r3, r3
 8002e38:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002e3c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002e40:	b29a      	uxth	r2, r3
 8002e42:	697b      	ldr	r3, [r7, #20]
 8002e44:	801a      	strh	r2, [r3, #0]
 8002e46:	e047      	b.n	8002ed8 <HAL_PCD_EP_DB_Transmit+0x264>
 8002e48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e4a:	2b3e      	cmp	r3, #62	; 0x3e
 8002e4c:	d811      	bhi.n	8002e72 <HAL_PCD_EP_DB_Transmit+0x1fe>
 8002e4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e50:	085b      	lsrs	r3, r3, #1
 8002e52:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e56:	f003 0301 	and.w	r3, r3, #1
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d002      	beq.n	8002e64 <HAL_PCD_EP_DB_Transmit+0x1f0>
 8002e5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e60:	3301      	adds	r3, #1
 8002e62:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e66:	b29b      	uxth	r3, r3
 8002e68:	029b      	lsls	r3, r3, #10
 8002e6a:	b29a      	uxth	r2, r3
 8002e6c:	697b      	ldr	r3, [r7, #20]
 8002e6e:	801a      	strh	r2, [r3, #0]
 8002e70:	e032      	b.n	8002ed8 <HAL_PCD_EP_DB_Transmit+0x264>
 8002e72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e74:	095b      	lsrs	r3, r3, #5
 8002e76:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e7a:	f003 031f 	and.w	r3, r3, #31
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d102      	bne.n	8002e88 <HAL_PCD_EP_DB_Transmit+0x214>
 8002e82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e84:	3b01      	subs	r3, #1
 8002e86:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e8a:	b29b      	uxth	r3, r3
 8002e8c:	029b      	lsls	r3, r3, #10
 8002e8e:	b29b      	uxth	r3, r3
 8002e90:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002e94:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002e98:	b29a      	uxth	r2, r3
 8002e9a:	697b      	ldr	r3, [r7, #20]
 8002e9c:	801a      	strh	r2, [r3, #0]
 8002e9e:	e01b      	b.n	8002ed8 <HAL_PCD_EP_DB_Transmit+0x264>
 8002ea0:	68bb      	ldr	r3, [r7, #8]
 8002ea2:	785b      	ldrb	r3, [r3, #1]
 8002ea4:	2b01      	cmp	r3, #1
 8002ea6:	d117      	bne.n	8002ed8 <HAL_PCD_EP_DB_Transmit+0x264>
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	623b      	str	r3, [r7, #32]
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002eb6:	b29b      	uxth	r3, r3
 8002eb8:	461a      	mov	r2, r3
 8002eba:	6a3b      	ldr	r3, [r7, #32]
 8002ebc:	4413      	add	r3, r2
 8002ebe:	623b      	str	r3, [r7, #32]
 8002ec0:	68bb      	ldr	r3, [r7, #8]
 8002ec2:	781b      	ldrb	r3, [r3, #0]
 8002ec4:	00da      	lsls	r2, r3, #3
 8002ec6:	6a3b      	ldr	r3, [r7, #32]
 8002ec8:	4413      	add	r3, r2
 8002eca:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002ece:	61fb      	str	r3, [r7, #28]
 8002ed0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ed2:	b29a      	uxth	r2, r3
 8002ed4:	69fb      	ldr	r3, [r7, #28]
 8002ed6:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	6818      	ldr	r0, [r3, #0]
 8002edc:	68bb      	ldr	r3, [r7, #8]
 8002ede:	6959      	ldr	r1, [r3, #20]
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	891a      	ldrh	r2, [r3, #8]
 8002ee4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ee6:	b29b      	uxth	r3, r3
 8002ee8:	f004 fca6 	bl	8007838 <USB_WritePMA>
 8002eec:	e12e      	b.n	800314c <HAL_PCD_EP_DB_Transmit+0x4d8>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ef6:	b29b      	uxth	r3, r3
 8002ef8:	461a      	mov	r2, r3
 8002efa:	68bb      	ldr	r3, [r7, #8]
 8002efc:	781b      	ldrb	r3, [r3, #0]
 8002efe:	00db      	lsls	r3, r3, #3
 8002f00:	4413      	add	r3, r2
 8002f02:	68fa      	ldr	r2, [r7, #12]
 8002f04:	6812      	ldr	r2, [r2, #0]
 8002f06:	4413      	add	r3, r2
 8002f08:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002f0c:	881b      	ldrh	r3, [r3, #0]
 8002f0e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f12:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len >= TxByteNbre)
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	699a      	ldr	r2, [r3, #24]
 8002f18:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002f1a:	429a      	cmp	r2, r3
 8002f1c:	d306      	bcc.n	8002f2c <HAL_PCD_EP_DB_Transmit+0x2b8>
    {
      ep->xfer_len -= TxByteNbre;
 8002f1e:	68bb      	ldr	r3, [r7, #8]
 8002f20:	699a      	ldr	r2, [r3, #24]
 8002f22:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002f24:	1ad2      	subs	r2, r2, r3
 8002f26:	68bb      	ldr	r3, [r7, #8]
 8002f28:	619a      	str	r2, [r3, #24]
 8002f2a:	e002      	b.n	8002f32 <HAL_PCD_EP_DB_Transmit+0x2be>
    }
    else
    {
      ep->xfer_len = 0U;
 8002f2c:	68bb      	ldr	r3, [r7, #8]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002f32:	68bb      	ldr	r3, [r7, #8]
 8002f34:	699b      	ldr	r3, [r3, #24]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d12c      	bne.n	8002f94 <HAL_PCD_EP_DB_Transmit+0x320>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002f3a:	68bb      	ldr	r3, [r7, #8]
 8002f3c:	781b      	ldrb	r3, [r3, #0]
 8002f3e:	4619      	mov	r1, r3
 8002f40:	68f8      	ldr	r0, [r7, #12]
 8002f42:	f006 fb5a 	bl	80095fa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002f46:	88fb      	ldrh	r3, [r7, #6]
 8002f48:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	f040 80fd 	bne.w	800314c <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	461a      	mov	r2, r3
 8002f58:	68bb      	ldr	r3, [r7, #8]
 8002f5a:	781b      	ldrb	r3, [r3, #0]
 8002f5c:	009b      	lsls	r3, r3, #2
 8002f5e:	4413      	add	r3, r2
 8002f60:	881b      	ldrh	r3, [r3, #0]
 8002f62:	b29b      	uxth	r3, r3
 8002f64:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f6c:	84fb      	strh	r3, [r7, #38]	; 0x26
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	461a      	mov	r2, r3
 8002f74:	68bb      	ldr	r3, [r7, #8]
 8002f76:	781b      	ldrb	r3, [r3, #0]
 8002f78:	009b      	lsls	r3, r3, #2
 8002f7a:	441a      	add	r2, r3
 8002f7c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002f7e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002f82:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002f86:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002f8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f8e:	b29b      	uxth	r3, r3
 8002f90:	8013      	strh	r3, [r2, #0]
 8002f92:	e0db      	b.n	800314c <HAL_PCD_EP_DB_Transmit+0x4d8>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002f94:	88fb      	ldrh	r3, [r7, #6]
 8002f96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d11f      	bne.n	8002fde <HAL_PCD_EP_DB_Transmit+0x36a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	461a      	mov	r2, r3
 8002fa4:	68bb      	ldr	r3, [r7, #8]
 8002fa6:	781b      	ldrb	r3, [r3, #0]
 8002fa8:	009b      	lsls	r3, r3, #2
 8002faa:	4413      	add	r3, r2
 8002fac:	881b      	ldrh	r3, [r3, #0]
 8002fae:	b29b      	uxth	r3, r3
 8002fb0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002fb4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fb8:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	461a      	mov	r2, r3
 8002fc0:	68bb      	ldr	r3, [r7, #8]
 8002fc2:	781b      	ldrb	r3, [r3, #0]
 8002fc4:	009b      	lsls	r3, r3, #2
 8002fc6:	441a      	add	r2, r3
 8002fc8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8002fca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002fce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002fd2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002fd6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002fda:	b29b      	uxth	r3, r3
 8002fdc:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002fde:	68bb      	ldr	r3, [r7, #8]
 8002fe0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002fe4:	2b01      	cmp	r3, #1
 8002fe6:	f040 80b1 	bne.w	800314c <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        ep->xfer_buff += TxByteNbre;
 8002fea:	68bb      	ldr	r3, [r7, #8]
 8002fec:	695a      	ldr	r2, [r3, #20]
 8002fee:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002ff0:	441a      	add	r2, r3
 8002ff2:	68bb      	ldr	r3, [r7, #8]
 8002ff4:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002ff6:	68bb      	ldr	r3, [r7, #8]
 8002ff8:	69da      	ldr	r2, [r3, #28]
 8002ffa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002ffc:	441a      	add	r2, r3
 8002ffe:	68bb      	ldr	r3, [r7, #8]
 8003000:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003002:	68bb      	ldr	r3, [r7, #8]
 8003004:	6a1a      	ldr	r2, [r3, #32]
 8003006:	68bb      	ldr	r3, [r7, #8]
 8003008:	691b      	ldr	r3, [r3, #16]
 800300a:	429a      	cmp	r2, r3
 800300c:	d309      	bcc.n	8003022 <HAL_PCD_EP_DB_Transmit+0x3ae>
        {
          len = ep->maxpacket;
 800300e:	68bb      	ldr	r3, [r7, #8]
 8003010:	691b      	ldr	r3, [r3, #16]
 8003012:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	6a1a      	ldr	r2, [r3, #32]
 8003018:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800301a:	1ad2      	subs	r2, r2, r3
 800301c:	68bb      	ldr	r3, [r7, #8]
 800301e:	621a      	str	r2, [r3, #32]
 8003020:	e014      	b.n	800304c <HAL_PCD_EP_DB_Transmit+0x3d8>
        }
        else if (ep->xfer_len_db == 0U)
 8003022:	68bb      	ldr	r3, [r7, #8]
 8003024:	6a1b      	ldr	r3, [r3, #32]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d106      	bne.n	8003038 <HAL_PCD_EP_DB_Transmit+0x3c4>
        {
          len = TxByteNbre;
 800302a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800302c:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 800302e:	68bb      	ldr	r3, [r7, #8]
 8003030:	2200      	movs	r2, #0
 8003032:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003036:	e009      	b.n	800304c <HAL_PCD_EP_DB_Transmit+0x3d8>
        }
        else
        {
          len = ep->xfer_len_db;
 8003038:	68bb      	ldr	r3, [r7, #8]
 800303a:	6a1b      	ldr	r3, [r3, #32]
 800303c:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 800303e:	68bb      	ldr	r3, [r7, #8]
 8003040:	2200      	movs	r2, #0
 8003042:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8003044:	68bb      	ldr	r3, [r7, #8]
 8003046:	2200      	movs	r2, #0
 8003048:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	637b      	str	r3, [r7, #52]	; 0x34
 8003052:	68bb      	ldr	r3, [r7, #8]
 8003054:	785b      	ldrb	r3, [r3, #1]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d155      	bne.n	8003106 <HAL_PCD_EP_DB_Transmit+0x492>
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	647b      	str	r3, [r7, #68]	; 0x44
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003068:	b29b      	uxth	r3, r3
 800306a:	461a      	mov	r2, r3
 800306c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800306e:	4413      	add	r3, r2
 8003070:	647b      	str	r3, [r7, #68]	; 0x44
 8003072:	68bb      	ldr	r3, [r7, #8]
 8003074:	781b      	ldrb	r3, [r3, #0]
 8003076:	00da      	lsls	r2, r3, #3
 8003078:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800307a:	4413      	add	r3, r2
 800307c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003080:	643b      	str	r3, [r7, #64]	; 0x40
 8003082:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003084:	2b00      	cmp	r3, #0
 8003086:	d112      	bne.n	80030ae <HAL_PCD_EP_DB_Transmit+0x43a>
 8003088:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800308a:	881b      	ldrh	r3, [r3, #0]
 800308c:	b29b      	uxth	r3, r3
 800308e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003092:	b29a      	uxth	r2, r3
 8003094:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003096:	801a      	strh	r2, [r3, #0]
 8003098:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800309a:	881b      	ldrh	r3, [r3, #0]
 800309c:	b29b      	uxth	r3, r3
 800309e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80030a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80030a6:	b29a      	uxth	r2, r3
 80030a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030aa:	801a      	strh	r2, [r3, #0]
 80030ac:	e044      	b.n	8003138 <HAL_PCD_EP_DB_Transmit+0x4c4>
 80030ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030b0:	2b3e      	cmp	r3, #62	; 0x3e
 80030b2:	d811      	bhi.n	80030d8 <HAL_PCD_EP_DB_Transmit+0x464>
 80030b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030b6:	085b      	lsrs	r3, r3, #1
 80030b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80030ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030bc:	f003 0301 	and.w	r3, r3, #1
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d002      	beq.n	80030ca <HAL_PCD_EP_DB_Transmit+0x456>
 80030c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030c6:	3301      	adds	r3, #1
 80030c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80030ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030cc:	b29b      	uxth	r3, r3
 80030ce:	029b      	lsls	r3, r3, #10
 80030d0:	b29a      	uxth	r2, r3
 80030d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030d4:	801a      	strh	r2, [r3, #0]
 80030d6:	e02f      	b.n	8003138 <HAL_PCD_EP_DB_Transmit+0x4c4>
 80030d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030da:	095b      	lsrs	r3, r3, #5
 80030dc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80030de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030e0:	f003 031f 	and.w	r3, r3, #31
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d102      	bne.n	80030ee <HAL_PCD_EP_DB_Transmit+0x47a>
 80030e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030ea:	3b01      	subs	r3, #1
 80030ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 80030ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030f0:	b29b      	uxth	r3, r3
 80030f2:	029b      	lsls	r3, r3, #10
 80030f4:	b29b      	uxth	r3, r3
 80030f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80030fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80030fe:	b29a      	uxth	r2, r3
 8003100:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003102:	801a      	strh	r2, [r3, #0]
 8003104:	e018      	b.n	8003138 <HAL_PCD_EP_DB_Transmit+0x4c4>
 8003106:	68bb      	ldr	r3, [r7, #8]
 8003108:	785b      	ldrb	r3, [r3, #1]
 800310a:	2b01      	cmp	r3, #1
 800310c:	d114      	bne.n	8003138 <HAL_PCD_EP_DB_Transmit+0x4c4>
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003116:	b29b      	uxth	r3, r3
 8003118:	461a      	mov	r2, r3
 800311a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800311c:	4413      	add	r3, r2
 800311e:	637b      	str	r3, [r7, #52]	; 0x34
 8003120:	68bb      	ldr	r3, [r7, #8]
 8003122:	781b      	ldrb	r3, [r3, #0]
 8003124:	00da      	lsls	r2, r3, #3
 8003126:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003128:	4413      	add	r3, r2
 800312a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800312e:	633b      	str	r3, [r7, #48]	; 0x30
 8003130:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003132:	b29a      	uxth	r2, r3
 8003134:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003136:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	6818      	ldr	r0, [r3, #0]
 800313c:	68bb      	ldr	r3, [r7, #8]
 800313e:	6959      	ldr	r1, [r3, #20]
 8003140:	68bb      	ldr	r3, [r7, #8]
 8003142:	895a      	ldrh	r2, [r3, #10]
 8003144:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003146:	b29b      	uxth	r3, r3
 8003148:	f004 fb76 	bl	8007838 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	461a      	mov	r2, r3
 8003152:	68bb      	ldr	r3, [r7, #8]
 8003154:	781b      	ldrb	r3, [r3, #0]
 8003156:	009b      	lsls	r3, r3, #2
 8003158:	4413      	add	r3, r2
 800315a:	881b      	ldrh	r3, [r3, #0]
 800315c:	b29b      	uxth	r3, r3
 800315e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003162:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003166:	823b      	strh	r3, [r7, #16]
 8003168:	8a3b      	ldrh	r3, [r7, #16]
 800316a:	f083 0310 	eor.w	r3, r3, #16
 800316e:	823b      	strh	r3, [r7, #16]
 8003170:	8a3b      	ldrh	r3, [r7, #16]
 8003172:	f083 0320 	eor.w	r3, r3, #32
 8003176:	823b      	strh	r3, [r7, #16]
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	461a      	mov	r2, r3
 800317e:	68bb      	ldr	r3, [r7, #8]
 8003180:	781b      	ldrb	r3, [r3, #0]
 8003182:	009b      	lsls	r3, r3, #2
 8003184:	441a      	add	r2, r3
 8003186:	8a3b      	ldrh	r3, [r7, #16]
 8003188:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800318c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003190:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003194:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003198:	b29b      	uxth	r3, r3
 800319a:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800319c:	2300      	movs	r3, #0
}
 800319e:	4618      	mov	r0, r3
 80031a0:	3748      	adds	r7, #72	; 0x48
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bd80      	pop	{r7, pc}

080031a6 <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 80031a6:	b480      	push	{r7}
 80031a8:	b087      	sub	sp, #28
 80031aa:	af00      	add	r7, sp, #0
 80031ac:	60f8      	str	r0, [r7, #12]
 80031ae:	607b      	str	r3, [r7, #4]
 80031b0:	460b      	mov	r3, r1
 80031b2:	817b      	strh	r3, [r7, #10]
 80031b4:	4613      	mov	r3, r2
 80031b6:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80031b8:	897b      	ldrh	r3, [r7, #10]
 80031ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031be:	b29b      	uxth	r3, r3
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d00b      	beq.n	80031dc <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80031c4:	897b      	ldrh	r3, [r7, #10]
 80031c6:	f003 0307 	and.w	r3, r3, #7
 80031ca:	1c5a      	adds	r2, r3, #1
 80031cc:	4613      	mov	r3, r2
 80031ce:	009b      	lsls	r3, r3, #2
 80031d0:	4413      	add	r3, r2
 80031d2:	00db      	lsls	r3, r3, #3
 80031d4:	68fa      	ldr	r2, [r7, #12]
 80031d6:	4413      	add	r3, r2
 80031d8:	617b      	str	r3, [r7, #20]
 80031da:	e009      	b.n	80031f0 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80031dc:	897a      	ldrh	r2, [r7, #10]
 80031de:	4613      	mov	r3, r2
 80031e0:	009b      	lsls	r3, r3, #2
 80031e2:	4413      	add	r3, r2
 80031e4:	00db      	lsls	r3, r3, #3
 80031e6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80031ea:	68fa      	ldr	r2, [r7, #12]
 80031ec:	4413      	add	r3, r2
 80031ee:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80031f0:	893b      	ldrh	r3, [r7, #8]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d107      	bne.n	8003206 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80031f6:	697b      	ldr	r3, [r7, #20]
 80031f8:	2200      	movs	r2, #0
 80031fa:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	b29a      	uxth	r2, r3
 8003200:	697b      	ldr	r3, [r7, #20]
 8003202:	80da      	strh	r2, [r3, #6]
 8003204:	e00b      	b.n	800321e <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003206:	697b      	ldr	r3, [r7, #20]
 8003208:	2201      	movs	r2, #1
 800320a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	b29a      	uxth	r2, r3
 8003210:	697b      	ldr	r3, [r7, #20]
 8003212:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	0c1b      	lsrs	r3, r3, #16
 8003218:	b29a      	uxth	r2, r3
 800321a:	697b      	ldr	r3, [r7, #20]
 800321c:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 800321e:	2300      	movs	r3, #0
}
 8003220:	4618      	mov	r0, r3
 8003222:	371c      	adds	r7, #28
 8003224:	46bd      	mov	sp, r7
 8003226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322a:	4770      	bx	lr

0800322c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800322c:	b480      	push	{r7}
 800322e:	b085      	sub	sp, #20
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2201      	movs	r2, #1
 800323e:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2200      	movs	r2, #0
 8003246:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003250:	b29b      	uxth	r3, r3
 8003252:	f043 0301 	orr.w	r3, r3, #1
 8003256:	b29a      	uxth	r2, r3
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003264:	b29b      	uxth	r3, r3
 8003266:	f043 0302 	orr.w	r3, r3, #2
 800326a:	b29a      	uxth	r2, r3
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8003272:	2300      	movs	r3, #0
}
 8003274:	4618      	mov	r0, r3
 8003276:	3714      	adds	r7, #20
 8003278:	46bd      	mov	sp, r7
 800327a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327e:	4770      	bx	lr

08003280 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003280:	b480      	push	{r7}
 8003282:	b085      	sub	sp, #20
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d141      	bne.n	8003312 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800328e:	4b4b      	ldr	r3, [pc, #300]	; (80033bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003296:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800329a:	d131      	bne.n	8003300 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800329c:	4b47      	ldr	r3, [pc, #284]	; (80033bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800329e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80032a2:	4a46      	ldr	r2, [pc, #280]	; (80033bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80032a8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80032ac:	4b43      	ldr	r3, [pc, #268]	; (80033bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80032b4:	4a41      	ldr	r2, [pc, #260]	; (80033bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80032ba:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80032bc:	4b40      	ldr	r3, [pc, #256]	; (80033c0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	2232      	movs	r2, #50	; 0x32
 80032c2:	fb02 f303 	mul.w	r3, r2, r3
 80032c6:	4a3f      	ldr	r2, [pc, #252]	; (80033c4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80032c8:	fba2 2303 	umull	r2, r3, r2, r3
 80032cc:	0c9b      	lsrs	r3, r3, #18
 80032ce:	3301      	adds	r3, #1
 80032d0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80032d2:	e002      	b.n	80032da <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	3b01      	subs	r3, #1
 80032d8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80032da:	4b38      	ldr	r3, [pc, #224]	; (80033bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032dc:	695b      	ldr	r3, [r3, #20]
 80032de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032e6:	d102      	bne.n	80032ee <HAL_PWREx_ControlVoltageScaling+0x6e>
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d1f2      	bne.n	80032d4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80032ee:	4b33      	ldr	r3, [pc, #204]	; (80033bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032f0:	695b      	ldr	r3, [r3, #20]
 80032f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032fa:	d158      	bne.n	80033ae <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80032fc:	2303      	movs	r3, #3
 80032fe:	e057      	b.n	80033b0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003300:	4b2e      	ldr	r3, [pc, #184]	; (80033bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003302:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003306:	4a2d      	ldr	r2, [pc, #180]	; (80033bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003308:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800330c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003310:	e04d      	b.n	80033ae <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003318:	d141      	bne.n	800339e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800331a:	4b28      	ldr	r3, [pc, #160]	; (80033bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003322:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003326:	d131      	bne.n	800338c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003328:	4b24      	ldr	r3, [pc, #144]	; (80033bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800332a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800332e:	4a23      	ldr	r2, [pc, #140]	; (80033bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003330:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003334:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003338:	4b20      	ldr	r3, [pc, #128]	; (80033bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003340:	4a1e      	ldr	r2, [pc, #120]	; (80033bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003342:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003346:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003348:	4b1d      	ldr	r3, [pc, #116]	; (80033c0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	2232      	movs	r2, #50	; 0x32
 800334e:	fb02 f303 	mul.w	r3, r2, r3
 8003352:	4a1c      	ldr	r2, [pc, #112]	; (80033c4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003354:	fba2 2303 	umull	r2, r3, r2, r3
 8003358:	0c9b      	lsrs	r3, r3, #18
 800335a:	3301      	adds	r3, #1
 800335c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800335e:	e002      	b.n	8003366 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	3b01      	subs	r3, #1
 8003364:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003366:	4b15      	ldr	r3, [pc, #84]	; (80033bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003368:	695b      	ldr	r3, [r3, #20]
 800336a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800336e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003372:	d102      	bne.n	800337a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d1f2      	bne.n	8003360 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800337a:	4b10      	ldr	r3, [pc, #64]	; (80033bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800337c:	695b      	ldr	r3, [r3, #20]
 800337e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003382:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003386:	d112      	bne.n	80033ae <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003388:	2303      	movs	r3, #3
 800338a:	e011      	b.n	80033b0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800338c:	4b0b      	ldr	r3, [pc, #44]	; (80033bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800338e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003392:	4a0a      	ldr	r2, [pc, #40]	; (80033bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003394:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003398:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800339c:	e007      	b.n	80033ae <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800339e:	4b07      	ldr	r3, [pc, #28]	; (80033bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80033a6:	4a05      	ldr	r2, [pc, #20]	; (80033bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033a8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80033ac:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80033ae:	2300      	movs	r3, #0
}
 80033b0:	4618      	mov	r0, r3
 80033b2:	3714      	adds	r7, #20
 80033b4:	46bd      	mov	sp, r7
 80033b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ba:	4770      	bx	lr
 80033bc:	40007000 	.word	0x40007000
 80033c0:	20000054 	.word	0x20000054
 80033c4:	431bde83 	.word	0x431bde83

080033c8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80033c8:	b480      	push	{r7}
 80033ca:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80033cc:	4b05      	ldr	r3, [pc, #20]	; (80033e4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80033ce:	689b      	ldr	r3, [r3, #8]
 80033d0:	4a04      	ldr	r2, [pc, #16]	; (80033e4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80033d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80033d6:	6093      	str	r3, [r2, #8]
}
 80033d8:	bf00      	nop
 80033da:	46bd      	mov	sp, r7
 80033dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e0:	4770      	bx	lr
 80033e2:	bf00      	nop
 80033e4:	40007000 	.word	0x40007000

080033e8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b088      	sub	sp, #32
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d101      	bne.n	80033fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80033f6:	2301      	movs	r3, #1
 80033f8:	e308      	b.n	8003a0c <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f003 0301 	and.w	r3, r3, #1
 8003402:	2b00      	cmp	r3, #0
 8003404:	d075      	beq.n	80034f2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003406:	4ba3      	ldr	r3, [pc, #652]	; (8003694 <HAL_RCC_OscConfig+0x2ac>)
 8003408:	689b      	ldr	r3, [r3, #8]
 800340a:	f003 030c 	and.w	r3, r3, #12
 800340e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003410:	4ba0      	ldr	r3, [pc, #640]	; (8003694 <HAL_RCC_OscConfig+0x2ac>)
 8003412:	68db      	ldr	r3, [r3, #12]
 8003414:	f003 0303 	and.w	r3, r3, #3
 8003418:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800341a:	69bb      	ldr	r3, [r7, #24]
 800341c:	2b0c      	cmp	r3, #12
 800341e:	d102      	bne.n	8003426 <HAL_RCC_OscConfig+0x3e>
 8003420:	697b      	ldr	r3, [r7, #20]
 8003422:	2b03      	cmp	r3, #3
 8003424:	d002      	beq.n	800342c <HAL_RCC_OscConfig+0x44>
 8003426:	69bb      	ldr	r3, [r7, #24]
 8003428:	2b08      	cmp	r3, #8
 800342a:	d10b      	bne.n	8003444 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800342c:	4b99      	ldr	r3, [pc, #612]	; (8003694 <HAL_RCC_OscConfig+0x2ac>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003434:	2b00      	cmp	r3, #0
 8003436:	d05b      	beq.n	80034f0 <HAL_RCC_OscConfig+0x108>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	685b      	ldr	r3, [r3, #4]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d157      	bne.n	80034f0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003440:	2301      	movs	r3, #1
 8003442:	e2e3      	b.n	8003a0c <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800344c:	d106      	bne.n	800345c <HAL_RCC_OscConfig+0x74>
 800344e:	4b91      	ldr	r3, [pc, #580]	; (8003694 <HAL_RCC_OscConfig+0x2ac>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a90      	ldr	r2, [pc, #576]	; (8003694 <HAL_RCC_OscConfig+0x2ac>)
 8003454:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003458:	6013      	str	r3, [r2, #0]
 800345a:	e01d      	b.n	8003498 <HAL_RCC_OscConfig+0xb0>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003464:	d10c      	bne.n	8003480 <HAL_RCC_OscConfig+0x98>
 8003466:	4b8b      	ldr	r3, [pc, #556]	; (8003694 <HAL_RCC_OscConfig+0x2ac>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4a8a      	ldr	r2, [pc, #552]	; (8003694 <HAL_RCC_OscConfig+0x2ac>)
 800346c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003470:	6013      	str	r3, [r2, #0]
 8003472:	4b88      	ldr	r3, [pc, #544]	; (8003694 <HAL_RCC_OscConfig+0x2ac>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4a87      	ldr	r2, [pc, #540]	; (8003694 <HAL_RCC_OscConfig+0x2ac>)
 8003478:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800347c:	6013      	str	r3, [r2, #0]
 800347e:	e00b      	b.n	8003498 <HAL_RCC_OscConfig+0xb0>
 8003480:	4b84      	ldr	r3, [pc, #528]	; (8003694 <HAL_RCC_OscConfig+0x2ac>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4a83      	ldr	r2, [pc, #524]	; (8003694 <HAL_RCC_OscConfig+0x2ac>)
 8003486:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800348a:	6013      	str	r3, [r2, #0]
 800348c:	4b81      	ldr	r3, [pc, #516]	; (8003694 <HAL_RCC_OscConfig+0x2ac>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4a80      	ldr	r2, [pc, #512]	; (8003694 <HAL_RCC_OscConfig+0x2ac>)
 8003492:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003496:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d013      	beq.n	80034c8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034a0:	f7fe f8b6 	bl	8001610 <HAL_GetTick>
 80034a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80034a6:	e008      	b.n	80034ba <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034a8:	f7fe f8b2 	bl	8001610 <HAL_GetTick>
 80034ac:	4602      	mov	r2, r0
 80034ae:	693b      	ldr	r3, [r7, #16]
 80034b0:	1ad3      	subs	r3, r2, r3
 80034b2:	2b64      	cmp	r3, #100	; 0x64
 80034b4:	d901      	bls.n	80034ba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80034b6:	2303      	movs	r3, #3
 80034b8:	e2a8      	b.n	8003a0c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80034ba:	4b76      	ldr	r3, [pc, #472]	; (8003694 <HAL_RCC_OscConfig+0x2ac>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d0f0      	beq.n	80034a8 <HAL_RCC_OscConfig+0xc0>
 80034c6:	e014      	b.n	80034f2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034c8:	f7fe f8a2 	bl	8001610 <HAL_GetTick>
 80034cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80034ce:	e008      	b.n	80034e2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034d0:	f7fe f89e 	bl	8001610 <HAL_GetTick>
 80034d4:	4602      	mov	r2, r0
 80034d6:	693b      	ldr	r3, [r7, #16]
 80034d8:	1ad3      	subs	r3, r2, r3
 80034da:	2b64      	cmp	r3, #100	; 0x64
 80034dc:	d901      	bls.n	80034e2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80034de:	2303      	movs	r3, #3
 80034e0:	e294      	b.n	8003a0c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80034e2:	4b6c      	ldr	r3, [pc, #432]	; (8003694 <HAL_RCC_OscConfig+0x2ac>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d1f0      	bne.n	80034d0 <HAL_RCC_OscConfig+0xe8>
 80034ee:	e000      	b.n	80034f2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f003 0302 	and.w	r3, r3, #2
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d075      	beq.n	80035ea <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80034fe:	4b65      	ldr	r3, [pc, #404]	; (8003694 <HAL_RCC_OscConfig+0x2ac>)
 8003500:	689b      	ldr	r3, [r3, #8]
 8003502:	f003 030c 	and.w	r3, r3, #12
 8003506:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003508:	4b62      	ldr	r3, [pc, #392]	; (8003694 <HAL_RCC_OscConfig+0x2ac>)
 800350a:	68db      	ldr	r3, [r3, #12]
 800350c:	f003 0303 	and.w	r3, r3, #3
 8003510:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003512:	69bb      	ldr	r3, [r7, #24]
 8003514:	2b0c      	cmp	r3, #12
 8003516:	d102      	bne.n	800351e <HAL_RCC_OscConfig+0x136>
 8003518:	697b      	ldr	r3, [r7, #20]
 800351a:	2b02      	cmp	r3, #2
 800351c:	d002      	beq.n	8003524 <HAL_RCC_OscConfig+0x13c>
 800351e:	69bb      	ldr	r3, [r7, #24]
 8003520:	2b04      	cmp	r3, #4
 8003522:	d11f      	bne.n	8003564 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003524:	4b5b      	ldr	r3, [pc, #364]	; (8003694 <HAL_RCC_OscConfig+0x2ac>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800352c:	2b00      	cmp	r3, #0
 800352e:	d005      	beq.n	800353c <HAL_RCC_OscConfig+0x154>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	68db      	ldr	r3, [r3, #12]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d101      	bne.n	800353c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003538:	2301      	movs	r3, #1
 800353a:	e267      	b.n	8003a0c <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800353c:	4b55      	ldr	r3, [pc, #340]	; (8003694 <HAL_RCC_OscConfig+0x2ac>)
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	691b      	ldr	r3, [r3, #16]
 8003548:	061b      	lsls	r3, r3, #24
 800354a:	4952      	ldr	r1, [pc, #328]	; (8003694 <HAL_RCC_OscConfig+0x2ac>)
 800354c:	4313      	orrs	r3, r2
 800354e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003550:	4b51      	ldr	r3, [pc, #324]	; (8003698 <HAL_RCC_OscConfig+0x2b0>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4618      	mov	r0, r3
 8003556:	f7fe f80f 	bl	8001578 <HAL_InitTick>
 800355a:	4603      	mov	r3, r0
 800355c:	2b00      	cmp	r3, #0
 800355e:	d043      	beq.n	80035e8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003560:	2301      	movs	r3, #1
 8003562:	e253      	b.n	8003a0c <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	68db      	ldr	r3, [r3, #12]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d023      	beq.n	80035b4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800356c:	4b49      	ldr	r3, [pc, #292]	; (8003694 <HAL_RCC_OscConfig+0x2ac>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a48      	ldr	r2, [pc, #288]	; (8003694 <HAL_RCC_OscConfig+0x2ac>)
 8003572:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003576:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003578:	f7fe f84a 	bl	8001610 <HAL_GetTick>
 800357c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800357e:	e008      	b.n	8003592 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003580:	f7fe f846 	bl	8001610 <HAL_GetTick>
 8003584:	4602      	mov	r2, r0
 8003586:	693b      	ldr	r3, [r7, #16]
 8003588:	1ad3      	subs	r3, r2, r3
 800358a:	2b02      	cmp	r3, #2
 800358c:	d901      	bls.n	8003592 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800358e:	2303      	movs	r3, #3
 8003590:	e23c      	b.n	8003a0c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003592:	4b40      	ldr	r3, [pc, #256]	; (8003694 <HAL_RCC_OscConfig+0x2ac>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800359a:	2b00      	cmp	r3, #0
 800359c:	d0f0      	beq.n	8003580 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800359e:	4b3d      	ldr	r3, [pc, #244]	; (8003694 <HAL_RCC_OscConfig+0x2ac>)
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	691b      	ldr	r3, [r3, #16]
 80035aa:	061b      	lsls	r3, r3, #24
 80035ac:	4939      	ldr	r1, [pc, #228]	; (8003694 <HAL_RCC_OscConfig+0x2ac>)
 80035ae:	4313      	orrs	r3, r2
 80035b0:	604b      	str	r3, [r1, #4]
 80035b2:	e01a      	b.n	80035ea <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80035b4:	4b37      	ldr	r3, [pc, #220]	; (8003694 <HAL_RCC_OscConfig+0x2ac>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a36      	ldr	r2, [pc, #216]	; (8003694 <HAL_RCC_OscConfig+0x2ac>)
 80035ba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80035be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035c0:	f7fe f826 	bl	8001610 <HAL_GetTick>
 80035c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80035c6:	e008      	b.n	80035da <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035c8:	f7fe f822 	bl	8001610 <HAL_GetTick>
 80035cc:	4602      	mov	r2, r0
 80035ce:	693b      	ldr	r3, [r7, #16]
 80035d0:	1ad3      	subs	r3, r2, r3
 80035d2:	2b02      	cmp	r3, #2
 80035d4:	d901      	bls.n	80035da <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80035d6:	2303      	movs	r3, #3
 80035d8:	e218      	b.n	8003a0c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80035da:	4b2e      	ldr	r3, [pc, #184]	; (8003694 <HAL_RCC_OscConfig+0x2ac>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d1f0      	bne.n	80035c8 <HAL_RCC_OscConfig+0x1e0>
 80035e6:	e000      	b.n	80035ea <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80035e8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f003 0308 	and.w	r3, r3, #8
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d03c      	beq.n	8003670 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	695b      	ldr	r3, [r3, #20]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d01c      	beq.n	8003638 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80035fe:	4b25      	ldr	r3, [pc, #148]	; (8003694 <HAL_RCC_OscConfig+0x2ac>)
 8003600:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003604:	4a23      	ldr	r2, [pc, #140]	; (8003694 <HAL_RCC_OscConfig+0x2ac>)
 8003606:	f043 0301 	orr.w	r3, r3, #1
 800360a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800360e:	f7fd ffff 	bl	8001610 <HAL_GetTick>
 8003612:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003614:	e008      	b.n	8003628 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003616:	f7fd fffb 	bl	8001610 <HAL_GetTick>
 800361a:	4602      	mov	r2, r0
 800361c:	693b      	ldr	r3, [r7, #16]
 800361e:	1ad3      	subs	r3, r2, r3
 8003620:	2b02      	cmp	r3, #2
 8003622:	d901      	bls.n	8003628 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003624:	2303      	movs	r3, #3
 8003626:	e1f1      	b.n	8003a0c <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003628:	4b1a      	ldr	r3, [pc, #104]	; (8003694 <HAL_RCC_OscConfig+0x2ac>)
 800362a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800362e:	f003 0302 	and.w	r3, r3, #2
 8003632:	2b00      	cmp	r3, #0
 8003634:	d0ef      	beq.n	8003616 <HAL_RCC_OscConfig+0x22e>
 8003636:	e01b      	b.n	8003670 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003638:	4b16      	ldr	r3, [pc, #88]	; (8003694 <HAL_RCC_OscConfig+0x2ac>)
 800363a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800363e:	4a15      	ldr	r2, [pc, #84]	; (8003694 <HAL_RCC_OscConfig+0x2ac>)
 8003640:	f023 0301 	bic.w	r3, r3, #1
 8003644:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003648:	f7fd ffe2 	bl	8001610 <HAL_GetTick>
 800364c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800364e:	e008      	b.n	8003662 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003650:	f7fd ffde 	bl	8001610 <HAL_GetTick>
 8003654:	4602      	mov	r2, r0
 8003656:	693b      	ldr	r3, [r7, #16]
 8003658:	1ad3      	subs	r3, r2, r3
 800365a:	2b02      	cmp	r3, #2
 800365c:	d901      	bls.n	8003662 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 800365e:	2303      	movs	r3, #3
 8003660:	e1d4      	b.n	8003a0c <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003662:	4b0c      	ldr	r3, [pc, #48]	; (8003694 <HAL_RCC_OscConfig+0x2ac>)
 8003664:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003668:	f003 0302 	and.w	r3, r3, #2
 800366c:	2b00      	cmp	r3, #0
 800366e:	d1ef      	bne.n	8003650 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f003 0304 	and.w	r3, r3, #4
 8003678:	2b00      	cmp	r3, #0
 800367a:	f000 80ab 	beq.w	80037d4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800367e:	2300      	movs	r3, #0
 8003680:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003682:	4b04      	ldr	r3, [pc, #16]	; (8003694 <HAL_RCC_OscConfig+0x2ac>)
 8003684:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003686:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800368a:	2b00      	cmp	r3, #0
 800368c:	d106      	bne.n	800369c <HAL_RCC_OscConfig+0x2b4>
 800368e:	2301      	movs	r3, #1
 8003690:	e005      	b.n	800369e <HAL_RCC_OscConfig+0x2b6>
 8003692:	bf00      	nop
 8003694:	40021000 	.word	0x40021000
 8003698:	20000058 	.word	0x20000058
 800369c:	2300      	movs	r3, #0
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d00d      	beq.n	80036be <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036a2:	4baf      	ldr	r3, [pc, #700]	; (8003960 <HAL_RCC_OscConfig+0x578>)
 80036a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036a6:	4aae      	ldr	r2, [pc, #696]	; (8003960 <HAL_RCC_OscConfig+0x578>)
 80036a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036ac:	6593      	str	r3, [r2, #88]	; 0x58
 80036ae:	4bac      	ldr	r3, [pc, #688]	; (8003960 <HAL_RCC_OscConfig+0x578>)
 80036b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036b6:	60fb      	str	r3, [r7, #12]
 80036b8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80036ba:	2301      	movs	r3, #1
 80036bc:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80036be:	4ba9      	ldr	r3, [pc, #676]	; (8003964 <HAL_RCC_OscConfig+0x57c>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d118      	bne.n	80036fc <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80036ca:	4ba6      	ldr	r3, [pc, #664]	; (8003964 <HAL_RCC_OscConfig+0x57c>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4aa5      	ldr	r2, [pc, #660]	; (8003964 <HAL_RCC_OscConfig+0x57c>)
 80036d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80036d6:	f7fd ff9b 	bl	8001610 <HAL_GetTick>
 80036da:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80036dc:	e008      	b.n	80036f0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036de:	f7fd ff97 	bl	8001610 <HAL_GetTick>
 80036e2:	4602      	mov	r2, r0
 80036e4:	693b      	ldr	r3, [r7, #16]
 80036e6:	1ad3      	subs	r3, r2, r3
 80036e8:	2b02      	cmp	r3, #2
 80036ea:	d901      	bls.n	80036f0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80036ec:	2303      	movs	r3, #3
 80036ee:	e18d      	b.n	8003a0c <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80036f0:	4b9c      	ldr	r3, [pc, #624]	; (8003964 <HAL_RCC_OscConfig+0x57c>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d0f0      	beq.n	80036de <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	689b      	ldr	r3, [r3, #8]
 8003700:	2b01      	cmp	r3, #1
 8003702:	d108      	bne.n	8003716 <HAL_RCC_OscConfig+0x32e>
 8003704:	4b96      	ldr	r3, [pc, #600]	; (8003960 <HAL_RCC_OscConfig+0x578>)
 8003706:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800370a:	4a95      	ldr	r2, [pc, #596]	; (8003960 <HAL_RCC_OscConfig+0x578>)
 800370c:	f043 0301 	orr.w	r3, r3, #1
 8003710:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003714:	e024      	b.n	8003760 <HAL_RCC_OscConfig+0x378>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	689b      	ldr	r3, [r3, #8]
 800371a:	2b05      	cmp	r3, #5
 800371c:	d110      	bne.n	8003740 <HAL_RCC_OscConfig+0x358>
 800371e:	4b90      	ldr	r3, [pc, #576]	; (8003960 <HAL_RCC_OscConfig+0x578>)
 8003720:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003724:	4a8e      	ldr	r2, [pc, #568]	; (8003960 <HAL_RCC_OscConfig+0x578>)
 8003726:	f043 0304 	orr.w	r3, r3, #4
 800372a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800372e:	4b8c      	ldr	r3, [pc, #560]	; (8003960 <HAL_RCC_OscConfig+0x578>)
 8003730:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003734:	4a8a      	ldr	r2, [pc, #552]	; (8003960 <HAL_RCC_OscConfig+0x578>)
 8003736:	f043 0301 	orr.w	r3, r3, #1
 800373a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800373e:	e00f      	b.n	8003760 <HAL_RCC_OscConfig+0x378>
 8003740:	4b87      	ldr	r3, [pc, #540]	; (8003960 <HAL_RCC_OscConfig+0x578>)
 8003742:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003746:	4a86      	ldr	r2, [pc, #536]	; (8003960 <HAL_RCC_OscConfig+0x578>)
 8003748:	f023 0301 	bic.w	r3, r3, #1
 800374c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003750:	4b83      	ldr	r3, [pc, #524]	; (8003960 <HAL_RCC_OscConfig+0x578>)
 8003752:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003756:	4a82      	ldr	r2, [pc, #520]	; (8003960 <HAL_RCC_OscConfig+0x578>)
 8003758:	f023 0304 	bic.w	r3, r3, #4
 800375c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	689b      	ldr	r3, [r3, #8]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d016      	beq.n	8003796 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003768:	f7fd ff52 	bl	8001610 <HAL_GetTick>
 800376c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800376e:	e00a      	b.n	8003786 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003770:	f7fd ff4e 	bl	8001610 <HAL_GetTick>
 8003774:	4602      	mov	r2, r0
 8003776:	693b      	ldr	r3, [r7, #16]
 8003778:	1ad3      	subs	r3, r2, r3
 800377a:	f241 3288 	movw	r2, #5000	; 0x1388
 800377e:	4293      	cmp	r3, r2
 8003780:	d901      	bls.n	8003786 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003782:	2303      	movs	r3, #3
 8003784:	e142      	b.n	8003a0c <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003786:	4b76      	ldr	r3, [pc, #472]	; (8003960 <HAL_RCC_OscConfig+0x578>)
 8003788:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800378c:	f003 0302 	and.w	r3, r3, #2
 8003790:	2b00      	cmp	r3, #0
 8003792:	d0ed      	beq.n	8003770 <HAL_RCC_OscConfig+0x388>
 8003794:	e015      	b.n	80037c2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003796:	f7fd ff3b 	bl	8001610 <HAL_GetTick>
 800379a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800379c:	e00a      	b.n	80037b4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800379e:	f7fd ff37 	bl	8001610 <HAL_GetTick>
 80037a2:	4602      	mov	r2, r0
 80037a4:	693b      	ldr	r3, [r7, #16]
 80037a6:	1ad3      	subs	r3, r2, r3
 80037a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d901      	bls.n	80037b4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80037b0:	2303      	movs	r3, #3
 80037b2:	e12b      	b.n	8003a0c <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80037b4:	4b6a      	ldr	r3, [pc, #424]	; (8003960 <HAL_RCC_OscConfig+0x578>)
 80037b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037ba:	f003 0302 	and.w	r3, r3, #2
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d1ed      	bne.n	800379e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80037c2:	7ffb      	ldrb	r3, [r7, #31]
 80037c4:	2b01      	cmp	r3, #1
 80037c6:	d105      	bne.n	80037d4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037c8:	4b65      	ldr	r3, [pc, #404]	; (8003960 <HAL_RCC_OscConfig+0x578>)
 80037ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037cc:	4a64      	ldr	r2, [pc, #400]	; (8003960 <HAL_RCC_OscConfig+0x578>)
 80037ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037d2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f003 0320 	and.w	r3, r3, #32
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d03c      	beq.n	800385a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	699b      	ldr	r3, [r3, #24]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d01c      	beq.n	8003822 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80037e8:	4b5d      	ldr	r3, [pc, #372]	; (8003960 <HAL_RCC_OscConfig+0x578>)
 80037ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80037ee:	4a5c      	ldr	r2, [pc, #368]	; (8003960 <HAL_RCC_OscConfig+0x578>)
 80037f0:	f043 0301 	orr.w	r3, r3, #1
 80037f4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037f8:	f7fd ff0a 	bl	8001610 <HAL_GetTick>
 80037fc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80037fe:	e008      	b.n	8003812 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003800:	f7fd ff06 	bl	8001610 <HAL_GetTick>
 8003804:	4602      	mov	r2, r0
 8003806:	693b      	ldr	r3, [r7, #16]
 8003808:	1ad3      	subs	r3, r2, r3
 800380a:	2b02      	cmp	r3, #2
 800380c:	d901      	bls.n	8003812 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800380e:	2303      	movs	r3, #3
 8003810:	e0fc      	b.n	8003a0c <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003812:	4b53      	ldr	r3, [pc, #332]	; (8003960 <HAL_RCC_OscConfig+0x578>)
 8003814:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003818:	f003 0302 	and.w	r3, r3, #2
 800381c:	2b00      	cmp	r3, #0
 800381e:	d0ef      	beq.n	8003800 <HAL_RCC_OscConfig+0x418>
 8003820:	e01b      	b.n	800385a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003822:	4b4f      	ldr	r3, [pc, #316]	; (8003960 <HAL_RCC_OscConfig+0x578>)
 8003824:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003828:	4a4d      	ldr	r2, [pc, #308]	; (8003960 <HAL_RCC_OscConfig+0x578>)
 800382a:	f023 0301 	bic.w	r3, r3, #1
 800382e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003832:	f7fd feed 	bl	8001610 <HAL_GetTick>
 8003836:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003838:	e008      	b.n	800384c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800383a:	f7fd fee9 	bl	8001610 <HAL_GetTick>
 800383e:	4602      	mov	r2, r0
 8003840:	693b      	ldr	r3, [r7, #16]
 8003842:	1ad3      	subs	r3, r2, r3
 8003844:	2b02      	cmp	r3, #2
 8003846:	d901      	bls.n	800384c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003848:	2303      	movs	r3, #3
 800384a:	e0df      	b.n	8003a0c <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800384c:	4b44      	ldr	r3, [pc, #272]	; (8003960 <HAL_RCC_OscConfig+0x578>)
 800384e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003852:	f003 0302 	and.w	r3, r3, #2
 8003856:	2b00      	cmp	r3, #0
 8003858:	d1ef      	bne.n	800383a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	69db      	ldr	r3, [r3, #28]
 800385e:	2b00      	cmp	r3, #0
 8003860:	f000 80d3 	beq.w	8003a0a <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003864:	4b3e      	ldr	r3, [pc, #248]	; (8003960 <HAL_RCC_OscConfig+0x578>)
 8003866:	689b      	ldr	r3, [r3, #8]
 8003868:	f003 030c 	and.w	r3, r3, #12
 800386c:	2b0c      	cmp	r3, #12
 800386e:	f000 808d 	beq.w	800398c <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	69db      	ldr	r3, [r3, #28]
 8003876:	2b02      	cmp	r3, #2
 8003878:	d15a      	bne.n	8003930 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800387a:	4b39      	ldr	r3, [pc, #228]	; (8003960 <HAL_RCC_OscConfig+0x578>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4a38      	ldr	r2, [pc, #224]	; (8003960 <HAL_RCC_OscConfig+0x578>)
 8003880:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003884:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003886:	f7fd fec3 	bl	8001610 <HAL_GetTick>
 800388a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800388c:	e008      	b.n	80038a0 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800388e:	f7fd febf 	bl	8001610 <HAL_GetTick>
 8003892:	4602      	mov	r2, r0
 8003894:	693b      	ldr	r3, [r7, #16]
 8003896:	1ad3      	subs	r3, r2, r3
 8003898:	2b02      	cmp	r3, #2
 800389a:	d901      	bls.n	80038a0 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 800389c:	2303      	movs	r3, #3
 800389e:	e0b5      	b.n	8003a0c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80038a0:	4b2f      	ldr	r3, [pc, #188]	; (8003960 <HAL_RCC_OscConfig+0x578>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d1f0      	bne.n	800388e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80038ac:	4b2c      	ldr	r3, [pc, #176]	; (8003960 <HAL_RCC_OscConfig+0x578>)
 80038ae:	68da      	ldr	r2, [r3, #12]
 80038b0:	4b2d      	ldr	r3, [pc, #180]	; (8003968 <HAL_RCC_OscConfig+0x580>)
 80038b2:	4013      	ands	r3, r2
 80038b4:	687a      	ldr	r2, [r7, #4]
 80038b6:	6a11      	ldr	r1, [r2, #32]
 80038b8:	687a      	ldr	r2, [r7, #4]
 80038ba:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80038bc:	3a01      	subs	r2, #1
 80038be:	0112      	lsls	r2, r2, #4
 80038c0:	4311      	orrs	r1, r2
 80038c2:	687a      	ldr	r2, [r7, #4]
 80038c4:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80038c6:	0212      	lsls	r2, r2, #8
 80038c8:	4311      	orrs	r1, r2
 80038ca:	687a      	ldr	r2, [r7, #4]
 80038cc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80038ce:	0852      	lsrs	r2, r2, #1
 80038d0:	3a01      	subs	r2, #1
 80038d2:	0552      	lsls	r2, r2, #21
 80038d4:	4311      	orrs	r1, r2
 80038d6:	687a      	ldr	r2, [r7, #4]
 80038d8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80038da:	0852      	lsrs	r2, r2, #1
 80038dc:	3a01      	subs	r2, #1
 80038de:	0652      	lsls	r2, r2, #25
 80038e0:	4311      	orrs	r1, r2
 80038e2:	687a      	ldr	r2, [r7, #4]
 80038e4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80038e6:	06d2      	lsls	r2, r2, #27
 80038e8:	430a      	orrs	r2, r1
 80038ea:	491d      	ldr	r1, [pc, #116]	; (8003960 <HAL_RCC_OscConfig+0x578>)
 80038ec:	4313      	orrs	r3, r2
 80038ee:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80038f0:	4b1b      	ldr	r3, [pc, #108]	; (8003960 <HAL_RCC_OscConfig+0x578>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4a1a      	ldr	r2, [pc, #104]	; (8003960 <HAL_RCC_OscConfig+0x578>)
 80038f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80038fa:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80038fc:	4b18      	ldr	r3, [pc, #96]	; (8003960 <HAL_RCC_OscConfig+0x578>)
 80038fe:	68db      	ldr	r3, [r3, #12]
 8003900:	4a17      	ldr	r2, [pc, #92]	; (8003960 <HAL_RCC_OscConfig+0x578>)
 8003902:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003906:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003908:	f7fd fe82 	bl	8001610 <HAL_GetTick>
 800390c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800390e:	e008      	b.n	8003922 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003910:	f7fd fe7e 	bl	8001610 <HAL_GetTick>
 8003914:	4602      	mov	r2, r0
 8003916:	693b      	ldr	r3, [r7, #16]
 8003918:	1ad3      	subs	r3, r2, r3
 800391a:	2b02      	cmp	r3, #2
 800391c:	d901      	bls.n	8003922 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 800391e:	2303      	movs	r3, #3
 8003920:	e074      	b.n	8003a0c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003922:	4b0f      	ldr	r3, [pc, #60]	; (8003960 <HAL_RCC_OscConfig+0x578>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800392a:	2b00      	cmp	r3, #0
 800392c:	d0f0      	beq.n	8003910 <HAL_RCC_OscConfig+0x528>
 800392e:	e06c      	b.n	8003a0a <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003930:	4b0b      	ldr	r3, [pc, #44]	; (8003960 <HAL_RCC_OscConfig+0x578>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4a0a      	ldr	r2, [pc, #40]	; (8003960 <HAL_RCC_OscConfig+0x578>)
 8003936:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800393a:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800393c:	4b08      	ldr	r3, [pc, #32]	; (8003960 <HAL_RCC_OscConfig+0x578>)
 800393e:	68db      	ldr	r3, [r3, #12]
 8003940:	4a07      	ldr	r2, [pc, #28]	; (8003960 <HAL_RCC_OscConfig+0x578>)
 8003942:	f023 0303 	bic.w	r3, r3, #3
 8003946:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003948:	4b05      	ldr	r3, [pc, #20]	; (8003960 <HAL_RCC_OscConfig+0x578>)
 800394a:	68db      	ldr	r3, [r3, #12]
 800394c:	4a04      	ldr	r2, [pc, #16]	; (8003960 <HAL_RCC_OscConfig+0x578>)
 800394e:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003952:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003956:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003958:	f7fd fe5a 	bl	8001610 <HAL_GetTick>
 800395c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800395e:	e00e      	b.n	800397e <HAL_RCC_OscConfig+0x596>
 8003960:	40021000 	.word	0x40021000
 8003964:	40007000 	.word	0x40007000
 8003968:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800396c:	f7fd fe50 	bl	8001610 <HAL_GetTick>
 8003970:	4602      	mov	r2, r0
 8003972:	693b      	ldr	r3, [r7, #16]
 8003974:	1ad3      	subs	r3, r2, r3
 8003976:	2b02      	cmp	r3, #2
 8003978:	d901      	bls.n	800397e <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 800397a:	2303      	movs	r3, #3
 800397c:	e046      	b.n	8003a0c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800397e:	4b25      	ldr	r3, [pc, #148]	; (8003a14 <HAL_RCC_OscConfig+0x62c>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003986:	2b00      	cmp	r3, #0
 8003988:	d1f0      	bne.n	800396c <HAL_RCC_OscConfig+0x584>
 800398a:	e03e      	b.n	8003a0a <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	69db      	ldr	r3, [r3, #28]
 8003990:	2b01      	cmp	r3, #1
 8003992:	d101      	bne.n	8003998 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8003994:	2301      	movs	r3, #1
 8003996:	e039      	b.n	8003a0c <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003998:	4b1e      	ldr	r3, [pc, #120]	; (8003a14 <HAL_RCC_OscConfig+0x62c>)
 800399a:	68db      	ldr	r3, [r3, #12]
 800399c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800399e:	697b      	ldr	r3, [r7, #20]
 80039a0:	f003 0203 	and.w	r2, r3, #3
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6a1b      	ldr	r3, [r3, #32]
 80039a8:	429a      	cmp	r2, r3
 80039aa:	d12c      	bne.n	8003a06 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80039ac:	697b      	ldr	r3, [r7, #20]
 80039ae:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b6:	3b01      	subs	r3, #1
 80039b8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039ba:	429a      	cmp	r2, r3
 80039bc:	d123      	bne.n	8003a06 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80039be:	697b      	ldr	r3, [r7, #20]
 80039c0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039c8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80039ca:	429a      	cmp	r2, r3
 80039cc:	d11b      	bne.n	8003a06 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80039ce:	697b      	ldr	r3, [r7, #20]
 80039d0:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039d8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80039da:	429a      	cmp	r2, r3
 80039dc:	d113      	bne.n	8003a06 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80039de:	697b      	ldr	r3, [r7, #20]
 80039e0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039e8:	085b      	lsrs	r3, r3, #1
 80039ea:	3b01      	subs	r3, #1
 80039ec:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80039ee:	429a      	cmp	r2, r3
 80039f0:	d109      	bne.n	8003a06 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80039f2:	697b      	ldr	r3, [r7, #20]
 80039f4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039fc:	085b      	lsrs	r3, r3, #1
 80039fe:	3b01      	subs	r3, #1
 8003a00:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003a02:	429a      	cmp	r2, r3
 8003a04:	d001      	beq.n	8003a0a <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 8003a06:	2301      	movs	r3, #1
 8003a08:	e000      	b.n	8003a0c <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 8003a0a:	2300      	movs	r3, #0
}
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	3720      	adds	r7, #32
 8003a10:	46bd      	mov	sp, r7
 8003a12:	bd80      	pop	{r7, pc}
 8003a14:	40021000 	.word	0x40021000

08003a18 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b086      	sub	sp, #24
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
 8003a20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003a22:	2300      	movs	r3, #0
 8003a24:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d101      	bne.n	8003a30 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	e11e      	b.n	8003c6e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003a30:	4b91      	ldr	r3, [pc, #580]	; (8003c78 <HAL_RCC_ClockConfig+0x260>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f003 030f 	and.w	r3, r3, #15
 8003a38:	683a      	ldr	r2, [r7, #0]
 8003a3a:	429a      	cmp	r2, r3
 8003a3c:	d910      	bls.n	8003a60 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a3e:	4b8e      	ldr	r3, [pc, #568]	; (8003c78 <HAL_RCC_ClockConfig+0x260>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f023 020f 	bic.w	r2, r3, #15
 8003a46:	498c      	ldr	r1, [pc, #560]	; (8003c78 <HAL_RCC_ClockConfig+0x260>)
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	4313      	orrs	r3, r2
 8003a4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a4e:	4b8a      	ldr	r3, [pc, #552]	; (8003c78 <HAL_RCC_ClockConfig+0x260>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f003 030f 	and.w	r3, r3, #15
 8003a56:	683a      	ldr	r2, [r7, #0]
 8003a58:	429a      	cmp	r2, r3
 8003a5a:	d001      	beq.n	8003a60 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	e106      	b.n	8003c6e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f003 0301 	and.w	r3, r3, #1
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d073      	beq.n	8003b54 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	685b      	ldr	r3, [r3, #4]
 8003a70:	2b03      	cmp	r3, #3
 8003a72:	d129      	bne.n	8003ac8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a74:	4b81      	ldr	r3, [pc, #516]	; (8003c7c <HAL_RCC_ClockConfig+0x264>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d101      	bne.n	8003a84 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003a80:	2301      	movs	r3, #1
 8003a82:	e0f4      	b.n	8003c6e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003a84:	f000 f966 	bl	8003d54 <RCC_GetSysClockFreqFromPLLSource>
 8003a88:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003a8a:	693b      	ldr	r3, [r7, #16]
 8003a8c:	4a7c      	ldr	r2, [pc, #496]	; (8003c80 <HAL_RCC_ClockConfig+0x268>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d93f      	bls.n	8003b12 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003a92:	4b7a      	ldr	r3, [pc, #488]	; (8003c7c <HAL_RCC_ClockConfig+0x264>)
 8003a94:	689b      	ldr	r3, [r3, #8]
 8003a96:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d009      	beq.n	8003ab2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d033      	beq.n	8003b12 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d12f      	bne.n	8003b12 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003ab2:	4b72      	ldr	r3, [pc, #456]	; (8003c7c <HAL_RCC_ClockConfig+0x264>)
 8003ab4:	689b      	ldr	r3, [r3, #8]
 8003ab6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003aba:	4a70      	ldr	r2, [pc, #448]	; (8003c7c <HAL_RCC_ClockConfig+0x264>)
 8003abc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ac0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003ac2:	2380      	movs	r3, #128	; 0x80
 8003ac4:	617b      	str	r3, [r7, #20]
 8003ac6:	e024      	b.n	8003b12 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	2b02      	cmp	r3, #2
 8003ace:	d107      	bne.n	8003ae0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003ad0:	4b6a      	ldr	r3, [pc, #424]	; (8003c7c <HAL_RCC_ClockConfig+0x264>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d109      	bne.n	8003af0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003adc:	2301      	movs	r3, #1
 8003ade:	e0c6      	b.n	8003c6e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ae0:	4b66      	ldr	r3, [pc, #408]	; (8003c7c <HAL_RCC_ClockConfig+0x264>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d101      	bne.n	8003af0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003aec:	2301      	movs	r3, #1
 8003aee:	e0be      	b.n	8003c6e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003af0:	f000 f8ce 	bl	8003c90 <HAL_RCC_GetSysClockFreq>
 8003af4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003af6:	693b      	ldr	r3, [r7, #16]
 8003af8:	4a61      	ldr	r2, [pc, #388]	; (8003c80 <HAL_RCC_ClockConfig+0x268>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d909      	bls.n	8003b12 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003afe:	4b5f      	ldr	r3, [pc, #380]	; (8003c7c <HAL_RCC_ClockConfig+0x264>)
 8003b00:	689b      	ldr	r3, [r3, #8]
 8003b02:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003b06:	4a5d      	ldr	r2, [pc, #372]	; (8003c7c <HAL_RCC_ClockConfig+0x264>)
 8003b08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b0c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003b0e:	2380      	movs	r3, #128	; 0x80
 8003b10:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003b12:	4b5a      	ldr	r3, [pc, #360]	; (8003c7c <HAL_RCC_ClockConfig+0x264>)
 8003b14:	689b      	ldr	r3, [r3, #8]
 8003b16:	f023 0203 	bic.w	r2, r3, #3
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	4957      	ldr	r1, [pc, #348]	; (8003c7c <HAL_RCC_ClockConfig+0x264>)
 8003b20:	4313      	orrs	r3, r2
 8003b22:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b24:	f7fd fd74 	bl	8001610 <HAL_GetTick>
 8003b28:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b2a:	e00a      	b.n	8003b42 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b2c:	f7fd fd70 	bl	8001610 <HAL_GetTick>
 8003b30:	4602      	mov	r2, r0
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	1ad3      	subs	r3, r2, r3
 8003b36:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d901      	bls.n	8003b42 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003b3e:	2303      	movs	r3, #3
 8003b40:	e095      	b.n	8003c6e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b42:	4b4e      	ldr	r3, [pc, #312]	; (8003c7c <HAL_RCC_ClockConfig+0x264>)
 8003b44:	689b      	ldr	r3, [r3, #8]
 8003b46:	f003 020c 	and.w	r2, r3, #12
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	009b      	lsls	r3, r3, #2
 8003b50:	429a      	cmp	r2, r3
 8003b52:	d1eb      	bne.n	8003b2c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f003 0302 	and.w	r3, r3, #2
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d023      	beq.n	8003ba8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f003 0304 	and.w	r3, r3, #4
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d005      	beq.n	8003b78 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003b6c:	4b43      	ldr	r3, [pc, #268]	; (8003c7c <HAL_RCC_ClockConfig+0x264>)
 8003b6e:	689b      	ldr	r3, [r3, #8]
 8003b70:	4a42      	ldr	r2, [pc, #264]	; (8003c7c <HAL_RCC_ClockConfig+0x264>)
 8003b72:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003b76:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f003 0308 	and.w	r3, r3, #8
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d007      	beq.n	8003b94 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003b84:	4b3d      	ldr	r3, [pc, #244]	; (8003c7c <HAL_RCC_ClockConfig+0x264>)
 8003b86:	689b      	ldr	r3, [r3, #8]
 8003b88:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003b8c:	4a3b      	ldr	r2, [pc, #236]	; (8003c7c <HAL_RCC_ClockConfig+0x264>)
 8003b8e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003b92:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b94:	4b39      	ldr	r3, [pc, #228]	; (8003c7c <HAL_RCC_ClockConfig+0x264>)
 8003b96:	689b      	ldr	r3, [r3, #8]
 8003b98:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	689b      	ldr	r3, [r3, #8]
 8003ba0:	4936      	ldr	r1, [pc, #216]	; (8003c7c <HAL_RCC_ClockConfig+0x264>)
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	608b      	str	r3, [r1, #8]
 8003ba6:	e008      	b.n	8003bba <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003ba8:	697b      	ldr	r3, [r7, #20]
 8003baa:	2b80      	cmp	r3, #128	; 0x80
 8003bac:	d105      	bne.n	8003bba <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003bae:	4b33      	ldr	r3, [pc, #204]	; (8003c7c <HAL_RCC_ClockConfig+0x264>)
 8003bb0:	689b      	ldr	r3, [r3, #8]
 8003bb2:	4a32      	ldr	r2, [pc, #200]	; (8003c7c <HAL_RCC_ClockConfig+0x264>)
 8003bb4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003bb8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003bba:	4b2f      	ldr	r3, [pc, #188]	; (8003c78 <HAL_RCC_ClockConfig+0x260>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f003 030f 	and.w	r3, r3, #15
 8003bc2:	683a      	ldr	r2, [r7, #0]
 8003bc4:	429a      	cmp	r2, r3
 8003bc6:	d21d      	bcs.n	8003c04 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bc8:	4b2b      	ldr	r3, [pc, #172]	; (8003c78 <HAL_RCC_ClockConfig+0x260>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f023 020f 	bic.w	r2, r3, #15
 8003bd0:	4929      	ldr	r1, [pc, #164]	; (8003c78 <HAL_RCC_ClockConfig+0x260>)
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	4313      	orrs	r3, r2
 8003bd6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003bd8:	f7fd fd1a 	bl	8001610 <HAL_GetTick>
 8003bdc:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bde:	e00a      	b.n	8003bf6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003be0:	f7fd fd16 	bl	8001610 <HAL_GetTick>
 8003be4:	4602      	mov	r2, r0
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	1ad3      	subs	r3, r2, r3
 8003bea:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d901      	bls.n	8003bf6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003bf2:	2303      	movs	r3, #3
 8003bf4:	e03b      	b.n	8003c6e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bf6:	4b20      	ldr	r3, [pc, #128]	; (8003c78 <HAL_RCC_ClockConfig+0x260>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f003 030f 	and.w	r3, r3, #15
 8003bfe:	683a      	ldr	r2, [r7, #0]
 8003c00:	429a      	cmp	r2, r3
 8003c02:	d1ed      	bne.n	8003be0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f003 0304 	and.w	r3, r3, #4
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d008      	beq.n	8003c22 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c10:	4b1a      	ldr	r3, [pc, #104]	; (8003c7c <HAL_RCC_ClockConfig+0x264>)
 8003c12:	689b      	ldr	r3, [r3, #8]
 8003c14:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	68db      	ldr	r3, [r3, #12]
 8003c1c:	4917      	ldr	r1, [pc, #92]	; (8003c7c <HAL_RCC_ClockConfig+0x264>)
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f003 0308 	and.w	r3, r3, #8
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d009      	beq.n	8003c42 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003c2e:	4b13      	ldr	r3, [pc, #76]	; (8003c7c <HAL_RCC_ClockConfig+0x264>)
 8003c30:	689b      	ldr	r3, [r3, #8]
 8003c32:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	691b      	ldr	r3, [r3, #16]
 8003c3a:	00db      	lsls	r3, r3, #3
 8003c3c:	490f      	ldr	r1, [pc, #60]	; (8003c7c <HAL_RCC_ClockConfig+0x264>)
 8003c3e:	4313      	orrs	r3, r2
 8003c40:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003c42:	f000 f825 	bl	8003c90 <HAL_RCC_GetSysClockFreq>
 8003c46:	4601      	mov	r1, r0
 8003c48:	4b0c      	ldr	r3, [pc, #48]	; (8003c7c <HAL_RCC_ClockConfig+0x264>)
 8003c4a:	689b      	ldr	r3, [r3, #8]
 8003c4c:	091b      	lsrs	r3, r3, #4
 8003c4e:	f003 030f 	and.w	r3, r3, #15
 8003c52:	4a0c      	ldr	r2, [pc, #48]	; (8003c84 <HAL_RCC_ClockConfig+0x26c>)
 8003c54:	5cd3      	ldrb	r3, [r2, r3]
 8003c56:	f003 031f 	and.w	r3, r3, #31
 8003c5a:	fa21 f303 	lsr.w	r3, r1, r3
 8003c5e:	4a0a      	ldr	r2, [pc, #40]	; (8003c88 <HAL_RCC_ClockConfig+0x270>)
 8003c60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003c62:	4b0a      	ldr	r3, [pc, #40]	; (8003c8c <HAL_RCC_ClockConfig+0x274>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4618      	mov	r0, r3
 8003c68:	f7fd fc86 	bl	8001578 <HAL_InitTick>
 8003c6c:	4603      	mov	r3, r0
}
 8003c6e:	4618      	mov	r0, r3
 8003c70:	3718      	adds	r7, #24
 8003c72:	46bd      	mov	sp, r7
 8003c74:	bd80      	pop	{r7, pc}
 8003c76:	bf00      	nop
 8003c78:	40022000 	.word	0x40022000
 8003c7c:	40021000 	.word	0x40021000
 8003c80:	04c4b400 	.word	0x04c4b400
 8003c84:	08009c04 	.word	0x08009c04
 8003c88:	20000054 	.word	0x20000054
 8003c8c:	20000058 	.word	0x20000058

08003c90 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c90:	b480      	push	{r7}
 8003c92:	b087      	sub	sp, #28
 8003c94:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003c96:	4b2c      	ldr	r3, [pc, #176]	; (8003d48 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c98:	689b      	ldr	r3, [r3, #8]
 8003c9a:	f003 030c 	and.w	r3, r3, #12
 8003c9e:	2b04      	cmp	r3, #4
 8003ca0:	d102      	bne.n	8003ca8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003ca2:	4b2a      	ldr	r3, [pc, #168]	; (8003d4c <HAL_RCC_GetSysClockFreq+0xbc>)
 8003ca4:	613b      	str	r3, [r7, #16]
 8003ca6:	e047      	b.n	8003d38 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003ca8:	4b27      	ldr	r3, [pc, #156]	; (8003d48 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003caa:	689b      	ldr	r3, [r3, #8]
 8003cac:	f003 030c 	and.w	r3, r3, #12
 8003cb0:	2b08      	cmp	r3, #8
 8003cb2:	d102      	bne.n	8003cba <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003cb4:	4b26      	ldr	r3, [pc, #152]	; (8003d50 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003cb6:	613b      	str	r3, [r7, #16]
 8003cb8:	e03e      	b.n	8003d38 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003cba:	4b23      	ldr	r3, [pc, #140]	; (8003d48 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003cbc:	689b      	ldr	r3, [r3, #8]
 8003cbe:	f003 030c 	and.w	r3, r3, #12
 8003cc2:	2b0c      	cmp	r3, #12
 8003cc4:	d136      	bne.n	8003d34 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003cc6:	4b20      	ldr	r3, [pc, #128]	; (8003d48 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003cc8:	68db      	ldr	r3, [r3, #12]
 8003cca:	f003 0303 	and.w	r3, r3, #3
 8003cce:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003cd0:	4b1d      	ldr	r3, [pc, #116]	; (8003d48 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003cd2:	68db      	ldr	r3, [r3, #12]
 8003cd4:	091b      	lsrs	r3, r3, #4
 8003cd6:	f003 030f 	and.w	r3, r3, #15
 8003cda:	3301      	adds	r3, #1
 8003cdc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	2b03      	cmp	r3, #3
 8003ce2:	d10c      	bne.n	8003cfe <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003ce4:	4a1a      	ldr	r2, [pc, #104]	; (8003d50 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003ce6:	68bb      	ldr	r3, [r7, #8]
 8003ce8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cec:	4a16      	ldr	r2, [pc, #88]	; (8003d48 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003cee:	68d2      	ldr	r2, [r2, #12]
 8003cf0:	0a12      	lsrs	r2, r2, #8
 8003cf2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003cf6:	fb02 f303 	mul.w	r3, r2, r3
 8003cfa:	617b      	str	r3, [r7, #20]
      break;
 8003cfc:	e00c      	b.n	8003d18 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003cfe:	4a13      	ldr	r2, [pc, #76]	; (8003d4c <HAL_RCC_GetSysClockFreq+0xbc>)
 8003d00:	68bb      	ldr	r3, [r7, #8]
 8003d02:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d06:	4a10      	ldr	r2, [pc, #64]	; (8003d48 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d08:	68d2      	ldr	r2, [r2, #12]
 8003d0a:	0a12      	lsrs	r2, r2, #8
 8003d0c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003d10:	fb02 f303 	mul.w	r3, r2, r3
 8003d14:	617b      	str	r3, [r7, #20]
      break;
 8003d16:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003d18:	4b0b      	ldr	r3, [pc, #44]	; (8003d48 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d1a:	68db      	ldr	r3, [r3, #12]
 8003d1c:	0e5b      	lsrs	r3, r3, #25
 8003d1e:	f003 0303 	and.w	r3, r3, #3
 8003d22:	3301      	adds	r3, #1
 8003d24:	005b      	lsls	r3, r3, #1
 8003d26:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003d28:	697a      	ldr	r2, [r7, #20]
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d30:	613b      	str	r3, [r7, #16]
 8003d32:	e001      	b.n	8003d38 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003d34:	2300      	movs	r3, #0
 8003d36:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003d38:	693b      	ldr	r3, [r7, #16]
}
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	371c      	adds	r7, #28
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d44:	4770      	bx	lr
 8003d46:	bf00      	nop
 8003d48:	40021000 	.word	0x40021000
 8003d4c:	00f42400 	.word	0x00f42400
 8003d50:	007a1200 	.word	0x007a1200

08003d54 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003d54:	b480      	push	{r7}
 8003d56:	b087      	sub	sp, #28
 8003d58:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003d5a:	4b1e      	ldr	r3, [pc, #120]	; (8003dd4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003d5c:	68db      	ldr	r3, [r3, #12]
 8003d5e:	f003 0303 	and.w	r3, r3, #3
 8003d62:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003d64:	4b1b      	ldr	r3, [pc, #108]	; (8003dd4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003d66:	68db      	ldr	r3, [r3, #12]
 8003d68:	091b      	lsrs	r3, r3, #4
 8003d6a:	f003 030f 	and.w	r3, r3, #15
 8003d6e:	3301      	adds	r3, #1
 8003d70:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003d72:	693b      	ldr	r3, [r7, #16]
 8003d74:	2b03      	cmp	r3, #3
 8003d76:	d10c      	bne.n	8003d92 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003d78:	4a17      	ldr	r2, [pc, #92]	; (8003dd8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d80:	4a14      	ldr	r2, [pc, #80]	; (8003dd4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003d82:	68d2      	ldr	r2, [r2, #12]
 8003d84:	0a12      	lsrs	r2, r2, #8
 8003d86:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003d8a:	fb02 f303 	mul.w	r3, r2, r3
 8003d8e:	617b      	str	r3, [r7, #20]
    break;
 8003d90:	e00c      	b.n	8003dac <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003d92:	4a12      	ldr	r2, [pc, #72]	; (8003ddc <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d9a:	4a0e      	ldr	r2, [pc, #56]	; (8003dd4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003d9c:	68d2      	ldr	r2, [r2, #12]
 8003d9e:	0a12      	lsrs	r2, r2, #8
 8003da0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003da4:	fb02 f303 	mul.w	r3, r2, r3
 8003da8:	617b      	str	r3, [r7, #20]
    break;
 8003daa:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003dac:	4b09      	ldr	r3, [pc, #36]	; (8003dd4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003dae:	68db      	ldr	r3, [r3, #12]
 8003db0:	0e5b      	lsrs	r3, r3, #25
 8003db2:	f003 0303 	and.w	r3, r3, #3
 8003db6:	3301      	adds	r3, #1
 8003db8:	005b      	lsls	r3, r3, #1
 8003dba:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003dbc:	697a      	ldr	r2, [r7, #20]
 8003dbe:	68bb      	ldr	r3, [r7, #8]
 8003dc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dc4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003dc6:	687b      	ldr	r3, [r7, #4]
}
 8003dc8:	4618      	mov	r0, r3
 8003dca:	371c      	adds	r7, #28
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd2:	4770      	bx	lr
 8003dd4:	40021000 	.word	0x40021000
 8003dd8:	007a1200 	.word	0x007a1200
 8003ddc:	00f42400 	.word	0x00f42400

08003de0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b086      	sub	sp, #24
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003de8:	2300      	movs	r3, #0
 8003dea:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003dec:	2300      	movs	r3, #0
 8003dee:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	f000 8098 	beq.w	8003f2e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003dfe:	2300      	movs	r3, #0
 8003e00:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e02:	4b43      	ldr	r3, [pc, #268]	; (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d10d      	bne.n	8003e2a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e0e:	4b40      	ldr	r3, [pc, #256]	; (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e12:	4a3f      	ldr	r2, [pc, #252]	; (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e18:	6593      	str	r3, [r2, #88]	; 0x58
 8003e1a:	4b3d      	ldr	r3, [pc, #244]	; (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e22:	60bb      	str	r3, [r7, #8]
 8003e24:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e26:	2301      	movs	r3, #1
 8003e28:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003e2a:	4b3a      	ldr	r3, [pc, #232]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4a39      	ldr	r2, [pc, #228]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003e30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e34:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003e36:	f7fd fbeb 	bl	8001610 <HAL_GetTick>
 8003e3a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003e3c:	e009      	b.n	8003e52 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e3e:	f7fd fbe7 	bl	8001610 <HAL_GetTick>
 8003e42:	4602      	mov	r2, r0
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	1ad3      	subs	r3, r2, r3
 8003e48:	2b02      	cmp	r3, #2
 8003e4a:	d902      	bls.n	8003e52 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003e4c:	2303      	movs	r3, #3
 8003e4e:	74fb      	strb	r3, [r7, #19]
        break;
 8003e50:	e005      	b.n	8003e5e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003e52:	4b30      	ldr	r3, [pc, #192]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d0ef      	beq.n	8003e3e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003e5e:	7cfb      	ldrb	r3, [r7, #19]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d159      	bne.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003e64:	4b2a      	ldr	r3, [pc, #168]	; (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e6e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003e70:	697b      	ldr	r3, [r7, #20]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d01e      	beq.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e7a:	697a      	ldr	r2, [r7, #20]
 8003e7c:	429a      	cmp	r2, r3
 8003e7e:	d019      	beq.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003e80:	4b23      	ldr	r3, [pc, #140]	; (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e8a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003e8c:	4b20      	ldr	r3, [pc, #128]	; (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e92:	4a1f      	ldr	r2, [pc, #124]	; (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e98:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003e9c:	4b1c      	ldr	r3, [pc, #112]	; (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ea2:	4a1b      	ldr	r2, [pc, #108]	; (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ea4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ea8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003eac:	4a18      	ldr	r2, [pc, #96]	; (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003eae:	697b      	ldr	r3, [r7, #20]
 8003eb0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003eb4:	697b      	ldr	r3, [r7, #20]
 8003eb6:	f003 0301 	and.w	r3, r3, #1
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d016      	beq.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ebe:	f7fd fba7 	bl	8001610 <HAL_GetTick>
 8003ec2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ec4:	e00b      	b.n	8003ede <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ec6:	f7fd fba3 	bl	8001610 <HAL_GetTick>
 8003eca:	4602      	mov	r2, r0
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	1ad3      	subs	r3, r2, r3
 8003ed0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d902      	bls.n	8003ede <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003ed8:	2303      	movs	r3, #3
 8003eda:	74fb      	strb	r3, [r7, #19]
            break;
 8003edc:	e006      	b.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ede:	4b0c      	ldr	r3, [pc, #48]	; (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ee0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ee4:	f003 0302 	and.w	r3, r3, #2
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d0ec      	beq.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003eec:	7cfb      	ldrb	r3, [r7, #19]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d10b      	bne.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ef2:	4b07      	ldr	r3, [pc, #28]	; (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ef4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ef8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f00:	4903      	ldr	r1, [pc, #12]	; (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f02:	4313      	orrs	r3, r2
 8003f04:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003f08:	e008      	b.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003f0a:	7cfb      	ldrb	r3, [r7, #19]
 8003f0c:	74bb      	strb	r3, [r7, #18]
 8003f0e:	e005      	b.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003f10:	40021000 	.word	0x40021000
 8003f14:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f18:	7cfb      	ldrb	r3, [r7, #19]
 8003f1a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f1c:	7c7b      	ldrb	r3, [r7, #17]
 8003f1e:	2b01      	cmp	r3, #1
 8003f20:	d105      	bne.n	8003f2e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f22:	4ba6      	ldr	r3, [pc, #664]	; (80041bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f26:	4aa5      	ldr	r2, [pc, #660]	; (80041bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f28:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f2c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f003 0301 	and.w	r3, r3, #1
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d00a      	beq.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003f3a:	4ba0      	ldr	r3, [pc, #640]	; (80041bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f40:	f023 0203 	bic.w	r2, r3, #3
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	685b      	ldr	r3, [r3, #4]
 8003f48:	499c      	ldr	r1, [pc, #624]	; (80041bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f4a:	4313      	orrs	r3, r2
 8003f4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f003 0302 	and.w	r3, r3, #2
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d00a      	beq.n	8003f72 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003f5c:	4b97      	ldr	r3, [pc, #604]	; (80041bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f62:	f023 020c 	bic.w	r2, r3, #12
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	689b      	ldr	r3, [r3, #8]
 8003f6a:	4994      	ldr	r1, [pc, #592]	; (80041bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f6c:	4313      	orrs	r3, r2
 8003f6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f003 0304 	and.w	r3, r3, #4
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d00a      	beq.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003f7e:	4b8f      	ldr	r3, [pc, #572]	; (80041bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f84:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	68db      	ldr	r3, [r3, #12]
 8003f8c:	498b      	ldr	r1, [pc, #556]	; (80041bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f003 0308 	and.w	r3, r3, #8
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d00a      	beq.n	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003fa0:	4b86      	ldr	r3, [pc, #536]	; (80041bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fa6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	691b      	ldr	r3, [r3, #16]
 8003fae:	4983      	ldr	r1, [pc, #524]	; (80041bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fb0:	4313      	orrs	r3, r2
 8003fb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f003 0320 	and.w	r3, r3, #32
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d00a      	beq.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003fc2:	4b7e      	ldr	r3, [pc, #504]	; (80041bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fc8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	695b      	ldr	r3, [r3, #20]
 8003fd0:	497a      	ldr	r1, [pc, #488]	; (80041bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d00a      	beq.n	8003ffa <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003fe4:	4b75      	ldr	r3, [pc, #468]	; (80041bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fe6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fea:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	699b      	ldr	r3, [r3, #24]
 8003ff2:	4972      	ldr	r1, [pc, #456]	; (80041bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ff4:	4313      	orrs	r3, r2
 8003ff6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004002:	2b00      	cmp	r3, #0
 8004004:	d00a      	beq.n	800401c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004006:	4b6d      	ldr	r3, [pc, #436]	; (80041bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004008:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800400c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	69db      	ldr	r3, [r3, #28]
 8004014:	4969      	ldr	r1, [pc, #420]	; (80041bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004016:	4313      	orrs	r3, r2
 8004018:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004024:	2b00      	cmp	r3, #0
 8004026:	d00a      	beq.n	800403e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004028:	4b64      	ldr	r3, [pc, #400]	; (80041bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800402a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800402e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6a1b      	ldr	r3, [r3, #32]
 8004036:	4961      	ldr	r1, [pc, #388]	; (80041bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004038:	4313      	orrs	r3, r2
 800403a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004046:	2b00      	cmp	r3, #0
 8004048:	d00a      	beq.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800404a:	4b5c      	ldr	r3, [pc, #368]	; (80041bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800404c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004050:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004058:	4958      	ldr	r1, [pc, #352]	; (80041bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800405a:	4313      	orrs	r3, r2
 800405c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004068:	2b00      	cmp	r3, #0
 800406a:	d015      	beq.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800406c:	4b53      	ldr	r3, [pc, #332]	; (80041bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800406e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004072:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800407a:	4950      	ldr	r1, [pc, #320]	; (80041bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800407c:	4313      	orrs	r3, r2
 800407e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004086:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800408a:	d105      	bne.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800408c:	4b4b      	ldr	r3, [pc, #300]	; (80041bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800408e:	68db      	ldr	r3, [r3, #12]
 8004090:	4a4a      	ldr	r2, [pc, #296]	; (80041bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004092:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004096:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d015      	beq.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80040a4:	4b45      	ldr	r3, [pc, #276]	; (80041bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040aa:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040b2:	4942      	ldr	r1, [pc, #264]	; (80041bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040b4:	4313      	orrs	r3, r2
 80040b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80040c2:	d105      	bne.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80040c4:	4b3d      	ldr	r3, [pc, #244]	; (80041bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040c6:	68db      	ldr	r3, [r3, #12]
 80040c8:	4a3c      	ldr	r2, [pc, #240]	; (80041bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80040ce:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d015      	beq.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80040dc:	4b37      	ldr	r3, [pc, #220]	; (80041bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040e2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040ea:	4934      	ldr	r1, [pc, #208]	; (80041bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040ec:	4313      	orrs	r3, r2
 80040ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040f6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80040fa:	d105      	bne.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80040fc:	4b2f      	ldr	r3, [pc, #188]	; (80041bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040fe:	68db      	ldr	r3, [r3, #12]
 8004100:	4a2e      	ldr	r2, [pc, #184]	; (80041bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004102:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004106:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004110:	2b00      	cmp	r3, #0
 8004112:	d015      	beq.n	8004140 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004114:	4b29      	ldr	r3, [pc, #164]	; (80041bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004116:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800411a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004122:	4926      	ldr	r1, [pc, #152]	; (80041bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004124:	4313      	orrs	r3, r2
 8004126:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800412e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004132:	d105      	bne.n	8004140 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004134:	4b21      	ldr	r3, [pc, #132]	; (80041bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004136:	68db      	ldr	r3, [r3, #12]
 8004138:	4a20      	ldr	r2, [pc, #128]	; (80041bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800413a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800413e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004148:	2b00      	cmp	r3, #0
 800414a:	d015      	beq.n	8004178 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800414c:	4b1b      	ldr	r3, [pc, #108]	; (80041bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800414e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004152:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800415a:	4918      	ldr	r1, [pc, #96]	; (80041bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800415c:	4313      	orrs	r3, r2
 800415e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004166:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800416a:	d105      	bne.n	8004178 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800416c:	4b13      	ldr	r3, [pc, #76]	; (80041bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800416e:	68db      	ldr	r3, [r3, #12]
 8004170:	4a12      	ldr	r2, [pc, #72]	; (80041bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004172:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004176:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004180:	2b00      	cmp	r3, #0
 8004182:	d015      	beq.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004184:	4b0d      	ldr	r3, [pc, #52]	; (80041bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004186:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800418a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004192:	490a      	ldr	r1, [pc, #40]	; (80041bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004194:	4313      	orrs	r3, r2
 8004196:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800419e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80041a2:	d105      	bne.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80041a4:	4b05      	ldr	r3, [pc, #20]	; (80041bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80041a6:	68db      	ldr	r3, [r3, #12]
 80041a8:	4a04      	ldr	r2, [pc, #16]	; (80041bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80041aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041ae:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80041b0:	7cbb      	ldrb	r3, [r7, #18]
}
 80041b2:	4618      	mov	r0, r3
 80041b4:	3718      	adds	r7, #24
 80041b6:	46bd      	mov	sp, r7
 80041b8:	bd80      	pop	{r7, pc}
 80041ba:	bf00      	nop
 80041bc:	40021000 	.word	0x40021000

080041c0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b082      	sub	sp, #8
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d101      	bne.n	80041d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80041ce:	2301      	movs	r3, #1
 80041d0:	e049      	b.n	8004266 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041d8:	b2db      	uxtb	r3, r3
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d106      	bne.n	80041ec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2200      	movs	r2, #0
 80041e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80041e6:	6878      	ldr	r0, [r7, #4]
 80041e8:	f7fd f802 	bl	80011f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2202      	movs	r2, #2
 80041f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681a      	ldr	r2, [r3, #0]
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	3304      	adds	r3, #4
 80041fc:	4619      	mov	r1, r3
 80041fe:	4610      	mov	r0, r2
 8004200:	f000 fde2 	bl	8004dc8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2201      	movs	r2, #1
 8004208:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2201      	movs	r2, #1
 8004210:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2201      	movs	r2, #1
 8004218:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2201      	movs	r2, #1
 8004220:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2201      	movs	r2, #1
 8004228:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2201      	movs	r2, #1
 8004230:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2201      	movs	r2, #1
 8004238:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2201      	movs	r2, #1
 8004240:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2201      	movs	r2, #1
 8004248:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2201      	movs	r2, #1
 8004250:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2201      	movs	r2, #1
 8004258:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2201      	movs	r2, #1
 8004260:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004264:	2300      	movs	r3, #0
}
 8004266:	4618      	mov	r0, r3
 8004268:	3708      	adds	r7, #8
 800426a:	46bd      	mov	sp, r7
 800426c:	bd80      	pop	{r7, pc}
	...

08004270 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004270:	b480      	push	{r7}
 8004272:	b085      	sub	sp, #20
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800427e:	b2db      	uxtb	r3, r3
 8004280:	2b01      	cmp	r3, #1
 8004282:	d001      	beq.n	8004288 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004284:	2301      	movs	r3, #1
 8004286:	e04a      	b.n	800431e <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2202      	movs	r2, #2
 800428c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	68da      	ldr	r2, [r3, #12]
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f042 0201 	orr.w	r2, r2, #1
 800429e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4a21      	ldr	r2, [pc, #132]	; (800432c <HAL_TIM_Base_Start_IT+0xbc>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d018      	beq.n	80042dc <HAL_TIM_Base_Start_IT+0x6c>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042b2:	d013      	beq.n	80042dc <HAL_TIM_Base_Start_IT+0x6c>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4a1d      	ldr	r2, [pc, #116]	; (8004330 <HAL_TIM_Base_Start_IT+0xc0>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d00e      	beq.n	80042dc <HAL_TIM_Base_Start_IT+0x6c>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4a1c      	ldr	r2, [pc, #112]	; (8004334 <HAL_TIM_Base_Start_IT+0xc4>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d009      	beq.n	80042dc <HAL_TIM_Base_Start_IT+0x6c>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4a1a      	ldr	r2, [pc, #104]	; (8004338 <HAL_TIM_Base_Start_IT+0xc8>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d004      	beq.n	80042dc <HAL_TIM_Base_Start_IT+0x6c>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	4a19      	ldr	r2, [pc, #100]	; (800433c <HAL_TIM_Base_Start_IT+0xcc>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	d115      	bne.n	8004308 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	689a      	ldr	r2, [r3, #8]
 80042e2:	4b17      	ldr	r3, [pc, #92]	; (8004340 <HAL_TIM_Base_Start_IT+0xd0>)
 80042e4:	4013      	ands	r3, r2
 80042e6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	2b06      	cmp	r3, #6
 80042ec:	d015      	beq.n	800431a <HAL_TIM_Base_Start_IT+0xaa>
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042f4:	d011      	beq.n	800431a <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	681a      	ldr	r2, [r3, #0]
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f042 0201 	orr.w	r2, r2, #1
 8004304:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004306:	e008      	b.n	800431a <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	681a      	ldr	r2, [r3, #0]
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f042 0201 	orr.w	r2, r2, #1
 8004316:	601a      	str	r2, [r3, #0]
 8004318:	e000      	b.n	800431c <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800431a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800431c:	2300      	movs	r3, #0
}
 800431e:	4618      	mov	r0, r3
 8004320:	3714      	adds	r7, #20
 8004322:	46bd      	mov	sp, r7
 8004324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004328:	4770      	bx	lr
 800432a:	bf00      	nop
 800432c:	40012c00 	.word	0x40012c00
 8004330:	40000400 	.word	0x40000400
 8004334:	40000800 	.word	0x40000800
 8004338:	40013400 	.word	0x40013400
 800433c:	40014000 	.word	0x40014000
 8004340:	00010007 	.word	0x00010007

08004344 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b082      	sub	sp, #8
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d101      	bne.n	8004356 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004352:	2301      	movs	r3, #1
 8004354:	e049      	b.n	80043ea <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800435c:	b2db      	uxtb	r3, r3
 800435e:	2b00      	cmp	r3, #0
 8004360:	d106      	bne.n	8004370 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2200      	movs	r2, #0
 8004366:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800436a:	6878      	ldr	r0, [r7, #4]
 800436c:	f7fc fefa 	bl	8001164 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2202      	movs	r2, #2
 8004374:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681a      	ldr	r2, [r3, #0]
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	3304      	adds	r3, #4
 8004380:	4619      	mov	r1, r3
 8004382:	4610      	mov	r0, r2
 8004384:	f000 fd20 	bl	8004dc8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2201      	movs	r2, #1
 800438c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2201      	movs	r2, #1
 8004394:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2201      	movs	r2, #1
 800439c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2201      	movs	r2, #1
 80043a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2201      	movs	r2, #1
 80043ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2201      	movs	r2, #1
 80043b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2201      	movs	r2, #1
 80043bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2201      	movs	r2, #1
 80043c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2201      	movs	r2, #1
 80043cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2201      	movs	r2, #1
 80043d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2201      	movs	r2, #1
 80043dc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2201      	movs	r2, #1
 80043e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80043e8:	2300      	movs	r3, #0
}
 80043ea:	4618      	mov	r0, r3
 80043ec:	3708      	adds	r7, #8
 80043ee:	46bd      	mov	sp, r7
 80043f0:	bd80      	pop	{r7, pc}
	...

080043f4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b084      	sub	sp, #16
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
 80043fc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d109      	bne.n	8004418 <HAL_TIM_PWM_Start+0x24>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800440a:	b2db      	uxtb	r3, r3
 800440c:	2b01      	cmp	r3, #1
 800440e:	bf14      	ite	ne
 8004410:	2301      	movne	r3, #1
 8004412:	2300      	moveq	r3, #0
 8004414:	b2db      	uxtb	r3, r3
 8004416:	e03c      	b.n	8004492 <HAL_TIM_PWM_Start+0x9e>
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	2b04      	cmp	r3, #4
 800441c:	d109      	bne.n	8004432 <HAL_TIM_PWM_Start+0x3e>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004424:	b2db      	uxtb	r3, r3
 8004426:	2b01      	cmp	r3, #1
 8004428:	bf14      	ite	ne
 800442a:	2301      	movne	r3, #1
 800442c:	2300      	moveq	r3, #0
 800442e:	b2db      	uxtb	r3, r3
 8004430:	e02f      	b.n	8004492 <HAL_TIM_PWM_Start+0x9e>
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	2b08      	cmp	r3, #8
 8004436:	d109      	bne.n	800444c <HAL_TIM_PWM_Start+0x58>
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800443e:	b2db      	uxtb	r3, r3
 8004440:	2b01      	cmp	r3, #1
 8004442:	bf14      	ite	ne
 8004444:	2301      	movne	r3, #1
 8004446:	2300      	moveq	r3, #0
 8004448:	b2db      	uxtb	r3, r3
 800444a:	e022      	b.n	8004492 <HAL_TIM_PWM_Start+0x9e>
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	2b0c      	cmp	r3, #12
 8004450:	d109      	bne.n	8004466 <HAL_TIM_PWM_Start+0x72>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004458:	b2db      	uxtb	r3, r3
 800445a:	2b01      	cmp	r3, #1
 800445c:	bf14      	ite	ne
 800445e:	2301      	movne	r3, #1
 8004460:	2300      	moveq	r3, #0
 8004462:	b2db      	uxtb	r3, r3
 8004464:	e015      	b.n	8004492 <HAL_TIM_PWM_Start+0x9e>
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	2b10      	cmp	r3, #16
 800446a:	d109      	bne.n	8004480 <HAL_TIM_PWM_Start+0x8c>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004472:	b2db      	uxtb	r3, r3
 8004474:	2b01      	cmp	r3, #1
 8004476:	bf14      	ite	ne
 8004478:	2301      	movne	r3, #1
 800447a:	2300      	moveq	r3, #0
 800447c:	b2db      	uxtb	r3, r3
 800447e:	e008      	b.n	8004492 <HAL_TIM_PWM_Start+0x9e>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004486:	b2db      	uxtb	r3, r3
 8004488:	2b01      	cmp	r3, #1
 800448a:	bf14      	ite	ne
 800448c:	2301      	movne	r3, #1
 800448e:	2300      	moveq	r3, #0
 8004490:	b2db      	uxtb	r3, r3
 8004492:	2b00      	cmp	r3, #0
 8004494:	d001      	beq.n	800449a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004496:	2301      	movs	r3, #1
 8004498:	e097      	b.n	80045ca <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	2b00      	cmp	r3, #0
 800449e:	d104      	bne.n	80044aa <HAL_TIM_PWM_Start+0xb6>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2202      	movs	r2, #2
 80044a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80044a8:	e023      	b.n	80044f2 <HAL_TIM_PWM_Start+0xfe>
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	2b04      	cmp	r3, #4
 80044ae:	d104      	bne.n	80044ba <HAL_TIM_PWM_Start+0xc6>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2202      	movs	r2, #2
 80044b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80044b8:	e01b      	b.n	80044f2 <HAL_TIM_PWM_Start+0xfe>
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	2b08      	cmp	r3, #8
 80044be:	d104      	bne.n	80044ca <HAL_TIM_PWM_Start+0xd6>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2202      	movs	r2, #2
 80044c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80044c8:	e013      	b.n	80044f2 <HAL_TIM_PWM_Start+0xfe>
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	2b0c      	cmp	r3, #12
 80044ce:	d104      	bne.n	80044da <HAL_TIM_PWM_Start+0xe6>
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2202      	movs	r2, #2
 80044d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80044d8:	e00b      	b.n	80044f2 <HAL_TIM_PWM_Start+0xfe>
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	2b10      	cmp	r3, #16
 80044de:	d104      	bne.n	80044ea <HAL_TIM_PWM_Start+0xf6>
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2202      	movs	r2, #2
 80044e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80044e8:	e003      	b.n	80044f2 <HAL_TIM_PWM_Start+0xfe>
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2202      	movs	r2, #2
 80044ee:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	2201      	movs	r2, #1
 80044f8:	6839      	ldr	r1, [r7, #0]
 80044fa:	4618      	mov	r0, r3
 80044fc:	f000 ffea 	bl	80054d4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4a33      	ldr	r2, [pc, #204]	; (80045d4 <HAL_TIM_PWM_Start+0x1e0>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d013      	beq.n	8004532 <HAL_TIM_PWM_Start+0x13e>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4a32      	ldr	r2, [pc, #200]	; (80045d8 <HAL_TIM_PWM_Start+0x1e4>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d00e      	beq.n	8004532 <HAL_TIM_PWM_Start+0x13e>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	4a30      	ldr	r2, [pc, #192]	; (80045dc <HAL_TIM_PWM_Start+0x1e8>)
 800451a:	4293      	cmp	r3, r2
 800451c:	d009      	beq.n	8004532 <HAL_TIM_PWM_Start+0x13e>
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	4a2f      	ldr	r2, [pc, #188]	; (80045e0 <HAL_TIM_PWM_Start+0x1ec>)
 8004524:	4293      	cmp	r3, r2
 8004526:	d004      	beq.n	8004532 <HAL_TIM_PWM_Start+0x13e>
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	4a2d      	ldr	r2, [pc, #180]	; (80045e4 <HAL_TIM_PWM_Start+0x1f0>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d101      	bne.n	8004536 <HAL_TIM_PWM_Start+0x142>
 8004532:	2301      	movs	r3, #1
 8004534:	e000      	b.n	8004538 <HAL_TIM_PWM_Start+0x144>
 8004536:	2300      	movs	r3, #0
 8004538:	2b00      	cmp	r3, #0
 800453a:	d007      	beq.n	800454c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800454a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4a20      	ldr	r2, [pc, #128]	; (80045d4 <HAL_TIM_PWM_Start+0x1e0>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d018      	beq.n	8004588 <HAL_TIM_PWM_Start+0x194>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800455e:	d013      	beq.n	8004588 <HAL_TIM_PWM_Start+0x194>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4a20      	ldr	r2, [pc, #128]	; (80045e8 <HAL_TIM_PWM_Start+0x1f4>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d00e      	beq.n	8004588 <HAL_TIM_PWM_Start+0x194>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4a1f      	ldr	r2, [pc, #124]	; (80045ec <HAL_TIM_PWM_Start+0x1f8>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d009      	beq.n	8004588 <HAL_TIM_PWM_Start+0x194>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	4a17      	ldr	r2, [pc, #92]	; (80045d8 <HAL_TIM_PWM_Start+0x1e4>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d004      	beq.n	8004588 <HAL_TIM_PWM_Start+0x194>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	4a16      	ldr	r2, [pc, #88]	; (80045dc <HAL_TIM_PWM_Start+0x1e8>)
 8004584:	4293      	cmp	r3, r2
 8004586:	d115      	bne.n	80045b4 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	689a      	ldr	r2, [r3, #8]
 800458e:	4b18      	ldr	r3, [pc, #96]	; (80045f0 <HAL_TIM_PWM_Start+0x1fc>)
 8004590:	4013      	ands	r3, r2
 8004592:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	2b06      	cmp	r3, #6
 8004598:	d015      	beq.n	80045c6 <HAL_TIM_PWM_Start+0x1d2>
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045a0:	d011      	beq.n	80045c6 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	681a      	ldr	r2, [r3, #0]
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f042 0201 	orr.w	r2, r2, #1
 80045b0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045b2:	e008      	b.n	80045c6 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	681a      	ldr	r2, [r3, #0]
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f042 0201 	orr.w	r2, r2, #1
 80045c2:	601a      	str	r2, [r3, #0]
 80045c4:	e000      	b.n	80045c8 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045c6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80045c8:	2300      	movs	r3, #0
}
 80045ca:	4618      	mov	r0, r3
 80045cc:	3710      	adds	r7, #16
 80045ce:	46bd      	mov	sp, r7
 80045d0:	bd80      	pop	{r7, pc}
 80045d2:	bf00      	nop
 80045d4:	40012c00 	.word	0x40012c00
 80045d8:	40013400 	.word	0x40013400
 80045dc:	40014000 	.word	0x40014000
 80045e0:	40014400 	.word	0x40014400
 80045e4:	40014800 	.word	0x40014800
 80045e8:	40000400 	.word	0x40000400
 80045ec:	40000800 	.word	0x40000800
 80045f0:	00010007 	.word	0x00010007

080045f4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b086      	sub	sp, #24
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
 80045fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d101      	bne.n	8004608 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004604:	2301      	movs	r3, #1
 8004606:	e097      	b.n	8004738 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800460e:	b2db      	uxtb	r3, r3
 8004610:	2b00      	cmp	r3, #0
 8004612:	d106      	bne.n	8004622 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2200      	movs	r2, #0
 8004618:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800461c:	6878      	ldr	r0, [r7, #4]
 800461e:	f7fc fcfb 	bl	8001018 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2202      	movs	r2, #2
 8004626:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	689b      	ldr	r3, [r3, #8]
 8004630:	687a      	ldr	r2, [r7, #4]
 8004632:	6812      	ldr	r2, [r2, #0]
 8004634:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8004638:	f023 0307 	bic.w	r3, r3, #7
 800463c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681a      	ldr	r2, [r3, #0]
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	3304      	adds	r3, #4
 8004646:	4619      	mov	r1, r3
 8004648:	4610      	mov	r0, r2
 800464a:	f000 fbbd 	bl	8004dc8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	689b      	ldr	r3, [r3, #8]
 8004654:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	699b      	ldr	r3, [r3, #24]
 800465c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	6a1b      	ldr	r3, [r3, #32]
 8004664:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	697a      	ldr	r2, [r7, #20]
 800466c:	4313      	orrs	r3, r2
 800466e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004670:	693b      	ldr	r3, [r7, #16]
 8004672:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004676:	f023 0303 	bic.w	r3, r3, #3
 800467a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	689a      	ldr	r2, [r3, #8]
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	699b      	ldr	r3, [r3, #24]
 8004684:	021b      	lsls	r3, r3, #8
 8004686:	4313      	orrs	r3, r2
 8004688:	693a      	ldr	r2, [r7, #16]
 800468a:	4313      	orrs	r3, r2
 800468c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800468e:	693b      	ldr	r3, [r7, #16]
 8004690:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004694:	f023 030c 	bic.w	r3, r3, #12
 8004698:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800469a:	693b      	ldr	r3, [r7, #16]
 800469c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80046a0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80046a4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	68da      	ldr	r2, [r3, #12]
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	69db      	ldr	r3, [r3, #28]
 80046ae:	021b      	lsls	r3, r3, #8
 80046b0:	4313      	orrs	r3, r2
 80046b2:	693a      	ldr	r2, [r7, #16]
 80046b4:	4313      	orrs	r3, r2
 80046b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	691b      	ldr	r3, [r3, #16]
 80046bc:	011a      	lsls	r2, r3, #4
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	6a1b      	ldr	r3, [r3, #32]
 80046c2:	031b      	lsls	r3, r3, #12
 80046c4:	4313      	orrs	r3, r2
 80046c6:	693a      	ldr	r2, [r7, #16]
 80046c8:	4313      	orrs	r3, r2
 80046ca:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80046d2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80046da:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	685a      	ldr	r2, [r3, #4]
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	695b      	ldr	r3, [r3, #20]
 80046e4:	011b      	lsls	r3, r3, #4
 80046e6:	4313      	orrs	r3, r2
 80046e8:	68fa      	ldr	r2, [r7, #12]
 80046ea:	4313      	orrs	r3, r2
 80046ec:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	697a      	ldr	r2, [r7, #20]
 80046f4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	693a      	ldr	r2, [r7, #16]
 80046fc:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	68fa      	ldr	r2, [r7, #12]
 8004704:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2201      	movs	r2, #1
 800470a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2201      	movs	r2, #1
 8004712:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2201      	movs	r2, #1
 800471a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2201      	movs	r2, #1
 8004722:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2201      	movs	r2, #1
 800472a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2201      	movs	r2, #1
 8004732:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004736:	2300      	movs	r3, #0
}
 8004738:	4618      	mov	r0, r3
 800473a:	3718      	adds	r7, #24
 800473c:	46bd      	mov	sp, r7
 800473e:	bd80      	pop	{r7, pc}

08004740 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004740:	b580      	push	{r7, lr}
 8004742:	b084      	sub	sp, #16
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
 8004748:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004750:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004758:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004760:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004768:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d110      	bne.n	8004792 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004770:	7bfb      	ldrb	r3, [r7, #15]
 8004772:	2b01      	cmp	r3, #1
 8004774:	d102      	bne.n	800477c <HAL_TIM_Encoder_Start+0x3c>
     || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004776:	7b7b      	ldrb	r3, [r7, #13]
 8004778:	2b01      	cmp	r3, #1
 800477a:	d001      	beq.n	8004780 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800477c:	2301      	movs	r3, #1
 800477e:	e068      	b.n	8004852 <HAL_TIM_Encoder_Start+0x112>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2202      	movs	r2, #2
 8004784:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2202      	movs	r2, #2
 800478c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004790:	e031      	b.n	80047f6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	2b04      	cmp	r3, #4
 8004796:	d110      	bne.n	80047ba <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004798:	7bbb      	ldrb	r3, [r7, #14]
 800479a:	2b01      	cmp	r3, #1
 800479c:	d102      	bne.n	80047a4 <HAL_TIM_Encoder_Start+0x64>
     || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800479e:	7b3b      	ldrb	r3, [r7, #12]
 80047a0:	2b01      	cmp	r3, #1
 80047a2:	d001      	beq.n	80047a8 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80047a4:	2301      	movs	r3, #1
 80047a6:	e054      	b.n	8004852 <HAL_TIM_Encoder_Start+0x112>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2202      	movs	r2, #2
 80047ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2202      	movs	r2, #2
 80047b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80047b8:	e01d      	b.n	80047f6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80047ba:	7bfb      	ldrb	r3, [r7, #15]
 80047bc:	2b01      	cmp	r3, #1
 80047be:	d108      	bne.n	80047d2 <HAL_TIM_Encoder_Start+0x92>
     || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80047c0:	7bbb      	ldrb	r3, [r7, #14]
 80047c2:	2b01      	cmp	r3, #1
 80047c4:	d105      	bne.n	80047d2 <HAL_TIM_Encoder_Start+0x92>
     || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80047c6:	7b7b      	ldrb	r3, [r7, #13]
 80047c8:	2b01      	cmp	r3, #1
 80047ca:	d102      	bne.n	80047d2 <HAL_TIM_Encoder_Start+0x92>
     || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80047cc:	7b3b      	ldrb	r3, [r7, #12]
 80047ce:	2b01      	cmp	r3, #1
 80047d0:	d001      	beq.n	80047d6 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80047d2:	2301      	movs	r3, #1
 80047d4:	e03d      	b.n	8004852 <HAL_TIM_Encoder_Start+0x112>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2202      	movs	r2, #2
 80047da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2202      	movs	r2, #2
 80047e2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2202      	movs	r2, #2
 80047ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2202      	movs	r2, #2
 80047f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d002      	beq.n	8004802 <HAL_TIM_Encoder_Start+0xc2>
 80047fc:	2b04      	cmp	r3, #4
 80047fe:	d008      	beq.n	8004812 <HAL_TIM_Encoder_Start+0xd2>
 8004800:	e00f      	b.n	8004822 <HAL_TIM_Encoder_Start+0xe2>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	2201      	movs	r2, #1
 8004808:	2100      	movs	r1, #0
 800480a:	4618      	mov	r0, r3
 800480c:	f000 fe62 	bl	80054d4 <TIM_CCxChannelCmd>
      break;
 8004810:	e016      	b.n	8004840 <HAL_TIM_Encoder_Start+0x100>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	2201      	movs	r2, #1
 8004818:	2104      	movs	r1, #4
 800481a:	4618      	mov	r0, r3
 800481c:	f000 fe5a 	bl	80054d4 <TIM_CCxChannelCmd>
      break;
 8004820:	e00e      	b.n	8004840 <HAL_TIM_Encoder_Start+0x100>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	2201      	movs	r2, #1
 8004828:	2100      	movs	r1, #0
 800482a:	4618      	mov	r0, r3
 800482c:	f000 fe52 	bl	80054d4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	2201      	movs	r2, #1
 8004836:	2104      	movs	r1, #4
 8004838:	4618      	mov	r0, r3
 800483a:	f000 fe4b 	bl	80054d4 <TIM_CCxChannelCmd>
      break;
 800483e:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	681a      	ldr	r2, [r3, #0]
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f042 0201 	orr.w	r2, r2, #1
 800484e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004850:	2300      	movs	r3, #0
}
 8004852:	4618      	mov	r0, r3
 8004854:	3710      	adds	r7, #16
 8004856:	46bd      	mov	sp, r7
 8004858:	bd80      	pop	{r7, pc}

0800485a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800485a:	b580      	push	{r7, lr}
 800485c:	b082      	sub	sp, #8
 800485e:	af00      	add	r7, sp, #0
 8004860:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	691b      	ldr	r3, [r3, #16]
 8004868:	f003 0302 	and.w	r3, r3, #2
 800486c:	2b02      	cmp	r3, #2
 800486e:	d122      	bne.n	80048b6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	68db      	ldr	r3, [r3, #12]
 8004876:	f003 0302 	and.w	r3, r3, #2
 800487a:	2b02      	cmp	r3, #2
 800487c:	d11b      	bne.n	80048b6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f06f 0202 	mvn.w	r2, #2
 8004886:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2201      	movs	r2, #1
 800488c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	699b      	ldr	r3, [r3, #24]
 8004894:	f003 0303 	and.w	r3, r3, #3
 8004898:	2b00      	cmp	r3, #0
 800489a:	d003      	beq.n	80048a4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800489c:	6878      	ldr	r0, [r7, #4]
 800489e:	f000 fa75 	bl	8004d8c <HAL_TIM_IC_CaptureCallback>
 80048a2:	e005      	b.n	80048b0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80048a4:	6878      	ldr	r0, [r7, #4]
 80048a6:	f000 fa67 	bl	8004d78 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048aa:	6878      	ldr	r0, [r7, #4]
 80048ac:	f000 fa78 	bl	8004da0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2200      	movs	r2, #0
 80048b4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	691b      	ldr	r3, [r3, #16]
 80048bc:	f003 0304 	and.w	r3, r3, #4
 80048c0:	2b04      	cmp	r3, #4
 80048c2:	d122      	bne.n	800490a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	68db      	ldr	r3, [r3, #12]
 80048ca:	f003 0304 	and.w	r3, r3, #4
 80048ce:	2b04      	cmp	r3, #4
 80048d0:	d11b      	bne.n	800490a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f06f 0204 	mvn.w	r2, #4
 80048da:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2202      	movs	r2, #2
 80048e0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	699b      	ldr	r3, [r3, #24]
 80048e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d003      	beq.n	80048f8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048f0:	6878      	ldr	r0, [r7, #4]
 80048f2:	f000 fa4b 	bl	8004d8c <HAL_TIM_IC_CaptureCallback>
 80048f6:	e005      	b.n	8004904 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048f8:	6878      	ldr	r0, [r7, #4]
 80048fa:	f000 fa3d 	bl	8004d78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048fe:	6878      	ldr	r0, [r7, #4]
 8004900:	f000 fa4e 	bl	8004da0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2200      	movs	r2, #0
 8004908:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	691b      	ldr	r3, [r3, #16]
 8004910:	f003 0308 	and.w	r3, r3, #8
 8004914:	2b08      	cmp	r3, #8
 8004916:	d122      	bne.n	800495e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	68db      	ldr	r3, [r3, #12]
 800491e:	f003 0308 	and.w	r3, r3, #8
 8004922:	2b08      	cmp	r3, #8
 8004924:	d11b      	bne.n	800495e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f06f 0208 	mvn.w	r2, #8
 800492e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2204      	movs	r2, #4
 8004934:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	69db      	ldr	r3, [r3, #28]
 800493c:	f003 0303 	and.w	r3, r3, #3
 8004940:	2b00      	cmp	r3, #0
 8004942:	d003      	beq.n	800494c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004944:	6878      	ldr	r0, [r7, #4]
 8004946:	f000 fa21 	bl	8004d8c <HAL_TIM_IC_CaptureCallback>
 800494a:	e005      	b.n	8004958 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800494c:	6878      	ldr	r0, [r7, #4]
 800494e:	f000 fa13 	bl	8004d78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004952:	6878      	ldr	r0, [r7, #4]
 8004954:	f000 fa24 	bl	8004da0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2200      	movs	r2, #0
 800495c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	691b      	ldr	r3, [r3, #16]
 8004964:	f003 0310 	and.w	r3, r3, #16
 8004968:	2b10      	cmp	r3, #16
 800496a:	d122      	bne.n	80049b2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	68db      	ldr	r3, [r3, #12]
 8004972:	f003 0310 	and.w	r3, r3, #16
 8004976:	2b10      	cmp	r3, #16
 8004978:	d11b      	bne.n	80049b2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f06f 0210 	mvn.w	r2, #16
 8004982:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2208      	movs	r2, #8
 8004988:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	69db      	ldr	r3, [r3, #28]
 8004990:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004994:	2b00      	cmp	r3, #0
 8004996:	d003      	beq.n	80049a0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004998:	6878      	ldr	r0, [r7, #4]
 800499a:	f000 f9f7 	bl	8004d8c <HAL_TIM_IC_CaptureCallback>
 800499e:	e005      	b.n	80049ac <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049a0:	6878      	ldr	r0, [r7, #4]
 80049a2:	f000 f9e9 	bl	8004d78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049a6:	6878      	ldr	r0, [r7, #4]
 80049a8:	f000 f9fa 	bl	8004da0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2200      	movs	r2, #0
 80049b0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	691b      	ldr	r3, [r3, #16]
 80049b8:	f003 0301 	and.w	r3, r3, #1
 80049bc:	2b01      	cmp	r3, #1
 80049be:	d10e      	bne.n	80049de <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	68db      	ldr	r3, [r3, #12]
 80049c6:	f003 0301 	and.w	r3, r3, #1
 80049ca:	2b01      	cmp	r3, #1
 80049cc:	d107      	bne.n	80049de <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f06f 0201 	mvn.w	r2, #1
 80049d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80049d8:	6878      	ldr	r0, [r7, #4]
 80049da:	f7fc fa3f 	bl	8000e5c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	691b      	ldr	r3, [r3, #16]
 80049e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049e8:	2b80      	cmp	r3, #128	; 0x80
 80049ea:	d10e      	bne.n	8004a0a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	68db      	ldr	r3, [r3, #12]
 80049f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049f6:	2b80      	cmp	r3, #128	; 0x80
 80049f8:	d107      	bne.n	8004a0a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004a02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004a04:	6878      	ldr	r0, [r7, #4]
 8004a06:	f000 feb7 	bl	8005778 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	691b      	ldr	r3, [r3, #16]
 8004a10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a18:	d10e      	bne.n	8004a38 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	68db      	ldr	r3, [r3, #12]
 8004a20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a24:	2b80      	cmp	r3, #128	; 0x80
 8004a26:	d107      	bne.n	8004a38 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004a30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004a32:	6878      	ldr	r0, [r7, #4]
 8004a34:	f000 feaa 	bl	800578c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	691b      	ldr	r3, [r3, #16]
 8004a3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a42:	2b40      	cmp	r3, #64	; 0x40
 8004a44:	d10e      	bne.n	8004a64 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	68db      	ldr	r3, [r3, #12]
 8004a4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a50:	2b40      	cmp	r3, #64	; 0x40
 8004a52:	d107      	bne.n	8004a64 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004a5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004a5e:	6878      	ldr	r0, [r7, #4]
 8004a60:	f000 f9a8 	bl	8004db4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	691b      	ldr	r3, [r3, #16]
 8004a6a:	f003 0320 	and.w	r3, r3, #32
 8004a6e:	2b20      	cmp	r3, #32
 8004a70:	d10e      	bne.n	8004a90 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	68db      	ldr	r3, [r3, #12]
 8004a78:	f003 0320 	and.w	r3, r3, #32
 8004a7c:	2b20      	cmp	r3, #32
 8004a7e:	d107      	bne.n	8004a90 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f06f 0220 	mvn.w	r2, #32
 8004a88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004a8a:	6878      	ldr	r0, [r7, #4]
 8004a8c:	f000 fe6a 	bl	8005764 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	691b      	ldr	r3, [r3, #16]
 8004a96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a9a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a9e:	d10f      	bne.n	8004ac0 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	68db      	ldr	r3, [r3, #12]
 8004aa6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004aaa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004aae:	d107      	bne.n	8004ac0 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8004ab8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8004aba:	6878      	ldr	r0, [r7, #4]
 8004abc:	f000 fe70 	bl	80057a0 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	691b      	ldr	r3, [r3, #16]
 8004ac6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004aca:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004ace:	d10f      	bne.n	8004af0 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	68db      	ldr	r3, [r3, #12]
 8004ad6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004ada:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004ade:	d107      	bne.n	8004af0 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8004ae8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8004aea:	6878      	ldr	r0, [r7, #4]
 8004aec:	f000 fe62 	bl	80057b4 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	691b      	ldr	r3, [r3, #16]
 8004af6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004afa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004afe:	d10f      	bne.n	8004b20 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	68db      	ldr	r3, [r3, #12]
 8004b06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b0a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004b0e:	d107      	bne.n	8004b20 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8004b18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8004b1a:	6878      	ldr	r0, [r7, #4]
 8004b1c:	f000 fe54 	bl	80057c8 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	691b      	ldr	r3, [r3, #16]
 8004b26:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004b2a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004b2e:	d10f      	bne.n	8004b50 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	68db      	ldr	r3, [r3, #12]
 8004b36:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004b3a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004b3e:	d107      	bne.n	8004b50 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8004b48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8004b4a:	6878      	ldr	r0, [r7, #4]
 8004b4c:	f000 fe46 	bl	80057dc <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004b50:	bf00      	nop
 8004b52:	3708      	adds	r7, #8
 8004b54:	46bd      	mov	sp, r7
 8004b56:	bd80      	pop	{r7, pc}

08004b58 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b084      	sub	sp, #16
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	60f8      	str	r0, [r7, #12]
 8004b60:	60b9      	str	r1, [r7, #8]
 8004b62:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b6a:	2b01      	cmp	r3, #1
 8004b6c:	d101      	bne.n	8004b72 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004b6e:	2302      	movs	r3, #2
 8004b70:	e0fd      	b.n	8004d6e <HAL_TIM_PWM_ConfigChannel+0x216>
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	2201      	movs	r2, #1
 8004b76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2b14      	cmp	r3, #20
 8004b7e:	f200 80f0 	bhi.w	8004d62 <HAL_TIM_PWM_ConfigChannel+0x20a>
 8004b82:	a201      	add	r2, pc, #4	; (adr r2, 8004b88 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8004b84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b88:	08004bdd 	.word	0x08004bdd
 8004b8c:	08004d63 	.word	0x08004d63
 8004b90:	08004d63 	.word	0x08004d63
 8004b94:	08004d63 	.word	0x08004d63
 8004b98:	08004c1d 	.word	0x08004c1d
 8004b9c:	08004d63 	.word	0x08004d63
 8004ba0:	08004d63 	.word	0x08004d63
 8004ba4:	08004d63 	.word	0x08004d63
 8004ba8:	08004c5f 	.word	0x08004c5f
 8004bac:	08004d63 	.word	0x08004d63
 8004bb0:	08004d63 	.word	0x08004d63
 8004bb4:	08004d63 	.word	0x08004d63
 8004bb8:	08004c9f 	.word	0x08004c9f
 8004bbc:	08004d63 	.word	0x08004d63
 8004bc0:	08004d63 	.word	0x08004d63
 8004bc4:	08004d63 	.word	0x08004d63
 8004bc8:	08004ce1 	.word	0x08004ce1
 8004bcc:	08004d63 	.word	0x08004d63
 8004bd0:	08004d63 	.word	0x08004d63
 8004bd4:	08004d63 	.word	0x08004d63
 8004bd8:	08004d21 	.word	0x08004d21
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	68b9      	ldr	r1, [r7, #8]
 8004be2:	4618      	mov	r0, r3
 8004be4:	f000 f980 	bl	8004ee8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	699a      	ldr	r2, [r3, #24]
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f042 0208 	orr.w	r2, r2, #8
 8004bf6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	699a      	ldr	r2, [r3, #24]
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f022 0204 	bic.w	r2, r2, #4
 8004c06:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	6999      	ldr	r1, [r3, #24]
 8004c0e:	68bb      	ldr	r3, [r7, #8]
 8004c10:	691a      	ldr	r2, [r3, #16]
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	430a      	orrs	r2, r1
 8004c18:	619a      	str	r2, [r3, #24]
      break;
 8004c1a:	e0a3      	b.n	8004d64 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	68b9      	ldr	r1, [r7, #8]
 8004c22:	4618      	mov	r0, r3
 8004c24:	f000 f9f0 	bl	8005008 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	699a      	ldr	r2, [r3, #24]
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c36:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	699a      	ldr	r2, [r3, #24]
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c46:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	6999      	ldr	r1, [r3, #24]
 8004c4e:	68bb      	ldr	r3, [r7, #8]
 8004c50:	691b      	ldr	r3, [r3, #16]
 8004c52:	021a      	lsls	r2, r3, #8
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	430a      	orrs	r2, r1
 8004c5a:	619a      	str	r2, [r3, #24]
      break;
 8004c5c:	e082      	b.n	8004d64 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	68b9      	ldr	r1, [r7, #8]
 8004c64:	4618      	mov	r0, r3
 8004c66:	f000 fa59 	bl	800511c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	69da      	ldr	r2, [r3, #28]
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f042 0208 	orr.w	r2, r2, #8
 8004c78:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	69da      	ldr	r2, [r3, #28]
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f022 0204 	bic.w	r2, r2, #4
 8004c88:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	69d9      	ldr	r1, [r3, #28]
 8004c90:	68bb      	ldr	r3, [r7, #8]
 8004c92:	691a      	ldr	r2, [r3, #16]
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	430a      	orrs	r2, r1
 8004c9a:	61da      	str	r2, [r3, #28]
      break;
 8004c9c:	e062      	b.n	8004d64 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	68b9      	ldr	r1, [r7, #8]
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	f000 fac1 	bl	800522c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	69da      	ldr	r2, [r3, #28]
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004cb8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	69da      	ldr	r2, [r3, #28]
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004cc8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	69d9      	ldr	r1, [r3, #28]
 8004cd0:	68bb      	ldr	r3, [r7, #8]
 8004cd2:	691b      	ldr	r3, [r3, #16]
 8004cd4:	021a      	lsls	r2, r3, #8
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	430a      	orrs	r2, r1
 8004cdc:	61da      	str	r2, [r3, #28]
      break;
 8004cde:	e041      	b.n	8004d64 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	68b9      	ldr	r1, [r7, #8]
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	f000 fb2a 	bl	8005340 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f042 0208 	orr.w	r2, r2, #8
 8004cfa:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f022 0204 	bic.w	r2, r2, #4
 8004d0a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004d12:	68bb      	ldr	r3, [r7, #8]
 8004d14:	691a      	ldr	r2, [r3, #16]
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	430a      	orrs	r2, r1
 8004d1c:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8004d1e:	e021      	b.n	8004d64 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	68b9      	ldr	r1, [r7, #8]
 8004d26:	4618      	mov	r0, r3
 8004d28:	f000 fb6e 	bl	8005408 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d3a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d4a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004d52:	68bb      	ldr	r3, [r7, #8]
 8004d54:	691b      	ldr	r3, [r3, #16]
 8004d56:	021a      	lsls	r2, r3, #8
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	430a      	orrs	r2, r1
 8004d5e:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8004d60:	e000      	b.n	8004d64 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8004d62:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	2200      	movs	r2, #0
 8004d68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004d6c:	2300      	movs	r3, #0
}
 8004d6e:	4618      	mov	r0, r3
 8004d70:	3710      	adds	r7, #16
 8004d72:	46bd      	mov	sp, r7
 8004d74:	bd80      	pop	{r7, pc}
 8004d76:	bf00      	nop

08004d78 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004d78:	b480      	push	{r7}
 8004d7a:	b083      	sub	sp, #12
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004d80:	bf00      	nop
 8004d82:	370c      	adds	r7, #12
 8004d84:	46bd      	mov	sp, r7
 8004d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8a:	4770      	bx	lr

08004d8c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004d8c:	b480      	push	{r7}
 8004d8e:	b083      	sub	sp, #12
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004d94:	bf00      	nop
 8004d96:	370c      	adds	r7, #12
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9e:	4770      	bx	lr

08004da0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004da0:	b480      	push	{r7}
 8004da2:	b083      	sub	sp, #12
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004da8:	bf00      	nop
 8004daa:	370c      	adds	r7, #12
 8004dac:	46bd      	mov	sp, r7
 8004dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db2:	4770      	bx	lr

08004db4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004db4:	b480      	push	{r7}
 8004db6:	b083      	sub	sp, #12
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004dbc:	bf00      	nop
 8004dbe:	370c      	adds	r7, #12
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc6:	4770      	bx	lr

08004dc8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004dc8:	b480      	push	{r7}
 8004dca:	b085      	sub	sp, #20
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
 8004dd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	4a3c      	ldr	r2, [pc, #240]	; (8004ecc <TIM_Base_SetConfig+0x104>)
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d00f      	beq.n	8004e00 <TIM_Base_SetConfig+0x38>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004de6:	d00b      	beq.n	8004e00 <TIM_Base_SetConfig+0x38>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	4a39      	ldr	r2, [pc, #228]	; (8004ed0 <TIM_Base_SetConfig+0x108>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d007      	beq.n	8004e00 <TIM_Base_SetConfig+0x38>
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	4a38      	ldr	r2, [pc, #224]	; (8004ed4 <TIM_Base_SetConfig+0x10c>)
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d003      	beq.n	8004e00 <TIM_Base_SetConfig+0x38>
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	4a37      	ldr	r2, [pc, #220]	; (8004ed8 <TIM_Base_SetConfig+0x110>)
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d108      	bne.n	8004e12 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e06:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	685b      	ldr	r3, [r3, #4]
 8004e0c:	68fa      	ldr	r2, [r7, #12]
 8004e0e:	4313      	orrs	r3, r2
 8004e10:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	4a2d      	ldr	r2, [pc, #180]	; (8004ecc <TIM_Base_SetConfig+0x104>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d01b      	beq.n	8004e52 <TIM_Base_SetConfig+0x8a>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e20:	d017      	beq.n	8004e52 <TIM_Base_SetConfig+0x8a>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	4a2a      	ldr	r2, [pc, #168]	; (8004ed0 <TIM_Base_SetConfig+0x108>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d013      	beq.n	8004e52 <TIM_Base_SetConfig+0x8a>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	4a29      	ldr	r2, [pc, #164]	; (8004ed4 <TIM_Base_SetConfig+0x10c>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d00f      	beq.n	8004e52 <TIM_Base_SetConfig+0x8a>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	4a28      	ldr	r2, [pc, #160]	; (8004ed8 <TIM_Base_SetConfig+0x110>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d00b      	beq.n	8004e52 <TIM_Base_SetConfig+0x8a>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	4a27      	ldr	r2, [pc, #156]	; (8004edc <TIM_Base_SetConfig+0x114>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d007      	beq.n	8004e52 <TIM_Base_SetConfig+0x8a>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	4a26      	ldr	r2, [pc, #152]	; (8004ee0 <TIM_Base_SetConfig+0x118>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d003      	beq.n	8004e52 <TIM_Base_SetConfig+0x8a>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	4a25      	ldr	r2, [pc, #148]	; (8004ee4 <TIM_Base_SetConfig+0x11c>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d108      	bne.n	8004e64 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e58:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	68db      	ldr	r3, [r3, #12]
 8004e5e:	68fa      	ldr	r2, [r7, #12]
 8004e60:	4313      	orrs	r3, r2
 8004e62:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	695b      	ldr	r3, [r3, #20]
 8004e6e:	4313      	orrs	r3, r2
 8004e70:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	68fa      	ldr	r2, [r7, #12]
 8004e76:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	689a      	ldr	r2, [r3, #8]
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	681a      	ldr	r2, [r3, #0]
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	4a10      	ldr	r2, [pc, #64]	; (8004ecc <TIM_Base_SetConfig+0x104>)
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	d00f      	beq.n	8004eb0 <TIM_Base_SetConfig+0xe8>
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	4a11      	ldr	r2, [pc, #68]	; (8004ed8 <TIM_Base_SetConfig+0x110>)
 8004e94:	4293      	cmp	r3, r2
 8004e96:	d00b      	beq.n	8004eb0 <TIM_Base_SetConfig+0xe8>
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	4a10      	ldr	r2, [pc, #64]	; (8004edc <TIM_Base_SetConfig+0x114>)
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d007      	beq.n	8004eb0 <TIM_Base_SetConfig+0xe8>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	4a0f      	ldr	r2, [pc, #60]	; (8004ee0 <TIM_Base_SetConfig+0x118>)
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	d003      	beq.n	8004eb0 <TIM_Base_SetConfig+0xe8>
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	4a0e      	ldr	r2, [pc, #56]	; (8004ee4 <TIM_Base_SetConfig+0x11c>)
 8004eac:	4293      	cmp	r3, r2
 8004eae:	d103      	bne.n	8004eb8 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	691a      	ldr	r2, [r3, #16]
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2201      	movs	r2, #1
 8004ebc:	615a      	str	r2, [r3, #20]
}
 8004ebe:	bf00      	nop
 8004ec0:	3714      	adds	r7, #20
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec8:	4770      	bx	lr
 8004eca:	bf00      	nop
 8004ecc:	40012c00 	.word	0x40012c00
 8004ed0:	40000400 	.word	0x40000400
 8004ed4:	40000800 	.word	0x40000800
 8004ed8:	40013400 	.word	0x40013400
 8004edc:	40014000 	.word	0x40014000
 8004ee0:	40014400 	.word	0x40014400
 8004ee4:	40014800 	.word	0x40014800

08004ee8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ee8:	b480      	push	{r7}
 8004eea:	b087      	sub	sp, #28
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
 8004ef0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6a1b      	ldr	r3, [r3, #32]
 8004ef6:	f023 0201 	bic.w	r2, r3, #1
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6a1b      	ldr	r3, [r3, #32]
 8004f02:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	685b      	ldr	r3, [r3, #4]
 8004f08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	699b      	ldr	r3, [r3, #24]
 8004f0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	f023 0303 	bic.w	r3, r3, #3
 8004f22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	68fa      	ldr	r2, [r7, #12]
 8004f2a:	4313      	orrs	r3, r2
 8004f2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004f2e:	697b      	ldr	r3, [r7, #20]
 8004f30:	f023 0302 	bic.w	r3, r3, #2
 8004f34:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	689b      	ldr	r3, [r3, #8]
 8004f3a:	697a      	ldr	r2, [r7, #20]
 8004f3c:	4313      	orrs	r3, r2
 8004f3e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	4a2c      	ldr	r2, [pc, #176]	; (8004ff4 <TIM_OC1_SetConfig+0x10c>)
 8004f44:	4293      	cmp	r3, r2
 8004f46:	d00f      	beq.n	8004f68 <TIM_OC1_SetConfig+0x80>
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	4a2b      	ldr	r2, [pc, #172]	; (8004ff8 <TIM_OC1_SetConfig+0x110>)
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	d00b      	beq.n	8004f68 <TIM_OC1_SetConfig+0x80>
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	4a2a      	ldr	r2, [pc, #168]	; (8004ffc <TIM_OC1_SetConfig+0x114>)
 8004f54:	4293      	cmp	r3, r2
 8004f56:	d007      	beq.n	8004f68 <TIM_OC1_SetConfig+0x80>
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	4a29      	ldr	r2, [pc, #164]	; (8005000 <TIM_OC1_SetConfig+0x118>)
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d003      	beq.n	8004f68 <TIM_OC1_SetConfig+0x80>
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	4a28      	ldr	r2, [pc, #160]	; (8005004 <TIM_OC1_SetConfig+0x11c>)
 8004f64:	4293      	cmp	r3, r2
 8004f66:	d10c      	bne.n	8004f82 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004f68:	697b      	ldr	r3, [r7, #20]
 8004f6a:	f023 0308 	bic.w	r3, r3, #8
 8004f6e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	68db      	ldr	r3, [r3, #12]
 8004f74:	697a      	ldr	r2, [r7, #20]
 8004f76:	4313      	orrs	r3, r2
 8004f78:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004f7a:	697b      	ldr	r3, [r7, #20]
 8004f7c:	f023 0304 	bic.w	r3, r3, #4
 8004f80:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	4a1b      	ldr	r2, [pc, #108]	; (8004ff4 <TIM_OC1_SetConfig+0x10c>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d00f      	beq.n	8004faa <TIM_OC1_SetConfig+0xc2>
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	4a1a      	ldr	r2, [pc, #104]	; (8004ff8 <TIM_OC1_SetConfig+0x110>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d00b      	beq.n	8004faa <TIM_OC1_SetConfig+0xc2>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	4a19      	ldr	r2, [pc, #100]	; (8004ffc <TIM_OC1_SetConfig+0x114>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d007      	beq.n	8004faa <TIM_OC1_SetConfig+0xc2>
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	4a18      	ldr	r2, [pc, #96]	; (8005000 <TIM_OC1_SetConfig+0x118>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d003      	beq.n	8004faa <TIM_OC1_SetConfig+0xc2>
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	4a17      	ldr	r2, [pc, #92]	; (8005004 <TIM_OC1_SetConfig+0x11c>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d111      	bne.n	8004fce <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004faa:	693b      	ldr	r3, [r7, #16]
 8004fac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004fb0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004fb2:	693b      	ldr	r3, [r7, #16]
 8004fb4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004fb8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	695b      	ldr	r3, [r3, #20]
 8004fbe:	693a      	ldr	r2, [r7, #16]
 8004fc0:	4313      	orrs	r3, r2
 8004fc2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	699b      	ldr	r3, [r3, #24]
 8004fc8:	693a      	ldr	r2, [r7, #16]
 8004fca:	4313      	orrs	r3, r2
 8004fcc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	693a      	ldr	r2, [r7, #16]
 8004fd2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	68fa      	ldr	r2, [r7, #12]
 8004fd8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	685a      	ldr	r2, [r3, #4]
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	697a      	ldr	r2, [r7, #20]
 8004fe6:	621a      	str	r2, [r3, #32]
}
 8004fe8:	bf00      	nop
 8004fea:	371c      	adds	r7, #28
 8004fec:	46bd      	mov	sp, r7
 8004fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff2:	4770      	bx	lr
 8004ff4:	40012c00 	.word	0x40012c00
 8004ff8:	40013400 	.word	0x40013400
 8004ffc:	40014000 	.word	0x40014000
 8005000:	40014400 	.word	0x40014400
 8005004:	40014800 	.word	0x40014800

08005008 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005008:	b480      	push	{r7}
 800500a:	b087      	sub	sp, #28
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
 8005010:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6a1b      	ldr	r3, [r3, #32]
 8005016:	f023 0210 	bic.w	r2, r3, #16
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6a1b      	ldr	r3, [r3, #32]
 8005022:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	685b      	ldr	r3, [r3, #4]
 8005028:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	699b      	ldr	r3, [r3, #24]
 800502e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005036:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800503a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005042:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	021b      	lsls	r3, r3, #8
 800504a:	68fa      	ldr	r2, [r7, #12]
 800504c:	4313      	orrs	r3, r2
 800504e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005050:	697b      	ldr	r3, [r7, #20]
 8005052:	f023 0320 	bic.w	r3, r3, #32
 8005056:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	689b      	ldr	r3, [r3, #8]
 800505c:	011b      	lsls	r3, r3, #4
 800505e:	697a      	ldr	r2, [r7, #20]
 8005060:	4313      	orrs	r3, r2
 8005062:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	4a28      	ldr	r2, [pc, #160]	; (8005108 <TIM_OC2_SetConfig+0x100>)
 8005068:	4293      	cmp	r3, r2
 800506a:	d003      	beq.n	8005074 <TIM_OC2_SetConfig+0x6c>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	4a27      	ldr	r2, [pc, #156]	; (800510c <TIM_OC2_SetConfig+0x104>)
 8005070:	4293      	cmp	r3, r2
 8005072:	d10d      	bne.n	8005090 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005074:	697b      	ldr	r3, [r7, #20]
 8005076:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800507a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	68db      	ldr	r3, [r3, #12]
 8005080:	011b      	lsls	r3, r3, #4
 8005082:	697a      	ldr	r2, [r7, #20]
 8005084:	4313      	orrs	r3, r2
 8005086:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005088:	697b      	ldr	r3, [r7, #20]
 800508a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800508e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	4a1d      	ldr	r2, [pc, #116]	; (8005108 <TIM_OC2_SetConfig+0x100>)
 8005094:	4293      	cmp	r3, r2
 8005096:	d00f      	beq.n	80050b8 <TIM_OC2_SetConfig+0xb0>
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	4a1c      	ldr	r2, [pc, #112]	; (800510c <TIM_OC2_SetConfig+0x104>)
 800509c:	4293      	cmp	r3, r2
 800509e:	d00b      	beq.n	80050b8 <TIM_OC2_SetConfig+0xb0>
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	4a1b      	ldr	r2, [pc, #108]	; (8005110 <TIM_OC2_SetConfig+0x108>)
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d007      	beq.n	80050b8 <TIM_OC2_SetConfig+0xb0>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	4a1a      	ldr	r2, [pc, #104]	; (8005114 <TIM_OC2_SetConfig+0x10c>)
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d003      	beq.n	80050b8 <TIM_OC2_SetConfig+0xb0>
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	4a19      	ldr	r2, [pc, #100]	; (8005118 <TIM_OC2_SetConfig+0x110>)
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d113      	bne.n	80050e0 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80050b8:	693b      	ldr	r3, [r7, #16]
 80050ba:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80050be:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80050c0:	693b      	ldr	r3, [r7, #16]
 80050c2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80050c6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	695b      	ldr	r3, [r3, #20]
 80050cc:	009b      	lsls	r3, r3, #2
 80050ce:	693a      	ldr	r2, [r7, #16]
 80050d0:	4313      	orrs	r3, r2
 80050d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	699b      	ldr	r3, [r3, #24]
 80050d8:	009b      	lsls	r3, r3, #2
 80050da:	693a      	ldr	r2, [r7, #16]
 80050dc:	4313      	orrs	r3, r2
 80050de:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	693a      	ldr	r2, [r7, #16]
 80050e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	68fa      	ldr	r2, [r7, #12]
 80050ea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	685a      	ldr	r2, [r3, #4]
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	697a      	ldr	r2, [r7, #20]
 80050f8:	621a      	str	r2, [r3, #32]
}
 80050fa:	bf00      	nop
 80050fc:	371c      	adds	r7, #28
 80050fe:	46bd      	mov	sp, r7
 8005100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005104:	4770      	bx	lr
 8005106:	bf00      	nop
 8005108:	40012c00 	.word	0x40012c00
 800510c:	40013400 	.word	0x40013400
 8005110:	40014000 	.word	0x40014000
 8005114:	40014400 	.word	0x40014400
 8005118:	40014800 	.word	0x40014800

0800511c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800511c:	b480      	push	{r7}
 800511e:	b087      	sub	sp, #28
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
 8005124:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6a1b      	ldr	r3, [r3, #32]
 800512a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6a1b      	ldr	r3, [r3, #32]
 8005136:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	685b      	ldr	r3, [r3, #4]
 800513c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	69db      	ldr	r3, [r3, #28]
 8005142:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800514a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800514e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	f023 0303 	bic.w	r3, r3, #3
 8005156:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	68fa      	ldr	r2, [r7, #12]
 800515e:	4313      	orrs	r3, r2
 8005160:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005162:	697b      	ldr	r3, [r7, #20]
 8005164:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005168:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	689b      	ldr	r3, [r3, #8]
 800516e:	021b      	lsls	r3, r3, #8
 8005170:	697a      	ldr	r2, [r7, #20]
 8005172:	4313      	orrs	r3, r2
 8005174:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	4a27      	ldr	r2, [pc, #156]	; (8005218 <TIM_OC3_SetConfig+0xfc>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d003      	beq.n	8005186 <TIM_OC3_SetConfig+0x6a>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	4a26      	ldr	r2, [pc, #152]	; (800521c <TIM_OC3_SetConfig+0x100>)
 8005182:	4293      	cmp	r3, r2
 8005184:	d10d      	bne.n	80051a2 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005186:	697b      	ldr	r3, [r7, #20]
 8005188:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800518c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	68db      	ldr	r3, [r3, #12]
 8005192:	021b      	lsls	r3, r3, #8
 8005194:	697a      	ldr	r2, [r7, #20]
 8005196:	4313      	orrs	r3, r2
 8005198:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800519a:	697b      	ldr	r3, [r7, #20]
 800519c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80051a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	4a1c      	ldr	r2, [pc, #112]	; (8005218 <TIM_OC3_SetConfig+0xfc>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d00f      	beq.n	80051ca <TIM_OC3_SetConfig+0xae>
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	4a1b      	ldr	r2, [pc, #108]	; (800521c <TIM_OC3_SetConfig+0x100>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d00b      	beq.n	80051ca <TIM_OC3_SetConfig+0xae>
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	4a1a      	ldr	r2, [pc, #104]	; (8005220 <TIM_OC3_SetConfig+0x104>)
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d007      	beq.n	80051ca <TIM_OC3_SetConfig+0xae>
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	4a19      	ldr	r2, [pc, #100]	; (8005224 <TIM_OC3_SetConfig+0x108>)
 80051be:	4293      	cmp	r3, r2
 80051c0:	d003      	beq.n	80051ca <TIM_OC3_SetConfig+0xae>
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	4a18      	ldr	r2, [pc, #96]	; (8005228 <TIM_OC3_SetConfig+0x10c>)
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d113      	bne.n	80051f2 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80051ca:	693b      	ldr	r3, [r7, #16]
 80051cc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80051d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80051d2:	693b      	ldr	r3, [r7, #16]
 80051d4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80051d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	695b      	ldr	r3, [r3, #20]
 80051de:	011b      	lsls	r3, r3, #4
 80051e0:	693a      	ldr	r2, [r7, #16]
 80051e2:	4313      	orrs	r3, r2
 80051e4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	699b      	ldr	r3, [r3, #24]
 80051ea:	011b      	lsls	r3, r3, #4
 80051ec:	693a      	ldr	r2, [r7, #16]
 80051ee:	4313      	orrs	r3, r2
 80051f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	693a      	ldr	r2, [r7, #16]
 80051f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	68fa      	ldr	r2, [r7, #12]
 80051fc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	685a      	ldr	r2, [r3, #4]
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	697a      	ldr	r2, [r7, #20]
 800520a:	621a      	str	r2, [r3, #32]
}
 800520c:	bf00      	nop
 800520e:	371c      	adds	r7, #28
 8005210:	46bd      	mov	sp, r7
 8005212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005216:	4770      	bx	lr
 8005218:	40012c00 	.word	0x40012c00
 800521c:	40013400 	.word	0x40013400
 8005220:	40014000 	.word	0x40014000
 8005224:	40014400 	.word	0x40014400
 8005228:	40014800 	.word	0x40014800

0800522c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800522c:	b480      	push	{r7}
 800522e:	b087      	sub	sp, #28
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
 8005234:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6a1b      	ldr	r3, [r3, #32]
 800523a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6a1b      	ldr	r3, [r3, #32]
 8005246:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	685b      	ldr	r3, [r3, #4]
 800524c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	69db      	ldr	r3, [r3, #28]
 8005252:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800525a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800525e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005266:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	021b      	lsls	r3, r3, #8
 800526e:	68fa      	ldr	r2, [r7, #12]
 8005270:	4313      	orrs	r3, r2
 8005272:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005274:	697b      	ldr	r3, [r7, #20]
 8005276:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800527a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	689b      	ldr	r3, [r3, #8]
 8005280:	031b      	lsls	r3, r3, #12
 8005282:	697a      	ldr	r2, [r7, #20]
 8005284:	4313      	orrs	r3, r2
 8005286:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	4a28      	ldr	r2, [pc, #160]	; (800532c <TIM_OC4_SetConfig+0x100>)
 800528c:	4293      	cmp	r3, r2
 800528e:	d003      	beq.n	8005298 <TIM_OC4_SetConfig+0x6c>
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	4a27      	ldr	r2, [pc, #156]	; (8005330 <TIM_OC4_SetConfig+0x104>)
 8005294:	4293      	cmp	r3, r2
 8005296:	d10d      	bne.n	80052b4 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8005298:	697b      	ldr	r3, [r7, #20]
 800529a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800529e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	68db      	ldr	r3, [r3, #12]
 80052a4:	031b      	lsls	r3, r3, #12
 80052a6:	697a      	ldr	r2, [r7, #20]
 80052a8:	4313      	orrs	r3, r2
 80052aa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80052ac:	697b      	ldr	r3, [r7, #20]
 80052ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80052b2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	4a1d      	ldr	r2, [pc, #116]	; (800532c <TIM_OC4_SetConfig+0x100>)
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d00f      	beq.n	80052dc <TIM_OC4_SetConfig+0xb0>
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	4a1c      	ldr	r2, [pc, #112]	; (8005330 <TIM_OC4_SetConfig+0x104>)
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d00b      	beq.n	80052dc <TIM_OC4_SetConfig+0xb0>
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	4a1b      	ldr	r2, [pc, #108]	; (8005334 <TIM_OC4_SetConfig+0x108>)
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d007      	beq.n	80052dc <TIM_OC4_SetConfig+0xb0>
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	4a1a      	ldr	r2, [pc, #104]	; (8005338 <TIM_OC4_SetConfig+0x10c>)
 80052d0:	4293      	cmp	r3, r2
 80052d2:	d003      	beq.n	80052dc <TIM_OC4_SetConfig+0xb0>
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	4a19      	ldr	r2, [pc, #100]	; (800533c <TIM_OC4_SetConfig+0x110>)
 80052d8:	4293      	cmp	r3, r2
 80052da:	d113      	bne.n	8005304 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80052dc:	693b      	ldr	r3, [r7, #16]
 80052de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80052e2:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80052e4:	693b      	ldr	r3, [r7, #16]
 80052e6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80052ea:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	695b      	ldr	r3, [r3, #20]
 80052f0:	019b      	lsls	r3, r3, #6
 80052f2:	693a      	ldr	r2, [r7, #16]
 80052f4:	4313      	orrs	r3, r2
 80052f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	699b      	ldr	r3, [r3, #24]
 80052fc:	019b      	lsls	r3, r3, #6
 80052fe:	693a      	ldr	r2, [r7, #16]
 8005300:	4313      	orrs	r3, r2
 8005302:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	693a      	ldr	r2, [r7, #16]
 8005308:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	68fa      	ldr	r2, [r7, #12]
 800530e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	685a      	ldr	r2, [r3, #4]
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	697a      	ldr	r2, [r7, #20]
 800531c:	621a      	str	r2, [r3, #32]
}
 800531e:	bf00      	nop
 8005320:	371c      	adds	r7, #28
 8005322:	46bd      	mov	sp, r7
 8005324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005328:	4770      	bx	lr
 800532a:	bf00      	nop
 800532c:	40012c00 	.word	0x40012c00
 8005330:	40013400 	.word	0x40013400
 8005334:	40014000 	.word	0x40014000
 8005338:	40014400 	.word	0x40014400
 800533c:	40014800 	.word	0x40014800

08005340 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005340:	b480      	push	{r7}
 8005342:	b087      	sub	sp, #28
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
 8005348:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6a1b      	ldr	r3, [r3, #32]
 800534e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6a1b      	ldr	r3, [r3, #32]
 800535a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	685b      	ldr	r3, [r3, #4]
 8005360:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005366:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800536e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005372:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	68fa      	ldr	r2, [r7, #12]
 800537a:	4313      	orrs	r3, r2
 800537c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800537e:	693b      	ldr	r3, [r7, #16]
 8005380:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005384:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	689b      	ldr	r3, [r3, #8]
 800538a:	041b      	lsls	r3, r3, #16
 800538c:	693a      	ldr	r2, [r7, #16]
 800538e:	4313      	orrs	r3, r2
 8005390:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	4a17      	ldr	r2, [pc, #92]	; (80053f4 <TIM_OC5_SetConfig+0xb4>)
 8005396:	4293      	cmp	r3, r2
 8005398:	d00f      	beq.n	80053ba <TIM_OC5_SetConfig+0x7a>
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	4a16      	ldr	r2, [pc, #88]	; (80053f8 <TIM_OC5_SetConfig+0xb8>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d00b      	beq.n	80053ba <TIM_OC5_SetConfig+0x7a>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	4a15      	ldr	r2, [pc, #84]	; (80053fc <TIM_OC5_SetConfig+0xbc>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d007      	beq.n	80053ba <TIM_OC5_SetConfig+0x7a>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	4a14      	ldr	r2, [pc, #80]	; (8005400 <TIM_OC5_SetConfig+0xc0>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d003      	beq.n	80053ba <TIM_OC5_SetConfig+0x7a>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	4a13      	ldr	r2, [pc, #76]	; (8005404 <TIM_OC5_SetConfig+0xc4>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d109      	bne.n	80053ce <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80053ba:	697b      	ldr	r3, [r7, #20]
 80053bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80053c0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	695b      	ldr	r3, [r3, #20]
 80053c6:	021b      	lsls	r3, r3, #8
 80053c8:	697a      	ldr	r2, [r7, #20]
 80053ca:	4313      	orrs	r3, r2
 80053cc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	697a      	ldr	r2, [r7, #20]
 80053d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	68fa      	ldr	r2, [r7, #12]
 80053d8:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	685a      	ldr	r2, [r3, #4]
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	693a      	ldr	r2, [r7, #16]
 80053e6:	621a      	str	r2, [r3, #32]
}
 80053e8:	bf00      	nop
 80053ea:	371c      	adds	r7, #28
 80053ec:	46bd      	mov	sp, r7
 80053ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f2:	4770      	bx	lr
 80053f4:	40012c00 	.word	0x40012c00
 80053f8:	40013400 	.word	0x40013400
 80053fc:	40014000 	.word	0x40014000
 8005400:	40014400 	.word	0x40014400
 8005404:	40014800 	.word	0x40014800

08005408 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005408:	b480      	push	{r7}
 800540a:	b087      	sub	sp, #28
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
 8005410:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6a1b      	ldr	r3, [r3, #32]
 8005416:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6a1b      	ldr	r3, [r3, #32]
 8005422:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	685b      	ldr	r3, [r3, #4]
 8005428:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800542e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005436:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800543a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	021b      	lsls	r3, r3, #8
 8005442:	68fa      	ldr	r2, [r7, #12]
 8005444:	4313      	orrs	r3, r2
 8005446:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005448:	693b      	ldr	r3, [r7, #16]
 800544a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800544e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	689b      	ldr	r3, [r3, #8]
 8005454:	051b      	lsls	r3, r3, #20
 8005456:	693a      	ldr	r2, [r7, #16]
 8005458:	4313      	orrs	r3, r2
 800545a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	4a18      	ldr	r2, [pc, #96]	; (80054c0 <TIM_OC6_SetConfig+0xb8>)
 8005460:	4293      	cmp	r3, r2
 8005462:	d00f      	beq.n	8005484 <TIM_OC6_SetConfig+0x7c>
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	4a17      	ldr	r2, [pc, #92]	; (80054c4 <TIM_OC6_SetConfig+0xbc>)
 8005468:	4293      	cmp	r3, r2
 800546a:	d00b      	beq.n	8005484 <TIM_OC6_SetConfig+0x7c>
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	4a16      	ldr	r2, [pc, #88]	; (80054c8 <TIM_OC6_SetConfig+0xc0>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d007      	beq.n	8005484 <TIM_OC6_SetConfig+0x7c>
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	4a15      	ldr	r2, [pc, #84]	; (80054cc <TIM_OC6_SetConfig+0xc4>)
 8005478:	4293      	cmp	r3, r2
 800547a:	d003      	beq.n	8005484 <TIM_OC6_SetConfig+0x7c>
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	4a14      	ldr	r2, [pc, #80]	; (80054d0 <TIM_OC6_SetConfig+0xc8>)
 8005480:	4293      	cmp	r3, r2
 8005482:	d109      	bne.n	8005498 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005484:	697b      	ldr	r3, [r7, #20]
 8005486:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800548a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	695b      	ldr	r3, [r3, #20]
 8005490:	029b      	lsls	r3, r3, #10
 8005492:	697a      	ldr	r2, [r7, #20]
 8005494:	4313      	orrs	r3, r2
 8005496:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	697a      	ldr	r2, [r7, #20]
 800549c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	68fa      	ldr	r2, [r7, #12]
 80054a2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	685a      	ldr	r2, [r3, #4]
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	693a      	ldr	r2, [r7, #16]
 80054b0:	621a      	str	r2, [r3, #32]
}
 80054b2:	bf00      	nop
 80054b4:	371c      	adds	r7, #28
 80054b6:	46bd      	mov	sp, r7
 80054b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054bc:	4770      	bx	lr
 80054be:	bf00      	nop
 80054c0:	40012c00 	.word	0x40012c00
 80054c4:	40013400 	.word	0x40013400
 80054c8:	40014000 	.word	0x40014000
 80054cc:	40014400 	.word	0x40014400
 80054d0:	40014800 	.word	0x40014800

080054d4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80054d4:	b480      	push	{r7}
 80054d6:	b087      	sub	sp, #28
 80054d8:	af00      	add	r7, sp, #0
 80054da:	60f8      	str	r0, [r7, #12]
 80054dc:	60b9      	str	r1, [r7, #8]
 80054de:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80054e0:	68bb      	ldr	r3, [r7, #8]
 80054e2:	f003 031f 	and.w	r3, r3, #31
 80054e6:	2201      	movs	r2, #1
 80054e8:	fa02 f303 	lsl.w	r3, r2, r3
 80054ec:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	6a1a      	ldr	r2, [r3, #32]
 80054f2:	697b      	ldr	r3, [r7, #20]
 80054f4:	43db      	mvns	r3, r3
 80054f6:	401a      	ands	r2, r3
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	6a1a      	ldr	r2, [r3, #32]
 8005500:	68bb      	ldr	r3, [r7, #8]
 8005502:	f003 031f 	and.w	r3, r3, #31
 8005506:	6879      	ldr	r1, [r7, #4]
 8005508:	fa01 f303 	lsl.w	r3, r1, r3
 800550c:	431a      	orrs	r2, r3
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	621a      	str	r2, [r3, #32]
}
 8005512:	bf00      	nop
 8005514:	371c      	adds	r7, #28
 8005516:	46bd      	mov	sp, r7
 8005518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551c:	4770      	bx	lr
	...

08005520 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005520:	b480      	push	{r7}
 8005522:	b085      	sub	sp, #20
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
 8005528:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005530:	2b01      	cmp	r3, #1
 8005532:	d101      	bne.n	8005538 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005534:	2302      	movs	r3, #2
 8005536:	e065      	b.n	8005604 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2201      	movs	r2, #1
 800553c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2202      	movs	r2, #2
 8005544:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	685b      	ldr	r3, [r3, #4]
 800554e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	689b      	ldr	r3, [r3, #8]
 8005556:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	4a2c      	ldr	r2, [pc, #176]	; (8005610 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800555e:	4293      	cmp	r3, r2
 8005560:	d004      	beq.n	800556c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	4a2b      	ldr	r2, [pc, #172]	; (8005614 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005568:	4293      	cmp	r3, r2
 800556a:	d108      	bne.n	800557e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005572:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	685b      	ldr	r3, [r3, #4]
 8005578:	68fa      	ldr	r2, [r7, #12]
 800557a:	4313      	orrs	r3, r2
 800557c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8005584:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005588:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	68fa      	ldr	r2, [r7, #12]
 8005590:	4313      	orrs	r3, r2
 8005592:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	68fa      	ldr	r2, [r7, #12]
 800559a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	4a1b      	ldr	r2, [pc, #108]	; (8005610 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d018      	beq.n	80055d8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055ae:	d013      	beq.n	80055d8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	4a18      	ldr	r2, [pc, #96]	; (8005618 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d00e      	beq.n	80055d8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	4a17      	ldr	r2, [pc, #92]	; (800561c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80055c0:	4293      	cmp	r3, r2
 80055c2:	d009      	beq.n	80055d8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	4a12      	ldr	r2, [pc, #72]	; (8005614 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d004      	beq.n	80055d8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	4a13      	ldr	r2, [pc, #76]	; (8005620 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80055d4:	4293      	cmp	r3, r2
 80055d6:	d10c      	bne.n	80055f2 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80055d8:	68bb      	ldr	r3, [r7, #8]
 80055da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80055de:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	689b      	ldr	r3, [r3, #8]
 80055e4:	68ba      	ldr	r2, [r7, #8]
 80055e6:	4313      	orrs	r3, r2
 80055e8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	68ba      	ldr	r2, [r7, #8]
 80055f0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2201      	movs	r2, #1
 80055f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	2200      	movs	r2, #0
 80055fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005602:	2300      	movs	r3, #0
}
 8005604:	4618      	mov	r0, r3
 8005606:	3714      	adds	r7, #20
 8005608:	46bd      	mov	sp, r7
 800560a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560e:	4770      	bx	lr
 8005610:	40012c00 	.word	0x40012c00
 8005614:	40013400 	.word	0x40013400
 8005618:	40000400 	.word	0x40000400
 800561c:	40000800 	.word	0x40000800
 8005620:	40014000 	.word	0x40014000

08005624 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005624:	b480      	push	{r7}
 8005626:	b085      	sub	sp, #20
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
 800562c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800562e:	2300      	movs	r3, #0
 8005630:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005638:	2b01      	cmp	r3, #1
 800563a:	d101      	bne.n	8005640 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800563c:	2302      	movs	r3, #2
 800563e:	e087      	b.n	8005750 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2201      	movs	r2, #1
 8005644:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	68db      	ldr	r3, [r3, #12]
 8005652:	4313      	orrs	r3, r2
 8005654:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	689b      	ldr	r3, [r3, #8]
 8005660:	4313      	orrs	r3, r2
 8005662:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	685b      	ldr	r3, [r3, #4]
 800566e:	4313      	orrs	r3, r2
 8005670:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	4313      	orrs	r3, r2
 800567e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	691b      	ldr	r3, [r3, #16]
 800568a:	4313      	orrs	r3, r2
 800568c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	695b      	ldr	r3, [r3, #20]
 8005698:	4313      	orrs	r3, r2
 800569a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056a6:	4313      	orrs	r3, r2
 80056a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	699b      	ldr	r3, [r3, #24]
 80056b4:	041b      	lsls	r3, r3, #16
 80056b6:	4313      	orrs	r3, r2
 80056b8:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	4a27      	ldr	r2, [pc, #156]	; (800575c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80056c0:	4293      	cmp	r3, r2
 80056c2:	d004      	beq.n	80056ce <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	4a25      	ldr	r2, [pc, #148]	; (8005760 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d106      	bne.n	80056dc <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	69db      	ldr	r3, [r3, #28]
 80056d8:	4313      	orrs	r3, r2
 80056da:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	4a1e      	ldr	r2, [pc, #120]	; (800575c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d004      	beq.n	80056f0 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	4a1d      	ldr	r2, [pc, #116]	; (8005760 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80056ec:	4293      	cmp	r3, r2
 80056ee:	d126      	bne.n	800573e <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056fa:	051b      	lsls	r3, r3, #20
 80056fc:	4313      	orrs	r3, r2
 80056fe:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	6a1b      	ldr	r3, [r3, #32]
 800570a:	4313      	orrs	r3, r2
 800570c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005718:	4313      	orrs	r3, r2
 800571a:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	4a0e      	ldr	r2, [pc, #56]	; (800575c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8005722:	4293      	cmp	r3, r2
 8005724:	d004      	beq.n	8005730 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	4a0d      	ldr	r2, [pc, #52]	; (8005760 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800572c:	4293      	cmp	r3, r2
 800572e:	d106      	bne.n	800573e <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800573a:	4313      	orrs	r3, r2
 800573c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	68fa      	ldr	r2, [r7, #12]
 8005744:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	2200      	movs	r2, #0
 800574a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800574e:	2300      	movs	r3, #0
}
 8005750:	4618      	mov	r0, r3
 8005752:	3714      	adds	r7, #20
 8005754:	46bd      	mov	sp, r7
 8005756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575a:	4770      	bx	lr
 800575c:	40012c00 	.word	0x40012c00
 8005760:	40013400 	.word	0x40013400

08005764 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005764:	b480      	push	{r7}
 8005766:	b083      	sub	sp, #12
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800576c:	bf00      	nop
 800576e:	370c      	adds	r7, #12
 8005770:	46bd      	mov	sp, r7
 8005772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005776:	4770      	bx	lr

08005778 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005778:	b480      	push	{r7}
 800577a:	b083      	sub	sp, #12
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005780:	bf00      	nop
 8005782:	370c      	adds	r7, #12
 8005784:	46bd      	mov	sp, r7
 8005786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578a:	4770      	bx	lr

0800578c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800578c:	b480      	push	{r7}
 800578e:	b083      	sub	sp, #12
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005794:	bf00      	nop
 8005796:	370c      	adds	r7, #12
 8005798:	46bd      	mov	sp, r7
 800579a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579e:	4770      	bx	lr

080057a0 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80057a0:	b480      	push	{r7}
 80057a2:	b083      	sub	sp, #12
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80057a8:	bf00      	nop
 80057aa:	370c      	adds	r7, #12
 80057ac:	46bd      	mov	sp, r7
 80057ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b2:	4770      	bx	lr

080057b4 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80057b4:	b480      	push	{r7}
 80057b6:	b083      	sub	sp, #12
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80057bc:	bf00      	nop
 80057be:	370c      	adds	r7, #12
 80057c0:	46bd      	mov	sp, r7
 80057c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c6:	4770      	bx	lr

080057c8 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80057c8:	b480      	push	{r7}
 80057ca:	b083      	sub	sp, #12
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80057d0:	bf00      	nop
 80057d2:	370c      	adds	r7, #12
 80057d4:	46bd      	mov	sp, r7
 80057d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057da:	4770      	bx	lr

080057dc <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80057dc:	b480      	push	{r7}
 80057de:	b083      	sub	sp, #12
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80057e4:	bf00      	nop
 80057e6:	370c      	adds	r7, #12
 80057e8:	46bd      	mov	sp, r7
 80057ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ee:	4770      	bx	lr

080057f0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80057f0:	b480      	push	{r7}
 80057f2:	b085      	sub	sp, #20
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2200      	movs	r2, #0
 80057fc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005800:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8005804:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	b29a      	uxth	r2, r3
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005810:	2300      	movs	r3, #0
}
 8005812:	4618      	mov	r0, r3
 8005814:	3714      	adds	r7, #20
 8005816:	46bd      	mov	sp, r7
 8005818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581c:	4770      	bx	lr

0800581e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800581e:	b480      	push	{r7}
 8005820:	b085      	sub	sp, #20
 8005822:	af00      	add	r7, sp, #0
 8005824:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005826:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800582a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005832:	b29a      	uxth	r2, r3
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	b29b      	uxth	r3, r3
 8005838:	43db      	mvns	r3, r3
 800583a:	b29b      	uxth	r3, r3
 800583c:	4013      	ands	r3, r2
 800583e:	b29a      	uxth	r2, r3
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005846:	2300      	movs	r3, #0
}
 8005848:	4618      	mov	r0, r3
 800584a:	3714      	adds	r7, #20
 800584c:	46bd      	mov	sp, r7
 800584e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005852:	4770      	bx	lr

08005854 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005854:	b084      	sub	sp, #16
 8005856:	b480      	push	{r7}
 8005858:	b083      	sub	sp, #12
 800585a:	af00      	add	r7, sp, #0
 800585c:	6078      	str	r0, [r7, #4]
 800585e:	f107 0014 	add.w	r0, r7, #20
 8005862:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2201      	movs	r2, #1
 800586a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0U;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	2200      	movs	r2, #0
 8005872:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0U;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	2200      	movs	r2, #0
 800587a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	2200      	movs	r2, #0
 8005882:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8005886:	2300      	movs	r3, #0
}
 8005888:	4618      	mov	r0, r3
 800588a:	370c      	adds	r7, #12
 800588c:	46bd      	mov	sp, r7
 800588e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005892:	b004      	add	sp, #16
 8005894:	4770      	bx	lr
	...

08005898 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005898:	b480      	push	{r7}
 800589a:	b09b      	sub	sp, #108	; 0x6c
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
 80058a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80058a2:	2300      	movs	r3, #0
 80058a4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80058a8:	687a      	ldr	r2, [r7, #4]
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	781b      	ldrb	r3, [r3, #0]
 80058ae:	009b      	lsls	r3, r3, #2
 80058b0:	4413      	add	r3, r2
 80058b2:	881b      	ldrh	r3, [r3, #0]
 80058b4:	b29b      	uxth	r3, r3
 80058b6:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80058ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058be:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 80058c2:	683b      	ldr	r3, [r7, #0]
 80058c4:	78db      	ldrb	r3, [r3, #3]
 80058c6:	2b03      	cmp	r3, #3
 80058c8:	d81f      	bhi.n	800590a <USB_ActivateEndpoint+0x72>
 80058ca:	a201      	add	r2, pc, #4	; (adr r2, 80058d0 <USB_ActivateEndpoint+0x38>)
 80058cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058d0:	080058e1 	.word	0x080058e1
 80058d4:	080058fd 	.word	0x080058fd
 80058d8:	08005913 	.word	0x08005913
 80058dc:	080058ef 	.word	0x080058ef
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80058e0:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80058e4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80058e8:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80058ec:	e012      	b.n	8005914 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80058ee:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80058f2:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80058f6:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80058fa:	e00b      	b.n	8005914 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80058fc:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005900:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005904:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8005908:	e004      	b.n	8005914 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800590a:	2301      	movs	r3, #1
 800590c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8005910:	e000      	b.n	8005914 <USB_ActivateEndpoint+0x7c>
      break;
 8005912:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8005914:	687a      	ldr	r2, [r7, #4]
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	781b      	ldrb	r3, [r3, #0]
 800591a:	009b      	lsls	r3, r3, #2
 800591c:	441a      	add	r2, r3
 800591e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005922:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005926:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800592a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800592e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005932:	b29b      	uxth	r3, r3
 8005934:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8005936:	687a      	ldr	r2, [r7, #4]
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	781b      	ldrb	r3, [r3, #0]
 800593c:	009b      	lsls	r3, r3, #2
 800593e:	4413      	add	r3, r2
 8005940:	881b      	ldrh	r3, [r3, #0]
 8005942:	b29b      	uxth	r3, r3
 8005944:	b21b      	sxth	r3, r3
 8005946:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800594a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800594e:	b21a      	sxth	r2, r3
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	781b      	ldrb	r3, [r3, #0]
 8005954:	b21b      	sxth	r3, r3
 8005956:	4313      	orrs	r3, r2
 8005958:	b21b      	sxth	r3, r3
 800595a:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 800595e:	687a      	ldr	r2, [r7, #4]
 8005960:	683b      	ldr	r3, [r7, #0]
 8005962:	781b      	ldrb	r3, [r3, #0]
 8005964:	009b      	lsls	r3, r3, #2
 8005966:	441a      	add	r2, r3
 8005968:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800596c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005970:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005974:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005978:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800597c:	b29b      	uxth	r3, r3
 800597e:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	7b1b      	ldrb	r3, [r3, #12]
 8005984:	2b00      	cmp	r3, #0
 8005986:	f040 8149 	bne.w	8005c1c <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 800598a:	683b      	ldr	r3, [r7, #0]
 800598c:	785b      	ldrb	r3, [r3, #1]
 800598e:	2b00      	cmp	r3, #0
 8005990:	f000 8084 	beq.w	8005a9c <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	617b      	str	r3, [r7, #20]
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800599e:	b29b      	uxth	r3, r3
 80059a0:	461a      	mov	r2, r3
 80059a2:	697b      	ldr	r3, [r7, #20]
 80059a4:	4413      	add	r3, r2
 80059a6:	617b      	str	r3, [r7, #20]
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	781b      	ldrb	r3, [r3, #0]
 80059ac:	00da      	lsls	r2, r3, #3
 80059ae:	697b      	ldr	r3, [r7, #20]
 80059b0:	4413      	add	r3, r2
 80059b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80059b6:	613b      	str	r3, [r7, #16]
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	88db      	ldrh	r3, [r3, #6]
 80059bc:	085b      	lsrs	r3, r3, #1
 80059be:	b29b      	uxth	r3, r3
 80059c0:	005b      	lsls	r3, r3, #1
 80059c2:	b29a      	uxth	r2, r3
 80059c4:	693b      	ldr	r3, [r7, #16]
 80059c6:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80059c8:	687a      	ldr	r2, [r7, #4]
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	781b      	ldrb	r3, [r3, #0]
 80059ce:	009b      	lsls	r3, r3, #2
 80059d0:	4413      	add	r3, r2
 80059d2:	881b      	ldrh	r3, [r3, #0]
 80059d4:	81fb      	strh	r3, [r7, #14]
 80059d6:	89fb      	ldrh	r3, [r7, #14]
 80059d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d01b      	beq.n	8005a18 <USB_ActivateEndpoint+0x180>
 80059e0:	687a      	ldr	r2, [r7, #4]
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	781b      	ldrb	r3, [r3, #0]
 80059e6:	009b      	lsls	r3, r3, #2
 80059e8:	4413      	add	r3, r2
 80059ea:	881b      	ldrh	r3, [r3, #0]
 80059ec:	b29b      	uxth	r3, r3
 80059ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059f6:	81bb      	strh	r3, [r7, #12]
 80059f8:	687a      	ldr	r2, [r7, #4]
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	781b      	ldrb	r3, [r3, #0]
 80059fe:	009b      	lsls	r3, r3, #2
 8005a00:	441a      	add	r2, r3
 8005a02:	89bb      	ldrh	r3, [r7, #12]
 8005a04:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a08:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a0c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a10:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005a14:	b29b      	uxth	r3, r3
 8005a16:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	78db      	ldrb	r3, [r3, #3]
 8005a1c:	2b01      	cmp	r3, #1
 8005a1e:	d020      	beq.n	8005a62 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005a20:	687a      	ldr	r2, [r7, #4]
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	781b      	ldrb	r3, [r3, #0]
 8005a26:	009b      	lsls	r3, r3, #2
 8005a28:	4413      	add	r3, r2
 8005a2a:	881b      	ldrh	r3, [r3, #0]
 8005a2c:	b29b      	uxth	r3, r3
 8005a2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a32:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a36:	813b      	strh	r3, [r7, #8]
 8005a38:	893b      	ldrh	r3, [r7, #8]
 8005a3a:	f083 0320 	eor.w	r3, r3, #32
 8005a3e:	813b      	strh	r3, [r7, #8]
 8005a40:	687a      	ldr	r2, [r7, #4]
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	781b      	ldrb	r3, [r3, #0]
 8005a46:	009b      	lsls	r3, r3, #2
 8005a48:	441a      	add	r2, r3
 8005a4a:	893b      	ldrh	r3, [r7, #8]
 8005a4c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a50:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a54:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a5c:	b29b      	uxth	r3, r3
 8005a5e:	8013      	strh	r3, [r2, #0]
 8005a60:	e27f      	b.n	8005f62 <USB_ActivateEndpoint+0x6ca>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005a62:	687a      	ldr	r2, [r7, #4]
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	781b      	ldrb	r3, [r3, #0]
 8005a68:	009b      	lsls	r3, r3, #2
 8005a6a:	4413      	add	r3, r2
 8005a6c:	881b      	ldrh	r3, [r3, #0]
 8005a6e:	b29b      	uxth	r3, r3
 8005a70:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a74:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a78:	817b      	strh	r3, [r7, #10]
 8005a7a:	687a      	ldr	r2, [r7, #4]
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	781b      	ldrb	r3, [r3, #0]
 8005a80:	009b      	lsls	r3, r3, #2
 8005a82:	441a      	add	r2, r3
 8005a84:	897b      	ldrh	r3, [r7, #10]
 8005a86:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a8a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a96:	b29b      	uxth	r3, r3
 8005a98:	8013      	strh	r3, [r2, #0]
 8005a9a:	e262      	b.n	8005f62 <USB_ActivateEndpoint+0x6ca>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005aa6:	b29b      	uxth	r3, r3
 8005aa8:	461a      	mov	r2, r3
 8005aaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005aac:	4413      	add	r3, r2
 8005aae:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	781b      	ldrb	r3, [r3, #0]
 8005ab4:	00da      	lsls	r2, r3, #3
 8005ab6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ab8:	4413      	add	r3, r2
 8005aba:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005abe:	62bb      	str	r3, [r7, #40]	; 0x28
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	88db      	ldrh	r3, [r3, #6]
 8005ac4:	085b      	lsrs	r3, r3, #1
 8005ac6:	b29b      	uxth	r3, r3
 8005ac8:	005b      	lsls	r3, r3, #1
 8005aca:	b29a      	uxth	r2, r3
 8005acc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ace:	801a      	strh	r2, [r3, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	627b      	str	r3, [r7, #36]	; 0x24
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ada:	b29b      	uxth	r3, r3
 8005adc:	461a      	mov	r2, r3
 8005ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ae0:	4413      	add	r3, r2
 8005ae2:	627b      	str	r3, [r7, #36]	; 0x24
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	781b      	ldrb	r3, [r3, #0]
 8005ae8:	00da      	lsls	r2, r3, #3
 8005aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aec:	4413      	add	r3, r2
 8005aee:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005af2:	623b      	str	r3, [r7, #32]
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	691b      	ldr	r3, [r3, #16]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d112      	bne.n	8005b22 <USB_ActivateEndpoint+0x28a>
 8005afc:	6a3b      	ldr	r3, [r7, #32]
 8005afe:	881b      	ldrh	r3, [r3, #0]
 8005b00:	b29b      	uxth	r3, r3
 8005b02:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005b06:	b29a      	uxth	r2, r3
 8005b08:	6a3b      	ldr	r3, [r7, #32]
 8005b0a:	801a      	strh	r2, [r3, #0]
 8005b0c:	6a3b      	ldr	r3, [r7, #32]
 8005b0e:	881b      	ldrh	r3, [r3, #0]
 8005b10:	b29b      	uxth	r3, r3
 8005b12:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b16:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b1a:	b29a      	uxth	r2, r3
 8005b1c:	6a3b      	ldr	r3, [r7, #32]
 8005b1e:	801a      	strh	r2, [r3, #0]
 8005b20:	e02f      	b.n	8005b82 <USB_ActivateEndpoint+0x2ea>
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	691b      	ldr	r3, [r3, #16]
 8005b26:	2b3e      	cmp	r3, #62	; 0x3e
 8005b28:	d813      	bhi.n	8005b52 <USB_ActivateEndpoint+0x2ba>
 8005b2a:	683b      	ldr	r3, [r7, #0]
 8005b2c:	691b      	ldr	r3, [r3, #16]
 8005b2e:	085b      	lsrs	r3, r3, #1
 8005b30:	663b      	str	r3, [r7, #96]	; 0x60
 8005b32:	683b      	ldr	r3, [r7, #0]
 8005b34:	691b      	ldr	r3, [r3, #16]
 8005b36:	f003 0301 	and.w	r3, r3, #1
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d002      	beq.n	8005b44 <USB_ActivateEndpoint+0x2ac>
 8005b3e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005b40:	3301      	adds	r3, #1
 8005b42:	663b      	str	r3, [r7, #96]	; 0x60
 8005b44:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005b46:	b29b      	uxth	r3, r3
 8005b48:	029b      	lsls	r3, r3, #10
 8005b4a:	b29a      	uxth	r2, r3
 8005b4c:	6a3b      	ldr	r3, [r7, #32]
 8005b4e:	801a      	strh	r2, [r3, #0]
 8005b50:	e017      	b.n	8005b82 <USB_ActivateEndpoint+0x2ea>
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	691b      	ldr	r3, [r3, #16]
 8005b56:	095b      	lsrs	r3, r3, #5
 8005b58:	663b      	str	r3, [r7, #96]	; 0x60
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	691b      	ldr	r3, [r3, #16]
 8005b5e:	f003 031f 	and.w	r3, r3, #31
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d102      	bne.n	8005b6c <USB_ActivateEndpoint+0x2d4>
 8005b66:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005b68:	3b01      	subs	r3, #1
 8005b6a:	663b      	str	r3, [r7, #96]	; 0x60
 8005b6c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005b6e:	b29b      	uxth	r3, r3
 8005b70:	029b      	lsls	r3, r3, #10
 8005b72:	b29b      	uxth	r3, r3
 8005b74:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b78:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b7c:	b29a      	uxth	r2, r3
 8005b7e:	6a3b      	ldr	r3, [r7, #32]
 8005b80:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005b82:	687a      	ldr	r2, [r7, #4]
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	781b      	ldrb	r3, [r3, #0]
 8005b88:	009b      	lsls	r3, r3, #2
 8005b8a:	4413      	add	r3, r2
 8005b8c:	881b      	ldrh	r3, [r3, #0]
 8005b8e:	83fb      	strh	r3, [r7, #30]
 8005b90:	8bfb      	ldrh	r3, [r7, #30]
 8005b92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d01b      	beq.n	8005bd2 <USB_ActivateEndpoint+0x33a>
 8005b9a:	687a      	ldr	r2, [r7, #4]
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	781b      	ldrb	r3, [r3, #0]
 8005ba0:	009b      	lsls	r3, r3, #2
 8005ba2:	4413      	add	r3, r2
 8005ba4:	881b      	ldrh	r3, [r3, #0]
 8005ba6:	b29b      	uxth	r3, r3
 8005ba8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005bac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bb0:	83bb      	strh	r3, [r7, #28]
 8005bb2:	687a      	ldr	r2, [r7, #4]
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	781b      	ldrb	r3, [r3, #0]
 8005bb8:	009b      	lsls	r3, r3, #2
 8005bba:	441a      	add	r2, r3
 8005bbc:	8bbb      	ldrh	r3, [r7, #28]
 8005bbe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005bc2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005bc6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005bca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005bce:	b29b      	uxth	r3, r3
 8005bd0:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005bd2:	687a      	ldr	r2, [r7, #4]
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	781b      	ldrb	r3, [r3, #0]
 8005bd8:	009b      	lsls	r3, r3, #2
 8005bda:	4413      	add	r3, r2
 8005bdc:	881b      	ldrh	r3, [r3, #0]
 8005bde:	b29b      	uxth	r3, r3
 8005be0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005be4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005be8:	837b      	strh	r3, [r7, #26]
 8005bea:	8b7b      	ldrh	r3, [r7, #26]
 8005bec:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005bf0:	837b      	strh	r3, [r7, #26]
 8005bf2:	8b7b      	ldrh	r3, [r7, #26]
 8005bf4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005bf8:	837b      	strh	r3, [r7, #26]
 8005bfa:	687a      	ldr	r2, [r7, #4]
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	781b      	ldrb	r3, [r3, #0]
 8005c00:	009b      	lsls	r3, r3, #2
 8005c02:	441a      	add	r2, r3
 8005c04:	8b7b      	ldrh	r3, [r7, #26]
 8005c06:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c0a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c16:	b29b      	uxth	r3, r3
 8005c18:	8013      	strh	r3, [r2, #0]
 8005c1a:	e1a2      	b.n	8005f62 <USB_ActivateEndpoint+0x6ca>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8005c1c:	687a      	ldr	r2, [r7, #4]
 8005c1e:	683b      	ldr	r3, [r7, #0]
 8005c20:	781b      	ldrb	r3, [r3, #0]
 8005c22:	009b      	lsls	r3, r3, #2
 8005c24:	4413      	add	r3, r2
 8005c26:	881b      	ldrh	r3, [r3, #0]
 8005c28:	b29b      	uxth	r3, r3
 8005c2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c32:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8005c36:	687a      	ldr	r2, [r7, #4]
 8005c38:	683b      	ldr	r3, [r7, #0]
 8005c3a:	781b      	ldrb	r3, [r3, #0]
 8005c3c:	009b      	lsls	r3, r3, #2
 8005c3e:	441a      	add	r2, r3
 8005c40:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8005c44:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c48:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c4c:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005c50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c54:	b29b      	uxth	r3, r3
 8005c56:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	65bb      	str	r3, [r7, #88]	; 0x58
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c62:	b29b      	uxth	r3, r3
 8005c64:	461a      	mov	r2, r3
 8005c66:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005c68:	4413      	add	r3, r2
 8005c6a:	65bb      	str	r3, [r7, #88]	; 0x58
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	781b      	ldrb	r3, [r3, #0]
 8005c70:	00da      	lsls	r2, r3, #3
 8005c72:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005c74:	4413      	add	r3, r2
 8005c76:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005c7a:	657b      	str	r3, [r7, #84]	; 0x54
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	891b      	ldrh	r3, [r3, #8]
 8005c80:	085b      	lsrs	r3, r3, #1
 8005c82:	b29b      	uxth	r3, r3
 8005c84:	005b      	lsls	r3, r3, #1
 8005c86:	b29a      	uxth	r2, r3
 8005c88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c8a:	801a      	strh	r2, [r3, #0]
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	653b      	str	r3, [r7, #80]	; 0x50
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c96:	b29b      	uxth	r3, r3
 8005c98:	461a      	mov	r2, r3
 8005c9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c9c:	4413      	add	r3, r2
 8005c9e:	653b      	str	r3, [r7, #80]	; 0x50
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	781b      	ldrb	r3, [r3, #0]
 8005ca4:	00da      	lsls	r2, r3, #3
 8005ca6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ca8:	4413      	add	r3, r2
 8005caa:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005cae:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	895b      	ldrh	r3, [r3, #10]
 8005cb4:	085b      	lsrs	r3, r3, #1
 8005cb6:	b29b      	uxth	r3, r3
 8005cb8:	005b      	lsls	r3, r3, #1
 8005cba:	b29a      	uxth	r2, r3
 8005cbc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005cbe:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	785b      	ldrb	r3, [r3, #1]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	f040 8091 	bne.w	8005dec <USB_ActivateEndpoint+0x554>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005cca:	687a      	ldr	r2, [r7, #4]
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	781b      	ldrb	r3, [r3, #0]
 8005cd0:	009b      	lsls	r3, r3, #2
 8005cd2:	4413      	add	r3, r2
 8005cd4:	881b      	ldrh	r3, [r3, #0]
 8005cd6:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8005cd8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005cda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d01b      	beq.n	8005d1a <USB_ActivateEndpoint+0x482>
 8005ce2:	687a      	ldr	r2, [r7, #4]
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	781b      	ldrb	r3, [r3, #0]
 8005ce8:	009b      	lsls	r3, r3, #2
 8005cea:	4413      	add	r3, r2
 8005cec:	881b      	ldrh	r3, [r3, #0]
 8005cee:	b29b      	uxth	r3, r3
 8005cf0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005cf4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cf8:	877b      	strh	r3, [r7, #58]	; 0x3a
 8005cfa:	687a      	ldr	r2, [r7, #4]
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	781b      	ldrb	r3, [r3, #0]
 8005d00:	009b      	lsls	r3, r3, #2
 8005d02:	441a      	add	r2, r3
 8005d04:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8005d06:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d0a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d0e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005d12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d16:	b29b      	uxth	r3, r3
 8005d18:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005d1a:	687a      	ldr	r2, [r7, #4]
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	781b      	ldrb	r3, [r3, #0]
 8005d20:	009b      	lsls	r3, r3, #2
 8005d22:	4413      	add	r3, r2
 8005d24:	881b      	ldrh	r3, [r3, #0]
 8005d26:	873b      	strh	r3, [r7, #56]	; 0x38
 8005d28:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005d2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d01b      	beq.n	8005d6a <USB_ActivateEndpoint+0x4d2>
 8005d32:	687a      	ldr	r2, [r7, #4]
 8005d34:	683b      	ldr	r3, [r7, #0]
 8005d36:	781b      	ldrb	r3, [r3, #0]
 8005d38:	009b      	lsls	r3, r3, #2
 8005d3a:	4413      	add	r3, r2
 8005d3c:	881b      	ldrh	r3, [r3, #0]
 8005d3e:	b29b      	uxth	r3, r3
 8005d40:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d48:	86fb      	strh	r3, [r7, #54]	; 0x36
 8005d4a:	687a      	ldr	r2, [r7, #4]
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	781b      	ldrb	r3, [r3, #0]
 8005d50:	009b      	lsls	r3, r3, #2
 8005d52:	441a      	add	r2, r3
 8005d54:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005d56:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d5a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d62:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005d66:	b29b      	uxth	r3, r3
 8005d68:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005d6a:	687a      	ldr	r2, [r7, #4]
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	781b      	ldrb	r3, [r3, #0]
 8005d70:	009b      	lsls	r3, r3, #2
 8005d72:	4413      	add	r3, r2
 8005d74:	881b      	ldrh	r3, [r3, #0]
 8005d76:	b29b      	uxth	r3, r3
 8005d78:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005d7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d80:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005d82:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005d84:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005d88:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005d8a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005d8c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005d90:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005d92:	687a      	ldr	r2, [r7, #4]
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	781b      	ldrb	r3, [r3, #0]
 8005d98:	009b      	lsls	r3, r3, #2
 8005d9a:	441a      	add	r2, r3
 8005d9c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005d9e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005da2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005da6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005daa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005dae:	b29b      	uxth	r3, r3
 8005db0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005db2:	687a      	ldr	r2, [r7, #4]
 8005db4:	683b      	ldr	r3, [r7, #0]
 8005db6:	781b      	ldrb	r3, [r3, #0]
 8005db8:	009b      	lsls	r3, r3, #2
 8005dba:	4413      	add	r3, r2
 8005dbc:	881b      	ldrh	r3, [r3, #0]
 8005dbe:	b29b      	uxth	r3, r3
 8005dc0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005dc4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005dc8:	867b      	strh	r3, [r7, #50]	; 0x32
 8005dca:	687a      	ldr	r2, [r7, #4]
 8005dcc:	683b      	ldr	r3, [r7, #0]
 8005dce:	781b      	ldrb	r3, [r3, #0]
 8005dd0:	009b      	lsls	r3, r3, #2
 8005dd2:	441a      	add	r2, r3
 8005dd4:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8005dd6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005dda:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005dde:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005de2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005de6:	b29b      	uxth	r3, r3
 8005de8:	8013      	strh	r3, [r2, #0]
 8005dea:	e0ba      	b.n	8005f62 <USB_ActivateEndpoint+0x6ca>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005dec:	687a      	ldr	r2, [r7, #4]
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	781b      	ldrb	r3, [r3, #0]
 8005df2:	009b      	lsls	r3, r3, #2
 8005df4:	4413      	add	r3, r2
 8005df6:	881b      	ldrh	r3, [r3, #0]
 8005df8:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8005dfc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005e00:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d01d      	beq.n	8005e44 <USB_ActivateEndpoint+0x5ac>
 8005e08:	687a      	ldr	r2, [r7, #4]
 8005e0a:	683b      	ldr	r3, [r7, #0]
 8005e0c:	781b      	ldrb	r3, [r3, #0]
 8005e0e:	009b      	lsls	r3, r3, #2
 8005e10:	4413      	add	r3, r2
 8005e12:	881b      	ldrh	r3, [r3, #0]
 8005e14:	b29b      	uxth	r3, r3
 8005e16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e1e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8005e22:	687a      	ldr	r2, [r7, #4]
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	781b      	ldrb	r3, [r3, #0]
 8005e28:	009b      	lsls	r3, r3, #2
 8005e2a:	441a      	add	r2, r3
 8005e2c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005e30:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e34:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e38:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005e3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e40:	b29b      	uxth	r3, r3
 8005e42:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005e44:	687a      	ldr	r2, [r7, #4]
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	781b      	ldrb	r3, [r3, #0]
 8005e4a:	009b      	lsls	r3, r3, #2
 8005e4c:	4413      	add	r3, r2
 8005e4e:	881b      	ldrh	r3, [r3, #0]
 8005e50:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8005e54:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8005e58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d01d      	beq.n	8005e9c <USB_ActivateEndpoint+0x604>
 8005e60:	687a      	ldr	r2, [r7, #4]
 8005e62:	683b      	ldr	r3, [r7, #0]
 8005e64:	781b      	ldrb	r3, [r3, #0]
 8005e66:	009b      	lsls	r3, r3, #2
 8005e68:	4413      	add	r3, r2
 8005e6a:	881b      	ldrh	r3, [r3, #0]
 8005e6c:	b29b      	uxth	r3, r3
 8005e6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e76:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005e7a:	687a      	ldr	r2, [r7, #4]
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	781b      	ldrb	r3, [r3, #0]
 8005e80:	009b      	lsls	r3, r3, #2
 8005e82:	441a      	add	r2, r3
 8005e84:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005e88:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e8c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e90:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e94:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005e98:	b29b      	uxth	r3, r3
 8005e9a:	8013      	strh	r3, [r2, #0]


      if (ep->type != EP_TYPE_ISOC)
 8005e9c:	683b      	ldr	r3, [r7, #0]
 8005e9e:	78db      	ldrb	r3, [r3, #3]
 8005ea0:	2b01      	cmp	r3, #1
 8005ea2:	d024      	beq.n	8005eee <USB_ActivateEndpoint+0x656>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005ea4:	687a      	ldr	r2, [r7, #4]
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	781b      	ldrb	r3, [r3, #0]
 8005eaa:	009b      	lsls	r3, r3, #2
 8005eac:	4413      	add	r3, r2
 8005eae:	881b      	ldrh	r3, [r3, #0]
 8005eb0:	b29b      	uxth	r3, r3
 8005eb2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005eb6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005eba:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8005ebe:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005ec2:	f083 0320 	eor.w	r3, r3, #32
 8005ec6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8005eca:	687a      	ldr	r2, [r7, #4]
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	781b      	ldrb	r3, [r3, #0]
 8005ed0:	009b      	lsls	r3, r3, #2
 8005ed2:	441a      	add	r2, r3
 8005ed4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005ed8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005edc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ee0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ee4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ee8:	b29b      	uxth	r3, r3
 8005eea:	8013      	strh	r3, [r2, #0]
 8005eec:	e01d      	b.n	8005f2a <USB_ActivateEndpoint+0x692>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005eee:	687a      	ldr	r2, [r7, #4]
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	781b      	ldrb	r3, [r3, #0]
 8005ef4:	009b      	lsls	r3, r3, #2
 8005ef6:	4413      	add	r3, r2
 8005ef8:	881b      	ldrh	r3, [r3, #0]
 8005efa:	b29b      	uxth	r3, r3
 8005efc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f00:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f04:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8005f08:	687a      	ldr	r2, [r7, #4]
 8005f0a:	683b      	ldr	r3, [r7, #0]
 8005f0c:	781b      	ldrb	r3, [r3, #0]
 8005f0e:	009b      	lsls	r3, r3, #2
 8005f10:	441a      	add	r2, r3
 8005f12:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8005f16:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f1a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f26:	b29b      	uxth	r3, r3
 8005f28:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005f2a:	687a      	ldr	r2, [r7, #4]
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	781b      	ldrb	r3, [r3, #0]
 8005f30:	009b      	lsls	r3, r3, #2
 8005f32:	4413      	add	r3, r2
 8005f34:	881b      	ldrh	r3, [r3, #0]
 8005f36:	b29b      	uxth	r3, r3
 8005f38:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005f3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f40:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8005f42:	687a      	ldr	r2, [r7, #4]
 8005f44:	683b      	ldr	r3, [r7, #0]
 8005f46:	781b      	ldrb	r3, [r3, #0]
 8005f48:	009b      	lsls	r3, r3, #2
 8005f4a:	441a      	add	r2, r3
 8005f4c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005f4e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f52:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f5e:	b29b      	uxth	r3, r3
 8005f60:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8005f62:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8005f66:	4618      	mov	r0, r3
 8005f68:	376c      	adds	r7, #108	; 0x6c
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f70:	4770      	bx	lr
 8005f72:	bf00      	nop

08005f74 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005f74:	b480      	push	{r7}
 8005f76:	b08d      	sub	sp, #52	; 0x34
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
 8005f7c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005f7e:	683b      	ldr	r3, [r7, #0]
 8005f80:	7b1b      	ldrb	r3, [r3, #12]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	f040 808e 	bne.w	80060a4 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	785b      	ldrb	r3, [r3, #1]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d044      	beq.n	800601a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005f90:	687a      	ldr	r2, [r7, #4]
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	781b      	ldrb	r3, [r3, #0]
 8005f96:	009b      	lsls	r3, r3, #2
 8005f98:	4413      	add	r3, r2
 8005f9a:	881b      	ldrh	r3, [r3, #0]
 8005f9c:	81bb      	strh	r3, [r7, #12]
 8005f9e:	89bb      	ldrh	r3, [r7, #12]
 8005fa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d01b      	beq.n	8005fe0 <USB_DeactivateEndpoint+0x6c>
 8005fa8:	687a      	ldr	r2, [r7, #4]
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	781b      	ldrb	r3, [r3, #0]
 8005fae:	009b      	lsls	r3, r3, #2
 8005fb0:	4413      	add	r3, r2
 8005fb2:	881b      	ldrh	r3, [r3, #0]
 8005fb4:	b29b      	uxth	r3, r3
 8005fb6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005fba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fbe:	817b      	strh	r3, [r7, #10]
 8005fc0:	687a      	ldr	r2, [r7, #4]
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	781b      	ldrb	r3, [r3, #0]
 8005fc6:	009b      	lsls	r3, r3, #2
 8005fc8:	441a      	add	r2, r3
 8005fca:	897b      	ldrh	r3, [r7, #10]
 8005fcc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005fd0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005fd4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005fd8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005fdc:	b29b      	uxth	r3, r3
 8005fde:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005fe0:	687a      	ldr	r2, [r7, #4]
 8005fe2:	683b      	ldr	r3, [r7, #0]
 8005fe4:	781b      	ldrb	r3, [r3, #0]
 8005fe6:	009b      	lsls	r3, r3, #2
 8005fe8:	4413      	add	r3, r2
 8005fea:	881b      	ldrh	r3, [r3, #0]
 8005fec:	b29b      	uxth	r3, r3
 8005fee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ff2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ff6:	813b      	strh	r3, [r7, #8]
 8005ff8:	687a      	ldr	r2, [r7, #4]
 8005ffa:	683b      	ldr	r3, [r7, #0]
 8005ffc:	781b      	ldrb	r3, [r3, #0]
 8005ffe:	009b      	lsls	r3, r3, #2
 8006000:	441a      	add	r2, r3
 8006002:	893b      	ldrh	r3, [r7, #8]
 8006004:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006008:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800600c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006010:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006014:	b29b      	uxth	r3, r3
 8006016:	8013      	strh	r3, [r2, #0]
 8006018:	e192      	b.n	8006340 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800601a:	687a      	ldr	r2, [r7, #4]
 800601c:	683b      	ldr	r3, [r7, #0]
 800601e:	781b      	ldrb	r3, [r3, #0]
 8006020:	009b      	lsls	r3, r3, #2
 8006022:	4413      	add	r3, r2
 8006024:	881b      	ldrh	r3, [r3, #0]
 8006026:	827b      	strh	r3, [r7, #18]
 8006028:	8a7b      	ldrh	r3, [r7, #18]
 800602a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800602e:	2b00      	cmp	r3, #0
 8006030:	d01b      	beq.n	800606a <USB_DeactivateEndpoint+0xf6>
 8006032:	687a      	ldr	r2, [r7, #4]
 8006034:	683b      	ldr	r3, [r7, #0]
 8006036:	781b      	ldrb	r3, [r3, #0]
 8006038:	009b      	lsls	r3, r3, #2
 800603a:	4413      	add	r3, r2
 800603c:	881b      	ldrh	r3, [r3, #0]
 800603e:	b29b      	uxth	r3, r3
 8006040:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006044:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006048:	823b      	strh	r3, [r7, #16]
 800604a:	687a      	ldr	r2, [r7, #4]
 800604c:	683b      	ldr	r3, [r7, #0]
 800604e:	781b      	ldrb	r3, [r3, #0]
 8006050:	009b      	lsls	r3, r3, #2
 8006052:	441a      	add	r2, r3
 8006054:	8a3b      	ldrh	r3, [r7, #16]
 8006056:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800605a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800605e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006062:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006066:	b29b      	uxth	r3, r3
 8006068:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800606a:	687a      	ldr	r2, [r7, #4]
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	781b      	ldrb	r3, [r3, #0]
 8006070:	009b      	lsls	r3, r3, #2
 8006072:	4413      	add	r3, r2
 8006074:	881b      	ldrh	r3, [r3, #0]
 8006076:	b29b      	uxth	r3, r3
 8006078:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800607c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006080:	81fb      	strh	r3, [r7, #14]
 8006082:	687a      	ldr	r2, [r7, #4]
 8006084:	683b      	ldr	r3, [r7, #0]
 8006086:	781b      	ldrb	r3, [r3, #0]
 8006088:	009b      	lsls	r3, r3, #2
 800608a:	441a      	add	r2, r3
 800608c:	89fb      	ldrh	r3, [r7, #14]
 800608e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006092:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006096:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800609a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800609e:	b29b      	uxth	r3, r3
 80060a0:	8013      	strh	r3, [r2, #0]
 80060a2:	e14d      	b.n	8006340 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	785b      	ldrb	r3, [r3, #1]
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	f040 80a5 	bne.w	80061f8 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80060ae:	687a      	ldr	r2, [r7, #4]
 80060b0:	683b      	ldr	r3, [r7, #0]
 80060b2:	781b      	ldrb	r3, [r3, #0]
 80060b4:	009b      	lsls	r3, r3, #2
 80060b6:	4413      	add	r3, r2
 80060b8:	881b      	ldrh	r3, [r3, #0]
 80060ba:	843b      	strh	r3, [r7, #32]
 80060bc:	8c3b      	ldrh	r3, [r7, #32]
 80060be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d01b      	beq.n	80060fe <USB_DeactivateEndpoint+0x18a>
 80060c6:	687a      	ldr	r2, [r7, #4]
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	781b      	ldrb	r3, [r3, #0]
 80060cc:	009b      	lsls	r3, r3, #2
 80060ce:	4413      	add	r3, r2
 80060d0:	881b      	ldrh	r3, [r3, #0]
 80060d2:	b29b      	uxth	r3, r3
 80060d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060dc:	83fb      	strh	r3, [r7, #30]
 80060de:	687a      	ldr	r2, [r7, #4]
 80060e0:	683b      	ldr	r3, [r7, #0]
 80060e2:	781b      	ldrb	r3, [r3, #0]
 80060e4:	009b      	lsls	r3, r3, #2
 80060e6:	441a      	add	r2, r3
 80060e8:	8bfb      	ldrh	r3, [r7, #30]
 80060ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060f2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80060f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060fa:	b29b      	uxth	r3, r3
 80060fc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80060fe:	687a      	ldr	r2, [r7, #4]
 8006100:	683b      	ldr	r3, [r7, #0]
 8006102:	781b      	ldrb	r3, [r3, #0]
 8006104:	009b      	lsls	r3, r3, #2
 8006106:	4413      	add	r3, r2
 8006108:	881b      	ldrh	r3, [r3, #0]
 800610a:	83bb      	strh	r3, [r7, #28]
 800610c:	8bbb      	ldrh	r3, [r7, #28]
 800610e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006112:	2b00      	cmp	r3, #0
 8006114:	d01b      	beq.n	800614e <USB_DeactivateEndpoint+0x1da>
 8006116:	687a      	ldr	r2, [r7, #4]
 8006118:	683b      	ldr	r3, [r7, #0]
 800611a:	781b      	ldrb	r3, [r3, #0]
 800611c:	009b      	lsls	r3, r3, #2
 800611e:	4413      	add	r3, r2
 8006120:	881b      	ldrh	r3, [r3, #0]
 8006122:	b29b      	uxth	r3, r3
 8006124:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006128:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800612c:	837b      	strh	r3, [r7, #26]
 800612e:	687a      	ldr	r2, [r7, #4]
 8006130:	683b      	ldr	r3, [r7, #0]
 8006132:	781b      	ldrb	r3, [r3, #0]
 8006134:	009b      	lsls	r3, r3, #2
 8006136:	441a      	add	r2, r3
 8006138:	8b7b      	ldrh	r3, [r7, #26]
 800613a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800613e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006142:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006146:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800614a:	b29b      	uxth	r3, r3
 800614c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800614e:	687a      	ldr	r2, [r7, #4]
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	781b      	ldrb	r3, [r3, #0]
 8006154:	009b      	lsls	r3, r3, #2
 8006156:	4413      	add	r3, r2
 8006158:	881b      	ldrh	r3, [r3, #0]
 800615a:	b29b      	uxth	r3, r3
 800615c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006160:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006164:	833b      	strh	r3, [r7, #24]
 8006166:	687a      	ldr	r2, [r7, #4]
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	781b      	ldrb	r3, [r3, #0]
 800616c:	009b      	lsls	r3, r3, #2
 800616e:	441a      	add	r2, r3
 8006170:	8b3b      	ldrh	r3, [r7, #24]
 8006172:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006176:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800617a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800617e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006182:	b29b      	uxth	r3, r3
 8006184:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006186:	687a      	ldr	r2, [r7, #4]
 8006188:	683b      	ldr	r3, [r7, #0]
 800618a:	781b      	ldrb	r3, [r3, #0]
 800618c:	009b      	lsls	r3, r3, #2
 800618e:	4413      	add	r3, r2
 8006190:	881b      	ldrh	r3, [r3, #0]
 8006192:	b29b      	uxth	r3, r3
 8006194:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006198:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800619c:	82fb      	strh	r3, [r7, #22]
 800619e:	687a      	ldr	r2, [r7, #4]
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	781b      	ldrb	r3, [r3, #0]
 80061a4:	009b      	lsls	r3, r3, #2
 80061a6:	441a      	add	r2, r3
 80061a8:	8afb      	ldrh	r3, [r7, #22]
 80061aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80061ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80061b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80061b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061ba:	b29b      	uxth	r3, r3
 80061bc:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80061be:	687a      	ldr	r2, [r7, #4]
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	781b      	ldrb	r3, [r3, #0]
 80061c4:	009b      	lsls	r3, r3, #2
 80061c6:	4413      	add	r3, r2
 80061c8:	881b      	ldrh	r3, [r3, #0]
 80061ca:	b29b      	uxth	r3, r3
 80061cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80061d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80061d4:	82bb      	strh	r3, [r7, #20]
 80061d6:	687a      	ldr	r2, [r7, #4]
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	781b      	ldrb	r3, [r3, #0]
 80061dc:	009b      	lsls	r3, r3, #2
 80061de:	441a      	add	r2, r3
 80061e0:	8abb      	ldrh	r3, [r7, #20]
 80061e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80061e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80061ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80061ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061f2:	b29b      	uxth	r3, r3
 80061f4:	8013      	strh	r3, [r2, #0]
 80061f6:	e0a3      	b.n	8006340 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80061f8:	687a      	ldr	r2, [r7, #4]
 80061fa:	683b      	ldr	r3, [r7, #0]
 80061fc:	781b      	ldrb	r3, [r3, #0]
 80061fe:	009b      	lsls	r3, r3, #2
 8006200:	4413      	add	r3, r2
 8006202:	881b      	ldrh	r3, [r3, #0]
 8006204:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8006206:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006208:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800620c:	2b00      	cmp	r3, #0
 800620e:	d01b      	beq.n	8006248 <USB_DeactivateEndpoint+0x2d4>
 8006210:	687a      	ldr	r2, [r7, #4]
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	781b      	ldrb	r3, [r3, #0]
 8006216:	009b      	lsls	r3, r3, #2
 8006218:	4413      	add	r3, r2
 800621a:	881b      	ldrh	r3, [r3, #0]
 800621c:	b29b      	uxth	r3, r3
 800621e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006222:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006226:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8006228:	687a      	ldr	r2, [r7, #4]
 800622a:	683b      	ldr	r3, [r7, #0]
 800622c:	781b      	ldrb	r3, [r3, #0]
 800622e:	009b      	lsls	r3, r3, #2
 8006230:	441a      	add	r2, r3
 8006232:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006234:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006238:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800623c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006240:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006244:	b29b      	uxth	r3, r3
 8006246:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006248:	687a      	ldr	r2, [r7, #4]
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	781b      	ldrb	r3, [r3, #0]
 800624e:	009b      	lsls	r3, r3, #2
 8006250:	4413      	add	r3, r2
 8006252:	881b      	ldrh	r3, [r3, #0]
 8006254:	857b      	strh	r3, [r7, #42]	; 0x2a
 8006256:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006258:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800625c:	2b00      	cmp	r3, #0
 800625e:	d01b      	beq.n	8006298 <USB_DeactivateEndpoint+0x324>
 8006260:	687a      	ldr	r2, [r7, #4]
 8006262:	683b      	ldr	r3, [r7, #0]
 8006264:	781b      	ldrb	r3, [r3, #0]
 8006266:	009b      	lsls	r3, r3, #2
 8006268:	4413      	add	r3, r2
 800626a:	881b      	ldrh	r3, [r3, #0]
 800626c:	b29b      	uxth	r3, r3
 800626e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006272:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006276:	853b      	strh	r3, [r7, #40]	; 0x28
 8006278:	687a      	ldr	r2, [r7, #4]
 800627a:	683b      	ldr	r3, [r7, #0]
 800627c:	781b      	ldrb	r3, [r3, #0]
 800627e:	009b      	lsls	r3, r3, #2
 8006280:	441a      	add	r2, r3
 8006282:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006284:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006288:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800628c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006290:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006294:	b29b      	uxth	r3, r3
 8006296:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8006298:	687a      	ldr	r2, [r7, #4]
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	781b      	ldrb	r3, [r3, #0]
 800629e:	009b      	lsls	r3, r3, #2
 80062a0:	4413      	add	r3, r2
 80062a2:	881b      	ldrh	r3, [r3, #0]
 80062a4:	b29b      	uxth	r3, r3
 80062a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062ae:	84fb      	strh	r3, [r7, #38]	; 0x26
 80062b0:	687a      	ldr	r2, [r7, #4]
 80062b2:	683b      	ldr	r3, [r7, #0]
 80062b4:	781b      	ldrb	r3, [r3, #0]
 80062b6:	009b      	lsls	r3, r3, #2
 80062b8:	441a      	add	r2, r3
 80062ba:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80062bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80062c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80062c4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80062c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062cc:	b29b      	uxth	r3, r3
 80062ce:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80062d0:	687a      	ldr	r2, [r7, #4]
 80062d2:	683b      	ldr	r3, [r7, #0]
 80062d4:	781b      	ldrb	r3, [r3, #0]
 80062d6:	009b      	lsls	r3, r3, #2
 80062d8:	4413      	add	r3, r2
 80062da:	881b      	ldrh	r3, [r3, #0]
 80062dc:	b29b      	uxth	r3, r3
 80062de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80062e6:	84bb      	strh	r3, [r7, #36]	; 0x24
 80062e8:	687a      	ldr	r2, [r7, #4]
 80062ea:	683b      	ldr	r3, [r7, #0]
 80062ec:	781b      	ldrb	r3, [r3, #0]
 80062ee:	009b      	lsls	r3, r3, #2
 80062f0:	441a      	add	r2, r3
 80062f2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80062f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80062f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80062fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006300:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006304:	b29b      	uxth	r3, r3
 8006306:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006308:	687a      	ldr	r2, [r7, #4]
 800630a:	683b      	ldr	r3, [r7, #0]
 800630c:	781b      	ldrb	r3, [r3, #0]
 800630e:	009b      	lsls	r3, r3, #2
 8006310:	4413      	add	r3, r2
 8006312:	881b      	ldrh	r3, [r3, #0]
 8006314:	b29b      	uxth	r3, r3
 8006316:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800631a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800631e:	847b      	strh	r3, [r7, #34]	; 0x22
 8006320:	687a      	ldr	r2, [r7, #4]
 8006322:	683b      	ldr	r3, [r7, #0]
 8006324:	781b      	ldrb	r3, [r3, #0]
 8006326:	009b      	lsls	r3, r3, #2
 8006328:	441a      	add	r2, r3
 800632a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800632c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006330:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006334:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006338:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800633c:	b29b      	uxth	r3, r3
 800633e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006340:	2300      	movs	r3, #0
}
 8006342:	4618      	mov	r0, r3
 8006344:	3734      	adds	r7, #52	; 0x34
 8006346:	46bd      	mov	sp, r7
 8006348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634c:	4770      	bx	lr

0800634e <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800634e:	b580      	push	{r7, lr}
 8006350:	b0c4      	sub	sp, #272	; 0x110
 8006352:	af00      	add	r7, sp, #0
 8006354:	1d3b      	adds	r3, r7, #4
 8006356:	6018      	str	r0, [r3, #0]
 8006358:	463b      	mov	r3, r7
 800635a:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint32_t len;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800635c:	463b      	mov	r3, r7
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	785b      	ldrb	r3, [r3, #1]
 8006362:	2b01      	cmp	r3, #1
 8006364:	f040 8566 	bne.w	8006e34 <USB_EPStartXfer+0xae6>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8006368:	463b      	mov	r3, r7
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	699a      	ldr	r2, [r3, #24]
 800636e:	463b      	mov	r3, r7
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	691b      	ldr	r3, [r3, #16]
 8006374:	429a      	cmp	r2, r3
 8006376:	d905      	bls.n	8006384 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8006378:	463b      	mov	r3, r7
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	691b      	ldr	r3, [r3, #16]
 800637e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006382:	e004      	b.n	800638e <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8006384:	463b      	mov	r3, r7
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	699b      	ldr	r3, [r3, #24]
 800638a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800638e:	463b      	mov	r3, r7
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	7b1b      	ldrb	r3, [r3, #12]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d12c      	bne.n	80063f2 <USB_EPStartXfer+0xa4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8006398:	463b      	mov	r3, r7
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	6959      	ldr	r1, [r3, #20]
 800639e:	463b      	mov	r3, r7
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	88da      	ldrh	r2, [r3, #6]
 80063a4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80063a8:	b29b      	uxth	r3, r3
 80063aa:	1d38      	adds	r0, r7, #4
 80063ac:	6800      	ldr	r0, [r0, #0]
 80063ae:	f001 fa43 	bl	8007838 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80063b2:	1d3b      	adds	r3, r7, #4
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	617b      	str	r3, [r7, #20]
 80063b8:	1d3b      	adds	r3, r7, #4
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80063c0:	b29b      	uxth	r3, r3
 80063c2:	461a      	mov	r2, r3
 80063c4:	697b      	ldr	r3, [r7, #20]
 80063c6:	4413      	add	r3, r2
 80063c8:	617b      	str	r3, [r7, #20]
 80063ca:	463b      	mov	r3, r7
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	781b      	ldrb	r3, [r3, #0]
 80063d0:	00da      	lsls	r2, r3, #3
 80063d2:	697b      	ldr	r3, [r7, #20]
 80063d4:	4413      	add	r3, r2
 80063d6:	f203 4202 	addw	r2, r3, #1026	; 0x402
 80063da:	f107 0310 	add.w	r3, r7, #16
 80063de:	601a      	str	r2, [r3, #0]
 80063e0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80063e4:	b29a      	uxth	r2, r3
 80063e6:	f107 0310 	add.w	r3, r7, #16
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	801a      	strh	r2, [r3, #0]
 80063ee:	f000 bcec 	b.w	8006dca <USB_EPStartXfer+0xa7c>
    }
    else
    {
      /*double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80063f2:	463b      	mov	r3, r7
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	78db      	ldrb	r3, [r3, #3]
 80063f8:	2b02      	cmp	r3, #2
 80063fa:	f040 8356 	bne.w	8006aaa <USB_EPStartXfer+0x75c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80063fe:	463b      	mov	r3, r7
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	6a1a      	ldr	r2, [r3, #32]
 8006404:	463b      	mov	r3, r7
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	691b      	ldr	r3, [r3, #16]
 800640a:	429a      	cmp	r2, r3
 800640c:	f240 82fa 	bls.w	8006a04 <USB_EPStartXfer+0x6b6>
        {
          /*enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8006410:	1d3b      	adds	r3, r7, #4
 8006412:	681a      	ldr	r2, [r3, #0]
 8006414:	463b      	mov	r3, r7
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	781b      	ldrb	r3, [r3, #0]
 800641a:	009b      	lsls	r3, r3, #2
 800641c:	4413      	add	r3, r2
 800641e:	881b      	ldrh	r3, [r3, #0]
 8006420:	b29b      	uxth	r3, r3
 8006422:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006426:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800642a:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 800642e:	1d3b      	adds	r3, r7, #4
 8006430:	681a      	ldr	r2, [r3, #0]
 8006432:	463b      	mov	r3, r7
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	781b      	ldrb	r3, [r3, #0]
 8006438:	009b      	lsls	r3, r3, #2
 800643a:	441a      	add	r2, r3
 800643c:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8006440:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006444:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006448:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800644c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006450:	b29b      	uxth	r3, r3
 8006452:	8013      	strh	r3, [r2, #0]
          len = ep->maxpacket;
 8006454:	463b      	mov	r3, r7
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	691b      	ldr	r3, [r3, #16]
 800645a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          /*each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800645e:	463b      	mov	r3, r7
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	6a1a      	ldr	r2, [r3, #32]
 8006464:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006468:	1ad2      	subs	r2, r2, r3
 800646a:	463b      	mov	r3, r7
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1*/
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006470:	1d3b      	adds	r3, r7, #4
 8006472:	681a      	ldr	r2, [r3, #0]
 8006474:	463b      	mov	r3, r7
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	781b      	ldrb	r3, [r3, #0]
 800647a:	009b      	lsls	r3, r3, #2
 800647c:	4413      	add	r3, r2
 800647e:	881b      	ldrh	r3, [r3, #0]
 8006480:	b29b      	uxth	r3, r3
 8006482:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006486:	2b00      	cmp	r3, #0
 8006488:	f000 815e 	beq.w	8006748 <USB_EPStartXfer+0x3fa>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800648c:	1d3b      	adds	r3, r7, #4
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	637b      	str	r3, [r7, #52]	; 0x34
 8006492:	463b      	mov	r3, r7
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	785b      	ldrb	r3, [r3, #1]
 8006498:	2b00      	cmp	r3, #0
 800649a:	d164      	bne.n	8006566 <USB_EPStartXfer+0x218>
 800649c:	1d3b      	adds	r3, r7, #4
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80064a2:	1d3b      	adds	r3, r7, #4
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80064aa:	b29b      	uxth	r3, r3
 80064ac:	461a      	mov	r2, r3
 80064ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064b0:	4413      	add	r3, r2
 80064b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80064b4:	463b      	mov	r3, r7
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	781b      	ldrb	r3, [r3, #0]
 80064ba:	00da      	lsls	r2, r3, #3
 80064bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064be:	4413      	add	r3, r2
 80064c0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80064c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80064c6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d112      	bne.n	80064f4 <USB_EPStartXfer+0x1a6>
 80064ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064d0:	881b      	ldrh	r3, [r3, #0]
 80064d2:	b29b      	uxth	r3, r3
 80064d4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80064d8:	b29a      	uxth	r2, r3
 80064da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064dc:	801a      	strh	r2, [r3, #0]
 80064de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064e0:	881b      	ldrh	r3, [r3, #0]
 80064e2:	b29b      	uxth	r3, r3
 80064e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80064e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80064ec:	b29a      	uxth	r2, r3
 80064ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064f0:	801a      	strh	r2, [r3, #0]
 80064f2:	e054      	b.n	800659e <USB_EPStartXfer+0x250>
 80064f4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80064f8:	2b3e      	cmp	r3, #62	; 0x3e
 80064fa:	d817      	bhi.n	800652c <USB_EPStartXfer+0x1de>
 80064fc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006500:	085b      	lsrs	r3, r3, #1
 8006502:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006506:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800650a:	f003 0301 	and.w	r3, r3, #1
 800650e:	2b00      	cmp	r3, #0
 8006510:	d004      	beq.n	800651c <USB_EPStartXfer+0x1ce>
 8006512:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006516:	3301      	adds	r3, #1
 8006518:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800651c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006520:	b29b      	uxth	r3, r3
 8006522:	029b      	lsls	r3, r3, #10
 8006524:	b29a      	uxth	r2, r3
 8006526:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006528:	801a      	strh	r2, [r3, #0]
 800652a:	e038      	b.n	800659e <USB_EPStartXfer+0x250>
 800652c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006530:	095b      	lsrs	r3, r3, #5
 8006532:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006536:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800653a:	f003 031f 	and.w	r3, r3, #31
 800653e:	2b00      	cmp	r3, #0
 8006540:	d104      	bne.n	800654c <USB_EPStartXfer+0x1fe>
 8006542:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006546:	3b01      	subs	r3, #1
 8006548:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800654c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006550:	b29b      	uxth	r3, r3
 8006552:	029b      	lsls	r3, r3, #10
 8006554:	b29b      	uxth	r3, r3
 8006556:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800655a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800655e:	b29a      	uxth	r2, r3
 8006560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006562:	801a      	strh	r2, [r3, #0]
 8006564:	e01b      	b.n	800659e <USB_EPStartXfer+0x250>
 8006566:	463b      	mov	r3, r7
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	785b      	ldrb	r3, [r3, #1]
 800656c:	2b01      	cmp	r3, #1
 800656e:	d116      	bne.n	800659e <USB_EPStartXfer+0x250>
 8006570:	1d3b      	adds	r3, r7, #4
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006578:	b29b      	uxth	r3, r3
 800657a:	461a      	mov	r2, r3
 800657c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800657e:	4413      	add	r3, r2
 8006580:	637b      	str	r3, [r7, #52]	; 0x34
 8006582:	463b      	mov	r3, r7
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	781b      	ldrb	r3, [r3, #0]
 8006588:	00da      	lsls	r2, r3, #3
 800658a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800658c:	4413      	add	r3, r2
 800658e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006592:	633b      	str	r3, [r7, #48]	; 0x30
 8006594:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006598:	b29a      	uxth	r2, r3
 800659a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800659c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800659e:	463b      	mov	r3, r7
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	895b      	ldrh	r3, [r3, #10]
 80065a4:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80065a8:	463b      	mov	r3, r7
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	6959      	ldr	r1, [r3, #20]
 80065ae:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80065b2:	b29b      	uxth	r3, r3
 80065b4:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 80065b8:	1d38      	adds	r0, r7, #4
 80065ba:	6800      	ldr	r0, [r0, #0]
 80065bc:	f001 f93c 	bl	8007838 <USB_WritePMA>
            ep->xfer_buff += len;
 80065c0:	463b      	mov	r3, r7
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	695a      	ldr	r2, [r3, #20]
 80065c6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80065ca:	441a      	add	r2, r3
 80065cc:	463b      	mov	r3, r7
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80065d2:	463b      	mov	r3, r7
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	6a1a      	ldr	r2, [r3, #32]
 80065d8:	463b      	mov	r3, r7
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	691b      	ldr	r3, [r3, #16]
 80065de:	429a      	cmp	r2, r3
 80065e0:	d90e      	bls.n	8006600 <USB_EPStartXfer+0x2b2>
            {
              len = ep->maxpacket;
 80065e2:	463b      	mov	r3, r7
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	691b      	ldr	r3, [r3, #16]
 80065e8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db -= len;
 80065ec:	463b      	mov	r3, r7
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	6a1a      	ldr	r2, [r3, #32]
 80065f2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80065f6:	1ad2      	subs	r2, r2, r3
 80065f8:	463b      	mov	r3, r7
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	621a      	str	r2, [r3, #32]
 80065fe:	e008      	b.n	8006612 <USB_EPStartXfer+0x2c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8006600:	463b      	mov	r3, r7
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	6a1b      	ldr	r3, [r3, #32]
 8006606:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db = 0;
 800660a:	463b      	mov	r3, r7
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	2200      	movs	r2, #0
 8006610:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006612:	463b      	mov	r3, r7
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	785b      	ldrb	r3, [r3, #1]
 8006618:	2b00      	cmp	r3, #0
 800661a:	d164      	bne.n	80066e6 <USB_EPStartXfer+0x398>
 800661c:	1d3b      	adds	r3, r7, #4
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	61fb      	str	r3, [r7, #28]
 8006622:	1d3b      	adds	r3, r7, #4
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800662a:	b29b      	uxth	r3, r3
 800662c:	461a      	mov	r2, r3
 800662e:	69fb      	ldr	r3, [r7, #28]
 8006630:	4413      	add	r3, r2
 8006632:	61fb      	str	r3, [r7, #28]
 8006634:	463b      	mov	r3, r7
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	781b      	ldrb	r3, [r3, #0]
 800663a:	00da      	lsls	r2, r3, #3
 800663c:	69fb      	ldr	r3, [r7, #28]
 800663e:	4413      	add	r3, r2
 8006640:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006644:	61bb      	str	r3, [r7, #24]
 8006646:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800664a:	2b00      	cmp	r3, #0
 800664c:	d112      	bne.n	8006674 <USB_EPStartXfer+0x326>
 800664e:	69bb      	ldr	r3, [r7, #24]
 8006650:	881b      	ldrh	r3, [r3, #0]
 8006652:	b29b      	uxth	r3, r3
 8006654:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006658:	b29a      	uxth	r2, r3
 800665a:	69bb      	ldr	r3, [r7, #24]
 800665c:	801a      	strh	r2, [r3, #0]
 800665e:	69bb      	ldr	r3, [r7, #24]
 8006660:	881b      	ldrh	r3, [r3, #0]
 8006662:	b29b      	uxth	r3, r3
 8006664:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006668:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800666c:	b29a      	uxth	r2, r3
 800666e:	69bb      	ldr	r3, [r7, #24]
 8006670:	801a      	strh	r2, [r3, #0]
 8006672:	e057      	b.n	8006724 <USB_EPStartXfer+0x3d6>
 8006674:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006678:	2b3e      	cmp	r3, #62	; 0x3e
 800667a:	d817      	bhi.n	80066ac <USB_EPStartXfer+0x35e>
 800667c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006680:	085b      	lsrs	r3, r3, #1
 8006682:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006686:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800668a:	f003 0301 	and.w	r3, r3, #1
 800668e:	2b00      	cmp	r3, #0
 8006690:	d004      	beq.n	800669c <USB_EPStartXfer+0x34e>
 8006692:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006696:	3301      	adds	r3, #1
 8006698:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800669c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80066a0:	b29b      	uxth	r3, r3
 80066a2:	029b      	lsls	r3, r3, #10
 80066a4:	b29a      	uxth	r2, r3
 80066a6:	69bb      	ldr	r3, [r7, #24]
 80066a8:	801a      	strh	r2, [r3, #0]
 80066aa:	e03b      	b.n	8006724 <USB_EPStartXfer+0x3d6>
 80066ac:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80066b0:	095b      	lsrs	r3, r3, #5
 80066b2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80066b6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80066ba:	f003 031f 	and.w	r3, r3, #31
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d104      	bne.n	80066cc <USB_EPStartXfer+0x37e>
 80066c2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80066c6:	3b01      	subs	r3, #1
 80066c8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80066cc:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80066d0:	b29b      	uxth	r3, r3
 80066d2:	029b      	lsls	r3, r3, #10
 80066d4:	b29b      	uxth	r3, r3
 80066d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80066da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80066de:	b29a      	uxth	r2, r3
 80066e0:	69bb      	ldr	r3, [r7, #24]
 80066e2:	801a      	strh	r2, [r3, #0]
 80066e4:	e01e      	b.n	8006724 <USB_EPStartXfer+0x3d6>
 80066e6:	463b      	mov	r3, r7
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	785b      	ldrb	r3, [r3, #1]
 80066ec:	2b01      	cmp	r3, #1
 80066ee:	d119      	bne.n	8006724 <USB_EPStartXfer+0x3d6>
 80066f0:	1d3b      	adds	r3, r7, #4
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	627b      	str	r3, [r7, #36]	; 0x24
 80066f6:	1d3b      	adds	r3, r7, #4
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80066fe:	b29b      	uxth	r3, r3
 8006700:	461a      	mov	r2, r3
 8006702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006704:	4413      	add	r3, r2
 8006706:	627b      	str	r3, [r7, #36]	; 0x24
 8006708:	463b      	mov	r3, r7
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	781b      	ldrb	r3, [r3, #0]
 800670e:	00da      	lsls	r2, r3, #3
 8006710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006712:	4413      	add	r3, r2
 8006714:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006718:	623b      	str	r3, [r7, #32]
 800671a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800671e:	b29a      	uxth	r2, r3
 8006720:	6a3b      	ldr	r3, [r7, #32]
 8006722:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006724:	463b      	mov	r3, r7
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	891b      	ldrh	r3, [r3, #8]
 800672a:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800672e:	463b      	mov	r3, r7
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	6959      	ldr	r1, [r3, #20]
 8006734:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006738:	b29b      	uxth	r3, r3
 800673a:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 800673e:	1d38      	adds	r0, r7, #4
 8006740:	6800      	ldr	r0, [r0, #0]
 8006742:	f001 f879 	bl	8007838 <USB_WritePMA>
 8006746:	e340      	b.n	8006dca <USB_EPStartXfer+0xa7c>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006748:	463b      	mov	r3, r7
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	785b      	ldrb	r3, [r3, #1]
 800674e:	2b00      	cmp	r3, #0
 8006750:	d164      	bne.n	800681c <USB_EPStartXfer+0x4ce>
 8006752:	1d3b      	adds	r3, r7, #4
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006758:	1d3b      	adds	r3, r7, #4
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006760:	b29b      	uxth	r3, r3
 8006762:	461a      	mov	r2, r3
 8006764:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006766:	4413      	add	r3, r2
 8006768:	64fb      	str	r3, [r7, #76]	; 0x4c
 800676a:	463b      	mov	r3, r7
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	781b      	ldrb	r3, [r3, #0]
 8006770:	00da      	lsls	r2, r3, #3
 8006772:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006774:	4413      	add	r3, r2
 8006776:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800677a:	64bb      	str	r3, [r7, #72]	; 0x48
 800677c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006780:	2b00      	cmp	r3, #0
 8006782:	d112      	bne.n	80067aa <USB_EPStartXfer+0x45c>
 8006784:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006786:	881b      	ldrh	r3, [r3, #0]
 8006788:	b29b      	uxth	r3, r3
 800678a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800678e:	b29a      	uxth	r2, r3
 8006790:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006792:	801a      	strh	r2, [r3, #0]
 8006794:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006796:	881b      	ldrh	r3, [r3, #0]
 8006798:	b29b      	uxth	r3, r3
 800679a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800679e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067a2:	b29a      	uxth	r2, r3
 80067a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80067a6:	801a      	strh	r2, [r3, #0]
 80067a8:	e057      	b.n	800685a <USB_EPStartXfer+0x50c>
 80067aa:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80067ae:	2b3e      	cmp	r3, #62	; 0x3e
 80067b0:	d817      	bhi.n	80067e2 <USB_EPStartXfer+0x494>
 80067b2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80067b6:	085b      	lsrs	r3, r3, #1
 80067b8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80067bc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80067c0:	f003 0301 	and.w	r3, r3, #1
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d004      	beq.n	80067d2 <USB_EPStartXfer+0x484>
 80067c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80067cc:	3301      	adds	r3, #1
 80067ce:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80067d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80067d6:	b29b      	uxth	r3, r3
 80067d8:	029b      	lsls	r3, r3, #10
 80067da:	b29a      	uxth	r2, r3
 80067dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80067de:	801a      	strh	r2, [r3, #0]
 80067e0:	e03b      	b.n	800685a <USB_EPStartXfer+0x50c>
 80067e2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80067e6:	095b      	lsrs	r3, r3, #5
 80067e8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80067ec:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80067f0:	f003 031f 	and.w	r3, r3, #31
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d104      	bne.n	8006802 <USB_EPStartXfer+0x4b4>
 80067f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80067fc:	3b01      	subs	r3, #1
 80067fe:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006802:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006806:	b29b      	uxth	r3, r3
 8006808:	029b      	lsls	r3, r3, #10
 800680a:	b29b      	uxth	r3, r3
 800680c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006810:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006814:	b29a      	uxth	r2, r3
 8006816:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006818:	801a      	strh	r2, [r3, #0]
 800681a:	e01e      	b.n	800685a <USB_EPStartXfer+0x50c>
 800681c:	463b      	mov	r3, r7
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	785b      	ldrb	r3, [r3, #1]
 8006822:	2b01      	cmp	r3, #1
 8006824:	d119      	bne.n	800685a <USB_EPStartXfer+0x50c>
 8006826:	1d3b      	adds	r3, r7, #4
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	657b      	str	r3, [r7, #84]	; 0x54
 800682c:	1d3b      	adds	r3, r7, #4
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006834:	b29b      	uxth	r3, r3
 8006836:	461a      	mov	r2, r3
 8006838:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800683a:	4413      	add	r3, r2
 800683c:	657b      	str	r3, [r7, #84]	; 0x54
 800683e:	463b      	mov	r3, r7
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	781b      	ldrb	r3, [r3, #0]
 8006844:	00da      	lsls	r2, r3, #3
 8006846:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006848:	4413      	add	r3, r2
 800684a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800684e:	653b      	str	r3, [r7, #80]	; 0x50
 8006850:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006854:	b29a      	uxth	r2, r3
 8006856:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006858:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800685a:	463b      	mov	r3, r7
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	891b      	ldrh	r3, [r3, #8]
 8006860:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006864:	463b      	mov	r3, r7
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	6959      	ldr	r1, [r3, #20]
 800686a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800686e:	b29b      	uxth	r3, r3
 8006870:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8006874:	1d38      	adds	r0, r7, #4
 8006876:	6800      	ldr	r0, [r0, #0]
 8006878:	f000 ffde 	bl	8007838 <USB_WritePMA>
            ep->xfer_buff += len;
 800687c:	463b      	mov	r3, r7
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	695a      	ldr	r2, [r3, #20]
 8006882:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006886:	441a      	add	r2, r3
 8006888:	463b      	mov	r3, r7
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800688e:	463b      	mov	r3, r7
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	6a1a      	ldr	r2, [r3, #32]
 8006894:	463b      	mov	r3, r7
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	691b      	ldr	r3, [r3, #16]
 800689a:	429a      	cmp	r2, r3
 800689c:	d90e      	bls.n	80068bc <USB_EPStartXfer+0x56e>
            {
              len = ep->maxpacket;
 800689e:	463b      	mov	r3, r7
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	691b      	ldr	r3, [r3, #16]
 80068a4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db -= len;
 80068a8:	463b      	mov	r3, r7
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	6a1a      	ldr	r2, [r3, #32]
 80068ae:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80068b2:	1ad2      	subs	r2, r2, r3
 80068b4:	463b      	mov	r3, r7
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	621a      	str	r2, [r3, #32]
 80068ba:	e008      	b.n	80068ce <USB_EPStartXfer+0x580>
            }
            else
            {
              len = ep->xfer_len_db;
 80068bc:	463b      	mov	r3, r7
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	6a1b      	ldr	r3, [r3, #32]
 80068c2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db = 0;
 80068c6:	463b      	mov	r3, r7
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	2200      	movs	r2, #0
 80068cc:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80068ce:	1d3b      	adds	r3, r7, #4
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	647b      	str	r3, [r7, #68]	; 0x44
 80068d4:	463b      	mov	r3, r7
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	785b      	ldrb	r3, [r3, #1]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d164      	bne.n	80069a8 <USB_EPStartXfer+0x65a>
 80068de:	1d3b      	adds	r3, r7, #4
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80068e4:	1d3b      	adds	r3, r7, #4
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80068ec:	b29b      	uxth	r3, r3
 80068ee:	461a      	mov	r2, r3
 80068f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068f2:	4413      	add	r3, r2
 80068f4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80068f6:	463b      	mov	r3, r7
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	781b      	ldrb	r3, [r3, #0]
 80068fc:	00da      	lsls	r2, r3, #3
 80068fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006900:	4413      	add	r3, r2
 8006902:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006906:	63bb      	str	r3, [r7, #56]	; 0x38
 8006908:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800690c:	2b00      	cmp	r3, #0
 800690e:	d112      	bne.n	8006936 <USB_EPStartXfer+0x5e8>
 8006910:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006912:	881b      	ldrh	r3, [r3, #0]
 8006914:	b29b      	uxth	r3, r3
 8006916:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800691a:	b29a      	uxth	r2, r3
 800691c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800691e:	801a      	strh	r2, [r3, #0]
 8006920:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006922:	881b      	ldrh	r3, [r3, #0]
 8006924:	b29b      	uxth	r3, r3
 8006926:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800692a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800692e:	b29a      	uxth	r2, r3
 8006930:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006932:	801a      	strh	r2, [r3, #0]
 8006934:	e054      	b.n	80069e0 <USB_EPStartXfer+0x692>
 8006936:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800693a:	2b3e      	cmp	r3, #62	; 0x3e
 800693c:	d817      	bhi.n	800696e <USB_EPStartXfer+0x620>
 800693e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006942:	085b      	lsrs	r3, r3, #1
 8006944:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006948:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800694c:	f003 0301 	and.w	r3, r3, #1
 8006950:	2b00      	cmp	r3, #0
 8006952:	d004      	beq.n	800695e <USB_EPStartXfer+0x610>
 8006954:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006958:	3301      	adds	r3, #1
 800695a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800695e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006962:	b29b      	uxth	r3, r3
 8006964:	029b      	lsls	r3, r3, #10
 8006966:	b29a      	uxth	r2, r3
 8006968:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800696a:	801a      	strh	r2, [r3, #0]
 800696c:	e038      	b.n	80069e0 <USB_EPStartXfer+0x692>
 800696e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006972:	095b      	lsrs	r3, r3, #5
 8006974:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006978:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800697c:	f003 031f 	and.w	r3, r3, #31
 8006980:	2b00      	cmp	r3, #0
 8006982:	d104      	bne.n	800698e <USB_EPStartXfer+0x640>
 8006984:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006988:	3b01      	subs	r3, #1
 800698a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800698e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006992:	b29b      	uxth	r3, r3
 8006994:	029b      	lsls	r3, r3, #10
 8006996:	b29b      	uxth	r3, r3
 8006998:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800699c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80069a0:	b29a      	uxth	r2, r3
 80069a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069a4:	801a      	strh	r2, [r3, #0]
 80069a6:	e01b      	b.n	80069e0 <USB_EPStartXfer+0x692>
 80069a8:	463b      	mov	r3, r7
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	785b      	ldrb	r3, [r3, #1]
 80069ae:	2b01      	cmp	r3, #1
 80069b0:	d116      	bne.n	80069e0 <USB_EPStartXfer+0x692>
 80069b2:	1d3b      	adds	r3, r7, #4
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80069ba:	b29b      	uxth	r3, r3
 80069bc:	461a      	mov	r2, r3
 80069be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80069c0:	4413      	add	r3, r2
 80069c2:	647b      	str	r3, [r7, #68]	; 0x44
 80069c4:	463b      	mov	r3, r7
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	781b      	ldrb	r3, [r3, #0]
 80069ca:	00da      	lsls	r2, r3, #3
 80069cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80069ce:	4413      	add	r3, r2
 80069d0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80069d4:	643b      	str	r3, [r7, #64]	; 0x40
 80069d6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80069da:	b29a      	uxth	r2, r3
 80069dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80069de:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80069e0:	463b      	mov	r3, r7
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	895b      	ldrh	r3, [r3, #10]
 80069e6:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80069ea:	463b      	mov	r3, r7
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	6959      	ldr	r1, [r3, #20]
 80069f0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80069f4:	b29b      	uxth	r3, r3
 80069f6:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 80069fa:	1d38      	adds	r0, r7, #4
 80069fc:	6800      	ldr	r0, [r0, #0]
 80069fe:	f000 ff1b 	bl	8007838 <USB_WritePMA>
 8006a02:	e1e2      	b.n	8006dca <USB_EPStartXfer+0xa7c>
          }
        }
        /*auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer*/
        else
        {
          len = ep->xfer_len_db;
 8006a04:	463b      	mov	r3, r7
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	6a1b      	ldr	r3, [r3, #32]
 8006a0a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          /*disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8006a0e:	1d3b      	adds	r3, r7, #4
 8006a10:	681a      	ldr	r2, [r3, #0]
 8006a12:	463b      	mov	r3, r7
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	781b      	ldrb	r3, [r3, #0]
 8006a18:	009b      	lsls	r3, r3, #2
 8006a1a:	4413      	add	r3, r2
 8006a1c:	881b      	ldrh	r3, [r3, #0]
 8006a1e:	b29b      	uxth	r3, r3
 8006a20:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8006a24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a28:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8006a2c:	1d3b      	adds	r3, r7, #4
 8006a2e:	681a      	ldr	r2, [r3, #0]
 8006a30:	463b      	mov	r3, r7
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	781b      	ldrb	r3, [r3, #0]
 8006a36:	009b      	lsls	r3, r3, #2
 8006a38:	441a      	add	r2, r3
 8006a3a:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8006a3e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a42:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a4e:	b29b      	uxth	r3, r3
 8006a50:	8013      	strh	r3, [r2, #0]
          /*Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006a52:	1d3b      	adds	r3, r7, #4
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	663b      	str	r3, [r7, #96]	; 0x60
 8006a58:	1d3b      	adds	r3, r7, #4
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a60:	b29b      	uxth	r3, r3
 8006a62:	461a      	mov	r2, r3
 8006a64:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006a66:	4413      	add	r3, r2
 8006a68:	663b      	str	r3, [r7, #96]	; 0x60
 8006a6a:	463b      	mov	r3, r7
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	781b      	ldrb	r3, [r3, #0]
 8006a70:	00da      	lsls	r2, r3, #3
 8006a72:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006a74:	4413      	add	r3, r2
 8006a76:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006a7a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006a7c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006a80:	b29a      	uxth	r2, r3
 8006a82:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006a84:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006a86:	463b      	mov	r3, r7
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	891b      	ldrh	r3, [r3, #8]
 8006a8c:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
          /*Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006a90:	463b      	mov	r3, r7
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	6959      	ldr	r1, [r3, #20]
 8006a96:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006a9a:	b29b      	uxth	r3, r3
 8006a9c:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8006aa0:	1d38      	adds	r0, r7, #4
 8006aa2:	6800      	ldr	r0, [r0, #0]
 8006aa4:	f000 fec8 	bl	8007838 <USB_WritePMA>
 8006aa8:	e18f      	b.n	8006dca <USB_EPStartXfer+0xa7c>

      /*mange isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006aaa:	1d3b      	adds	r3, r7, #4
 8006aac:	681a      	ldr	r2, [r3, #0]
 8006aae:	463b      	mov	r3, r7
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	781b      	ldrb	r3, [r3, #0]
 8006ab4:	009b      	lsls	r3, r3, #2
 8006ab6:	4413      	add	r3, r2
 8006ab8:	881b      	ldrh	r3, [r3, #0]
 8006aba:	b29b      	uxth	r3, r3
 8006abc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	f000 808f 	beq.w	8006be4 <USB_EPStartXfer+0x896>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006ac6:	1d3b      	adds	r3, r7, #4
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	67bb      	str	r3, [r7, #120]	; 0x78
 8006acc:	463b      	mov	r3, r7
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	785b      	ldrb	r3, [r3, #1]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d164      	bne.n	8006ba0 <USB_EPStartXfer+0x852>
 8006ad6:	1d3b      	adds	r3, r7, #4
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	673b      	str	r3, [r7, #112]	; 0x70
 8006adc:	1d3b      	adds	r3, r7, #4
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ae4:	b29b      	uxth	r3, r3
 8006ae6:	461a      	mov	r2, r3
 8006ae8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006aea:	4413      	add	r3, r2
 8006aec:	673b      	str	r3, [r7, #112]	; 0x70
 8006aee:	463b      	mov	r3, r7
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	781b      	ldrb	r3, [r3, #0]
 8006af4:	00da      	lsls	r2, r3, #3
 8006af6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006af8:	4413      	add	r3, r2
 8006afa:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006afe:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006b00:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d112      	bne.n	8006b2e <USB_EPStartXfer+0x7e0>
 8006b08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b0a:	881b      	ldrh	r3, [r3, #0]
 8006b0c:	b29b      	uxth	r3, r3
 8006b0e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006b12:	b29a      	uxth	r2, r3
 8006b14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b16:	801a      	strh	r2, [r3, #0]
 8006b18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b1a:	881b      	ldrh	r3, [r3, #0]
 8006b1c:	b29b      	uxth	r3, r3
 8006b1e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b22:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b26:	b29a      	uxth	r2, r3
 8006b28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b2a:	801a      	strh	r2, [r3, #0]
 8006b2c:	e054      	b.n	8006bd8 <USB_EPStartXfer+0x88a>
 8006b2e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006b32:	2b3e      	cmp	r3, #62	; 0x3e
 8006b34:	d817      	bhi.n	8006b66 <USB_EPStartXfer+0x818>
 8006b36:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006b3a:	085b      	lsrs	r3, r3, #1
 8006b3c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006b40:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006b44:	f003 0301 	and.w	r3, r3, #1
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d004      	beq.n	8006b56 <USB_EPStartXfer+0x808>
 8006b4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b50:	3301      	adds	r3, #1
 8006b52:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006b56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b5a:	b29b      	uxth	r3, r3
 8006b5c:	029b      	lsls	r3, r3, #10
 8006b5e:	b29a      	uxth	r2, r3
 8006b60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b62:	801a      	strh	r2, [r3, #0]
 8006b64:	e038      	b.n	8006bd8 <USB_EPStartXfer+0x88a>
 8006b66:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006b6a:	095b      	lsrs	r3, r3, #5
 8006b6c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006b70:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006b74:	f003 031f 	and.w	r3, r3, #31
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d104      	bne.n	8006b86 <USB_EPStartXfer+0x838>
 8006b7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b80:	3b01      	subs	r3, #1
 8006b82:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006b86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b8a:	b29b      	uxth	r3, r3
 8006b8c:	029b      	lsls	r3, r3, #10
 8006b8e:	b29b      	uxth	r3, r3
 8006b90:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b94:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b98:	b29a      	uxth	r2, r3
 8006b9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b9c:	801a      	strh	r2, [r3, #0]
 8006b9e:	e01b      	b.n	8006bd8 <USB_EPStartXfer+0x88a>
 8006ba0:	463b      	mov	r3, r7
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	785b      	ldrb	r3, [r3, #1]
 8006ba6:	2b01      	cmp	r3, #1
 8006ba8:	d116      	bne.n	8006bd8 <USB_EPStartXfer+0x88a>
 8006baa:	1d3b      	adds	r3, r7, #4
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006bb2:	b29b      	uxth	r3, r3
 8006bb4:	461a      	mov	r2, r3
 8006bb6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006bb8:	4413      	add	r3, r2
 8006bba:	67bb      	str	r3, [r7, #120]	; 0x78
 8006bbc:	463b      	mov	r3, r7
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	781b      	ldrb	r3, [r3, #0]
 8006bc2:	00da      	lsls	r2, r3, #3
 8006bc4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006bc6:	4413      	add	r3, r2
 8006bc8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006bcc:	677b      	str	r3, [r7, #116]	; 0x74
 8006bce:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006bd2:	b29a      	uxth	r2, r3
 8006bd4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006bd6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8006bd8:	463b      	mov	r3, r7
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	895b      	ldrh	r3, [r3, #10]
 8006bde:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
 8006be2:	e097      	b.n	8006d14 <USB_EPStartXfer+0x9c6>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006be4:	463b      	mov	r3, r7
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	785b      	ldrb	r3, [r3, #1]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d168      	bne.n	8006cc0 <USB_EPStartXfer+0x972>
 8006bee:	1d3b      	adds	r3, r7, #4
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006bf6:	1d3b      	adds	r3, r7, #4
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006bfe:	b29b      	uxth	r3, r3
 8006c00:	461a      	mov	r2, r3
 8006c02:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006c06:	4413      	add	r3, r2
 8006c08:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006c0c:	463b      	mov	r3, r7
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	781b      	ldrb	r3, [r3, #0]
 8006c12:	00da      	lsls	r2, r3, #3
 8006c14:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006c18:	4413      	add	r3, r2
 8006c1a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006c1e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006c20:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d112      	bne.n	8006c4e <USB_EPStartXfer+0x900>
 8006c28:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006c2a:	881b      	ldrh	r3, [r3, #0]
 8006c2c:	b29b      	uxth	r3, r3
 8006c2e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006c32:	b29a      	uxth	r2, r3
 8006c34:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006c36:	801a      	strh	r2, [r3, #0]
 8006c38:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006c3a:	881b      	ldrh	r3, [r3, #0]
 8006c3c:	b29b      	uxth	r3, r3
 8006c3e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c42:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c46:	b29a      	uxth	r2, r3
 8006c48:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006c4a:	801a      	strh	r2, [r3, #0]
 8006c4c:	e05d      	b.n	8006d0a <USB_EPStartXfer+0x9bc>
 8006c4e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006c52:	2b3e      	cmp	r3, #62	; 0x3e
 8006c54:	d817      	bhi.n	8006c86 <USB_EPStartXfer+0x938>
 8006c56:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006c5a:	085b      	lsrs	r3, r3, #1
 8006c5c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006c60:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006c64:	f003 0301 	and.w	r3, r3, #1
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d004      	beq.n	8006c76 <USB_EPStartXfer+0x928>
 8006c6c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006c70:	3301      	adds	r3, #1
 8006c72:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006c76:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006c7a:	b29b      	uxth	r3, r3
 8006c7c:	029b      	lsls	r3, r3, #10
 8006c7e:	b29a      	uxth	r2, r3
 8006c80:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006c82:	801a      	strh	r2, [r3, #0]
 8006c84:	e041      	b.n	8006d0a <USB_EPStartXfer+0x9bc>
 8006c86:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006c8a:	095b      	lsrs	r3, r3, #5
 8006c8c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006c90:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006c94:	f003 031f 	and.w	r3, r3, #31
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d104      	bne.n	8006ca6 <USB_EPStartXfer+0x958>
 8006c9c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006ca0:	3b01      	subs	r3, #1
 8006ca2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006ca6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006caa:	b29b      	uxth	r3, r3
 8006cac:	029b      	lsls	r3, r3, #10
 8006cae:	b29b      	uxth	r3, r3
 8006cb0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006cb4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006cb8:	b29a      	uxth	r2, r3
 8006cba:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006cbc:	801a      	strh	r2, [r3, #0]
 8006cbe:	e024      	b.n	8006d0a <USB_EPStartXfer+0x9bc>
 8006cc0:	463b      	mov	r3, r7
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	785b      	ldrb	r3, [r3, #1]
 8006cc6:	2b01      	cmp	r3, #1
 8006cc8:	d11f      	bne.n	8006d0a <USB_EPStartXfer+0x9bc>
 8006cca:	1d3b      	adds	r3, r7, #4
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006cd2:	1d3b      	adds	r3, r7, #4
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006cda:	b29b      	uxth	r3, r3
 8006cdc:	461a      	mov	r2, r3
 8006cde:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006ce2:	4413      	add	r3, r2
 8006ce4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006ce8:	463b      	mov	r3, r7
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	781b      	ldrb	r3, [r3, #0]
 8006cee:	00da      	lsls	r2, r3, #3
 8006cf0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006cf4:	4413      	add	r3, r2
 8006cf6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006cfa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006cfe:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006d02:	b29a      	uxth	r2, r3
 8006d04:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006d08:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006d0a:	463b      	mov	r3, r7
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	891b      	ldrh	r3, [r3, #8]
 8006d10:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
        }
        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006d14:	463b      	mov	r3, r7
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	6959      	ldr	r1, [r3, #20]
 8006d1a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006d1e:	b29b      	uxth	r3, r3
 8006d20:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8006d24:	1d38      	adds	r0, r7, #4
 8006d26:	6800      	ldr	r0, [r0, #0]
 8006d28:	f000 fd86 	bl	8007838 <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8006d2c:	463b      	mov	r3, r7
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	785b      	ldrb	r3, [r3, #1]
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d122      	bne.n	8006d7c <USB_EPStartXfer+0xa2e>
 8006d36:	1d3b      	adds	r3, r7, #4
 8006d38:	681a      	ldr	r2, [r3, #0]
 8006d3a:	463b      	mov	r3, r7
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	781b      	ldrb	r3, [r3, #0]
 8006d40:	009b      	lsls	r3, r3, #2
 8006d42:	4413      	add	r3, r2
 8006d44:	881b      	ldrh	r3, [r3, #0]
 8006d46:	b29b      	uxth	r3, r3
 8006d48:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d50:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8006d54:	1d3b      	adds	r3, r7, #4
 8006d56:	681a      	ldr	r2, [r3, #0]
 8006d58:	463b      	mov	r3, r7
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	781b      	ldrb	r3, [r3, #0]
 8006d5e:	009b      	lsls	r3, r3, #2
 8006d60:	441a      	add	r2, r3
 8006d62:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8006d66:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d6a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d72:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006d76:	b29b      	uxth	r3, r3
 8006d78:	8013      	strh	r3, [r2, #0]
 8006d7a:	e026      	b.n	8006dca <USB_EPStartXfer+0xa7c>
 8006d7c:	463b      	mov	r3, r7
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	785b      	ldrb	r3, [r3, #1]
 8006d82:	2b01      	cmp	r3, #1
 8006d84:	d121      	bne.n	8006dca <USB_EPStartXfer+0xa7c>
 8006d86:	1d3b      	adds	r3, r7, #4
 8006d88:	681a      	ldr	r2, [r3, #0]
 8006d8a:	463b      	mov	r3, r7
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	781b      	ldrb	r3, [r3, #0]
 8006d90:	009b      	lsls	r3, r3, #2
 8006d92:	4413      	add	r3, r2
 8006d94:	881b      	ldrh	r3, [r3, #0]
 8006d96:	b29b      	uxth	r3, r3
 8006d98:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006da0:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 8006da4:	1d3b      	adds	r3, r7, #4
 8006da6:	681a      	ldr	r2, [r3, #0]
 8006da8:	463b      	mov	r3, r7
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	781b      	ldrb	r3, [r3, #0]
 8006dae:	009b      	lsls	r3, r3, #2
 8006db0:	441a      	add	r2, r3
 8006db2:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8006db6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006dba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006dbe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006dc2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006dc6:	b29b      	uxth	r3, r3
 8006dc8:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8006dca:	1d3b      	adds	r3, r7, #4
 8006dcc:	681a      	ldr	r2, [r3, #0]
 8006dce:	463b      	mov	r3, r7
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	781b      	ldrb	r3, [r3, #0]
 8006dd4:	009b      	lsls	r3, r3, #2
 8006dd6:	4413      	add	r3, r2
 8006dd8:	881b      	ldrh	r3, [r3, #0]
 8006dda:	b29b      	uxth	r3, r3
 8006ddc:	f107 020e 	add.w	r2, r7, #14
 8006de0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006de4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006de8:	8013      	strh	r3, [r2, #0]
 8006dea:	f107 030e 	add.w	r3, r7, #14
 8006dee:	f107 020e 	add.w	r2, r7, #14
 8006df2:	8812      	ldrh	r2, [r2, #0]
 8006df4:	f082 0210 	eor.w	r2, r2, #16
 8006df8:	801a      	strh	r2, [r3, #0]
 8006dfa:	f107 030e 	add.w	r3, r7, #14
 8006dfe:	f107 020e 	add.w	r2, r7, #14
 8006e02:	8812      	ldrh	r2, [r2, #0]
 8006e04:	f082 0220 	eor.w	r2, r2, #32
 8006e08:	801a      	strh	r2, [r3, #0]
 8006e0a:	1d3b      	adds	r3, r7, #4
 8006e0c:	681a      	ldr	r2, [r3, #0]
 8006e0e:	463b      	mov	r3, r7
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	781b      	ldrb	r3, [r3, #0]
 8006e14:	009b      	lsls	r3, r3, #2
 8006e16:	441a      	add	r2, r3
 8006e18:	f107 030e 	add.w	r3, r7, #14
 8006e1c:	881b      	ldrh	r3, [r3, #0]
 8006e1e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e22:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e2e:	b29b      	uxth	r3, r3
 8006e30:	8013      	strh	r3, [r2, #0]
 8006e32:	e3b5      	b.n	80075a0 <USB_EPStartXfer+0x1252>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8006e34:	463b      	mov	r3, r7
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	7b1b      	ldrb	r3, [r3, #12]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	f040 8090 	bne.w	8006f60 <USB_EPStartXfer+0xc12>
    {
      /* Multi packet transfer*/
      if (ep->xfer_len > ep->maxpacket)
 8006e40:	463b      	mov	r3, r7
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	699a      	ldr	r2, [r3, #24]
 8006e46:	463b      	mov	r3, r7
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	691b      	ldr	r3, [r3, #16]
 8006e4c:	429a      	cmp	r2, r3
 8006e4e:	d90e      	bls.n	8006e6e <USB_EPStartXfer+0xb20>
      {
        len = ep->maxpacket;
 8006e50:	463b      	mov	r3, r7
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	691b      	ldr	r3, [r3, #16]
 8006e56:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        ep->xfer_len -= len;
 8006e5a:	463b      	mov	r3, r7
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	699a      	ldr	r2, [r3, #24]
 8006e60:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006e64:	1ad2      	subs	r2, r2, r3
 8006e66:	463b      	mov	r3, r7
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	619a      	str	r2, [r3, #24]
 8006e6c:	e008      	b.n	8006e80 <USB_EPStartXfer+0xb32>
      }
      else
      {
        len = ep->xfer_len;
 8006e6e:	463b      	mov	r3, r7
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	699b      	ldr	r3, [r3, #24]
 8006e74:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        ep->xfer_len = 0U;
 8006e78:	463b      	mov	r3, r7
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	2200      	movs	r2, #0
 8006e7e:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8006e80:	1d3b      	adds	r3, r7, #4
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006e88:	1d3b      	adds	r3, r7, #4
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e90:	b29b      	uxth	r3, r3
 8006e92:	461a      	mov	r2, r3
 8006e94:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006e98:	4413      	add	r3, r2
 8006e9a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006e9e:	463b      	mov	r3, r7
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	781b      	ldrb	r3, [r3, #0]
 8006ea4:	00da      	lsls	r2, r3, #3
 8006ea6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006eaa:	4413      	add	r3, r2
 8006eac:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006eb0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006eb4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d116      	bne.n	8006eea <USB_EPStartXfer+0xb9c>
 8006ebc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006ec0:	881b      	ldrh	r3, [r3, #0]
 8006ec2:	b29b      	uxth	r3, r3
 8006ec4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006ec8:	b29a      	uxth	r2, r3
 8006eca:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006ece:	801a      	strh	r2, [r3, #0]
 8006ed0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006ed4:	881b      	ldrh	r3, [r3, #0]
 8006ed6:	b29b      	uxth	r3, r3
 8006ed8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006edc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ee0:	b29a      	uxth	r2, r3
 8006ee2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006ee6:	801a      	strh	r2, [r3, #0]
 8006ee8:	e32c      	b.n	8007544 <USB_EPStartXfer+0x11f6>
 8006eea:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006eee:	2b3e      	cmp	r3, #62	; 0x3e
 8006ef0:	d818      	bhi.n	8006f24 <USB_EPStartXfer+0xbd6>
 8006ef2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006ef6:	085b      	lsrs	r3, r3, #1
 8006ef8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006efc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006f00:	f003 0301 	and.w	r3, r3, #1
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d004      	beq.n	8006f12 <USB_EPStartXfer+0xbc4>
 8006f08:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006f0c:	3301      	adds	r3, #1
 8006f0e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006f12:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006f16:	b29b      	uxth	r3, r3
 8006f18:	029b      	lsls	r3, r3, #10
 8006f1a:	b29a      	uxth	r2, r3
 8006f1c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006f20:	801a      	strh	r2, [r3, #0]
 8006f22:	e30f      	b.n	8007544 <USB_EPStartXfer+0x11f6>
 8006f24:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006f28:	095b      	lsrs	r3, r3, #5
 8006f2a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006f2e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006f32:	f003 031f 	and.w	r3, r3, #31
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d104      	bne.n	8006f44 <USB_EPStartXfer+0xbf6>
 8006f3a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006f3e:	3b01      	subs	r3, #1
 8006f40:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006f44:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006f48:	b29b      	uxth	r3, r3
 8006f4a:	029b      	lsls	r3, r3, #10
 8006f4c:	b29b      	uxth	r3, r3
 8006f4e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f52:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f56:	b29a      	uxth	r2, r3
 8006f58:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006f5c:	801a      	strh	r2, [r3, #0]
 8006f5e:	e2f1      	b.n	8007544 <USB_EPStartXfer+0x11f6>
    }
    else
    {
      /*First Transfer Coming From HAL_PCD_EP_Receive & From ISR*/
      /*Set the Double buffer counter*/
      if (ep->type == EP_TYPE_BULK)
 8006f60:	463b      	mov	r3, r7
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	78db      	ldrb	r3, [r3, #3]
 8006f66:	2b02      	cmp	r3, #2
 8006f68:	f040 818f 	bne.w	800728a <USB_EPStartXfer+0xf3c>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8006f6c:	463b      	mov	r3, r7
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	785b      	ldrb	r3, [r3, #1]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d175      	bne.n	8007062 <USB_EPStartXfer+0xd14>
 8006f76:	1d3b      	adds	r3, r7, #4
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006f7e:	1d3b      	adds	r3, r7, #4
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f86:	b29b      	uxth	r3, r3
 8006f88:	461a      	mov	r2, r3
 8006f8a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006f8e:	4413      	add	r3, r2
 8006f90:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006f94:	463b      	mov	r3, r7
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	781b      	ldrb	r3, [r3, #0]
 8006f9a:	00da      	lsls	r2, r3, #3
 8006f9c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006fa0:	4413      	add	r3, r2
 8006fa2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006fa6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006faa:	463b      	mov	r3, r7
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	691b      	ldr	r3, [r3, #16]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d116      	bne.n	8006fe2 <USB_EPStartXfer+0xc94>
 8006fb4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006fb8:	881b      	ldrh	r3, [r3, #0]
 8006fba:	b29b      	uxth	r3, r3
 8006fbc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006fc0:	b29a      	uxth	r2, r3
 8006fc2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006fc6:	801a      	strh	r2, [r3, #0]
 8006fc8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006fcc:	881b      	ldrh	r3, [r3, #0]
 8006fce:	b29b      	uxth	r3, r3
 8006fd0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006fd4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006fd8:	b29a      	uxth	r2, r3
 8006fda:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006fde:	801a      	strh	r2, [r3, #0]
 8006fe0:	e065      	b.n	80070ae <USB_EPStartXfer+0xd60>
 8006fe2:	463b      	mov	r3, r7
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	691b      	ldr	r3, [r3, #16]
 8006fe8:	2b3e      	cmp	r3, #62	; 0x3e
 8006fea:	d81a      	bhi.n	8007022 <USB_EPStartXfer+0xcd4>
 8006fec:	463b      	mov	r3, r7
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	691b      	ldr	r3, [r3, #16]
 8006ff2:	085b      	lsrs	r3, r3, #1
 8006ff4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006ff8:	463b      	mov	r3, r7
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	691b      	ldr	r3, [r3, #16]
 8006ffe:	f003 0301 	and.w	r3, r3, #1
 8007002:	2b00      	cmp	r3, #0
 8007004:	d004      	beq.n	8007010 <USB_EPStartXfer+0xcc2>
 8007006:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800700a:	3301      	adds	r3, #1
 800700c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007010:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007014:	b29b      	uxth	r3, r3
 8007016:	029b      	lsls	r3, r3, #10
 8007018:	b29a      	uxth	r2, r3
 800701a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800701e:	801a      	strh	r2, [r3, #0]
 8007020:	e045      	b.n	80070ae <USB_EPStartXfer+0xd60>
 8007022:	463b      	mov	r3, r7
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	691b      	ldr	r3, [r3, #16]
 8007028:	095b      	lsrs	r3, r3, #5
 800702a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800702e:	463b      	mov	r3, r7
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	691b      	ldr	r3, [r3, #16]
 8007034:	f003 031f 	and.w	r3, r3, #31
 8007038:	2b00      	cmp	r3, #0
 800703a:	d104      	bne.n	8007046 <USB_EPStartXfer+0xcf8>
 800703c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007040:	3b01      	subs	r3, #1
 8007042:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007046:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800704a:	b29b      	uxth	r3, r3
 800704c:	029b      	lsls	r3, r3, #10
 800704e:	b29b      	uxth	r3, r3
 8007050:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007054:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007058:	b29a      	uxth	r2, r3
 800705a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800705e:	801a      	strh	r2, [r3, #0]
 8007060:	e025      	b.n	80070ae <USB_EPStartXfer+0xd60>
 8007062:	463b      	mov	r3, r7
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	785b      	ldrb	r3, [r3, #1]
 8007068:	2b01      	cmp	r3, #1
 800706a:	d120      	bne.n	80070ae <USB_EPStartXfer+0xd60>
 800706c:	1d3b      	adds	r3, r7, #4
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007074:	1d3b      	adds	r3, r7, #4
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800707c:	b29b      	uxth	r3, r3
 800707e:	461a      	mov	r2, r3
 8007080:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007084:	4413      	add	r3, r2
 8007086:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800708a:	463b      	mov	r3, r7
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	781b      	ldrb	r3, [r3, #0]
 8007090:	00da      	lsls	r2, r3, #3
 8007092:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007096:	4413      	add	r3, r2
 8007098:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800709c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80070a0:	463b      	mov	r3, r7
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	691b      	ldr	r3, [r3, #16]
 80070a6:	b29a      	uxth	r2, r3
 80070a8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80070ac:	801a      	strh	r2, [r3, #0]
 80070ae:	1d3b      	adds	r3, r7, #4
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80070b6:	463b      	mov	r3, r7
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	785b      	ldrb	r3, [r3, #1]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d175      	bne.n	80071ac <USB_EPStartXfer+0xe5e>
 80070c0:	1d3b      	adds	r3, r7, #4
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80070c8:	1d3b      	adds	r3, r7, #4
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80070d0:	b29b      	uxth	r3, r3
 80070d2:	461a      	mov	r2, r3
 80070d4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80070d8:	4413      	add	r3, r2
 80070da:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80070de:	463b      	mov	r3, r7
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	781b      	ldrb	r3, [r3, #0]
 80070e4:	00da      	lsls	r2, r3, #3
 80070e6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80070ea:	4413      	add	r3, r2
 80070ec:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80070f0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80070f4:	463b      	mov	r3, r7
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	691b      	ldr	r3, [r3, #16]
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d116      	bne.n	800712c <USB_EPStartXfer+0xdde>
 80070fe:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007102:	881b      	ldrh	r3, [r3, #0]
 8007104:	b29b      	uxth	r3, r3
 8007106:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800710a:	b29a      	uxth	r2, r3
 800710c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007110:	801a      	strh	r2, [r3, #0]
 8007112:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007116:	881b      	ldrh	r3, [r3, #0]
 8007118:	b29b      	uxth	r3, r3
 800711a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800711e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007122:	b29a      	uxth	r2, r3
 8007124:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007128:	801a      	strh	r2, [r3, #0]
 800712a:	e061      	b.n	80071f0 <USB_EPStartXfer+0xea2>
 800712c:	463b      	mov	r3, r7
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	691b      	ldr	r3, [r3, #16]
 8007132:	2b3e      	cmp	r3, #62	; 0x3e
 8007134:	d81a      	bhi.n	800716c <USB_EPStartXfer+0xe1e>
 8007136:	463b      	mov	r3, r7
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	691b      	ldr	r3, [r3, #16]
 800713c:	085b      	lsrs	r3, r3, #1
 800713e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007142:	463b      	mov	r3, r7
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	691b      	ldr	r3, [r3, #16]
 8007148:	f003 0301 	and.w	r3, r3, #1
 800714c:	2b00      	cmp	r3, #0
 800714e:	d004      	beq.n	800715a <USB_EPStartXfer+0xe0c>
 8007150:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007154:	3301      	adds	r3, #1
 8007156:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800715a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800715e:	b29b      	uxth	r3, r3
 8007160:	029b      	lsls	r3, r3, #10
 8007162:	b29a      	uxth	r2, r3
 8007164:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007168:	801a      	strh	r2, [r3, #0]
 800716a:	e041      	b.n	80071f0 <USB_EPStartXfer+0xea2>
 800716c:	463b      	mov	r3, r7
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	691b      	ldr	r3, [r3, #16]
 8007172:	095b      	lsrs	r3, r3, #5
 8007174:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007178:	463b      	mov	r3, r7
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	691b      	ldr	r3, [r3, #16]
 800717e:	f003 031f 	and.w	r3, r3, #31
 8007182:	2b00      	cmp	r3, #0
 8007184:	d104      	bne.n	8007190 <USB_EPStartXfer+0xe42>
 8007186:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800718a:	3b01      	subs	r3, #1
 800718c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007190:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007194:	b29b      	uxth	r3, r3
 8007196:	029b      	lsls	r3, r3, #10
 8007198:	b29b      	uxth	r3, r3
 800719a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800719e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80071a2:	b29a      	uxth	r2, r3
 80071a4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80071a8:	801a      	strh	r2, [r3, #0]
 80071aa:	e021      	b.n	80071f0 <USB_EPStartXfer+0xea2>
 80071ac:	463b      	mov	r3, r7
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	785b      	ldrb	r3, [r3, #1]
 80071b2:	2b01      	cmp	r3, #1
 80071b4:	d11c      	bne.n	80071f0 <USB_EPStartXfer+0xea2>
 80071b6:	1d3b      	adds	r3, r7, #4
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80071be:	b29b      	uxth	r3, r3
 80071c0:	461a      	mov	r2, r3
 80071c2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80071c6:	4413      	add	r3, r2
 80071c8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80071cc:	463b      	mov	r3, r7
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	781b      	ldrb	r3, [r3, #0]
 80071d2:	00da      	lsls	r2, r3, #3
 80071d4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80071d8:	4413      	add	r3, r2
 80071da:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80071de:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80071e2:	463b      	mov	r3, r7
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	691b      	ldr	r3, [r3, #16]
 80071e8:	b29a      	uxth	r2, r3
 80071ea:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80071ee:	801a      	strh	r2, [r3, #0]
        /*Coming from ISR*/
        if (ep->xfer_count != 0U)
 80071f0:	463b      	mov	r3, r7
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	69db      	ldr	r3, [r3, #28]
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	f000 81a4 	beq.w	8007544 <USB_EPStartXfer+0x11f6>
        {
          /* update last value to check if there is blocking state*/
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80071fc:	1d3b      	adds	r3, r7, #4
 80071fe:	681a      	ldr	r2, [r3, #0]
 8007200:	463b      	mov	r3, r7
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	781b      	ldrb	r3, [r3, #0]
 8007206:	009b      	lsls	r3, r3, #2
 8007208:	4413      	add	r3, r2
 800720a:	881b      	ldrh	r3, [r3, #0]
 800720c:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007210:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8007214:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007218:	2b00      	cmp	r3, #0
 800721a:	d005      	beq.n	8007228 <USB_EPStartXfer+0xeda>
 800721c:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8007220:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007224:	2b00      	cmp	r3, #0
 8007226:	d10d      	bne.n	8007244 <USB_EPStartXfer+0xef6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007228:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800722c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007230:	2b00      	cmp	r3, #0
 8007232:	f040 8187 	bne.w	8007544 <USB_EPStartXfer+0x11f6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007236:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800723a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800723e:	2b00      	cmp	r3, #0
 8007240:	f040 8180 	bne.w	8007544 <USB_EPStartXfer+0x11f6>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8007244:	1d3b      	adds	r3, r7, #4
 8007246:	681a      	ldr	r2, [r3, #0]
 8007248:	463b      	mov	r3, r7
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	781b      	ldrb	r3, [r3, #0]
 800724e:	009b      	lsls	r3, r3, #2
 8007250:	4413      	add	r3, r2
 8007252:	881b      	ldrh	r3, [r3, #0]
 8007254:	b29b      	uxth	r3, r3
 8007256:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800725a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800725e:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 8007262:	1d3b      	adds	r3, r7, #4
 8007264:	681a      	ldr	r2, [r3, #0]
 8007266:	463b      	mov	r3, r7
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	781b      	ldrb	r3, [r3, #0]
 800726c:	009b      	lsls	r3, r3, #2
 800726e:	441a      	add	r2, r3
 8007270:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8007274:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007278:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800727c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007280:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007284:	b29b      	uxth	r3, r3
 8007286:	8013      	strh	r3, [r2, #0]
 8007288:	e15c      	b.n	8007544 <USB_EPStartXfer+0x11f6>
          }
        }
      }
      /*iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800728a:	463b      	mov	r3, r7
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	78db      	ldrb	r3, [r3, #3]
 8007290:	2b01      	cmp	r3, #1
 8007292:	f040 8155 	bne.w	8007540 <USB_EPStartXfer+0x11f2>
      {
        /* Multi packet transfer*/
        if (ep->xfer_len > ep->maxpacket)
 8007296:	463b      	mov	r3, r7
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	699a      	ldr	r2, [r3, #24]
 800729c:	463b      	mov	r3, r7
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	691b      	ldr	r3, [r3, #16]
 80072a2:	429a      	cmp	r2, r3
 80072a4:	d90e      	bls.n	80072c4 <USB_EPStartXfer+0xf76>
        {
          len = ep->maxpacket;
 80072a6:	463b      	mov	r3, r7
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	691b      	ldr	r3, [r3, #16]
 80072ac:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          ep->xfer_len -= len;
 80072b0:	463b      	mov	r3, r7
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	699a      	ldr	r2, [r3, #24]
 80072b6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80072ba:	1ad2      	subs	r2, r2, r3
 80072bc:	463b      	mov	r3, r7
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	619a      	str	r2, [r3, #24]
 80072c2:	e008      	b.n	80072d6 <USB_EPStartXfer+0xf88>
        }
        else
        {
          len = ep->xfer_len;
 80072c4:	463b      	mov	r3, r7
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	699b      	ldr	r3, [r3, #24]
 80072ca:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          ep->xfer_len = 0U;
 80072ce:	463b      	mov	r3, r7
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	2200      	movs	r2, #0
 80072d4:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80072d6:	463b      	mov	r3, r7
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	785b      	ldrb	r3, [r3, #1]
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d16f      	bne.n	80073c0 <USB_EPStartXfer+0x1072>
 80072e0:	1d3b      	adds	r3, r7, #4
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80072e8:	1d3b      	adds	r3, r7, #4
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80072f0:	b29b      	uxth	r3, r3
 80072f2:	461a      	mov	r2, r3
 80072f4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80072f8:	4413      	add	r3, r2
 80072fa:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80072fe:	463b      	mov	r3, r7
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	781b      	ldrb	r3, [r3, #0]
 8007304:	00da      	lsls	r2, r3, #3
 8007306:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800730a:	4413      	add	r3, r2
 800730c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007310:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007314:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007318:	2b00      	cmp	r3, #0
 800731a:	d116      	bne.n	800734a <USB_EPStartXfer+0xffc>
 800731c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007320:	881b      	ldrh	r3, [r3, #0]
 8007322:	b29b      	uxth	r3, r3
 8007324:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007328:	b29a      	uxth	r2, r3
 800732a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800732e:	801a      	strh	r2, [r3, #0]
 8007330:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007334:	881b      	ldrh	r3, [r3, #0]
 8007336:	b29b      	uxth	r3, r3
 8007338:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800733c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007340:	b29a      	uxth	r2, r3
 8007342:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007346:	801a      	strh	r2, [r3, #0]
 8007348:	e05f      	b.n	800740a <USB_EPStartXfer+0x10bc>
 800734a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800734e:	2b3e      	cmp	r3, #62	; 0x3e
 8007350:	d818      	bhi.n	8007384 <USB_EPStartXfer+0x1036>
 8007352:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007356:	085b      	lsrs	r3, r3, #1
 8007358:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800735c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007360:	f003 0301 	and.w	r3, r3, #1
 8007364:	2b00      	cmp	r3, #0
 8007366:	d004      	beq.n	8007372 <USB_EPStartXfer+0x1024>
 8007368:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800736c:	3301      	adds	r3, #1
 800736e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007372:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007376:	b29b      	uxth	r3, r3
 8007378:	029b      	lsls	r3, r3, #10
 800737a:	b29a      	uxth	r2, r3
 800737c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007380:	801a      	strh	r2, [r3, #0]
 8007382:	e042      	b.n	800740a <USB_EPStartXfer+0x10bc>
 8007384:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007388:	095b      	lsrs	r3, r3, #5
 800738a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800738e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007392:	f003 031f 	and.w	r3, r3, #31
 8007396:	2b00      	cmp	r3, #0
 8007398:	d104      	bne.n	80073a4 <USB_EPStartXfer+0x1056>
 800739a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800739e:	3b01      	subs	r3, #1
 80073a0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80073a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80073a8:	b29b      	uxth	r3, r3
 80073aa:	029b      	lsls	r3, r3, #10
 80073ac:	b29b      	uxth	r3, r3
 80073ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80073b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80073b6:	b29a      	uxth	r2, r3
 80073b8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80073bc:	801a      	strh	r2, [r3, #0]
 80073be:	e024      	b.n	800740a <USB_EPStartXfer+0x10bc>
 80073c0:	463b      	mov	r3, r7
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	785b      	ldrb	r3, [r3, #1]
 80073c6:	2b01      	cmp	r3, #1
 80073c8:	d11f      	bne.n	800740a <USB_EPStartXfer+0x10bc>
 80073ca:	1d3b      	adds	r3, r7, #4
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80073d2:	1d3b      	adds	r3, r7, #4
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80073da:	b29b      	uxth	r3, r3
 80073dc:	461a      	mov	r2, r3
 80073de:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80073e2:	4413      	add	r3, r2
 80073e4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80073e8:	463b      	mov	r3, r7
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	781b      	ldrb	r3, [r3, #0]
 80073ee:	00da      	lsls	r2, r3, #3
 80073f0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80073f4:	4413      	add	r3, r2
 80073f6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80073fa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80073fe:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007402:	b29a      	uxth	r2, r3
 8007404:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007408:	801a      	strh	r2, [r3, #0]
 800740a:	1d3b      	adds	r3, r7, #4
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007412:	463b      	mov	r3, r7
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	785b      	ldrb	r3, [r3, #1]
 8007418:	2b00      	cmp	r3, #0
 800741a:	d16f      	bne.n	80074fc <USB_EPStartXfer+0x11ae>
 800741c:	1d3b      	adds	r3, r7, #4
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007424:	1d3b      	adds	r3, r7, #4
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800742c:	b29b      	uxth	r3, r3
 800742e:	461a      	mov	r2, r3
 8007430:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007434:	4413      	add	r3, r2
 8007436:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800743a:	463b      	mov	r3, r7
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	781b      	ldrb	r3, [r3, #0]
 8007440:	00da      	lsls	r2, r3, #3
 8007442:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007446:	4413      	add	r3, r2
 8007448:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800744c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007450:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007454:	2b00      	cmp	r3, #0
 8007456:	d116      	bne.n	8007486 <USB_EPStartXfer+0x1138>
 8007458:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800745c:	881b      	ldrh	r3, [r3, #0]
 800745e:	b29b      	uxth	r3, r3
 8007460:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007464:	b29a      	uxth	r2, r3
 8007466:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800746a:	801a      	strh	r2, [r3, #0]
 800746c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007470:	881b      	ldrh	r3, [r3, #0]
 8007472:	b29b      	uxth	r3, r3
 8007474:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007478:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800747c:	b29a      	uxth	r2, r3
 800747e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007482:	801a      	strh	r2, [r3, #0]
 8007484:	e05e      	b.n	8007544 <USB_EPStartXfer+0x11f6>
 8007486:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800748a:	2b3e      	cmp	r3, #62	; 0x3e
 800748c:	d818      	bhi.n	80074c0 <USB_EPStartXfer+0x1172>
 800748e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007492:	085b      	lsrs	r3, r3, #1
 8007494:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007498:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800749c:	f003 0301 	and.w	r3, r3, #1
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d004      	beq.n	80074ae <USB_EPStartXfer+0x1160>
 80074a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80074a8:	3301      	adds	r3, #1
 80074aa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80074ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80074b2:	b29b      	uxth	r3, r3
 80074b4:	029b      	lsls	r3, r3, #10
 80074b6:	b29a      	uxth	r2, r3
 80074b8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80074bc:	801a      	strh	r2, [r3, #0]
 80074be:	e041      	b.n	8007544 <USB_EPStartXfer+0x11f6>
 80074c0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80074c4:	095b      	lsrs	r3, r3, #5
 80074c6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80074ca:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80074ce:	f003 031f 	and.w	r3, r3, #31
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d104      	bne.n	80074e0 <USB_EPStartXfer+0x1192>
 80074d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80074da:	3b01      	subs	r3, #1
 80074dc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80074e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80074e4:	b29b      	uxth	r3, r3
 80074e6:	029b      	lsls	r3, r3, #10
 80074e8:	b29b      	uxth	r3, r3
 80074ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80074ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80074f2:	b29a      	uxth	r2, r3
 80074f4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80074f8:	801a      	strh	r2, [r3, #0]
 80074fa:	e023      	b.n	8007544 <USB_EPStartXfer+0x11f6>
 80074fc:	463b      	mov	r3, r7
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	785b      	ldrb	r3, [r3, #1]
 8007502:	2b01      	cmp	r3, #1
 8007504:	d11e      	bne.n	8007544 <USB_EPStartXfer+0x11f6>
 8007506:	1d3b      	adds	r3, r7, #4
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800750e:	b29b      	uxth	r3, r3
 8007510:	461a      	mov	r2, r3
 8007512:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007516:	4413      	add	r3, r2
 8007518:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800751c:	463b      	mov	r3, r7
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	781b      	ldrb	r3, [r3, #0]
 8007522:	00da      	lsls	r2, r3, #3
 8007524:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007528:	4413      	add	r3, r2
 800752a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800752e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007532:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007536:	b29a      	uxth	r2, r3
 8007538:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800753c:	801a      	strh	r2, [r3, #0]
 800753e:	e001      	b.n	8007544 <USB_EPStartXfer+0x11f6>
      }
      else
      {
        return HAL_ERROR;
 8007540:	2301      	movs	r3, #1
 8007542:	e02e      	b.n	80075a2 <USB_EPStartXfer+0x1254>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007544:	1d3b      	adds	r3, r7, #4
 8007546:	681a      	ldr	r2, [r3, #0]
 8007548:	463b      	mov	r3, r7
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	781b      	ldrb	r3, [r3, #0]
 800754e:	009b      	lsls	r3, r3, #2
 8007550:	4413      	add	r3, r2
 8007552:	881b      	ldrh	r3, [r3, #0]
 8007554:	b29b      	uxth	r3, r3
 8007556:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800755a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800755e:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8007562:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8007566:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800756a:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 800756e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8007572:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007576:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 800757a:	1d3b      	adds	r3, r7, #4
 800757c:	681a      	ldr	r2, [r3, #0]
 800757e:	463b      	mov	r3, r7
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	781b      	ldrb	r3, [r3, #0]
 8007584:	009b      	lsls	r3, r3, #2
 8007586:	441a      	add	r2, r3
 8007588:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800758c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007590:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007594:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007598:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800759c:	b29b      	uxth	r3, r3
 800759e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80075a0:	2300      	movs	r3, #0
}
 80075a2:	4618      	mov	r0, r3
 80075a4:	f507 7788 	add.w	r7, r7, #272	; 0x110
 80075a8:	46bd      	mov	sp, r7
 80075aa:	bd80      	pop	{r7, pc}

080075ac <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80075ac:	b480      	push	{r7}
 80075ae:	b085      	sub	sp, #20
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	6078      	str	r0, [r7, #4]
 80075b4:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80075b6:	683b      	ldr	r3, [r7, #0]
 80075b8:	785b      	ldrb	r3, [r3, #1]
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d020      	beq.n	8007600 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80075be:	687a      	ldr	r2, [r7, #4]
 80075c0:	683b      	ldr	r3, [r7, #0]
 80075c2:	781b      	ldrb	r3, [r3, #0]
 80075c4:	009b      	lsls	r3, r3, #2
 80075c6:	4413      	add	r3, r2
 80075c8:	881b      	ldrh	r3, [r3, #0]
 80075ca:	b29b      	uxth	r3, r3
 80075cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80075d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80075d4:	81bb      	strh	r3, [r7, #12]
 80075d6:	89bb      	ldrh	r3, [r7, #12]
 80075d8:	f083 0310 	eor.w	r3, r3, #16
 80075dc:	81bb      	strh	r3, [r7, #12]
 80075de:	687a      	ldr	r2, [r7, #4]
 80075e0:	683b      	ldr	r3, [r7, #0]
 80075e2:	781b      	ldrb	r3, [r3, #0]
 80075e4:	009b      	lsls	r3, r3, #2
 80075e6:	441a      	add	r2, r3
 80075e8:	89bb      	ldrh	r3, [r7, #12]
 80075ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80075ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80075f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80075f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80075fa:	b29b      	uxth	r3, r3
 80075fc:	8013      	strh	r3, [r2, #0]
 80075fe:	e01f      	b.n	8007640 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8007600:	687a      	ldr	r2, [r7, #4]
 8007602:	683b      	ldr	r3, [r7, #0]
 8007604:	781b      	ldrb	r3, [r3, #0]
 8007606:	009b      	lsls	r3, r3, #2
 8007608:	4413      	add	r3, r2
 800760a:	881b      	ldrh	r3, [r3, #0]
 800760c:	b29b      	uxth	r3, r3
 800760e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007612:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007616:	81fb      	strh	r3, [r7, #14]
 8007618:	89fb      	ldrh	r3, [r7, #14]
 800761a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800761e:	81fb      	strh	r3, [r7, #14]
 8007620:	687a      	ldr	r2, [r7, #4]
 8007622:	683b      	ldr	r3, [r7, #0]
 8007624:	781b      	ldrb	r3, [r3, #0]
 8007626:	009b      	lsls	r3, r3, #2
 8007628:	441a      	add	r2, r3
 800762a:	89fb      	ldrh	r3, [r7, #14]
 800762c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007630:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007634:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007638:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800763c:	b29b      	uxth	r3, r3
 800763e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007640:	2300      	movs	r3, #0
}
 8007642:	4618      	mov	r0, r3
 8007644:	3714      	adds	r7, #20
 8007646:	46bd      	mov	sp, r7
 8007648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764c:	4770      	bx	lr

0800764e <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800764e:	b480      	push	{r7}
 8007650:	b087      	sub	sp, #28
 8007652:	af00      	add	r7, sp, #0
 8007654:	6078      	str	r0, [r7, #4]
 8007656:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007658:	683b      	ldr	r3, [r7, #0]
 800765a:	7b1b      	ldrb	r3, [r3, #12]
 800765c:	2b00      	cmp	r3, #0
 800765e:	f040 809d 	bne.w	800779c <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8007662:	683b      	ldr	r3, [r7, #0]
 8007664:	785b      	ldrb	r3, [r3, #1]
 8007666:	2b00      	cmp	r3, #0
 8007668:	d04c      	beq.n	8007704 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800766a:	687a      	ldr	r2, [r7, #4]
 800766c:	683b      	ldr	r3, [r7, #0]
 800766e:	781b      	ldrb	r3, [r3, #0]
 8007670:	009b      	lsls	r3, r3, #2
 8007672:	4413      	add	r3, r2
 8007674:	881b      	ldrh	r3, [r3, #0]
 8007676:	823b      	strh	r3, [r7, #16]
 8007678:	8a3b      	ldrh	r3, [r7, #16]
 800767a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800767e:	2b00      	cmp	r3, #0
 8007680:	d01b      	beq.n	80076ba <USB_EPClearStall+0x6c>
 8007682:	687a      	ldr	r2, [r7, #4]
 8007684:	683b      	ldr	r3, [r7, #0]
 8007686:	781b      	ldrb	r3, [r3, #0]
 8007688:	009b      	lsls	r3, r3, #2
 800768a:	4413      	add	r3, r2
 800768c:	881b      	ldrh	r3, [r3, #0]
 800768e:	b29b      	uxth	r3, r3
 8007690:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007694:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007698:	81fb      	strh	r3, [r7, #14]
 800769a:	687a      	ldr	r2, [r7, #4]
 800769c:	683b      	ldr	r3, [r7, #0]
 800769e:	781b      	ldrb	r3, [r3, #0]
 80076a0:	009b      	lsls	r3, r3, #2
 80076a2:	441a      	add	r2, r3
 80076a4:	89fb      	ldrh	r3, [r7, #14]
 80076a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80076aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80076ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80076b2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80076b6:	b29b      	uxth	r3, r3
 80076b8:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80076ba:	683b      	ldr	r3, [r7, #0]
 80076bc:	78db      	ldrb	r3, [r3, #3]
 80076be:	2b01      	cmp	r3, #1
 80076c0:	d06c      	beq.n	800779c <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80076c2:	687a      	ldr	r2, [r7, #4]
 80076c4:	683b      	ldr	r3, [r7, #0]
 80076c6:	781b      	ldrb	r3, [r3, #0]
 80076c8:	009b      	lsls	r3, r3, #2
 80076ca:	4413      	add	r3, r2
 80076cc:	881b      	ldrh	r3, [r3, #0]
 80076ce:	b29b      	uxth	r3, r3
 80076d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80076d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80076d8:	81bb      	strh	r3, [r7, #12]
 80076da:	89bb      	ldrh	r3, [r7, #12]
 80076dc:	f083 0320 	eor.w	r3, r3, #32
 80076e0:	81bb      	strh	r3, [r7, #12]
 80076e2:	687a      	ldr	r2, [r7, #4]
 80076e4:	683b      	ldr	r3, [r7, #0]
 80076e6:	781b      	ldrb	r3, [r3, #0]
 80076e8:	009b      	lsls	r3, r3, #2
 80076ea:	441a      	add	r2, r3
 80076ec:	89bb      	ldrh	r3, [r7, #12]
 80076ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80076f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80076f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80076fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80076fe:	b29b      	uxth	r3, r3
 8007700:	8013      	strh	r3, [r2, #0]
 8007702:	e04b      	b.n	800779c <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007704:	687a      	ldr	r2, [r7, #4]
 8007706:	683b      	ldr	r3, [r7, #0]
 8007708:	781b      	ldrb	r3, [r3, #0]
 800770a:	009b      	lsls	r3, r3, #2
 800770c:	4413      	add	r3, r2
 800770e:	881b      	ldrh	r3, [r3, #0]
 8007710:	82fb      	strh	r3, [r7, #22]
 8007712:	8afb      	ldrh	r3, [r7, #22]
 8007714:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007718:	2b00      	cmp	r3, #0
 800771a:	d01b      	beq.n	8007754 <USB_EPClearStall+0x106>
 800771c:	687a      	ldr	r2, [r7, #4]
 800771e:	683b      	ldr	r3, [r7, #0]
 8007720:	781b      	ldrb	r3, [r3, #0]
 8007722:	009b      	lsls	r3, r3, #2
 8007724:	4413      	add	r3, r2
 8007726:	881b      	ldrh	r3, [r3, #0]
 8007728:	b29b      	uxth	r3, r3
 800772a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800772e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007732:	82bb      	strh	r3, [r7, #20]
 8007734:	687a      	ldr	r2, [r7, #4]
 8007736:	683b      	ldr	r3, [r7, #0]
 8007738:	781b      	ldrb	r3, [r3, #0]
 800773a:	009b      	lsls	r3, r3, #2
 800773c:	441a      	add	r2, r3
 800773e:	8abb      	ldrh	r3, [r7, #20]
 8007740:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007744:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007748:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800774c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007750:	b29b      	uxth	r3, r3
 8007752:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007754:	687a      	ldr	r2, [r7, #4]
 8007756:	683b      	ldr	r3, [r7, #0]
 8007758:	781b      	ldrb	r3, [r3, #0]
 800775a:	009b      	lsls	r3, r3, #2
 800775c:	4413      	add	r3, r2
 800775e:	881b      	ldrh	r3, [r3, #0]
 8007760:	b29b      	uxth	r3, r3
 8007762:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007766:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800776a:	827b      	strh	r3, [r7, #18]
 800776c:	8a7b      	ldrh	r3, [r7, #18]
 800776e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007772:	827b      	strh	r3, [r7, #18]
 8007774:	8a7b      	ldrh	r3, [r7, #18]
 8007776:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800777a:	827b      	strh	r3, [r7, #18]
 800777c:	687a      	ldr	r2, [r7, #4]
 800777e:	683b      	ldr	r3, [r7, #0]
 8007780:	781b      	ldrb	r3, [r3, #0]
 8007782:	009b      	lsls	r3, r3, #2
 8007784:	441a      	add	r2, r3
 8007786:	8a7b      	ldrh	r3, [r7, #18]
 8007788:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800778c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007790:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007794:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007798:	b29b      	uxth	r3, r3
 800779a:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800779c:	2300      	movs	r3, #0
}
 800779e:	4618      	mov	r0, r3
 80077a0:	371c      	adds	r7, #28
 80077a2:	46bd      	mov	sp, r7
 80077a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a8:	4770      	bx	lr

080077aa <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80077aa:	b480      	push	{r7}
 80077ac:	b083      	sub	sp, #12
 80077ae:	af00      	add	r7, sp, #0
 80077b0:	6078      	str	r0, [r7, #4]
 80077b2:	460b      	mov	r3, r1
 80077b4:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80077b6:	78fb      	ldrb	r3, [r7, #3]
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d103      	bne.n	80077c4 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	2280      	movs	r2, #128	; 0x80
 80077c0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80077c4:	2300      	movs	r3, #0
}
 80077c6:	4618      	mov	r0, r3
 80077c8:	370c      	adds	r7, #12
 80077ca:	46bd      	mov	sp, r7
 80077cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d0:	4770      	bx	lr

080077d2 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80077d2:	b480      	push	{r7}
 80077d4:	b083      	sub	sp, #12
 80077d6:	af00      	add	r7, sp, #0
 80077d8:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80077e0:	b29b      	uxth	r3, r3
 80077e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80077e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80077ea:	b29a      	uxth	r2, r3
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 80077f2:	2300      	movs	r3, #0
}
 80077f4:	4618      	mov	r0, r3
 80077f6:	370c      	adds	r7, #12
 80077f8:	46bd      	mov	sp, r7
 80077fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fe:	4770      	bx	lr

08007800 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8007800:	b480      	push	{r7}
 8007802:	b085      	sub	sp, #20
 8007804:	af00      	add	r7, sp, #0
 8007806:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800780e:	b29b      	uxth	r3, r3
 8007810:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8007812:	68fb      	ldr	r3, [r7, #12]
}
 8007814:	4618      	mov	r0, r3
 8007816:	3714      	adds	r7, #20
 8007818:	46bd      	mov	sp, r7
 800781a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781e:	4770      	bx	lr

08007820 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8007820:	b480      	push	{r7}
 8007822:	b083      	sub	sp, #12
 8007824:	af00      	add	r7, sp, #0
 8007826:	6078      	str	r0, [r7, #4]
 8007828:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800782a:	2300      	movs	r3, #0
}
 800782c:	4618      	mov	r0, r3
 800782e:	370c      	adds	r7, #12
 8007830:	46bd      	mov	sp, r7
 8007832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007836:	4770      	bx	lr

08007838 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007838:	b480      	push	{r7}
 800783a:	b08d      	sub	sp, #52	; 0x34
 800783c:	af00      	add	r7, sp, #0
 800783e:	60f8      	str	r0, [r7, #12]
 8007840:	60b9      	str	r1, [r7, #8]
 8007842:	4611      	mov	r1, r2
 8007844:	461a      	mov	r2, r3
 8007846:	460b      	mov	r3, r1
 8007848:	80fb      	strh	r3, [r7, #6]
 800784a:	4613      	mov	r3, r2
 800784c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800784e:	88bb      	ldrh	r3, [r7, #4]
 8007850:	3301      	adds	r3, #1
 8007852:	085b      	lsrs	r3, r3, #1
 8007854:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800785a:	68bb      	ldr	r3, [r7, #8]
 800785c:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800785e:	88fa      	ldrh	r2, [r7, #6]
 8007860:	69fb      	ldr	r3, [r7, #28]
 8007862:	4413      	add	r3, r2
 8007864:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007868:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800786a:	6a3b      	ldr	r3, [r7, #32]
 800786c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800786e:	e01b      	b.n	80078a8 <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 8007870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007872:	781b      	ldrb	r3, [r3, #0]
 8007874:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8007876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007878:	3301      	adds	r3, #1
 800787a:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800787c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800787e:	781b      	ldrb	r3, [r3, #0]
 8007880:	b29b      	uxth	r3, r3
 8007882:	021b      	lsls	r3, r3, #8
 8007884:	b29b      	uxth	r3, r3
 8007886:	461a      	mov	r2, r3
 8007888:	69bb      	ldr	r3, [r7, #24]
 800788a:	4313      	orrs	r3, r2
 800788c:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800788e:	697b      	ldr	r3, [r7, #20]
 8007890:	b29a      	uxth	r2, r3
 8007892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007894:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8007896:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007898:	3302      	adds	r3, #2
 800789a:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 800789c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800789e:	3301      	adds	r3, #1
 80078a0:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 80078a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078a4:	3b01      	subs	r3, #1
 80078a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80078a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d1e0      	bne.n	8007870 <USB_WritePMA+0x38>
  }
}
 80078ae:	bf00      	nop
 80078b0:	3734      	adds	r7, #52	; 0x34
 80078b2:	46bd      	mov	sp, r7
 80078b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b8:	4770      	bx	lr

080078ba <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80078ba:	b480      	push	{r7}
 80078bc:	b08b      	sub	sp, #44	; 0x2c
 80078be:	af00      	add	r7, sp, #0
 80078c0:	60f8      	str	r0, [r7, #12]
 80078c2:	60b9      	str	r1, [r7, #8]
 80078c4:	4611      	mov	r1, r2
 80078c6:	461a      	mov	r2, r3
 80078c8:	460b      	mov	r3, r1
 80078ca:	80fb      	strh	r3, [r7, #6]
 80078cc:	4613      	mov	r3, r2
 80078ce:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80078d0:	88bb      	ldrh	r3, [r7, #4]
 80078d2:	085b      	lsrs	r3, r3, #1
 80078d4:	b29b      	uxth	r3, r3
 80078d6:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80078dc:	68bb      	ldr	r3, [r7, #8]
 80078de:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80078e0:	88fa      	ldrh	r2, [r7, #6]
 80078e2:	697b      	ldr	r3, [r7, #20]
 80078e4:	4413      	add	r3, r2
 80078e6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80078ea:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 80078ec:	69bb      	ldr	r3, [r7, #24]
 80078ee:	627b      	str	r3, [r7, #36]	; 0x24
 80078f0:	e018      	b.n	8007924 <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 80078f2:	6a3b      	ldr	r3, [r7, #32]
 80078f4:	881b      	ldrh	r3, [r3, #0]
 80078f6:	b29b      	uxth	r3, r3
 80078f8:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80078fa:	6a3b      	ldr	r3, [r7, #32]
 80078fc:	3302      	adds	r3, #2
 80078fe:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8007900:	693b      	ldr	r3, [r7, #16]
 8007902:	b2da      	uxtb	r2, r3
 8007904:	69fb      	ldr	r3, [r7, #28]
 8007906:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007908:	69fb      	ldr	r3, [r7, #28]
 800790a:	3301      	adds	r3, #1
 800790c:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800790e:	693b      	ldr	r3, [r7, #16]
 8007910:	0a1b      	lsrs	r3, r3, #8
 8007912:	b2da      	uxtb	r2, r3
 8007914:	69fb      	ldr	r3, [r7, #28]
 8007916:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007918:	69fb      	ldr	r3, [r7, #28]
 800791a:	3301      	adds	r3, #1
 800791c:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 800791e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007920:	3b01      	subs	r3, #1
 8007922:	627b      	str	r3, [r7, #36]	; 0x24
 8007924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007926:	2b00      	cmp	r3, #0
 8007928:	d1e3      	bne.n	80078f2 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 800792a:	88bb      	ldrh	r3, [r7, #4]
 800792c:	f003 0301 	and.w	r3, r3, #1
 8007930:	b29b      	uxth	r3, r3
 8007932:	2b00      	cmp	r3, #0
 8007934:	d007      	beq.n	8007946 <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 8007936:	6a3b      	ldr	r3, [r7, #32]
 8007938:	881b      	ldrh	r3, [r3, #0]
 800793a:	b29b      	uxth	r3, r3
 800793c:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800793e:	693b      	ldr	r3, [r7, #16]
 8007940:	b2da      	uxtb	r2, r3
 8007942:	69fb      	ldr	r3, [r7, #28]
 8007944:	701a      	strb	r2, [r3, #0]
  }
}
 8007946:	bf00      	nop
 8007948:	372c      	adds	r7, #44	; 0x2c
 800794a:	46bd      	mov	sp, r7
 800794c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007950:	4770      	bx	lr

08007952 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007952:	b580      	push	{r7, lr}
 8007954:	b084      	sub	sp, #16
 8007956:	af00      	add	r7, sp, #0
 8007958:	6078      	str	r0, [r7, #4]
 800795a:	460b      	mov	r3, r1
 800795c:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800795e:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007962:	f002 f89d 	bl	8009aa0 <USBD_static_malloc>
 8007966:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	2b00      	cmp	r3, #0
 800796c:	d105      	bne.n	800797a <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	2200      	movs	r2, #0
 8007972:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8007976:	2302      	movs	r3, #2
 8007978:	e066      	b.n	8007a48 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	68fa      	ldr	r2, [r7, #12]
 800797e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	7c1b      	ldrb	r3, [r3, #16]
 8007986:	2b00      	cmp	r3, #0
 8007988:	d119      	bne.n	80079be <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800798a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800798e:	2202      	movs	r2, #2
 8007990:	2181      	movs	r1, #129	; 0x81
 8007992:	6878      	ldr	r0, [r7, #4]
 8007994:	f001 ff29 	bl	80097ea <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	2201      	movs	r2, #1
 800799c:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800799e:	f44f 7300 	mov.w	r3, #512	; 0x200
 80079a2:	2202      	movs	r2, #2
 80079a4:	2101      	movs	r1, #1
 80079a6:	6878      	ldr	r0, [r7, #4]
 80079a8:	f001 ff1f 	bl	80097ea <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	2201      	movs	r2, #1
 80079b0:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	2210      	movs	r2, #16
 80079b8:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 80079bc:	e016      	b.n	80079ec <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80079be:	2340      	movs	r3, #64	; 0x40
 80079c0:	2202      	movs	r2, #2
 80079c2:	2181      	movs	r1, #129	; 0x81
 80079c4:	6878      	ldr	r0, [r7, #4]
 80079c6:	f001 ff10 	bl	80097ea <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	2201      	movs	r2, #1
 80079ce:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80079d0:	2340      	movs	r3, #64	; 0x40
 80079d2:	2202      	movs	r2, #2
 80079d4:	2101      	movs	r1, #1
 80079d6:	6878      	ldr	r0, [r7, #4]
 80079d8:	f001 ff07 	bl	80097ea <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	2201      	movs	r2, #1
 80079e0:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	2210      	movs	r2, #16
 80079e8:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80079ec:	2308      	movs	r3, #8
 80079ee:	2203      	movs	r2, #3
 80079f0:	2182      	movs	r1, #130	; 0x82
 80079f2:	6878      	ldr	r0, [r7, #4]
 80079f4:	f001 fef9 	bl	80097ea <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	2201      	movs	r2, #1
 80079fc:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	2200      	movs	r2, #0
 8007a0e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	2200      	movs	r2, #0
 8007a16:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	7c1b      	ldrb	r3, [r3, #16]
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d109      	bne.n	8007a36 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007a28:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007a2c:	2101      	movs	r1, #1
 8007a2e:	6878      	ldr	r0, [r7, #4]
 8007a30:	f001 ffcb 	bl	80099ca <USBD_LL_PrepareReceive>
 8007a34:	e007      	b.n	8007a46 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007a3c:	2340      	movs	r3, #64	; 0x40
 8007a3e:	2101      	movs	r1, #1
 8007a40:	6878      	ldr	r0, [r7, #4]
 8007a42:	f001 ffc2 	bl	80099ca <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007a46:	2300      	movs	r3, #0
}
 8007a48:	4618      	mov	r0, r3
 8007a4a:	3710      	adds	r7, #16
 8007a4c:	46bd      	mov	sp, r7
 8007a4e:	bd80      	pop	{r7, pc}

08007a50 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007a50:	b580      	push	{r7, lr}
 8007a52:	b082      	sub	sp, #8
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	6078      	str	r0, [r7, #4]
 8007a58:	460b      	mov	r3, r1
 8007a5a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8007a5c:	2181      	movs	r1, #129	; 0x81
 8007a5e:	6878      	ldr	r0, [r7, #4]
 8007a60:	f001 fee9 	bl	8009836 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	2200      	movs	r2, #0
 8007a68:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8007a6a:	2101      	movs	r1, #1
 8007a6c:	6878      	ldr	r0, [r7, #4]
 8007a6e:	f001 fee2 	bl	8009836 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	2200      	movs	r2, #0
 8007a76:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8007a7a:	2182      	movs	r1, #130	; 0x82
 8007a7c:	6878      	ldr	r0, [r7, #4]
 8007a7e:	f001 feda 	bl	8009836 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	2200      	movs	r2, #0
 8007a86:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	2200      	movs	r2, #0
 8007a8e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d00e      	beq.n	8007aba <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007aa2:	685b      	ldr	r3, [r3, #4]
 8007aa4:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007aac:	4618      	mov	r0, r3
 8007aae:	f002 f805 	bl	8009abc <USBD_static_free>
    pdev->pClassData = NULL;
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	2200      	movs	r2, #0
 8007ab6:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007aba:	2300      	movs	r3, #0
}
 8007abc:	4618      	mov	r0, r3
 8007abe:	3708      	adds	r7, #8
 8007ac0:	46bd      	mov	sp, r7
 8007ac2:	bd80      	pop	{r7, pc}

08007ac4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007ac4:	b580      	push	{r7, lr}
 8007ac6:	b086      	sub	sp, #24
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	6078      	str	r0, [r7, #4]
 8007acc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007ad4:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8007ad6:	2300      	movs	r3, #0
 8007ad8:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8007ada:	2300      	movs	r3, #0
 8007adc:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8007ade:	2300      	movs	r3, #0
 8007ae0:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007ae2:	683b      	ldr	r3, [r7, #0]
 8007ae4:	781b      	ldrb	r3, [r3, #0]
 8007ae6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d03a      	beq.n	8007b64 <USBD_CDC_Setup+0xa0>
 8007aee:	2b20      	cmp	r3, #32
 8007af0:	f040 8097 	bne.w	8007c22 <USBD_CDC_Setup+0x15e>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8007af4:	683b      	ldr	r3, [r7, #0]
 8007af6:	88db      	ldrh	r3, [r3, #6]
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d029      	beq.n	8007b50 <USBD_CDC_Setup+0x8c>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8007afc:	683b      	ldr	r3, [r7, #0]
 8007afe:	781b      	ldrb	r3, [r3, #0]
 8007b00:	b25b      	sxtb	r3, r3
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	da11      	bge.n	8007b2a <USBD_CDC_Setup+0x66>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007b0c:	689b      	ldr	r3, [r3, #8]
 8007b0e:	683a      	ldr	r2, [r7, #0]
 8007b10:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8007b12:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007b14:	683a      	ldr	r2, [r7, #0]
 8007b16:	88d2      	ldrh	r2, [r2, #6]
 8007b18:	4798      	blx	r3
                                                            req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 8007b1a:	6939      	ldr	r1, [r7, #16]
 8007b1c:	683b      	ldr	r3, [r7, #0]
 8007b1e:	88db      	ldrh	r3, [r3, #6]
 8007b20:	461a      	mov	r2, r3
 8007b22:	6878      	ldr	r0, [r7, #4]
 8007b24:	f001 fa8d 	bl	8009042 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8007b28:	e082      	b.n	8007c30 <USBD_CDC_Setup+0x16c>
          hcdc->CmdOpCode = req->bRequest;
 8007b2a:	683b      	ldr	r3, [r7, #0]
 8007b2c:	785a      	ldrb	r2, [r3, #1]
 8007b2e:	693b      	ldr	r3, [r7, #16]
 8007b30:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8007b34:	683b      	ldr	r3, [r7, #0]
 8007b36:	88db      	ldrh	r3, [r3, #6]
 8007b38:	b2da      	uxtb	r2, r3
 8007b3a:	693b      	ldr	r3, [r7, #16]
 8007b3c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8007b40:	6939      	ldr	r1, [r7, #16]
 8007b42:	683b      	ldr	r3, [r7, #0]
 8007b44:	88db      	ldrh	r3, [r3, #6]
 8007b46:	461a      	mov	r2, r3
 8007b48:	6878      	ldr	r0, [r7, #4]
 8007b4a:	f001 faa6 	bl	800909a <USBD_CtlPrepareRx>
      break;
 8007b4e:	e06f      	b.n	8007c30 <USBD_CDC_Setup+0x16c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007b56:	689b      	ldr	r3, [r3, #8]
 8007b58:	683a      	ldr	r2, [r7, #0]
 8007b5a:	7850      	ldrb	r0, [r2, #1]
 8007b5c:	2200      	movs	r2, #0
 8007b5e:	6839      	ldr	r1, [r7, #0]
 8007b60:	4798      	blx	r3
      break;
 8007b62:	e065      	b.n	8007c30 <USBD_CDC_Setup+0x16c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007b64:	683b      	ldr	r3, [r7, #0]
 8007b66:	785b      	ldrb	r3, [r3, #1]
 8007b68:	2b0b      	cmp	r3, #11
 8007b6a:	d84f      	bhi.n	8007c0c <USBD_CDC_Setup+0x148>
 8007b6c:	a201      	add	r2, pc, #4	; (adr r2, 8007b74 <USBD_CDC_Setup+0xb0>)
 8007b6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b72:	bf00      	nop
 8007b74:	08007ba5 	.word	0x08007ba5
 8007b78:	08007c1b 	.word	0x08007c1b
 8007b7c:	08007c0d 	.word	0x08007c0d
 8007b80:	08007c0d 	.word	0x08007c0d
 8007b84:	08007c0d 	.word	0x08007c0d
 8007b88:	08007c0d 	.word	0x08007c0d
 8007b8c:	08007c0d 	.word	0x08007c0d
 8007b90:	08007c0d 	.word	0x08007c0d
 8007b94:	08007c0d 	.word	0x08007c0d
 8007b98:	08007c0d 	.word	0x08007c0d
 8007b9c:	08007bcd 	.word	0x08007bcd
 8007ba0:	08007bf5 	.word	0x08007bf5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007baa:	2b03      	cmp	r3, #3
 8007bac:	d107      	bne.n	8007bbe <USBD_CDC_Setup+0xfa>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007bae:	f107 030c 	add.w	r3, r7, #12
 8007bb2:	2202      	movs	r2, #2
 8007bb4:	4619      	mov	r1, r3
 8007bb6:	6878      	ldr	r0, [r7, #4]
 8007bb8:	f001 fa43 	bl	8009042 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007bbc:	e030      	b.n	8007c20 <USBD_CDC_Setup+0x15c>
            USBD_CtlError(pdev, req);
 8007bbe:	6839      	ldr	r1, [r7, #0]
 8007bc0:	6878      	ldr	r0, [r7, #4]
 8007bc2:	f001 f9cd 	bl	8008f60 <USBD_CtlError>
            ret = USBD_FAIL;
 8007bc6:	2303      	movs	r3, #3
 8007bc8:	75fb      	strb	r3, [r7, #23]
          break;
 8007bca:	e029      	b.n	8007c20 <USBD_CDC_Setup+0x15c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007bd2:	2b03      	cmp	r3, #3
 8007bd4:	d107      	bne.n	8007be6 <USBD_CDC_Setup+0x122>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007bd6:	f107 030f 	add.w	r3, r7, #15
 8007bda:	2201      	movs	r2, #1
 8007bdc:	4619      	mov	r1, r3
 8007bde:	6878      	ldr	r0, [r7, #4]
 8007be0:	f001 fa2f 	bl	8009042 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007be4:	e01c      	b.n	8007c20 <USBD_CDC_Setup+0x15c>
            USBD_CtlError(pdev, req);
 8007be6:	6839      	ldr	r1, [r7, #0]
 8007be8:	6878      	ldr	r0, [r7, #4]
 8007bea:	f001 f9b9 	bl	8008f60 <USBD_CtlError>
            ret = USBD_FAIL;
 8007bee:	2303      	movs	r3, #3
 8007bf0:	75fb      	strb	r3, [r7, #23]
          break;
 8007bf2:	e015      	b.n	8007c20 <USBD_CDC_Setup+0x15c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007bfa:	2b03      	cmp	r3, #3
 8007bfc:	d00f      	beq.n	8007c1e <USBD_CDC_Setup+0x15a>
          {
            USBD_CtlError(pdev, req);
 8007bfe:	6839      	ldr	r1, [r7, #0]
 8007c00:	6878      	ldr	r0, [r7, #4]
 8007c02:	f001 f9ad 	bl	8008f60 <USBD_CtlError>
            ret = USBD_FAIL;
 8007c06:	2303      	movs	r3, #3
 8007c08:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007c0a:	e008      	b.n	8007c1e <USBD_CDC_Setup+0x15a>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007c0c:	6839      	ldr	r1, [r7, #0]
 8007c0e:	6878      	ldr	r0, [r7, #4]
 8007c10:	f001 f9a6 	bl	8008f60 <USBD_CtlError>
          ret = USBD_FAIL;
 8007c14:	2303      	movs	r3, #3
 8007c16:	75fb      	strb	r3, [r7, #23]
          break;
 8007c18:	e002      	b.n	8007c20 <USBD_CDC_Setup+0x15c>
          break;
 8007c1a:	bf00      	nop
 8007c1c:	e008      	b.n	8007c30 <USBD_CDC_Setup+0x16c>
          break;
 8007c1e:	bf00      	nop
      }
      break;
 8007c20:	e006      	b.n	8007c30 <USBD_CDC_Setup+0x16c>

    default:
      USBD_CtlError(pdev, req);
 8007c22:	6839      	ldr	r1, [r7, #0]
 8007c24:	6878      	ldr	r0, [r7, #4]
 8007c26:	f001 f99b 	bl	8008f60 <USBD_CtlError>
      ret = USBD_FAIL;
 8007c2a:	2303      	movs	r3, #3
 8007c2c:	75fb      	strb	r3, [r7, #23]
      break;
 8007c2e:	bf00      	nop
  }

  return (uint8_t)ret;
 8007c30:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c32:	4618      	mov	r0, r3
 8007c34:	3718      	adds	r7, #24
 8007c36:	46bd      	mov	sp, r7
 8007c38:	bd80      	pop	{r7, pc}
 8007c3a:	bf00      	nop

08007c3c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007c3c:	b580      	push	{r7, lr}
 8007c3e:	b084      	sub	sp, #16
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	6078      	str	r0, [r7, #4]
 8007c44:	460b      	mov	r3, r1
 8007c46:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007c4e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d101      	bne.n	8007c5e <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007c5a:	2303      	movs	r3, #3
 8007c5c:	e04f      	b.n	8007cfe <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007c64:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8007c66:	78fa      	ldrb	r2, [r7, #3]
 8007c68:	6879      	ldr	r1, [r7, #4]
 8007c6a:	4613      	mov	r3, r2
 8007c6c:	009b      	lsls	r3, r3, #2
 8007c6e:	4413      	add	r3, r2
 8007c70:	009b      	lsls	r3, r3, #2
 8007c72:	440b      	add	r3, r1
 8007c74:	3318      	adds	r3, #24
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d029      	beq.n	8007cd0 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8007c7c:	78fa      	ldrb	r2, [r7, #3]
 8007c7e:	6879      	ldr	r1, [r7, #4]
 8007c80:	4613      	mov	r3, r2
 8007c82:	009b      	lsls	r3, r3, #2
 8007c84:	4413      	add	r3, r2
 8007c86:	009b      	lsls	r3, r3, #2
 8007c88:	440b      	add	r3, r1
 8007c8a:	3318      	adds	r3, #24
 8007c8c:	681a      	ldr	r2, [r3, #0]
 8007c8e:	78f9      	ldrb	r1, [r7, #3]
 8007c90:	68f8      	ldr	r0, [r7, #12]
 8007c92:	460b      	mov	r3, r1
 8007c94:	009b      	lsls	r3, r3, #2
 8007c96:	440b      	add	r3, r1
 8007c98:	00db      	lsls	r3, r3, #3
 8007c9a:	4403      	add	r3, r0
 8007c9c:	3338      	adds	r3, #56	; 0x38
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	fbb2 f1f3 	udiv	r1, r2, r3
 8007ca4:	fb03 f301 	mul.w	r3, r3, r1
 8007ca8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d110      	bne.n	8007cd0 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8007cae:	78fa      	ldrb	r2, [r7, #3]
 8007cb0:	6879      	ldr	r1, [r7, #4]
 8007cb2:	4613      	mov	r3, r2
 8007cb4:	009b      	lsls	r3, r3, #2
 8007cb6:	4413      	add	r3, r2
 8007cb8:	009b      	lsls	r3, r3, #2
 8007cba:	440b      	add	r3, r1
 8007cbc:	3318      	adds	r3, #24
 8007cbe:	2200      	movs	r2, #0
 8007cc0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007cc2:	78f9      	ldrb	r1, [r7, #3]
 8007cc4:	2300      	movs	r3, #0
 8007cc6:	2200      	movs	r2, #0
 8007cc8:	6878      	ldr	r0, [r7, #4]
 8007cca:	f001 fe5d 	bl	8009988 <USBD_LL_Transmit>
 8007cce:	e015      	b.n	8007cfc <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8007cd0:	68bb      	ldr	r3, [r7, #8]
 8007cd2:	2200      	movs	r2, #0
 8007cd4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007cde:	691b      	ldr	r3, [r3, #16]
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d00b      	beq.n	8007cfc <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007cea:	691b      	ldr	r3, [r3, #16]
 8007cec:	68ba      	ldr	r2, [r7, #8]
 8007cee:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8007cf2:	68ba      	ldr	r2, [r7, #8]
 8007cf4:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8007cf8:	78fa      	ldrb	r2, [r7, #3]
 8007cfa:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8007cfc:	2300      	movs	r3, #0
}
 8007cfe:	4618      	mov	r0, r3
 8007d00:	3710      	adds	r7, #16
 8007d02:	46bd      	mov	sp, r7
 8007d04:	bd80      	pop	{r7, pc}

08007d06 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007d06:	b580      	push	{r7, lr}
 8007d08:	b084      	sub	sp, #16
 8007d0a:	af00      	add	r7, sp, #0
 8007d0c:	6078      	str	r0, [r7, #4]
 8007d0e:	460b      	mov	r3, r1
 8007d10:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007d18:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d101      	bne.n	8007d28 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007d24:	2303      	movs	r3, #3
 8007d26:	e015      	b.n	8007d54 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007d28:	78fb      	ldrb	r3, [r7, #3]
 8007d2a:	4619      	mov	r1, r3
 8007d2c:	6878      	ldr	r0, [r7, #4]
 8007d2e:	f001 fe6d 	bl	8009a0c <USBD_LL_GetRxDataSize>
 8007d32:	4602      	mov	r2, r0
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007d40:	68db      	ldr	r3, [r3, #12]
 8007d42:	68fa      	ldr	r2, [r7, #12]
 8007d44:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007d48:	68fa      	ldr	r2, [r7, #12]
 8007d4a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007d4e:	4611      	mov	r1, r2
 8007d50:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007d52:	2300      	movs	r3, #0
}
 8007d54:	4618      	mov	r0, r3
 8007d56:	3710      	adds	r7, #16
 8007d58:	46bd      	mov	sp, r7
 8007d5a:	bd80      	pop	{r7, pc}

08007d5c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007d5c:	b580      	push	{r7, lr}
 8007d5e:	b084      	sub	sp, #16
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007d6a:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d015      	beq.n	8007da2 <USBD_CDC_EP0_RxReady+0x46>
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007d7c:	2bff      	cmp	r3, #255	; 0xff
 8007d7e:	d010      	beq.n	8007da2 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007d86:	689b      	ldr	r3, [r3, #8]
 8007d88:	68fa      	ldr	r2, [r7, #12]
 8007d8a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8007d8e:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8007d90:	68fa      	ldr	r2, [r7, #12]
 8007d92:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007d96:	b292      	uxth	r2, r2
 8007d98:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	22ff      	movs	r2, #255	; 0xff
 8007d9e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8007da2:	2300      	movs	r3, #0
}
 8007da4:	4618      	mov	r0, r3
 8007da6:	3710      	adds	r7, #16
 8007da8:	46bd      	mov	sp, r7
 8007daa:	bd80      	pop	{r7, pc}

08007dac <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007dac:	b480      	push	{r7}
 8007dae:	b083      	sub	sp, #12
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	2243      	movs	r2, #67	; 0x43
 8007db8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8007dba:	4b03      	ldr	r3, [pc, #12]	; (8007dc8 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	370c      	adds	r7, #12
 8007dc0:	46bd      	mov	sp, r7
 8007dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc6:	4770      	bx	lr
 8007dc8:	200000e8 	.word	0x200000e8

08007dcc <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007dcc:	b480      	push	{r7}
 8007dce:	b083      	sub	sp, #12
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	2243      	movs	r2, #67	; 0x43
 8007dd8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8007dda:	4b03      	ldr	r3, [pc, #12]	; (8007de8 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8007ddc:	4618      	mov	r0, r3
 8007dde:	370c      	adds	r7, #12
 8007de0:	46bd      	mov	sp, r7
 8007de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de6:	4770      	bx	lr
 8007de8:	200000a4 	.word	0x200000a4

08007dec <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007dec:	b480      	push	{r7}
 8007dee:	b083      	sub	sp, #12
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	2243      	movs	r2, #67	; 0x43
 8007df8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8007dfa:	4b03      	ldr	r3, [pc, #12]	; (8007e08 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8007dfc:	4618      	mov	r0, r3
 8007dfe:	370c      	adds	r7, #12
 8007e00:	46bd      	mov	sp, r7
 8007e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e06:	4770      	bx	lr
 8007e08:	2000012c 	.word	0x2000012c

08007e0c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007e0c:	b480      	push	{r7}
 8007e0e:	b083      	sub	sp, #12
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	220a      	movs	r2, #10
 8007e18:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8007e1a:	4b03      	ldr	r3, [pc, #12]	; (8007e28 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007e1c:	4618      	mov	r0, r3
 8007e1e:	370c      	adds	r7, #12
 8007e20:	46bd      	mov	sp, r7
 8007e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e26:	4770      	bx	lr
 8007e28:	20000060 	.word	0x20000060

08007e2c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007e2c:	b480      	push	{r7}
 8007e2e:	b083      	sub	sp, #12
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	6078      	str	r0, [r7, #4]
 8007e34:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007e36:	683b      	ldr	r3, [r7, #0]
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d101      	bne.n	8007e40 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007e3c:	2303      	movs	r3, #3
 8007e3e:	e004      	b.n	8007e4a <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	683a      	ldr	r2, [r7, #0]
 8007e44:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8007e48:	2300      	movs	r3, #0
}
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	370c      	adds	r7, #12
 8007e4e:	46bd      	mov	sp, r7
 8007e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e54:	4770      	bx	lr

08007e56 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007e56:	b480      	push	{r7}
 8007e58:	b087      	sub	sp, #28
 8007e5a:	af00      	add	r7, sp, #0
 8007e5c:	60f8      	str	r0, [r7, #12]
 8007e5e:	60b9      	str	r1, [r7, #8]
 8007e60:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007e68:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8007e6a:	697b      	ldr	r3, [r7, #20]
 8007e6c:	68ba      	ldr	r2, [r7, #8]
 8007e6e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007e72:	697b      	ldr	r3, [r7, #20]
 8007e74:	687a      	ldr	r2, [r7, #4]
 8007e76:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8007e7a:	2300      	movs	r3, #0
}
 8007e7c:	4618      	mov	r0, r3
 8007e7e:	371c      	adds	r7, #28
 8007e80:	46bd      	mov	sp, r7
 8007e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e86:	4770      	bx	lr

08007e88 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007e88:	b480      	push	{r7}
 8007e8a:	b085      	sub	sp, #20
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	6078      	str	r0, [r7, #4]
 8007e90:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007e98:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	683a      	ldr	r2, [r7, #0]
 8007e9e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8007ea2:	2300      	movs	r3, #0
}
 8007ea4:	4618      	mov	r0, r3
 8007ea6:	3714      	adds	r7, #20
 8007ea8:	46bd      	mov	sp, r7
 8007eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eae:	4770      	bx	lr

08007eb0 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007eb0:	b580      	push	{r7, lr}
 8007eb2:	b084      	sub	sp, #16
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007ebe:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8007ec0:	2301      	movs	r3, #1
 8007ec2:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d101      	bne.n	8007ed2 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007ece:	2303      	movs	r3, #3
 8007ed0:	e01a      	b.n	8007f08 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8007ed2:	68bb      	ldr	r3, [r7, #8]
 8007ed4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d114      	bne.n	8007f06 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8007edc:	68bb      	ldr	r3, [r7, #8]
 8007ede:	2201      	movs	r2, #1
 8007ee0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8007ee4:	68bb      	ldr	r3, [r7, #8]
 8007ee6:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8007eee:	68bb      	ldr	r3, [r7, #8]
 8007ef0:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8007ef4:	68bb      	ldr	r3, [r7, #8]
 8007ef6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8007efa:	2181      	movs	r1, #129	; 0x81
 8007efc:	6878      	ldr	r0, [r7, #4]
 8007efe:	f001 fd43 	bl	8009988 <USBD_LL_Transmit>

    ret = USBD_OK;
 8007f02:	2300      	movs	r3, #0
 8007f04:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8007f06:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f08:	4618      	mov	r0, r3
 8007f0a:	3710      	adds	r7, #16
 8007f0c:	46bd      	mov	sp, r7
 8007f0e:	bd80      	pop	{r7, pc}

08007f10 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007f10:	b580      	push	{r7, lr}
 8007f12:	b084      	sub	sp, #16
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007f1e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d101      	bne.n	8007f2e <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8007f2a:	2303      	movs	r3, #3
 8007f2c:	e016      	b.n	8007f5c <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	7c1b      	ldrb	r3, [r3, #16]
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d109      	bne.n	8007f4a <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007f3c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007f40:	2101      	movs	r1, #1
 8007f42:	6878      	ldr	r0, [r7, #4]
 8007f44:	f001 fd41 	bl	80099ca <USBD_LL_PrepareReceive>
 8007f48:	e007      	b.n	8007f5a <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007f50:	2340      	movs	r3, #64	; 0x40
 8007f52:	2101      	movs	r1, #1
 8007f54:	6878      	ldr	r0, [r7, #4]
 8007f56:	f001 fd38 	bl	80099ca <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007f5a:	2300      	movs	r3, #0
}
 8007f5c:	4618      	mov	r0, r3
 8007f5e:	3710      	adds	r7, #16
 8007f60:	46bd      	mov	sp, r7
 8007f62:	bd80      	pop	{r7, pc}

08007f64 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007f64:	b580      	push	{r7, lr}
 8007f66:	b086      	sub	sp, #24
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	60f8      	str	r0, [r7, #12]
 8007f6c:	60b9      	str	r1, [r7, #8]
 8007f6e:	4613      	mov	r3, r2
 8007f70:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d101      	bne.n	8007f7c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007f78:	2303      	movs	r3, #3
 8007f7a:	e01f      	b.n	8007fbc <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	2200      	movs	r2, #0
 8007f80:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	2200      	movs	r2, #0
 8007f88:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	2200      	movs	r2, #0
 8007f90:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007f94:	68bb      	ldr	r3, [r7, #8]
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d003      	beq.n	8007fa2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	68ba      	ldr	r2, [r7, #8]
 8007f9e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	2201      	movs	r2, #1
 8007fa6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	79fa      	ldrb	r2, [r7, #7]
 8007fae:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007fb0:	68f8      	ldr	r0, [r7, #12]
 8007fb2:	f001 fb9f 	bl	80096f4 <USBD_LL_Init>
 8007fb6:	4603      	mov	r3, r0
 8007fb8:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007fba:	7dfb      	ldrb	r3, [r7, #23]
}
 8007fbc:	4618      	mov	r0, r3
 8007fbe:	3718      	adds	r7, #24
 8007fc0:	46bd      	mov	sp, r7
 8007fc2:	bd80      	pop	{r7, pc}

08007fc4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007fc4:	b580      	push	{r7, lr}
 8007fc6:	b084      	sub	sp, #16
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	6078      	str	r0, [r7, #4]
 8007fcc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007fce:	2300      	movs	r3, #0
 8007fd0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007fd2:	683b      	ldr	r3, [r7, #0]
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d101      	bne.n	8007fdc <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8007fd8:	2303      	movs	r3, #3
 8007fda:	e016      	b.n	800800a <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	683a      	ldr	r2, [r7, #0]
 8007fe0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007fea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d00b      	beq.n	8008008 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ff8:	f107 020e 	add.w	r2, r7, #14
 8007ffc:	4610      	mov	r0, r2
 8007ffe:	4798      	blx	r3
 8008000:	4602      	mov	r2, r0
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8008008:	2300      	movs	r3, #0
}
 800800a:	4618      	mov	r0, r3
 800800c:	3710      	adds	r7, #16
 800800e:	46bd      	mov	sp, r7
 8008010:	bd80      	pop	{r7, pc}

08008012 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008012:	b580      	push	{r7, lr}
 8008014:	b082      	sub	sp, #8
 8008016:	af00      	add	r7, sp, #0
 8008018:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800801a:	6878      	ldr	r0, [r7, #4]
 800801c:	f001 fbca 	bl	80097b4 <USBD_LL_Start>
 8008020:	4603      	mov	r3, r0
}
 8008022:	4618      	mov	r0, r3
 8008024:	3708      	adds	r7, #8
 8008026:	46bd      	mov	sp, r7
 8008028:	bd80      	pop	{r7, pc}

0800802a <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800802a:	b480      	push	{r7}
 800802c:	b083      	sub	sp, #12
 800802e:	af00      	add	r7, sp, #0
 8008030:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008032:	2300      	movs	r3, #0
}
 8008034:	4618      	mov	r0, r3
 8008036:	370c      	adds	r7, #12
 8008038:	46bd      	mov	sp, r7
 800803a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800803e:	4770      	bx	lr

08008040 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008040:	b580      	push	{r7, lr}
 8008042:	b084      	sub	sp, #16
 8008044:	af00      	add	r7, sp, #0
 8008046:	6078      	str	r0, [r7, #4]
 8008048:	460b      	mov	r3, r1
 800804a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800804c:	2303      	movs	r3, #3
 800804e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008056:	2b00      	cmp	r3, #0
 8008058:	d009      	beq.n	800806e <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	78fa      	ldrb	r2, [r7, #3]
 8008064:	4611      	mov	r1, r2
 8008066:	6878      	ldr	r0, [r7, #4]
 8008068:	4798      	blx	r3
 800806a:	4603      	mov	r3, r0
 800806c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800806e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008070:	4618      	mov	r0, r3
 8008072:	3710      	adds	r7, #16
 8008074:	46bd      	mov	sp, r7
 8008076:	bd80      	pop	{r7, pc}

08008078 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008078:	b580      	push	{r7, lr}
 800807a:	b082      	sub	sp, #8
 800807c:	af00      	add	r7, sp, #0
 800807e:	6078      	str	r0, [r7, #4]
 8008080:	460b      	mov	r3, r1
 8008082:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800808a:	2b00      	cmp	r3, #0
 800808c:	d007      	beq.n	800809e <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008094:	685b      	ldr	r3, [r3, #4]
 8008096:	78fa      	ldrb	r2, [r7, #3]
 8008098:	4611      	mov	r1, r2
 800809a:	6878      	ldr	r0, [r7, #4]
 800809c:	4798      	blx	r3
  }

  return USBD_OK;
 800809e:	2300      	movs	r3, #0
}
 80080a0:	4618      	mov	r0, r3
 80080a2:	3708      	adds	r7, #8
 80080a4:	46bd      	mov	sp, r7
 80080a6:	bd80      	pop	{r7, pc}

080080a8 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80080a8:	b580      	push	{r7, lr}
 80080aa:	b084      	sub	sp, #16
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	6078      	str	r0, [r7, #4]
 80080b0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80080b8:	6839      	ldr	r1, [r7, #0]
 80080ba:	4618      	mov	r0, r3
 80080bc:	f000 ff16 	bl	8008eec <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	2201      	movs	r2, #1
 80080c4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80080ce:	461a      	mov	r2, r3
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80080dc:	f003 031f 	and.w	r3, r3, #31
 80080e0:	2b01      	cmp	r3, #1
 80080e2:	d00e      	beq.n	8008102 <USBD_LL_SetupStage+0x5a>
 80080e4:	2b01      	cmp	r3, #1
 80080e6:	d302      	bcc.n	80080ee <USBD_LL_SetupStage+0x46>
 80080e8:	2b02      	cmp	r3, #2
 80080ea:	d014      	beq.n	8008116 <USBD_LL_SetupStage+0x6e>
 80080ec:	e01d      	b.n	800812a <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80080f4:	4619      	mov	r1, r3
 80080f6:	6878      	ldr	r0, [r7, #4]
 80080f8:	f000 f9d6 	bl	80084a8 <USBD_StdDevReq>
 80080fc:	4603      	mov	r3, r0
 80080fe:	73fb      	strb	r3, [r7, #15]
      break;
 8008100:	e020      	b.n	8008144 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008108:	4619      	mov	r1, r3
 800810a:	6878      	ldr	r0, [r7, #4]
 800810c:	f000 fa3a 	bl	8008584 <USBD_StdItfReq>
 8008110:	4603      	mov	r3, r0
 8008112:	73fb      	strb	r3, [r7, #15]
      break;
 8008114:	e016      	b.n	8008144 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800811c:	4619      	mov	r1, r3
 800811e:	6878      	ldr	r0, [r7, #4]
 8008120:	f000 fa76 	bl	8008610 <USBD_StdEPReq>
 8008124:	4603      	mov	r3, r0
 8008126:	73fb      	strb	r3, [r7, #15]
      break;
 8008128:	e00c      	b.n	8008144 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008130:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008134:	b2db      	uxtb	r3, r3
 8008136:	4619      	mov	r1, r3
 8008138:	6878      	ldr	r0, [r7, #4]
 800813a:	f001 fb9b 	bl	8009874 <USBD_LL_StallEP>
 800813e:	4603      	mov	r3, r0
 8008140:	73fb      	strb	r3, [r7, #15]
      break;
 8008142:	bf00      	nop
  }

  return ret;
 8008144:	7bfb      	ldrb	r3, [r7, #15]
}
 8008146:	4618      	mov	r0, r3
 8008148:	3710      	adds	r7, #16
 800814a:	46bd      	mov	sp, r7
 800814c:	bd80      	pop	{r7, pc}

0800814e <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800814e:	b580      	push	{r7, lr}
 8008150:	b086      	sub	sp, #24
 8008152:	af00      	add	r7, sp, #0
 8008154:	60f8      	str	r0, [r7, #12]
 8008156:	460b      	mov	r3, r1
 8008158:	607a      	str	r2, [r7, #4]
 800815a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800815c:	7afb      	ldrb	r3, [r7, #11]
 800815e:	2b00      	cmp	r3, #0
 8008160:	d137      	bne.n	80081d2 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008168:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008170:	2b03      	cmp	r3, #3
 8008172:	d14a      	bne.n	800820a <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8008174:	693b      	ldr	r3, [r7, #16]
 8008176:	689a      	ldr	r2, [r3, #8]
 8008178:	693b      	ldr	r3, [r7, #16]
 800817a:	68db      	ldr	r3, [r3, #12]
 800817c:	429a      	cmp	r2, r3
 800817e:	d913      	bls.n	80081a8 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008180:	693b      	ldr	r3, [r7, #16]
 8008182:	689a      	ldr	r2, [r3, #8]
 8008184:	693b      	ldr	r3, [r7, #16]
 8008186:	68db      	ldr	r3, [r3, #12]
 8008188:	1ad2      	subs	r2, r2, r3
 800818a:	693b      	ldr	r3, [r7, #16]
 800818c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800818e:	693b      	ldr	r3, [r7, #16]
 8008190:	68da      	ldr	r2, [r3, #12]
 8008192:	693b      	ldr	r3, [r7, #16]
 8008194:	689b      	ldr	r3, [r3, #8]
 8008196:	4293      	cmp	r3, r2
 8008198:	bf28      	it	cs
 800819a:	4613      	movcs	r3, r2
 800819c:	461a      	mov	r2, r3
 800819e:	6879      	ldr	r1, [r7, #4]
 80081a0:	68f8      	ldr	r0, [r7, #12]
 80081a2:	f000 ff97 	bl	80090d4 <USBD_CtlContinueRx>
 80081a6:	e030      	b.n	800820a <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081ae:	691b      	ldr	r3, [r3, #16]
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d00a      	beq.n	80081ca <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80081ba:	2b03      	cmp	r3, #3
 80081bc:	d105      	bne.n	80081ca <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081c4:	691b      	ldr	r3, [r3, #16]
 80081c6:	68f8      	ldr	r0, [r7, #12]
 80081c8:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 80081ca:	68f8      	ldr	r0, [r7, #12]
 80081cc:	f000 ff93 	bl	80090f6 <USBD_CtlSendStatus>
 80081d0:	e01b      	b.n	800820a <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081d8:	699b      	ldr	r3, [r3, #24]
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d013      	beq.n	8008206 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80081e4:	2b03      	cmp	r3, #3
 80081e6:	d10e      	bne.n	8008206 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081ee:	699b      	ldr	r3, [r3, #24]
 80081f0:	7afa      	ldrb	r2, [r7, #11]
 80081f2:	4611      	mov	r1, r2
 80081f4:	68f8      	ldr	r0, [r7, #12]
 80081f6:	4798      	blx	r3
 80081f8:	4603      	mov	r3, r0
 80081fa:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 80081fc:	7dfb      	ldrb	r3, [r7, #23]
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d003      	beq.n	800820a <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 8008202:	7dfb      	ldrb	r3, [r7, #23]
 8008204:	e002      	b.n	800820c <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008206:	2303      	movs	r3, #3
 8008208:	e000      	b.n	800820c <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 800820a:	2300      	movs	r3, #0
}
 800820c:	4618      	mov	r0, r3
 800820e:	3718      	adds	r7, #24
 8008210:	46bd      	mov	sp, r7
 8008212:	bd80      	pop	{r7, pc}

08008214 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008214:	b580      	push	{r7, lr}
 8008216:	b086      	sub	sp, #24
 8008218:	af00      	add	r7, sp, #0
 800821a:	60f8      	str	r0, [r7, #12]
 800821c:	460b      	mov	r3, r1
 800821e:	607a      	str	r2, [r7, #4]
 8008220:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8008222:	7afb      	ldrb	r3, [r7, #11]
 8008224:	2b00      	cmp	r3, #0
 8008226:	d16a      	bne.n	80082fe <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	3314      	adds	r3, #20
 800822c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008234:	2b02      	cmp	r3, #2
 8008236:	d155      	bne.n	80082e4 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 8008238:	693b      	ldr	r3, [r7, #16]
 800823a:	689a      	ldr	r2, [r3, #8]
 800823c:	693b      	ldr	r3, [r7, #16]
 800823e:	68db      	ldr	r3, [r3, #12]
 8008240:	429a      	cmp	r2, r3
 8008242:	d914      	bls.n	800826e <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008244:	693b      	ldr	r3, [r7, #16]
 8008246:	689a      	ldr	r2, [r3, #8]
 8008248:	693b      	ldr	r3, [r7, #16]
 800824a:	68db      	ldr	r3, [r3, #12]
 800824c:	1ad2      	subs	r2, r2, r3
 800824e:	693b      	ldr	r3, [r7, #16]
 8008250:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008252:	693b      	ldr	r3, [r7, #16]
 8008254:	689b      	ldr	r3, [r3, #8]
 8008256:	461a      	mov	r2, r3
 8008258:	6879      	ldr	r1, [r7, #4]
 800825a:	68f8      	ldr	r0, [r7, #12]
 800825c:	f000 ff0c 	bl	8009078 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008260:	2300      	movs	r3, #0
 8008262:	2200      	movs	r2, #0
 8008264:	2100      	movs	r1, #0
 8008266:	68f8      	ldr	r0, [r7, #12]
 8008268:	f001 fbaf 	bl	80099ca <USBD_LL_PrepareReceive>
 800826c:	e03a      	b.n	80082e4 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800826e:	693b      	ldr	r3, [r7, #16]
 8008270:	68da      	ldr	r2, [r3, #12]
 8008272:	693b      	ldr	r3, [r7, #16]
 8008274:	689b      	ldr	r3, [r3, #8]
 8008276:	429a      	cmp	r2, r3
 8008278:	d11c      	bne.n	80082b4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800827a:	693b      	ldr	r3, [r7, #16]
 800827c:	685a      	ldr	r2, [r3, #4]
 800827e:	693b      	ldr	r3, [r7, #16]
 8008280:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008282:	429a      	cmp	r2, r3
 8008284:	d316      	bcc.n	80082b4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008286:	693b      	ldr	r3, [r7, #16]
 8008288:	685a      	ldr	r2, [r3, #4]
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008290:	429a      	cmp	r2, r3
 8008292:	d20f      	bcs.n	80082b4 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008294:	2200      	movs	r2, #0
 8008296:	2100      	movs	r1, #0
 8008298:	68f8      	ldr	r0, [r7, #12]
 800829a:	f000 feed 	bl	8009078 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	2200      	movs	r2, #0
 80082a2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80082a6:	2300      	movs	r3, #0
 80082a8:	2200      	movs	r2, #0
 80082aa:	2100      	movs	r1, #0
 80082ac:	68f8      	ldr	r0, [r7, #12]
 80082ae:	f001 fb8c 	bl	80099ca <USBD_LL_PrepareReceive>
 80082b2:	e017      	b.n	80082e4 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082ba:	68db      	ldr	r3, [r3, #12]
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d00a      	beq.n	80082d6 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80082c6:	2b03      	cmp	r3, #3
 80082c8:	d105      	bne.n	80082d6 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082d0:	68db      	ldr	r3, [r3, #12]
 80082d2:	68f8      	ldr	r0, [r7, #12]
 80082d4:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80082d6:	2180      	movs	r1, #128	; 0x80
 80082d8:	68f8      	ldr	r0, [r7, #12]
 80082da:	f001 facb 	bl	8009874 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80082de:	68f8      	ldr	r0, [r7, #12]
 80082e0:	f000 ff1c 	bl	800911c <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80082ea:	2b01      	cmp	r3, #1
 80082ec:	d123      	bne.n	8008336 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80082ee:	68f8      	ldr	r0, [r7, #12]
 80082f0:	f7ff fe9b 	bl	800802a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	2200      	movs	r2, #0
 80082f8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80082fc:	e01b      	b.n	8008336 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008304:	695b      	ldr	r3, [r3, #20]
 8008306:	2b00      	cmp	r3, #0
 8008308:	d013      	beq.n	8008332 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8008310:	2b03      	cmp	r3, #3
 8008312:	d10e      	bne.n	8008332 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800831a:	695b      	ldr	r3, [r3, #20]
 800831c:	7afa      	ldrb	r2, [r7, #11]
 800831e:	4611      	mov	r1, r2
 8008320:	68f8      	ldr	r0, [r7, #12]
 8008322:	4798      	blx	r3
 8008324:	4603      	mov	r3, r0
 8008326:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8008328:	7dfb      	ldrb	r3, [r7, #23]
 800832a:	2b00      	cmp	r3, #0
 800832c:	d003      	beq.n	8008336 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 800832e:	7dfb      	ldrb	r3, [r7, #23]
 8008330:	e002      	b.n	8008338 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008332:	2303      	movs	r3, #3
 8008334:	e000      	b.n	8008338 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 8008336:	2300      	movs	r3, #0
}
 8008338:	4618      	mov	r0, r3
 800833a:	3718      	adds	r7, #24
 800833c:	46bd      	mov	sp, r7
 800833e:	bd80      	pop	{r7, pc}

08008340 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008340:	b580      	push	{r7, lr}
 8008342:	b082      	sub	sp, #8
 8008344:	af00      	add	r7, sp, #0
 8008346:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	2201      	movs	r2, #1
 800834c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	2200      	movs	r2, #0
 8008354:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	2200      	movs	r2, #0
 800835c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	2200      	movs	r2, #0
 8008362:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800836c:	2b00      	cmp	r3, #0
 800836e:	d009      	beq.n	8008384 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008376:	685b      	ldr	r3, [r3, #4]
 8008378:	687a      	ldr	r2, [r7, #4]
 800837a:	6852      	ldr	r2, [r2, #4]
 800837c:	b2d2      	uxtb	r2, r2
 800837e:	4611      	mov	r1, r2
 8008380:	6878      	ldr	r0, [r7, #4]
 8008382:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008384:	2340      	movs	r3, #64	; 0x40
 8008386:	2200      	movs	r2, #0
 8008388:	2100      	movs	r1, #0
 800838a:	6878      	ldr	r0, [r7, #4]
 800838c:	f001 fa2d 	bl	80097ea <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	2201      	movs	r2, #1
 8008394:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	2240      	movs	r2, #64	; 0x40
 800839c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80083a0:	2340      	movs	r3, #64	; 0x40
 80083a2:	2200      	movs	r2, #0
 80083a4:	2180      	movs	r1, #128	; 0x80
 80083a6:	6878      	ldr	r0, [r7, #4]
 80083a8:	f001 fa1f 	bl	80097ea <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	2201      	movs	r2, #1
 80083b0:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	2240      	movs	r2, #64	; 0x40
 80083b6:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80083b8:	2300      	movs	r3, #0
}
 80083ba:	4618      	mov	r0, r3
 80083bc:	3708      	adds	r7, #8
 80083be:	46bd      	mov	sp, r7
 80083c0:	bd80      	pop	{r7, pc}

080083c2 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80083c2:	b480      	push	{r7}
 80083c4:	b083      	sub	sp, #12
 80083c6:	af00      	add	r7, sp, #0
 80083c8:	6078      	str	r0, [r7, #4]
 80083ca:	460b      	mov	r3, r1
 80083cc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	78fa      	ldrb	r2, [r7, #3]
 80083d2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80083d4:	2300      	movs	r3, #0
}
 80083d6:	4618      	mov	r0, r3
 80083d8:	370c      	adds	r7, #12
 80083da:	46bd      	mov	sp, r7
 80083dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e0:	4770      	bx	lr

080083e2 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80083e2:	b480      	push	{r7}
 80083e4:	b083      	sub	sp, #12
 80083e6:	af00      	add	r7, sp, #0
 80083e8:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	2204      	movs	r2, #4
 80083fa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80083fe:	2300      	movs	r3, #0
}
 8008400:	4618      	mov	r0, r3
 8008402:	370c      	adds	r7, #12
 8008404:	46bd      	mov	sp, r7
 8008406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800840a:	4770      	bx	lr

0800840c <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800840c:	b480      	push	{r7}
 800840e:	b083      	sub	sp, #12
 8008410:	af00      	add	r7, sp, #0
 8008412:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800841a:	2b04      	cmp	r3, #4
 800841c:	d105      	bne.n	800842a <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800842a:	2300      	movs	r3, #0
}
 800842c:	4618      	mov	r0, r3
 800842e:	370c      	adds	r7, #12
 8008430:	46bd      	mov	sp, r7
 8008432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008436:	4770      	bx	lr

08008438 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008438:	b580      	push	{r7, lr}
 800843a:	b082      	sub	sp, #8
 800843c:	af00      	add	r7, sp, #0
 800843e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008446:	2b03      	cmp	r3, #3
 8008448:	d10b      	bne.n	8008462 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008450:	69db      	ldr	r3, [r3, #28]
 8008452:	2b00      	cmp	r3, #0
 8008454:	d005      	beq.n	8008462 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800845c:	69db      	ldr	r3, [r3, #28]
 800845e:	6878      	ldr	r0, [r7, #4]
 8008460:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008462:	2300      	movs	r3, #0
}
 8008464:	4618      	mov	r0, r3
 8008466:	3708      	adds	r7, #8
 8008468:	46bd      	mov	sp, r7
 800846a:	bd80      	pop	{r7, pc}

0800846c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800846c:	b480      	push	{r7}
 800846e:	b087      	sub	sp, #28
 8008470:	af00      	add	r7, sp, #0
 8008472:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008478:	697b      	ldr	r3, [r7, #20]
 800847a:	781b      	ldrb	r3, [r3, #0]
 800847c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800847e:	697b      	ldr	r3, [r7, #20]
 8008480:	3301      	adds	r3, #1
 8008482:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008484:	697b      	ldr	r3, [r7, #20]
 8008486:	781b      	ldrb	r3, [r3, #0]
 8008488:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800848a:	8a3b      	ldrh	r3, [r7, #16]
 800848c:	021b      	lsls	r3, r3, #8
 800848e:	b21a      	sxth	r2, r3
 8008490:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008494:	4313      	orrs	r3, r2
 8008496:	b21b      	sxth	r3, r3
 8008498:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800849a:	89fb      	ldrh	r3, [r7, #14]
}
 800849c:	4618      	mov	r0, r3
 800849e:	371c      	adds	r7, #28
 80084a0:	46bd      	mov	sp, r7
 80084a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a6:	4770      	bx	lr

080084a8 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80084a8:	b580      	push	{r7, lr}
 80084aa:	b084      	sub	sp, #16
 80084ac:	af00      	add	r7, sp, #0
 80084ae:	6078      	str	r0, [r7, #4]
 80084b0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80084b2:	2300      	movs	r3, #0
 80084b4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80084b6:	683b      	ldr	r3, [r7, #0]
 80084b8:	781b      	ldrb	r3, [r3, #0]
 80084ba:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80084be:	2b20      	cmp	r3, #32
 80084c0:	d004      	beq.n	80084cc <USBD_StdDevReq+0x24>
 80084c2:	2b40      	cmp	r3, #64	; 0x40
 80084c4:	d002      	beq.n	80084cc <USBD_StdDevReq+0x24>
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d00a      	beq.n	80084e0 <USBD_StdDevReq+0x38>
 80084ca:	e050      	b.n	800856e <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80084d2:	689b      	ldr	r3, [r3, #8]
 80084d4:	6839      	ldr	r1, [r7, #0]
 80084d6:	6878      	ldr	r0, [r7, #4]
 80084d8:	4798      	blx	r3
 80084da:	4603      	mov	r3, r0
 80084dc:	73fb      	strb	r3, [r7, #15]
    break;
 80084de:	e04b      	b.n	8008578 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80084e0:	683b      	ldr	r3, [r7, #0]
 80084e2:	785b      	ldrb	r3, [r3, #1]
 80084e4:	2b09      	cmp	r3, #9
 80084e6:	d83c      	bhi.n	8008562 <USBD_StdDevReq+0xba>
 80084e8:	a201      	add	r2, pc, #4	; (adr r2, 80084f0 <USBD_StdDevReq+0x48>)
 80084ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084ee:	bf00      	nop
 80084f0:	08008545 	.word	0x08008545
 80084f4:	08008559 	.word	0x08008559
 80084f8:	08008563 	.word	0x08008563
 80084fc:	0800854f 	.word	0x0800854f
 8008500:	08008563 	.word	0x08008563
 8008504:	08008523 	.word	0x08008523
 8008508:	08008519 	.word	0x08008519
 800850c:	08008563 	.word	0x08008563
 8008510:	0800853b 	.word	0x0800853b
 8008514:	0800852d 	.word	0x0800852d
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 8008518:	6839      	ldr	r1, [r7, #0]
 800851a:	6878      	ldr	r0, [r7, #4]
 800851c:	f000 f9d0 	bl	80088c0 <USBD_GetDescriptor>
      break;
 8008520:	e024      	b.n	800856c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 8008522:	6839      	ldr	r1, [r7, #0]
 8008524:	6878      	ldr	r0, [r7, #4]
 8008526:	f000 fb5f 	bl	8008be8 <USBD_SetAddress>
      break;
 800852a:	e01f      	b.n	800856c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 800852c:	6839      	ldr	r1, [r7, #0]
 800852e:	6878      	ldr	r0, [r7, #4]
 8008530:	f000 fb9c 	bl	8008c6c <USBD_SetConfig>
 8008534:	4603      	mov	r3, r0
 8008536:	73fb      	strb	r3, [r7, #15]
      break;
 8008538:	e018      	b.n	800856c <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 800853a:	6839      	ldr	r1, [r7, #0]
 800853c:	6878      	ldr	r0, [r7, #4]
 800853e:	f000 fc39 	bl	8008db4 <USBD_GetConfig>
      break;
 8008542:	e013      	b.n	800856c <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 8008544:	6839      	ldr	r1, [r7, #0]
 8008546:	6878      	ldr	r0, [r7, #4]
 8008548:	f000 fc68 	bl	8008e1c <USBD_GetStatus>
      break;
 800854c:	e00e      	b.n	800856c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 800854e:	6839      	ldr	r1, [r7, #0]
 8008550:	6878      	ldr	r0, [r7, #4]
 8008552:	f000 fc96 	bl	8008e82 <USBD_SetFeature>
      break;
 8008556:	e009      	b.n	800856c <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 8008558:	6839      	ldr	r1, [r7, #0]
 800855a:	6878      	ldr	r0, [r7, #4]
 800855c:	f000 fca5 	bl	8008eaa <USBD_ClrFeature>
      break;
 8008560:	e004      	b.n	800856c <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 8008562:	6839      	ldr	r1, [r7, #0]
 8008564:	6878      	ldr	r0, [r7, #4]
 8008566:	f000 fcfb 	bl	8008f60 <USBD_CtlError>
      break;
 800856a:	bf00      	nop
    }
    break;
 800856c:	e004      	b.n	8008578 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 800856e:	6839      	ldr	r1, [r7, #0]
 8008570:	6878      	ldr	r0, [r7, #4]
 8008572:	f000 fcf5 	bl	8008f60 <USBD_CtlError>
    break;
 8008576:	bf00      	nop
  }

  return ret;
 8008578:	7bfb      	ldrb	r3, [r7, #15]
}
 800857a:	4618      	mov	r0, r3
 800857c:	3710      	adds	r7, #16
 800857e:	46bd      	mov	sp, r7
 8008580:	bd80      	pop	{r7, pc}
 8008582:	bf00      	nop

08008584 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008584:	b580      	push	{r7, lr}
 8008586:	b084      	sub	sp, #16
 8008588:	af00      	add	r7, sp, #0
 800858a:	6078      	str	r0, [r7, #4]
 800858c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800858e:	2300      	movs	r3, #0
 8008590:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008592:	683b      	ldr	r3, [r7, #0]
 8008594:	781b      	ldrb	r3, [r3, #0]
 8008596:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800859a:	2b20      	cmp	r3, #32
 800859c:	d003      	beq.n	80085a6 <USBD_StdItfReq+0x22>
 800859e:	2b40      	cmp	r3, #64	; 0x40
 80085a0:	d001      	beq.n	80085a6 <USBD_StdItfReq+0x22>
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d12a      	bne.n	80085fc <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80085ac:	3b01      	subs	r3, #1
 80085ae:	2b02      	cmp	r3, #2
 80085b0:	d81d      	bhi.n	80085ee <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80085b2:	683b      	ldr	r3, [r7, #0]
 80085b4:	889b      	ldrh	r3, [r3, #4]
 80085b6:	b2db      	uxtb	r3, r3
 80085b8:	2b01      	cmp	r3, #1
 80085ba:	d813      	bhi.n	80085e4 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80085c2:	689b      	ldr	r3, [r3, #8]
 80085c4:	6839      	ldr	r1, [r7, #0]
 80085c6:	6878      	ldr	r0, [r7, #4]
 80085c8:	4798      	blx	r3
 80085ca:	4603      	mov	r3, r0
 80085cc:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 80085ce:	683b      	ldr	r3, [r7, #0]
 80085d0:	88db      	ldrh	r3, [r3, #6]
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d110      	bne.n	80085f8 <USBD_StdItfReq+0x74>
 80085d6:	7bfb      	ldrb	r3, [r7, #15]
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d10d      	bne.n	80085f8 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 80085dc:	6878      	ldr	r0, [r7, #4]
 80085de:	f000 fd8a 	bl	80090f6 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 80085e2:	e009      	b.n	80085f8 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 80085e4:	6839      	ldr	r1, [r7, #0]
 80085e6:	6878      	ldr	r0, [r7, #4]
 80085e8:	f000 fcba 	bl	8008f60 <USBD_CtlError>
      break;
 80085ec:	e004      	b.n	80085f8 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 80085ee:	6839      	ldr	r1, [r7, #0]
 80085f0:	6878      	ldr	r0, [r7, #4]
 80085f2:	f000 fcb5 	bl	8008f60 <USBD_CtlError>
      break;
 80085f6:	e000      	b.n	80085fa <USBD_StdItfReq+0x76>
      break;
 80085f8:	bf00      	nop
    }
    break;
 80085fa:	e004      	b.n	8008606 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 80085fc:	6839      	ldr	r1, [r7, #0]
 80085fe:	6878      	ldr	r0, [r7, #4]
 8008600:	f000 fcae 	bl	8008f60 <USBD_CtlError>
    break;
 8008604:	bf00      	nop
  }

  return ret;
 8008606:	7bfb      	ldrb	r3, [r7, #15]
}
 8008608:	4618      	mov	r0, r3
 800860a:	3710      	adds	r7, #16
 800860c:	46bd      	mov	sp, r7
 800860e:	bd80      	pop	{r7, pc}

08008610 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008610:	b580      	push	{r7, lr}
 8008612:	b084      	sub	sp, #16
 8008614:	af00      	add	r7, sp, #0
 8008616:	6078      	str	r0, [r7, #4]
 8008618:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800861a:	2300      	movs	r3, #0
 800861c:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800861e:	683b      	ldr	r3, [r7, #0]
 8008620:	889b      	ldrh	r3, [r3, #4]
 8008622:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008624:	683b      	ldr	r3, [r7, #0]
 8008626:	781b      	ldrb	r3, [r3, #0]
 8008628:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800862c:	2b20      	cmp	r3, #32
 800862e:	d004      	beq.n	800863a <USBD_StdEPReq+0x2a>
 8008630:	2b40      	cmp	r3, #64	; 0x40
 8008632:	d002      	beq.n	800863a <USBD_StdEPReq+0x2a>
 8008634:	2b00      	cmp	r3, #0
 8008636:	d00a      	beq.n	800864e <USBD_StdEPReq+0x3e>
 8008638:	e137      	b.n	80088aa <USBD_StdEPReq+0x29a>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008640:	689b      	ldr	r3, [r3, #8]
 8008642:	6839      	ldr	r1, [r7, #0]
 8008644:	6878      	ldr	r0, [r7, #4]
 8008646:	4798      	blx	r3
 8008648:	4603      	mov	r3, r0
 800864a:	73fb      	strb	r3, [r7, #15]
    break;
 800864c:	e132      	b.n	80088b4 <USBD_StdEPReq+0x2a4>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800864e:	683b      	ldr	r3, [r7, #0]
 8008650:	785b      	ldrb	r3, [r3, #1]
 8008652:	2b01      	cmp	r3, #1
 8008654:	d03e      	beq.n	80086d4 <USBD_StdEPReq+0xc4>
 8008656:	2b03      	cmp	r3, #3
 8008658:	d002      	beq.n	8008660 <USBD_StdEPReq+0x50>
 800865a:	2b00      	cmp	r3, #0
 800865c:	d079      	beq.n	8008752 <USBD_StdEPReq+0x142>
 800865e:	e11e      	b.n	800889e <USBD_StdEPReq+0x28e>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008666:	2b02      	cmp	r3, #2
 8008668:	d002      	beq.n	8008670 <USBD_StdEPReq+0x60>
 800866a:	2b03      	cmp	r3, #3
 800866c:	d015      	beq.n	800869a <USBD_StdEPReq+0x8a>
 800866e:	e02b      	b.n	80086c8 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008670:	7bbb      	ldrb	r3, [r7, #14]
 8008672:	2b00      	cmp	r3, #0
 8008674:	d00c      	beq.n	8008690 <USBD_StdEPReq+0x80>
 8008676:	7bbb      	ldrb	r3, [r7, #14]
 8008678:	2b80      	cmp	r3, #128	; 0x80
 800867a:	d009      	beq.n	8008690 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800867c:	7bbb      	ldrb	r3, [r7, #14]
 800867e:	4619      	mov	r1, r3
 8008680:	6878      	ldr	r0, [r7, #4]
 8008682:	f001 f8f7 	bl	8009874 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008686:	2180      	movs	r1, #128	; 0x80
 8008688:	6878      	ldr	r0, [r7, #4]
 800868a:	f001 f8f3 	bl	8009874 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800868e:	e020      	b.n	80086d2 <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 8008690:	6839      	ldr	r1, [r7, #0]
 8008692:	6878      	ldr	r0, [r7, #4]
 8008694:	f000 fc64 	bl	8008f60 <USBD_CtlError>
        break;
 8008698:	e01b      	b.n	80086d2 <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800869a:	683b      	ldr	r3, [r7, #0]
 800869c:	885b      	ldrh	r3, [r3, #2]
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d10e      	bne.n	80086c0 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80086a2:	7bbb      	ldrb	r3, [r7, #14]
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d00b      	beq.n	80086c0 <USBD_StdEPReq+0xb0>
 80086a8:	7bbb      	ldrb	r3, [r7, #14]
 80086aa:	2b80      	cmp	r3, #128	; 0x80
 80086ac:	d008      	beq.n	80086c0 <USBD_StdEPReq+0xb0>
 80086ae:	683b      	ldr	r3, [r7, #0]
 80086b0:	88db      	ldrh	r3, [r3, #6]
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d104      	bne.n	80086c0 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 80086b6:	7bbb      	ldrb	r3, [r7, #14]
 80086b8:	4619      	mov	r1, r3
 80086ba:	6878      	ldr	r0, [r7, #4]
 80086bc:	f001 f8da 	bl	8009874 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 80086c0:	6878      	ldr	r0, [r7, #4]
 80086c2:	f000 fd18 	bl	80090f6 <USBD_CtlSendStatus>

        break;
 80086c6:	e004      	b.n	80086d2 <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 80086c8:	6839      	ldr	r1, [r7, #0]
 80086ca:	6878      	ldr	r0, [r7, #4]
 80086cc:	f000 fc48 	bl	8008f60 <USBD_CtlError>
        break;
 80086d0:	bf00      	nop
      }
      break;
 80086d2:	e0e9      	b.n	80088a8 <USBD_StdEPReq+0x298>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80086da:	2b02      	cmp	r3, #2
 80086dc:	d002      	beq.n	80086e4 <USBD_StdEPReq+0xd4>
 80086de:	2b03      	cmp	r3, #3
 80086e0:	d015      	beq.n	800870e <USBD_StdEPReq+0xfe>
 80086e2:	e02f      	b.n	8008744 <USBD_StdEPReq+0x134>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80086e4:	7bbb      	ldrb	r3, [r7, #14]
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d00c      	beq.n	8008704 <USBD_StdEPReq+0xf4>
 80086ea:	7bbb      	ldrb	r3, [r7, #14]
 80086ec:	2b80      	cmp	r3, #128	; 0x80
 80086ee:	d009      	beq.n	8008704 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 80086f0:	7bbb      	ldrb	r3, [r7, #14]
 80086f2:	4619      	mov	r1, r3
 80086f4:	6878      	ldr	r0, [r7, #4]
 80086f6:	f001 f8bd 	bl	8009874 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80086fa:	2180      	movs	r1, #128	; 0x80
 80086fc:	6878      	ldr	r0, [r7, #4]
 80086fe:	f001 f8b9 	bl	8009874 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8008702:	e025      	b.n	8008750 <USBD_StdEPReq+0x140>
          USBD_CtlError(pdev, req);
 8008704:	6839      	ldr	r1, [r7, #0]
 8008706:	6878      	ldr	r0, [r7, #4]
 8008708:	f000 fc2a 	bl	8008f60 <USBD_CtlError>
        break;
 800870c:	e020      	b.n	8008750 <USBD_StdEPReq+0x140>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800870e:	683b      	ldr	r3, [r7, #0]
 8008710:	885b      	ldrh	r3, [r3, #2]
 8008712:	2b00      	cmp	r3, #0
 8008714:	d11b      	bne.n	800874e <USBD_StdEPReq+0x13e>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8008716:	7bbb      	ldrb	r3, [r7, #14]
 8008718:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800871c:	2b00      	cmp	r3, #0
 800871e:	d004      	beq.n	800872a <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008720:	7bbb      	ldrb	r3, [r7, #14]
 8008722:	4619      	mov	r1, r3
 8008724:	6878      	ldr	r0, [r7, #4]
 8008726:	f001 f8c4 	bl	80098b2 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 800872a:	6878      	ldr	r0, [r7, #4]
 800872c:	f000 fce3 	bl	80090f6 <USBD_CtlSendStatus>
          ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008736:	689b      	ldr	r3, [r3, #8]
 8008738:	6839      	ldr	r1, [r7, #0]
 800873a:	6878      	ldr	r0, [r7, #4]
 800873c:	4798      	blx	r3
 800873e:	4603      	mov	r3, r0
 8008740:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008742:	e004      	b.n	800874e <USBD_StdEPReq+0x13e>

      default:
        USBD_CtlError(pdev, req);
 8008744:	6839      	ldr	r1, [r7, #0]
 8008746:	6878      	ldr	r0, [r7, #4]
 8008748:	f000 fc0a 	bl	8008f60 <USBD_CtlError>
        break;
 800874c:	e000      	b.n	8008750 <USBD_StdEPReq+0x140>
        break;
 800874e:	bf00      	nop
      }
      break;
 8008750:	e0aa      	b.n	80088a8 <USBD_StdEPReq+0x298>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008758:	2b02      	cmp	r3, #2
 800875a:	d002      	beq.n	8008762 <USBD_StdEPReq+0x152>
 800875c:	2b03      	cmp	r3, #3
 800875e:	d032      	beq.n	80087c6 <USBD_StdEPReq+0x1b6>
 8008760:	e097      	b.n	8008892 <USBD_StdEPReq+0x282>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008762:	7bbb      	ldrb	r3, [r7, #14]
 8008764:	2b00      	cmp	r3, #0
 8008766:	d007      	beq.n	8008778 <USBD_StdEPReq+0x168>
 8008768:	7bbb      	ldrb	r3, [r7, #14]
 800876a:	2b80      	cmp	r3, #128	; 0x80
 800876c:	d004      	beq.n	8008778 <USBD_StdEPReq+0x168>
        {
          USBD_CtlError(pdev, req);
 800876e:	6839      	ldr	r1, [r7, #0]
 8008770:	6878      	ldr	r0, [r7, #4]
 8008772:	f000 fbf5 	bl	8008f60 <USBD_CtlError>
          break;
 8008776:	e091      	b.n	800889c <USBD_StdEPReq+0x28c>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008778:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800877c:	2b00      	cmp	r3, #0
 800877e:	da0b      	bge.n	8008798 <USBD_StdEPReq+0x188>
 8008780:	7bbb      	ldrb	r3, [r7, #14]
 8008782:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008786:	4613      	mov	r3, r2
 8008788:	009b      	lsls	r3, r3, #2
 800878a:	4413      	add	r3, r2
 800878c:	009b      	lsls	r3, r3, #2
 800878e:	3310      	adds	r3, #16
 8008790:	687a      	ldr	r2, [r7, #4]
 8008792:	4413      	add	r3, r2
 8008794:	3304      	adds	r3, #4
 8008796:	e00b      	b.n	80087b0 <USBD_StdEPReq+0x1a0>
              &pdev->ep_out[ep_addr & 0x7FU];
 8008798:	7bbb      	ldrb	r3, [r7, #14]
 800879a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800879e:	4613      	mov	r3, r2
 80087a0:	009b      	lsls	r3, r3, #2
 80087a2:	4413      	add	r3, r2
 80087a4:	009b      	lsls	r3, r3, #2
 80087a6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80087aa:	687a      	ldr	r2, [r7, #4]
 80087ac:	4413      	add	r3, r2
 80087ae:	3304      	adds	r3, #4
 80087b0:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 80087b2:	68bb      	ldr	r3, [r7, #8]
 80087b4:	2200      	movs	r2, #0
 80087b6:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80087b8:	68bb      	ldr	r3, [r7, #8]
 80087ba:	2202      	movs	r2, #2
 80087bc:	4619      	mov	r1, r3
 80087be:	6878      	ldr	r0, [r7, #4]
 80087c0:	f000 fc3f 	bl	8009042 <USBD_CtlSendData>
        break;
 80087c4:	e06a      	b.n	800889c <USBD_StdEPReq+0x28c>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 80087c6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	da11      	bge.n	80087f2 <USBD_StdEPReq+0x1e2>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80087ce:	7bbb      	ldrb	r3, [r7, #14]
 80087d0:	f003 020f 	and.w	r2, r3, #15
 80087d4:	6879      	ldr	r1, [r7, #4]
 80087d6:	4613      	mov	r3, r2
 80087d8:	009b      	lsls	r3, r3, #2
 80087da:	4413      	add	r3, r2
 80087dc:	009b      	lsls	r3, r3, #2
 80087de:	440b      	add	r3, r1
 80087e0:	3324      	adds	r3, #36	; 0x24
 80087e2:	881b      	ldrh	r3, [r3, #0]
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d117      	bne.n	8008818 <USBD_StdEPReq+0x208>
          {
            USBD_CtlError(pdev, req);
 80087e8:	6839      	ldr	r1, [r7, #0]
 80087ea:	6878      	ldr	r0, [r7, #4]
 80087ec:	f000 fbb8 	bl	8008f60 <USBD_CtlError>
            break;
 80087f0:	e054      	b.n	800889c <USBD_StdEPReq+0x28c>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80087f2:	7bbb      	ldrb	r3, [r7, #14]
 80087f4:	f003 020f 	and.w	r2, r3, #15
 80087f8:	6879      	ldr	r1, [r7, #4]
 80087fa:	4613      	mov	r3, r2
 80087fc:	009b      	lsls	r3, r3, #2
 80087fe:	4413      	add	r3, r2
 8008800:	009b      	lsls	r3, r3, #2
 8008802:	440b      	add	r3, r1
 8008804:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008808:	881b      	ldrh	r3, [r3, #0]
 800880a:	2b00      	cmp	r3, #0
 800880c:	d104      	bne.n	8008818 <USBD_StdEPReq+0x208>
          {
            USBD_CtlError(pdev, req);
 800880e:	6839      	ldr	r1, [r7, #0]
 8008810:	6878      	ldr	r0, [r7, #4]
 8008812:	f000 fba5 	bl	8008f60 <USBD_CtlError>
            break;
 8008816:	e041      	b.n	800889c <USBD_StdEPReq+0x28c>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008818:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800881c:	2b00      	cmp	r3, #0
 800881e:	da0b      	bge.n	8008838 <USBD_StdEPReq+0x228>
 8008820:	7bbb      	ldrb	r3, [r7, #14]
 8008822:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008826:	4613      	mov	r3, r2
 8008828:	009b      	lsls	r3, r3, #2
 800882a:	4413      	add	r3, r2
 800882c:	009b      	lsls	r3, r3, #2
 800882e:	3310      	adds	r3, #16
 8008830:	687a      	ldr	r2, [r7, #4]
 8008832:	4413      	add	r3, r2
 8008834:	3304      	adds	r3, #4
 8008836:	e00b      	b.n	8008850 <USBD_StdEPReq+0x240>
              &pdev->ep_out[ep_addr & 0x7FU];
 8008838:	7bbb      	ldrb	r3, [r7, #14]
 800883a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800883e:	4613      	mov	r3, r2
 8008840:	009b      	lsls	r3, r3, #2
 8008842:	4413      	add	r3, r2
 8008844:	009b      	lsls	r3, r3, #2
 8008846:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800884a:	687a      	ldr	r2, [r7, #4]
 800884c:	4413      	add	r3, r2
 800884e:	3304      	adds	r3, #4
 8008850:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008852:	7bbb      	ldrb	r3, [r7, #14]
 8008854:	2b00      	cmp	r3, #0
 8008856:	d002      	beq.n	800885e <USBD_StdEPReq+0x24e>
 8008858:	7bbb      	ldrb	r3, [r7, #14]
 800885a:	2b80      	cmp	r3, #128	; 0x80
 800885c:	d103      	bne.n	8008866 <USBD_StdEPReq+0x256>
          {
            pep->status = 0x0000U;
 800885e:	68bb      	ldr	r3, [r7, #8]
 8008860:	2200      	movs	r2, #0
 8008862:	601a      	str	r2, [r3, #0]
 8008864:	e00e      	b.n	8008884 <USBD_StdEPReq+0x274>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008866:	7bbb      	ldrb	r3, [r7, #14]
 8008868:	4619      	mov	r1, r3
 800886a:	6878      	ldr	r0, [r7, #4]
 800886c:	f001 f840 	bl	80098f0 <USBD_LL_IsStallEP>
 8008870:	4603      	mov	r3, r0
 8008872:	2b00      	cmp	r3, #0
 8008874:	d003      	beq.n	800887e <USBD_StdEPReq+0x26e>
          {
            pep->status = 0x0001U;
 8008876:	68bb      	ldr	r3, [r7, #8]
 8008878:	2201      	movs	r2, #1
 800887a:	601a      	str	r2, [r3, #0]
 800887c:	e002      	b.n	8008884 <USBD_StdEPReq+0x274>
          }
          else
          {
            pep->status = 0x0000U;
 800887e:	68bb      	ldr	r3, [r7, #8]
 8008880:	2200      	movs	r2, #0
 8008882:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008884:	68bb      	ldr	r3, [r7, #8]
 8008886:	2202      	movs	r2, #2
 8008888:	4619      	mov	r1, r3
 800888a:	6878      	ldr	r0, [r7, #4]
 800888c:	f000 fbd9 	bl	8009042 <USBD_CtlSendData>
          break;
 8008890:	e004      	b.n	800889c <USBD_StdEPReq+0x28c>

      default:
        USBD_CtlError(pdev, req);
 8008892:	6839      	ldr	r1, [r7, #0]
 8008894:	6878      	ldr	r0, [r7, #4]
 8008896:	f000 fb63 	bl	8008f60 <USBD_CtlError>
        break;
 800889a:	bf00      	nop
      }
      break;
 800889c:	e004      	b.n	80088a8 <USBD_StdEPReq+0x298>

    default:
      USBD_CtlError(pdev, req);
 800889e:	6839      	ldr	r1, [r7, #0]
 80088a0:	6878      	ldr	r0, [r7, #4]
 80088a2:	f000 fb5d 	bl	8008f60 <USBD_CtlError>
      break;
 80088a6:	bf00      	nop
    }
    break;
 80088a8:	e004      	b.n	80088b4 <USBD_StdEPReq+0x2a4>

  default:
    USBD_CtlError(pdev, req);
 80088aa:	6839      	ldr	r1, [r7, #0]
 80088ac:	6878      	ldr	r0, [r7, #4]
 80088ae:	f000 fb57 	bl	8008f60 <USBD_CtlError>
    break;
 80088b2:	bf00      	nop
  }

  return ret;
 80088b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80088b6:	4618      	mov	r0, r3
 80088b8:	3710      	adds	r7, #16
 80088ba:	46bd      	mov	sp, r7
 80088bc:	bd80      	pop	{r7, pc}
	...

080088c0 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80088c0:	b580      	push	{r7, lr}
 80088c2:	b084      	sub	sp, #16
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	6078      	str	r0, [r7, #4]
 80088c8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80088ca:	2300      	movs	r3, #0
 80088cc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80088ce:	2300      	movs	r3, #0
 80088d0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80088d2:	2300      	movs	r3, #0
 80088d4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80088d6:	683b      	ldr	r3, [r7, #0]
 80088d8:	885b      	ldrh	r3, [r3, #2]
 80088da:	0a1b      	lsrs	r3, r3, #8
 80088dc:	b29b      	uxth	r3, r3
 80088de:	3b01      	subs	r3, #1
 80088e0:	2b0e      	cmp	r3, #14
 80088e2:	f200 8152 	bhi.w	8008b8a <USBD_GetDescriptor+0x2ca>
 80088e6:	a201      	add	r2, pc, #4	; (adr r2, 80088ec <USBD_GetDescriptor+0x2c>)
 80088e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088ec:	0800895d 	.word	0x0800895d
 80088f0:	08008975 	.word	0x08008975
 80088f4:	080089b5 	.word	0x080089b5
 80088f8:	08008b8b 	.word	0x08008b8b
 80088fc:	08008b8b 	.word	0x08008b8b
 8008900:	08008b2b 	.word	0x08008b2b
 8008904:	08008b57 	.word	0x08008b57
 8008908:	08008b8b 	.word	0x08008b8b
 800890c:	08008b8b 	.word	0x08008b8b
 8008910:	08008b8b 	.word	0x08008b8b
 8008914:	08008b8b 	.word	0x08008b8b
 8008918:	08008b8b 	.word	0x08008b8b
 800891c:	08008b8b 	.word	0x08008b8b
 8008920:	08008b8b 	.word	0x08008b8b
 8008924:	08008929 	.word	0x08008929
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
  case USB_DESC_TYPE_BOS:
    if (pdev->pDesc->GetBOSDescriptor != NULL)
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800892e:	69db      	ldr	r3, [r3, #28]
 8008930:	2b00      	cmp	r3, #0
 8008932:	d00b      	beq.n	800894c <USBD_GetDescriptor+0x8c>
    {
      pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800893a:	69db      	ldr	r3, [r3, #28]
 800893c:	687a      	ldr	r2, [r7, #4]
 800893e:	7c12      	ldrb	r2, [r2, #16]
 8008940:	f107 0108 	add.w	r1, r7, #8
 8008944:	4610      	mov	r0, r2
 8008946:	4798      	blx	r3
 8008948:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800894a:	e126      	b.n	8008b9a <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 800894c:	6839      	ldr	r1, [r7, #0]
 800894e:	6878      	ldr	r0, [r7, #4]
 8008950:	f000 fb06 	bl	8008f60 <USBD_CtlError>
      err++;
 8008954:	7afb      	ldrb	r3, [r7, #11]
 8008956:	3301      	adds	r3, #1
 8008958:	72fb      	strb	r3, [r7, #11]
    break;
 800895a:	e11e      	b.n	8008b9a <USBD_GetDescriptor+0x2da>
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	687a      	ldr	r2, [r7, #4]
 8008966:	7c12      	ldrb	r2, [r2, #16]
 8008968:	f107 0108 	add.w	r1, r7, #8
 800896c:	4610      	mov	r0, r2
 800896e:	4798      	blx	r3
 8008970:	60f8      	str	r0, [r7, #12]
    break;
 8008972:	e112      	b.n	8008b9a <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	7c1b      	ldrb	r3, [r3, #16]
 8008978:	2b00      	cmp	r3, #0
 800897a:	d10d      	bne.n	8008998 <USBD_GetDescriptor+0xd8>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008982:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008984:	f107 0208 	add.w	r2, r7, #8
 8008988:	4610      	mov	r0, r2
 800898a:	4798      	blx	r3
 800898c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	3301      	adds	r3, #1
 8008992:	2202      	movs	r2, #2
 8008994:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8008996:	e100      	b.n	8008b9a <USBD_GetDescriptor+0x2da>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800899e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089a0:	f107 0208 	add.w	r2, r7, #8
 80089a4:	4610      	mov	r0, r2
 80089a6:	4798      	blx	r3
 80089a8:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	3301      	adds	r3, #1
 80089ae:	2202      	movs	r2, #2
 80089b0:	701a      	strb	r2, [r3, #0]
    break;
 80089b2:	e0f2      	b.n	8008b9a <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 80089b4:	683b      	ldr	r3, [r7, #0]
 80089b6:	885b      	ldrh	r3, [r3, #2]
 80089b8:	b2db      	uxtb	r3, r3
 80089ba:	2b05      	cmp	r3, #5
 80089bc:	f200 80ac 	bhi.w	8008b18 <USBD_GetDescriptor+0x258>
 80089c0:	a201      	add	r2, pc, #4	; (adr r2, 80089c8 <USBD_GetDescriptor+0x108>)
 80089c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089c6:	bf00      	nop
 80089c8:	080089e1 	.word	0x080089e1
 80089cc:	08008a15 	.word	0x08008a15
 80089d0:	08008a49 	.word	0x08008a49
 80089d4:	08008a7d 	.word	0x08008a7d
 80089d8:	08008ab1 	.word	0x08008ab1
 80089dc:	08008ae5 	.word	0x08008ae5
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089e6:	685b      	ldr	r3, [r3, #4]
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d00b      	beq.n	8008a04 <USBD_GetDescriptor+0x144>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089f2:	685b      	ldr	r3, [r3, #4]
 80089f4:	687a      	ldr	r2, [r7, #4]
 80089f6:	7c12      	ldrb	r2, [r2, #16]
 80089f8:	f107 0108 	add.w	r1, r7, #8
 80089fc:	4610      	mov	r0, r2
 80089fe:	4798      	blx	r3
 8008a00:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008a02:	e091      	b.n	8008b28 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8008a04:	6839      	ldr	r1, [r7, #0]
 8008a06:	6878      	ldr	r0, [r7, #4]
 8008a08:	f000 faaa 	bl	8008f60 <USBD_CtlError>
        err++;
 8008a0c:	7afb      	ldrb	r3, [r7, #11]
 8008a0e:	3301      	adds	r3, #1
 8008a10:	72fb      	strb	r3, [r7, #11]
      break;
 8008a12:	e089      	b.n	8008b28 <USBD_GetDescriptor+0x268>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a1a:	689b      	ldr	r3, [r3, #8]
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d00b      	beq.n	8008a38 <USBD_GetDescriptor+0x178>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a26:	689b      	ldr	r3, [r3, #8]
 8008a28:	687a      	ldr	r2, [r7, #4]
 8008a2a:	7c12      	ldrb	r2, [r2, #16]
 8008a2c:	f107 0108 	add.w	r1, r7, #8
 8008a30:	4610      	mov	r0, r2
 8008a32:	4798      	blx	r3
 8008a34:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008a36:	e077      	b.n	8008b28 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8008a38:	6839      	ldr	r1, [r7, #0]
 8008a3a:	6878      	ldr	r0, [r7, #4]
 8008a3c:	f000 fa90 	bl	8008f60 <USBD_CtlError>
        err++;
 8008a40:	7afb      	ldrb	r3, [r7, #11]
 8008a42:	3301      	adds	r3, #1
 8008a44:	72fb      	strb	r3, [r7, #11]
      break;
 8008a46:	e06f      	b.n	8008b28 <USBD_GetDescriptor+0x268>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a4e:	68db      	ldr	r3, [r3, #12]
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d00b      	beq.n	8008a6c <USBD_GetDescriptor+0x1ac>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a5a:	68db      	ldr	r3, [r3, #12]
 8008a5c:	687a      	ldr	r2, [r7, #4]
 8008a5e:	7c12      	ldrb	r2, [r2, #16]
 8008a60:	f107 0108 	add.w	r1, r7, #8
 8008a64:	4610      	mov	r0, r2
 8008a66:	4798      	blx	r3
 8008a68:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008a6a:	e05d      	b.n	8008b28 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8008a6c:	6839      	ldr	r1, [r7, #0]
 8008a6e:	6878      	ldr	r0, [r7, #4]
 8008a70:	f000 fa76 	bl	8008f60 <USBD_CtlError>
        err++;
 8008a74:	7afb      	ldrb	r3, [r7, #11]
 8008a76:	3301      	adds	r3, #1
 8008a78:	72fb      	strb	r3, [r7, #11]
      break;
 8008a7a:	e055      	b.n	8008b28 <USBD_GetDescriptor+0x268>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a82:	691b      	ldr	r3, [r3, #16]
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d00b      	beq.n	8008aa0 <USBD_GetDescriptor+0x1e0>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a8e:	691b      	ldr	r3, [r3, #16]
 8008a90:	687a      	ldr	r2, [r7, #4]
 8008a92:	7c12      	ldrb	r2, [r2, #16]
 8008a94:	f107 0108 	add.w	r1, r7, #8
 8008a98:	4610      	mov	r0, r2
 8008a9a:	4798      	blx	r3
 8008a9c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008a9e:	e043      	b.n	8008b28 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8008aa0:	6839      	ldr	r1, [r7, #0]
 8008aa2:	6878      	ldr	r0, [r7, #4]
 8008aa4:	f000 fa5c 	bl	8008f60 <USBD_CtlError>
        err++;
 8008aa8:	7afb      	ldrb	r3, [r7, #11]
 8008aaa:	3301      	adds	r3, #1
 8008aac:	72fb      	strb	r3, [r7, #11]
      break;
 8008aae:	e03b      	b.n	8008b28 <USBD_GetDescriptor+0x268>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ab6:	695b      	ldr	r3, [r3, #20]
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d00b      	beq.n	8008ad4 <USBD_GetDescriptor+0x214>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ac2:	695b      	ldr	r3, [r3, #20]
 8008ac4:	687a      	ldr	r2, [r7, #4]
 8008ac6:	7c12      	ldrb	r2, [r2, #16]
 8008ac8:	f107 0108 	add.w	r1, r7, #8
 8008acc:	4610      	mov	r0, r2
 8008ace:	4798      	blx	r3
 8008ad0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008ad2:	e029      	b.n	8008b28 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8008ad4:	6839      	ldr	r1, [r7, #0]
 8008ad6:	6878      	ldr	r0, [r7, #4]
 8008ad8:	f000 fa42 	bl	8008f60 <USBD_CtlError>
        err++;
 8008adc:	7afb      	ldrb	r3, [r7, #11]
 8008ade:	3301      	adds	r3, #1
 8008ae0:	72fb      	strb	r3, [r7, #11]
      break;
 8008ae2:	e021      	b.n	8008b28 <USBD_GetDescriptor+0x268>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008aea:	699b      	ldr	r3, [r3, #24]
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d00b      	beq.n	8008b08 <USBD_GetDescriptor+0x248>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008af6:	699b      	ldr	r3, [r3, #24]
 8008af8:	687a      	ldr	r2, [r7, #4]
 8008afa:	7c12      	ldrb	r2, [r2, #16]
 8008afc:	f107 0108 	add.w	r1, r7, #8
 8008b00:	4610      	mov	r0, r2
 8008b02:	4798      	blx	r3
 8008b04:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008b06:	e00f      	b.n	8008b28 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8008b08:	6839      	ldr	r1, [r7, #0]
 8008b0a:	6878      	ldr	r0, [r7, #4]
 8008b0c:	f000 fa28 	bl	8008f60 <USBD_CtlError>
        err++;
 8008b10:	7afb      	ldrb	r3, [r7, #11]
 8008b12:	3301      	adds	r3, #1
 8008b14:	72fb      	strb	r3, [r7, #11]
      break;
 8008b16:	e007      	b.n	8008b28 <USBD_GetDescriptor+0x268>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8008b18:	6839      	ldr	r1, [r7, #0]
 8008b1a:	6878      	ldr	r0, [r7, #4]
 8008b1c:	f000 fa20 	bl	8008f60 <USBD_CtlError>
      err++;
 8008b20:	7afb      	ldrb	r3, [r7, #11]
 8008b22:	3301      	adds	r3, #1
 8008b24:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 8008b26:	bf00      	nop
    }
    break;
 8008b28:	e037      	b.n	8008b9a <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	7c1b      	ldrb	r3, [r3, #16]
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d109      	bne.n	8008b46 <USBD_GetDescriptor+0x286>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b3a:	f107 0208 	add.w	r2, r7, #8
 8008b3e:	4610      	mov	r0, r2
 8008b40:	4798      	blx	r3
 8008b42:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8008b44:	e029      	b.n	8008b9a <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 8008b46:	6839      	ldr	r1, [r7, #0]
 8008b48:	6878      	ldr	r0, [r7, #4]
 8008b4a:	f000 fa09 	bl	8008f60 <USBD_CtlError>
      err++;
 8008b4e:	7afb      	ldrb	r3, [r7, #11]
 8008b50:	3301      	adds	r3, #1
 8008b52:	72fb      	strb	r3, [r7, #11]
    break;
 8008b54:	e021      	b.n	8008b9a <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	7c1b      	ldrb	r3, [r3, #16]
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d10d      	bne.n	8008b7a <USBD_GetDescriptor+0x2ba>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b66:	f107 0208 	add.w	r2, r7, #8
 8008b6a:	4610      	mov	r0, r2
 8008b6c:	4798      	blx	r3
 8008b6e:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	3301      	adds	r3, #1
 8008b74:	2207      	movs	r2, #7
 8008b76:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8008b78:	e00f      	b.n	8008b9a <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 8008b7a:	6839      	ldr	r1, [r7, #0]
 8008b7c:	6878      	ldr	r0, [r7, #4]
 8008b7e:	f000 f9ef 	bl	8008f60 <USBD_CtlError>
      err++;
 8008b82:	7afb      	ldrb	r3, [r7, #11]
 8008b84:	3301      	adds	r3, #1
 8008b86:	72fb      	strb	r3, [r7, #11]
    break;
 8008b88:	e007      	b.n	8008b9a <USBD_GetDescriptor+0x2da>

  default:
    USBD_CtlError(pdev, req);
 8008b8a:	6839      	ldr	r1, [r7, #0]
 8008b8c:	6878      	ldr	r0, [r7, #4]
 8008b8e:	f000 f9e7 	bl	8008f60 <USBD_CtlError>
    err++;
 8008b92:	7afb      	ldrb	r3, [r7, #11]
 8008b94:	3301      	adds	r3, #1
 8008b96:	72fb      	strb	r3, [r7, #11]
    break;
 8008b98:	bf00      	nop
  }

  if (err != 0U)
 8008b9a:	7afb      	ldrb	r3, [r7, #11]
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d11e      	bne.n	8008bde <USBD_GetDescriptor+0x31e>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8008ba0:	683b      	ldr	r3, [r7, #0]
 8008ba2:	88db      	ldrh	r3, [r3, #6]
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d016      	beq.n	8008bd6 <USBD_GetDescriptor+0x316>
    {
      if (len != 0U)
 8008ba8:	893b      	ldrh	r3, [r7, #8]
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d00e      	beq.n	8008bcc <USBD_GetDescriptor+0x30c>
      {
        len = MIN(len, req->wLength);
 8008bae:	683b      	ldr	r3, [r7, #0]
 8008bb0:	88da      	ldrh	r2, [r3, #6]
 8008bb2:	893b      	ldrh	r3, [r7, #8]
 8008bb4:	4293      	cmp	r3, r2
 8008bb6:	bf28      	it	cs
 8008bb8:	4613      	movcs	r3, r2
 8008bba:	b29b      	uxth	r3, r3
 8008bbc:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8008bbe:	893b      	ldrh	r3, [r7, #8]
 8008bc0:	461a      	mov	r2, r3
 8008bc2:	68f9      	ldr	r1, [r7, #12]
 8008bc4:	6878      	ldr	r0, [r7, #4]
 8008bc6:	f000 fa3c 	bl	8009042 <USBD_CtlSendData>
 8008bca:	e009      	b.n	8008be0 <USBD_GetDescriptor+0x320>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8008bcc:	6839      	ldr	r1, [r7, #0]
 8008bce:	6878      	ldr	r0, [r7, #4]
 8008bd0:	f000 f9c6 	bl	8008f60 <USBD_CtlError>
 8008bd4:	e004      	b.n	8008be0 <USBD_GetDescriptor+0x320>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8008bd6:	6878      	ldr	r0, [r7, #4]
 8008bd8:	f000 fa8d 	bl	80090f6 <USBD_CtlSendStatus>
 8008bdc:	e000      	b.n	8008be0 <USBD_GetDescriptor+0x320>
    return;
 8008bde:	bf00      	nop
    }
  }
}
 8008be0:	3710      	adds	r7, #16
 8008be2:	46bd      	mov	sp, r7
 8008be4:	bd80      	pop	{r7, pc}
 8008be6:	bf00      	nop

08008be8 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008be8:	b580      	push	{r7, lr}
 8008bea:	b084      	sub	sp, #16
 8008bec:	af00      	add	r7, sp, #0
 8008bee:	6078      	str	r0, [r7, #4]
 8008bf0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008bf2:	683b      	ldr	r3, [r7, #0]
 8008bf4:	889b      	ldrh	r3, [r3, #4]
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d130      	bne.n	8008c5c <USBD_SetAddress+0x74>
 8008bfa:	683b      	ldr	r3, [r7, #0]
 8008bfc:	88db      	ldrh	r3, [r3, #6]
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d12c      	bne.n	8008c5c <USBD_SetAddress+0x74>
 8008c02:	683b      	ldr	r3, [r7, #0]
 8008c04:	885b      	ldrh	r3, [r3, #2]
 8008c06:	2b7f      	cmp	r3, #127	; 0x7f
 8008c08:	d828      	bhi.n	8008c5c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008c0a:	683b      	ldr	r3, [r7, #0]
 8008c0c:	885b      	ldrh	r3, [r3, #2]
 8008c0e:	b2db      	uxtb	r3, r3
 8008c10:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008c14:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c1c:	2b03      	cmp	r3, #3
 8008c1e:	d104      	bne.n	8008c2a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8008c20:	6839      	ldr	r1, [r7, #0]
 8008c22:	6878      	ldr	r0, [r7, #4]
 8008c24:	f000 f99c 	bl	8008f60 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c28:	e01c      	b.n	8008c64 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	7bfa      	ldrb	r2, [r7, #15]
 8008c2e:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008c32:	7bfb      	ldrb	r3, [r7, #15]
 8008c34:	4619      	mov	r1, r3
 8008c36:	6878      	ldr	r0, [r7, #4]
 8008c38:	f000 fe87 	bl	800994a <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008c3c:	6878      	ldr	r0, [r7, #4]
 8008c3e:	f000 fa5a 	bl	80090f6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008c42:	7bfb      	ldrb	r3, [r7, #15]
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d004      	beq.n	8008c52 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	2202      	movs	r2, #2
 8008c4c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c50:	e008      	b.n	8008c64 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	2201      	movs	r2, #1
 8008c56:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c5a:	e003      	b.n	8008c64 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008c5c:	6839      	ldr	r1, [r7, #0]
 8008c5e:	6878      	ldr	r0, [r7, #4]
 8008c60:	f000 f97e 	bl	8008f60 <USBD_CtlError>
  }
}
 8008c64:	bf00      	nop
 8008c66:	3710      	adds	r7, #16
 8008c68:	46bd      	mov	sp, r7
 8008c6a:	bd80      	pop	{r7, pc}

08008c6c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008c6c:	b580      	push	{r7, lr}
 8008c6e:	b084      	sub	sp, #16
 8008c70:	af00      	add	r7, sp, #0
 8008c72:	6078      	str	r0, [r7, #4]
 8008c74:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008c76:	2300      	movs	r3, #0
 8008c78:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008c7a:	683b      	ldr	r3, [r7, #0]
 8008c7c:	885b      	ldrh	r3, [r3, #2]
 8008c7e:	b2da      	uxtb	r2, r3
 8008c80:	4b4b      	ldr	r3, [pc, #300]	; (8008db0 <USBD_SetConfig+0x144>)
 8008c82:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008c84:	4b4a      	ldr	r3, [pc, #296]	; (8008db0 <USBD_SetConfig+0x144>)
 8008c86:	781b      	ldrb	r3, [r3, #0]
 8008c88:	2b01      	cmp	r3, #1
 8008c8a:	d905      	bls.n	8008c98 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008c8c:	6839      	ldr	r1, [r7, #0]
 8008c8e:	6878      	ldr	r0, [r7, #4]
 8008c90:	f000 f966 	bl	8008f60 <USBD_CtlError>
    return USBD_FAIL;
 8008c94:	2303      	movs	r3, #3
 8008c96:	e087      	b.n	8008da8 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c9e:	2b02      	cmp	r3, #2
 8008ca0:	d002      	beq.n	8008ca8 <USBD_SetConfig+0x3c>
 8008ca2:	2b03      	cmp	r3, #3
 8008ca4:	d025      	beq.n	8008cf2 <USBD_SetConfig+0x86>
 8008ca6:	e071      	b.n	8008d8c <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8008ca8:	4b41      	ldr	r3, [pc, #260]	; (8008db0 <USBD_SetConfig+0x144>)
 8008caa:	781b      	ldrb	r3, [r3, #0]
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d01c      	beq.n	8008cea <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8008cb0:	4b3f      	ldr	r3, [pc, #252]	; (8008db0 <USBD_SetConfig+0x144>)
 8008cb2:	781b      	ldrb	r3, [r3, #0]
 8008cb4:	461a      	mov	r2, r3
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 8008cba:	4b3d      	ldr	r3, [pc, #244]	; (8008db0 <USBD_SetConfig+0x144>)
 8008cbc:	781b      	ldrb	r3, [r3, #0]
 8008cbe:	4619      	mov	r1, r3
 8008cc0:	6878      	ldr	r0, [r7, #4]
 8008cc2:	f7ff f9bd 	bl	8008040 <USBD_SetClassConfig>
 8008cc6:	4603      	mov	r3, r0
 8008cc8:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 8008cca:	7bfb      	ldrb	r3, [r7, #15]
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d004      	beq.n	8008cda <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8008cd0:	6839      	ldr	r1, [r7, #0]
 8008cd2:	6878      	ldr	r0, [r7, #4]
 8008cd4:	f000 f944 	bl	8008f60 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8008cd8:	e065      	b.n	8008da6 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8008cda:	6878      	ldr	r0, [r7, #4]
 8008cdc:	f000 fa0b 	bl	80090f6 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	2203      	movs	r2, #3
 8008ce4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8008ce8:	e05d      	b.n	8008da6 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8008cea:	6878      	ldr	r0, [r7, #4]
 8008cec:	f000 fa03 	bl	80090f6 <USBD_CtlSendStatus>
    break;
 8008cf0:	e059      	b.n	8008da6 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 8008cf2:	4b2f      	ldr	r3, [pc, #188]	; (8008db0 <USBD_SetConfig+0x144>)
 8008cf4:	781b      	ldrb	r3, [r3, #0]
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d112      	bne.n	8008d20 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	2202      	movs	r2, #2
 8008cfe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8008d02:	4b2b      	ldr	r3, [pc, #172]	; (8008db0 <USBD_SetConfig+0x144>)
 8008d04:	781b      	ldrb	r3, [r3, #0]
 8008d06:	461a      	mov	r2, r3
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008d0c:	4b28      	ldr	r3, [pc, #160]	; (8008db0 <USBD_SetConfig+0x144>)
 8008d0e:	781b      	ldrb	r3, [r3, #0]
 8008d10:	4619      	mov	r1, r3
 8008d12:	6878      	ldr	r0, [r7, #4]
 8008d14:	f7ff f9b0 	bl	8008078 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8008d18:	6878      	ldr	r0, [r7, #4]
 8008d1a:	f000 f9ec 	bl	80090f6 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8008d1e:	e042      	b.n	8008da6 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8008d20:	4b23      	ldr	r3, [pc, #140]	; (8008db0 <USBD_SetConfig+0x144>)
 8008d22:	781b      	ldrb	r3, [r3, #0]
 8008d24:	461a      	mov	r2, r3
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	685b      	ldr	r3, [r3, #4]
 8008d2a:	429a      	cmp	r2, r3
 8008d2c:	d02a      	beq.n	8008d84 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	685b      	ldr	r3, [r3, #4]
 8008d32:	b2db      	uxtb	r3, r3
 8008d34:	4619      	mov	r1, r3
 8008d36:	6878      	ldr	r0, [r7, #4]
 8008d38:	f7ff f99e 	bl	8008078 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8008d3c:	4b1c      	ldr	r3, [pc, #112]	; (8008db0 <USBD_SetConfig+0x144>)
 8008d3e:	781b      	ldrb	r3, [r3, #0]
 8008d40:	461a      	mov	r2, r3
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8008d46:	4b1a      	ldr	r3, [pc, #104]	; (8008db0 <USBD_SetConfig+0x144>)
 8008d48:	781b      	ldrb	r3, [r3, #0]
 8008d4a:	4619      	mov	r1, r3
 8008d4c:	6878      	ldr	r0, [r7, #4]
 8008d4e:	f7ff f977 	bl	8008040 <USBD_SetClassConfig>
 8008d52:	4603      	mov	r3, r0
 8008d54:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 8008d56:	7bfb      	ldrb	r3, [r7, #15]
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d00f      	beq.n	8008d7c <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8008d5c:	6839      	ldr	r1, [r7, #0]
 8008d5e:	6878      	ldr	r0, [r7, #4]
 8008d60:	f000 f8fe 	bl	8008f60 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	685b      	ldr	r3, [r3, #4]
 8008d68:	b2db      	uxtb	r3, r3
 8008d6a:	4619      	mov	r1, r3
 8008d6c:	6878      	ldr	r0, [r7, #4]
 8008d6e:	f7ff f983 	bl	8008078 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	2202      	movs	r2, #2
 8008d76:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8008d7a:	e014      	b.n	8008da6 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8008d7c:	6878      	ldr	r0, [r7, #4]
 8008d7e:	f000 f9ba 	bl	80090f6 <USBD_CtlSendStatus>
    break;
 8008d82:	e010      	b.n	8008da6 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8008d84:	6878      	ldr	r0, [r7, #4]
 8008d86:	f000 f9b6 	bl	80090f6 <USBD_CtlSendStatus>
    break;
 8008d8a:	e00c      	b.n	8008da6 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8008d8c:	6839      	ldr	r1, [r7, #0]
 8008d8e:	6878      	ldr	r0, [r7, #4]
 8008d90:	f000 f8e6 	bl	8008f60 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008d94:	4b06      	ldr	r3, [pc, #24]	; (8008db0 <USBD_SetConfig+0x144>)
 8008d96:	781b      	ldrb	r3, [r3, #0]
 8008d98:	4619      	mov	r1, r3
 8008d9a:	6878      	ldr	r0, [r7, #4]
 8008d9c:	f7ff f96c 	bl	8008078 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8008da0:	2303      	movs	r3, #3
 8008da2:	73fb      	strb	r3, [r7, #15]
    break;
 8008da4:	bf00      	nop
  }

  return ret;
 8008da6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008da8:	4618      	mov	r0, r3
 8008daa:	3710      	adds	r7, #16
 8008dac:	46bd      	mov	sp, r7
 8008dae:	bd80      	pop	{r7, pc}
 8008db0:	20000201 	.word	0x20000201

08008db4 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008db4:	b580      	push	{r7, lr}
 8008db6:	b082      	sub	sp, #8
 8008db8:	af00      	add	r7, sp, #0
 8008dba:	6078      	str	r0, [r7, #4]
 8008dbc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008dbe:	683b      	ldr	r3, [r7, #0]
 8008dc0:	88db      	ldrh	r3, [r3, #6]
 8008dc2:	2b01      	cmp	r3, #1
 8008dc4:	d004      	beq.n	8008dd0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008dc6:	6839      	ldr	r1, [r7, #0]
 8008dc8:	6878      	ldr	r0, [r7, #4]
 8008dca:	f000 f8c9 	bl	8008f60 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 8008dce:	e021      	b.n	8008e14 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008dd6:	2b01      	cmp	r3, #1
 8008dd8:	db17      	blt.n	8008e0a <USBD_GetConfig+0x56>
 8008dda:	2b02      	cmp	r3, #2
 8008ddc:	dd02      	ble.n	8008de4 <USBD_GetConfig+0x30>
 8008dde:	2b03      	cmp	r3, #3
 8008de0:	d00b      	beq.n	8008dfa <USBD_GetConfig+0x46>
 8008de2:	e012      	b.n	8008e0a <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	2200      	movs	r2, #0
 8008de8:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	3308      	adds	r3, #8
 8008dee:	2201      	movs	r2, #1
 8008df0:	4619      	mov	r1, r3
 8008df2:	6878      	ldr	r0, [r7, #4]
 8008df4:	f000 f925 	bl	8009042 <USBD_CtlSendData>
      break;
 8008df8:	e00c      	b.n	8008e14 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	3304      	adds	r3, #4
 8008dfe:	2201      	movs	r2, #1
 8008e00:	4619      	mov	r1, r3
 8008e02:	6878      	ldr	r0, [r7, #4]
 8008e04:	f000 f91d 	bl	8009042 <USBD_CtlSendData>
      break;
 8008e08:	e004      	b.n	8008e14 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 8008e0a:	6839      	ldr	r1, [r7, #0]
 8008e0c:	6878      	ldr	r0, [r7, #4]
 8008e0e:	f000 f8a7 	bl	8008f60 <USBD_CtlError>
      break;
 8008e12:	bf00      	nop
}
 8008e14:	bf00      	nop
 8008e16:	3708      	adds	r7, #8
 8008e18:	46bd      	mov	sp, r7
 8008e1a:	bd80      	pop	{r7, pc}

08008e1c <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e1c:	b580      	push	{r7, lr}
 8008e1e:	b082      	sub	sp, #8
 8008e20:	af00      	add	r7, sp, #0
 8008e22:	6078      	str	r0, [r7, #4]
 8008e24:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e2c:	3b01      	subs	r3, #1
 8008e2e:	2b02      	cmp	r3, #2
 8008e30:	d81e      	bhi.n	8008e70 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 8008e32:	683b      	ldr	r3, [r7, #0]
 8008e34:	88db      	ldrh	r3, [r3, #6]
 8008e36:	2b02      	cmp	r3, #2
 8008e38:	d004      	beq.n	8008e44 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8008e3a:	6839      	ldr	r1, [r7, #0]
 8008e3c:	6878      	ldr	r0, [r7, #4]
 8008e3e:	f000 f88f 	bl	8008f60 <USBD_CtlError>
      break;
 8008e42:	e01a      	b.n	8008e7a <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	2201      	movs	r2, #1
 8008e48:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d005      	beq.n	8008e60 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	68db      	ldr	r3, [r3, #12]
 8008e58:	f043 0202 	orr.w	r2, r3, #2
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	330c      	adds	r3, #12
 8008e64:	2202      	movs	r2, #2
 8008e66:	4619      	mov	r1, r3
 8008e68:	6878      	ldr	r0, [r7, #4]
 8008e6a:	f000 f8ea 	bl	8009042 <USBD_CtlSendData>
    break;
 8008e6e:	e004      	b.n	8008e7a <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 8008e70:	6839      	ldr	r1, [r7, #0]
 8008e72:	6878      	ldr	r0, [r7, #4]
 8008e74:	f000 f874 	bl	8008f60 <USBD_CtlError>
    break;
 8008e78:	bf00      	nop
  }
}
 8008e7a:	bf00      	nop
 8008e7c:	3708      	adds	r7, #8
 8008e7e:	46bd      	mov	sp, r7
 8008e80:	bd80      	pop	{r7, pc}

08008e82 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e82:	b580      	push	{r7, lr}
 8008e84:	b082      	sub	sp, #8
 8008e86:	af00      	add	r7, sp, #0
 8008e88:	6078      	str	r0, [r7, #4]
 8008e8a:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008e8c:	683b      	ldr	r3, [r7, #0]
 8008e8e:	885b      	ldrh	r3, [r3, #2]
 8008e90:	2b01      	cmp	r3, #1
 8008e92:	d106      	bne.n	8008ea2 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	2201      	movs	r2, #1
 8008e98:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008e9c:	6878      	ldr	r0, [r7, #4]
 8008e9e:	f000 f92a 	bl	80090f6 <USBD_CtlSendStatus>
  }
}
 8008ea2:	bf00      	nop
 8008ea4:	3708      	adds	r7, #8
 8008ea6:	46bd      	mov	sp, r7
 8008ea8:	bd80      	pop	{r7, pc}

08008eaa <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008eaa:	b580      	push	{r7, lr}
 8008eac:	b082      	sub	sp, #8
 8008eae:	af00      	add	r7, sp, #0
 8008eb0:	6078      	str	r0, [r7, #4]
 8008eb2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008eba:	3b01      	subs	r3, #1
 8008ebc:	2b02      	cmp	r3, #2
 8008ebe:	d80b      	bhi.n	8008ed8 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008ec0:	683b      	ldr	r3, [r7, #0]
 8008ec2:	885b      	ldrh	r3, [r3, #2]
 8008ec4:	2b01      	cmp	r3, #1
 8008ec6:	d10c      	bne.n	8008ee2 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	2200      	movs	r2, #0
 8008ecc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008ed0:	6878      	ldr	r0, [r7, #4]
 8008ed2:	f000 f910 	bl	80090f6 <USBD_CtlSendStatus>
      }
      break;
 8008ed6:	e004      	b.n	8008ee2 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8008ed8:	6839      	ldr	r1, [r7, #0]
 8008eda:	6878      	ldr	r0, [r7, #4]
 8008edc:	f000 f840 	bl	8008f60 <USBD_CtlError>
      break;
 8008ee0:	e000      	b.n	8008ee4 <USBD_ClrFeature+0x3a>
      break;
 8008ee2:	bf00      	nop
  }
}
 8008ee4:	bf00      	nop
 8008ee6:	3708      	adds	r7, #8
 8008ee8:	46bd      	mov	sp, r7
 8008eea:	bd80      	pop	{r7, pc}

08008eec <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008eec:	b580      	push	{r7, lr}
 8008eee:	b084      	sub	sp, #16
 8008ef0:	af00      	add	r7, sp, #0
 8008ef2:	6078      	str	r0, [r7, #4]
 8008ef4:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008ef6:	683b      	ldr	r3, [r7, #0]
 8008ef8:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	781a      	ldrb	r2, [r3, #0]
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	3301      	adds	r3, #1
 8008f06:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	781a      	ldrb	r2, [r3, #0]
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	3301      	adds	r3, #1
 8008f14:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008f16:	68f8      	ldr	r0, [r7, #12]
 8008f18:	f7ff faa8 	bl	800846c <SWAPBYTE>
 8008f1c:	4603      	mov	r3, r0
 8008f1e:	461a      	mov	r2, r3
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	3301      	adds	r3, #1
 8008f28:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	3301      	adds	r3, #1
 8008f2e:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008f30:	68f8      	ldr	r0, [r7, #12]
 8008f32:	f7ff fa9b 	bl	800846c <SWAPBYTE>
 8008f36:	4603      	mov	r3, r0
 8008f38:	461a      	mov	r2, r3
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	3301      	adds	r3, #1
 8008f42:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	3301      	adds	r3, #1
 8008f48:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008f4a:	68f8      	ldr	r0, [r7, #12]
 8008f4c:	f7ff fa8e 	bl	800846c <SWAPBYTE>
 8008f50:	4603      	mov	r3, r0
 8008f52:	461a      	mov	r2, r3
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	80da      	strh	r2, [r3, #6]
}
 8008f58:	bf00      	nop
 8008f5a:	3710      	adds	r7, #16
 8008f5c:	46bd      	mov	sp, r7
 8008f5e:	bd80      	pop	{r7, pc}

08008f60 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008f60:	b580      	push	{r7, lr}
 8008f62:	b082      	sub	sp, #8
 8008f64:	af00      	add	r7, sp, #0
 8008f66:	6078      	str	r0, [r7, #4]
 8008f68:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008f6a:	2180      	movs	r1, #128	; 0x80
 8008f6c:	6878      	ldr	r0, [r7, #4]
 8008f6e:	f000 fc81 	bl	8009874 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008f72:	2100      	movs	r1, #0
 8008f74:	6878      	ldr	r0, [r7, #4]
 8008f76:	f000 fc7d 	bl	8009874 <USBD_LL_StallEP>
}
 8008f7a:	bf00      	nop
 8008f7c:	3708      	adds	r7, #8
 8008f7e:	46bd      	mov	sp, r7
 8008f80:	bd80      	pop	{r7, pc}

08008f82 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008f82:	b580      	push	{r7, lr}
 8008f84:	b086      	sub	sp, #24
 8008f86:	af00      	add	r7, sp, #0
 8008f88:	60f8      	str	r0, [r7, #12]
 8008f8a:	60b9      	str	r1, [r7, #8]
 8008f8c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008f8e:	2300      	movs	r3, #0
 8008f90:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d036      	beq.n	8009006 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008f9c:	6938      	ldr	r0, [r7, #16]
 8008f9e:	f000 f836 	bl	800900e <USBD_GetLen>
 8008fa2:	4603      	mov	r3, r0
 8008fa4:	3301      	adds	r3, #1
 8008fa6:	b29b      	uxth	r3, r3
 8008fa8:	005b      	lsls	r3, r3, #1
 8008faa:	b29a      	uxth	r2, r3
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008fb0:	7dfb      	ldrb	r3, [r7, #23]
 8008fb2:	68ba      	ldr	r2, [r7, #8]
 8008fb4:	4413      	add	r3, r2
 8008fb6:	687a      	ldr	r2, [r7, #4]
 8008fb8:	7812      	ldrb	r2, [r2, #0]
 8008fba:	701a      	strb	r2, [r3, #0]
  idx++;
 8008fbc:	7dfb      	ldrb	r3, [r7, #23]
 8008fbe:	3301      	adds	r3, #1
 8008fc0:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008fc2:	7dfb      	ldrb	r3, [r7, #23]
 8008fc4:	68ba      	ldr	r2, [r7, #8]
 8008fc6:	4413      	add	r3, r2
 8008fc8:	2203      	movs	r2, #3
 8008fca:	701a      	strb	r2, [r3, #0]
  idx++;
 8008fcc:	7dfb      	ldrb	r3, [r7, #23]
 8008fce:	3301      	adds	r3, #1
 8008fd0:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008fd2:	e013      	b.n	8008ffc <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008fd4:	7dfb      	ldrb	r3, [r7, #23]
 8008fd6:	68ba      	ldr	r2, [r7, #8]
 8008fd8:	4413      	add	r3, r2
 8008fda:	693a      	ldr	r2, [r7, #16]
 8008fdc:	7812      	ldrb	r2, [r2, #0]
 8008fde:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008fe0:	693b      	ldr	r3, [r7, #16]
 8008fe2:	3301      	adds	r3, #1
 8008fe4:	613b      	str	r3, [r7, #16]
    idx++;
 8008fe6:	7dfb      	ldrb	r3, [r7, #23]
 8008fe8:	3301      	adds	r3, #1
 8008fea:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008fec:	7dfb      	ldrb	r3, [r7, #23]
 8008fee:	68ba      	ldr	r2, [r7, #8]
 8008ff0:	4413      	add	r3, r2
 8008ff2:	2200      	movs	r2, #0
 8008ff4:	701a      	strb	r2, [r3, #0]
    idx++;
 8008ff6:	7dfb      	ldrb	r3, [r7, #23]
 8008ff8:	3301      	adds	r3, #1
 8008ffa:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008ffc:	693b      	ldr	r3, [r7, #16]
 8008ffe:	781b      	ldrb	r3, [r3, #0]
 8009000:	2b00      	cmp	r3, #0
 8009002:	d1e7      	bne.n	8008fd4 <USBD_GetString+0x52>
 8009004:	e000      	b.n	8009008 <USBD_GetString+0x86>
    return;
 8009006:	bf00      	nop
  }
}
 8009008:	3718      	adds	r7, #24
 800900a:	46bd      	mov	sp, r7
 800900c:	bd80      	pop	{r7, pc}

0800900e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800900e:	b480      	push	{r7}
 8009010:	b085      	sub	sp, #20
 8009012:	af00      	add	r7, sp, #0
 8009014:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009016:	2300      	movs	r3, #0
 8009018:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800901e:	e005      	b.n	800902c <USBD_GetLen+0x1e>
  {
    len++;
 8009020:	7bfb      	ldrb	r3, [r7, #15]
 8009022:	3301      	adds	r3, #1
 8009024:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009026:	68bb      	ldr	r3, [r7, #8]
 8009028:	3301      	adds	r3, #1
 800902a:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800902c:	68bb      	ldr	r3, [r7, #8]
 800902e:	781b      	ldrb	r3, [r3, #0]
 8009030:	2b00      	cmp	r3, #0
 8009032:	d1f5      	bne.n	8009020 <USBD_GetLen+0x12>
  }

  return len;
 8009034:	7bfb      	ldrb	r3, [r7, #15]
}
 8009036:	4618      	mov	r0, r3
 8009038:	3714      	adds	r7, #20
 800903a:	46bd      	mov	sp, r7
 800903c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009040:	4770      	bx	lr

08009042 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009042:	b580      	push	{r7, lr}
 8009044:	b084      	sub	sp, #16
 8009046:	af00      	add	r7, sp, #0
 8009048:	60f8      	str	r0, [r7, #12]
 800904a:	60b9      	str	r1, [r7, #8]
 800904c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	2202      	movs	r2, #2
 8009052:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	687a      	ldr	r2, [r7, #4]
 800905a:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	687a      	ldr	r2, [r7, #4]
 8009060:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	68ba      	ldr	r2, [r7, #8]
 8009066:	2100      	movs	r1, #0
 8009068:	68f8      	ldr	r0, [r7, #12]
 800906a:	f000 fc8d 	bl	8009988 <USBD_LL_Transmit>

  return USBD_OK;
 800906e:	2300      	movs	r3, #0
}
 8009070:	4618      	mov	r0, r3
 8009072:	3710      	adds	r7, #16
 8009074:	46bd      	mov	sp, r7
 8009076:	bd80      	pop	{r7, pc}

08009078 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009078:	b580      	push	{r7, lr}
 800907a:	b084      	sub	sp, #16
 800907c:	af00      	add	r7, sp, #0
 800907e:	60f8      	str	r0, [r7, #12]
 8009080:	60b9      	str	r1, [r7, #8]
 8009082:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	68ba      	ldr	r2, [r7, #8]
 8009088:	2100      	movs	r1, #0
 800908a:	68f8      	ldr	r0, [r7, #12]
 800908c:	f000 fc7c 	bl	8009988 <USBD_LL_Transmit>

  return USBD_OK;
 8009090:	2300      	movs	r3, #0
}
 8009092:	4618      	mov	r0, r3
 8009094:	3710      	adds	r7, #16
 8009096:	46bd      	mov	sp, r7
 8009098:	bd80      	pop	{r7, pc}

0800909a <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800909a:	b580      	push	{r7, lr}
 800909c:	b084      	sub	sp, #16
 800909e:	af00      	add	r7, sp, #0
 80090a0:	60f8      	str	r0, [r7, #12]
 80090a2:	60b9      	str	r1, [r7, #8]
 80090a4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	2203      	movs	r2, #3
 80090aa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	687a      	ldr	r2, [r7, #4]
 80090b2:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	687a      	ldr	r2, [r7, #4]
 80090ba:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	68ba      	ldr	r2, [r7, #8]
 80090c2:	2100      	movs	r1, #0
 80090c4:	68f8      	ldr	r0, [r7, #12]
 80090c6:	f000 fc80 	bl	80099ca <USBD_LL_PrepareReceive>

  return USBD_OK;
 80090ca:	2300      	movs	r3, #0
}
 80090cc:	4618      	mov	r0, r3
 80090ce:	3710      	adds	r7, #16
 80090d0:	46bd      	mov	sp, r7
 80090d2:	bd80      	pop	{r7, pc}

080090d4 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80090d4:	b580      	push	{r7, lr}
 80090d6:	b084      	sub	sp, #16
 80090d8:	af00      	add	r7, sp, #0
 80090da:	60f8      	str	r0, [r7, #12]
 80090dc:	60b9      	str	r1, [r7, #8]
 80090de:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	68ba      	ldr	r2, [r7, #8]
 80090e4:	2100      	movs	r1, #0
 80090e6:	68f8      	ldr	r0, [r7, #12]
 80090e8:	f000 fc6f 	bl	80099ca <USBD_LL_PrepareReceive>

  return USBD_OK;
 80090ec:	2300      	movs	r3, #0
}
 80090ee:	4618      	mov	r0, r3
 80090f0:	3710      	adds	r7, #16
 80090f2:	46bd      	mov	sp, r7
 80090f4:	bd80      	pop	{r7, pc}

080090f6 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80090f6:	b580      	push	{r7, lr}
 80090f8:	b082      	sub	sp, #8
 80090fa:	af00      	add	r7, sp, #0
 80090fc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	2204      	movs	r2, #4
 8009102:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009106:	2300      	movs	r3, #0
 8009108:	2200      	movs	r2, #0
 800910a:	2100      	movs	r1, #0
 800910c:	6878      	ldr	r0, [r7, #4]
 800910e:	f000 fc3b 	bl	8009988 <USBD_LL_Transmit>

  return USBD_OK;
 8009112:	2300      	movs	r3, #0
}
 8009114:	4618      	mov	r0, r3
 8009116:	3708      	adds	r7, #8
 8009118:	46bd      	mov	sp, r7
 800911a:	bd80      	pop	{r7, pc}

0800911c <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800911c:	b580      	push	{r7, lr}
 800911e:	b082      	sub	sp, #8
 8009120:	af00      	add	r7, sp, #0
 8009122:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	2205      	movs	r2, #5
 8009128:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800912c:	2300      	movs	r3, #0
 800912e:	2200      	movs	r2, #0
 8009130:	2100      	movs	r1, #0
 8009132:	6878      	ldr	r0, [r7, #4]
 8009134:	f000 fc49 	bl	80099ca <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009138:	2300      	movs	r3, #0
}
 800913a:	4618      	mov	r0, r3
 800913c:	3708      	adds	r7, #8
 800913e:	46bd      	mov	sp, r7
 8009140:	bd80      	pop	{r7, pc}
	...

08009144 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 8009144:	b580      	push	{r7, lr}
 8009146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 8009148:	2200      	movs	r2, #0
 800914a:	4912      	ldr	r1, [pc, #72]	; (8009194 <MX_USB_Device_Init+0x50>)
 800914c:	4812      	ldr	r0, [pc, #72]	; (8009198 <MX_USB_Device_Init+0x54>)
 800914e:	f7fe ff09 	bl	8007f64 <USBD_Init>
 8009152:	4603      	mov	r3, r0
 8009154:	2b00      	cmp	r3, #0
 8009156:	d001      	beq.n	800915c <MX_USB_Device_Init+0x18>
    Error_Handler();
 8009158:	f7f7 ff32 	bl	8000fc0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800915c:	490f      	ldr	r1, [pc, #60]	; (800919c <MX_USB_Device_Init+0x58>)
 800915e:	480e      	ldr	r0, [pc, #56]	; (8009198 <MX_USB_Device_Init+0x54>)
 8009160:	f7fe ff30 	bl	8007fc4 <USBD_RegisterClass>
 8009164:	4603      	mov	r3, r0
 8009166:	2b00      	cmp	r3, #0
 8009168:	d001      	beq.n	800916e <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800916a:	f7f7 ff29 	bl	8000fc0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800916e:	490c      	ldr	r1, [pc, #48]	; (80091a0 <MX_USB_Device_Init+0x5c>)
 8009170:	4809      	ldr	r0, [pc, #36]	; (8009198 <MX_USB_Device_Init+0x54>)
 8009172:	f7fe fe5b 	bl	8007e2c <USBD_CDC_RegisterInterface>
 8009176:	4603      	mov	r3, r0
 8009178:	2b00      	cmp	r3, #0
 800917a:	d001      	beq.n	8009180 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 800917c:	f7f7 ff20 	bl	8000fc0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 8009180:	4805      	ldr	r0, [pc, #20]	; (8009198 <MX_USB_Device_Init+0x54>)
 8009182:	f7fe ff46 	bl	8008012 <USBD_Start>
 8009186:	4603      	mov	r3, r0
 8009188:	2b00      	cmp	r3, #0
 800918a:	d001      	beq.n	8009190 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 800918c:	f7f7 ff18 	bl	8000fc0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 8009190:	bf00      	nop
 8009192:	bd80      	pop	{r7, pc}
 8009194:	20000184 	.word	0x20000184
 8009198:	200006d4 	.word	0x200006d4
 800919c:	2000006c 	.word	0x2000006c
 80091a0:	20000170 	.word	0x20000170

080091a4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80091a4:	b580      	push	{r7, lr}
 80091a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80091a8:	2200      	movs	r2, #0
 80091aa:	4905      	ldr	r1, [pc, #20]	; (80091c0 <CDC_Init_FS+0x1c>)
 80091ac:	4805      	ldr	r0, [pc, #20]	; (80091c4 <CDC_Init_FS+0x20>)
 80091ae:	f7fe fe52 	bl	8007e56 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80091b2:	4905      	ldr	r1, [pc, #20]	; (80091c8 <CDC_Init_FS+0x24>)
 80091b4:	4803      	ldr	r0, [pc, #12]	; (80091c4 <CDC_Init_FS+0x20>)
 80091b6:	f7fe fe67 	bl	8007e88 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80091ba:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80091bc:	4618      	mov	r0, r3
 80091be:	bd80      	pop	{r7, pc}
 80091c0:	20000d8c 	.word	0x20000d8c
 80091c4:	200006d4 	.word	0x200006d4
 80091c8:	200009a4 	.word	0x200009a4

080091cc <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80091cc:	b480      	push	{r7}
 80091ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80091d0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80091d2:	4618      	mov	r0, r3
 80091d4:	46bd      	mov	sp, r7
 80091d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091da:	4770      	bx	lr

080091dc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80091dc:	b480      	push	{r7}
 80091de:	b083      	sub	sp, #12
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	4603      	mov	r3, r0
 80091e4:	6039      	str	r1, [r7, #0]
 80091e6:	71fb      	strb	r3, [r7, #7]
 80091e8:	4613      	mov	r3, r2
 80091ea:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80091ec:	79fb      	ldrb	r3, [r7, #7]
 80091ee:	2b23      	cmp	r3, #35	; 0x23
 80091f0:	d84a      	bhi.n	8009288 <CDC_Control_FS+0xac>
 80091f2:	a201      	add	r2, pc, #4	; (adr r2, 80091f8 <CDC_Control_FS+0x1c>)
 80091f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091f8:	08009289 	.word	0x08009289
 80091fc:	08009289 	.word	0x08009289
 8009200:	08009289 	.word	0x08009289
 8009204:	08009289 	.word	0x08009289
 8009208:	08009289 	.word	0x08009289
 800920c:	08009289 	.word	0x08009289
 8009210:	08009289 	.word	0x08009289
 8009214:	08009289 	.word	0x08009289
 8009218:	08009289 	.word	0x08009289
 800921c:	08009289 	.word	0x08009289
 8009220:	08009289 	.word	0x08009289
 8009224:	08009289 	.word	0x08009289
 8009228:	08009289 	.word	0x08009289
 800922c:	08009289 	.word	0x08009289
 8009230:	08009289 	.word	0x08009289
 8009234:	08009289 	.word	0x08009289
 8009238:	08009289 	.word	0x08009289
 800923c:	08009289 	.word	0x08009289
 8009240:	08009289 	.word	0x08009289
 8009244:	08009289 	.word	0x08009289
 8009248:	08009289 	.word	0x08009289
 800924c:	08009289 	.word	0x08009289
 8009250:	08009289 	.word	0x08009289
 8009254:	08009289 	.word	0x08009289
 8009258:	08009289 	.word	0x08009289
 800925c:	08009289 	.word	0x08009289
 8009260:	08009289 	.word	0x08009289
 8009264:	08009289 	.word	0x08009289
 8009268:	08009289 	.word	0x08009289
 800926c:	08009289 	.word	0x08009289
 8009270:	08009289 	.word	0x08009289
 8009274:	08009289 	.word	0x08009289
 8009278:	08009289 	.word	0x08009289
 800927c:	08009289 	.word	0x08009289
 8009280:	08009289 	.word	0x08009289
 8009284:	08009289 	.word	0x08009289
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009288:	bf00      	nop
  }

  return (USBD_OK);
 800928a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800928c:	4618      	mov	r0, r3
 800928e:	370c      	adds	r7, #12
 8009290:	46bd      	mov	sp, r7
 8009292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009296:	4770      	bx	lr

08009298 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009298:	b580      	push	{r7, lr}
 800929a:	b082      	sub	sp, #8
 800929c:	af00      	add	r7, sp, #0
 800929e:	6078      	str	r0, [r7, #4]
 80092a0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  CDC_On_Receive(Buf, Len); // (1)
 80092a2:	6839      	ldr	r1, [r7, #0]
 80092a4:	6878      	ldr	r0, [r7, #4]
 80092a6:	f7f6 ffb7 	bl	8000218 <CDC_On_Receive>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80092aa:	6879      	ldr	r1, [r7, #4]
 80092ac:	4805      	ldr	r0, [pc, #20]	; (80092c4 <CDC_Receive_FS+0x2c>)
 80092ae:	f7fe fdeb 	bl	8007e88 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80092b2:	4804      	ldr	r0, [pc, #16]	; (80092c4 <CDC_Receive_FS+0x2c>)
 80092b4:	f7fe fe2c 	bl	8007f10 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80092b8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80092ba:	4618      	mov	r0, r3
 80092bc:	3708      	adds	r7, #8
 80092be:	46bd      	mov	sp, r7
 80092c0:	bd80      	pop	{r7, pc}
 80092c2:	bf00      	nop
 80092c4:	200006d4 	.word	0x200006d4

080092c8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80092c8:	b580      	push	{r7, lr}
 80092ca:	b084      	sub	sp, #16
 80092cc:	af00      	add	r7, sp, #0
 80092ce:	6078      	str	r0, [r7, #4]
 80092d0:	460b      	mov	r3, r1
 80092d2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80092d4:	2300      	movs	r3, #0
 80092d6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80092d8:	4b0d      	ldr	r3, [pc, #52]	; (8009310 <CDC_Transmit_FS+0x48>)
 80092da:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80092de:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80092e0:	68bb      	ldr	r3, [r7, #8]
 80092e2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d001      	beq.n	80092ee <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80092ea:	2301      	movs	r3, #1
 80092ec:	e00b      	b.n	8009306 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80092ee:	887b      	ldrh	r3, [r7, #2]
 80092f0:	461a      	mov	r2, r3
 80092f2:	6879      	ldr	r1, [r7, #4]
 80092f4:	4806      	ldr	r0, [pc, #24]	; (8009310 <CDC_Transmit_FS+0x48>)
 80092f6:	f7fe fdae 	bl	8007e56 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80092fa:	4805      	ldr	r0, [pc, #20]	; (8009310 <CDC_Transmit_FS+0x48>)
 80092fc:	f7fe fdd8 	bl	8007eb0 <USBD_CDC_TransmitPacket>
 8009300:	4603      	mov	r3, r0
 8009302:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8009304:	7bfb      	ldrb	r3, [r7, #15]
}
 8009306:	4618      	mov	r0, r3
 8009308:	3710      	adds	r7, #16
 800930a:	46bd      	mov	sp, r7
 800930c:	bd80      	pop	{r7, pc}
 800930e:	bf00      	nop
 8009310:	200006d4 	.word	0x200006d4

08009314 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8009314:	b480      	push	{r7}
 8009316:	b087      	sub	sp, #28
 8009318:	af00      	add	r7, sp, #0
 800931a:	60f8      	str	r0, [r7, #12]
 800931c:	60b9      	str	r1, [r7, #8]
 800931e:	4613      	mov	r3, r2
 8009320:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8009322:	2300      	movs	r3, #0
 8009324:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8009326:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800932a:	4618      	mov	r0, r3
 800932c:	371c      	adds	r7, #28
 800932e:	46bd      	mov	sp, r7
 8009330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009334:	4770      	bx	lr
	...

08009338 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009338:	b480      	push	{r7}
 800933a:	b083      	sub	sp, #12
 800933c:	af00      	add	r7, sp, #0
 800933e:	4603      	mov	r3, r0
 8009340:	6039      	str	r1, [r7, #0]
 8009342:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 8009344:	683b      	ldr	r3, [r7, #0]
 8009346:	2212      	movs	r2, #18
 8009348:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800934a:	4b03      	ldr	r3, [pc, #12]	; (8009358 <USBD_CDC_DeviceDescriptor+0x20>)
}
 800934c:	4618      	mov	r0, r3
 800934e:	370c      	adds	r7, #12
 8009350:	46bd      	mov	sp, r7
 8009352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009356:	4770      	bx	lr
 8009358:	200001a4 	.word	0x200001a4

0800935c <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800935c:	b480      	push	{r7}
 800935e:	b083      	sub	sp, #12
 8009360:	af00      	add	r7, sp, #0
 8009362:	4603      	mov	r3, r0
 8009364:	6039      	str	r1, [r7, #0]
 8009366:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009368:	683b      	ldr	r3, [r7, #0]
 800936a:	2204      	movs	r2, #4
 800936c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800936e:	4b03      	ldr	r3, [pc, #12]	; (800937c <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 8009370:	4618      	mov	r0, r3
 8009372:	370c      	adds	r7, #12
 8009374:	46bd      	mov	sp, r7
 8009376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800937a:	4770      	bx	lr
 800937c:	200001b8 	.word	0x200001b8

08009380 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009380:	b580      	push	{r7, lr}
 8009382:	b082      	sub	sp, #8
 8009384:	af00      	add	r7, sp, #0
 8009386:	4603      	mov	r3, r0
 8009388:	6039      	str	r1, [r7, #0]
 800938a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800938c:	79fb      	ldrb	r3, [r7, #7]
 800938e:	2b00      	cmp	r3, #0
 8009390:	d105      	bne.n	800939e <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8009392:	683a      	ldr	r2, [r7, #0]
 8009394:	4907      	ldr	r1, [pc, #28]	; (80093b4 <USBD_CDC_ProductStrDescriptor+0x34>)
 8009396:	4808      	ldr	r0, [pc, #32]	; (80093b8 <USBD_CDC_ProductStrDescriptor+0x38>)
 8009398:	f7ff fdf3 	bl	8008f82 <USBD_GetString>
 800939c:	e004      	b.n	80093a8 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800939e:	683a      	ldr	r2, [r7, #0]
 80093a0:	4904      	ldr	r1, [pc, #16]	; (80093b4 <USBD_CDC_ProductStrDescriptor+0x34>)
 80093a2:	4805      	ldr	r0, [pc, #20]	; (80093b8 <USBD_CDC_ProductStrDescriptor+0x38>)
 80093a4:	f7ff fded 	bl	8008f82 <USBD_GetString>
  }
  return USBD_StrDesc;
 80093a8:	4b02      	ldr	r3, [pc, #8]	; (80093b4 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 80093aa:	4618      	mov	r0, r3
 80093ac:	3708      	adds	r7, #8
 80093ae:	46bd      	mov	sp, r7
 80093b0:	bd80      	pop	{r7, pc}
 80093b2:	bf00      	nop
 80093b4:	20001174 	.word	0x20001174
 80093b8:	08009bbc 	.word	0x08009bbc

080093bc <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80093bc:	b580      	push	{r7, lr}
 80093be:	b082      	sub	sp, #8
 80093c0:	af00      	add	r7, sp, #0
 80093c2:	4603      	mov	r3, r0
 80093c4:	6039      	str	r1, [r7, #0]
 80093c6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80093c8:	683a      	ldr	r2, [r7, #0]
 80093ca:	4904      	ldr	r1, [pc, #16]	; (80093dc <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 80093cc:	4804      	ldr	r0, [pc, #16]	; (80093e0 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 80093ce:	f7ff fdd8 	bl	8008f82 <USBD_GetString>
  return USBD_StrDesc;
 80093d2:	4b02      	ldr	r3, [pc, #8]	; (80093dc <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 80093d4:	4618      	mov	r0, r3
 80093d6:	3708      	adds	r7, #8
 80093d8:	46bd      	mov	sp, r7
 80093da:	bd80      	pop	{r7, pc}
 80093dc:	20001174 	.word	0x20001174
 80093e0:	08009bd4 	.word	0x08009bd4

080093e4 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80093e4:	b580      	push	{r7, lr}
 80093e6:	b082      	sub	sp, #8
 80093e8:	af00      	add	r7, sp, #0
 80093ea:	4603      	mov	r3, r0
 80093ec:	6039      	str	r1, [r7, #0]
 80093ee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80093f0:	683b      	ldr	r3, [r7, #0]
 80093f2:	221a      	movs	r2, #26
 80093f4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80093f6:	f000 f843 	bl	8009480 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 80093fa:	4b02      	ldr	r3, [pc, #8]	; (8009404 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 80093fc:	4618      	mov	r0, r3
 80093fe:	3708      	adds	r7, #8
 8009400:	46bd      	mov	sp, r7
 8009402:	bd80      	pop	{r7, pc}
 8009404:	200001bc 	.word	0x200001bc

08009408 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009408:	b580      	push	{r7, lr}
 800940a:	b082      	sub	sp, #8
 800940c:	af00      	add	r7, sp, #0
 800940e:	4603      	mov	r3, r0
 8009410:	6039      	str	r1, [r7, #0]
 8009412:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009414:	79fb      	ldrb	r3, [r7, #7]
 8009416:	2b00      	cmp	r3, #0
 8009418:	d105      	bne.n	8009426 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800941a:	683a      	ldr	r2, [r7, #0]
 800941c:	4907      	ldr	r1, [pc, #28]	; (800943c <USBD_CDC_ConfigStrDescriptor+0x34>)
 800941e:	4808      	ldr	r0, [pc, #32]	; (8009440 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8009420:	f7ff fdaf 	bl	8008f82 <USBD_GetString>
 8009424:	e004      	b.n	8009430 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8009426:	683a      	ldr	r2, [r7, #0]
 8009428:	4904      	ldr	r1, [pc, #16]	; (800943c <USBD_CDC_ConfigStrDescriptor+0x34>)
 800942a:	4805      	ldr	r0, [pc, #20]	; (8009440 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800942c:	f7ff fda9 	bl	8008f82 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009430:	4b02      	ldr	r3, [pc, #8]	; (800943c <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 8009432:	4618      	mov	r0, r3
 8009434:	3708      	adds	r7, #8
 8009436:	46bd      	mov	sp, r7
 8009438:	bd80      	pop	{r7, pc}
 800943a:	bf00      	nop
 800943c:	20001174 	.word	0x20001174
 8009440:	08009be8 	.word	0x08009be8

08009444 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009444:	b580      	push	{r7, lr}
 8009446:	b082      	sub	sp, #8
 8009448:	af00      	add	r7, sp, #0
 800944a:	4603      	mov	r3, r0
 800944c:	6039      	str	r1, [r7, #0]
 800944e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009450:	79fb      	ldrb	r3, [r7, #7]
 8009452:	2b00      	cmp	r3, #0
 8009454:	d105      	bne.n	8009462 <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8009456:	683a      	ldr	r2, [r7, #0]
 8009458:	4907      	ldr	r1, [pc, #28]	; (8009478 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800945a:	4808      	ldr	r0, [pc, #32]	; (800947c <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800945c:	f7ff fd91 	bl	8008f82 <USBD_GetString>
 8009460:	e004      	b.n	800946c <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8009462:	683a      	ldr	r2, [r7, #0]
 8009464:	4904      	ldr	r1, [pc, #16]	; (8009478 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8009466:	4805      	ldr	r0, [pc, #20]	; (800947c <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8009468:	f7ff fd8b 	bl	8008f82 <USBD_GetString>
  }
  return USBD_StrDesc;
 800946c:	4b02      	ldr	r3, [pc, #8]	; (8009478 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 800946e:	4618      	mov	r0, r3
 8009470:	3708      	adds	r7, #8
 8009472:	46bd      	mov	sp, r7
 8009474:	bd80      	pop	{r7, pc}
 8009476:	bf00      	nop
 8009478:	20001174 	.word	0x20001174
 800947c:	08009bf4 	.word	0x08009bf4

08009480 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009480:	b580      	push	{r7, lr}
 8009482:	b084      	sub	sp, #16
 8009484:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009486:	4b0f      	ldr	r3, [pc, #60]	; (80094c4 <Get_SerialNum+0x44>)
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800948c:	4b0e      	ldr	r3, [pc, #56]	; (80094c8 <Get_SerialNum+0x48>)
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009492:	4b0e      	ldr	r3, [pc, #56]	; (80094cc <Get_SerialNum+0x4c>)
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009498:	68fa      	ldr	r2, [r7, #12]
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	4413      	add	r3, r2
 800949e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d009      	beq.n	80094ba <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80094a6:	2208      	movs	r2, #8
 80094a8:	4909      	ldr	r1, [pc, #36]	; (80094d0 <Get_SerialNum+0x50>)
 80094aa:	68f8      	ldr	r0, [r7, #12]
 80094ac:	f000 f814 	bl	80094d8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80094b0:	2204      	movs	r2, #4
 80094b2:	4908      	ldr	r1, [pc, #32]	; (80094d4 <Get_SerialNum+0x54>)
 80094b4:	68b8      	ldr	r0, [r7, #8]
 80094b6:	f000 f80f 	bl	80094d8 <IntToUnicode>
  }
}
 80094ba:	bf00      	nop
 80094bc:	3710      	adds	r7, #16
 80094be:	46bd      	mov	sp, r7
 80094c0:	bd80      	pop	{r7, pc}
 80094c2:	bf00      	nop
 80094c4:	1fff7590 	.word	0x1fff7590
 80094c8:	1fff7594 	.word	0x1fff7594
 80094cc:	1fff7598 	.word	0x1fff7598
 80094d0:	200001be 	.word	0x200001be
 80094d4:	200001ce 	.word	0x200001ce

080094d8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80094d8:	b480      	push	{r7}
 80094da:	b087      	sub	sp, #28
 80094dc:	af00      	add	r7, sp, #0
 80094de:	60f8      	str	r0, [r7, #12]
 80094e0:	60b9      	str	r1, [r7, #8]
 80094e2:	4613      	mov	r3, r2
 80094e4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80094e6:	2300      	movs	r3, #0
 80094e8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80094ea:	2300      	movs	r3, #0
 80094ec:	75fb      	strb	r3, [r7, #23]
 80094ee:	e027      	b.n	8009540 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	0f1b      	lsrs	r3, r3, #28
 80094f4:	2b09      	cmp	r3, #9
 80094f6:	d80b      	bhi.n	8009510 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	0f1b      	lsrs	r3, r3, #28
 80094fc:	b2da      	uxtb	r2, r3
 80094fe:	7dfb      	ldrb	r3, [r7, #23]
 8009500:	005b      	lsls	r3, r3, #1
 8009502:	4619      	mov	r1, r3
 8009504:	68bb      	ldr	r3, [r7, #8]
 8009506:	440b      	add	r3, r1
 8009508:	3230      	adds	r2, #48	; 0x30
 800950a:	b2d2      	uxtb	r2, r2
 800950c:	701a      	strb	r2, [r3, #0]
 800950e:	e00a      	b.n	8009526 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	0f1b      	lsrs	r3, r3, #28
 8009514:	b2da      	uxtb	r2, r3
 8009516:	7dfb      	ldrb	r3, [r7, #23]
 8009518:	005b      	lsls	r3, r3, #1
 800951a:	4619      	mov	r1, r3
 800951c:	68bb      	ldr	r3, [r7, #8]
 800951e:	440b      	add	r3, r1
 8009520:	3237      	adds	r2, #55	; 0x37
 8009522:	b2d2      	uxtb	r2, r2
 8009524:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	011b      	lsls	r3, r3, #4
 800952a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800952c:	7dfb      	ldrb	r3, [r7, #23]
 800952e:	005b      	lsls	r3, r3, #1
 8009530:	3301      	adds	r3, #1
 8009532:	68ba      	ldr	r2, [r7, #8]
 8009534:	4413      	add	r3, r2
 8009536:	2200      	movs	r2, #0
 8009538:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800953a:	7dfb      	ldrb	r3, [r7, #23]
 800953c:	3301      	adds	r3, #1
 800953e:	75fb      	strb	r3, [r7, #23]
 8009540:	7dfa      	ldrb	r2, [r7, #23]
 8009542:	79fb      	ldrb	r3, [r7, #7]
 8009544:	429a      	cmp	r2, r3
 8009546:	d3d3      	bcc.n	80094f0 <IntToUnicode+0x18>
  }
}
 8009548:	bf00      	nop
 800954a:	371c      	adds	r7, #28
 800954c:	46bd      	mov	sp, r7
 800954e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009552:	4770      	bx	lr

08009554 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACK == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACK */
{
 8009554:	b580      	push	{r7, lr}
 8009556:	b084      	sub	sp, #16
 8009558:	af00      	add	r7, sp, #0
 800955a:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	4a0d      	ldr	r2, [pc, #52]	; (8009598 <HAL_PCD_MspInit+0x44>)
 8009562:	4293      	cmp	r3, r2
 8009564:	d113      	bne.n	800958e <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8009566:	4b0d      	ldr	r3, [pc, #52]	; (800959c <HAL_PCD_MspInit+0x48>)
 8009568:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800956a:	4a0c      	ldr	r2, [pc, #48]	; (800959c <HAL_PCD_MspInit+0x48>)
 800956c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009570:	6593      	str	r3, [r2, #88]	; 0x58
 8009572:	4b0a      	ldr	r3, [pc, #40]	; (800959c <HAL_PCD_MspInit+0x48>)
 8009574:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009576:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800957a:	60fb      	str	r3, [r7, #12]
 800957c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800957e:	2200      	movs	r2, #0
 8009580:	2100      	movs	r1, #0
 8009582:	2014      	movs	r0, #20
 8009584:	f7f8 f92b 	bl	80017de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8009588:	2014      	movs	r0, #20
 800958a:	f7f8 f942 	bl	8001812 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800958e:	bf00      	nop
 8009590:	3710      	adds	r7, #16
 8009592:	46bd      	mov	sp, r7
 8009594:	bd80      	pop	{r7, pc}
 8009596:	bf00      	nop
 8009598:	40005c00 	.word	0x40005c00
 800959c:	40021000 	.word	0x40021000

080095a0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80095a0:	b580      	push	{r7, lr}
 80095a2:	b082      	sub	sp, #8
 80095a4:	af00      	add	r7, sp, #0
 80095a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	f8d3 22f0 	ldr.w	r2, [r3, #752]	; 0x2f0
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80095b4:	4619      	mov	r1, r3
 80095b6:	4610      	mov	r0, r2
 80095b8:	f7fe fd76 	bl	80080a8 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 80095bc:	bf00      	nop
 80095be:	3708      	adds	r7, #8
 80095c0:	46bd      	mov	sp, r7
 80095c2:	bd80      	pop	{r7, pc}

080095c4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80095c4:	b580      	push	{r7, lr}
 80095c6:	b082      	sub	sp, #8
 80095c8:	af00      	add	r7, sp, #0
 80095ca:	6078      	str	r0, [r7, #4]
 80095cc:	460b      	mov	r3, r1
 80095ce:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 80095d6:	78fa      	ldrb	r2, [r7, #3]
 80095d8:	6879      	ldr	r1, [r7, #4]
 80095da:	4613      	mov	r3, r2
 80095dc:	009b      	lsls	r3, r3, #2
 80095de:	4413      	add	r3, r2
 80095e0:	00db      	lsls	r3, r3, #3
 80095e2:	440b      	add	r3, r1
 80095e4:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80095e8:	681a      	ldr	r2, [r3, #0]
 80095ea:	78fb      	ldrb	r3, [r7, #3]
 80095ec:	4619      	mov	r1, r3
 80095ee:	f7fe fdae 	bl	800814e <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 80095f2:	bf00      	nop
 80095f4:	3708      	adds	r7, #8
 80095f6:	46bd      	mov	sp, r7
 80095f8:	bd80      	pop	{r7, pc}

080095fa <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80095fa:	b580      	push	{r7, lr}
 80095fc:	b082      	sub	sp, #8
 80095fe:	af00      	add	r7, sp, #0
 8009600:	6078      	str	r0, [r7, #4]
 8009602:	460b      	mov	r3, r1
 8009604:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 800960c:	78fa      	ldrb	r2, [r7, #3]
 800960e:	6879      	ldr	r1, [r7, #4]
 8009610:	4613      	mov	r3, r2
 8009612:	009b      	lsls	r3, r3, #2
 8009614:	4413      	add	r3, r2
 8009616:	00db      	lsls	r3, r3, #3
 8009618:	440b      	add	r3, r1
 800961a:	333c      	adds	r3, #60	; 0x3c
 800961c:	681a      	ldr	r2, [r3, #0]
 800961e:	78fb      	ldrb	r3, [r7, #3]
 8009620:	4619      	mov	r1, r3
 8009622:	f7fe fdf7 	bl	8008214 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 8009626:	bf00      	nop
 8009628:	3708      	adds	r7, #8
 800962a:	46bd      	mov	sp, r7
 800962c:	bd80      	pop	{r7, pc}

0800962e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800962e:	b580      	push	{r7, lr}
 8009630:	b082      	sub	sp, #8
 8009632:	af00      	add	r7, sp, #0
 8009634:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800963c:	4618      	mov	r0, r3
 800963e:	f7fe fefb 	bl	8008438 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 8009642:	bf00      	nop
 8009644:	3708      	adds	r7, #8
 8009646:	46bd      	mov	sp, r7
 8009648:	bd80      	pop	{r7, pc}

0800964a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800964a:	b580      	push	{r7, lr}
 800964c:	b084      	sub	sp, #16
 800964e:	af00      	add	r7, sp, #0
 8009650:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009652:	2301      	movs	r3, #1
 8009654:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	689b      	ldr	r3, [r3, #8]
 800965a:	2b02      	cmp	r3, #2
 800965c:	d001      	beq.n	8009662 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800965e:	f7f7 fcaf 	bl	8000fc0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009668:	7bfa      	ldrb	r2, [r7, #15]
 800966a:	4611      	mov	r1, r2
 800966c:	4618      	mov	r0, r3
 800966e:	f7fe fea8 	bl	80083c2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009678:	4618      	mov	r0, r3
 800967a:	f7fe fe61 	bl	8008340 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800967e:	bf00      	nop
 8009680:	3710      	adds	r7, #16
 8009682:	46bd      	mov	sp, r7
 8009684:	bd80      	pop	{r7, pc}
	...

08009688 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009688:	b580      	push	{r7, lr}
 800968a:	b082      	sub	sp, #8
 800968c:	af00      	add	r7, sp, #0
 800968e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009696:	4618      	mov	r0, r3
 8009698:	f7fe fea3 	bl	80083e2 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	699b      	ldr	r3, [r3, #24]
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d005      	beq.n	80096b0 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80096a4:	4b04      	ldr	r3, [pc, #16]	; (80096b8 <HAL_PCD_SuspendCallback+0x30>)
 80096a6:	691b      	ldr	r3, [r3, #16]
 80096a8:	4a03      	ldr	r2, [pc, #12]	; (80096b8 <HAL_PCD_SuspendCallback+0x30>)
 80096aa:	f043 0306 	orr.w	r3, r3, #6
 80096ae:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 80096b0:	bf00      	nop
 80096b2:	3708      	adds	r7, #8
 80096b4:	46bd      	mov	sp, r7
 80096b6:	bd80      	pop	{r7, pc}
 80096b8:	e000ed00 	.word	0xe000ed00

080096bc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80096bc:	b580      	push	{r7, lr}
 80096be:	b082      	sub	sp, #8
 80096c0:	af00      	add	r7, sp, #0
 80096c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	699b      	ldr	r3, [r3, #24]
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d007      	beq.n	80096dc <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80096cc:	4b08      	ldr	r3, [pc, #32]	; (80096f0 <HAL_PCD_ResumeCallback+0x34>)
 80096ce:	691b      	ldr	r3, [r3, #16]
 80096d0:	4a07      	ldr	r2, [pc, #28]	; (80096f0 <HAL_PCD_ResumeCallback+0x34>)
 80096d2:	f023 0306 	bic.w	r3, r3, #6
 80096d6:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 80096d8:	f000 f9fa 	bl	8009ad0 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 80096e2:	4618      	mov	r0, r3
 80096e4:	f7fe fe92 	bl	800840c <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 80096e8:	bf00      	nop
 80096ea:	3708      	adds	r7, #8
 80096ec:	46bd      	mov	sp, r7
 80096ee:	bd80      	pop	{r7, pc}
 80096f0:	e000ed00 	.word	0xe000ed00

080096f4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80096f4:	b580      	push	{r7, lr}
 80096f6:	b082      	sub	sp, #8
 80096f8:	af00      	add	r7, sp, #0
 80096fa:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 80096fc:	4a2b      	ldr	r2, [pc, #172]	; (80097ac <USBD_LL_Init+0xb8>)
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	4a29      	ldr	r2, [pc, #164]	; (80097ac <USBD_LL_Init+0xb8>)
 8009708:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 800970c:	4b27      	ldr	r3, [pc, #156]	; (80097ac <USBD_LL_Init+0xb8>)
 800970e:	4a28      	ldr	r2, [pc, #160]	; (80097b0 <USBD_LL_Init+0xbc>)
 8009710:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8009712:	4b26      	ldr	r3, [pc, #152]	; (80097ac <USBD_LL_Init+0xb8>)
 8009714:	2208      	movs	r2, #8
 8009716:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8009718:	4b24      	ldr	r3, [pc, #144]	; (80097ac <USBD_LL_Init+0xb8>)
 800971a:	2202      	movs	r2, #2
 800971c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800971e:	4b23      	ldr	r3, [pc, #140]	; (80097ac <USBD_LL_Init+0xb8>)
 8009720:	2202      	movs	r2, #2
 8009722:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8009724:	4b21      	ldr	r3, [pc, #132]	; (80097ac <USBD_LL_Init+0xb8>)
 8009726:	2200      	movs	r2, #0
 8009728:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800972a:	4b20      	ldr	r3, [pc, #128]	; (80097ac <USBD_LL_Init+0xb8>)
 800972c:	2200      	movs	r2, #0
 800972e:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8009730:	4b1e      	ldr	r3, [pc, #120]	; (80097ac <USBD_LL_Init+0xb8>)
 8009732:	2200      	movs	r2, #0
 8009734:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8009736:	4b1d      	ldr	r3, [pc, #116]	; (80097ac <USBD_LL_Init+0xb8>)
 8009738:	2200      	movs	r2, #0
 800973a:	621a      	str	r2, [r3, #32]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800973c:	481b      	ldr	r0, [pc, #108]	; (80097ac <USBD_LL_Init+0xb8>)
 800973e:	f7f8 fa37 	bl	8001bb0 <HAL_PCD_Init>
 8009742:	4603      	mov	r3, r0
 8009744:	2b00      	cmp	r3, #0
 8009746:	d001      	beq.n	800974c <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 8009748:	f7f7 fc3a 	bl	8000fc0 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009752:	2318      	movs	r3, #24
 8009754:	2200      	movs	r2, #0
 8009756:	2100      	movs	r1, #0
 8009758:	f7f9 fd25 	bl	80031a6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009762:	2358      	movs	r3, #88	; 0x58
 8009764:	2200      	movs	r2, #0
 8009766:	2180      	movs	r1, #128	; 0x80
 8009768:	f7f9 fd1d 	bl	80031a6 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009772:	23c0      	movs	r3, #192	; 0xc0
 8009774:	2200      	movs	r2, #0
 8009776:	2181      	movs	r1, #129	; 0x81
 8009778:	f7f9 fd15 	bl	80031a6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009782:	f44f 7388 	mov.w	r3, #272	; 0x110
 8009786:	2200      	movs	r2, #0
 8009788:	2101      	movs	r1, #1
 800978a:	f7f9 fd0c 	bl	80031a6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009794:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009798:	2200      	movs	r2, #0
 800979a:	2182      	movs	r1, #130	; 0x82
 800979c:	f7f9 fd03 	bl	80031a6 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 80097a0:	2300      	movs	r3, #0
}
 80097a2:	4618      	mov	r0, r3
 80097a4:	3708      	adds	r7, #8
 80097a6:	46bd      	mov	sp, r7
 80097a8:	bd80      	pop	{r7, pc}
 80097aa:	bf00      	nop
 80097ac:	20001374 	.word	0x20001374
 80097b0:	40005c00 	.word	0x40005c00

080097b4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80097b4:	b580      	push	{r7, lr}
 80097b6:	b084      	sub	sp, #16
 80097b8:	af00      	add	r7, sp, #0
 80097ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80097bc:	2300      	movs	r3, #0
 80097be:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80097c0:	2300      	movs	r3, #0
 80097c2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80097ca:	4618      	mov	r0, r3
 80097cc:	f7f8 fad5 	bl	8001d7a <HAL_PCD_Start>
 80097d0:	4603      	mov	r3, r0
 80097d2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80097d4:	7bfb      	ldrb	r3, [r7, #15]
 80097d6:	4618      	mov	r0, r3
 80097d8:	f000 f980 	bl	8009adc <USBD_Get_USB_Status>
 80097dc:	4603      	mov	r3, r0
 80097de:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80097e0:	7bbb      	ldrb	r3, [r7, #14]
}
 80097e2:	4618      	mov	r0, r3
 80097e4:	3710      	adds	r7, #16
 80097e6:	46bd      	mov	sp, r7
 80097e8:	bd80      	pop	{r7, pc}

080097ea <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80097ea:	b580      	push	{r7, lr}
 80097ec:	b084      	sub	sp, #16
 80097ee:	af00      	add	r7, sp, #0
 80097f0:	6078      	str	r0, [r7, #4]
 80097f2:	4608      	mov	r0, r1
 80097f4:	4611      	mov	r1, r2
 80097f6:	461a      	mov	r2, r3
 80097f8:	4603      	mov	r3, r0
 80097fa:	70fb      	strb	r3, [r7, #3]
 80097fc:	460b      	mov	r3, r1
 80097fe:	70bb      	strb	r3, [r7, #2]
 8009800:	4613      	mov	r3, r2
 8009802:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009804:	2300      	movs	r3, #0
 8009806:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009808:	2300      	movs	r3, #0
 800980a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009812:	78bb      	ldrb	r3, [r7, #2]
 8009814:	883a      	ldrh	r2, [r7, #0]
 8009816:	78f9      	ldrb	r1, [r7, #3]
 8009818:	f7f8 fc44 	bl	80020a4 <HAL_PCD_EP_Open>
 800981c:	4603      	mov	r3, r0
 800981e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009820:	7bfb      	ldrb	r3, [r7, #15]
 8009822:	4618      	mov	r0, r3
 8009824:	f000 f95a 	bl	8009adc <USBD_Get_USB_Status>
 8009828:	4603      	mov	r3, r0
 800982a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800982c:	7bbb      	ldrb	r3, [r7, #14]
}
 800982e:	4618      	mov	r0, r3
 8009830:	3710      	adds	r7, #16
 8009832:	46bd      	mov	sp, r7
 8009834:	bd80      	pop	{r7, pc}

08009836 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009836:	b580      	push	{r7, lr}
 8009838:	b084      	sub	sp, #16
 800983a:	af00      	add	r7, sp, #0
 800983c:	6078      	str	r0, [r7, #4]
 800983e:	460b      	mov	r3, r1
 8009840:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009842:	2300      	movs	r3, #0
 8009844:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009846:	2300      	movs	r3, #0
 8009848:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009850:	78fa      	ldrb	r2, [r7, #3]
 8009852:	4611      	mov	r1, r2
 8009854:	4618      	mov	r0, r3
 8009856:	f7f8 fc8b 	bl	8002170 <HAL_PCD_EP_Close>
 800985a:	4603      	mov	r3, r0
 800985c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800985e:	7bfb      	ldrb	r3, [r7, #15]
 8009860:	4618      	mov	r0, r3
 8009862:	f000 f93b 	bl	8009adc <USBD_Get_USB_Status>
 8009866:	4603      	mov	r3, r0
 8009868:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800986a:	7bbb      	ldrb	r3, [r7, #14]
}
 800986c:	4618      	mov	r0, r3
 800986e:	3710      	adds	r7, #16
 8009870:	46bd      	mov	sp, r7
 8009872:	bd80      	pop	{r7, pc}

08009874 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009874:	b580      	push	{r7, lr}
 8009876:	b084      	sub	sp, #16
 8009878:	af00      	add	r7, sp, #0
 800987a:	6078      	str	r0, [r7, #4]
 800987c:	460b      	mov	r3, r1
 800987e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009880:	2300      	movs	r3, #0
 8009882:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009884:	2300      	movs	r3, #0
 8009886:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800988e:	78fa      	ldrb	r2, [r7, #3]
 8009890:	4611      	mov	r1, r2
 8009892:	4618      	mov	r0, r3
 8009894:	f7f8 fd4c 	bl	8002330 <HAL_PCD_EP_SetStall>
 8009898:	4603      	mov	r3, r0
 800989a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800989c:	7bfb      	ldrb	r3, [r7, #15]
 800989e:	4618      	mov	r0, r3
 80098a0:	f000 f91c 	bl	8009adc <USBD_Get_USB_Status>
 80098a4:	4603      	mov	r3, r0
 80098a6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80098a8:	7bbb      	ldrb	r3, [r7, #14]
}
 80098aa:	4618      	mov	r0, r3
 80098ac:	3710      	adds	r7, #16
 80098ae:	46bd      	mov	sp, r7
 80098b0:	bd80      	pop	{r7, pc}

080098b2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80098b2:	b580      	push	{r7, lr}
 80098b4:	b084      	sub	sp, #16
 80098b6:	af00      	add	r7, sp, #0
 80098b8:	6078      	str	r0, [r7, #4]
 80098ba:	460b      	mov	r3, r1
 80098bc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80098be:	2300      	movs	r3, #0
 80098c0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80098c2:	2300      	movs	r3, #0
 80098c4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80098cc:	78fa      	ldrb	r2, [r7, #3]
 80098ce:	4611      	mov	r1, r2
 80098d0:	4618      	mov	r0, r3
 80098d2:	f7f8 fd8d 	bl	80023f0 <HAL_PCD_EP_ClrStall>
 80098d6:	4603      	mov	r3, r0
 80098d8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80098da:	7bfb      	ldrb	r3, [r7, #15]
 80098dc:	4618      	mov	r0, r3
 80098de:	f000 f8fd 	bl	8009adc <USBD_Get_USB_Status>
 80098e2:	4603      	mov	r3, r0
 80098e4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80098e6:	7bbb      	ldrb	r3, [r7, #14]
}
 80098e8:	4618      	mov	r0, r3
 80098ea:	3710      	adds	r7, #16
 80098ec:	46bd      	mov	sp, r7
 80098ee:	bd80      	pop	{r7, pc}

080098f0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80098f0:	b480      	push	{r7}
 80098f2:	b085      	sub	sp, #20
 80098f4:	af00      	add	r7, sp, #0
 80098f6:	6078      	str	r0, [r7, #4]
 80098f8:	460b      	mov	r3, r1
 80098fa:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009902:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009904:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009908:	2b00      	cmp	r3, #0
 800990a:	da0c      	bge.n	8009926 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800990c:	78fb      	ldrb	r3, [r7, #3]
 800990e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009912:	68f9      	ldr	r1, [r7, #12]
 8009914:	1c5a      	adds	r2, r3, #1
 8009916:	4613      	mov	r3, r2
 8009918:	009b      	lsls	r3, r3, #2
 800991a:	4413      	add	r3, r2
 800991c:	00db      	lsls	r3, r3, #3
 800991e:	440b      	add	r3, r1
 8009920:	3302      	adds	r3, #2
 8009922:	781b      	ldrb	r3, [r3, #0]
 8009924:	e00b      	b.n	800993e <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009926:	78fb      	ldrb	r3, [r7, #3]
 8009928:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800992c:	68f9      	ldr	r1, [r7, #12]
 800992e:	4613      	mov	r3, r2
 8009930:	009b      	lsls	r3, r3, #2
 8009932:	4413      	add	r3, r2
 8009934:	00db      	lsls	r3, r3, #3
 8009936:	440b      	add	r3, r1
 8009938:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800993c:	781b      	ldrb	r3, [r3, #0]
  }
}
 800993e:	4618      	mov	r0, r3
 8009940:	3714      	adds	r7, #20
 8009942:	46bd      	mov	sp, r7
 8009944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009948:	4770      	bx	lr

0800994a <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800994a:	b580      	push	{r7, lr}
 800994c:	b084      	sub	sp, #16
 800994e:	af00      	add	r7, sp, #0
 8009950:	6078      	str	r0, [r7, #4]
 8009952:	460b      	mov	r3, r1
 8009954:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009956:	2300      	movs	r3, #0
 8009958:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800995a:	2300      	movs	r3, #0
 800995c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009964:	78fa      	ldrb	r2, [r7, #3]
 8009966:	4611      	mov	r1, r2
 8009968:	4618      	mov	r0, r3
 800996a:	f7f8 fb76 	bl	800205a <HAL_PCD_SetAddress>
 800996e:	4603      	mov	r3, r0
 8009970:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009972:	7bfb      	ldrb	r3, [r7, #15]
 8009974:	4618      	mov	r0, r3
 8009976:	f000 f8b1 	bl	8009adc <USBD_Get_USB_Status>
 800997a:	4603      	mov	r3, r0
 800997c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800997e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009980:	4618      	mov	r0, r3
 8009982:	3710      	adds	r7, #16
 8009984:	46bd      	mov	sp, r7
 8009986:	bd80      	pop	{r7, pc}

08009988 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009988:	b580      	push	{r7, lr}
 800998a:	b086      	sub	sp, #24
 800998c:	af00      	add	r7, sp, #0
 800998e:	60f8      	str	r0, [r7, #12]
 8009990:	607a      	str	r2, [r7, #4]
 8009992:	603b      	str	r3, [r7, #0]
 8009994:	460b      	mov	r3, r1
 8009996:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009998:	2300      	movs	r3, #0
 800999a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800999c:	2300      	movs	r3, #0
 800999e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80099a6:	7af9      	ldrb	r1, [r7, #11]
 80099a8:	683b      	ldr	r3, [r7, #0]
 80099aa:	687a      	ldr	r2, [r7, #4]
 80099ac:	f7f8 fc7d 	bl	80022aa <HAL_PCD_EP_Transmit>
 80099b0:	4603      	mov	r3, r0
 80099b2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80099b4:	7dfb      	ldrb	r3, [r7, #23]
 80099b6:	4618      	mov	r0, r3
 80099b8:	f000 f890 	bl	8009adc <USBD_Get_USB_Status>
 80099bc:	4603      	mov	r3, r0
 80099be:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80099c0:	7dbb      	ldrb	r3, [r7, #22]
}
 80099c2:	4618      	mov	r0, r3
 80099c4:	3718      	adds	r7, #24
 80099c6:	46bd      	mov	sp, r7
 80099c8:	bd80      	pop	{r7, pc}

080099ca <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80099ca:	b580      	push	{r7, lr}
 80099cc:	b086      	sub	sp, #24
 80099ce:	af00      	add	r7, sp, #0
 80099d0:	60f8      	str	r0, [r7, #12]
 80099d2:	607a      	str	r2, [r7, #4]
 80099d4:	603b      	str	r3, [r7, #0]
 80099d6:	460b      	mov	r3, r1
 80099d8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80099da:	2300      	movs	r3, #0
 80099dc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80099de:	2300      	movs	r3, #0
 80099e0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80099e8:	7af9      	ldrb	r1, [r7, #11]
 80099ea:	683b      	ldr	r3, [r7, #0]
 80099ec:	687a      	ldr	r2, [r7, #4]
 80099ee:	f7f8 fc07 	bl	8002200 <HAL_PCD_EP_Receive>
 80099f2:	4603      	mov	r3, r0
 80099f4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80099f6:	7dfb      	ldrb	r3, [r7, #23]
 80099f8:	4618      	mov	r0, r3
 80099fa:	f000 f86f 	bl	8009adc <USBD_Get_USB_Status>
 80099fe:	4603      	mov	r3, r0
 8009a00:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009a02:	7dbb      	ldrb	r3, [r7, #22]
}
 8009a04:	4618      	mov	r0, r3
 8009a06:	3718      	adds	r7, #24
 8009a08:	46bd      	mov	sp, r7
 8009a0a:	bd80      	pop	{r7, pc}

08009a0c <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009a0c:	b580      	push	{r7, lr}
 8009a0e:	b082      	sub	sp, #8
 8009a10:	af00      	add	r7, sp, #0
 8009a12:	6078      	str	r0, [r7, #4]
 8009a14:	460b      	mov	r3, r1
 8009a16:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009a1e:	78fa      	ldrb	r2, [r7, #3]
 8009a20:	4611      	mov	r1, r2
 8009a22:	4618      	mov	r0, r3
 8009a24:	f7f8 fc29 	bl	800227a <HAL_PCD_EP_GetRxCount>
 8009a28:	4603      	mov	r3, r0
}
 8009a2a:	4618      	mov	r0, r3
 8009a2c:	3708      	adds	r7, #8
 8009a2e:	46bd      	mov	sp, r7
 8009a30:	bd80      	pop	{r7, pc}
	...

08009a34 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a34:	b580      	push	{r7, lr}
 8009a36:	b082      	sub	sp, #8
 8009a38:	af00      	add	r7, sp, #0
 8009a3a:	6078      	str	r0, [r7, #4]
 8009a3c:	460b      	mov	r3, r1
 8009a3e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 8009a40:	78fb      	ldrb	r3, [r7, #3]
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d002      	beq.n	8009a4c <HAL_PCDEx_LPM_Callback+0x18>
 8009a46:	2b01      	cmp	r3, #1
 8009a48:	d013      	beq.n	8009a72 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 8009a4a:	e023      	b.n	8009a94 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	699b      	ldr	r3, [r3, #24]
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d007      	beq.n	8009a64 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8009a54:	f000 f83c 	bl	8009ad0 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009a58:	4b10      	ldr	r3, [pc, #64]	; (8009a9c <HAL_PCDEx_LPM_Callback+0x68>)
 8009a5a:	691b      	ldr	r3, [r3, #16]
 8009a5c:	4a0f      	ldr	r2, [pc, #60]	; (8009a9c <HAL_PCDEx_LPM_Callback+0x68>)
 8009a5e:	f023 0306 	bic.w	r3, r3, #6
 8009a62:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009a6a:	4618      	mov	r0, r3
 8009a6c:	f7fe fcce 	bl	800840c <USBD_LL_Resume>
    break;
 8009a70:	e010      	b.n	8009a94 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009a78:	4618      	mov	r0, r3
 8009a7a:	f7fe fcb2 	bl	80083e2 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	699b      	ldr	r3, [r3, #24]
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d005      	beq.n	8009a92 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009a86:	4b05      	ldr	r3, [pc, #20]	; (8009a9c <HAL_PCDEx_LPM_Callback+0x68>)
 8009a88:	691b      	ldr	r3, [r3, #16]
 8009a8a:	4a04      	ldr	r2, [pc, #16]	; (8009a9c <HAL_PCDEx_LPM_Callback+0x68>)
 8009a8c:	f043 0306 	orr.w	r3, r3, #6
 8009a90:	6113      	str	r3, [r2, #16]
    break;
 8009a92:	bf00      	nop
}
 8009a94:	bf00      	nop
 8009a96:	3708      	adds	r7, #8
 8009a98:	46bd      	mov	sp, r7
 8009a9a:	bd80      	pop	{r7, pc}
 8009a9c:	e000ed00 	.word	0xe000ed00

08009aa0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009aa0:	b480      	push	{r7}
 8009aa2:	b083      	sub	sp, #12
 8009aa4:	af00      	add	r7, sp, #0
 8009aa6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009aa8:	4b03      	ldr	r3, [pc, #12]	; (8009ab8 <USBD_static_malloc+0x18>)
}
 8009aaa:	4618      	mov	r0, r3
 8009aac:	370c      	adds	r7, #12
 8009aae:	46bd      	mov	sp, r7
 8009ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ab4:	4770      	bx	lr
 8009ab6:	bf00      	nop
 8009ab8:	20000204 	.word	0x20000204

08009abc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009abc:	b480      	push	{r7}
 8009abe:	b083      	sub	sp, #12
 8009ac0:	af00      	add	r7, sp, #0
 8009ac2:	6078      	str	r0, [r7, #4]

}
 8009ac4:	bf00      	nop
 8009ac6:	370c      	adds	r7, #12
 8009ac8:	46bd      	mov	sp, r7
 8009aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ace:	4770      	bx	lr

08009ad0 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8009ad0:	b580      	push	{r7, lr}
 8009ad2:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8009ad4:	f7f6 fca8 	bl	8000428 <SystemClock_Config>
}
 8009ad8:	bf00      	nop
 8009ada:	bd80      	pop	{r7, pc}

08009adc <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009adc:	b480      	push	{r7}
 8009ade:	b085      	sub	sp, #20
 8009ae0:	af00      	add	r7, sp, #0
 8009ae2:	4603      	mov	r3, r0
 8009ae4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009ae6:	2300      	movs	r3, #0
 8009ae8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009aea:	79fb      	ldrb	r3, [r7, #7]
 8009aec:	2b03      	cmp	r3, #3
 8009aee:	d817      	bhi.n	8009b20 <USBD_Get_USB_Status+0x44>
 8009af0:	a201      	add	r2, pc, #4	; (adr r2, 8009af8 <USBD_Get_USB_Status+0x1c>)
 8009af2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009af6:	bf00      	nop
 8009af8:	08009b09 	.word	0x08009b09
 8009afc:	08009b0f 	.word	0x08009b0f
 8009b00:	08009b15 	.word	0x08009b15
 8009b04:	08009b1b 	.word	0x08009b1b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009b08:	2300      	movs	r3, #0
 8009b0a:	73fb      	strb	r3, [r7, #15]
    break;
 8009b0c:	e00b      	b.n	8009b26 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009b0e:	2303      	movs	r3, #3
 8009b10:	73fb      	strb	r3, [r7, #15]
    break;
 8009b12:	e008      	b.n	8009b26 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009b14:	2301      	movs	r3, #1
 8009b16:	73fb      	strb	r3, [r7, #15]
    break;
 8009b18:	e005      	b.n	8009b26 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009b1a:	2303      	movs	r3, #3
 8009b1c:	73fb      	strb	r3, [r7, #15]
    break;
 8009b1e:	e002      	b.n	8009b26 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009b20:	2303      	movs	r3, #3
 8009b22:	73fb      	strb	r3, [r7, #15]
    break;
 8009b24:	bf00      	nop
  }
  return usb_status;
 8009b26:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b28:	4618      	mov	r0, r3
 8009b2a:	3714      	adds	r7, #20
 8009b2c:	46bd      	mov	sp, r7
 8009b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b32:	4770      	bx	lr

08009b34 <__libc_init_array>:
 8009b34:	b570      	push	{r4, r5, r6, lr}
 8009b36:	4e0d      	ldr	r6, [pc, #52]	; (8009b6c <__libc_init_array+0x38>)
 8009b38:	4c0d      	ldr	r4, [pc, #52]	; (8009b70 <__libc_init_array+0x3c>)
 8009b3a:	1ba4      	subs	r4, r4, r6
 8009b3c:	10a4      	asrs	r4, r4, #2
 8009b3e:	2500      	movs	r5, #0
 8009b40:	42a5      	cmp	r5, r4
 8009b42:	d109      	bne.n	8009b58 <__libc_init_array+0x24>
 8009b44:	4e0b      	ldr	r6, [pc, #44]	; (8009b74 <__libc_init_array+0x40>)
 8009b46:	4c0c      	ldr	r4, [pc, #48]	; (8009b78 <__libc_init_array+0x44>)
 8009b48:	f000 f82c 	bl	8009ba4 <_init>
 8009b4c:	1ba4      	subs	r4, r4, r6
 8009b4e:	10a4      	asrs	r4, r4, #2
 8009b50:	2500      	movs	r5, #0
 8009b52:	42a5      	cmp	r5, r4
 8009b54:	d105      	bne.n	8009b62 <__libc_init_array+0x2e>
 8009b56:	bd70      	pop	{r4, r5, r6, pc}
 8009b58:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009b5c:	4798      	blx	r3
 8009b5e:	3501      	adds	r5, #1
 8009b60:	e7ee      	b.n	8009b40 <__libc_init_array+0xc>
 8009b62:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009b66:	4798      	blx	r3
 8009b68:	3501      	adds	r5, #1
 8009b6a:	e7f2      	b.n	8009b52 <__libc_init_array+0x1e>
 8009b6c:	08009c14 	.word	0x08009c14
 8009b70:	08009c14 	.word	0x08009c14
 8009b74:	08009c14 	.word	0x08009c14
 8009b78:	08009c18 	.word	0x08009c18

08009b7c <memcpy>:
 8009b7c:	b510      	push	{r4, lr}
 8009b7e:	1e43      	subs	r3, r0, #1
 8009b80:	440a      	add	r2, r1
 8009b82:	4291      	cmp	r1, r2
 8009b84:	d100      	bne.n	8009b88 <memcpy+0xc>
 8009b86:	bd10      	pop	{r4, pc}
 8009b88:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009b8c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009b90:	e7f7      	b.n	8009b82 <memcpy+0x6>

08009b92 <memset>:
 8009b92:	4402      	add	r2, r0
 8009b94:	4603      	mov	r3, r0
 8009b96:	4293      	cmp	r3, r2
 8009b98:	d100      	bne.n	8009b9c <memset+0xa>
 8009b9a:	4770      	bx	lr
 8009b9c:	f803 1b01 	strb.w	r1, [r3], #1
 8009ba0:	e7f9      	b.n	8009b96 <memset+0x4>
	...

08009ba4 <_init>:
 8009ba4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ba6:	bf00      	nop
 8009ba8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009baa:	bc08      	pop	{r3}
 8009bac:	469e      	mov	lr, r3
 8009bae:	4770      	bx	lr

08009bb0 <_fini>:
 8009bb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bb2:	bf00      	nop
 8009bb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009bb6:	bc08      	pop	{r3}
 8009bb8:	469e      	mov	lr, r3
 8009bba:	4770      	bx	lr
