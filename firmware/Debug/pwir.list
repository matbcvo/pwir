
pwir.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009950  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08009b28  08009b28  00019b28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009b80  08009b80  000201d8  2**0
                  CONTENTS
  4 .ARM          00000000  08009b80  08009b80  000201d8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009b80  08009b80  000201d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009b80  08009b80  00019b80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009b84  08009b84  00019b84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  08009b88  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001490  200001d8  08009d60  000201d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001668  08009d60  00021668  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ada7  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003476  00000000  00000000  0003afaf  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001398  00000000  00000000  0003e428  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001220  00000000  00000000  0003f7c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000205b2  00000000  00000000  000409e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00011bd5  00000000  00000000  00060f92  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c42da  00000000  00000000  00072b67  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00136e41  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000051a4  00000000  00000000  00136ebc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	200001d8 	.word	0x200001d8
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08009b10 	.word	0x08009b10

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	200001dc 	.word	0x200001dc
 8000214:	08009b10 	.word	0x08009b10

08000218 <CDC_On_Receive>:
  .delimiter = 0
}; // (4) Instance of received data.

volatile uint8_t isCommandReceived = 0; // (5) Boolean (0/1) variable to signify that data has been received. Variable is marked volatile to prevent the compiler from removing it during optimisation.

void CDC_On_Receive(uint8_t* buffer, uint32_t* length) { // (6) Define the function that is called when data is received. It is usually preferable to keep interrupt handlers small and fast to avoid blocking other code from executing. Only data copying and setting isCommandReceived to 1 is done in the handler. Rest is handled in the main while loop.
 8000218:	b580      	push	{r7, lr}
 800021a:	b082      	sub	sp, #8
 800021c:	af00      	add	r7, sp, #0
 800021e:	6078      	str	r0, [r7, #4]
 8000220:	6039      	str	r1, [r7, #0]
  //HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
  if (*length == sizeof(Command)) { // (7) Check if received data the has same length as Command struct.
 8000222:	683b      	ldr	r3, [r7, #0]
 8000224:	681b      	ldr	r3, [r3, #0]
 8000226:	2b0c      	cmp	r3, #12
 8000228:	d10d      	bne.n	8000246 <CDC_On_Receive+0x2e>
    memcpy(&command, buffer, sizeof(Command)); // (8) Copy received data to command instance.
 800022a:	220c      	movs	r2, #12
 800022c:	6879      	ldr	r1, [r7, #4]
 800022e:	4808      	ldr	r0, [pc, #32]	; (8000250 <CDC_On_Receive+0x38>)
 8000230:	f009 fc5a 	bl	8009ae8 <memcpy>

    if (command.delimiter == 0xAAAA) { // (9) Check the delimiter as a validation of received data.
 8000234:	4b06      	ldr	r3, [pc, #24]	; (8000250 <CDC_On_Receive+0x38>)
 8000236:	895b      	ldrh	r3, [r3, #10]
 8000238:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800023c:	4293      	cmp	r3, r2
 800023e:	d102      	bne.n	8000246 <CDC_On_Receive+0x2e>
      isCommandReceived = 1;
 8000240:	4b04      	ldr	r3, [pc, #16]	; (8000254 <CDC_On_Receive+0x3c>)
 8000242:	2201      	movs	r2, #1
 8000244:	701a      	strb	r2, [r3, #0]
    }
  }
}
 8000246:	bf00      	nop
 8000248:	3708      	adds	r7, #8
 800024a:	46bd      	mov	sp, r7
 800024c:	bd80      	pop	{r7, pc}
 800024e:	bf00      	nop
 8000250:	200001f4 	.word	0x200001f4
 8000254:	20000200 	.word	0x20000200

08000258 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000258:	b580      	push	{r7, lr}
 800025a:	b088      	sub	sp, #32
 800025c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  // (1) Define an instance of Feedback for sending data.
  Feedback feedback = {
 800025e:	1d3b      	adds	r3, r7, #4
 8000260:	2200      	movs	r2, #0
 8000262:	601a      	str	r2, [r3, #0]
 8000264:	605a      	str	r2, [r3, #4]
 8000266:	609a      	str	r2, [r3, #8]
 8000268:	60da      	str	r2, [r3, #12]
 800026a:	611a      	str	r2, [r3, #16]
 800026c:	615a      	str	r2, [r3, #20]
 800026e:	619a      	str	r2, [r3, #24]
 8000270:	f64a 23aa 	movw	r3, #43690	; 0xaaaa
 8000274:	83bb      	strh	r3, [r7, #28]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000276:	f001 f91c 	bl	80014b2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800027a:	f000 f8b9 	bl	80003f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800027e:	f000 fcff 	bl	8000c80 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000282:	f000 f91d 	bl	80004c0 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000286:	f000 f98b 	bl	80005a0 <MX_TIM2_Init>
  MX_TIM3_Init();
 800028a:	f000 fa09 	bl	80006a0 <MX_TIM3_Init>
  MX_TIM4_Init();
 800028e:	f000 fa5d 	bl	800074c <MX_TIM4_Init>
  MX_TIM8_Init();
 8000292:	f000 fae7 	bl	8000864 <MX_TIM8_Init>
  MX_TIM16_Init();
 8000296:	f000 fbff 	bl	8000a98 <MX_TIM16_Init>
  MX_TIM17_Init();
 800029a:	f000 fc77 	bl	8000b8c <MX_TIM17_Init>
  MX_USB_Device_Init();
 800029e:	f008 ff07 	bl	80090b0 <MX_USB_Device_Init>
  MX_TIM15_Init();
 80002a2:	f000 fb73 	bl	800098c <MX_TIM15_Init>
  MX_TIM6_Init();
 80002a6:	f000 faa7 	bl	80007f8 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_1 | TIM_CHANNEL_2); // Encoder 1
 80002aa:	2104      	movs	r1, #4
 80002ac:	483c      	ldr	r0, [pc, #240]	; (80003a0 <main+0x148>)
 80002ae:	f004 f9fd 	bl	80046ac <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_1 | TIM_CHANNEL_2); // Encoder 2
 80002b2:	2104      	movs	r1, #4
 80002b4:	483b      	ldr	r0, [pc, #236]	; (80003a4 <main+0x14c>)
 80002b6:	f004 f9f9 	bl	80046ac <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_1 | TIM_CHANNEL_2); // Encoder 3
 80002ba:	2104      	movs	r1, #4
 80002bc:	483a      	ldr	r0, [pc, #232]	; (80003a8 <main+0x150>)
 80002be:	f004 f9f5 	bl	80046ac <HAL_TIM_Encoder_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1); // Motor PWM for draiver 1
 80002c2:	2100      	movs	r1, #0
 80002c4:	4839      	ldr	r0, [pc, #228]	; (80003ac <main+0x154>)
 80002c6:	f004 f84b 	bl	8004360 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2); // Motor PWM for draiver 1
 80002ca:	2104      	movs	r1, #4
 80002cc:	4837      	ldr	r0, [pc, #220]	; (80003ac <main+0x154>)
 80002ce:	f004 f847 	bl	8004360 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3); // Motor PWM for draiver 2
 80002d2:	2108      	movs	r1, #8
 80002d4:	4835      	ldr	r0, [pc, #212]	; (80003ac <main+0x154>)
 80002d6:	f004 f843 	bl	8004360 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4); // Motor PWM for draiver 2
 80002da:	210c      	movs	r1, #12
 80002dc:	4833      	ldr	r0, [pc, #204]	; (80003ac <main+0x154>)
 80002de:	f004 f83f 	bl	8004360 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1); // Motor PWM for draiver 3
 80002e2:	2100      	movs	r1, #0
 80002e4:	4832      	ldr	r0, [pc, #200]	; (80003b0 <main+0x158>)
 80002e6:	f004 f83b 	bl	8004360 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim17, TIM_CHANNEL_1); // Motor PWM for draiver 3
 80002ea:	2100      	movs	r1, #0
 80002ec:	4831      	ldr	r0, [pc, #196]	; (80003b4 <main+0x15c>)
 80002ee:	f004 f837 	bl	8004360 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1); // Thrower PWM
 80002f2:	2100      	movs	r1, #0
 80002f4:	4830      	ldr	r0, [pc, #192]	; (80003b8 <main+0x160>)
 80002f6:	f004 f833 	bl	8004360 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_2); // Thrower Angle PWM
 80002fa:	2104      	movs	r1, #4
 80002fc:	482f      	ldr	r0, [pc, #188]	; (80003bc <main+0x164>)
 80002fe:	f004 f82f 	bl	8004360 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim6);
 8000302:	482f      	ldr	r0, [pc, #188]	; (80003c0 <main+0x168>)
 8000304:	f003 ff6a 	bl	80041dc <HAL_TIM_Base_Start_IT>
    /* USER CODE BEGIN 3 */
	  //HAL_Delay(1000);
	  // Send command: 00 00 00 00 00 00 00 00 AA AA
	  //               01
	  //               02
	if (isCommandReceived) { // (2) Only return data when something has been received.
 8000308:	4b2e      	ldr	r3, [pc, #184]	; (80003c4 <main+0x16c>)
 800030a:	781b      	ldrb	r3, [r3, #0]
 800030c:	b2db      	uxtb	r3, r3
 800030e:	2b00      	cmp	r3, #0
 8000310:	d0fa      	beq.n	8000308 <main+0xb0>
		isCommandReceived = 0;
 8000312:	4b2c      	ldr	r3, [pc, #176]	; (80003c4 <main+0x16c>)
 8000314:	2200      	movs	r2, #0
 8000316:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin); // (3) Toggle LED to indicate that data has been received.
 8000318:	f44f 7180 	mov.w	r1, #256	; 0x100
 800031c:	482a      	ldr	r0, [pc, #168]	; (80003c8 <main+0x170>)
 800031e:	f001 fbe3 	bl	8001ae8 <HAL_GPIO_TogglePin>

		motor1.setpoint = command.speed1;
 8000322:	4b2a      	ldr	r3, [pc, #168]	; (80003cc <main+0x174>)
 8000324:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000328:	4b29      	ldr	r3, [pc, #164]	; (80003d0 <main+0x178>)
 800032a:	801a      	strh	r2, [r3, #0]
		motor2.setpoint = command.speed2;
 800032c:	4b27      	ldr	r3, [pc, #156]	; (80003cc <main+0x174>)
 800032e:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8000332:	4b28      	ldr	r3, [pc, #160]	; (80003d4 <main+0x17c>)
 8000334:	801a      	strh	r2, [r3, #0]
		motor3.setpoint = command.speed3;
 8000336:	4b25      	ldr	r3, [pc, #148]	; (80003cc <main+0x174>)
 8000338:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 800033c:	4b26      	ldr	r3, [pc, #152]	; (80003d8 <main+0x180>)
 800033e:	801a      	strh	r2, [r3, #0]

		// (4) Update feedback with current motor speeds.
		feedback.speed1 = motor1.speed;
 8000340:	4b23      	ldr	r3, [pc, #140]	; (80003d0 <main+0x178>)
 8000342:	685b      	ldr	r3, [r3, #4]
 8000344:	607b      	str	r3, [r7, #4]
		feedback.speed2 = motor2.speed;
 8000346:	4b23      	ldr	r3, [pc, #140]	; (80003d4 <main+0x17c>)
 8000348:	685b      	ldr	r3, [r3, #4]
 800034a:	60bb      	str	r3, [r7, #8]
		feedback.speed3 = motor3.speed;
 800034c:	4b22      	ldr	r3, [pc, #136]	; (80003d8 <main+0x180>)
 800034e:	685b      	ldr	r3, [r3, #4]
 8000350:	60fb      	str	r3, [r7, #12]
		feedback.positionChange1 = motor1.positionChange;
 8000352:	4b1f      	ldr	r3, [pc, #124]	; (80003d0 <main+0x178>)
 8000354:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8000358:	823b      	strh	r3, [r7, #16]
		feedback.positionChange2 = motor2.positionChange;
 800035a:	4b1e      	ldr	r3, [pc, #120]	; (80003d4 <main+0x17c>)
 800035c:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8000360:	827b      	strh	r3, [r7, #18]
		feedback.positionChange3 = motor3.positionChange;
 8000362:	4b1d      	ldr	r3, [pc, #116]	; (80003d8 <main+0x180>)
 8000364:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8000368:	82bb      	strh	r3, [r7, #20]
		feedback.encoder1 = (int16_t)TIM1->CNT;
 800036a:	4b1c      	ldr	r3, [pc, #112]	; (80003dc <main+0x184>)
 800036c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800036e:	b21b      	sxth	r3, r3
 8000370:	82fb      	strh	r3, [r7, #22]
		feedback.encoder2 = (int16_t)TIM3->CNT;
 8000372:	4b1b      	ldr	r3, [pc, #108]	; (80003e0 <main+0x188>)
 8000374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000376:	b21b      	sxth	r3, r3
 8000378:	833b      	strh	r3, [r7, #24]
		feedback.encoder3 = (int16_t)TIM4->CNT;
 800037a:	4b1a      	ldr	r3, [pc, #104]	; (80003e4 <main+0x18c>)
 800037c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800037e:	b21b      	sxth	r3, r3
 8000380:	837b      	strh	r3, [r7, #26]

		// Start thrower ESC at lower than 3200
		// Then set speed to 3200 ... 6400
		TIM8->CCR1 = command.throwerSpeed; // thrower
 8000382:	4b12      	ldr	r3, [pc, #72]	; (80003cc <main+0x174>)
 8000384:	88da      	ldrh	r2, [r3, #6]
 8000386:	4b18      	ldr	r3, [pc, #96]	; (80003e8 <main+0x190>)
 8000388:	635a      	str	r2, [r3, #52]	; 0x34

		TIM15->CCR2 = command.throwerAngle; // thrower angle
 800038a:	4b10      	ldr	r3, [pc, #64]	; (80003cc <main+0x174>)
 800038c:	891a      	ldrh	r2, [r3, #8]
 800038e:	4b17      	ldr	r3, [pc, #92]	; (80003ec <main+0x194>)
 8000390:	639a      	str	r2, [r3, #56]	; 0x38

		CDC_Transmit_FS(&feedback, sizeof(feedback)); // (5) Send data over USB.
 8000392:	1d3b      	adds	r3, r7, #4
 8000394:	211c      	movs	r1, #28
 8000396:	4618      	mov	r0, r3
 8000398:	f008 ff4c 	bl	8009234 <CDC_Transmit_FS>
	if (isCommandReceived) { // (2) Only return data when something has been received.
 800039c:	e7b4      	b.n	8000308 <main+0xb0>
 800039e:	bf00      	nop
 80003a0:	200005ec 	.word	0x200005ec
 80003a4:	20000554 	.word	0x20000554
 80003a8:	20000470 	.word	0x20000470
 80003ac:	20000638 	.word	0x20000638
 80003b0:	20000684 	.word	0x20000684
 80003b4:	20000508 	.word	0x20000508
 80003b8:	20000424 	.word	0x20000424
 80003bc:	200004bc 	.word	0x200004bc
 80003c0:	200005a0 	.word	0x200005a0
 80003c4:	20000200 	.word	0x20000200
 80003c8:	48000400 	.word	0x48000400
 80003cc:	200001f4 	.word	0x200001f4
 80003d0:	20000000 	.word	0x20000000
 80003d4:	2000001c 	.word	0x2000001c
 80003d8:	20000038 	.word	0x20000038
 80003dc:	40012c00 	.word	0x40012c00
 80003e0:	40000400 	.word	0x40000400
 80003e4:	40000800 	.word	0x40000800
 80003e8:	40013400 	.word	0x40013400
 80003ec:	40014000 	.word	0x40014000

080003f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003f0:	b580      	push	{r7, lr}
 80003f2:	b0a4      	sub	sp, #144	; 0x90
 80003f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003f6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80003fa:	2238      	movs	r2, #56	; 0x38
 80003fc:	2100      	movs	r1, #0
 80003fe:	4618      	mov	r0, r3
 8000400:	f009 fb7d 	bl	8009afe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000404:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000408:	2200      	movs	r2, #0
 800040a:	601a      	str	r2, [r3, #0]
 800040c:	605a      	str	r2, [r3, #4]
 800040e:	609a      	str	r2, [r3, #8]
 8000410:	60da      	str	r2, [r3, #12]
 8000412:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000414:	463b      	mov	r3, r7
 8000416:	2244      	movs	r2, #68	; 0x44
 8000418:	2100      	movs	r1, #0
 800041a:	4618      	mov	r0, r3
 800041c:	f009 fb6f 	bl	8009afe <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000420:	2000      	movs	r0, #0
 8000422:	f002 fee3 	bl	80031ec <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 8000426:	2322      	movs	r3, #34	; 0x22
 8000428:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800042a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800042e:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000430:	2340      	movs	r3, #64	; 0x40
 8000432:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000434:	2301      	movs	r3, #1
 8000436:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000438:	2302      	movs	r3, #2
 800043a:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800043c:	2302      	movs	r3, #2
 800043e:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000440:	2301      	movs	r3, #1
 8000442:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 20;
 8000444:	2314      	movs	r3, #20
 8000446:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800044a:	2302      	movs	r3, #2
 800044c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 8000450:	2304      	movs	r3, #4
 8000452:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000456:	2302      	movs	r3, #2
 8000458:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800045c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000460:	4618      	mov	r0, r3
 8000462:	f002 ff77 	bl	8003354 <HAL_RCC_OscConfig>
 8000466:	4603      	mov	r3, r0
 8000468:	2b00      	cmp	r3, #0
 800046a:	d001      	beq.n	8000470 <SystemClock_Config+0x80>
  {
    Error_Handler();
 800046c:	f000 fd5e 	bl	8000f2c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000470:	230f      	movs	r3, #15
 8000472:	647b      	str	r3, [r7, #68]	; 0x44
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000474:	2303      	movs	r3, #3
 8000476:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000478:	2300      	movs	r3, #0
 800047a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800047c:	2300      	movs	r3, #0
 800047e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000480:	2300      	movs	r3, #0
 8000482:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000484:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000488:	2104      	movs	r1, #4
 800048a:	4618      	mov	r0, r3
 800048c:	f003 fa7a 	bl	8003984 <HAL_RCC_ClockConfig>
 8000490:	4603      	mov	r3, r0
 8000492:	2b00      	cmp	r3, #0
 8000494:	d001      	beq.n	800049a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000496:	f000 fd49 	bl	8000f2c <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800049a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800049e:	603b      	str	r3, [r7, #0]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80004a0:	2300      	movs	r3, #0
 80004a2:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80004a4:	463b      	mov	r3, r7
 80004a6:	4618      	mov	r0, r3
 80004a8:	f003 fc50 	bl	8003d4c <HAL_RCCEx_PeriphCLKConfig>
 80004ac:	4603      	mov	r3, r0
 80004ae:	2b00      	cmp	r3, #0
 80004b0:	d001      	beq.n	80004b6 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80004b2:	f000 fd3b 	bl	8000f2c <Error_Handler>
  }
}
 80004b6:	bf00      	nop
 80004b8:	3790      	adds	r7, #144	; 0x90
 80004ba:	46bd      	mov	sp, r7
 80004bc:	bd80      	pop	{r7, pc}
	...

080004c0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b09a      	sub	sp, #104	; 0x68
 80004c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80004c6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80004ca:	2224      	movs	r2, #36	; 0x24
 80004cc:	2100      	movs	r1, #0
 80004ce:	4618      	mov	r0, r3
 80004d0:	f009 fb15 	bl	8009afe <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004d4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80004d8:	2200      	movs	r2, #0
 80004da:	601a      	str	r2, [r3, #0]
 80004dc:	605a      	str	r2, [r3, #4]
 80004de:	609a      	str	r2, [r3, #8]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80004e0:	1d3b      	adds	r3, r7, #4
 80004e2:	2234      	movs	r2, #52	; 0x34
 80004e4:	2100      	movs	r1, #0
 80004e6:	4618      	mov	r0, r3
 80004e8:	f009 fb09 	bl	8009afe <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80004ec:	4b2a      	ldr	r3, [pc, #168]	; (8000598 <MX_TIM1_Init+0xd8>)
 80004ee:	4a2b      	ldr	r2, [pc, #172]	; (800059c <MX_TIM1_Init+0xdc>)
 80004f0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80004f2:	4b29      	ldr	r3, [pc, #164]	; (8000598 <MX_TIM1_Init+0xd8>)
 80004f4:	2200      	movs	r2, #0
 80004f6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004f8:	4b27      	ldr	r3, [pc, #156]	; (8000598 <MX_TIM1_Init+0xd8>)
 80004fa:	2200      	movs	r2, #0
 80004fc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80004fe:	4b26      	ldr	r3, [pc, #152]	; (8000598 <MX_TIM1_Init+0xd8>)
 8000500:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000504:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000506:	4b24      	ldr	r3, [pc, #144]	; (8000598 <MX_TIM1_Init+0xd8>)
 8000508:	2200      	movs	r2, #0
 800050a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800050c:	4b22      	ldr	r3, [pc, #136]	; (8000598 <MX_TIM1_Init+0xd8>)
 800050e:	2200      	movs	r2, #0
 8000510:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000512:	4b21      	ldr	r3, [pc, #132]	; (8000598 <MX_TIM1_Init+0xd8>)
 8000514:	2200      	movs	r2, #0
 8000516:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000518:	2301      	movs	r3, #1
 800051a:	647b      	str	r3, [r7, #68]	; 0x44
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800051c:	2300      	movs	r3, #0
 800051e:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000520:	2301      	movs	r3, #1
 8000522:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000524:	2300      	movs	r3, #0
 8000526:	653b      	str	r3, [r7, #80]	; 0x50
  sConfig.IC1Filter = 0;
 8000528:	2300      	movs	r3, #0
 800052a:	657b      	str	r3, [r7, #84]	; 0x54
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800052c:	2300      	movs	r3, #0
 800052e:	65bb      	str	r3, [r7, #88]	; 0x58
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000530:	2301      	movs	r3, #1
 8000532:	65fb      	str	r3, [r7, #92]	; 0x5c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000534:	2300      	movs	r3, #0
 8000536:	663b      	str	r3, [r7, #96]	; 0x60
  sConfig.IC2Filter = 0;
 8000538:	2300      	movs	r3, #0
 800053a:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 800053c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000540:	4619      	mov	r1, r3
 8000542:	4815      	ldr	r0, [pc, #84]	; (8000598 <MX_TIM1_Init+0xd8>)
 8000544:	f004 f80c 	bl	8004560 <HAL_TIM_Encoder_Init>
 8000548:	4603      	mov	r3, r0
 800054a:	2b00      	cmp	r3, #0
 800054c:	d001      	beq.n	8000552 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 800054e:	f000 fced 	bl	8000f2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000552:	2300      	movs	r3, #0
 8000554:	63bb      	str	r3, [r7, #56]	; 0x38
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000556:	2300      	movs	r3, #0
 8000558:	63fb      	str	r3, [r7, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800055a:	2300      	movs	r3, #0
 800055c:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800055e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000562:	4619      	mov	r1, r3
 8000564:	480c      	ldr	r0, [pc, #48]	; (8000598 <MX_TIM1_Init+0xd8>)
 8000566:	f004 ff91 	bl	800548c <HAL_TIMEx_MasterConfigSynchronization>
 800056a:	4603      	mov	r3, r0
 800056c:	2b00      	cmp	r3, #0
 800056e:	d001      	beq.n	8000574 <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 8000570:	f000 fcdc 	bl	8000f2c <Error_Handler>
  }
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000574:	2300      	movs	r3, #0
 8000576:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000578:	2300      	movs	r3, #0
 800057a:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800057c:	1d3b      	adds	r3, r7, #4
 800057e:	4619      	mov	r1, r3
 8000580:	4805      	ldr	r0, [pc, #20]	; (8000598 <MX_TIM1_Init+0xd8>)
 8000582:	f005 f805 	bl	8005590 <HAL_TIMEx_ConfigBreakDeadTime>
 8000586:	4603      	mov	r3, r0
 8000588:	2b00      	cmp	r3, #0
 800058a:	d001      	beq.n	8000590 <MX_TIM1_Init+0xd0>
  {
    Error_Handler();
 800058c:	f000 fcce 	bl	8000f2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000590:	bf00      	nop
 8000592:	3768      	adds	r7, #104	; 0x68
 8000594:	46bd      	mov	sp, r7
 8000596:	bd80      	pop	{r7, pc}
 8000598:	200005ec 	.word	0x200005ec
 800059c:	40012c00 	.word	0x40012c00

080005a0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b08a      	sub	sp, #40	; 0x28
 80005a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005a6:	f107 031c 	add.w	r3, r7, #28
 80005aa:	2200      	movs	r2, #0
 80005ac:	601a      	str	r2, [r3, #0]
 80005ae:	605a      	str	r2, [r3, #4]
 80005b0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80005b2:	463b      	mov	r3, r7
 80005b4:	2200      	movs	r2, #0
 80005b6:	601a      	str	r2, [r3, #0]
 80005b8:	605a      	str	r2, [r3, #4]
 80005ba:	609a      	str	r2, [r3, #8]
 80005bc:	60da      	str	r2, [r3, #12]
 80005be:	611a      	str	r2, [r3, #16]
 80005c0:	615a      	str	r2, [r3, #20]
 80005c2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80005c4:	4b35      	ldr	r3, [pc, #212]	; (800069c <MX_TIM2_Init+0xfc>)
 80005c6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80005ca:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 50 - 1;
 80005cc:	4b33      	ldr	r3, [pc, #204]	; (800069c <MX_TIM2_Init+0xfc>)
 80005ce:	2231      	movs	r2, #49	; 0x31
 80005d0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005d2:	4b32      	ldr	r3, [pc, #200]	; (800069c <MX_TIM2_Init+0xfc>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 63999;
 80005d8:	4b30      	ldr	r3, [pc, #192]	; (800069c <MX_TIM2_Init+0xfc>)
 80005da:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 80005de:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005e0:	4b2e      	ldr	r3, [pc, #184]	; (800069c <MX_TIM2_Init+0xfc>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005e6:	4b2d      	ldr	r3, [pc, #180]	; (800069c <MX_TIM2_Init+0xfc>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80005ec:	482b      	ldr	r0, [pc, #172]	; (800069c <MX_TIM2_Init+0xfc>)
 80005ee:	f003 fe5f 	bl	80042b0 <HAL_TIM_PWM_Init>
 80005f2:	4603      	mov	r3, r0
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d001      	beq.n	80005fc <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 80005f8:	f000 fc98 	bl	8000f2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005fc:	2300      	movs	r3, #0
 80005fe:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000600:	2300      	movs	r3, #0
 8000602:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000604:	f107 031c 	add.w	r3, r7, #28
 8000608:	4619      	mov	r1, r3
 800060a:	4824      	ldr	r0, [pc, #144]	; (800069c <MX_TIM2_Init+0xfc>)
 800060c:	f004 ff3e 	bl	800548c <HAL_TIMEx_MasterConfigSynchronization>
 8000610:	4603      	mov	r3, r0
 8000612:	2b00      	cmp	r3, #0
 8000614:	d001      	beq.n	800061a <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8000616:	f000 fc89 	bl	8000f2c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800061a:	2360      	movs	r3, #96	; 0x60
 800061c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800061e:	2300      	movs	r3, #0
 8000620:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000622:	2300      	movs	r3, #0
 8000624:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000626:	2300      	movs	r3, #0
 8000628:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800062a:	463b      	mov	r3, r7
 800062c:	2200      	movs	r2, #0
 800062e:	4619      	mov	r1, r3
 8000630:	481a      	ldr	r0, [pc, #104]	; (800069c <MX_TIM2_Init+0xfc>)
 8000632:	f004 fa47 	bl	8004ac4 <HAL_TIM_PWM_ConfigChannel>
 8000636:	4603      	mov	r3, r0
 8000638:	2b00      	cmp	r3, #0
 800063a:	d001      	beq.n	8000640 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 800063c:	f000 fc76 	bl	8000f2c <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8000640:	2300      	movs	r3, #0
 8000642:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000644:	463b      	mov	r3, r7
 8000646:	2204      	movs	r2, #4
 8000648:	4619      	mov	r1, r3
 800064a:	4814      	ldr	r0, [pc, #80]	; (800069c <MX_TIM2_Init+0xfc>)
 800064c:	f004 fa3a 	bl	8004ac4 <HAL_TIM_PWM_ConfigChannel>
 8000650:	4603      	mov	r3, r0
 8000652:	2b00      	cmp	r3, #0
 8000654:	d001      	beq.n	800065a <MX_TIM2_Init+0xba>
  {
    Error_Handler();
 8000656:	f000 fc69 	bl	8000f2c <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 800065a:	2300      	movs	r3, #0
 800065c:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800065e:	463b      	mov	r3, r7
 8000660:	2208      	movs	r2, #8
 8000662:	4619      	mov	r1, r3
 8000664:	480d      	ldr	r0, [pc, #52]	; (800069c <MX_TIM2_Init+0xfc>)
 8000666:	f004 fa2d 	bl	8004ac4 <HAL_TIM_PWM_ConfigChannel>
 800066a:	4603      	mov	r3, r0
 800066c:	2b00      	cmp	r3, #0
 800066e:	d001      	beq.n	8000674 <MX_TIM2_Init+0xd4>
  {
    Error_Handler();
 8000670:	f000 fc5c 	bl	8000f2c <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8000674:	2300      	movs	r3, #0
 8000676:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000678:	463b      	mov	r3, r7
 800067a:	220c      	movs	r2, #12
 800067c:	4619      	mov	r1, r3
 800067e:	4807      	ldr	r0, [pc, #28]	; (800069c <MX_TIM2_Init+0xfc>)
 8000680:	f004 fa20 	bl	8004ac4 <HAL_TIM_PWM_ConfigChannel>
 8000684:	4603      	mov	r3, r0
 8000686:	2b00      	cmp	r3, #0
 8000688:	d001      	beq.n	800068e <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 800068a:	f000 fc4f 	bl	8000f2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800068e:	4803      	ldr	r0, [pc, #12]	; (800069c <MX_TIM2_Init+0xfc>)
 8000690:	f000 fdb2 	bl	80011f8 <HAL_TIM_MspPostInit>

}
 8000694:	bf00      	nop
 8000696:	3728      	adds	r7, #40	; 0x28
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}
 800069c:	20000638 	.word	0x20000638

080006a0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b08c      	sub	sp, #48	; 0x30
 80006a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80006a6:	f107 030c 	add.w	r3, r7, #12
 80006aa:	2224      	movs	r2, #36	; 0x24
 80006ac:	2100      	movs	r1, #0
 80006ae:	4618      	mov	r0, r3
 80006b0:	f009 fa25 	bl	8009afe <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006b4:	463b      	mov	r3, r7
 80006b6:	2200      	movs	r2, #0
 80006b8:	601a      	str	r2, [r3, #0]
 80006ba:	605a      	str	r2, [r3, #4]
 80006bc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80006be:	4b21      	ldr	r3, [pc, #132]	; (8000744 <MX_TIM3_Init+0xa4>)
 80006c0:	4a21      	ldr	r2, [pc, #132]	; (8000748 <MX_TIM3_Init+0xa8>)
 80006c2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80006c4:	4b1f      	ldr	r3, [pc, #124]	; (8000744 <MX_TIM3_Init+0xa4>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006ca:	4b1e      	ldr	r3, [pc, #120]	; (8000744 <MX_TIM3_Init+0xa4>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80006d0:	4b1c      	ldr	r3, [pc, #112]	; (8000744 <MX_TIM3_Init+0xa4>)
 80006d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80006d6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006d8:	4b1a      	ldr	r3, [pc, #104]	; (8000744 <MX_TIM3_Init+0xa4>)
 80006da:	2200      	movs	r2, #0
 80006dc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006de:	4b19      	ldr	r3, [pc, #100]	; (8000744 <MX_TIM3_Init+0xa4>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80006e4:	2301      	movs	r3, #1
 80006e6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80006e8:	2300      	movs	r3, #0
 80006ea:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80006ec:	2301      	movs	r3, #1
 80006ee:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80006f0:	2300      	movs	r3, #0
 80006f2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80006f4:	2300      	movs	r3, #0
 80006f6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80006f8:	2300      	movs	r3, #0
 80006fa:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80006fc:	2301      	movs	r3, #1
 80006fe:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000700:	2300      	movs	r3, #0
 8000702:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000704:	2300      	movs	r3, #0
 8000706:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000708:	f107 030c 	add.w	r3, r7, #12
 800070c:	4619      	mov	r1, r3
 800070e:	480d      	ldr	r0, [pc, #52]	; (8000744 <MX_TIM3_Init+0xa4>)
 8000710:	f003 ff26 	bl	8004560 <HAL_TIM_Encoder_Init>
 8000714:	4603      	mov	r3, r0
 8000716:	2b00      	cmp	r3, #0
 8000718:	d001      	beq.n	800071e <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 800071a:	f000 fc07 	bl	8000f2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800071e:	2300      	movs	r3, #0
 8000720:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000722:	2300      	movs	r3, #0
 8000724:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000726:	463b      	mov	r3, r7
 8000728:	4619      	mov	r1, r3
 800072a:	4806      	ldr	r0, [pc, #24]	; (8000744 <MX_TIM3_Init+0xa4>)
 800072c:	f004 feae 	bl	800548c <HAL_TIMEx_MasterConfigSynchronization>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d001      	beq.n	800073a <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8000736:	f000 fbf9 	bl	8000f2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800073a:	bf00      	nop
 800073c:	3730      	adds	r7, #48	; 0x30
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	20000554 	.word	0x20000554
 8000748:	40000400 	.word	0x40000400

0800074c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b08c      	sub	sp, #48	; 0x30
 8000750:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000752:	f107 030c 	add.w	r3, r7, #12
 8000756:	2224      	movs	r2, #36	; 0x24
 8000758:	2100      	movs	r1, #0
 800075a:	4618      	mov	r0, r3
 800075c:	f009 f9cf 	bl	8009afe <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000760:	463b      	mov	r3, r7
 8000762:	2200      	movs	r2, #0
 8000764:	601a      	str	r2, [r3, #0]
 8000766:	605a      	str	r2, [r3, #4]
 8000768:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800076a:	4b21      	ldr	r3, [pc, #132]	; (80007f0 <MX_TIM4_Init+0xa4>)
 800076c:	4a21      	ldr	r2, [pc, #132]	; (80007f4 <MX_TIM4_Init+0xa8>)
 800076e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000770:	4b1f      	ldr	r3, [pc, #124]	; (80007f0 <MX_TIM4_Init+0xa4>)
 8000772:	2200      	movs	r2, #0
 8000774:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000776:	4b1e      	ldr	r3, [pc, #120]	; (80007f0 <MX_TIM4_Init+0xa4>)
 8000778:	2200      	movs	r2, #0
 800077a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800077c:	4b1c      	ldr	r3, [pc, #112]	; (80007f0 <MX_TIM4_Init+0xa4>)
 800077e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000782:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000784:	4b1a      	ldr	r3, [pc, #104]	; (80007f0 <MX_TIM4_Init+0xa4>)
 8000786:	2200      	movs	r2, #0
 8000788:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800078a:	4b19      	ldr	r3, [pc, #100]	; (80007f0 <MX_TIM4_Init+0xa4>)
 800078c:	2200      	movs	r2, #0
 800078e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000790:	2301      	movs	r3, #1
 8000792:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000794:	2300      	movs	r3, #0
 8000796:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000798:	2301      	movs	r3, #1
 800079a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800079c:	2300      	movs	r3, #0
 800079e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80007a0:	2300      	movs	r3, #0
 80007a2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80007a4:	2300      	movs	r3, #0
 80007a6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80007a8:	2301      	movs	r3, #1
 80007aa:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80007ac:	2300      	movs	r3, #0
 80007ae:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80007b0:	2300      	movs	r3, #0
 80007b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80007b4:	f107 030c 	add.w	r3, r7, #12
 80007b8:	4619      	mov	r1, r3
 80007ba:	480d      	ldr	r0, [pc, #52]	; (80007f0 <MX_TIM4_Init+0xa4>)
 80007bc:	f003 fed0 	bl	8004560 <HAL_TIM_Encoder_Init>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 80007c6:	f000 fbb1 	bl	8000f2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007ca:	2300      	movs	r3, #0
 80007cc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007ce:	2300      	movs	r3, #0
 80007d0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80007d2:	463b      	mov	r3, r7
 80007d4:	4619      	mov	r1, r3
 80007d6:	4806      	ldr	r0, [pc, #24]	; (80007f0 <MX_TIM4_Init+0xa4>)
 80007d8:	f004 fe58 	bl	800548c <HAL_TIMEx_MasterConfigSynchronization>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d001      	beq.n	80007e6 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 80007e2:	f000 fba3 	bl	8000f2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80007e6:	bf00      	nop
 80007e8:	3730      	adds	r7, #48	; 0x30
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	20000470 	.word	0x20000470
 80007f4:	40000800 	.word	0x40000800

080007f8 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b084      	sub	sp, #16
 80007fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007fe:	1d3b      	adds	r3, r7, #4
 8000800:	2200      	movs	r2, #0
 8000802:	601a      	str	r2, [r3, #0]
 8000804:	605a      	str	r2, [r3, #4]
 8000806:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000808:	4b14      	ldr	r3, [pc, #80]	; (800085c <MX_TIM6_Init+0x64>)
 800080a:	4a15      	ldr	r2, [pc, #84]	; (8000860 <MX_TIM6_Init+0x68>)
 800080c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 25 - 1;
 800080e:	4b13      	ldr	r3, [pc, #76]	; (800085c <MX_TIM6_Init+0x64>)
 8000810:	2218      	movs	r2, #24
 8000812:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000814:	4b11      	ldr	r3, [pc, #68]	; (800085c <MX_TIM6_Init+0x64>)
 8000816:	2200      	movs	r2, #0
 8000818:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 63999;
 800081a:	4b10      	ldr	r3, [pc, #64]	; (800085c <MX_TIM6_Init+0x64>)
 800081c:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8000820:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000822:	4b0e      	ldr	r3, [pc, #56]	; (800085c <MX_TIM6_Init+0x64>)
 8000824:	2200      	movs	r2, #0
 8000826:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000828:	480c      	ldr	r0, [pc, #48]	; (800085c <MX_TIM6_Init+0x64>)
 800082a:	f003 fc7f 	bl	800412c <HAL_TIM_Base_Init>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d001      	beq.n	8000838 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000834:	f000 fb7a 	bl	8000f2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000838:	2300      	movs	r3, #0
 800083a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800083c:	2300      	movs	r3, #0
 800083e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000840:	1d3b      	adds	r3, r7, #4
 8000842:	4619      	mov	r1, r3
 8000844:	4805      	ldr	r0, [pc, #20]	; (800085c <MX_TIM6_Init+0x64>)
 8000846:	f004 fe21 	bl	800548c <HAL_TIMEx_MasterConfigSynchronization>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d001      	beq.n	8000854 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000850:	f000 fb6c 	bl	8000f2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000854:	bf00      	nop
 8000856:	3710      	adds	r7, #16
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}
 800085c:	200005a0 	.word	0x200005a0
 8000860:	40001000 	.word	0x40001000

08000864 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b098      	sub	sp, #96	; 0x60
 8000868:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800086a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800086e:	2200      	movs	r2, #0
 8000870:	601a      	str	r2, [r3, #0]
 8000872:	605a      	str	r2, [r3, #4]
 8000874:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000876:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800087a:	2200      	movs	r2, #0
 800087c:	601a      	str	r2, [r3, #0]
 800087e:	605a      	str	r2, [r3, #4]
 8000880:	609a      	str	r2, [r3, #8]
 8000882:	60da      	str	r2, [r3, #12]
 8000884:	611a      	str	r2, [r3, #16]
 8000886:	615a      	str	r2, [r3, #20]
 8000888:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800088a:	1d3b      	adds	r3, r7, #4
 800088c:	2234      	movs	r2, #52	; 0x34
 800088e:	2100      	movs	r1, #0
 8000890:	4618      	mov	r0, r3
 8000892:	f009 f934 	bl	8009afe <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000896:	4b3b      	ldr	r3, [pc, #236]	; (8000984 <MX_TIM8_Init+0x120>)
 8000898:	4a3b      	ldr	r2, [pc, #236]	; (8000988 <MX_TIM8_Init+0x124>)
 800089a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 50 - 1;
 800089c:	4b39      	ldr	r3, [pc, #228]	; (8000984 <MX_TIM8_Init+0x120>)
 800089e:	2231      	movs	r2, #49	; 0x31
 80008a0:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008a2:	4b38      	ldr	r3, [pc, #224]	; (8000984 <MX_TIM8_Init+0x120>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 63999;
 80008a8:	4b36      	ldr	r3, [pc, #216]	; (8000984 <MX_TIM8_Init+0x120>)
 80008aa:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 80008ae:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008b0:	4b34      	ldr	r3, [pc, #208]	; (8000984 <MX_TIM8_Init+0x120>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80008b6:	4b33      	ldr	r3, [pc, #204]	; (8000984 <MX_TIM8_Init+0x120>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008bc:	4b31      	ldr	r3, [pc, #196]	; (8000984 <MX_TIM8_Init+0x120>)
 80008be:	2200      	movs	r2, #0
 80008c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80008c2:	4830      	ldr	r0, [pc, #192]	; (8000984 <MX_TIM8_Init+0x120>)
 80008c4:	f003 fcf4 	bl	80042b0 <HAL_TIM_PWM_Init>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d001      	beq.n	80008d2 <MX_TIM8_Init+0x6e>
  {
    Error_Handler();
 80008ce:	f000 fb2d 	bl	8000f2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008d2:	2300      	movs	r3, #0
 80008d4:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80008d6:	2300      	movs	r3, #0
 80008d8:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008da:	2300      	movs	r3, #0
 80008dc:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80008de:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80008e2:	4619      	mov	r1, r3
 80008e4:	4827      	ldr	r0, [pc, #156]	; (8000984 <MX_TIM8_Init+0x120>)
 80008e6:	f004 fdd1 	bl	800548c <HAL_TIMEx_MasterConfigSynchronization>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d001      	beq.n	80008f4 <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 80008f0:	f000 fb1c 	bl	8000f2c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008f4:	2360      	movs	r3, #96	; 0x60
 80008f6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 80008f8:	2300      	movs	r3, #0
 80008fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008fc:	2300      	movs	r3, #0
 80008fe:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000900:	2300      	movs	r3, #0
 8000902:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000904:	2300      	movs	r3, #0
 8000906:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000908:	2300      	movs	r3, #0
 800090a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800090c:	2300      	movs	r3, #0
 800090e:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000910:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000914:	2200      	movs	r2, #0
 8000916:	4619      	mov	r1, r3
 8000918:	481a      	ldr	r0, [pc, #104]	; (8000984 <MX_TIM8_Init+0x120>)
 800091a:	f004 f8d3 	bl	8004ac4 <HAL_TIM_PWM_ConfigChannel>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	d001      	beq.n	8000928 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8000924:	f000 fb02 	bl	8000f2c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000928:	2300      	movs	r3, #0
 800092a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800092c:	2300      	movs	r3, #0
 800092e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000930:	2300      	movs	r3, #0
 8000932:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000934:	2300      	movs	r3, #0
 8000936:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000938:	2300      	movs	r3, #0
 800093a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800093c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000940:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000942:	2300      	movs	r3, #0
 8000944:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000946:	2300      	movs	r3, #0
 8000948:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800094a:	2300      	movs	r3, #0
 800094c:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800094e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000952:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000954:	2300      	movs	r3, #0
 8000956:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000958:	2300      	movs	r3, #0
 800095a:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800095c:	2300      	movs	r3, #0
 800095e:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8000960:	1d3b      	adds	r3, r7, #4
 8000962:	4619      	mov	r1, r3
 8000964:	4807      	ldr	r0, [pc, #28]	; (8000984 <MX_TIM8_Init+0x120>)
 8000966:	f004 fe13 	bl	8005590 <HAL_TIMEx_ConfigBreakDeadTime>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	d001      	beq.n	8000974 <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 8000970:	f000 fadc 	bl	8000f2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8000974:	4803      	ldr	r0, [pc, #12]	; (8000984 <MX_TIM8_Init+0x120>)
 8000976:	f000 fc3f 	bl	80011f8 <HAL_TIM_MspPostInit>

}
 800097a:	bf00      	nop
 800097c:	3760      	adds	r7, #96	; 0x60
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	20000424 	.word	0x20000424
 8000988:	40013400 	.word	0x40013400

0800098c <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b098      	sub	sp, #96	; 0x60
 8000990:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000992:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000996:	2200      	movs	r2, #0
 8000998:	601a      	str	r2, [r3, #0]
 800099a:	605a      	str	r2, [r3, #4]
 800099c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800099e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80009a2:	2200      	movs	r2, #0
 80009a4:	601a      	str	r2, [r3, #0]
 80009a6:	605a      	str	r2, [r3, #4]
 80009a8:	609a      	str	r2, [r3, #8]
 80009aa:	60da      	str	r2, [r3, #12]
 80009ac:	611a      	str	r2, [r3, #16]
 80009ae:	615a      	str	r2, [r3, #20]
 80009b0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80009b2:	1d3b      	adds	r3, r7, #4
 80009b4:	2234      	movs	r2, #52	; 0x34
 80009b6:	2100      	movs	r1, #0
 80009b8:	4618      	mov	r0, r3
 80009ba:	f009 f8a0 	bl	8009afe <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80009be:	4b34      	ldr	r3, [pc, #208]	; (8000a90 <MX_TIM15_Init+0x104>)
 80009c0:	4a34      	ldr	r2, [pc, #208]	; (8000a94 <MX_TIM15_Init+0x108>)
 80009c2:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 50 - 1;
 80009c4:	4b32      	ldr	r3, [pc, #200]	; (8000a90 <MX_TIM15_Init+0x104>)
 80009c6:	2231      	movs	r2, #49	; 0x31
 80009c8:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009ca:	4b31      	ldr	r3, [pc, #196]	; (8000a90 <MX_TIM15_Init+0x104>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 63999;
 80009d0:	4b2f      	ldr	r3, [pc, #188]	; (8000a90 <MX_TIM15_Init+0x104>)
 80009d2:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 80009d6:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009d8:	4b2d      	ldr	r3, [pc, #180]	; (8000a90 <MX_TIM15_Init+0x104>)
 80009da:	2200      	movs	r2, #0
 80009dc:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80009de:	4b2c      	ldr	r3, [pc, #176]	; (8000a90 <MX_TIM15_Init+0x104>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009e4:	4b2a      	ldr	r3, [pc, #168]	; (8000a90 <MX_TIM15_Init+0x104>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 80009ea:	4829      	ldr	r0, [pc, #164]	; (8000a90 <MX_TIM15_Init+0x104>)
 80009ec:	f003 fc60 	bl	80042b0 <HAL_TIM_PWM_Init>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d001      	beq.n	80009fa <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 80009f6:	f000 fa99 	bl	8000f2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009fa:	2300      	movs	r3, #0
 80009fc:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009fe:	2300      	movs	r3, #0
 8000a00:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8000a02:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000a06:	4619      	mov	r1, r3
 8000a08:	4821      	ldr	r0, [pc, #132]	; (8000a90 <MX_TIM15_Init+0x104>)
 8000a0a:	f004 fd3f 	bl	800548c <HAL_TIMEx_MasterConfigSynchronization>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d001      	beq.n	8000a18 <MX_TIM15_Init+0x8c>
  {
    Error_Handler();
 8000a14:	f000 fa8a 	bl	8000f2c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a18:	2360      	movs	r3, #96	; 0x60
 8000a1a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a20:	2300      	movs	r3, #0
 8000a22:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000a24:	2300      	movs	r3, #0
 8000a26:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000a30:	2300      	movs	r3, #0
 8000a32:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000a34:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000a38:	2204      	movs	r2, #4
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	4814      	ldr	r0, [pc, #80]	; (8000a90 <MX_TIM15_Init+0x104>)
 8000a3e:	f004 f841 	bl	8004ac4 <HAL_TIM_PWM_ConfigChannel>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d001      	beq.n	8000a4c <MX_TIM15_Init+0xc0>
  {
    Error_Handler();
 8000a48:	f000 fa70 	bl	8000f2c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000a50:	2300      	movs	r3, #0
 8000a52:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000a54:	2300      	movs	r3, #0
 8000a56:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000a60:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a64:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000a66:	2300      	movs	r3, #0
 8000a68:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8000a6e:	1d3b      	adds	r3, r7, #4
 8000a70:	4619      	mov	r1, r3
 8000a72:	4807      	ldr	r0, [pc, #28]	; (8000a90 <MX_TIM15_Init+0x104>)
 8000a74:	f004 fd8c 	bl	8005590 <HAL_TIMEx_ConfigBreakDeadTime>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d001      	beq.n	8000a82 <MX_TIM15_Init+0xf6>
  {
    Error_Handler();
 8000a7e:	f000 fa55 	bl	8000f2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8000a82:	4803      	ldr	r0, [pc, #12]	; (8000a90 <MX_TIM15_Init+0x104>)
 8000a84:	f000 fbb8 	bl	80011f8 <HAL_TIM_MspPostInit>

}
 8000a88:	bf00      	nop
 8000a8a:	3760      	adds	r7, #96	; 0x60
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bd80      	pop	{r7, pc}
 8000a90:	200004bc 	.word	0x200004bc
 8000a94:	40014000 	.word	0x40014000

08000a98 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b094      	sub	sp, #80	; 0x50
 8000a9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a9e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	601a      	str	r2, [r3, #0]
 8000aa6:	605a      	str	r2, [r3, #4]
 8000aa8:	609a      	str	r2, [r3, #8]
 8000aaa:	60da      	str	r2, [r3, #12]
 8000aac:	611a      	str	r2, [r3, #16]
 8000aae:	615a      	str	r2, [r3, #20]
 8000ab0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000ab2:	463b      	mov	r3, r7
 8000ab4:	2234      	movs	r2, #52	; 0x34
 8000ab6:	2100      	movs	r1, #0
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f009 f820 	bl	8009afe <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000abe:	4b31      	ldr	r3, [pc, #196]	; (8000b84 <MX_TIM16_Init+0xec>)
 8000ac0:	4a31      	ldr	r2, [pc, #196]	; (8000b88 <MX_TIM16_Init+0xf0>)
 8000ac2:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 50 - 1;
 8000ac4:	4b2f      	ldr	r3, [pc, #188]	; (8000b84 <MX_TIM16_Init+0xec>)
 8000ac6:	2231      	movs	r2, #49	; 0x31
 8000ac8:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000aca:	4b2e      	ldr	r3, [pc, #184]	; (8000b84 <MX_TIM16_Init+0xec>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 63999;
 8000ad0:	4b2c      	ldr	r3, [pc, #176]	; (8000b84 <MX_TIM16_Init+0xec>)
 8000ad2:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8000ad6:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ad8:	4b2a      	ldr	r3, [pc, #168]	; (8000b84 <MX_TIM16_Init+0xec>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000ade:	4b29      	ldr	r3, [pc, #164]	; (8000b84 <MX_TIM16_Init+0xec>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ae4:	4b27      	ldr	r3, [pc, #156]	; (8000b84 <MX_TIM16_Init+0xec>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000aea:	4826      	ldr	r0, [pc, #152]	; (8000b84 <MX_TIM16_Init+0xec>)
 8000aec:	f003 fb1e 	bl	800412c <HAL_TIM_Base_Init>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d001      	beq.n	8000afa <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 8000af6:	f000 fa19 	bl	8000f2c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8000afa:	4822      	ldr	r0, [pc, #136]	; (8000b84 <MX_TIM16_Init+0xec>)
 8000afc:	f003 fbd8 	bl	80042b0 <HAL_TIM_PWM_Init>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d001      	beq.n	8000b0a <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 8000b06:	f000 fa11 	bl	8000f2c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b0a:	2360      	movs	r3, #96	; 0x60
 8000b0c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 0;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b12:	2300      	movs	r3, #0
 8000b14:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000b16:	2300      	movs	r3, #0
 8000b18:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000b22:	2300      	movs	r3, #0
 8000b24:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b26:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	4815      	ldr	r0, [pc, #84]	; (8000b84 <MX_TIM16_Init+0xec>)
 8000b30:	f003 ffc8 	bl	8004ac4 <HAL_TIM_PWM_ConfigChannel>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d001      	beq.n	8000b3e <MX_TIM16_Init+0xa6>
  {
    Error_Handler();
 8000b3a:	f000 f9f7 	bl	8000f2c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000b42:	2300      	movs	r3, #0
 8000b44:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000b46:	2300      	movs	r3, #0
 8000b48:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000b52:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b56:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8000b60:	463b      	mov	r3, r7
 8000b62:	4619      	mov	r1, r3
 8000b64:	4807      	ldr	r0, [pc, #28]	; (8000b84 <MX_TIM16_Init+0xec>)
 8000b66:	f004 fd13 	bl	8005590 <HAL_TIMEx_ConfigBreakDeadTime>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d001      	beq.n	8000b74 <MX_TIM16_Init+0xdc>
  {
    Error_Handler();
 8000b70:	f000 f9dc 	bl	8000f2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8000b74:	4803      	ldr	r0, [pc, #12]	; (8000b84 <MX_TIM16_Init+0xec>)
 8000b76:	f000 fb3f 	bl	80011f8 <HAL_TIM_MspPostInit>

}
 8000b7a:	bf00      	nop
 8000b7c:	3750      	adds	r7, #80	; 0x50
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	20000684 	.word	0x20000684
 8000b88:	40014400 	.word	0x40014400

08000b8c <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b094      	sub	sp, #80	; 0x50
 8000b90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b92:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000b96:	2200      	movs	r2, #0
 8000b98:	601a      	str	r2, [r3, #0]
 8000b9a:	605a      	str	r2, [r3, #4]
 8000b9c:	609a      	str	r2, [r3, #8]
 8000b9e:	60da      	str	r2, [r3, #12]
 8000ba0:	611a      	str	r2, [r3, #16]
 8000ba2:	615a      	str	r2, [r3, #20]
 8000ba4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000ba6:	463b      	mov	r3, r7
 8000ba8:	2234      	movs	r2, #52	; 0x34
 8000baa:	2100      	movs	r1, #0
 8000bac:	4618      	mov	r0, r3
 8000bae:	f008 ffa6 	bl	8009afe <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8000bb2:	4b31      	ldr	r3, [pc, #196]	; (8000c78 <MX_TIM17_Init+0xec>)
 8000bb4:	4a31      	ldr	r2, [pc, #196]	; (8000c7c <MX_TIM17_Init+0xf0>)
 8000bb6:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 50 - 1;
 8000bb8:	4b2f      	ldr	r3, [pc, #188]	; (8000c78 <MX_TIM17_Init+0xec>)
 8000bba:	2231      	movs	r2, #49	; 0x31
 8000bbc:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bbe:	4b2e      	ldr	r3, [pc, #184]	; (8000c78 <MX_TIM17_Init+0xec>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 63999;
 8000bc4:	4b2c      	ldr	r3, [pc, #176]	; (8000c78 <MX_TIM17_Init+0xec>)
 8000bc6:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8000bca:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bcc:	4b2a      	ldr	r3, [pc, #168]	; (8000c78 <MX_TIM17_Init+0xec>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8000bd2:	4b29      	ldr	r3, [pc, #164]	; (8000c78 <MX_TIM17_Init+0xec>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bd8:	4b27      	ldr	r3, [pc, #156]	; (8000c78 <MX_TIM17_Init+0xec>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8000bde:	4826      	ldr	r0, [pc, #152]	; (8000c78 <MX_TIM17_Init+0xec>)
 8000be0:	f003 faa4 	bl	800412c <HAL_TIM_Base_Init>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d001      	beq.n	8000bee <MX_TIM17_Init+0x62>
  {
    Error_Handler();
 8000bea:	f000 f99f 	bl	8000f2c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 8000bee:	4822      	ldr	r0, [pc, #136]	; (8000c78 <MX_TIM17_Init+0xec>)
 8000bf0:	f003 fb5e 	bl	80042b0 <HAL_TIM_PWM_Init>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d001      	beq.n	8000bfe <MX_TIM17_Init+0x72>
  {
    Error_Handler();
 8000bfa:	f000 f997 	bl	8000f2c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000bfe:	2360      	movs	r3, #96	; 0x60
 8000c00:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 0;
 8000c02:	2300      	movs	r3, #0
 8000c04:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c06:	2300      	movs	r3, #0
 8000c08:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000c12:	2300      	movs	r3, #0
 8000c14:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000c16:	2300      	movs	r3, #0
 8000c18:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c1a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000c1e:	2200      	movs	r2, #0
 8000c20:	4619      	mov	r1, r3
 8000c22:	4815      	ldr	r0, [pc, #84]	; (8000c78 <MX_TIM17_Init+0xec>)
 8000c24:	f003 ff4e 	bl	8004ac4 <HAL_TIM_PWM_ConfigChannel>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d001      	beq.n	8000c32 <MX_TIM17_Init+0xa6>
  {
    Error_Handler();
 8000c2e:	f000 f97d 	bl	8000f2c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000c32:	2300      	movs	r3, #0
 8000c34:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000c36:	2300      	movs	r3, #0
 8000c38:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000c42:	2300      	movs	r3, #0
 8000c44:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000c46:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c4a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000c50:	2300      	movs	r3, #0
 8000c52:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8000c54:	463b      	mov	r3, r7
 8000c56:	4619      	mov	r1, r3
 8000c58:	4807      	ldr	r0, [pc, #28]	; (8000c78 <MX_TIM17_Init+0xec>)
 8000c5a:	f004 fc99 	bl	8005590 <HAL_TIMEx_ConfigBreakDeadTime>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d001      	beq.n	8000c68 <MX_TIM17_Init+0xdc>
  {
    Error_Handler();
 8000c64:	f000 f962 	bl	8000f2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 8000c68:	4803      	ldr	r0, [pc, #12]	; (8000c78 <MX_TIM17_Init+0xec>)
 8000c6a:	f000 fac5 	bl	80011f8 <HAL_TIM_MspPostInit>

}
 8000c6e:	bf00      	nop
 8000c70:	3750      	adds	r7, #80	; 0x50
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	20000508 	.word	0x20000508
 8000c7c:	40014800 	.word	0x40014800

08000c80 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b088      	sub	sp, #32
 8000c84:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c86:	f107 030c 	add.w	r3, r7, #12
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	601a      	str	r2, [r3, #0]
 8000c8e:	605a      	str	r2, [r3, #4]
 8000c90:	609a      	str	r2, [r3, #8]
 8000c92:	60da      	str	r2, [r3, #12]
 8000c94:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c96:	4b18      	ldr	r3, [pc, #96]	; (8000cf8 <MX_GPIO_Init+0x78>)
 8000c98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c9a:	4a17      	ldr	r2, [pc, #92]	; (8000cf8 <MX_GPIO_Init+0x78>)
 8000c9c:	f043 0301 	orr.w	r3, r3, #1
 8000ca0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ca2:	4b15      	ldr	r3, [pc, #84]	; (8000cf8 <MX_GPIO_Init+0x78>)
 8000ca4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ca6:	f003 0301 	and.w	r3, r3, #1
 8000caa:	60bb      	str	r3, [r7, #8]
 8000cac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cae:	4b12      	ldr	r3, [pc, #72]	; (8000cf8 <MX_GPIO_Init+0x78>)
 8000cb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cb2:	4a11      	ldr	r2, [pc, #68]	; (8000cf8 <MX_GPIO_Init+0x78>)
 8000cb4:	f043 0302 	orr.w	r3, r3, #2
 8000cb8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cba:	4b0f      	ldr	r3, [pc, #60]	; (8000cf8 <MX_GPIO_Init+0x78>)
 8000cbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cbe:	f003 0302 	and.w	r3, r3, #2
 8000cc2:	607b      	str	r3, [r7, #4]
 8000cc4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ccc:	480b      	ldr	r0, [pc, #44]	; (8000cfc <MX_GPIO_Init+0x7c>)
 8000cce:	f000 fef3 	bl	8001ab8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000cd2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000cd6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cd8:	2301      	movs	r3, #1
 8000cda:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000ce4:	f107 030c 	add.w	r3, r7, #12
 8000ce8:	4619      	mov	r1, r3
 8000cea:	4804      	ldr	r0, [pc, #16]	; (8000cfc <MX_GPIO_Init+0x7c>)
 8000cec:	f000 fd62 	bl	80017b4 <HAL_GPIO_Init>

}
 8000cf0:	bf00      	nop
 8000cf2:	3720      	adds	r7, #32
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	40021000 	.word	0x40021000
 8000cfc:	48000400 	.word	0x48000400

08000d00 <PID>:

/* USER CODE BEGIN 4 */

int32_t PID(Motor* motor, int16_t position) {
 8000d00:	b480      	push	{r7}
 8000d02:	b087      	sub	sp, #28
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
 8000d08:	460b      	mov	r3, r1
 8000d0a:	807b      	strh	r3, [r7, #2]
	motor->position = position; // Update motor position from encoder output
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	887a      	ldrh	r2, [r7, #2]
 8000d10:	81da      	strh	r2, [r3, #14]
	motor->positionChange = ( position - motor->positionPrev );
 8000d12:	887a      	ldrh	r2, [r7, #2]
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8000d1a:	b29b      	uxth	r3, r3
 8000d1c:	1ad3      	subs	r3, r2, r3
 8000d1e:	b29b      	uxth	r3, r3
 8000d20:	b21a      	sxth	r2, r3
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	825a      	strh	r2, [r3, #18]
	motor->error = ( motor->setpoint - motor->positionChange ); // Update current PID error
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d2c:	b29a      	uxth	r2, r3
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8000d34:	b29b      	uxth	r3, r3
 8000d36:	1ad3      	subs	r3, r2, r3
 8000d38:	b29b      	uxth	r3, r3
 8000d3a:	b21a      	sxth	r2, r3
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	829a      	strh	r2, [r3, #20]
	motor->sumOfErrors += motor->error; // Add current PID error to PID sum of errors
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	699b      	ldr	r3, [r3, #24]
 8000d44:	687a      	ldr	r2, [r7, #4]
 8000d46:	f9b2 2014 	ldrsh.w	r2, [r2, #20]
 8000d4a:	441a      	add	r2, r3
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	619a      	str	r2, [r3, #24]
	motor->positionPrev = position;
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	887a      	ldrh	r2, [r7, #2]
 8000d54:	821a      	strh	r2, [r3, #16]
	int32_t p = motor->pGain * motor->error;
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8000d5c:	461a      	mov	r2, r3
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8000d64:	fb03 f302 	mul.w	r3, r3, r2
 8000d68:	617b      	str	r3, [r7, #20]
	int32_t i = motor->iGain * motor->sumOfErrors;
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8000d70:	461a      	mov	r2, r3
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	699b      	ldr	r3, [r3, #24]
 8000d76:	fb03 f302 	mul.w	r3, r3, r2
 8000d7a:	613b      	str	r3, [r7, #16]
	int32_t d = motor->dGain * motor->positionChange;
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8000d82:	461a      	mov	r2, r3
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8000d8a:	fb03 f302 	mul.w	r3, r3, r2
 8000d8e:	60fb      	str	r3, [r7, #12]
	if (motor->setpoint == 0) { // Speed should be zero, reset all PID calculations
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d10b      	bne.n	8000db2 <PID+0xb2>
		motor->error = 0;
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	829a      	strh	r2, [r3, #20]
		motor->sumOfErrors = 0;
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	2200      	movs	r2, #0
 8000da4:	619a      	str	r2, [r3, #24]
		p = 0;
 8000da6:	2300      	movs	r3, #0
 8000da8:	617b      	str	r3, [r7, #20]
		i = 0;
 8000daa:	2300      	movs	r3, #0
 8000dac:	613b      	str	r3, [r7, #16]
		d = 0;
 8000dae:	2300      	movs	r3, #0
 8000db0:	60fb      	str	r3, [r7, #12]
	}
	return (p + i + d); // Return PID controller output (speed)
 8000db2:	697a      	ldr	r2, [r7, #20]
 8000db4:	693b      	ldr	r3, [r7, #16]
 8000db6:	441a      	add	r2, r3
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	4413      	add	r3, r2
}
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	371c      	adds	r7, #28
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc6:	4770      	bx	lr

08000dc8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b082      	sub	sp, #8
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
	// Second motor <=> J6 encoder socket <=> SECOND ENCODER
	// Third motor <=> J7 encoder socket <=> THIRD ENCODER
	// First motor <=> J3 encoder socket <=> FIRST ENCODER

	// Calculate PID and save PID controller output to motor speed
	motor1.speed = PID(&motor1, (int16_t)TIM1->CNT);
 8000dd0:	4b4d      	ldr	r3, [pc, #308]	; (8000f08 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8000dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dd4:	b21b      	sxth	r3, r3
 8000dd6:	4619      	mov	r1, r3
 8000dd8:	484c      	ldr	r0, [pc, #304]	; (8000f0c <HAL_TIM_PeriodElapsedCallback+0x144>)
 8000dda:	f7ff ff91 	bl	8000d00 <PID>
 8000dde:	4602      	mov	r2, r0
 8000de0:	4b4a      	ldr	r3, [pc, #296]	; (8000f0c <HAL_TIM_PeriodElapsedCallback+0x144>)
 8000de2:	605a      	str	r2, [r3, #4]
	motor2.speed = PID(&motor2, (int16_t)TIM3->CNT);
 8000de4:	4b4a      	ldr	r3, [pc, #296]	; (8000f10 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8000de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000de8:	b21b      	sxth	r3, r3
 8000dea:	4619      	mov	r1, r3
 8000dec:	4849      	ldr	r0, [pc, #292]	; (8000f14 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8000dee:	f7ff ff87 	bl	8000d00 <PID>
 8000df2:	4602      	mov	r2, r0
 8000df4:	4b47      	ldr	r3, [pc, #284]	; (8000f14 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8000df6:	605a      	str	r2, [r3, #4]
	motor3.speed = PID(&motor3, (int16_t)TIM4->CNT);
 8000df8:	4b47      	ldr	r3, [pc, #284]	; (8000f18 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8000dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dfc:	b21b      	sxth	r3, r3
 8000dfe:	4619      	mov	r1, r3
 8000e00:	4846      	ldr	r0, [pc, #280]	; (8000f1c <HAL_TIM_PeriodElapsedCallback+0x154>)
 8000e02:	f7ff ff7d 	bl	8000d00 <PID>
 8000e06:	4602      	mov	r2, r0
 8000e08:	4b44      	ldr	r3, [pc, #272]	; (8000f1c <HAL_TIM_PeriodElapsedCallback+0x154>)
 8000e0a:	605a      	str	r2, [r3, #4]

	// Overflow check
	if (motor1.speed > 65535) {
 8000e0c:	4b3f      	ldr	r3, [pc, #252]	; (8000f0c <HAL_TIM_PeriodElapsedCallback+0x144>)
 8000e0e:	685b      	ldr	r3, [r3, #4]
 8000e10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e14:	db04      	blt.n	8000e20 <HAL_TIM_PeriodElapsedCallback+0x58>
		motor1.speed = 65535;
 8000e16:	4b3d      	ldr	r3, [pc, #244]	; (8000f0c <HAL_TIM_PeriodElapsedCallback+0x144>)
 8000e18:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e1c:	605a      	str	r2, [r3, #4]
 8000e1e:	e007      	b.n	8000e30 <HAL_TIM_PeriodElapsedCallback+0x68>
	}
	else if (motor1.speed < -65535) {
 8000e20:	4b3a      	ldr	r3, [pc, #232]	; (8000f0c <HAL_TIM_PeriodElapsedCallback+0x144>)
 8000e22:	685b      	ldr	r3, [r3, #4]
 8000e24:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8000e28:	dc02      	bgt.n	8000e30 <HAL_TIM_PeriodElapsedCallback+0x68>
		motor1.speed = -65535;
 8000e2a:	4b38      	ldr	r3, [pc, #224]	; (8000f0c <HAL_TIM_PeriodElapsedCallback+0x144>)
 8000e2c:	4a3c      	ldr	r2, [pc, #240]	; (8000f20 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8000e2e:	605a      	str	r2, [r3, #4]
	}

	if (motor2.speed > 65535) {
 8000e30:	4b38      	ldr	r3, [pc, #224]	; (8000f14 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8000e32:	685b      	ldr	r3, [r3, #4]
 8000e34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e38:	db04      	blt.n	8000e44 <HAL_TIM_PeriodElapsedCallback+0x7c>
		motor2.speed = 65535;
 8000e3a:	4b36      	ldr	r3, [pc, #216]	; (8000f14 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8000e3c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e40:	605a      	str	r2, [r3, #4]
 8000e42:	e007      	b.n	8000e54 <HAL_TIM_PeriodElapsedCallback+0x8c>
	}
	else if (motor2.speed < -65535) {
 8000e44:	4b33      	ldr	r3, [pc, #204]	; (8000f14 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8000e46:	685b      	ldr	r3, [r3, #4]
 8000e48:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8000e4c:	dc02      	bgt.n	8000e54 <HAL_TIM_PeriodElapsedCallback+0x8c>
		motor2.speed = -65535;
 8000e4e:	4b31      	ldr	r3, [pc, #196]	; (8000f14 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8000e50:	4a33      	ldr	r2, [pc, #204]	; (8000f20 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8000e52:	605a      	str	r2, [r3, #4]
	}

	if (motor3.speed > 65535) {
 8000e54:	4b31      	ldr	r3, [pc, #196]	; (8000f1c <HAL_TIM_PeriodElapsedCallback+0x154>)
 8000e56:	685b      	ldr	r3, [r3, #4]
 8000e58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e5c:	db04      	blt.n	8000e68 <HAL_TIM_PeriodElapsedCallback+0xa0>
		motor3.speed = 65535;
 8000e5e:	4b2f      	ldr	r3, [pc, #188]	; (8000f1c <HAL_TIM_PeriodElapsedCallback+0x154>)
 8000e60:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e64:	605a      	str	r2, [r3, #4]
 8000e66:	e007      	b.n	8000e78 <HAL_TIM_PeriodElapsedCallback+0xb0>
	}
	else if (motor3.speed < -65535) {
 8000e68:	4b2c      	ldr	r3, [pc, #176]	; (8000f1c <HAL_TIM_PeriodElapsedCallback+0x154>)
 8000e6a:	685b      	ldr	r3, [r3, #4]
 8000e6c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8000e70:	dc02      	bgt.n	8000e78 <HAL_TIM_PeriodElapsedCallback+0xb0>
		motor3.speed = -65535;
 8000e72:	4b2a      	ldr	r3, [pc, #168]	; (8000f1c <HAL_TIM_PeriodElapsedCallback+0x154>)
 8000e74:	4a2a      	ldr	r2, [pc, #168]	; (8000f20 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8000e76:	605a      	str	r2, [r3, #4]
	}

	// Change PWM duty cycle by motor speed
	if (motor1.speed > 0) {
 8000e78:	4b24      	ldr	r3, [pc, #144]	; (8000f0c <HAL_TIM_PeriodElapsedCallback+0x144>)
 8000e7a:	685b      	ldr	r3, [r3, #4]
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	dd09      	ble.n	8000e94 <HAL_TIM_PeriodElapsedCallback+0xcc>
		TIM2->CCR1 = motor1.speed;
 8000e80:	4b22      	ldr	r3, [pc, #136]	; (8000f0c <HAL_TIM_PeriodElapsedCallback+0x144>)
 8000e82:	685a      	ldr	r2, [r3, #4]
 8000e84:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e88:	635a      	str	r2, [r3, #52]	; 0x34
		TIM2->CCR2 = 0;
 8000e8a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e8e:	2200      	movs	r2, #0
 8000e90:	639a      	str	r2, [r3, #56]	; 0x38
 8000e92:	e009      	b.n	8000ea8 <HAL_TIM_PeriodElapsedCallback+0xe0>
	}
	else {
		TIM2->CCR1 = 0;
 8000e94:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e98:	2200      	movs	r2, #0
 8000e9a:	635a      	str	r2, [r3, #52]	; 0x34
		TIM2->CCR2 = -motor1.speed;
 8000e9c:	4b1b      	ldr	r3, [pc, #108]	; (8000f0c <HAL_TIM_PeriodElapsedCallback+0x144>)
 8000e9e:	685b      	ldr	r3, [r3, #4]
 8000ea0:	425a      	negs	r2, r3
 8000ea2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ea6:	639a      	str	r2, [r3, #56]	; 0x38
	}

	if (motor2.speed > 0) {
 8000ea8:	4b1a      	ldr	r3, [pc, #104]	; (8000f14 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8000eaa:	685b      	ldr	r3, [r3, #4]
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	dd09      	ble.n	8000ec4 <HAL_TIM_PeriodElapsedCallback+0xfc>
		TIM2->CCR3 = motor2.speed;
 8000eb0:	4b18      	ldr	r3, [pc, #96]	; (8000f14 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8000eb2:	685a      	ldr	r2, [r3, #4]
 8000eb4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000eb8:	63da      	str	r2, [r3, #60]	; 0x3c
		TIM2->CCR4 = 0;
 8000eba:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	641a      	str	r2, [r3, #64]	; 0x40
 8000ec2:	e009      	b.n	8000ed8 <HAL_TIM_PeriodElapsedCallback+0x110>
	}
	else {
		TIM2->CCR3 = 0;
 8000ec4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ec8:	2200      	movs	r2, #0
 8000eca:	63da      	str	r2, [r3, #60]	; 0x3c
		TIM2->CCR4 = -motor2.speed;
 8000ecc:	4b11      	ldr	r3, [pc, #68]	; (8000f14 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8000ece:	685b      	ldr	r3, [r3, #4]
 8000ed0:	425a      	negs	r2, r3
 8000ed2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ed6:	641a      	str	r2, [r3, #64]	; 0x40
	}

	if (motor3.speed > 0) {
 8000ed8:	4b10      	ldr	r3, [pc, #64]	; (8000f1c <HAL_TIM_PeriodElapsedCallback+0x154>)
 8000eda:	685b      	ldr	r3, [r3, #4]
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	dd07      	ble.n	8000ef0 <HAL_TIM_PeriodElapsedCallback+0x128>
		TIM16->CCR1 = motor3.speed;
 8000ee0:	4b0e      	ldr	r3, [pc, #56]	; (8000f1c <HAL_TIM_PeriodElapsedCallback+0x154>)
 8000ee2:	685a      	ldr	r2, [r3, #4]
 8000ee4:	4b0f      	ldr	r3, [pc, #60]	; (8000f24 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8000ee6:	635a      	str	r2, [r3, #52]	; 0x34
		TIM17->CCR1 = 0;
 8000ee8:	4b0f      	ldr	r3, [pc, #60]	; (8000f28 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	635a      	str	r2, [r3, #52]	; 0x34
	}
	else {
		TIM16->CCR1 = 0;
		TIM17->CCR1 = -motor3.speed;
	}
}
 8000eee:	e007      	b.n	8000f00 <HAL_TIM_PeriodElapsedCallback+0x138>
		TIM16->CCR1 = 0;
 8000ef0:	4b0c      	ldr	r3, [pc, #48]	; (8000f24 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	635a      	str	r2, [r3, #52]	; 0x34
		TIM17->CCR1 = -motor3.speed;
 8000ef6:	4b09      	ldr	r3, [pc, #36]	; (8000f1c <HAL_TIM_PeriodElapsedCallback+0x154>)
 8000ef8:	685b      	ldr	r3, [r3, #4]
 8000efa:	425a      	negs	r2, r3
 8000efc:	4b0a      	ldr	r3, [pc, #40]	; (8000f28 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8000efe:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000f00:	bf00      	nop
 8000f02:	3708      	adds	r7, #8
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	40012c00 	.word	0x40012c00
 8000f0c:	20000000 	.word	0x20000000
 8000f10:	40000400 	.word	0x40000400
 8000f14:	2000001c 	.word	0x2000001c
 8000f18:	40000800 	.word	0x40000800
 8000f1c:	20000038 	.word	0x20000038
 8000f20:	ffff0001 	.word	0xffff0001
 8000f24:	40014400 	.word	0x40014400
 8000f28:	40014800 	.word	0x40014800

08000f2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000f30:	bf00      	nop
 8000f32:	46bd      	mov	sp, r7
 8000f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f38:	4770      	bx	lr
	...

08000f3c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b082      	sub	sp, #8
 8000f40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f42:	4b0f      	ldr	r3, [pc, #60]	; (8000f80 <HAL_MspInit+0x44>)
 8000f44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f46:	4a0e      	ldr	r2, [pc, #56]	; (8000f80 <HAL_MspInit+0x44>)
 8000f48:	f043 0301 	orr.w	r3, r3, #1
 8000f4c:	6613      	str	r3, [r2, #96]	; 0x60
 8000f4e:	4b0c      	ldr	r3, [pc, #48]	; (8000f80 <HAL_MspInit+0x44>)
 8000f50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f52:	f003 0301 	and.w	r3, r3, #1
 8000f56:	607b      	str	r3, [r7, #4]
 8000f58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f5a:	4b09      	ldr	r3, [pc, #36]	; (8000f80 <HAL_MspInit+0x44>)
 8000f5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f5e:	4a08      	ldr	r2, [pc, #32]	; (8000f80 <HAL_MspInit+0x44>)
 8000f60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f64:	6593      	str	r3, [r2, #88]	; 0x58
 8000f66:	4b06      	ldr	r3, [pc, #24]	; (8000f80 <HAL_MspInit+0x44>)
 8000f68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f6e:	603b      	str	r3, [r7, #0]
 8000f70:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000f72:	f002 f9df 	bl	8003334 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f76:	bf00      	nop
 8000f78:	3708      	adds	r7, #8
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	40021000 	.word	0x40021000

08000f84 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b08e      	sub	sp, #56	; 0x38
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f90:	2200      	movs	r2, #0
 8000f92:	601a      	str	r2, [r3, #0]
 8000f94:	605a      	str	r2, [r3, #4]
 8000f96:	609a      	str	r2, [r3, #8]
 8000f98:	60da      	str	r2, [r3, #12]
 8000f9a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4a46      	ldr	r2, [pc, #280]	; (80010bc <HAL_TIM_Encoder_MspInit+0x138>)
 8000fa2:	4293      	cmp	r3, r2
 8000fa4:	d12a      	bne.n	8000ffc <HAL_TIM_Encoder_MspInit+0x78>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000fa6:	4b46      	ldr	r3, [pc, #280]	; (80010c0 <HAL_TIM_Encoder_MspInit+0x13c>)
 8000fa8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000faa:	4a45      	ldr	r2, [pc, #276]	; (80010c0 <HAL_TIM_Encoder_MspInit+0x13c>)
 8000fac:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000fb0:	6613      	str	r3, [r2, #96]	; 0x60
 8000fb2:	4b43      	ldr	r3, [pc, #268]	; (80010c0 <HAL_TIM_Encoder_MspInit+0x13c>)
 8000fb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fb6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000fba:	623b      	str	r3, [r7, #32]
 8000fbc:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fbe:	4b40      	ldr	r3, [pc, #256]	; (80010c0 <HAL_TIM_Encoder_MspInit+0x13c>)
 8000fc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fc2:	4a3f      	ldr	r2, [pc, #252]	; (80010c0 <HAL_TIM_Encoder_MspInit+0x13c>)
 8000fc4:	f043 0301 	orr.w	r3, r3, #1
 8000fc8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fca:	4b3d      	ldr	r3, [pc, #244]	; (80010c0 <HAL_TIM_Encoder_MspInit+0x13c>)
 8000fcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fce:	f003 0301 	and.w	r3, r3, #1
 8000fd2:	61fb      	str	r3, [r7, #28]
 8000fd4:	69fb      	ldr	r3, [r7, #28]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000fd6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000fda:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fdc:	2302      	movs	r3, #2
 8000fde:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8000fe8:	2306      	movs	r3, #6
 8000fea:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ff6:	f000 fbdd 	bl	80017b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000ffa:	e05a      	b.n	80010b2 <HAL_TIM_Encoder_MspInit+0x12e>
  else if(htim_encoder->Instance==TIM3)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	4a30      	ldr	r2, [pc, #192]	; (80010c4 <HAL_TIM_Encoder_MspInit+0x140>)
 8001002:	4293      	cmp	r3, r2
 8001004:	d128      	bne.n	8001058 <HAL_TIM_Encoder_MspInit+0xd4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001006:	4b2e      	ldr	r3, [pc, #184]	; (80010c0 <HAL_TIM_Encoder_MspInit+0x13c>)
 8001008:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800100a:	4a2d      	ldr	r2, [pc, #180]	; (80010c0 <HAL_TIM_Encoder_MspInit+0x13c>)
 800100c:	f043 0302 	orr.w	r3, r3, #2
 8001010:	6593      	str	r3, [r2, #88]	; 0x58
 8001012:	4b2b      	ldr	r3, [pc, #172]	; (80010c0 <HAL_TIM_Encoder_MspInit+0x13c>)
 8001014:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001016:	f003 0302 	and.w	r3, r3, #2
 800101a:	61bb      	str	r3, [r7, #24]
 800101c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800101e:	4b28      	ldr	r3, [pc, #160]	; (80010c0 <HAL_TIM_Encoder_MspInit+0x13c>)
 8001020:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001022:	4a27      	ldr	r2, [pc, #156]	; (80010c0 <HAL_TIM_Encoder_MspInit+0x13c>)
 8001024:	f043 0302 	orr.w	r3, r3, #2
 8001028:	64d3      	str	r3, [r2, #76]	; 0x4c
 800102a:	4b25      	ldr	r3, [pc, #148]	; (80010c0 <HAL_TIM_Encoder_MspInit+0x13c>)
 800102c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800102e:	f003 0302 	and.w	r3, r3, #2
 8001032:	617b      	str	r3, [r7, #20]
 8001034:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001036:	2330      	movs	r3, #48	; 0x30
 8001038:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800103a:	2302      	movs	r3, #2
 800103c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103e:	2300      	movs	r3, #0
 8001040:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001042:	2300      	movs	r3, #0
 8001044:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001046:	2302      	movs	r3, #2
 8001048:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800104a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800104e:	4619      	mov	r1, r3
 8001050:	481d      	ldr	r0, [pc, #116]	; (80010c8 <HAL_TIM_Encoder_MspInit+0x144>)
 8001052:	f000 fbaf 	bl	80017b4 <HAL_GPIO_Init>
}
 8001056:	e02c      	b.n	80010b2 <HAL_TIM_Encoder_MspInit+0x12e>
  else if(htim_encoder->Instance==TIM4)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	4a1b      	ldr	r2, [pc, #108]	; (80010cc <HAL_TIM_Encoder_MspInit+0x148>)
 800105e:	4293      	cmp	r3, r2
 8001060:	d127      	bne.n	80010b2 <HAL_TIM_Encoder_MspInit+0x12e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001062:	4b17      	ldr	r3, [pc, #92]	; (80010c0 <HAL_TIM_Encoder_MspInit+0x13c>)
 8001064:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001066:	4a16      	ldr	r2, [pc, #88]	; (80010c0 <HAL_TIM_Encoder_MspInit+0x13c>)
 8001068:	f043 0304 	orr.w	r3, r3, #4
 800106c:	6593      	str	r3, [r2, #88]	; 0x58
 800106e:	4b14      	ldr	r3, [pc, #80]	; (80010c0 <HAL_TIM_Encoder_MspInit+0x13c>)
 8001070:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001072:	f003 0304 	and.w	r3, r3, #4
 8001076:	613b      	str	r3, [r7, #16]
 8001078:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800107a:	4b11      	ldr	r3, [pc, #68]	; (80010c0 <HAL_TIM_Encoder_MspInit+0x13c>)
 800107c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800107e:	4a10      	ldr	r2, [pc, #64]	; (80010c0 <HAL_TIM_Encoder_MspInit+0x13c>)
 8001080:	f043 0302 	orr.w	r3, r3, #2
 8001084:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001086:	4b0e      	ldr	r3, [pc, #56]	; (80010c0 <HAL_TIM_Encoder_MspInit+0x13c>)
 8001088:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800108a:	f003 0302 	and.w	r3, r3, #2
 800108e:	60fb      	str	r3, [r7, #12]
 8001090:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001092:	23c0      	movs	r3, #192	; 0xc0
 8001094:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001096:	2302      	movs	r3, #2
 8001098:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109a:	2300      	movs	r3, #0
 800109c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800109e:	2300      	movs	r3, #0
 80010a0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80010a2:	2302      	movs	r3, #2
 80010a4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010aa:	4619      	mov	r1, r3
 80010ac:	4806      	ldr	r0, [pc, #24]	; (80010c8 <HAL_TIM_Encoder_MspInit+0x144>)
 80010ae:	f000 fb81 	bl	80017b4 <HAL_GPIO_Init>
}
 80010b2:	bf00      	nop
 80010b4:	3738      	adds	r7, #56	; 0x38
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	40012c00 	.word	0x40012c00
 80010c0:	40021000 	.word	0x40021000
 80010c4:	40000400 	.word	0x40000400
 80010c8:	48000400 	.word	0x48000400
 80010cc:	40000800 	.word	0x40000800

080010d0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b087      	sub	sp, #28
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80010e0:	d10c      	bne.n	80010fc <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80010e2:	4b1b      	ldr	r3, [pc, #108]	; (8001150 <HAL_TIM_PWM_MspInit+0x80>)
 80010e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010e6:	4a1a      	ldr	r2, [pc, #104]	; (8001150 <HAL_TIM_PWM_MspInit+0x80>)
 80010e8:	f043 0301 	orr.w	r3, r3, #1
 80010ec:	6593      	str	r3, [r2, #88]	; 0x58
 80010ee:	4b18      	ldr	r3, [pc, #96]	; (8001150 <HAL_TIM_PWM_MspInit+0x80>)
 80010f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010f2:	f003 0301 	and.w	r3, r3, #1
 80010f6:	617b      	str	r3, [r7, #20]
 80010f8:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 80010fa:	e022      	b.n	8001142 <HAL_TIM_PWM_MspInit+0x72>
  else if(htim_pwm->Instance==TIM8)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	4a14      	ldr	r2, [pc, #80]	; (8001154 <HAL_TIM_PWM_MspInit+0x84>)
 8001102:	4293      	cmp	r3, r2
 8001104:	d10c      	bne.n	8001120 <HAL_TIM_PWM_MspInit+0x50>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001106:	4b12      	ldr	r3, [pc, #72]	; (8001150 <HAL_TIM_PWM_MspInit+0x80>)
 8001108:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800110a:	4a11      	ldr	r2, [pc, #68]	; (8001150 <HAL_TIM_PWM_MspInit+0x80>)
 800110c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001110:	6613      	str	r3, [r2, #96]	; 0x60
 8001112:	4b0f      	ldr	r3, [pc, #60]	; (8001150 <HAL_TIM_PWM_MspInit+0x80>)
 8001114:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001116:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800111a:	613b      	str	r3, [r7, #16]
 800111c:	693b      	ldr	r3, [r7, #16]
}
 800111e:	e010      	b.n	8001142 <HAL_TIM_PWM_MspInit+0x72>
  else if(htim_pwm->Instance==TIM15)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4a0c      	ldr	r2, [pc, #48]	; (8001158 <HAL_TIM_PWM_MspInit+0x88>)
 8001126:	4293      	cmp	r3, r2
 8001128:	d10b      	bne.n	8001142 <HAL_TIM_PWM_MspInit+0x72>
    __HAL_RCC_TIM15_CLK_ENABLE();
 800112a:	4b09      	ldr	r3, [pc, #36]	; (8001150 <HAL_TIM_PWM_MspInit+0x80>)
 800112c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800112e:	4a08      	ldr	r2, [pc, #32]	; (8001150 <HAL_TIM_PWM_MspInit+0x80>)
 8001130:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001134:	6613      	str	r3, [r2, #96]	; 0x60
 8001136:	4b06      	ldr	r3, [pc, #24]	; (8001150 <HAL_TIM_PWM_MspInit+0x80>)
 8001138:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800113a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800113e:	60fb      	str	r3, [r7, #12]
 8001140:	68fb      	ldr	r3, [r7, #12]
}
 8001142:	bf00      	nop
 8001144:	371c      	adds	r7, #28
 8001146:	46bd      	mov	sp, r7
 8001148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114c:	4770      	bx	lr
 800114e:	bf00      	nop
 8001150:	40021000 	.word	0x40021000
 8001154:	40013400 	.word	0x40013400
 8001158:	40014000 	.word	0x40014000

0800115c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b086      	sub	sp, #24
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	4a1f      	ldr	r2, [pc, #124]	; (80011e8 <HAL_TIM_Base_MspInit+0x8c>)
 800116a:	4293      	cmp	r3, r2
 800116c:	d114      	bne.n	8001198 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800116e:	4b1f      	ldr	r3, [pc, #124]	; (80011ec <HAL_TIM_Base_MspInit+0x90>)
 8001170:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001172:	4a1e      	ldr	r2, [pc, #120]	; (80011ec <HAL_TIM_Base_MspInit+0x90>)
 8001174:	f043 0310 	orr.w	r3, r3, #16
 8001178:	6593      	str	r3, [r2, #88]	; 0x58
 800117a:	4b1c      	ldr	r3, [pc, #112]	; (80011ec <HAL_TIM_Base_MspInit+0x90>)
 800117c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800117e:	f003 0310 	and.w	r3, r3, #16
 8001182:	617b      	str	r3, [r7, #20]
 8001184:	697b      	ldr	r3, [r7, #20]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001186:	2200      	movs	r2, #0
 8001188:	2100      	movs	r1, #0
 800118a:	2036      	movs	r0, #54	; 0x36
 800118c:	f000 fadd 	bl	800174a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001190:	2036      	movs	r0, #54	; 0x36
 8001192:	f000 faf4 	bl	800177e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8001196:	e022      	b.n	80011de <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM16)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	4a14      	ldr	r2, [pc, #80]	; (80011f0 <HAL_TIM_Base_MspInit+0x94>)
 800119e:	4293      	cmp	r3, r2
 80011a0:	d10c      	bne.n	80011bc <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80011a2:	4b12      	ldr	r3, [pc, #72]	; (80011ec <HAL_TIM_Base_MspInit+0x90>)
 80011a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011a6:	4a11      	ldr	r2, [pc, #68]	; (80011ec <HAL_TIM_Base_MspInit+0x90>)
 80011a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011ac:	6613      	str	r3, [r2, #96]	; 0x60
 80011ae:	4b0f      	ldr	r3, [pc, #60]	; (80011ec <HAL_TIM_Base_MspInit+0x90>)
 80011b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011b6:	613b      	str	r3, [r7, #16]
 80011b8:	693b      	ldr	r3, [r7, #16]
}
 80011ba:	e010      	b.n	80011de <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM17)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4a0c      	ldr	r2, [pc, #48]	; (80011f4 <HAL_TIM_Base_MspInit+0x98>)
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d10b      	bne.n	80011de <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM17_CLK_ENABLE();
 80011c6:	4b09      	ldr	r3, [pc, #36]	; (80011ec <HAL_TIM_Base_MspInit+0x90>)
 80011c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011ca:	4a08      	ldr	r2, [pc, #32]	; (80011ec <HAL_TIM_Base_MspInit+0x90>)
 80011cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011d0:	6613      	str	r3, [r2, #96]	; 0x60
 80011d2:	4b06      	ldr	r3, [pc, #24]	; (80011ec <HAL_TIM_Base_MspInit+0x90>)
 80011d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80011da:	60fb      	str	r3, [r7, #12]
 80011dc:	68fb      	ldr	r3, [r7, #12]
}
 80011de:	bf00      	nop
 80011e0:	3718      	adds	r7, #24
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	40001000 	.word	0x40001000
 80011ec:	40021000 	.word	0x40021000
 80011f0:	40014400 	.word	0x40014400
 80011f4:	40014800 	.word	0x40014800

080011f8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b08c      	sub	sp, #48	; 0x30
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001200:	f107 031c 	add.w	r3, r7, #28
 8001204:	2200      	movs	r2, #0
 8001206:	601a      	str	r2, [r3, #0]
 8001208:	605a      	str	r2, [r3, #4]
 800120a:	609a      	str	r2, [r3, #8]
 800120c:	60da      	str	r2, [r3, #12]
 800120e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001218:	d12f      	bne.n	800127a <HAL_TIM_MspPostInit+0x82>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800121a:	4b60      	ldr	r3, [pc, #384]	; (800139c <HAL_TIM_MspPostInit+0x1a4>)
 800121c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800121e:	4a5f      	ldr	r2, [pc, #380]	; (800139c <HAL_TIM_MspPostInit+0x1a4>)
 8001220:	f043 0301 	orr.w	r3, r3, #1
 8001224:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001226:	4b5d      	ldr	r3, [pc, #372]	; (800139c <HAL_TIM_MspPostInit+0x1a4>)
 8001228:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800122a:	f003 0301 	and.w	r3, r3, #1
 800122e:	61bb      	str	r3, [r7, #24]
 8001230:	69bb      	ldr	r3, [r7, #24]
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA10     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8001232:	2307      	movs	r3, #7
 8001234:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001236:	2302      	movs	r3, #2
 8001238:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123a:	2300      	movs	r3, #0
 800123c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800123e:	2300      	movs	r3, #0
 8001240:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001242:	2301      	movs	r3, #1
 8001244:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001246:	f107 031c 	add.w	r3, r7, #28
 800124a:	4619      	mov	r1, r3
 800124c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001250:	f000 fab0 	bl	80017b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001254:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001258:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800125a:	2302      	movs	r3, #2
 800125c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125e:	2300      	movs	r3, #0
 8001260:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001262:	2300      	movs	r3, #0
 8001264:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM2;
 8001266:	230a      	movs	r3, #10
 8001268:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800126a:	f107 031c 	add.w	r3, r7, #28
 800126e:	4619      	mov	r1, r3
 8001270:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001274:	f000 fa9e 	bl	80017b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 8001278:	e08b      	b.n	8001392 <HAL_TIM_MspPostInit+0x19a>
  else if(htim->Instance==TIM8)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	4a48      	ldr	r2, [pc, #288]	; (80013a0 <HAL_TIM_MspPostInit+0x1a8>)
 8001280:	4293      	cmp	r3, r2
 8001282:	d11e      	bne.n	80012c2 <HAL_TIM_MspPostInit+0xca>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001284:	4b45      	ldr	r3, [pc, #276]	; (800139c <HAL_TIM_MspPostInit+0x1a4>)
 8001286:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001288:	4a44      	ldr	r2, [pc, #272]	; (800139c <HAL_TIM_MspPostInit+0x1a4>)
 800128a:	f043 0301 	orr.w	r3, r3, #1
 800128e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001290:	4b42      	ldr	r3, [pc, #264]	; (800139c <HAL_TIM_MspPostInit+0x1a4>)
 8001292:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001294:	f003 0301 	and.w	r3, r3, #1
 8001298:	617b      	str	r3, [r7, #20]
 800129a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800129c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80012a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012a2:	2302      	movs	r3, #2
 80012a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a6:	2300      	movs	r3, #0
 80012a8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012aa:	2300      	movs	r3, #0
 80012ac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM8;
 80012ae:	2302      	movs	r3, #2
 80012b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012b2:	f107 031c 	add.w	r3, r7, #28
 80012b6:	4619      	mov	r1, r3
 80012b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012bc:	f000 fa7a 	bl	80017b4 <HAL_GPIO_Init>
}
 80012c0:	e067      	b.n	8001392 <HAL_TIM_MspPostInit+0x19a>
  else if(htim->Instance==TIM15)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	4a37      	ldr	r2, [pc, #220]	; (80013a4 <HAL_TIM_MspPostInit+0x1ac>)
 80012c8:	4293      	cmp	r3, r2
 80012ca:	d11d      	bne.n	8001308 <HAL_TIM_MspPostInit+0x110>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012cc:	4b33      	ldr	r3, [pc, #204]	; (800139c <HAL_TIM_MspPostInit+0x1a4>)
 80012ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012d0:	4a32      	ldr	r2, [pc, #200]	; (800139c <HAL_TIM_MspPostInit+0x1a4>)
 80012d2:	f043 0301 	orr.w	r3, r3, #1
 80012d6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012d8:	4b30      	ldr	r3, [pc, #192]	; (800139c <HAL_TIM_MspPostInit+0x1a4>)
 80012da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012dc:	f003 0301 	and.w	r3, r3, #1
 80012e0:	613b      	str	r3, [r7, #16]
 80012e2:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80012e4:	2308      	movs	r3, #8
 80012e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012e8:	2302      	movs	r3, #2
 80012ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ec:	2300      	movs	r3, #0
 80012ee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012f0:	2300      	movs	r3, #0
 80012f2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM15;
 80012f4:	2309      	movs	r3, #9
 80012f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012f8:	f107 031c 	add.w	r3, r7, #28
 80012fc:	4619      	mov	r1, r3
 80012fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001302:	f000 fa57 	bl	80017b4 <HAL_GPIO_Init>
}
 8001306:	e044      	b.n	8001392 <HAL_TIM_MspPostInit+0x19a>
  else if(htim->Instance==TIM16)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4a26      	ldr	r2, [pc, #152]	; (80013a8 <HAL_TIM_MspPostInit+0x1b0>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d11d      	bne.n	800134e <HAL_TIM_MspPostInit+0x156>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001312:	4b22      	ldr	r3, [pc, #136]	; (800139c <HAL_TIM_MspPostInit+0x1a4>)
 8001314:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001316:	4a21      	ldr	r2, [pc, #132]	; (800139c <HAL_TIM_MspPostInit+0x1a4>)
 8001318:	f043 0301 	orr.w	r3, r3, #1
 800131c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800131e:	4b1f      	ldr	r3, [pc, #124]	; (800139c <HAL_TIM_MspPostInit+0x1a4>)
 8001320:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001322:	f003 0301 	and.w	r3, r3, #1
 8001326:	60fb      	str	r3, [r7, #12]
 8001328:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800132a:	2340      	movs	r3, #64	; 0x40
 800132c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800132e:	2302      	movs	r3, #2
 8001330:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001332:	2300      	movs	r3, #0
 8001334:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001336:	2300      	movs	r3, #0
 8001338:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 800133a:	2301      	movs	r3, #1
 800133c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800133e:	f107 031c 	add.w	r3, r7, #28
 8001342:	4619      	mov	r1, r3
 8001344:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001348:	f000 fa34 	bl	80017b4 <HAL_GPIO_Init>
}
 800134c:	e021      	b.n	8001392 <HAL_TIM_MspPostInit+0x19a>
  else if(htim->Instance==TIM17)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4a16      	ldr	r2, [pc, #88]	; (80013ac <HAL_TIM_MspPostInit+0x1b4>)
 8001354:	4293      	cmp	r3, r2
 8001356:	d11c      	bne.n	8001392 <HAL_TIM_MspPostInit+0x19a>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001358:	4b10      	ldr	r3, [pc, #64]	; (800139c <HAL_TIM_MspPostInit+0x1a4>)
 800135a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800135c:	4a0f      	ldr	r2, [pc, #60]	; (800139c <HAL_TIM_MspPostInit+0x1a4>)
 800135e:	f043 0301 	orr.w	r3, r3, #1
 8001362:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001364:	4b0d      	ldr	r3, [pc, #52]	; (800139c <HAL_TIM_MspPostInit+0x1a4>)
 8001366:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001368:	f003 0301 	and.w	r3, r3, #1
 800136c:	60bb      	str	r3, [r7, #8]
 800136e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001370:	2380      	movs	r3, #128	; 0x80
 8001372:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001374:	2302      	movs	r3, #2
 8001376:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001378:	2300      	movs	r3, #0
 800137a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800137c:	2300      	movs	r3, #0
 800137e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM17;
 8001380:	2301      	movs	r3, #1
 8001382:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001384:	f107 031c 	add.w	r3, r7, #28
 8001388:	4619      	mov	r1, r3
 800138a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800138e:	f000 fa11 	bl	80017b4 <HAL_GPIO_Init>
}
 8001392:	bf00      	nop
 8001394:	3730      	adds	r7, #48	; 0x30
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	40021000 	.word	0x40021000
 80013a0:	40013400 	.word	0x40013400
 80013a4:	40014000 	.word	0x40014000
 80013a8:	40014400 	.word	0x40014400
 80013ac:	40014800 	.word	0x40014800

080013b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80013b4:	bf00      	nop
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr

080013be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013be:	b480      	push	{r7}
 80013c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013c2:	e7fe      	b.n	80013c2 <HardFault_Handler+0x4>

080013c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013c4:	b480      	push	{r7}
 80013c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013c8:	e7fe      	b.n	80013c8 <MemManage_Handler+0x4>

080013ca <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013ca:	b480      	push	{r7}
 80013cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013ce:	e7fe      	b.n	80013ce <BusFault_Handler+0x4>

080013d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013d0:	b480      	push	{r7}
 80013d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013d4:	e7fe      	b.n	80013d4 <UsageFault_Handler+0x4>

080013d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013d6:	b480      	push	{r7}
 80013d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013da:	bf00      	nop
 80013dc:	46bd      	mov	sp, r7
 80013de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e2:	4770      	bx	lr

080013e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013e8:	bf00      	nop
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr

080013f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013f2:	b480      	push	{r7}
 80013f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013f6:	bf00      	nop
 80013f8:	46bd      	mov	sp, r7
 80013fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fe:	4770      	bx	lr

08001400 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001404:	f000 f8a8 	bl	8001558 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001408:	bf00      	nop
 800140a:	bd80      	pop	{r7, pc}

0800140c <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001410:	4802      	ldr	r0, [pc, #8]	; (800141c <USB_LP_IRQHandler+0x10>)
 8001412:	f000 fc8a 	bl	8001d2a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8001416:	bf00      	nop
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	20001374 	.word	0x20001374

08001420 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001424:	4802      	ldr	r0, [pc, #8]	; (8001430 <TIM6_DAC_IRQHandler+0x10>)
 8001426:	f003 f9ce 	bl	80047c6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800142a:	bf00      	nop
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	200005a0 	.word	0x200005a0

08001434 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001434:	b480      	push	{r7}
 8001436:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001438:	4b08      	ldr	r3, [pc, #32]	; (800145c <SystemInit+0x28>)
 800143a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800143e:	4a07      	ldr	r2, [pc, #28]	; (800145c <SystemInit+0x28>)
 8001440:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001444:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001448:	4b04      	ldr	r3, [pc, #16]	; (800145c <SystemInit+0x28>)
 800144a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800144e:	609a      	str	r2, [r3, #8]
#endif
}
 8001450:	bf00      	nop
 8001452:	46bd      	mov	sp, r7
 8001454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001458:	4770      	bx	lr
 800145a:	bf00      	nop
 800145c:	e000ed00 	.word	0xe000ed00

08001460 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001460:	480d      	ldr	r0, [pc, #52]	; (8001498 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001462:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001464:	480d      	ldr	r0, [pc, #52]	; (800149c <LoopForever+0x6>)
  ldr r1, =_edata
 8001466:	490e      	ldr	r1, [pc, #56]	; (80014a0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001468:	4a0e      	ldr	r2, [pc, #56]	; (80014a4 <LoopForever+0xe>)
  movs r3, #0
 800146a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800146c:	e002      	b.n	8001474 <LoopCopyDataInit>

0800146e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800146e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001470:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001472:	3304      	adds	r3, #4

08001474 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001474:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001476:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001478:	d3f9      	bcc.n	800146e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800147a:	4a0b      	ldr	r2, [pc, #44]	; (80014a8 <LoopForever+0x12>)
  ldr r4, =_ebss
 800147c:	4c0b      	ldr	r4, [pc, #44]	; (80014ac <LoopForever+0x16>)
  movs r3, #0
 800147e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001480:	e001      	b.n	8001486 <LoopFillZerobss>

08001482 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001482:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001484:	3204      	adds	r2, #4

08001486 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001486:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001488:	d3fb      	bcc.n	8001482 <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800148a:	f7ff ffd3 	bl	8001434 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800148e:	f008 fb07 	bl	8009aa0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001492:	f7fe fee1 	bl	8000258 <main>

08001496 <LoopForever>:

LoopForever:
    b LoopForever
 8001496:	e7fe      	b.n	8001496 <LoopForever>
  ldr   r0, =_estack
 8001498:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 800149c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014a0:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 80014a4:	08009b88 	.word	0x08009b88
  ldr r2, =_sbss
 80014a8:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 80014ac:	20001668 	.word	0x20001668

080014b0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80014b0:	e7fe      	b.n	80014b0 <ADC1_2_IRQHandler>

080014b2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014b2:	b580      	push	{r7, lr}
 80014b4:	b082      	sub	sp, #8
 80014b6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80014b8:	2300      	movs	r3, #0
 80014ba:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014bc:	2003      	movs	r0, #3
 80014be:	f000 f939 	bl	8001734 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80014c2:	2000      	movs	r0, #0
 80014c4:	f000 f80e 	bl	80014e4 <HAL_InitTick>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d002      	beq.n	80014d4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80014ce:	2301      	movs	r3, #1
 80014d0:	71fb      	strb	r3, [r7, #7]
 80014d2:	e001      	b.n	80014d8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80014d4:	f7ff fd32 	bl	8000f3c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80014d8:	79fb      	ldrb	r3, [r7, #7]

}
 80014da:	4618      	mov	r0, r3
 80014dc:	3708      	adds	r7, #8
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
	...

080014e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b084      	sub	sp, #16
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80014ec:	2300      	movs	r3, #0
 80014ee:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80014f0:	4b16      	ldr	r3, [pc, #88]	; (800154c <HAL_InitTick+0x68>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d022      	beq.n	800153e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80014f8:	4b15      	ldr	r3, [pc, #84]	; (8001550 <HAL_InitTick+0x6c>)
 80014fa:	681a      	ldr	r2, [r3, #0]
 80014fc:	4b13      	ldr	r3, [pc, #76]	; (800154c <HAL_InitTick+0x68>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001504:	fbb1 f3f3 	udiv	r3, r1, r3
 8001508:	fbb2 f3f3 	udiv	r3, r2, r3
 800150c:	4618      	mov	r0, r3
 800150e:	f000 f944 	bl	800179a <HAL_SYSTICK_Config>
 8001512:	4603      	mov	r3, r0
 8001514:	2b00      	cmp	r3, #0
 8001516:	d10f      	bne.n	8001538 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	2b0f      	cmp	r3, #15
 800151c:	d809      	bhi.n	8001532 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800151e:	2200      	movs	r2, #0
 8001520:	6879      	ldr	r1, [r7, #4]
 8001522:	f04f 30ff 	mov.w	r0, #4294967295
 8001526:	f000 f910 	bl	800174a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800152a:	4a0a      	ldr	r2, [pc, #40]	; (8001554 <HAL_InitTick+0x70>)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	6013      	str	r3, [r2, #0]
 8001530:	e007      	b.n	8001542 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001532:	2301      	movs	r3, #1
 8001534:	73fb      	strb	r3, [r7, #15]
 8001536:	e004      	b.n	8001542 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001538:	2301      	movs	r3, #1
 800153a:	73fb      	strb	r3, [r7, #15]
 800153c:	e001      	b.n	8001542 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800153e:	2301      	movs	r3, #1
 8001540:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001542:	7bfb      	ldrb	r3, [r7, #15]
}
 8001544:	4618      	mov	r0, r3
 8001546:	3710      	adds	r7, #16
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}
 800154c:	2000005c 	.word	0x2000005c
 8001550:	20000054 	.word	0x20000054
 8001554:	20000058 	.word	0x20000058

08001558 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001558:	b480      	push	{r7}
 800155a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800155c:	4b05      	ldr	r3, [pc, #20]	; (8001574 <HAL_IncTick+0x1c>)
 800155e:	681a      	ldr	r2, [r3, #0]
 8001560:	4b05      	ldr	r3, [pc, #20]	; (8001578 <HAL_IncTick+0x20>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4413      	add	r3, r2
 8001566:	4a03      	ldr	r2, [pc, #12]	; (8001574 <HAL_IncTick+0x1c>)
 8001568:	6013      	str	r3, [r2, #0]
}
 800156a:	bf00      	nop
 800156c:	46bd      	mov	sp, r7
 800156e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001572:	4770      	bx	lr
 8001574:	200006d0 	.word	0x200006d0
 8001578:	2000005c 	.word	0x2000005c

0800157c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800157c:	b480      	push	{r7}
 800157e:	af00      	add	r7, sp, #0
  return uwTick;
 8001580:	4b03      	ldr	r3, [pc, #12]	; (8001590 <HAL_GetTick+0x14>)
 8001582:	681b      	ldr	r3, [r3, #0]
}
 8001584:	4618      	mov	r0, r3
 8001586:	46bd      	mov	sp, r7
 8001588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158c:	4770      	bx	lr
 800158e:	bf00      	nop
 8001590:	200006d0 	.word	0x200006d0

08001594 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001594:	b480      	push	{r7}
 8001596:	b085      	sub	sp, #20
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	f003 0307 	and.w	r3, r3, #7
 80015a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015a4:	4b0c      	ldr	r3, [pc, #48]	; (80015d8 <__NVIC_SetPriorityGrouping+0x44>)
 80015a6:	68db      	ldr	r3, [r3, #12]
 80015a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015aa:	68ba      	ldr	r2, [r7, #8]
 80015ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015b0:	4013      	ands	r3, r2
 80015b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015b8:	68bb      	ldr	r3, [r7, #8]
 80015ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015c6:	4a04      	ldr	r2, [pc, #16]	; (80015d8 <__NVIC_SetPriorityGrouping+0x44>)
 80015c8:	68bb      	ldr	r3, [r7, #8]
 80015ca:	60d3      	str	r3, [r2, #12]
}
 80015cc:	bf00      	nop
 80015ce:	3714      	adds	r7, #20
 80015d0:	46bd      	mov	sp, r7
 80015d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d6:	4770      	bx	lr
 80015d8:	e000ed00 	.word	0xe000ed00

080015dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015e0:	4b04      	ldr	r3, [pc, #16]	; (80015f4 <__NVIC_GetPriorityGrouping+0x18>)
 80015e2:	68db      	ldr	r3, [r3, #12]
 80015e4:	0a1b      	lsrs	r3, r3, #8
 80015e6:	f003 0307 	and.w	r3, r3, #7
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	46bd      	mov	sp, r7
 80015ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f2:	4770      	bx	lr
 80015f4:	e000ed00 	.word	0xe000ed00

080015f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015f8:	b480      	push	{r7}
 80015fa:	b083      	sub	sp, #12
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	4603      	mov	r3, r0
 8001600:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001602:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001606:	2b00      	cmp	r3, #0
 8001608:	db0b      	blt.n	8001622 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800160a:	79fb      	ldrb	r3, [r7, #7]
 800160c:	f003 021f 	and.w	r2, r3, #31
 8001610:	4907      	ldr	r1, [pc, #28]	; (8001630 <__NVIC_EnableIRQ+0x38>)
 8001612:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001616:	095b      	lsrs	r3, r3, #5
 8001618:	2001      	movs	r0, #1
 800161a:	fa00 f202 	lsl.w	r2, r0, r2
 800161e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001622:	bf00      	nop
 8001624:	370c      	adds	r7, #12
 8001626:	46bd      	mov	sp, r7
 8001628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162c:	4770      	bx	lr
 800162e:	bf00      	nop
 8001630:	e000e100 	.word	0xe000e100

08001634 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001634:	b480      	push	{r7}
 8001636:	b083      	sub	sp, #12
 8001638:	af00      	add	r7, sp, #0
 800163a:	4603      	mov	r3, r0
 800163c:	6039      	str	r1, [r7, #0]
 800163e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001640:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001644:	2b00      	cmp	r3, #0
 8001646:	db0a      	blt.n	800165e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	b2da      	uxtb	r2, r3
 800164c:	490c      	ldr	r1, [pc, #48]	; (8001680 <__NVIC_SetPriority+0x4c>)
 800164e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001652:	0112      	lsls	r2, r2, #4
 8001654:	b2d2      	uxtb	r2, r2
 8001656:	440b      	add	r3, r1
 8001658:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800165c:	e00a      	b.n	8001674 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	b2da      	uxtb	r2, r3
 8001662:	4908      	ldr	r1, [pc, #32]	; (8001684 <__NVIC_SetPriority+0x50>)
 8001664:	79fb      	ldrb	r3, [r7, #7]
 8001666:	f003 030f 	and.w	r3, r3, #15
 800166a:	3b04      	subs	r3, #4
 800166c:	0112      	lsls	r2, r2, #4
 800166e:	b2d2      	uxtb	r2, r2
 8001670:	440b      	add	r3, r1
 8001672:	761a      	strb	r2, [r3, #24]
}
 8001674:	bf00      	nop
 8001676:	370c      	adds	r7, #12
 8001678:	46bd      	mov	sp, r7
 800167a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167e:	4770      	bx	lr
 8001680:	e000e100 	.word	0xe000e100
 8001684:	e000ed00 	.word	0xe000ed00

08001688 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001688:	b480      	push	{r7}
 800168a:	b089      	sub	sp, #36	; 0x24
 800168c:	af00      	add	r7, sp, #0
 800168e:	60f8      	str	r0, [r7, #12]
 8001690:	60b9      	str	r1, [r7, #8]
 8001692:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	f003 0307 	and.w	r3, r3, #7
 800169a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800169c:	69fb      	ldr	r3, [r7, #28]
 800169e:	f1c3 0307 	rsb	r3, r3, #7
 80016a2:	2b04      	cmp	r3, #4
 80016a4:	bf28      	it	cs
 80016a6:	2304      	movcs	r3, #4
 80016a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016aa:	69fb      	ldr	r3, [r7, #28]
 80016ac:	3304      	adds	r3, #4
 80016ae:	2b06      	cmp	r3, #6
 80016b0:	d902      	bls.n	80016b8 <NVIC_EncodePriority+0x30>
 80016b2:	69fb      	ldr	r3, [r7, #28]
 80016b4:	3b03      	subs	r3, #3
 80016b6:	e000      	b.n	80016ba <NVIC_EncodePriority+0x32>
 80016b8:	2300      	movs	r3, #0
 80016ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016bc:	f04f 32ff 	mov.w	r2, #4294967295
 80016c0:	69bb      	ldr	r3, [r7, #24]
 80016c2:	fa02 f303 	lsl.w	r3, r2, r3
 80016c6:	43da      	mvns	r2, r3
 80016c8:	68bb      	ldr	r3, [r7, #8]
 80016ca:	401a      	ands	r2, r3
 80016cc:	697b      	ldr	r3, [r7, #20]
 80016ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016d0:	f04f 31ff 	mov.w	r1, #4294967295
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	fa01 f303 	lsl.w	r3, r1, r3
 80016da:	43d9      	mvns	r1, r3
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016e0:	4313      	orrs	r3, r2
         );
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	3724      	adds	r7, #36	; 0x24
 80016e6:	46bd      	mov	sp, r7
 80016e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ec:	4770      	bx	lr
	...

080016f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b082      	sub	sp, #8
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	3b01      	subs	r3, #1
 80016fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001700:	d301      	bcc.n	8001706 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001702:	2301      	movs	r3, #1
 8001704:	e00f      	b.n	8001726 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001706:	4a0a      	ldr	r2, [pc, #40]	; (8001730 <SysTick_Config+0x40>)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	3b01      	subs	r3, #1
 800170c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800170e:	210f      	movs	r1, #15
 8001710:	f04f 30ff 	mov.w	r0, #4294967295
 8001714:	f7ff ff8e 	bl	8001634 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001718:	4b05      	ldr	r3, [pc, #20]	; (8001730 <SysTick_Config+0x40>)
 800171a:	2200      	movs	r2, #0
 800171c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800171e:	4b04      	ldr	r3, [pc, #16]	; (8001730 <SysTick_Config+0x40>)
 8001720:	2207      	movs	r2, #7
 8001722:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001724:	2300      	movs	r3, #0
}
 8001726:	4618      	mov	r0, r3
 8001728:	3708      	adds	r7, #8
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	e000e010 	.word	0xe000e010

08001734 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b082      	sub	sp, #8
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800173c:	6878      	ldr	r0, [r7, #4]
 800173e:	f7ff ff29 	bl	8001594 <__NVIC_SetPriorityGrouping>
}
 8001742:	bf00      	nop
 8001744:	3708      	adds	r7, #8
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}

0800174a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800174a:	b580      	push	{r7, lr}
 800174c:	b086      	sub	sp, #24
 800174e:	af00      	add	r7, sp, #0
 8001750:	4603      	mov	r3, r0
 8001752:	60b9      	str	r1, [r7, #8]
 8001754:	607a      	str	r2, [r7, #4]
 8001756:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001758:	f7ff ff40 	bl	80015dc <__NVIC_GetPriorityGrouping>
 800175c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800175e:	687a      	ldr	r2, [r7, #4]
 8001760:	68b9      	ldr	r1, [r7, #8]
 8001762:	6978      	ldr	r0, [r7, #20]
 8001764:	f7ff ff90 	bl	8001688 <NVIC_EncodePriority>
 8001768:	4602      	mov	r2, r0
 800176a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800176e:	4611      	mov	r1, r2
 8001770:	4618      	mov	r0, r3
 8001772:	f7ff ff5f 	bl	8001634 <__NVIC_SetPriority>
}
 8001776:	bf00      	nop
 8001778:	3718      	adds	r7, #24
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}

0800177e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800177e:	b580      	push	{r7, lr}
 8001780:	b082      	sub	sp, #8
 8001782:	af00      	add	r7, sp, #0
 8001784:	4603      	mov	r3, r0
 8001786:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001788:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800178c:	4618      	mov	r0, r3
 800178e:	f7ff ff33 	bl	80015f8 <__NVIC_EnableIRQ>
}
 8001792:	bf00      	nop
 8001794:	3708      	adds	r7, #8
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}

0800179a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800179a:	b580      	push	{r7, lr}
 800179c:	b082      	sub	sp, #8
 800179e:	af00      	add	r7, sp, #0
 80017a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017a2:	6878      	ldr	r0, [r7, #4]
 80017a4:	f7ff ffa4 	bl	80016f0 <SysTick_Config>
 80017a8:	4603      	mov	r3, r0
}
 80017aa:	4618      	mov	r0, r3
 80017ac:	3708      	adds	r7, #8
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
	...

080017b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017b4:	b480      	push	{r7}
 80017b6:	b087      	sub	sp, #28
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
 80017bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80017be:	2300      	movs	r3, #0
 80017c0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80017c2:	e15a      	b.n	8001a7a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	681a      	ldr	r2, [r3, #0]
 80017c8:	2101      	movs	r1, #1
 80017ca:	697b      	ldr	r3, [r7, #20]
 80017cc:	fa01 f303 	lsl.w	r3, r1, r3
 80017d0:	4013      	ands	r3, r2
 80017d2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	f000 814c 	beq.w	8001a74 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	2b01      	cmp	r3, #1
 80017e2:	d00b      	beq.n	80017fc <HAL_GPIO_Init+0x48>
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	2b02      	cmp	r3, #2
 80017ea:	d007      	beq.n	80017fc <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80017f0:	2b11      	cmp	r3, #17
 80017f2:	d003      	beq.n	80017fc <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	2b12      	cmp	r3, #18
 80017fa:	d130      	bne.n	800185e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	689b      	ldr	r3, [r3, #8]
 8001800:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001802:	697b      	ldr	r3, [r7, #20]
 8001804:	005b      	lsls	r3, r3, #1
 8001806:	2203      	movs	r2, #3
 8001808:	fa02 f303 	lsl.w	r3, r2, r3
 800180c:	43db      	mvns	r3, r3
 800180e:	693a      	ldr	r2, [r7, #16]
 8001810:	4013      	ands	r3, r2
 8001812:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	68da      	ldr	r2, [r3, #12]
 8001818:	697b      	ldr	r3, [r7, #20]
 800181a:	005b      	lsls	r3, r3, #1
 800181c:	fa02 f303 	lsl.w	r3, r2, r3
 8001820:	693a      	ldr	r2, [r7, #16]
 8001822:	4313      	orrs	r3, r2
 8001824:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	693a      	ldr	r2, [r7, #16]
 800182a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001832:	2201      	movs	r2, #1
 8001834:	697b      	ldr	r3, [r7, #20]
 8001836:	fa02 f303 	lsl.w	r3, r2, r3
 800183a:	43db      	mvns	r3, r3
 800183c:	693a      	ldr	r2, [r7, #16]
 800183e:	4013      	ands	r3, r2
 8001840:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	091b      	lsrs	r3, r3, #4
 8001848:	f003 0201 	and.w	r2, r3, #1
 800184c:	697b      	ldr	r3, [r7, #20]
 800184e:	fa02 f303 	lsl.w	r3, r2, r3
 8001852:	693a      	ldr	r2, [r7, #16]
 8001854:	4313      	orrs	r3, r2
 8001856:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	693a      	ldr	r2, [r7, #16]
 800185c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	68db      	ldr	r3, [r3, #12]
 8001862:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001864:	697b      	ldr	r3, [r7, #20]
 8001866:	005b      	lsls	r3, r3, #1
 8001868:	2203      	movs	r2, #3
 800186a:	fa02 f303 	lsl.w	r3, r2, r3
 800186e:	43db      	mvns	r3, r3
 8001870:	693a      	ldr	r2, [r7, #16]
 8001872:	4013      	ands	r3, r2
 8001874:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	689a      	ldr	r2, [r3, #8]
 800187a:	697b      	ldr	r3, [r7, #20]
 800187c:	005b      	lsls	r3, r3, #1
 800187e:	fa02 f303 	lsl.w	r3, r2, r3
 8001882:	693a      	ldr	r2, [r7, #16]
 8001884:	4313      	orrs	r3, r2
 8001886:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	693a      	ldr	r2, [r7, #16]
 800188c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	2b02      	cmp	r3, #2
 8001894:	d003      	beq.n	800189e <HAL_GPIO_Init+0xea>
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	2b12      	cmp	r3, #18
 800189c:	d123      	bne.n	80018e6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800189e:	697b      	ldr	r3, [r7, #20]
 80018a0:	08da      	lsrs	r2, r3, #3
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	3208      	adds	r2, #8
 80018a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018aa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80018ac:	697b      	ldr	r3, [r7, #20]
 80018ae:	f003 0307 	and.w	r3, r3, #7
 80018b2:	009b      	lsls	r3, r3, #2
 80018b4:	220f      	movs	r2, #15
 80018b6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ba:	43db      	mvns	r3, r3
 80018bc:	693a      	ldr	r2, [r7, #16]
 80018be:	4013      	ands	r3, r2
 80018c0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	691a      	ldr	r2, [r3, #16]
 80018c6:	697b      	ldr	r3, [r7, #20]
 80018c8:	f003 0307 	and.w	r3, r3, #7
 80018cc:	009b      	lsls	r3, r3, #2
 80018ce:	fa02 f303 	lsl.w	r3, r2, r3
 80018d2:	693a      	ldr	r2, [r7, #16]
 80018d4:	4313      	orrs	r3, r2
 80018d6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80018d8:	697b      	ldr	r3, [r7, #20]
 80018da:	08da      	lsrs	r2, r3, #3
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	3208      	adds	r2, #8
 80018e0:	6939      	ldr	r1, [r7, #16]
 80018e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80018ec:	697b      	ldr	r3, [r7, #20]
 80018ee:	005b      	lsls	r3, r3, #1
 80018f0:	2203      	movs	r2, #3
 80018f2:	fa02 f303 	lsl.w	r3, r2, r3
 80018f6:	43db      	mvns	r3, r3
 80018f8:	693a      	ldr	r2, [r7, #16]
 80018fa:	4013      	ands	r3, r2
 80018fc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	f003 0203 	and.w	r2, r3, #3
 8001906:	697b      	ldr	r3, [r7, #20]
 8001908:	005b      	lsls	r3, r3, #1
 800190a:	fa02 f303 	lsl.w	r3, r2, r3
 800190e:	693a      	ldr	r2, [r7, #16]
 8001910:	4313      	orrs	r3, r2
 8001912:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	693a      	ldr	r2, [r7, #16]
 8001918:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001922:	2b00      	cmp	r3, #0
 8001924:	f000 80a6 	beq.w	8001a74 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001928:	4b5b      	ldr	r3, [pc, #364]	; (8001a98 <HAL_GPIO_Init+0x2e4>)
 800192a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800192c:	4a5a      	ldr	r2, [pc, #360]	; (8001a98 <HAL_GPIO_Init+0x2e4>)
 800192e:	f043 0301 	orr.w	r3, r3, #1
 8001932:	6613      	str	r3, [r2, #96]	; 0x60
 8001934:	4b58      	ldr	r3, [pc, #352]	; (8001a98 <HAL_GPIO_Init+0x2e4>)
 8001936:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001938:	f003 0301 	and.w	r3, r3, #1
 800193c:	60bb      	str	r3, [r7, #8]
 800193e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001940:	4a56      	ldr	r2, [pc, #344]	; (8001a9c <HAL_GPIO_Init+0x2e8>)
 8001942:	697b      	ldr	r3, [r7, #20]
 8001944:	089b      	lsrs	r3, r3, #2
 8001946:	3302      	adds	r3, #2
 8001948:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800194c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800194e:	697b      	ldr	r3, [r7, #20]
 8001950:	f003 0303 	and.w	r3, r3, #3
 8001954:	009b      	lsls	r3, r3, #2
 8001956:	220f      	movs	r2, #15
 8001958:	fa02 f303 	lsl.w	r3, r2, r3
 800195c:	43db      	mvns	r3, r3
 800195e:	693a      	ldr	r2, [r7, #16]
 8001960:	4013      	ands	r3, r2
 8001962:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800196a:	d01f      	beq.n	80019ac <HAL_GPIO_Init+0x1f8>
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	4a4c      	ldr	r2, [pc, #304]	; (8001aa0 <HAL_GPIO_Init+0x2ec>)
 8001970:	4293      	cmp	r3, r2
 8001972:	d019      	beq.n	80019a8 <HAL_GPIO_Init+0x1f4>
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	4a4b      	ldr	r2, [pc, #300]	; (8001aa4 <HAL_GPIO_Init+0x2f0>)
 8001978:	4293      	cmp	r3, r2
 800197a:	d013      	beq.n	80019a4 <HAL_GPIO_Init+0x1f0>
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	4a4a      	ldr	r2, [pc, #296]	; (8001aa8 <HAL_GPIO_Init+0x2f4>)
 8001980:	4293      	cmp	r3, r2
 8001982:	d00d      	beq.n	80019a0 <HAL_GPIO_Init+0x1ec>
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	4a49      	ldr	r2, [pc, #292]	; (8001aac <HAL_GPIO_Init+0x2f8>)
 8001988:	4293      	cmp	r3, r2
 800198a:	d007      	beq.n	800199c <HAL_GPIO_Init+0x1e8>
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	4a48      	ldr	r2, [pc, #288]	; (8001ab0 <HAL_GPIO_Init+0x2fc>)
 8001990:	4293      	cmp	r3, r2
 8001992:	d101      	bne.n	8001998 <HAL_GPIO_Init+0x1e4>
 8001994:	2305      	movs	r3, #5
 8001996:	e00a      	b.n	80019ae <HAL_GPIO_Init+0x1fa>
 8001998:	2306      	movs	r3, #6
 800199a:	e008      	b.n	80019ae <HAL_GPIO_Init+0x1fa>
 800199c:	2304      	movs	r3, #4
 800199e:	e006      	b.n	80019ae <HAL_GPIO_Init+0x1fa>
 80019a0:	2303      	movs	r3, #3
 80019a2:	e004      	b.n	80019ae <HAL_GPIO_Init+0x1fa>
 80019a4:	2302      	movs	r3, #2
 80019a6:	e002      	b.n	80019ae <HAL_GPIO_Init+0x1fa>
 80019a8:	2301      	movs	r3, #1
 80019aa:	e000      	b.n	80019ae <HAL_GPIO_Init+0x1fa>
 80019ac:	2300      	movs	r3, #0
 80019ae:	697a      	ldr	r2, [r7, #20]
 80019b0:	f002 0203 	and.w	r2, r2, #3
 80019b4:	0092      	lsls	r2, r2, #2
 80019b6:	4093      	lsls	r3, r2
 80019b8:	693a      	ldr	r2, [r7, #16]
 80019ba:	4313      	orrs	r3, r2
 80019bc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80019be:	4937      	ldr	r1, [pc, #220]	; (8001a9c <HAL_GPIO_Init+0x2e8>)
 80019c0:	697b      	ldr	r3, [r7, #20]
 80019c2:	089b      	lsrs	r3, r3, #2
 80019c4:	3302      	adds	r3, #2
 80019c6:	693a      	ldr	r2, [r7, #16]
 80019c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80019cc:	4b39      	ldr	r3, [pc, #228]	; (8001ab4 <HAL_GPIO_Init+0x300>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	43db      	mvns	r3, r3
 80019d6:	693a      	ldr	r2, [r7, #16]
 80019d8:	4013      	ands	r3, r2
 80019da:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d003      	beq.n	80019f0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80019e8:	693a      	ldr	r2, [r7, #16]
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	4313      	orrs	r3, r2
 80019ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80019f0:	4a30      	ldr	r2, [pc, #192]	; (8001ab4 <HAL_GPIO_Init+0x300>)
 80019f2:	693b      	ldr	r3, [r7, #16]
 80019f4:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80019f6:	4b2f      	ldr	r3, [pc, #188]	; (8001ab4 <HAL_GPIO_Init+0x300>)
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	43db      	mvns	r3, r3
 8001a00:	693a      	ldr	r2, [r7, #16]
 8001a02:	4013      	ands	r3, r2
 8001a04:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d003      	beq.n	8001a1a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001a12:	693a      	ldr	r2, [r7, #16]
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	4313      	orrs	r3, r2
 8001a18:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001a1a:	4a26      	ldr	r2, [pc, #152]	; (8001ab4 <HAL_GPIO_Init+0x300>)
 8001a1c:	693b      	ldr	r3, [r7, #16]
 8001a1e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001a20:	4b24      	ldr	r3, [pc, #144]	; (8001ab4 <HAL_GPIO_Init+0x300>)
 8001a22:	689b      	ldr	r3, [r3, #8]
 8001a24:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	43db      	mvns	r3, r3
 8001a2a:	693a      	ldr	r2, [r7, #16]
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d003      	beq.n	8001a44 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001a3c:	693a      	ldr	r2, [r7, #16]
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	4313      	orrs	r3, r2
 8001a42:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001a44:	4a1b      	ldr	r2, [pc, #108]	; (8001ab4 <HAL_GPIO_Init+0x300>)
 8001a46:	693b      	ldr	r3, [r7, #16]
 8001a48:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001a4a:	4b1a      	ldr	r3, [pc, #104]	; (8001ab4 <HAL_GPIO_Init+0x300>)
 8001a4c:	68db      	ldr	r3, [r3, #12]
 8001a4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	43db      	mvns	r3, r3
 8001a54:	693a      	ldr	r2, [r7, #16]
 8001a56:	4013      	ands	r3, r2
 8001a58:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d003      	beq.n	8001a6e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001a66:	693a      	ldr	r2, [r7, #16]
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001a6e:	4a11      	ldr	r2, [pc, #68]	; (8001ab4 <HAL_GPIO_Init+0x300>)
 8001a70:	693b      	ldr	r3, [r7, #16]
 8001a72:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	3301      	adds	r3, #1
 8001a78:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	681a      	ldr	r2, [r3, #0]
 8001a7e:	697b      	ldr	r3, [r7, #20]
 8001a80:	fa22 f303 	lsr.w	r3, r2, r3
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	f47f ae9d 	bne.w	80017c4 <HAL_GPIO_Init+0x10>
  }
}
 8001a8a:	bf00      	nop
 8001a8c:	371c      	adds	r7, #28
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a94:	4770      	bx	lr
 8001a96:	bf00      	nop
 8001a98:	40021000 	.word	0x40021000
 8001a9c:	40010000 	.word	0x40010000
 8001aa0:	48000400 	.word	0x48000400
 8001aa4:	48000800 	.word	0x48000800
 8001aa8:	48000c00 	.word	0x48000c00
 8001aac:	48001000 	.word	0x48001000
 8001ab0:	48001400 	.word	0x48001400
 8001ab4:	40010400 	.word	0x40010400

08001ab8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b083      	sub	sp, #12
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
 8001ac0:	460b      	mov	r3, r1
 8001ac2:	807b      	strh	r3, [r7, #2]
 8001ac4:	4613      	mov	r3, r2
 8001ac6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ac8:	787b      	ldrb	r3, [r7, #1]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d003      	beq.n	8001ad6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001ace:	887a      	ldrh	r2, [r7, #2]
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001ad4:	e002      	b.n	8001adc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001ad6:	887a      	ldrh	r2, [r7, #2]
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001adc:	bf00      	nop
 8001ade:	370c      	adds	r7, #12
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae6:	4770      	bx	lr

08001ae8 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b085      	sub	sp, #20
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
 8001af0:	460b      	mov	r3, r1
 8001af2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	695b      	ldr	r3, [r3, #20]
 8001af8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001afa:	887a      	ldrh	r2, [r7, #2]
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	4013      	ands	r3, r2
 8001b00:	041a      	lsls	r2, r3, #16
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	43d9      	mvns	r1, r3
 8001b06:	887b      	ldrh	r3, [r7, #2]
 8001b08:	400b      	ands	r3, r1
 8001b0a:	431a      	orrs	r2, r3
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	619a      	str	r2, [r3, #24]
}
 8001b10:	bf00      	nop
 8001b12:	3714      	adds	r7, #20
 8001b14:	46bd      	mov	sp, r7
 8001b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1a:	4770      	bx	lr

08001b1c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001b1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b1e:	b08b      	sub	sp, #44	; 0x2c
 8001b20:	af06      	add	r7, sp, #24
 8001b22:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d101      	bne.n	8001b2e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	e0d7      	b.n	8001cde <HAL_PCD_Init+0x1c2>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001b34:	b2db      	uxtb	r3, r3
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d106      	bne.n	8001b48 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001b42:	6878      	ldr	r0, [r7, #4]
 8001b44:	f007 fcbc 	bl	80094c0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2203      	movs	r2, #3
 8001b4c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4618      	mov	r0, r3
 8001b56:	f003 fe18 	bl	800578a <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	73fb      	strb	r3, [r7, #15]
 8001b5e:	e04c      	b.n	8001bfa <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001b60:	7bfb      	ldrb	r3, [r7, #15]
 8001b62:	6879      	ldr	r1, [r7, #4]
 8001b64:	1c5a      	adds	r2, r3, #1
 8001b66:	4613      	mov	r3, r2
 8001b68:	009b      	lsls	r3, r3, #2
 8001b6a:	4413      	add	r3, r2
 8001b6c:	00db      	lsls	r3, r3, #3
 8001b6e:	440b      	add	r3, r1
 8001b70:	3301      	adds	r3, #1
 8001b72:	2201      	movs	r2, #1
 8001b74:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001b76:	7bfb      	ldrb	r3, [r7, #15]
 8001b78:	6879      	ldr	r1, [r7, #4]
 8001b7a:	1c5a      	adds	r2, r3, #1
 8001b7c:	4613      	mov	r3, r2
 8001b7e:	009b      	lsls	r3, r3, #2
 8001b80:	4413      	add	r3, r2
 8001b82:	00db      	lsls	r3, r3, #3
 8001b84:	440b      	add	r3, r1
 8001b86:	7bfa      	ldrb	r2, [r7, #15]
 8001b88:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001b8a:	7bfa      	ldrb	r2, [r7, #15]
 8001b8c:	7bfb      	ldrb	r3, [r7, #15]
 8001b8e:	b298      	uxth	r0, r3
 8001b90:	6879      	ldr	r1, [r7, #4]
 8001b92:	4613      	mov	r3, r2
 8001b94:	009b      	lsls	r3, r3, #2
 8001b96:	4413      	add	r3, r2
 8001b98:	00db      	lsls	r3, r3, #3
 8001b9a:	440b      	add	r3, r1
 8001b9c:	3336      	adds	r3, #54	; 0x36
 8001b9e:	4602      	mov	r2, r0
 8001ba0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001ba2:	7bfb      	ldrb	r3, [r7, #15]
 8001ba4:	6879      	ldr	r1, [r7, #4]
 8001ba6:	1c5a      	adds	r2, r3, #1
 8001ba8:	4613      	mov	r3, r2
 8001baa:	009b      	lsls	r3, r3, #2
 8001bac:	4413      	add	r3, r2
 8001bae:	00db      	lsls	r3, r3, #3
 8001bb0:	440b      	add	r3, r1
 8001bb2:	3303      	adds	r3, #3
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001bb8:	7bfa      	ldrb	r2, [r7, #15]
 8001bba:	6879      	ldr	r1, [r7, #4]
 8001bbc:	4613      	mov	r3, r2
 8001bbe:	009b      	lsls	r3, r3, #2
 8001bc0:	4413      	add	r3, r2
 8001bc2:	00db      	lsls	r3, r3, #3
 8001bc4:	440b      	add	r3, r1
 8001bc6:	3338      	adds	r3, #56	; 0x38
 8001bc8:	2200      	movs	r2, #0
 8001bca:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001bcc:	7bfa      	ldrb	r2, [r7, #15]
 8001bce:	6879      	ldr	r1, [r7, #4]
 8001bd0:	4613      	mov	r3, r2
 8001bd2:	009b      	lsls	r3, r3, #2
 8001bd4:	4413      	add	r3, r2
 8001bd6:	00db      	lsls	r3, r3, #3
 8001bd8:	440b      	add	r3, r1
 8001bda:	333c      	adds	r3, #60	; 0x3c
 8001bdc:	2200      	movs	r2, #0
 8001bde:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001be0:	7bfa      	ldrb	r2, [r7, #15]
 8001be2:	6879      	ldr	r1, [r7, #4]
 8001be4:	4613      	mov	r3, r2
 8001be6:	009b      	lsls	r3, r3, #2
 8001be8:	4413      	add	r3, r2
 8001bea:	00db      	lsls	r3, r3, #3
 8001bec:	440b      	add	r3, r1
 8001bee:	3340      	adds	r3, #64	; 0x40
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001bf4:	7bfb      	ldrb	r3, [r7, #15]
 8001bf6:	3301      	adds	r3, #1
 8001bf8:	73fb      	strb	r3, [r7, #15]
 8001bfa:	7bfa      	ldrb	r2, [r7, #15]
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	429a      	cmp	r2, r3
 8001c02:	d3ad      	bcc.n	8001b60 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c04:	2300      	movs	r3, #0
 8001c06:	73fb      	strb	r3, [r7, #15]
 8001c08:	e044      	b.n	8001c94 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001c0a:	7bfa      	ldrb	r2, [r7, #15]
 8001c0c:	6879      	ldr	r1, [r7, #4]
 8001c0e:	4613      	mov	r3, r2
 8001c10:	009b      	lsls	r3, r3, #2
 8001c12:	4413      	add	r3, r2
 8001c14:	00db      	lsls	r3, r3, #3
 8001c16:	440b      	add	r3, r1
 8001c18:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001c20:	7bfa      	ldrb	r2, [r7, #15]
 8001c22:	6879      	ldr	r1, [r7, #4]
 8001c24:	4613      	mov	r3, r2
 8001c26:	009b      	lsls	r3, r3, #2
 8001c28:	4413      	add	r3, r2
 8001c2a:	00db      	lsls	r3, r3, #3
 8001c2c:	440b      	add	r3, r1
 8001c2e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001c32:	7bfa      	ldrb	r2, [r7, #15]
 8001c34:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001c36:	7bfa      	ldrb	r2, [r7, #15]
 8001c38:	6879      	ldr	r1, [r7, #4]
 8001c3a:	4613      	mov	r3, r2
 8001c3c:	009b      	lsls	r3, r3, #2
 8001c3e:	4413      	add	r3, r2
 8001c40:	00db      	lsls	r3, r3, #3
 8001c42:	440b      	add	r3, r1
 8001c44:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001c48:	2200      	movs	r2, #0
 8001c4a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001c4c:	7bfa      	ldrb	r2, [r7, #15]
 8001c4e:	6879      	ldr	r1, [r7, #4]
 8001c50:	4613      	mov	r3, r2
 8001c52:	009b      	lsls	r3, r3, #2
 8001c54:	4413      	add	r3, r2
 8001c56:	00db      	lsls	r3, r3, #3
 8001c58:	440b      	add	r3, r1
 8001c5a:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001c5e:	2200      	movs	r2, #0
 8001c60:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001c62:	7bfa      	ldrb	r2, [r7, #15]
 8001c64:	6879      	ldr	r1, [r7, #4]
 8001c66:	4613      	mov	r3, r2
 8001c68:	009b      	lsls	r3, r3, #2
 8001c6a:	4413      	add	r3, r2
 8001c6c:	00db      	lsls	r3, r3, #3
 8001c6e:	440b      	add	r3, r1
 8001c70:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001c74:	2200      	movs	r2, #0
 8001c76:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001c78:	7bfa      	ldrb	r2, [r7, #15]
 8001c7a:	6879      	ldr	r1, [r7, #4]
 8001c7c:	4613      	mov	r3, r2
 8001c7e:	009b      	lsls	r3, r3, #2
 8001c80:	4413      	add	r3, r2
 8001c82:	00db      	lsls	r3, r3, #3
 8001c84:	440b      	add	r3, r1
 8001c86:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c8e:	7bfb      	ldrb	r3, [r7, #15]
 8001c90:	3301      	adds	r3, #1
 8001c92:	73fb      	strb	r3, [r7, #15]
 8001c94:	7bfa      	ldrb	r2, [r7, #15]
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	429a      	cmp	r2, r3
 8001c9c:	d3b5      	bcc.n	8001c0a <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	603b      	str	r3, [r7, #0]
 8001ca4:	687e      	ldr	r6, [r7, #4]
 8001ca6:	466d      	mov	r5, sp
 8001ca8:	f106 0410 	add.w	r4, r6, #16
 8001cac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001cae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001cb0:	6823      	ldr	r3, [r4, #0]
 8001cb2:	602b      	str	r3, [r5, #0]
 8001cb4:	1d33      	adds	r3, r6, #4
 8001cb6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001cb8:	6838      	ldr	r0, [r7, #0]
 8001cba:	f003 fd81 	bl	80057c0 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2201      	movs	r2, #1
 8001cca:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	69db      	ldr	r3, [r3, #28]
 8001cd2:	2b01      	cmp	r3, #1
 8001cd4:	d102      	bne.n	8001cdc <HAL_PCD_Init+0x1c0>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001cd6:	6878      	ldr	r0, [r7, #4]
 8001cd8:	f001 fa5e 	bl	8003198 <HAL_PCDEx_ActivateLPM>
  }
  
  return HAL_OK;
 8001cdc:	2300      	movs	r3, #0
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	3714      	adds	r7, #20
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001ce6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001ce6:	b580      	push	{r7, lr}
 8001ce8:	b082      	sub	sp, #8
 8001cea:	af00      	add	r7, sp, #0
 8001cec:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001cf4:	2b01      	cmp	r3, #1
 8001cf6:	d101      	bne.n	8001cfc <HAL_PCD_Start+0x16>
 8001cf8:	2302      	movs	r3, #2
 8001cfa:	e012      	b.n	8001d22 <HAL_PCD_Start+0x3c>
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2201      	movs	r2, #1
 8001d00:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f003 fd27 	bl	800575c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4618      	mov	r0, r3
 8001d14:	f005 fd13 	bl	800773e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001d20:	2300      	movs	r3, #0
}
 8001d22:	4618      	mov	r0, r3
 8001d24:	3708      	adds	r7, #8
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}

08001d2a <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001d2a:	b580      	push	{r7, lr}
 8001d2c:	b082      	sub	sp, #8
 8001d2e:	af00      	add	r7, sp, #0
 8001d30:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4618      	mov	r0, r3
 8001d38:	f005 fd18 	bl	800776c <USB_ReadInterrupts>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001d42:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001d46:	d102      	bne.n	8001d4e <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001d48:	6878      	ldr	r0, [r7, #4]
 8001d4a:	f000 fb5b 	bl	8002404 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4618      	mov	r0, r3
 8001d54:	f005 fd0a 	bl	800776c <USB_ReadInterrupts>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d62:	d112      	bne.n	8001d8a <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001d6c:	b29a      	uxth	r2, r3
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d76:	b292      	uxth	r2, r2
 8001d78:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001d7c:	6878      	ldr	r0, [r7, #4]
 8001d7e:	f007 fc1a 	bl	80095b6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001d82:	2100      	movs	r1, #0
 8001d84:	6878      	ldr	r0, [r7, #4]
 8001d86:	f000 f91e 	bl	8001fc6 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f005 fcec 	bl	800776c <USB_ReadInterrupts>
 8001d94:	4603      	mov	r3, r0
 8001d96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d9a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001d9e:	d10b      	bne.n	8001db8 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001da8:	b29a      	uxth	r2, r3
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001db2:	b292      	uxth	r2, r2
 8001db4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f005 fcd5 	bl	800776c <USB_ReadInterrupts>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001dc8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001dcc:	d10b      	bne.n	8001de6 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001dd6:	b29a      	uxth	r2, r3
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001de0:	b292      	uxth	r2, r2
 8001de2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4618      	mov	r0, r3
 8001dec:	f005 fcbe 	bl	800776c <USB_ReadInterrupts>
 8001df0:	4603      	mov	r3, r0
 8001df2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001df6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001dfa:	d133      	bne.n	8001e64 <HAL_PCD_IRQHandler+0x13a>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001e04:	b29a      	uxth	r2, r3
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f022 0204 	bic.w	r2, r2, #4
 8001e0e:	b292      	uxth	r2, r2
 8001e10:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001e1c:	b29a      	uxth	r2, r3
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f022 0208 	bic.w	r2, r2, #8
 8001e26:	b292      	uxth	r2, r2
 8001e28:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8001e32:	2b01      	cmp	r3, #1
 8001e34:	d107      	bne.n	8001e46 <HAL_PCD_IRQHandler+0x11c>
    {
      hpcd->LPM_State = LPM_L0;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2200      	movs	r2, #0
 8001e3a:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001e3e:	2100      	movs	r1, #0
 8001e40:	6878      	ldr	r0, [r7, #4]
 8001e42:	f007 fdad 	bl	80099a0 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001e46:	6878      	ldr	r0, [r7, #4]
 8001e48:	f007 fbee 	bl	8009628 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e54:	b29a      	uxth	r2, r3
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001e5e:	b292      	uxth	r2, r2
 8001e60:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4618      	mov	r0, r3
 8001e6a:	f005 fc7f 	bl	800776c <USB_ReadInterrupts>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e74:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001e78:	d126      	bne.n	8001ec8 <HAL_PCD_IRQHandler+0x19e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001e82:	b29a      	uxth	r2, r3
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f042 0208 	orr.w	r2, r2, #8
 8001e8c:	b292      	uxth	r2, r2
 8001e8e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e9a:	b29a      	uxth	r2, r3
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ea4:	b292      	uxth	r2, r2
 8001ea6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001eb2:	b29a      	uxth	r2, r3
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f042 0204 	orr.w	r2, r2, #4
 8001ebc:	b292      	uxth	r2, r2
 8001ebe:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001ec2:	6878      	ldr	r0, [r7, #4]
 8001ec4:	f007 fb96 	bl	80095f4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  /* Handle LPM Interrupt */
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f005 fc4d 	bl	800776c <USB_ReadInterrupts>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ed8:	2b80      	cmp	r3, #128	; 0x80
 8001eda:	d13f      	bne.n	8001f5c <HAL_PCD_IRQHandler+0x232>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001ee4:	b29a      	uxth	r2, r3
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001eee:	b292      	uxth	r2, r2
 8001ef0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d12b      	bne.n	8001f56 <HAL_PCD_IRQHandler+0x22c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001f06:	b29a      	uxth	r2, r3
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f042 0204 	orr.w	r2, r2, #4
 8001f10:	b292      	uxth	r2, r2
 8001f12:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001f1e:	b29a      	uxth	r2, r3
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f042 0208 	orr.w	r2, r2, #8
 8001f28:	b292      	uxth	r2, r2
 8001f2a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2201      	movs	r2, #1
 8001f32:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001f3e:	b29b      	uxth	r3, r3
 8001f40:	089b      	lsrs	r3, r3, #2
 8001f42:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001f4c:	2101      	movs	r1, #1
 8001f4e:	6878      	ldr	r0, [r7, #4]
 8001f50:	f007 fd26 	bl	80099a0 <HAL_PCDEx_LPM_Callback>
 8001f54:	e002      	b.n	8001f5c <HAL_PCD_IRQHandler+0x232>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 8001f56:	6878      	ldr	r0, [r7, #4]
 8001f58:	f007 fb4c 	bl	80095f4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4618      	mov	r0, r3
 8001f62:	f005 fc03 	bl	800776c <USB_ReadInterrupts>
 8001f66:	4603      	mov	r3, r0
 8001f68:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f70:	d10e      	bne.n	8001f90 <HAL_PCD_IRQHandler+0x266>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f7a:	b29a      	uxth	r2, r3
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001f84:	b292      	uxth	r2, r2
 8001f86:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001f8a:	6878      	ldr	r0, [r7, #4]
 8001f8c:	f007 fb05 	bl	800959a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4618      	mov	r0, r3
 8001f96:	f005 fbe9 	bl	800776c <USB_ReadInterrupts>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fa0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001fa4:	d10b      	bne.n	8001fbe <HAL_PCD_IRQHandler+0x294>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001fae:	b29a      	uxth	r2, r3
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001fb8:	b292      	uxth	r2, r2
 8001fba:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8001fbe:	bf00      	nop
 8001fc0:	3708      	adds	r7, #8
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}

08001fc6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001fc6:	b580      	push	{r7, lr}
 8001fc8:	b082      	sub	sp, #8
 8001fca:	af00      	add	r7, sp, #0
 8001fcc:	6078      	str	r0, [r7, #4]
 8001fce:	460b      	mov	r3, r1
 8001fd0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001fd8:	2b01      	cmp	r3, #1
 8001fda:	d101      	bne.n	8001fe0 <HAL_PCD_SetAddress+0x1a>
 8001fdc:	2302      	movs	r3, #2
 8001fde:	e013      	b.n	8002008 <HAL_PCD_SetAddress+0x42>
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2201      	movs	r2, #1
 8001fe4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	78fa      	ldrb	r2, [r7, #3]
 8001fec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	78fa      	ldrb	r2, [r7, #3]
 8001ff6:	4611      	mov	r1, r2
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	f005 fb8c 	bl	8007716 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2200      	movs	r2, #0
 8002002:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002006:	2300      	movs	r3, #0
}
 8002008:	4618      	mov	r0, r3
 800200a:	3708      	adds	r7, #8
 800200c:	46bd      	mov	sp, r7
 800200e:	bd80      	pop	{r7, pc}

08002010 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b084      	sub	sp, #16
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
 8002018:	4608      	mov	r0, r1
 800201a:	4611      	mov	r1, r2
 800201c:	461a      	mov	r2, r3
 800201e:	4603      	mov	r3, r0
 8002020:	70fb      	strb	r3, [r7, #3]
 8002022:	460b      	mov	r3, r1
 8002024:	803b      	strh	r3, [r7, #0]
 8002026:	4613      	mov	r3, r2
 8002028:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800202a:	2300      	movs	r3, #0
 800202c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800202e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002032:	2b00      	cmp	r3, #0
 8002034:	da0e      	bge.n	8002054 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002036:	78fb      	ldrb	r3, [r7, #3]
 8002038:	f003 0307 	and.w	r3, r3, #7
 800203c:	1c5a      	adds	r2, r3, #1
 800203e:	4613      	mov	r3, r2
 8002040:	009b      	lsls	r3, r3, #2
 8002042:	4413      	add	r3, r2
 8002044:	00db      	lsls	r3, r3, #3
 8002046:	687a      	ldr	r2, [r7, #4]
 8002048:	4413      	add	r3, r2
 800204a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	2201      	movs	r2, #1
 8002050:	705a      	strb	r2, [r3, #1]
 8002052:	e00e      	b.n	8002072 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002054:	78fb      	ldrb	r3, [r7, #3]
 8002056:	f003 0207 	and.w	r2, r3, #7
 800205a:	4613      	mov	r3, r2
 800205c:	009b      	lsls	r3, r3, #2
 800205e:	4413      	add	r3, r2
 8002060:	00db      	lsls	r3, r3, #3
 8002062:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002066:	687a      	ldr	r2, [r7, #4]
 8002068:	4413      	add	r3, r2
 800206a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	2200      	movs	r2, #0
 8002070:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002072:	78fb      	ldrb	r3, [r7, #3]
 8002074:	f003 0307 	and.w	r3, r3, #7
 8002078:	b2da      	uxtb	r2, r3
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800207e:	883a      	ldrh	r2, [r7, #0]
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	78ba      	ldrb	r2, [r7, #2]
 8002088:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	785b      	ldrb	r3, [r3, #1]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d004      	beq.n	800209c <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	781b      	ldrb	r3, [r3, #0]
 8002096:	b29a      	uxth	r2, r3
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800209c:	78bb      	ldrb	r3, [r7, #2]
 800209e:	2b02      	cmp	r3, #2
 80020a0:	d102      	bne.n	80020a8 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	2200      	movs	r2, #0
 80020a6:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80020ae:	2b01      	cmp	r3, #1
 80020b0:	d101      	bne.n	80020b6 <HAL_PCD_EP_Open+0xa6>
 80020b2:	2302      	movs	r3, #2
 80020b4:	e00e      	b.n	80020d4 <HAL_PCD_EP_Open+0xc4>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2201      	movs	r2, #1
 80020ba:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	68f9      	ldr	r1, [r7, #12]
 80020c4:	4618      	mov	r0, r3
 80020c6:	f003 fb9d 	bl	8005804 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2200      	movs	r2, #0
 80020ce:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 80020d2:	7afb      	ldrb	r3, [r7, #11]
}
 80020d4:	4618      	mov	r0, r3
 80020d6:	3710      	adds	r7, #16
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd80      	pop	{r7, pc}

080020dc <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b084      	sub	sp, #16
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
 80020e4:	460b      	mov	r3, r1
 80020e6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80020e8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	da0e      	bge.n	800210e <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80020f0:	78fb      	ldrb	r3, [r7, #3]
 80020f2:	f003 0307 	and.w	r3, r3, #7
 80020f6:	1c5a      	adds	r2, r3, #1
 80020f8:	4613      	mov	r3, r2
 80020fa:	009b      	lsls	r3, r3, #2
 80020fc:	4413      	add	r3, r2
 80020fe:	00db      	lsls	r3, r3, #3
 8002100:	687a      	ldr	r2, [r7, #4]
 8002102:	4413      	add	r3, r2
 8002104:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	2201      	movs	r2, #1
 800210a:	705a      	strb	r2, [r3, #1]
 800210c:	e00e      	b.n	800212c <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800210e:	78fb      	ldrb	r3, [r7, #3]
 8002110:	f003 0207 	and.w	r2, r3, #7
 8002114:	4613      	mov	r3, r2
 8002116:	009b      	lsls	r3, r3, #2
 8002118:	4413      	add	r3, r2
 800211a:	00db      	lsls	r3, r3, #3
 800211c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002120:	687a      	ldr	r2, [r7, #4]
 8002122:	4413      	add	r3, r2
 8002124:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	2200      	movs	r2, #0
 800212a:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800212c:	78fb      	ldrb	r3, [r7, #3]
 800212e:	f003 0307 	and.w	r3, r3, #7
 8002132:	b2da      	uxtb	r2, r3
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800213e:	2b01      	cmp	r3, #1
 8002140:	d101      	bne.n	8002146 <HAL_PCD_EP_Close+0x6a>
 8002142:	2302      	movs	r3, #2
 8002144:	e00e      	b.n	8002164 <HAL_PCD_EP_Close+0x88>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2201      	movs	r2, #1
 800214a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	68f9      	ldr	r1, [r7, #12]
 8002154:	4618      	mov	r0, r3
 8002156:	f003 fec3 	bl	8005ee0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2200      	movs	r2, #0
 800215e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8002162:	2300      	movs	r3, #0
}
 8002164:	4618      	mov	r0, r3
 8002166:	3710      	adds	r7, #16
 8002168:	46bd      	mov	sp, r7
 800216a:	bd80      	pop	{r7, pc}

0800216c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b086      	sub	sp, #24
 8002170:	af00      	add	r7, sp, #0
 8002172:	60f8      	str	r0, [r7, #12]
 8002174:	607a      	str	r2, [r7, #4]
 8002176:	603b      	str	r3, [r7, #0]
 8002178:	460b      	mov	r3, r1
 800217a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800217c:	7afb      	ldrb	r3, [r7, #11]
 800217e:	f003 0207 	and.w	r2, r3, #7
 8002182:	4613      	mov	r3, r2
 8002184:	009b      	lsls	r3, r3, #2
 8002186:	4413      	add	r3, r2
 8002188:	00db      	lsls	r3, r3, #3
 800218a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800218e:	68fa      	ldr	r2, [r7, #12]
 8002190:	4413      	add	r3, r2
 8002192:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002194:	697b      	ldr	r3, [r7, #20]
 8002196:	687a      	ldr	r2, [r7, #4]
 8002198:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800219a:	697b      	ldr	r3, [r7, #20]
 800219c:	683a      	ldr	r2, [r7, #0]
 800219e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80021a0:	697b      	ldr	r3, [r7, #20]
 80021a2:	2200      	movs	r2, #0
 80021a4:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80021a6:	697b      	ldr	r3, [r7, #20]
 80021a8:	2200      	movs	r2, #0
 80021aa:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80021ac:	7afb      	ldrb	r3, [r7, #11]
 80021ae:	f003 0307 	and.w	r3, r3, #7
 80021b2:	b2da      	uxtb	r2, r3
 80021b4:	697b      	ldr	r3, [r7, #20]
 80021b6:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80021b8:	7afb      	ldrb	r3, [r7, #11]
 80021ba:	f003 0307 	and.w	r3, r3, #7
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d106      	bne.n	80021d0 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	6979      	ldr	r1, [r7, #20]
 80021c8:	4618      	mov	r0, r3
 80021ca:	f004 f876 	bl	80062ba <USB_EPStartXfer>
 80021ce:	e005      	b.n	80021dc <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	6979      	ldr	r1, [r7, #20]
 80021d6:	4618      	mov	r0, r3
 80021d8:	f004 f86f 	bl	80062ba <USB_EPStartXfer>
  }

  return HAL_OK;
 80021dc:	2300      	movs	r3, #0
}
 80021de:	4618      	mov	r0, r3
 80021e0:	3718      	adds	r7, #24
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}

080021e6 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80021e6:	b480      	push	{r7}
 80021e8:	b083      	sub	sp, #12
 80021ea:	af00      	add	r7, sp, #0
 80021ec:	6078      	str	r0, [r7, #4]
 80021ee:	460b      	mov	r3, r1
 80021f0:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80021f2:	78fb      	ldrb	r3, [r7, #3]
 80021f4:	f003 0207 	and.w	r2, r3, #7
 80021f8:	6879      	ldr	r1, [r7, #4]
 80021fa:	4613      	mov	r3, r2
 80021fc:	009b      	lsls	r3, r3, #2
 80021fe:	4413      	add	r3, r2
 8002200:	00db      	lsls	r3, r3, #3
 8002202:	440b      	add	r3, r1
 8002204:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8002208:	681b      	ldr	r3, [r3, #0]
}
 800220a:	4618      	mov	r0, r3
 800220c:	370c      	adds	r7, #12
 800220e:	46bd      	mov	sp, r7
 8002210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002214:	4770      	bx	lr

08002216 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002216:	b580      	push	{r7, lr}
 8002218:	b086      	sub	sp, #24
 800221a:	af00      	add	r7, sp, #0
 800221c:	60f8      	str	r0, [r7, #12]
 800221e:	607a      	str	r2, [r7, #4]
 8002220:	603b      	str	r3, [r7, #0]
 8002222:	460b      	mov	r3, r1
 8002224:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002226:	7afb      	ldrb	r3, [r7, #11]
 8002228:	f003 0307 	and.w	r3, r3, #7
 800222c:	1c5a      	adds	r2, r3, #1
 800222e:	4613      	mov	r3, r2
 8002230:	009b      	lsls	r3, r3, #2
 8002232:	4413      	add	r3, r2
 8002234:	00db      	lsls	r3, r3, #3
 8002236:	68fa      	ldr	r2, [r7, #12]
 8002238:	4413      	add	r3, r2
 800223a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800223c:	697b      	ldr	r3, [r7, #20]
 800223e:	687a      	ldr	r2, [r7, #4]
 8002240:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002242:	697b      	ldr	r3, [r7, #20]
 8002244:	683a      	ldr	r2, [r7, #0]
 8002246:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	2201      	movs	r2, #1
 800224c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8002250:	697b      	ldr	r3, [r7, #20]
 8002252:	683a      	ldr	r2, [r7, #0]
 8002254:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	2200      	movs	r2, #0
 800225a:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800225c:	697b      	ldr	r3, [r7, #20]
 800225e:	2201      	movs	r2, #1
 8002260:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002262:	7afb      	ldrb	r3, [r7, #11]
 8002264:	f003 0307 	and.w	r3, r3, #7
 8002268:	b2da      	uxtb	r2, r3
 800226a:	697b      	ldr	r3, [r7, #20]
 800226c:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800226e:	7afb      	ldrb	r3, [r7, #11]
 8002270:	f003 0307 	and.w	r3, r3, #7
 8002274:	2b00      	cmp	r3, #0
 8002276:	d106      	bne.n	8002286 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	6979      	ldr	r1, [r7, #20]
 800227e:	4618      	mov	r0, r3
 8002280:	f004 f81b 	bl	80062ba <USB_EPStartXfer>
 8002284:	e005      	b.n	8002292 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	6979      	ldr	r1, [r7, #20]
 800228c:	4618      	mov	r0, r3
 800228e:	f004 f814 	bl	80062ba <USB_EPStartXfer>
  }

  return HAL_OK;
 8002292:	2300      	movs	r3, #0
}
 8002294:	4618      	mov	r0, r3
 8002296:	3718      	adds	r7, #24
 8002298:	46bd      	mov	sp, r7
 800229a:	bd80      	pop	{r7, pc}

0800229c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b084      	sub	sp, #16
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
 80022a4:	460b      	mov	r3, r1
 80022a6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80022a8:	78fb      	ldrb	r3, [r7, #3]
 80022aa:	f003 0207 	and.w	r2, r3, #7
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	429a      	cmp	r2, r3
 80022b4:	d901      	bls.n	80022ba <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80022b6:	2301      	movs	r3, #1
 80022b8:	e04c      	b.n	8002354 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80022ba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	da0e      	bge.n	80022e0 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80022c2:	78fb      	ldrb	r3, [r7, #3]
 80022c4:	f003 0307 	and.w	r3, r3, #7
 80022c8:	1c5a      	adds	r2, r3, #1
 80022ca:	4613      	mov	r3, r2
 80022cc:	009b      	lsls	r3, r3, #2
 80022ce:	4413      	add	r3, r2
 80022d0:	00db      	lsls	r3, r3, #3
 80022d2:	687a      	ldr	r2, [r7, #4]
 80022d4:	4413      	add	r3, r2
 80022d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	2201      	movs	r2, #1
 80022dc:	705a      	strb	r2, [r3, #1]
 80022de:	e00c      	b.n	80022fa <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80022e0:	78fa      	ldrb	r2, [r7, #3]
 80022e2:	4613      	mov	r3, r2
 80022e4:	009b      	lsls	r3, r3, #2
 80022e6:	4413      	add	r3, r2
 80022e8:	00db      	lsls	r3, r3, #3
 80022ea:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80022ee:	687a      	ldr	r2, [r7, #4]
 80022f0:	4413      	add	r3, r2
 80022f2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	2200      	movs	r2, #0
 80022f8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	2201      	movs	r2, #1
 80022fe:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002300:	78fb      	ldrb	r3, [r7, #3]
 8002302:	f003 0307 	and.w	r3, r3, #7
 8002306:	b2da      	uxtb	r2, r3
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002312:	2b01      	cmp	r3, #1
 8002314:	d101      	bne.n	800231a <HAL_PCD_EP_SetStall+0x7e>
 8002316:	2302      	movs	r3, #2
 8002318:	e01c      	b.n	8002354 <HAL_PCD_EP_SetStall+0xb8>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2201      	movs	r2, #1
 800231e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	68f9      	ldr	r1, [r7, #12]
 8002328:	4618      	mov	r0, r3
 800232a:	f005 f8f5 	bl	8007518 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800232e:	78fb      	ldrb	r3, [r7, #3]
 8002330:	f003 0307 	and.w	r3, r3, #7
 8002334:	2b00      	cmp	r3, #0
 8002336:	d108      	bne.n	800234a <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681a      	ldr	r2, [r3, #0]
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8002342:	4619      	mov	r1, r3
 8002344:	4610      	mov	r0, r2
 8002346:	f005 fa21 	bl	800778c <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2200      	movs	r2, #0
 800234e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002352:	2300      	movs	r3, #0
}
 8002354:	4618      	mov	r0, r3
 8002356:	3710      	adds	r7, #16
 8002358:	46bd      	mov	sp, r7
 800235a:	bd80      	pop	{r7, pc}

0800235c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b084      	sub	sp, #16
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
 8002364:	460b      	mov	r3, r1
 8002366:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002368:	78fb      	ldrb	r3, [r7, #3]
 800236a:	f003 020f 	and.w	r2, r3, #15
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	429a      	cmp	r2, r3
 8002374:	d901      	bls.n	800237a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002376:	2301      	movs	r3, #1
 8002378:	e040      	b.n	80023fc <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800237a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800237e:	2b00      	cmp	r3, #0
 8002380:	da0e      	bge.n	80023a0 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002382:	78fb      	ldrb	r3, [r7, #3]
 8002384:	f003 0307 	and.w	r3, r3, #7
 8002388:	1c5a      	adds	r2, r3, #1
 800238a:	4613      	mov	r3, r2
 800238c:	009b      	lsls	r3, r3, #2
 800238e:	4413      	add	r3, r2
 8002390:	00db      	lsls	r3, r3, #3
 8002392:	687a      	ldr	r2, [r7, #4]
 8002394:	4413      	add	r3, r2
 8002396:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	2201      	movs	r2, #1
 800239c:	705a      	strb	r2, [r3, #1]
 800239e:	e00e      	b.n	80023be <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80023a0:	78fb      	ldrb	r3, [r7, #3]
 80023a2:	f003 0207 	and.w	r2, r3, #7
 80023a6:	4613      	mov	r3, r2
 80023a8:	009b      	lsls	r3, r3, #2
 80023aa:	4413      	add	r3, r2
 80023ac:	00db      	lsls	r3, r3, #3
 80023ae:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80023b2:	687a      	ldr	r2, [r7, #4]
 80023b4:	4413      	add	r3, r2
 80023b6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	2200      	movs	r2, #0
 80023bc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	2200      	movs	r2, #0
 80023c2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80023c4:	78fb      	ldrb	r3, [r7, #3]
 80023c6:	f003 0307 	and.w	r3, r3, #7
 80023ca:	b2da      	uxtb	r2, r3
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80023d6:	2b01      	cmp	r3, #1
 80023d8:	d101      	bne.n	80023de <HAL_PCD_EP_ClrStall+0x82>
 80023da:	2302      	movs	r3, #2
 80023dc:	e00e      	b.n	80023fc <HAL_PCD_EP_ClrStall+0xa0>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2201      	movs	r2, #1
 80023e2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	68f9      	ldr	r1, [r7, #12]
 80023ec:	4618      	mov	r0, r3
 80023ee:	f005 f8e4 	bl	80075ba <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2200      	movs	r2, #0
 80023f6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80023fa:	2300      	movs	r3, #0
}
 80023fc:	4618      	mov	r0, r3
 80023fe:	3710      	adds	r7, #16
 8002400:	46bd      	mov	sp, r7
 8002402:	bd80      	pop	{r7, pc}

08002404 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b08e      	sub	sp, #56	; 0x38
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800240c:	e2d1      	b.n	80029b2 <PCD_EP_ISR_Handler+0x5ae>
  {
    wIstr = hpcd->Instance->ISTR;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002416:	85fb      	strh	r3, [r7, #46]	; 0x2e
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002418:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800241a:	b2db      	uxtb	r3, r3
 800241c:	f003 030f 	and.w	r3, r3, #15
 8002420:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8002424:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002428:	2b00      	cmp	r3, #0
 800242a:	f040 8152 	bne.w	80026d2 <PCD_EP_ISR_Handler+0x2ce>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800242e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002430:	f003 0310 	and.w	r3, r3, #16
 8002434:	2b00      	cmp	r3, #0
 8002436:	d150      	bne.n	80024da <PCD_EP_ISR_Handler+0xd6>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	881b      	ldrh	r3, [r3, #0]
 800243e:	b29b      	uxth	r3, r3
 8002440:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002444:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002448:	81fb      	strh	r3, [r7, #14]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681a      	ldr	r2, [r3, #0]
 800244e:	89fb      	ldrh	r3, [r7, #14]
 8002450:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002454:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002458:	b29b      	uxth	r3, r3
 800245a:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	3328      	adds	r3, #40	; 0x28
 8002460:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800246a:	b29b      	uxth	r3, r3
 800246c:	461a      	mov	r2, r3
 800246e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002470:	781b      	ldrb	r3, [r3, #0]
 8002472:	00db      	lsls	r3, r3, #3
 8002474:	4413      	add	r3, r2
 8002476:	687a      	ldr	r2, [r7, #4]
 8002478:	6812      	ldr	r2, [r2, #0]
 800247a:	4413      	add	r3, r2
 800247c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002480:	881b      	ldrh	r3, [r3, #0]
 8002482:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002488:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800248a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800248c:	695a      	ldr	r2, [r3, #20]
 800248e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002490:	69db      	ldr	r3, [r3, #28]
 8002492:	441a      	add	r2, r3
 8002494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002496:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002498:	2100      	movs	r1, #0
 800249a:	6878      	ldr	r0, [r7, #4]
 800249c:	f007 f863 	bl	8009566 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80024a6:	b2db      	uxtb	r3, r3
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	f000 8282 	beq.w	80029b2 <PCD_EP_ISR_Handler+0x5ae>
 80024ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b0:	699b      	ldr	r3, [r3, #24]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	f040 827d 	bne.w	80029b2 <PCD_EP_ISR_Handler+0x5ae>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80024be:	b2db      	uxtb	r3, r3
 80024c0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80024c4:	b2da      	uxtb	r2, r3
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	b292      	uxth	r2, r2
 80024cc:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2200      	movs	r2, #0
 80024d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80024d8:	e26b      	b.n	80029b2 <PCD_EP_ISR_Handler+0x5ae>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80024e0:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	881b      	ldrh	r3, [r3, #0]
 80024e8:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80024ea:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80024ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d032      	beq.n	800255a <PCD_EP_ISR_Handler+0x156>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80024fc:	b29b      	uxth	r3, r3
 80024fe:	461a      	mov	r2, r3
 8002500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002502:	781b      	ldrb	r3, [r3, #0]
 8002504:	00db      	lsls	r3, r3, #3
 8002506:	4413      	add	r3, r2
 8002508:	687a      	ldr	r2, [r7, #4]
 800250a:	6812      	ldr	r2, [r2, #0]
 800250c:	4413      	add	r3, r2
 800250e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002512:	881b      	ldrh	r3, [r3, #0]
 8002514:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800251a:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6818      	ldr	r0, [r3, #0]
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8002526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002528:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800252a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800252c:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800252e:	b29b      	uxth	r3, r3
 8002530:	f005 f979 	bl	8007826 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	881b      	ldrh	r3, [r3, #0]
 800253a:	b29a      	uxth	r2, r3
 800253c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002540:	4013      	ands	r3, r2
 8002542:	823b      	strh	r3, [r7, #16]
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	8a3a      	ldrh	r2, [r7, #16]
 800254a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800254e:	b292      	uxth	r2, r2
 8002550:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002552:	6878      	ldr	r0, [r7, #4]
 8002554:	f006 ffda 	bl	800950c <HAL_PCD_SetupStageCallback>
 8002558:	e22b      	b.n	80029b2 <PCD_EP_ISR_Handler+0x5ae>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800255a:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800255e:	2b00      	cmp	r3, #0
 8002560:	f280 8227 	bge.w	80029b2 <PCD_EP_ISR_Handler+0x5ae>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	881b      	ldrh	r3, [r3, #0]
 800256a:	b29a      	uxth	r2, r3
 800256c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002570:	4013      	ands	r3, r2
 8002572:	83bb      	strh	r3, [r7, #28]
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	8bba      	ldrh	r2, [r7, #28]
 800257a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800257e:	b292      	uxth	r2, r2
 8002580:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800258a:	b29b      	uxth	r3, r3
 800258c:	461a      	mov	r2, r3
 800258e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002590:	781b      	ldrb	r3, [r3, #0]
 8002592:	00db      	lsls	r3, r3, #3
 8002594:	4413      	add	r3, r2
 8002596:	687a      	ldr	r2, [r7, #4]
 8002598:	6812      	ldr	r2, [r2, #0]
 800259a:	4413      	add	r3, r2
 800259c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80025a0:	881b      	ldrh	r3, [r3, #0]
 80025a2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80025a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a8:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80025aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ac:	69db      	ldr	r3, [r3, #28]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d019      	beq.n	80025e6 <PCD_EP_ISR_Handler+0x1e2>
 80025b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025b4:	695b      	ldr	r3, [r3, #20]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d015      	beq.n	80025e6 <PCD_EP_ISR_Handler+0x1e2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6818      	ldr	r0, [r3, #0]
 80025be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c0:	6959      	ldr	r1, [r3, #20]
 80025c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c4:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80025c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c8:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80025ca:	b29b      	uxth	r3, r3
 80025cc:	f005 f92b 	bl	8007826 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80025d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d2:	695a      	ldr	r2, [r3, #20]
 80025d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d6:	69db      	ldr	r3, [r3, #28]
 80025d8:	441a      	add	r2, r3
 80025da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025dc:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80025de:	2100      	movs	r1, #0
 80025e0:	6878      	ldr	r0, [r7, #4]
 80025e2:	f006 ffa5 	bl	8009530 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	61bb      	str	r3, [r7, #24]
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025f4:	b29b      	uxth	r3, r3
 80025f6:	461a      	mov	r2, r3
 80025f8:	69bb      	ldr	r3, [r7, #24]
 80025fa:	4413      	add	r3, r2
 80025fc:	61bb      	str	r3, [r7, #24]
 80025fe:	69bb      	ldr	r3, [r7, #24]
 8002600:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002604:	617b      	str	r3, [r7, #20]
 8002606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002608:	691b      	ldr	r3, [r3, #16]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d112      	bne.n	8002634 <PCD_EP_ISR_Handler+0x230>
 800260e:	697b      	ldr	r3, [r7, #20]
 8002610:	881b      	ldrh	r3, [r3, #0]
 8002612:	b29b      	uxth	r3, r3
 8002614:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002618:	b29a      	uxth	r2, r3
 800261a:	697b      	ldr	r3, [r7, #20]
 800261c:	801a      	strh	r2, [r3, #0]
 800261e:	697b      	ldr	r3, [r7, #20]
 8002620:	881b      	ldrh	r3, [r3, #0]
 8002622:	b29b      	uxth	r3, r3
 8002624:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002628:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800262c:	b29a      	uxth	r2, r3
 800262e:	697b      	ldr	r3, [r7, #20]
 8002630:	801a      	strh	r2, [r3, #0]
 8002632:	e02f      	b.n	8002694 <PCD_EP_ISR_Handler+0x290>
 8002634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002636:	691b      	ldr	r3, [r3, #16]
 8002638:	2b3e      	cmp	r3, #62	; 0x3e
 800263a:	d813      	bhi.n	8002664 <PCD_EP_ISR_Handler+0x260>
 800263c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800263e:	691b      	ldr	r3, [r3, #16]
 8002640:	085b      	lsrs	r3, r3, #1
 8002642:	633b      	str	r3, [r7, #48]	; 0x30
 8002644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002646:	691b      	ldr	r3, [r3, #16]
 8002648:	f003 0301 	and.w	r3, r3, #1
 800264c:	2b00      	cmp	r3, #0
 800264e:	d002      	beq.n	8002656 <PCD_EP_ISR_Handler+0x252>
 8002650:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002652:	3301      	adds	r3, #1
 8002654:	633b      	str	r3, [r7, #48]	; 0x30
 8002656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002658:	b29b      	uxth	r3, r3
 800265a:	029b      	lsls	r3, r3, #10
 800265c:	b29a      	uxth	r2, r3
 800265e:	697b      	ldr	r3, [r7, #20]
 8002660:	801a      	strh	r2, [r3, #0]
 8002662:	e017      	b.n	8002694 <PCD_EP_ISR_Handler+0x290>
 8002664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002666:	691b      	ldr	r3, [r3, #16]
 8002668:	095b      	lsrs	r3, r3, #5
 800266a:	633b      	str	r3, [r7, #48]	; 0x30
 800266c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800266e:	691b      	ldr	r3, [r3, #16]
 8002670:	f003 031f 	and.w	r3, r3, #31
 8002674:	2b00      	cmp	r3, #0
 8002676:	d102      	bne.n	800267e <PCD_EP_ISR_Handler+0x27a>
 8002678:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800267a:	3b01      	subs	r3, #1
 800267c:	633b      	str	r3, [r7, #48]	; 0x30
 800267e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002680:	b29b      	uxth	r3, r3
 8002682:	029b      	lsls	r3, r3, #10
 8002684:	b29b      	uxth	r3, r3
 8002686:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800268a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800268e:	b29a      	uxth	r2, r3
 8002690:	697b      	ldr	r3, [r7, #20]
 8002692:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	881b      	ldrh	r3, [r3, #0]
 800269a:	b29b      	uxth	r3, r3
 800269c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80026a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026a4:	827b      	strh	r3, [r7, #18]
 80026a6:	8a7b      	ldrh	r3, [r7, #18]
 80026a8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80026ac:	827b      	strh	r3, [r7, #18]
 80026ae:	8a7b      	ldrh	r3, [r7, #18]
 80026b0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80026b4:	827b      	strh	r3, [r7, #18]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681a      	ldr	r2, [r3, #0]
 80026ba:	8a7b      	ldrh	r3, [r7, #18]
 80026bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80026c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80026c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80026c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80026cc:	b29b      	uxth	r3, r3
 80026ce:	8013      	strh	r3, [r2, #0]
 80026d0:	e16f      	b.n	80029b2 <PCD_EP_ISR_Handler+0x5ae>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	461a      	mov	r2, r3
 80026d8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80026dc:	009b      	lsls	r3, r3, #2
 80026de:	4413      	add	r3, r2
 80026e0:	881b      	ldrh	r3, [r3, #0]
 80026e2:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80026e4:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	f280 80e4 	bge.w	80028b6 <PCD_EP_ISR_Handler+0x4b2>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	461a      	mov	r2, r3
 80026f4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80026f8:	009b      	lsls	r3, r3, #2
 80026fa:	4413      	add	r3, r2
 80026fc:	881b      	ldrh	r3, [r3, #0]
 80026fe:	b29a      	uxth	r2, r3
 8002700:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002704:	4013      	ands	r3, r2
 8002706:	853b      	strh	r3, [r7, #40]	; 0x28
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	461a      	mov	r2, r3
 800270e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002712:	009b      	lsls	r3, r3, #2
 8002714:	4413      	add	r3, r2
 8002716:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002718:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800271c:	b292      	uxth	r2, r2
 800271e:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002720:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8002724:	4613      	mov	r3, r2
 8002726:	009b      	lsls	r3, r3, #2
 8002728:	4413      	add	r3, r2
 800272a:	00db      	lsls	r3, r3, #3
 800272c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002730:	687a      	ldr	r2, [r7, #4]
 8002732:	4413      	add	r3, r2
 8002734:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002738:	7b1b      	ldrb	r3, [r3, #12]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d120      	bne.n	8002780 <PCD_EP_ISR_Handler+0x37c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002746:	b29b      	uxth	r3, r3
 8002748:	461a      	mov	r2, r3
 800274a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800274c:	781b      	ldrb	r3, [r3, #0]
 800274e:	00db      	lsls	r3, r3, #3
 8002750:	4413      	add	r3, r2
 8002752:	687a      	ldr	r2, [r7, #4]
 8002754:	6812      	ldr	r2, [r2, #0]
 8002756:	4413      	add	r3, r2
 8002758:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800275c:	881b      	ldrh	r3, [r3, #0]
 800275e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002762:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8002764:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002766:	2b00      	cmp	r3, #0
 8002768:	f000 8083 	beq.w	8002872 <PCD_EP_ISR_Handler+0x46e>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6818      	ldr	r0, [r3, #0]
 8002770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002772:	6959      	ldr	r1, [r3, #20]
 8002774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002776:	88da      	ldrh	r2, [r3, #6]
 8002778:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800277a:	f005 f854 	bl	8007826 <USB_ReadPMA>
 800277e:	e078      	b.n	8002872 <PCD_EP_ISR_Handler+0x46e>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002782:	78db      	ldrb	r3, [r3, #3]
 8002784:	2b02      	cmp	r3, #2
 8002786:	d108      	bne.n	800279a <PCD_EP_ISR_Handler+0x396>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002788:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800278a:	461a      	mov	r2, r3
 800278c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800278e:	6878      	ldr	r0, [r7, #4]
 8002790:	f000 f91d 	bl	80029ce <HAL_PCD_EP_DB_Receive>
 8002794:	4603      	mov	r3, r0
 8002796:	86fb      	strh	r3, [r7, #54]	; 0x36
 8002798:	e06b      	b.n	8002872 <PCD_EP_ISR_Handler+0x46e>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	461a      	mov	r2, r3
 80027a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a2:	781b      	ldrb	r3, [r3, #0]
 80027a4:	009b      	lsls	r3, r3, #2
 80027a6:	4413      	add	r3, r2
 80027a8:	881b      	ldrh	r3, [r3, #0]
 80027aa:	b29b      	uxth	r3, r3
 80027ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80027b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027b4:	847b      	strh	r3, [r7, #34]	; 0x22
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	461a      	mov	r2, r3
 80027bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027be:	781b      	ldrb	r3, [r3, #0]
 80027c0:	009b      	lsls	r3, r3, #2
 80027c2:	441a      	add	r2, r3
 80027c4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80027c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80027ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80027ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80027d2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80027d6:	b29b      	uxth	r3, r3
 80027d8:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	461a      	mov	r2, r3
 80027e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e2:	781b      	ldrb	r3, [r3, #0]
 80027e4:	009b      	lsls	r3, r3, #2
 80027e6:	4413      	add	r3, r2
 80027e8:	881b      	ldrh	r3, [r3, #0]
 80027ea:	b29b      	uxth	r3, r3
 80027ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d01f      	beq.n	8002834 <PCD_EP_ISR_Handler+0x430>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80027fc:	b29b      	uxth	r3, r3
 80027fe:	461a      	mov	r2, r3
 8002800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002802:	781b      	ldrb	r3, [r3, #0]
 8002804:	00db      	lsls	r3, r3, #3
 8002806:	4413      	add	r3, r2
 8002808:	687a      	ldr	r2, [r7, #4]
 800280a:	6812      	ldr	r2, [r2, #0]
 800280c:	4413      	add	r3, r2
 800280e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002812:	881b      	ldrh	r3, [r3, #0]
 8002814:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002818:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 800281a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800281c:	2b00      	cmp	r3, #0
 800281e:	d028      	beq.n	8002872 <PCD_EP_ISR_Handler+0x46e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6818      	ldr	r0, [r3, #0]
 8002824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002826:	6959      	ldr	r1, [r3, #20]
 8002828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800282a:	891a      	ldrh	r2, [r3, #8]
 800282c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800282e:	f004 fffa 	bl	8007826 <USB_ReadPMA>
 8002832:	e01e      	b.n	8002872 <PCD_EP_ISR_Handler+0x46e>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800283c:	b29b      	uxth	r3, r3
 800283e:	461a      	mov	r2, r3
 8002840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002842:	781b      	ldrb	r3, [r3, #0]
 8002844:	00db      	lsls	r3, r3, #3
 8002846:	4413      	add	r3, r2
 8002848:	687a      	ldr	r2, [r7, #4]
 800284a:	6812      	ldr	r2, [r2, #0]
 800284c:	4413      	add	r3, r2
 800284e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002852:	881b      	ldrh	r3, [r3, #0]
 8002854:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002858:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 800285a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800285c:	2b00      	cmp	r3, #0
 800285e:	d008      	beq.n	8002872 <PCD_EP_ISR_Handler+0x46e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6818      	ldr	r0, [r3, #0]
 8002864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002866:	6959      	ldr	r1, [r3, #20]
 8002868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800286a:	895a      	ldrh	r2, [r3, #10]
 800286c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800286e:	f004 ffda 	bl	8007826 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002874:	69da      	ldr	r2, [r3, #28]
 8002876:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002878:	441a      	add	r2, r3
 800287a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800287c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800287e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002880:	695a      	ldr	r2, [r3, #20]
 8002882:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002884:	441a      	add	r2, r3
 8002886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002888:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800288a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800288c:	699b      	ldr	r3, [r3, #24]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d004      	beq.n	800289c <PCD_EP_ISR_Handler+0x498>
 8002892:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8002894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002896:	691b      	ldr	r3, [r3, #16]
 8002898:	429a      	cmp	r2, r3
 800289a:	d206      	bcs.n	80028aa <PCD_EP_ISR_Handler+0x4a6>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800289c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800289e:	781b      	ldrb	r3, [r3, #0]
 80028a0:	4619      	mov	r1, r3
 80028a2:	6878      	ldr	r0, [r7, #4]
 80028a4:	f006 fe44 	bl	8009530 <HAL_PCD_DataOutStageCallback>
 80028a8:	e005      	b.n	80028b6 <PCD_EP_ISR_Handler+0x4b2>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80028b0:	4618      	mov	r0, r3
 80028b2:	f003 fd02 	bl	80062ba <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80028b6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80028b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d078      	beq.n	80029b2 <PCD_EP_ISR_Handler+0x5ae>
      {
        ep = &hpcd->IN_ep[epindex];
 80028c0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80028c4:	1c5a      	adds	r2, r3, #1
 80028c6:	4613      	mov	r3, r2
 80028c8:	009b      	lsls	r3, r3, #2
 80028ca:	4413      	add	r3, r2
 80028cc:	00db      	lsls	r3, r3, #3
 80028ce:	687a      	ldr	r2, [r7, #4]
 80028d0:	4413      	add	r3, r2
 80028d2:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	461a      	mov	r2, r3
 80028da:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80028de:	009b      	lsls	r3, r3, #2
 80028e0:	4413      	add	r3, r2
 80028e2:	881b      	ldrh	r3, [r3, #0]
 80028e4:	b29b      	uxth	r3, r3
 80028e6:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80028ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028ee:	843b      	strh	r3, [r7, #32]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	461a      	mov	r2, r3
 80028f6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80028fa:	009b      	lsls	r3, r3, #2
 80028fc:	441a      	add	r2, r3
 80028fe:	8c3b      	ldrh	r3, [r7, #32]
 8002900:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002904:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002908:	b29b      	uxth	r3, r3
 800290a:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 800290c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800290e:	78db      	ldrb	r3, [r3, #3]
 8002910:	2b02      	cmp	r3, #2
 8002912:	d108      	bne.n	8002926 <PCD_EP_ISR_Handler+0x522>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002916:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 8002918:	2b02      	cmp	r3, #2
 800291a:	d144      	bne.n	80029a6 <PCD_EP_ISR_Handler+0x5a2>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 800291c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800291e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002922:	2b00      	cmp	r3, #0
 8002924:	d13f      	bne.n	80029a6 <PCD_EP_ISR_Handler+0x5a2>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800292e:	b29b      	uxth	r3, r3
 8002930:	461a      	mov	r2, r3
 8002932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002934:	781b      	ldrb	r3, [r3, #0]
 8002936:	00db      	lsls	r3, r3, #3
 8002938:	4413      	add	r3, r2
 800293a:	687a      	ldr	r2, [r7, #4]
 800293c:	6812      	ldr	r2, [r2, #0]
 800293e:	4413      	add	r3, r2
 8002940:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002944:	881b      	ldrh	r3, [r3, #0]
 8002946:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800294a:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 800294c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800294e:	699a      	ldr	r2, [r3, #24]
 8002950:	8bfb      	ldrh	r3, [r7, #30]
 8002952:	429a      	cmp	r2, r3
 8002954:	d906      	bls.n	8002964 <PCD_EP_ISR_Handler+0x560>
          {
            ep->xfer_len -= TxByteNbre;
 8002956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002958:	699a      	ldr	r2, [r3, #24]
 800295a:	8bfb      	ldrh	r3, [r7, #30]
 800295c:	1ad2      	subs	r2, r2, r3
 800295e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002960:	619a      	str	r2, [r3, #24]
 8002962:	e002      	b.n	800296a <PCD_EP_ISR_Handler+0x566>
          }
          else
          {
            ep->xfer_len = 0U;
 8002964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002966:	2200      	movs	r2, #0
 8002968:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 800296a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800296c:	699b      	ldr	r3, [r3, #24]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d106      	bne.n	8002980 <PCD_EP_ISR_Handler+0x57c>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002974:	781b      	ldrb	r3, [r3, #0]
 8002976:	4619      	mov	r1, r3
 8002978:	6878      	ldr	r0, [r7, #4]
 800297a:	f006 fdf4 	bl	8009566 <HAL_PCD_DataInStageCallback>
 800297e:	e018      	b.n	80029b2 <PCD_EP_ISR_Handler+0x5ae>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8002980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002982:	695a      	ldr	r2, [r3, #20]
 8002984:	8bfb      	ldrh	r3, [r7, #30]
 8002986:	441a      	add	r2, r3
 8002988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800298a:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 800298c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800298e:	69da      	ldr	r2, [r3, #28]
 8002990:	8bfb      	ldrh	r3, [r7, #30]
 8002992:	441a      	add	r2, r3
 8002994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002996:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800299e:	4618      	mov	r0, r3
 80029a0:	f003 fc8b 	bl	80062ba <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 80029a4:	e005      	b.n	80029b2 <PCD_EP_ISR_Handler+0x5ae>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80029a6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80029a8:	461a      	mov	r2, r3
 80029aa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80029ac:	6878      	ldr	r0, [r7, #4]
 80029ae:	f000 f917 	bl	8002be0 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80029ba:	b29b      	uxth	r3, r3
 80029bc:	b21b      	sxth	r3, r3
 80029be:	2b00      	cmp	r3, #0
 80029c0:	f6ff ad25 	blt.w	800240e <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80029c4:	2300      	movs	r3, #0
}
 80029c6:	4618      	mov	r0, r3
 80029c8:	3738      	adds	r7, #56	; 0x38
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}

080029ce <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80029ce:	b580      	push	{r7, lr}
 80029d0:	b088      	sub	sp, #32
 80029d2:	af00      	add	r7, sp, #0
 80029d4:	60f8      	str	r0, [r7, #12]
 80029d6:	60b9      	str	r1, [r7, #8]
 80029d8:	4613      	mov	r3, r2
 80029da:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80029dc:	88fb      	ldrh	r3, [r7, #6]
 80029de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d07c      	beq.n	8002ae0 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80029ee:	b29b      	uxth	r3, r3
 80029f0:	461a      	mov	r2, r3
 80029f2:	68bb      	ldr	r3, [r7, #8]
 80029f4:	781b      	ldrb	r3, [r3, #0]
 80029f6:	00db      	lsls	r3, r3, #3
 80029f8:	4413      	add	r3, r2
 80029fa:	68fa      	ldr	r2, [r7, #12]
 80029fc:	6812      	ldr	r2, [r2, #0]
 80029fe:	4413      	add	r3, r2
 8002a00:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002a04:	881b      	ldrh	r3, [r3, #0]
 8002a06:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a0a:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002a0c:	68bb      	ldr	r3, [r7, #8]
 8002a0e:	699a      	ldr	r2, [r3, #24]
 8002a10:	8b7b      	ldrh	r3, [r7, #26]
 8002a12:	429a      	cmp	r2, r3
 8002a14:	d306      	bcc.n	8002a24 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8002a16:	68bb      	ldr	r3, [r7, #8]
 8002a18:	699a      	ldr	r2, [r3, #24]
 8002a1a:	8b7b      	ldrh	r3, [r7, #26]
 8002a1c:	1ad2      	subs	r2, r2, r3
 8002a1e:	68bb      	ldr	r3, [r7, #8]
 8002a20:	619a      	str	r2, [r3, #24]
 8002a22:	e002      	b.n	8002a2a <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8002a24:	68bb      	ldr	r3, [r7, #8]
 8002a26:	2200      	movs	r2, #0
 8002a28:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002a2a:	68bb      	ldr	r3, [r7, #8]
 8002a2c:	699b      	ldr	r3, [r3, #24]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d123      	bne.n	8002a7a <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	461a      	mov	r2, r3
 8002a38:	68bb      	ldr	r3, [r7, #8]
 8002a3a:	781b      	ldrb	r3, [r3, #0]
 8002a3c:	009b      	lsls	r3, r3, #2
 8002a3e:	4413      	add	r3, r2
 8002a40:	881b      	ldrh	r3, [r3, #0]
 8002a42:	b29b      	uxth	r3, r3
 8002a44:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002a48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a4c:	833b      	strh	r3, [r7, #24]
 8002a4e:	8b3b      	ldrh	r3, [r7, #24]
 8002a50:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002a54:	833b      	strh	r3, [r7, #24]
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	461a      	mov	r2, r3
 8002a5c:	68bb      	ldr	r3, [r7, #8]
 8002a5e:	781b      	ldrb	r3, [r3, #0]
 8002a60:	009b      	lsls	r3, r3, #2
 8002a62:	441a      	add	r2, r3
 8002a64:	8b3b      	ldrh	r3, [r7, #24]
 8002a66:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002a6a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002a6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a76:	b29b      	uxth	r3, r3
 8002a78:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002a7a:	88fb      	ldrh	r3, [r7, #6]
 8002a7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d01f      	beq.n	8002ac4 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	461a      	mov	r2, r3
 8002a8a:	68bb      	ldr	r3, [r7, #8]
 8002a8c:	781b      	ldrb	r3, [r3, #0]
 8002a8e:	009b      	lsls	r3, r3, #2
 8002a90:	4413      	add	r3, r2
 8002a92:	881b      	ldrh	r3, [r3, #0]
 8002a94:	b29b      	uxth	r3, r3
 8002a96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a9e:	82fb      	strh	r3, [r7, #22]
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	461a      	mov	r2, r3
 8002aa6:	68bb      	ldr	r3, [r7, #8]
 8002aa8:	781b      	ldrb	r3, [r3, #0]
 8002aaa:	009b      	lsls	r3, r3, #2
 8002aac:	441a      	add	r2, r3
 8002aae:	8afb      	ldrh	r3, [r7, #22]
 8002ab0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002ab4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002ab8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002abc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002ac0:	b29b      	uxth	r3, r3
 8002ac2:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002ac4:	8b7b      	ldrh	r3, [r7, #26]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	f000 8085 	beq.w	8002bd6 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	6818      	ldr	r0, [r3, #0]
 8002ad0:	68bb      	ldr	r3, [r7, #8]
 8002ad2:	6959      	ldr	r1, [r3, #20]
 8002ad4:	68bb      	ldr	r3, [r7, #8]
 8002ad6:	891a      	ldrh	r2, [r3, #8]
 8002ad8:	8b7b      	ldrh	r3, [r7, #26]
 8002ada:	f004 fea4 	bl	8007826 <USB_ReadPMA>
 8002ade:	e07a      	b.n	8002bd6 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ae8:	b29b      	uxth	r3, r3
 8002aea:	461a      	mov	r2, r3
 8002aec:	68bb      	ldr	r3, [r7, #8]
 8002aee:	781b      	ldrb	r3, [r3, #0]
 8002af0:	00db      	lsls	r3, r3, #3
 8002af2:	4413      	add	r3, r2
 8002af4:	68fa      	ldr	r2, [r7, #12]
 8002af6:	6812      	ldr	r2, [r2, #0]
 8002af8:	4413      	add	r3, r2
 8002afa:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002afe:	881b      	ldrh	r3, [r3, #0]
 8002b00:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b04:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002b06:	68bb      	ldr	r3, [r7, #8]
 8002b08:	699a      	ldr	r2, [r3, #24]
 8002b0a:	8b7b      	ldrh	r3, [r7, #26]
 8002b0c:	429a      	cmp	r2, r3
 8002b0e:	d306      	bcc.n	8002b1e <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8002b10:	68bb      	ldr	r3, [r7, #8]
 8002b12:	699a      	ldr	r2, [r3, #24]
 8002b14:	8b7b      	ldrh	r3, [r7, #26]
 8002b16:	1ad2      	subs	r2, r2, r3
 8002b18:	68bb      	ldr	r3, [r7, #8]
 8002b1a:	619a      	str	r2, [r3, #24]
 8002b1c:	e002      	b.n	8002b24 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8002b1e:	68bb      	ldr	r3, [r7, #8]
 8002b20:	2200      	movs	r2, #0
 8002b22:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	699b      	ldr	r3, [r3, #24]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d123      	bne.n	8002b74 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	461a      	mov	r2, r3
 8002b32:	68bb      	ldr	r3, [r7, #8]
 8002b34:	781b      	ldrb	r3, [r3, #0]
 8002b36:	009b      	lsls	r3, r3, #2
 8002b38:	4413      	add	r3, r2
 8002b3a:	881b      	ldrh	r3, [r3, #0]
 8002b3c:	b29b      	uxth	r3, r3
 8002b3e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002b42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b46:	83fb      	strh	r3, [r7, #30]
 8002b48:	8bfb      	ldrh	r3, [r7, #30]
 8002b4a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002b4e:	83fb      	strh	r3, [r7, #30]
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	461a      	mov	r2, r3
 8002b56:	68bb      	ldr	r3, [r7, #8]
 8002b58:	781b      	ldrb	r3, [r3, #0]
 8002b5a:	009b      	lsls	r3, r3, #2
 8002b5c:	441a      	add	r2, r3
 8002b5e:	8bfb      	ldrh	r3, [r7, #30]
 8002b60:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002b64:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002b68:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b70:	b29b      	uxth	r3, r3
 8002b72:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002b74:	88fb      	ldrh	r3, [r7, #6]
 8002b76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d11f      	bne.n	8002bbe <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	461a      	mov	r2, r3
 8002b84:	68bb      	ldr	r3, [r7, #8]
 8002b86:	781b      	ldrb	r3, [r3, #0]
 8002b88:	009b      	lsls	r3, r3, #2
 8002b8a:	4413      	add	r3, r2
 8002b8c:	881b      	ldrh	r3, [r3, #0]
 8002b8e:	b29b      	uxth	r3, r3
 8002b90:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b98:	83bb      	strh	r3, [r7, #28]
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	461a      	mov	r2, r3
 8002ba0:	68bb      	ldr	r3, [r7, #8]
 8002ba2:	781b      	ldrb	r3, [r3, #0]
 8002ba4:	009b      	lsls	r3, r3, #2
 8002ba6:	441a      	add	r2, r3
 8002ba8:	8bbb      	ldrh	r3, [r7, #28]
 8002baa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002bae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002bb2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002bb6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002bba:	b29b      	uxth	r3, r3
 8002bbc:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002bbe:	8b7b      	ldrh	r3, [r7, #26]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d008      	beq.n	8002bd6 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	6818      	ldr	r0, [r3, #0]
 8002bc8:	68bb      	ldr	r3, [r7, #8]
 8002bca:	6959      	ldr	r1, [r3, #20]
 8002bcc:	68bb      	ldr	r3, [r7, #8]
 8002bce:	895a      	ldrh	r2, [r3, #10]
 8002bd0:	8b7b      	ldrh	r3, [r7, #26]
 8002bd2:	f004 fe28 	bl	8007826 <USB_ReadPMA>
    }
  }

  return count;
 8002bd6:	8b7b      	ldrh	r3, [r7, #26]
}
 8002bd8:	4618      	mov	r0, r3
 8002bda:	3720      	adds	r7, #32
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bd80      	pop	{r7, pc}

08002be0 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b092      	sub	sp, #72	; 0x48
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	60f8      	str	r0, [r7, #12]
 8002be8:	60b9      	str	r1, [r7, #8]
 8002bea:	4613      	mov	r3, r2
 8002bec:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002bee:	88fb      	ldrh	r3, [r7, #6]
 8002bf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	f000 8130 	beq.w	8002e5a <HAL_PCD_EP_DB_Transmit+0x27a>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c02:	b29b      	uxth	r3, r3
 8002c04:	461a      	mov	r2, r3
 8002c06:	68bb      	ldr	r3, [r7, #8]
 8002c08:	781b      	ldrb	r3, [r3, #0]
 8002c0a:	00db      	lsls	r3, r3, #3
 8002c0c:	4413      	add	r3, r2
 8002c0e:	68fa      	ldr	r2, [r7, #12]
 8002c10:	6812      	ldr	r2, [r2, #0]
 8002c12:	4413      	add	r3, r2
 8002c14:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002c18:	881b      	ldrh	r3, [r3, #0]
 8002c1a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c1e:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len > TxByteNbre)
 8002c20:	68bb      	ldr	r3, [r7, #8]
 8002c22:	699a      	ldr	r2, [r3, #24]
 8002c24:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002c26:	429a      	cmp	r2, r3
 8002c28:	d906      	bls.n	8002c38 <HAL_PCD_EP_DB_Transmit+0x58>
    {
      ep->xfer_len -= TxByteNbre;
 8002c2a:	68bb      	ldr	r3, [r7, #8]
 8002c2c:	699a      	ldr	r2, [r3, #24]
 8002c2e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002c30:	1ad2      	subs	r2, r2, r3
 8002c32:	68bb      	ldr	r3, [r7, #8]
 8002c34:	619a      	str	r2, [r3, #24]
 8002c36:	e002      	b.n	8002c3e <HAL_PCD_EP_DB_Transmit+0x5e>
    }
    else
    {
      ep->xfer_len = 0U;
 8002c38:	68bb      	ldr	r3, [r7, #8]
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002c3e:	68bb      	ldr	r3, [r7, #8]
 8002c40:	699b      	ldr	r3, [r3, #24]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d12c      	bne.n	8002ca0 <HAL_PCD_EP_DB_Transmit+0xc0>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002c46:	68bb      	ldr	r3, [r7, #8]
 8002c48:	781b      	ldrb	r3, [r3, #0]
 8002c4a:	4619      	mov	r1, r3
 8002c4c:	68f8      	ldr	r0, [r7, #12]
 8002c4e:	f006 fc8a 	bl	8009566 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002c52:	88fb      	ldrh	r3, [r7, #6]
 8002c54:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	f000 822d 	beq.w	80030b8 <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	461a      	mov	r2, r3
 8002c64:	68bb      	ldr	r3, [r7, #8]
 8002c66:	781b      	ldrb	r3, [r3, #0]
 8002c68:	009b      	lsls	r3, r3, #2
 8002c6a:	4413      	add	r3, r2
 8002c6c:	881b      	ldrh	r3, [r3, #0]
 8002c6e:	b29b      	uxth	r3, r3
 8002c70:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c78:	827b      	strh	r3, [r7, #18]
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	461a      	mov	r2, r3
 8002c80:	68bb      	ldr	r3, [r7, #8]
 8002c82:	781b      	ldrb	r3, [r3, #0]
 8002c84:	009b      	lsls	r3, r3, #2
 8002c86:	441a      	add	r2, r3
 8002c88:	8a7b      	ldrh	r3, [r7, #18]
 8002c8a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002c8e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002c92:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002c96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c9a:	b29b      	uxth	r3, r3
 8002c9c:	8013      	strh	r3, [r2, #0]
 8002c9e:	e20b      	b.n	80030b8 <HAL_PCD_EP_DB_Transmit+0x4d8>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002ca0:	88fb      	ldrh	r3, [r7, #6]
 8002ca2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d01f      	beq.n	8002cea <HAL_PCD_EP_DB_Transmit+0x10a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	461a      	mov	r2, r3
 8002cb0:	68bb      	ldr	r3, [r7, #8]
 8002cb2:	781b      	ldrb	r3, [r3, #0]
 8002cb4:	009b      	lsls	r3, r3, #2
 8002cb6:	4413      	add	r3, r2
 8002cb8:	881b      	ldrh	r3, [r3, #0]
 8002cba:	b29b      	uxth	r3, r3
 8002cbc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002cc0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cc4:	84bb      	strh	r3, [r7, #36]	; 0x24
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	461a      	mov	r2, r3
 8002ccc:	68bb      	ldr	r3, [r7, #8]
 8002cce:	781b      	ldrb	r3, [r3, #0]
 8002cd0:	009b      	lsls	r3, r3, #2
 8002cd2:	441a      	add	r2, r3
 8002cd4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002cd6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002cda:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002cde:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002ce2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ce6:	b29b      	uxth	r3, r3
 8002ce8:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002cea:	68bb      	ldr	r3, [r7, #8]
 8002cec:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002cf0:	2b01      	cmp	r3, #1
 8002cf2:	f040 81e1 	bne.w	80030b8 <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        ep->xfer_buff += TxByteNbre;
 8002cf6:	68bb      	ldr	r3, [r7, #8]
 8002cf8:	695a      	ldr	r2, [r3, #20]
 8002cfa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002cfc:	441a      	add	r2, r3
 8002cfe:	68bb      	ldr	r3, [r7, #8]
 8002d00:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002d02:	68bb      	ldr	r3, [r7, #8]
 8002d04:	69da      	ldr	r2, [r3, #28]
 8002d06:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002d08:	441a      	add	r2, r3
 8002d0a:	68bb      	ldr	r3, [r7, #8]
 8002d0c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002d0e:	68bb      	ldr	r3, [r7, #8]
 8002d10:	6a1a      	ldr	r2, [r3, #32]
 8002d12:	68bb      	ldr	r3, [r7, #8]
 8002d14:	691b      	ldr	r3, [r3, #16]
 8002d16:	429a      	cmp	r2, r3
 8002d18:	d309      	bcc.n	8002d2e <HAL_PCD_EP_DB_Transmit+0x14e>
        {
          len = ep->maxpacket;
 8002d1a:	68bb      	ldr	r3, [r7, #8]
 8002d1c:	691b      	ldr	r3, [r3, #16]
 8002d1e:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 8002d20:	68bb      	ldr	r3, [r7, #8]
 8002d22:	6a1a      	ldr	r2, [r3, #32]
 8002d24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d26:	1ad2      	subs	r2, r2, r3
 8002d28:	68bb      	ldr	r3, [r7, #8]
 8002d2a:	621a      	str	r2, [r3, #32]
 8002d2c:	e014      	b.n	8002d58 <HAL_PCD_EP_DB_Transmit+0x178>
        }
        else if (ep->xfer_len_db == 0U)
 8002d2e:	68bb      	ldr	r3, [r7, #8]
 8002d30:	6a1b      	ldr	r3, [r3, #32]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d106      	bne.n	8002d44 <HAL_PCD_EP_DB_Transmit+0x164>
        {
          len = TxByteNbre;
 8002d36:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002d38:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 8002d3a:	68bb      	ldr	r3, [r7, #8]
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002d42:	e009      	b.n	8002d58 <HAL_PCD_EP_DB_Transmit+0x178>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002d44:	68bb      	ldr	r3, [r7, #8]
 8002d46:	2200      	movs	r2, #0
 8002d48:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8002d4c:	68bb      	ldr	r3, [r7, #8]
 8002d4e:	6a1b      	ldr	r3, [r3, #32]
 8002d50:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 8002d52:	68bb      	ldr	r3, [r7, #8]
 8002d54:	2200      	movs	r2, #0
 8002d56:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002d58:	68bb      	ldr	r3, [r7, #8]
 8002d5a:	785b      	ldrb	r3, [r3, #1]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d155      	bne.n	8002e0c <HAL_PCD_EP_DB_Transmit+0x22c>
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	61bb      	str	r3, [r7, #24]
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d6e:	b29b      	uxth	r3, r3
 8002d70:	461a      	mov	r2, r3
 8002d72:	69bb      	ldr	r3, [r7, #24]
 8002d74:	4413      	add	r3, r2
 8002d76:	61bb      	str	r3, [r7, #24]
 8002d78:	68bb      	ldr	r3, [r7, #8]
 8002d7a:	781b      	ldrb	r3, [r3, #0]
 8002d7c:	00da      	lsls	r2, r3, #3
 8002d7e:	69bb      	ldr	r3, [r7, #24]
 8002d80:	4413      	add	r3, r2
 8002d82:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002d86:	617b      	str	r3, [r7, #20]
 8002d88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d112      	bne.n	8002db4 <HAL_PCD_EP_DB_Transmit+0x1d4>
 8002d8e:	697b      	ldr	r3, [r7, #20]
 8002d90:	881b      	ldrh	r3, [r3, #0]
 8002d92:	b29b      	uxth	r3, r3
 8002d94:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002d98:	b29a      	uxth	r2, r3
 8002d9a:	697b      	ldr	r3, [r7, #20]
 8002d9c:	801a      	strh	r2, [r3, #0]
 8002d9e:	697b      	ldr	r3, [r7, #20]
 8002da0:	881b      	ldrh	r3, [r3, #0]
 8002da2:	b29b      	uxth	r3, r3
 8002da4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002da8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002dac:	b29a      	uxth	r2, r3
 8002dae:	697b      	ldr	r3, [r7, #20]
 8002db0:	801a      	strh	r2, [r3, #0]
 8002db2:	e047      	b.n	8002e44 <HAL_PCD_EP_DB_Transmit+0x264>
 8002db4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002db6:	2b3e      	cmp	r3, #62	; 0x3e
 8002db8:	d811      	bhi.n	8002dde <HAL_PCD_EP_DB_Transmit+0x1fe>
 8002dba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dbc:	085b      	lsrs	r3, r3, #1
 8002dbe:	62bb      	str	r3, [r7, #40]	; 0x28
 8002dc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dc2:	f003 0301 	and.w	r3, r3, #1
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d002      	beq.n	8002dd0 <HAL_PCD_EP_DB_Transmit+0x1f0>
 8002dca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dcc:	3301      	adds	r3, #1
 8002dce:	62bb      	str	r3, [r7, #40]	; 0x28
 8002dd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dd2:	b29b      	uxth	r3, r3
 8002dd4:	029b      	lsls	r3, r3, #10
 8002dd6:	b29a      	uxth	r2, r3
 8002dd8:	697b      	ldr	r3, [r7, #20]
 8002dda:	801a      	strh	r2, [r3, #0]
 8002ddc:	e032      	b.n	8002e44 <HAL_PCD_EP_DB_Transmit+0x264>
 8002dde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002de0:	095b      	lsrs	r3, r3, #5
 8002de2:	62bb      	str	r3, [r7, #40]	; 0x28
 8002de4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002de6:	f003 031f 	and.w	r3, r3, #31
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d102      	bne.n	8002df4 <HAL_PCD_EP_DB_Transmit+0x214>
 8002dee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002df0:	3b01      	subs	r3, #1
 8002df2:	62bb      	str	r3, [r7, #40]	; 0x28
 8002df4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002df6:	b29b      	uxth	r3, r3
 8002df8:	029b      	lsls	r3, r3, #10
 8002dfa:	b29b      	uxth	r3, r3
 8002dfc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002e00:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002e04:	b29a      	uxth	r2, r3
 8002e06:	697b      	ldr	r3, [r7, #20]
 8002e08:	801a      	strh	r2, [r3, #0]
 8002e0a:	e01b      	b.n	8002e44 <HAL_PCD_EP_DB_Transmit+0x264>
 8002e0c:	68bb      	ldr	r3, [r7, #8]
 8002e0e:	785b      	ldrb	r3, [r3, #1]
 8002e10:	2b01      	cmp	r3, #1
 8002e12:	d117      	bne.n	8002e44 <HAL_PCD_EP_DB_Transmit+0x264>
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	623b      	str	r3, [r7, #32]
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e22:	b29b      	uxth	r3, r3
 8002e24:	461a      	mov	r2, r3
 8002e26:	6a3b      	ldr	r3, [r7, #32]
 8002e28:	4413      	add	r3, r2
 8002e2a:	623b      	str	r3, [r7, #32]
 8002e2c:	68bb      	ldr	r3, [r7, #8]
 8002e2e:	781b      	ldrb	r3, [r3, #0]
 8002e30:	00da      	lsls	r2, r3, #3
 8002e32:	6a3b      	ldr	r3, [r7, #32]
 8002e34:	4413      	add	r3, r2
 8002e36:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002e3a:	61fb      	str	r3, [r7, #28]
 8002e3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e3e:	b29a      	uxth	r2, r3
 8002e40:	69fb      	ldr	r3, [r7, #28]
 8002e42:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	6818      	ldr	r0, [r3, #0]
 8002e48:	68bb      	ldr	r3, [r7, #8]
 8002e4a:	6959      	ldr	r1, [r3, #20]
 8002e4c:	68bb      	ldr	r3, [r7, #8]
 8002e4e:	891a      	ldrh	r2, [r3, #8]
 8002e50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e52:	b29b      	uxth	r3, r3
 8002e54:	f004 fca6 	bl	80077a4 <USB_WritePMA>
 8002e58:	e12e      	b.n	80030b8 <HAL_PCD_EP_DB_Transmit+0x4d8>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e62:	b29b      	uxth	r3, r3
 8002e64:	461a      	mov	r2, r3
 8002e66:	68bb      	ldr	r3, [r7, #8]
 8002e68:	781b      	ldrb	r3, [r3, #0]
 8002e6a:	00db      	lsls	r3, r3, #3
 8002e6c:	4413      	add	r3, r2
 8002e6e:	68fa      	ldr	r2, [r7, #12]
 8002e70:	6812      	ldr	r2, [r2, #0]
 8002e72:	4413      	add	r3, r2
 8002e74:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002e78:	881b      	ldrh	r3, [r3, #0]
 8002e7a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002e7e:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len >= TxByteNbre)
 8002e80:	68bb      	ldr	r3, [r7, #8]
 8002e82:	699a      	ldr	r2, [r3, #24]
 8002e84:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002e86:	429a      	cmp	r2, r3
 8002e88:	d306      	bcc.n	8002e98 <HAL_PCD_EP_DB_Transmit+0x2b8>
    {
      ep->xfer_len -= TxByteNbre;
 8002e8a:	68bb      	ldr	r3, [r7, #8]
 8002e8c:	699a      	ldr	r2, [r3, #24]
 8002e8e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002e90:	1ad2      	subs	r2, r2, r3
 8002e92:	68bb      	ldr	r3, [r7, #8]
 8002e94:	619a      	str	r2, [r3, #24]
 8002e96:	e002      	b.n	8002e9e <HAL_PCD_EP_DB_Transmit+0x2be>
    }
    else
    {
      ep->xfer_len = 0U;
 8002e98:	68bb      	ldr	r3, [r7, #8]
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002e9e:	68bb      	ldr	r3, [r7, #8]
 8002ea0:	699b      	ldr	r3, [r3, #24]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d12c      	bne.n	8002f00 <HAL_PCD_EP_DB_Transmit+0x320>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002ea6:	68bb      	ldr	r3, [r7, #8]
 8002ea8:	781b      	ldrb	r3, [r3, #0]
 8002eaa:	4619      	mov	r1, r3
 8002eac:	68f8      	ldr	r0, [r7, #12]
 8002eae:	f006 fb5a 	bl	8009566 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002eb2:	88fb      	ldrh	r3, [r7, #6]
 8002eb4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	f040 80fd 	bne.w	80030b8 <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	461a      	mov	r2, r3
 8002ec4:	68bb      	ldr	r3, [r7, #8]
 8002ec6:	781b      	ldrb	r3, [r3, #0]
 8002ec8:	009b      	lsls	r3, r3, #2
 8002eca:	4413      	add	r3, r2
 8002ecc:	881b      	ldrh	r3, [r3, #0]
 8002ece:	b29b      	uxth	r3, r3
 8002ed0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ed4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ed8:	84fb      	strh	r3, [r7, #38]	; 0x26
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	461a      	mov	r2, r3
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	781b      	ldrb	r3, [r3, #0]
 8002ee4:	009b      	lsls	r3, r3, #2
 8002ee6:	441a      	add	r2, r3
 8002ee8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002eea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002eee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002ef2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002ef6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002efa:	b29b      	uxth	r3, r3
 8002efc:	8013      	strh	r3, [r2, #0]
 8002efe:	e0db      	b.n	80030b8 <HAL_PCD_EP_DB_Transmit+0x4d8>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002f00:	88fb      	ldrh	r3, [r7, #6]
 8002f02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d11f      	bne.n	8002f4a <HAL_PCD_EP_DB_Transmit+0x36a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	461a      	mov	r2, r3
 8002f10:	68bb      	ldr	r3, [r7, #8]
 8002f12:	781b      	ldrb	r3, [r3, #0]
 8002f14:	009b      	lsls	r3, r3, #2
 8002f16:	4413      	add	r3, r2
 8002f18:	881b      	ldrh	r3, [r3, #0]
 8002f1a:	b29b      	uxth	r3, r3
 8002f1c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f24:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	461a      	mov	r2, r3
 8002f2c:	68bb      	ldr	r3, [r7, #8]
 8002f2e:	781b      	ldrb	r3, [r3, #0]
 8002f30:	009b      	lsls	r3, r3, #2
 8002f32:	441a      	add	r2, r3
 8002f34:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8002f36:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002f3a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002f3e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002f42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f46:	b29b      	uxth	r3, r3
 8002f48:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002f4a:	68bb      	ldr	r3, [r7, #8]
 8002f4c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002f50:	2b01      	cmp	r3, #1
 8002f52:	f040 80b1 	bne.w	80030b8 <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        ep->xfer_buff += TxByteNbre;
 8002f56:	68bb      	ldr	r3, [r7, #8]
 8002f58:	695a      	ldr	r2, [r3, #20]
 8002f5a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002f5c:	441a      	add	r2, r3
 8002f5e:	68bb      	ldr	r3, [r7, #8]
 8002f60:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002f62:	68bb      	ldr	r3, [r7, #8]
 8002f64:	69da      	ldr	r2, [r3, #28]
 8002f66:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002f68:	441a      	add	r2, r3
 8002f6a:	68bb      	ldr	r3, [r7, #8]
 8002f6c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002f6e:	68bb      	ldr	r3, [r7, #8]
 8002f70:	6a1a      	ldr	r2, [r3, #32]
 8002f72:	68bb      	ldr	r3, [r7, #8]
 8002f74:	691b      	ldr	r3, [r3, #16]
 8002f76:	429a      	cmp	r2, r3
 8002f78:	d309      	bcc.n	8002f8e <HAL_PCD_EP_DB_Transmit+0x3ae>
        {
          len = ep->maxpacket;
 8002f7a:	68bb      	ldr	r3, [r7, #8]
 8002f7c:	691b      	ldr	r3, [r3, #16]
 8002f7e:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 8002f80:	68bb      	ldr	r3, [r7, #8]
 8002f82:	6a1a      	ldr	r2, [r3, #32]
 8002f84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f86:	1ad2      	subs	r2, r2, r3
 8002f88:	68bb      	ldr	r3, [r7, #8]
 8002f8a:	621a      	str	r2, [r3, #32]
 8002f8c:	e014      	b.n	8002fb8 <HAL_PCD_EP_DB_Transmit+0x3d8>
        }
        else if (ep->xfer_len_db == 0U)
 8002f8e:	68bb      	ldr	r3, [r7, #8]
 8002f90:	6a1b      	ldr	r3, [r3, #32]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d106      	bne.n	8002fa4 <HAL_PCD_EP_DB_Transmit+0x3c4>
        {
          len = TxByteNbre;
 8002f96:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002f98:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 8002f9a:	68bb      	ldr	r3, [r7, #8]
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002fa2:	e009      	b.n	8002fb8 <HAL_PCD_EP_DB_Transmit+0x3d8>
        }
        else
        {
          len = ep->xfer_len_db;
 8002fa4:	68bb      	ldr	r3, [r7, #8]
 8002fa6:	6a1b      	ldr	r3, [r3, #32]
 8002fa8:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 8002faa:	68bb      	ldr	r3, [r7, #8]
 8002fac:	2200      	movs	r2, #0
 8002fae:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002fb0:	68bb      	ldr	r3, [r7, #8]
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	637b      	str	r3, [r7, #52]	; 0x34
 8002fbe:	68bb      	ldr	r3, [r7, #8]
 8002fc0:	785b      	ldrb	r3, [r3, #1]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d155      	bne.n	8003072 <HAL_PCD_EP_DB_Transmit+0x492>
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	647b      	str	r3, [r7, #68]	; 0x44
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002fd4:	b29b      	uxth	r3, r3
 8002fd6:	461a      	mov	r2, r3
 8002fd8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002fda:	4413      	add	r3, r2
 8002fdc:	647b      	str	r3, [r7, #68]	; 0x44
 8002fde:	68bb      	ldr	r3, [r7, #8]
 8002fe0:	781b      	ldrb	r3, [r3, #0]
 8002fe2:	00da      	lsls	r2, r3, #3
 8002fe4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002fe6:	4413      	add	r3, r2
 8002fe8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002fec:	643b      	str	r3, [r7, #64]	; 0x40
 8002fee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d112      	bne.n	800301a <HAL_PCD_EP_DB_Transmit+0x43a>
 8002ff4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ff6:	881b      	ldrh	r3, [r3, #0]
 8002ff8:	b29b      	uxth	r3, r3
 8002ffa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002ffe:	b29a      	uxth	r2, r3
 8003000:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003002:	801a      	strh	r2, [r3, #0]
 8003004:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003006:	881b      	ldrh	r3, [r3, #0]
 8003008:	b29b      	uxth	r3, r3
 800300a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800300e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003012:	b29a      	uxth	r2, r3
 8003014:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003016:	801a      	strh	r2, [r3, #0]
 8003018:	e044      	b.n	80030a4 <HAL_PCD_EP_DB_Transmit+0x4c4>
 800301a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800301c:	2b3e      	cmp	r3, #62	; 0x3e
 800301e:	d811      	bhi.n	8003044 <HAL_PCD_EP_DB_Transmit+0x464>
 8003020:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003022:	085b      	lsrs	r3, r3, #1
 8003024:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003026:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003028:	f003 0301 	and.w	r3, r3, #1
 800302c:	2b00      	cmp	r3, #0
 800302e:	d002      	beq.n	8003036 <HAL_PCD_EP_DB_Transmit+0x456>
 8003030:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003032:	3301      	adds	r3, #1
 8003034:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003036:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003038:	b29b      	uxth	r3, r3
 800303a:	029b      	lsls	r3, r3, #10
 800303c:	b29a      	uxth	r2, r3
 800303e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003040:	801a      	strh	r2, [r3, #0]
 8003042:	e02f      	b.n	80030a4 <HAL_PCD_EP_DB_Transmit+0x4c4>
 8003044:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003046:	095b      	lsrs	r3, r3, #5
 8003048:	63fb      	str	r3, [r7, #60]	; 0x3c
 800304a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800304c:	f003 031f 	and.w	r3, r3, #31
 8003050:	2b00      	cmp	r3, #0
 8003052:	d102      	bne.n	800305a <HAL_PCD_EP_DB_Transmit+0x47a>
 8003054:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003056:	3b01      	subs	r3, #1
 8003058:	63fb      	str	r3, [r7, #60]	; 0x3c
 800305a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800305c:	b29b      	uxth	r3, r3
 800305e:	029b      	lsls	r3, r3, #10
 8003060:	b29b      	uxth	r3, r3
 8003062:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003066:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800306a:	b29a      	uxth	r2, r3
 800306c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800306e:	801a      	strh	r2, [r3, #0]
 8003070:	e018      	b.n	80030a4 <HAL_PCD_EP_DB_Transmit+0x4c4>
 8003072:	68bb      	ldr	r3, [r7, #8]
 8003074:	785b      	ldrb	r3, [r3, #1]
 8003076:	2b01      	cmp	r3, #1
 8003078:	d114      	bne.n	80030a4 <HAL_PCD_EP_DB_Transmit+0x4c4>
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003082:	b29b      	uxth	r3, r3
 8003084:	461a      	mov	r2, r3
 8003086:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003088:	4413      	add	r3, r2
 800308a:	637b      	str	r3, [r7, #52]	; 0x34
 800308c:	68bb      	ldr	r3, [r7, #8]
 800308e:	781b      	ldrb	r3, [r3, #0]
 8003090:	00da      	lsls	r2, r3, #3
 8003092:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003094:	4413      	add	r3, r2
 8003096:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800309a:	633b      	str	r3, [r7, #48]	; 0x30
 800309c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800309e:	b29a      	uxth	r2, r3
 80030a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030a2:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	6818      	ldr	r0, [r3, #0]
 80030a8:	68bb      	ldr	r3, [r7, #8]
 80030aa:	6959      	ldr	r1, [r3, #20]
 80030ac:	68bb      	ldr	r3, [r7, #8]
 80030ae:	895a      	ldrh	r2, [r3, #10]
 80030b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030b2:	b29b      	uxth	r3, r3
 80030b4:	f004 fb76 	bl	80077a4 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	461a      	mov	r2, r3
 80030be:	68bb      	ldr	r3, [r7, #8]
 80030c0:	781b      	ldrb	r3, [r3, #0]
 80030c2:	009b      	lsls	r3, r3, #2
 80030c4:	4413      	add	r3, r2
 80030c6:	881b      	ldrh	r3, [r3, #0]
 80030c8:	b29b      	uxth	r3, r3
 80030ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80030ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80030d2:	823b      	strh	r3, [r7, #16]
 80030d4:	8a3b      	ldrh	r3, [r7, #16]
 80030d6:	f083 0310 	eor.w	r3, r3, #16
 80030da:	823b      	strh	r3, [r7, #16]
 80030dc:	8a3b      	ldrh	r3, [r7, #16]
 80030de:	f083 0320 	eor.w	r3, r3, #32
 80030e2:	823b      	strh	r3, [r7, #16]
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	461a      	mov	r2, r3
 80030ea:	68bb      	ldr	r3, [r7, #8]
 80030ec:	781b      	ldrb	r3, [r3, #0]
 80030ee:	009b      	lsls	r3, r3, #2
 80030f0:	441a      	add	r2, r3
 80030f2:	8a3b      	ldrh	r3, [r7, #16]
 80030f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80030f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80030fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003100:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003104:	b29b      	uxth	r3, r3
 8003106:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8003108:	2300      	movs	r3, #0
}
 800310a:	4618      	mov	r0, r3
 800310c:	3748      	adds	r7, #72	; 0x48
 800310e:	46bd      	mov	sp, r7
 8003110:	bd80      	pop	{r7, pc}

08003112 <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 8003112:	b480      	push	{r7}
 8003114:	b087      	sub	sp, #28
 8003116:	af00      	add	r7, sp, #0
 8003118:	60f8      	str	r0, [r7, #12]
 800311a:	607b      	str	r3, [r7, #4]
 800311c:	460b      	mov	r3, r1
 800311e:	817b      	strh	r3, [r7, #10]
 8003120:	4613      	mov	r3, r2
 8003122:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003124:	897b      	ldrh	r3, [r7, #10]
 8003126:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800312a:	b29b      	uxth	r3, r3
 800312c:	2b00      	cmp	r3, #0
 800312e:	d00b      	beq.n	8003148 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003130:	897b      	ldrh	r3, [r7, #10]
 8003132:	f003 0307 	and.w	r3, r3, #7
 8003136:	1c5a      	adds	r2, r3, #1
 8003138:	4613      	mov	r3, r2
 800313a:	009b      	lsls	r3, r3, #2
 800313c:	4413      	add	r3, r2
 800313e:	00db      	lsls	r3, r3, #3
 8003140:	68fa      	ldr	r2, [r7, #12]
 8003142:	4413      	add	r3, r2
 8003144:	617b      	str	r3, [r7, #20]
 8003146:	e009      	b.n	800315c <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003148:	897a      	ldrh	r2, [r7, #10]
 800314a:	4613      	mov	r3, r2
 800314c:	009b      	lsls	r3, r3, #2
 800314e:	4413      	add	r3, r2
 8003150:	00db      	lsls	r3, r3, #3
 8003152:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003156:	68fa      	ldr	r2, [r7, #12]
 8003158:	4413      	add	r3, r2
 800315a:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800315c:	893b      	ldrh	r3, [r7, #8]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d107      	bne.n	8003172 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003162:	697b      	ldr	r3, [r7, #20]
 8003164:	2200      	movs	r2, #0
 8003166:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	b29a      	uxth	r2, r3
 800316c:	697b      	ldr	r3, [r7, #20]
 800316e:	80da      	strh	r2, [r3, #6]
 8003170:	e00b      	b.n	800318a <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003172:	697b      	ldr	r3, [r7, #20]
 8003174:	2201      	movs	r2, #1
 8003176:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	b29a      	uxth	r2, r3
 800317c:	697b      	ldr	r3, [r7, #20]
 800317e:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	0c1b      	lsrs	r3, r3, #16
 8003184:	b29a      	uxth	r2, r3
 8003186:	697b      	ldr	r3, [r7, #20]
 8003188:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 800318a:	2300      	movs	r3, #0
}
 800318c:	4618      	mov	r0, r3
 800318e:	371c      	adds	r7, #28
 8003190:	46bd      	mov	sp, r7
 8003192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003196:	4770      	bx	lr

08003198 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003198:	b480      	push	{r7}
 800319a:	b085      	sub	sp, #20
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2201      	movs	r2, #1
 80031aa:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2200      	movs	r2, #0
 80031b2:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80031bc:	b29b      	uxth	r3, r3
 80031be:	f043 0301 	orr.w	r3, r3, #1
 80031c2:	b29a      	uxth	r2, r3
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80031d0:	b29b      	uxth	r3, r3
 80031d2:	f043 0302 	orr.w	r3, r3, #2
 80031d6:	b29a      	uxth	r2, r3
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 80031de:	2300      	movs	r3, #0
}
 80031e0:	4618      	mov	r0, r3
 80031e2:	3714      	adds	r7, #20
 80031e4:	46bd      	mov	sp, r7
 80031e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ea:	4770      	bx	lr

080031ec <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80031ec:	b480      	push	{r7}
 80031ee:	b085      	sub	sp, #20
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d141      	bne.n	800327e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80031fa:	4b4b      	ldr	r3, [pc, #300]	; (8003328 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003202:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003206:	d131      	bne.n	800326c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003208:	4b47      	ldr	r3, [pc, #284]	; (8003328 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800320a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800320e:	4a46      	ldr	r2, [pc, #280]	; (8003328 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003210:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003214:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003218:	4b43      	ldr	r3, [pc, #268]	; (8003328 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003220:	4a41      	ldr	r2, [pc, #260]	; (8003328 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003222:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003226:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003228:	4b40      	ldr	r3, [pc, #256]	; (800332c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	2232      	movs	r2, #50	; 0x32
 800322e:	fb02 f303 	mul.w	r3, r2, r3
 8003232:	4a3f      	ldr	r2, [pc, #252]	; (8003330 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003234:	fba2 2303 	umull	r2, r3, r2, r3
 8003238:	0c9b      	lsrs	r3, r3, #18
 800323a:	3301      	adds	r3, #1
 800323c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800323e:	e002      	b.n	8003246 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	3b01      	subs	r3, #1
 8003244:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003246:	4b38      	ldr	r3, [pc, #224]	; (8003328 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003248:	695b      	ldr	r3, [r3, #20]
 800324a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800324e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003252:	d102      	bne.n	800325a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d1f2      	bne.n	8003240 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800325a:	4b33      	ldr	r3, [pc, #204]	; (8003328 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800325c:	695b      	ldr	r3, [r3, #20]
 800325e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003262:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003266:	d158      	bne.n	800331a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003268:	2303      	movs	r3, #3
 800326a:	e057      	b.n	800331c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800326c:	4b2e      	ldr	r3, [pc, #184]	; (8003328 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800326e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003272:	4a2d      	ldr	r2, [pc, #180]	; (8003328 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003274:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003278:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800327c:	e04d      	b.n	800331a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003284:	d141      	bne.n	800330a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003286:	4b28      	ldr	r3, [pc, #160]	; (8003328 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800328e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003292:	d131      	bne.n	80032f8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003294:	4b24      	ldr	r3, [pc, #144]	; (8003328 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003296:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800329a:	4a23      	ldr	r2, [pc, #140]	; (8003328 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800329c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032a0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80032a4:	4b20      	ldr	r3, [pc, #128]	; (8003328 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80032ac:	4a1e      	ldr	r2, [pc, #120]	; (8003328 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80032b2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80032b4:	4b1d      	ldr	r3, [pc, #116]	; (800332c <HAL_PWREx_ControlVoltageScaling+0x140>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	2232      	movs	r2, #50	; 0x32
 80032ba:	fb02 f303 	mul.w	r3, r2, r3
 80032be:	4a1c      	ldr	r2, [pc, #112]	; (8003330 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80032c0:	fba2 2303 	umull	r2, r3, r2, r3
 80032c4:	0c9b      	lsrs	r3, r3, #18
 80032c6:	3301      	adds	r3, #1
 80032c8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80032ca:	e002      	b.n	80032d2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	3b01      	subs	r3, #1
 80032d0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80032d2:	4b15      	ldr	r3, [pc, #84]	; (8003328 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032d4:	695b      	ldr	r3, [r3, #20]
 80032d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032de:	d102      	bne.n	80032e6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d1f2      	bne.n	80032cc <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80032e6:	4b10      	ldr	r3, [pc, #64]	; (8003328 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032e8:	695b      	ldr	r3, [r3, #20]
 80032ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032f2:	d112      	bne.n	800331a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80032f4:	2303      	movs	r3, #3
 80032f6:	e011      	b.n	800331c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80032f8:	4b0b      	ldr	r3, [pc, #44]	; (8003328 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80032fe:	4a0a      	ldr	r2, [pc, #40]	; (8003328 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003300:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003304:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003308:	e007      	b.n	800331a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800330a:	4b07      	ldr	r3, [pc, #28]	; (8003328 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003312:	4a05      	ldr	r2, [pc, #20]	; (8003328 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003314:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003318:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800331a:	2300      	movs	r3, #0
}
 800331c:	4618      	mov	r0, r3
 800331e:	3714      	adds	r7, #20
 8003320:	46bd      	mov	sp, r7
 8003322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003326:	4770      	bx	lr
 8003328:	40007000 	.word	0x40007000
 800332c:	20000054 	.word	0x20000054
 8003330:	431bde83 	.word	0x431bde83

08003334 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003334:	b480      	push	{r7}
 8003336:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003338:	4b05      	ldr	r3, [pc, #20]	; (8003350 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800333a:	689b      	ldr	r3, [r3, #8]
 800333c:	4a04      	ldr	r2, [pc, #16]	; (8003350 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800333e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003342:	6093      	str	r3, [r2, #8]
}
 8003344:	bf00      	nop
 8003346:	46bd      	mov	sp, r7
 8003348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334c:	4770      	bx	lr
 800334e:	bf00      	nop
 8003350:	40007000 	.word	0x40007000

08003354 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b088      	sub	sp, #32
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d101      	bne.n	8003366 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003362:	2301      	movs	r3, #1
 8003364:	e308      	b.n	8003978 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f003 0301 	and.w	r3, r3, #1
 800336e:	2b00      	cmp	r3, #0
 8003370:	d075      	beq.n	800345e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003372:	4ba3      	ldr	r3, [pc, #652]	; (8003600 <HAL_RCC_OscConfig+0x2ac>)
 8003374:	689b      	ldr	r3, [r3, #8]
 8003376:	f003 030c 	and.w	r3, r3, #12
 800337a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800337c:	4ba0      	ldr	r3, [pc, #640]	; (8003600 <HAL_RCC_OscConfig+0x2ac>)
 800337e:	68db      	ldr	r3, [r3, #12]
 8003380:	f003 0303 	and.w	r3, r3, #3
 8003384:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003386:	69bb      	ldr	r3, [r7, #24]
 8003388:	2b0c      	cmp	r3, #12
 800338a:	d102      	bne.n	8003392 <HAL_RCC_OscConfig+0x3e>
 800338c:	697b      	ldr	r3, [r7, #20]
 800338e:	2b03      	cmp	r3, #3
 8003390:	d002      	beq.n	8003398 <HAL_RCC_OscConfig+0x44>
 8003392:	69bb      	ldr	r3, [r7, #24]
 8003394:	2b08      	cmp	r3, #8
 8003396:	d10b      	bne.n	80033b0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003398:	4b99      	ldr	r3, [pc, #612]	; (8003600 <HAL_RCC_OscConfig+0x2ac>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d05b      	beq.n	800345c <HAL_RCC_OscConfig+0x108>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d157      	bne.n	800345c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80033ac:	2301      	movs	r3, #1
 80033ae:	e2e3      	b.n	8003978 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033b8:	d106      	bne.n	80033c8 <HAL_RCC_OscConfig+0x74>
 80033ba:	4b91      	ldr	r3, [pc, #580]	; (8003600 <HAL_RCC_OscConfig+0x2ac>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a90      	ldr	r2, [pc, #576]	; (8003600 <HAL_RCC_OscConfig+0x2ac>)
 80033c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033c4:	6013      	str	r3, [r2, #0]
 80033c6:	e01d      	b.n	8003404 <HAL_RCC_OscConfig+0xb0>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80033d0:	d10c      	bne.n	80033ec <HAL_RCC_OscConfig+0x98>
 80033d2:	4b8b      	ldr	r3, [pc, #556]	; (8003600 <HAL_RCC_OscConfig+0x2ac>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4a8a      	ldr	r2, [pc, #552]	; (8003600 <HAL_RCC_OscConfig+0x2ac>)
 80033d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80033dc:	6013      	str	r3, [r2, #0]
 80033de:	4b88      	ldr	r3, [pc, #544]	; (8003600 <HAL_RCC_OscConfig+0x2ac>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a87      	ldr	r2, [pc, #540]	; (8003600 <HAL_RCC_OscConfig+0x2ac>)
 80033e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033e8:	6013      	str	r3, [r2, #0]
 80033ea:	e00b      	b.n	8003404 <HAL_RCC_OscConfig+0xb0>
 80033ec:	4b84      	ldr	r3, [pc, #528]	; (8003600 <HAL_RCC_OscConfig+0x2ac>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a83      	ldr	r2, [pc, #524]	; (8003600 <HAL_RCC_OscConfig+0x2ac>)
 80033f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033f6:	6013      	str	r3, [r2, #0]
 80033f8:	4b81      	ldr	r3, [pc, #516]	; (8003600 <HAL_RCC_OscConfig+0x2ac>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a80      	ldr	r2, [pc, #512]	; (8003600 <HAL_RCC_OscConfig+0x2ac>)
 80033fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003402:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d013      	beq.n	8003434 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800340c:	f7fe f8b6 	bl	800157c <HAL_GetTick>
 8003410:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003412:	e008      	b.n	8003426 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003414:	f7fe f8b2 	bl	800157c <HAL_GetTick>
 8003418:	4602      	mov	r2, r0
 800341a:	693b      	ldr	r3, [r7, #16]
 800341c:	1ad3      	subs	r3, r2, r3
 800341e:	2b64      	cmp	r3, #100	; 0x64
 8003420:	d901      	bls.n	8003426 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003422:	2303      	movs	r3, #3
 8003424:	e2a8      	b.n	8003978 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003426:	4b76      	ldr	r3, [pc, #472]	; (8003600 <HAL_RCC_OscConfig+0x2ac>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800342e:	2b00      	cmp	r3, #0
 8003430:	d0f0      	beq.n	8003414 <HAL_RCC_OscConfig+0xc0>
 8003432:	e014      	b.n	800345e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003434:	f7fe f8a2 	bl	800157c <HAL_GetTick>
 8003438:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800343a:	e008      	b.n	800344e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800343c:	f7fe f89e 	bl	800157c <HAL_GetTick>
 8003440:	4602      	mov	r2, r0
 8003442:	693b      	ldr	r3, [r7, #16]
 8003444:	1ad3      	subs	r3, r2, r3
 8003446:	2b64      	cmp	r3, #100	; 0x64
 8003448:	d901      	bls.n	800344e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800344a:	2303      	movs	r3, #3
 800344c:	e294      	b.n	8003978 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800344e:	4b6c      	ldr	r3, [pc, #432]	; (8003600 <HAL_RCC_OscConfig+0x2ac>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003456:	2b00      	cmp	r3, #0
 8003458:	d1f0      	bne.n	800343c <HAL_RCC_OscConfig+0xe8>
 800345a:	e000      	b.n	800345e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800345c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f003 0302 	and.w	r3, r3, #2
 8003466:	2b00      	cmp	r3, #0
 8003468:	d075      	beq.n	8003556 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800346a:	4b65      	ldr	r3, [pc, #404]	; (8003600 <HAL_RCC_OscConfig+0x2ac>)
 800346c:	689b      	ldr	r3, [r3, #8]
 800346e:	f003 030c 	and.w	r3, r3, #12
 8003472:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003474:	4b62      	ldr	r3, [pc, #392]	; (8003600 <HAL_RCC_OscConfig+0x2ac>)
 8003476:	68db      	ldr	r3, [r3, #12]
 8003478:	f003 0303 	and.w	r3, r3, #3
 800347c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800347e:	69bb      	ldr	r3, [r7, #24]
 8003480:	2b0c      	cmp	r3, #12
 8003482:	d102      	bne.n	800348a <HAL_RCC_OscConfig+0x136>
 8003484:	697b      	ldr	r3, [r7, #20]
 8003486:	2b02      	cmp	r3, #2
 8003488:	d002      	beq.n	8003490 <HAL_RCC_OscConfig+0x13c>
 800348a:	69bb      	ldr	r3, [r7, #24]
 800348c:	2b04      	cmp	r3, #4
 800348e:	d11f      	bne.n	80034d0 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003490:	4b5b      	ldr	r3, [pc, #364]	; (8003600 <HAL_RCC_OscConfig+0x2ac>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003498:	2b00      	cmp	r3, #0
 800349a:	d005      	beq.n	80034a8 <HAL_RCC_OscConfig+0x154>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	68db      	ldr	r3, [r3, #12]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d101      	bne.n	80034a8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80034a4:	2301      	movs	r3, #1
 80034a6:	e267      	b.n	8003978 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034a8:	4b55      	ldr	r3, [pc, #340]	; (8003600 <HAL_RCC_OscConfig+0x2ac>)
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	691b      	ldr	r3, [r3, #16]
 80034b4:	061b      	lsls	r3, r3, #24
 80034b6:	4952      	ldr	r1, [pc, #328]	; (8003600 <HAL_RCC_OscConfig+0x2ac>)
 80034b8:	4313      	orrs	r3, r2
 80034ba:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80034bc:	4b51      	ldr	r3, [pc, #324]	; (8003604 <HAL_RCC_OscConfig+0x2b0>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4618      	mov	r0, r3
 80034c2:	f7fe f80f 	bl	80014e4 <HAL_InitTick>
 80034c6:	4603      	mov	r3, r0
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d043      	beq.n	8003554 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80034cc:	2301      	movs	r3, #1
 80034ce:	e253      	b.n	8003978 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	68db      	ldr	r3, [r3, #12]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d023      	beq.n	8003520 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034d8:	4b49      	ldr	r3, [pc, #292]	; (8003600 <HAL_RCC_OscConfig+0x2ac>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a48      	ldr	r2, [pc, #288]	; (8003600 <HAL_RCC_OscConfig+0x2ac>)
 80034de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034e4:	f7fe f84a 	bl	800157c <HAL_GetTick>
 80034e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80034ea:	e008      	b.n	80034fe <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034ec:	f7fe f846 	bl	800157c <HAL_GetTick>
 80034f0:	4602      	mov	r2, r0
 80034f2:	693b      	ldr	r3, [r7, #16]
 80034f4:	1ad3      	subs	r3, r2, r3
 80034f6:	2b02      	cmp	r3, #2
 80034f8:	d901      	bls.n	80034fe <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80034fa:	2303      	movs	r3, #3
 80034fc:	e23c      	b.n	8003978 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80034fe:	4b40      	ldr	r3, [pc, #256]	; (8003600 <HAL_RCC_OscConfig+0x2ac>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003506:	2b00      	cmp	r3, #0
 8003508:	d0f0      	beq.n	80034ec <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800350a:	4b3d      	ldr	r3, [pc, #244]	; (8003600 <HAL_RCC_OscConfig+0x2ac>)
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	691b      	ldr	r3, [r3, #16]
 8003516:	061b      	lsls	r3, r3, #24
 8003518:	4939      	ldr	r1, [pc, #228]	; (8003600 <HAL_RCC_OscConfig+0x2ac>)
 800351a:	4313      	orrs	r3, r2
 800351c:	604b      	str	r3, [r1, #4]
 800351e:	e01a      	b.n	8003556 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003520:	4b37      	ldr	r3, [pc, #220]	; (8003600 <HAL_RCC_OscConfig+0x2ac>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a36      	ldr	r2, [pc, #216]	; (8003600 <HAL_RCC_OscConfig+0x2ac>)
 8003526:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800352a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800352c:	f7fe f826 	bl	800157c <HAL_GetTick>
 8003530:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003532:	e008      	b.n	8003546 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003534:	f7fe f822 	bl	800157c <HAL_GetTick>
 8003538:	4602      	mov	r2, r0
 800353a:	693b      	ldr	r3, [r7, #16]
 800353c:	1ad3      	subs	r3, r2, r3
 800353e:	2b02      	cmp	r3, #2
 8003540:	d901      	bls.n	8003546 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003542:	2303      	movs	r3, #3
 8003544:	e218      	b.n	8003978 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003546:	4b2e      	ldr	r3, [pc, #184]	; (8003600 <HAL_RCC_OscConfig+0x2ac>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800354e:	2b00      	cmp	r3, #0
 8003550:	d1f0      	bne.n	8003534 <HAL_RCC_OscConfig+0x1e0>
 8003552:	e000      	b.n	8003556 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003554:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f003 0308 	and.w	r3, r3, #8
 800355e:	2b00      	cmp	r3, #0
 8003560:	d03c      	beq.n	80035dc <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	695b      	ldr	r3, [r3, #20]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d01c      	beq.n	80035a4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800356a:	4b25      	ldr	r3, [pc, #148]	; (8003600 <HAL_RCC_OscConfig+0x2ac>)
 800356c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003570:	4a23      	ldr	r2, [pc, #140]	; (8003600 <HAL_RCC_OscConfig+0x2ac>)
 8003572:	f043 0301 	orr.w	r3, r3, #1
 8003576:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800357a:	f7fd ffff 	bl	800157c <HAL_GetTick>
 800357e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003580:	e008      	b.n	8003594 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003582:	f7fd fffb 	bl	800157c <HAL_GetTick>
 8003586:	4602      	mov	r2, r0
 8003588:	693b      	ldr	r3, [r7, #16]
 800358a:	1ad3      	subs	r3, r2, r3
 800358c:	2b02      	cmp	r3, #2
 800358e:	d901      	bls.n	8003594 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003590:	2303      	movs	r3, #3
 8003592:	e1f1      	b.n	8003978 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003594:	4b1a      	ldr	r3, [pc, #104]	; (8003600 <HAL_RCC_OscConfig+0x2ac>)
 8003596:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800359a:	f003 0302 	and.w	r3, r3, #2
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d0ef      	beq.n	8003582 <HAL_RCC_OscConfig+0x22e>
 80035a2:	e01b      	b.n	80035dc <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80035a4:	4b16      	ldr	r3, [pc, #88]	; (8003600 <HAL_RCC_OscConfig+0x2ac>)
 80035a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80035aa:	4a15      	ldr	r2, [pc, #84]	; (8003600 <HAL_RCC_OscConfig+0x2ac>)
 80035ac:	f023 0301 	bic.w	r3, r3, #1
 80035b0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035b4:	f7fd ffe2 	bl	800157c <HAL_GetTick>
 80035b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80035ba:	e008      	b.n	80035ce <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035bc:	f7fd ffde 	bl	800157c <HAL_GetTick>
 80035c0:	4602      	mov	r2, r0
 80035c2:	693b      	ldr	r3, [r7, #16]
 80035c4:	1ad3      	subs	r3, r2, r3
 80035c6:	2b02      	cmp	r3, #2
 80035c8:	d901      	bls.n	80035ce <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 80035ca:	2303      	movs	r3, #3
 80035cc:	e1d4      	b.n	8003978 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80035ce:	4b0c      	ldr	r3, [pc, #48]	; (8003600 <HAL_RCC_OscConfig+0x2ac>)
 80035d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80035d4:	f003 0302 	and.w	r3, r3, #2
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d1ef      	bne.n	80035bc <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f003 0304 	and.w	r3, r3, #4
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	f000 80ab 	beq.w	8003740 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035ea:	2300      	movs	r3, #0
 80035ec:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80035ee:	4b04      	ldr	r3, [pc, #16]	; (8003600 <HAL_RCC_OscConfig+0x2ac>)
 80035f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d106      	bne.n	8003608 <HAL_RCC_OscConfig+0x2b4>
 80035fa:	2301      	movs	r3, #1
 80035fc:	e005      	b.n	800360a <HAL_RCC_OscConfig+0x2b6>
 80035fe:	bf00      	nop
 8003600:	40021000 	.word	0x40021000
 8003604:	20000058 	.word	0x20000058
 8003608:	2300      	movs	r3, #0
 800360a:	2b00      	cmp	r3, #0
 800360c:	d00d      	beq.n	800362a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800360e:	4baf      	ldr	r3, [pc, #700]	; (80038cc <HAL_RCC_OscConfig+0x578>)
 8003610:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003612:	4aae      	ldr	r2, [pc, #696]	; (80038cc <HAL_RCC_OscConfig+0x578>)
 8003614:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003618:	6593      	str	r3, [r2, #88]	; 0x58
 800361a:	4bac      	ldr	r3, [pc, #688]	; (80038cc <HAL_RCC_OscConfig+0x578>)
 800361c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800361e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003622:	60fb      	str	r3, [r7, #12]
 8003624:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003626:	2301      	movs	r3, #1
 8003628:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800362a:	4ba9      	ldr	r3, [pc, #676]	; (80038d0 <HAL_RCC_OscConfig+0x57c>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003632:	2b00      	cmp	r3, #0
 8003634:	d118      	bne.n	8003668 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003636:	4ba6      	ldr	r3, [pc, #664]	; (80038d0 <HAL_RCC_OscConfig+0x57c>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4aa5      	ldr	r2, [pc, #660]	; (80038d0 <HAL_RCC_OscConfig+0x57c>)
 800363c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003640:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003642:	f7fd ff9b 	bl	800157c <HAL_GetTick>
 8003646:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003648:	e008      	b.n	800365c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800364a:	f7fd ff97 	bl	800157c <HAL_GetTick>
 800364e:	4602      	mov	r2, r0
 8003650:	693b      	ldr	r3, [r7, #16]
 8003652:	1ad3      	subs	r3, r2, r3
 8003654:	2b02      	cmp	r3, #2
 8003656:	d901      	bls.n	800365c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003658:	2303      	movs	r3, #3
 800365a:	e18d      	b.n	8003978 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800365c:	4b9c      	ldr	r3, [pc, #624]	; (80038d0 <HAL_RCC_OscConfig+0x57c>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003664:	2b00      	cmp	r3, #0
 8003666:	d0f0      	beq.n	800364a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	689b      	ldr	r3, [r3, #8]
 800366c:	2b01      	cmp	r3, #1
 800366e:	d108      	bne.n	8003682 <HAL_RCC_OscConfig+0x32e>
 8003670:	4b96      	ldr	r3, [pc, #600]	; (80038cc <HAL_RCC_OscConfig+0x578>)
 8003672:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003676:	4a95      	ldr	r2, [pc, #596]	; (80038cc <HAL_RCC_OscConfig+0x578>)
 8003678:	f043 0301 	orr.w	r3, r3, #1
 800367c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003680:	e024      	b.n	80036cc <HAL_RCC_OscConfig+0x378>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	689b      	ldr	r3, [r3, #8]
 8003686:	2b05      	cmp	r3, #5
 8003688:	d110      	bne.n	80036ac <HAL_RCC_OscConfig+0x358>
 800368a:	4b90      	ldr	r3, [pc, #576]	; (80038cc <HAL_RCC_OscConfig+0x578>)
 800368c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003690:	4a8e      	ldr	r2, [pc, #568]	; (80038cc <HAL_RCC_OscConfig+0x578>)
 8003692:	f043 0304 	orr.w	r3, r3, #4
 8003696:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800369a:	4b8c      	ldr	r3, [pc, #560]	; (80038cc <HAL_RCC_OscConfig+0x578>)
 800369c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036a0:	4a8a      	ldr	r2, [pc, #552]	; (80038cc <HAL_RCC_OscConfig+0x578>)
 80036a2:	f043 0301 	orr.w	r3, r3, #1
 80036a6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80036aa:	e00f      	b.n	80036cc <HAL_RCC_OscConfig+0x378>
 80036ac:	4b87      	ldr	r3, [pc, #540]	; (80038cc <HAL_RCC_OscConfig+0x578>)
 80036ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036b2:	4a86      	ldr	r2, [pc, #536]	; (80038cc <HAL_RCC_OscConfig+0x578>)
 80036b4:	f023 0301 	bic.w	r3, r3, #1
 80036b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80036bc:	4b83      	ldr	r3, [pc, #524]	; (80038cc <HAL_RCC_OscConfig+0x578>)
 80036be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036c2:	4a82      	ldr	r2, [pc, #520]	; (80038cc <HAL_RCC_OscConfig+0x578>)
 80036c4:	f023 0304 	bic.w	r3, r3, #4
 80036c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	689b      	ldr	r3, [r3, #8]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d016      	beq.n	8003702 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036d4:	f7fd ff52 	bl	800157c <HAL_GetTick>
 80036d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80036da:	e00a      	b.n	80036f2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036dc:	f7fd ff4e 	bl	800157c <HAL_GetTick>
 80036e0:	4602      	mov	r2, r0
 80036e2:	693b      	ldr	r3, [r7, #16]
 80036e4:	1ad3      	subs	r3, r2, r3
 80036e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d901      	bls.n	80036f2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80036ee:	2303      	movs	r3, #3
 80036f0:	e142      	b.n	8003978 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80036f2:	4b76      	ldr	r3, [pc, #472]	; (80038cc <HAL_RCC_OscConfig+0x578>)
 80036f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036f8:	f003 0302 	and.w	r3, r3, #2
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d0ed      	beq.n	80036dc <HAL_RCC_OscConfig+0x388>
 8003700:	e015      	b.n	800372e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003702:	f7fd ff3b 	bl	800157c <HAL_GetTick>
 8003706:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003708:	e00a      	b.n	8003720 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800370a:	f7fd ff37 	bl	800157c <HAL_GetTick>
 800370e:	4602      	mov	r2, r0
 8003710:	693b      	ldr	r3, [r7, #16]
 8003712:	1ad3      	subs	r3, r2, r3
 8003714:	f241 3288 	movw	r2, #5000	; 0x1388
 8003718:	4293      	cmp	r3, r2
 800371a:	d901      	bls.n	8003720 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800371c:	2303      	movs	r3, #3
 800371e:	e12b      	b.n	8003978 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003720:	4b6a      	ldr	r3, [pc, #424]	; (80038cc <HAL_RCC_OscConfig+0x578>)
 8003722:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003726:	f003 0302 	and.w	r3, r3, #2
 800372a:	2b00      	cmp	r3, #0
 800372c:	d1ed      	bne.n	800370a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800372e:	7ffb      	ldrb	r3, [r7, #31]
 8003730:	2b01      	cmp	r3, #1
 8003732:	d105      	bne.n	8003740 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003734:	4b65      	ldr	r3, [pc, #404]	; (80038cc <HAL_RCC_OscConfig+0x578>)
 8003736:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003738:	4a64      	ldr	r2, [pc, #400]	; (80038cc <HAL_RCC_OscConfig+0x578>)
 800373a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800373e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f003 0320 	and.w	r3, r3, #32
 8003748:	2b00      	cmp	r3, #0
 800374a:	d03c      	beq.n	80037c6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	699b      	ldr	r3, [r3, #24]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d01c      	beq.n	800378e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003754:	4b5d      	ldr	r3, [pc, #372]	; (80038cc <HAL_RCC_OscConfig+0x578>)
 8003756:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800375a:	4a5c      	ldr	r2, [pc, #368]	; (80038cc <HAL_RCC_OscConfig+0x578>)
 800375c:	f043 0301 	orr.w	r3, r3, #1
 8003760:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003764:	f7fd ff0a 	bl	800157c <HAL_GetTick>
 8003768:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800376a:	e008      	b.n	800377e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800376c:	f7fd ff06 	bl	800157c <HAL_GetTick>
 8003770:	4602      	mov	r2, r0
 8003772:	693b      	ldr	r3, [r7, #16]
 8003774:	1ad3      	subs	r3, r2, r3
 8003776:	2b02      	cmp	r3, #2
 8003778:	d901      	bls.n	800377e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800377a:	2303      	movs	r3, #3
 800377c:	e0fc      	b.n	8003978 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800377e:	4b53      	ldr	r3, [pc, #332]	; (80038cc <HAL_RCC_OscConfig+0x578>)
 8003780:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003784:	f003 0302 	and.w	r3, r3, #2
 8003788:	2b00      	cmp	r3, #0
 800378a:	d0ef      	beq.n	800376c <HAL_RCC_OscConfig+0x418>
 800378c:	e01b      	b.n	80037c6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800378e:	4b4f      	ldr	r3, [pc, #316]	; (80038cc <HAL_RCC_OscConfig+0x578>)
 8003790:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003794:	4a4d      	ldr	r2, [pc, #308]	; (80038cc <HAL_RCC_OscConfig+0x578>)
 8003796:	f023 0301 	bic.w	r3, r3, #1
 800379a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800379e:	f7fd feed 	bl	800157c <HAL_GetTick>
 80037a2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80037a4:	e008      	b.n	80037b8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80037a6:	f7fd fee9 	bl	800157c <HAL_GetTick>
 80037aa:	4602      	mov	r2, r0
 80037ac:	693b      	ldr	r3, [r7, #16]
 80037ae:	1ad3      	subs	r3, r2, r3
 80037b0:	2b02      	cmp	r3, #2
 80037b2:	d901      	bls.n	80037b8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80037b4:	2303      	movs	r3, #3
 80037b6:	e0df      	b.n	8003978 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80037b8:	4b44      	ldr	r3, [pc, #272]	; (80038cc <HAL_RCC_OscConfig+0x578>)
 80037ba:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80037be:	f003 0302 	and.w	r3, r3, #2
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d1ef      	bne.n	80037a6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	69db      	ldr	r3, [r3, #28]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	f000 80d3 	beq.w	8003976 <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80037d0:	4b3e      	ldr	r3, [pc, #248]	; (80038cc <HAL_RCC_OscConfig+0x578>)
 80037d2:	689b      	ldr	r3, [r3, #8]
 80037d4:	f003 030c 	and.w	r3, r3, #12
 80037d8:	2b0c      	cmp	r3, #12
 80037da:	f000 808d 	beq.w	80038f8 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	69db      	ldr	r3, [r3, #28]
 80037e2:	2b02      	cmp	r3, #2
 80037e4:	d15a      	bne.n	800389c <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037e6:	4b39      	ldr	r3, [pc, #228]	; (80038cc <HAL_RCC_OscConfig+0x578>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4a38      	ldr	r2, [pc, #224]	; (80038cc <HAL_RCC_OscConfig+0x578>)
 80037ec:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80037f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037f2:	f7fd fec3 	bl	800157c <HAL_GetTick>
 80037f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037f8:	e008      	b.n	800380c <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037fa:	f7fd febf 	bl	800157c <HAL_GetTick>
 80037fe:	4602      	mov	r2, r0
 8003800:	693b      	ldr	r3, [r7, #16]
 8003802:	1ad3      	subs	r3, r2, r3
 8003804:	2b02      	cmp	r3, #2
 8003806:	d901      	bls.n	800380c <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8003808:	2303      	movs	r3, #3
 800380a:	e0b5      	b.n	8003978 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800380c:	4b2f      	ldr	r3, [pc, #188]	; (80038cc <HAL_RCC_OscConfig+0x578>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003814:	2b00      	cmp	r3, #0
 8003816:	d1f0      	bne.n	80037fa <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003818:	4b2c      	ldr	r3, [pc, #176]	; (80038cc <HAL_RCC_OscConfig+0x578>)
 800381a:	68da      	ldr	r2, [r3, #12]
 800381c:	4b2d      	ldr	r3, [pc, #180]	; (80038d4 <HAL_RCC_OscConfig+0x580>)
 800381e:	4013      	ands	r3, r2
 8003820:	687a      	ldr	r2, [r7, #4]
 8003822:	6a11      	ldr	r1, [r2, #32]
 8003824:	687a      	ldr	r2, [r7, #4]
 8003826:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003828:	3a01      	subs	r2, #1
 800382a:	0112      	lsls	r2, r2, #4
 800382c:	4311      	orrs	r1, r2
 800382e:	687a      	ldr	r2, [r7, #4]
 8003830:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003832:	0212      	lsls	r2, r2, #8
 8003834:	4311      	orrs	r1, r2
 8003836:	687a      	ldr	r2, [r7, #4]
 8003838:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800383a:	0852      	lsrs	r2, r2, #1
 800383c:	3a01      	subs	r2, #1
 800383e:	0552      	lsls	r2, r2, #21
 8003840:	4311      	orrs	r1, r2
 8003842:	687a      	ldr	r2, [r7, #4]
 8003844:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003846:	0852      	lsrs	r2, r2, #1
 8003848:	3a01      	subs	r2, #1
 800384a:	0652      	lsls	r2, r2, #25
 800384c:	4311      	orrs	r1, r2
 800384e:	687a      	ldr	r2, [r7, #4]
 8003850:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003852:	06d2      	lsls	r2, r2, #27
 8003854:	430a      	orrs	r2, r1
 8003856:	491d      	ldr	r1, [pc, #116]	; (80038cc <HAL_RCC_OscConfig+0x578>)
 8003858:	4313      	orrs	r3, r2
 800385a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800385c:	4b1b      	ldr	r3, [pc, #108]	; (80038cc <HAL_RCC_OscConfig+0x578>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4a1a      	ldr	r2, [pc, #104]	; (80038cc <HAL_RCC_OscConfig+0x578>)
 8003862:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003866:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003868:	4b18      	ldr	r3, [pc, #96]	; (80038cc <HAL_RCC_OscConfig+0x578>)
 800386a:	68db      	ldr	r3, [r3, #12]
 800386c:	4a17      	ldr	r2, [pc, #92]	; (80038cc <HAL_RCC_OscConfig+0x578>)
 800386e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003872:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003874:	f7fd fe82 	bl	800157c <HAL_GetTick>
 8003878:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800387a:	e008      	b.n	800388e <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800387c:	f7fd fe7e 	bl	800157c <HAL_GetTick>
 8003880:	4602      	mov	r2, r0
 8003882:	693b      	ldr	r3, [r7, #16]
 8003884:	1ad3      	subs	r3, r2, r3
 8003886:	2b02      	cmp	r3, #2
 8003888:	d901      	bls.n	800388e <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 800388a:	2303      	movs	r3, #3
 800388c:	e074      	b.n	8003978 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800388e:	4b0f      	ldr	r3, [pc, #60]	; (80038cc <HAL_RCC_OscConfig+0x578>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003896:	2b00      	cmp	r3, #0
 8003898:	d0f0      	beq.n	800387c <HAL_RCC_OscConfig+0x528>
 800389a:	e06c      	b.n	8003976 <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800389c:	4b0b      	ldr	r3, [pc, #44]	; (80038cc <HAL_RCC_OscConfig+0x578>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a0a      	ldr	r2, [pc, #40]	; (80038cc <HAL_RCC_OscConfig+0x578>)
 80038a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80038a6:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80038a8:	4b08      	ldr	r3, [pc, #32]	; (80038cc <HAL_RCC_OscConfig+0x578>)
 80038aa:	68db      	ldr	r3, [r3, #12]
 80038ac:	4a07      	ldr	r2, [pc, #28]	; (80038cc <HAL_RCC_OscConfig+0x578>)
 80038ae:	f023 0303 	bic.w	r3, r3, #3
 80038b2:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80038b4:	4b05      	ldr	r3, [pc, #20]	; (80038cc <HAL_RCC_OscConfig+0x578>)
 80038b6:	68db      	ldr	r3, [r3, #12]
 80038b8:	4a04      	ldr	r2, [pc, #16]	; (80038cc <HAL_RCC_OscConfig+0x578>)
 80038ba:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80038be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038c2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038c4:	f7fd fe5a 	bl	800157c <HAL_GetTick>
 80038c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80038ca:	e00e      	b.n	80038ea <HAL_RCC_OscConfig+0x596>
 80038cc:	40021000 	.word	0x40021000
 80038d0:	40007000 	.word	0x40007000
 80038d4:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038d8:	f7fd fe50 	bl	800157c <HAL_GetTick>
 80038dc:	4602      	mov	r2, r0
 80038de:	693b      	ldr	r3, [r7, #16]
 80038e0:	1ad3      	subs	r3, r2, r3
 80038e2:	2b02      	cmp	r3, #2
 80038e4:	d901      	bls.n	80038ea <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 80038e6:	2303      	movs	r3, #3
 80038e8:	e046      	b.n	8003978 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80038ea:	4b25      	ldr	r3, [pc, #148]	; (8003980 <HAL_RCC_OscConfig+0x62c>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d1f0      	bne.n	80038d8 <HAL_RCC_OscConfig+0x584>
 80038f6:	e03e      	b.n	8003976 <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	69db      	ldr	r3, [r3, #28]
 80038fc:	2b01      	cmp	r3, #1
 80038fe:	d101      	bne.n	8003904 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8003900:	2301      	movs	r3, #1
 8003902:	e039      	b.n	8003978 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003904:	4b1e      	ldr	r3, [pc, #120]	; (8003980 <HAL_RCC_OscConfig+0x62c>)
 8003906:	68db      	ldr	r3, [r3, #12]
 8003908:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800390a:	697b      	ldr	r3, [r7, #20]
 800390c:	f003 0203 	and.w	r2, r3, #3
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6a1b      	ldr	r3, [r3, #32]
 8003914:	429a      	cmp	r2, r3
 8003916:	d12c      	bne.n	8003972 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003918:	697b      	ldr	r3, [r7, #20]
 800391a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003922:	3b01      	subs	r3, #1
 8003924:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003926:	429a      	cmp	r2, r3
 8003928:	d123      	bne.n	8003972 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800392a:	697b      	ldr	r3, [r7, #20]
 800392c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003934:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003936:	429a      	cmp	r2, r3
 8003938:	d11b      	bne.n	8003972 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800393a:	697b      	ldr	r3, [r7, #20]
 800393c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003944:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003946:	429a      	cmp	r2, r3
 8003948:	d113      	bne.n	8003972 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800394a:	697b      	ldr	r3, [r7, #20]
 800394c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003954:	085b      	lsrs	r3, r3, #1
 8003956:	3b01      	subs	r3, #1
 8003958:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800395a:	429a      	cmp	r2, r3
 800395c:	d109      	bne.n	8003972 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800395e:	697b      	ldr	r3, [r7, #20]
 8003960:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003968:	085b      	lsrs	r3, r3, #1
 800396a:	3b01      	subs	r3, #1
 800396c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800396e:	429a      	cmp	r2, r3
 8003970:	d001      	beq.n	8003976 <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 8003972:	2301      	movs	r3, #1
 8003974:	e000      	b.n	8003978 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 8003976:	2300      	movs	r3, #0
}
 8003978:	4618      	mov	r0, r3
 800397a:	3720      	adds	r7, #32
 800397c:	46bd      	mov	sp, r7
 800397e:	bd80      	pop	{r7, pc}
 8003980:	40021000 	.word	0x40021000

08003984 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b086      	sub	sp, #24
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
 800398c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800398e:	2300      	movs	r3, #0
 8003990:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d101      	bne.n	800399c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003998:	2301      	movs	r3, #1
 800399a:	e11e      	b.n	8003bda <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800399c:	4b91      	ldr	r3, [pc, #580]	; (8003be4 <HAL_RCC_ClockConfig+0x260>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f003 030f 	and.w	r3, r3, #15
 80039a4:	683a      	ldr	r2, [r7, #0]
 80039a6:	429a      	cmp	r2, r3
 80039a8:	d910      	bls.n	80039cc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039aa:	4b8e      	ldr	r3, [pc, #568]	; (8003be4 <HAL_RCC_ClockConfig+0x260>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f023 020f 	bic.w	r2, r3, #15
 80039b2:	498c      	ldr	r1, [pc, #560]	; (8003be4 <HAL_RCC_ClockConfig+0x260>)
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	4313      	orrs	r3, r2
 80039b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039ba:	4b8a      	ldr	r3, [pc, #552]	; (8003be4 <HAL_RCC_ClockConfig+0x260>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f003 030f 	and.w	r3, r3, #15
 80039c2:	683a      	ldr	r2, [r7, #0]
 80039c4:	429a      	cmp	r2, r3
 80039c6:	d001      	beq.n	80039cc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80039c8:	2301      	movs	r3, #1
 80039ca:	e106      	b.n	8003bda <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f003 0301 	and.w	r3, r3, #1
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d073      	beq.n	8003ac0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	2b03      	cmp	r3, #3
 80039de:	d129      	bne.n	8003a34 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039e0:	4b81      	ldr	r3, [pc, #516]	; (8003be8 <HAL_RCC_ClockConfig+0x264>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d101      	bne.n	80039f0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80039ec:	2301      	movs	r3, #1
 80039ee:	e0f4      	b.n	8003bda <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80039f0:	f000 f966 	bl	8003cc0 <RCC_GetSysClockFreqFromPLLSource>
 80039f4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80039f6:	693b      	ldr	r3, [r7, #16]
 80039f8:	4a7c      	ldr	r2, [pc, #496]	; (8003bec <HAL_RCC_ClockConfig+0x268>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d93f      	bls.n	8003a7e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80039fe:	4b7a      	ldr	r3, [pc, #488]	; (8003be8 <HAL_RCC_ClockConfig+0x264>)
 8003a00:	689b      	ldr	r3, [r3, #8]
 8003a02:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d009      	beq.n	8003a1e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d033      	beq.n	8003a7e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d12f      	bne.n	8003a7e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003a1e:	4b72      	ldr	r3, [pc, #456]	; (8003be8 <HAL_RCC_ClockConfig+0x264>)
 8003a20:	689b      	ldr	r3, [r3, #8]
 8003a22:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003a26:	4a70      	ldr	r2, [pc, #448]	; (8003be8 <HAL_RCC_ClockConfig+0x264>)
 8003a28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a2c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003a2e:	2380      	movs	r3, #128	; 0x80
 8003a30:	617b      	str	r3, [r7, #20]
 8003a32:	e024      	b.n	8003a7e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	2b02      	cmp	r3, #2
 8003a3a:	d107      	bne.n	8003a4c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a3c:	4b6a      	ldr	r3, [pc, #424]	; (8003be8 <HAL_RCC_ClockConfig+0x264>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d109      	bne.n	8003a5c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003a48:	2301      	movs	r3, #1
 8003a4a:	e0c6      	b.n	8003bda <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a4c:	4b66      	ldr	r3, [pc, #408]	; (8003be8 <HAL_RCC_ClockConfig+0x264>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d101      	bne.n	8003a5c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003a58:	2301      	movs	r3, #1
 8003a5a:	e0be      	b.n	8003bda <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003a5c:	f000 f8ce 	bl	8003bfc <HAL_RCC_GetSysClockFreq>
 8003a60:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003a62:	693b      	ldr	r3, [r7, #16]
 8003a64:	4a61      	ldr	r2, [pc, #388]	; (8003bec <HAL_RCC_ClockConfig+0x268>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d909      	bls.n	8003a7e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003a6a:	4b5f      	ldr	r3, [pc, #380]	; (8003be8 <HAL_RCC_ClockConfig+0x264>)
 8003a6c:	689b      	ldr	r3, [r3, #8]
 8003a6e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003a72:	4a5d      	ldr	r2, [pc, #372]	; (8003be8 <HAL_RCC_ClockConfig+0x264>)
 8003a74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a78:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003a7a:	2380      	movs	r3, #128	; 0x80
 8003a7c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003a7e:	4b5a      	ldr	r3, [pc, #360]	; (8003be8 <HAL_RCC_ClockConfig+0x264>)
 8003a80:	689b      	ldr	r3, [r3, #8]
 8003a82:	f023 0203 	bic.w	r2, r3, #3
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	4957      	ldr	r1, [pc, #348]	; (8003be8 <HAL_RCC_ClockConfig+0x264>)
 8003a8c:	4313      	orrs	r3, r2
 8003a8e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a90:	f7fd fd74 	bl	800157c <HAL_GetTick>
 8003a94:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a96:	e00a      	b.n	8003aae <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a98:	f7fd fd70 	bl	800157c <HAL_GetTick>
 8003a9c:	4602      	mov	r2, r0
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	1ad3      	subs	r3, r2, r3
 8003aa2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d901      	bls.n	8003aae <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003aaa:	2303      	movs	r3, #3
 8003aac:	e095      	b.n	8003bda <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003aae:	4b4e      	ldr	r3, [pc, #312]	; (8003be8 <HAL_RCC_ClockConfig+0x264>)
 8003ab0:	689b      	ldr	r3, [r3, #8]
 8003ab2:	f003 020c 	and.w	r2, r3, #12
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	685b      	ldr	r3, [r3, #4]
 8003aba:	009b      	lsls	r3, r3, #2
 8003abc:	429a      	cmp	r2, r3
 8003abe:	d1eb      	bne.n	8003a98 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f003 0302 	and.w	r3, r3, #2
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d023      	beq.n	8003b14 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f003 0304 	and.w	r3, r3, #4
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d005      	beq.n	8003ae4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ad8:	4b43      	ldr	r3, [pc, #268]	; (8003be8 <HAL_RCC_ClockConfig+0x264>)
 8003ada:	689b      	ldr	r3, [r3, #8]
 8003adc:	4a42      	ldr	r2, [pc, #264]	; (8003be8 <HAL_RCC_ClockConfig+0x264>)
 8003ade:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003ae2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f003 0308 	and.w	r3, r3, #8
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d007      	beq.n	8003b00 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003af0:	4b3d      	ldr	r3, [pc, #244]	; (8003be8 <HAL_RCC_ClockConfig+0x264>)
 8003af2:	689b      	ldr	r3, [r3, #8]
 8003af4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003af8:	4a3b      	ldr	r2, [pc, #236]	; (8003be8 <HAL_RCC_ClockConfig+0x264>)
 8003afa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003afe:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b00:	4b39      	ldr	r3, [pc, #228]	; (8003be8 <HAL_RCC_ClockConfig+0x264>)
 8003b02:	689b      	ldr	r3, [r3, #8]
 8003b04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	689b      	ldr	r3, [r3, #8]
 8003b0c:	4936      	ldr	r1, [pc, #216]	; (8003be8 <HAL_RCC_ClockConfig+0x264>)
 8003b0e:	4313      	orrs	r3, r2
 8003b10:	608b      	str	r3, [r1, #8]
 8003b12:	e008      	b.n	8003b26 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003b14:	697b      	ldr	r3, [r7, #20]
 8003b16:	2b80      	cmp	r3, #128	; 0x80
 8003b18:	d105      	bne.n	8003b26 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003b1a:	4b33      	ldr	r3, [pc, #204]	; (8003be8 <HAL_RCC_ClockConfig+0x264>)
 8003b1c:	689b      	ldr	r3, [r3, #8]
 8003b1e:	4a32      	ldr	r2, [pc, #200]	; (8003be8 <HAL_RCC_ClockConfig+0x264>)
 8003b20:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003b24:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003b26:	4b2f      	ldr	r3, [pc, #188]	; (8003be4 <HAL_RCC_ClockConfig+0x260>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f003 030f 	and.w	r3, r3, #15
 8003b2e:	683a      	ldr	r2, [r7, #0]
 8003b30:	429a      	cmp	r2, r3
 8003b32:	d21d      	bcs.n	8003b70 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b34:	4b2b      	ldr	r3, [pc, #172]	; (8003be4 <HAL_RCC_ClockConfig+0x260>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f023 020f 	bic.w	r2, r3, #15
 8003b3c:	4929      	ldr	r1, [pc, #164]	; (8003be4 <HAL_RCC_ClockConfig+0x260>)
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	4313      	orrs	r3, r2
 8003b42:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003b44:	f7fd fd1a 	bl	800157c <HAL_GetTick>
 8003b48:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b4a:	e00a      	b.n	8003b62 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b4c:	f7fd fd16 	bl	800157c <HAL_GetTick>
 8003b50:	4602      	mov	r2, r0
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	1ad3      	subs	r3, r2, r3
 8003b56:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d901      	bls.n	8003b62 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003b5e:	2303      	movs	r3, #3
 8003b60:	e03b      	b.n	8003bda <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b62:	4b20      	ldr	r3, [pc, #128]	; (8003be4 <HAL_RCC_ClockConfig+0x260>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f003 030f 	and.w	r3, r3, #15
 8003b6a:	683a      	ldr	r2, [r7, #0]
 8003b6c:	429a      	cmp	r2, r3
 8003b6e:	d1ed      	bne.n	8003b4c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f003 0304 	and.w	r3, r3, #4
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d008      	beq.n	8003b8e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b7c:	4b1a      	ldr	r3, [pc, #104]	; (8003be8 <HAL_RCC_ClockConfig+0x264>)
 8003b7e:	689b      	ldr	r3, [r3, #8]
 8003b80:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	68db      	ldr	r3, [r3, #12]
 8003b88:	4917      	ldr	r1, [pc, #92]	; (8003be8 <HAL_RCC_ClockConfig+0x264>)
 8003b8a:	4313      	orrs	r3, r2
 8003b8c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f003 0308 	and.w	r3, r3, #8
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d009      	beq.n	8003bae <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b9a:	4b13      	ldr	r3, [pc, #76]	; (8003be8 <HAL_RCC_ClockConfig+0x264>)
 8003b9c:	689b      	ldr	r3, [r3, #8]
 8003b9e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	691b      	ldr	r3, [r3, #16]
 8003ba6:	00db      	lsls	r3, r3, #3
 8003ba8:	490f      	ldr	r1, [pc, #60]	; (8003be8 <HAL_RCC_ClockConfig+0x264>)
 8003baa:	4313      	orrs	r3, r2
 8003bac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003bae:	f000 f825 	bl	8003bfc <HAL_RCC_GetSysClockFreq>
 8003bb2:	4601      	mov	r1, r0
 8003bb4:	4b0c      	ldr	r3, [pc, #48]	; (8003be8 <HAL_RCC_ClockConfig+0x264>)
 8003bb6:	689b      	ldr	r3, [r3, #8]
 8003bb8:	091b      	lsrs	r3, r3, #4
 8003bba:	f003 030f 	and.w	r3, r3, #15
 8003bbe:	4a0c      	ldr	r2, [pc, #48]	; (8003bf0 <HAL_RCC_ClockConfig+0x26c>)
 8003bc0:	5cd3      	ldrb	r3, [r2, r3]
 8003bc2:	f003 031f 	and.w	r3, r3, #31
 8003bc6:	fa21 f303 	lsr.w	r3, r1, r3
 8003bca:	4a0a      	ldr	r2, [pc, #40]	; (8003bf4 <HAL_RCC_ClockConfig+0x270>)
 8003bcc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003bce:	4b0a      	ldr	r3, [pc, #40]	; (8003bf8 <HAL_RCC_ClockConfig+0x274>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	f7fd fc86 	bl	80014e4 <HAL_InitTick>
 8003bd8:	4603      	mov	r3, r0
}
 8003bda:	4618      	mov	r0, r3
 8003bdc:	3718      	adds	r7, #24
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bd80      	pop	{r7, pc}
 8003be2:	bf00      	nop
 8003be4:	40022000 	.word	0x40022000
 8003be8:	40021000 	.word	0x40021000
 8003bec:	04c4b400 	.word	0x04c4b400
 8003bf0:	08009b70 	.word	0x08009b70
 8003bf4:	20000054 	.word	0x20000054
 8003bf8:	20000058 	.word	0x20000058

08003bfc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	b087      	sub	sp, #28
 8003c00:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003c02:	4b2c      	ldr	r3, [pc, #176]	; (8003cb4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c04:	689b      	ldr	r3, [r3, #8]
 8003c06:	f003 030c 	and.w	r3, r3, #12
 8003c0a:	2b04      	cmp	r3, #4
 8003c0c:	d102      	bne.n	8003c14 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003c0e:	4b2a      	ldr	r3, [pc, #168]	; (8003cb8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003c10:	613b      	str	r3, [r7, #16]
 8003c12:	e047      	b.n	8003ca4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003c14:	4b27      	ldr	r3, [pc, #156]	; (8003cb4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c16:	689b      	ldr	r3, [r3, #8]
 8003c18:	f003 030c 	and.w	r3, r3, #12
 8003c1c:	2b08      	cmp	r3, #8
 8003c1e:	d102      	bne.n	8003c26 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003c20:	4b26      	ldr	r3, [pc, #152]	; (8003cbc <HAL_RCC_GetSysClockFreq+0xc0>)
 8003c22:	613b      	str	r3, [r7, #16]
 8003c24:	e03e      	b.n	8003ca4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003c26:	4b23      	ldr	r3, [pc, #140]	; (8003cb4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c28:	689b      	ldr	r3, [r3, #8]
 8003c2a:	f003 030c 	and.w	r3, r3, #12
 8003c2e:	2b0c      	cmp	r3, #12
 8003c30:	d136      	bne.n	8003ca0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003c32:	4b20      	ldr	r3, [pc, #128]	; (8003cb4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c34:	68db      	ldr	r3, [r3, #12]
 8003c36:	f003 0303 	and.w	r3, r3, #3
 8003c3a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003c3c:	4b1d      	ldr	r3, [pc, #116]	; (8003cb4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c3e:	68db      	ldr	r3, [r3, #12]
 8003c40:	091b      	lsrs	r3, r3, #4
 8003c42:	f003 030f 	and.w	r3, r3, #15
 8003c46:	3301      	adds	r3, #1
 8003c48:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	2b03      	cmp	r3, #3
 8003c4e:	d10c      	bne.n	8003c6a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003c50:	4a1a      	ldr	r2, [pc, #104]	; (8003cbc <HAL_RCC_GetSysClockFreq+0xc0>)
 8003c52:	68bb      	ldr	r3, [r7, #8]
 8003c54:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c58:	4a16      	ldr	r2, [pc, #88]	; (8003cb4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c5a:	68d2      	ldr	r2, [r2, #12]
 8003c5c:	0a12      	lsrs	r2, r2, #8
 8003c5e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003c62:	fb02 f303 	mul.w	r3, r2, r3
 8003c66:	617b      	str	r3, [r7, #20]
      break;
 8003c68:	e00c      	b.n	8003c84 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003c6a:	4a13      	ldr	r2, [pc, #76]	; (8003cb8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003c6c:	68bb      	ldr	r3, [r7, #8]
 8003c6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c72:	4a10      	ldr	r2, [pc, #64]	; (8003cb4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c74:	68d2      	ldr	r2, [r2, #12]
 8003c76:	0a12      	lsrs	r2, r2, #8
 8003c78:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003c7c:	fb02 f303 	mul.w	r3, r2, r3
 8003c80:	617b      	str	r3, [r7, #20]
      break;
 8003c82:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003c84:	4b0b      	ldr	r3, [pc, #44]	; (8003cb4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c86:	68db      	ldr	r3, [r3, #12]
 8003c88:	0e5b      	lsrs	r3, r3, #25
 8003c8a:	f003 0303 	and.w	r3, r3, #3
 8003c8e:	3301      	adds	r3, #1
 8003c90:	005b      	lsls	r3, r3, #1
 8003c92:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003c94:	697a      	ldr	r2, [r7, #20]
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c9c:	613b      	str	r3, [r7, #16]
 8003c9e:	e001      	b.n	8003ca4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003ca4:	693b      	ldr	r3, [r7, #16]
}
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	371c      	adds	r7, #28
 8003caa:	46bd      	mov	sp, r7
 8003cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb0:	4770      	bx	lr
 8003cb2:	bf00      	nop
 8003cb4:	40021000 	.word	0x40021000
 8003cb8:	00f42400 	.word	0x00f42400
 8003cbc:	007a1200 	.word	0x007a1200

08003cc0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	b087      	sub	sp, #28
 8003cc4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003cc6:	4b1e      	ldr	r3, [pc, #120]	; (8003d40 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003cc8:	68db      	ldr	r3, [r3, #12]
 8003cca:	f003 0303 	and.w	r3, r3, #3
 8003cce:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003cd0:	4b1b      	ldr	r3, [pc, #108]	; (8003d40 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003cd2:	68db      	ldr	r3, [r3, #12]
 8003cd4:	091b      	lsrs	r3, r3, #4
 8003cd6:	f003 030f 	and.w	r3, r3, #15
 8003cda:	3301      	adds	r3, #1
 8003cdc:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003cde:	693b      	ldr	r3, [r7, #16]
 8003ce0:	2b03      	cmp	r3, #3
 8003ce2:	d10c      	bne.n	8003cfe <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003ce4:	4a17      	ldr	r2, [pc, #92]	; (8003d44 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cec:	4a14      	ldr	r2, [pc, #80]	; (8003d40 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003cee:	68d2      	ldr	r2, [r2, #12]
 8003cf0:	0a12      	lsrs	r2, r2, #8
 8003cf2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003cf6:	fb02 f303 	mul.w	r3, r2, r3
 8003cfa:	617b      	str	r3, [r7, #20]
    break;
 8003cfc:	e00c      	b.n	8003d18 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003cfe:	4a12      	ldr	r2, [pc, #72]	; (8003d48 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d06:	4a0e      	ldr	r2, [pc, #56]	; (8003d40 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003d08:	68d2      	ldr	r2, [r2, #12]
 8003d0a:	0a12      	lsrs	r2, r2, #8
 8003d0c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003d10:	fb02 f303 	mul.w	r3, r2, r3
 8003d14:	617b      	str	r3, [r7, #20]
    break;
 8003d16:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003d18:	4b09      	ldr	r3, [pc, #36]	; (8003d40 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003d1a:	68db      	ldr	r3, [r3, #12]
 8003d1c:	0e5b      	lsrs	r3, r3, #25
 8003d1e:	f003 0303 	and.w	r3, r3, #3
 8003d22:	3301      	adds	r3, #1
 8003d24:	005b      	lsls	r3, r3, #1
 8003d26:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003d28:	697a      	ldr	r2, [r7, #20]
 8003d2a:	68bb      	ldr	r3, [r7, #8]
 8003d2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d30:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003d32:	687b      	ldr	r3, [r7, #4]
}
 8003d34:	4618      	mov	r0, r3
 8003d36:	371c      	adds	r7, #28
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3e:	4770      	bx	lr
 8003d40:	40021000 	.word	0x40021000
 8003d44:	007a1200 	.word	0x007a1200
 8003d48:	00f42400 	.word	0x00f42400

08003d4c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b086      	sub	sp, #24
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003d54:	2300      	movs	r3, #0
 8003d56:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003d58:	2300      	movs	r3, #0
 8003d5a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	f000 8098 	beq.w	8003e9a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d6e:	4b43      	ldr	r3, [pc, #268]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d10d      	bne.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d7a:	4b40      	ldr	r3, [pc, #256]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d7e:	4a3f      	ldr	r2, [pc, #252]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d84:	6593      	str	r3, [r2, #88]	; 0x58
 8003d86:	4b3d      	ldr	r3, [pc, #244]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d8e:	60bb      	str	r3, [r7, #8]
 8003d90:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d92:	2301      	movs	r3, #1
 8003d94:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d96:	4b3a      	ldr	r3, [pc, #232]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4a39      	ldr	r2, [pc, #228]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003d9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003da0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003da2:	f7fd fbeb 	bl	800157c <HAL_GetTick>
 8003da6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003da8:	e009      	b.n	8003dbe <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003daa:	f7fd fbe7 	bl	800157c <HAL_GetTick>
 8003dae:	4602      	mov	r2, r0
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	1ad3      	subs	r3, r2, r3
 8003db4:	2b02      	cmp	r3, #2
 8003db6:	d902      	bls.n	8003dbe <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003db8:	2303      	movs	r3, #3
 8003dba:	74fb      	strb	r3, [r7, #19]
        break;
 8003dbc:	e005      	b.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003dbe:	4b30      	ldr	r3, [pc, #192]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d0ef      	beq.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003dca:	7cfb      	ldrb	r3, [r7, #19]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d159      	bne.n	8003e84 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003dd0:	4b2a      	ldr	r3, [pc, #168]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003dd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003dda:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003ddc:	697b      	ldr	r3, [r7, #20]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d01e      	beq.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003de6:	697a      	ldr	r2, [r7, #20]
 8003de8:	429a      	cmp	r2, r3
 8003dea:	d019      	beq.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003dec:	4b23      	ldr	r3, [pc, #140]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003dee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003df2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003df6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003df8:	4b20      	ldr	r3, [pc, #128]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003dfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dfe:	4a1f      	ldr	r2, [pc, #124]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e04:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003e08:	4b1c      	ldr	r3, [pc, #112]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e0e:	4a1b      	ldr	r2, [pc, #108]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e10:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e14:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003e18:	4a18      	ldr	r2, [pc, #96]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e1a:	697b      	ldr	r3, [r7, #20]
 8003e1c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003e20:	697b      	ldr	r3, [r7, #20]
 8003e22:	f003 0301 	and.w	r3, r3, #1
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d016      	beq.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e2a:	f7fd fba7 	bl	800157c <HAL_GetTick>
 8003e2e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e30:	e00b      	b.n	8003e4a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e32:	f7fd fba3 	bl	800157c <HAL_GetTick>
 8003e36:	4602      	mov	r2, r0
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	1ad3      	subs	r3, r2, r3
 8003e3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d902      	bls.n	8003e4a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003e44:	2303      	movs	r3, #3
 8003e46:	74fb      	strb	r3, [r7, #19]
            break;
 8003e48:	e006      	b.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e4a:	4b0c      	ldr	r3, [pc, #48]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e50:	f003 0302 	and.w	r3, r3, #2
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d0ec      	beq.n	8003e32 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003e58:	7cfb      	ldrb	r3, [r7, #19]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d10b      	bne.n	8003e76 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e5e:	4b07      	ldr	r3, [pc, #28]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e64:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e6c:	4903      	ldr	r1, [pc, #12]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003e74:	e008      	b.n	8003e88 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003e76:	7cfb      	ldrb	r3, [r7, #19]
 8003e78:	74bb      	strb	r3, [r7, #18]
 8003e7a:	e005      	b.n	8003e88 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003e7c:	40021000 	.word	0x40021000
 8003e80:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e84:	7cfb      	ldrb	r3, [r7, #19]
 8003e86:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003e88:	7c7b      	ldrb	r3, [r7, #17]
 8003e8a:	2b01      	cmp	r3, #1
 8003e8c:	d105      	bne.n	8003e9a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e8e:	4ba6      	ldr	r3, [pc, #664]	; (8004128 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e92:	4aa5      	ldr	r2, [pc, #660]	; (8004128 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e94:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e98:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f003 0301 	and.w	r3, r3, #1
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d00a      	beq.n	8003ebc <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003ea6:	4ba0      	ldr	r3, [pc, #640]	; (8004128 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ea8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eac:	f023 0203 	bic.w	r2, r3, #3
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	685b      	ldr	r3, [r3, #4]
 8003eb4:	499c      	ldr	r1, [pc, #624]	; (8004128 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f003 0302 	and.w	r3, r3, #2
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d00a      	beq.n	8003ede <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003ec8:	4b97      	ldr	r3, [pc, #604]	; (8004128 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003eca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ece:	f023 020c 	bic.w	r2, r3, #12
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	689b      	ldr	r3, [r3, #8]
 8003ed6:	4994      	ldr	r1, [pc, #592]	; (8004128 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f003 0304 	and.w	r3, r3, #4
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d00a      	beq.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003eea:	4b8f      	ldr	r3, [pc, #572]	; (8004128 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003eec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ef0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	68db      	ldr	r3, [r3, #12]
 8003ef8:	498b      	ldr	r1, [pc, #556]	; (8004128 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003efa:	4313      	orrs	r3, r2
 8003efc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f003 0308 	and.w	r3, r3, #8
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d00a      	beq.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003f0c:	4b86      	ldr	r3, [pc, #536]	; (8004128 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f12:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	691b      	ldr	r3, [r3, #16]
 8003f1a:	4983      	ldr	r1, [pc, #524]	; (8004128 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f1c:	4313      	orrs	r3, r2
 8003f1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f003 0320 	and.w	r3, r3, #32
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d00a      	beq.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003f2e:	4b7e      	ldr	r3, [pc, #504]	; (8004128 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f34:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	695b      	ldr	r3, [r3, #20]
 8003f3c:	497a      	ldr	r1, [pc, #488]	; (8004128 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d00a      	beq.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003f50:	4b75      	ldr	r3, [pc, #468]	; (8004128 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f56:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	699b      	ldr	r3, [r3, #24]
 8003f5e:	4972      	ldr	r1, [pc, #456]	; (8004128 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f60:	4313      	orrs	r3, r2
 8003f62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d00a      	beq.n	8003f88 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003f72:	4b6d      	ldr	r3, [pc, #436]	; (8004128 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f78:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	69db      	ldr	r3, [r3, #28]
 8003f80:	4969      	ldr	r1, [pc, #420]	; (8004128 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f82:	4313      	orrs	r3, r2
 8003f84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d00a      	beq.n	8003faa <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003f94:	4b64      	ldr	r3, [pc, #400]	; (8004128 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f9a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6a1b      	ldr	r3, [r3, #32]
 8003fa2:	4961      	ldr	r1, [pc, #388]	; (8004128 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fa4:	4313      	orrs	r3, r2
 8003fa6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d00a      	beq.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003fb6:	4b5c      	ldr	r3, [pc, #368]	; (8004128 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fbc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fc4:	4958      	ldr	r1, [pc, #352]	; (8004128 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d015      	beq.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003fd8:	4b53      	ldr	r3, [pc, #332]	; (8004128 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fde:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fe6:	4950      	ldr	r1, [pc, #320]	; (8004128 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fe8:	4313      	orrs	r3, r2
 8003fea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ff2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ff6:	d105      	bne.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ff8:	4b4b      	ldr	r3, [pc, #300]	; (8004128 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ffa:	68db      	ldr	r3, [r3, #12]
 8003ffc:	4a4a      	ldr	r2, [pc, #296]	; (8004128 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ffe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004002:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800400c:	2b00      	cmp	r3, #0
 800400e:	d015      	beq.n	800403c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004010:	4b45      	ldr	r3, [pc, #276]	; (8004128 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004012:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004016:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800401e:	4942      	ldr	r1, [pc, #264]	; (8004128 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004020:	4313      	orrs	r3, r2
 8004022:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800402a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800402e:	d105      	bne.n	800403c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004030:	4b3d      	ldr	r3, [pc, #244]	; (8004128 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004032:	68db      	ldr	r3, [r3, #12]
 8004034:	4a3c      	ldr	r2, [pc, #240]	; (8004128 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004036:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800403a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004044:	2b00      	cmp	r3, #0
 8004046:	d015      	beq.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004048:	4b37      	ldr	r3, [pc, #220]	; (8004128 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800404a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800404e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004056:	4934      	ldr	r1, [pc, #208]	; (8004128 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004058:	4313      	orrs	r3, r2
 800405a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004062:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004066:	d105      	bne.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004068:	4b2f      	ldr	r3, [pc, #188]	; (8004128 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800406a:	68db      	ldr	r3, [r3, #12]
 800406c:	4a2e      	ldr	r2, [pc, #184]	; (8004128 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800406e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004072:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800407c:	2b00      	cmp	r3, #0
 800407e:	d015      	beq.n	80040ac <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004080:	4b29      	ldr	r3, [pc, #164]	; (8004128 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004082:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004086:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800408e:	4926      	ldr	r1, [pc, #152]	; (8004128 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004090:	4313      	orrs	r3, r2
 8004092:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800409a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800409e:	d105      	bne.n	80040ac <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80040a0:	4b21      	ldr	r3, [pc, #132]	; (8004128 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040a2:	68db      	ldr	r3, [r3, #12]
 80040a4:	4a20      	ldr	r2, [pc, #128]	; (8004128 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80040aa:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d015      	beq.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80040b8:	4b1b      	ldr	r3, [pc, #108]	; (8004128 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040be:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040c6:	4918      	ldr	r1, [pc, #96]	; (8004128 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040c8:	4313      	orrs	r3, r2
 80040ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040d2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80040d6:	d105      	bne.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80040d8:	4b13      	ldr	r3, [pc, #76]	; (8004128 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040da:	68db      	ldr	r3, [r3, #12]
 80040dc:	4a12      	ldr	r2, [pc, #72]	; (8004128 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80040e2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d015      	beq.n	800411c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80040f0:	4b0d      	ldr	r3, [pc, #52]	; (8004128 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040f6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040fe:	490a      	ldr	r1, [pc, #40]	; (8004128 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004100:	4313      	orrs	r3, r2
 8004102:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800410a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800410e:	d105      	bne.n	800411c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004110:	4b05      	ldr	r3, [pc, #20]	; (8004128 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004112:	68db      	ldr	r3, [r3, #12]
 8004114:	4a04      	ldr	r2, [pc, #16]	; (8004128 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004116:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800411a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800411c:	7cbb      	ldrb	r3, [r7, #18]
}
 800411e:	4618      	mov	r0, r3
 8004120:	3718      	adds	r7, #24
 8004122:	46bd      	mov	sp, r7
 8004124:	bd80      	pop	{r7, pc}
 8004126:	bf00      	nop
 8004128:	40021000 	.word	0x40021000

0800412c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b082      	sub	sp, #8
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d101      	bne.n	800413e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800413a:	2301      	movs	r3, #1
 800413c:	e049      	b.n	80041d2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004144:	b2db      	uxtb	r3, r3
 8004146:	2b00      	cmp	r3, #0
 8004148:	d106      	bne.n	8004158 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2200      	movs	r2, #0
 800414e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004152:	6878      	ldr	r0, [r7, #4]
 8004154:	f7fd f802 	bl	800115c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2202      	movs	r2, #2
 800415c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681a      	ldr	r2, [r3, #0]
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	3304      	adds	r3, #4
 8004168:	4619      	mov	r1, r3
 800416a:	4610      	mov	r0, r2
 800416c:	f000 fde2 	bl	8004d34 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2201      	movs	r2, #1
 8004174:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2201      	movs	r2, #1
 800417c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2201      	movs	r2, #1
 8004184:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2201      	movs	r2, #1
 800418c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2201      	movs	r2, #1
 8004194:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2201      	movs	r2, #1
 800419c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2201      	movs	r2, #1
 80041a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2201      	movs	r2, #1
 80041ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2201      	movs	r2, #1
 80041b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2201      	movs	r2, #1
 80041bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2201      	movs	r2, #1
 80041c4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2201      	movs	r2, #1
 80041cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80041d0:	2300      	movs	r3, #0
}
 80041d2:	4618      	mov	r0, r3
 80041d4:	3708      	adds	r7, #8
 80041d6:	46bd      	mov	sp, r7
 80041d8:	bd80      	pop	{r7, pc}
	...

080041dc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80041dc:	b480      	push	{r7}
 80041de:	b085      	sub	sp, #20
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041ea:	b2db      	uxtb	r3, r3
 80041ec:	2b01      	cmp	r3, #1
 80041ee:	d001      	beq.n	80041f4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80041f0:	2301      	movs	r3, #1
 80041f2:	e04a      	b.n	800428a <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2202      	movs	r2, #2
 80041f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	68da      	ldr	r2, [r3, #12]
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f042 0201 	orr.w	r2, r2, #1
 800420a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4a21      	ldr	r2, [pc, #132]	; (8004298 <HAL_TIM_Base_Start_IT+0xbc>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d018      	beq.n	8004248 <HAL_TIM_Base_Start_IT+0x6c>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800421e:	d013      	beq.n	8004248 <HAL_TIM_Base_Start_IT+0x6c>
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4a1d      	ldr	r2, [pc, #116]	; (800429c <HAL_TIM_Base_Start_IT+0xc0>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d00e      	beq.n	8004248 <HAL_TIM_Base_Start_IT+0x6c>
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	4a1c      	ldr	r2, [pc, #112]	; (80042a0 <HAL_TIM_Base_Start_IT+0xc4>)
 8004230:	4293      	cmp	r3, r2
 8004232:	d009      	beq.n	8004248 <HAL_TIM_Base_Start_IT+0x6c>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4a1a      	ldr	r2, [pc, #104]	; (80042a4 <HAL_TIM_Base_Start_IT+0xc8>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d004      	beq.n	8004248 <HAL_TIM_Base_Start_IT+0x6c>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4a19      	ldr	r2, [pc, #100]	; (80042a8 <HAL_TIM_Base_Start_IT+0xcc>)
 8004244:	4293      	cmp	r3, r2
 8004246:	d115      	bne.n	8004274 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	689a      	ldr	r2, [r3, #8]
 800424e:	4b17      	ldr	r3, [pc, #92]	; (80042ac <HAL_TIM_Base_Start_IT+0xd0>)
 8004250:	4013      	ands	r3, r2
 8004252:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	2b06      	cmp	r3, #6
 8004258:	d015      	beq.n	8004286 <HAL_TIM_Base_Start_IT+0xaa>
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004260:	d011      	beq.n	8004286 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	681a      	ldr	r2, [r3, #0]
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f042 0201 	orr.w	r2, r2, #1
 8004270:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004272:	e008      	b.n	8004286 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	681a      	ldr	r2, [r3, #0]
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f042 0201 	orr.w	r2, r2, #1
 8004282:	601a      	str	r2, [r3, #0]
 8004284:	e000      	b.n	8004288 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004286:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004288:	2300      	movs	r3, #0
}
 800428a:	4618      	mov	r0, r3
 800428c:	3714      	adds	r7, #20
 800428e:	46bd      	mov	sp, r7
 8004290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004294:	4770      	bx	lr
 8004296:	bf00      	nop
 8004298:	40012c00 	.word	0x40012c00
 800429c:	40000400 	.word	0x40000400
 80042a0:	40000800 	.word	0x40000800
 80042a4:	40013400 	.word	0x40013400
 80042a8:	40014000 	.word	0x40014000
 80042ac:	00010007 	.word	0x00010007

080042b0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b082      	sub	sp, #8
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d101      	bne.n	80042c2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80042be:	2301      	movs	r3, #1
 80042c0:	e049      	b.n	8004356 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042c8:	b2db      	uxtb	r3, r3
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d106      	bne.n	80042dc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2200      	movs	r2, #0
 80042d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80042d6:	6878      	ldr	r0, [r7, #4]
 80042d8:	f7fc fefa 	bl	80010d0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2202      	movs	r2, #2
 80042e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681a      	ldr	r2, [r3, #0]
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	3304      	adds	r3, #4
 80042ec:	4619      	mov	r1, r3
 80042ee:	4610      	mov	r0, r2
 80042f0:	f000 fd20 	bl	8004d34 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2201      	movs	r2, #1
 80042f8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2201      	movs	r2, #1
 8004300:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2201      	movs	r2, #1
 8004308:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2201      	movs	r2, #1
 8004310:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2201      	movs	r2, #1
 8004318:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2201      	movs	r2, #1
 8004320:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2201      	movs	r2, #1
 8004328:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2201      	movs	r2, #1
 8004330:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2201      	movs	r2, #1
 8004338:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2201      	movs	r2, #1
 8004340:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2201      	movs	r2, #1
 8004348:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2201      	movs	r2, #1
 8004350:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004354:	2300      	movs	r3, #0
}
 8004356:	4618      	mov	r0, r3
 8004358:	3708      	adds	r7, #8
 800435a:	46bd      	mov	sp, r7
 800435c:	bd80      	pop	{r7, pc}
	...

08004360 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b084      	sub	sp, #16
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
 8004368:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d109      	bne.n	8004384 <HAL_TIM_PWM_Start+0x24>
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004376:	b2db      	uxtb	r3, r3
 8004378:	2b01      	cmp	r3, #1
 800437a:	bf14      	ite	ne
 800437c:	2301      	movne	r3, #1
 800437e:	2300      	moveq	r3, #0
 8004380:	b2db      	uxtb	r3, r3
 8004382:	e03c      	b.n	80043fe <HAL_TIM_PWM_Start+0x9e>
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	2b04      	cmp	r3, #4
 8004388:	d109      	bne.n	800439e <HAL_TIM_PWM_Start+0x3e>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004390:	b2db      	uxtb	r3, r3
 8004392:	2b01      	cmp	r3, #1
 8004394:	bf14      	ite	ne
 8004396:	2301      	movne	r3, #1
 8004398:	2300      	moveq	r3, #0
 800439a:	b2db      	uxtb	r3, r3
 800439c:	e02f      	b.n	80043fe <HAL_TIM_PWM_Start+0x9e>
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	2b08      	cmp	r3, #8
 80043a2:	d109      	bne.n	80043b8 <HAL_TIM_PWM_Start+0x58>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80043aa:	b2db      	uxtb	r3, r3
 80043ac:	2b01      	cmp	r3, #1
 80043ae:	bf14      	ite	ne
 80043b0:	2301      	movne	r3, #1
 80043b2:	2300      	moveq	r3, #0
 80043b4:	b2db      	uxtb	r3, r3
 80043b6:	e022      	b.n	80043fe <HAL_TIM_PWM_Start+0x9e>
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	2b0c      	cmp	r3, #12
 80043bc:	d109      	bne.n	80043d2 <HAL_TIM_PWM_Start+0x72>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80043c4:	b2db      	uxtb	r3, r3
 80043c6:	2b01      	cmp	r3, #1
 80043c8:	bf14      	ite	ne
 80043ca:	2301      	movne	r3, #1
 80043cc:	2300      	moveq	r3, #0
 80043ce:	b2db      	uxtb	r3, r3
 80043d0:	e015      	b.n	80043fe <HAL_TIM_PWM_Start+0x9e>
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	2b10      	cmp	r3, #16
 80043d6:	d109      	bne.n	80043ec <HAL_TIM_PWM_Start+0x8c>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80043de:	b2db      	uxtb	r3, r3
 80043e0:	2b01      	cmp	r3, #1
 80043e2:	bf14      	ite	ne
 80043e4:	2301      	movne	r3, #1
 80043e6:	2300      	moveq	r3, #0
 80043e8:	b2db      	uxtb	r3, r3
 80043ea:	e008      	b.n	80043fe <HAL_TIM_PWM_Start+0x9e>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80043f2:	b2db      	uxtb	r3, r3
 80043f4:	2b01      	cmp	r3, #1
 80043f6:	bf14      	ite	ne
 80043f8:	2301      	movne	r3, #1
 80043fa:	2300      	moveq	r3, #0
 80043fc:	b2db      	uxtb	r3, r3
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d001      	beq.n	8004406 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004402:	2301      	movs	r3, #1
 8004404:	e097      	b.n	8004536 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d104      	bne.n	8004416 <HAL_TIM_PWM_Start+0xb6>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2202      	movs	r2, #2
 8004410:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004414:	e023      	b.n	800445e <HAL_TIM_PWM_Start+0xfe>
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	2b04      	cmp	r3, #4
 800441a:	d104      	bne.n	8004426 <HAL_TIM_PWM_Start+0xc6>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2202      	movs	r2, #2
 8004420:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004424:	e01b      	b.n	800445e <HAL_TIM_PWM_Start+0xfe>
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	2b08      	cmp	r3, #8
 800442a:	d104      	bne.n	8004436 <HAL_TIM_PWM_Start+0xd6>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2202      	movs	r2, #2
 8004430:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004434:	e013      	b.n	800445e <HAL_TIM_PWM_Start+0xfe>
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	2b0c      	cmp	r3, #12
 800443a:	d104      	bne.n	8004446 <HAL_TIM_PWM_Start+0xe6>
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2202      	movs	r2, #2
 8004440:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004444:	e00b      	b.n	800445e <HAL_TIM_PWM_Start+0xfe>
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	2b10      	cmp	r3, #16
 800444a:	d104      	bne.n	8004456 <HAL_TIM_PWM_Start+0xf6>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2202      	movs	r2, #2
 8004450:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004454:	e003      	b.n	800445e <HAL_TIM_PWM_Start+0xfe>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2202      	movs	r2, #2
 800445a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	2201      	movs	r2, #1
 8004464:	6839      	ldr	r1, [r7, #0]
 8004466:	4618      	mov	r0, r3
 8004468:	f000 ffea 	bl	8005440 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4a33      	ldr	r2, [pc, #204]	; (8004540 <HAL_TIM_PWM_Start+0x1e0>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d013      	beq.n	800449e <HAL_TIM_PWM_Start+0x13e>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	4a32      	ldr	r2, [pc, #200]	; (8004544 <HAL_TIM_PWM_Start+0x1e4>)
 800447c:	4293      	cmp	r3, r2
 800447e:	d00e      	beq.n	800449e <HAL_TIM_PWM_Start+0x13e>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4a30      	ldr	r2, [pc, #192]	; (8004548 <HAL_TIM_PWM_Start+0x1e8>)
 8004486:	4293      	cmp	r3, r2
 8004488:	d009      	beq.n	800449e <HAL_TIM_PWM_Start+0x13e>
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4a2f      	ldr	r2, [pc, #188]	; (800454c <HAL_TIM_PWM_Start+0x1ec>)
 8004490:	4293      	cmp	r3, r2
 8004492:	d004      	beq.n	800449e <HAL_TIM_PWM_Start+0x13e>
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4a2d      	ldr	r2, [pc, #180]	; (8004550 <HAL_TIM_PWM_Start+0x1f0>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d101      	bne.n	80044a2 <HAL_TIM_PWM_Start+0x142>
 800449e:	2301      	movs	r3, #1
 80044a0:	e000      	b.n	80044a4 <HAL_TIM_PWM_Start+0x144>
 80044a2:	2300      	movs	r3, #0
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d007      	beq.n	80044b8 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80044b6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4a20      	ldr	r2, [pc, #128]	; (8004540 <HAL_TIM_PWM_Start+0x1e0>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d018      	beq.n	80044f4 <HAL_TIM_PWM_Start+0x194>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044ca:	d013      	beq.n	80044f4 <HAL_TIM_PWM_Start+0x194>
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4a20      	ldr	r2, [pc, #128]	; (8004554 <HAL_TIM_PWM_Start+0x1f4>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d00e      	beq.n	80044f4 <HAL_TIM_PWM_Start+0x194>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	4a1f      	ldr	r2, [pc, #124]	; (8004558 <HAL_TIM_PWM_Start+0x1f8>)
 80044dc:	4293      	cmp	r3, r2
 80044de:	d009      	beq.n	80044f4 <HAL_TIM_PWM_Start+0x194>
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	4a17      	ldr	r2, [pc, #92]	; (8004544 <HAL_TIM_PWM_Start+0x1e4>)
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d004      	beq.n	80044f4 <HAL_TIM_PWM_Start+0x194>
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	4a16      	ldr	r2, [pc, #88]	; (8004548 <HAL_TIM_PWM_Start+0x1e8>)
 80044f0:	4293      	cmp	r3, r2
 80044f2:	d115      	bne.n	8004520 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	689a      	ldr	r2, [r3, #8]
 80044fa:	4b18      	ldr	r3, [pc, #96]	; (800455c <HAL_TIM_PWM_Start+0x1fc>)
 80044fc:	4013      	ands	r3, r2
 80044fe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	2b06      	cmp	r3, #6
 8004504:	d015      	beq.n	8004532 <HAL_TIM_PWM_Start+0x1d2>
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800450c:	d011      	beq.n	8004532 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	681a      	ldr	r2, [r3, #0]
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f042 0201 	orr.w	r2, r2, #1
 800451c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800451e:	e008      	b.n	8004532 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	681a      	ldr	r2, [r3, #0]
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f042 0201 	orr.w	r2, r2, #1
 800452e:	601a      	str	r2, [r3, #0]
 8004530:	e000      	b.n	8004534 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004532:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004534:	2300      	movs	r3, #0
}
 8004536:	4618      	mov	r0, r3
 8004538:	3710      	adds	r7, #16
 800453a:	46bd      	mov	sp, r7
 800453c:	bd80      	pop	{r7, pc}
 800453e:	bf00      	nop
 8004540:	40012c00 	.word	0x40012c00
 8004544:	40013400 	.word	0x40013400
 8004548:	40014000 	.word	0x40014000
 800454c:	40014400 	.word	0x40014400
 8004550:	40014800 	.word	0x40014800
 8004554:	40000400 	.word	0x40000400
 8004558:	40000800 	.word	0x40000800
 800455c:	00010007 	.word	0x00010007

08004560 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b086      	sub	sp, #24
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
 8004568:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d101      	bne.n	8004574 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004570:	2301      	movs	r3, #1
 8004572:	e097      	b.n	80046a4 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800457a:	b2db      	uxtb	r3, r3
 800457c:	2b00      	cmp	r3, #0
 800457e:	d106      	bne.n	800458e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2200      	movs	r2, #0
 8004584:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004588:	6878      	ldr	r0, [r7, #4]
 800458a:	f7fc fcfb 	bl	8000f84 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2202      	movs	r2, #2
 8004592:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	689b      	ldr	r3, [r3, #8]
 800459c:	687a      	ldr	r2, [r7, #4]
 800459e:	6812      	ldr	r2, [r2, #0]
 80045a0:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 80045a4:	f023 0307 	bic.w	r3, r3, #7
 80045a8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681a      	ldr	r2, [r3, #0]
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	3304      	adds	r3, #4
 80045b2:	4619      	mov	r1, r3
 80045b4:	4610      	mov	r0, r2
 80045b6:	f000 fbbd 	bl	8004d34 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	689b      	ldr	r3, [r3, #8]
 80045c0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	699b      	ldr	r3, [r3, #24]
 80045c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	6a1b      	ldr	r3, [r3, #32]
 80045d0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	697a      	ldr	r2, [r7, #20]
 80045d8:	4313      	orrs	r3, r2
 80045da:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80045dc:	693b      	ldr	r3, [r7, #16]
 80045de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045e2:	f023 0303 	bic.w	r3, r3, #3
 80045e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	689a      	ldr	r2, [r3, #8]
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	699b      	ldr	r3, [r3, #24]
 80045f0:	021b      	lsls	r3, r3, #8
 80045f2:	4313      	orrs	r3, r2
 80045f4:	693a      	ldr	r2, [r7, #16]
 80045f6:	4313      	orrs	r3, r2
 80045f8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80045fa:	693b      	ldr	r3, [r7, #16]
 80045fc:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004600:	f023 030c 	bic.w	r3, r3, #12
 8004604:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004606:	693b      	ldr	r3, [r7, #16]
 8004608:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800460c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004610:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	68da      	ldr	r2, [r3, #12]
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	69db      	ldr	r3, [r3, #28]
 800461a:	021b      	lsls	r3, r3, #8
 800461c:	4313      	orrs	r3, r2
 800461e:	693a      	ldr	r2, [r7, #16]
 8004620:	4313      	orrs	r3, r2
 8004622:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	691b      	ldr	r3, [r3, #16]
 8004628:	011a      	lsls	r2, r3, #4
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	6a1b      	ldr	r3, [r3, #32]
 800462e:	031b      	lsls	r3, r3, #12
 8004630:	4313      	orrs	r3, r2
 8004632:	693a      	ldr	r2, [r7, #16]
 8004634:	4313      	orrs	r3, r2
 8004636:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800463e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8004646:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	685a      	ldr	r2, [r3, #4]
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	695b      	ldr	r3, [r3, #20]
 8004650:	011b      	lsls	r3, r3, #4
 8004652:	4313      	orrs	r3, r2
 8004654:	68fa      	ldr	r2, [r7, #12]
 8004656:	4313      	orrs	r3, r2
 8004658:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	697a      	ldr	r2, [r7, #20]
 8004660:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	693a      	ldr	r2, [r7, #16]
 8004668:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	68fa      	ldr	r2, [r7, #12]
 8004670:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2201      	movs	r2, #1
 8004676:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2201      	movs	r2, #1
 800467e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2201      	movs	r2, #1
 8004686:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2201      	movs	r2, #1
 800468e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2201      	movs	r2, #1
 8004696:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2201      	movs	r2, #1
 800469e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80046a2:	2300      	movs	r3, #0
}
 80046a4:	4618      	mov	r0, r3
 80046a6:	3718      	adds	r7, #24
 80046a8:	46bd      	mov	sp, r7
 80046aa:	bd80      	pop	{r7, pc}

080046ac <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b084      	sub	sp, #16
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
 80046b4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80046bc:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80046c4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80046cc:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80046d4:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d110      	bne.n	80046fe <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80046dc:	7bfb      	ldrb	r3, [r7, #15]
 80046de:	2b01      	cmp	r3, #1
 80046e0:	d102      	bne.n	80046e8 <HAL_TIM_Encoder_Start+0x3c>
     || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80046e2:	7b7b      	ldrb	r3, [r7, #13]
 80046e4:	2b01      	cmp	r3, #1
 80046e6:	d001      	beq.n	80046ec <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80046e8:	2301      	movs	r3, #1
 80046ea:	e068      	b.n	80047be <HAL_TIM_Encoder_Start+0x112>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2202      	movs	r2, #2
 80046f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2202      	movs	r2, #2
 80046f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80046fc:	e031      	b.n	8004762 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	2b04      	cmp	r3, #4
 8004702:	d110      	bne.n	8004726 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004704:	7bbb      	ldrb	r3, [r7, #14]
 8004706:	2b01      	cmp	r3, #1
 8004708:	d102      	bne.n	8004710 <HAL_TIM_Encoder_Start+0x64>
     || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800470a:	7b3b      	ldrb	r3, [r7, #12]
 800470c:	2b01      	cmp	r3, #1
 800470e:	d001      	beq.n	8004714 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004710:	2301      	movs	r3, #1
 8004712:	e054      	b.n	80047be <HAL_TIM_Encoder_Start+0x112>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2202      	movs	r2, #2
 8004718:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2202      	movs	r2, #2
 8004720:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004724:	e01d      	b.n	8004762 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004726:	7bfb      	ldrb	r3, [r7, #15]
 8004728:	2b01      	cmp	r3, #1
 800472a:	d108      	bne.n	800473e <HAL_TIM_Encoder_Start+0x92>
     || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800472c:	7bbb      	ldrb	r3, [r7, #14]
 800472e:	2b01      	cmp	r3, #1
 8004730:	d105      	bne.n	800473e <HAL_TIM_Encoder_Start+0x92>
     || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004732:	7b7b      	ldrb	r3, [r7, #13]
 8004734:	2b01      	cmp	r3, #1
 8004736:	d102      	bne.n	800473e <HAL_TIM_Encoder_Start+0x92>
     || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004738:	7b3b      	ldrb	r3, [r7, #12]
 800473a:	2b01      	cmp	r3, #1
 800473c:	d001      	beq.n	8004742 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800473e:	2301      	movs	r3, #1
 8004740:	e03d      	b.n	80047be <HAL_TIM_Encoder_Start+0x112>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2202      	movs	r2, #2
 8004746:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2202      	movs	r2, #2
 800474e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2202      	movs	r2, #2
 8004756:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2202      	movs	r2, #2
 800475e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d002      	beq.n	800476e <HAL_TIM_Encoder_Start+0xc2>
 8004768:	2b04      	cmp	r3, #4
 800476a:	d008      	beq.n	800477e <HAL_TIM_Encoder_Start+0xd2>
 800476c:	e00f      	b.n	800478e <HAL_TIM_Encoder_Start+0xe2>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	2201      	movs	r2, #1
 8004774:	2100      	movs	r1, #0
 8004776:	4618      	mov	r0, r3
 8004778:	f000 fe62 	bl	8005440 <TIM_CCxChannelCmd>
      break;
 800477c:	e016      	b.n	80047ac <HAL_TIM_Encoder_Start+0x100>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	2201      	movs	r2, #1
 8004784:	2104      	movs	r1, #4
 8004786:	4618      	mov	r0, r3
 8004788:	f000 fe5a 	bl	8005440 <TIM_CCxChannelCmd>
      break;
 800478c:	e00e      	b.n	80047ac <HAL_TIM_Encoder_Start+0x100>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	2201      	movs	r2, #1
 8004794:	2100      	movs	r1, #0
 8004796:	4618      	mov	r0, r3
 8004798:	f000 fe52 	bl	8005440 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	2201      	movs	r2, #1
 80047a2:	2104      	movs	r1, #4
 80047a4:	4618      	mov	r0, r3
 80047a6:	f000 fe4b 	bl	8005440 <TIM_CCxChannelCmd>
      break;
 80047aa:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	681a      	ldr	r2, [r3, #0]
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f042 0201 	orr.w	r2, r2, #1
 80047ba:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80047bc:	2300      	movs	r3, #0
}
 80047be:	4618      	mov	r0, r3
 80047c0:	3710      	adds	r7, #16
 80047c2:	46bd      	mov	sp, r7
 80047c4:	bd80      	pop	{r7, pc}

080047c6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80047c6:	b580      	push	{r7, lr}
 80047c8:	b082      	sub	sp, #8
 80047ca:	af00      	add	r7, sp, #0
 80047cc:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	691b      	ldr	r3, [r3, #16]
 80047d4:	f003 0302 	and.w	r3, r3, #2
 80047d8:	2b02      	cmp	r3, #2
 80047da:	d122      	bne.n	8004822 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	68db      	ldr	r3, [r3, #12]
 80047e2:	f003 0302 	and.w	r3, r3, #2
 80047e6:	2b02      	cmp	r3, #2
 80047e8:	d11b      	bne.n	8004822 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f06f 0202 	mvn.w	r2, #2
 80047f2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2201      	movs	r2, #1
 80047f8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	699b      	ldr	r3, [r3, #24]
 8004800:	f003 0303 	and.w	r3, r3, #3
 8004804:	2b00      	cmp	r3, #0
 8004806:	d003      	beq.n	8004810 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004808:	6878      	ldr	r0, [r7, #4]
 800480a:	f000 fa75 	bl	8004cf8 <HAL_TIM_IC_CaptureCallback>
 800480e:	e005      	b.n	800481c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004810:	6878      	ldr	r0, [r7, #4]
 8004812:	f000 fa67 	bl	8004ce4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004816:	6878      	ldr	r0, [r7, #4]
 8004818:	f000 fa78 	bl	8004d0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2200      	movs	r2, #0
 8004820:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	691b      	ldr	r3, [r3, #16]
 8004828:	f003 0304 	and.w	r3, r3, #4
 800482c:	2b04      	cmp	r3, #4
 800482e:	d122      	bne.n	8004876 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	68db      	ldr	r3, [r3, #12]
 8004836:	f003 0304 	and.w	r3, r3, #4
 800483a:	2b04      	cmp	r3, #4
 800483c:	d11b      	bne.n	8004876 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f06f 0204 	mvn.w	r2, #4
 8004846:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2202      	movs	r2, #2
 800484c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	699b      	ldr	r3, [r3, #24]
 8004854:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004858:	2b00      	cmp	r3, #0
 800485a:	d003      	beq.n	8004864 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800485c:	6878      	ldr	r0, [r7, #4]
 800485e:	f000 fa4b 	bl	8004cf8 <HAL_TIM_IC_CaptureCallback>
 8004862:	e005      	b.n	8004870 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004864:	6878      	ldr	r0, [r7, #4]
 8004866:	f000 fa3d 	bl	8004ce4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800486a:	6878      	ldr	r0, [r7, #4]
 800486c:	f000 fa4e 	bl	8004d0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2200      	movs	r2, #0
 8004874:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	691b      	ldr	r3, [r3, #16]
 800487c:	f003 0308 	and.w	r3, r3, #8
 8004880:	2b08      	cmp	r3, #8
 8004882:	d122      	bne.n	80048ca <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	68db      	ldr	r3, [r3, #12]
 800488a:	f003 0308 	and.w	r3, r3, #8
 800488e:	2b08      	cmp	r3, #8
 8004890:	d11b      	bne.n	80048ca <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f06f 0208 	mvn.w	r2, #8
 800489a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2204      	movs	r2, #4
 80048a0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	69db      	ldr	r3, [r3, #28]
 80048a8:	f003 0303 	and.w	r3, r3, #3
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d003      	beq.n	80048b8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048b0:	6878      	ldr	r0, [r7, #4]
 80048b2:	f000 fa21 	bl	8004cf8 <HAL_TIM_IC_CaptureCallback>
 80048b6:	e005      	b.n	80048c4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048b8:	6878      	ldr	r0, [r7, #4]
 80048ba:	f000 fa13 	bl	8004ce4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048be:	6878      	ldr	r0, [r7, #4]
 80048c0:	f000 fa24 	bl	8004d0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2200      	movs	r2, #0
 80048c8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	691b      	ldr	r3, [r3, #16]
 80048d0:	f003 0310 	and.w	r3, r3, #16
 80048d4:	2b10      	cmp	r3, #16
 80048d6:	d122      	bne.n	800491e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	68db      	ldr	r3, [r3, #12]
 80048de:	f003 0310 	and.w	r3, r3, #16
 80048e2:	2b10      	cmp	r3, #16
 80048e4:	d11b      	bne.n	800491e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f06f 0210 	mvn.w	r2, #16
 80048ee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2208      	movs	r2, #8
 80048f4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	69db      	ldr	r3, [r3, #28]
 80048fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004900:	2b00      	cmp	r3, #0
 8004902:	d003      	beq.n	800490c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004904:	6878      	ldr	r0, [r7, #4]
 8004906:	f000 f9f7 	bl	8004cf8 <HAL_TIM_IC_CaptureCallback>
 800490a:	e005      	b.n	8004918 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800490c:	6878      	ldr	r0, [r7, #4]
 800490e:	f000 f9e9 	bl	8004ce4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004912:	6878      	ldr	r0, [r7, #4]
 8004914:	f000 f9fa 	bl	8004d0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2200      	movs	r2, #0
 800491c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	691b      	ldr	r3, [r3, #16]
 8004924:	f003 0301 	and.w	r3, r3, #1
 8004928:	2b01      	cmp	r3, #1
 800492a:	d10e      	bne.n	800494a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	68db      	ldr	r3, [r3, #12]
 8004932:	f003 0301 	and.w	r3, r3, #1
 8004936:	2b01      	cmp	r3, #1
 8004938:	d107      	bne.n	800494a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f06f 0201 	mvn.w	r2, #1
 8004942:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004944:	6878      	ldr	r0, [r7, #4]
 8004946:	f7fc fa3f 	bl	8000dc8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	691b      	ldr	r3, [r3, #16]
 8004950:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004954:	2b80      	cmp	r3, #128	; 0x80
 8004956:	d10e      	bne.n	8004976 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	68db      	ldr	r3, [r3, #12]
 800495e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004962:	2b80      	cmp	r3, #128	; 0x80
 8004964:	d107      	bne.n	8004976 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800496e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004970:	6878      	ldr	r0, [r7, #4]
 8004972:	f000 feb7 	bl	80056e4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	691b      	ldr	r3, [r3, #16]
 800497c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004980:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004984:	d10e      	bne.n	80049a4 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	68db      	ldr	r3, [r3, #12]
 800498c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004990:	2b80      	cmp	r3, #128	; 0x80
 8004992:	d107      	bne.n	80049a4 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800499c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800499e:	6878      	ldr	r0, [r7, #4]
 80049a0:	f000 feaa 	bl	80056f8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	691b      	ldr	r3, [r3, #16]
 80049aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049ae:	2b40      	cmp	r3, #64	; 0x40
 80049b0:	d10e      	bne.n	80049d0 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	68db      	ldr	r3, [r3, #12]
 80049b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049bc:	2b40      	cmp	r3, #64	; 0x40
 80049be:	d107      	bne.n	80049d0 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80049c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80049ca:	6878      	ldr	r0, [r7, #4]
 80049cc:	f000 f9a8 	bl	8004d20 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	691b      	ldr	r3, [r3, #16]
 80049d6:	f003 0320 	and.w	r3, r3, #32
 80049da:	2b20      	cmp	r3, #32
 80049dc:	d10e      	bne.n	80049fc <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	68db      	ldr	r3, [r3, #12]
 80049e4:	f003 0320 	and.w	r3, r3, #32
 80049e8:	2b20      	cmp	r3, #32
 80049ea:	d107      	bne.n	80049fc <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f06f 0220 	mvn.w	r2, #32
 80049f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80049f6:	6878      	ldr	r0, [r7, #4]
 80049f8:	f000 fe6a 	bl	80056d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	691b      	ldr	r3, [r3, #16]
 8004a02:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a06:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a0a:	d10f      	bne.n	8004a2c <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	68db      	ldr	r3, [r3, #12]
 8004a12:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a16:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a1a:	d107      	bne.n	8004a2c <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8004a24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8004a26:	6878      	ldr	r0, [r7, #4]
 8004a28:	f000 fe70 	bl	800570c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	691b      	ldr	r3, [r3, #16]
 8004a32:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a36:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004a3a:	d10f      	bne.n	8004a5c <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	68db      	ldr	r3, [r3, #12]
 8004a42:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a46:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004a4a:	d107      	bne.n	8004a5c <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8004a54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8004a56:	6878      	ldr	r0, [r7, #4]
 8004a58:	f000 fe62 	bl	8005720 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	691b      	ldr	r3, [r3, #16]
 8004a62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a66:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a6a:	d10f      	bne.n	8004a8c <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	68db      	ldr	r3, [r3, #12]
 8004a72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a76:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a7a:	d107      	bne.n	8004a8c <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8004a84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8004a86:	6878      	ldr	r0, [r7, #4]
 8004a88:	f000 fe54 	bl	8005734 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	691b      	ldr	r3, [r3, #16]
 8004a92:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004a96:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004a9a:	d10f      	bne.n	8004abc <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	68db      	ldr	r3, [r3, #12]
 8004aa2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004aa6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004aaa:	d107      	bne.n	8004abc <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8004ab4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8004ab6:	6878      	ldr	r0, [r7, #4]
 8004ab8:	f000 fe46 	bl	8005748 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004abc:	bf00      	nop
 8004abe:	3708      	adds	r7, #8
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	bd80      	pop	{r7, pc}

08004ac4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b084      	sub	sp, #16
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	60f8      	str	r0, [r7, #12]
 8004acc:	60b9      	str	r1, [r7, #8]
 8004ace:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ad6:	2b01      	cmp	r3, #1
 8004ad8:	d101      	bne.n	8004ade <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004ada:	2302      	movs	r3, #2
 8004adc:	e0fd      	b.n	8004cda <HAL_TIM_PWM_ConfigChannel+0x216>
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	2201      	movs	r2, #1
 8004ae2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2b14      	cmp	r3, #20
 8004aea:	f200 80f0 	bhi.w	8004cce <HAL_TIM_PWM_ConfigChannel+0x20a>
 8004aee:	a201      	add	r2, pc, #4	; (adr r2, 8004af4 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8004af0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004af4:	08004b49 	.word	0x08004b49
 8004af8:	08004ccf 	.word	0x08004ccf
 8004afc:	08004ccf 	.word	0x08004ccf
 8004b00:	08004ccf 	.word	0x08004ccf
 8004b04:	08004b89 	.word	0x08004b89
 8004b08:	08004ccf 	.word	0x08004ccf
 8004b0c:	08004ccf 	.word	0x08004ccf
 8004b10:	08004ccf 	.word	0x08004ccf
 8004b14:	08004bcb 	.word	0x08004bcb
 8004b18:	08004ccf 	.word	0x08004ccf
 8004b1c:	08004ccf 	.word	0x08004ccf
 8004b20:	08004ccf 	.word	0x08004ccf
 8004b24:	08004c0b 	.word	0x08004c0b
 8004b28:	08004ccf 	.word	0x08004ccf
 8004b2c:	08004ccf 	.word	0x08004ccf
 8004b30:	08004ccf 	.word	0x08004ccf
 8004b34:	08004c4d 	.word	0x08004c4d
 8004b38:	08004ccf 	.word	0x08004ccf
 8004b3c:	08004ccf 	.word	0x08004ccf
 8004b40:	08004ccf 	.word	0x08004ccf
 8004b44:	08004c8d 	.word	0x08004c8d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	68b9      	ldr	r1, [r7, #8]
 8004b4e:	4618      	mov	r0, r3
 8004b50:	f000 f980 	bl	8004e54 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	699a      	ldr	r2, [r3, #24]
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f042 0208 	orr.w	r2, r2, #8
 8004b62:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	699a      	ldr	r2, [r3, #24]
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f022 0204 	bic.w	r2, r2, #4
 8004b72:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	6999      	ldr	r1, [r3, #24]
 8004b7a:	68bb      	ldr	r3, [r7, #8]
 8004b7c:	691a      	ldr	r2, [r3, #16]
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	430a      	orrs	r2, r1
 8004b84:	619a      	str	r2, [r3, #24]
      break;
 8004b86:	e0a3      	b.n	8004cd0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	68b9      	ldr	r1, [r7, #8]
 8004b8e:	4618      	mov	r0, r3
 8004b90:	f000 f9f0 	bl	8004f74 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	699a      	ldr	r2, [r3, #24]
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ba2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	699a      	ldr	r2, [r3, #24]
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004bb2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	6999      	ldr	r1, [r3, #24]
 8004bba:	68bb      	ldr	r3, [r7, #8]
 8004bbc:	691b      	ldr	r3, [r3, #16]
 8004bbe:	021a      	lsls	r2, r3, #8
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	430a      	orrs	r2, r1
 8004bc6:	619a      	str	r2, [r3, #24]
      break;
 8004bc8:	e082      	b.n	8004cd0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	68b9      	ldr	r1, [r7, #8]
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	f000 fa59 	bl	8005088 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	69da      	ldr	r2, [r3, #28]
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f042 0208 	orr.w	r2, r2, #8
 8004be4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	69da      	ldr	r2, [r3, #28]
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f022 0204 	bic.w	r2, r2, #4
 8004bf4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	69d9      	ldr	r1, [r3, #28]
 8004bfc:	68bb      	ldr	r3, [r7, #8]
 8004bfe:	691a      	ldr	r2, [r3, #16]
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	430a      	orrs	r2, r1
 8004c06:	61da      	str	r2, [r3, #28]
      break;
 8004c08:	e062      	b.n	8004cd0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	68b9      	ldr	r1, [r7, #8]
 8004c10:	4618      	mov	r0, r3
 8004c12:	f000 fac1 	bl	8005198 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	69da      	ldr	r2, [r3, #28]
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c24:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	69da      	ldr	r2, [r3, #28]
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c34:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	69d9      	ldr	r1, [r3, #28]
 8004c3c:	68bb      	ldr	r3, [r7, #8]
 8004c3e:	691b      	ldr	r3, [r3, #16]
 8004c40:	021a      	lsls	r2, r3, #8
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	430a      	orrs	r2, r1
 8004c48:	61da      	str	r2, [r3, #28]
      break;
 8004c4a:	e041      	b.n	8004cd0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	68b9      	ldr	r1, [r7, #8]
 8004c52:	4618      	mov	r0, r3
 8004c54:	f000 fb2a 	bl	80052ac <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f042 0208 	orr.w	r2, r2, #8
 8004c66:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f022 0204 	bic.w	r2, r2, #4
 8004c76:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004c7e:	68bb      	ldr	r3, [r7, #8]
 8004c80:	691a      	ldr	r2, [r3, #16]
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	430a      	orrs	r2, r1
 8004c88:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8004c8a:	e021      	b.n	8004cd0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	68b9      	ldr	r1, [r7, #8]
 8004c92:	4618      	mov	r0, r3
 8004c94:	f000 fb6e 	bl	8005374 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ca6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004cb6:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004cbe:	68bb      	ldr	r3, [r7, #8]
 8004cc0:	691b      	ldr	r3, [r3, #16]
 8004cc2:	021a      	lsls	r2, r3, #8
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	430a      	orrs	r2, r1
 8004cca:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8004ccc:	e000      	b.n	8004cd0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8004cce:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004cd8:	2300      	movs	r3, #0
}
 8004cda:	4618      	mov	r0, r3
 8004cdc:	3710      	adds	r7, #16
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	bd80      	pop	{r7, pc}
 8004ce2:	bf00      	nop

08004ce4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004ce4:	b480      	push	{r7}
 8004ce6:	b083      	sub	sp, #12
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004cec:	bf00      	nop
 8004cee:	370c      	adds	r7, #12
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf6:	4770      	bx	lr

08004cf8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004cf8:	b480      	push	{r7}
 8004cfa:	b083      	sub	sp, #12
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004d00:	bf00      	nop
 8004d02:	370c      	adds	r7, #12
 8004d04:	46bd      	mov	sp, r7
 8004d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0a:	4770      	bx	lr

08004d0c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004d0c:	b480      	push	{r7}
 8004d0e:	b083      	sub	sp, #12
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004d14:	bf00      	nop
 8004d16:	370c      	adds	r7, #12
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1e:	4770      	bx	lr

08004d20 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004d20:	b480      	push	{r7}
 8004d22:	b083      	sub	sp, #12
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004d28:	bf00      	nop
 8004d2a:	370c      	adds	r7, #12
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d32:	4770      	bx	lr

08004d34 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004d34:	b480      	push	{r7}
 8004d36:	b085      	sub	sp, #20
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
 8004d3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	4a3c      	ldr	r2, [pc, #240]	; (8004e38 <TIM_Base_SetConfig+0x104>)
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d00f      	beq.n	8004d6c <TIM_Base_SetConfig+0x38>
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d52:	d00b      	beq.n	8004d6c <TIM_Base_SetConfig+0x38>
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	4a39      	ldr	r2, [pc, #228]	; (8004e3c <TIM_Base_SetConfig+0x108>)
 8004d58:	4293      	cmp	r3, r2
 8004d5a:	d007      	beq.n	8004d6c <TIM_Base_SetConfig+0x38>
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	4a38      	ldr	r2, [pc, #224]	; (8004e40 <TIM_Base_SetConfig+0x10c>)
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d003      	beq.n	8004d6c <TIM_Base_SetConfig+0x38>
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	4a37      	ldr	r2, [pc, #220]	; (8004e44 <TIM_Base_SetConfig+0x110>)
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	d108      	bne.n	8004d7e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d72:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	685b      	ldr	r3, [r3, #4]
 8004d78:	68fa      	ldr	r2, [r7, #12]
 8004d7a:	4313      	orrs	r3, r2
 8004d7c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	4a2d      	ldr	r2, [pc, #180]	; (8004e38 <TIM_Base_SetConfig+0x104>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d01b      	beq.n	8004dbe <TIM_Base_SetConfig+0x8a>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d8c:	d017      	beq.n	8004dbe <TIM_Base_SetConfig+0x8a>
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	4a2a      	ldr	r2, [pc, #168]	; (8004e3c <TIM_Base_SetConfig+0x108>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d013      	beq.n	8004dbe <TIM_Base_SetConfig+0x8a>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	4a29      	ldr	r2, [pc, #164]	; (8004e40 <TIM_Base_SetConfig+0x10c>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d00f      	beq.n	8004dbe <TIM_Base_SetConfig+0x8a>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	4a28      	ldr	r2, [pc, #160]	; (8004e44 <TIM_Base_SetConfig+0x110>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d00b      	beq.n	8004dbe <TIM_Base_SetConfig+0x8a>
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	4a27      	ldr	r2, [pc, #156]	; (8004e48 <TIM_Base_SetConfig+0x114>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d007      	beq.n	8004dbe <TIM_Base_SetConfig+0x8a>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	4a26      	ldr	r2, [pc, #152]	; (8004e4c <TIM_Base_SetConfig+0x118>)
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d003      	beq.n	8004dbe <TIM_Base_SetConfig+0x8a>
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	4a25      	ldr	r2, [pc, #148]	; (8004e50 <TIM_Base_SetConfig+0x11c>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d108      	bne.n	8004dd0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004dc4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	68db      	ldr	r3, [r3, #12]
 8004dca:	68fa      	ldr	r2, [r7, #12]
 8004dcc:	4313      	orrs	r3, r2
 8004dce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	695b      	ldr	r3, [r3, #20]
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	68fa      	ldr	r2, [r7, #12]
 8004de2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	689a      	ldr	r2, [r3, #8]
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	681a      	ldr	r2, [r3, #0]
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	4a10      	ldr	r2, [pc, #64]	; (8004e38 <TIM_Base_SetConfig+0x104>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d00f      	beq.n	8004e1c <TIM_Base_SetConfig+0xe8>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	4a11      	ldr	r2, [pc, #68]	; (8004e44 <TIM_Base_SetConfig+0x110>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d00b      	beq.n	8004e1c <TIM_Base_SetConfig+0xe8>
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	4a10      	ldr	r2, [pc, #64]	; (8004e48 <TIM_Base_SetConfig+0x114>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d007      	beq.n	8004e1c <TIM_Base_SetConfig+0xe8>
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	4a0f      	ldr	r2, [pc, #60]	; (8004e4c <TIM_Base_SetConfig+0x118>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d003      	beq.n	8004e1c <TIM_Base_SetConfig+0xe8>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	4a0e      	ldr	r2, [pc, #56]	; (8004e50 <TIM_Base_SetConfig+0x11c>)
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	d103      	bne.n	8004e24 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	691a      	ldr	r2, [r3, #16]
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2201      	movs	r2, #1
 8004e28:	615a      	str	r2, [r3, #20]
}
 8004e2a:	bf00      	nop
 8004e2c:	3714      	adds	r7, #20
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e34:	4770      	bx	lr
 8004e36:	bf00      	nop
 8004e38:	40012c00 	.word	0x40012c00
 8004e3c:	40000400 	.word	0x40000400
 8004e40:	40000800 	.word	0x40000800
 8004e44:	40013400 	.word	0x40013400
 8004e48:	40014000 	.word	0x40014000
 8004e4c:	40014400 	.word	0x40014400
 8004e50:	40014800 	.word	0x40014800

08004e54 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004e54:	b480      	push	{r7}
 8004e56:	b087      	sub	sp, #28
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
 8004e5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6a1b      	ldr	r3, [r3, #32]
 8004e62:	f023 0201 	bic.w	r2, r3, #1
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6a1b      	ldr	r3, [r3, #32]
 8004e6e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	685b      	ldr	r3, [r3, #4]
 8004e74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	699b      	ldr	r3, [r3, #24]
 8004e7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	f023 0303 	bic.w	r3, r3, #3
 8004e8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	68fa      	ldr	r2, [r7, #12]
 8004e96:	4313      	orrs	r3, r2
 8004e98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004e9a:	697b      	ldr	r3, [r7, #20]
 8004e9c:	f023 0302 	bic.w	r3, r3, #2
 8004ea0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	689b      	ldr	r3, [r3, #8]
 8004ea6:	697a      	ldr	r2, [r7, #20]
 8004ea8:	4313      	orrs	r3, r2
 8004eaa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	4a2c      	ldr	r2, [pc, #176]	; (8004f60 <TIM_OC1_SetConfig+0x10c>)
 8004eb0:	4293      	cmp	r3, r2
 8004eb2:	d00f      	beq.n	8004ed4 <TIM_OC1_SetConfig+0x80>
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	4a2b      	ldr	r2, [pc, #172]	; (8004f64 <TIM_OC1_SetConfig+0x110>)
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	d00b      	beq.n	8004ed4 <TIM_OC1_SetConfig+0x80>
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	4a2a      	ldr	r2, [pc, #168]	; (8004f68 <TIM_OC1_SetConfig+0x114>)
 8004ec0:	4293      	cmp	r3, r2
 8004ec2:	d007      	beq.n	8004ed4 <TIM_OC1_SetConfig+0x80>
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	4a29      	ldr	r2, [pc, #164]	; (8004f6c <TIM_OC1_SetConfig+0x118>)
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d003      	beq.n	8004ed4 <TIM_OC1_SetConfig+0x80>
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	4a28      	ldr	r2, [pc, #160]	; (8004f70 <TIM_OC1_SetConfig+0x11c>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d10c      	bne.n	8004eee <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004ed4:	697b      	ldr	r3, [r7, #20]
 8004ed6:	f023 0308 	bic.w	r3, r3, #8
 8004eda:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	68db      	ldr	r3, [r3, #12]
 8004ee0:	697a      	ldr	r2, [r7, #20]
 8004ee2:	4313      	orrs	r3, r2
 8004ee4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004ee6:	697b      	ldr	r3, [r7, #20]
 8004ee8:	f023 0304 	bic.w	r3, r3, #4
 8004eec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	4a1b      	ldr	r2, [pc, #108]	; (8004f60 <TIM_OC1_SetConfig+0x10c>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d00f      	beq.n	8004f16 <TIM_OC1_SetConfig+0xc2>
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	4a1a      	ldr	r2, [pc, #104]	; (8004f64 <TIM_OC1_SetConfig+0x110>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d00b      	beq.n	8004f16 <TIM_OC1_SetConfig+0xc2>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	4a19      	ldr	r2, [pc, #100]	; (8004f68 <TIM_OC1_SetConfig+0x114>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d007      	beq.n	8004f16 <TIM_OC1_SetConfig+0xc2>
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	4a18      	ldr	r2, [pc, #96]	; (8004f6c <TIM_OC1_SetConfig+0x118>)
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d003      	beq.n	8004f16 <TIM_OC1_SetConfig+0xc2>
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	4a17      	ldr	r2, [pc, #92]	; (8004f70 <TIM_OC1_SetConfig+0x11c>)
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d111      	bne.n	8004f3a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004f16:	693b      	ldr	r3, [r7, #16]
 8004f18:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004f1c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004f1e:	693b      	ldr	r3, [r7, #16]
 8004f20:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004f24:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	695b      	ldr	r3, [r3, #20]
 8004f2a:	693a      	ldr	r2, [r7, #16]
 8004f2c:	4313      	orrs	r3, r2
 8004f2e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	699b      	ldr	r3, [r3, #24]
 8004f34:	693a      	ldr	r2, [r7, #16]
 8004f36:	4313      	orrs	r3, r2
 8004f38:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	693a      	ldr	r2, [r7, #16]
 8004f3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	68fa      	ldr	r2, [r7, #12]
 8004f44:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	685a      	ldr	r2, [r3, #4]
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	697a      	ldr	r2, [r7, #20]
 8004f52:	621a      	str	r2, [r3, #32]
}
 8004f54:	bf00      	nop
 8004f56:	371c      	adds	r7, #28
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5e:	4770      	bx	lr
 8004f60:	40012c00 	.word	0x40012c00
 8004f64:	40013400 	.word	0x40013400
 8004f68:	40014000 	.word	0x40014000
 8004f6c:	40014400 	.word	0x40014400
 8004f70:	40014800 	.word	0x40014800

08004f74 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004f74:	b480      	push	{r7}
 8004f76:	b087      	sub	sp, #28
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
 8004f7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6a1b      	ldr	r3, [r3, #32]
 8004f82:	f023 0210 	bic.w	r2, r3, #16
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6a1b      	ldr	r3, [r3, #32]
 8004f8e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	685b      	ldr	r3, [r3, #4]
 8004f94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	699b      	ldr	r3, [r3, #24]
 8004f9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004fa2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004fa6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	021b      	lsls	r3, r3, #8
 8004fb6:	68fa      	ldr	r2, [r7, #12]
 8004fb8:	4313      	orrs	r3, r2
 8004fba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004fbc:	697b      	ldr	r3, [r7, #20]
 8004fbe:	f023 0320 	bic.w	r3, r3, #32
 8004fc2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	689b      	ldr	r3, [r3, #8]
 8004fc8:	011b      	lsls	r3, r3, #4
 8004fca:	697a      	ldr	r2, [r7, #20]
 8004fcc:	4313      	orrs	r3, r2
 8004fce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	4a28      	ldr	r2, [pc, #160]	; (8005074 <TIM_OC2_SetConfig+0x100>)
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d003      	beq.n	8004fe0 <TIM_OC2_SetConfig+0x6c>
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	4a27      	ldr	r2, [pc, #156]	; (8005078 <TIM_OC2_SetConfig+0x104>)
 8004fdc:	4293      	cmp	r3, r2
 8004fde:	d10d      	bne.n	8004ffc <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004fe0:	697b      	ldr	r3, [r7, #20]
 8004fe2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004fe6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	68db      	ldr	r3, [r3, #12]
 8004fec:	011b      	lsls	r3, r3, #4
 8004fee:	697a      	ldr	r2, [r7, #20]
 8004ff0:	4313      	orrs	r3, r2
 8004ff2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004ff4:	697b      	ldr	r3, [r7, #20]
 8004ff6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ffa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	4a1d      	ldr	r2, [pc, #116]	; (8005074 <TIM_OC2_SetConfig+0x100>)
 8005000:	4293      	cmp	r3, r2
 8005002:	d00f      	beq.n	8005024 <TIM_OC2_SetConfig+0xb0>
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	4a1c      	ldr	r2, [pc, #112]	; (8005078 <TIM_OC2_SetConfig+0x104>)
 8005008:	4293      	cmp	r3, r2
 800500a:	d00b      	beq.n	8005024 <TIM_OC2_SetConfig+0xb0>
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	4a1b      	ldr	r2, [pc, #108]	; (800507c <TIM_OC2_SetConfig+0x108>)
 8005010:	4293      	cmp	r3, r2
 8005012:	d007      	beq.n	8005024 <TIM_OC2_SetConfig+0xb0>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	4a1a      	ldr	r2, [pc, #104]	; (8005080 <TIM_OC2_SetConfig+0x10c>)
 8005018:	4293      	cmp	r3, r2
 800501a:	d003      	beq.n	8005024 <TIM_OC2_SetConfig+0xb0>
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	4a19      	ldr	r2, [pc, #100]	; (8005084 <TIM_OC2_SetConfig+0x110>)
 8005020:	4293      	cmp	r3, r2
 8005022:	d113      	bne.n	800504c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005024:	693b      	ldr	r3, [r7, #16]
 8005026:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800502a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800502c:	693b      	ldr	r3, [r7, #16]
 800502e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005032:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	695b      	ldr	r3, [r3, #20]
 8005038:	009b      	lsls	r3, r3, #2
 800503a:	693a      	ldr	r2, [r7, #16]
 800503c:	4313      	orrs	r3, r2
 800503e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	699b      	ldr	r3, [r3, #24]
 8005044:	009b      	lsls	r3, r3, #2
 8005046:	693a      	ldr	r2, [r7, #16]
 8005048:	4313      	orrs	r3, r2
 800504a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	693a      	ldr	r2, [r7, #16]
 8005050:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	68fa      	ldr	r2, [r7, #12]
 8005056:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	685a      	ldr	r2, [r3, #4]
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	697a      	ldr	r2, [r7, #20]
 8005064:	621a      	str	r2, [r3, #32]
}
 8005066:	bf00      	nop
 8005068:	371c      	adds	r7, #28
 800506a:	46bd      	mov	sp, r7
 800506c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005070:	4770      	bx	lr
 8005072:	bf00      	nop
 8005074:	40012c00 	.word	0x40012c00
 8005078:	40013400 	.word	0x40013400
 800507c:	40014000 	.word	0x40014000
 8005080:	40014400 	.word	0x40014400
 8005084:	40014800 	.word	0x40014800

08005088 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005088:	b480      	push	{r7}
 800508a:	b087      	sub	sp, #28
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
 8005090:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6a1b      	ldr	r3, [r3, #32]
 8005096:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6a1b      	ldr	r3, [r3, #32]
 80050a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	685b      	ldr	r3, [r3, #4]
 80050a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	69db      	ldr	r3, [r3, #28]
 80050ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80050b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	f023 0303 	bic.w	r3, r3, #3
 80050c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	68fa      	ldr	r2, [r7, #12]
 80050ca:	4313      	orrs	r3, r2
 80050cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80050ce:	697b      	ldr	r3, [r7, #20]
 80050d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80050d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	689b      	ldr	r3, [r3, #8]
 80050da:	021b      	lsls	r3, r3, #8
 80050dc:	697a      	ldr	r2, [r7, #20]
 80050de:	4313      	orrs	r3, r2
 80050e0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	4a27      	ldr	r2, [pc, #156]	; (8005184 <TIM_OC3_SetConfig+0xfc>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d003      	beq.n	80050f2 <TIM_OC3_SetConfig+0x6a>
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	4a26      	ldr	r2, [pc, #152]	; (8005188 <TIM_OC3_SetConfig+0x100>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d10d      	bne.n	800510e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80050f2:	697b      	ldr	r3, [r7, #20]
 80050f4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80050f8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	68db      	ldr	r3, [r3, #12]
 80050fe:	021b      	lsls	r3, r3, #8
 8005100:	697a      	ldr	r2, [r7, #20]
 8005102:	4313      	orrs	r3, r2
 8005104:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005106:	697b      	ldr	r3, [r7, #20]
 8005108:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800510c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	4a1c      	ldr	r2, [pc, #112]	; (8005184 <TIM_OC3_SetConfig+0xfc>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d00f      	beq.n	8005136 <TIM_OC3_SetConfig+0xae>
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	4a1b      	ldr	r2, [pc, #108]	; (8005188 <TIM_OC3_SetConfig+0x100>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d00b      	beq.n	8005136 <TIM_OC3_SetConfig+0xae>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	4a1a      	ldr	r2, [pc, #104]	; (800518c <TIM_OC3_SetConfig+0x104>)
 8005122:	4293      	cmp	r3, r2
 8005124:	d007      	beq.n	8005136 <TIM_OC3_SetConfig+0xae>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	4a19      	ldr	r2, [pc, #100]	; (8005190 <TIM_OC3_SetConfig+0x108>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d003      	beq.n	8005136 <TIM_OC3_SetConfig+0xae>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	4a18      	ldr	r2, [pc, #96]	; (8005194 <TIM_OC3_SetConfig+0x10c>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d113      	bne.n	800515e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005136:	693b      	ldr	r3, [r7, #16]
 8005138:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800513c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800513e:	693b      	ldr	r3, [r7, #16]
 8005140:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005144:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	695b      	ldr	r3, [r3, #20]
 800514a:	011b      	lsls	r3, r3, #4
 800514c:	693a      	ldr	r2, [r7, #16]
 800514e:	4313      	orrs	r3, r2
 8005150:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	699b      	ldr	r3, [r3, #24]
 8005156:	011b      	lsls	r3, r3, #4
 8005158:	693a      	ldr	r2, [r7, #16]
 800515a:	4313      	orrs	r3, r2
 800515c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	693a      	ldr	r2, [r7, #16]
 8005162:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	68fa      	ldr	r2, [r7, #12]
 8005168:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	685a      	ldr	r2, [r3, #4]
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	697a      	ldr	r2, [r7, #20]
 8005176:	621a      	str	r2, [r3, #32]
}
 8005178:	bf00      	nop
 800517a:	371c      	adds	r7, #28
 800517c:	46bd      	mov	sp, r7
 800517e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005182:	4770      	bx	lr
 8005184:	40012c00 	.word	0x40012c00
 8005188:	40013400 	.word	0x40013400
 800518c:	40014000 	.word	0x40014000
 8005190:	40014400 	.word	0x40014400
 8005194:	40014800 	.word	0x40014800

08005198 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005198:	b480      	push	{r7}
 800519a:	b087      	sub	sp, #28
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
 80051a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6a1b      	ldr	r3, [r3, #32]
 80051a6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6a1b      	ldr	r3, [r3, #32]
 80051b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	685b      	ldr	r3, [r3, #4]
 80051b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	69db      	ldr	r3, [r3, #28]
 80051be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80051c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	021b      	lsls	r3, r3, #8
 80051da:	68fa      	ldr	r2, [r7, #12]
 80051dc:	4313      	orrs	r3, r2
 80051de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80051e0:	697b      	ldr	r3, [r7, #20]
 80051e2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80051e6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	689b      	ldr	r3, [r3, #8]
 80051ec:	031b      	lsls	r3, r3, #12
 80051ee:	697a      	ldr	r2, [r7, #20]
 80051f0:	4313      	orrs	r3, r2
 80051f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	4a28      	ldr	r2, [pc, #160]	; (8005298 <TIM_OC4_SetConfig+0x100>)
 80051f8:	4293      	cmp	r3, r2
 80051fa:	d003      	beq.n	8005204 <TIM_OC4_SetConfig+0x6c>
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	4a27      	ldr	r2, [pc, #156]	; (800529c <TIM_OC4_SetConfig+0x104>)
 8005200:	4293      	cmp	r3, r2
 8005202:	d10d      	bne.n	8005220 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8005204:	697b      	ldr	r3, [r7, #20]
 8005206:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800520a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	68db      	ldr	r3, [r3, #12]
 8005210:	031b      	lsls	r3, r3, #12
 8005212:	697a      	ldr	r2, [r7, #20]
 8005214:	4313      	orrs	r3, r2
 8005216:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8005218:	697b      	ldr	r3, [r7, #20]
 800521a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800521e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	4a1d      	ldr	r2, [pc, #116]	; (8005298 <TIM_OC4_SetConfig+0x100>)
 8005224:	4293      	cmp	r3, r2
 8005226:	d00f      	beq.n	8005248 <TIM_OC4_SetConfig+0xb0>
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	4a1c      	ldr	r2, [pc, #112]	; (800529c <TIM_OC4_SetConfig+0x104>)
 800522c:	4293      	cmp	r3, r2
 800522e:	d00b      	beq.n	8005248 <TIM_OC4_SetConfig+0xb0>
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	4a1b      	ldr	r2, [pc, #108]	; (80052a0 <TIM_OC4_SetConfig+0x108>)
 8005234:	4293      	cmp	r3, r2
 8005236:	d007      	beq.n	8005248 <TIM_OC4_SetConfig+0xb0>
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	4a1a      	ldr	r2, [pc, #104]	; (80052a4 <TIM_OC4_SetConfig+0x10c>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d003      	beq.n	8005248 <TIM_OC4_SetConfig+0xb0>
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	4a19      	ldr	r2, [pc, #100]	; (80052a8 <TIM_OC4_SetConfig+0x110>)
 8005244:	4293      	cmp	r3, r2
 8005246:	d113      	bne.n	8005270 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005248:	693b      	ldr	r3, [r7, #16]
 800524a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800524e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8005250:	693b      	ldr	r3, [r7, #16]
 8005252:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005256:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	695b      	ldr	r3, [r3, #20]
 800525c:	019b      	lsls	r3, r3, #6
 800525e:	693a      	ldr	r2, [r7, #16]
 8005260:	4313      	orrs	r3, r2
 8005262:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	699b      	ldr	r3, [r3, #24]
 8005268:	019b      	lsls	r3, r3, #6
 800526a:	693a      	ldr	r2, [r7, #16]
 800526c:	4313      	orrs	r3, r2
 800526e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	693a      	ldr	r2, [r7, #16]
 8005274:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	68fa      	ldr	r2, [r7, #12]
 800527a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	685a      	ldr	r2, [r3, #4]
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	697a      	ldr	r2, [r7, #20]
 8005288:	621a      	str	r2, [r3, #32]
}
 800528a:	bf00      	nop
 800528c:	371c      	adds	r7, #28
 800528e:	46bd      	mov	sp, r7
 8005290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005294:	4770      	bx	lr
 8005296:	bf00      	nop
 8005298:	40012c00 	.word	0x40012c00
 800529c:	40013400 	.word	0x40013400
 80052a0:	40014000 	.word	0x40014000
 80052a4:	40014400 	.word	0x40014400
 80052a8:	40014800 	.word	0x40014800

080052ac <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80052ac:	b480      	push	{r7}
 80052ae:	b087      	sub	sp, #28
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
 80052b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6a1b      	ldr	r3, [r3, #32]
 80052ba:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6a1b      	ldr	r3, [r3, #32]
 80052c6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	685b      	ldr	r3, [r3, #4]
 80052cc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80052da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	68fa      	ldr	r2, [r7, #12]
 80052e6:	4313      	orrs	r3, r2
 80052e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80052ea:	693b      	ldr	r3, [r7, #16]
 80052ec:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80052f0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	689b      	ldr	r3, [r3, #8]
 80052f6:	041b      	lsls	r3, r3, #16
 80052f8:	693a      	ldr	r2, [r7, #16]
 80052fa:	4313      	orrs	r3, r2
 80052fc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	4a17      	ldr	r2, [pc, #92]	; (8005360 <TIM_OC5_SetConfig+0xb4>)
 8005302:	4293      	cmp	r3, r2
 8005304:	d00f      	beq.n	8005326 <TIM_OC5_SetConfig+0x7a>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	4a16      	ldr	r2, [pc, #88]	; (8005364 <TIM_OC5_SetConfig+0xb8>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d00b      	beq.n	8005326 <TIM_OC5_SetConfig+0x7a>
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	4a15      	ldr	r2, [pc, #84]	; (8005368 <TIM_OC5_SetConfig+0xbc>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d007      	beq.n	8005326 <TIM_OC5_SetConfig+0x7a>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	4a14      	ldr	r2, [pc, #80]	; (800536c <TIM_OC5_SetConfig+0xc0>)
 800531a:	4293      	cmp	r3, r2
 800531c:	d003      	beq.n	8005326 <TIM_OC5_SetConfig+0x7a>
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	4a13      	ldr	r2, [pc, #76]	; (8005370 <TIM_OC5_SetConfig+0xc4>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d109      	bne.n	800533a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005326:	697b      	ldr	r3, [r7, #20]
 8005328:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800532c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	695b      	ldr	r3, [r3, #20]
 8005332:	021b      	lsls	r3, r3, #8
 8005334:	697a      	ldr	r2, [r7, #20]
 8005336:	4313      	orrs	r3, r2
 8005338:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	697a      	ldr	r2, [r7, #20]
 800533e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	68fa      	ldr	r2, [r7, #12]
 8005344:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	685a      	ldr	r2, [r3, #4]
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	693a      	ldr	r2, [r7, #16]
 8005352:	621a      	str	r2, [r3, #32]
}
 8005354:	bf00      	nop
 8005356:	371c      	adds	r7, #28
 8005358:	46bd      	mov	sp, r7
 800535a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535e:	4770      	bx	lr
 8005360:	40012c00 	.word	0x40012c00
 8005364:	40013400 	.word	0x40013400
 8005368:	40014000 	.word	0x40014000
 800536c:	40014400 	.word	0x40014400
 8005370:	40014800 	.word	0x40014800

08005374 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005374:	b480      	push	{r7}
 8005376:	b087      	sub	sp, #28
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
 800537c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6a1b      	ldr	r3, [r3, #32]
 8005382:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6a1b      	ldr	r3, [r3, #32]
 800538e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	685b      	ldr	r3, [r3, #4]
 8005394:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800539a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80053a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	021b      	lsls	r3, r3, #8
 80053ae:	68fa      	ldr	r2, [r7, #12]
 80053b0:	4313      	orrs	r3, r2
 80053b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80053b4:	693b      	ldr	r3, [r7, #16]
 80053b6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80053ba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	689b      	ldr	r3, [r3, #8]
 80053c0:	051b      	lsls	r3, r3, #20
 80053c2:	693a      	ldr	r2, [r7, #16]
 80053c4:	4313      	orrs	r3, r2
 80053c6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	4a18      	ldr	r2, [pc, #96]	; (800542c <TIM_OC6_SetConfig+0xb8>)
 80053cc:	4293      	cmp	r3, r2
 80053ce:	d00f      	beq.n	80053f0 <TIM_OC6_SetConfig+0x7c>
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	4a17      	ldr	r2, [pc, #92]	; (8005430 <TIM_OC6_SetConfig+0xbc>)
 80053d4:	4293      	cmp	r3, r2
 80053d6:	d00b      	beq.n	80053f0 <TIM_OC6_SetConfig+0x7c>
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	4a16      	ldr	r2, [pc, #88]	; (8005434 <TIM_OC6_SetConfig+0xc0>)
 80053dc:	4293      	cmp	r3, r2
 80053de:	d007      	beq.n	80053f0 <TIM_OC6_SetConfig+0x7c>
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	4a15      	ldr	r2, [pc, #84]	; (8005438 <TIM_OC6_SetConfig+0xc4>)
 80053e4:	4293      	cmp	r3, r2
 80053e6:	d003      	beq.n	80053f0 <TIM_OC6_SetConfig+0x7c>
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	4a14      	ldr	r2, [pc, #80]	; (800543c <TIM_OC6_SetConfig+0xc8>)
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d109      	bne.n	8005404 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80053f0:	697b      	ldr	r3, [r7, #20]
 80053f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80053f6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	695b      	ldr	r3, [r3, #20]
 80053fc:	029b      	lsls	r3, r3, #10
 80053fe:	697a      	ldr	r2, [r7, #20]
 8005400:	4313      	orrs	r3, r2
 8005402:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	697a      	ldr	r2, [r7, #20]
 8005408:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	68fa      	ldr	r2, [r7, #12]
 800540e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	685a      	ldr	r2, [r3, #4]
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	693a      	ldr	r2, [r7, #16]
 800541c:	621a      	str	r2, [r3, #32]
}
 800541e:	bf00      	nop
 8005420:	371c      	adds	r7, #28
 8005422:	46bd      	mov	sp, r7
 8005424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005428:	4770      	bx	lr
 800542a:	bf00      	nop
 800542c:	40012c00 	.word	0x40012c00
 8005430:	40013400 	.word	0x40013400
 8005434:	40014000 	.word	0x40014000
 8005438:	40014400 	.word	0x40014400
 800543c:	40014800 	.word	0x40014800

08005440 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005440:	b480      	push	{r7}
 8005442:	b087      	sub	sp, #28
 8005444:	af00      	add	r7, sp, #0
 8005446:	60f8      	str	r0, [r7, #12]
 8005448:	60b9      	str	r1, [r7, #8]
 800544a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800544c:	68bb      	ldr	r3, [r7, #8]
 800544e:	f003 031f 	and.w	r3, r3, #31
 8005452:	2201      	movs	r2, #1
 8005454:	fa02 f303 	lsl.w	r3, r2, r3
 8005458:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	6a1a      	ldr	r2, [r3, #32]
 800545e:	697b      	ldr	r3, [r7, #20]
 8005460:	43db      	mvns	r3, r3
 8005462:	401a      	ands	r2, r3
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	6a1a      	ldr	r2, [r3, #32]
 800546c:	68bb      	ldr	r3, [r7, #8]
 800546e:	f003 031f 	and.w	r3, r3, #31
 8005472:	6879      	ldr	r1, [r7, #4]
 8005474:	fa01 f303 	lsl.w	r3, r1, r3
 8005478:	431a      	orrs	r2, r3
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	621a      	str	r2, [r3, #32]
}
 800547e:	bf00      	nop
 8005480:	371c      	adds	r7, #28
 8005482:	46bd      	mov	sp, r7
 8005484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005488:	4770      	bx	lr
	...

0800548c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800548c:	b480      	push	{r7}
 800548e:	b085      	sub	sp, #20
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
 8005494:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800549c:	2b01      	cmp	r3, #1
 800549e:	d101      	bne.n	80054a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80054a0:	2302      	movs	r3, #2
 80054a2:	e065      	b.n	8005570 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2201      	movs	r2, #1
 80054a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2202      	movs	r2, #2
 80054b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	685b      	ldr	r3, [r3, #4]
 80054ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	689b      	ldr	r3, [r3, #8]
 80054c2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	4a2c      	ldr	r2, [pc, #176]	; (800557c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d004      	beq.n	80054d8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	4a2b      	ldr	r2, [pc, #172]	; (8005580 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d108      	bne.n	80054ea <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80054de:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	685b      	ldr	r3, [r3, #4]
 80054e4:	68fa      	ldr	r2, [r7, #12]
 80054e6:	4313      	orrs	r3, r2
 80054e8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80054f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054f4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	68fa      	ldr	r2, [r7, #12]
 80054fc:	4313      	orrs	r3, r2
 80054fe:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	68fa      	ldr	r2, [r7, #12]
 8005506:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	4a1b      	ldr	r2, [pc, #108]	; (800557c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800550e:	4293      	cmp	r3, r2
 8005510:	d018      	beq.n	8005544 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800551a:	d013      	beq.n	8005544 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	4a18      	ldr	r2, [pc, #96]	; (8005584 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005522:	4293      	cmp	r3, r2
 8005524:	d00e      	beq.n	8005544 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	4a17      	ldr	r2, [pc, #92]	; (8005588 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800552c:	4293      	cmp	r3, r2
 800552e:	d009      	beq.n	8005544 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	4a12      	ldr	r2, [pc, #72]	; (8005580 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005536:	4293      	cmp	r3, r2
 8005538:	d004      	beq.n	8005544 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	4a13      	ldr	r2, [pc, #76]	; (800558c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005540:	4293      	cmp	r3, r2
 8005542:	d10c      	bne.n	800555e <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005544:	68bb      	ldr	r3, [r7, #8]
 8005546:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800554a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	689b      	ldr	r3, [r3, #8]
 8005550:	68ba      	ldr	r2, [r7, #8]
 8005552:	4313      	orrs	r3, r2
 8005554:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	68ba      	ldr	r2, [r7, #8]
 800555c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2201      	movs	r2, #1
 8005562:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2200      	movs	r2, #0
 800556a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800556e:	2300      	movs	r3, #0
}
 8005570:	4618      	mov	r0, r3
 8005572:	3714      	adds	r7, #20
 8005574:	46bd      	mov	sp, r7
 8005576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557a:	4770      	bx	lr
 800557c:	40012c00 	.word	0x40012c00
 8005580:	40013400 	.word	0x40013400
 8005584:	40000400 	.word	0x40000400
 8005588:	40000800 	.word	0x40000800
 800558c:	40014000 	.word	0x40014000

08005590 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005590:	b480      	push	{r7}
 8005592:	b085      	sub	sp, #20
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
 8005598:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800559a:	2300      	movs	r3, #0
 800559c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055a4:	2b01      	cmp	r3, #1
 80055a6:	d101      	bne.n	80055ac <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80055a8:	2302      	movs	r3, #2
 80055aa:	e087      	b.n	80056bc <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2201      	movs	r2, #1
 80055b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	68db      	ldr	r3, [r3, #12]
 80055be:	4313      	orrs	r3, r2
 80055c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	689b      	ldr	r3, [r3, #8]
 80055cc:	4313      	orrs	r3, r2
 80055ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	685b      	ldr	r3, [r3, #4]
 80055da:	4313      	orrs	r3, r2
 80055dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	4313      	orrs	r3, r2
 80055ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	691b      	ldr	r3, [r3, #16]
 80055f6:	4313      	orrs	r3, r2
 80055f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	695b      	ldr	r3, [r3, #20]
 8005604:	4313      	orrs	r3, r2
 8005606:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005612:	4313      	orrs	r3, r2
 8005614:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	699b      	ldr	r3, [r3, #24]
 8005620:	041b      	lsls	r3, r3, #16
 8005622:	4313      	orrs	r3, r2
 8005624:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	4a27      	ldr	r2, [pc, #156]	; (80056c8 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800562c:	4293      	cmp	r3, r2
 800562e:	d004      	beq.n	800563a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	4a25      	ldr	r2, [pc, #148]	; (80056cc <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8005636:	4293      	cmp	r3, r2
 8005638:	d106      	bne.n	8005648 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	69db      	ldr	r3, [r3, #28]
 8005644:	4313      	orrs	r3, r2
 8005646:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	4a1e      	ldr	r2, [pc, #120]	; (80056c8 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800564e:	4293      	cmp	r3, r2
 8005650:	d004      	beq.n	800565c <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	4a1d      	ldr	r2, [pc, #116]	; (80056cc <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8005658:	4293      	cmp	r3, r2
 800565a:	d126      	bne.n	80056aa <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005666:	051b      	lsls	r3, r3, #20
 8005668:	4313      	orrs	r3, r2
 800566a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	6a1b      	ldr	r3, [r3, #32]
 8005676:	4313      	orrs	r3, r2
 8005678:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005684:	4313      	orrs	r3, r2
 8005686:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	4a0e      	ldr	r2, [pc, #56]	; (80056c8 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800568e:	4293      	cmp	r3, r2
 8005690:	d004      	beq.n	800569c <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	4a0d      	ldr	r2, [pc, #52]	; (80056cc <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8005698:	4293      	cmp	r3, r2
 800569a:	d106      	bne.n	80056aa <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056a6:	4313      	orrs	r3, r2
 80056a8:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	68fa      	ldr	r2, [r7, #12]
 80056b0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	2200      	movs	r2, #0
 80056b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80056ba:	2300      	movs	r3, #0
}
 80056bc:	4618      	mov	r0, r3
 80056be:	3714      	adds	r7, #20
 80056c0:	46bd      	mov	sp, r7
 80056c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c6:	4770      	bx	lr
 80056c8:	40012c00 	.word	0x40012c00
 80056cc:	40013400 	.word	0x40013400

080056d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80056d0:	b480      	push	{r7}
 80056d2:	b083      	sub	sp, #12
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80056d8:	bf00      	nop
 80056da:	370c      	adds	r7, #12
 80056dc:	46bd      	mov	sp, r7
 80056de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e2:	4770      	bx	lr

080056e4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80056e4:	b480      	push	{r7}
 80056e6:	b083      	sub	sp, #12
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80056ec:	bf00      	nop
 80056ee:	370c      	adds	r7, #12
 80056f0:	46bd      	mov	sp, r7
 80056f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f6:	4770      	bx	lr

080056f8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80056f8:	b480      	push	{r7}
 80056fa:	b083      	sub	sp, #12
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005700:	bf00      	nop
 8005702:	370c      	adds	r7, #12
 8005704:	46bd      	mov	sp, r7
 8005706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570a:	4770      	bx	lr

0800570c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800570c:	b480      	push	{r7}
 800570e:	b083      	sub	sp, #12
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8005714:	bf00      	nop
 8005716:	370c      	adds	r7, #12
 8005718:	46bd      	mov	sp, r7
 800571a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571e:	4770      	bx	lr

08005720 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8005720:	b480      	push	{r7}
 8005722:	b083      	sub	sp, #12
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8005728:	bf00      	nop
 800572a:	370c      	adds	r7, #12
 800572c:	46bd      	mov	sp, r7
 800572e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005732:	4770      	bx	lr

08005734 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8005734:	b480      	push	{r7}
 8005736:	b083      	sub	sp, #12
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800573c:	bf00      	nop
 800573e:	370c      	adds	r7, #12
 8005740:	46bd      	mov	sp, r7
 8005742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005746:	4770      	bx	lr

08005748 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8005748:	b480      	push	{r7}
 800574a:	b083      	sub	sp, #12
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8005750:	bf00      	nop
 8005752:	370c      	adds	r7, #12
 8005754:	46bd      	mov	sp, r7
 8005756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575a:	4770      	bx	lr

0800575c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800575c:	b480      	push	{r7}
 800575e:	b085      	sub	sp, #20
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2200      	movs	r2, #0
 8005768:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800576c:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8005770:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	b29a      	uxth	r2, r3
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800577c:	2300      	movs	r3, #0
}
 800577e:	4618      	mov	r0, r3
 8005780:	3714      	adds	r7, #20
 8005782:	46bd      	mov	sp, r7
 8005784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005788:	4770      	bx	lr

0800578a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800578a:	b480      	push	{r7}
 800578c:	b085      	sub	sp, #20
 800578e:	af00      	add	r7, sp, #0
 8005790:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005792:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8005796:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800579e:	b29a      	uxth	r2, r3
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	b29b      	uxth	r3, r3
 80057a4:	43db      	mvns	r3, r3
 80057a6:	b29b      	uxth	r3, r3
 80057a8:	4013      	ands	r3, r2
 80057aa:	b29a      	uxth	r2, r3
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80057b2:	2300      	movs	r3, #0
}
 80057b4:	4618      	mov	r0, r3
 80057b6:	3714      	adds	r7, #20
 80057b8:	46bd      	mov	sp, r7
 80057ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057be:	4770      	bx	lr

080057c0 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80057c0:	b084      	sub	sp, #16
 80057c2:	b480      	push	{r7}
 80057c4:	b083      	sub	sp, #12
 80057c6:	af00      	add	r7, sp, #0
 80057c8:	6078      	str	r0, [r7, #4]
 80057ca:	f107 0014 	add.w	r0, r7, #20
 80057ce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2201      	movs	r2, #1
 80057d6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0U;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	2200      	movs	r2, #0
 80057de:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0U;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	2200      	movs	r2, #0
 80057e6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2200      	movs	r2, #0
 80057ee:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80057f2:	2300      	movs	r3, #0
}
 80057f4:	4618      	mov	r0, r3
 80057f6:	370c      	adds	r7, #12
 80057f8:	46bd      	mov	sp, r7
 80057fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fe:	b004      	add	sp, #16
 8005800:	4770      	bx	lr
	...

08005804 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005804:	b480      	push	{r7}
 8005806:	b09b      	sub	sp, #108	; 0x6c
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
 800580c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800580e:	2300      	movs	r3, #0
 8005810:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8005814:	687a      	ldr	r2, [r7, #4]
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	781b      	ldrb	r3, [r3, #0]
 800581a:	009b      	lsls	r3, r3, #2
 800581c:	4413      	add	r3, r2
 800581e:	881b      	ldrh	r3, [r3, #0]
 8005820:	b29b      	uxth	r3, r3
 8005822:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8005826:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800582a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	78db      	ldrb	r3, [r3, #3]
 8005832:	2b03      	cmp	r3, #3
 8005834:	d81f      	bhi.n	8005876 <USB_ActivateEndpoint+0x72>
 8005836:	a201      	add	r2, pc, #4	; (adr r2, 800583c <USB_ActivateEndpoint+0x38>)
 8005838:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800583c:	0800584d 	.word	0x0800584d
 8005840:	08005869 	.word	0x08005869
 8005844:	0800587f 	.word	0x0800587f
 8005848:	0800585b 	.word	0x0800585b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800584c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005850:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005854:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8005858:	e012      	b.n	8005880 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800585a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800585e:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8005862:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8005866:	e00b      	b.n	8005880 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8005868:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800586c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005870:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8005874:	e004      	b.n	8005880 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8005876:	2301      	movs	r3, #1
 8005878:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 800587c:	e000      	b.n	8005880 <USB_ActivateEndpoint+0x7c>
      break;
 800587e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8005880:	687a      	ldr	r2, [r7, #4]
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	781b      	ldrb	r3, [r3, #0]
 8005886:	009b      	lsls	r3, r3, #2
 8005888:	441a      	add	r2, r3
 800588a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800588e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005892:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005896:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800589a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800589e:	b29b      	uxth	r3, r3
 80058a0:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80058a2:	687a      	ldr	r2, [r7, #4]
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	781b      	ldrb	r3, [r3, #0]
 80058a8:	009b      	lsls	r3, r3, #2
 80058aa:	4413      	add	r3, r2
 80058ac:	881b      	ldrh	r3, [r3, #0]
 80058ae:	b29b      	uxth	r3, r3
 80058b0:	b21b      	sxth	r3, r3
 80058b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80058b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058ba:	b21a      	sxth	r2, r3
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	781b      	ldrb	r3, [r3, #0]
 80058c0:	b21b      	sxth	r3, r3
 80058c2:	4313      	orrs	r3, r2
 80058c4:	b21b      	sxth	r3, r3
 80058c6:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80058ca:	687a      	ldr	r2, [r7, #4]
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	781b      	ldrb	r3, [r3, #0]
 80058d0:	009b      	lsls	r3, r3, #2
 80058d2:	441a      	add	r2, r3
 80058d4:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80058d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80058dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80058e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80058e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058e8:	b29b      	uxth	r3, r3
 80058ea:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	7b1b      	ldrb	r3, [r3, #12]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	f040 8149 	bne.w	8005b88 <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	785b      	ldrb	r3, [r3, #1]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	f000 8084 	beq.w	8005a08 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	617b      	str	r3, [r7, #20]
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800590a:	b29b      	uxth	r3, r3
 800590c:	461a      	mov	r2, r3
 800590e:	697b      	ldr	r3, [r7, #20]
 8005910:	4413      	add	r3, r2
 8005912:	617b      	str	r3, [r7, #20]
 8005914:	683b      	ldr	r3, [r7, #0]
 8005916:	781b      	ldrb	r3, [r3, #0]
 8005918:	00da      	lsls	r2, r3, #3
 800591a:	697b      	ldr	r3, [r7, #20]
 800591c:	4413      	add	r3, r2
 800591e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005922:	613b      	str	r3, [r7, #16]
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	88db      	ldrh	r3, [r3, #6]
 8005928:	085b      	lsrs	r3, r3, #1
 800592a:	b29b      	uxth	r3, r3
 800592c:	005b      	lsls	r3, r3, #1
 800592e:	b29a      	uxth	r2, r3
 8005930:	693b      	ldr	r3, [r7, #16]
 8005932:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005934:	687a      	ldr	r2, [r7, #4]
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	781b      	ldrb	r3, [r3, #0]
 800593a:	009b      	lsls	r3, r3, #2
 800593c:	4413      	add	r3, r2
 800593e:	881b      	ldrh	r3, [r3, #0]
 8005940:	81fb      	strh	r3, [r7, #14]
 8005942:	89fb      	ldrh	r3, [r7, #14]
 8005944:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005948:	2b00      	cmp	r3, #0
 800594a:	d01b      	beq.n	8005984 <USB_ActivateEndpoint+0x180>
 800594c:	687a      	ldr	r2, [r7, #4]
 800594e:	683b      	ldr	r3, [r7, #0]
 8005950:	781b      	ldrb	r3, [r3, #0]
 8005952:	009b      	lsls	r3, r3, #2
 8005954:	4413      	add	r3, r2
 8005956:	881b      	ldrh	r3, [r3, #0]
 8005958:	b29b      	uxth	r3, r3
 800595a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800595e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005962:	81bb      	strh	r3, [r7, #12]
 8005964:	687a      	ldr	r2, [r7, #4]
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	781b      	ldrb	r3, [r3, #0]
 800596a:	009b      	lsls	r3, r3, #2
 800596c:	441a      	add	r2, r3
 800596e:	89bb      	ldrh	r3, [r7, #12]
 8005970:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005974:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005978:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800597c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005980:	b29b      	uxth	r3, r3
 8005982:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	78db      	ldrb	r3, [r3, #3]
 8005988:	2b01      	cmp	r3, #1
 800598a:	d020      	beq.n	80059ce <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800598c:	687a      	ldr	r2, [r7, #4]
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	781b      	ldrb	r3, [r3, #0]
 8005992:	009b      	lsls	r3, r3, #2
 8005994:	4413      	add	r3, r2
 8005996:	881b      	ldrh	r3, [r3, #0]
 8005998:	b29b      	uxth	r3, r3
 800599a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800599e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80059a2:	813b      	strh	r3, [r7, #8]
 80059a4:	893b      	ldrh	r3, [r7, #8]
 80059a6:	f083 0320 	eor.w	r3, r3, #32
 80059aa:	813b      	strh	r3, [r7, #8]
 80059ac:	687a      	ldr	r2, [r7, #4]
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	781b      	ldrb	r3, [r3, #0]
 80059b2:	009b      	lsls	r3, r3, #2
 80059b4:	441a      	add	r2, r3
 80059b6:	893b      	ldrh	r3, [r7, #8]
 80059b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80059bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80059c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80059c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059c8:	b29b      	uxth	r3, r3
 80059ca:	8013      	strh	r3, [r2, #0]
 80059cc:	e27f      	b.n	8005ece <USB_ActivateEndpoint+0x6ca>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80059ce:	687a      	ldr	r2, [r7, #4]
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	781b      	ldrb	r3, [r3, #0]
 80059d4:	009b      	lsls	r3, r3, #2
 80059d6:	4413      	add	r3, r2
 80059d8:	881b      	ldrh	r3, [r3, #0]
 80059da:	b29b      	uxth	r3, r3
 80059dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80059e4:	817b      	strh	r3, [r7, #10]
 80059e6:	687a      	ldr	r2, [r7, #4]
 80059e8:	683b      	ldr	r3, [r7, #0]
 80059ea:	781b      	ldrb	r3, [r3, #0]
 80059ec:	009b      	lsls	r3, r3, #2
 80059ee:	441a      	add	r2, r3
 80059f0:	897b      	ldrh	r3, [r7, #10]
 80059f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80059f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80059fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80059fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a02:	b29b      	uxth	r3, r3
 8005a04:	8013      	strh	r3, [r2, #0]
 8005a06:	e262      	b.n	8005ece <USB_ActivateEndpoint+0x6ca>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a12:	b29b      	uxth	r3, r3
 8005a14:	461a      	mov	r2, r3
 8005a16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a18:	4413      	add	r3, r2
 8005a1a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	781b      	ldrb	r3, [r3, #0]
 8005a20:	00da      	lsls	r2, r3, #3
 8005a22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a24:	4413      	add	r3, r2
 8005a26:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005a2a:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	88db      	ldrh	r3, [r3, #6]
 8005a30:	085b      	lsrs	r3, r3, #1
 8005a32:	b29b      	uxth	r3, r3
 8005a34:	005b      	lsls	r3, r3, #1
 8005a36:	b29a      	uxth	r2, r3
 8005a38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a3a:	801a      	strh	r2, [r3, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	627b      	str	r3, [r7, #36]	; 0x24
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a46:	b29b      	uxth	r3, r3
 8005a48:	461a      	mov	r2, r3
 8005a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a4c:	4413      	add	r3, r2
 8005a4e:	627b      	str	r3, [r7, #36]	; 0x24
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	781b      	ldrb	r3, [r3, #0]
 8005a54:	00da      	lsls	r2, r3, #3
 8005a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a58:	4413      	add	r3, r2
 8005a5a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005a5e:	623b      	str	r3, [r7, #32]
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	691b      	ldr	r3, [r3, #16]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d112      	bne.n	8005a8e <USB_ActivateEndpoint+0x28a>
 8005a68:	6a3b      	ldr	r3, [r7, #32]
 8005a6a:	881b      	ldrh	r3, [r3, #0]
 8005a6c:	b29b      	uxth	r3, r3
 8005a6e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005a72:	b29a      	uxth	r2, r3
 8005a74:	6a3b      	ldr	r3, [r7, #32]
 8005a76:	801a      	strh	r2, [r3, #0]
 8005a78:	6a3b      	ldr	r3, [r7, #32]
 8005a7a:	881b      	ldrh	r3, [r3, #0]
 8005a7c:	b29b      	uxth	r3, r3
 8005a7e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a82:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a86:	b29a      	uxth	r2, r3
 8005a88:	6a3b      	ldr	r3, [r7, #32]
 8005a8a:	801a      	strh	r2, [r3, #0]
 8005a8c:	e02f      	b.n	8005aee <USB_ActivateEndpoint+0x2ea>
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	691b      	ldr	r3, [r3, #16]
 8005a92:	2b3e      	cmp	r3, #62	; 0x3e
 8005a94:	d813      	bhi.n	8005abe <USB_ActivateEndpoint+0x2ba>
 8005a96:	683b      	ldr	r3, [r7, #0]
 8005a98:	691b      	ldr	r3, [r3, #16]
 8005a9a:	085b      	lsrs	r3, r3, #1
 8005a9c:	663b      	str	r3, [r7, #96]	; 0x60
 8005a9e:	683b      	ldr	r3, [r7, #0]
 8005aa0:	691b      	ldr	r3, [r3, #16]
 8005aa2:	f003 0301 	and.w	r3, r3, #1
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d002      	beq.n	8005ab0 <USB_ActivateEndpoint+0x2ac>
 8005aaa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005aac:	3301      	adds	r3, #1
 8005aae:	663b      	str	r3, [r7, #96]	; 0x60
 8005ab0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005ab2:	b29b      	uxth	r3, r3
 8005ab4:	029b      	lsls	r3, r3, #10
 8005ab6:	b29a      	uxth	r2, r3
 8005ab8:	6a3b      	ldr	r3, [r7, #32]
 8005aba:	801a      	strh	r2, [r3, #0]
 8005abc:	e017      	b.n	8005aee <USB_ActivateEndpoint+0x2ea>
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	691b      	ldr	r3, [r3, #16]
 8005ac2:	095b      	lsrs	r3, r3, #5
 8005ac4:	663b      	str	r3, [r7, #96]	; 0x60
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	691b      	ldr	r3, [r3, #16]
 8005aca:	f003 031f 	and.w	r3, r3, #31
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d102      	bne.n	8005ad8 <USB_ActivateEndpoint+0x2d4>
 8005ad2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005ad4:	3b01      	subs	r3, #1
 8005ad6:	663b      	str	r3, [r7, #96]	; 0x60
 8005ad8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005ada:	b29b      	uxth	r3, r3
 8005adc:	029b      	lsls	r3, r3, #10
 8005ade:	b29b      	uxth	r3, r3
 8005ae0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ae4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ae8:	b29a      	uxth	r2, r3
 8005aea:	6a3b      	ldr	r3, [r7, #32]
 8005aec:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005aee:	687a      	ldr	r2, [r7, #4]
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	781b      	ldrb	r3, [r3, #0]
 8005af4:	009b      	lsls	r3, r3, #2
 8005af6:	4413      	add	r3, r2
 8005af8:	881b      	ldrh	r3, [r3, #0]
 8005afa:	83fb      	strh	r3, [r7, #30]
 8005afc:	8bfb      	ldrh	r3, [r7, #30]
 8005afe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d01b      	beq.n	8005b3e <USB_ActivateEndpoint+0x33a>
 8005b06:	687a      	ldr	r2, [r7, #4]
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	781b      	ldrb	r3, [r3, #0]
 8005b0c:	009b      	lsls	r3, r3, #2
 8005b0e:	4413      	add	r3, r2
 8005b10:	881b      	ldrh	r3, [r3, #0]
 8005b12:	b29b      	uxth	r3, r3
 8005b14:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b1c:	83bb      	strh	r3, [r7, #28]
 8005b1e:	687a      	ldr	r2, [r7, #4]
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	781b      	ldrb	r3, [r3, #0]
 8005b24:	009b      	lsls	r3, r3, #2
 8005b26:	441a      	add	r2, r3
 8005b28:	8bbb      	ldrh	r3, [r7, #28]
 8005b2a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b2e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b32:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005b36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b3a:	b29b      	uxth	r3, r3
 8005b3c:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005b3e:	687a      	ldr	r2, [r7, #4]
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	781b      	ldrb	r3, [r3, #0]
 8005b44:	009b      	lsls	r3, r3, #2
 8005b46:	4413      	add	r3, r2
 8005b48:	881b      	ldrh	r3, [r3, #0]
 8005b4a:	b29b      	uxth	r3, r3
 8005b4c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005b50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b54:	837b      	strh	r3, [r7, #26]
 8005b56:	8b7b      	ldrh	r3, [r7, #26]
 8005b58:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005b5c:	837b      	strh	r3, [r7, #26]
 8005b5e:	8b7b      	ldrh	r3, [r7, #26]
 8005b60:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005b64:	837b      	strh	r3, [r7, #26]
 8005b66:	687a      	ldr	r2, [r7, #4]
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	781b      	ldrb	r3, [r3, #0]
 8005b6c:	009b      	lsls	r3, r3, #2
 8005b6e:	441a      	add	r2, r3
 8005b70:	8b7b      	ldrh	r3, [r7, #26]
 8005b72:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b76:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b82:	b29b      	uxth	r3, r3
 8005b84:	8013      	strh	r3, [r2, #0]
 8005b86:	e1a2      	b.n	8005ece <USB_ActivateEndpoint+0x6ca>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8005b88:	687a      	ldr	r2, [r7, #4]
 8005b8a:	683b      	ldr	r3, [r7, #0]
 8005b8c:	781b      	ldrb	r3, [r3, #0]
 8005b8e:	009b      	lsls	r3, r3, #2
 8005b90:	4413      	add	r3, r2
 8005b92:	881b      	ldrh	r3, [r3, #0]
 8005b94:	b29b      	uxth	r3, r3
 8005b96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b9e:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8005ba2:	687a      	ldr	r2, [r7, #4]
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	781b      	ldrb	r3, [r3, #0]
 8005ba8:	009b      	lsls	r3, r3, #2
 8005baa:	441a      	add	r2, r3
 8005bac:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8005bb0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005bb4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005bb8:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005bbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005bc0:	b29b      	uxth	r3, r3
 8005bc2:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	65bb      	str	r3, [r7, #88]	; 0x58
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005bce:	b29b      	uxth	r3, r3
 8005bd0:	461a      	mov	r2, r3
 8005bd2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005bd4:	4413      	add	r3, r2
 8005bd6:	65bb      	str	r3, [r7, #88]	; 0x58
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	781b      	ldrb	r3, [r3, #0]
 8005bdc:	00da      	lsls	r2, r3, #3
 8005bde:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005be0:	4413      	add	r3, r2
 8005be2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005be6:	657b      	str	r3, [r7, #84]	; 0x54
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	891b      	ldrh	r3, [r3, #8]
 8005bec:	085b      	lsrs	r3, r3, #1
 8005bee:	b29b      	uxth	r3, r3
 8005bf0:	005b      	lsls	r3, r3, #1
 8005bf2:	b29a      	uxth	r2, r3
 8005bf4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005bf6:	801a      	strh	r2, [r3, #0]
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	653b      	str	r3, [r7, #80]	; 0x50
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c02:	b29b      	uxth	r3, r3
 8005c04:	461a      	mov	r2, r3
 8005c06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c08:	4413      	add	r3, r2
 8005c0a:	653b      	str	r3, [r7, #80]	; 0x50
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	781b      	ldrb	r3, [r3, #0]
 8005c10:	00da      	lsls	r2, r3, #3
 8005c12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c14:	4413      	add	r3, r2
 8005c16:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005c1a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	895b      	ldrh	r3, [r3, #10]
 8005c20:	085b      	lsrs	r3, r3, #1
 8005c22:	b29b      	uxth	r3, r3
 8005c24:	005b      	lsls	r3, r3, #1
 8005c26:	b29a      	uxth	r2, r3
 8005c28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c2a:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	785b      	ldrb	r3, [r3, #1]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	f040 8091 	bne.w	8005d58 <USB_ActivateEndpoint+0x554>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005c36:	687a      	ldr	r2, [r7, #4]
 8005c38:	683b      	ldr	r3, [r7, #0]
 8005c3a:	781b      	ldrb	r3, [r3, #0]
 8005c3c:	009b      	lsls	r3, r3, #2
 8005c3e:	4413      	add	r3, r2
 8005c40:	881b      	ldrh	r3, [r3, #0]
 8005c42:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8005c44:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005c46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d01b      	beq.n	8005c86 <USB_ActivateEndpoint+0x482>
 8005c4e:	687a      	ldr	r2, [r7, #4]
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	781b      	ldrb	r3, [r3, #0]
 8005c54:	009b      	lsls	r3, r3, #2
 8005c56:	4413      	add	r3, r2
 8005c58:	881b      	ldrh	r3, [r3, #0]
 8005c5a:	b29b      	uxth	r3, r3
 8005c5c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c64:	877b      	strh	r3, [r7, #58]	; 0x3a
 8005c66:	687a      	ldr	r2, [r7, #4]
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	781b      	ldrb	r3, [r3, #0]
 8005c6c:	009b      	lsls	r3, r3, #2
 8005c6e:	441a      	add	r2, r3
 8005c70:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8005c72:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c76:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c7a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005c7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c82:	b29b      	uxth	r3, r3
 8005c84:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005c86:	687a      	ldr	r2, [r7, #4]
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	781b      	ldrb	r3, [r3, #0]
 8005c8c:	009b      	lsls	r3, r3, #2
 8005c8e:	4413      	add	r3, r2
 8005c90:	881b      	ldrh	r3, [r3, #0]
 8005c92:	873b      	strh	r3, [r7, #56]	; 0x38
 8005c94:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005c96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d01b      	beq.n	8005cd6 <USB_ActivateEndpoint+0x4d2>
 8005c9e:	687a      	ldr	r2, [r7, #4]
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	781b      	ldrb	r3, [r3, #0]
 8005ca4:	009b      	lsls	r3, r3, #2
 8005ca6:	4413      	add	r3, r2
 8005ca8:	881b      	ldrh	r3, [r3, #0]
 8005caa:	b29b      	uxth	r3, r3
 8005cac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005cb0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cb4:	86fb      	strh	r3, [r7, #54]	; 0x36
 8005cb6:	687a      	ldr	r2, [r7, #4]
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	781b      	ldrb	r3, [r3, #0]
 8005cbc:	009b      	lsls	r3, r3, #2
 8005cbe:	441a      	add	r2, r3
 8005cc0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005cc2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005cc6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005cca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005cce:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005cd2:	b29b      	uxth	r3, r3
 8005cd4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005cd6:	687a      	ldr	r2, [r7, #4]
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	781b      	ldrb	r3, [r3, #0]
 8005cdc:	009b      	lsls	r3, r3, #2
 8005cde:	4413      	add	r3, r2
 8005ce0:	881b      	ldrh	r3, [r3, #0]
 8005ce2:	b29b      	uxth	r3, r3
 8005ce4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005ce8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cec:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005cee:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005cf0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005cf4:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005cf6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005cf8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005cfc:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005cfe:	687a      	ldr	r2, [r7, #4]
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	781b      	ldrb	r3, [r3, #0]
 8005d04:	009b      	lsls	r3, r3, #2
 8005d06:	441a      	add	r2, r3
 8005d08:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005d0a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d0e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d1a:	b29b      	uxth	r3, r3
 8005d1c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005d1e:	687a      	ldr	r2, [r7, #4]
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	781b      	ldrb	r3, [r3, #0]
 8005d24:	009b      	lsls	r3, r3, #2
 8005d26:	4413      	add	r3, r2
 8005d28:	881b      	ldrh	r3, [r3, #0]
 8005d2a:	b29b      	uxth	r3, r3
 8005d2c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d30:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d34:	867b      	strh	r3, [r7, #50]	; 0x32
 8005d36:	687a      	ldr	r2, [r7, #4]
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	781b      	ldrb	r3, [r3, #0]
 8005d3c:	009b      	lsls	r3, r3, #2
 8005d3e:	441a      	add	r2, r3
 8005d40:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8005d42:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d46:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d52:	b29b      	uxth	r3, r3
 8005d54:	8013      	strh	r3, [r2, #0]
 8005d56:	e0ba      	b.n	8005ece <USB_ActivateEndpoint+0x6ca>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005d58:	687a      	ldr	r2, [r7, #4]
 8005d5a:	683b      	ldr	r3, [r7, #0]
 8005d5c:	781b      	ldrb	r3, [r3, #0]
 8005d5e:	009b      	lsls	r3, r3, #2
 8005d60:	4413      	add	r3, r2
 8005d62:	881b      	ldrh	r3, [r3, #0]
 8005d64:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8005d68:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005d6c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d01d      	beq.n	8005db0 <USB_ActivateEndpoint+0x5ac>
 8005d74:	687a      	ldr	r2, [r7, #4]
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	781b      	ldrb	r3, [r3, #0]
 8005d7a:	009b      	lsls	r3, r3, #2
 8005d7c:	4413      	add	r3, r2
 8005d7e:	881b      	ldrh	r3, [r3, #0]
 8005d80:	b29b      	uxth	r3, r3
 8005d82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d8a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8005d8e:	687a      	ldr	r2, [r7, #4]
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	781b      	ldrb	r3, [r3, #0]
 8005d94:	009b      	lsls	r3, r3, #2
 8005d96:	441a      	add	r2, r3
 8005d98:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005d9c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005da0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005da4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005da8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005dac:	b29b      	uxth	r3, r3
 8005dae:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005db0:	687a      	ldr	r2, [r7, #4]
 8005db2:	683b      	ldr	r3, [r7, #0]
 8005db4:	781b      	ldrb	r3, [r3, #0]
 8005db6:	009b      	lsls	r3, r3, #2
 8005db8:	4413      	add	r3, r2
 8005dba:	881b      	ldrh	r3, [r3, #0]
 8005dbc:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8005dc0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8005dc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d01d      	beq.n	8005e08 <USB_ActivateEndpoint+0x604>
 8005dcc:	687a      	ldr	r2, [r7, #4]
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	781b      	ldrb	r3, [r3, #0]
 8005dd2:	009b      	lsls	r3, r3, #2
 8005dd4:	4413      	add	r3, r2
 8005dd6:	881b      	ldrh	r3, [r3, #0]
 8005dd8:	b29b      	uxth	r3, r3
 8005dda:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005dde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005de2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005de6:	687a      	ldr	r2, [r7, #4]
 8005de8:	683b      	ldr	r3, [r7, #0]
 8005dea:	781b      	ldrb	r3, [r3, #0]
 8005dec:	009b      	lsls	r3, r3, #2
 8005dee:	441a      	add	r2, r3
 8005df0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005df4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005df8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005dfc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e00:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005e04:	b29b      	uxth	r3, r3
 8005e06:	8013      	strh	r3, [r2, #0]


      if (ep->type != EP_TYPE_ISOC)
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	78db      	ldrb	r3, [r3, #3]
 8005e0c:	2b01      	cmp	r3, #1
 8005e0e:	d024      	beq.n	8005e5a <USB_ActivateEndpoint+0x656>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005e10:	687a      	ldr	r2, [r7, #4]
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	781b      	ldrb	r3, [r3, #0]
 8005e16:	009b      	lsls	r3, r3, #2
 8005e18:	4413      	add	r3, r2
 8005e1a:	881b      	ldrh	r3, [r3, #0]
 8005e1c:	b29b      	uxth	r3, r3
 8005e1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e22:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e26:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8005e2a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005e2e:	f083 0320 	eor.w	r3, r3, #32
 8005e32:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8005e36:	687a      	ldr	r2, [r7, #4]
 8005e38:	683b      	ldr	r3, [r7, #0]
 8005e3a:	781b      	ldrb	r3, [r3, #0]
 8005e3c:	009b      	lsls	r3, r3, #2
 8005e3e:	441a      	add	r2, r3
 8005e40:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005e44:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e48:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e4c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e54:	b29b      	uxth	r3, r3
 8005e56:	8013      	strh	r3, [r2, #0]
 8005e58:	e01d      	b.n	8005e96 <USB_ActivateEndpoint+0x692>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005e5a:	687a      	ldr	r2, [r7, #4]
 8005e5c:	683b      	ldr	r3, [r7, #0]
 8005e5e:	781b      	ldrb	r3, [r3, #0]
 8005e60:	009b      	lsls	r3, r3, #2
 8005e62:	4413      	add	r3, r2
 8005e64:	881b      	ldrh	r3, [r3, #0]
 8005e66:	b29b      	uxth	r3, r3
 8005e68:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e6c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e70:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8005e74:	687a      	ldr	r2, [r7, #4]
 8005e76:	683b      	ldr	r3, [r7, #0]
 8005e78:	781b      	ldrb	r3, [r3, #0]
 8005e7a:	009b      	lsls	r3, r3, #2
 8005e7c:	441a      	add	r2, r3
 8005e7e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8005e82:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e86:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e92:	b29b      	uxth	r3, r3
 8005e94:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005e96:	687a      	ldr	r2, [r7, #4]
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	781b      	ldrb	r3, [r3, #0]
 8005e9c:	009b      	lsls	r3, r3, #2
 8005e9e:	4413      	add	r3, r2
 8005ea0:	881b      	ldrh	r3, [r3, #0]
 8005ea2:	b29b      	uxth	r3, r3
 8005ea4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005ea8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005eac:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8005eae:	687a      	ldr	r2, [r7, #4]
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	781b      	ldrb	r3, [r3, #0]
 8005eb4:	009b      	lsls	r3, r3, #2
 8005eb6:	441a      	add	r2, r3
 8005eb8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005eba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ebe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ec2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ec6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005eca:	b29b      	uxth	r3, r3
 8005ecc:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8005ece:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	376c      	adds	r7, #108	; 0x6c
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005edc:	4770      	bx	lr
 8005ede:	bf00      	nop

08005ee0 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005ee0:	b480      	push	{r7}
 8005ee2:	b08d      	sub	sp, #52	; 0x34
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
 8005ee8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005eea:	683b      	ldr	r3, [r7, #0]
 8005eec:	7b1b      	ldrb	r3, [r3, #12]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	f040 808e 	bne.w	8006010 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8005ef4:	683b      	ldr	r3, [r7, #0]
 8005ef6:	785b      	ldrb	r3, [r3, #1]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d044      	beq.n	8005f86 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005efc:	687a      	ldr	r2, [r7, #4]
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	781b      	ldrb	r3, [r3, #0]
 8005f02:	009b      	lsls	r3, r3, #2
 8005f04:	4413      	add	r3, r2
 8005f06:	881b      	ldrh	r3, [r3, #0]
 8005f08:	81bb      	strh	r3, [r7, #12]
 8005f0a:	89bb      	ldrh	r3, [r7, #12]
 8005f0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d01b      	beq.n	8005f4c <USB_DeactivateEndpoint+0x6c>
 8005f14:	687a      	ldr	r2, [r7, #4]
 8005f16:	683b      	ldr	r3, [r7, #0]
 8005f18:	781b      	ldrb	r3, [r3, #0]
 8005f1a:	009b      	lsls	r3, r3, #2
 8005f1c:	4413      	add	r3, r2
 8005f1e:	881b      	ldrh	r3, [r3, #0]
 8005f20:	b29b      	uxth	r3, r3
 8005f22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f2a:	817b      	strh	r3, [r7, #10]
 8005f2c:	687a      	ldr	r2, [r7, #4]
 8005f2e:	683b      	ldr	r3, [r7, #0]
 8005f30:	781b      	ldrb	r3, [r3, #0]
 8005f32:	009b      	lsls	r3, r3, #2
 8005f34:	441a      	add	r2, r3
 8005f36:	897b      	ldrh	r3, [r7, #10]
 8005f38:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f3c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f40:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f44:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005f48:	b29b      	uxth	r3, r3
 8005f4a:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005f4c:	687a      	ldr	r2, [r7, #4]
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	781b      	ldrb	r3, [r3, #0]
 8005f52:	009b      	lsls	r3, r3, #2
 8005f54:	4413      	add	r3, r2
 8005f56:	881b      	ldrh	r3, [r3, #0]
 8005f58:	b29b      	uxth	r3, r3
 8005f5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f5e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f62:	813b      	strh	r3, [r7, #8]
 8005f64:	687a      	ldr	r2, [r7, #4]
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	781b      	ldrb	r3, [r3, #0]
 8005f6a:	009b      	lsls	r3, r3, #2
 8005f6c:	441a      	add	r2, r3
 8005f6e:	893b      	ldrh	r3, [r7, #8]
 8005f70:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f74:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f78:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f80:	b29b      	uxth	r3, r3
 8005f82:	8013      	strh	r3, [r2, #0]
 8005f84:	e192      	b.n	80062ac <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005f86:	687a      	ldr	r2, [r7, #4]
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	781b      	ldrb	r3, [r3, #0]
 8005f8c:	009b      	lsls	r3, r3, #2
 8005f8e:	4413      	add	r3, r2
 8005f90:	881b      	ldrh	r3, [r3, #0]
 8005f92:	827b      	strh	r3, [r7, #18]
 8005f94:	8a7b      	ldrh	r3, [r7, #18]
 8005f96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d01b      	beq.n	8005fd6 <USB_DeactivateEndpoint+0xf6>
 8005f9e:	687a      	ldr	r2, [r7, #4]
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	781b      	ldrb	r3, [r3, #0]
 8005fa4:	009b      	lsls	r3, r3, #2
 8005fa6:	4413      	add	r3, r2
 8005fa8:	881b      	ldrh	r3, [r3, #0]
 8005faa:	b29b      	uxth	r3, r3
 8005fac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005fb0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fb4:	823b      	strh	r3, [r7, #16]
 8005fb6:	687a      	ldr	r2, [r7, #4]
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	781b      	ldrb	r3, [r3, #0]
 8005fbc:	009b      	lsls	r3, r3, #2
 8005fbe:	441a      	add	r2, r3
 8005fc0:	8a3b      	ldrh	r3, [r7, #16]
 8005fc2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005fc6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005fca:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005fce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005fd2:	b29b      	uxth	r3, r3
 8005fd4:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005fd6:	687a      	ldr	r2, [r7, #4]
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	781b      	ldrb	r3, [r3, #0]
 8005fdc:	009b      	lsls	r3, r3, #2
 8005fde:	4413      	add	r3, r2
 8005fe0:	881b      	ldrh	r3, [r3, #0]
 8005fe2:	b29b      	uxth	r3, r3
 8005fe4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005fe8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fec:	81fb      	strh	r3, [r7, #14]
 8005fee:	687a      	ldr	r2, [r7, #4]
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	781b      	ldrb	r3, [r3, #0]
 8005ff4:	009b      	lsls	r3, r3, #2
 8005ff6:	441a      	add	r2, r3
 8005ff8:	89fb      	ldrh	r3, [r7, #14]
 8005ffa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ffe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006002:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006006:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800600a:	b29b      	uxth	r3, r3
 800600c:	8013      	strh	r3, [r2, #0]
 800600e:	e14d      	b.n	80062ac <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	785b      	ldrb	r3, [r3, #1]
 8006014:	2b00      	cmp	r3, #0
 8006016:	f040 80a5 	bne.w	8006164 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800601a:	687a      	ldr	r2, [r7, #4]
 800601c:	683b      	ldr	r3, [r7, #0]
 800601e:	781b      	ldrb	r3, [r3, #0]
 8006020:	009b      	lsls	r3, r3, #2
 8006022:	4413      	add	r3, r2
 8006024:	881b      	ldrh	r3, [r3, #0]
 8006026:	843b      	strh	r3, [r7, #32]
 8006028:	8c3b      	ldrh	r3, [r7, #32]
 800602a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800602e:	2b00      	cmp	r3, #0
 8006030:	d01b      	beq.n	800606a <USB_DeactivateEndpoint+0x18a>
 8006032:	687a      	ldr	r2, [r7, #4]
 8006034:	683b      	ldr	r3, [r7, #0]
 8006036:	781b      	ldrb	r3, [r3, #0]
 8006038:	009b      	lsls	r3, r3, #2
 800603a:	4413      	add	r3, r2
 800603c:	881b      	ldrh	r3, [r3, #0]
 800603e:	b29b      	uxth	r3, r3
 8006040:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006044:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006048:	83fb      	strh	r3, [r7, #30]
 800604a:	687a      	ldr	r2, [r7, #4]
 800604c:	683b      	ldr	r3, [r7, #0]
 800604e:	781b      	ldrb	r3, [r3, #0]
 8006050:	009b      	lsls	r3, r3, #2
 8006052:	441a      	add	r2, r3
 8006054:	8bfb      	ldrh	r3, [r7, #30]
 8006056:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800605a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800605e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006062:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006066:	b29b      	uxth	r3, r3
 8006068:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800606a:	687a      	ldr	r2, [r7, #4]
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	781b      	ldrb	r3, [r3, #0]
 8006070:	009b      	lsls	r3, r3, #2
 8006072:	4413      	add	r3, r2
 8006074:	881b      	ldrh	r3, [r3, #0]
 8006076:	83bb      	strh	r3, [r7, #28]
 8006078:	8bbb      	ldrh	r3, [r7, #28]
 800607a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800607e:	2b00      	cmp	r3, #0
 8006080:	d01b      	beq.n	80060ba <USB_DeactivateEndpoint+0x1da>
 8006082:	687a      	ldr	r2, [r7, #4]
 8006084:	683b      	ldr	r3, [r7, #0]
 8006086:	781b      	ldrb	r3, [r3, #0]
 8006088:	009b      	lsls	r3, r3, #2
 800608a:	4413      	add	r3, r2
 800608c:	881b      	ldrh	r3, [r3, #0]
 800608e:	b29b      	uxth	r3, r3
 8006090:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006094:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006098:	837b      	strh	r3, [r7, #26]
 800609a:	687a      	ldr	r2, [r7, #4]
 800609c:	683b      	ldr	r3, [r7, #0]
 800609e:	781b      	ldrb	r3, [r3, #0]
 80060a0:	009b      	lsls	r3, r3, #2
 80060a2:	441a      	add	r2, r3
 80060a4:	8b7b      	ldrh	r3, [r7, #26]
 80060a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80060b2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80060b6:	b29b      	uxth	r3, r3
 80060b8:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80060ba:	687a      	ldr	r2, [r7, #4]
 80060bc:	683b      	ldr	r3, [r7, #0]
 80060be:	781b      	ldrb	r3, [r3, #0]
 80060c0:	009b      	lsls	r3, r3, #2
 80060c2:	4413      	add	r3, r2
 80060c4:	881b      	ldrh	r3, [r3, #0]
 80060c6:	b29b      	uxth	r3, r3
 80060c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060d0:	833b      	strh	r3, [r7, #24]
 80060d2:	687a      	ldr	r2, [r7, #4]
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	781b      	ldrb	r3, [r3, #0]
 80060d8:	009b      	lsls	r3, r3, #2
 80060da:	441a      	add	r2, r3
 80060dc:	8b3b      	ldrh	r3, [r7, #24]
 80060de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80060ea:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80060ee:	b29b      	uxth	r3, r3
 80060f0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80060f2:	687a      	ldr	r2, [r7, #4]
 80060f4:	683b      	ldr	r3, [r7, #0]
 80060f6:	781b      	ldrb	r3, [r3, #0]
 80060f8:	009b      	lsls	r3, r3, #2
 80060fa:	4413      	add	r3, r2
 80060fc:	881b      	ldrh	r3, [r3, #0]
 80060fe:	b29b      	uxth	r3, r3
 8006100:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006104:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006108:	82fb      	strh	r3, [r7, #22]
 800610a:	687a      	ldr	r2, [r7, #4]
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	781b      	ldrb	r3, [r3, #0]
 8006110:	009b      	lsls	r3, r3, #2
 8006112:	441a      	add	r2, r3
 8006114:	8afb      	ldrh	r3, [r7, #22]
 8006116:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800611a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800611e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006122:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006126:	b29b      	uxth	r3, r3
 8006128:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800612a:	687a      	ldr	r2, [r7, #4]
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	781b      	ldrb	r3, [r3, #0]
 8006130:	009b      	lsls	r3, r3, #2
 8006132:	4413      	add	r3, r2
 8006134:	881b      	ldrh	r3, [r3, #0]
 8006136:	b29b      	uxth	r3, r3
 8006138:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800613c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006140:	82bb      	strh	r3, [r7, #20]
 8006142:	687a      	ldr	r2, [r7, #4]
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	781b      	ldrb	r3, [r3, #0]
 8006148:	009b      	lsls	r3, r3, #2
 800614a:	441a      	add	r2, r3
 800614c:	8abb      	ldrh	r3, [r7, #20]
 800614e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006152:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006156:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800615a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800615e:	b29b      	uxth	r3, r3
 8006160:	8013      	strh	r3, [r2, #0]
 8006162:	e0a3      	b.n	80062ac <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006164:	687a      	ldr	r2, [r7, #4]
 8006166:	683b      	ldr	r3, [r7, #0]
 8006168:	781b      	ldrb	r3, [r3, #0]
 800616a:	009b      	lsls	r3, r3, #2
 800616c:	4413      	add	r3, r2
 800616e:	881b      	ldrh	r3, [r3, #0]
 8006170:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8006172:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006174:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006178:	2b00      	cmp	r3, #0
 800617a:	d01b      	beq.n	80061b4 <USB_DeactivateEndpoint+0x2d4>
 800617c:	687a      	ldr	r2, [r7, #4]
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	781b      	ldrb	r3, [r3, #0]
 8006182:	009b      	lsls	r3, r3, #2
 8006184:	4413      	add	r3, r2
 8006186:	881b      	ldrh	r3, [r3, #0]
 8006188:	b29b      	uxth	r3, r3
 800618a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800618e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006192:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8006194:	687a      	ldr	r2, [r7, #4]
 8006196:	683b      	ldr	r3, [r7, #0]
 8006198:	781b      	ldrb	r3, [r3, #0]
 800619a:	009b      	lsls	r3, r3, #2
 800619c:	441a      	add	r2, r3
 800619e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80061a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80061a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80061a8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80061ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061b0:	b29b      	uxth	r3, r3
 80061b2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80061b4:	687a      	ldr	r2, [r7, #4]
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	781b      	ldrb	r3, [r3, #0]
 80061ba:	009b      	lsls	r3, r3, #2
 80061bc:	4413      	add	r3, r2
 80061be:	881b      	ldrh	r3, [r3, #0]
 80061c0:	857b      	strh	r3, [r7, #42]	; 0x2a
 80061c2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80061c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d01b      	beq.n	8006204 <USB_DeactivateEndpoint+0x324>
 80061cc:	687a      	ldr	r2, [r7, #4]
 80061ce:	683b      	ldr	r3, [r7, #0]
 80061d0:	781b      	ldrb	r3, [r3, #0]
 80061d2:	009b      	lsls	r3, r3, #2
 80061d4:	4413      	add	r3, r2
 80061d6:	881b      	ldrh	r3, [r3, #0]
 80061d8:	b29b      	uxth	r3, r3
 80061da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80061de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061e2:	853b      	strh	r3, [r7, #40]	; 0x28
 80061e4:	687a      	ldr	r2, [r7, #4]
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	781b      	ldrb	r3, [r3, #0]
 80061ea:	009b      	lsls	r3, r3, #2
 80061ec:	441a      	add	r2, r3
 80061ee:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80061f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80061f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80061f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80061fc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006200:	b29b      	uxth	r3, r3
 8006202:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8006204:	687a      	ldr	r2, [r7, #4]
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	781b      	ldrb	r3, [r3, #0]
 800620a:	009b      	lsls	r3, r3, #2
 800620c:	4413      	add	r3, r2
 800620e:	881b      	ldrh	r3, [r3, #0]
 8006210:	b29b      	uxth	r3, r3
 8006212:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006216:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800621a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800621c:	687a      	ldr	r2, [r7, #4]
 800621e:	683b      	ldr	r3, [r7, #0]
 8006220:	781b      	ldrb	r3, [r3, #0]
 8006222:	009b      	lsls	r3, r3, #2
 8006224:	441a      	add	r2, r3
 8006226:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006228:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800622c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006230:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006234:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006238:	b29b      	uxth	r3, r3
 800623a:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800623c:	687a      	ldr	r2, [r7, #4]
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	781b      	ldrb	r3, [r3, #0]
 8006242:	009b      	lsls	r3, r3, #2
 8006244:	4413      	add	r3, r2
 8006246:	881b      	ldrh	r3, [r3, #0]
 8006248:	b29b      	uxth	r3, r3
 800624a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800624e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006252:	84bb      	strh	r3, [r7, #36]	; 0x24
 8006254:	687a      	ldr	r2, [r7, #4]
 8006256:	683b      	ldr	r3, [r7, #0]
 8006258:	781b      	ldrb	r3, [r3, #0]
 800625a:	009b      	lsls	r3, r3, #2
 800625c:	441a      	add	r2, r3
 800625e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006260:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006264:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006268:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800626c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006270:	b29b      	uxth	r3, r3
 8006272:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006274:	687a      	ldr	r2, [r7, #4]
 8006276:	683b      	ldr	r3, [r7, #0]
 8006278:	781b      	ldrb	r3, [r3, #0]
 800627a:	009b      	lsls	r3, r3, #2
 800627c:	4413      	add	r3, r2
 800627e:	881b      	ldrh	r3, [r3, #0]
 8006280:	b29b      	uxth	r3, r3
 8006282:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006286:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800628a:	847b      	strh	r3, [r7, #34]	; 0x22
 800628c:	687a      	ldr	r2, [r7, #4]
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	781b      	ldrb	r3, [r3, #0]
 8006292:	009b      	lsls	r3, r3, #2
 8006294:	441a      	add	r2, r3
 8006296:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006298:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800629c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80062a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062a8:	b29b      	uxth	r3, r3
 80062aa:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80062ac:	2300      	movs	r3, #0
}
 80062ae:	4618      	mov	r0, r3
 80062b0:	3734      	adds	r7, #52	; 0x34
 80062b2:	46bd      	mov	sp, r7
 80062b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b8:	4770      	bx	lr

080062ba <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80062ba:	b580      	push	{r7, lr}
 80062bc:	b0c4      	sub	sp, #272	; 0x110
 80062be:	af00      	add	r7, sp, #0
 80062c0:	1d3b      	adds	r3, r7, #4
 80062c2:	6018      	str	r0, [r3, #0]
 80062c4:	463b      	mov	r3, r7
 80062c6:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint32_t len;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80062c8:	463b      	mov	r3, r7
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	785b      	ldrb	r3, [r3, #1]
 80062ce:	2b01      	cmp	r3, #1
 80062d0:	f040 8566 	bne.w	8006da0 <USB_EPStartXfer+0xae6>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80062d4:	463b      	mov	r3, r7
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	699a      	ldr	r2, [r3, #24]
 80062da:	463b      	mov	r3, r7
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	691b      	ldr	r3, [r3, #16]
 80062e0:	429a      	cmp	r2, r3
 80062e2:	d905      	bls.n	80062f0 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 80062e4:	463b      	mov	r3, r7
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	691b      	ldr	r3, [r3, #16]
 80062ea:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80062ee:	e004      	b.n	80062fa <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 80062f0:	463b      	mov	r3, r7
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	699b      	ldr	r3, [r3, #24]
 80062f6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80062fa:	463b      	mov	r3, r7
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	7b1b      	ldrb	r3, [r3, #12]
 8006300:	2b00      	cmp	r3, #0
 8006302:	d12c      	bne.n	800635e <USB_EPStartXfer+0xa4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8006304:	463b      	mov	r3, r7
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	6959      	ldr	r1, [r3, #20]
 800630a:	463b      	mov	r3, r7
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	88da      	ldrh	r2, [r3, #6]
 8006310:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006314:	b29b      	uxth	r3, r3
 8006316:	1d38      	adds	r0, r7, #4
 8006318:	6800      	ldr	r0, [r0, #0]
 800631a:	f001 fa43 	bl	80077a4 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800631e:	1d3b      	adds	r3, r7, #4
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	617b      	str	r3, [r7, #20]
 8006324:	1d3b      	adds	r3, r7, #4
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800632c:	b29b      	uxth	r3, r3
 800632e:	461a      	mov	r2, r3
 8006330:	697b      	ldr	r3, [r7, #20]
 8006332:	4413      	add	r3, r2
 8006334:	617b      	str	r3, [r7, #20]
 8006336:	463b      	mov	r3, r7
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	781b      	ldrb	r3, [r3, #0]
 800633c:	00da      	lsls	r2, r3, #3
 800633e:	697b      	ldr	r3, [r7, #20]
 8006340:	4413      	add	r3, r2
 8006342:	f203 4202 	addw	r2, r3, #1026	; 0x402
 8006346:	f107 0310 	add.w	r3, r7, #16
 800634a:	601a      	str	r2, [r3, #0]
 800634c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006350:	b29a      	uxth	r2, r3
 8006352:	f107 0310 	add.w	r3, r7, #16
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	801a      	strh	r2, [r3, #0]
 800635a:	f000 bcec 	b.w	8006d36 <USB_EPStartXfer+0xa7c>
    }
    else
    {
      /*double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800635e:	463b      	mov	r3, r7
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	78db      	ldrb	r3, [r3, #3]
 8006364:	2b02      	cmp	r3, #2
 8006366:	f040 8356 	bne.w	8006a16 <USB_EPStartXfer+0x75c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800636a:	463b      	mov	r3, r7
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	6a1a      	ldr	r2, [r3, #32]
 8006370:	463b      	mov	r3, r7
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	691b      	ldr	r3, [r3, #16]
 8006376:	429a      	cmp	r2, r3
 8006378:	f240 82fa 	bls.w	8006970 <USB_EPStartXfer+0x6b6>
        {
          /*enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 800637c:	1d3b      	adds	r3, r7, #4
 800637e:	681a      	ldr	r2, [r3, #0]
 8006380:	463b      	mov	r3, r7
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	781b      	ldrb	r3, [r3, #0]
 8006386:	009b      	lsls	r3, r3, #2
 8006388:	4413      	add	r3, r2
 800638a:	881b      	ldrh	r3, [r3, #0]
 800638c:	b29b      	uxth	r3, r3
 800638e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006392:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006396:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 800639a:	1d3b      	adds	r3, r7, #4
 800639c:	681a      	ldr	r2, [r3, #0]
 800639e:	463b      	mov	r3, r7
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	781b      	ldrb	r3, [r3, #0]
 80063a4:	009b      	lsls	r3, r3, #2
 80063a6:	441a      	add	r2, r3
 80063a8:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 80063ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80063b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80063b4:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80063b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063bc:	b29b      	uxth	r3, r3
 80063be:	8013      	strh	r3, [r2, #0]
          len = ep->maxpacket;
 80063c0:	463b      	mov	r3, r7
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	691b      	ldr	r3, [r3, #16]
 80063c6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          /*each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80063ca:	463b      	mov	r3, r7
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	6a1a      	ldr	r2, [r3, #32]
 80063d0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80063d4:	1ad2      	subs	r2, r2, r3
 80063d6:	463b      	mov	r3, r7
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1*/
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80063dc:	1d3b      	adds	r3, r7, #4
 80063de:	681a      	ldr	r2, [r3, #0]
 80063e0:	463b      	mov	r3, r7
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	781b      	ldrb	r3, [r3, #0]
 80063e6:	009b      	lsls	r3, r3, #2
 80063e8:	4413      	add	r3, r2
 80063ea:	881b      	ldrh	r3, [r3, #0]
 80063ec:	b29b      	uxth	r3, r3
 80063ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	f000 815e 	beq.w	80066b4 <USB_EPStartXfer+0x3fa>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80063f8:	1d3b      	adds	r3, r7, #4
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	637b      	str	r3, [r7, #52]	; 0x34
 80063fe:	463b      	mov	r3, r7
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	785b      	ldrb	r3, [r3, #1]
 8006404:	2b00      	cmp	r3, #0
 8006406:	d164      	bne.n	80064d2 <USB_EPStartXfer+0x218>
 8006408:	1d3b      	adds	r3, r7, #4
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800640e:	1d3b      	adds	r3, r7, #4
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006416:	b29b      	uxth	r3, r3
 8006418:	461a      	mov	r2, r3
 800641a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800641c:	4413      	add	r3, r2
 800641e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006420:	463b      	mov	r3, r7
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	781b      	ldrb	r3, [r3, #0]
 8006426:	00da      	lsls	r2, r3, #3
 8006428:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800642a:	4413      	add	r3, r2
 800642c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006430:	62bb      	str	r3, [r7, #40]	; 0x28
 8006432:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006436:	2b00      	cmp	r3, #0
 8006438:	d112      	bne.n	8006460 <USB_EPStartXfer+0x1a6>
 800643a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800643c:	881b      	ldrh	r3, [r3, #0]
 800643e:	b29b      	uxth	r3, r3
 8006440:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006444:	b29a      	uxth	r2, r3
 8006446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006448:	801a      	strh	r2, [r3, #0]
 800644a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800644c:	881b      	ldrh	r3, [r3, #0]
 800644e:	b29b      	uxth	r3, r3
 8006450:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006454:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006458:	b29a      	uxth	r2, r3
 800645a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800645c:	801a      	strh	r2, [r3, #0]
 800645e:	e054      	b.n	800650a <USB_EPStartXfer+0x250>
 8006460:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006464:	2b3e      	cmp	r3, #62	; 0x3e
 8006466:	d817      	bhi.n	8006498 <USB_EPStartXfer+0x1de>
 8006468:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800646c:	085b      	lsrs	r3, r3, #1
 800646e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006472:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006476:	f003 0301 	and.w	r3, r3, #1
 800647a:	2b00      	cmp	r3, #0
 800647c:	d004      	beq.n	8006488 <USB_EPStartXfer+0x1ce>
 800647e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006482:	3301      	adds	r3, #1
 8006484:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006488:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800648c:	b29b      	uxth	r3, r3
 800648e:	029b      	lsls	r3, r3, #10
 8006490:	b29a      	uxth	r2, r3
 8006492:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006494:	801a      	strh	r2, [r3, #0]
 8006496:	e038      	b.n	800650a <USB_EPStartXfer+0x250>
 8006498:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800649c:	095b      	lsrs	r3, r3, #5
 800649e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80064a2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80064a6:	f003 031f 	and.w	r3, r3, #31
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d104      	bne.n	80064b8 <USB_EPStartXfer+0x1fe>
 80064ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064b2:	3b01      	subs	r3, #1
 80064b4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80064b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064bc:	b29b      	uxth	r3, r3
 80064be:	029b      	lsls	r3, r3, #10
 80064c0:	b29b      	uxth	r3, r3
 80064c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80064c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80064ca:	b29a      	uxth	r2, r3
 80064cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064ce:	801a      	strh	r2, [r3, #0]
 80064d0:	e01b      	b.n	800650a <USB_EPStartXfer+0x250>
 80064d2:	463b      	mov	r3, r7
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	785b      	ldrb	r3, [r3, #1]
 80064d8:	2b01      	cmp	r3, #1
 80064da:	d116      	bne.n	800650a <USB_EPStartXfer+0x250>
 80064dc:	1d3b      	adds	r3, r7, #4
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80064e4:	b29b      	uxth	r3, r3
 80064e6:	461a      	mov	r2, r3
 80064e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064ea:	4413      	add	r3, r2
 80064ec:	637b      	str	r3, [r7, #52]	; 0x34
 80064ee:	463b      	mov	r3, r7
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	781b      	ldrb	r3, [r3, #0]
 80064f4:	00da      	lsls	r2, r3, #3
 80064f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064f8:	4413      	add	r3, r2
 80064fa:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80064fe:	633b      	str	r3, [r7, #48]	; 0x30
 8006500:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006504:	b29a      	uxth	r2, r3
 8006506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006508:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800650a:	463b      	mov	r3, r7
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	895b      	ldrh	r3, [r3, #10]
 8006510:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006514:	463b      	mov	r3, r7
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	6959      	ldr	r1, [r3, #20]
 800651a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800651e:	b29b      	uxth	r3, r3
 8006520:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8006524:	1d38      	adds	r0, r7, #4
 8006526:	6800      	ldr	r0, [r0, #0]
 8006528:	f001 f93c 	bl	80077a4 <USB_WritePMA>
            ep->xfer_buff += len;
 800652c:	463b      	mov	r3, r7
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	695a      	ldr	r2, [r3, #20]
 8006532:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006536:	441a      	add	r2, r3
 8006538:	463b      	mov	r3, r7
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800653e:	463b      	mov	r3, r7
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	6a1a      	ldr	r2, [r3, #32]
 8006544:	463b      	mov	r3, r7
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	691b      	ldr	r3, [r3, #16]
 800654a:	429a      	cmp	r2, r3
 800654c:	d90e      	bls.n	800656c <USB_EPStartXfer+0x2b2>
            {
              len = ep->maxpacket;
 800654e:	463b      	mov	r3, r7
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	691b      	ldr	r3, [r3, #16]
 8006554:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db -= len;
 8006558:	463b      	mov	r3, r7
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	6a1a      	ldr	r2, [r3, #32]
 800655e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006562:	1ad2      	subs	r2, r2, r3
 8006564:	463b      	mov	r3, r7
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	621a      	str	r2, [r3, #32]
 800656a:	e008      	b.n	800657e <USB_EPStartXfer+0x2c4>
            }
            else
            {
              len = ep->xfer_len_db;
 800656c:	463b      	mov	r3, r7
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	6a1b      	ldr	r3, [r3, #32]
 8006572:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db = 0;
 8006576:	463b      	mov	r3, r7
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	2200      	movs	r2, #0
 800657c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800657e:	463b      	mov	r3, r7
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	785b      	ldrb	r3, [r3, #1]
 8006584:	2b00      	cmp	r3, #0
 8006586:	d164      	bne.n	8006652 <USB_EPStartXfer+0x398>
 8006588:	1d3b      	adds	r3, r7, #4
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	61fb      	str	r3, [r7, #28]
 800658e:	1d3b      	adds	r3, r7, #4
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006596:	b29b      	uxth	r3, r3
 8006598:	461a      	mov	r2, r3
 800659a:	69fb      	ldr	r3, [r7, #28]
 800659c:	4413      	add	r3, r2
 800659e:	61fb      	str	r3, [r7, #28]
 80065a0:	463b      	mov	r3, r7
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	781b      	ldrb	r3, [r3, #0]
 80065a6:	00da      	lsls	r2, r3, #3
 80065a8:	69fb      	ldr	r3, [r7, #28]
 80065aa:	4413      	add	r3, r2
 80065ac:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80065b0:	61bb      	str	r3, [r7, #24]
 80065b2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d112      	bne.n	80065e0 <USB_EPStartXfer+0x326>
 80065ba:	69bb      	ldr	r3, [r7, #24]
 80065bc:	881b      	ldrh	r3, [r3, #0]
 80065be:	b29b      	uxth	r3, r3
 80065c0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80065c4:	b29a      	uxth	r2, r3
 80065c6:	69bb      	ldr	r3, [r7, #24]
 80065c8:	801a      	strh	r2, [r3, #0]
 80065ca:	69bb      	ldr	r3, [r7, #24]
 80065cc:	881b      	ldrh	r3, [r3, #0]
 80065ce:	b29b      	uxth	r3, r3
 80065d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80065d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80065d8:	b29a      	uxth	r2, r3
 80065da:	69bb      	ldr	r3, [r7, #24]
 80065dc:	801a      	strh	r2, [r3, #0]
 80065de:	e057      	b.n	8006690 <USB_EPStartXfer+0x3d6>
 80065e0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80065e4:	2b3e      	cmp	r3, #62	; 0x3e
 80065e6:	d817      	bhi.n	8006618 <USB_EPStartXfer+0x35e>
 80065e8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80065ec:	085b      	lsrs	r3, r3, #1
 80065ee:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80065f2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80065f6:	f003 0301 	and.w	r3, r3, #1
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d004      	beq.n	8006608 <USB_EPStartXfer+0x34e>
 80065fe:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006602:	3301      	adds	r3, #1
 8006604:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006608:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800660c:	b29b      	uxth	r3, r3
 800660e:	029b      	lsls	r3, r3, #10
 8006610:	b29a      	uxth	r2, r3
 8006612:	69bb      	ldr	r3, [r7, #24]
 8006614:	801a      	strh	r2, [r3, #0]
 8006616:	e03b      	b.n	8006690 <USB_EPStartXfer+0x3d6>
 8006618:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800661c:	095b      	lsrs	r3, r3, #5
 800661e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006622:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006626:	f003 031f 	and.w	r3, r3, #31
 800662a:	2b00      	cmp	r3, #0
 800662c:	d104      	bne.n	8006638 <USB_EPStartXfer+0x37e>
 800662e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006632:	3b01      	subs	r3, #1
 8006634:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006638:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800663c:	b29b      	uxth	r3, r3
 800663e:	029b      	lsls	r3, r3, #10
 8006640:	b29b      	uxth	r3, r3
 8006642:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006646:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800664a:	b29a      	uxth	r2, r3
 800664c:	69bb      	ldr	r3, [r7, #24]
 800664e:	801a      	strh	r2, [r3, #0]
 8006650:	e01e      	b.n	8006690 <USB_EPStartXfer+0x3d6>
 8006652:	463b      	mov	r3, r7
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	785b      	ldrb	r3, [r3, #1]
 8006658:	2b01      	cmp	r3, #1
 800665a:	d119      	bne.n	8006690 <USB_EPStartXfer+0x3d6>
 800665c:	1d3b      	adds	r3, r7, #4
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	627b      	str	r3, [r7, #36]	; 0x24
 8006662:	1d3b      	adds	r3, r7, #4
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800666a:	b29b      	uxth	r3, r3
 800666c:	461a      	mov	r2, r3
 800666e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006670:	4413      	add	r3, r2
 8006672:	627b      	str	r3, [r7, #36]	; 0x24
 8006674:	463b      	mov	r3, r7
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	781b      	ldrb	r3, [r3, #0]
 800667a:	00da      	lsls	r2, r3, #3
 800667c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800667e:	4413      	add	r3, r2
 8006680:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006684:	623b      	str	r3, [r7, #32]
 8006686:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800668a:	b29a      	uxth	r2, r3
 800668c:	6a3b      	ldr	r3, [r7, #32]
 800668e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006690:	463b      	mov	r3, r7
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	891b      	ldrh	r3, [r3, #8]
 8006696:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800669a:	463b      	mov	r3, r7
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	6959      	ldr	r1, [r3, #20]
 80066a0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80066a4:	b29b      	uxth	r3, r3
 80066a6:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 80066aa:	1d38      	adds	r0, r7, #4
 80066ac:	6800      	ldr	r0, [r0, #0]
 80066ae:	f001 f879 	bl	80077a4 <USB_WritePMA>
 80066b2:	e340      	b.n	8006d36 <USB_EPStartXfer+0xa7c>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80066b4:	463b      	mov	r3, r7
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	785b      	ldrb	r3, [r3, #1]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d164      	bne.n	8006788 <USB_EPStartXfer+0x4ce>
 80066be:	1d3b      	adds	r3, r7, #4
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80066c4:	1d3b      	adds	r3, r7, #4
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80066cc:	b29b      	uxth	r3, r3
 80066ce:	461a      	mov	r2, r3
 80066d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80066d2:	4413      	add	r3, r2
 80066d4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80066d6:	463b      	mov	r3, r7
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	781b      	ldrb	r3, [r3, #0]
 80066dc:	00da      	lsls	r2, r3, #3
 80066de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80066e0:	4413      	add	r3, r2
 80066e2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80066e6:	64bb      	str	r3, [r7, #72]	; 0x48
 80066e8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d112      	bne.n	8006716 <USB_EPStartXfer+0x45c>
 80066f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80066f2:	881b      	ldrh	r3, [r3, #0]
 80066f4:	b29b      	uxth	r3, r3
 80066f6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80066fa:	b29a      	uxth	r2, r3
 80066fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80066fe:	801a      	strh	r2, [r3, #0]
 8006700:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006702:	881b      	ldrh	r3, [r3, #0]
 8006704:	b29b      	uxth	r3, r3
 8006706:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800670a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800670e:	b29a      	uxth	r2, r3
 8006710:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006712:	801a      	strh	r2, [r3, #0]
 8006714:	e057      	b.n	80067c6 <USB_EPStartXfer+0x50c>
 8006716:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800671a:	2b3e      	cmp	r3, #62	; 0x3e
 800671c:	d817      	bhi.n	800674e <USB_EPStartXfer+0x494>
 800671e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006722:	085b      	lsrs	r3, r3, #1
 8006724:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006728:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800672c:	f003 0301 	and.w	r3, r3, #1
 8006730:	2b00      	cmp	r3, #0
 8006732:	d004      	beq.n	800673e <USB_EPStartXfer+0x484>
 8006734:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006738:	3301      	adds	r3, #1
 800673a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800673e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006742:	b29b      	uxth	r3, r3
 8006744:	029b      	lsls	r3, r3, #10
 8006746:	b29a      	uxth	r2, r3
 8006748:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800674a:	801a      	strh	r2, [r3, #0]
 800674c:	e03b      	b.n	80067c6 <USB_EPStartXfer+0x50c>
 800674e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006752:	095b      	lsrs	r3, r3, #5
 8006754:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006758:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800675c:	f003 031f 	and.w	r3, r3, #31
 8006760:	2b00      	cmp	r3, #0
 8006762:	d104      	bne.n	800676e <USB_EPStartXfer+0x4b4>
 8006764:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006768:	3b01      	subs	r3, #1
 800676a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800676e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006772:	b29b      	uxth	r3, r3
 8006774:	029b      	lsls	r3, r3, #10
 8006776:	b29b      	uxth	r3, r3
 8006778:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800677c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006780:	b29a      	uxth	r2, r3
 8006782:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006784:	801a      	strh	r2, [r3, #0]
 8006786:	e01e      	b.n	80067c6 <USB_EPStartXfer+0x50c>
 8006788:	463b      	mov	r3, r7
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	785b      	ldrb	r3, [r3, #1]
 800678e:	2b01      	cmp	r3, #1
 8006790:	d119      	bne.n	80067c6 <USB_EPStartXfer+0x50c>
 8006792:	1d3b      	adds	r3, r7, #4
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	657b      	str	r3, [r7, #84]	; 0x54
 8006798:	1d3b      	adds	r3, r7, #4
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80067a0:	b29b      	uxth	r3, r3
 80067a2:	461a      	mov	r2, r3
 80067a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80067a6:	4413      	add	r3, r2
 80067a8:	657b      	str	r3, [r7, #84]	; 0x54
 80067aa:	463b      	mov	r3, r7
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	781b      	ldrb	r3, [r3, #0]
 80067b0:	00da      	lsls	r2, r3, #3
 80067b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80067b4:	4413      	add	r3, r2
 80067b6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80067ba:	653b      	str	r3, [r7, #80]	; 0x50
 80067bc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80067c0:	b29a      	uxth	r2, r3
 80067c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80067c4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80067c6:	463b      	mov	r3, r7
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	891b      	ldrh	r3, [r3, #8]
 80067cc:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80067d0:	463b      	mov	r3, r7
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	6959      	ldr	r1, [r3, #20]
 80067d6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80067da:	b29b      	uxth	r3, r3
 80067dc:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 80067e0:	1d38      	adds	r0, r7, #4
 80067e2:	6800      	ldr	r0, [r0, #0]
 80067e4:	f000 ffde 	bl	80077a4 <USB_WritePMA>
            ep->xfer_buff += len;
 80067e8:	463b      	mov	r3, r7
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	695a      	ldr	r2, [r3, #20]
 80067ee:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80067f2:	441a      	add	r2, r3
 80067f4:	463b      	mov	r3, r7
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80067fa:	463b      	mov	r3, r7
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	6a1a      	ldr	r2, [r3, #32]
 8006800:	463b      	mov	r3, r7
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	691b      	ldr	r3, [r3, #16]
 8006806:	429a      	cmp	r2, r3
 8006808:	d90e      	bls.n	8006828 <USB_EPStartXfer+0x56e>
            {
              len = ep->maxpacket;
 800680a:	463b      	mov	r3, r7
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	691b      	ldr	r3, [r3, #16]
 8006810:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db -= len;
 8006814:	463b      	mov	r3, r7
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	6a1a      	ldr	r2, [r3, #32]
 800681a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800681e:	1ad2      	subs	r2, r2, r3
 8006820:	463b      	mov	r3, r7
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	621a      	str	r2, [r3, #32]
 8006826:	e008      	b.n	800683a <USB_EPStartXfer+0x580>
            }
            else
            {
              len = ep->xfer_len_db;
 8006828:	463b      	mov	r3, r7
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	6a1b      	ldr	r3, [r3, #32]
 800682e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db = 0;
 8006832:	463b      	mov	r3, r7
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	2200      	movs	r2, #0
 8006838:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800683a:	1d3b      	adds	r3, r7, #4
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	647b      	str	r3, [r7, #68]	; 0x44
 8006840:	463b      	mov	r3, r7
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	785b      	ldrb	r3, [r3, #1]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d164      	bne.n	8006914 <USB_EPStartXfer+0x65a>
 800684a:	1d3b      	adds	r3, r7, #4
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006850:	1d3b      	adds	r3, r7, #4
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006858:	b29b      	uxth	r3, r3
 800685a:	461a      	mov	r2, r3
 800685c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800685e:	4413      	add	r3, r2
 8006860:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006862:	463b      	mov	r3, r7
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	781b      	ldrb	r3, [r3, #0]
 8006868:	00da      	lsls	r2, r3, #3
 800686a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800686c:	4413      	add	r3, r2
 800686e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006872:	63bb      	str	r3, [r7, #56]	; 0x38
 8006874:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006878:	2b00      	cmp	r3, #0
 800687a:	d112      	bne.n	80068a2 <USB_EPStartXfer+0x5e8>
 800687c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800687e:	881b      	ldrh	r3, [r3, #0]
 8006880:	b29b      	uxth	r3, r3
 8006882:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006886:	b29a      	uxth	r2, r3
 8006888:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800688a:	801a      	strh	r2, [r3, #0]
 800688c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800688e:	881b      	ldrh	r3, [r3, #0]
 8006890:	b29b      	uxth	r3, r3
 8006892:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006896:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800689a:	b29a      	uxth	r2, r3
 800689c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800689e:	801a      	strh	r2, [r3, #0]
 80068a0:	e054      	b.n	800694c <USB_EPStartXfer+0x692>
 80068a2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80068a6:	2b3e      	cmp	r3, #62	; 0x3e
 80068a8:	d817      	bhi.n	80068da <USB_EPStartXfer+0x620>
 80068aa:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80068ae:	085b      	lsrs	r3, r3, #1
 80068b0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80068b4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80068b8:	f003 0301 	and.w	r3, r3, #1
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d004      	beq.n	80068ca <USB_EPStartXfer+0x610>
 80068c0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80068c4:	3301      	adds	r3, #1
 80068c6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80068ca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80068ce:	b29b      	uxth	r3, r3
 80068d0:	029b      	lsls	r3, r3, #10
 80068d2:	b29a      	uxth	r2, r3
 80068d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068d6:	801a      	strh	r2, [r3, #0]
 80068d8:	e038      	b.n	800694c <USB_EPStartXfer+0x692>
 80068da:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80068de:	095b      	lsrs	r3, r3, #5
 80068e0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80068e4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80068e8:	f003 031f 	and.w	r3, r3, #31
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d104      	bne.n	80068fa <USB_EPStartXfer+0x640>
 80068f0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80068f4:	3b01      	subs	r3, #1
 80068f6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80068fa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80068fe:	b29b      	uxth	r3, r3
 8006900:	029b      	lsls	r3, r3, #10
 8006902:	b29b      	uxth	r3, r3
 8006904:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006908:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800690c:	b29a      	uxth	r2, r3
 800690e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006910:	801a      	strh	r2, [r3, #0]
 8006912:	e01b      	b.n	800694c <USB_EPStartXfer+0x692>
 8006914:	463b      	mov	r3, r7
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	785b      	ldrb	r3, [r3, #1]
 800691a:	2b01      	cmp	r3, #1
 800691c:	d116      	bne.n	800694c <USB_EPStartXfer+0x692>
 800691e:	1d3b      	adds	r3, r7, #4
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006926:	b29b      	uxth	r3, r3
 8006928:	461a      	mov	r2, r3
 800692a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800692c:	4413      	add	r3, r2
 800692e:	647b      	str	r3, [r7, #68]	; 0x44
 8006930:	463b      	mov	r3, r7
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	781b      	ldrb	r3, [r3, #0]
 8006936:	00da      	lsls	r2, r3, #3
 8006938:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800693a:	4413      	add	r3, r2
 800693c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006940:	643b      	str	r3, [r7, #64]	; 0x40
 8006942:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006946:	b29a      	uxth	r2, r3
 8006948:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800694a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800694c:	463b      	mov	r3, r7
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	895b      	ldrh	r3, [r3, #10]
 8006952:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006956:	463b      	mov	r3, r7
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	6959      	ldr	r1, [r3, #20]
 800695c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006960:	b29b      	uxth	r3, r3
 8006962:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8006966:	1d38      	adds	r0, r7, #4
 8006968:	6800      	ldr	r0, [r0, #0]
 800696a:	f000 ff1b 	bl	80077a4 <USB_WritePMA>
 800696e:	e1e2      	b.n	8006d36 <USB_EPStartXfer+0xa7c>
          }
        }
        /*auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer*/
        else
        {
          len = ep->xfer_len_db;
 8006970:	463b      	mov	r3, r7
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	6a1b      	ldr	r3, [r3, #32]
 8006976:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          /*disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 800697a:	1d3b      	adds	r3, r7, #4
 800697c:	681a      	ldr	r2, [r3, #0]
 800697e:	463b      	mov	r3, r7
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	781b      	ldrb	r3, [r3, #0]
 8006984:	009b      	lsls	r3, r3, #2
 8006986:	4413      	add	r3, r2
 8006988:	881b      	ldrh	r3, [r3, #0]
 800698a:	b29b      	uxth	r3, r3
 800698c:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8006990:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006994:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8006998:	1d3b      	adds	r3, r7, #4
 800699a:	681a      	ldr	r2, [r3, #0]
 800699c:	463b      	mov	r3, r7
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	781b      	ldrb	r3, [r3, #0]
 80069a2:	009b      	lsls	r3, r3, #2
 80069a4:	441a      	add	r2, r3
 80069a6:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80069aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80069ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80069b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80069b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069ba:	b29b      	uxth	r3, r3
 80069bc:	8013      	strh	r3, [r2, #0]
          /*Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80069be:	1d3b      	adds	r3, r7, #4
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	663b      	str	r3, [r7, #96]	; 0x60
 80069c4:	1d3b      	adds	r3, r7, #4
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80069cc:	b29b      	uxth	r3, r3
 80069ce:	461a      	mov	r2, r3
 80069d0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80069d2:	4413      	add	r3, r2
 80069d4:	663b      	str	r3, [r7, #96]	; 0x60
 80069d6:	463b      	mov	r3, r7
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	781b      	ldrb	r3, [r3, #0]
 80069dc:	00da      	lsls	r2, r3, #3
 80069de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80069e0:	4413      	add	r3, r2
 80069e2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80069e6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80069e8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80069ec:	b29a      	uxth	r2, r3
 80069ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80069f0:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80069f2:	463b      	mov	r3, r7
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	891b      	ldrh	r3, [r3, #8]
 80069f8:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
          /*Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80069fc:	463b      	mov	r3, r7
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	6959      	ldr	r1, [r3, #20]
 8006a02:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006a06:	b29b      	uxth	r3, r3
 8006a08:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8006a0c:	1d38      	adds	r0, r7, #4
 8006a0e:	6800      	ldr	r0, [r0, #0]
 8006a10:	f000 fec8 	bl	80077a4 <USB_WritePMA>
 8006a14:	e18f      	b.n	8006d36 <USB_EPStartXfer+0xa7c>

      /*mange isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006a16:	1d3b      	adds	r3, r7, #4
 8006a18:	681a      	ldr	r2, [r3, #0]
 8006a1a:	463b      	mov	r3, r7
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	781b      	ldrb	r3, [r3, #0]
 8006a20:	009b      	lsls	r3, r3, #2
 8006a22:	4413      	add	r3, r2
 8006a24:	881b      	ldrh	r3, [r3, #0]
 8006a26:	b29b      	uxth	r3, r3
 8006a28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	f000 808f 	beq.w	8006b50 <USB_EPStartXfer+0x896>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006a32:	1d3b      	adds	r3, r7, #4
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	67bb      	str	r3, [r7, #120]	; 0x78
 8006a38:	463b      	mov	r3, r7
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	785b      	ldrb	r3, [r3, #1]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d164      	bne.n	8006b0c <USB_EPStartXfer+0x852>
 8006a42:	1d3b      	adds	r3, r7, #4
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	673b      	str	r3, [r7, #112]	; 0x70
 8006a48:	1d3b      	adds	r3, r7, #4
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a50:	b29b      	uxth	r3, r3
 8006a52:	461a      	mov	r2, r3
 8006a54:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006a56:	4413      	add	r3, r2
 8006a58:	673b      	str	r3, [r7, #112]	; 0x70
 8006a5a:	463b      	mov	r3, r7
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	781b      	ldrb	r3, [r3, #0]
 8006a60:	00da      	lsls	r2, r3, #3
 8006a62:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006a64:	4413      	add	r3, r2
 8006a66:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006a6a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006a6c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d112      	bne.n	8006a9a <USB_EPStartXfer+0x7e0>
 8006a74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a76:	881b      	ldrh	r3, [r3, #0]
 8006a78:	b29b      	uxth	r3, r3
 8006a7a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006a7e:	b29a      	uxth	r2, r3
 8006a80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a82:	801a      	strh	r2, [r3, #0]
 8006a84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a86:	881b      	ldrh	r3, [r3, #0]
 8006a88:	b29b      	uxth	r3, r3
 8006a8a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a8e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a92:	b29a      	uxth	r2, r3
 8006a94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a96:	801a      	strh	r2, [r3, #0]
 8006a98:	e054      	b.n	8006b44 <USB_EPStartXfer+0x88a>
 8006a9a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006a9e:	2b3e      	cmp	r3, #62	; 0x3e
 8006aa0:	d817      	bhi.n	8006ad2 <USB_EPStartXfer+0x818>
 8006aa2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006aa6:	085b      	lsrs	r3, r3, #1
 8006aa8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006aac:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006ab0:	f003 0301 	and.w	r3, r3, #1
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d004      	beq.n	8006ac2 <USB_EPStartXfer+0x808>
 8006ab8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006abc:	3301      	adds	r3, #1
 8006abe:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006ac2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ac6:	b29b      	uxth	r3, r3
 8006ac8:	029b      	lsls	r3, r3, #10
 8006aca:	b29a      	uxth	r2, r3
 8006acc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ace:	801a      	strh	r2, [r3, #0]
 8006ad0:	e038      	b.n	8006b44 <USB_EPStartXfer+0x88a>
 8006ad2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006ad6:	095b      	lsrs	r3, r3, #5
 8006ad8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006adc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006ae0:	f003 031f 	and.w	r3, r3, #31
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d104      	bne.n	8006af2 <USB_EPStartXfer+0x838>
 8006ae8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006aec:	3b01      	subs	r3, #1
 8006aee:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006af2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006af6:	b29b      	uxth	r3, r3
 8006af8:	029b      	lsls	r3, r3, #10
 8006afa:	b29b      	uxth	r3, r3
 8006afc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b00:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b04:	b29a      	uxth	r2, r3
 8006b06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b08:	801a      	strh	r2, [r3, #0]
 8006b0a:	e01b      	b.n	8006b44 <USB_EPStartXfer+0x88a>
 8006b0c:	463b      	mov	r3, r7
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	785b      	ldrb	r3, [r3, #1]
 8006b12:	2b01      	cmp	r3, #1
 8006b14:	d116      	bne.n	8006b44 <USB_EPStartXfer+0x88a>
 8006b16:	1d3b      	adds	r3, r7, #4
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b1e:	b29b      	uxth	r3, r3
 8006b20:	461a      	mov	r2, r3
 8006b22:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006b24:	4413      	add	r3, r2
 8006b26:	67bb      	str	r3, [r7, #120]	; 0x78
 8006b28:	463b      	mov	r3, r7
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	781b      	ldrb	r3, [r3, #0]
 8006b2e:	00da      	lsls	r2, r3, #3
 8006b30:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006b32:	4413      	add	r3, r2
 8006b34:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006b38:	677b      	str	r3, [r7, #116]	; 0x74
 8006b3a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006b3e:	b29a      	uxth	r2, r3
 8006b40:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006b42:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8006b44:	463b      	mov	r3, r7
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	895b      	ldrh	r3, [r3, #10]
 8006b4a:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
 8006b4e:	e097      	b.n	8006c80 <USB_EPStartXfer+0x9c6>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006b50:	463b      	mov	r3, r7
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	785b      	ldrb	r3, [r3, #1]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d168      	bne.n	8006c2c <USB_EPStartXfer+0x972>
 8006b5a:	1d3b      	adds	r3, r7, #4
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006b62:	1d3b      	adds	r3, r7, #4
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b6a:	b29b      	uxth	r3, r3
 8006b6c:	461a      	mov	r2, r3
 8006b6e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006b72:	4413      	add	r3, r2
 8006b74:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006b78:	463b      	mov	r3, r7
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	781b      	ldrb	r3, [r3, #0]
 8006b7e:	00da      	lsls	r2, r3, #3
 8006b80:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006b84:	4413      	add	r3, r2
 8006b86:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006b8a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006b8c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d112      	bne.n	8006bba <USB_EPStartXfer+0x900>
 8006b94:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006b96:	881b      	ldrh	r3, [r3, #0]
 8006b98:	b29b      	uxth	r3, r3
 8006b9a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006b9e:	b29a      	uxth	r2, r3
 8006ba0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006ba2:	801a      	strh	r2, [r3, #0]
 8006ba4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006ba6:	881b      	ldrh	r3, [r3, #0]
 8006ba8:	b29b      	uxth	r3, r3
 8006baa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006bae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006bb2:	b29a      	uxth	r2, r3
 8006bb4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006bb6:	801a      	strh	r2, [r3, #0]
 8006bb8:	e05d      	b.n	8006c76 <USB_EPStartXfer+0x9bc>
 8006bba:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006bbe:	2b3e      	cmp	r3, #62	; 0x3e
 8006bc0:	d817      	bhi.n	8006bf2 <USB_EPStartXfer+0x938>
 8006bc2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006bc6:	085b      	lsrs	r3, r3, #1
 8006bc8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006bcc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006bd0:	f003 0301 	and.w	r3, r3, #1
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d004      	beq.n	8006be2 <USB_EPStartXfer+0x928>
 8006bd8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006bdc:	3301      	adds	r3, #1
 8006bde:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006be2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006be6:	b29b      	uxth	r3, r3
 8006be8:	029b      	lsls	r3, r3, #10
 8006bea:	b29a      	uxth	r2, r3
 8006bec:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006bee:	801a      	strh	r2, [r3, #0]
 8006bf0:	e041      	b.n	8006c76 <USB_EPStartXfer+0x9bc>
 8006bf2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006bf6:	095b      	lsrs	r3, r3, #5
 8006bf8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006bfc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006c00:	f003 031f 	and.w	r3, r3, #31
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d104      	bne.n	8006c12 <USB_EPStartXfer+0x958>
 8006c08:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006c0c:	3b01      	subs	r3, #1
 8006c0e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006c12:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006c16:	b29b      	uxth	r3, r3
 8006c18:	029b      	lsls	r3, r3, #10
 8006c1a:	b29b      	uxth	r3, r3
 8006c1c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c20:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c24:	b29a      	uxth	r2, r3
 8006c26:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006c28:	801a      	strh	r2, [r3, #0]
 8006c2a:	e024      	b.n	8006c76 <USB_EPStartXfer+0x9bc>
 8006c2c:	463b      	mov	r3, r7
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	785b      	ldrb	r3, [r3, #1]
 8006c32:	2b01      	cmp	r3, #1
 8006c34:	d11f      	bne.n	8006c76 <USB_EPStartXfer+0x9bc>
 8006c36:	1d3b      	adds	r3, r7, #4
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006c3e:	1d3b      	adds	r3, r7, #4
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c46:	b29b      	uxth	r3, r3
 8006c48:	461a      	mov	r2, r3
 8006c4a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006c4e:	4413      	add	r3, r2
 8006c50:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006c54:	463b      	mov	r3, r7
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	781b      	ldrb	r3, [r3, #0]
 8006c5a:	00da      	lsls	r2, r3, #3
 8006c5c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006c60:	4413      	add	r3, r2
 8006c62:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006c66:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006c6a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006c6e:	b29a      	uxth	r2, r3
 8006c70:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006c74:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006c76:	463b      	mov	r3, r7
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	891b      	ldrh	r3, [r3, #8]
 8006c7c:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
        }
        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006c80:	463b      	mov	r3, r7
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	6959      	ldr	r1, [r3, #20]
 8006c86:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006c8a:	b29b      	uxth	r3, r3
 8006c8c:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8006c90:	1d38      	adds	r0, r7, #4
 8006c92:	6800      	ldr	r0, [r0, #0]
 8006c94:	f000 fd86 	bl	80077a4 <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8006c98:	463b      	mov	r3, r7
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	785b      	ldrb	r3, [r3, #1]
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d122      	bne.n	8006ce8 <USB_EPStartXfer+0xa2e>
 8006ca2:	1d3b      	adds	r3, r7, #4
 8006ca4:	681a      	ldr	r2, [r3, #0]
 8006ca6:	463b      	mov	r3, r7
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	781b      	ldrb	r3, [r3, #0]
 8006cac:	009b      	lsls	r3, r3, #2
 8006cae:	4413      	add	r3, r2
 8006cb0:	881b      	ldrh	r3, [r3, #0]
 8006cb2:	b29b      	uxth	r3, r3
 8006cb4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006cb8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cbc:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8006cc0:	1d3b      	adds	r3, r7, #4
 8006cc2:	681a      	ldr	r2, [r3, #0]
 8006cc4:	463b      	mov	r3, r7
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	781b      	ldrb	r3, [r3, #0]
 8006cca:	009b      	lsls	r3, r3, #2
 8006ccc:	441a      	add	r2, r3
 8006cce:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8006cd2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006cd6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006cda:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006cde:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006ce2:	b29b      	uxth	r3, r3
 8006ce4:	8013      	strh	r3, [r2, #0]
 8006ce6:	e026      	b.n	8006d36 <USB_EPStartXfer+0xa7c>
 8006ce8:	463b      	mov	r3, r7
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	785b      	ldrb	r3, [r3, #1]
 8006cee:	2b01      	cmp	r3, #1
 8006cf0:	d121      	bne.n	8006d36 <USB_EPStartXfer+0xa7c>
 8006cf2:	1d3b      	adds	r3, r7, #4
 8006cf4:	681a      	ldr	r2, [r3, #0]
 8006cf6:	463b      	mov	r3, r7
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	781b      	ldrb	r3, [r3, #0]
 8006cfc:	009b      	lsls	r3, r3, #2
 8006cfe:	4413      	add	r3, r2
 8006d00:	881b      	ldrh	r3, [r3, #0]
 8006d02:	b29b      	uxth	r3, r3
 8006d04:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d0c:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 8006d10:	1d3b      	adds	r3, r7, #4
 8006d12:	681a      	ldr	r2, [r3, #0]
 8006d14:	463b      	mov	r3, r7
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	781b      	ldrb	r3, [r3, #0]
 8006d1a:	009b      	lsls	r3, r3, #2
 8006d1c:	441a      	add	r2, r3
 8006d1e:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8006d22:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d26:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d2a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006d2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d32:	b29b      	uxth	r3, r3
 8006d34:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8006d36:	1d3b      	adds	r3, r7, #4
 8006d38:	681a      	ldr	r2, [r3, #0]
 8006d3a:	463b      	mov	r3, r7
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	781b      	ldrb	r3, [r3, #0]
 8006d40:	009b      	lsls	r3, r3, #2
 8006d42:	4413      	add	r3, r2
 8006d44:	881b      	ldrh	r3, [r3, #0]
 8006d46:	b29b      	uxth	r3, r3
 8006d48:	f107 020e 	add.w	r2, r7, #14
 8006d4c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d50:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d54:	8013      	strh	r3, [r2, #0]
 8006d56:	f107 030e 	add.w	r3, r7, #14
 8006d5a:	f107 020e 	add.w	r2, r7, #14
 8006d5e:	8812      	ldrh	r2, [r2, #0]
 8006d60:	f082 0210 	eor.w	r2, r2, #16
 8006d64:	801a      	strh	r2, [r3, #0]
 8006d66:	f107 030e 	add.w	r3, r7, #14
 8006d6a:	f107 020e 	add.w	r2, r7, #14
 8006d6e:	8812      	ldrh	r2, [r2, #0]
 8006d70:	f082 0220 	eor.w	r2, r2, #32
 8006d74:	801a      	strh	r2, [r3, #0]
 8006d76:	1d3b      	adds	r3, r7, #4
 8006d78:	681a      	ldr	r2, [r3, #0]
 8006d7a:	463b      	mov	r3, r7
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	781b      	ldrb	r3, [r3, #0]
 8006d80:	009b      	lsls	r3, r3, #2
 8006d82:	441a      	add	r2, r3
 8006d84:	f107 030e 	add.w	r3, r7, #14
 8006d88:	881b      	ldrh	r3, [r3, #0]
 8006d8a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d8e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d9a:	b29b      	uxth	r3, r3
 8006d9c:	8013      	strh	r3, [r2, #0]
 8006d9e:	e3b5      	b.n	800750c <USB_EPStartXfer+0x1252>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8006da0:	463b      	mov	r3, r7
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	7b1b      	ldrb	r3, [r3, #12]
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	f040 8090 	bne.w	8006ecc <USB_EPStartXfer+0xc12>
    {
      /* Multi packet transfer*/
      if (ep->xfer_len > ep->maxpacket)
 8006dac:	463b      	mov	r3, r7
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	699a      	ldr	r2, [r3, #24]
 8006db2:	463b      	mov	r3, r7
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	691b      	ldr	r3, [r3, #16]
 8006db8:	429a      	cmp	r2, r3
 8006dba:	d90e      	bls.n	8006dda <USB_EPStartXfer+0xb20>
      {
        len = ep->maxpacket;
 8006dbc:	463b      	mov	r3, r7
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	691b      	ldr	r3, [r3, #16]
 8006dc2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        ep->xfer_len -= len;
 8006dc6:	463b      	mov	r3, r7
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	699a      	ldr	r2, [r3, #24]
 8006dcc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006dd0:	1ad2      	subs	r2, r2, r3
 8006dd2:	463b      	mov	r3, r7
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	619a      	str	r2, [r3, #24]
 8006dd8:	e008      	b.n	8006dec <USB_EPStartXfer+0xb32>
      }
      else
      {
        len = ep->xfer_len;
 8006dda:	463b      	mov	r3, r7
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	699b      	ldr	r3, [r3, #24]
 8006de0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        ep->xfer_len = 0U;
 8006de4:	463b      	mov	r3, r7
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	2200      	movs	r2, #0
 8006dea:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8006dec:	1d3b      	adds	r3, r7, #4
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006df4:	1d3b      	adds	r3, r7, #4
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006dfc:	b29b      	uxth	r3, r3
 8006dfe:	461a      	mov	r2, r3
 8006e00:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006e04:	4413      	add	r3, r2
 8006e06:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006e0a:	463b      	mov	r3, r7
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	781b      	ldrb	r3, [r3, #0]
 8006e10:	00da      	lsls	r2, r3, #3
 8006e12:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006e16:	4413      	add	r3, r2
 8006e18:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006e1c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006e20:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d116      	bne.n	8006e56 <USB_EPStartXfer+0xb9c>
 8006e28:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006e2c:	881b      	ldrh	r3, [r3, #0]
 8006e2e:	b29b      	uxth	r3, r3
 8006e30:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006e34:	b29a      	uxth	r2, r3
 8006e36:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006e3a:	801a      	strh	r2, [r3, #0]
 8006e3c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006e40:	881b      	ldrh	r3, [r3, #0]
 8006e42:	b29b      	uxth	r3, r3
 8006e44:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e48:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e4c:	b29a      	uxth	r2, r3
 8006e4e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006e52:	801a      	strh	r2, [r3, #0]
 8006e54:	e32c      	b.n	80074b0 <USB_EPStartXfer+0x11f6>
 8006e56:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006e5a:	2b3e      	cmp	r3, #62	; 0x3e
 8006e5c:	d818      	bhi.n	8006e90 <USB_EPStartXfer+0xbd6>
 8006e5e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006e62:	085b      	lsrs	r3, r3, #1
 8006e64:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006e68:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006e6c:	f003 0301 	and.w	r3, r3, #1
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d004      	beq.n	8006e7e <USB_EPStartXfer+0xbc4>
 8006e74:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006e78:	3301      	adds	r3, #1
 8006e7a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006e7e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006e82:	b29b      	uxth	r3, r3
 8006e84:	029b      	lsls	r3, r3, #10
 8006e86:	b29a      	uxth	r2, r3
 8006e88:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006e8c:	801a      	strh	r2, [r3, #0]
 8006e8e:	e30f      	b.n	80074b0 <USB_EPStartXfer+0x11f6>
 8006e90:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006e94:	095b      	lsrs	r3, r3, #5
 8006e96:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006e9a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006e9e:	f003 031f 	and.w	r3, r3, #31
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d104      	bne.n	8006eb0 <USB_EPStartXfer+0xbf6>
 8006ea6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006eaa:	3b01      	subs	r3, #1
 8006eac:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006eb0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006eb4:	b29b      	uxth	r3, r3
 8006eb6:	029b      	lsls	r3, r3, #10
 8006eb8:	b29b      	uxth	r3, r3
 8006eba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ebe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ec2:	b29a      	uxth	r2, r3
 8006ec4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006ec8:	801a      	strh	r2, [r3, #0]
 8006eca:	e2f1      	b.n	80074b0 <USB_EPStartXfer+0x11f6>
    }
    else
    {
      /*First Transfer Coming From HAL_PCD_EP_Receive & From ISR*/
      /*Set the Double buffer counter*/
      if (ep->type == EP_TYPE_BULK)
 8006ecc:	463b      	mov	r3, r7
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	78db      	ldrb	r3, [r3, #3]
 8006ed2:	2b02      	cmp	r3, #2
 8006ed4:	f040 818f 	bne.w	80071f6 <USB_EPStartXfer+0xf3c>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8006ed8:	463b      	mov	r3, r7
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	785b      	ldrb	r3, [r3, #1]
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d175      	bne.n	8006fce <USB_EPStartXfer+0xd14>
 8006ee2:	1d3b      	adds	r3, r7, #4
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006eea:	1d3b      	adds	r3, r7, #4
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ef2:	b29b      	uxth	r3, r3
 8006ef4:	461a      	mov	r2, r3
 8006ef6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006efa:	4413      	add	r3, r2
 8006efc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006f00:	463b      	mov	r3, r7
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	781b      	ldrb	r3, [r3, #0]
 8006f06:	00da      	lsls	r2, r3, #3
 8006f08:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006f0c:	4413      	add	r3, r2
 8006f0e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006f12:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006f16:	463b      	mov	r3, r7
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	691b      	ldr	r3, [r3, #16]
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d116      	bne.n	8006f4e <USB_EPStartXfer+0xc94>
 8006f20:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006f24:	881b      	ldrh	r3, [r3, #0]
 8006f26:	b29b      	uxth	r3, r3
 8006f28:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006f2c:	b29a      	uxth	r2, r3
 8006f2e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006f32:	801a      	strh	r2, [r3, #0]
 8006f34:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006f38:	881b      	ldrh	r3, [r3, #0]
 8006f3a:	b29b      	uxth	r3, r3
 8006f3c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f40:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f44:	b29a      	uxth	r2, r3
 8006f46:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006f4a:	801a      	strh	r2, [r3, #0]
 8006f4c:	e065      	b.n	800701a <USB_EPStartXfer+0xd60>
 8006f4e:	463b      	mov	r3, r7
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	691b      	ldr	r3, [r3, #16]
 8006f54:	2b3e      	cmp	r3, #62	; 0x3e
 8006f56:	d81a      	bhi.n	8006f8e <USB_EPStartXfer+0xcd4>
 8006f58:	463b      	mov	r3, r7
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	691b      	ldr	r3, [r3, #16]
 8006f5e:	085b      	lsrs	r3, r3, #1
 8006f60:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006f64:	463b      	mov	r3, r7
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	691b      	ldr	r3, [r3, #16]
 8006f6a:	f003 0301 	and.w	r3, r3, #1
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d004      	beq.n	8006f7c <USB_EPStartXfer+0xcc2>
 8006f72:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006f76:	3301      	adds	r3, #1
 8006f78:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006f7c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006f80:	b29b      	uxth	r3, r3
 8006f82:	029b      	lsls	r3, r3, #10
 8006f84:	b29a      	uxth	r2, r3
 8006f86:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006f8a:	801a      	strh	r2, [r3, #0]
 8006f8c:	e045      	b.n	800701a <USB_EPStartXfer+0xd60>
 8006f8e:	463b      	mov	r3, r7
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	691b      	ldr	r3, [r3, #16]
 8006f94:	095b      	lsrs	r3, r3, #5
 8006f96:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006f9a:	463b      	mov	r3, r7
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	691b      	ldr	r3, [r3, #16]
 8006fa0:	f003 031f 	and.w	r3, r3, #31
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d104      	bne.n	8006fb2 <USB_EPStartXfer+0xcf8>
 8006fa8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006fac:	3b01      	subs	r3, #1
 8006fae:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006fb2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006fb6:	b29b      	uxth	r3, r3
 8006fb8:	029b      	lsls	r3, r3, #10
 8006fba:	b29b      	uxth	r3, r3
 8006fbc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006fc0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006fc4:	b29a      	uxth	r2, r3
 8006fc6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006fca:	801a      	strh	r2, [r3, #0]
 8006fcc:	e025      	b.n	800701a <USB_EPStartXfer+0xd60>
 8006fce:	463b      	mov	r3, r7
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	785b      	ldrb	r3, [r3, #1]
 8006fd4:	2b01      	cmp	r3, #1
 8006fd6:	d120      	bne.n	800701a <USB_EPStartXfer+0xd60>
 8006fd8:	1d3b      	adds	r3, r7, #4
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006fe0:	1d3b      	adds	r3, r7, #4
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006fe8:	b29b      	uxth	r3, r3
 8006fea:	461a      	mov	r2, r3
 8006fec:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006ff0:	4413      	add	r3, r2
 8006ff2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006ff6:	463b      	mov	r3, r7
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	781b      	ldrb	r3, [r3, #0]
 8006ffc:	00da      	lsls	r2, r3, #3
 8006ffe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007002:	4413      	add	r3, r2
 8007004:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007008:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800700c:	463b      	mov	r3, r7
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	691b      	ldr	r3, [r3, #16]
 8007012:	b29a      	uxth	r2, r3
 8007014:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007018:	801a      	strh	r2, [r3, #0]
 800701a:	1d3b      	adds	r3, r7, #4
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007022:	463b      	mov	r3, r7
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	785b      	ldrb	r3, [r3, #1]
 8007028:	2b00      	cmp	r3, #0
 800702a:	d175      	bne.n	8007118 <USB_EPStartXfer+0xe5e>
 800702c:	1d3b      	adds	r3, r7, #4
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007034:	1d3b      	adds	r3, r7, #4
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800703c:	b29b      	uxth	r3, r3
 800703e:	461a      	mov	r2, r3
 8007040:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007044:	4413      	add	r3, r2
 8007046:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800704a:	463b      	mov	r3, r7
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	781b      	ldrb	r3, [r3, #0]
 8007050:	00da      	lsls	r2, r3, #3
 8007052:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007056:	4413      	add	r3, r2
 8007058:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800705c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007060:	463b      	mov	r3, r7
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	691b      	ldr	r3, [r3, #16]
 8007066:	2b00      	cmp	r3, #0
 8007068:	d116      	bne.n	8007098 <USB_EPStartXfer+0xdde>
 800706a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800706e:	881b      	ldrh	r3, [r3, #0]
 8007070:	b29b      	uxth	r3, r3
 8007072:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007076:	b29a      	uxth	r2, r3
 8007078:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800707c:	801a      	strh	r2, [r3, #0]
 800707e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007082:	881b      	ldrh	r3, [r3, #0]
 8007084:	b29b      	uxth	r3, r3
 8007086:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800708a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800708e:	b29a      	uxth	r2, r3
 8007090:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007094:	801a      	strh	r2, [r3, #0]
 8007096:	e061      	b.n	800715c <USB_EPStartXfer+0xea2>
 8007098:	463b      	mov	r3, r7
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	691b      	ldr	r3, [r3, #16]
 800709e:	2b3e      	cmp	r3, #62	; 0x3e
 80070a0:	d81a      	bhi.n	80070d8 <USB_EPStartXfer+0xe1e>
 80070a2:	463b      	mov	r3, r7
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	691b      	ldr	r3, [r3, #16]
 80070a8:	085b      	lsrs	r3, r3, #1
 80070aa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80070ae:	463b      	mov	r3, r7
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	691b      	ldr	r3, [r3, #16]
 80070b4:	f003 0301 	and.w	r3, r3, #1
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d004      	beq.n	80070c6 <USB_EPStartXfer+0xe0c>
 80070bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070c0:	3301      	adds	r3, #1
 80070c2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80070c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070ca:	b29b      	uxth	r3, r3
 80070cc:	029b      	lsls	r3, r3, #10
 80070ce:	b29a      	uxth	r2, r3
 80070d0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80070d4:	801a      	strh	r2, [r3, #0]
 80070d6:	e041      	b.n	800715c <USB_EPStartXfer+0xea2>
 80070d8:	463b      	mov	r3, r7
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	691b      	ldr	r3, [r3, #16]
 80070de:	095b      	lsrs	r3, r3, #5
 80070e0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80070e4:	463b      	mov	r3, r7
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	691b      	ldr	r3, [r3, #16]
 80070ea:	f003 031f 	and.w	r3, r3, #31
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d104      	bne.n	80070fc <USB_EPStartXfer+0xe42>
 80070f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070f6:	3b01      	subs	r3, #1
 80070f8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80070fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007100:	b29b      	uxth	r3, r3
 8007102:	029b      	lsls	r3, r3, #10
 8007104:	b29b      	uxth	r3, r3
 8007106:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800710a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800710e:	b29a      	uxth	r2, r3
 8007110:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007114:	801a      	strh	r2, [r3, #0]
 8007116:	e021      	b.n	800715c <USB_EPStartXfer+0xea2>
 8007118:	463b      	mov	r3, r7
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	785b      	ldrb	r3, [r3, #1]
 800711e:	2b01      	cmp	r3, #1
 8007120:	d11c      	bne.n	800715c <USB_EPStartXfer+0xea2>
 8007122:	1d3b      	adds	r3, r7, #4
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800712a:	b29b      	uxth	r3, r3
 800712c:	461a      	mov	r2, r3
 800712e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007132:	4413      	add	r3, r2
 8007134:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007138:	463b      	mov	r3, r7
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	781b      	ldrb	r3, [r3, #0]
 800713e:	00da      	lsls	r2, r3, #3
 8007140:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007144:	4413      	add	r3, r2
 8007146:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800714a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800714e:	463b      	mov	r3, r7
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	691b      	ldr	r3, [r3, #16]
 8007154:	b29a      	uxth	r2, r3
 8007156:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800715a:	801a      	strh	r2, [r3, #0]
        /*Coming from ISR*/
        if (ep->xfer_count != 0U)
 800715c:	463b      	mov	r3, r7
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	69db      	ldr	r3, [r3, #28]
 8007162:	2b00      	cmp	r3, #0
 8007164:	f000 81a4 	beq.w	80074b0 <USB_EPStartXfer+0x11f6>
        {
          /* update last value to check if there is blocking state*/
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8007168:	1d3b      	adds	r3, r7, #4
 800716a:	681a      	ldr	r2, [r3, #0]
 800716c:	463b      	mov	r3, r7
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	781b      	ldrb	r3, [r3, #0]
 8007172:	009b      	lsls	r3, r3, #2
 8007174:	4413      	add	r3, r2
 8007176:	881b      	ldrh	r3, [r3, #0]
 8007178:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800717c:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8007180:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007184:	2b00      	cmp	r3, #0
 8007186:	d005      	beq.n	8007194 <USB_EPStartXfer+0xeda>
 8007188:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800718c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007190:	2b00      	cmp	r3, #0
 8007192:	d10d      	bne.n	80071b0 <USB_EPStartXfer+0xef6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007194:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8007198:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800719c:	2b00      	cmp	r3, #0
 800719e:	f040 8187 	bne.w	80074b0 <USB_EPStartXfer+0x11f6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80071a2:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80071a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	f040 8180 	bne.w	80074b0 <USB_EPStartXfer+0x11f6>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 80071b0:	1d3b      	adds	r3, r7, #4
 80071b2:	681a      	ldr	r2, [r3, #0]
 80071b4:	463b      	mov	r3, r7
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	781b      	ldrb	r3, [r3, #0]
 80071ba:	009b      	lsls	r3, r3, #2
 80071bc:	4413      	add	r3, r2
 80071be:	881b      	ldrh	r3, [r3, #0]
 80071c0:	b29b      	uxth	r3, r3
 80071c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80071c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071ca:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 80071ce:	1d3b      	adds	r3, r7, #4
 80071d0:	681a      	ldr	r2, [r3, #0]
 80071d2:	463b      	mov	r3, r7
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	781b      	ldrb	r3, [r3, #0]
 80071d8:	009b      	lsls	r3, r3, #2
 80071da:	441a      	add	r2, r3
 80071dc:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 80071e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80071e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80071e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80071ec:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80071f0:	b29b      	uxth	r3, r3
 80071f2:	8013      	strh	r3, [r2, #0]
 80071f4:	e15c      	b.n	80074b0 <USB_EPStartXfer+0x11f6>
          }
        }
      }
      /*iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80071f6:	463b      	mov	r3, r7
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	78db      	ldrb	r3, [r3, #3]
 80071fc:	2b01      	cmp	r3, #1
 80071fe:	f040 8155 	bne.w	80074ac <USB_EPStartXfer+0x11f2>
      {
        /* Multi packet transfer*/
        if (ep->xfer_len > ep->maxpacket)
 8007202:	463b      	mov	r3, r7
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	699a      	ldr	r2, [r3, #24]
 8007208:	463b      	mov	r3, r7
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	691b      	ldr	r3, [r3, #16]
 800720e:	429a      	cmp	r2, r3
 8007210:	d90e      	bls.n	8007230 <USB_EPStartXfer+0xf76>
        {
          len = ep->maxpacket;
 8007212:	463b      	mov	r3, r7
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	691b      	ldr	r3, [r3, #16]
 8007218:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          ep->xfer_len -= len;
 800721c:	463b      	mov	r3, r7
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	699a      	ldr	r2, [r3, #24]
 8007222:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007226:	1ad2      	subs	r2, r2, r3
 8007228:	463b      	mov	r3, r7
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	619a      	str	r2, [r3, #24]
 800722e:	e008      	b.n	8007242 <USB_EPStartXfer+0xf88>
        }
        else
        {
          len = ep->xfer_len;
 8007230:	463b      	mov	r3, r7
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	699b      	ldr	r3, [r3, #24]
 8007236:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          ep->xfer_len = 0U;
 800723a:	463b      	mov	r3, r7
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	2200      	movs	r2, #0
 8007240:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8007242:	463b      	mov	r3, r7
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	785b      	ldrb	r3, [r3, #1]
 8007248:	2b00      	cmp	r3, #0
 800724a:	d16f      	bne.n	800732c <USB_EPStartXfer+0x1072>
 800724c:	1d3b      	adds	r3, r7, #4
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007254:	1d3b      	adds	r3, r7, #4
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800725c:	b29b      	uxth	r3, r3
 800725e:	461a      	mov	r2, r3
 8007260:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007264:	4413      	add	r3, r2
 8007266:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800726a:	463b      	mov	r3, r7
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	781b      	ldrb	r3, [r3, #0]
 8007270:	00da      	lsls	r2, r3, #3
 8007272:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007276:	4413      	add	r3, r2
 8007278:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800727c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007280:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007284:	2b00      	cmp	r3, #0
 8007286:	d116      	bne.n	80072b6 <USB_EPStartXfer+0xffc>
 8007288:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800728c:	881b      	ldrh	r3, [r3, #0]
 800728e:	b29b      	uxth	r3, r3
 8007290:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007294:	b29a      	uxth	r2, r3
 8007296:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800729a:	801a      	strh	r2, [r3, #0]
 800729c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80072a0:	881b      	ldrh	r3, [r3, #0]
 80072a2:	b29b      	uxth	r3, r3
 80072a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80072a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80072ac:	b29a      	uxth	r2, r3
 80072ae:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80072b2:	801a      	strh	r2, [r3, #0]
 80072b4:	e05f      	b.n	8007376 <USB_EPStartXfer+0x10bc>
 80072b6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80072ba:	2b3e      	cmp	r3, #62	; 0x3e
 80072bc:	d818      	bhi.n	80072f0 <USB_EPStartXfer+0x1036>
 80072be:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80072c2:	085b      	lsrs	r3, r3, #1
 80072c4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80072c8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80072cc:	f003 0301 	and.w	r3, r3, #1
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d004      	beq.n	80072de <USB_EPStartXfer+0x1024>
 80072d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80072d8:	3301      	adds	r3, #1
 80072da:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80072de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80072e2:	b29b      	uxth	r3, r3
 80072e4:	029b      	lsls	r3, r3, #10
 80072e6:	b29a      	uxth	r2, r3
 80072e8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80072ec:	801a      	strh	r2, [r3, #0]
 80072ee:	e042      	b.n	8007376 <USB_EPStartXfer+0x10bc>
 80072f0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80072f4:	095b      	lsrs	r3, r3, #5
 80072f6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80072fa:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80072fe:	f003 031f 	and.w	r3, r3, #31
 8007302:	2b00      	cmp	r3, #0
 8007304:	d104      	bne.n	8007310 <USB_EPStartXfer+0x1056>
 8007306:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800730a:	3b01      	subs	r3, #1
 800730c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007310:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007314:	b29b      	uxth	r3, r3
 8007316:	029b      	lsls	r3, r3, #10
 8007318:	b29b      	uxth	r3, r3
 800731a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800731e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007322:	b29a      	uxth	r2, r3
 8007324:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007328:	801a      	strh	r2, [r3, #0]
 800732a:	e024      	b.n	8007376 <USB_EPStartXfer+0x10bc>
 800732c:	463b      	mov	r3, r7
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	785b      	ldrb	r3, [r3, #1]
 8007332:	2b01      	cmp	r3, #1
 8007334:	d11f      	bne.n	8007376 <USB_EPStartXfer+0x10bc>
 8007336:	1d3b      	adds	r3, r7, #4
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800733e:	1d3b      	adds	r3, r7, #4
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007346:	b29b      	uxth	r3, r3
 8007348:	461a      	mov	r2, r3
 800734a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800734e:	4413      	add	r3, r2
 8007350:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007354:	463b      	mov	r3, r7
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	781b      	ldrb	r3, [r3, #0]
 800735a:	00da      	lsls	r2, r3, #3
 800735c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007360:	4413      	add	r3, r2
 8007362:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007366:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800736a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800736e:	b29a      	uxth	r2, r3
 8007370:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007374:	801a      	strh	r2, [r3, #0]
 8007376:	1d3b      	adds	r3, r7, #4
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800737e:	463b      	mov	r3, r7
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	785b      	ldrb	r3, [r3, #1]
 8007384:	2b00      	cmp	r3, #0
 8007386:	d16f      	bne.n	8007468 <USB_EPStartXfer+0x11ae>
 8007388:	1d3b      	adds	r3, r7, #4
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007390:	1d3b      	adds	r3, r7, #4
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007398:	b29b      	uxth	r3, r3
 800739a:	461a      	mov	r2, r3
 800739c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80073a0:	4413      	add	r3, r2
 80073a2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80073a6:	463b      	mov	r3, r7
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	781b      	ldrb	r3, [r3, #0]
 80073ac:	00da      	lsls	r2, r3, #3
 80073ae:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80073b2:	4413      	add	r3, r2
 80073b4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80073b8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80073bc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d116      	bne.n	80073f2 <USB_EPStartXfer+0x1138>
 80073c4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80073c8:	881b      	ldrh	r3, [r3, #0]
 80073ca:	b29b      	uxth	r3, r3
 80073cc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80073d0:	b29a      	uxth	r2, r3
 80073d2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80073d6:	801a      	strh	r2, [r3, #0]
 80073d8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80073dc:	881b      	ldrh	r3, [r3, #0]
 80073de:	b29b      	uxth	r3, r3
 80073e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80073e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80073e8:	b29a      	uxth	r2, r3
 80073ea:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80073ee:	801a      	strh	r2, [r3, #0]
 80073f0:	e05e      	b.n	80074b0 <USB_EPStartXfer+0x11f6>
 80073f2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80073f6:	2b3e      	cmp	r3, #62	; 0x3e
 80073f8:	d818      	bhi.n	800742c <USB_EPStartXfer+0x1172>
 80073fa:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80073fe:	085b      	lsrs	r3, r3, #1
 8007400:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007404:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007408:	f003 0301 	and.w	r3, r3, #1
 800740c:	2b00      	cmp	r3, #0
 800740e:	d004      	beq.n	800741a <USB_EPStartXfer+0x1160>
 8007410:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007414:	3301      	adds	r3, #1
 8007416:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800741a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800741e:	b29b      	uxth	r3, r3
 8007420:	029b      	lsls	r3, r3, #10
 8007422:	b29a      	uxth	r2, r3
 8007424:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007428:	801a      	strh	r2, [r3, #0]
 800742a:	e041      	b.n	80074b0 <USB_EPStartXfer+0x11f6>
 800742c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007430:	095b      	lsrs	r3, r3, #5
 8007432:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007436:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800743a:	f003 031f 	and.w	r3, r3, #31
 800743e:	2b00      	cmp	r3, #0
 8007440:	d104      	bne.n	800744c <USB_EPStartXfer+0x1192>
 8007442:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007446:	3b01      	subs	r3, #1
 8007448:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800744c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007450:	b29b      	uxth	r3, r3
 8007452:	029b      	lsls	r3, r3, #10
 8007454:	b29b      	uxth	r3, r3
 8007456:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800745a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800745e:	b29a      	uxth	r2, r3
 8007460:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007464:	801a      	strh	r2, [r3, #0]
 8007466:	e023      	b.n	80074b0 <USB_EPStartXfer+0x11f6>
 8007468:	463b      	mov	r3, r7
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	785b      	ldrb	r3, [r3, #1]
 800746e:	2b01      	cmp	r3, #1
 8007470:	d11e      	bne.n	80074b0 <USB_EPStartXfer+0x11f6>
 8007472:	1d3b      	adds	r3, r7, #4
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800747a:	b29b      	uxth	r3, r3
 800747c:	461a      	mov	r2, r3
 800747e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007482:	4413      	add	r3, r2
 8007484:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007488:	463b      	mov	r3, r7
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	781b      	ldrb	r3, [r3, #0]
 800748e:	00da      	lsls	r2, r3, #3
 8007490:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007494:	4413      	add	r3, r2
 8007496:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800749a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800749e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80074a2:	b29a      	uxth	r2, r3
 80074a4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80074a8:	801a      	strh	r2, [r3, #0]
 80074aa:	e001      	b.n	80074b0 <USB_EPStartXfer+0x11f6>
      }
      else
      {
        return HAL_ERROR;
 80074ac:	2301      	movs	r3, #1
 80074ae:	e02e      	b.n	800750e <USB_EPStartXfer+0x1254>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80074b0:	1d3b      	adds	r3, r7, #4
 80074b2:	681a      	ldr	r2, [r3, #0]
 80074b4:	463b      	mov	r3, r7
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	781b      	ldrb	r3, [r3, #0]
 80074ba:	009b      	lsls	r3, r3, #2
 80074bc:	4413      	add	r3, r2
 80074be:	881b      	ldrh	r3, [r3, #0]
 80074c0:	b29b      	uxth	r3, r3
 80074c2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80074c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074ca:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 80074ce:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80074d2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80074d6:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 80074da:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80074de:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80074e2:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 80074e6:	1d3b      	adds	r3, r7, #4
 80074e8:	681a      	ldr	r2, [r3, #0]
 80074ea:	463b      	mov	r3, r7
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	781b      	ldrb	r3, [r3, #0]
 80074f0:	009b      	lsls	r3, r3, #2
 80074f2:	441a      	add	r2, r3
 80074f4:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80074f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80074fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007500:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007504:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007508:	b29b      	uxth	r3, r3
 800750a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800750c:	2300      	movs	r3, #0
}
 800750e:	4618      	mov	r0, r3
 8007510:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8007514:	46bd      	mov	sp, r7
 8007516:	bd80      	pop	{r7, pc}

08007518 <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007518:	b480      	push	{r7}
 800751a:	b085      	sub	sp, #20
 800751c:	af00      	add	r7, sp, #0
 800751e:	6078      	str	r0, [r7, #4]
 8007520:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8007522:	683b      	ldr	r3, [r7, #0]
 8007524:	785b      	ldrb	r3, [r3, #1]
 8007526:	2b00      	cmp	r3, #0
 8007528:	d020      	beq.n	800756c <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800752a:	687a      	ldr	r2, [r7, #4]
 800752c:	683b      	ldr	r3, [r7, #0]
 800752e:	781b      	ldrb	r3, [r3, #0]
 8007530:	009b      	lsls	r3, r3, #2
 8007532:	4413      	add	r3, r2
 8007534:	881b      	ldrh	r3, [r3, #0]
 8007536:	b29b      	uxth	r3, r3
 8007538:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800753c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007540:	81bb      	strh	r3, [r7, #12]
 8007542:	89bb      	ldrh	r3, [r7, #12]
 8007544:	f083 0310 	eor.w	r3, r3, #16
 8007548:	81bb      	strh	r3, [r7, #12]
 800754a:	687a      	ldr	r2, [r7, #4]
 800754c:	683b      	ldr	r3, [r7, #0]
 800754e:	781b      	ldrb	r3, [r3, #0]
 8007550:	009b      	lsls	r3, r3, #2
 8007552:	441a      	add	r2, r3
 8007554:	89bb      	ldrh	r3, [r7, #12]
 8007556:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800755a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800755e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007562:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007566:	b29b      	uxth	r3, r3
 8007568:	8013      	strh	r3, [r2, #0]
 800756a:	e01f      	b.n	80075ac <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800756c:	687a      	ldr	r2, [r7, #4]
 800756e:	683b      	ldr	r3, [r7, #0]
 8007570:	781b      	ldrb	r3, [r3, #0]
 8007572:	009b      	lsls	r3, r3, #2
 8007574:	4413      	add	r3, r2
 8007576:	881b      	ldrh	r3, [r3, #0]
 8007578:	b29b      	uxth	r3, r3
 800757a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800757e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007582:	81fb      	strh	r3, [r7, #14]
 8007584:	89fb      	ldrh	r3, [r7, #14]
 8007586:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800758a:	81fb      	strh	r3, [r7, #14]
 800758c:	687a      	ldr	r2, [r7, #4]
 800758e:	683b      	ldr	r3, [r7, #0]
 8007590:	781b      	ldrb	r3, [r3, #0]
 8007592:	009b      	lsls	r3, r3, #2
 8007594:	441a      	add	r2, r3
 8007596:	89fb      	ldrh	r3, [r7, #14]
 8007598:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800759c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80075a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80075a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80075a8:	b29b      	uxth	r3, r3
 80075aa:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80075ac:	2300      	movs	r3, #0
}
 80075ae:	4618      	mov	r0, r3
 80075b0:	3714      	adds	r7, #20
 80075b2:	46bd      	mov	sp, r7
 80075b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b8:	4770      	bx	lr

080075ba <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80075ba:	b480      	push	{r7}
 80075bc:	b087      	sub	sp, #28
 80075be:	af00      	add	r7, sp, #0
 80075c0:	6078      	str	r0, [r7, #4]
 80075c2:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80075c4:	683b      	ldr	r3, [r7, #0]
 80075c6:	7b1b      	ldrb	r3, [r3, #12]
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	f040 809d 	bne.w	8007708 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80075ce:	683b      	ldr	r3, [r7, #0]
 80075d0:	785b      	ldrb	r3, [r3, #1]
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d04c      	beq.n	8007670 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80075d6:	687a      	ldr	r2, [r7, #4]
 80075d8:	683b      	ldr	r3, [r7, #0]
 80075da:	781b      	ldrb	r3, [r3, #0]
 80075dc:	009b      	lsls	r3, r3, #2
 80075de:	4413      	add	r3, r2
 80075e0:	881b      	ldrh	r3, [r3, #0]
 80075e2:	823b      	strh	r3, [r7, #16]
 80075e4:	8a3b      	ldrh	r3, [r7, #16]
 80075e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d01b      	beq.n	8007626 <USB_EPClearStall+0x6c>
 80075ee:	687a      	ldr	r2, [r7, #4]
 80075f0:	683b      	ldr	r3, [r7, #0]
 80075f2:	781b      	ldrb	r3, [r3, #0]
 80075f4:	009b      	lsls	r3, r3, #2
 80075f6:	4413      	add	r3, r2
 80075f8:	881b      	ldrh	r3, [r3, #0]
 80075fa:	b29b      	uxth	r3, r3
 80075fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007600:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007604:	81fb      	strh	r3, [r7, #14]
 8007606:	687a      	ldr	r2, [r7, #4]
 8007608:	683b      	ldr	r3, [r7, #0]
 800760a:	781b      	ldrb	r3, [r3, #0]
 800760c:	009b      	lsls	r3, r3, #2
 800760e:	441a      	add	r2, r3
 8007610:	89fb      	ldrh	r3, [r7, #14]
 8007612:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007616:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800761a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800761e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007622:	b29b      	uxth	r3, r3
 8007624:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007626:	683b      	ldr	r3, [r7, #0]
 8007628:	78db      	ldrb	r3, [r3, #3]
 800762a:	2b01      	cmp	r3, #1
 800762c:	d06c      	beq.n	8007708 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800762e:	687a      	ldr	r2, [r7, #4]
 8007630:	683b      	ldr	r3, [r7, #0]
 8007632:	781b      	ldrb	r3, [r3, #0]
 8007634:	009b      	lsls	r3, r3, #2
 8007636:	4413      	add	r3, r2
 8007638:	881b      	ldrh	r3, [r3, #0]
 800763a:	b29b      	uxth	r3, r3
 800763c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007640:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007644:	81bb      	strh	r3, [r7, #12]
 8007646:	89bb      	ldrh	r3, [r7, #12]
 8007648:	f083 0320 	eor.w	r3, r3, #32
 800764c:	81bb      	strh	r3, [r7, #12]
 800764e:	687a      	ldr	r2, [r7, #4]
 8007650:	683b      	ldr	r3, [r7, #0]
 8007652:	781b      	ldrb	r3, [r3, #0]
 8007654:	009b      	lsls	r3, r3, #2
 8007656:	441a      	add	r2, r3
 8007658:	89bb      	ldrh	r3, [r7, #12]
 800765a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800765e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007662:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007666:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800766a:	b29b      	uxth	r3, r3
 800766c:	8013      	strh	r3, [r2, #0]
 800766e:	e04b      	b.n	8007708 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007670:	687a      	ldr	r2, [r7, #4]
 8007672:	683b      	ldr	r3, [r7, #0]
 8007674:	781b      	ldrb	r3, [r3, #0]
 8007676:	009b      	lsls	r3, r3, #2
 8007678:	4413      	add	r3, r2
 800767a:	881b      	ldrh	r3, [r3, #0]
 800767c:	82fb      	strh	r3, [r7, #22]
 800767e:	8afb      	ldrh	r3, [r7, #22]
 8007680:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007684:	2b00      	cmp	r3, #0
 8007686:	d01b      	beq.n	80076c0 <USB_EPClearStall+0x106>
 8007688:	687a      	ldr	r2, [r7, #4]
 800768a:	683b      	ldr	r3, [r7, #0]
 800768c:	781b      	ldrb	r3, [r3, #0]
 800768e:	009b      	lsls	r3, r3, #2
 8007690:	4413      	add	r3, r2
 8007692:	881b      	ldrh	r3, [r3, #0]
 8007694:	b29b      	uxth	r3, r3
 8007696:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800769a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800769e:	82bb      	strh	r3, [r7, #20]
 80076a0:	687a      	ldr	r2, [r7, #4]
 80076a2:	683b      	ldr	r3, [r7, #0]
 80076a4:	781b      	ldrb	r3, [r3, #0]
 80076a6:	009b      	lsls	r3, r3, #2
 80076a8:	441a      	add	r2, r3
 80076aa:	8abb      	ldrh	r3, [r7, #20]
 80076ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80076b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80076b4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80076b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80076bc:	b29b      	uxth	r3, r3
 80076be:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80076c0:	687a      	ldr	r2, [r7, #4]
 80076c2:	683b      	ldr	r3, [r7, #0]
 80076c4:	781b      	ldrb	r3, [r3, #0]
 80076c6:	009b      	lsls	r3, r3, #2
 80076c8:	4413      	add	r3, r2
 80076ca:	881b      	ldrh	r3, [r3, #0]
 80076cc:	b29b      	uxth	r3, r3
 80076ce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80076d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076d6:	827b      	strh	r3, [r7, #18]
 80076d8:	8a7b      	ldrh	r3, [r7, #18]
 80076da:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80076de:	827b      	strh	r3, [r7, #18]
 80076e0:	8a7b      	ldrh	r3, [r7, #18]
 80076e2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80076e6:	827b      	strh	r3, [r7, #18]
 80076e8:	687a      	ldr	r2, [r7, #4]
 80076ea:	683b      	ldr	r3, [r7, #0]
 80076ec:	781b      	ldrb	r3, [r3, #0]
 80076ee:	009b      	lsls	r3, r3, #2
 80076f0:	441a      	add	r2, r3
 80076f2:	8a7b      	ldrh	r3, [r7, #18]
 80076f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80076f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80076fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007700:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007704:	b29b      	uxth	r3, r3
 8007706:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8007708:	2300      	movs	r3, #0
}
 800770a:	4618      	mov	r0, r3
 800770c:	371c      	adds	r7, #28
 800770e:	46bd      	mov	sp, r7
 8007710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007714:	4770      	bx	lr

08007716 <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8007716:	b480      	push	{r7}
 8007718:	b083      	sub	sp, #12
 800771a:	af00      	add	r7, sp, #0
 800771c:	6078      	str	r0, [r7, #4]
 800771e:	460b      	mov	r3, r1
 8007720:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8007722:	78fb      	ldrb	r3, [r7, #3]
 8007724:	2b00      	cmp	r3, #0
 8007726:	d103      	bne.n	8007730 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	2280      	movs	r2, #128	; 0x80
 800772c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8007730:	2300      	movs	r3, #0
}
 8007732:	4618      	mov	r0, r3
 8007734:	370c      	adds	r7, #12
 8007736:	46bd      	mov	sp, r7
 8007738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773c:	4770      	bx	lr

0800773e <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800773e:	b480      	push	{r7}
 8007740:	b083      	sub	sp, #12
 8007742:	af00      	add	r7, sp, #0
 8007744:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800774c:	b29b      	uxth	r3, r3
 800774e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007752:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007756:	b29a      	uxth	r2, r3
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800775e:	2300      	movs	r3, #0
}
 8007760:	4618      	mov	r0, r3
 8007762:	370c      	adds	r7, #12
 8007764:	46bd      	mov	sp, r7
 8007766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776a:	4770      	bx	lr

0800776c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800776c:	b480      	push	{r7}
 800776e:	b085      	sub	sp, #20
 8007770:	af00      	add	r7, sp, #0
 8007772:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800777a:	b29b      	uxth	r3, r3
 800777c:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800777e:	68fb      	ldr	r3, [r7, #12]
}
 8007780:	4618      	mov	r0, r3
 8007782:	3714      	adds	r7, #20
 8007784:	46bd      	mov	sp, r7
 8007786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778a:	4770      	bx	lr

0800778c <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800778c:	b480      	push	{r7}
 800778e:	b083      	sub	sp, #12
 8007790:	af00      	add	r7, sp, #0
 8007792:	6078      	str	r0, [r7, #4]
 8007794:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8007796:	2300      	movs	r3, #0
}
 8007798:	4618      	mov	r0, r3
 800779a:	370c      	adds	r7, #12
 800779c:	46bd      	mov	sp, r7
 800779e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a2:	4770      	bx	lr

080077a4 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80077a4:	b480      	push	{r7}
 80077a6:	b08d      	sub	sp, #52	; 0x34
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	60f8      	str	r0, [r7, #12]
 80077ac:	60b9      	str	r1, [r7, #8]
 80077ae:	4611      	mov	r1, r2
 80077b0:	461a      	mov	r2, r3
 80077b2:	460b      	mov	r3, r1
 80077b4:	80fb      	strh	r3, [r7, #6]
 80077b6:	4613      	mov	r3, r2
 80077b8:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80077ba:	88bb      	ldrh	r3, [r7, #4]
 80077bc:	3301      	adds	r3, #1
 80077be:	085b      	lsrs	r3, r3, #1
 80077c0:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80077c6:	68bb      	ldr	r3, [r7, #8]
 80077c8:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80077ca:	88fa      	ldrh	r2, [r7, #6]
 80077cc:	69fb      	ldr	r3, [r7, #28]
 80077ce:	4413      	add	r3, r2
 80077d0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80077d4:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 80077d6:	6a3b      	ldr	r3, [r7, #32]
 80077d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80077da:	e01b      	b.n	8007814 <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 80077dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077de:	781b      	ldrb	r3, [r3, #0]
 80077e0:	61bb      	str	r3, [r7, #24]
    pBuf++;
 80077e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077e4:	3301      	adds	r3, #1
 80077e6:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 80077e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077ea:	781b      	ldrb	r3, [r3, #0]
 80077ec:	b29b      	uxth	r3, r3
 80077ee:	021b      	lsls	r3, r3, #8
 80077f0:	b29b      	uxth	r3, r3
 80077f2:	461a      	mov	r2, r3
 80077f4:	69bb      	ldr	r3, [r7, #24]
 80077f6:	4313      	orrs	r3, r2
 80077f8:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 80077fa:	697b      	ldr	r3, [r7, #20]
 80077fc:	b29a      	uxth	r2, r3
 80077fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007800:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8007802:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007804:	3302      	adds	r3, #2
 8007806:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 8007808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800780a:	3301      	adds	r3, #1
 800780c:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800780e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007810:	3b01      	subs	r3, #1
 8007812:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007814:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007816:	2b00      	cmp	r3, #0
 8007818:	d1e0      	bne.n	80077dc <USB_WritePMA+0x38>
  }
}
 800781a:	bf00      	nop
 800781c:	3734      	adds	r7, #52	; 0x34
 800781e:	46bd      	mov	sp, r7
 8007820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007824:	4770      	bx	lr

08007826 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007826:	b480      	push	{r7}
 8007828:	b08b      	sub	sp, #44	; 0x2c
 800782a:	af00      	add	r7, sp, #0
 800782c:	60f8      	str	r0, [r7, #12]
 800782e:	60b9      	str	r1, [r7, #8]
 8007830:	4611      	mov	r1, r2
 8007832:	461a      	mov	r2, r3
 8007834:	460b      	mov	r3, r1
 8007836:	80fb      	strh	r3, [r7, #6]
 8007838:	4613      	mov	r3, r2
 800783a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800783c:	88bb      	ldrh	r3, [r7, #4]
 800783e:	085b      	lsrs	r3, r3, #1
 8007840:	b29b      	uxth	r3, r3
 8007842:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007848:	68bb      	ldr	r3, [r7, #8]
 800784a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800784c:	88fa      	ldrh	r2, [r7, #6]
 800784e:	697b      	ldr	r3, [r7, #20]
 8007850:	4413      	add	r3, r2
 8007852:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007856:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8007858:	69bb      	ldr	r3, [r7, #24]
 800785a:	627b      	str	r3, [r7, #36]	; 0x24
 800785c:	e018      	b.n	8007890 <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800785e:	6a3b      	ldr	r3, [r7, #32]
 8007860:	881b      	ldrh	r3, [r3, #0]
 8007862:	b29b      	uxth	r3, r3
 8007864:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8007866:	6a3b      	ldr	r3, [r7, #32]
 8007868:	3302      	adds	r3, #2
 800786a:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800786c:	693b      	ldr	r3, [r7, #16]
 800786e:	b2da      	uxtb	r2, r3
 8007870:	69fb      	ldr	r3, [r7, #28]
 8007872:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007874:	69fb      	ldr	r3, [r7, #28]
 8007876:	3301      	adds	r3, #1
 8007878:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800787a:	693b      	ldr	r3, [r7, #16]
 800787c:	0a1b      	lsrs	r3, r3, #8
 800787e:	b2da      	uxtb	r2, r3
 8007880:	69fb      	ldr	r3, [r7, #28]
 8007882:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007884:	69fb      	ldr	r3, [r7, #28]
 8007886:	3301      	adds	r3, #1
 8007888:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 800788a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800788c:	3b01      	subs	r3, #1
 800788e:	627b      	str	r3, [r7, #36]	; 0x24
 8007890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007892:	2b00      	cmp	r3, #0
 8007894:	d1e3      	bne.n	800785e <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8007896:	88bb      	ldrh	r3, [r7, #4]
 8007898:	f003 0301 	and.w	r3, r3, #1
 800789c:	b29b      	uxth	r3, r3
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d007      	beq.n	80078b2 <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 80078a2:	6a3b      	ldr	r3, [r7, #32]
 80078a4:	881b      	ldrh	r3, [r3, #0]
 80078a6:	b29b      	uxth	r3, r3
 80078a8:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80078aa:	693b      	ldr	r3, [r7, #16]
 80078ac:	b2da      	uxtb	r2, r3
 80078ae:	69fb      	ldr	r3, [r7, #28]
 80078b0:	701a      	strb	r2, [r3, #0]
  }
}
 80078b2:	bf00      	nop
 80078b4:	372c      	adds	r7, #44	; 0x2c
 80078b6:	46bd      	mov	sp, r7
 80078b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078bc:	4770      	bx	lr

080078be <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80078be:	b580      	push	{r7, lr}
 80078c0:	b084      	sub	sp, #16
 80078c2:	af00      	add	r7, sp, #0
 80078c4:	6078      	str	r0, [r7, #4]
 80078c6:	460b      	mov	r3, r1
 80078c8:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80078ca:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80078ce:	f002 f89d 	bl	8009a0c <USBD_static_malloc>
 80078d2:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d105      	bne.n	80078e6 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	2200      	movs	r2, #0
 80078de:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 80078e2:	2302      	movs	r3, #2
 80078e4:	e066      	b.n	80079b4 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	68fa      	ldr	r2, [r7, #12]
 80078ea:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	7c1b      	ldrb	r3, [r3, #16]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d119      	bne.n	800792a <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80078f6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80078fa:	2202      	movs	r2, #2
 80078fc:	2181      	movs	r1, #129	; 0x81
 80078fe:	6878      	ldr	r0, [r7, #4]
 8007900:	f001 ff29 	bl	8009756 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	2201      	movs	r2, #1
 8007908:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800790a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800790e:	2202      	movs	r2, #2
 8007910:	2101      	movs	r1, #1
 8007912:	6878      	ldr	r0, [r7, #4]
 8007914:	f001 ff1f 	bl	8009756 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	2201      	movs	r2, #1
 800791c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	2210      	movs	r2, #16
 8007924:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8007928:	e016      	b.n	8007958 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800792a:	2340      	movs	r3, #64	; 0x40
 800792c:	2202      	movs	r2, #2
 800792e:	2181      	movs	r1, #129	; 0x81
 8007930:	6878      	ldr	r0, [r7, #4]
 8007932:	f001 ff10 	bl	8009756 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	2201      	movs	r2, #1
 800793a:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800793c:	2340      	movs	r3, #64	; 0x40
 800793e:	2202      	movs	r2, #2
 8007940:	2101      	movs	r1, #1
 8007942:	6878      	ldr	r0, [r7, #4]
 8007944:	f001 ff07 	bl	8009756 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	2201      	movs	r2, #1
 800794c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	2210      	movs	r2, #16
 8007954:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007958:	2308      	movs	r3, #8
 800795a:	2203      	movs	r2, #3
 800795c:	2182      	movs	r1, #130	; 0x82
 800795e:	6878      	ldr	r0, [r7, #4]
 8007960:	f001 fef9 	bl	8009756 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	2201      	movs	r2, #1
 8007968:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	2200      	movs	r2, #0
 800797a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	2200      	movs	r2, #0
 8007982:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	7c1b      	ldrb	r3, [r3, #16]
 800798a:	2b00      	cmp	r3, #0
 800798c:	d109      	bne.n	80079a2 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007994:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007998:	2101      	movs	r1, #1
 800799a:	6878      	ldr	r0, [r7, #4]
 800799c:	f001 ffcb 	bl	8009936 <USBD_LL_PrepareReceive>
 80079a0:	e007      	b.n	80079b2 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80079a8:	2340      	movs	r3, #64	; 0x40
 80079aa:	2101      	movs	r1, #1
 80079ac:	6878      	ldr	r0, [r7, #4]
 80079ae:	f001 ffc2 	bl	8009936 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80079b2:	2300      	movs	r3, #0
}
 80079b4:	4618      	mov	r0, r3
 80079b6:	3710      	adds	r7, #16
 80079b8:	46bd      	mov	sp, r7
 80079ba:	bd80      	pop	{r7, pc}

080079bc <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80079bc:	b580      	push	{r7, lr}
 80079be:	b082      	sub	sp, #8
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	6078      	str	r0, [r7, #4]
 80079c4:	460b      	mov	r3, r1
 80079c6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80079c8:	2181      	movs	r1, #129	; 0x81
 80079ca:	6878      	ldr	r0, [r7, #4]
 80079cc:	f001 fee9 	bl	80097a2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	2200      	movs	r2, #0
 80079d4:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80079d6:	2101      	movs	r1, #1
 80079d8:	6878      	ldr	r0, [r7, #4]
 80079da:	f001 fee2 	bl	80097a2 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	2200      	movs	r2, #0
 80079e2:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80079e6:	2182      	movs	r1, #130	; 0x82
 80079e8:	6878      	ldr	r0, [r7, #4]
 80079ea:	f001 feda 	bl	80097a2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	2200      	movs	r2, #0
 80079f2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	2200      	movs	r2, #0
 80079fa:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d00e      	beq.n	8007a26 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007a0e:	685b      	ldr	r3, [r3, #4]
 8007a10:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007a18:	4618      	mov	r0, r3
 8007a1a:	f002 f805 	bl	8009a28 <USBD_static_free>
    pdev->pClassData = NULL;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	2200      	movs	r2, #0
 8007a22:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007a26:	2300      	movs	r3, #0
}
 8007a28:	4618      	mov	r0, r3
 8007a2a:	3708      	adds	r7, #8
 8007a2c:	46bd      	mov	sp, r7
 8007a2e:	bd80      	pop	{r7, pc}

08007a30 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007a30:	b580      	push	{r7, lr}
 8007a32:	b086      	sub	sp, #24
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	6078      	str	r0, [r7, #4]
 8007a38:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007a40:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8007a42:	2300      	movs	r3, #0
 8007a44:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8007a46:	2300      	movs	r3, #0
 8007a48:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007a4e:	683b      	ldr	r3, [r7, #0]
 8007a50:	781b      	ldrb	r3, [r3, #0]
 8007a52:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d03a      	beq.n	8007ad0 <USBD_CDC_Setup+0xa0>
 8007a5a:	2b20      	cmp	r3, #32
 8007a5c:	f040 8097 	bne.w	8007b8e <USBD_CDC_Setup+0x15e>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8007a60:	683b      	ldr	r3, [r7, #0]
 8007a62:	88db      	ldrh	r3, [r3, #6]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d029      	beq.n	8007abc <USBD_CDC_Setup+0x8c>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8007a68:	683b      	ldr	r3, [r7, #0]
 8007a6a:	781b      	ldrb	r3, [r3, #0]
 8007a6c:	b25b      	sxtb	r3, r3
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	da11      	bge.n	8007a96 <USBD_CDC_Setup+0x66>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007a78:	689b      	ldr	r3, [r3, #8]
 8007a7a:	683a      	ldr	r2, [r7, #0]
 8007a7c:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8007a7e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007a80:	683a      	ldr	r2, [r7, #0]
 8007a82:	88d2      	ldrh	r2, [r2, #6]
 8007a84:	4798      	blx	r3
                                                            req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 8007a86:	6939      	ldr	r1, [r7, #16]
 8007a88:	683b      	ldr	r3, [r7, #0]
 8007a8a:	88db      	ldrh	r3, [r3, #6]
 8007a8c:	461a      	mov	r2, r3
 8007a8e:	6878      	ldr	r0, [r7, #4]
 8007a90:	f001 fa8d 	bl	8008fae <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8007a94:	e082      	b.n	8007b9c <USBD_CDC_Setup+0x16c>
          hcdc->CmdOpCode = req->bRequest;
 8007a96:	683b      	ldr	r3, [r7, #0]
 8007a98:	785a      	ldrb	r2, [r3, #1]
 8007a9a:	693b      	ldr	r3, [r7, #16]
 8007a9c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8007aa0:	683b      	ldr	r3, [r7, #0]
 8007aa2:	88db      	ldrh	r3, [r3, #6]
 8007aa4:	b2da      	uxtb	r2, r3
 8007aa6:	693b      	ldr	r3, [r7, #16]
 8007aa8:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8007aac:	6939      	ldr	r1, [r7, #16]
 8007aae:	683b      	ldr	r3, [r7, #0]
 8007ab0:	88db      	ldrh	r3, [r3, #6]
 8007ab2:	461a      	mov	r2, r3
 8007ab4:	6878      	ldr	r0, [r7, #4]
 8007ab6:	f001 faa6 	bl	8009006 <USBD_CtlPrepareRx>
      break;
 8007aba:	e06f      	b.n	8007b9c <USBD_CDC_Setup+0x16c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007ac2:	689b      	ldr	r3, [r3, #8]
 8007ac4:	683a      	ldr	r2, [r7, #0]
 8007ac6:	7850      	ldrb	r0, [r2, #1]
 8007ac8:	2200      	movs	r2, #0
 8007aca:	6839      	ldr	r1, [r7, #0]
 8007acc:	4798      	blx	r3
      break;
 8007ace:	e065      	b.n	8007b9c <USBD_CDC_Setup+0x16c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007ad0:	683b      	ldr	r3, [r7, #0]
 8007ad2:	785b      	ldrb	r3, [r3, #1]
 8007ad4:	2b0b      	cmp	r3, #11
 8007ad6:	d84f      	bhi.n	8007b78 <USBD_CDC_Setup+0x148>
 8007ad8:	a201      	add	r2, pc, #4	; (adr r2, 8007ae0 <USBD_CDC_Setup+0xb0>)
 8007ada:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ade:	bf00      	nop
 8007ae0:	08007b11 	.word	0x08007b11
 8007ae4:	08007b87 	.word	0x08007b87
 8007ae8:	08007b79 	.word	0x08007b79
 8007aec:	08007b79 	.word	0x08007b79
 8007af0:	08007b79 	.word	0x08007b79
 8007af4:	08007b79 	.word	0x08007b79
 8007af8:	08007b79 	.word	0x08007b79
 8007afc:	08007b79 	.word	0x08007b79
 8007b00:	08007b79 	.word	0x08007b79
 8007b04:	08007b79 	.word	0x08007b79
 8007b08:	08007b39 	.word	0x08007b39
 8007b0c:	08007b61 	.word	0x08007b61
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b16:	2b03      	cmp	r3, #3
 8007b18:	d107      	bne.n	8007b2a <USBD_CDC_Setup+0xfa>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007b1a:	f107 030c 	add.w	r3, r7, #12
 8007b1e:	2202      	movs	r2, #2
 8007b20:	4619      	mov	r1, r3
 8007b22:	6878      	ldr	r0, [r7, #4]
 8007b24:	f001 fa43 	bl	8008fae <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007b28:	e030      	b.n	8007b8c <USBD_CDC_Setup+0x15c>
            USBD_CtlError(pdev, req);
 8007b2a:	6839      	ldr	r1, [r7, #0]
 8007b2c:	6878      	ldr	r0, [r7, #4]
 8007b2e:	f001 f9cd 	bl	8008ecc <USBD_CtlError>
            ret = USBD_FAIL;
 8007b32:	2303      	movs	r3, #3
 8007b34:	75fb      	strb	r3, [r7, #23]
          break;
 8007b36:	e029      	b.n	8007b8c <USBD_CDC_Setup+0x15c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b3e:	2b03      	cmp	r3, #3
 8007b40:	d107      	bne.n	8007b52 <USBD_CDC_Setup+0x122>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007b42:	f107 030f 	add.w	r3, r7, #15
 8007b46:	2201      	movs	r2, #1
 8007b48:	4619      	mov	r1, r3
 8007b4a:	6878      	ldr	r0, [r7, #4]
 8007b4c:	f001 fa2f 	bl	8008fae <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007b50:	e01c      	b.n	8007b8c <USBD_CDC_Setup+0x15c>
            USBD_CtlError(pdev, req);
 8007b52:	6839      	ldr	r1, [r7, #0]
 8007b54:	6878      	ldr	r0, [r7, #4]
 8007b56:	f001 f9b9 	bl	8008ecc <USBD_CtlError>
            ret = USBD_FAIL;
 8007b5a:	2303      	movs	r3, #3
 8007b5c:	75fb      	strb	r3, [r7, #23]
          break;
 8007b5e:	e015      	b.n	8007b8c <USBD_CDC_Setup+0x15c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b66:	2b03      	cmp	r3, #3
 8007b68:	d00f      	beq.n	8007b8a <USBD_CDC_Setup+0x15a>
          {
            USBD_CtlError(pdev, req);
 8007b6a:	6839      	ldr	r1, [r7, #0]
 8007b6c:	6878      	ldr	r0, [r7, #4]
 8007b6e:	f001 f9ad 	bl	8008ecc <USBD_CtlError>
            ret = USBD_FAIL;
 8007b72:	2303      	movs	r3, #3
 8007b74:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007b76:	e008      	b.n	8007b8a <USBD_CDC_Setup+0x15a>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007b78:	6839      	ldr	r1, [r7, #0]
 8007b7a:	6878      	ldr	r0, [r7, #4]
 8007b7c:	f001 f9a6 	bl	8008ecc <USBD_CtlError>
          ret = USBD_FAIL;
 8007b80:	2303      	movs	r3, #3
 8007b82:	75fb      	strb	r3, [r7, #23]
          break;
 8007b84:	e002      	b.n	8007b8c <USBD_CDC_Setup+0x15c>
          break;
 8007b86:	bf00      	nop
 8007b88:	e008      	b.n	8007b9c <USBD_CDC_Setup+0x16c>
          break;
 8007b8a:	bf00      	nop
      }
      break;
 8007b8c:	e006      	b.n	8007b9c <USBD_CDC_Setup+0x16c>

    default:
      USBD_CtlError(pdev, req);
 8007b8e:	6839      	ldr	r1, [r7, #0]
 8007b90:	6878      	ldr	r0, [r7, #4]
 8007b92:	f001 f99b 	bl	8008ecc <USBD_CtlError>
      ret = USBD_FAIL;
 8007b96:	2303      	movs	r3, #3
 8007b98:	75fb      	strb	r3, [r7, #23]
      break;
 8007b9a:	bf00      	nop
  }

  return (uint8_t)ret;
 8007b9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b9e:	4618      	mov	r0, r3
 8007ba0:	3718      	adds	r7, #24
 8007ba2:	46bd      	mov	sp, r7
 8007ba4:	bd80      	pop	{r7, pc}
 8007ba6:	bf00      	nop

08007ba8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007ba8:	b580      	push	{r7, lr}
 8007baa:	b084      	sub	sp, #16
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	6078      	str	r0, [r7, #4]
 8007bb0:	460b      	mov	r3, r1
 8007bb2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007bba:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d101      	bne.n	8007bca <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007bc6:	2303      	movs	r3, #3
 8007bc8:	e04f      	b.n	8007c6a <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007bd0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8007bd2:	78fa      	ldrb	r2, [r7, #3]
 8007bd4:	6879      	ldr	r1, [r7, #4]
 8007bd6:	4613      	mov	r3, r2
 8007bd8:	009b      	lsls	r3, r3, #2
 8007bda:	4413      	add	r3, r2
 8007bdc:	009b      	lsls	r3, r3, #2
 8007bde:	440b      	add	r3, r1
 8007be0:	3318      	adds	r3, #24
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d029      	beq.n	8007c3c <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8007be8:	78fa      	ldrb	r2, [r7, #3]
 8007bea:	6879      	ldr	r1, [r7, #4]
 8007bec:	4613      	mov	r3, r2
 8007bee:	009b      	lsls	r3, r3, #2
 8007bf0:	4413      	add	r3, r2
 8007bf2:	009b      	lsls	r3, r3, #2
 8007bf4:	440b      	add	r3, r1
 8007bf6:	3318      	adds	r3, #24
 8007bf8:	681a      	ldr	r2, [r3, #0]
 8007bfa:	78f9      	ldrb	r1, [r7, #3]
 8007bfc:	68f8      	ldr	r0, [r7, #12]
 8007bfe:	460b      	mov	r3, r1
 8007c00:	009b      	lsls	r3, r3, #2
 8007c02:	440b      	add	r3, r1
 8007c04:	00db      	lsls	r3, r3, #3
 8007c06:	4403      	add	r3, r0
 8007c08:	3338      	adds	r3, #56	; 0x38
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	fbb2 f1f3 	udiv	r1, r2, r3
 8007c10:	fb03 f301 	mul.w	r3, r3, r1
 8007c14:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d110      	bne.n	8007c3c <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8007c1a:	78fa      	ldrb	r2, [r7, #3]
 8007c1c:	6879      	ldr	r1, [r7, #4]
 8007c1e:	4613      	mov	r3, r2
 8007c20:	009b      	lsls	r3, r3, #2
 8007c22:	4413      	add	r3, r2
 8007c24:	009b      	lsls	r3, r3, #2
 8007c26:	440b      	add	r3, r1
 8007c28:	3318      	adds	r3, #24
 8007c2a:	2200      	movs	r2, #0
 8007c2c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007c2e:	78f9      	ldrb	r1, [r7, #3]
 8007c30:	2300      	movs	r3, #0
 8007c32:	2200      	movs	r2, #0
 8007c34:	6878      	ldr	r0, [r7, #4]
 8007c36:	f001 fe5d 	bl	80098f4 <USBD_LL_Transmit>
 8007c3a:	e015      	b.n	8007c68 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8007c3c:	68bb      	ldr	r3, [r7, #8]
 8007c3e:	2200      	movs	r2, #0
 8007c40:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007c4a:	691b      	ldr	r3, [r3, #16]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d00b      	beq.n	8007c68 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007c56:	691b      	ldr	r3, [r3, #16]
 8007c58:	68ba      	ldr	r2, [r7, #8]
 8007c5a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8007c5e:	68ba      	ldr	r2, [r7, #8]
 8007c60:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8007c64:	78fa      	ldrb	r2, [r7, #3]
 8007c66:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8007c68:	2300      	movs	r3, #0
}
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	3710      	adds	r7, #16
 8007c6e:	46bd      	mov	sp, r7
 8007c70:	bd80      	pop	{r7, pc}

08007c72 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007c72:	b580      	push	{r7, lr}
 8007c74:	b084      	sub	sp, #16
 8007c76:	af00      	add	r7, sp, #0
 8007c78:	6078      	str	r0, [r7, #4]
 8007c7a:	460b      	mov	r3, r1
 8007c7c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007c84:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d101      	bne.n	8007c94 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007c90:	2303      	movs	r3, #3
 8007c92:	e015      	b.n	8007cc0 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007c94:	78fb      	ldrb	r3, [r7, #3]
 8007c96:	4619      	mov	r1, r3
 8007c98:	6878      	ldr	r0, [r7, #4]
 8007c9a:	f001 fe6d 	bl	8009978 <USBD_LL_GetRxDataSize>
 8007c9e:	4602      	mov	r2, r0
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007cac:	68db      	ldr	r3, [r3, #12]
 8007cae:	68fa      	ldr	r2, [r7, #12]
 8007cb0:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007cb4:	68fa      	ldr	r2, [r7, #12]
 8007cb6:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007cba:	4611      	mov	r1, r2
 8007cbc:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007cbe:	2300      	movs	r3, #0
}
 8007cc0:	4618      	mov	r0, r3
 8007cc2:	3710      	adds	r7, #16
 8007cc4:	46bd      	mov	sp, r7
 8007cc6:	bd80      	pop	{r7, pc}

08007cc8 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007cc8:	b580      	push	{r7, lr}
 8007cca:	b084      	sub	sp, #16
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007cd6:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d015      	beq.n	8007d0e <USBD_CDC_EP0_RxReady+0x46>
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007ce8:	2bff      	cmp	r3, #255	; 0xff
 8007cea:	d010      	beq.n	8007d0e <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007cf2:	689b      	ldr	r3, [r3, #8]
 8007cf4:	68fa      	ldr	r2, [r7, #12]
 8007cf6:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8007cfa:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8007cfc:	68fa      	ldr	r2, [r7, #12]
 8007cfe:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007d02:	b292      	uxth	r2, r2
 8007d04:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	22ff      	movs	r2, #255	; 0xff
 8007d0a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8007d0e:	2300      	movs	r3, #0
}
 8007d10:	4618      	mov	r0, r3
 8007d12:	3710      	adds	r7, #16
 8007d14:	46bd      	mov	sp, r7
 8007d16:	bd80      	pop	{r7, pc}

08007d18 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007d18:	b480      	push	{r7}
 8007d1a:	b083      	sub	sp, #12
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	2243      	movs	r2, #67	; 0x43
 8007d24:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8007d26:	4b03      	ldr	r3, [pc, #12]	; (8007d34 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8007d28:	4618      	mov	r0, r3
 8007d2a:	370c      	adds	r7, #12
 8007d2c:	46bd      	mov	sp, r7
 8007d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d32:	4770      	bx	lr
 8007d34:	200000e8 	.word	0x200000e8

08007d38 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007d38:	b480      	push	{r7}
 8007d3a:	b083      	sub	sp, #12
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	2243      	movs	r2, #67	; 0x43
 8007d44:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8007d46:	4b03      	ldr	r3, [pc, #12]	; (8007d54 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8007d48:	4618      	mov	r0, r3
 8007d4a:	370c      	adds	r7, #12
 8007d4c:	46bd      	mov	sp, r7
 8007d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d52:	4770      	bx	lr
 8007d54:	200000a4 	.word	0x200000a4

08007d58 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007d58:	b480      	push	{r7}
 8007d5a:	b083      	sub	sp, #12
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	2243      	movs	r2, #67	; 0x43
 8007d64:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8007d66:	4b03      	ldr	r3, [pc, #12]	; (8007d74 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8007d68:	4618      	mov	r0, r3
 8007d6a:	370c      	adds	r7, #12
 8007d6c:	46bd      	mov	sp, r7
 8007d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d72:	4770      	bx	lr
 8007d74:	2000012c 	.word	0x2000012c

08007d78 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007d78:	b480      	push	{r7}
 8007d7a:	b083      	sub	sp, #12
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	220a      	movs	r2, #10
 8007d84:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8007d86:	4b03      	ldr	r3, [pc, #12]	; (8007d94 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007d88:	4618      	mov	r0, r3
 8007d8a:	370c      	adds	r7, #12
 8007d8c:	46bd      	mov	sp, r7
 8007d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d92:	4770      	bx	lr
 8007d94:	20000060 	.word	0x20000060

08007d98 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007d98:	b480      	push	{r7}
 8007d9a:	b083      	sub	sp, #12
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	6078      	str	r0, [r7, #4]
 8007da0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007da2:	683b      	ldr	r3, [r7, #0]
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d101      	bne.n	8007dac <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007da8:	2303      	movs	r3, #3
 8007daa:	e004      	b.n	8007db6 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	683a      	ldr	r2, [r7, #0]
 8007db0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8007db4:	2300      	movs	r3, #0
}
 8007db6:	4618      	mov	r0, r3
 8007db8:	370c      	adds	r7, #12
 8007dba:	46bd      	mov	sp, r7
 8007dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc0:	4770      	bx	lr

08007dc2 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007dc2:	b480      	push	{r7}
 8007dc4:	b087      	sub	sp, #28
 8007dc6:	af00      	add	r7, sp, #0
 8007dc8:	60f8      	str	r0, [r7, #12]
 8007dca:	60b9      	str	r1, [r7, #8]
 8007dcc:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007dd4:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8007dd6:	697b      	ldr	r3, [r7, #20]
 8007dd8:	68ba      	ldr	r2, [r7, #8]
 8007dda:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007dde:	697b      	ldr	r3, [r7, #20]
 8007de0:	687a      	ldr	r2, [r7, #4]
 8007de2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8007de6:	2300      	movs	r3, #0
}
 8007de8:	4618      	mov	r0, r3
 8007dea:	371c      	adds	r7, #28
 8007dec:	46bd      	mov	sp, r7
 8007dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df2:	4770      	bx	lr

08007df4 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007df4:	b480      	push	{r7}
 8007df6:	b085      	sub	sp, #20
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	6078      	str	r0, [r7, #4]
 8007dfc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007e04:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	683a      	ldr	r2, [r7, #0]
 8007e0a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8007e0e:	2300      	movs	r3, #0
}
 8007e10:	4618      	mov	r0, r3
 8007e12:	3714      	adds	r7, #20
 8007e14:	46bd      	mov	sp, r7
 8007e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e1a:	4770      	bx	lr

08007e1c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007e1c:	b580      	push	{r7, lr}
 8007e1e:	b084      	sub	sp, #16
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007e2a:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8007e2c:	2301      	movs	r3, #1
 8007e2e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d101      	bne.n	8007e3e <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007e3a:	2303      	movs	r3, #3
 8007e3c:	e01a      	b.n	8007e74 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8007e3e:	68bb      	ldr	r3, [r7, #8]
 8007e40:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d114      	bne.n	8007e72 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8007e48:	68bb      	ldr	r3, [r7, #8]
 8007e4a:	2201      	movs	r2, #1
 8007e4c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8007e50:	68bb      	ldr	r3, [r7, #8]
 8007e52:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8007e5a:	68bb      	ldr	r3, [r7, #8]
 8007e5c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8007e60:	68bb      	ldr	r3, [r7, #8]
 8007e62:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8007e66:	2181      	movs	r1, #129	; 0x81
 8007e68:	6878      	ldr	r0, [r7, #4]
 8007e6a:	f001 fd43 	bl	80098f4 <USBD_LL_Transmit>

    ret = USBD_OK;
 8007e6e:	2300      	movs	r3, #0
 8007e70:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8007e72:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e74:	4618      	mov	r0, r3
 8007e76:	3710      	adds	r7, #16
 8007e78:	46bd      	mov	sp, r7
 8007e7a:	bd80      	pop	{r7, pc}

08007e7c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007e7c:	b580      	push	{r7, lr}
 8007e7e:	b084      	sub	sp, #16
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007e8a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d101      	bne.n	8007e9a <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8007e96:	2303      	movs	r3, #3
 8007e98:	e016      	b.n	8007ec8 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	7c1b      	ldrb	r3, [r3, #16]
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d109      	bne.n	8007eb6 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007ea8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007eac:	2101      	movs	r1, #1
 8007eae:	6878      	ldr	r0, [r7, #4]
 8007eb0:	f001 fd41 	bl	8009936 <USBD_LL_PrepareReceive>
 8007eb4:	e007      	b.n	8007ec6 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007ebc:	2340      	movs	r3, #64	; 0x40
 8007ebe:	2101      	movs	r1, #1
 8007ec0:	6878      	ldr	r0, [r7, #4]
 8007ec2:	f001 fd38 	bl	8009936 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007ec6:	2300      	movs	r3, #0
}
 8007ec8:	4618      	mov	r0, r3
 8007eca:	3710      	adds	r7, #16
 8007ecc:	46bd      	mov	sp, r7
 8007ece:	bd80      	pop	{r7, pc}

08007ed0 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007ed0:	b580      	push	{r7, lr}
 8007ed2:	b086      	sub	sp, #24
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	60f8      	str	r0, [r7, #12]
 8007ed8:	60b9      	str	r1, [r7, #8]
 8007eda:	4613      	mov	r3, r2
 8007edc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d101      	bne.n	8007ee8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007ee4:	2303      	movs	r3, #3
 8007ee6:	e01f      	b.n	8007f28 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	2200      	movs	r2, #0
 8007eec:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	2200      	movs	r2, #0
 8007ef4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	2200      	movs	r2, #0
 8007efc:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007f00:	68bb      	ldr	r3, [r7, #8]
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d003      	beq.n	8007f0e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	68ba      	ldr	r2, [r7, #8]
 8007f0a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	2201      	movs	r2, #1
 8007f12:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	79fa      	ldrb	r2, [r7, #7]
 8007f1a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007f1c:	68f8      	ldr	r0, [r7, #12]
 8007f1e:	f001 fb9f 	bl	8009660 <USBD_LL_Init>
 8007f22:	4603      	mov	r3, r0
 8007f24:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007f26:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f28:	4618      	mov	r0, r3
 8007f2a:	3718      	adds	r7, #24
 8007f2c:	46bd      	mov	sp, r7
 8007f2e:	bd80      	pop	{r7, pc}

08007f30 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007f30:	b580      	push	{r7, lr}
 8007f32:	b084      	sub	sp, #16
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	6078      	str	r0, [r7, #4]
 8007f38:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007f3a:	2300      	movs	r3, #0
 8007f3c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007f3e:	683b      	ldr	r3, [r7, #0]
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d101      	bne.n	8007f48 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8007f44:	2303      	movs	r3, #3
 8007f46:	e016      	b.n	8007f76 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	683a      	ldr	r2, [r7, #0]
 8007f4c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d00b      	beq.n	8007f74 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f64:	f107 020e 	add.w	r2, r7, #14
 8007f68:	4610      	mov	r0, r2
 8007f6a:	4798      	blx	r3
 8007f6c:	4602      	mov	r2, r0
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8007f74:	2300      	movs	r3, #0
}
 8007f76:	4618      	mov	r0, r3
 8007f78:	3710      	adds	r7, #16
 8007f7a:	46bd      	mov	sp, r7
 8007f7c:	bd80      	pop	{r7, pc}

08007f7e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007f7e:	b580      	push	{r7, lr}
 8007f80:	b082      	sub	sp, #8
 8007f82:	af00      	add	r7, sp, #0
 8007f84:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007f86:	6878      	ldr	r0, [r7, #4]
 8007f88:	f001 fbca 	bl	8009720 <USBD_LL_Start>
 8007f8c:	4603      	mov	r3, r0
}
 8007f8e:	4618      	mov	r0, r3
 8007f90:	3708      	adds	r7, #8
 8007f92:	46bd      	mov	sp, r7
 8007f94:	bd80      	pop	{r7, pc}

08007f96 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007f96:	b480      	push	{r7}
 8007f98:	b083      	sub	sp, #12
 8007f9a:	af00      	add	r7, sp, #0
 8007f9c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007f9e:	2300      	movs	r3, #0
}
 8007fa0:	4618      	mov	r0, r3
 8007fa2:	370c      	adds	r7, #12
 8007fa4:	46bd      	mov	sp, r7
 8007fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007faa:	4770      	bx	lr

08007fac <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007fac:	b580      	push	{r7, lr}
 8007fae:	b084      	sub	sp, #16
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	6078      	str	r0, [r7, #4]
 8007fb4:	460b      	mov	r3, r1
 8007fb6:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007fb8:	2303      	movs	r3, #3
 8007fba:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d009      	beq.n	8007fda <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	78fa      	ldrb	r2, [r7, #3]
 8007fd0:	4611      	mov	r1, r2
 8007fd2:	6878      	ldr	r0, [r7, #4]
 8007fd4:	4798      	blx	r3
 8007fd6:	4603      	mov	r3, r0
 8007fd8:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007fda:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fdc:	4618      	mov	r0, r3
 8007fde:	3710      	adds	r7, #16
 8007fe0:	46bd      	mov	sp, r7
 8007fe2:	bd80      	pop	{r7, pc}

08007fe4 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007fe4:	b580      	push	{r7, lr}
 8007fe6:	b082      	sub	sp, #8
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	6078      	str	r0, [r7, #4]
 8007fec:	460b      	mov	r3, r1
 8007fee:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d007      	beq.n	800800a <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008000:	685b      	ldr	r3, [r3, #4]
 8008002:	78fa      	ldrb	r2, [r7, #3]
 8008004:	4611      	mov	r1, r2
 8008006:	6878      	ldr	r0, [r7, #4]
 8008008:	4798      	blx	r3
  }

  return USBD_OK;
 800800a:	2300      	movs	r3, #0
}
 800800c:	4618      	mov	r0, r3
 800800e:	3708      	adds	r7, #8
 8008010:	46bd      	mov	sp, r7
 8008012:	bd80      	pop	{r7, pc}

08008014 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008014:	b580      	push	{r7, lr}
 8008016:	b084      	sub	sp, #16
 8008018:	af00      	add	r7, sp, #0
 800801a:	6078      	str	r0, [r7, #4]
 800801c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008024:	6839      	ldr	r1, [r7, #0]
 8008026:	4618      	mov	r0, r3
 8008028:	f000 ff16 	bl	8008e58 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	2201      	movs	r2, #1
 8008030:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800803a:	461a      	mov	r2, r3
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008048:	f003 031f 	and.w	r3, r3, #31
 800804c:	2b01      	cmp	r3, #1
 800804e:	d00e      	beq.n	800806e <USBD_LL_SetupStage+0x5a>
 8008050:	2b01      	cmp	r3, #1
 8008052:	d302      	bcc.n	800805a <USBD_LL_SetupStage+0x46>
 8008054:	2b02      	cmp	r3, #2
 8008056:	d014      	beq.n	8008082 <USBD_LL_SetupStage+0x6e>
 8008058:	e01d      	b.n	8008096 <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008060:	4619      	mov	r1, r3
 8008062:	6878      	ldr	r0, [r7, #4]
 8008064:	f000 f9d6 	bl	8008414 <USBD_StdDevReq>
 8008068:	4603      	mov	r3, r0
 800806a:	73fb      	strb	r3, [r7, #15]
      break;
 800806c:	e020      	b.n	80080b0 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008074:	4619      	mov	r1, r3
 8008076:	6878      	ldr	r0, [r7, #4]
 8008078:	f000 fa3a 	bl	80084f0 <USBD_StdItfReq>
 800807c:	4603      	mov	r3, r0
 800807e:	73fb      	strb	r3, [r7, #15]
      break;
 8008080:	e016      	b.n	80080b0 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008088:	4619      	mov	r1, r3
 800808a:	6878      	ldr	r0, [r7, #4]
 800808c:	f000 fa76 	bl	800857c <USBD_StdEPReq>
 8008090:	4603      	mov	r3, r0
 8008092:	73fb      	strb	r3, [r7, #15]
      break;
 8008094:	e00c      	b.n	80080b0 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800809c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80080a0:	b2db      	uxtb	r3, r3
 80080a2:	4619      	mov	r1, r3
 80080a4:	6878      	ldr	r0, [r7, #4]
 80080a6:	f001 fb9b 	bl	80097e0 <USBD_LL_StallEP>
 80080aa:	4603      	mov	r3, r0
 80080ac:	73fb      	strb	r3, [r7, #15]
      break;
 80080ae:	bf00      	nop
  }

  return ret;
 80080b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80080b2:	4618      	mov	r0, r3
 80080b4:	3710      	adds	r7, #16
 80080b6:	46bd      	mov	sp, r7
 80080b8:	bd80      	pop	{r7, pc}

080080ba <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80080ba:	b580      	push	{r7, lr}
 80080bc:	b086      	sub	sp, #24
 80080be:	af00      	add	r7, sp, #0
 80080c0:	60f8      	str	r0, [r7, #12]
 80080c2:	460b      	mov	r3, r1
 80080c4:	607a      	str	r2, [r7, #4]
 80080c6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80080c8:	7afb      	ldrb	r3, [r7, #11]
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d137      	bne.n	800813e <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80080d4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80080dc:	2b03      	cmp	r3, #3
 80080de:	d14a      	bne.n	8008176 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80080e0:	693b      	ldr	r3, [r7, #16]
 80080e2:	689a      	ldr	r2, [r3, #8]
 80080e4:	693b      	ldr	r3, [r7, #16]
 80080e6:	68db      	ldr	r3, [r3, #12]
 80080e8:	429a      	cmp	r2, r3
 80080ea:	d913      	bls.n	8008114 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80080ec:	693b      	ldr	r3, [r7, #16]
 80080ee:	689a      	ldr	r2, [r3, #8]
 80080f0:	693b      	ldr	r3, [r7, #16]
 80080f2:	68db      	ldr	r3, [r3, #12]
 80080f4:	1ad2      	subs	r2, r2, r3
 80080f6:	693b      	ldr	r3, [r7, #16]
 80080f8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80080fa:	693b      	ldr	r3, [r7, #16]
 80080fc:	68da      	ldr	r2, [r3, #12]
 80080fe:	693b      	ldr	r3, [r7, #16]
 8008100:	689b      	ldr	r3, [r3, #8]
 8008102:	4293      	cmp	r3, r2
 8008104:	bf28      	it	cs
 8008106:	4613      	movcs	r3, r2
 8008108:	461a      	mov	r2, r3
 800810a:	6879      	ldr	r1, [r7, #4]
 800810c:	68f8      	ldr	r0, [r7, #12]
 800810e:	f000 ff97 	bl	8009040 <USBD_CtlContinueRx>
 8008112:	e030      	b.n	8008176 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800811a:	691b      	ldr	r3, [r3, #16]
 800811c:	2b00      	cmp	r3, #0
 800811e:	d00a      	beq.n	8008136 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008126:	2b03      	cmp	r3, #3
 8008128:	d105      	bne.n	8008136 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008130:	691b      	ldr	r3, [r3, #16]
 8008132:	68f8      	ldr	r0, [r7, #12]
 8008134:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 8008136:	68f8      	ldr	r0, [r7, #12]
 8008138:	f000 ff93 	bl	8009062 <USBD_CtlSendStatus>
 800813c:	e01b      	b.n	8008176 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008144:	699b      	ldr	r3, [r3, #24]
 8008146:	2b00      	cmp	r3, #0
 8008148:	d013      	beq.n	8008172 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8008150:	2b03      	cmp	r3, #3
 8008152:	d10e      	bne.n	8008172 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800815a:	699b      	ldr	r3, [r3, #24]
 800815c:	7afa      	ldrb	r2, [r7, #11]
 800815e:	4611      	mov	r1, r2
 8008160:	68f8      	ldr	r0, [r7, #12]
 8008162:	4798      	blx	r3
 8008164:	4603      	mov	r3, r0
 8008166:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8008168:	7dfb      	ldrb	r3, [r7, #23]
 800816a:	2b00      	cmp	r3, #0
 800816c:	d003      	beq.n	8008176 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 800816e:	7dfb      	ldrb	r3, [r7, #23]
 8008170:	e002      	b.n	8008178 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008172:	2303      	movs	r3, #3
 8008174:	e000      	b.n	8008178 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 8008176:	2300      	movs	r3, #0
}
 8008178:	4618      	mov	r0, r3
 800817a:	3718      	adds	r7, #24
 800817c:	46bd      	mov	sp, r7
 800817e:	bd80      	pop	{r7, pc}

08008180 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008180:	b580      	push	{r7, lr}
 8008182:	b086      	sub	sp, #24
 8008184:	af00      	add	r7, sp, #0
 8008186:	60f8      	str	r0, [r7, #12]
 8008188:	460b      	mov	r3, r1
 800818a:	607a      	str	r2, [r7, #4]
 800818c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800818e:	7afb      	ldrb	r3, [r7, #11]
 8008190:	2b00      	cmp	r3, #0
 8008192:	d16a      	bne.n	800826a <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	3314      	adds	r3, #20
 8008198:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80081a0:	2b02      	cmp	r3, #2
 80081a2:	d155      	bne.n	8008250 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 80081a4:	693b      	ldr	r3, [r7, #16]
 80081a6:	689a      	ldr	r2, [r3, #8]
 80081a8:	693b      	ldr	r3, [r7, #16]
 80081aa:	68db      	ldr	r3, [r3, #12]
 80081ac:	429a      	cmp	r2, r3
 80081ae:	d914      	bls.n	80081da <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80081b0:	693b      	ldr	r3, [r7, #16]
 80081b2:	689a      	ldr	r2, [r3, #8]
 80081b4:	693b      	ldr	r3, [r7, #16]
 80081b6:	68db      	ldr	r3, [r3, #12]
 80081b8:	1ad2      	subs	r2, r2, r3
 80081ba:	693b      	ldr	r3, [r7, #16]
 80081bc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80081be:	693b      	ldr	r3, [r7, #16]
 80081c0:	689b      	ldr	r3, [r3, #8]
 80081c2:	461a      	mov	r2, r3
 80081c4:	6879      	ldr	r1, [r7, #4]
 80081c6:	68f8      	ldr	r0, [r7, #12]
 80081c8:	f000 ff0c 	bl	8008fe4 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80081cc:	2300      	movs	r3, #0
 80081ce:	2200      	movs	r2, #0
 80081d0:	2100      	movs	r1, #0
 80081d2:	68f8      	ldr	r0, [r7, #12]
 80081d4:	f001 fbaf 	bl	8009936 <USBD_LL_PrepareReceive>
 80081d8:	e03a      	b.n	8008250 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80081da:	693b      	ldr	r3, [r7, #16]
 80081dc:	68da      	ldr	r2, [r3, #12]
 80081de:	693b      	ldr	r3, [r7, #16]
 80081e0:	689b      	ldr	r3, [r3, #8]
 80081e2:	429a      	cmp	r2, r3
 80081e4:	d11c      	bne.n	8008220 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80081e6:	693b      	ldr	r3, [r7, #16]
 80081e8:	685a      	ldr	r2, [r3, #4]
 80081ea:	693b      	ldr	r3, [r7, #16]
 80081ec:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80081ee:	429a      	cmp	r2, r3
 80081f0:	d316      	bcc.n	8008220 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80081f2:	693b      	ldr	r3, [r7, #16]
 80081f4:	685a      	ldr	r2, [r3, #4]
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80081fc:	429a      	cmp	r2, r3
 80081fe:	d20f      	bcs.n	8008220 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008200:	2200      	movs	r2, #0
 8008202:	2100      	movs	r1, #0
 8008204:	68f8      	ldr	r0, [r7, #12]
 8008206:	f000 feed 	bl	8008fe4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	2200      	movs	r2, #0
 800820e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008212:	2300      	movs	r3, #0
 8008214:	2200      	movs	r2, #0
 8008216:	2100      	movs	r1, #0
 8008218:	68f8      	ldr	r0, [r7, #12]
 800821a:	f001 fb8c 	bl	8009936 <USBD_LL_PrepareReceive>
 800821e:	e017      	b.n	8008250 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008226:	68db      	ldr	r3, [r3, #12]
 8008228:	2b00      	cmp	r3, #0
 800822a:	d00a      	beq.n	8008242 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008232:	2b03      	cmp	r3, #3
 8008234:	d105      	bne.n	8008242 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800823c:	68db      	ldr	r3, [r3, #12]
 800823e:	68f8      	ldr	r0, [r7, #12]
 8008240:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008242:	2180      	movs	r1, #128	; 0x80
 8008244:	68f8      	ldr	r0, [r7, #12]
 8008246:	f001 facb 	bl	80097e0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800824a:	68f8      	ldr	r0, [r7, #12]
 800824c:	f000 ff1c 	bl	8009088 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8008256:	2b01      	cmp	r3, #1
 8008258:	d123      	bne.n	80082a2 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800825a:	68f8      	ldr	r0, [r7, #12]
 800825c:	f7ff fe9b 	bl	8007f96 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	2200      	movs	r2, #0
 8008264:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008268:	e01b      	b.n	80082a2 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008270:	695b      	ldr	r3, [r3, #20]
 8008272:	2b00      	cmp	r3, #0
 8008274:	d013      	beq.n	800829e <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800827c:	2b03      	cmp	r3, #3
 800827e:	d10e      	bne.n	800829e <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008286:	695b      	ldr	r3, [r3, #20]
 8008288:	7afa      	ldrb	r2, [r7, #11]
 800828a:	4611      	mov	r1, r2
 800828c:	68f8      	ldr	r0, [r7, #12]
 800828e:	4798      	blx	r3
 8008290:	4603      	mov	r3, r0
 8008292:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8008294:	7dfb      	ldrb	r3, [r7, #23]
 8008296:	2b00      	cmp	r3, #0
 8008298:	d003      	beq.n	80082a2 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 800829a:	7dfb      	ldrb	r3, [r7, #23]
 800829c:	e002      	b.n	80082a4 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800829e:	2303      	movs	r3, #3
 80082a0:	e000      	b.n	80082a4 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 80082a2:	2300      	movs	r3, #0
}
 80082a4:	4618      	mov	r0, r3
 80082a6:	3718      	adds	r7, #24
 80082a8:	46bd      	mov	sp, r7
 80082aa:	bd80      	pop	{r7, pc}

080082ac <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80082ac:	b580      	push	{r7, lr}
 80082ae:	b082      	sub	sp, #8
 80082b0:	af00      	add	r7, sp, #0
 80082b2:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	2201      	movs	r2, #1
 80082b8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	2200      	movs	r2, #0
 80082c0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	2200      	movs	r2, #0
 80082c8:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	2200      	movs	r2, #0
 80082ce:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d009      	beq.n	80082f0 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082e2:	685b      	ldr	r3, [r3, #4]
 80082e4:	687a      	ldr	r2, [r7, #4]
 80082e6:	6852      	ldr	r2, [r2, #4]
 80082e8:	b2d2      	uxtb	r2, r2
 80082ea:	4611      	mov	r1, r2
 80082ec:	6878      	ldr	r0, [r7, #4]
 80082ee:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80082f0:	2340      	movs	r3, #64	; 0x40
 80082f2:	2200      	movs	r2, #0
 80082f4:	2100      	movs	r1, #0
 80082f6:	6878      	ldr	r0, [r7, #4]
 80082f8:	f001 fa2d 	bl	8009756 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	2201      	movs	r2, #1
 8008300:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	2240      	movs	r2, #64	; 0x40
 8008308:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800830c:	2340      	movs	r3, #64	; 0x40
 800830e:	2200      	movs	r2, #0
 8008310:	2180      	movs	r1, #128	; 0x80
 8008312:	6878      	ldr	r0, [r7, #4]
 8008314:	f001 fa1f 	bl	8009756 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	2201      	movs	r2, #1
 800831c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	2240      	movs	r2, #64	; 0x40
 8008322:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8008324:	2300      	movs	r3, #0
}
 8008326:	4618      	mov	r0, r3
 8008328:	3708      	adds	r7, #8
 800832a:	46bd      	mov	sp, r7
 800832c:	bd80      	pop	{r7, pc}

0800832e <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800832e:	b480      	push	{r7}
 8008330:	b083      	sub	sp, #12
 8008332:	af00      	add	r7, sp, #0
 8008334:	6078      	str	r0, [r7, #4]
 8008336:	460b      	mov	r3, r1
 8008338:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	78fa      	ldrb	r2, [r7, #3]
 800833e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008340:	2300      	movs	r3, #0
}
 8008342:	4618      	mov	r0, r3
 8008344:	370c      	adds	r7, #12
 8008346:	46bd      	mov	sp, r7
 8008348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800834c:	4770      	bx	lr

0800834e <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800834e:	b480      	push	{r7}
 8008350:	b083      	sub	sp, #12
 8008352:	af00      	add	r7, sp, #0
 8008354:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	2204      	movs	r2, #4
 8008366:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800836a:	2300      	movs	r3, #0
}
 800836c:	4618      	mov	r0, r3
 800836e:	370c      	adds	r7, #12
 8008370:	46bd      	mov	sp, r7
 8008372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008376:	4770      	bx	lr

08008378 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008378:	b480      	push	{r7}
 800837a:	b083      	sub	sp, #12
 800837c:	af00      	add	r7, sp, #0
 800837e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008386:	2b04      	cmp	r3, #4
 8008388:	d105      	bne.n	8008396 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008396:	2300      	movs	r3, #0
}
 8008398:	4618      	mov	r0, r3
 800839a:	370c      	adds	r7, #12
 800839c:	46bd      	mov	sp, r7
 800839e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a2:	4770      	bx	lr

080083a4 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80083a4:	b580      	push	{r7, lr}
 80083a6:	b082      	sub	sp, #8
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80083b2:	2b03      	cmp	r3, #3
 80083b4:	d10b      	bne.n	80083ce <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083bc:	69db      	ldr	r3, [r3, #28]
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d005      	beq.n	80083ce <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083c8:	69db      	ldr	r3, [r3, #28]
 80083ca:	6878      	ldr	r0, [r7, #4]
 80083cc:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80083ce:	2300      	movs	r3, #0
}
 80083d0:	4618      	mov	r0, r3
 80083d2:	3708      	adds	r7, #8
 80083d4:	46bd      	mov	sp, r7
 80083d6:	bd80      	pop	{r7, pc}

080083d8 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80083d8:	b480      	push	{r7}
 80083da:	b087      	sub	sp, #28
 80083dc:	af00      	add	r7, sp, #0
 80083de:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80083e4:	697b      	ldr	r3, [r7, #20]
 80083e6:	781b      	ldrb	r3, [r3, #0]
 80083e8:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80083ea:	697b      	ldr	r3, [r7, #20]
 80083ec:	3301      	adds	r3, #1
 80083ee:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80083f0:	697b      	ldr	r3, [r7, #20]
 80083f2:	781b      	ldrb	r3, [r3, #0]
 80083f4:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80083f6:	8a3b      	ldrh	r3, [r7, #16]
 80083f8:	021b      	lsls	r3, r3, #8
 80083fa:	b21a      	sxth	r2, r3
 80083fc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008400:	4313      	orrs	r3, r2
 8008402:	b21b      	sxth	r3, r3
 8008404:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008406:	89fb      	ldrh	r3, [r7, #14]
}
 8008408:	4618      	mov	r0, r3
 800840a:	371c      	adds	r7, #28
 800840c:	46bd      	mov	sp, r7
 800840e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008412:	4770      	bx	lr

08008414 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008414:	b580      	push	{r7, lr}
 8008416:	b084      	sub	sp, #16
 8008418:	af00      	add	r7, sp, #0
 800841a:	6078      	str	r0, [r7, #4]
 800841c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800841e:	2300      	movs	r3, #0
 8008420:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008422:	683b      	ldr	r3, [r7, #0]
 8008424:	781b      	ldrb	r3, [r3, #0]
 8008426:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800842a:	2b20      	cmp	r3, #32
 800842c:	d004      	beq.n	8008438 <USBD_StdDevReq+0x24>
 800842e:	2b40      	cmp	r3, #64	; 0x40
 8008430:	d002      	beq.n	8008438 <USBD_StdDevReq+0x24>
 8008432:	2b00      	cmp	r3, #0
 8008434:	d00a      	beq.n	800844c <USBD_StdDevReq+0x38>
 8008436:	e050      	b.n	80084da <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800843e:	689b      	ldr	r3, [r3, #8]
 8008440:	6839      	ldr	r1, [r7, #0]
 8008442:	6878      	ldr	r0, [r7, #4]
 8008444:	4798      	blx	r3
 8008446:	4603      	mov	r3, r0
 8008448:	73fb      	strb	r3, [r7, #15]
    break;
 800844a:	e04b      	b.n	80084e4 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800844c:	683b      	ldr	r3, [r7, #0]
 800844e:	785b      	ldrb	r3, [r3, #1]
 8008450:	2b09      	cmp	r3, #9
 8008452:	d83c      	bhi.n	80084ce <USBD_StdDevReq+0xba>
 8008454:	a201      	add	r2, pc, #4	; (adr r2, 800845c <USBD_StdDevReq+0x48>)
 8008456:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800845a:	bf00      	nop
 800845c:	080084b1 	.word	0x080084b1
 8008460:	080084c5 	.word	0x080084c5
 8008464:	080084cf 	.word	0x080084cf
 8008468:	080084bb 	.word	0x080084bb
 800846c:	080084cf 	.word	0x080084cf
 8008470:	0800848f 	.word	0x0800848f
 8008474:	08008485 	.word	0x08008485
 8008478:	080084cf 	.word	0x080084cf
 800847c:	080084a7 	.word	0x080084a7
 8008480:	08008499 	.word	0x08008499
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 8008484:	6839      	ldr	r1, [r7, #0]
 8008486:	6878      	ldr	r0, [r7, #4]
 8008488:	f000 f9d0 	bl	800882c <USBD_GetDescriptor>
      break;
 800848c:	e024      	b.n	80084d8 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 800848e:	6839      	ldr	r1, [r7, #0]
 8008490:	6878      	ldr	r0, [r7, #4]
 8008492:	f000 fb5f 	bl	8008b54 <USBD_SetAddress>
      break;
 8008496:	e01f      	b.n	80084d8 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 8008498:	6839      	ldr	r1, [r7, #0]
 800849a:	6878      	ldr	r0, [r7, #4]
 800849c:	f000 fb9c 	bl	8008bd8 <USBD_SetConfig>
 80084a0:	4603      	mov	r3, r0
 80084a2:	73fb      	strb	r3, [r7, #15]
      break;
 80084a4:	e018      	b.n	80084d8 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 80084a6:	6839      	ldr	r1, [r7, #0]
 80084a8:	6878      	ldr	r0, [r7, #4]
 80084aa:	f000 fc39 	bl	8008d20 <USBD_GetConfig>
      break;
 80084ae:	e013      	b.n	80084d8 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 80084b0:	6839      	ldr	r1, [r7, #0]
 80084b2:	6878      	ldr	r0, [r7, #4]
 80084b4:	f000 fc68 	bl	8008d88 <USBD_GetStatus>
      break;
 80084b8:	e00e      	b.n	80084d8 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 80084ba:	6839      	ldr	r1, [r7, #0]
 80084bc:	6878      	ldr	r0, [r7, #4]
 80084be:	f000 fc96 	bl	8008dee <USBD_SetFeature>
      break;
 80084c2:	e009      	b.n	80084d8 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 80084c4:	6839      	ldr	r1, [r7, #0]
 80084c6:	6878      	ldr	r0, [r7, #4]
 80084c8:	f000 fca5 	bl	8008e16 <USBD_ClrFeature>
      break;
 80084cc:	e004      	b.n	80084d8 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 80084ce:	6839      	ldr	r1, [r7, #0]
 80084d0:	6878      	ldr	r0, [r7, #4]
 80084d2:	f000 fcfb 	bl	8008ecc <USBD_CtlError>
      break;
 80084d6:	bf00      	nop
    }
    break;
 80084d8:	e004      	b.n	80084e4 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 80084da:	6839      	ldr	r1, [r7, #0]
 80084dc:	6878      	ldr	r0, [r7, #4]
 80084de:	f000 fcf5 	bl	8008ecc <USBD_CtlError>
    break;
 80084e2:	bf00      	nop
  }

  return ret;
 80084e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80084e6:	4618      	mov	r0, r3
 80084e8:	3710      	adds	r7, #16
 80084ea:	46bd      	mov	sp, r7
 80084ec:	bd80      	pop	{r7, pc}
 80084ee:	bf00      	nop

080084f0 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80084f0:	b580      	push	{r7, lr}
 80084f2:	b084      	sub	sp, #16
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	6078      	str	r0, [r7, #4]
 80084f8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80084fa:	2300      	movs	r3, #0
 80084fc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80084fe:	683b      	ldr	r3, [r7, #0]
 8008500:	781b      	ldrb	r3, [r3, #0]
 8008502:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008506:	2b20      	cmp	r3, #32
 8008508:	d003      	beq.n	8008512 <USBD_StdItfReq+0x22>
 800850a:	2b40      	cmp	r3, #64	; 0x40
 800850c:	d001      	beq.n	8008512 <USBD_StdItfReq+0x22>
 800850e:	2b00      	cmp	r3, #0
 8008510:	d12a      	bne.n	8008568 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008518:	3b01      	subs	r3, #1
 800851a:	2b02      	cmp	r3, #2
 800851c:	d81d      	bhi.n	800855a <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800851e:	683b      	ldr	r3, [r7, #0]
 8008520:	889b      	ldrh	r3, [r3, #4]
 8008522:	b2db      	uxtb	r3, r3
 8008524:	2b01      	cmp	r3, #1
 8008526:	d813      	bhi.n	8008550 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800852e:	689b      	ldr	r3, [r3, #8]
 8008530:	6839      	ldr	r1, [r7, #0]
 8008532:	6878      	ldr	r0, [r7, #4]
 8008534:	4798      	blx	r3
 8008536:	4603      	mov	r3, r0
 8008538:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800853a:	683b      	ldr	r3, [r7, #0]
 800853c:	88db      	ldrh	r3, [r3, #6]
 800853e:	2b00      	cmp	r3, #0
 8008540:	d110      	bne.n	8008564 <USBD_StdItfReq+0x74>
 8008542:	7bfb      	ldrb	r3, [r7, #15]
 8008544:	2b00      	cmp	r3, #0
 8008546:	d10d      	bne.n	8008564 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 8008548:	6878      	ldr	r0, [r7, #4]
 800854a:	f000 fd8a 	bl	8009062 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800854e:	e009      	b.n	8008564 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8008550:	6839      	ldr	r1, [r7, #0]
 8008552:	6878      	ldr	r0, [r7, #4]
 8008554:	f000 fcba 	bl	8008ecc <USBD_CtlError>
      break;
 8008558:	e004      	b.n	8008564 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 800855a:	6839      	ldr	r1, [r7, #0]
 800855c:	6878      	ldr	r0, [r7, #4]
 800855e:	f000 fcb5 	bl	8008ecc <USBD_CtlError>
      break;
 8008562:	e000      	b.n	8008566 <USBD_StdItfReq+0x76>
      break;
 8008564:	bf00      	nop
    }
    break;
 8008566:	e004      	b.n	8008572 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8008568:	6839      	ldr	r1, [r7, #0]
 800856a:	6878      	ldr	r0, [r7, #4]
 800856c:	f000 fcae 	bl	8008ecc <USBD_CtlError>
    break;
 8008570:	bf00      	nop
  }

  return ret;
 8008572:	7bfb      	ldrb	r3, [r7, #15]
}
 8008574:	4618      	mov	r0, r3
 8008576:	3710      	adds	r7, #16
 8008578:	46bd      	mov	sp, r7
 800857a:	bd80      	pop	{r7, pc}

0800857c <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800857c:	b580      	push	{r7, lr}
 800857e:	b084      	sub	sp, #16
 8008580:	af00      	add	r7, sp, #0
 8008582:	6078      	str	r0, [r7, #4]
 8008584:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008586:	2300      	movs	r3, #0
 8008588:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800858a:	683b      	ldr	r3, [r7, #0]
 800858c:	889b      	ldrh	r3, [r3, #4]
 800858e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008590:	683b      	ldr	r3, [r7, #0]
 8008592:	781b      	ldrb	r3, [r3, #0]
 8008594:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008598:	2b20      	cmp	r3, #32
 800859a:	d004      	beq.n	80085a6 <USBD_StdEPReq+0x2a>
 800859c:	2b40      	cmp	r3, #64	; 0x40
 800859e:	d002      	beq.n	80085a6 <USBD_StdEPReq+0x2a>
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d00a      	beq.n	80085ba <USBD_StdEPReq+0x3e>
 80085a4:	e137      	b.n	8008816 <USBD_StdEPReq+0x29a>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80085ac:	689b      	ldr	r3, [r3, #8]
 80085ae:	6839      	ldr	r1, [r7, #0]
 80085b0:	6878      	ldr	r0, [r7, #4]
 80085b2:	4798      	blx	r3
 80085b4:	4603      	mov	r3, r0
 80085b6:	73fb      	strb	r3, [r7, #15]
    break;
 80085b8:	e132      	b.n	8008820 <USBD_StdEPReq+0x2a4>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80085ba:	683b      	ldr	r3, [r7, #0]
 80085bc:	785b      	ldrb	r3, [r3, #1]
 80085be:	2b01      	cmp	r3, #1
 80085c0:	d03e      	beq.n	8008640 <USBD_StdEPReq+0xc4>
 80085c2:	2b03      	cmp	r3, #3
 80085c4:	d002      	beq.n	80085cc <USBD_StdEPReq+0x50>
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d079      	beq.n	80086be <USBD_StdEPReq+0x142>
 80085ca:	e11e      	b.n	800880a <USBD_StdEPReq+0x28e>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80085d2:	2b02      	cmp	r3, #2
 80085d4:	d002      	beq.n	80085dc <USBD_StdEPReq+0x60>
 80085d6:	2b03      	cmp	r3, #3
 80085d8:	d015      	beq.n	8008606 <USBD_StdEPReq+0x8a>
 80085da:	e02b      	b.n	8008634 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80085dc:	7bbb      	ldrb	r3, [r7, #14]
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d00c      	beq.n	80085fc <USBD_StdEPReq+0x80>
 80085e2:	7bbb      	ldrb	r3, [r7, #14]
 80085e4:	2b80      	cmp	r3, #128	; 0x80
 80085e6:	d009      	beq.n	80085fc <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 80085e8:	7bbb      	ldrb	r3, [r7, #14]
 80085ea:	4619      	mov	r1, r3
 80085ec:	6878      	ldr	r0, [r7, #4]
 80085ee:	f001 f8f7 	bl	80097e0 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80085f2:	2180      	movs	r1, #128	; 0x80
 80085f4:	6878      	ldr	r0, [r7, #4]
 80085f6:	f001 f8f3 	bl	80097e0 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80085fa:	e020      	b.n	800863e <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 80085fc:	6839      	ldr	r1, [r7, #0]
 80085fe:	6878      	ldr	r0, [r7, #4]
 8008600:	f000 fc64 	bl	8008ecc <USBD_CtlError>
        break;
 8008604:	e01b      	b.n	800863e <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8008606:	683b      	ldr	r3, [r7, #0]
 8008608:	885b      	ldrh	r3, [r3, #2]
 800860a:	2b00      	cmp	r3, #0
 800860c:	d10e      	bne.n	800862c <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800860e:	7bbb      	ldrb	r3, [r7, #14]
 8008610:	2b00      	cmp	r3, #0
 8008612:	d00b      	beq.n	800862c <USBD_StdEPReq+0xb0>
 8008614:	7bbb      	ldrb	r3, [r7, #14]
 8008616:	2b80      	cmp	r3, #128	; 0x80
 8008618:	d008      	beq.n	800862c <USBD_StdEPReq+0xb0>
 800861a:	683b      	ldr	r3, [r7, #0]
 800861c:	88db      	ldrh	r3, [r3, #6]
 800861e:	2b00      	cmp	r3, #0
 8008620:	d104      	bne.n	800862c <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 8008622:	7bbb      	ldrb	r3, [r7, #14]
 8008624:	4619      	mov	r1, r3
 8008626:	6878      	ldr	r0, [r7, #4]
 8008628:	f001 f8da 	bl	80097e0 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 800862c:	6878      	ldr	r0, [r7, #4]
 800862e:	f000 fd18 	bl	8009062 <USBD_CtlSendStatus>

        break;
 8008632:	e004      	b.n	800863e <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 8008634:	6839      	ldr	r1, [r7, #0]
 8008636:	6878      	ldr	r0, [r7, #4]
 8008638:	f000 fc48 	bl	8008ecc <USBD_CtlError>
        break;
 800863c:	bf00      	nop
      }
      break;
 800863e:	e0e9      	b.n	8008814 <USBD_StdEPReq+0x298>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008646:	2b02      	cmp	r3, #2
 8008648:	d002      	beq.n	8008650 <USBD_StdEPReq+0xd4>
 800864a:	2b03      	cmp	r3, #3
 800864c:	d015      	beq.n	800867a <USBD_StdEPReq+0xfe>
 800864e:	e02f      	b.n	80086b0 <USBD_StdEPReq+0x134>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008650:	7bbb      	ldrb	r3, [r7, #14]
 8008652:	2b00      	cmp	r3, #0
 8008654:	d00c      	beq.n	8008670 <USBD_StdEPReq+0xf4>
 8008656:	7bbb      	ldrb	r3, [r7, #14]
 8008658:	2b80      	cmp	r3, #128	; 0x80
 800865a:	d009      	beq.n	8008670 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800865c:	7bbb      	ldrb	r3, [r7, #14]
 800865e:	4619      	mov	r1, r3
 8008660:	6878      	ldr	r0, [r7, #4]
 8008662:	f001 f8bd 	bl	80097e0 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008666:	2180      	movs	r1, #128	; 0x80
 8008668:	6878      	ldr	r0, [r7, #4]
 800866a:	f001 f8b9 	bl	80097e0 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800866e:	e025      	b.n	80086bc <USBD_StdEPReq+0x140>
          USBD_CtlError(pdev, req);
 8008670:	6839      	ldr	r1, [r7, #0]
 8008672:	6878      	ldr	r0, [r7, #4]
 8008674:	f000 fc2a 	bl	8008ecc <USBD_CtlError>
        break;
 8008678:	e020      	b.n	80086bc <USBD_StdEPReq+0x140>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800867a:	683b      	ldr	r3, [r7, #0]
 800867c:	885b      	ldrh	r3, [r3, #2]
 800867e:	2b00      	cmp	r3, #0
 8008680:	d11b      	bne.n	80086ba <USBD_StdEPReq+0x13e>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8008682:	7bbb      	ldrb	r3, [r7, #14]
 8008684:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008688:	2b00      	cmp	r3, #0
 800868a:	d004      	beq.n	8008696 <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800868c:	7bbb      	ldrb	r3, [r7, #14]
 800868e:	4619      	mov	r1, r3
 8008690:	6878      	ldr	r0, [r7, #4]
 8008692:	f001 f8c4 	bl	800981e <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 8008696:	6878      	ldr	r0, [r7, #4]
 8008698:	f000 fce3 	bl	8009062 <USBD_CtlSendStatus>
          ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80086a2:	689b      	ldr	r3, [r3, #8]
 80086a4:	6839      	ldr	r1, [r7, #0]
 80086a6:	6878      	ldr	r0, [r7, #4]
 80086a8:	4798      	blx	r3
 80086aa:	4603      	mov	r3, r0
 80086ac:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80086ae:	e004      	b.n	80086ba <USBD_StdEPReq+0x13e>

      default:
        USBD_CtlError(pdev, req);
 80086b0:	6839      	ldr	r1, [r7, #0]
 80086b2:	6878      	ldr	r0, [r7, #4]
 80086b4:	f000 fc0a 	bl	8008ecc <USBD_CtlError>
        break;
 80086b8:	e000      	b.n	80086bc <USBD_StdEPReq+0x140>
        break;
 80086ba:	bf00      	nop
      }
      break;
 80086bc:	e0aa      	b.n	8008814 <USBD_StdEPReq+0x298>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80086c4:	2b02      	cmp	r3, #2
 80086c6:	d002      	beq.n	80086ce <USBD_StdEPReq+0x152>
 80086c8:	2b03      	cmp	r3, #3
 80086ca:	d032      	beq.n	8008732 <USBD_StdEPReq+0x1b6>
 80086cc:	e097      	b.n	80087fe <USBD_StdEPReq+0x282>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80086ce:	7bbb      	ldrb	r3, [r7, #14]
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d007      	beq.n	80086e4 <USBD_StdEPReq+0x168>
 80086d4:	7bbb      	ldrb	r3, [r7, #14]
 80086d6:	2b80      	cmp	r3, #128	; 0x80
 80086d8:	d004      	beq.n	80086e4 <USBD_StdEPReq+0x168>
        {
          USBD_CtlError(pdev, req);
 80086da:	6839      	ldr	r1, [r7, #0]
 80086dc:	6878      	ldr	r0, [r7, #4]
 80086de:	f000 fbf5 	bl	8008ecc <USBD_CtlError>
          break;
 80086e2:	e091      	b.n	8008808 <USBD_StdEPReq+0x28c>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80086e4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	da0b      	bge.n	8008704 <USBD_StdEPReq+0x188>
 80086ec:	7bbb      	ldrb	r3, [r7, #14]
 80086ee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80086f2:	4613      	mov	r3, r2
 80086f4:	009b      	lsls	r3, r3, #2
 80086f6:	4413      	add	r3, r2
 80086f8:	009b      	lsls	r3, r3, #2
 80086fa:	3310      	adds	r3, #16
 80086fc:	687a      	ldr	r2, [r7, #4]
 80086fe:	4413      	add	r3, r2
 8008700:	3304      	adds	r3, #4
 8008702:	e00b      	b.n	800871c <USBD_StdEPReq+0x1a0>
              &pdev->ep_out[ep_addr & 0x7FU];
 8008704:	7bbb      	ldrb	r3, [r7, #14]
 8008706:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800870a:	4613      	mov	r3, r2
 800870c:	009b      	lsls	r3, r3, #2
 800870e:	4413      	add	r3, r2
 8008710:	009b      	lsls	r3, r3, #2
 8008712:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008716:	687a      	ldr	r2, [r7, #4]
 8008718:	4413      	add	r3, r2
 800871a:	3304      	adds	r3, #4
 800871c:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 800871e:	68bb      	ldr	r3, [r7, #8]
 8008720:	2200      	movs	r2, #0
 8008722:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008724:	68bb      	ldr	r3, [r7, #8]
 8008726:	2202      	movs	r2, #2
 8008728:	4619      	mov	r1, r3
 800872a:	6878      	ldr	r0, [r7, #4]
 800872c:	f000 fc3f 	bl	8008fae <USBD_CtlSendData>
        break;
 8008730:	e06a      	b.n	8008808 <USBD_StdEPReq+0x28c>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 8008732:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008736:	2b00      	cmp	r3, #0
 8008738:	da11      	bge.n	800875e <USBD_StdEPReq+0x1e2>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800873a:	7bbb      	ldrb	r3, [r7, #14]
 800873c:	f003 020f 	and.w	r2, r3, #15
 8008740:	6879      	ldr	r1, [r7, #4]
 8008742:	4613      	mov	r3, r2
 8008744:	009b      	lsls	r3, r3, #2
 8008746:	4413      	add	r3, r2
 8008748:	009b      	lsls	r3, r3, #2
 800874a:	440b      	add	r3, r1
 800874c:	3324      	adds	r3, #36	; 0x24
 800874e:	881b      	ldrh	r3, [r3, #0]
 8008750:	2b00      	cmp	r3, #0
 8008752:	d117      	bne.n	8008784 <USBD_StdEPReq+0x208>
          {
            USBD_CtlError(pdev, req);
 8008754:	6839      	ldr	r1, [r7, #0]
 8008756:	6878      	ldr	r0, [r7, #4]
 8008758:	f000 fbb8 	bl	8008ecc <USBD_CtlError>
            break;
 800875c:	e054      	b.n	8008808 <USBD_StdEPReq+0x28c>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800875e:	7bbb      	ldrb	r3, [r7, #14]
 8008760:	f003 020f 	and.w	r2, r3, #15
 8008764:	6879      	ldr	r1, [r7, #4]
 8008766:	4613      	mov	r3, r2
 8008768:	009b      	lsls	r3, r3, #2
 800876a:	4413      	add	r3, r2
 800876c:	009b      	lsls	r3, r3, #2
 800876e:	440b      	add	r3, r1
 8008770:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008774:	881b      	ldrh	r3, [r3, #0]
 8008776:	2b00      	cmp	r3, #0
 8008778:	d104      	bne.n	8008784 <USBD_StdEPReq+0x208>
          {
            USBD_CtlError(pdev, req);
 800877a:	6839      	ldr	r1, [r7, #0]
 800877c:	6878      	ldr	r0, [r7, #4]
 800877e:	f000 fba5 	bl	8008ecc <USBD_CtlError>
            break;
 8008782:	e041      	b.n	8008808 <USBD_StdEPReq+0x28c>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008784:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008788:	2b00      	cmp	r3, #0
 800878a:	da0b      	bge.n	80087a4 <USBD_StdEPReq+0x228>
 800878c:	7bbb      	ldrb	r3, [r7, #14]
 800878e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008792:	4613      	mov	r3, r2
 8008794:	009b      	lsls	r3, r3, #2
 8008796:	4413      	add	r3, r2
 8008798:	009b      	lsls	r3, r3, #2
 800879a:	3310      	adds	r3, #16
 800879c:	687a      	ldr	r2, [r7, #4]
 800879e:	4413      	add	r3, r2
 80087a0:	3304      	adds	r3, #4
 80087a2:	e00b      	b.n	80087bc <USBD_StdEPReq+0x240>
              &pdev->ep_out[ep_addr & 0x7FU];
 80087a4:	7bbb      	ldrb	r3, [r7, #14]
 80087a6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80087aa:	4613      	mov	r3, r2
 80087ac:	009b      	lsls	r3, r3, #2
 80087ae:	4413      	add	r3, r2
 80087b0:	009b      	lsls	r3, r3, #2
 80087b2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80087b6:	687a      	ldr	r2, [r7, #4]
 80087b8:	4413      	add	r3, r2
 80087ba:	3304      	adds	r3, #4
 80087bc:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80087be:	7bbb      	ldrb	r3, [r7, #14]
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d002      	beq.n	80087ca <USBD_StdEPReq+0x24e>
 80087c4:	7bbb      	ldrb	r3, [r7, #14]
 80087c6:	2b80      	cmp	r3, #128	; 0x80
 80087c8:	d103      	bne.n	80087d2 <USBD_StdEPReq+0x256>
          {
            pep->status = 0x0000U;
 80087ca:	68bb      	ldr	r3, [r7, #8]
 80087cc:	2200      	movs	r2, #0
 80087ce:	601a      	str	r2, [r3, #0]
 80087d0:	e00e      	b.n	80087f0 <USBD_StdEPReq+0x274>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80087d2:	7bbb      	ldrb	r3, [r7, #14]
 80087d4:	4619      	mov	r1, r3
 80087d6:	6878      	ldr	r0, [r7, #4]
 80087d8:	f001 f840 	bl	800985c <USBD_LL_IsStallEP>
 80087dc:	4603      	mov	r3, r0
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d003      	beq.n	80087ea <USBD_StdEPReq+0x26e>
          {
            pep->status = 0x0001U;
 80087e2:	68bb      	ldr	r3, [r7, #8]
 80087e4:	2201      	movs	r2, #1
 80087e6:	601a      	str	r2, [r3, #0]
 80087e8:	e002      	b.n	80087f0 <USBD_StdEPReq+0x274>
          }
          else
          {
            pep->status = 0x0000U;
 80087ea:	68bb      	ldr	r3, [r7, #8]
 80087ec:	2200      	movs	r2, #0
 80087ee:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80087f0:	68bb      	ldr	r3, [r7, #8]
 80087f2:	2202      	movs	r2, #2
 80087f4:	4619      	mov	r1, r3
 80087f6:	6878      	ldr	r0, [r7, #4]
 80087f8:	f000 fbd9 	bl	8008fae <USBD_CtlSendData>
          break;
 80087fc:	e004      	b.n	8008808 <USBD_StdEPReq+0x28c>

      default:
        USBD_CtlError(pdev, req);
 80087fe:	6839      	ldr	r1, [r7, #0]
 8008800:	6878      	ldr	r0, [r7, #4]
 8008802:	f000 fb63 	bl	8008ecc <USBD_CtlError>
        break;
 8008806:	bf00      	nop
      }
      break;
 8008808:	e004      	b.n	8008814 <USBD_StdEPReq+0x298>

    default:
      USBD_CtlError(pdev, req);
 800880a:	6839      	ldr	r1, [r7, #0]
 800880c:	6878      	ldr	r0, [r7, #4]
 800880e:	f000 fb5d 	bl	8008ecc <USBD_CtlError>
      break;
 8008812:	bf00      	nop
    }
    break;
 8008814:	e004      	b.n	8008820 <USBD_StdEPReq+0x2a4>

  default:
    USBD_CtlError(pdev, req);
 8008816:	6839      	ldr	r1, [r7, #0]
 8008818:	6878      	ldr	r0, [r7, #4]
 800881a:	f000 fb57 	bl	8008ecc <USBD_CtlError>
    break;
 800881e:	bf00      	nop
  }

  return ret;
 8008820:	7bfb      	ldrb	r3, [r7, #15]
}
 8008822:	4618      	mov	r0, r3
 8008824:	3710      	adds	r7, #16
 8008826:	46bd      	mov	sp, r7
 8008828:	bd80      	pop	{r7, pc}
	...

0800882c <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800882c:	b580      	push	{r7, lr}
 800882e:	b084      	sub	sp, #16
 8008830:	af00      	add	r7, sp, #0
 8008832:	6078      	str	r0, [r7, #4]
 8008834:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008836:	2300      	movs	r3, #0
 8008838:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800883a:	2300      	movs	r3, #0
 800883c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800883e:	2300      	movs	r3, #0
 8008840:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008842:	683b      	ldr	r3, [r7, #0]
 8008844:	885b      	ldrh	r3, [r3, #2]
 8008846:	0a1b      	lsrs	r3, r3, #8
 8008848:	b29b      	uxth	r3, r3
 800884a:	3b01      	subs	r3, #1
 800884c:	2b0e      	cmp	r3, #14
 800884e:	f200 8152 	bhi.w	8008af6 <USBD_GetDescriptor+0x2ca>
 8008852:	a201      	add	r2, pc, #4	; (adr r2, 8008858 <USBD_GetDescriptor+0x2c>)
 8008854:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008858:	080088c9 	.word	0x080088c9
 800885c:	080088e1 	.word	0x080088e1
 8008860:	08008921 	.word	0x08008921
 8008864:	08008af7 	.word	0x08008af7
 8008868:	08008af7 	.word	0x08008af7
 800886c:	08008a97 	.word	0x08008a97
 8008870:	08008ac3 	.word	0x08008ac3
 8008874:	08008af7 	.word	0x08008af7
 8008878:	08008af7 	.word	0x08008af7
 800887c:	08008af7 	.word	0x08008af7
 8008880:	08008af7 	.word	0x08008af7
 8008884:	08008af7 	.word	0x08008af7
 8008888:	08008af7 	.word	0x08008af7
 800888c:	08008af7 	.word	0x08008af7
 8008890:	08008895 	.word	0x08008895
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
  case USB_DESC_TYPE_BOS:
    if (pdev->pDesc->GetBOSDescriptor != NULL)
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800889a:	69db      	ldr	r3, [r3, #28]
 800889c:	2b00      	cmp	r3, #0
 800889e:	d00b      	beq.n	80088b8 <USBD_GetDescriptor+0x8c>
    {
      pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80088a6:	69db      	ldr	r3, [r3, #28]
 80088a8:	687a      	ldr	r2, [r7, #4]
 80088aa:	7c12      	ldrb	r2, [r2, #16]
 80088ac:	f107 0108 	add.w	r1, r7, #8
 80088b0:	4610      	mov	r0, r2
 80088b2:	4798      	blx	r3
 80088b4:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 80088b6:	e126      	b.n	8008b06 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 80088b8:	6839      	ldr	r1, [r7, #0]
 80088ba:	6878      	ldr	r0, [r7, #4]
 80088bc:	f000 fb06 	bl	8008ecc <USBD_CtlError>
      err++;
 80088c0:	7afb      	ldrb	r3, [r7, #11]
 80088c2:	3301      	adds	r3, #1
 80088c4:	72fb      	strb	r3, [r7, #11]
    break;
 80088c6:	e11e      	b.n	8008b06 <USBD_GetDescriptor+0x2da>
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	687a      	ldr	r2, [r7, #4]
 80088d2:	7c12      	ldrb	r2, [r2, #16]
 80088d4:	f107 0108 	add.w	r1, r7, #8
 80088d8:	4610      	mov	r0, r2
 80088da:	4798      	blx	r3
 80088dc:	60f8      	str	r0, [r7, #12]
    break;
 80088de:	e112      	b.n	8008b06 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	7c1b      	ldrb	r3, [r3, #16]
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d10d      	bne.n	8008904 <USBD_GetDescriptor+0xd8>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088f0:	f107 0208 	add.w	r2, r7, #8
 80088f4:	4610      	mov	r0, r2
 80088f6:	4798      	blx	r3
 80088f8:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	3301      	adds	r3, #1
 80088fe:	2202      	movs	r2, #2
 8008900:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8008902:	e100      	b.n	8008b06 <USBD_GetDescriptor+0x2da>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800890a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800890c:	f107 0208 	add.w	r2, r7, #8
 8008910:	4610      	mov	r0, r2
 8008912:	4798      	blx	r3
 8008914:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	3301      	adds	r3, #1
 800891a:	2202      	movs	r2, #2
 800891c:	701a      	strb	r2, [r3, #0]
    break;
 800891e:	e0f2      	b.n	8008b06 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8008920:	683b      	ldr	r3, [r7, #0]
 8008922:	885b      	ldrh	r3, [r3, #2]
 8008924:	b2db      	uxtb	r3, r3
 8008926:	2b05      	cmp	r3, #5
 8008928:	f200 80ac 	bhi.w	8008a84 <USBD_GetDescriptor+0x258>
 800892c:	a201      	add	r2, pc, #4	; (adr r2, 8008934 <USBD_GetDescriptor+0x108>)
 800892e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008932:	bf00      	nop
 8008934:	0800894d 	.word	0x0800894d
 8008938:	08008981 	.word	0x08008981
 800893c:	080089b5 	.word	0x080089b5
 8008940:	080089e9 	.word	0x080089e9
 8008944:	08008a1d 	.word	0x08008a1d
 8008948:	08008a51 	.word	0x08008a51
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008952:	685b      	ldr	r3, [r3, #4]
 8008954:	2b00      	cmp	r3, #0
 8008956:	d00b      	beq.n	8008970 <USBD_GetDescriptor+0x144>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800895e:	685b      	ldr	r3, [r3, #4]
 8008960:	687a      	ldr	r2, [r7, #4]
 8008962:	7c12      	ldrb	r2, [r2, #16]
 8008964:	f107 0108 	add.w	r1, r7, #8
 8008968:	4610      	mov	r0, r2
 800896a:	4798      	blx	r3
 800896c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800896e:	e091      	b.n	8008a94 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8008970:	6839      	ldr	r1, [r7, #0]
 8008972:	6878      	ldr	r0, [r7, #4]
 8008974:	f000 faaa 	bl	8008ecc <USBD_CtlError>
        err++;
 8008978:	7afb      	ldrb	r3, [r7, #11]
 800897a:	3301      	adds	r3, #1
 800897c:	72fb      	strb	r3, [r7, #11]
      break;
 800897e:	e089      	b.n	8008a94 <USBD_GetDescriptor+0x268>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008986:	689b      	ldr	r3, [r3, #8]
 8008988:	2b00      	cmp	r3, #0
 800898a:	d00b      	beq.n	80089a4 <USBD_GetDescriptor+0x178>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008992:	689b      	ldr	r3, [r3, #8]
 8008994:	687a      	ldr	r2, [r7, #4]
 8008996:	7c12      	ldrb	r2, [r2, #16]
 8008998:	f107 0108 	add.w	r1, r7, #8
 800899c:	4610      	mov	r0, r2
 800899e:	4798      	blx	r3
 80089a0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80089a2:	e077      	b.n	8008a94 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 80089a4:	6839      	ldr	r1, [r7, #0]
 80089a6:	6878      	ldr	r0, [r7, #4]
 80089a8:	f000 fa90 	bl	8008ecc <USBD_CtlError>
        err++;
 80089ac:	7afb      	ldrb	r3, [r7, #11]
 80089ae:	3301      	adds	r3, #1
 80089b0:	72fb      	strb	r3, [r7, #11]
      break;
 80089b2:	e06f      	b.n	8008a94 <USBD_GetDescriptor+0x268>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089ba:	68db      	ldr	r3, [r3, #12]
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d00b      	beq.n	80089d8 <USBD_GetDescriptor+0x1ac>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089c6:	68db      	ldr	r3, [r3, #12]
 80089c8:	687a      	ldr	r2, [r7, #4]
 80089ca:	7c12      	ldrb	r2, [r2, #16]
 80089cc:	f107 0108 	add.w	r1, r7, #8
 80089d0:	4610      	mov	r0, r2
 80089d2:	4798      	blx	r3
 80089d4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80089d6:	e05d      	b.n	8008a94 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 80089d8:	6839      	ldr	r1, [r7, #0]
 80089da:	6878      	ldr	r0, [r7, #4]
 80089dc:	f000 fa76 	bl	8008ecc <USBD_CtlError>
        err++;
 80089e0:	7afb      	ldrb	r3, [r7, #11]
 80089e2:	3301      	adds	r3, #1
 80089e4:	72fb      	strb	r3, [r7, #11]
      break;
 80089e6:	e055      	b.n	8008a94 <USBD_GetDescriptor+0x268>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089ee:	691b      	ldr	r3, [r3, #16]
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d00b      	beq.n	8008a0c <USBD_GetDescriptor+0x1e0>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089fa:	691b      	ldr	r3, [r3, #16]
 80089fc:	687a      	ldr	r2, [r7, #4]
 80089fe:	7c12      	ldrb	r2, [r2, #16]
 8008a00:	f107 0108 	add.w	r1, r7, #8
 8008a04:	4610      	mov	r0, r2
 8008a06:	4798      	blx	r3
 8008a08:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008a0a:	e043      	b.n	8008a94 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8008a0c:	6839      	ldr	r1, [r7, #0]
 8008a0e:	6878      	ldr	r0, [r7, #4]
 8008a10:	f000 fa5c 	bl	8008ecc <USBD_CtlError>
        err++;
 8008a14:	7afb      	ldrb	r3, [r7, #11]
 8008a16:	3301      	adds	r3, #1
 8008a18:	72fb      	strb	r3, [r7, #11]
      break;
 8008a1a:	e03b      	b.n	8008a94 <USBD_GetDescriptor+0x268>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a22:	695b      	ldr	r3, [r3, #20]
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d00b      	beq.n	8008a40 <USBD_GetDescriptor+0x214>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a2e:	695b      	ldr	r3, [r3, #20]
 8008a30:	687a      	ldr	r2, [r7, #4]
 8008a32:	7c12      	ldrb	r2, [r2, #16]
 8008a34:	f107 0108 	add.w	r1, r7, #8
 8008a38:	4610      	mov	r0, r2
 8008a3a:	4798      	blx	r3
 8008a3c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008a3e:	e029      	b.n	8008a94 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8008a40:	6839      	ldr	r1, [r7, #0]
 8008a42:	6878      	ldr	r0, [r7, #4]
 8008a44:	f000 fa42 	bl	8008ecc <USBD_CtlError>
        err++;
 8008a48:	7afb      	ldrb	r3, [r7, #11]
 8008a4a:	3301      	adds	r3, #1
 8008a4c:	72fb      	strb	r3, [r7, #11]
      break;
 8008a4e:	e021      	b.n	8008a94 <USBD_GetDescriptor+0x268>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a56:	699b      	ldr	r3, [r3, #24]
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d00b      	beq.n	8008a74 <USBD_GetDescriptor+0x248>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a62:	699b      	ldr	r3, [r3, #24]
 8008a64:	687a      	ldr	r2, [r7, #4]
 8008a66:	7c12      	ldrb	r2, [r2, #16]
 8008a68:	f107 0108 	add.w	r1, r7, #8
 8008a6c:	4610      	mov	r0, r2
 8008a6e:	4798      	blx	r3
 8008a70:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008a72:	e00f      	b.n	8008a94 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8008a74:	6839      	ldr	r1, [r7, #0]
 8008a76:	6878      	ldr	r0, [r7, #4]
 8008a78:	f000 fa28 	bl	8008ecc <USBD_CtlError>
        err++;
 8008a7c:	7afb      	ldrb	r3, [r7, #11]
 8008a7e:	3301      	adds	r3, #1
 8008a80:	72fb      	strb	r3, [r7, #11]
      break;
 8008a82:	e007      	b.n	8008a94 <USBD_GetDescriptor+0x268>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8008a84:	6839      	ldr	r1, [r7, #0]
 8008a86:	6878      	ldr	r0, [r7, #4]
 8008a88:	f000 fa20 	bl	8008ecc <USBD_CtlError>
      err++;
 8008a8c:	7afb      	ldrb	r3, [r7, #11]
 8008a8e:	3301      	adds	r3, #1
 8008a90:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 8008a92:	bf00      	nop
    }
    break;
 8008a94:	e037      	b.n	8008b06 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	7c1b      	ldrb	r3, [r3, #16]
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d109      	bne.n	8008ab2 <USBD_GetDescriptor+0x286>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008aa4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008aa6:	f107 0208 	add.w	r2, r7, #8
 8008aaa:	4610      	mov	r0, r2
 8008aac:	4798      	blx	r3
 8008aae:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8008ab0:	e029      	b.n	8008b06 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 8008ab2:	6839      	ldr	r1, [r7, #0]
 8008ab4:	6878      	ldr	r0, [r7, #4]
 8008ab6:	f000 fa09 	bl	8008ecc <USBD_CtlError>
      err++;
 8008aba:	7afb      	ldrb	r3, [r7, #11]
 8008abc:	3301      	adds	r3, #1
 8008abe:	72fb      	strb	r3, [r7, #11]
    break;
 8008ac0:	e021      	b.n	8008b06 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	7c1b      	ldrb	r3, [r3, #16]
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d10d      	bne.n	8008ae6 <USBD_GetDescriptor+0x2ba>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ad2:	f107 0208 	add.w	r2, r7, #8
 8008ad6:	4610      	mov	r0, r2
 8008ad8:	4798      	blx	r3
 8008ada:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	3301      	adds	r3, #1
 8008ae0:	2207      	movs	r2, #7
 8008ae2:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8008ae4:	e00f      	b.n	8008b06 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 8008ae6:	6839      	ldr	r1, [r7, #0]
 8008ae8:	6878      	ldr	r0, [r7, #4]
 8008aea:	f000 f9ef 	bl	8008ecc <USBD_CtlError>
      err++;
 8008aee:	7afb      	ldrb	r3, [r7, #11]
 8008af0:	3301      	adds	r3, #1
 8008af2:	72fb      	strb	r3, [r7, #11]
    break;
 8008af4:	e007      	b.n	8008b06 <USBD_GetDescriptor+0x2da>

  default:
    USBD_CtlError(pdev, req);
 8008af6:	6839      	ldr	r1, [r7, #0]
 8008af8:	6878      	ldr	r0, [r7, #4]
 8008afa:	f000 f9e7 	bl	8008ecc <USBD_CtlError>
    err++;
 8008afe:	7afb      	ldrb	r3, [r7, #11]
 8008b00:	3301      	adds	r3, #1
 8008b02:	72fb      	strb	r3, [r7, #11]
    break;
 8008b04:	bf00      	nop
  }

  if (err != 0U)
 8008b06:	7afb      	ldrb	r3, [r7, #11]
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d11e      	bne.n	8008b4a <USBD_GetDescriptor+0x31e>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8008b0c:	683b      	ldr	r3, [r7, #0]
 8008b0e:	88db      	ldrh	r3, [r3, #6]
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d016      	beq.n	8008b42 <USBD_GetDescriptor+0x316>
    {
      if (len != 0U)
 8008b14:	893b      	ldrh	r3, [r7, #8]
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d00e      	beq.n	8008b38 <USBD_GetDescriptor+0x30c>
      {
        len = MIN(len, req->wLength);
 8008b1a:	683b      	ldr	r3, [r7, #0]
 8008b1c:	88da      	ldrh	r2, [r3, #6]
 8008b1e:	893b      	ldrh	r3, [r7, #8]
 8008b20:	4293      	cmp	r3, r2
 8008b22:	bf28      	it	cs
 8008b24:	4613      	movcs	r3, r2
 8008b26:	b29b      	uxth	r3, r3
 8008b28:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8008b2a:	893b      	ldrh	r3, [r7, #8]
 8008b2c:	461a      	mov	r2, r3
 8008b2e:	68f9      	ldr	r1, [r7, #12]
 8008b30:	6878      	ldr	r0, [r7, #4]
 8008b32:	f000 fa3c 	bl	8008fae <USBD_CtlSendData>
 8008b36:	e009      	b.n	8008b4c <USBD_GetDescriptor+0x320>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8008b38:	6839      	ldr	r1, [r7, #0]
 8008b3a:	6878      	ldr	r0, [r7, #4]
 8008b3c:	f000 f9c6 	bl	8008ecc <USBD_CtlError>
 8008b40:	e004      	b.n	8008b4c <USBD_GetDescriptor+0x320>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8008b42:	6878      	ldr	r0, [r7, #4]
 8008b44:	f000 fa8d 	bl	8009062 <USBD_CtlSendStatus>
 8008b48:	e000      	b.n	8008b4c <USBD_GetDescriptor+0x320>
    return;
 8008b4a:	bf00      	nop
    }
  }
}
 8008b4c:	3710      	adds	r7, #16
 8008b4e:	46bd      	mov	sp, r7
 8008b50:	bd80      	pop	{r7, pc}
 8008b52:	bf00      	nop

08008b54 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b54:	b580      	push	{r7, lr}
 8008b56:	b084      	sub	sp, #16
 8008b58:	af00      	add	r7, sp, #0
 8008b5a:	6078      	str	r0, [r7, #4]
 8008b5c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008b5e:	683b      	ldr	r3, [r7, #0]
 8008b60:	889b      	ldrh	r3, [r3, #4]
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d130      	bne.n	8008bc8 <USBD_SetAddress+0x74>
 8008b66:	683b      	ldr	r3, [r7, #0]
 8008b68:	88db      	ldrh	r3, [r3, #6]
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d12c      	bne.n	8008bc8 <USBD_SetAddress+0x74>
 8008b6e:	683b      	ldr	r3, [r7, #0]
 8008b70:	885b      	ldrh	r3, [r3, #2]
 8008b72:	2b7f      	cmp	r3, #127	; 0x7f
 8008b74:	d828      	bhi.n	8008bc8 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008b76:	683b      	ldr	r3, [r7, #0]
 8008b78:	885b      	ldrh	r3, [r3, #2]
 8008b7a:	b2db      	uxtb	r3, r3
 8008b7c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b80:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b88:	2b03      	cmp	r3, #3
 8008b8a:	d104      	bne.n	8008b96 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8008b8c:	6839      	ldr	r1, [r7, #0]
 8008b8e:	6878      	ldr	r0, [r7, #4]
 8008b90:	f000 f99c 	bl	8008ecc <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b94:	e01c      	b.n	8008bd0 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	7bfa      	ldrb	r2, [r7, #15]
 8008b9a:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008b9e:	7bfb      	ldrb	r3, [r7, #15]
 8008ba0:	4619      	mov	r1, r3
 8008ba2:	6878      	ldr	r0, [r7, #4]
 8008ba4:	f000 fe87 	bl	80098b6 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008ba8:	6878      	ldr	r0, [r7, #4]
 8008baa:	f000 fa5a 	bl	8009062 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008bae:	7bfb      	ldrb	r3, [r7, #15]
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d004      	beq.n	8008bbe <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	2202      	movs	r2, #2
 8008bb8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008bbc:	e008      	b.n	8008bd0 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	2201      	movs	r2, #1
 8008bc2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008bc6:	e003      	b.n	8008bd0 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008bc8:	6839      	ldr	r1, [r7, #0]
 8008bca:	6878      	ldr	r0, [r7, #4]
 8008bcc:	f000 f97e 	bl	8008ecc <USBD_CtlError>
  }
}
 8008bd0:	bf00      	nop
 8008bd2:	3710      	adds	r7, #16
 8008bd4:	46bd      	mov	sp, r7
 8008bd6:	bd80      	pop	{r7, pc}

08008bd8 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008bd8:	b580      	push	{r7, lr}
 8008bda:	b084      	sub	sp, #16
 8008bdc:	af00      	add	r7, sp, #0
 8008bde:	6078      	str	r0, [r7, #4]
 8008be0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008be2:	2300      	movs	r3, #0
 8008be4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008be6:	683b      	ldr	r3, [r7, #0]
 8008be8:	885b      	ldrh	r3, [r3, #2]
 8008bea:	b2da      	uxtb	r2, r3
 8008bec:	4b4b      	ldr	r3, [pc, #300]	; (8008d1c <USBD_SetConfig+0x144>)
 8008bee:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008bf0:	4b4a      	ldr	r3, [pc, #296]	; (8008d1c <USBD_SetConfig+0x144>)
 8008bf2:	781b      	ldrb	r3, [r3, #0]
 8008bf4:	2b01      	cmp	r3, #1
 8008bf6:	d905      	bls.n	8008c04 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008bf8:	6839      	ldr	r1, [r7, #0]
 8008bfa:	6878      	ldr	r0, [r7, #4]
 8008bfc:	f000 f966 	bl	8008ecc <USBD_CtlError>
    return USBD_FAIL;
 8008c00:	2303      	movs	r3, #3
 8008c02:	e087      	b.n	8008d14 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c0a:	2b02      	cmp	r3, #2
 8008c0c:	d002      	beq.n	8008c14 <USBD_SetConfig+0x3c>
 8008c0e:	2b03      	cmp	r3, #3
 8008c10:	d025      	beq.n	8008c5e <USBD_SetConfig+0x86>
 8008c12:	e071      	b.n	8008cf8 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8008c14:	4b41      	ldr	r3, [pc, #260]	; (8008d1c <USBD_SetConfig+0x144>)
 8008c16:	781b      	ldrb	r3, [r3, #0]
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d01c      	beq.n	8008c56 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8008c1c:	4b3f      	ldr	r3, [pc, #252]	; (8008d1c <USBD_SetConfig+0x144>)
 8008c1e:	781b      	ldrb	r3, [r3, #0]
 8008c20:	461a      	mov	r2, r3
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 8008c26:	4b3d      	ldr	r3, [pc, #244]	; (8008d1c <USBD_SetConfig+0x144>)
 8008c28:	781b      	ldrb	r3, [r3, #0]
 8008c2a:	4619      	mov	r1, r3
 8008c2c:	6878      	ldr	r0, [r7, #4]
 8008c2e:	f7ff f9bd 	bl	8007fac <USBD_SetClassConfig>
 8008c32:	4603      	mov	r3, r0
 8008c34:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 8008c36:	7bfb      	ldrb	r3, [r7, #15]
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d004      	beq.n	8008c46 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8008c3c:	6839      	ldr	r1, [r7, #0]
 8008c3e:	6878      	ldr	r0, [r7, #4]
 8008c40:	f000 f944 	bl	8008ecc <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8008c44:	e065      	b.n	8008d12 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8008c46:	6878      	ldr	r0, [r7, #4]
 8008c48:	f000 fa0b 	bl	8009062 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	2203      	movs	r2, #3
 8008c50:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8008c54:	e05d      	b.n	8008d12 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8008c56:	6878      	ldr	r0, [r7, #4]
 8008c58:	f000 fa03 	bl	8009062 <USBD_CtlSendStatus>
    break;
 8008c5c:	e059      	b.n	8008d12 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 8008c5e:	4b2f      	ldr	r3, [pc, #188]	; (8008d1c <USBD_SetConfig+0x144>)
 8008c60:	781b      	ldrb	r3, [r3, #0]
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d112      	bne.n	8008c8c <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	2202      	movs	r2, #2
 8008c6a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8008c6e:	4b2b      	ldr	r3, [pc, #172]	; (8008d1c <USBD_SetConfig+0x144>)
 8008c70:	781b      	ldrb	r3, [r3, #0]
 8008c72:	461a      	mov	r2, r3
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008c78:	4b28      	ldr	r3, [pc, #160]	; (8008d1c <USBD_SetConfig+0x144>)
 8008c7a:	781b      	ldrb	r3, [r3, #0]
 8008c7c:	4619      	mov	r1, r3
 8008c7e:	6878      	ldr	r0, [r7, #4]
 8008c80:	f7ff f9b0 	bl	8007fe4 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8008c84:	6878      	ldr	r0, [r7, #4]
 8008c86:	f000 f9ec 	bl	8009062 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8008c8a:	e042      	b.n	8008d12 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8008c8c:	4b23      	ldr	r3, [pc, #140]	; (8008d1c <USBD_SetConfig+0x144>)
 8008c8e:	781b      	ldrb	r3, [r3, #0]
 8008c90:	461a      	mov	r2, r3
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	685b      	ldr	r3, [r3, #4]
 8008c96:	429a      	cmp	r2, r3
 8008c98:	d02a      	beq.n	8008cf0 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	685b      	ldr	r3, [r3, #4]
 8008c9e:	b2db      	uxtb	r3, r3
 8008ca0:	4619      	mov	r1, r3
 8008ca2:	6878      	ldr	r0, [r7, #4]
 8008ca4:	f7ff f99e 	bl	8007fe4 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8008ca8:	4b1c      	ldr	r3, [pc, #112]	; (8008d1c <USBD_SetConfig+0x144>)
 8008caa:	781b      	ldrb	r3, [r3, #0]
 8008cac:	461a      	mov	r2, r3
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8008cb2:	4b1a      	ldr	r3, [pc, #104]	; (8008d1c <USBD_SetConfig+0x144>)
 8008cb4:	781b      	ldrb	r3, [r3, #0]
 8008cb6:	4619      	mov	r1, r3
 8008cb8:	6878      	ldr	r0, [r7, #4]
 8008cba:	f7ff f977 	bl	8007fac <USBD_SetClassConfig>
 8008cbe:	4603      	mov	r3, r0
 8008cc0:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 8008cc2:	7bfb      	ldrb	r3, [r7, #15]
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d00f      	beq.n	8008ce8 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8008cc8:	6839      	ldr	r1, [r7, #0]
 8008cca:	6878      	ldr	r0, [r7, #4]
 8008ccc:	f000 f8fe 	bl	8008ecc <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	685b      	ldr	r3, [r3, #4]
 8008cd4:	b2db      	uxtb	r3, r3
 8008cd6:	4619      	mov	r1, r3
 8008cd8:	6878      	ldr	r0, [r7, #4]
 8008cda:	f7ff f983 	bl	8007fe4 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	2202      	movs	r2, #2
 8008ce2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8008ce6:	e014      	b.n	8008d12 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8008ce8:	6878      	ldr	r0, [r7, #4]
 8008cea:	f000 f9ba 	bl	8009062 <USBD_CtlSendStatus>
    break;
 8008cee:	e010      	b.n	8008d12 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8008cf0:	6878      	ldr	r0, [r7, #4]
 8008cf2:	f000 f9b6 	bl	8009062 <USBD_CtlSendStatus>
    break;
 8008cf6:	e00c      	b.n	8008d12 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8008cf8:	6839      	ldr	r1, [r7, #0]
 8008cfa:	6878      	ldr	r0, [r7, #4]
 8008cfc:	f000 f8e6 	bl	8008ecc <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008d00:	4b06      	ldr	r3, [pc, #24]	; (8008d1c <USBD_SetConfig+0x144>)
 8008d02:	781b      	ldrb	r3, [r3, #0]
 8008d04:	4619      	mov	r1, r3
 8008d06:	6878      	ldr	r0, [r7, #4]
 8008d08:	f7ff f96c 	bl	8007fe4 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8008d0c:	2303      	movs	r3, #3
 8008d0e:	73fb      	strb	r3, [r7, #15]
    break;
 8008d10:	bf00      	nop
  }

  return ret;
 8008d12:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d14:	4618      	mov	r0, r3
 8008d16:	3710      	adds	r7, #16
 8008d18:	46bd      	mov	sp, r7
 8008d1a:	bd80      	pop	{r7, pc}
 8008d1c:	20000201 	.word	0x20000201

08008d20 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d20:	b580      	push	{r7, lr}
 8008d22:	b082      	sub	sp, #8
 8008d24:	af00      	add	r7, sp, #0
 8008d26:	6078      	str	r0, [r7, #4]
 8008d28:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008d2a:	683b      	ldr	r3, [r7, #0]
 8008d2c:	88db      	ldrh	r3, [r3, #6]
 8008d2e:	2b01      	cmp	r3, #1
 8008d30:	d004      	beq.n	8008d3c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008d32:	6839      	ldr	r1, [r7, #0]
 8008d34:	6878      	ldr	r0, [r7, #4]
 8008d36:	f000 f8c9 	bl	8008ecc <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 8008d3a:	e021      	b.n	8008d80 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d42:	2b01      	cmp	r3, #1
 8008d44:	db17      	blt.n	8008d76 <USBD_GetConfig+0x56>
 8008d46:	2b02      	cmp	r3, #2
 8008d48:	dd02      	ble.n	8008d50 <USBD_GetConfig+0x30>
 8008d4a:	2b03      	cmp	r3, #3
 8008d4c:	d00b      	beq.n	8008d66 <USBD_GetConfig+0x46>
 8008d4e:	e012      	b.n	8008d76 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	2200      	movs	r2, #0
 8008d54:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	3308      	adds	r3, #8
 8008d5a:	2201      	movs	r2, #1
 8008d5c:	4619      	mov	r1, r3
 8008d5e:	6878      	ldr	r0, [r7, #4]
 8008d60:	f000 f925 	bl	8008fae <USBD_CtlSendData>
      break;
 8008d64:	e00c      	b.n	8008d80 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	3304      	adds	r3, #4
 8008d6a:	2201      	movs	r2, #1
 8008d6c:	4619      	mov	r1, r3
 8008d6e:	6878      	ldr	r0, [r7, #4]
 8008d70:	f000 f91d 	bl	8008fae <USBD_CtlSendData>
      break;
 8008d74:	e004      	b.n	8008d80 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 8008d76:	6839      	ldr	r1, [r7, #0]
 8008d78:	6878      	ldr	r0, [r7, #4]
 8008d7a:	f000 f8a7 	bl	8008ecc <USBD_CtlError>
      break;
 8008d7e:	bf00      	nop
}
 8008d80:	bf00      	nop
 8008d82:	3708      	adds	r7, #8
 8008d84:	46bd      	mov	sp, r7
 8008d86:	bd80      	pop	{r7, pc}

08008d88 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d88:	b580      	push	{r7, lr}
 8008d8a:	b082      	sub	sp, #8
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	6078      	str	r0, [r7, #4]
 8008d90:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d98:	3b01      	subs	r3, #1
 8008d9a:	2b02      	cmp	r3, #2
 8008d9c:	d81e      	bhi.n	8008ddc <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 8008d9e:	683b      	ldr	r3, [r7, #0]
 8008da0:	88db      	ldrh	r3, [r3, #6]
 8008da2:	2b02      	cmp	r3, #2
 8008da4:	d004      	beq.n	8008db0 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8008da6:	6839      	ldr	r1, [r7, #0]
 8008da8:	6878      	ldr	r0, [r7, #4]
 8008daa:	f000 f88f 	bl	8008ecc <USBD_CtlError>
      break;
 8008dae:	e01a      	b.n	8008de6 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	2201      	movs	r2, #1
 8008db4:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d005      	beq.n	8008dcc <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	68db      	ldr	r3, [r3, #12]
 8008dc4:	f043 0202 	orr.w	r2, r3, #2
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	330c      	adds	r3, #12
 8008dd0:	2202      	movs	r2, #2
 8008dd2:	4619      	mov	r1, r3
 8008dd4:	6878      	ldr	r0, [r7, #4]
 8008dd6:	f000 f8ea 	bl	8008fae <USBD_CtlSendData>
    break;
 8008dda:	e004      	b.n	8008de6 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 8008ddc:	6839      	ldr	r1, [r7, #0]
 8008dde:	6878      	ldr	r0, [r7, #4]
 8008de0:	f000 f874 	bl	8008ecc <USBD_CtlError>
    break;
 8008de4:	bf00      	nop
  }
}
 8008de6:	bf00      	nop
 8008de8:	3708      	adds	r7, #8
 8008dea:	46bd      	mov	sp, r7
 8008dec:	bd80      	pop	{r7, pc}

08008dee <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008dee:	b580      	push	{r7, lr}
 8008df0:	b082      	sub	sp, #8
 8008df2:	af00      	add	r7, sp, #0
 8008df4:	6078      	str	r0, [r7, #4]
 8008df6:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008df8:	683b      	ldr	r3, [r7, #0]
 8008dfa:	885b      	ldrh	r3, [r3, #2]
 8008dfc:	2b01      	cmp	r3, #1
 8008dfe:	d106      	bne.n	8008e0e <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	2201      	movs	r2, #1
 8008e04:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008e08:	6878      	ldr	r0, [r7, #4]
 8008e0a:	f000 f92a 	bl	8009062 <USBD_CtlSendStatus>
  }
}
 8008e0e:	bf00      	nop
 8008e10:	3708      	adds	r7, #8
 8008e12:	46bd      	mov	sp, r7
 8008e14:	bd80      	pop	{r7, pc}

08008e16 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e16:	b580      	push	{r7, lr}
 8008e18:	b082      	sub	sp, #8
 8008e1a:	af00      	add	r7, sp, #0
 8008e1c:	6078      	str	r0, [r7, #4]
 8008e1e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e26:	3b01      	subs	r3, #1
 8008e28:	2b02      	cmp	r3, #2
 8008e2a:	d80b      	bhi.n	8008e44 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008e2c:	683b      	ldr	r3, [r7, #0]
 8008e2e:	885b      	ldrh	r3, [r3, #2]
 8008e30:	2b01      	cmp	r3, #1
 8008e32:	d10c      	bne.n	8008e4e <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	2200      	movs	r2, #0
 8008e38:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008e3c:	6878      	ldr	r0, [r7, #4]
 8008e3e:	f000 f910 	bl	8009062 <USBD_CtlSendStatus>
      }
      break;
 8008e42:	e004      	b.n	8008e4e <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8008e44:	6839      	ldr	r1, [r7, #0]
 8008e46:	6878      	ldr	r0, [r7, #4]
 8008e48:	f000 f840 	bl	8008ecc <USBD_CtlError>
      break;
 8008e4c:	e000      	b.n	8008e50 <USBD_ClrFeature+0x3a>
      break;
 8008e4e:	bf00      	nop
  }
}
 8008e50:	bf00      	nop
 8008e52:	3708      	adds	r7, #8
 8008e54:	46bd      	mov	sp, r7
 8008e56:	bd80      	pop	{r7, pc}

08008e58 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008e58:	b580      	push	{r7, lr}
 8008e5a:	b084      	sub	sp, #16
 8008e5c:	af00      	add	r7, sp, #0
 8008e5e:	6078      	str	r0, [r7, #4]
 8008e60:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008e62:	683b      	ldr	r3, [r7, #0]
 8008e64:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	781a      	ldrb	r2, [r3, #0]
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	3301      	adds	r3, #1
 8008e72:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	781a      	ldrb	r2, [r3, #0]
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	3301      	adds	r3, #1
 8008e80:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008e82:	68f8      	ldr	r0, [r7, #12]
 8008e84:	f7ff faa8 	bl	80083d8 <SWAPBYTE>
 8008e88:	4603      	mov	r3, r0
 8008e8a:	461a      	mov	r2, r3
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	3301      	adds	r3, #1
 8008e94:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	3301      	adds	r3, #1
 8008e9a:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008e9c:	68f8      	ldr	r0, [r7, #12]
 8008e9e:	f7ff fa9b 	bl	80083d8 <SWAPBYTE>
 8008ea2:	4603      	mov	r3, r0
 8008ea4:	461a      	mov	r2, r3
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	3301      	adds	r3, #1
 8008eae:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	3301      	adds	r3, #1
 8008eb4:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008eb6:	68f8      	ldr	r0, [r7, #12]
 8008eb8:	f7ff fa8e 	bl	80083d8 <SWAPBYTE>
 8008ebc:	4603      	mov	r3, r0
 8008ebe:	461a      	mov	r2, r3
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	80da      	strh	r2, [r3, #6]
}
 8008ec4:	bf00      	nop
 8008ec6:	3710      	adds	r7, #16
 8008ec8:	46bd      	mov	sp, r7
 8008eca:	bd80      	pop	{r7, pc}

08008ecc <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ecc:	b580      	push	{r7, lr}
 8008ece:	b082      	sub	sp, #8
 8008ed0:	af00      	add	r7, sp, #0
 8008ed2:	6078      	str	r0, [r7, #4]
 8008ed4:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008ed6:	2180      	movs	r1, #128	; 0x80
 8008ed8:	6878      	ldr	r0, [r7, #4]
 8008eda:	f000 fc81 	bl	80097e0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008ede:	2100      	movs	r1, #0
 8008ee0:	6878      	ldr	r0, [r7, #4]
 8008ee2:	f000 fc7d 	bl	80097e0 <USBD_LL_StallEP>
}
 8008ee6:	bf00      	nop
 8008ee8:	3708      	adds	r7, #8
 8008eea:	46bd      	mov	sp, r7
 8008eec:	bd80      	pop	{r7, pc}

08008eee <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008eee:	b580      	push	{r7, lr}
 8008ef0:	b086      	sub	sp, #24
 8008ef2:	af00      	add	r7, sp, #0
 8008ef4:	60f8      	str	r0, [r7, #12]
 8008ef6:	60b9      	str	r1, [r7, #8]
 8008ef8:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008efa:	2300      	movs	r3, #0
 8008efc:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d036      	beq.n	8008f72 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008f08:	6938      	ldr	r0, [r7, #16]
 8008f0a:	f000 f836 	bl	8008f7a <USBD_GetLen>
 8008f0e:	4603      	mov	r3, r0
 8008f10:	3301      	adds	r3, #1
 8008f12:	b29b      	uxth	r3, r3
 8008f14:	005b      	lsls	r3, r3, #1
 8008f16:	b29a      	uxth	r2, r3
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008f1c:	7dfb      	ldrb	r3, [r7, #23]
 8008f1e:	68ba      	ldr	r2, [r7, #8]
 8008f20:	4413      	add	r3, r2
 8008f22:	687a      	ldr	r2, [r7, #4]
 8008f24:	7812      	ldrb	r2, [r2, #0]
 8008f26:	701a      	strb	r2, [r3, #0]
  idx++;
 8008f28:	7dfb      	ldrb	r3, [r7, #23]
 8008f2a:	3301      	adds	r3, #1
 8008f2c:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008f2e:	7dfb      	ldrb	r3, [r7, #23]
 8008f30:	68ba      	ldr	r2, [r7, #8]
 8008f32:	4413      	add	r3, r2
 8008f34:	2203      	movs	r2, #3
 8008f36:	701a      	strb	r2, [r3, #0]
  idx++;
 8008f38:	7dfb      	ldrb	r3, [r7, #23]
 8008f3a:	3301      	adds	r3, #1
 8008f3c:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008f3e:	e013      	b.n	8008f68 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008f40:	7dfb      	ldrb	r3, [r7, #23]
 8008f42:	68ba      	ldr	r2, [r7, #8]
 8008f44:	4413      	add	r3, r2
 8008f46:	693a      	ldr	r2, [r7, #16]
 8008f48:	7812      	ldrb	r2, [r2, #0]
 8008f4a:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008f4c:	693b      	ldr	r3, [r7, #16]
 8008f4e:	3301      	adds	r3, #1
 8008f50:	613b      	str	r3, [r7, #16]
    idx++;
 8008f52:	7dfb      	ldrb	r3, [r7, #23]
 8008f54:	3301      	adds	r3, #1
 8008f56:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008f58:	7dfb      	ldrb	r3, [r7, #23]
 8008f5a:	68ba      	ldr	r2, [r7, #8]
 8008f5c:	4413      	add	r3, r2
 8008f5e:	2200      	movs	r2, #0
 8008f60:	701a      	strb	r2, [r3, #0]
    idx++;
 8008f62:	7dfb      	ldrb	r3, [r7, #23]
 8008f64:	3301      	adds	r3, #1
 8008f66:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008f68:	693b      	ldr	r3, [r7, #16]
 8008f6a:	781b      	ldrb	r3, [r3, #0]
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d1e7      	bne.n	8008f40 <USBD_GetString+0x52>
 8008f70:	e000      	b.n	8008f74 <USBD_GetString+0x86>
    return;
 8008f72:	bf00      	nop
  }
}
 8008f74:	3718      	adds	r7, #24
 8008f76:	46bd      	mov	sp, r7
 8008f78:	bd80      	pop	{r7, pc}

08008f7a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008f7a:	b480      	push	{r7}
 8008f7c:	b085      	sub	sp, #20
 8008f7e:	af00      	add	r7, sp, #0
 8008f80:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008f82:	2300      	movs	r3, #0
 8008f84:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008f8a:	e005      	b.n	8008f98 <USBD_GetLen+0x1e>
  {
    len++;
 8008f8c:	7bfb      	ldrb	r3, [r7, #15]
 8008f8e:	3301      	adds	r3, #1
 8008f90:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008f92:	68bb      	ldr	r3, [r7, #8]
 8008f94:	3301      	adds	r3, #1
 8008f96:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008f98:	68bb      	ldr	r3, [r7, #8]
 8008f9a:	781b      	ldrb	r3, [r3, #0]
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d1f5      	bne.n	8008f8c <USBD_GetLen+0x12>
  }

  return len;
 8008fa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fa2:	4618      	mov	r0, r3
 8008fa4:	3714      	adds	r7, #20
 8008fa6:	46bd      	mov	sp, r7
 8008fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fac:	4770      	bx	lr

08008fae <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008fae:	b580      	push	{r7, lr}
 8008fb0:	b084      	sub	sp, #16
 8008fb2:	af00      	add	r7, sp, #0
 8008fb4:	60f8      	str	r0, [r7, #12]
 8008fb6:	60b9      	str	r1, [r7, #8]
 8008fb8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	2202      	movs	r2, #2
 8008fbe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	687a      	ldr	r2, [r7, #4]
 8008fc6:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	687a      	ldr	r2, [r7, #4]
 8008fcc:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	68ba      	ldr	r2, [r7, #8]
 8008fd2:	2100      	movs	r1, #0
 8008fd4:	68f8      	ldr	r0, [r7, #12]
 8008fd6:	f000 fc8d 	bl	80098f4 <USBD_LL_Transmit>

  return USBD_OK;
 8008fda:	2300      	movs	r3, #0
}
 8008fdc:	4618      	mov	r0, r3
 8008fde:	3710      	adds	r7, #16
 8008fe0:	46bd      	mov	sp, r7
 8008fe2:	bd80      	pop	{r7, pc}

08008fe4 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008fe4:	b580      	push	{r7, lr}
 8008fe6:	b084      	sub	sp, #16
 8008fe8:	af00      	add	r7, sp, #0
 8008fea:	60f8      	str	r0, [r7, #12]
 8008fec:	60b9      	str	r1, [r7, #8]
 8008fee:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	68ba      	ldr	r2, [r7, #8]
 8008ff4:	2100      	movs	r1, #0
 8008ff6:	68f8      	ldr	r0, [r7, #12]
 8008ff8:	f000 fc7c 	bl	80098f4 <USBD_LL_Transmit>

  return USBD_OK;
 8008ffc:	2300      	movs	r3, #0
}
 8008ffe:	4618      	mov	r0, r3
 8009000:	3710      	adds	r7, #16
 8009002:	46bd      	mov	sp, r7
 8009004:	bd80      	pop	{r7, pc}

08009006 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8009006:	b580      	push	{r7, lr}
 8009008:	b084      	sub	sp, #16
 800900a:	af00      	add	r7, sp, #0
 800900c:	60f8      	str	r0, [r7, #12]
 800900e:	60b9      	str	r1, [r7, #8]
 8009010:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	2203      	movs	r2, #3
 8009016:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	687a      	ldr	r2, [r7, #4]
 800901e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	687a      	ldr	r2, [r7, #4]
 8009026:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	68ba      	ldr	r2, [r7, #8]
 800902e:	2100      	movs	r1, #0
 8009030:	68f8      	ldr	r0, [r7, #12]
 8009032:	f000 fc80 	bl	8009936 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009036:	2300      	movs	r3, #0
}
 8009038:	4618      	mov	r0, r3
 800903a:	3710      	adds	r7, #16
 800903c:	46bd      	mov	sp, r7
 800903e:	bd80      	pop	{r7, pc}

08009040 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009040:	b580      	push	{r7, lr}
 8009042:	b084      	sub	sp, #16
 8009044:	af00      	add	r7, sp, #0
 8009046:	60f8      	str	r0, [r7, #12]
 8009048:	60b9      	str	r1, [r7, #8]
 800904a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	68ba      	ldr	r2, [r7, #8]
 8009050:	2100      	movs	r1, #0
 8009052:	68f8      	ldr	r0, [r7, #12]
 8009054:	f000 fc6f 	bl	8009936 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009058:	2300      	movs	r3, #0
}
 800905a:	4618      	mov	r0, r3
 800905c:	3710      	adds	r7, #16
 800905e:	46bd      	mov	sp, r7
 8009060:	bd80      	pop	{r7, pc}

08009062 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009062:	b580      	push	{r7, lr}
 8009064:	b082      	sub	sp, #8
 8009066:	af00      	add	r7, sp, #0
 8009068:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	2204      	movs	r2, #4
 800906e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009072:	2300      	movs	r3, #0
 8009074:	2200      	movs	r2, #0
 8009076:	2100      	movs	r1, #0
 8009078:	6878      	ldr	r0, [r7, #4]
 800907a:	f000 fc3b 	bl	80098f4 <USBD_LL_Transmit>

  return USBD_OK;
 800907e:	2300      	movs	r3, #0
}
 8009080:	4618      	mov	r0, r3
 8009082:	3708      	adds	r7, #8
 8009084:	46bd      	mov	sp, r7
 8009086:	bd80      	pop	{r7, pc}

08009088 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009088:	b580      	push	{r7, lr}
 800908a:	b082      	sub	sp, #8
 800908c:	af00      	add	r7, sp, #0
 800908e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	2205      	movs	r2, #5
 8009094:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009098:	2300      	movs	r3, #0
 800909a:	2200      	movs	r2, #0
 800909c:	2100      	movs	r1, #0
 800909e:	6878      	ldr	r0, [r7, #4]
 80090a0:	f000 fc49 	bl	8009936 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80090a4:	2300      	movs	r3, #0
}
 80090a6:	4618      	mov	r0, r3
 80090a8:	3708      	adds	r7, #8
 80090aa:	46bd      	mov	sp, r7
 80090ac:	bd80      	pop	{r7, pc}
	...

080090b0 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 80090b0:	b580      	push	{r7, lr}
 80090b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 80090b4:	2200      	movs	r2, #0
 80090b6:	4912      	ldr	r1, [pc, #72]	; (8009100 <MX_USB_Device_Init+0x50>)
 80090b8:	4812      	ldr	r0, [pc, #72]	; (8009104 <MX_USB_Device_Init+0x54>)
 80090ba:	f7fe ff09 	bl	8007ed0 <USBD_Init>
 80090be:	4603      	mov	r3, r0
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d001      	beq.n	80090c8 <MX_USB_Device_Init+0x18>
    Error_Handler();
 80090c4:	f7f7 ff32 	bl	8000f2c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 80090c8:	490f      	ldr	r1, [pc, #60]	; (8009108 <MX_USB_Device_Init+0x58>)
 80090ca:	480e      	ldr	r0, [pc, #56]	; (8009104 <MX_USB_Device_Init+0x54>)
 80090cc:	f7fe ff30 	bl	8007f30 <USBD_RegisterClass>
 80090d0:	4603      	mov	r3, r0
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d001      	beq.n	80090da <MX_USB_Device_Init+0x2a>
    Error_Handler();
 80090d6:	f7f7 ff29 	bl	8000f2c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 80090da:	490c      	ldr	r1, [pc, #48]	; (800910c <MX_USB_Device_Init+0x5c>)
 80090dc:	4809      	ldr	r0, [pc, #36]	; (8009104 <MX_USB_Device_Init+0x54>)
 80090de:	f7fe fe5b 	bl	8007d98 <USBD_CDC_RegisterInterface>
 80090e2:	4603      	mov	r3, r0
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d001      	beq.n	80090ec <MX_USB_Device_Init+0x3c>
    Error_Handler();
 80090e8:	f7f7 ff20 	bl	8000f2c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 80090ec:	4805      	ldr	r0, [pc, #20]	; (8009104 <MX_USB_Device_Init+0x54>)
 80090ee:	f7fe ff46 	bl	8007f7e <USBD_Start>
 80090f2:	4603      	mov	r3, r0
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d001      	beq.n	80090fc <MX_USB_Device_Init+0x4c>
    Error_Handler();
 80090f8:	f7f7 ff18 	bl	8000f2c <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 80090fc:	bf00      	nop
 80090fe:	bd80      	pop	{r7, pc}
 8009100:	20000184 	.word	0x20000184
 8009104:	200006d4 	.word	0x200006d4
 8009108:	2000006c 	.word	0x2000006c
 800910c:	20000170 	.word	0x20000170

08009110 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009110:	b580      	push	{r7, lr}
 8009112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009114:	2200      	movs	r2, #0
 8009116:	4905      	ldr	r1, [pc, #20]	; (800912c <CDC_Init_FS+0x1c>)
 8009118:	4805      	ldr	r0, [pc, #20]	; (8009130 <CDC_Init_FS+0x20>)
 800911a:	f7fe fe52 	bl	8007dc2 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800911e:	4905      	ldr	r1, [pc, #20]	; (8009134 <CDC_Init_FS+0x24>)
 8009120:	4803      	ldr	r0, [pc, #12]	; (8009130 <CDC_Init_FS+0x20>)
 8009122:	f7fe fe67 	bl	8007df4 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009126:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009128:	4618      	mov	r0, r3
 800912a:	bd80      	pop	{r7, pc}
 800912c:	20000d8c 	.word	0x20000d8c
 8009130:	200006d4 	.word	0x200006d4
 8009134:	200009a4 	.word	0x200009a4

08009138 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009138:	b480      	push	{r7}
 800913a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800913c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800913e:	4618      	mov	r0, r3
 8009140:	46bd      	mov	sp, r7
 8009142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009146:	4770      	bx	lr

08009148 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009148:	b480      	push	{r7}
 800914a:	b083      	sub	sp, #12
 800914c:	af00      	add	r7, sp, #0
 800914e:	4603      	mov	r3, r0
 8009150:	6039      	str	r1, [r7, #0]
 8009152:	71fb      	strb	r3, [r7, #7]
 8009154:	4613      	mov	r3, r2
 8009156:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009158:	79fb      	ldrb	r3, [r7, #7]
 800915a:	2b23      	cmp	r3, #35	; 0x23
 800915c:	d84a      	bhi.n	80091f4 <CDC_Control_FS+0xac>
 800915e:	a201      	add	r2, pc, #4	; (adr r2, 8009164 <CDC_Control_FS+0x1c>)
 8009160:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009164:	080091f5 	.word	0x080091f5
 8009168:	080091f5 	.word	0x080091f5
 800916c:	080091f5 	.word	0x080091f5
 8009170:	080091f5 	.word	0x080091f5
 8009174:	080091f5 	.word	0x080091f5
 8009178:	080091f5 	.word	0x080091f5
 800917c:	080091f5 	.word	0x080091f5
 8009180:	080091f5 	.word	0x080091f5
 8009184:	080091f5 	.word	0x080091f5
 8009188:	080091f5 	.word	0x080091f5
 800918c:	080091f5 	.word	0x080091f5
 8009190:	080091f5 	.word	0x080091f5
 8009194:	080091f5 	.word	0x080091f5
 8009198:	080091f5 	.word	0x080091f5
 800919c:	080091f5 	.word	0x080091f5
 80091a0:	080091f5 	.word	0x080091f5
 80091a4:	080091f5 	.word	0x080091f5
 80091a8:	080091f5 	.word	0x080091f5
 80091ac:	080091f5 	.word	0x080091f5
 80091b0:	080091f5 	.word	0x080091f5
 80091b4:	080091f5 	.word	0x080091f5
 80091b8:	080091f5 	.word	0x080091f5
 80091bc:	080091f5 	.word	0x080091f5
 80091c0:	080091f5 	.word	0x080091f5
 80091c4:	080091f5 	.word	0x080091f5
 80091c8:	080091f5 	.word	0x080091f5
 80091cc:	080091f5 	.word	0x080091f5
 80091d0:	080091f5 	.word	0x080091f5
 80091d4:	080091f5 	.word	0x080091f5
 80091d8:	080091f5 	.word	0x080091f5
 80091dc:	080091f5 	.word	0x080091f5
 80091e0:	080091f5 	.word	0x080091f5
 80091e4:	080091f5 	.word	0x080091f5
 80091e8:	080091f5 	.word	0x080091f5
 80091ec:	080091f5 	.word	0x080091f5
 80091f0:	080091f5 	.word	0x080091f5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80091f4:	bf00      	nop
  }

  return (USBD_OK);
 80091f6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80091f8:	4618      	mov	r0, r3
 80091fa:	370c      	adds	r7, #12
 80091fc:	46bd      	mov	sp, r7
 80091fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009202:	4770      	bx	lr

08009204 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009204:	b580      	push	{r7, lr}
 8009206:	b082      	sub	sp, #8
 8009208:	af00      	add	r7, sp, #0
 800920a:	6078      	str	r0, [r7, #4]
 800920c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  CDC_On_Receive(Buf, Len); // (1)
 800920e:	6839      	ldr	r1, [r7, #0]
 8009210:	6878      	ldr	r0, [r7, #4]
 8009212:	f7f7 f801 	bl	8000218 <CDC_On_Receive>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009216:	6879      	ldr	r1, [r7, #4]
 8009218:	4805      	ldr	r0, [pc, #20]	; (8009230 <CDC_Receive_FS+0x2c>)
 800921a:	f7fe fdeb 	bl	8007df4 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800921e:	4804      	ldr	r0, [pc, #16]	; (8009230 <CDC_Receive_FS+0x2c>)
 8009220:	f7fe fe2c 	bl	8007e7c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8009224:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009226:	4618      	mov	r0, r3
 8009228:	3708      	adds	r7, #8
 800922a:	46bd      	mov	sp, r7
 800922c:	bd80      	pop	{r7, pc}
 800922e:	bf00      	nop
 8009230:	200006d4 	.word	0x200006d4

08009234 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8009234:	b580      	push	{r7, lr}
 8009236:	b084      	sub	sp, #16
 8009238:	af00      	add	r7, sp, #0
 800923a:	6078      	str	r0, [r7, #4]
 800923c:	460b      	mov	r3, r1
 800923e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8009240:	2300      	movs	r3, #0
 8009242:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8009244:	4b0d      	ldr	r3, [pc, #52]	; (800927c <CDC_Transmit_FS+0x48>)
 8009246:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800924a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800924c:	68bb      	ldr	r3, [r7, #8]
 800924e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009252:	2b00      	cmp	r3, #0
 8009254:	d001      	beq.n	800925a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8009256:	2301      	movs	r3, #1
 8009258:	e00b      	b.n	8009272 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800925a:	887b      	ldrh	r3, [r7, #2]
 800925c:	461a      	mov	r2, r3
 800925e:	6879      	ldr	r1, [r7, #4]
 8009260:	4806      	ldr	r0, [pc, #24]	; (800927c <CDC_Transmit_FS+0x48>)
 8009262:	f7fe fdae 	bl	8007dc2 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8009266:	4805      	ldr	r0, [pc, #20]	; (800927c <CDC_Transmit_FS+0x48>)
 8009268:	f7fe fdd8 	bl	8007e1c <USBD_CDC_TransmitPacket>
 800926c:	4603      	mov	r3, r0
 800926e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8009270:	7bfb      	ldrb	r3, [r7, #15]
}
 8009272:	4618      	mov	r0, r3
 8009274:	3710      	adds	r7, #16
 8009276:	46bd      	mov	sp, r7
 8009278:	bd80      	pop	{r7, pc}
 800927a:	bf00      	nop
 800927c:	200006d4 	.word	0x200006d4

08009280 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8009280:	b480      	push	{r7}
 8009282:	b087      	sub	sp, #28
 8009284:	af00      	add	r7, sp, #0
 8009286:	60f8      	str	r0, [r7, #12]
 8009288:	60b9      	str	r1, [r7, #8]
 800928a:	4613      	mov	r3, r2
 800928c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800928e:	2300      	movs	r3, #0
 8009290:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8009292:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009296:	4618      	mov	r0, r3
 8009298:	371c      	adds	r7, #28
 800929a:	46bd      	mov	sp, r7
 800929c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a0:	4770      	bx	lr
	...

080092a4 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80092a4:	b480      	push	{r7}
 80092a6:	b083      	sub	sp, #12
 80092a8:	af00      	add	r7, sp, #0
 80092aa:	4603      	mov	r3, r0
 80092ac:	6039      	str	r1, [r7, #0]
 80092ae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 80092b0:	683b      	ldr	r3, [r7, #0]
 80092b2:	2212      	movs	r2, #18
 80092b4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 80092b6:	4b03      	ldr	r3, [pc, #12]	; (80092c4 <USBD_CDC_DeviceDescriptor+0x20>)
}
 80092b8:	4618      	mov	r0, r3
 80092ba:	370c      	adds	r7, #12
 80092bc:	46bd      	mov	sp, r7
 80092be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c2:	4770      	bx	lr
 80092c4:	200001a4 	.word	0x200001a4

080092c8 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80092c8:	b480      	push	{r7}
 80092ca:	b083      	sub	sp, #12
 80092cc:	af00      	add	r7, sp, #0
 80092ce:	4603      	mov	r3, r0
 80092d0:	6039      	str	r1, [r7, #0]
 80092d2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80092d4:	683b      	ldr	r3, [r7, #0]
 80092d6:	2204      	movs	r2, #4
 80092d8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80092da:	4b03      	ldr	r3, [pc, #12]	; (80092e8 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 80092dc:	4618      	mov	r0, r3
 80092de:	370c      	adds	r7, #12
 80092e0:	46bd      	mov	sp, r7
 80092e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e6:	4770      	bx	lr
 80092e8:	200001b8 	.word	0x200001b8

080092ec <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80092ec:	b580      	push	{r7, lr}
 80092ee:	b082      	sub	sp, #8
 80092f0:	af00      	add	r7, sp, #0
 80092f2:	4603      	mov	r3, r0
 80092f4:	6039      	str	r1, [r7, #0]
 80092f6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80092f8:	79fb      	ldrb	r3, [r7, #7]
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d105      	bne.n	800930a <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 80092fe:	683a      	ldr	r2, [r7, #0]
 8009300:	4907      	ldr	r1, [pc, #28]	; (8009320 <USBD_CDC_ProductStrDescriptor+0x34>)
 8009302:	4808      	ldr	r0, [pc, #32]	; (8009324 <USBD_CDC_ProductStrDescriptor+0x38>)
 8009304:	f7ff fdf3 	bl	8008eee <USBD_GetString>
 8009308:	e004      	b.n	8009314 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800930a:	683a      	ldr	r2, [r7, #0]
 800930c:	4904      	ldr	r1, [pc, #16]	; (8009320 <USBD_CDC_ProductStrDescriptor+0x34>)
 800930e:	4805      	ldr	r0, [pc, #20]	; (8009324 <USBD_CDC_ProductStrDescriptor+0x38>)
 8009310:	f7ff fded 	bl	8008eee <USBD_GetString>
  }
  return USBD_StrDesc;
 8009314:	4b02      	ldr	r3, [pc, #8]	; (8009320 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 8009316:	4618      	mov	r0, r3
 8009318:	3708      	adds	r7, #8
 800931a:	46bd      	mov	sp, r7
 800931c:	bd80      	pop	{r7, pc}
 800931e:	bf00      	nop
 8009320:	20001174 	.word	0x20001174
 8009324:	08009b28 	.word	0x08009b28

08009328 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009328:	b580      	push	{r7, lr}
 800932a:	b082      	sub	sp, #8
 800932c:	af00      	add	r7, sp, #0
 800932e:	4603      	mov	r3, r0
 8009330:	6039      	str	r1, [r7, #0]
 8009332:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009334:	683a      	ldr	r2, [r7, #0]
 8009336:	4904      	ldr	r1, [pc, #16]	; (8009348 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 8009338:	4804      	ldr	r0, [pc, #16]	; (800934c <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800933a:	f7ff fdd8 	bl	8008eee <USBD_GetString>
  return USBD_StrDesc;
 800933e:	4b02      	ldr	r3, [pc, #8]	; (8009348 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 8009340:	4618      	mov	r0, r3
 8009342:	3708      	adds	r7, #8
 8009344:	46bd      	mov	sp, r7
 8009346:	bd80      	pop	{r7, pc}
 8009348:	20001174 	.word	0x20001174
 800934c:	08009b40 	.word	0x08009b40

08009350 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009350:	b580      	push	{r7, lr}
 8009352:	b082      	sub	sp, #8
 8009354:	af00      	add	r7, sp, #0
 8009356:	4603      	mov	r3, r0
 8009358:	6039      	str	r1, [r7, #0]
 800935a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800935c:	683b      	ldr	r3, [r7, #0]
 800935e:	221a      	movs	r2, #26
 8009360:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009362:	f000 f843 	bl	80093ec <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8009366:	4b02      	ldr	r3, [pc, #8]	; (8009370 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 8009368:	4618      	mov	r0, r3
 800936a:	3708      	adds	r7, #8
 800936c:	46bd      	mov	sp, r7
 800936e:	bd80      	pop	{r7, pc}
 8009370:	200001bc 	.word	0x200001bc

08009374 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009374:	b580      	push	{r7, lr}
 8009376:	b082      	sub	sp, #8
 8009378:	af00      	add	r7, sp, #0
 800937a:	4603      	mov	r3, r0
 800937c:	6039      	str	r1, [r7, #0]
 800937e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009380:	79fb      	ldrb	r3, [r7, #7]
 8009382:	2b00      	cmp	r3, #0
 8009384:	d105      	bne.n	8009392 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8009386:	683a      	ldr	r2, [r7, #0]
 8009388:	4907      	ldr	r1, [pc, #28]	; (80093a8 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800938a:	4808      	ldr	r0, [pc, #32]	; (80093ac <USBD_CDC_ConfigStrDescriptor+0x38>)
 800938c:	f7ff fdaf 	bl	8008eee <USBD_GetString>
 8009390:	e004      	b.n	800939c <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8009392:	683a      	ldr	r2, [r7, #0]
 8009394:	4904      	ldr	r1, [pc, #16]	; (80093a8 <USBD_CDC_ConfigStrDescriptor+0x34>)
 8009396:	4805      	ldr	r0, [pc, #20]	; (80093ac <USBD_CDC_ConfigStrDescriptor+0x38>)
 8009398:	f7ff fda9 	bl	8008eee <USBD_GetString>
  }
  return USBD_StrDesc;
 800939c:	4b02      	ldr	r3, [pc, #8]	; (80093a8 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 800939e:	4618      	mov	r0, r3
 80093a0:	3708      	adds	r7, #8
 80093a2:	46bd      	mov	sp, r7
 80093a4:	bd80      	pop	{r7, pc}
 80093a6:	bf00      	nop
 80093a8:	20001174 	.word	0x20001174
 80093ac:	08009b54 	.word	0x08009b54

080093b0 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80093b0:	b580      	push	{r7, lr}
 80093b2:	b082      	sub	sp, #8
 80093b4:	af00      	add	r7, sp, #0
 80093b6:	4603      	mov	r3, r0
 80093b8:	6039      	str	r1, [r7, #0]
 80093ba:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80093bc:	79fb      	ldrb	r3, [r7, #7]
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d105      	bne.n	80093ce <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 80093c2:	683a      	ldr	r2, [r7, #0]
 80093c4:	4907      	ldr	r1, [pc, #28]	; (80093e4 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 80093c6:	4808      	ldr	r0, [pc, #32]	; (80093e8 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 80093c8:	f7ff fd91 	bl	8008eee <USBD_GetString>
 80093cc:	e004      	b.n	80093d8 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 80093ce:	683a      	ldr	r2, [r7, #0]
 80093d0:	4904      	ldr	r1, [pc, #16]	; (80093e4 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 80093d2:	4805      	ldr	r0, [pc, #20]	; (80093e8 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 80093d4:	f7ff fd8b 	bl	8008eee <USBD_GetString>
  }
  return USBD_StrDesc;
 80093d8:	4b02      	ldr	r3, [pc, #8]	; (80093e4 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 80093da:	4618      	mov	r0, r3
 80093dc:	3708      	adds	r7, #8
 80093de:	46bd      	mov	sp, r7
 80093e0:	bd80      	pop	{r7, pc}
 80093e2:	bf00      	nop
 80093e4:	20001174 	.word	0x20001174
 80093e8:	08009b60 	.word	0x08009b60

080093ec <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80093ec:	b580      	push	{r7, lr}
 80093ee:	b084      	sub	sp, #16
 80093f0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80093f2:	4b0f      	ldr	r3, [pc, #60]	; (8009430 <Get_SerialNum+0x44>)
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80093f8:	4b0e      	ldr	r3, [pc, #56]	; (8009434 <Get_SerialNum+0x48>)
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80093fe:	4b0e      	ldr	r3, [pc, #56]	; (8009438 <Get_SerialNum+0x4c>)
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009404:	68fa      	ldr	r2, [r7, #12]
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	4413      	add	r3, r2
 800940a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	2b00      	cmp	r3, #0
 8009410:	d009      	beq.n	8009426 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009412:	2208      	movs	r2, #8
 8009414:	4909      	ldr	r1, [pc, #36]	; (800943c <Get_SerialNum+0x50>)
 8009416:	68f8      	ldr	r0, [r7, #12]
 8009418:	f000 f814 	bl	8009444 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800941c:	2204      	movs	r2, #4
 800941e:	4908      	ldr	r1, [pc, #32]	; (8009440 <Get_SerialNum+0x54>)
 8009420:	68b8      	ldr	r0, [r7, #8]
 8009422:	f000 f80f 	bl	8009444 <IntToUnicode>
  }
}
 8009426:	bf00      	nop
 8009428:	3710      	adds	r7, #16
 800942a:	46bd      	mov	sp, r7
 800942c:	bd80      	pop	{r7, pc}
 800942e:	bf00      	nop
 8009430:	1fff7590 	.word	0x1fff7590
 8009434:	1fff7594 	.word	0x1fff7594
 8009438:	1fff7598 	.word	0x1fff7598
 800943c:	200001be 	.word	0x200001be
 8009440:	200001ce 	.word	0x200001ce

08009444 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009444:	b480      	push	{r7}
 8009446:	b087      	sub	sp, #28
 8009448:	af00      	add	r7, sp, #0
 800944a:	60f8      	str	r0, [r7, #12]
 800944c:	60b9      	str	r1, [r7, #8]
 800944e:	4613      	mov	r3, r2
 8009450:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009452:	2300      	movs	r3, #0
 8009454:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009456:	2300      	movs	r3, #0
 8009458:	75fb      	strb	r3, [r7, #23]
 800945a:	e027      	b.n	80094ac <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	0f1b      	lsrs	r3, r3, #28
 8009460:	2b09      	cmp	r3, #9
 8009462:	d80b      	bhi.n	800947c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	0f1b      	lsrs	r3, r3, #28
 8009468:	b2da      	uxtb	r2, r3
 800946a:	7dfb      	ldrb	r3, [r7, #23]
 800946c:	005b      	lsls	r3, r3, #1
 800946e:	4619      	mov	r1, r3
 8009470:	68bb      	ldr	r3, [r7, #8]
 8009472:	440b      	add	r3, r1
 8009474:	3230      	adds	r2, #48	; 0x30
 8009476:	b2d2      	uxtb	r2, r2
 8009478:	701a      	strb	r2, [r3, #0]
 800947a:	e00a      	b.n	8009492 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	0f1b      	lsrs	r3, r3, #28
 8009480:	b2da      	uxtb	r2, r3
 8009482:	7dfb      	ldrb	r3, [r7, #23]
 8009484:	005b      	lsls	r3, r3, #1
 8009486:	4619      	mov	r1, r3
 8009488:	68bb      	ldr	r3, [r7, #8]
 800948a:	440b      	add	r3, r1
 800948c:	3237      	adds	r2, #55	; 0x37
 800948e:	b2d2      	uxtb	r2, r2
 8009490:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	011b      	lsls	r3, r3, #4
 8009496:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009498:	7dfb      	ldrb	r3, [r7, #23]
 800949a:	005b      	lsls	r3, r3, #1
 800949c:	3301      	adds	r3, #1
 800949e:	68ba      	ldr	r2, [r7, #8]
 80094a0:	4413      	add	r3, r2
 80094a2:	2200      	movs	r2, #0
 80094a4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80094a6:	7dfb      	ldrb	r3, [r7, #23]
 80094a8:	3301      	adds	r3, #1
 80094aa:	75fb      	strb	r3, [r7, #23]
 80094ac:	7dfa      	ldrb	r2, [r7, #23]
 80094ae:	79fb      	ldrb	r3, [r7, #7]
 80094b0:	429a      	cmp	r2, r3
 80094b2:	d3d3      	bcc.n	800945c <IntToUnicode+0x18>
  }
}
 80094b4:	bf00      	nop
 80094b6:	371c      	adds	r7, #28
 80094b8:	46bd      	mov	sp, r7
 80094ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094be:	4770      	bx	lr

080094c0 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACK == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACK */
{
 80094c0:	b580      	push	{r7, lr}
 80094c2:	b084      	sub	sp, #16
 80094c4:	af00      	add	r7, sp, #0
 80094c6:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	4a0d      	ldr	r2, [pc, #52]	; (8009504 <HAL_PCD_MspInit+0x44>)
 80094ce:	4293      	cmp	r3, r2
 80094d0:	d113      	bne.n	80094fa <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80094d2:	4b0d      	ldr	r3, [pc, #52]	; (8009508 <HAL_PCD_MspInit+0x48>)
 80094d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80094d6:	4a0c      	ldr	r2, [pc, #48]	; (8009508 <HAL_PCD_MspInit+0x48>)
 80094d8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80094dc:	6593      	str	r3, [r2, #88]	; 0x58
 80094de:	4b0a      	ldr	r3, [pc, #40]	; (8009508 <HAL_PCD_MspInit+0x48>)
 80094e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80094e2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80094e6:	60fb      	str	r3, [r7, #12]
 80094e8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 80094ea:	2200      	movs	r2, #0
 80094ec:	2100      	movs	r1, #0
 80094ee:	2014      	movs	r0, #20
 80094f0:	f7f8 f92b 	bl	800174a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 80094f4:	2014      	movs	r0, #20
 80094f6:	f7f8 f942 	bl	800177e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80094fa:	bf00      	nop
 80094fc:	3710      	adds	r7, #16
 80094fe:	46bd      	mov	sp, r7
 8009500:	bd80      	pop	{r7, pc}
 8009502:	bf00      	nop
 8009504:	40005c00 	.word	0x40005c00
 8009508:	40021000 	.word	0x40021000

0800950c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800950c:	b580      	push	{r7, lr}
 800950e:	b082      	sub	sp, #8
 8009510:	af00      	add	r7, sp, #0
 8009512:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	f8d3 22f0 	ldr.w	r2, [r3, #752]	; 0x2f0
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8009520:	4619      	mov	r1, r3
 8009522:	4610      	mov	r0, r2
 8009524:	f7fe fd76 	bl	8008014 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 8009528:	bf00      	nop
 800952a:	3708      	adds	r7, #8
 800952c:	46bd      	mov	sp, r7
 800952e:	bd80      	pop	{r7, pc}

08009530 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009530:	b580      	push	{r7, lr}
 8009532:	b082      	sub	sp, #8
 8009534:	af00      	add	r7, sp, #0
 8009536:	6078      	str	r0, [r7, #4]
 8009538:	460b      	mov	r3, r1
 800953a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 8009542:	78fa      	ldrb	r2, [r7, #3]
 8009544:	6879      	ldr	r1, [r7, #4]
 8009546:	4613      	mov	r3, r2
 8009548:	009b      	lsls	r3, r3, #2
 800954a:	4413      	add	r3, r2
 800954c:	00db      	lsls	r3, r3, #3
 800954e:	440b      	add	r3, r1
 8009550:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8009554:	681a      	ldr	r2, [r3, #0]
 8009556:	78fb      	ldrb	r3, [r7, #3]
 8009558:	4619      	mov	r1, r3
 800955a:	f7fe fdae 	bl	80080ba <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800955e:	bf00      	nop
 8009560:	3708      	adds	r7, #8
 8009562:	46bd      	mov	sp, r7
 8009564:	bd80      	pop	{r7, pc}

08009566 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009566:	b580      	push	{r7, lr}
 8009568:	b082      	sub	sp, #8
 800956a:	af00      	add	r7, sp, #0
 800956c:	6078      	str	r0, [r7, #4]
 800956e:	460b      	mov	r3, r1
 8009570:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 8009578:	78fa      	ldrb	r2, [r7, #3]
 800957a:	6879      	ldr	r1, [r7, #4]
 800957c:	4613      	mov	r3, r2
 800957e:	009b      	lsls	r3, r3, #2
 8009580:	4413      	add	r3, r2
 8009582:	00db      	lsls	r3, r3, #3
 8009584:	440b      	add	r3, r1
 8009586:	333c      	adds	r3, #60	; 0x3c
 8009588:	681a      	ldr	r2, [r3, #0]
 800958a:	78fb      	ldrb	r3, [r7, #3]
 800958c:	4619      	mov	r1, r3
 800958e:	f7fe fdf7 	bl	8008180 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 8009592:	bf00      	nop
 8009594:	3708      	adds	r7, #8
 8009596:	46bd      	mov	sp, r7
 8009598:	bd80      	pop	{r7, pc}

0800959a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800959a:	b580      	push	{r7, lr}
 800959c:	b082      	sub	sp, #8
 800959e:	af00      	add	r7, sp, #0
 80095a0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 80095a8:	4618      	mov	r0, r3
 80095aa:	f7fe fefb 	bl	80083a4 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 80095ae:	bf00      	nop
 80095b0:	3708      	adds	r7, #8
 80095b2:	46bd      	mov	sp, r7
 80095b4:	bd80      	pop	{r7, pc}

080095b6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80095b6:	b580      	push	{r7, lr}
 80095b8:	b084      	sub	sp, #16
 80095ba:	af00      	add	r7, sp, #0
 80095bc:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80095be:	2301      	movs	r3, #1
 80095c0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	689b      	ldr	r3, [r3, #8]
 80095c6:	2b02      	cmp	r3, #2
 80095c8:	d001      	beq.n	80095ce <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80095ca:	f7f7 fcaf 	bl	8000f2c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 80095d4:	7bfa      	ldrb	r2, [r7, #15]
 80095d6:	4611      	mov	r1, r2
 80095d8:	4618      	mov	r0, r3
 80095da:	f7fe fea8 	bl	800832e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 80095e4:	4618      	mov	r0, r3
 80095e6:	f7fe fe61 	bl	80082ac <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 80095ea:	bf00      	nop
 80095ec:	3710      	adds	r7, #16
 80095ee:	46bd      	mov	sp, r7
 80095f0:	bd80      	pop	{r7, pc}
	...

080095f4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80095f4:	b580      	push	{r7, lr}
 80095f6:	b082      	sub	sp, #8
 80095f8:	af00      	add	r7, sp, #0
 80095fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009602:	4618      	mov	r0, r3
 8009604:	f7fe fea3 	bl	800834e <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	699b      	ldr	r3, [r3, #24]
 800960c:	2b00      	cmp	r3, #0
 800960e:	d005      	beq.n	800961c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009610:	4b04      	ldr	r3, [pc, #16]	; (8009624 <HAL_PCD_SuspendCallback+0x30>)
 8009612:	691b      	ldr	r3, [r3, #16]
 8009614:	4a03      	ldr	r2, [pc, #12]	; (8009624 <HAL_PCD_SuspendCallback+0x30>)
 8009616:	f043 0306 	orr.w	r3, r3, #6
 800961a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800961c:	bf00      	nop
 800961e:	3708      	adds	r7, #8
 8009620:	46bd      	mov	sp, r7
 8009622:	bd80      	pop	{r7, pc}
 8009624:	e000ed00 	.word	0xe000ed00

08009628 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009628:	b580      	push	{r7, lr}
 800962a:	b082      	sub	sp, #8
 800962c:	af00      	add	r7, sp, #0
 800962e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	699b      	ldr	r3, [r3, #24]
 8009634:	2b00      	cmp	r3, #0
 8009636:	d007      	beq.n	8009648 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009638:	4b08      	ldr	r3, [pc, #32]	; (800965c <HAL_PCD_ResumeCallback+0x34>)
 800963a:	691b      	ldr	r3, [r3, #16]
 800963c:	4a07      	ldr	r2, [pc, #28]	; (800965c <HAL_PCD_ResumeCallback+0x34>)
 800963e:	f023 0306 	bic.w	r3, r3, #6
 8009642:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8009644:	f000 f9fa 	bl	8009a3c <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800964e:	4618      	mov	r0, r3
 8009650:	f7fe fe92 	bl	8008378 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 8009654:	bf00      	nop
 8009656:	3708      	adds	r7, #8
 8009658:	46bd      	mov	sp, r7
 800965a:	bd80      	pop	{r7, pc}
 800965c:	e000ed00 	.word	0xe000ed00

08009660 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009660:	b580      	push	{r7, lr}
 8009662:	b082      	sub	sp, #8
 8009664:	af00      	add	r7, sp, #0
 8009666:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 8009668:	4a2b      	ldr	r2, [pc, #172]	; (8009718 <USBD_LL_Init+0xb8>)
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	4a29      	ldr	r2, [pc, #164]	; (8009718 <USBD_LL_Init+0xb8>)
 8009674:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 8009678:	4b27      	ldr	r3, [pc, #156]	; (8009718 <USBD_LL_Init+0xb8>)
 800967a:	4a28      	ldr	r2, [pc, #160]	; (800971c <USBD_LL_Init+0xbc>)
 800967c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800967e:	4b26      	ldr	r3, [pc, #152]	; (8009718 <USBD_LL_Init+0xb8>)
 8009680:	2208      	movs	r2, #8
 8009682:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8009684:	4b24      	ldr	r3, [pc, #144]	; (8009718 <USBD_LL_Init+0xb8>)
 8009686:	2202      	movs	r2, #2
 8009688:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800968a:	4b23      	ldr	r3, [pc, #140]	; (8009718 <USBD_LL_Init+0xb8>)
 800968c:	2202      	movs	r2, #2
 800968e:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8009690:	4b21      	ldr	r3, [pc, #132]	; (8009718 <USBD_LL_Init+0xb8>)
 8009692:	2200      	movs	r2, #0
 8009694:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8009696:	4b20      	ldr	r3, [pc, #128]	; (8009718 <USBD_LL_Init+0xb8>)
 8009698:	2200      	movs	r2, #0
 800969a:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800969c:	4b1e      	ldr	r3, [pc, #120]	; (8009718 <USBD_LL_Init+0xb8>)
 800969e:	2200      	movs	r2, #0
 80096a0:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80096a2:	4b1d      	ldr	r3, [pc, #116]	; (8009718 <USBD_LL_Init+0xb8>)
 80096a4:	2200      	movs	r2, #0
 80096a6:	621a      	str	r2, [r3, #32]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80096a8:	481b      	ldr	r0, [pc, #108]	; (8009718 <USBD_LL_Init+0xb8>)
 80096aa:	f7f8 fa37 	bl	8001b1c <HAL_PCD_Init>
 80096ae:	4603      	mov	r3, r0
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d001      	beq.n	80096b8 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 80096b4:	f7f7 fc3a 	bl	8000f2c <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80096be:	2318      	movs	r3, #24
 80096c0:	2200      	movs	r2, #0
 80096c2:	2100      	movs	r1, #0
 80096c4:	f7f9 fd25 	bl	8003112 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80096ce:	2358      	movs	r3, #88	; 0x58
 80096d0:	2200      	movs	r2, #0
 80096d2:	2180      	movs	r1, #128	; 0x80
 80096d4:	f7f9 fd1d 	bl	8003112 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80096de:	23c0      	movs	r3, #192	; 0xc0
 80096e0:	2200      	movs	r2, #0
 80096e2:	2181      	movs	r1, #129	; 0x81
 80096e4:	f7f9 fd15 	bl	8003112 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80096ee:	f44f 7388 	mov.w	r3, #272	; 0x110
 80096f2:	2200      	movs	r2, #0
 80096f4:	2101      	movs	r1, #1
 80096f6:	f7f9 fd0c 	bl	8003112 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009700:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009704:	2200      	movs	r2, #0
 8009706:	2182      	movs	r1, #130	; 0x82
 8009708:	f7f9 fd03 	bl	8003112 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800970c:	2300      	movs	r3, #0
}
 800970e:	4618      	mov	r0, r3
 8009710:	3708      	adds	r7, #8
 8009712:	46bd      	mov	sp, r7
 8009714:	bd80      	pop	{r7, pc}
 8009716:	bf00      	nop
 8009718:	20001374 	.word	0x20001374
 800971c:	40005c00 	.word	0x40005c00

08009720 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009720:	b580      	push	{r7, lr}
 8009722:	b084      	sub	sp, #16
 8009724:	af00      	add	r7, sp, #0
 8009726:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009728:	2300      	movs	r3, #0
 800972a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800972c:	2300      	movs	r3, #0
 800972e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009736:	4618      	mov	r0, r3
 8009738:	f7f8 fad5 	bl	8001ce6 <HAL_PCD_Start>
 800973c:	4603      	mov	r3, r0
 800973e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009740:	7bfb      	ldrb	r3, [r7, #15]
 8009742:	4618      	mov	r0, r3
 8009744:	f000 f980 	bl	8009a48 <USBD_Get_USB_Status>
 8009748:	4603      	mov	r3, r0
 800974a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800974c:	7bbb      	ldrb	r3, [r7, #14]
}
 800974e:	4618      	mov	r0, r3
 8009750:	3710      	adds	r7, #16
 8009752:	46bd      	mov	sp, r7
 8009754:	bd80      	pop	{r7, pc}

08009756 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009756:	b580      	push	{r7, lr}
 8009758:	b084      	sub	sp, #16
 800975a:	af00      	add	r7, sp, #0
 800975c:	6078      	str	r0, [r7, #4]
 800975e:	4608      	mov	r0, r1
 8009760:	4611      	mov	r1, r2
 8009762:	461a      	mov	r2, r3
 8009764:	4603      	mov	r3, r0
 8009766:	70fb      	strb	r3, [r7, #3]
 8009768:	460b      	mov	r3, r1
 800976a:	70bb      	strb	r3, [r7, #2]
 800976c:	4613      	mov	r3, r2
 800976e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009770:	2300      	movs	r3, #0
 8009772:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009774:	2300      	movs	r3, #0
 8009776:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800977e:	78bb      	ldrb	r3, [r7, #2]
 8009780:	883a      	ldrh	r2, [r7, #0]
 8009782:	78f9      	ldrb	r1, [r7, #3]
 8009784:	f7f8 fc44 	bl	8002010 <HAL_PCD_EP_Open>
 8009788:	4603      	mov	r3, r0
 800978a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800978c:	7bfb      	ldrb	r3, [r7, #15]
 800978e:	4618      	mov	r0, r3
 8009790:	f000 f95a 	bl	8009a48 <USBD_Get_USB_Status>
 8009794:	4603      	mov	r3, r0
 8009796:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009798:	7bbb      	ldrb	r3, [r7, #14]
}
 800979a:	4618      	mov	r0, r3
 800979c:	3710      	adds	r7, #16
 800979e:	46bd      	mov	sp, r7
 80097a0:	bd80      	pop	{r7, pc}

080097a2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80097a2:	b580      	push	{r7, lr}
 80097a4:	b084      	sub	sp, #16
 80097a6:	af00      	add	r7, sp, #0
 80097a8:	6078      	str	r0, [r7, #4]
 80097aa:	460b      	mov	r3, r1
 80097ac:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80097ae:	2300      	movs	r3, #0
 80097b0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80097b2:	2300      	movs	r3, #0
 80097b4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80097bc:	78fa      	ldrb	r2, [r7, #3]
 80097be:	4611      	mov	r1, r2
 80097c0:	4618      	mov	r0, r3
 80097c2:	f7f8 fc8b 	bl	80020dc <HAL_PCD_EP_Close>
 80097c6:	4603      	mov	r3, r0
 80097c8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80097ca:	7bfb      	ldrb	r3, [r7, #15]
 80097cc:	4618      	mov	r0, r3
 80097ce:	f000 f93b 	bl	8009a48 <USBD_Get_USB_Status>
 80097d2:	4603      	mov	r3, r0
 80097d4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80097d6:	7bbb      	ldrb	r3, [r7, #14]
}
 80097d8:	4618      	mov	r0, r3
 80097da:	3710      	adds	r7, #16
 80097dc:	46bd      	mov	sp, r7
 80097de:	bd80      	pop	{r7, pc}

080097e0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80097e0:	b580      	push	{r7, lr}
 80097e2:	b084      	sub	sp, #16
 80097e4:	af00      	add	r7, sp, #0
 80097e6:	6078      	str	r0, [r7, #4]
 80097e8:	460b      	mov	r3, r1
 80097ea:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80097ec:	2300      	movs	r3, #0
 80097ee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80097f0:	2300      	movs	r3, #0
 80097f2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80097fa:	78fa      	ldrb	r2, [r7, #3]
 80097fc:	4611      	mov	r1, r2
 80097fe:	4618      	mov	r0, r3
 8009800:	f7f8 fd4c 	bl	800229c <HAL_PCD_EP_SetStall>
 8009804:	4603      	mov	r3, r0
 8009806:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009808:	7bfb      	ldrb	r3, [r7, #15]
 800980a:	4618      	mov	r0, r3
 800980c:	f000 f91c 	bl	8009a48 <USBD_Get_USB_Status>
 8009810:	4603      	mov	r3, r0
 8009812:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009814:	7bbb      	ldrb	r3, [r7, #14]
}
 8009816:	4618      	mov	r0, r3
 8009818:	3710      	adds	r7, #16
 800981a:	46bd      	mov	sp, r7
 800981c:	bd80      	pop	{r7, pc}

0800981e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800981e:	b580      	push	{r7, lr}
 8009820:	b084      	sub	sp, #16
 8009822:	af00      	add	r7, sp, #0
 8009824:	6078      	str	r0, [r7, #4]
 8009826:	460b      	mov	r3, r1
 8009828:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800982a:	2300      	movs	r3, #0
 800982c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800982e:	2300      	movs	r3, #0
 8009830:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009838:	78fa      	ldrb	r2, [r7, #3]
 800983a:	4611      	mov	r1, r2
 800983c:	4618      	mov	r0, r3
 800983e:	f7f8 fd8d 	bl	800235c <HAL_PCD_EP_ClrStall>
 8009842:	4603      	mov	r3, r0
 8009844:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009846:	7bfb      	ldrb	r3, [r7, #15]
 8009848:	4618      	mov	r0, r3
 800984a:	f000 f8fd 	bl	8009a48 <USBD_Get_USB_Status>
 800984e:	4603      	mov	r3, r0
 8009850:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009852:	7bbb      	ldrb	r3, [r7, #14]
}
 8009854:	4618      	mov	r0, r3
 8009856:	3710      	adds	r7, #16
 8009858:	46bd      	mov	sp, r7
 800985a:	bd80      	pop	{r7, pc}

0800985c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800985c:	b480      	push	{r7}
 800985e:	b085      	sub	sp, #20
 8009860:	af00      	add	r7, sp, #0
 8009862:	6078      	str	r0, [r7, #4]
 8009864:	460b      	mov	r3, r1
 8009866:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800986e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009870:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009874:	2b00      	cmp	r3, #0
 8009876:	da0c      	bge.n	8009892 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009878:	78fb      	ldrb	r3, [r7, #3]
 800987a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800987e:	68f9      	ldr	r1, [r7, #12]
 8009880:	1c5a      	adds	r2, r3, #1
 8009882:	4613      	mov	r3, r2
 8009884:	009b      	lsls	r3, r3, #2
 8009886:	4413      	add	r3, r2
 8009888:	00db      	lsls	r3, r3, #3
 800988a:	440b      	add	r3, r1
 800988c:	3302      	adds	r3, #2
 800988e:	781b      	ldrb	r3, [r3, #0]
 8009890:	e00b      	b.n	80098aa <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009892:	78fb      	ldrb	r3, [r7, #3]
 8009894:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009898:	68f9      	ldr	r1, [r7, #12]
 800989a:	4613      	mov	r3, r2
 800989c:	009b      	lsls	r3, r3, #2
 800989e:	4413      	add	r3, r2
 80098a0:	00db      	lsls	r3, r3, #3
 80098a2:	440b      	add	r3, r1
 80098a4:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 80098a8:	781b      	ldrb	r3, [r3, #0]
  }
}
 80098aa:	4618      	mov	r0, r3
 80098ac:	3714      	adds	r7, #20
 80098ae:	46bd      	mov	sp, r7
 80098b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b4:	4770      	bx	lr

080098b6 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80098b6:	b580      	push	{r7, lr}
 80098b8:	b084      	sub	sp, #16
 80098ba:	af00      	add	r7, sp, #0
 80098bc:	6078      	str	r0, [r7, #4]
 80098be:	460b      	mov	r3, r1
 80098c0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80098c2:	2300      	movs	r3, #0
 80098c4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80098c6:	2300      	movs	r3, #0
 80098c8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80098d0:	78fa      	ldrb	r2, [r7, #3]
 80098d2:	4611      	mov	r1, r2
 80098d4:	4618      	mov	r0, r3
 80098d6:	f7f8 fb76 	bl	8001fc6 <HAL_PCD_SetAddress>
 80098da:	4603      	mov	r3, r0
 80098dc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80098de:	7bfb      	ldrb	r3, [r7, #15]
 80098e0:	4618      	mov	r0, r3
 80098e2:	f000 f8b1 	bl	8009a48 <USBD_Get_USB_Status>
 80098e6:	4603      	mov	r3, r0
 80098e8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80098ea:	7bbb      	ldrb	r3, [r7, #14]
}
 80098ec:	4618      	mov	r0, r3
 80098ee:	3710      	adds	r7, #16
 80098f0:	46bd      	mov	sp, r7
 80098f2:	bd80      	pop	{r7, pc}

080098f4 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80098f4:	b580      	push	{r7, lr}
 80098f6:	b086      	sub	sp, #24
 80098f8:	af00      	add	r7, sp, #0
 80098fa:	60f8      	str	r0, [r7, #12]
 80098fc:	607a      	str	r2, [r7, #4]
 80098fe:	603b      	str	r3, [r7, #0]
 8009900:	460b      	mov	r3, r1
 8009902:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009904:	2300      	movs	r3, #0
 8009906:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009908:	2300      	movs	r3, #0
 800990a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009912:	7af9      	ldrb	r1, [r7, #11]
 8009914:	683b      	ldr	r3, [r7, #0]
 8009916:	687a      	ldr	r2, [r7, #4]
 8009918:	f7f8 fc7d 	bl	8002216 <HAL_PCD_EP_Transmit>
 800991c:	4603      	mov	r3, r0
 800991e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009920:	7dfb      	ldrb	r3, [r7, #23]
 8009922:	4618      	mov	r0, r3
 8009924:	f000 f890 	bl	8009a48 <USBD_Get_USB_Status>
 8009928:	4603      	mov	r3, r0
 800992a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800992c:	7dbb      	ldrb	r3, [r7, #22]
}
 800992e:	4618      	mov	r0, r3
 8009930:	3718      	adds	r7, #24
 8009932:	46bd      	mov	sp, r7
 8009934:	bd80      	pop	{r7, pc}

08009936 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009936:	b580      	push	{r7, lr}
 8009938:	b086      	sub	sp, #24
 800993a:	af00      	add	r7, sp, #0
 800993c:	60f8      	str	r0, [r7, #12]
 800993e:	607a      	str	r2, [r7, #4]
 8009940:	603b      	str	r3, [r7, #0]
 8009942:	460b      	mov	r3, r1
 8009944:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009946:	2300      	movs	r3, #0
 8009948:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800994a:	2300      	movs	r3, #0
 800994c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009954:	7af9      	ldrb	r1, [r7, #11]
 8009956:	683b      	ldr	r3, [r7, #0]
 8009958:	687a      	ldr	r2, [r7, #4]
 800995a:	f7f8 fc07 	bl	800216c <HAL_PCD_EP_Receive>
 800995e:	4603      	mov	r3, r0
 8009960:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009962:	7dfb      	ldrb	r3, [r7, #23]
 8009964:	4618      	mov	r0, r3
 8009966:	f000 f86f 	bl	8009a48 <USBD_Get_USB_Status>
 800996a:	4603      	mov	r3, r0
 800996c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800996e:	7dbb      	ldrb	r3, [r7, #22]
}
 8009970:	4618      	mov	r0, r3
 8009972:	3718      	adds	r7, #24
 8009974:	46bd      	mov	sp, r7
 8009976:	bd80      	pop	{r7, pc}

08009978 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009978:	b580      	push	{r7, lr}
 800997a:	b082      	sub	sp, #8
 800997c:	af00      	add	r7, sp, #0
 800997e:	6078      	str	r0, [r7, #4]
 8009980:	460b      	mov	r3, r1
 8009982:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800998a:	78fa      	ldrb	r2, [r7, #3]
 800998c:	4611      	mov	r1, r2
 800998e:	4618      	mov	r0, r3
 8009990:	f7f8 fc29 	bl	80021e6 <HAL_PCD_EP_GetRxCount>
 8009994:	4603      	mov	r3, r0
}
 8009996:	4618      	mov	r0, r3
 8009998:	3708      	adds	r7, #8
 800999a:	46bd      	mov	sp, r7
 800999c:	bd80      	pop	{r7, pc}
	...

080099a0 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80099a0:	b580      	push	{r7, lr}
 80099a2:	b082      	sub	sp, #8
 80099a4:	af00      	add	r7, sp, #0
 80099a6:	6078      	str	r0, [r7, #4]
 80099a8:	460b      	mov	r3, r1
 80099aa:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 80099ac:	78fb      	ldrb	r3, [r7, #3]
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d002      	beq.n	80099b8 <HAL_PCDEx_LPM_Callback+0x18>
 80099b2:	2b01      	cmp	r3, #1
 80099b4:	d013      	beq.n	80099de <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 80099b6:	e023      	b.n	8009a00 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	699b      	ldr	r3, [r3, #24]
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d007      	beq.n	80099d0 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 80099c0:	f000 f83c 	bl	8009a3c <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80099c4:	4b10      	ldr	r3, [pc, #64]	; (8009a08 <HAL_PCDEx_LPM_Callback+0x68>)
 80099c6:	691b      	ldr	r3, [r3, #16]
 80099c8:	4a0f      	ldr	r2, [pc, #60]	; (8009a08 <HAL_PCDEx_LPM_Callback+0x68>)
 80099ca:	f023 0306 	bic.w	r3, r3, #6
 80099ce:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 80099d6:	4618      	mov	r0, r3
 80099d8:	f7fe fcce 	bl	8008378 <USBD_LL_Resume>
    break;
 80099dc:	e010      	b.n	8009a00 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 80099e4:	4618      	mov	r0, r3
 80099e6:	f7fe fcb2 	bl	800834e <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	699b      	ldr	r3, [r3, #24]
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d005      	beq.n	80099fe <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80099f2:	4b05      	ldr	r3, [pc, #20]	; (8009a08 <HAL_PCDEx_LPM_Callback+0x68>)
 80099f4:	691b      	ldr	r3, [r3, #16]
 80099f6:	4a04      	ldr	r2, [pc, #16]	; (8009a08 <HAL_PCDEx_LPM_Callback+0x68>)
 80099f8:	f043 0306 	orr.w	r3, r3, #6
 80099fc:	6113      	str	r3, [r2, #16]
    break;
 80099fe:	bf00      	nop
}
 8009a00:	bf00      	nop
 8009a02:	3708      	adds	r7, #8
 8009a04:	46bd      	mov	sp, r7
 8009a06:	bd80      	pop	{r7, pc}
 8009a08:	e000ed00 	.word	0xe000ed00

08009a0c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009a0c:	b480      	push	{r7}
 8009a0e:	b083      	sub	sp, #12
 8009a10:	af00      	add	r7, sp, #0
 8009a12:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009a14:	4b03      	ldr	r3, [pc, #12]	; (8009a24 <USBD_static_malloc+0x18>)
}
 8009a16:	4618      	mov	r0, r3
 8009a18:	370c      	adds	r7, #12
 8009a1a:	46bd      	mov	sp, r7
 8009a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a20:	4770      	bx	lr
 8009a22:	bf00      	nop
 8009a24:	20000204 	.word	0x20000204

08009a28 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009a28:	b480      	push	{r7}
 8009a2a:	b083      	sub	sp, #12
 8009a2c:	af00      	add	r7, sp, #0
 8009a2e:	6078      	str	r0, [r7, #4]

}
 8009a30:	bf00      	nop
 8009a32:	370c      	adds	r7, #12
 8009a34:	46bd      	mov	sp, r7
 8009a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a3a:	4770      	bx	lr

08009a3c <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8009a3c:	b580      	push	{r7, lr}
 8009a3e:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8009a40:	f7f6 fcd6 	bl	80003f0 <SystemClock_Config>
}
 8009a44:	bf00      	nop
 8009a46:	bd80      	pop	{r7, pc}

08009a48 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009a48:	b480      	push	{r7}
 8009a4a:	b085      	sub	sp, #20
 8009a4c:	af00      	add	r7, sp, #0
 8009a4e:	4603      	mov	r3, r0
 8009a50:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a52:	2300      	movs	r3, #0
 8009a54:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009a56:	79fb      	ldrb	r3, [r7, #7]
 8009a58:	2b03      	cmp	r3, #3
 8009a5a:	d817      	bhi.n	8009a8c <USBD_Get_USB_Status+0x44>
 8009a5c:	a201      	add	r2, pc, #4	; (adr r2, 8009a64 <USBD_Get_USB_Status+0x1c>)
 8009a5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a62:	bf00      	nop
 8009a64:	08009a75 	.word	0x08009a75
 8009a68:	08009a7b 	.word	0x08009a7b
 8009a6c:	08009a81 	.word	0x08009a81
 8009a70:	08009a87 	.word	0x08009a87
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009a74:	2300      	movs	r3, #0
 8009a76:	73fb      	strb	r3, [r7, #15]
    break;
 8009a78:	e00b      	b.n	8009a92 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009a7a:	2303      	movs	r3, #3
 8009a7c:	73fb      	strb	r3, [r7, #15]
    break;
 8009a7e:	e008      	b.n	8009a92 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009a80:	2301      	movs	r3, #1
 8009a82:	73fb      	strb	r3, [r7, #15]
    break;
 8009a84:	e005      	b.n	8009a92 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009a86:	2303      	movs	r3, #3
 8009a88:	73fb      	strb	r3, [r7, #15]
    break;
 8009a8a:	e002      	b.n	8009a92 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009a8c:	2303      	movs	r3, #3
 8009a8e:	73fb      	strb	r3, [r7, #15]
    break;
 8009a90:	bf00      	nop
  }
  return usb_status;
 8009a92:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a94:	4618      	mov	r0, r3
 8009a96:	3714      	adds	r7, #20
 8009a98:	46bd      	mov	sp, r7
 8009a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a9e:	4770      	bx	lr

08009aa0 <__libc_init_array>:
 8009aa0:	b570      	push	{r4, r5, r6, lr}
 8009aa2:	4e0d      	ldr	r6, [pc, #52]	; (8009ad8 <__libc_init_array+0x38>)
 8009aa4:	4c0d      	ldr	r4, [pc, #52]	; (8009adc <__libc_init_array+0x3c>)
 8009aa6:	1ba4      	subs	r4, r4, r6
 8009aa8:	10a4      	asrs	r4, r4, #2
 8009aaa:	2500      	movs	r5, #0
 8009aac:	42a5      	cmp	r5, r4
 8009aae:	d109      	bne.n	8009ac4 <__libc_init_array+0x24>
 8009ab0:	4e0b      	ldr	r6, [pc, #44]	; (8009ae0 <__libc_init_array+0x40>)
 8009ab2:	4c0c      	ldr	r4, [pc, #48]	; (8009ae4 <__libc_init_array+0x44>)
 8009ab4:	f000 f82c 	bl	8009b10 <_init>
 8009ab8:	1ba4      	subs	r4, r4, r6
 8009aba:	10a4      	asrs	r4, r4, #2
 8009abc:	2500      	movs	r5, #0
 8009abe:	42a5      	cmp	r5, r4
 8009ac0:	d105      	bne.n	8009ace <__libc_init_array+0x2e>
 8009ac2:	bd70      	pop	{r4, r5, r6, pc}
 8009ac4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009ac8:	4798      	blx	r3
 8009aca:	3501      	adds	r5, #1
 8009acc:	e7ee      	b.n	8009aac <__libc_init_array+0xc>
 8009ace:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009ad2:	4798      	blx	r3
 8009ad4:	3501      	adds	r5, #1
 8009ad6:	e7f2      	b.n	8009abe <__libc_init_array+0x1e>
 8009ad8:	08009b80 	.word	0x08009b80
 8009adc:	08009b80 	.word	0x08009b80
 8009ae0:	08009b80 	.word	0x08009b80
 8009ae4:	08009b84 	.word	0x08009b84

08009ae8 <memcpy>:
 8009ae8:	b510      	push	{r4, lr}
 8009aea:	1e43      	subs	r3, r0, #1
 8009aec:	440a      	add	r2, r1
 8009aee:	4291      	cmp	r1, r2
 8009af0:	d100      	bne.n	8009af4 <memcpy+0xc>
 8009af2:	bd10      	pop	{r4, pc}
 8009af4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009af8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009afc:	e7f7      	b.n	8009aee <memcpy+0x6>

08009afe <memset>:
 8009afe:	4402      	add	r2, r0
 8009b00:	4603      	mov	r3, r0
 8009b02:	4293      	cmp	r3, r2
 8009b04:	d100      	bne.n	8009b08 <memset+0xa>
 8009b06:	4770      	bx	lr
 8009b08:	f803 1b01 	strb.w	r1, [r3], #1
 8009b0c:	e7f9      	b.n	8009b02 <memset+0x4>
	...

08009b10 <_init>:
 8009b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b12:	bf00      	nop
 8009b14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b16:	bc08      	pop	{r3}
 8009b18:	469e      	mov	lr, r3
 8009b1a:	4770      	bx	lr

08009b1c <_fini>:
 8009b1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b1e:	bf00      	nop
 8009b20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b22:	bc08      	pop	{r3}
 8009b24:	469e      	mov	lr, r3
 8009b26:	4770      	bx	lr
