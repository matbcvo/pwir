
pwir.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009910  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08009ae8  08009ae8  00019ae8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009b40  08009b40  000201c0  2**0
                  CONTENTS
  4 .ARM          00000000  08009b40  08009b40  000201c0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009b40  08009b40  000201c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009b40  08009b40  00019b40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009b44  08009b44  00019b44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001c0  20000000  08009b48  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001490  200001c0  08009d08  000201c0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001650  08009d08  00021650  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201c0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ad8c  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003476  00000000  00000000  0003af7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001398  00000000  00000000  0003e3f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001220  00000000  00000000  0003f790  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000205b2  00000000  00000000  000409b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00011bd3  00000000  00000000  00060f62  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c42ad  00000000  00000000  00072b35  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00136de2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000051a4  00000000  00000000  00136e60  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	200001c0 	.word	0x200001c0
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08009ad0 	.word	0x08009ad0

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	200001c4 	.word	0x200001c4
 8000214:	08009ad0 	.word	0x08009ad0

08000218 <CDC_On_Receive>:
  .delimiter = 0
}; // (4) Instance of received data.

volatile uint8_t isCommandReceived = 0; // (5) Boolean (0/1) variable to signify that data has been received. Variable is marked volatile to prevent the compiler from removing it during optimisation.

void CDC_On_Receive(uint8_t* buffer, uint32_t* length) { // (6) Define the function that is called when data is received. It is usually preferable to keep interrupt handlers small and fast to avoid blocking other code from executing. Only data copying and setting isCommandReceived to 1 is done in the handler. Rest is handled in the main while loop.
 8000218:	b580      	push	{r7, lr}
 800021a:	b082      	sub	sp, #8
 800021c:	af00      	add	r7, sp, #0
 800021e:	6078      	str	r0, [r7, #4]
 8000220:	6039      	str	r1, [r7, #0]
  //HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
  if (*length == sizeof(Command)) { // (7) Check if received data the has same length as Command struct.
 8000222:	683b      	ldr	r3, [r7, #0]
 8000224:	681b      	ldr	r3, [r3, #0]
 8000226:	2b0c      	cmp	r3, #12
 8000228:	d10d      	bne.n	8000246 <CDC_On_Receive+0x2e>
    memcpy(&command, buffer, sizeof(Command)); // (8) Copy received data to command instance.
 800022a:	220c      	movs	r2, #12
 800022c:	6879      	ldr	r1, [r7, #4]
 800022e:	4808      	ldr	r0, [pc, #32]	; (8000250 <CDC_On_Receive+0x38>)
 8000230:	f009 fc3a 	bl	8009aa8 <memcpy>

    if (command.delimiter == 0xAAAA) { // (9) Check the delimiter as a validation of received data.
 8000234:	4b06      	ldr	r3, [pc, #24]	; (8000250 <CDC_On_Receive+0x38>)
 8000236:	895b      	ldrh	r3, [r3, #10]
 8000238:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800023c:	4293      	cmp	r3, r2
 800023e:	d102      	bne.n	8000246 <CDC_On_Receive+0x2e>
      isCommandReceived = 1;
 8000240:	4b04      	ldr	r3, [pc, #16]	; (8000254 <CDC_On_Receive+0x3c>)
 8000242:	2201      	movs	r2, #1
 8000244:	701a      	strb	r2, [r3, #0]
    }
  }
}
 8000246:	bf00      	nop
 8000248:	3708      	adds	r7, #8
 800024a:	46bd      	mov	sp, r7
 800024c:	bd80      	pop	{r7, pc}
 800024e:	bf00      	nop
 8000250:	200001dc 	.word	0x200001dc
 8000254:	200001e8 	.word	0x200001e8

08000258 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000258:	b580      	push	{r7, lr}
 800025a:	b082      	sub	sp, #8
 800025c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  // (1) Define an instance of Feedback for sending data.
  Feedback feedback = {
 800025e:	2300      	movs	r3, #0
 8000260:	803b      	strh	r3, [r7, #0]
 8000262:	2300      	movs	r3, #0
 8000264:	807b      	strh	r3, [r7, #2]
 8000266:	2300      	movs	r3, #0
 8000268:	80bb      	strh	r3, [r7, #4]
 800026a:	f64a 23aa 	movw	r3, #43690	; 0xaaaa
 800026e:	80fb      	strh	r3, [r7, #6]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000270:	f001 f8ff 	bl	8001472 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000274:	f000 f8a0 	bl	80003b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000278:	f000 fce6 	bl	8000c48 <MX_GPIO_Init>
  MX_TIM1_Init();
 800027c:	f000 f904 	bl	8000488 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000280:	f000 f972 	bl	8000568 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000284:	f000 f9f0 	bl	8000668 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000288:	f000 fa44 	bl	8000714 <MX_TIM4_Init>
  MX_TIM8_Init();
 800028c:	f000 face 	bl	800082c <MX_TIM8_Init>
  MX_TIM16_Init();
 8000290:	f000 fbe6 	bl	8000a60 <MX_TIM16_Init>
  MX_TIM17_Init();
 8000294:	f000 fc5e 	bl	8000b54 <MX_TIM17_Init>
  MX_USB_Device_Init();
 8000298:	f008 feea 	bl	8009070 <MX_USB_Device_Init>
  MX_TIM15_Init();
 800029c:	f000 fb5a 	bl	8000954 <MX_TIM15_Init>
  MX_TIM6_Init();
 80002a0:	f000 fa8e 	bl	80007c0 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_1 | TIM_CHANNEL_2); // Encoder 1
 80002a4:	2104      	movs	r1, #4
 80002a6:	4833      	ldr	r0, [pc, #204]	; (8000374 <main+0x11c>)
 80002a8:	f004 f9e0 	bl	800466c <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_1 | TIM_CHANNEL_2); // Encoder 2
 80002ac:	2104      	movs	r1, #4
 80002ae:	4832      	ldr	r0, [pc, #200]	; (8000378 <main+0x120>)
 80002b0:	f004 f9dc 	bl	800466c <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_1 | TIM_CHANNEL_2); // Encoder 3
 80002b4:	2104      	movs	r1, #4
 80002b6:	4831      	ldr	r0, [pc, #196]	; (800037c <main+0x124>)
 80002b8:	f004 f9d8 	bl	800466c <HAL_TIM_Encoder_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1); // Motor PWM for draiver 1
 80002bc:	2100      	movs	r1, #0
 80002be:	4830      	ldr	r0, [pc, #192]	; (8000380 <main+0x128>)
 80002c0:	f004 f82e 	bl	8004320 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2); // Motor PWM for draiver 1
 80002c4:	2104      	movs	r1, #4
 80002c6:	482e      	ldr	r0, [pc, #184]	; (8000380 <main+0x128>)
 80002c8:	f004 f82a 	bl	8004320 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3); // Motor PWM for draiver 2
 80002cc:	2108      	movs	r1, #8
 80002ce:	482c      	ldr	r0, [pc, #176]	; (8000380 <main+0x128>)
 80002d0:	f004 f826 	bl	8004320 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4); // Motor PWM for draiver 2
 80002d4:	210c      	movs	r1, #12
 80002d6:	482a      	ldr	r0, [pc, #168]	; (8000380 <main+0x128>)
 80002d8:	f004 f822 	bl	8004320 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1); // Motor PWM for draiver 3
 80002dc:	2100      	movs	r1, #0
 80002de:	4829      	ldr	r0, [pc, #164]	; (8000384 <main+0x12c>)
 80002e0:	f004 f81e 	bl	8004320 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim17, TIM_CHANNEL_1); // Motor PWM for draiver 3
 80002e4:	2100      	movs	r1, #0
 80002e6:	4828      	ldr	r0, [pc, #160]	; (8000388 <main+0x130>)
 80002e8:	f004 f81a 	bl	8004320 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1); // Thrower PWM
 80002ec:	2100      	movs	r1, #0
 80002ee:	4827      	ldr	r0, [pc, #156]	; (800038c <main+0x134>)
 80002f0:	f004 f816 	bl	8004320 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_2); // Thrower Angle PWM
 80002f4:	2104      	movs	r1, #4
 80002f6:	4826      	ldr	r0, [pc, #152]	; (8000390 <main+0x138>)
 80002f8:	f004 f812 	bl	8004320 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim6);
 80002fc:	4825      	ldr	r0, [pc, #148]	; (8000394 <main+0x13c>)
 80002fe:	f003 ff4d 	bl	800419c <HAL_TIM_Base_Start_IT>
    /* USER CODE BEGIN 3 */
	  //HAL_Delay(1000);
	  // Send command: 00 00 00 00 00 00 00 00 AA AA
	  //               01
	  //               02
	if (isCommandReceived) { // (2) Only return data when something has been received.
 8000302:	4b25      	ldr	r3, [pc, #148]	; (8000398 <main+0x140>)
 8000304:	781b      	ldrb	r3, [r3, #0]
 8000306:	b2db      	uxtb	r3, r3
 8000308:	2b00      	cmp	r3, #0
 800030a:	d0fa      	beq.n	8000302 <main+0xaa>
		isCommandReceived = 0;
 800030c:	4b22      	ldr	r3, [pc, #136]	; (8000398 <main+0x140>)
 800030e:	2200      	movs	r2, #0
 8000310:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin); // (3) Toggle LED to indicate that data has been received.
 8000312:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000316:	4821      	ldr	r0, [pc, #132]	; (800039c <main+0x144>)
 8000318:	f001 fbc6 	bl	8001aa8 <HAL_GPIO_TogglePin>

		motor1.setpoint = command.speed1;
 800031c:	4b20      	ldr	r3, [pc, #128]	; (80003a0 <main+0x148>)
 800031e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000322:	b29a      	uxth	r2, r3
 8000324:	4b1f      	ldr	r3, [pc, #124]	; (80003a4 <main+0x14c>)
 8000326:	801a      	strh	r2, [r3, #0]
		motor2.setpoint = command.speed2;
 8000328:	4b1d      	ldr	r3, [pc, #116]	; (80003a0 <main+0x148>)
 800032a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800032e:	b29a      	uxth	r2, r3
 8000330:	4b1d      	ldr	r3, [pc, #116]	; (80003a8 <main+0x150>)
 8000332:	801a      	strh	r2, [r3, #0]
		motor3.setpoint = command.speed3;
 8000334:	4b1a      	ldr	r3, [pc, #104]	; (80003a0 <main+0x148>)
 8000336:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800033a:	b29a      	uxth	r2, r3
 800033c:	4b1b      	ldr	r3, [pc, #108]	; (80003ac <main+0x154>)
 800033e:	801a      	strh	r2, [r3, #0]

		// (4) Update feedback with current motor speeds.
		feedback.speed1 = motor1.speed;
 8000340:	4b18      	ldr	r3, [pc, #96]	; (80003a4 <main+0x14c>)
 8000342:	885b      	ldrh	r3, [r3, #2]
 8000344:	b21b      	sxth	r3, r3
 8000346:	803b      	strh	r3, [r7, #0]
		feedback.speed2 = motor2.speed;
 8000348:	4b17      	ldr	r3, [pc, #92]	; (80003a8 <main+0x150>)
 800034a:	885b      	ldrh	r3, [r3, #2]
 800034c:	b21b      	sxth	r3, r3
 800034e:	807b      	strh	r3, [r7, #2]
		feedback.speed3 = motor3.speed;
 8000350:	4b16      	ldr	r3, [pc, #88]	; (80003ac <main+0x154>)
 8000352:	885b      	ldrh	r3, [r3, #2]
 8000354:	b21b      	sxth	r3, r3
 8000356:	80bb      	strh	r3, [r7, #4]
			TIM2->CCR2 = 0; // esimene draiver
		}*/

		// Start thrower ESC at lower than 3200
		// Then set speed to 3200 ... 6400
		TIM8->CCR1 = command.throwerSpeed; // thrower
 8000358:	4b11      	ldr	r3, [pc, #68]	; (80003a0 <main+0x148>)
 800035a:	88da      	ldrh	r2, [r3, #6]
 800035c:	4b14      	ldr	r3, [pc, #80]	; (80003b0 <main+0x158>)
 800035e:	635a      	str	r2, [r3, #52]	; 0x34

		TIM15->CCR2 = command.throwerAngle; // thrower angle
 8000360:	4b0f      	ldr	r3, [pc, #60]	; (80003a0 <main+0x148>)
 8000362:	891a      	ldrh	r2, [r3, #8]
 8000364:	4b13      	ldr	r3, [pc, #76]	; (80003b4 <main+0x15c>)
 8000366:	639a      	str	r2, [r3, #56]	; 0x38

		CDC_Transmit_FS(&feedback, sizeof(feedback)); // (5) Send data over USB.
 8000368:	463b      	mov	r3, r7
 800036a:	2108      	movs	r1, #8
 800036c:	4618      	mov	r0, r3
 800036e:	f008 ff41 	bl	80091f4 <CDC_Transmit_FS>
	if (isCommandReceived) { // (2) Only return data when something has been received.
 8000372:	e7c6      	b.n	8000302 <main+0xaa>
 8000374:	200005d4 	.word	0x200005d4
 8000378:	2000053c 	.word	0x2000053c
 800037c:	20000458 	.word	0x20000458
 8000380:	20000620 	.word	0x20000620
 8000384:	2000066c 	.word	0x2000066c
 8000388:	200004f0 	.word	0x200004f0
 800038c:	2000040c 	.word	0x2000040c
 8000390:	200004a4 	.word	0x200004a4
 8000394:	20000588 	.word	0x20000588
 8000398:	200001e8 	.word	0x200001e8
 800039c:	48000400 	.word	0x48000400
 80003a0:	200001dc 	.word	0x200001dc
 80003a4:	20000000 	.word	0x20000000
 80003a8:	20000014 	.word	0x20000014
 80003ac:	20000028 	.word	0x20000028
 80003b0:	40013400 	.word	0x40013400
 80003b4:	40014000 	.word	0x40014000

080003b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003b8:	b580      	push	{r7, lr}
 80003ba:	b0a4      	sub	sp, #144	; 0x90
 80003bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003be:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80003c2:	2238      	movs	r2, #56	; 0x38
 80003c4:	2100      	movs	r1, #0
 80003c6:	4618      	mov	r0, r3
 80003c8:	f009 fb79 	bl	8009abe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003cc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80003d0:	2200      	movs	r2, #0
 80003d2:	601a      	str	r2, [r3, #0]
 80003d4:	605a      	str	r2, [r3, #4]
 80003d6:	609a      	str	r2, [r3, #8]
 80003d8:	60da      	str	r2, [r3, #12]
 80003da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80003dc:	463b      	mov	r3, r7
 80003de:	2244      	movs	r2, #68	; 0x44
 80003e0:	2100      	movs	r1, #0
 80003e2:	4618      	mov	r0, r3
 80003e4:	f009 fb6b 	bl	8009abe <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80003e8:	2000      	movs	r0, #0
 80003ea:	f002 fedf 	bl	80031ac <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 80003ee:	2322      	movs	r3, #34	; 0x22
 80003f0:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80003f6:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003f8:	2340      	movs	r3, #64	; 0x40
 80003fa:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80003fc:	2301      	movs	r3, #1
 80003fe:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000400:	2302      	movs	r3, #2
 8000402:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000404:	2302      	movs	r3, #2
 8000406:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000408:	2301      	movs	r3, #1
 800040a:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 20;
 800040c:	2314      	movs	r3, #20
 800040e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000412:	2302      	movs	r3, #2
 8000414:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 8000418:	2304      	movs	r3, #4
 800041a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800041e:	2302      	movs	r3, #2
 8000420:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000424:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000428:	4618      	mov	r0, r3
 800042a:	f002 ff73 	bl	8003314 <HAL_RCC_OscConfig>
 800042e:	4603      	mov	r3, r0
 8000430:	2b00      	cmp	r3, #0
 8000432:	d001      	beq.n	8000438 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000434:	f000 fd5a 	bl	8000eec <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000438:	230f      	movs	r3, #15
 800043a:	647b      	str	r3, [r7, #68]	; 0x44
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800043c:	2303      	movs	r3, #3
 800043e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000440:	2300      	movs	r3, #0
 8000442:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000444:	2300      	movs	r3, #0
 8000446:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000448:	2300      	movs	r3, #0
 800044a:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800044c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000450:	2104      	movs	r1, #4
 8000452:	4618      	mov	r0, r3
 8000454:	f003 fa76 	bl	8003944 <HAL_RCC_ClockConfig>
 8000458:	4603      	mov	r3, r0
 800045a:	2b00      	cmp	r3, #0
 800045c:	d001      	beq.n	8000462 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800045e:	f000 fd45 	bl	8000eec <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000462:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000466:	603b      	str	r3, [r7, #0]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8000468:	2300      	movs	r3, #0
 800046a:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800046c:	463b      	mov	r3, r7
 800046e:	4618      	mov	r0, r3
 8000470:	f003 fc4c 	bl	8003d0c <HAL_RCCEx_PeriphCLKConfig>
 8000474:	4603      	mov	r3, r0
 8000476:	2b00      	cmp	r3, #0
 8000478:	d001      	beq.n	800047e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800047a:	f000 fd37 	bl	8000eec <Error_Handler>
  }
}
 800047e:	bf00      	nop
 8000480:	3790      	adds	r7, #144	; 0x90
 8000482:	46bd      	mov	sp, r7
 8000484:	bd80      	pop	{r7, pc}
	...

08000488 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000488:	b580      	push	{r7, lr}
 800048a:	b09a      	sub	sp, #104	; 0x68
 800048c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800048e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000492:	2224      	movs	r2, #36	; 0x24
 8000494:	2100      	movs	r1, #0
 8000496:	4618      	mov	r0, r3
 8000498:	f009 fb11 	bl	8009abe <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800049c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80004a0:	2200      	movs	r2, #0
 80004a2:	601a      	str	r2, [r3, #0]
 80004a4:	605a      	str	r2, [r3, #4]
 80004a6:	609a      	str	r2, [r3, #8]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80004a8:	1d3b      	adds	r3, r7, #4
 80004aa:	2234      	movs	r2, #52	; 0x34
 80004ac:	2100      	movs	r1, #0
 80004ae:	4618      	mov	r0, r3
 80004b0:	f009 fb05 	bl	8009abe <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80004b4:	4b2a      	ldr	r3, [pc, #168]	; (8000560 <MX_TIM1_Init+0xd8>)
 80004b6:	4a2b      	ldr	r2, [pc, #172]	; (8000564 <MX_TIM1_Init+0xdc>)
 80004b8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80004ba:	4b29      	ldr	r3, [pc, #164]	; (8000560 <MX_TIM1_Init+0xd8>)
 80004bc:	2200      	movs	r2, #0
 80004be:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004c0:	4b27      	ldr	r3, [pc, #156]	; (8000560 <MX_TIM1_Init+0xd8>)
 80004c2:	2200      	movs	r2, #0
 80004c4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80004c6:	4b26      	ldr	r3, [pc, #152]	; (8000560 <MX_TIM1_Init+0xd8>)
 80004c8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80004cc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004ce:	4b24      	ldr	r3, [pc, #144]	; (8000560 <MX_TIM1_Init+0xd8>)
 80004d0:	2200      	movs	r2, #0
 80004d2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80004d4:	4b22      	ldr	r3, [pc, #136]	; (8000560 <MX_TIM1_Init+0xd8>)
 80004d6:	2200      	movs	r2, #0
 80004d8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80004da:	4b21      	ldr	r3, [pc, #132]	; (8000560 <MX_TIM1_Init+0xd8>)
 80004dc:	2200      	movs	r2, #0
 80004de:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80004e0:	2301      	movs	r3, #1
 80004e2:	647b      	str	r3, [r7, #68]	; 0x44
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80004e4:	2300      	movs	r3, #0
 80004e6:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80004e8:	2301      	movs	r3, #1
 80004ea:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80004ec:	2300      	movs	r3, #0
 80004ee:	653b      	str	r3, [r7, #80]	; 0x50
  sConfig.IC1Filter = 0;
 80004f0:	2300      	movs	r3, #0
 80004f2:	657b      	str	r3, [r7, #84]	; 0x54
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80004f4:	2300      	movs	r3, #0
 80004f6:	65bb      	str	r3, [r7, #88]	; 0x58
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80004f8:	2301      	movs	r3, #1
 80004fa:	65fb      	str	r3, [r7, #92]	; 0x5c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80004fc:	2300      	movs	r3, #0
 80004fe:	663b      	str	r3, [r7, #96]	; 0x60
  sConfig.IC2Filter = 0;
 8000500:	2300      	movs	r3, #0
 8000502:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8000504:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000508:	4619      	mov	r1, r3
 800050a:	4815      	ldr	r0, [pc, #84]	; (8000560 <MX_TIM1_Init+0xd8>)
 800050c:	f004 f808 	bl	8004520 <HAL_TIM_Encoder_Init>
 8000510:	4603      	mov	r3, r0
 8000512:	2b00      	cmp	r3, #0
 8000514:	d001      	beq.n	800051a <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8000516:	f000 fce9 	bl	8000eec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800051a:	2300      	movs	r3, #0
 800051c:	63bb      	str	r3, [r7, #56]	; 0x38
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800051e:	2300      	movs	r3, #0
 8000520:	63fb      	str	r3, [r7, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000522:	2300      	movs	r3, #0
 8000524:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000526:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800052a:	4619      	mov	r1, r3
 800052c:	480c      	ldr	r0, [pc, #48]	; (8000560 <MX_TIM1_Init+0xd8>)
 800052e:	f004 ff8d 	bl	800544c <HAL_TIMEx_MasterConfigSynchronization>
 8000532:	4603      	mov	r3, r0
 8000534:	2b00      	cmp	r3, #0
 8000536:	d001      	beq.n	800053c <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 8000538:	f000 fcd8 	bl	8000eec <Error_Handler>
  }
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800053c:	2300      	movs	r3, #0
 800053e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000540:	2300      	movs	r3, #0
 8000542:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000544:	1d3b      	adds	r3, r7, #4
 8000546:	4619      	mov	r1, r3
 8000548:	4805      	ldr	r0, [pc, #20]	; (8000560 <MX_TIM1_Init+0xd8>)
 800054a:	f005 f801 	bl	8005550 <HAL_TIMEx_ConfigBreakDeadTime>
 800054e:	4603      	mov	r3, r0
 8000550:	2b00      	cmp	r3, #0
 8000552:	d001      	beq.n	8000558 <MX_TIM1_Init+0xd0>
  {
    Error_Handler();
 8000554:	f000 fcca 	bl	8000eec <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000558:	bf00      	nop
 800055a:	3768      	adds	r7, #104	; 0x68
 800055c:	46bd      	mov	sp, r7
 800055e:	bd80      	pop	{r7, pc}
 8000560:	200005d4 	.word	0x200005d4
 8000564:	40012c00 	.word	0x40012c00

08000568 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b08a      	sub	sp, #40	; 0x28
 800056c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800056e:	f107 031c 	add.w	r3, r7, #28
 8000572:	2200      	movs	r2, #0
 8000574:	601a      	str	r2, [r3, #0]
 8000576:	605a      	str	r2, [r3, #4]
 8000578:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800057a:	463b      	mov	r3, r7
 800057c:	2200      	movs	r2, #0
 800057e:	601a      	str	r2, [r3, #0]
 8000580:	605a      	str	r2, [r3, #4]
 8000582:	609a      	str	r2, [r3, #8]
 8000584:	60da      	str	r2, [r3, #12]
 8000586:	611a      	str	r2, [r3, #16]
 8000588:	615a      	str	r2, [r3, #20]
 800058a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800058c:	4b35      	ldr	r3, [pc, #212]	; (8000664 <MX_TIM2_Init+0xfc>)
 800058e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000592:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 50 - 1;
 8000594:	4b33      	ldr	r3, [pc, #204]	; (8000664 <MX_TIM2_Init+0xfc>)
 8000596:	2231      	movs	r2, #49	; 0x31
 8000598:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800059a:	4b32      	ldr	r3, [pc, #200]	; (8000664 <MX_TIM2_Init+0xfc>)
 800059c:	2200      	movs	r2, #0
 800059e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 63999;
 80005a0:	4b30      	ldr	r3, [pc, #192]	; (8000664 <MX_TIM2_Init+0xfc>)
 80005a2:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 80005a6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005a8:	4b2e      	ldr	r3, [pc, #184]	; (8000664 <MX_TIM2_Init+0xfc>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005ae:	4b2d      	ldr	r3, [pc, #180]	; (8000664 <MX_TIM2_Init+0xfc>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80005b4:	482b      	ldr	r0, [pc, #172]	; (8000664 <MX_TIM2_Init+0xfc>)
 80005b6:	f003 fe5b 	bl	8004270 <HAL_TIM_PWM_Init>
 80005ba:	4603      	mov	r3, r0
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d001      	beq.n	80005c4 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 80005c0:	f000 fc94 	bl	8000eec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005c4:	2300      	movs	r3, #0
 80005c6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005c8:	2300      	movs	r3, #0
 80005ca:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80005cc:	f107 031c 	add.w	r3, r7, #28
 80005d0:	4619      	mov	r1, r3
 80005d2:	4824      	ldr	r0, [pc, #144]	; (8000664 <MX_TIM2_Init+0xfc>)
 80005d4:	f004 ff3a 	bl	800544c <HAL_TIMEx_MasterConfigSynchronization>
 80005d8:	4603      	mov	r3, r0
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d001      	beq.n	80005e2 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 80005de:	f000 fc85 	bl	8000eec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80005e2:	2360      	movs	r3, #96	; 0x60
 80005e4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80005e6:	2300      	movs	r3, #0
 80005e8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80005ea:	2300      	movs	r3, #0
 80005ec:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80005ee:	2300      	movs	r3, #0
 80005f0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80005f2:	463b      	mov	r3, r7
 80005f4:	2200      	movs	r2, #0
 80005f6:	4619      	mov	r1, r3
 80005f8:	481a      	ldr	r0, [pc, #104]	; (8000664 <MX_TIM2_Init+0xfc>)
 80005fa:	f004 fa43 	bl	8004a84 <HAL_TIM_PWM_ConfigChannel>
 80005fe:	4603      	mov	r3, r0
 8000600:	2b00      	cmp	r3, #0
 8000602:	d001      	beq.n	8000608 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8000604:	f000 fc72 	bl	8000eec <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8000608:	2300      	movs	r3, #0
 800060a:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800060c:	463b      	mov	r3, r7
 800060e:	2204      	movs	r2, #4
 8000610:	4619      	mov	r1, r3
 8000612:	4814      	ldr	r0, [pc, #80]	; (8000664 <MX_TIM2_Init+0xfc>)
 8000614:	f004 fa36 	bl	8004a84 <HAL_TIM_PWM_ConfigChannel>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d001      	beq.n	8000622 <MX_TIM2_Init+0xba>
  {
    Error_Handler();
 800061e:	f000 fc65 	bl	8000eec <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8000622:	2300      	movs	r3, #0
 8000624:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000626:	463b      	mov	r3, r7
 8000628:	2208      	movs	r2, #8
 800062a:	4619      	mov	r1, r3
 800062c:	480d      	ldr	r0, [pc, #52]	; (8000664 <MX_TIM2_Init+0xfc>)
 800062e:	f004 fa29 	bl	8004a84 <HAL_TIM_PWM_ConfigChannel>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	d001      	beq.n	800063c <MX_TIM2_Init+0xd4>
  {
    Error_Handler();
 8000638:	f000 fc58 	bl	8000eec <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 800063c:	2300      	movs	r3, #0
 800063e:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000640:	463b      	mov	r3, r7
 8000642:	220c      	movs	r2, #12
 8000644:	4619      	mov	r1, r3
 8000646:	4807      	ldr	r0, [pc, #28]	; (8000664 <MX_TIM2_Init+0xfc>)
 8000648:	f004 fa1c 	bl	8004a84 <HAL_TIM_PWM_ConfigChannel>
 800064c:	4603      	mov	r3, r0
 800064e:	2b00      	cmp	r3, #0
 8000650:	d001      	beq.n	8000656 <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8000652:	f000 fc4b 	bl	8000eec <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000656:	4803      	ldr	r0, [pc, #12]	; (8000664 <MX_TIM2_Init+0xfc>)
 8000658:	f000 fdae 	bl	80011b8 <HAL_TIM_MspPostInit>

}
 800065c:	bf00      	nop
 800065e:	3728      	adds	r7, #40	; 0x28
 8000660:	46bd      	mov	sp, r7
 8000662:	bd80      	pop	{r7, pc}
 8000664:	20000620 	.word	0x20000620

08000668 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b08c      	sub	sp, #48	; 0x30
 800066c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800066e:	f107 030c 	add.w	r3, r7, #12
 8000672:	2224      	movs	r2, #36	; 0x24
 8000674:	2100      	movs	r1, #0
 8000676:	4618      	mov	r0, r3
 8000678:	f009 fa21 	bl	8009abe <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800067c:	463b      	mov	r3, r7
 800067e:	2200      	movs	r2, #0
 8000680:	601a      	str	r2, [r3, #0]
 8000682:	605a      	str	r2, [r3, #4]
 8000684:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000686:	4b21      	ldr	r3, [pc, #132]	; (800070c <MX_TIM3_Init+0xa4>)
 8000688:	4a21      	ldr	r2, [pc, #132]	; (8000710 <MX_TIM3_Init+0xa8>)
 800068a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800068c:	4b1f      	ldr	r3, [pc, #124]	; (800070c <MX_TIM3_Init+0xa4>)
 800068e:	2200      	movs	r2, #0
 8000690:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000692:	4b1e      	ldr	r3, [pc, #120]	; (800070c <MX_TIM3_Init+0xa4>)
 8000694:	2200      	movs	r2, #0
 8000696:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000698:	4b1c      	ldr	r3, [pc, #112]	; (800070c <MX_TIM3_Init+0xa4>)
 800069a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800069e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006a0:	4b1a      	ldr	r3, [pc, #104]	; (800070c <MX_TIM3_Init+0xa4>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006a6:	4b19      	ldr	r3, [pc, #100]	; (800070c <MX_TIM3_Init+0xa4>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80006ac:	2301      	movs	r3, #1
 80006ae:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80006b0:	2300      	movs	r3, #0
 80006b2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80006b4:	2301      	movs	r3, #1
 80006b6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80006b8:	2300      	movs	r3, #0
 80006ba:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80006bc:	2300      	movs	r3, #0
 80006be:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80006c0:	2300      	movs	r3, #0
 80006c2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80006c4:	2301      	movs	r3, #1
 80006c6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80006c8:	2300      	movs	r3, #0
 80006ca:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80006cc:	2300      	movs	r3, #0
 80006ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80006d0:	f107 030c 	add.w	r3, r7, #12
 80006d4:	4619      	mov	r1, r3
 80006d6:	480d      	ldr	r0, [pc, #52]	; (800070c <MX_TIM3_Init+0xa4>)
 80006d8:	f003 ff22 	bl	8004520 <HAL_TIM_Encoder_Init>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d001      	beq.n	80006e6 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 80006e2:	f000 fc03 	bl	8000eec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006e6:	2300      	movs	r3, #0
 80006e8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006ea:	2300      	movs	r3, #0
 80006ec:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80006ee:	463b      	mov	r3, r7
 80006f0:	4619      	mov	r1, r3
 80006f2:	4806      	ldr	r0, [pc, #24]	; (800070c <MX_TIM3_Init+0xa4>)
 80006f4:	f004 feaa 	bl	800544c <HAL_TIMEx_MasterConfigSynchronization>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d001      	beq.n	8000702 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 80006fe:	f000 fbf5 	bl	8000eec <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000702:	bf00      	nop
 8000704:	3730      	adds	r7, #48	; 0x30
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	2000053c 	.word	0x2000053c
 8000710:	40000400 	.word	0x40000400

08000714 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b08c      	sub	sp, #48	; 0x30
 8000718:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800071a:	f107 030c 	add.w	r3, r7, #12
 800071e:	2224      	movs	r2, #36	; 0x24
 8000720:	2100      	movs	r1, #0
 8000722:	4618      	mov	r0, r3
 8000724:	f009 f9cb 	bl	8009abe <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000728:	463b      	mov	r3, r7
 800072a:	2200      	movs	r2, #0
 800072c:	601a      	str	r2, [r3, #0]
 800072e:	605a      	str	r2, [r3, #4]
 8000730:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000732:	4b21      	ldr	r3, [pc, #132]	; (80007b8 <MX_TIM4_Init+0xa4>)
 8000734:	4a21      	ldr	r2, [pc, #132]	; (80007bc <MX_TIM4_Init+0xa8>)
 8000736:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000738:	4b1f      	ldr	r3, [pc, #124]	; (80007b8 <MX_TIM4_Init+0xa4>)
 800073a:	2200      	movs	r2, #0
 800073c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800073e:	4b1e      	ldr	r3, [pc, #120]	; (80007b8 <MX_TIM4_Init+0xa4>)
 8000740:	2200      	movs	r2, #0
 8000742:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000744:	4b1c      	ldr	r3, [pc, #112]	; (80007b8 <MX_TIM4_Init+0xa4>)
 8000746:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800074a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800074c:	4b1a      	ldr	r3, [pc, #104]	; (80007b8 <MX_TIM4_Init+0xa4>)
 800074e:	2200      	movs	r2, #0
 8000750:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000752:	4b19      	ldr	r3, [pc, #100]	; (80007b8 <MX_TIM4_Init+0xa4>)
 8000754:	2200      	movs	r2, #0
 8000756:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000758:	2301      	movs	r3, #1
 800075a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800075c:	2300      	movs	r3, #0
 800075e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000760:	2301      	movs	r3, #1
 8000762:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000764:	2300      	movs	r3, #0
 8000766:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000768:	2300      	movs	r3, #0
 800076a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800076c:	2300      	movs	r3, #0
 800076e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000770:	2301      	movs	r3, #1
 8000772:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000774:	2300      	movs	r3, #0
 8000776:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000778:	2300      	movs	r3, #0
 800077a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800077c:	f107 030c 	add.w	r3, r7, #12
 8000780:	4619      	mov	r1, r3
 8000782:	480d      	ldr	r0, [pc, #52]	; (80007b8 <MX_TIM4_Init+0xa4>)
 8000784:	f003 fecc 	bl	8004520 <HAL_TIM_Encoder_Init>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d001      	beq.n	8000792 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 800078e:	f000 fbad 	bl	8000eec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000792:	2300      	movs	r3, #0
 8000794:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000796:	2300      	movs	r3, #0
 8000798:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800079a:	463b      	mov	r3, r7
 800079c:	4619      	mov	r1, r3
 800079e:	4806      	ldr	r0, [pc, #24]	; (80007b8 <MX_TIM4_Init+0xa4>)
 80007a0:	f004 fe54 	bl	800544c <HAL_TIMEx_MasterConfigSynchronization>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 80007aa:	f000 fb9f 	bl	8000eec <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80007ae:	bf00      	nop
 80007b0:	3730      	adds	r7, #48	; 0x30
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	20000458 	.word	0x20000458
 80007bc:	40000800 	.word	0x40000800

080007c0 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b084      	sub	sp, #16
 80007c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007c6:	1d3b      	adds	r3, r7, #4
 80007c8:	2200      	movs	r2, #0
 80007ca:	601a      	str	r2, [r3, #0]
 80007cc:	605a      	str	r2, [r3, #4]
 80007ce:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80007d0:	4b14      	ldr	r3, [pc, #80]	; (8000824 <MX_TIM6_Init+0x64>)
 80007d2:	4a15      	ldr	r2, [pc, #84]	; (8000828 <MX_TIM6_Init+0x68>)
 80007d4:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 25 - 1;
 80007d6:	4b13      	ldr	r3, [pc, #76]	; (8000824 <MX_TIM6_Init+0x64>)
 80007d8:	2218      	movs	r2, #24
 80007da:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007dc:	4b11      	ldr	r3, [pc, #68]	; (8000824 <MX_TIM6_Init+0x64>)
 80007de:	2200      	movs	r2, #0
 80007e0:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 63999;
 80007e2:	4b10      	ldr	r3, [pc, #64]	; (8000824 <MX_TIM6_Init+0x64>)
 80007e4:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 80007e8:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007ea:	4b0e      	ldr	r3, [pc, #56]	; (8000824 <MX_TIM6_Init+0x64>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80007f0:	480c      	ldr	r0, [pc, #48]	; (8000824 <MX_TIM6_Init+0x64>)
 80007f2:	f003 fc7b 	bl	80040ec <HAL_TIM_Base_Init>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d001      	beq.n	8000800 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80007fc:	f000 fb76 	bl	8000eec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000800:	2300      	movs	r3, #0
 8000802:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000804:	2300      	movs	r3, #0
 8000806:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000808:	1d3b      	adds	r3, r7, #4
 800080a:	4619      	mov	r1, r3
 800080c:	4805      	ldr	r0, [pc, #20]	; (8000824 <MX_TIM6_Init+0x64>)
 800080e:	f004 fe1d 	bl	800544c <HAL_TIMEx_MasterConfigSynchronization>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d001      	beq.n	800081c <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000818:	f000 fb68 	bl	8000eec <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800081c:	bf00      	nop
 800081e:	3710      	adds	r7, #16
 8000820:	46bd      	mov	sp, r7
 8000822:	bd80      	pop	{r7, pc}
 8000824:	20000588 	.word	0x20000588
 8000828:	40001000 	.word	0x40001000

0800082c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b098      	sub	sp, #96	; 0x60
 8000830:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000832:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000836:	2200      	movs	r2, #0
 8000838:	601a      	str	r2, [r3, #0]
 800083a:	605a      	str	r2, [r3, #4]
 800083c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800083e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000842:	2200      	movs	r2, #0
 8000844:	601a      	str	r2, [r3, #0]
 8000846:	605a      	str	r2, [r3, #4]
 8000848:	609a      	str	r2, [r3, #8]
 800084a:	60da      	str	r2, [r3, #12]
 800084c:	611a      	str	r2, [r3, #16]
 800084e:	615a      	str	r2, [r3, #20]
 8000850:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000852:	1d3b      	adds	r3, r7, #4
 8000854:	2234      	movs	r2, #52	; 0x34
 8000856:	2100      	movs	r1, #0
 8000858:	4618      	mov	r0, r3
 800085a:	f009 f930 	bl	8009abe <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800085e:	4b3b      	ldr	r3, [pc, #236]	; (800094c <MX_TIM8_Init+0x120>)
 8000860:	4a3b      	ldr	r2, [pc, #236]	; (8000950 <MX_TIM8_Init+0x124>)
 8000862:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 50 - 1;
 8000864:	4b39      	ldr	r3, [pc, #228]	; (800094c <MX_TIM8_Init+0x120>)
 8000866:	2231      	movs	r2, #49	; 0x31
 8000868:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800086a:	4b38      	ldr	r3, [pc, #224]	; (800094c <MX_TIM8_Init+0x120>)
 800086c:	2200      	movs	r2, #0
 800086e:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 63999;
 8000870:	4b36      	ldr	r3, [pc, #216]	; (800094c <MX_TIM8_Init+0x120>)
 8000872:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8000876:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000878:	4b34      	ldr	r3, [pc, #208]	; (800094c <MX_TIM8_Init+0x120>)
 800087a:	2200      	movs	r2, #0
 800087c:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800087e:	4b33      	ldr	r3, [pc, #204]	; (800094c <MX_TIM8_Init+0x120>)
 8000880:	2200      	movs	r2, #0
 8000882:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000884:	4b31      	ldr	r3, [pc, #196]	; (800094c <MX_TIM8_Init+0x120>)
 8000886:	2200      	movs	r2, #0
 8000888:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800088a:	4830      	ldr	r0, [pc, #192]	; (800094c <MX_TIM8_Init+0x120>)
 800088c:	f003 fcf0 	bl	8004270 <HAL_TIM_PWM_Init>
 8000890:	4603      	mov	r3, r0
 8000892:	2b00      	cmp	r3, #0
 8000894:	d001      	beq.n	800089a <MX_TIM8_Init+0x6e>
  {
    Error_Handler();
 8000896:	f000 fb29 	bl	8000eec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800089a:	2300      	movs	r3, #0
 800089c:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800089e:	2300      	movs	r3, #0
 80008a0:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008a2:	2300      	movs	r3, #0
 80008a4:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80008a6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80008aa:	4619      	mov	r1, r3
 80008ac:	4827      	ldr	r0, [pc, #156]	; (800094c <MX_TIM8_Init+0x120>)
 80008ae:	f004 fdcd 	bl	800544c <HAL_TIMEx_MasterConfigSynchronization>
 80008b2:	4603      	mov	r3, r0
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d001      	beq.n	80008bc <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 80008b8:	f000 fb18 	bl	8000eec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008bc:	2360      	movs	r3, #96	; 0x60
 80008be:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 80008c0:	2300      	movs	r3, #0
 80008c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008c4:	2300      	movs	r3, #0
 80008c6:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80008c8:	2300      	movs	r3, #0
 80008ca:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008cc:	2300      	movs	r3, #0
 80008ce:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80008d0:	2300      	movs	r3, #0
 80008d2:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80008d4:	2300      	movs	r3, #0
 80008d6:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80008d8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80008dc:	2200      	movs	r2, #0
 80008de:	4619      	mov	r1, r3
 80008e0:	481a      	ldr	r0, [pc, #104]	; (800094c <MX_TIM8_Init+0x120>)
 80008e2:	f004 f8cf 	bl	8004a84 <HAL_TIM_PWM_ConfigChannel>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d001      	beq.n	80008f0 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 80008ec:	f000 fafe 	bl	8000eec <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80008f0:	2300      	movs	r3, #0
 80008f2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80008f4:	2300      	movs	r3, #0
 80008f6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80008f8:	2300      	movs	r3, #0
 80008fa:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80008fc:	2300      	movs	r3, #0
 80008fe:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000900:	2300      	movs	r3, #0
 8000902:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000904:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000908:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800090a:	2300      	movs	r3, #0
 800090c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800090e:	2300      	movs	r3, #0
 8000910:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000912:	2300      	movs	r3, #0
 8000914:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000916:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800091a:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800091c:	2300      	movs	r3, #0
 800091e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000920:	2300      	movs	r3, #0
 8000922:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000924:	2300      	movs	r3, #0
 8000926:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8000928:	1d3b      	adds	r3, r7, #4
 800092a:	4619      	mov	r1, r3
 800092c:	4807      	ldr	r0, [pc, #28]	; (800094c <MX_TIM8_Init+0x120>)
 800092e:	f004 fe0f 	bl	8005550 <HAL_TIMEx_ConfigBreakDeadTime>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	d001      	beq.n	800093c <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 8000938:	f000 fad8 	bl	8000eec <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 800093c:	4803      	ldr	r0, [pc, #12]	; (800094c <MX_TIM8_Init+0x120>)
 800093e:	f000 fc3b 	bl	80011b8 <HAL_TIM_MspPostInit>

}
 8000942:	bf00      	nop
 8000944:	3760      	adds	r7, #96	; 0x60
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	2000040c 	.word	0x2000040c
 8000950:	40013400 	.word	0x40013400

08000954 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b098      	sub	sp, #96	; 0x60
 8000958:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800095a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800095e:	2200      	movs	r2, #0
 8000960:	601a      	str	r2, [r3, #0]
 8000962:	605a      	str	r2, [r3, #4]
 8000964:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000966:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800096a:	2200      	movs	r2, #0
 800096c:	601a      	str	r2, [r3, #0]
 800096e:	605a      	str	r2, [r3, #4]
 8000970:	609a      	str	r2, [r3, #8]
 8000972:	60da      	str	r2, [r3, #12]
 8000974:	611a      	str	r2, [r3, #16]
 8000976:	615a      	str	r2, [r3, #20]
 8000978:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800097a:	1d3b      	adds	r3, r7, #4
 800097c:	2234      	movs	r2, #52	; 0x34
 800097e:	2100      	movs	r1, #0
 8000980:	4618      	mov	r0, r3
 8000982:	f009 f89c 	bl	8009abe <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8000986:	4b34      	ldr	r3, [pc, #208]	; (8000a58 <MX_TIM15_Init+0x104>)
 8000988:	4a34      	ldr	r2, [pc, #208]	; (8000a5c <MX_TIM15_Init+0x108>)
 800098a:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 50 - 1;
 800098c:	4b32      	ldr	r3, [pc, #200]	; (8000a58 <MX_TIM15_Init+0x104>)
 800098e:	2231      	movs	r2, #49	; 0x31
 8000990:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000992:	4b31      	ldr	r3, [pc, #196]	; (8000a58 <MX_TIM15_Init+0x104>)
 8000994:	2200      	movs	r2, #0
 8000996:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 63999;
 8000998:	4b2f      	ldr	r3, [pc, #188]	; (8000a58 <MX_TIM15_Init+0x104>)
 800099a:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 800099e:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009a0:	4b2d      	ldr	r3, [pc, #180]	; (8000a58 <MX_TIM15_Init+0x104>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80009a6:	4b2c      	ldr	r3, [pc, #176]	; (8000a58 <MX_TIM15_Init+0x104>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009ac:	4b2a      	ldr	r3, [pc, #168]	; (8000a58 <MX_TIM15_Init+0x104>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 80009b2:	4829      	ldr	r0, [pc, #164]	; (8000a58 <MX_TIM15_Init+0x104>)
 80009b4:	f003 fc5c 	bl	8004270 <HAL_TIM_PWM_Init>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d001      	beq.n	80009c2 <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 80009be:	f000 fa95 	bl	8000eec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009c2:	2300      	movs	r3, #0
 80009c4:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009c6:	2300      	movs	r3, #0
 80009c8:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80009ca:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80009ce:	4619      	mov	r1, r3
 80009d0:	4821      	ldr	r0, [pc, #132]	; (8000a58 <MX_TIM15_Init+0x104>)
 80009d2:	f004 fd3b 	bl	800544c <HAL_TIMEx_MasterConfigSynchronization>
 80009d6:	4603      	mov	r3, r0
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d001      	beq.n	80009e0 <MX_TIM15_Init+0x8c>
  {
    Error_Handler();
 80009dc:	f000 fa86 	bl	8000eec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009e0:	2360      	movs	r3, #96	; 0x60
 80009e2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 80009e4:	2300      	movs	r3, #0
 80009e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009e8:	2300      	movs	r3, #0
 80009ea:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80009ec:	2300      	movs	r3, #0
 80009ee:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009f0:	2300      	movs	r3, #0
 80009f2:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80009f4:	2300      	movs	r3, #0
 80009f6:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80009f8:	2300      	movs	r3, #0
 80009fa:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80009fc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000a00:	2204      	movs	r2, #4
 8000a02:	4619      	mov	r1, r3
 8000a04:	4814      	ldr	r0, [pc, #80]	; (8000a58 <MX_TIM15_Init+0x104>)
 8000a06:	f004 f83d 	bl	8004a84 <HAL_TIM_PWM_ConfigChannel>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d001      	beq.n	8000a14 <MX_TIM15_Init+0xc0>
  {
    Error_Handler();
 8000a10:	f000 fa6c 	bl	8000eec <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000a14:	2300      	movs	r3, #0
 8000a16:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000a20:	2300      	movs	r3, #0
 8000a22:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000a24:	2300      	movs	r3, #0
 8000a26:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000a28:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a2c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000a32:	2300      	movs	r3, #0
 8000a34:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8000a36:	1d3b      	adds	r3, r7, #4
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4807      	ldr	r0, [pc, #28]	; (8000a58 <MX_TIM15_Init+0x104>)
 8000a3c:	f004 fd88 	bl	8005550 <HAL_TIMEx_ConfigBreakDeadTime>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d001      	beq.n	8000a4a <MX_TIM15_Init+0xf6>
  {
    Error_Handler();
 8000a46:	f000 fa51 	bl	8000eec <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8000a4a:	4803      	ldr	r0, [pc, #12]	; (8000a58 <MX_TIM15_Init+0x104>)
 8000a4c:	f000 fbb4 	bl	80011b8 <HAL_TIM_MspPostInit>

}
 8000a50:	bf00      	nop
 8000a52:	3760      	adds	r7, #96	; 0x60
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bd80      	pop	{r7, pc}
 8000a58:	200004a4 	.word	0x200004a4
 8000a5c:	40014000 	.word	0x40014000

08000a60 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b094      	sub	sp, #80	; 0x50
 8000a64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a66:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	601a      	str	r2, [r3, #0]
 8000a6e:	605a      	str	r2, [r3, #4]
 8000a70:	609a      	str	r2, [r3, #8]
 8000a72:	60da      	str	r2, [r3, #12]
 8000a74:	611a      	str	r2, [r3, #16]
 8000a76:	615a      	str	r2, [r3, #20]
 8000a78:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000a7a:	463b      	mov	r3, r7
 8000a7c:	2234      	movs	r2, #52	; 0x34
 8000a7e:	2100      	movs	r1, #0
 8000a80:	4618      	mov	r0, r3
 8000a82:	f009 f81c 	bl	8009abe <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000a86:	4b31      	ldr	r3, [pc, #196]	; (8000b4c <MX_TIM16_Init+0xec>)
 8000a88:	4a31      	ldr	r2, [pc, #196]	; (8000b50 <MX_TIM16_Init+0xf0>)
 8000a8a:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 50 - 1;
 8000a8c:	4b2f      	ldr	r3, [pc, #188]	; (8000b4c <MX_TIM16_Init+0xec>)
 8000a8e:	2231      	movs	r2, #49	; 0x31
 8000a90:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a92:	4b2e      	ldr	r3, [pc, #184]	; (8000b4c <MX_TIM16_Init+0xec>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 63999;
 8000a98:	4b2c      	ldr	r3, [pc, #176]	; (8000b4c <MX_TIM16_Init+0xec>)
 8000a9a:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8000a9e:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000aa0:	4b2a      	ldr	r3, [pc, #168]	; (8000b4c <MX_TIM16_Init+0xec>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000aa6:	4b29      	ldr	r3, [pc, #164]	; (8000b4c <MX_TIM16_Init+0xec>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000aac:	4b27      	ldr	r3, [pc, #156]	; (8000b4c <MX_TIM16_Init+0xec>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000ab2:	4826      	ldr	r0, [pc, #152]	; (8000b4c <MX_TIM16_Init+0xec>)
 8000ab4:	f003 fb1a 	bl	80040ec <HAL_TIM_Base_Init>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d001      	beq.n	8000ac2 <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 8000abe:	f000 fa15 	bl	8000eec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8000ac2:	4822      	ldr	r0, [pc, #136]	; (8000b4c <MX_TIM16_Init+0xec>)
 8000ac4:	f003 fbd4 	bl	8004270 <HAL_TIM_PWM_Init>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d001      	beq.n	8000ad2 <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 8000ace:	f000 fa0d 	bl	8000eec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ad2:	2360      	movs	r3, #96	; 0x60
 8000ad4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 0;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ada:	2300      	movs	r3, #0
 8000adc:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000aea:	2300      	movs	r3, #0
 8000aec:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000aee:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000af2:	2200      	movs	r2, #0
 8000af4:	4619      	mov	r1, r3
 8000af6:	4815      	ldr	r0, [pc, #84]	; (8000b4c <MX_TIM16_Init+0xec>)
 8000af8:	f003 ffc4 	bl	8004a84 <HAL_TIM_PWM_ConfigChannel>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d001      	beq.n	8000b06 <MX_TIM16_Init+0xa6>
  {
    Error_Handler();
 8000b02:	f000 f9f3 	bl	8000eec <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000b06:	2300      	movs	r3, #0
 8000b08:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000b12:	2300      	movs	r3, #0
 8000b14:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000b16:	2300      	movs	r3, #0
 8000b18:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000b1a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b1e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000b20:	2300      	movs	r3, #0
 8000b22:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000b24:	2300      	movs	r3, #0
 8000b26:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8000b28:	463b      	mov	r3, r7
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	4807      	ldr	r0, [pc, #28]	; (8000b4c <MX_TIM16_Init+0xec>)
 8000b2e:	f004 fd0f 	bl	8005550 <HAL_TIMEx_ConfigBreakDeadTime>
 8000b32:	4603      	mov	r3, r0
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d001      	beq.n	8000b3c <MX_TIM16_Init+0xdc>
  {
    Error_Handler();
 8000b38:	f000 f9d8 	bl	8000eec <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8000b3c:	4803      	ldr	r0, [pc, #12]	; (8000b4c <MX_TIM16_Init+0xec>)
 8000b3e:	f000 fb3b 	bl	80011b8 <HAL_TIM_MspPostInit>

}
 8000b42:	bf00      	nop
 8000b44:	3750      	adds	r7, #80	; 0x50
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	2000066c 	.word	0x2000066c
 8000b50:	40014400 	.word	0x40014400

08000b54 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b094      	sub	sp, #80	; 0x50
 8000b58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b5a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000b5e:	2200      	movs	r2, #0
 8000b60:	601a      	str	r2, [r3, #0]
 8000b62:	605a      	str	r2, [r3, #4]
 8000b64:	609a      	str	r2, [r3, #8]
 8000b66:	60da      	str	r2, [r3, #12]
 8000b68:	611a      	str	r2, [r3, #16]
 8000b6a:	615a      	str	r2, [r3, #20]
 8000b6c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000b6e:	463b      	mov	r3, r7
 8000b70:	2234      	movs	r2, #52	; 0x34
 8000b72:	2100      	movs	r1, #0
 8000b74:	4618      	mov	r0, r3
 8000b76:	f008 ffa2 	bl	8009abe <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8000b7a:	4b31      	ldr	r3, [pc, #196]	; (8000c40 <MX_TIM17_Init+0xec>)
 8000b7c:	4a31      	ldr	r2, [pc, #196]	; (8000c44 <MX_TIM17_Init+0xf0>)
 8000b7e:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 50 - 1;
 8000b80:	4b2f      	ldr	r3, [pc, #188]	; (8000c40 <MX_TIM17_Init+0xec>)
 8000b82:	2231      	movs	r2, #49	; 0x31
 8000b84:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b86:	4b2e      	ldr	r3, [pc, #184]	; (8000c40 <MX_TIM17_Init+0xec>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 63999;
 8000b8c:	4b2c      	ldr	r3, [pc, #176]	; (8000c40 <MX_TIM17_Init+0xec>)
 8000b8e:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8000b92:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b94:	4b2a      	ldr	r3, [pc, #168]	; (8000c40 <MX_TIM17_Init+0xec>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8000b9a:	4b29      	ldr	r3, [pc, #164]	; (8000c40 <MX_TIM17_Init+0xec>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ba0:	4b27      	ldr	r3, [pc, #156]	; (8000c40 <MX_TIM17_Init+0xec>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8000ba6:	4826      	ldr	r0, [pc, #152]	; (8000c40 <MX_TIM17_Init+0xec>)
 8000ba8:	f003 faa0 	bl	80040ec <HAL_TIM_Base_Init>
 8000bac:	4603      	mov	r3, r0
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d001      	beq.n	8000bb6 <MX_TIM17_Init+0x62>
  {
    Error_Handler();
 8000bb2:	f000 f99b 	bl	8000eec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 8000bb6:	4822      	ldr	r0, [pc, #136]	; (8000c40 <MX_TIM17_Init+0xec>)
 8000bb8:	f003 fb5a 	bl	8004270 <HAL_TIM_PWM_Init>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d001      	beq.n	8000bc6 <MX_TIM17_Init+0x72>
  {
    Error_Handler();
 8000bc2:	f000 f993 	bl	8000eec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000bc6:	2360      	movs	r3, #96	; 0x60
 8000bc8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 0;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000bde:	2300      	movs	r3, #0
 8000be0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000be2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000be6:	2200      	movs	r2, #0
 8000be8:	4619      	mov	r1, r3
 8000bea:	4815      	ldr	r0, [pc, #84]	; (8000c40 <MX_TIM17_Init+0xec>)
 8000bec:	f003 ff4a 	bl	8004a84 <HAL_TIM_PWM_ConfigChannel>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d001      	beq.n	8000bfa <MX_TIM17_Init+0xa6>
  {
    Error_Handler();
 8000bf6:	f000 f979 	bl	8000eec <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000c02:	2300      	movs	r3, #0
 8000c04:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000c06:	2300      	movs	r3, #0
 8000c08:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000c0e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c12:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000c14:	2300      	movs	r3, #0
 8000c16:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8000c1c:	463b      	mov	r3, r7
 8000c1e:	4619      	mov	r1, r3
 8000c20:	4807      	ldr	r0, [pc, #28]	; (8000c40 <MX_TIM17_Init+0xec>)
 8000c22:	f004 fc95 	bl	8005550 <HAL_TIMEx_ConfigBreakDeadTime>
 8000c26:	4603      	mov	r3, r0
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d001      	beq.n	8000c30 <MX_TIM17_Init+0xdc>
  {
    Error_Handler();
 8000c2c:	f000 f95e 	bl	8000eec <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 8000c30:	4803      	ldr	r0, [pc, #12]	; (8000c40 <MX_TIM17_Init+0xec>)
 8000c32:	f000 fac1 	bl	80011b8 <HAL_TIM_MspPostInit>

}
 8000c36:	bf00      	nop
 8000c38:	3750      	adds	r7, #80	; 0x50
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	200004f0 	.word	0x200004f0
 8000c44:	40014800 	.word	0x40014800

08000c48 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b088      	sub	sp, #32
 8000c4c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c4e:	f107 030c 	add.w	r3, r7, #12
 8000c52:	2200      	movs	r2, #0
 8000c54:	601a      	str	r2, [r3, #0]
 8000c56:	605a      	str	r2, [r3, #4]
 8000c58:	609a      	str	r2, [r3, #8]
 8000c5a:	60da      	str	r2, [r3, #12]
 8000c5c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c5e:	4b18      	ldr	r3, [pc, #96]	; (8000cc0 <MX_GPIO_Init+0x78>)
 8000c60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c62:	4a17      	ldr	r2, [pc, #92]	; (8000cc0 <MX_GPIO_Init+0x78>)
 8000c64:	f043 0301 	orr.w	r3, r3, #1
 8000c68:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c6a:	4b15      	ldr	r3, [pc, #84]	; (8000cc0 <MX_GPIO_Init+0x78>)
 8000c6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c6e:	f003 0301 	and.w	r3, r3, #1
 8000c72:	60bb      	str	r3, [r7, #8]
 8000c74:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c76:	4b12      	ldr	r3, [pc, #72]	; (8000cc0 <MX_GPIO_Init+0x78>)
 8000c78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c7a:	4a11      	ldr	r2, [pc, #68]	; (8000cc0 <MX_GPIO_Init+0x78>)
 8000c7c:	f043 0302 	orr.w	r3, r3, #2
 8000c80:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c82:	4b0f      	ldr	r3, [pc, #60]	; (8000cc0 <MX_GPIO_Init+0x78>)
 8000c84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c86:	f003 0302 	and.w	r3, r3, #2
 8000c8a:	607b      	str	r3, [r7, #4]
 8000c8c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000c8e:	2200      	movs	r2, #0
 8000c90:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c94:	480b      	ldr	r0, [pc, #44]	; (8000cc4 <MX_GPIO_Init+0x7c>)
 8000c96:	f000 feef 	bl	8001a78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000c9a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c9e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ca0:	2301      	movs	r3, #1
 8000ca2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000cac:	f107 030c 	add.w	r3, r7, #12
 8000cb0:	4619      	mov	r1, r3
 8000cb2:	4804      	ldr	r0, [pc, #16]	; (8000cc4 <MX_GPIO_Init+0x7c>)
 8000cb4:	f000 fd5e 	bl	8001774 <HAL_GPIO_Init>

}
 8000cb8:	bf00      	nop
 8000cba:	3720      	adds	r7, #32
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}
 8000cc0:	40021000 	.word	0x40021000
 8000cc4:	48000400 	.word	0x48000400

08000cc8 <PID>:

/* USER CODE BEGIN 4 */

uint32_t PID(Motor* motor, int16_t position) {
 8000cc8:	b480      	push	{r7}
 8000cca:	b087      	sub	sp, #28
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
 8000cd0:	460b      	mov	r3, r1
 8000cd2:	807b      	strh	r3, [r7, #2]
	motor->position = position; // Update motor position from encoder output
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	887a      	ldrh	r2, [r7, #2]
 8000cd8:	815a      	strh	r2, [r3, #10]
	motor->positionChange = ( position - motor->positionPrev );
 8000cda:	887a      	ldrh	r2, [r7, #2]
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8000ce2:	b29b      	uxth	r3, r3
 8000ce4:	1ad3      	subs	r3, r2, r3
 8000ce6:	b29b      	uxth	r3, r3
 8000ce8:	b21a      	sxth	r2, r3
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	81da      	strh	r2, [r3, #14]
	motor->error = ( motor->setpoint - motor->positionChange ); // Update current PID error
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	881a      	ldrh	r2, [r3, #0]
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8000cf8:	b29b      	uxth	r3, r3
 8000cfa:	1ad3      	subs	r3, r2, r3
 8000cfc:	b29b      	uxth	r3, r3
 8000cfe:	b21a      	sxth	r2, r3
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	821a      	strh	r2, [r3, #16]
	motor->sumOfErrors += motor->error; // Add current PID error to PID sum of errors
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8000d0a:	b29a      	uxth	r2, r3
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8000d12:	b29b      	uxth	r3, r3
 8000d14:	4413      	add	r3, r2
 8000d16:	b29b      	uxth	r3, r3
 8000d18:	b21a      	sxth	r2, r3
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	825a      	strh	r2, [r3, #18]
	motor->positionPrev = position;
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	887a      	ldrh	r2, [r7, #2]
 8000d22:	819a      	strh	r2, [r3, #12]
	uint32_t p = motor->pGain * motor->error;
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000d2a:	461a      	mov	r2, r3
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8000d32:	fb03 f302 	mul.w	r3, r3, r2
 8000d36:	617b      	str	r3, [r7, #20]
	uint32_t i = motor->iGain * motor->sumOfErrors;
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8000d3e:	461a      	mov	r2, r3
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8000d46:	fb03 f302 	mul.w	r3, r3, r2
 8000d4a:	613b      	str	r3, [r7, #16]
	uint32_t d = motor->dGain * motor->positionChange;
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8000d52:	461a      	mov	r2, r3
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8000d5a:	fb03 f302 	mul.w	r3, r3, r2
 8000d5e:	60fb      	str	r3, [r7, #12]
	if (motor->setpoint == 0) {
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	881b      	ldrh	r3, [r3, #0]
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d10b      	bne.n	8000d80 <PID+0xb8>
		motor->error = 0;
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	821a      	strh	r2, [r3, #16]
		motor->sumOfErrors = 0;
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	2200      	movs	r2, #0
 8000d72:	825a      	strh	r2, [r3, #18]
		p = 0;
 8000d74:	2300      	movs	r3, #0
 8000d76:	617b      	str	r3, [r7, #20]
		i = 0;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	613b      	str	r3, [r7, #16]
		d = 0;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	60fb      	str	r3, [r7, #12]
	}
	return (p + i + d); // Return PID controller output (speed)
 8000d80:	697a      	ldr	r2, [r7, #20]
 8000d82:	693b      	ldr	r3, [r7, #16]
 8000d84:	441a      	add	r2, r3
 8000d86:	68fb      	ldr	r3, [r7, #12]
 8000d88:	4413      	add	r3, r2
}
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	371c      	adds	r7, #28
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d94:	4770      	bx	lr
	...

08000d98 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b086      	sub	sp, #24
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
	// Third motor <=> J7 encoder socket <=> THIRD ENCODER
	// First motor <=> J3 encoder socket <=> FIRST ENCODER

	int32_t motor1pid, motor2pid, motor3pid; // Initialize variables for saving PID controller output value

	motor1pid = motor1.speed = PID(&motor1, (int16_t)TIM1->CNT);
 8000da0:	4b49      	ldr	r3, [pc, #292]	; (8000ec8 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8000da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000da4:	b21b      	sxth	r3, r3
 8000da6:	4619      	mov	r1, r3
 8000da8:	4848      	ldr	r0, [pc, #288]	; (8000ecc <HAL_TIM_PeriodElapsedCallback+0x134>)
 8000daa:	f7ff ff8d 	bl	8000cc8 <PID>
 8000dae:	4603      	mov	r3, r0
 8000db0:	b29a      	uxth	r2, r3
 8000db2:	4b46      	ldr	r3, [pc, #280]	; (8000ecc <HAL_TIM_PeriodElapsedCallback+0x134>)
 8000db4:	805a      	strh	r2, [r3, #2]
 8000db6:	4b45      	ldr	r3, [pc, #276]	; (8000ecc <HAL_TIM_PeriodElapsedCallback+0x134>)
 8000db8:	885b      	ldrh	r3, [r3, #2]
 8000dba:	617b      	str	r3, [r7, #20]
	motor2pid = motor2.speed = PID(&motor2, (int16_t)TIM3->CNT);
 8000dbc:	4b44      	ldr	r3, [pc, #272]	; (8000ed0 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8000dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dc0:	b21b      	sxth	r3, r3
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	4843      	ldr	r0, [pc, #268]	; (8000ed4 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8000dc6:	f7ff ff7f 	bl	8000cc8 <PID>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	b29a      	uxth	r2, r3
 8000dce:	4b41      	ldr	r3, [pc, #260]	; (8000ed4 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8000dd0:	805a      	strh	r2, [r3, #2]
 8000dd2:	4b40      	ldr	r3, [pc, #256]	; (8000ed4 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8000dd4:	885b      	ldrh	r3, [r3, #2]
 8000dd6:	613b      	str	r3, [r7, #16]
	motor3pid = motor3.speed = PID(&motor3, (int16_t)TIM4->CNT);
 8000dd8:	4b3f      	ldr	r3, [pc, #252]	; (8000ed8 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8000dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ddc:	b21b      	sxth	r3, r3
 8000dde:	4619      	mov	r1, r3
 8000de0:	483e      	ldr	r0, [pc, #248]	; (8000edc <HAL_TIM_PeriodElapsedCallback+0x144>)
 8000de2:	f7ff ff71 	bl	8000cc8 <PID>
 8000de6:	4603      	mov	r3, r0
 8000de8:	b29a      	uxth	r2, r3
 8000dea:	4b3c      	ldr	r3, [pc, #240]	; (8000edc <HAL_TIM_PeriodElapsedCallback+0x144>)
 8000dec:	805a      	strh	r2, [r3, #2]
 8000dee:	4b3b      	ldr	r3, [pc, #236]	; (8000edc <HAL_TIM_PeriodElapsedCallback+0x144>)
 8000df0:	885b      	ldrh	r3, [r3, #2]
 8000df2:	60fb      	str	r3, [r7, #12]

	// Overflow check
	if (motor1pid > 65535) {
 8000df4:	697b      	ldr	r3, [r7, #20]
 8000df6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000dfa:	db03      	blt.n	8000e04 <HAL_TIM_PeriodElapsedCallback+0x6c>
		motor1pid = 65535;
 8000dfc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e00:	617b      	str	r3, [r7, #20]
 8000e02:	e005      	b.n	8000e10 <HAL_TIM_PeriodElapsedCallback+0x78>
	}
	else if (motor1pid < -65535) {
 8000e04:	697b      	ldr	r3, [r7, #20]
 8000e06:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8000e0a:	dc01      	bgt.n	8000e10 <HAL_TIM_PeriodElapsedCallback+0x78>
		motor1pid = -65535;
 8000e0c:	4b34      	ldr	r3, [pc, #208]	; (8000ee0 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8000e0e:	617b      	str	r3, [r7, #20]
	}

	if (motor2pid > 65535) {
 8000e10:	693b      	ldr	r3, [r7, #16]
 8000e12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e16:	db03      	blt.n	8000e20 <HAL_TIM_PeriodElapsedCallback+0x88>
		motor2pid = 65535;
 8000e18:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e1c:	613b      	str	r3, [r7, #16]
 8000e1e:	e005      	b.n	8000e2c <HAL_TIM_PeriodElapsedCallback+0x94>
	}
	else if (motor2pid < -65535) {
 8000e20:	693b      	ldr	r3, [r7, #16]
 8000e22:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8000e26:	dc01      	bgt.n	8000e2c <HAL_TIM_PeriodElapsedCallback+0x94>
		motor2pid = -65535;
 8000e28:	4b2d      	ldr	r3, [pc, #180]	; (8000ee0 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8000e2a:	613b      	str	r3, [r7, #16]
	}

	if (motor3pid > 65535) {
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e32:	db03      	blt.n	8000e3c <HAL_TIM_PeriodElapsedCallback+0xa4>
		motor3pid = 65535;
 8000e34:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e38:	60fb      	str	r3, [r7, #12]
 8000e3a:	e005      	b.n	8000e48 <HAL_TIM_PeriodElapsedCallback+0xb0>
	}
	else if (motor3pid < -65535) {
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8000e42:	dc01      	bgt.n	8000e48 <HAL_TIM_PeriodElapsedCallback+0xb0>
		motor3pid = -65535;
 8000e44:	4b26      	ldr	r3, [pc, #152]	; (8000ee0 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8000e46:	60fb      	str	r3, [r7, #12]
	}

	// Set motor speed to PID controller output
	if (motor1pid > 0) {
 8000e48:	697b      	ldr	r3, [r7, #20]
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	dd08      	ble.n	8000e60 <HAL_TIM_PeriodElapsedCallback+0xc8>
		TIM2->CCR1 = motor1pid;
 8000e4e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e52:	697b      	ldr	r3, [r7, #20]
 8000e54:	6353      	str	r3, [r2, #52]	; 0x34
		TIM2->CCR2 = 0;
 8000e56:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	639a      	str	r2, [r3, #56]	; 0x38
 8000e5e:	e008      	b.n	8000e72 <HAL_TIM_PeriodElapsedCallback+0xda>
	}
	else {
		TIM2->CCR1 = 0;
 8000e60:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e64:	2200      	movs	r2, #0
 8000e66:	635a      	str	r2, [r3, #52]	; 0x34
		TIM2->CCR2 = -motor1pid;
 8000e68:	697b      	ldr	r3, [r7, #20]
 8000e6a:	425a      	negs	r2, r3
 8000e6c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e70:	639a      	str	r2, [r3, #56]	; 0x38
	}

	if (motor2pid > 0) {
 8000e72:	693b      	ldr	r3, [r7, #16]
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	dd08      	ble.n	8000e8a <HAL_TIM_PeriodElapsedCallback+0xf2>
		TIM2->CCR3 = motor2pid;
 8000e78:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e7c:	693b      	ldr	r3, [r7, #16]
 8000e7e:	63d3      	str	r3, [r2, #60]	; 0x3c
		TIM2->CCR4 = 0;
 8000e80:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e84:	2200      	movs	r2, #0
 8000e86:	641a      	str	r2, [r3, #64]	; 0x40
 8000e88:	e008      	b.n	8000e9c <HAL_TIM_PeriodElapsedCallback+0x104>
	}
	else {
		TIM2->CCR3 = 0;
 8000e8a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e8e:	2200      	movs	r2, #0
 8000e90:	63da      	str	r2, [r3, #60]	; 0x3c
		TIM2->CCR4 = -motor2pid;
 8000e92:	693b      	ldr	r3, [r7, #16]
 8000e94:	425a      	negs	r2, r3
 8000e96:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e9a:	641a      	str	r2, [r3, #64]	; 0x40
	}

	if (motor3pid > 0) {
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	dd06      	ble.n	8000eb0 <HAL_TIM_PeriodElapsedCallback+0x118>
		TIM16->CCR1 = motor3pid;
 8000ea2:	4a10      	ldr	r2, [pc, #64]	; (8000ee4 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	6353      	str	r3, [r2, #52]	; 0x34
		TIM17->CCR1 = 0;
 8000ea8:	4b0f      	ldr	r3, [pc, #60]	; (8000ee8 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	635a      	str	r2, [r3, #52]	; 0x34
	}
	else {
		TIM16->CCR1 = 0;
		TIM17->CCR1 = -motor3pid;
	}
}
 8000eae:	e006      	b.n	8000ebe <HAL_TIM_PeriodElapsedCallback+0x126>
		TIM16->CCR1 = 0;
 8000eb0:	4b0c      	ldr	r3, [pc, #48]	; (8000ee4 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	635a      	str	r2, [r3, #52]	; 0x34
		TIM17->CCR1 = -motor3pid;
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	425a      	negs	r2, r3
 8000eba:	4b0b      	ldr	r3, [pc, #44]	; (8000ee8 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8000ebc:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000ebe:	bf00      	nop
 8000ec0:	3718      	adds	r7, #24
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	40012c00 	.word	0x40012c00
 8000ecc:	20000000 	.word	0x20000000
 8000ed0:	40000400 	.word	0x40000400
 8000ed4:	20000014 	.word	0x20000014
 8000ed8:	40000800 	.word	0x40000800
 8000edc:	20000028 	.word	0x20000028
 8000ee0:	ffff0001 	.word	0xffff0001
 8000ee4:	40014400 	.word	0x40014400
 8000ee8:	40014800 	.word	0x40014800

08000eec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000ef0:	bf00      	nop
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr
	...

08000efc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f02:	4b0f      	ldr	r3, [pc, #60]	; (8000f40 <HAL_MspInit+0x44>)
 8000f04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f06:	4a0e      	ldr	r2, [pc, #56]	; (8000f40 <HAL_MspInit+0x44>)
 8000f08:	f043 0301 	orr.w	r3, r3, #1
 8000f0c:	6613      	str	r3, [r2, #96]	; 0x60
 8000f0e:	4b0c      	ldr	r3, [pc, #48]	; (8000f40 <HAL_MspInit+0x44>)
 8000f10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f12:	f003 0301 	and.w	r3, r3, #1
 8000f16:	607b      	str	r3, [r7, #4]
 8000f18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f1a:	4b09      	ldr	r3, [pc, #36]	; (8000f40 <HAL_MspInit+0x44>)
 8000f1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f1e:	4a08      	ldr	r2, [pc, #32]	; (8000f40 <HAL_MspInit+0x44>)
 8000f20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f24:	6593      	str	r3, [r2, #88]	; 0x58
 8000f26:	4b06      	ldr	r3, [pc, #24]	; (8000f40 <HAL_MspInit+0x44>)
 8000f28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f2e:	603b      	str	r3, [r7, #0]
 8000f30:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000f32:	f002 f9df 	bl	80032f4 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f36:	bf00      	nop
 8000f38:	3708      	adds	r7, #8
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	40021000 	.word	0x40021000

08000f44 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b08e      	sub	sp, #56	; 0x38
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f50:	2200      	movs	r2, #0
 8000f52:	601a      	str	r2, [r3, #0]
 8000f54:	605a      	str	r2, [r3, #4]
 8000f56:	609a      	str	r2, [r3, #8]
 8000f58:	60da      	str	r2, [r3, #12]
 8000f5a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	4a46      	ldr	r2, [pc, #280]	; (800107c <HAL_TIM_Encoder_MspInit+0x138>)
 8000f62:	4293      	cmp	r3, r2
 8000f64:	d12a      	bne.n	8000fbc <HAL_TIM_Encoder_MspInit+0x78>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000f66:	4b46      	ldr	r3, [pc, #280]	; (8001080 <HAL_TIM_Encoder_MspInit+0x13c>)
 8000f68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f6a:	4a45      	ldr	r2, [pc, #276]	; (8001080 <HAL_TIM_Encoder_MspInit+0x13c>)
 8000f6c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000f70:	6613      	str	r3, [r2, #96]	; 0x60
 8000f72:	4b43      	ldr	r3, [pc, #268]	; (8001080 <HAL_TIM_Encoder_MspInit+0x13c>)
 8000f74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f76:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000f7a:	623b      	str	r3, [r7, #32]
 8000f7c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f7e:	4b40      	ldr	r3, [pc, #256]	; (8001080 <HAL_TIM_Encoder_MspInit+0x13c>)
 8000f80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f82:	4a3f      	ldr	r2, [pc, #252]	; (8001080 <HAL_TIM_Encoder_MspInit+0x13c>)
 8000f84:	f043 0301 	orr.w	r3, r3, #1
 8000f88:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f8a:	4b3d      	ldr	r3, [pc, #244]	; (8001080 <HAL_TIM_Encoder_MspInit+0x13c>)
 8000f8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f8e:	f003 0301 	and.w	r3, r3, #1
 8000f92:	61fb      	str	r3, [r7, #28]
 8000f94:	69fb      	ldr	r3, [r7, #28]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000f96:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000f9a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f9c:	2302      	movs	r3, #2
 8000f9e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8000fa8:	2306      	movs	r3, #6
 8000faa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fb6:	f000 fbdd 	bl	8001774 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000fba:	e05a      	b.n	8001072 <HAL_TIM_Encoder_MspInit+0x12e>
  else if(htim_encoder->Instance==TIM3)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	4a30      	ldr	r2, [pc, #192]	; (8001084 <HAL_TIM_Encoder_MspInit+0x140>)
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	d128      	bne.n	8001018 <HAL_TIM_Encoder_MspInit+0xd4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000fc6:	4b2e      	ldr	r3, [pc, #184]	; (8001080 <HAL_TIM_Encoder_MspInit+0x13c>)
 8000fc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fca:	4a2d      	ldr	r2, [pc, #180]	; (8001080 <HAL_TIM_Encoder_MspInit+0x13c>)
 8000fcc:	f043 0302 	orr.w	r3, r3, #2
 8000fd0:	6593      	str	r3, [r2, #88]	; 0x58
 8000fd2:	4b2b      	ldr	r3, [pc, #172]	; (8001080 <HAL_TIM_Encoder_MspInit+0x13c>)
 8000fd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fd6:	f003 0302 	and.w	r3, r3, #2
 8000fda:	61bb      	str	r3, [r7, #24]
 8000fdc:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fde:	4b28      	ldr	r3, [pc, #160]	; (8001080 <HAL_TIM_Encoder_MspInit+0x13c>)
 8000fe0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fe2:	4a27      	ldr	r2, [pc, #156]	; (8001080 <HAL_TIM_Encoder_MspInit+0x13c>)
 8000fe4:	f043 0302 	orr.w	r3, r3, #2
 8000fe8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fea:	4b25      	ldr	r3, [pc, #148]	; (8001080 <HAL_TIM_Encoder_MspInit+0x13c>)
 8000fec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fee:	f003 0302 	and.w	r3, r3, #2
 8000ff2:	617b      	str	r3, [r7, #20]
 8000ff4:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000ff6:	2330      	movs	r3, #48	; 0x30
 8000ff8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ffa:	2302      	movs	r3, #2
 8000ffc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffe:	2300      	movs	r3, #0
 8001000:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001002:	2300      	movs	r3, #0
 8001004:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001006:	2302      	movs	r3, #2
 8001008:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800100a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800100e:	4619      	mov	r1, r3
 8001010:	481d      	ldr	r0, [pc, #116]	; (8001088 <HAL_TIM_Encoder_MspInit+0x144>)
 8001012:	f000 fbaf 	bl	8001774 <HAL_GPIO_Init>
}
 8001016:	e02c      	b.n	8001072 <HAL_TIM_Encoder_MspInit+0x12e>
  else if(htim_encoder->Instance==TIM4)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	4a1b      	ldr	r2, [pc, #108]	; (800108c <HAL_TIM_Encoder_MspInit+0x148>)
 800101e:	4293      	cmp	r3, r2
 8001020:	d127      	bne.n	8001072 <HAL_TIM_Encoder_MspInit+0x12e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001022:	4b17      	ldr	r3, [pc, #92]	; (8001080 <HAL_TIM_Encoder_MspInit+0x13c>)
 8001024:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001026:	4a16      	ldr	r2, [pc, #88]	; (8001080 <HAL_TIM_Encoder_MspInit+0x13c>)
 8001028:	f043 0304 	orr.w	r3, r3, #4
 800102c:	6593      	str	r3, [r2, #88]	; 0x58
 800102e:	4b14      	ldr	r3, [pc, #80]	; (8001080 <HAL_TIM_Encoder_MspInit+0x13c>)
 8001030:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001032:	f003 0304 	and.w	r3, r3, #4
 8001036:	613b      	str	r3, [r7, #16]
 8001038:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800103a:	4b11      	ldr	r3, [pc, #68]	; (8001080 <HAL_TIM_Encoder_MspInit+0x13c>)
 800103c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800103e:	4a10      	ldr	r2, [pc, #64]	; (8001080 <HAL_TIM_Encoder_MspInit+0x13c>)
 8001040:	f043 0302 	orr.w	r3, r3, #2
 8001044:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001046:	4b0e      	ldr	r3, [pc, #56]	; (8001080 <HAL_TIM_Encoder_MspInit+0x13c>)
 8001048:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800104a:	f003 0302 	and.w	r3, r3, #2
 800104e:	60fb      	str	r3, [r7, #12]
 8001050:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001052:	23c0      	movs	r3, #192	; 0xc0
 8001054:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001056:	2302      	movs	r3, #2
 8001058:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105a:	2300      	movs	r3, #0
 800105c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800105e:	2300      	movs	r3, #0
 8001060:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001062:	2302      	movs	r3, #2
 8001064:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001066:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800106a:	4619      	mov	r1, r3
 800106c:	4806      	ldr	r0, [pc, #24]	; (8001088 <HAL_TIM_Encoder_MspInit+0x144>)
 800106e:	f000 fb81 	bl	8001774 <HAL_GPIO_Init>
}
 8001072:	bf00      	nop
 8001074:	3738      	adds	r7, #56	; 0x38
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	40012c00 	.word	0x40012c00
 8001080:	40021000 	.word	0x40021000
 8001084:	40000400 	.word	0x40000400
 8001088:	48000400 	.word	0x48000400
 800108c:	40000800 	.word	0x40000800

08001090 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001090:	b480      	push	{r7}
 8001092:	b087      	sub	sp, #28
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80010a0:	d10c      	bne.n	80010bc <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80010a2:	4b1b      	ldr	r3, [pc, #108]	; (8001110 <HAL_TIM_PWM_MspInit+0x80>)
 80010a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010a6:	4a1a      	ldr	r2, [pc, #104]	; (8001110 <HAL_TIM_PWM_MspInit+0x80>)
 80010a8:	f043 0301 	orr.w	r3, r3, #1
 80010ac:	6593      	str	r3, [r2, #88]	; 0x58
 80010ae:	4b18      	ldr	r3, [pc, #96]	; (8001110 <HAL_TIM_PWM_MspInit+0x80>)
 80010b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010b2:	f003 0301 	and.w	r3, r3, #1
 80010b6:	617b      	str	r3, [r7, #20]
 80010b8:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 80010ba:	e022      	b.n	8001102 <HAL_TIM_PWM_MspInit+0x72>
  else if(htim_pwm->Instance==TIM8)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4a14      	ldr	r2, [pc, #80]	; (8001114 <HAL_TIM_PWM_MspInit+0x84>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d10c      	bne.n	80010e0 <HAL_TIM_PWM_MspInit+0x50>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80010c6:	4b12      	ldr	r3, [pc, #72]	; (8001110 <HAL_TIM_PWM_MspInit+0x80>)
 80010c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010ca:	4a11      	ldr	r2, [pc, #68]	; (8001110 <HAL_TIM_PWM_MspInit+0x80>)
 80010cc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80010d0:	6613      	str	r3, [r2, #96]	; 0x60
 80010d2:	4b0f      	ldr	r3, [pc, #60]	; (8001110 <HAL_TIM_PWM_MspInit+0x80>)
 80010d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010d6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80010da:	613b      	str	r3, [r7, #16]
 80010dc:	693b      	ldr	r3, [r7, #16]
}
 80010de:	e010      	b.n	8001102 <HAL_TIM_PWM_MspInit+0x72>
  else if(htim_pwm->Instance==TIM15)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	4a0c      	ldr	r2, [pc, #48]	; (8001118 <HAL_TIM_PWM_MspInit+0x88>)
 80010e6:	4293      	cmp	r3, r2
 80010e8:	d10b      	bne.n	8001102 <HAL_TIM_PWM_MspInit+0x72>
    __HAL_RCC_TIM15_CLK_ENABLE();
 80010ea:	4b09      	ldr	r3, [pc, #36]	; (8001110 <HAL_TIM_PWM_MspInit+0x80>)
 80010ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010ee:	4a08      	ldr	r2, [pc, #32]	; (8001110 <HAL_TIM_PWM_MspInit+0x80>)
 80010f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010f4:	6613      	str	r3, [r2, #96]	; 0x60
 80010f6:	4b06      	ldr	r3, [pc, #24]	; (8001110 <HAL_TIM_PWM_MspInit+0x80>)
 80010f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010fe:	60fb      	str	r3, [r7, #12]
 8001100:	68fb      	ldr	r3, [r7, #12]
}
 8001102:	bf00      	nop
 8001104:	371c      	adds	r7, #28
 8001106:	46bd      	mov	sp, r7
 8001108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110c:	4770      	bx	lr
 800110e:	bf00      	nop
 8001110:	40021000 	.word	0x40021000
 8001114:	40013400 	.word	0x40013400
 8001118:	40014000 	.word	0x40014000

0800111c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b086      	sub	sp, #24
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	4a1f      	ldr	r2, [pc, #124]	; (80011a8 <HAL_TIM_Base_MspInit+0x8c>)
 800112a:	4293      	cmp	r3, r2
 800112c:	d114      	bne.n	8001158 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800112e:	4b1f      	ldr	r3, [pc, #124]	; (80011ac <HAL_TIM_Base_MspInit+0x90>)
 8001130:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001132:	4a1e      	ldr	r2, [pc, #120]	; (80011ac <HAL_TIM_Base_MspInit+0x90>)
 8001134:	f043 0310 	orr.w	r3, r3, #16
 8001138:	6593      	str	r3, [r2, #88]	; 0x58
 800113a:	4b1c      	ldr	r3, [pc, #112]	; (80011ac <HAL_TIM_Base_MspInit+0x90>)
 800113c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800113e:	f003 0310 	and.w	r3, r3, #16
 8001142:	617b      	str	r3, [r7, #20]
 8001144:	697b      	ldr	r3, [r7, #20]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001146:	2200      	movs	r2, #0
 8001148:	2100      	movs	r1, #0
 800114a:	2036      	movs	r0, #54	; 0x36
 800114c:	f000 fadd 	bl	800170a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001150:	2036      	movs	r0, #54	; 0x36
 8001152:	f000 faf4 	bl	800173e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8001156:	e022      	b.n	800119e <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM16)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	4a14      	ldr	r2, [pc, #80]	; (80011b0 <HAL_TIM_Base_MspInit+0x94>)
 800115e:	4293      	cmp	r3, r2
 8001160:	d10c      	bne.n	800117c <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001162:	4b12      	ldr	r3, [pc, #72]	; (80011ac <HAL_TIM_Base_MspInit+0x90>)
 8001164:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001166:	4a11      	ldr	r2, [pc, #68]	; (80011ac <HAL_TIM_Base_MspInit+0x90>)
 8001168:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800116c:	6613      	str	r3, [r2, #96]	; 0x60
 800116e:	4b0f      	ldr	r3, [pc, #60]	; (80011ac <HAL_TIM_Base_MspInit+0x90>)
 8001170:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001172:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001176:	613b      	str	r3, [r7, #16]
 8001178:	693b      	ldr	r3, [r7, #16]
}
 800117a:	e010      	b.n	800119e <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM17)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	4a0c      	ldr	r2, [pc, #48]	; (80011b4 <HAL_TIM_Base_MspInit+0x98>)
 8001182:	4293      	cmp	r3, r2
 8001184:	d10b      	bne.n	800119e <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8001186:	4b09      	ldr	r3, [pc, #36]	; (80011ac <HAL_TIM_Base_MspInit+0x90>)
 8001188:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800118a:	4a08      	ldr	r2, [pc, #32]	; (80011ac <HAL_TIM_Base_MspInit+0x90>)
 800118c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001190:	6613      	str	r3, [r2, #96]	; 0x60
 8001192:	4b06      	ldr	r3, [pc, #24]	; (80011ac <HAL_TIM_Base_MspInit+0x90>)
 8001194:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001196:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800119a:	60fb      	str	r3, [r7, #12]
 800119c:	68fb      	ldr	r3, [r7, #12]
}
 800119e:	bf00      	nop
 80011a0:	3718      	adds	r7, #24
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	40001000 	.word	0x40001000
 80011ac:	40021000 	.word	0x40021000
 80011b0:	40014400 	.word	0x40014400
 80011b4:	40014800 	.word	0x40014800

080011b8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b08c      	sub	sp, #48	; 0x30
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011c0:	f107 031c 	add.w	r3, r7, #28
 80011c4:	2200      	movs	r2, #0
 80011c6:	601a      	str	r2, [r3, #0]
 80011c8:	605a      	str	r2, [r3, #4]
 80011ca:	609a      	str	r2, [r3, #8]
 80011cc:	60da      	str	r2, [r3, #12]
 80011ce:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80011d8:	d12f      	bne.n	800123a <HAL_TIM_MspPostInit+0x82>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011da:	4b60      	ldr	r3, [pc, #384]	; (800135c <HAL_TIM_MspPostInit+0x1a4>)
 80011dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011de:	4a5f      	ldr	r2, [pc, #380]	; (800135c <HAL_TIM_MspPostInit+0x1a4>)
 80011e0:	f043 0301 	orr.w	r3, r3, #1
 80011e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011e6:	4b5d      	ldr	r3, [pc, #372]	; (800135c <HAL_TIM_MspPostInit+0x1a4>)
 80011e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ea:	f003 0301 	and.w	r3, r3, #1
 80011ee:	61bb      	str	r3, [r7, #24]
 80011f0:	69bb      	ldr	r3, [r7, #24]
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA10     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 80011f2:	2307      	movs	r3, #7
 80011f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011f6:	2302      	movs	r3, #2
 80011f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fa:	2300      	movs	r3, #0
 80011fc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011fe:	2300      	movs	r3, #0
 8001200:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001202:	2301      	movs	r3, #1
 8001204:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001206:	f107 031c 	add.w	r3, r7, #28
 800120a:	4619      	mov	r1, r3
 800120c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001210:	f000 fab0 	bl	8001774 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001214:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001218:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800121a:	2302      	movs	r3, #2
 800121c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121e:	2300      	movs	r3, #0
 8001220:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001222:	2300      	movs	r3, #0
 8001224:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM2;
 8001226:	230a      	movs	r3, #10
 8001228:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800122a:	f107 031c 	add.w	r3, r7, #28
 800122e:	4619      	mov	r1, r3
 8001230:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001234:	f000 fa9e 	bl	8001774 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 8001238:	e08b      	b.n	8001352 <HAL_TIM_MspPostInit+0x19a>
  else if(htim->Instance==TIM8)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	4a48      	ldr	r2, [pc, #288]	; (8001360 <HAL_TIM_MspPostInit+0x1a8>)
 8001240:	4293      	cmp	r3, r2
 8001242:	d11e      	bne.n	8001282 <HAL_TIM_MspPostInit+0xca>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001244:	4b45      	ldr	r3, [pc, #276]	; (800135c <HAL_TIM_MspPostInit+0x1a4>)
 8001246:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001248:	4a44      	ldr	r2, [pc, #272]	; (800135c <HAL_TIM_MspPostInit+0x1a4>)
 800124a:	f043 0301 	orr.w	r3, r3, #1
 800124e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001250:	4b42      	ldr	r3, [pc, #264]	; (800135c <HAL_TIM_MspPostInit+0x1a4>)
 8001252:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001254:	f003 0301 	and.w	r3, r3, #1
 8001258:	617b      	str	r3, [r7, #20]
 800125a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800125c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001260:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001262:	2302      	movs	r3, #2
 8001264:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001266:	2300      	movs	r3, #0
 8001268:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800126a:	2300      	movs	r3, #0
 800126c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM8;
 800126e:	2302      	movs	r3, #2
 8001270:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001272:	f107 031c 	add.w	r3, r7, #28
 8001276:	4619      	mov	r1, r3
 8001278:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800127c:	f000 fa7a 	bl	8001774 <HAL_GPIO_Init>
}
 8001280:	e067      	b.n	8001352 <HAL_TIM_MspPostInit+0x19a>
  else if(htim->Instance==TIM15)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	4a37      	ldr	r2, [pc, #220]	; (8001364 <HAL_TIM_MspPostInit+0x1ac>)
 8001288:	4293      	cmp	r3, r2
 800128a:	d11d      	bne.n	80012c8 <HAL_TIM_MspPostInit+0x110>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800128c:	4b33      	ldr	r3, [pc, #204]	; (800135c <HAL_TIM_MspPostInit+0x1a4>)
 800128e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001290:	4a32      	ldr	r2, [pc, #200]	; (800135c <HAL_TIM_MspPostInit+0x1a4>)
 8001292:	f043 0301 	orr.w	r3, r3, #1
 8001296:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001298:	4b30      	ldr	r3, [pc, #192]	; (800135c <HAL_TIM_MspPostInit+0x1a4>)
 800129a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800129c:	f003 0301 	and.w	r3, r3, #1
 80012a0:	613b      	str	r3, [r7, #16]
 80012a2:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80012a4:	2308      	movs	r3, #8
 80012a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012a8:	2302      	movs	r3, #2
 80012aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ac:	2300      	movs	r3, #0
 80012ae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b0:	2300      	movs	r3, #0
 80012b2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM15;
 80012b4:	2309      	movs	r3, #9
 80012b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012b8:	f107 031c 	add.w	r3, r7, #28
 80012bc:	4619      	mov	r1, r3
 80012be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012c2:	f000 fa57 	bl	8001774 <HAL_GPIO_Init>
}
 80012c6:	e044      	b.n	8001352 <HAL_TIM_MspPostInit+0x19a>
  else if(htim->Instance==TIM16)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4a26      	ldr	r2, [pc, #152]	; (8001368 <HAL_TIM_MspPostInit+0x1b0>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d11d      	bne.n	800130e <HAL_TIM_MspPostInit+0x156>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012d2:	4b22      	ldr	r3, [pc, #136]	; (800135c <HAL_TIM_MspPostInit+0x1a4>)
 80012d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012d6:	4a21      	ldr	r2, [pc, #132]	; (800135c <HAL_TIM_MspPostInit+0x1a4>)
 80012d8:	f043 0301 	orr.w	r3, r3, #1
 80012dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012de:	4b1f      	ldr	r3, [pc, #124]	; (800135c <HAL_TIM_MspPostInit+0x1a4>)
 80012e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012e2:	f003 0301 	and.w	r3, r3, #1
 80012e6:	60fb      	str	r3, [r7, #12]
 80012e8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80012ea:	2340      	movs	r3, #64	; 0x40
 80012ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ee:	2302      	movs	r3, #2
 80012f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f2:	2300      	movs	r3, #0
 80012f4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012f6:	2300      	movs	r3, #0
 80012f8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 80012fa:	2301      	movs	r3, #1
 80012fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012fe:	f107 031c 	add.w	r3, r7, #28
 8001302:	4619      	mov	r1, r3
 8001304:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001308:	f000 fa34 	bl	8001774 <HAL_GPIO_Init>
}
 800130c:	e021      	b.n	8001352 <HAL_TIM_MspPostInit+0x19a>
  else if(htim->Instance==TIM17)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	4a16      	ldr	r2, [pc, #88]	; (800136c <HAL_TIM_MspPostInit+0x1b4>)
 8001314:	4293      	cmp	r3, r2
 8001316:	d11c      	bne.n	8001352 <HAL_TIM_MspPostInit+0x19a>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001318:	4b10      	ldr	r3, [pc, #64]	; (800135c <HAL_TIM_MspPostInit+0x1a4>)
 800131a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800131c:	4a0f      	ldr	r2, [pc, #60]	; (800135c <HAL_TIM_MspPostInit+0x1a4>)
 800131e:	f043 0301 	orr.w	r3, r3, #1
 8001322:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001324:	4b0d      	ldr	r3, [pc, #52]	; (800135c <HAL_TIM_MspPostInit+0x1a4>)
 8001326:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001328:	f003 0301 	and.w	r3, r3, #1
 800132c:	60bb      	str	r3, [r7, #8]
 800132e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001330:	2380      	movs	r3, #128	; 0x80
 8001332:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001334:	2302      	movs	r3, #2
 8001336:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001338:	2300      	movs	r3, #0
 800133a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800133c:	2300      	movs	r3, #0
 800133e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM17;
 8001340:	2301      	movs	r3, #1
 8001342:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001344:	f107 031c 	add.w	r3, r7, #28
 8001348:	4619      	mov	r1, r3
 800134a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800134e:	f000 fa11 	bl	8001774 <HAL_GPIO_Init>
}
 8001352:	bf00      	nop
 8001354:	3730      	adds	r7, #48	; 0x30
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	40021000 	.word	0x40021000
 8001360:	40013400 	.word	0x40013400
 8001364:	40014000 	.word	0x40014000
 8001368:	40014400 	.word	0x40014400
 800136c:	40014800 	.word	0x40014800

08001370 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001370:	b480      	push	{r7}
 8001372:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001374:	bf00      	nop
 8001376:	46bd      	mov	sp, r7
 8001378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137c:	4770      	bx	lr

0800137e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800137e:	b480      	push	{r7}
 8001380:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001382:	e7fe      	b.n	8001382 <HardFault_Handler+0x4>

08001384 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001384:	b480      	push	{r7}
 8001386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001388:	e7fe      	b.n	8001388 <MemManage_Handler+0x4>

0800138a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800138a:	b480      	push	{r7}
 800138c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800138e:	e7fe      	b.n	800138e <BusFault_Handler+0x4>

08001390 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001390:	b480      	push	{r7}
 8001392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001394:	e7fe      	b.n	8001394 <UsageFault_Handler+0x4>

08001396 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001396:	b480      	push	{r7}
 8001398:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800139a:	bf00      	nop
 800139c:	46bd      	mov	sp, r7
 800139e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a2:	4770      	bx	lr

080013a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013a4:	b480      	push	{r7}
 80013a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013a8:	bf00      	nop
 80013aa:	46bd      	mov	sp, r7
 80013ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b0:	4770      	bx	lr

080013b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013b2:	b480      	push	{r7}
 80013b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013b6:	bf00      	nop
 80013b8:	46bd      	mov	sp, r7
 80013ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013be:	4770      	bx	lr

080013c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013c4:	f000 f8a8 	bl	8001518 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013c8:	bf00      	nop
 80013ca:	bd80      	pop	{r7, pc}

080013cc <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80013d0:	4802      	ldr	r0, [pc, #8]	; (80013dc <USB_LP_IRQHandler+0x10>)
 80013d2:	f000 fc8a 	bl	8001cea <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 80013d6:	bf00      	nop
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	2000135c 	.word	0x2000135c

080013e0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80013e4:	4802      	ldr	r0, [pc, #8]	; (80013f0 <TIM6_DAC_IRQHandler+0x10>)
 80013e6:	f003 f9ce 	bl	8004786 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80013ea:	bf00      	nop
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	20000588 	.word	0x20000588

080013f4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80013f8:	4b08      	ldr	r3, [pc, #32]	; (800141c <SystemInit+0x28>)
 80013fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013fe:	4a07      	ldr	r2, [pc, #28]	; (800141c <SystemInit+0x28>)
 8001400:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001404:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001408:	4b04      	ldr	r3, [pc, #16]	; (800141c <SystemInit+0x28>)
 800140a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800140e:	609a      	str	r2, [r3, #8]
#endif
}
 8001410:	bf00      	nop
 8001412:	46bd      	mov	sp, r7
 8001414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001418:	4770      	bx	lr
 800141a:	bf00      	nop
 800141c:	e000ed00 	.word	0xe000ed00

08001420 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001420:	480d      	ldr	r0, [pc, #52]	; (8001458 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001422:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001424:	480d      	ldr	r0, [pc, #52]	; (800145c <LoopForever+0x6>)
  ldr r1, =_edata
 8001426:	490e      	ldr	r1, [pc, #56]	; (8001460 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001428:	4a0e      	ldr	r2, [pc, #56]	; (8001464 <LoopForever+0xe>)
  movs r3, #0
 800142a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800142c:	e002      	b.n	8001434 <LoopCopyDataInit>

0800142e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800142e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001430:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001432:	3304      	adds	r3, #4

08001434 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001434:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001436:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001438:	d3f9      	bcc.n	800142e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800143a:	4a0b      	ldr	r2, [pc, #44]	; (8001468 <LoopForever+0x12>)
  ldr r4, =_ebss
 800143c:	4c0b      	ldr	r4, [pc, #44]	; (800146c <LoopForever+0x16>)
  movs r3, #0
 800143e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001440:	e001      	b.n	8001446 <LoopFillZerobss>

08001442 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001442:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001444:	3204      	adds	r2, #4

08001446 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001446:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001448:	d3fb      	bcc.n	8001442 <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800144a:	f7ff ffd3 	bl	80013f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800144e:	f008 fb07 	bl	8009a60 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001452:	f7fe ff01 	bl	8000258 <main>

08001456 <LoopForever>:

LoopForever:
    b LoopForever
 8001456:	e7fe      	b.n	8001456 <LoopForever>
  ldr   r0, =_estack
 8001458:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 800145c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001460:	200001c0 	.word	0x200001c0
  ldr r2, =_sidata
 8001464:	08009b48 	.word	0x08009b48
  ldr r2, =_sbss
 8001468:	200001c0 	.word	0x200001c0
  ldr r4, =_ebss
 800146c:	20001650 	.word	0x20001650

08001470 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001470:	e7fe      	b.n	8001470 <ADC1_2_IRQHandler>

08001472 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001472:	b580      	push	{r7, lr}
 8001474:	b082      	sub	sp, #8
 8001476:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001478:	2300      	movs	r3, #0
 800147a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800147c:	2003      	movs	r0, #3
 800147e:	f000 f939 	bl	80016f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001482:	2000      	movs	r0, #0
 8001484:	f000 f80e 	bl	80014a4 <HAL_InitTick>
 8001488:	4603      	mov	r3, r0
 800148a:	2b00      	cmp	r3, #0
 800148c:	d002      	beq.n	8001494 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800148e:	2301      	movs	r3, #1
 8001490:	71fb      	strb	r3, [r7, #7]
 8001492:	e001      	b.n	8001498 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001494:	f7ff fd32 	bl	8000efc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001498:	79fb      	ldrb	r3, [r7, #7]

}
 800149a:	4618      	mov	r0, r3
 800149c:	3708      	adds	r7, #8
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
	...

080014a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b084      	sub	sp, #16
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80014ac:	2300      	movs	r3, #0
 80014ae:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80014b0:	4b16      	ldr	r3, [pc, #88]	; (800150c <HAL_InitTick+0x68>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d022      	beq.n	80014fe <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80014b8:	4b15      	ldr	r3, [pc, #84]	; (8001510 <HAL_InitTick+0x6c>)
 80014ba:	681a      	ldr	r2, [r3, #0]
 80014bc:	4b13      	ldr	r3, [pc, #76]	; (800150c <HAL_InitTick+0x68>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80014c4:	fbb1 f3f3 	udiv	r3, r1, r3
 80014c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80014cc:	4618      	mov	r0, r3
 80014ce:	f000 f944 	bl	800175a <HAL_SYSTICK_Config>
 80014d2:	4603      	mov	r3, r0
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d10f      	bne.n	80014f8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	2b0f      	cmp	r3, #15
 80014dc:	d809      	bhi.n	80014f2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014de:	2200      	movs	r2, #0
 80014e0:	6879      	ldr	r1, [r7, #4]
 80014e2:	f04f 30ff 	mov.w	r0, #4294967295
 80014e6:	f000 f910 	bl	800170a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80014ea:	4a0a      	ldr	r2, [pc, #40]	; (8001514 <HAL_InitTick+0x70>)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6013      	str	r3, [r2, #0]
 80014f0:	e007      	b.n	8001502 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80014f2:	2301      	movs	r3, #1
 80014f4:	73fb      	strb	r3, [r7, #15]
 80014f6:	e004      	b.n	8001502 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80014f8:	2301      	movs	r3, #1
 80014fa:	73fb      	strb	r3, [r7, #15]
 80014fc:	e001      	b.n	8001502 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80014fe:	2301      	movs	r3, #1
 8001500:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001502:	7bfb      	ldrb	r3, [r7, #15]
}
 8001504:	4618      	mov	r0, r3
 8001506:	3710      	adds	r7, #16
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}
 800150c:	20000044 	.word	0x20000044
 8001510:	2000003c 	.word	0x2000003c
 8001514:	20000040 	.word	0x20000040

08001518 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800151c:	4b05      	ldr	r3, [pc, #20]	; (8001534 <HAL_IncTick+0x1c>)
 800151e:	681a      	ldr	r2, [r3, #0]
 8001520:	4b05      	ldr	r3, [pc, #20]	; (8001538 <HAL_IncTick+0x20>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4413      	add	r3, r2
 8001526:	4a03      	ldr	r2, [pc, #12]	; (8001534 <HAL_IncTick+0x1c>)
 8001528:	6013      	str	r3, [r2, #0]
}
 800152a:	bf00      	nop
 800152c:	46bd      	mov	sp, r7
 800152e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001532:	4770      	bx	lr
 8001534:	200006b8 	.word	0x200006b8
 8001538:	20000044 	.word	0x20000044

0800153c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0
  return uwTick;
 8001540:	4b03      	ldr	r3, [pc, #12]	; (8001550 <HAL_GetTick+0x14>)
 8001542:	681b      	ldr	r3, [r3, #0]
}
 8001544:	4618      	mov	r0, r3
 8001546:	46bd      	mov	sp, r7
 8001548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154c:	4770      	bx	lr
 800154e:	bf00      	nop
 8001550:	200006b8 	.word	0x200006b8

08001554 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001554:	b480      	push	{r7}
 8001556:	b085      	sub	sp, #20
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	f003 0307 	and.w	r3, r3, #7
 8001562:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001564:	4b0c      	ldr	r3, [pc, #48]	; (8001598 <__NVIC_SetPriorityGrouping+0x44>)
 8001566:	68db      	ldr	r3, [r3, #12]
 8001568:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800156a:	68ba      	ldr	r2, [r7, #8]
 800156c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001570:	4013      	ands	r3, r2
 8001572:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001578:	68bb      	ldr	r3, [r7, #8]
 800157a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800157c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001580:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001584:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001586:	4a04      	ldr	r2, [pc, #16]	; (8001598 <__NVIC_SetPriorityGrouping+0x44>)
 8001588:	68bb      	ldr	r3, [r7, #8]
 800158a:	60d3      	str	r3, [r2, #12]
}
 800158c:	bf00      	nop
 800158e:	3714      	adds	r7, #20
 8001590:	46bd      	mov	sp, r7
 8001592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001596:	4770      	bx	lr
 8001598:	e000ed00 	.word	0xe000ed00

0800159c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800159c:	b480      	push	{r7}
 800159e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015a0:	4b04      	ldr	r3, [pc, #16]	; (80015b4 <__NVIC_GetPriorityGrouping+0x18>)
 80015a2:	68db      	ldr	r3, [r3, #12]
 80015a4:	0a1b      	lsrs	r3, r3, #8
 80015a6:	f003 0307 	and.w	r3, r3, #7
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	46bd      	mov	sp, r7
 80015ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b2:	4770      	bx	lr
 80015b4:	e000ed00 	.word	0xe000ed00

080015b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015b8:	b480      	push	{r7}
 80015ba:	b083      	sub	sp, #12
 80015bc:	af00      	add	r7, sp, #0
 80015be:	4603      	mov	r3, r0
 80015c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	db0b      	blt.n	80015e2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015ca:	79fb      	ldrb	r3, [r7, #7]
 80015cc:	f003 021f 	and.w	r2, r3, #31
 80015d0:	4907      	ldr	r1, [pc, #28]	; (80015f0 <__NVIC_EnableIRQ+0x38>)
 80015d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015d6:	095b      	lsrs	r3, r3, #5
 80015d8:	2001      	movs	r0, #1
 80015da:	fa00 f202 	lsl.w	r2, r0, r2
 80015de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80015e2:	bf00      	nop
 80015e4:	370c      	adds	r7, #12
 80015e6:	46bd      	mov	sp, r7
 80015e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ec:	4770      	bx	lr
 80015ee:	bf00      	nop
 80015f0:	e000e100 	.word	0xe000e100

080015f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015f4:	b480      	push	{r7}
 80015f6:	b083      	sub	sp, #12
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	4603      	mov	r3, r0
 80015fc:	6039      	str	r1, [r7, #0]
 80015fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001600:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001604:	2b00      	cmp	r3, #0
 8001606:	db0a      	blt.n	800161e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	b2da      	uxtb	r2, r3
 800160c:	490c      	ldr	r1, [pc, #48]	; (8001640 <__NVIC_SetPriority+0x4c>)
 800160e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001612:	0112      	lsls	r2, r2, #4
 8001614:	b2d2      	uxtb	r2, r2
 8001616:	440b      	add	r3, r1
 8001618:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800161c:	e00a      	b.n	8001634 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	b2da      	uxtb	r2, r3
 8001622:	4908      	ldr	r1, [pc, #32]	; (8001644 <__NVIC_SetPriority+0x50>)
 8001624:	79fb      	ldrb	r3, [r7, #7]
 8001626:	f003 030f 	and.w	r3, r3, #15
 800162a:	3b04      	subs	r3, #4
 800162c:	0112      	lsls	r2, r2, #4
 800162e:	b2d2      	uxtb	r2, r2
 8001630:	440b      	add	r3, r1
 8001632:	761a      	strb	r2, [r3, #24]
}
 8001634:	bf00      	nop
 8001636:	370c      	adds	r7, #12
 8001638:	46bd      	mov	sp, r7
 800163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163e:	4770      	bx	lr
 8001640:	e000e100 	.word	0xe000e100
 8001644:	e000ed00 	.word	0xe000ed00

08001648 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001648:	b480      	push	{r7}
 800164a:	b089      	sub	sp, #36	; 0x24
 800164c:	af00      	add	r7, sp, #0
 800164e:	60f8      	str	r0, [r7, #12]
 8001650:	60b9      	str	r1, [r7, #8]
 8001652:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	f003 0307 	and.w	r3, r3, #7
 800165a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800165c:	69fb      	ldr	r3, [r7, #28]
 800165e:	f1c3 0307 	rsb	r3, r3, #7
 8001662:	2b04      	cmp	r3, #4
 8001664:	bf28      	it	cs
 8001666:	2304      	movcs	r3, #4
 8001668:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800166a:	69fb      	ldr	r3, [r7, #28]
 800166c:	3304      	adds	r3, #4
 800166e:	2b06      	cmp	r3, #6
 8001670:	d902      	bls.n	8001678 <NVIC_EncodePriority+0x30>
 8001672:	69fb      	ldr	r3, [r7, #28]
 8001674:	3b03      	subs	r3, #3
 8001676:	e000      	b.n	800167a <NVIC_EncodePriority+0x32>
 8001678:	2300      	movs	r3, #0
 800167a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800167c:	f04f 32ff 	mov.w	r2, #4294967295
 8001680:	69bb      	ldr	r3, [r7, #24]
 8001682:	fa02 f303 	lsl.w	r3, r2, r3
 8001686:	43da      	mvns	r2, r3
 8001688:	68bb      	ldr	r3, [r7, #8]
 800168a:	401a      	ands	r2, r3
 800168c:	697b      	ldr	r3, [r7, #20]
 800168e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001690:	f04f 31ff 	mov.w	r1, #4294967295
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	fa01 f303 	lsl.w	r3, r1, r3
 800169a:	43d9      	mvns	r1, r3
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016a0:	4313      	orrs	r3, r2
         );
}
 80016a2:	4618      	mov	r0, r3
 80016a4:	3724      	adds	r7, #36	; 0x24
 80016a6:	46bd      	mov	sp, r7
 80016a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ac:	4770      	bx	lr
	...

080016b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b082      	sub	sp, #8
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	3b01      	subs	r3, #1
 80016bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016c0:	d301      	bcc.n	80016c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016c2:	2301      	movs	r3, #1
 80016c4:	e00f      	b.n	80016e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016c6:	4a0a      	ldr	r2, [pc, #40]	; (80016f0 <SysTick_Config+0x40>)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	3b01      	subs	r3, #1
 80016cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016ce:	210f      	movs	r1, #15
 80016d0:	f04f 30ff 	mov.w	r0, #4294967295
 80016d4:	f7ff ff8e 	bl	80015f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016d8:	4b05      	ldr	r3, [pc, #20]	; (80016f0 <SysTick_Config+0x40>)
 80016da:	2200      	movs	r2, #0
 80016dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016de:	4b04      	ldr	r3, [pc, #16]	; (80016f0 <SysTick_Config+0x40>)
 80016e0:	2207      	movs	r2, #7
 80016e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016e4:	2300      	movs	r3, #0
}
 80016e6:	4618      	mov	r0, r3
 80016e8:	3708      	adds	r7, #8
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	e000e010 	.word	0xe000e010

080016f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b082      	sub	sp, #8
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016fc:	6878      	ldr	r0, [r7, #4]
 80016fe:	f7ff ff29 	bl	8001554 <__NVIC_SetPriorityGrouping>
}
 8001702:	bf00      	nop
 8001704:	3708      	adds	r7, #8
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}

0800170a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800170a:	b580      	push	{r7, lr}
 800170c:	b086      	sub	sp, #24
 800170e:	af00      	add	r7, sp, #0
 8001710:	4603      	mov	r3, r0
 8001712:	60b9      	str	r1, [r7, #8]
 8001714:	607a      	str	r2, [r7, #4]
 8001716:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001718:	f7ff ff40 	bl	800159c <__NVIC_GetPriorityGrouping>
 800171c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800171e:	687a      	ldr	r2, [r7, #4]
 8001720:	68b9      	ldr	r1, [r7, #8]
 8001722:	6978      	ldr	r0, [r7, #20]
 8001724:	f7ff ff90 	bl	8001648 <NVIC_EncodePriority>
 8001728:	4602      	mov	r2, r0
 800172a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800172e:	4611      	mov	r1, r2
 8001730:	4618      	mov	r0, r3
 8001732:	f7ff ff5f 	bl	80015f4 <__NVIC_SetPriority>
}
 8001736:	bf00      	nop
 8001738:	3718      	adds	r7, #24
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}

0800173e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800173e:	b580      	push	{r7, lr}
 8001740:	b082      	sub	sp, #8
 8001742:	af00      	add	r7, sp, #0
 8001744:	4603      	mov	r3, r0
 8001746:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001748:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800174c:	4618      	mov	r0, r3
 800174e:	f7ff ff33 	bl	80015b8 <__NVIC_EnableIRQ>
}
 8001752:	bf00      	nop
 8001754:	3708      	adds	r7, #8
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}

0800175a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800175a:	b580      	push	{r7, lr}
 800175c:	b082      	sub	sp, #8
 800175e:	af00      	add	r7, sp, #0
 8001760:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001762:	6878      	ldr	r0, [r7, #4]
 8001764:	f7ff ffa4 	bl	80016b0 <SysTick_Config>
 8001768:	4603      	mov	r3, r0
}
 800176a:	4618      	mov	r0, r3
 800176c:	3708      	adds	r7, #8
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}
	...

08001774 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001774:	b480      	push	{r7}
 8001776:	b087      	sub	sp, #28
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
 800177c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800177e:	2300      	movs	r3, #0
 8001780:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001782:	e15a      	b.n	8001a3a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	681a      	ldr	r2, [r3, #0]
 8001788:	2101      	movs	r1, #1
 800178a:	697b      	ldr	r3, [r7, #20]
 800178c:	fa01 f303 	lsl.w	r3, r1, r3
 8001790:	4013      	ands	r3, r2
 8001792:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	2b00      	cmp	r3, #0
 8001798:	f000 814c 	beq.w	8001a34 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	2b01      	cmp	r3, #1
 80017a2:	d00b      	beq.n	80017bc <HAL_GPIO_Init+0x48>
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	2b02      	cmp	r3, #2
 80017aa:	d007      	beq.n	80017bc <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80017b0:	2b11      	cmp	r3, #17
 80017b2:	d003      	beq.n	80017bc <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	2b12      	cmp	r3, #18
 80017ba:	d130      	bne.n	800181e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	689b      	ldr	r3, [r3, #8]
 80017c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80017c2:	697b      	ldr	r3, [r7, #20]
 80017c4:	005b      	lsls	r3, r3, #1
 80017c6:	2203      	movs	r2, #3
 80017c8:	fa02 f303 	lsl.w	r3, r2, r3
 80017cc:	43db      	mvns	r3, r3
 80017ce:	693a      	ldr	r2, [r7, #16]
 80017d0:	4013      	ands	r3, r2
 80017d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	68da      	ldr	r2, [r3, #12]
 80017d8:	697b      	ldr	r3, [r7, #20]
 80017da:	005b      	lsls	r3, r3, #1
 80017dc:	fa02 f303 	lsl.w	r3, r2, r3
 80017e0:	693a      	ldr	r2, [r7, #16]
 80017e2:	4313      	orrs	r3, r2
 80017e4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	693a      	ldr	r2, [r7, #16]
 80017ea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80017f2:	2201      	movs	r2, #1
 80017f4:	697b      	ldr	r3, [r7, #20]
 80017f6:	fa02 f303 	lsl.w	r3, r2, r3
 80017fa:	43db      	mvns	r3, r3
 80017fc:	693a      	ldr	r2, [r7, #16]
 80017fe:	4013      	ands	r3, r2
 8001800:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	091b      	lsrs	r3, r3, #4
 8001808:	f003 0201 	and.w	r2, r3, #1
 800180c:	697b      	ldr	r3, [r7, #20]
 800180e:	fa02 f303 	lsl.w	r3, r2, r3
 8001812:	693a      	ldr	r2, [r7, #16]
 8001814:	4313      	orrs	r3, r2
 8001816:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	693a      	ldr	r2, [r7, #16]
 800181c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	68db      	ldr	r3, [r3, #12]
 8001822:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001824:	697b      	ldr	r3, [r7, #20]
 8001826:	005b      	lsls	r3, r3, #1
 8001828:	2203      	movs	r2, #3
 800182a:	fa02 f303 	lsl.w	r3, r2, r3
 800182e:	43db      	mvns	r3, r3
 8001830:	693a      	ldr	r2, [r7, #16]
 8001832:	4013      	ands	r3, r2
 8001834:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	689a      	ldr	r2, [r3, #8]
 800183a:	697b      	ldr	r3, [r7, #20]
 800183c:	005b      	lsls	r3, r3, #1
 800183e:	fa02 f303 	lsl.w	r3, r2, r3
 8001842:	693a      	ldr	r2, [r7, #16]
 8001844:	4313      	orrs	r3, r2
 8001846:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	693a      	ldr	r2, [r7, #16]
 800184c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	2b02      	cmp	r3, #2
 8001854:	d003      	beq.n	800185e <HAL_GPIO_Init+0xea>
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	2b12      	cmp	r3, #18
 800185c:	d123      	bne.n	80018a6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800185e:	697b      	ldr	r3, [r7, #20]
 8001860:	08da      	lsrs	r2, r3, #3
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	3208      	adds	r2, #8
 8001866:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800186a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800186c:	697b      	ldr	r3, [r7, #20]
 800186e:	f003 0307 	and.w	r3, r3, #7
 8001872:	009b      	lsls	r3, r3, #2
 8001874:	220f      	movs	r2, #15
 8001876:	fa02 f303 	lsl.w	r3, r2, r3
 800187a:	43db      	mvns	r3, r3
 800187c:	693a      	ldr	r2, [r7, #16]
 800187e:	4013      	ands	r3, r2
 8001880:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	691a      	ldr	r2, [r3, #16]
 8001886:	697b      	ldr	r3, [r7, #20]
 8001888:	f003 0307 	and.w	r3, r3, #7
 800188c:	009b      	lsls	r3, r3, #2
 800188e:	fa02 f303 	lsl.w	r3, r2, r3
 8001892:	693a      	ldr	r2, [r7, #16]
 8001894:	4313      	orrs	r3, r2
 8001896:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001898:	697b      	ldr	r3, [r7, #20]
 800189a:	08da      	lsrs	r2, r3, #3
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	3208      	adds	r2, #8
 80018a0:	6939      	ldr	r1, [r7, #16]
 80018a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80018ac:	697b      	ldr	r3, [r7, #20]
 80018ae:	005b      	lsls	r3, r3, #1
 80018b0:	2203      	movs	r2, #3
 80018b2:	fa02 f303 	lsl.w	r3, r2, r3
 80018b6:	43db      	mvns	r3, r3
 80018b8:	693a      	ldr	r2, [r7, #16]
 80018ba:	4013      	ands	r3, r2
 80018bc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	f003 0203 	and.w	r2, r3, #3
 80018c6:	697b      	ldr	r3, [r7, #20]
 80018c8:	005b      	lsls	r3, r3, #1
 80018ca:	fa02 f303 	lsl.w	r3, r2, r3
 80018ce:	693a      	ldr	r2, [r7, #16]
 80018d0:	4313      	orrs	r3, r2
 80018d2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	693a      	ldr	r2, [r7, #16]
 80018d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	f000 80a6 	beq.w	8001a34 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018e8:	4b5b      	ldr	r3, [pc, #364]	; (8001a58 <HAL_GPIO_Init+0x2e4>)
 80018ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018ec:	4a5a      	ldr	r2, [pc, #360]	; (8001a58 <HAL_GPIO_Init+0x2e4>)
 80018ee:	f043 0301 	orr.w	r3, r3, #1
 80018f2:	6613      	str	r3, [r2, #96]	; 0x60
 80018f4:	4b58      	ldr	r3, [pc, #352]	; (8001a58 <HAL_GPIO_Init+0x2e4>)
 80018f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018f8:	f003 0301 	and.w	r3, r3, #1
 80018fc:	60bb      	str	r3, [r7, #8]
 80018fe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001900:	4a56      	ldr	r2, [pc, #344]	; (8001a5c <HAL_GPIO_Init+0x2e8>)
 8001902:	697b      	ldr	r3, [r7, #20]
 8001904:	089b      	lsrs	r3, r3, #2
 8001906:	3302      	adds	r3, #2
 8001908:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800190c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800190e:	697b      	ldr	r3, [r7, #20]
 8001910:	f003 0303 	and.w	r3, r3, #3
 8001914:	009b      	lsls	r3, r3, #2
 8001916:	220f      	movs	r2, #15
 8001918:	fa02 f303 	lsl.w	r3, r2, r3
 800191c:	43db      	mvns	r3, r3
 800191e:	693a      	ldr	r2, [r7, #16]
 8001920:	4013      	ands	r3, r2
 8001922:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800192a:	d01f      	beq.n	800196c <HAL_GPIO_Init+0x1f8>
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	4a4c      	ldr	r2, [pc, #304]	; (8001a60 <HAL_GPIO_Init+0x2ec>)
 8001930:	4293      	cmp	r3, r2
 8001932:	d019      	beq.n	8001968 <HAL_GPIO_Init+0x1f4>
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	4a4b      	ldr	r2, [pc, #300]	; (8001a64 <HAL_GPIO_Init+0x2f0>)
 8001938:	4293      	cmp	r3, r2
 800193a:	d013      	beq.n	8001964 <HAL_GPIO_Init+0x1f0>
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	4a4a      	ldr	r2, [pc, #296]	; (8001a68 <HAL_GPIO_Init+0x2f4>)
 8001940:	4293      	cmp	r3, r2
 8001942:	d00d      	beq.n	8001960 <HAL_GPIO_Init+0x1ec>
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	4a49      	ldr	r2, [pc, #292]	; (8001a6c <HAL_GPIO_Init+0x2f8>)
 8001948:	4293      	cmp	r3, r2
 800194a:	d007      	beq.n	800195c <HAL_GPIO_Init+0x1e8>
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	4a48      	ldr	r2, [pc, #288]	; (8001a70 <HAL_GPIO_Init+0x2fc>)
 8001950:	4293      	cmp	r3, r2
 8001952:	d101      	bne.n	8001958 <HAL_GPIO_Init+0x1e4>
 8001954:	2305      	movs	r3, #5
 8001956:	e00a      	b.n	800196e <HAL_GPIO_Init+0x1fa>
 8001958:	2306      	movs	r3, #6
 800195a:	e008      	b.n	800196e <HAL_GPIO_Init+0x1fa>
 800195c:	2304      	movs	r3, #4
 800195e:	e006      	b.n	800196e <HAL_GPIO_Init+0x1fa>
 8001960:	2303      	movs	r3, #3
 8001962:	e004      	b.n	800196e <HAL_GPIO_Init+0x1fa>
 8001964:	2302      	movs	r3, #2
 8001966:	e002      	b.n	800196e <HAL_GPIO_Init+0x1fa>
 8001968:	2301      	movs	r3, #1
 800196a:	e000      	b.n	800196e <HAL_GPIO_Init+0x1fa>
 800196c:	2300      	movs	r3, #0
 800196e:	697a      	ldr	r2, [r7, #20]
 8001970:	f002 0203 	and.w	r2, r2, #3
 8001974:	0092      	lsls	r2, r2, #2
 8001976:	4093      	lsls	r3, r2
 8001978:	693a      	ldr	r2, [r7, #16]
 800197a:	4313      	orrs	r3, r2
 800197c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800197e:	4937      	ldr	r1, [pc, #220]	; (8001a5c <HAL_GPIO_Init+0x2e8>)
 8001980:	697b      	ldr	r3, [r7, #20]
 8001982:	089b      	lsrs	r3, r3, #2
 8001984:	3302      	adds	r3, #2
 8001986:	693a      	ldr	r2, [r7, #16]
 8001988:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800198c:	4b39      	ldr	r3, [pc, #228]	; (8001a74 <HAL_GPIO_Init+0x300>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	43db      	mvns	r3, r3
 8001996:	693a      	ldr	r2, [r7, #16]
 8001998:	4013      	ands	r3, r2
 800199a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d003      	beq.n	80019b0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80019a8:	693a      	ldr	r2, [r7, #16]
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	4313      	orrs	r3, r2
 80019ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80019b0:	4a30      	ldr	r2, [pc, #192]	; (8001a74 <HAL_GPIO_Init+0x300>)
 80019b2:	693b      	ldr	r3, [r7, #16]
 80019b4:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80019b6:	4b2f      	ldr	r3, [pc, #188]	; (8001a74 <HAL_GPIO_Init+0x300>)
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	43db      	mvns	r3, r3
 80019c0:	693a      	ldr	r2, [r7, #16]
 80019c2:	4013      	ands	r3, r2
 80019c4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d003      	beq.n	80019da <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80019d2:	693a      	ldr	r2, [r7, #16]
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	4313      	orrs	r3, r2
 80019d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80019da:	4a26      	ldr	r2, [pc, #152]	; (8001a74 <HAL_GPIO_Init+0x300>)
 80019dc:	693b      	ldr	r3, [r7, #16]
 80019de:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80019e0:	4b24      	ldr	r3, [pc, #144]	; (8001a74 <HAL_GPIO_Init+0x300>)
 80019e2:	689b      	ldr	r3, [r3, #8]
 80019e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	43db      	mvns	r3, r3
 80019ea:	693a      	ldr	r2, [r7, #16]
 80019ec:	4013      	ands	r3, r2
 80019ee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d003      	beq.n	8001a04 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80019fc:	693a      	ldr	r2, [r7, #16]
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	4313      	orrs	r3, r2
 8001a02:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001a04:	4a1b      	ldr	r2, [pc, #108]	; (8001a74 <HAL_GPIO_Init+0x300>)
 8001a06:	693b      	ldr	r3, [r7, #16]
 8001a08:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001a0a:	4b1a      	ldr	r3, [pc, #104]	; (8001a74 <HAL_GPIO_Init+0x300>)
 8001a0c:	68db      	ldr	r3, [r3, #12]
 8001a0e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	43db      	mvns	r3, r3
 8001a14:	693a      	ldr	r2, [r7, #16]
 8001a16:	4013      	ands	r3, r2
 8001a18:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d003      	beq.n	8001a2e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001a26:	693a      	ldr	r2, [r7, #16]
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	4313      	orrs	r3, r2
 8001a2c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001a2e:	4a11      	ldr	r2, [pc, #68]	; (8001a74 <HAL_GPIO_Init+0x300>)
 8001a30:	693b      	ldr	r3, [r7, #16]
 8001a32:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001a34:	697b      	ldr	r3, [r7, #20]
 8001a36:	3301      	adds	r3, #1
 8001a38:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	681a      	ldr	r2, [r3, #0]
 8001a3e:	697b      	ldr	r3, [r7, #20]
 8001a40:	fa22 f303 	lsr.w	r3, r2, r3
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	f47f ae9d 	bne.w	8001784 <HAL_GPIO_Init+0x10>
  }
}
 8001a4a:	bf00      	nop
 8001a4c:	371c      	adds	r7, #28
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a54:	4770      	bx	lr
 8001a56:	bf00      	nop
 8001a58:	40021000 	.word	0x40021000
 8001a5c:	40010000 	.word	0x40010000
 8001a60:	48000400 	.word	0x48000400
 8001a64:	48000800 	.word	0x48000800
 8001a68:	48000c00 	.word	0x48000c00
 8001a6c:	48001000 	.word	0x48001000
 8001a70:	48001400 	.word	0x48001400
 8001a74:	40010400 	.word	0x40010400

08001a78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b083      	sub	sp, #12
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
 8001a80:	460b      	mov	r3, r1
 8001a82:	807b      	strh	r3, [r7, #2]
 8001a84:	4613      	mov	r3, r2
 8001a86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a88:	787b      	ldrb	r3, [r7, #1]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d003      	beq.n	8001a96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001a8e:	887a      	ldrh	r2, [r7, #2]
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001a94:	e002      	b.n	8001a9c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001a96:	887a      	ldrh	r2, [r7, #2]
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001a9c:	bf00      	nop
 8001a9e:	370c      	adds	r7, #12
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa6:	4770      	bx	lr

08001aa8 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b085      	sub	sp, #20
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
 8001ab0:	460b      	mov	r3, r1
 8001ab2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	695b      	ldr	r3, [r3, #20]
 8001ab8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001aba:	887a      	ldrh	r2, [r7, #2]
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	4013      	ands	r3, r2
 8001ac0:	041a      	lsls	r2, r3, #16
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	43d9      	mvns	r1, r3
 8001ac6:	887b      	ldrh	r3, [r7, #2]
 8001ac8:	400b      	ands	r3, r1
 8001aca:	431a      	orrs	r2, r3
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	619a      	str	r2, [r3, #24]
}
 8001ad0:	bf00      	nop
 8001ad2:	3714      	adds	r7, #20
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ada:	4770      	bx	lr

08001adc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001adc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ade:	b08b      	sub	sp, #44	; 0x2c
 8001ae0:	af06      	add	r7, sp, #24
 8001ae2:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d101      	bne.n	8001aee <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001aea:	2301      	movs	r3, #1
 8001aec:	e0d7      	b.n	8001c9e <HAL_PCD_Init+0x1c2>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001af4:	b2db      	uxtb	r3, r3
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d106      	bne.n	8001b08 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2200      	movs	r2, #0
 8001afe:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001b02:	6878      	ldr	r0, [r7, #4]
 8001b04:	f007 fcbc 	bl	8009480 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2203      	movs	r2, #3
 8001b0c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4618      	mov	r0, r3
 8001b16:	f003 fe18 	bl	800574a <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	73fb      	strb	r3, [r7, #15]
 8001b1e:	e04c      	b.n	8001bba <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001b20:	7bfb      	ldrb	r3, [r7, #15]
 8001b22:	6879      	ldr	r1, [r7, #4]
 8001b24:	1c5a      	adds	r2, r3, #1
 8001b26:	4613      	mov	r3, r2
 8001b28:	009b      	lsls	r3, r3, #2
 8001b2a:	4413      	add	r3, r2
 8001b2c:	00db      	lsls	r3, r3, #3
 8001b2e:	440b      	add	r3, r1
 8001b30:	3301      	adds	r3, #1
 8001b32:	2201      	movs	r2, #1
 8001b34:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001b36:	7bfb      	ldrb	r3, [r7, #15]
 8001b38:	6879      	ldr	r1, [r7, #4]
 8001b3a:	1c5a      	adds	r2, r3, #1
 8001b3c:	4613      	mov	r3, r2
 8001b3e:	009b      	lsls	r3, r3, #2
 8001b40:	4413      	add	r3, r2
 8001b42:	00db      	lsls	r3, r3, #3
 8001b44:	440b      	add	r3, r1
 8001b46:	7bfa      	ldrb	r2, [r7, #15]
 8001b48:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001b4a:	7bfa      	ldrb	r2, [r7, #15]
 8001b4c:	7bfb      	ldrb	r3, [r7, #15]
 8001b4e:	b298      	uxth	r0, r3
 8001b50:	6879      	ldr	r1, [r7, #4]
 8001b52:	4613      	mov	r3, r2
 8001b54:	009b      	lsls	r3, r3, #2
 8001b56:	4413      	add	r3, r2
 8001b58:	00db      	lsls	r3, r3, #3
 8001b5a:	440b      	add	r3, r1
 8001b5c:	3336      	adds	r3, #54	; 0x36
 8001b5e:	4602      	mov	r2, r0
 8001b60:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001b62:	7bfb      	ldrb	r3, [r7, #15]
 8001b64:	6879      	ldr	r1, [r7, #4]
 8001b66:	1c5a      	adds	r2, r3, #1
 8001b68:	4613      	mov	r3, r2
 8001b6a:	009b      	lsls	r3, r3, #2
 8001b6c:	4413      	add	r3, r2
 8001b6e:	00db      	lsls	r3, r3, #3
 8001b70:	440b      	add	r3, r1
 8001b72:	3303      	adds	r3, #3
 8001b74:	2200      	movs	r2, #0
 8001b76:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001b78:	7bfa      	ldrb	r2, [r7, #15]
 8001b7a:	6879      	ldr	r1, [r7, #4]
 8001b7c:	4613      	mov	r3, r2
 8001b7e:	009b      	lsls	r3, r3, #2
 8001b80:	4413      	add	r3, r2
 8001b82:	00db      	lsls	r3, r3, #3
 8001b84:	440b      	add	r3, r1
 8001b86:	3338      	adds	r3, #56	; 0x38
 8001b88:	2200      	movs	r2, #0
 8001b8a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001b8c:	7bfa      	ldrb	r2, [r7, #15]
 8001b8e:	6879      	ldr	r1, [r7, #4]
 8001b90:	4613      	mov	r3, r2
 8001b92:	009b      	lsls	r3, r3, #2
 8001b94:	4413      	add	r3, r2
 8001b96:	00db      	lsls	r3, r3, #3
 8001b98:	440b      	add	r3, r1
 8001b9a:	333c      	adds	r3, #60	; 0x3c
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001ba0:	7bfa      	ldrb	r2, [r7, #15]
 8001ba2:	6879      	ldr	r1, [r7, #4]
 8001ba4:	4613      	mov	r3, r2
 8001ba6:	009b      	lsls	r3, r3, #2
 8001ba8:	4413      	add	r3, r2
 8001baa:	00db      	lsls	r3, r3, #3
 8001bac:	440b      	add	r3, r1
 8001bae:	3340      	adds	r3, #64	; 0x40
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001bb4:	7bfb      	ldrb	r3, [r7, #15]
 8001bb6:	3301      	adds	r3, #1
 8001bb8:	73fb      	strb	r3, [r7, #15]
 8001bba:	7bfa      	ldrb	r2, [r7, #15]
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	429a      	cmp	r2, r3
 8001bc2:	d3ad      	bcc.n	8001b20 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	73fb      	strb	r3, [r7, #15]
 8001bc8:	e044      	b.n	8001c54 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001bca:	7bfa      	ldrb	r2, [r7, #15]
 8001bcc:	6879      	ldr	r1, [r7, #4]
 8001bce:	4613      	mov	r3, r2
 8001bd0:	009b      	lsls	r3, r3, #2
 8001bd2:	4413      	add	r3, r2
 8001bd4:	00db      	lsls	r3, r3, #3
 8001bd6:	440b      	add	r3, r1
 8001bd8:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001bdc:	2200      	movs	r2, #0
 8001bde:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001be0:	7bfa      	ldrb	r2, [r7, #15]
 8001be2:	6879      	ldr	r1, [r7, #4]
 8001be4:	4613      	mov	r3, r2
 8001be6:	009b      	lsls	r3, r3, #2
 8001be8:	4413      	add	r3, r2
 8001bea:	00db      	lsls	r3, r3, #3
 8001bec:	440b      	add	r3, r1
 8001bee:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001bf2:	7bfa      	ldrb	r2, [r7, #15]
 8001bf4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001bf6:	7bfa      	ldrb	r2, [r7, #15]
 8001bf8:	6879      	ldr	r1, [r7, #4]
 8001bfa:	4613      	mov	r3, r2
 8001bfc:	009b      	lsls	r3, r3, #2
 8001bfe:	4413      	add	r3, r2
 8001c00:	00db      	lsls	r3, r3, #3
 8001c02:	440b      	add	r3, r1
 8001c04:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001c08:	2200      	movs	r2, #0
 8001c0a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001c0c:	7bfa      	ldrb	r2, [r7, #15]
 8001c0e:	6879      	ldr	r1, [r7, #4]
 8001c10:	4613      	mov	r3, r2
 8001c12:	009b      	lsls	r3, r3, #2
 8001c14:	4413      	add	r3, r2
 8001c16:	00db      	lsls	r3, r3, #3
 8001c18:	440b      	add	r3, r1
 8001c1a:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001c1e:	2200      	movs	r2, #0
 8001c20:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001c22:	7bfa      	ldrb	r2, [r7, #15]
 8001c24:	6879      	ldr	r1, [r7, #4]
 8001c26:	4613      	mov	r3, r2
 8001c28:	009b      	lsls	r3, r3, #2
 8001c2a:	4413      	add	r3, r2
 8001c2c:	00db      	lsls	r3, r3, #3
 8001c2e:	440b      	add	r3, r1
 8001c30:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001c34:	2200      	movs	r2, #0
 8001c36:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001c38:	7bfa      	ldrb	r2, [r7, #15]
 8001c3a:	6879      	ldr	r1, [r7, #4]
 8001c3c:	4613      	mov	r3, r2
 8001c3e:	009b      	lsls	r3, r3, #2
 8001c40:	4413      	add	r3, r2
 8001c42:	00db      	lsls	r3, r3, #3
 8001c44:	440b      	add	r3, r1
 8001c46:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c4e:	7bfb      	ldrb	r3, [r7, #15]
 8001c50:	3301      	adds	r3, #1
 8001c52:	73fb      	strb	r3, [r7, #15]
 8001c54:	7bfa      	ldrb	r2, [r7, #15]
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	429a      	cmp	r2, r3
 8001c5c:	d3b5      	bcc.n	8001bca <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	603b      	str	r3, [r7, #0]
 8001c64:	687e      	ldr	r6, [r7, #4]
 8001c66:	466d      	mov	r5, sp
 8001c68:	f106 0410 	add.w	r4, r6, #16
 8001c6c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c6e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c70:	6823      	ldr	r3, [r4, #0]
 8001c72:	602b      	str	r3, [r5, #0]
 8001c74:	1d33      	adds	r3, r6, #4
 8001c76:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001c78:	6838      	ldr	r0, [r7, #0]
 8001c7a:	f003 fd81 	bl	8005780 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	2200      	movs	r2, #0
 8001c82:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2201      	movs	r2, #1
 8001c8a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	69db      	ldr	r3, [r3, #28]
 8001c92:	2b01      	cmp	r3, #1
 8001c94:	d102      	bne.n	8001c9c <HAL_PCD_Init+0x1c0>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001c96:	6878      	ldr	r0, [r7, #4]
 8001c98:	f001 fa5e 	bl	8003158 <HAL_PCDEx_ActivateLPM>
  }
  
  return HAL_OK;
 8001c9c:	2300      	movs	r3, #0
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	3714      	adds	r7, #20
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001ca6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001ca6:	b580      	push	{r7, lr}
 8001ca8:	b082      	sub	sp, #8
 8001caa:	af00      	add	r7, sp, #0
 8001cac:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001cb4:	2b01      	cmp	r3, #1
 8001cb6:	d101      	bne.n	8001cbc <HAL_PCD_Start+0x16>
 8001cb8:	2302      	movs	r3, #2
 8001cba:	e012      	b.n	8001ce2 <HAL_PCD_Start+0x3c>
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2201      	movs	r2, #1
 8001cc0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f003 fd27 	bl	800571c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	f005 fd13 	bl	80076fe <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2200      	movs	r2, #0
 8001cdc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001ce0:	2300      	movs	r3, #0
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	3708      	adds	r7, #8
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}

08001cea <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001cea:	b580      	push	{r7, lr}
 8001cec:	b082      	sub	sp, #8
 8001cee:	af00      	add	r7, sp, #0
 8001cf0:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f005 fd18 	bl	800772c <USB_ReadInterrupts>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001d02:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001d06:	d102      	bne.n	8001d0e <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001d08:	6878      	ldr	r0, [r7, #4]
 8001d0a:	f000 fb5b 	bl	80023c4 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4618      	mov	r0, r3
 8001d14:	f005 fd0a 	bl	800772c <USB_ReadInterrupts>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d22:	d112      	bne.n	8001d4a <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001d2c:	b29a      	uxth	r2, r3
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d36:	b292      	uxth	r2, r2
 8001d38:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001d3c:	6878      	ldr	r0, [r7, #4]
 8001d3e:	f007 fc1a 	bl	8009576 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001d42:	2100      	movs	r1, #0
 8001d44:	6878      	ldr	r0, [r7, #4]
 8001d46:	f000 f91e 	bl	8001f86 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f005 fcec 	bl	800772c <USB_ReadInterrupts>
 8001d54:	4603      	mov	r3, r0
 8001d56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d5a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001d5e:	d10b      	bne.n	8001d78 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001d68:	b29a      	uxth	r2, r3
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001d72:	b292      	uxth	r2, r2
 8001d74:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f005 fcd5 	bl	800772c <USB_ReadInterrupts>
 8001d82:	4603      	mov	r3, r0
 8001d84:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001d88:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001d8c:	d10b      	bne.n	8001da6 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001d96:	b29a      	uxth	r2, r3
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001da0:	b292      	uxth	r2, r2
 8001da2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4618      	mov	r0, r3
 8001dac:	f005 fcbe 	bl	800772c <USB_ReadInterrupts>
 8001db0:	4603      	mov	r3, r0
 8001db2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001db6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001dba:	d133      	bne.n	8001e24 <HAL_PCD_IRQHandler+0x13a>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001dc4:	b29a      	uxth	r2, r3
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f022 0204 	bic.w	r2, r2, #4
 8001dce:	b292      	uxth	r2, r2
 8001dd0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001ddc:	b29a      	uxth	r2, r3
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f022 0208 	bic.w	r2, r2, #8
 8001de6:	b292      	uxth	r2, r2
 8001de8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8001df2:	2b01      	cmp	r3, #1
 8001df4:	d107      	bne.n	8001e06 <HAL_PCD_IRQHandler+0x11c>
    {
      hpcd->LPM_State = LPM_L0;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2200      	movs	r2, #0
 8001dfa:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001dfe:	2100      	movs	r1, #0
 8001e00:	6878      	ldr	r0, [r7, #4]
 8001e02:	f007 fdad 	bl	8009960 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001e06:	6878      	ldr	r0, [r7, #4]
 8001e08:	f007 fbee 	bl	80095e8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e14:	b29a      	uxth	r2, r3
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001e1e:	b292      	uxth	r2, r2
 8001e20:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f005 fc7f 	bl	800772c <USB_ReadInterrupts>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e34:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001e38:	d126      	bne.n	8001e88 <HAL_PCD_IRQHandler+0x19e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001e42:	b29a      	uxth	r2, r3
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f042 0208 	orr.w	r2, r2, #8
 8001e4c:	b292      	uxth	r2, r2
 8001e4e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e5a:	b29a      	uxth	r2, r3
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e64:	b292      	uxth	r2, r2
 8001e66:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001e72:	b29a      	uxth	r2, r3
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f042 0204 	orr.w	r2, r2, #4
 8001e7c:	b292      	uxth	r2, r2
 8001e7e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001e82:	6878      	ldr	r0, [r7, #4]
 8001e84:	f007 fb96 	bl	80095b4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  /* Handle LPM Interrupt */
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f005 fc4d 	bl	800772c <USB_ReadInterrupts>
 8001e92:	4603      	mov	r3, r0
 8001e94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e98:	2b80      	cmp	r3, #128	; 0x80
 8001e9a:	d13f      	bne.n	8001f1c <HAL_PCD_IRQHandler+0x232>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001ea4:	b29a      	uxth	r2, r3
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001eae:	b292      	uxth	r2, r2
 8001eb0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d12b      	bne.n	8001f16 <HAL_PCD_IRQHandler+0x22c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001ec6:	b29a      	uxth	r2, r3
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f042 0204 	orr.w	r2, r2, #4
 8001ed0:	b292      	uxth	r2, r2
 8001ed2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001ede:	b29a      	uxth	r2, r3
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f042 0208 	orr.w	r2, r2, #8
 8001ee8:	b292      	uxth	r2, r2
 8001eea:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2201      	movs	r2, #1
 8001ef2:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001efe:	b29b      	uxth	r3, r3
 8001f00:	089b      	lsrs	r3, r3, #2
 8001f02:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001f0c:	2101      	movs	r1, #1
 8001f0e:	6878      	ldr	r0, [r7, #4]
 8001f10:	f007 fd26 	bl	8009960 <HAL_PCDEx_LPM_Callback>
 8001f14:	e002      	b.n	8001f1c <HAL_PCD_IRQHandler+0x232>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 8001f16:	6878      	ldr	r0, [r7, #4]
 8001f18:	f007 fb4c 	bl	80095b4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4618      	mov	r0, r3
 8001f22:	f005 fc03 	bl	800772c <USB_ReadInterrupts>
 8001f26:	4603      	mov	r3, r0
 8001f28:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f30:	d10e      	bne.n	8001f50 <HAL_PCD_IRQHandler+0x266>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f3a:	b29a      	uxth	r2, r3
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001f44:	b292      	uxth	r2, r2
 8001f46:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001f4a:	6878      	ldr	r0, [r7, #4]
 8001f4c:	f007 fb05 	bl	800955a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4618      	mov	r0, r3
 8001f56:	f005 fbe9 	bl	800772c <USB_ReadInterrupts>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001f64:	d10b      	bne.n	8001f7e <HAL_PCD_IRQHandler+0x294>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f6e:	b29a      	uxth	r2, r3
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001f78:	b292      	uxth	r2, r2
 8001f7a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8001f7e:	bf00      	nop
 8001f80:	3708      	adds	r7, #8
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}

08001f86 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001f86:	b580      	push	{r7, lr}
 8001f88:	b082      	sub	sp, #8
 8001f8a:	af00      	add	r7, sp, #0
 8001f8c:	6078      	str	r0, [r7, #4]
 8001f8e:	460b      	mov	r3, r1
 8001f90:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001f98:	2b01      	cmp	r3, #1
 8001f9a:	d101      	bne.n	8001fa0 <HAL_PCD_SetAddress+0x1a>
 8001f9c:	2302      	movs	r3, #2
 8001f9e:	e013      	b.n	8001fc8 <HAL_PCD_SetAddress+0x42>
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	78fa      	ldrb	r2, [r7, #3]
 8001fac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	78fa      	ldrb	r2, [r7, #3]
 8001fb6:	4611      	mov	r1, r2
 8001fb8:	4618      	mov	r0, r3
 8001fba:	f005 fb8c 	bl	80076d6 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001fc6:	2300      	movs	r3, #0
}
 8001fc8:	4618      	mov	r0, r3
 8001fca:	3708      	adds	r7, #8
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd80      	pop	{r7, pc}

08001fd0 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b084      	sub	sp, #16
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
 8001fd8:	4608      	mov	r0, r1
 8001fda:	4611      	mov	r1, r2
 8001fdc:	461a      	mov	r2, r3
 8001fde:	4603      	mov	r3, r0
 8001fe0:	70fb      	strb	r3, [r7, #3]
 8001fe2:	460b      	mov	r3, r1
 8001fe4:	803b      	strh	r3, [r7, #0]
 8001fe6:	4613      	mov	r3, r2
 8001fe8:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001fea:	2300      	movs	r3, #0
 8001fec:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001fee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	da0e      	bge.n	8002014 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ff6:	78fb      	ldrb	r3, [r7, #3]
 8001ff8:	f003 0307 	and.w	r3, r3, #7
 8001ffc:	1c5a      	adds	r2, r3, #1
 8001ffe:	4613      	mov	r3, r2
 8002000:	009b      	lsls	r3, r3, #2
 8002002:	4413      	add	r3, r2
 8002004:	00db      	lsls	r3, r3, #3
 8002006:	687a      	ldr	r2, [r7, #4]
 8002008:	4413      	add	r3, r2
 800200a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	2201      	movs	r2, #1
 8002010:	705a      	strb	r2, [r3, #1]
 8002012:	e00e      	b.n	8002032 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002014:	78fb      	ldrb	r3, [r7, #3]
 8002016:	f003 0207 	and.w	r2, r3, #7
 800201a:	4613      	mov	r3, r2
 800201c:	009b      	lsls	r3, r3, #2
 800201e:	4413      	add	r3, r2
 8002020:	00db      	lsls	r3, r3, #3
 8002022:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002026:	687a      	ldr	r2, [r7, #4]
 8002028:	4413      	add	r3, r2
 800202a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	2200      	movs	r2, #0
 8002030:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002032:	78fb      	ldrb	r3, [r7, #3]
 8002034:	f003 0307 	and.w	r3, r3, #7
 8002038:	b2da      	uxtb	r2, r3
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800203e:	883a      	ldrh	r2, [r7, #0]
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	78ba      	ldrb	r2, [r7, #2]
 8002048:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	785b      	ldrb	r3, [r3, #1]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d004      	beq.n	800205c <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	781b      	ldrb	r3, [r3, #0]
 8002056:	b29a      	uxth	r2, r3
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800205c:	78bb      	ldrb	r3, [r7, #2]
 800205e:	2b02      	cmp	r3, #2
 8002060:	d102      	bne.n	8002068 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	2200      	movs	r2, #0
 8002066:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800206e:	2b01      	cmp	r3, #1
 8002070:	d101      	bne.n	8002076 <HAL_PCD_EP_Open+0xa6>
 8002072:	2302      	movs	r3, #2
 8002074:	e00e      	b.n	8002094 <HAL_PCD_EP_Open+0xc4>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2201      	movs	r2, #1
 800207a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	68f9      	ldr	r1, [r7, #12]
 8002084:	4618      	mov	r0, r3
 8002086:	f003 fb9d 	bl	80057c4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2200      	movs	r2, #0
 800208e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8002092:	7afb      	ldrb	r3, [r7, #11]
}
 8002094:	4618      	mov	r0, r3
 8002096:	3710      	adds	r7, #16
 8002098:	46bd      	mov	sp, r7
 800209a:	bd80      	pop	{r7, pc}

0800209c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b084      	sub	sp, #16
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
 80020a4:	460b      	mov	r3, r1
 80020a6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80020a8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	da0e      	bge.n	80020ce <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80020b0:	78fb      	ldrb	r3, [r7, #3]
 80020b2:	f003 0307 	and.w	r3, r3, #7
 80020b6:	1c5a      	adds	r2, r3, #1
 80020b8:	4613      	mov	r3, r2
 80020ba:	009b      	lsls	r3, r3, #2
 80020bc:	4413      	add	r3, r2
 80020be:	00db      	lsls	r3, r3, #3
 80020c0:	687a      	ldr	r2, [r7, #4]
 80020c2:	4413      	add	r3, r2
 80020c4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	2201      	movs	r2, #1
 80020ca:	705a      	strb	r2, [r3, #1]
 80020cc:	e00e      	b.n	80020ec <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80020ce:	78fb      	ldrb	r3, [r7, #3]
 80020d0:	f003 0207 	and.w	r2, r3, #7
 80020d4:	4613      	mov	r3, r2
 80020d6:	009b      	lsls	r3, r3, #2
 80020d8:	4413      	add	r3, r2
 80020da:	00db      	lsls	r3, r3, #3
 80020dc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80020e0:	687a      	ldr	r2, [r7, #4]
 80020e2:	4413      	add	r3, r2
 80020e4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	2200      	movs	r2, #0
 80020ea:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80020ec:	78fb      	ldrb	r3, [r7, #3]
 80020ee:	f003 0307 	and.w	r3, r3, #7
 80020f2:	b2da      	uxtb	r2, r3
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80020fe:	2b01      	cmp	r3, #1
 8002100:	d101      	bne.n	8002106 <HAL_PCD_EP_Close+0x6a>
 8002102:	2302      	movs	r3, #2
 8002104:	e00e      	b.n	8002124 <HAL_PCD_EP_Close+0x88>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2201      	movs	r2, #1
 800210a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	68f9      	ldr	r1, [r7, #12]
 8002114:	4618      	mov	r0, r3
 8002116:	f003 fec3 	bl	8005ea0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2200      	movs	r2, #0
 800211e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8002122:	2300      	movs	r3, #0
}
 8002124:	4618      	mov	r0, r3
 8002126:	3710      	adds	r7, #16
 8002128:	46bd      	mov	sp, r7
 800212a:	bd80      	pop	{r7, pc}

0800212c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b086      	sub	sp, #24
 8002130:	af00      	add	r7, sp, #0
 8002132:	60f8      	str	r0, [r7, #12]
 8002134:	607a      	str	r2, [r7, #4]
 8002136:	603b      	str	r3, [r7, #0]
 8002138:	460b      	mov	r3, r1
 800213a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800213c:	7afb      	ldrb	r3, [r7, #11]
 800213e:	f003 0207 	and.w	r2, r3, #7
 8002142:	4613      	mov	r3, r2
 8002144:	009b      	lsls	r3, r3, #2
 8002146:	4413      	add	r3, r2
 8002148:	00db      	lsls	r3, r3, #3
 800214a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800214e:	68fa      	ldr	r2, [r7, #12]
 8002150:	4413      	add	r3, r2
 8002152:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002154:	697b      	ldr	r3, [r7, #20]
 8002156:	687a      	ldr	r2, [r7, #4]
 8002158:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800215a:	697b      	ldr	r3, [r7, #20]
 800215c:	683a      	ldr	r2, [r7, #0]
 800215e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	2200      	movs	r2, #0
 8002164:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002166:	697b      	ldr	r3, [r7, #20]
 8002168:	2200      	movs	r2, #0
 800216a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800216c:	7afb      	ldrb	r3, [r7, #11]
 800216e:	f003 0307 	and.w	r3, r3, #7
 8002172:	b2da      	uxtb	r2, r3
 8002174:	697b      	ldr	r3, [r7, #20]
 8002176:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002178:	7afb      	ldrb	r3, [r7, #11]
 800217a:	f003 0307 	and.w	r3, r3, #7
 800217e:	2b00      	cmp	r3, #0
 8002180:	d106      	bne.n	8002190 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	6979      	ldr	r1, [r7, #20]
 8002188:	4618      	mov	r0, r3
 800218a:	f004 f876 	bl	800627a <USB_EPStartXfer>
 800218e:	e005      	b.n	800219c <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	6979      	ldr	r1, [r7, #20]
 8002196:	4618      	mov	r0, r3
 8002198:	f004 f86f 	bl	800627a <USB_EPStartXfer>
  }

  return HAL_OK;
 800219c:	2300      	movs	r3, #0
}
 800219e:	4618      	mov	r0, r3
 80021a0:	3718      	adds	r7, #24
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}

080021a6 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80021a6:	b480      	push	{r7}
 80021a8:	b083      	sub	sp, #12
 80021aa:	af00      	add	r7, sp, #0
 80021ac:	6078      	str	r0, [r7, #4]
 80021ae:	460b      	mov	r3, r1
 80021b0:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80021b2:	78fb      	ldrb	r3, [r7, #3]
 80021b4:	f003 0207 	and.w	r2, r3, #7
 80021b8:	6879      	ldr	r1, [r7, #4]
 80021ba:	4613      	mov	r3, r2
 80021bc:	009b      	lsls	r3, r3, #2
 80021be:	4413      	add	r3, r2
 80021c0:	00db      	lsls	r3, r3, #3
 80021c2:	440b      	add	r3, r1
 80021c4:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80021c8:	681b      	ldr	r3, [r3, #0]
}
 80021ca:	4618      	mov	r0, r3
 80021cc:	370c      	adds	r7, #12
 80021ce:	46bd      	mov	sp, r7
 80021d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d4:	4770      	bx	lr

080021d6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80021d6:	b580      	push	{r7, lr}
 80021d8:	b086      	sub	sp, #24
 80021da:	af00      	add	r7, sp, #0
 80021dc:	60f8      	str	r0, [r7, #12]
 80021de:	607a      	str	r2, [r7, #4]
 80021e0:	603b      	str	r3, [r7, #0]
 80021e2:	460b      	mov	r3, r1
 80021e4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80021e6:	7afb      	ldrb	r3, [r7, #11]
 80021e8:	f003 0307 	and.w	r3, r3, #7
 80021ec:	1c5a      	adds	r2, r3, #1
 80021ee:	4613      	mov	r3, r2
 80021f0:	009b      	lsls	r3, r3, #2
 80021f2:	4413      	add	r3, r2
 80021f4:	00db      	lsls	r3, r3, #3
 80021f6:	68fa      	ldr	r2, [r7, #12]
 80021f8:	4413      	add	r3, r2
 80021fa:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80021fc:	697b      	ldr	r3, [r7, #20]
 80021fe:	687a      	ldr	r2, [r7, #4]
 8002200:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002202:	697b      	ldr	r3, [r7, #20]
 8002204:	683a      	ldr	r2, [r7, #0]
 8002206:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8002208:	697b      	ldr	r3, [r7, #20]
 800220a:	2201      	movs	r2, #1
 800220c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8002210:	697b      	ldr	r3, [r7, #20]
 8002212:	683a      	ldr	r2, [r7, #0]
 8002214:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8002216:	697b      	ldr	r3, [r7, #20]
 8002218:	2200      	movs	r2, #0
 800221a:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800221c:	697b      	ldr	r3, [r7, #20]
 800221e:	2201      	movs	r2, #1
 8002220:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002222:	7afb      	ldrb	r3, [r7, #11]
 8002224:	f003 0307 	and.w	r3, r3, #7
 8002228:	b2da      	uxtb	r2, r3
 800222a:	697b      	ldr	r3, [r7, #20]
 800222c:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800222e:	7afb      	ldrb	r3, [r7, #11]
 8002230:	f003 0307 	and.w	r3, r3, #7
 8002234:	2b00      	cmp	r3, #0
 8002236:	d106      	bne.n	8002246 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	6979      	ldr	r1, [r7, #20]
 800223e:	4618      	mov	r0, r3
 8002240:	f004 f81b 	bl	800627a <USB_EPStartXfer>
 8002244:	e005      	b.n	8002252 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	6979      	ldr	r1, [r7, #20]
 800224c:	4618      	mov	r0, r3
 800224e:	f004 f814 	bl	800627a <USB_EPStartXfer>
  }

  return HAL_OK;
 8002252:	2300      	movs	r3, #0
}
 8002254:	4618      	mov	r0, r3
 8002256:	3718      	adds	r7, #24
 8002258:	46bd      	mov	sp, r7
 800225a:	bd80      	pop	{r7, pc}

0800225c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b084      	sub	sp, #16
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
 8002264:	460b      	mov	r3, r1
 8002266:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002268:	78fb      	ldrb	r3, [r7, #3]
 800226a:	f003 0207 	and.w	r2, r3, #7
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	429a      	cmp	r2, r3
 8002274:	d901      	bls.n	800227a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002276:	2301      	movs	r3, #1
 8002278:	e04c      	b.n	8002314 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800227a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800227e:	2b00      	cmp	r3, #0
 8002280:	da0e      	bge.n	80022a0 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002282:	78fb      	ldrb	r3, [r7, #3]
 8002284:	f003 0307 	and.w	r3, r3, #7
 8002288:	1c5a      	adds	r2, r3, #1
 800228a:	4613      	mov	r3, r2
 800228c:	009b      	lsls	r3, r3, #2
 800228e:	4413      	add	r3, r2
 8002290:	00db      	lsls	r3, r3, #3
 8002292:	687a      	ldr	r2, [r7, #4]
 8002294:	4413      	add	r3, r2
 8002296:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	2201      	movs	r2, #1
 800229c:	705a      	strb	r2, [r3, #1]
 800229e:	e00c      	b.n	80022ba <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80022a0:	78fa      	ldrb	r2, [r7, #3]
 80022a2:	4613      	mov	r3, r2
 80022a4:	009b      	lsls	r3, r3, #2
 80022a6:	4413      	add	r3, r2
 80022a8:	00db      	lsls	r3, r3, #3
 80022aa:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80022ae:	687a      	ldr	r2, [r7, #4]
 80022b0:	4413      	add	r3, r2
 80022b2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	2200      	movs	r2, #0
 80022b8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	2201      	movs	r2, #1
 80022be:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80022c0:	78fb      	ldrb	r3, [r7, #3]
 80022c2:	f003 0307 	and.w	r3, r3, #7
 80022c6:	b2da      	uxtb	r2, r3
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80022d2:	2b01      	cmp	r3, #1
 80022d4:	d101      	bne.n	80022da <HAL_PCD_EP_SetStall+0x7e>
 80022d6:	2302      	movs	r3, #2
 80022d8:	e01c      	b.n	8002314 <HAL_PCD_EP_SetStall+0xb8>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2201      	movs	r2, #1
 80022de:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	68f9      	ldr	r1, [r7, #12]
 80022e8:	4618      	mov	r0, r3
 80022ea:	f005 f8f5 	bl	80074d8 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80022ee:	78fb      	ldrb	r3, [r7, #3]
 80022f0:	f003 0307 	and.w	r3, r3, #7
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d108      	bne.n	800230a <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681a      	ldr	r2, [r3, #0]
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8002302:	4619      	mov	r1, r3
 8002304:	4610      	mov	r0, r2
 8002306:	f005 fa21 	bl	800774c <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2200      	movs	r2, #0
 800230e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002312:	2300      	movs	r3, #0
}
 8002314:	4618      	mov	r0, r3
 8002316:	3710      	adds	r7, #16
 8002318:	46bd      	mov	sp, r7
 800231a:	bd80      	pop	{r7, pc}

0800231c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b084      	sub	sp, #16
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
 8002324:	460b      	mov	r3, r1
 8002326:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002328:	78fb      	ldrb	r3, [r7, #3]
 800232a:	f003 020f 	and.w	r2, r3, #15
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	429a      	cmp	r2, r3
 8002334:	d901      	bls.n	800233a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002336:	2301      	movs	r3, #1
 8002338:	e040      	b.n	80023bc <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800233a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800233e:	2b00      	cmp	r3, #0
 8002340:	da0e      	bge.n	8002360 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002342:	78fb      	ldrb	r3, [r7, #3]
 8002344:	f003 0307 	and.w	r3, r3, #7
 8002348:	1c5a      	adds	r2, r3, #1
 800234a:	4613      	mov	r3, r2
 800234c:	009b      	lsls	r3, r3, #2
 800234e:	4413      	add	r3, r2
 8002350:	00db      	lsls	r3, r3, #3
 8002352:	687a      	ldr	r2, [r7, #4]
 8002354:	4413      	add	r3, r2
 8002356:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	2201      	movs	r2, #1
 800235c:	705a      	strb	r2, [r3, #1]
 800235e:	e00e      	b.n	800237e <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002360:	78fb      	ldrb	r3, [r7, #3]
 8002362:	f003 0207 	and.w	r2, r3, #7
 8002366:	4613      	mov	r3, r2
 8002368:	009b      	lsls	r3, r3, #2
 800236a:	4413      	add	r3, r2
 800236c:	00db      	lsls	r3, r3, #3
 800236e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002372:	687a      	ldr	r2, [r7, #4]
 8002374:	4413      	add	r3, r2
 8002376:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	2200      	movs	r2, #0
 800237c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	2200      	movs	r2, #0
 8002382:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002384:	78fb      	ldrb	r3, [r7, #3]
 8002386:	f003 0307 	and.w	r3, r3, #7
 800238a:	b2da      	uxtb	r2, r3
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002396:	2b01      	cmp	r3, #1
 8002398:	d101      	bne.n	800239e <HAL_PCD_EP_ClrStall+0x82>
 800239a:	2302      	movs	r3, #2
 800239c:	e00e      	b.n	80023bc <HAL_PCD_EP_ClrStall+0xa0>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2201      	movs	r2, #1
 80023a2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	68f9      	ldr	r1, [r7, #12]
 80023ac:	4618      	mov	r0, r3
 80023ae:	f005 f8e4 	bl	800757a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2200      	movs	r2, #0
 80023b6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80023ba:	2300      	movs	r3, #0
}
 80023bc:	4618      	mov	r0, r3
 80023be:	3710      	adds	r7, #16
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bd80      	pop	{r7, pc}

080023c4 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b08e      	sub	sp, #56	; 0x38
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80023cc:	e2d1      	b.n	8002972 <PCD_EP_ISR_Handler+0x5ae>
  {
    wIstr = hpcd->Instance->ISTR;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80023d6:	85fb      	strh	r3, [r7, #46]	; 0x2e
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80023d8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80023da:	b2db      	uxtb	r3, r3
 80023dc:	f003 030f 	and.w	r3, r3, #15
 80023e0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 80023e4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	f040 8152 	bne.w	8002692 <PCD_EP_ISR_Handler+0x2ce>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80023ee:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80023f0:	f003 0310 	and.w	r3, r3, #16
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d150      	bne.n	800249a <PCD_EP_ISR_Handler+0xd6>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	881b      	ldrh	r3, [r3, #0]
 80023fe:	b29b      	uxth	r3, r3
 8002400:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002404:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002408:	81fb      	strh	r3, [r7, #14]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681a      	ldr	r2, [r3, #0]
 800240e:	89fb      	ldrh	r3, [r7, #14]
 8002410:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002414:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002418:	b29b      	uxth	r3, r3
 800241a:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	3328      	adds	r3, #40	; 0x28
 8002420:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800242a:	b29b      	uxth	r3, r3
 800242c:	461a      	mov	r2, r3
 800242e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002430:	781b      	ldrb	r3, [r3, #0]
 8002432:	00db      	lsls	r3, r3, #3
 8002434:	4413      	add	r3, r2
 8002436:	687a      	ldr	r2, [r7, #4]
 8002438:	6812      	ldr	r2, [r2, #0]
 800243a:	4413      	add	r3, r2
 800243c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002440:	881b      	ldrh	r3, [r3, #0]
 8002442:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002448:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800244a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800244c:	695a      	ldr	r2, [r3, #20]
 800244e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002450:	69db      	ldr	r3, [r3, #28]
 8002452:	441a      	add	r2, r3
 8002454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002456:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002458:	2100      	movs	r1, #0
 800245a:	6878      	ldr	r0, [r7, #4]
 800245c:	f007 f863 	bl	8009526 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002466:	b2db      	uxtb	r3, r3
 8002468:	2b00      	cmp	r3, #0
 800246a:	f000 8282 	beq.w	8002972 <PCD_EP_ISR_Handler+0x5ae>
 800246e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002470:	699b      	ldr	r3, [r3, #24]
 8002472:	2b00      	cmp	r3, #0
 8002474:	f040 827d 	bne.w	8002972 <PCD_EP_ISR_Handler+0x5ae>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800247e:	b2db      	uxtb	r3, r3
 8002480:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002484:	b2da      	uxtb	r2, r3
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	b292      	uxth	r2, r2
 800248c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2200      	movs	r2, #0
 8002494:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002498:	e26b      	b.n	8002972 <PCD_EP_ISR_Handler+0x5ae>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80024a0:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	881b      	ldrh	r3, [r3, #0]
 80024a8:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80024aa:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80024ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d032      	beq.n	800251a <PCD_EP_ISR_Handler+0x156>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80024bc:	b29b      	uxth	r3, r3
 80024be:	461a      	mov	r2, r3
 80024c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c2:	781b      	ldrb	r3, [r3, #0]
 80024c4:	00db      	lsls	r3, r3, #3
 80024c6:	4413      	add	r3, r2
 80024c8:	687a      	ldr	r2, [r7, #4]
 80024ca:	6812      	ldr	r2, [r2, #0]
 80024cc:	4413      	add	r3, r2
 80024ce:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80024d2:	881b      	ldrh	r3, [r3, #0]
 80024d4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80024d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024da:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6818      	ldr	r0, [r3, #0]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 80024e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e8:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80024ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ec:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80024ee:	b29b      	uxth	r3, r3
 80024f0:	f005 f979 	bl	80077e6 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	881b      	ldrh	r3, [r3, #0]
 80024fa:	b29a      	uxth	r2, r3
 80024fc:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002500:	4013      	ands	r3, r2
 8002502:	823b      	strh	r3, [r7, #16]
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	8a3a      	ldrh	r2, [r7, #16]
 800250a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800250e:	b292      	uxth	r2, r2
 8002510:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002512:	6878      	ldr	r0, [r7, #4]
 8002514:	f006 ffda 	bl	80094cc <HAL_PCD_SetupStageCallback>
 8002518:	e22b      	b.n	8002972 <PCD_EP_ISR_Handler+0x5ae>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800251a:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800251e:	2b00      	cmp	r3, #0
 8002520:	f280 8227 	bge.w	8002972 <PCD_EP_ISR_Handler+0x5ae>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	881b      	ldrh	r3, [r3, #0]
 800252a:	b29a      	uxth	r2, r3
 800252c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002530:	4013      	ands	r3, r2
 8002532:	83bb      	strh	r3, [r7, #28]
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	8bba      	ldrh	r2, [r7, #28]
 800253a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800253e:	b292      	uxth	r2, r2
 8002540:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800254a:	b29b      	uxth	r3, r3
 800254c:	461a      	mov	r2, r3
 800254e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002550:	781b      	ldrb	r3, [r3, #0]
 8002552:	00db      	lsls	r3, r3, #3
 8002554:	4413      	add	r3, r2
 8002556:	687a      	ldr	r2, [r7, #4]
 8002558:	6812      	ldr	r2, [r2, #0]
 800255a:	4413      	add	r3, r2
 800255c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002560:	881b      	ldrh	r3, [r3, #0]
 8002562:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002568:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800256a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800256c:	69db      	ldr	r3, [r3, #28]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d019      	beq.n	80025a6 <PCD_EP_ISR_Handler+0x1e2>
 8002572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002574:	695b      	ldr	r3, [r3, #20]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d015      	beq.n	80025a6 <PCD_EP_ISR_Handler+0x1e2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6818      	ldr	r0, [r3, #0]
 800257e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002580:	6959      	ldr	r1, [r3, #20]
 8002582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002584:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002588:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800258a:	b29b      	uxth	r3, r3
 800258c:	f005 f92b 	bl	80077e6 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002592:	695a      	ldr	r2, [r3, #20]
 8002594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002596:	69db      	ldr	r3, [r3, #28]
 8002598:	441a      	add	r2, r3
 800259a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800259c:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800259e:	2100      	movs	r1, #0
 80025a0:	6878      	ldr	r0, [r7, #4]
 80025a2:	f006 ffa5 	bl	80094f0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	61bb      	str	r3, [r7, #24]
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025b4:	b29b      	uxth	r3, r3
 80025b6:	461a      	mov	r2, r3
 80025b8:	69bb      	ldr	r3, [r7, #24]
 80025ba:	4413      	add	r3, r2
 80025bc:	61bb      	str	r3, [r7, #24]
 80025be:	69bb      	ldr	r3, [r7, #24]
 80025c0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80025c4:	617b      	str	r3, [r7, #20]
 80025c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c8:	691b      	ldr	r3, [r3, #16]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d112      	bne.n	80025f4 <PCD_EP_ISR_Handler+0x230>
 80025ce:	697b      	ldr	r3, [r7, #20]
 80025d0:	881b      	ldrh	r3, [r3, #0]
 80025d2:	b29b      	uxth	r3, r3
 80025d4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80025d8:	b29a      	uxth	r2, r3
 80025da:	697b      	ldr	r3, [r7, #20]
 80025dc:	801a      	strh	r2, [r3, #0]
 80025de:	697b      	ldr	r3, [r7, #20]
 80025e0:	881b      	ldrh	r3, [r3, #0]
 80025e2:	b29b      	uxth	r3, r3
 80025e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80025e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80025ec:	b29a      	uxth	r2, r3
 80025ee:	697b      	ldr	r3, [r7, #20]
 80025f0:	801a      	strh	r2, [r3, #0]
 80025f2:	e02f      	b.n	8002654 <PCD_EP_ISR_Handler+0x290>
 80025f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f6:	691b      	ldr	r3, [r3, #16]
 80025f8:	2b3e      	cmp	r3, #62	; 0x3e
 80025fa:	d813      	bhi.n	8002624 <PCD_EP_ISR_Handler+0x260>
 80025fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025fe:	691b      	ldr	r3, [r3, #16]
 8002600:	085b      	lsrs	r3, r3, #1
 8002602:	633b      	str	r3, [r7, #48]	; 0x30
 8002604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002606:	691b      	ldr	r3, [r3, #16]
 8002608:	f003 0301 	and.w	r3, r3, #1
 800260c:	2b00      	cmp	r3, #0
 800260e:	d002      	beq.n	8002616 <PCD_EP_ISR_Handler+0x252>
 8002610:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002612:	3301      	adds	r3, #1
 8002614:	633b      	str	r3, [r7, #48]	; 0x30
 8002616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002618:	b29b      	uxth	r3, r3
 800261a:	029b      	lsls	r3, r3, #10
 800261c:	b29a      	uxth	r2, r3
 800261e:	697b      	ldr	r3, [r7, #20]
 8002620:	801a      	strh	r2, [r3, #0]
 8002622:	e017      	b.n	8002654 <PCD_EP_ISR_Handler+0x290>
 8002624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002626:	691b      	ldr	r3, [r3, #16]
 8002628:	095b      	lsrs	r3, r3, #5
 800262a:	633b      	str	r3, [r7, #48]	; 0x30
 800262c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800262e:	691b      	ldr	r3, [r3, #16]
 8002630:	f003 031f 	and.w	r3, r3, #31
 8002634:	2b00      	cmp	r3, #0
 8002636:	d102      	bne.n	800263e <PCD_EP_ISR_Handler+0x27a>
 8002638:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800263a:	3b01      	subs	r3, #1
 800263c:	633b      	str	r3, [r7, #48]	; 0x30
 800263e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002640:	b29b      	uxth	r3, r3
 8002642:	029b      	lsls	r3, r3, #10
 8002644:	b29b      	uxth	r3, r3
 8002646:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800264a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800264e:	b29a      	uxth	r2, r3
 8002650:	697b      	ldr	r3, [r7, #20]
 8002652:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	881b      	ldrh	r3, [r3, #0]
 800265a:	b29b      	uxth	r3, r3
 800265c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002660:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002664:	827b      	strh	r3, [r7, #18]
 8002666:	8a7b      	ldrh	r3, [r7, #18]
 8002668:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800266c:	827b      	strh	r3, [r7, #18]
 800266e:	8a7b      	ldrh	r3, [r7, #18]
 8002670:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002674:	827b      	strh	r3, [r7, #18]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681a      	ldr	r2, [r3, #0]
 800267a:	8a7b      	ldrh	r3, [r7, #18]
 800267c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002680:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002684:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002688:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800268c:	b29b      	uxth	r3, r3
 800268e:	8013      	strh	r3, [r2, #0]
 8002690:	e16f      	b.n	8002972 <PCD_EP_ISR_Handler+0x5ae>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	461a      	mov	r2, r3
 8002698:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800269c:	009b      	lsls	r3, r3, #2
 800269e:	4413      	add	r3, r2
 80026a0:	881b      	ldrh	r3, [r3, #0]
 80026a2:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80026a4:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	f280 80e4 	bge.w	8002876 <PCD_EP_ISR_Handler+0x4b2>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	461a      	mov	r2, r3
 80026b4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80026b8:	009b      	lsls	r3, r3, #2
 80026ba:	4413      	add	r3, r2
 80026bc:	881b      	ldrh	r3, [r3, #0]
 80026be:	b29a      	uxth	r2, r3
 80026c0:	f640 738f 	movw	r3, #3983	; 0xf8f
 80026c4:	4013      	ands	r3, r2
 80026c6:	853b      	strh	r3, [r7, #40]	; 0x28
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	461a      	mov	r2, r3
 80026ce:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80026d2:	009b      	lsls	r3, r3, #2
 80026d4:	4413      	add	r3, r2
 80026d6:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80026d8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80026dc:	b292      	uxth	r2, r2
 80026de:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80026e0:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80026e4:	4613      	mov	r3, r2
 80026e6:	009b      	lsls	r3, r3, #2
 80026e8:	4413      	add	r3, r2
 80026ea:	00db      	lsls	r3, r3, #3
 80026ec:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80026f0:	687a      	ldr	r2, [r7, #4]
 80026f2:	4413      	add	r3, r2
 80026f4:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80026f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f8:	7b1b      	ldrb	r3, [r3, #12]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d120      	bne.n	8002740 <PCD_EP_ISR_Handler+0x37c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002706:	b29b      	uxth	r3, r3
 8002708:	461a      	mov	r2, r3
 800270a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800270c:	781b      	ldrb	r3, [r3, #0]
 800270e:	00db      	lsls	r3, r3, #3
 8002710:	4413      	add	r3, r2
 8002712:	687a      	ldr	r2, [r7, #4]
 8002714:	6812      	ldr	r2, [r2, #0]
 8002716:	4413      	add	r3, r2
 8002718:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800271c:	881b      	ldrh	r3, [r3, #0]
 800271e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002722:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8002724:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002726:	2b00      	cmp	r3, #0
 8002728:	f000 8083 	beq.w	8002832 <PCD_EP_ISR_Handler+0x46e>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6818      	ldr	r0, [r3, #0]
 8002730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002732:	6959      	ldr	r1, [r3, #20]
 8002734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002736:	88da      	ldrh	r2, [r3, #6]
 8002738:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800273a:	f005 f854 	bl	80077e6 <USB_ReadPMA>
 800273e:	e078      	b.n	8002832 <PCD_EP_ISR_Handler+0x46e>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002742:	78db      	ldrb	r3, [r3, #3]
 8002744:	2b02      	cmp	r3, #2
 8002746:	d108      	bne.n	800275a <PCD_EP_ISR_Handler+0x396>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002748:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800274a:	461a      	mov	r2, r3
 800274c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800274e:	6878      	ldr	r0, [r7, #4]
 8002750:	f000 f91d 	bl	800298e <HAL_PCD_EP_DB_Receive>
 8002754:	4603      	mov	r3, r0
 8002756:	86fb      	strh	r3, [r7, #54]	; 0x36
 8002758:	e06b      	b.n	8002832 <PCD_EP_ISR_Handler+0x46e>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	461a      	mov	r2, r3
 8002760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002762:	781b      	ldrb	r3, [r3, #0]
 8002764:	009b      	lsls	r3, r3, #2
 8002766:	4413      	add	r3, r2
 8002768:	881b      	ldrh	r3, [r3, #0]
 800276a:	b29b      	uxth	r3, r3
 800276c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002770:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002774:	847b      	strh	r3, [r7, #34]	; 0x22
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	461a      	mov	r2, r3
 800277c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800277e:	781b      	ldrb	r3, [r3, #0]
 8002780:	009b      	lsls	r3, r3, #2
 8002782:	441a      	add	r2, r3
 8002784:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002786:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800278a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800278e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002792:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002796:	b29b      	uxth	r3, r3
 8002798:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	461a      	mov	r2, r3
 80027a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a2:	781b      	ldrb	r3, [r3, #0]
 80027a4:	009b      	lsls	r3, r3, #2
 80027a6:	4413      	add	r3, r2
 80027a8:	881b      	ldrh	r3, [r3, #0]
 80027aa:	b29b      	uxth	r3, r3
 80027ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d01f      	beq.n	80027f4 <PCD_EP_ISR_Handler+0x430>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80027bc:	b29b      	uxth	r3, r3
 80027be:	461a      	mov	r2, r3
 80027c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c2:	781b      	ldrb	r3, [r3, #0]
 80027c4:	00db      	lsls	r3, r3, #3
 80027c6:	4413      	add	r3, r2
 80027c8:	687a      	ldr	r2, [r7, #4]
 80027ca:	6812      	ldr	r2, [r2, #0]
 80027cc:	4413      	add	r3, r2
 80027ce:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80027d2:	881b      	ldrh	r3, [r3, #0]
 80027d4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80027d8:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80027da:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d028      	beq.n	8002832 <PCD_EP_ISR_Handler+0x46e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6818      	ldr	r0, [r3, #0]
 80027e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e6:	6959      	ldr	r1, [r3, #20]
 80027e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ea:	891a      	ldrh	r2, [r3, #8]
 80027ec:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80027ee:	f004 fffa 	bl	80077e6 <USB_ReadPMA>
 80027f2:	e01e      	b.n	8002832 <PCD_EP_ISR_Handler+0x46e>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80027fc:	b29b      	uxth	r3, r3
 80027fe:	461a      	mov	r2, r3
 8002800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002802:	781b      	ldrb	r3, [r3, #0]
 8002804:	00db      	lsls	r3, r3, #3
 8002806:	4413      	add	r3, r2
 8002808:	687a      	ldr	r2, [r7, #4]
 800280a:	6812      	ldr	r2, [r2, #0]
 800280c:	4413      	add	r3, r2
 800280e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002812:	881b      	ldrh	r3, [r3, #0]
 8002814:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002818:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 800281a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800281c:	2b00      	cmp	r3, #0
 800281e:	d008      	beq.n	8002832 <PCD_EP_ISR_Handler+0x46e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6818      	ldr	r0, [r3, #0]
 8002824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002826:	6959      	ldr	r1, [r3, #20]
 8002828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800282a:	895a      	ldrh	r2, [r3, #10]
 800282c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800282e:	f004 ffda 	bl	80077e6 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002834:	69da      	ldr	r2, [r3, #28]
 8002836:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002838:	441a      	add	r2, r3
 800283a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800283c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800283e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002840:	695a      	ldr	r2, [r3, #20]
 8002842:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002844:	441a      	add	r2, r3
 8002846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002848:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800284a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800284c:	699b      	ldr	r3, [r3, #24]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d004      	beq.n	800285c <PCD_EP_ISR_Handler+0x498>
 8002852:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8002854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002856:	691b      	ldr	r3, [r3, #16]
 8002858:	429a      	cmp	r2, r3
 800285a:	d206      	bcs.n	800286a <PCD_EP_ISR_Handler+0x4a6>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800285c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800285e:	781b      	ldrb	r3, [r3, #0]
 8002860:	4619      	mov	r1, r3
 8002862:	6878      	ldr	r0, [r7, #4]
 8002864:	f006 fe44 	bl	80094f0 <HAL_PCD_DataOutStageCallback>
 8002868:	e005      	b.n	8002876 <PCD_EP_ISR_Handler+0x4b2>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002870:	4618      	mov	r0, r3
 8002872:	f003 fd02 	bl	800627a <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002876:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002878:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800287c:	2b00      	cmp	r3, #0
 800287e:	d078      	beq.n	8002972 <PCD_EP_ISR_Handler+0x5ae>
      {
        ep = &hpcd->IN_ep[epindex];
 8002880:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002884:	1c5a      	adds	r2, r3, #1
 8002886:	4613      	mov	r3, r2
 8002888:	009b      	lsls	r3, r3, #2
 800288a:	4413      	add	r3, r2
 800288c:	00db      	lsls	r3, r3, #3
 800288e:	687a      	ldr	r2, [r7, #4]
 8002890:	4413      	add	r3, r2
 8002892:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	461a      	mov	r2, r3
 800289a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800289e:	009b      	lsls	r3, r3, #2
 80028a0:	4413      	add	r3, r2
 80028a2:	881b      	ldrh	r3, [r3, #0]
 80028a4:	b29b      	uxth	r3, r3
 80028a6:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80028aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028ae:	843b      	strh	r3, [r7, #32]
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	461a      	mov	r2, r3
 80028b6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80028ba:	009b      	lsls	r3, r3, #2
 80028bc:	441a      	add	r2, r3
 80028be:	8c3b      	ldrh	r3, [r7, #32]
 80028c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80028c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80028c8:	b29b      	uxth	r3, r3
 80028ca:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 80028cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ce:	78db      	ldrb	r3, [r3, #3]
 80028d0:	2b02      	cmp	r3, #2
 80028d2:	d108      	bne.n	80028e6 <PCD_EP_ISR_Handler+0x522>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80028d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d6:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 80028d8:	2b02      	cmp	r3, #2
 80028da:	d144      	bne.n	8002966 <PCD_EP_ISR_Handler+0x5a2>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80028dc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80028de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d13f      	bne.n	8002966 <PCD_EP_ISR_Handler+0x5a2>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80028ee:	b29b      	uxth	r3, r3
 80028f0:	461a      	mov	r2, r3
 80028f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f4:	781b      	ldrb	r3, [r3, #0]
 80028f6:	00db      	lsls	r3, r3, #3
 80028f8:	4413      	add	r3, r2
 80028fa:	687a      	ldr	r2, [r7, #4]
 80028fc:	6812      	ldr	r2, [r2, #0]
 80028fe:	4413      	add	r3, r2
 8002900:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002904:	881b      	ldrh	r3, [r3, #0]
 8002906:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800290a:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 800290c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800290e:	699a      	ldr	r2, [r3, #24]
 8002910:	8bfb      	ldrh	r3, [r7, #30]
 8002912:	429a      	cmp	r2, r3
 8002914:	d906      	bls.n	8002924 <PCD_EP_ISR_Handler+0x560>
          {
            ep->xfer_len -= TxByteNbre;
 8002916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002918:	699a      	ldr	r2, [r3, #24]
 800291a:	8bfb      	ldrh	r3, [r7, #30]
 800291c:	1ad2      	subs	r2, r2, r3
 800291e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002920:	619a      	str	r2, [r3, #24]
 8002922:	e002      	b.n	800292a <PCD_EP_ISR_Handler+0x566>
          }
          else
          {
            ep->xfer_len = 0U;
 8002924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002926:	2200      	movs	r2, #0
 8002928:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 800292a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800292c:	699b      	ldr	r3, [r3, #24]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d106      	bne.n	8002940 <PCD_EP_ISR_Handler+0x57c>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002934:	781b      	ldrb	r3, [r3, #0]
 8002936:	4619      	mov	r1, r3
 8002938:	6878      	ldr	r0, [r7, #4]
 800293a:	f006 fdf4 	bl	8009526 <HAL_PCD_DataInStageCallback>
 800293e:	e018      	b.n	8002972 <PCD_EP_ISR_Handler+0x5ae>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8002940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002942:	695a      	ldr	r2, [r3, #20]
 8002944:	8bfb      	ldrh	r3, [r7, #30]
 8002946:	441a      	add	r2, r3
 8002948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800294a:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 800294c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800294e:	69da      	ldr	r2, [r3, #28]
 8002950:	8bfb      	ldrh	r3, [r7, #30]
 8002952:	441a      	add	r2, r3
 8002954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002956:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800295e:	4618      	mov	r0, r3
 8002960:	f003 fc8b 	bl	800627a <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8002964:	e005      	b.n	8002972 <PCD_EP_ISR_Handler+0x5ae>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002966:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002968:	461a      	mov	r2, r3
 800296a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800296c:	6878      	ldr	r0, [r7, #4]
 800296e:	f000 f917 	bl	8002ba0 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800297a:	b29b      	uxth	r3, r3
 800297c:	b21b      	sxth	r3, r3
 800297e:	2b00      	cmp	r3, #0
 8002980:	f6ff ad25 	blt.w	80023ce <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002984:	2300      	movs	r3, #0
}
 8002986:	4618      	mov	r0, r3
 8002988:	3738      	adds	r7, #56	; 0x38
 800298a:	46bd      	mov	sp, r7
 800298c:	bd80      	pop	{r7, pc}

0800298e <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800298e:	b580      	push	{r7, lr}
 8002990:	b088      	sub	sp, #32
 8002992:	af00      	add	r7, sp, #0
 8002994:	60f8      	str	r0, [r7, #12]
 8002996:	60b9      	str	r1, [r7, #8]
 8002998:	4613      	mov	r3, r2
 800299a:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800299c:	88fb      	ldrh	r3, [r7, #6]
 800299e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d07c      	beq.n	8002aa0 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80029ae:	b29b      	uxth	r3, r3
 80029b0:	461a      	mov	r2, r3
 80029b2:	68bb      	ldr	r3, [r7, #8]
 80029b4:	781b      	ldrb	r3, [r3, #0]
 80029b6:	00db      	lsls	r3, r3, #3
 80029b8:	4413      	add	r3, r2
 80029ba:	68fa      	ldr	r2, [r7, #12]
 80029bc:	6812      	ldr	r2, [r2, #0]
 80029be:	4413      	add	r3, r2
 80029c0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80029c4:	881b      	ldrh	r3, [r3, #0]
 80029c6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80029ca:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80029cc:	68bb      	ldr	r3, [r7, #8]
 80029ce:	699a      	ldr	r2, [r3, #24]
 80029d0:	8b7b      	ldrh	r3, [r7, #26]
 80029d2:	429a      	cmp	r2, r3
 80029d4:	d306      	bcc.n	80029e4 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 80029d6:	68bb      	ldr	r3, [r7, #8]
 80029d8:	699a      	ldr	r2, [r3, #24]
 80029da:	8b7b      	ldrh	r3, [r7, #26]
 80029dc:	1ad2      	subs	r2, r2, r3
 80029de:	68bb      	ldr	r3, [r7, #8]
 80029e0:	619a      	str	r2, [r3, #24]
 80029e2:	e002      	b.n	80029ea <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 80029e4:	68bb      	ldr	r3, [r7, #8]
 80029e6:	2200      	movs	r2, #0
 80029e8:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80029ea:	68bb      	ldr	r3, [r7, #8]
 80029ec:	699b      	ldr	r3, [r3, #24]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d123      	bne.n	8002a3a <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	461a      	mov	r2, r3
 80029f8:	68bb      	ldr	r3, [r7, #8]
 80029fa:	781b      	ldrb	r3, [r3, #0]
 80029fc:	009b      	lsls	r3, r3, #2
 80029fe:	4413      	add	r3, r2
 8002a00:	881b      	ldrh	r3, [r3, #0]
 8002a02:	b29b      	uxth	r3, r3
 8002a04:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002a08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a0c:	833b      	strh	r3, [r7, #24]
 8002a0e:	8b3b      	ldrh	r3, [r7, #24]
 8002a10:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002a14:	833b      	strh	r3, [r7, #24]
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	461a      	mov	r2, r3
 8002a1c:	68bb      	ldr	r3, [r7, #8]
 8002a1e:	781b      	ldrb	r3, [r3, #0]
 8002a20:	009b      	lsls	r3, r3, #2
 8002a22:	441a      	add	r2, r3
 8002a24:	8b3b      	ldrh	r3, [r7, #24]
 8002a26:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002a2a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002a2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a36:	b29b      	uxth	r3, r3
 8002a38:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002a3a:	88fb      	ldrh	r3, [r7, #6]
 8002a3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d01f      	beq.n	8002a84 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	461a      	mov	r2, r3
 8002a4a:	68bb      	ldr	r3, [r7, #8]
 8002a4c:	781b      	ldrb	r3, [r3, #0]
 8002a4e:	009b      	lsls	r3, r3, #2
 8002a50:	4413      	add	r3, r2
 8002a52:	881b      	ldrh	r3, [r3, #0]
 8002a54:	b29b      	uxth	r3, r3
 8002a56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a5e:	82fb      	strh	r3, [r7, #22]
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	461a      	mov	r2, r3
 8002a66:	68bb      	ldr	r3, [r7, #8]
 8002a68:	781b      	ldrb	r3, [r3, #0]
 8002a6a:	009b      	lsls	r3, r3, #2
 8002a6c:	441a      	add	r2, r3
 8002a6e:	8afb      	ldrh	r3, [r7, #22]
 8002a70:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002a74:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002a78:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a7c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002a80:	b29b      	uxth	r3, r3
 8002a82:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002a84:	8b7b      	ldrh	r3, [r7, #26]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	f000 8085 	beq.w	8002b96 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	6818      	ldr	r0, [r3, #0]
 8002a90:	68bb      	ldr	r3, [r7, #8]
 8002a92:	6959      	ldr	r1, [r3, #20]
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	891a      	ldrh	r2, [r3, #8]
 8002a98:	8b7b      	ldrh	r3, [r7, #26]
 8002a9a:	f004 fea4 	bl	80077e6 <USB_ReadPMA>
 8002a9e:	e07a      	b.n	8002b96 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002aa8:	b29b      	uxth	r3, r3
 8002aaa:	461a      	mov	r2, r3
 8002aac:	68bb      	ldr	r3, [r7, #8]
 8002aae:	781b      	ldrb	r3, [r3, #0]
 8002ab0:	00db      	lsls	r3, r3, #3
 8002ab2:	4413      	add	r3, r2
 8002ab4:	68fa      	ldr	r2, [r7, #12]
 8002ab6:	6812      	ldr	r2, [r2, #0]
 8002ab8:	4413      	add	r3, r2
 8002aba:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002abe:	881b      	ldrh	r3, [r3, #0]
 8002ac0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ac4:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002ac6:	68bb      	ldr	r3, [r7, #8]
 8002ac8:	699a      	ldr	r2, [r3, #24]
 8002aca:	8b7b      	ldrh	r3, [r7, #26]
 8002acc:	429a      	cmp	r2, r3
 8002ace:	d306      	bcc.n	8002ade <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8002ad0:	68bb      	ldr	r3, [r7, #8]
 8002ad2:	699a      	ldr	r2, [r3, #24]
 8002ad4:	8b7b      	ldrh	r3, [r7, #26]
 8002ad6:	1ad2      	subs	r2, r2, r3
 8002ad8:	68bb      	ldr	r3, [r7, #8]
 8002ada:	619a      	str	r2, [r3, #24]
 8002adc:	e002      	b.n	8002ae4 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8002ade:	68bb      	ldr	r3, [r7, #8]
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002ae4:	68bb      	ldr	r3, [r7, #8]
 8002ae6:	699b      	ldr	r3, [r3, #24]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d123      	bne.n	8002b34 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	461a      	mov	r2, r3
 8002af2:	68bb      	ldr	r3, [r7, #8]
 8002af4:	781b      	ldrb	r3, [r3, #0]
 8002af6:	009b      	lsls	r3, r3, #2
 8002af8:	4413      	add	r3, r2
 8002afa:	881b      	ldrh	r3, [r3, #0]
 8002afc:	b29b      	uxth	r3, r3
 8002afe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002b02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b06:	83fb      	strh	r3, [r7, #30]
 8002b08:	8bfb      	ldrh	r3, [r7, #30]
 8002b0a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002b0e:	83fb      	strh	r3, [r7, #30]
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	461a      	mov	r2, r3
 8002b16:	68bb      	ldr	r3, [r7, #8]
 8002b18:	781b      	ldrb	r3, [r3, #0]
 8002b1a:	009b      	lsls	r3, r3, #2
 8002b1c:	441a      	add	r2, r3
 8002b1e:	8bfb      	ldrh	r3, [r7, #30]
 8002b20:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002b24:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002b28:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b30:	b29b      	uxth	r3, r3
 8002b32:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002b34:	88fb      	ldrh	r3, [r7, #6]
 8002b36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d11f      	bne.n	8002b7e <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	461a      	mov	r2, r3
 8002b44:	68bb      	ldr	r3, [r7, #8]
 8002b46:	781b      	ldrb	r3, [r3, #0]
 8002b48:	009b      	lsls	r3, r3, #2
 8002b4a:	4413      	add	r3, r2
 8002b4c:	881b      	ldrh	r3, [r3, #0]
 8002b4e:	b29b      	uxth	r3, r3
 8002b50:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b58:	83bb      	strh	r3, [r7, #28]
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	461a      	mov	r2, r3
 8002b60:	68bb      	ldr	r3, [r7, #8]
 8002b62:	781b      	ldrb	r3, [r3, #0]
 8002b64:	009b      	lsls	r3, r3, #2
 8002b66:	441a      	add	r2, r3
 8002b68:	8bbb      	ldrh	r3, [r7, #28]
 8002b6a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002b6e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002b72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b76:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002b7a:	b29b      	uxth	r3, r3
 8002b7c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002b7e:	8b7b      	ldrh	r3, [r7, #26]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d008      	beq.n	8002b96 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	6818      	ldr	r0, [r3, #0]
 8002b88:	68bb      	ldr	r3, [r7, #8]
 8002b8a:	6959      	ldr	r1, [r3, #20]
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	895a      	ldrh	r2, [r3, #10]
 8002b90:	8b7b      	ldrh	r3, [r7, #26]
 8002b92:	f004 fe28 	bl	80077e6 <USB_ReadPMA>
    }
  }

  return count;
 8002b96:	8b7b      	ldrh	r3, [r7, #26]
}
 8002b98:	4618      	mov	r0, r3
 8002b9a:	3720      	adds	r7, #32
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	bd80      	pop	{r7, pc}

08002ba0 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b092      	sub	sp, #72	; 0x48
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	60f8      	str	r0, [r7, #12]
 8002ba8:	60b9      	str	r1, [r7, #8]
 8002baa:	4613      	mov	r3, r2
 8002bac:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002bae:	88fb      	ldrh	r3, [r7, #6]
 8002bb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	f000 8130 	beq.w	8002e1a <HAL_PCD_EP_DB_Transmit+0x27a>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002bc2:	b29b      	uxth	r3, r3
 8002bc4:	461a      	mov	r2, r3
 8002bc6:	68bb      	ldr	r3, [r7, #8]
 8002bc8:	781b      	ldrb	r3, [r3, #0]
 8002bca:	00db      	lsls	r3, r3, #3
 8002bcc:	4413      	add	r3, r2
 8002bce:	68fa      	ldr	r2, [r7, #12]
 8002bd0:	6812      	ldr	r2, [r2, #0]
 8002bd2:	4413      	add	r3, r2
 8002bd4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002bd8:	881b      	ldrh	r3, [r3, #0]
 8002bda:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002bde:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len > TxByteNbre)
 8002be0:	68bb      	ldr	r3, [r7, #8]
 8002be2:	699a      	ldr	r2, [r3, #24]
 8002be4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002be6:	429a      	cmp	r2, r3
 8002be8:	d906      	bls.n	8002bf8 <HAL_PCD_EP_DB_Transmit+0x58>
    {
      ep->xfer_len -= TxByteNbre;
 8002bea:	68bb      	ldr	r3, [r7, #8]
 8002bec:	699a      	ldr	r2, [r3, #24]
 8002bee:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002bf0:	1ad2      	subs	r2, r2, r3
 8002bf2:	68bb      	ldr	r3, [r7, #8]
 8002bf4:	619a      	str	r2, [r3, #24]
 8002bf6:	e002      	b.n	8002bfe <HAL_PCD_EP_DB_Transmit+0x5e>
    }
    else
    {
      ep->xfer_len = 0U;
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002bfe:	68bb      	ldr	r3, [r7, #8]
 8002c00:	699b      	ldr	r3, [r3, #24]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d12c      	bne.n	8002c60 <HAL_PCD_EP_DB_Transmit+0xc0>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002c06:	68bb      	ldr	r3, [r7, #8]
 8002c08:	781b      	ldrb	r3, [r3, #0]
 8002c0a:	4619      	mov	r1, r3
 8002c0c:	68f8      	ldr	r0, [r7, #12]
 8002c0e:	f006 fc8a 	bl	8009526 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002c12:	88fb      	ldrh	r3, [r7, #6]
 8002c14:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	f000 822d 	beq.w	8003078 <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	461a      	mov	r2, r3
 8002c24:	68bb      	ldr	r3, [r7, #8]
 8002c26:	781b      	ldrb	r3, [r3, #0]
 8002c28:	009b      	lsls	r3, r3, #2
 8002c2a:	4413      	add	r3, r2
 8002c2c:	881b      	ldrh	r3, [r3, #0]
 8002c2e:	b29b      	uxth	r3, r3
 8002c30:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c38:	827b      	strh	r3, [r7, #18]
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	461a      	mov	r2, r3
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	781b      	ldrb	r3, [r3, #0]
 8002c44:	009b      	lsls	r3, r3, #2
 8002c46:	441a      	add	r2, r3
 8002c48:	8a7b      	ldrh	r3, [r7, #18]
 8002c4a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002c4e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002c52:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002c56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c5a:	b29b      	uxth	r3, r3
 8002c5c:	8013      	strh	r3, [r2, #0]
 8002c5e:	e20b      	b.n	8003078 <HAL_PCD_EP_DB_Transmit+0x4d8>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002c60:	88fb      	ldrh	r3, [r7, #6]
 8002c62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d01f      	beq.n	8002caa <HAL_PCD_EP_DB_Transmit+0x10a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	461a      	mov	r2, r3
 8002c70:	68bb      	ldr	r3, [r7, #8]
 8002c72:	781b      	ldrb	r3, [r3, #0]
 8002c74:	009b      	lsls	r3, r3, #2
 8002c76:	4413      	add	r3, r2
 8002c78:	881b      	ldrh	r3, [r3, #0]
 8002c7a:	b29b      	uxth	r3, r3
 8002c7c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c84:	84bb      	strh	r3, [r7, #36]	; 0x24
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	461a      	mov	r2, r3
 8002c8c:	68bb      	ldr	r3, [r7, #8]
 8002c8e:	781b      	ldrb	r3, [r3, #0]
 8002c90:	009b      	lsls	r3, r3, #2
 8002c92:	441a      	add	r2, r3
 8002c94:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002c96:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002c9a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002c9e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002ca2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ca6:	b29b      	uxth	r3, r3
 8002ca8:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002caa:	68bb      	ldr	r3, [r7, #8]
 8002cac:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002cb0:	2b01      	cmp	r3, #1
 8002cb2:	f040 81e1 	bne.w	8003078 <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        ep->xfer_buff += TxByteNbre;
 8002cb6:	68bb      	ldr	r3, [r7, #8]
 8002cb8:	695a      	ldr	r2, [r3, #20]
 8002cba:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002cbc:	441a      	add	r2, r3
 8002cbe:	68bb      	ldr	r3, [r7, #8]
 8002cc0:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002cc2:	68bb      	ldr	r3, [r7, #8]
 8002cc4:	69da      	ldr	r2, [r3, #28]
 8002cc6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002cc8:	441a      	add	r2, r3
 8002cca:	68bb      	ldr	r3, [r7, #8]
 8002ccc:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002cce:	68bb      	ldr	r3, [r7, #8]
 8002cd0:	6a1a      	ldr	r2, [r3, #32]
 8002cd2:	68bb      	ldr	r3, [r7, #8]
 8002cd4:	691b      	ldr	r3, [r3, #16]
 8002cd6:	429a      	cmp	r2, r3
 8002cd8:	d309      	bcc.n	8002cee <HAL_PCD_EP_DB_Transmit+0x14e>
        {
          len = ep->maxpacket;
 8002cda:	68bb      	ldr	r3, [r7, #8]
 8002cdc:	691b      	ldr	r3, [r3, #16]
 8002cde:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	6a1a      	ldr	r2, [r3, #32]
 8002ce4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ce6:	1ad2      	subs	r2, r2, r3
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	621a      	str	r2, [r3, #32]
 8002cec:	e014      	b.n	8002d18 <HAL_PCD_EP_DB_Transmit+0x178>
        }
        else if (ep->xfer_len_db == 0U)
 8002cee:	68bb      	ldr	r3, [r7, #8]
 8002cf0:	6a1b      	ldr	r3, [r3, #32]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d106      	bne.n	8002d04 <HAL_PCD_EP_DB_Transmit+0x164>
        {
          len = TxByteNbre;
 8002cf6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002cf8:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 8002cfa:	68bb      	ldr	r3, [r7, #8]
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002d02:	e009      	b.n	8002d18 <HAL_PCD_EP_DB_Transmit+0x178>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002d04:	68bb      	ldr	r3, [r7, #8]
 8002d06:	2200      	movs	r2, #0
 8002d08:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8002d0c:	68bb      	ldr	r3, [r7, #8]
 8002d0e:	6a1b      	ldr	r3, [r3, #32]
 8002d10:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 8002d12:	68bb      	ldr	r3, [r7, #8]
 8002d14:	2200      	movs	r2, #0
 8002d16:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002d18:	68bb      	ldr	r3, [r7, #8]
 8002d1a:	785b      	ldrb	r3, [r3, #1]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d155      	bne.n	8002dcc <HAL_PCD_EP_DB_Transmit+0x22c>
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	61bb      	str	r3, [r7, #24]
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d2e:	b29b      	uxth	r3, r3
 8002d30:	461a      	mov	r2, r3
 8002d32:	69bb      	ldr	r3, [r7, #24]
 8002d34:	4413      	add	r3, r2
 8002d36:	61bb      	str	r3, [r7, #24]
 8002d38:	68bb      	ldr	r3, [r7, #8]
 8002d3a:	781b      	ldrb	r3, [r3, #0]
 8002d3c:	00da      	lsls	r2, r3, #3
 8002d3e:	69bb      	ldr	r3, [r7, #24]
 8002d40:	4413      	add	r3, r2
 8002d42:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002d46:	617b      	str	r3, [r7, #20]
 8002d48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d112      	bne.n	8002d74 <HAL_PCD_EP_DB_Transmit+0x1d4>
 8002d4e:	697b      	ldr	r3, [r7, #20]
 8002d50:	881b      	ldrh	r3, [r3, #0]
 8002d52:	b29b      	uxth	r3, r3
 8002d54:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002d58:	b29a      	uxth	r2, r3
 8002d5a:	697b      	ldr	r3, [r7, #20]
 8002d5c:	801a      	strh	r2, [r3, #0]
 8002d5e:	697b      	ldr	r3, [r7, #20]
 8002d60:	881b      	ldrh	r3, [r3, #0]
 8002d62:	b29b      	uxth	r3, r3
 8002d64:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d68:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d6c:	b29a      	uxth	r2, r3
 8002d6e:	697b      	ldr	r3, [r7, #20]
 8002d70:	801a      	strh	r2, [r3, #0]
 8002d72:	e047      	b.n	8002e04 <HAL_PCD_EP_DB_Transmit+0x264>
 8002d74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d76:	2b3e      	cmp	r3, #62	; 0x3e
 8002d78:	d811      	bhi.n	8002d9e <HAL_PCD_EP_DB_Transmit+0x1fe>
 8002d7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d7c:	085b      	lsrs	r3, r3, #1
 8002d7e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d82:	f003 0301 	and.w	r3, r3, #1
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d002      	beq.n	8002d90 <HAL_PCD_EP_DB_Transmit+0x1f0>
 8002d8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d8c:	3301      	adds	r3, #1
 8002d8e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d92:	b29b      	uxth	r3, r3
 8002d94:	029b      	lsls	r3, r3, #10
 8002d96:	b29a      	uxth	r2, r3
 8002d98:	697b      	ldr	r3, [r7, #20]
 8002d9a:	801a      	strh	r2, [r3, #0]
 8002d9c:	e032      	b.n	8002e04 <HAL_PCD_EP_DB_Transmit+0x264>
 8002d9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002da0:	095b      	lsrs	r3, r3, #5
 8002da2:	62bb      	str	r3, [r7, #40]	; 0x28
 8002da4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002da6:	f003 031f 	and.w	r3, r3, #31
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d102      	bne.n	8002db4 <HAL_PCD_EP_DB_Transmit+0x214>
 8002dae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002db0:	3b01      	subs	r3, #1
 8002db2:	62bb      	str	r3, [r7, #40]	; 0x28
 8002db4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002db6:	b29b      	uxth	r3, r3
 8002db8:	029b      	lsls	r3, r3, #10
 8002dba:	b29b      	uxth	r3, r3
 8002dbc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002dc0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002dc4:	b29a      	uxth	r2, r3
 8002dc6:	697b      	ldr	r3, [r7, #20]
 8002dc8:	801a      	strh	r2, [r3, #0]
 8002dca:	e01b      	b.n	8002e04 <HAL_PCD_EP_DB_Transmit+0x264>
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	785b      	ldrb	r3, [r3, #1]
 8002dd0:	2b01      	cmp	r3, #1
 8002dd2:	d117      	bne.n	8002e04 <HAL_PCD_EP_DB_Transmit+0x264>
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	623b      	str	r3, [r7, #32]
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002de2:	b29b      	uxth	r3, r3
 8002de4:	461a      	mov	r2, r3
 8002de6:	6a3b      	ldr	r3, [r7, #32]
 8002de8:	4413      	add	r3, r2
 8002dea:	623b      	str	r3, [r7, #32]
 8002dec:	68bb      	ldr	r3, [r7, #8]
 8002dee:	781b      	ldrb	r3, [r3, #0]
 8002df0:	00da      	lsls	r2, r3, #3
 8002df2:	6a3b      	ldr	r3, [r7, #32]
 8002df4:	4413      	add	r3, r2
 8002df6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002dfa:	61fb      	str	r3, [r7, #28]
 8002dfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dfe:	b29a      	uxth	r2, r3
 8002e00:	69fb      	ldr	r3, [r7, #28]
 8002e02:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	6818      	ldr	r0, [r3, #0]
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	6959      	ldr	r1, [r3, #20]
 8002e0c:	68bb      	ldr	r3, [r7, #8]
 8002e0e:	891a      	ldrh	r2, [r3, #8]
 8002e10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e12:	b29b      	uxth	r3, r3
 8002e14:	f004 fca6 	bl	8007764 <USB_WritePMA>
 8002e18:	e12e      	b.n	8003078 <HAL_PCD_EP_DB_Transmit+0x4d8>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e22:	b29b      	uxth	r3, r3
 8002e24:	461a      	mov	r2, r3
 8002e26:	68bb      	ldr	r3, [r7, #8]
 8002e28:	781b      	ldrb	r3, [r3, #0]
 8002e2a:	00db      	lsls	r3, r3, #3
 8002e2c:	4413      	add	r3, r2
 8002e2e:	68fa      	ldr	r2, [r7, #12]
 8002e30:	6812      	ldr	r2, [r2, #0]
 8002e32:	4413      	add	r3, r2
 8002e34:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002e38:	881b      	ldrh	r3, [r3, #0]
 8002e3a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002e3e:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len >= TxByteNbre)
 8002e40:	68bb      	ldr	r3, [r7, #8]
 8002e42:	699a      	ldr	r2, [r3, #24]
 8002e44:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002e46:	429a      	cmp	r2, r3
 8002e48:	d306      	bcc.n	8002e58 <HAL_PCD_EP_DB_Transmit+0x2b8>
    {
      ep->xfer_len -= TxByteNbre;
 8002e4a:	68bb      	ldr	r3, [r7, #8]
 8002e4c:	699a      	ldr	r2, [r3, #24]
 8002e4e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002e50:	1ad2      	subs	r2, r2, r3
 8002e52:	68bb      	ldr	r3, [r7, #8]
 8002e54:	619a      	str	r2, [r3, #24]
 8002e56:	e002      	b.n	8002e5e <HAL_PCD_EP_DB_Transmit+0x2be>
    }
    else
    {
      ep->xfer_len = 0U;
 8002e58:	68bb      	ldr	r3, [r7, #8]
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002e5e:	68bb      	ldr	r3, [r7, #8]
 8002e60:	699b      	ldr	r3, [r3, #24]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d12c      	bne.n	8002ec0 <HAL_PCD_EP_DB_Transmit+0x320>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002e66:	68bb      	ldr	r3, [r7, #8]
 8002e68:	781b      	ldrb	r3, [r3, #0]
 8002e6a:	4619      	mov	r1, r3
 8002e6c:	68f8      	ldr	r0, [r7, #12]
 8002e6e:	f006 fb5a 	bl	8009526 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002e72:	88fb      	ldrh	r3, [r7, #6]
 8002e74:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	f040 80fd 	bne.w	8003078 <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	461a      	mov	r2, r3
 8002e84:	68bb      	ldr	r3, [r7, #8]
 8002e86:	781b      	ldrb	r3, [r3, #0]
 8002e88:	009b      	lsls	r3, r3, #2
 8002e8a:	4413      	add	r3, r2
 8002e8c:	881b      	ldrh	r3, [r3, #0]
 8002e8e:	b29b      	uxth	r3, r3
 8002e90:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e98:	84fb      	strh	r3, [r7, #38]	; 0x26
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	461a      	mov	r2, r3
 8002ea0:	68bb      	ldr	r3, [r7, #8]
 8002ea2:	781b      	ldrb	r3, [r3, #0]
 8002ea4:	009b      	lsls	r3, r3, #2
 8002ea6:	441a      	add	r2, r3
 8002ea8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002eaa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002eae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002eb2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002eb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002eba:	b29b      	uxth	r3, r3
 8002ebc:	8013      	strh	r3, [r2, #0]
 8002ebe:	e0db      	b.n	8003078 <HAL_PCD_EP_DB_Transmit+0x4d8>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002ec0:	88fb      	ldrh	r3, [r7, #6]
 8002ec2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d11f      	bne.n	8002f0a <HAL_PCD_EP_DB_Transmit+0x36a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	461a      	mov	r2, r3
 8002ed0:	68bb      	ldr	r3, [r7, #8]
 8002ed2:	781b      	ldrb	r3, [r3, #0]
 8002ed4:	009b      	lsls	r3, r3, #2
 8002ed6:	4413      	add	r3, r2
 8002ed8:	881b      	ldrh	r3, [r3, #0]
 8002eda:	b29b      	uxth	r3, r3
 8002edc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ee0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ee4:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	461a      	mov	r2, r3
 8002eec:	68bb      	ldr	r3, [r7, #8]
 8002eee:	781b      	ldrb	r3, [r3, #0]
 8002ef0:	009b      	lsls	r3, r3, #2
 8002ef2:	441a      	add	r2, r3
 8002ef4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8002ef6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002efa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002efe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002f02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f06:	b29b      	uxth	r3, r3
 8002f08:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002f0a:	68bb      	ldr	r3, [r7, #8]
 8002f0c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002f10:	2b01      	cmp	r3, #1
 8002f12:	f040 80b1 	bne.w	8003078 <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        ep->xfer_buff += TxByteNbre;
 8002f16:	68bb      	ldr	r3, [r7, #8]
 8002f18:	695a      	ldr	r2, [r3, #20]
 8002f1a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002f1c:	441a      	add	r2, r3
 8002f1e:	68bb      	ldr	r3, [r7, #8]
 8002f20:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002f22:	68bb      	ldr	r3, [r7, #8]
 8002f24:	69da      	ldr	r2, [r3, #28]
 8002f26:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002f28:	441a      	add	r2, r3
 8002f2a:	68bb      	ldr	r3, [r7, #8]
 8002f2c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002f2e:	68bb      	ldr	r3, [r7, #8]
 8002f30:	6a1a      	ldr	r2, [r3, #32]
 8002f32:	68bb      	ldr	r3, [r7, #8]
 8002f34:	691b      	ldr	r3, [r3, #16]
 8002f36:	429a      	cmp	r2, r3
 8002f38:	d309      	bcc.n	8002f4e <HAL_PCD_EP_DB_Transmit+0x3ae>
        {
          len = ep->maxpacket;
 8002f3a:	68bb      	ldr	r3, [r7, #8]
 8002f3c:	691b      	ldr	r3, [r3, #16]
 8002f3e:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 8002f40:	68bb      	ldr	r3, [r7, #8]
 8002f42:	6a1a      	ldr	r2, [r3, #32]
 8002f44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f46:	1ad2      	subs	r2, r2, r3
 8002f48:	68bb      	ldr	r3, [r7, #8]
 8002f4a:	621a      	str	r2, [r3, #32]
 8002f4c:	e014      	b.n	8002f78 <HAL_PCD_EP_DB_Transmit+0x3d8>
        }
        else if (ep->xfer_len_db == 0U)
 8002f4e:	68bb      	ldr	r3, [r7, #8]
 8002f50:	6a1b      	ldr	r3, [r3, #32]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d106      	bne.n	8002f64 <HAL_PCD_EP_DB_Transmit+0x3c4>
        {
          len = TxByteNbre;
 8002f56:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002f58:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 8002f5a:	68bb      	ldr	r3, [r7, #8]
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002f62:	e009      	b.n	8002f78 <HAL_PCD_EP_DB_Transmit+0x3d8>
        }
        else
        {
          len = ep->xfer_len_db;
 8002f64:	68bb      	ldr	r3, [r7, #8]
 8002f66:	6a1b      	ldr	r3, [r3, #32]
 8002f68:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 8002f6a:	68bb      	ldr	r3, [r7, #8]
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002f70:	68bb      	ldr	r3, [r7, #8]
 8002f72:	2200      	movs	r2, #0
 8002f74:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	637b      	str	r3, [r7, #52]	; 0x34
 8002f7e:	68bb      	ldr	r3, [r7, #8]
 8002f80:	785b      	ldrb	r3, [r3, #1]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d155      	bne.n	8003032 <HAL_PCD_EP_DB_Transmit+0x492>
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	647b      	str	r3, [r7, #68]	; 0x44
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f94:	b29b      	uxth	r3, r3
 8002f96:	461a      	mov	r2, r3
 8002f98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f9a:	4413      	add	r3, r2
 8002f9c:	647b      	str	r3, [r7, #68]	; 0x44
 8002f9e:	68bb      	ldr	r3, [r7, #8]
 8002fa0:	781b      	ldrb	r3, [r3, #0]
 8002fa2:	00da      	lsls	r2, r3, #3
 8002fa4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002fa6:	4413      	add	r3, r2
 8002fa8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002fac:	643b      	str	r3, [r7, #64]	; 0x40
 8002fae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d112      	bne.n	8002fda <HAL_PCD_EP_DB_Transmit+0x43a>
 8002fb4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002fb6:	881b      	ldrh	r3, [r3, #0]
 8002fb8:	b29b      	uxth	r3, r3
 8002fba:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002fbe:	b29a      	uxth	r2, r3
 8002fc0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002fc2:	801a      	strh	r2, [r3, #0]
 8002fc4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002fc6:	881b      	ldrh	r3, [r3, #0]
 8002fc8:	b29b      	uxth	r3, r3
 8002fca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002fce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002fd2:	b29a      	uxth	r2, r3
 8002fd4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002fd6:	801a      	strh	r2, [r3, #0]
 8002fd8:	e044      	b.n	8003064 <HAL_PCD_EP_DB_Transmit+0x4c4>
 8002fda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fdc:	2b3e      	cmp	r3, #62	; 0x3e
 8002fde:	d811      	bhi.n	8003004 <HAL_PCD_EP_DB_Transmit+0x464>
 8002fe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fe2:	085b      	lsrs	r3, r3, #1
 8002fe4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002fe6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fe8:	f003 0301 	and.w	r3, r3, #1
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d002      	beq.n	8002ff6 <HAL_PCD_EP_DB_Transmit+0x456>
 8002ff0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ff2:	3301      	adds	r3, #1
 8002ff4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ff6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ff8:	b29b      	uxth	r3, r3
 8002ffa:	029b      	lsls	r3, r3, #10
 8002ffc:	b29a      	uxth	r2, r3
 8002ffe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003000:	801a      	strh	r2, [r3, #0]
 8003002:	e02f      	b.n	8003064 <HAL_PCD_EP_DB_Transmit+0x4c4>
 8003004:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003006:	095b      	lsrs	r3, r3, #5
 8003008:	63fb      	str	r3, [r7, #60]	; 0x3c
 800300a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800300c:	f003 031f 	and.w	r3, r3, #31
 8003010:	2b00      	cmp	r3, #0
 8003012:	d102      	bne.n	800301a <HAL_PCD_EP_DB_Transmit+0x47a>
 8003014:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003016:	3b01      	subs	r3, #1
 8003018:	63fb      	str	r3, [r7, #60]	; 0x3c
 800301a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800301c:	b29b      	uxth	r3, r3
 800301e:	029b      	lsls	r3, r3, #10
 8003020:	b29b      	uxth	r3, r3
 8003022:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003026:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800302a:	b29a      	uxth	r2, r3
 800302c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800302e:	801a      	strh	r2, [r3, #0]
 8003030:	e018      	b.n	8003064 <HAL_PCD_EP_DB_Transmit+0x4c4>
 8003032:	68bb      	ldr	r3, [r7, #8]
 8003034:	785b      	ldrb	r3, [r3, #1]
 8003036:	2b01      	cmp	r3, #1
 8003038:	d114      	bne.n	8003064 <HAL_PCD_EP_DB_Transmit+0x4c4>
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003042:	b29b      	uxth	r3, r3
 8003044:	461a      	mov	r2, r3
 8003046:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003048:	4413      	add	r3, r2
 800304a:	637b      	str	r3, [r7, #52]	; 0x34
 800304c:	68bb      	ldr	r3, [r7, #8]
 800304e:	781b      	ldrb	r3, [r3, #0]
 8003050:	00da      	lsls	r2, r3, #3
 8003052:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003054:	4413      	add	r3, r2
 8003056:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800305a:	633b      	str	r3, [r7, #48]	; 0x30
 800305c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800305e:	b29a      	uxth	r2, r3
 8003060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003062:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	6818      	ldr	r0, [r3, #0]
 8003068:	68bb      	ldr	r3, [r7, #8]
 800306a:	6959      	ldr	r1, [r3, #20]
 800306c:	68bb      	ldr	r3, [r7, #8]
 800306e:	895a      	ldrh	r2, [r3, #10]
 8003070:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003072:	b29b      	uxth	r3, r3
 8003074:	f004 fb76 	bl	8007764 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	461a      	mov	r2, r3
 800307e:	68bb      	ldr	r3, [r7, #8]
 8003080:	781b      	ldrb	r3, [r3, #0]
 8003082:	009b      	lsls	r3, r3, #2
 8003084:	4413      	add	r3, r2
 8003086:	881b      	ldrh	r3, [r3, #0]
 8003088:	b29b      	uxth	r3, r3
 800308a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800308e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003092:	823b      	strh	r3, [r7, #16]
 8003094:	8a3b      	ldrh	r3, [r7, #16]
 8003096:	f083 0310 	eor.w	r3, r3, #16
 800309a:	823b      	strh	r3, [r7, #16]
 800309c:	8a3b      	ldrh	r3, [r7, #16]
 800309e:	f083 0320 	eor.w	r3, r3, #32
 80030a2:	823b      	strh	r3, [r7, #16]
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	461a      	mov	r2, r3
 80030aa:	68bb      	ldr	r3, [r7, #8]
 80030ac:	781b      	ldrb	r3, [r3, #0]
 80030ae:	009b      	lsls	r3, r3, #2
 80030b0:	441a      	add	r2, r3
 80030b2:	8a3b      	ldrh	r3, [r7, #16]
 80030b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80030b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80030bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80030c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030c4:	b29b      	uxth	r3, r3
 80030c6:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80030c8:	2300      	movs	r3, #0
}
 80030ca:	4618      	mov	r0, r3
 80030cc:	3748      	adds	r7, #72	; 0x48
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bd80      	pop	{r7, pc}

080030d2 <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 80030d2:	b480      	push	{r7}
 80030d4:	b087      	sub	sp, #28
 80030d6:	af00      	add	r7, sp, #0
 80030d8:	60f8      	str	r0, [r7, #12]
 80030da:	607b      	str	r3, [r7, #4]
 80030dc:	460b      	mov	r3, r1
 80030de:	817b      	strh	r3, [r7, #10]
 80030e0:	4613      	mov	r3, r2
 80030e2:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80030e4:	897b      	ldrh	r3, [r7, #10]
 80030e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030ea:	b29b      	uxth	r3, r3
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d00b      	beq.n	8003108 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80030f0:	897b      	ldrh	r3, [r7, #10]
 80030f2:	f003 0307 	and.w	r3, r3, #7
 80030f6:	1c5a      	adds	r2, r3, #1
 80030f8:	4613      	mov	r3, r2
 80030fa:	009b      	lsls	r3, r3, #2
 80030fc:	4413      	add	r3, r2
 80030fe:	00db      	lsls	r3, r3, #3
 8003100:	68fa      	ldr	r2, [r7, #12]
 8003102:	4413      	add	r3, r2
 8003104:	617b      	str	r3, [r7, #20]
 8003106:	e009      	b.n	800311c <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003108:	897a      	ldrh	r2, [r7, #10]
 800310a:	4613      	mov	r3, r2
 800310c:	009b      	lsls	r3, r3, #2
 800310e:	4413      	add	r3, r2
 8003110:	00db      	lsls	r3, r3, #3
 8003112:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003116:	68fa      	ldr	r2, [r7, #12]
 8003118:	4413      	add	r3, r2
 800311a:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800311c:	893b      	ldrh	r3, [r7, #8]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d107      	bne.n	8003132 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003122:	697b      	ldr	r3, [r7, #20]
 8003124:	2200      	movs	r2, #0
 8003126:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	b29a      	uxth	r2, r3
 800312c:	697b      	ldr	r3, [r7, #20]
 800312e:	80da      	strh	r2, [r3, #6]
 8003130:	e00b      	b.n	800314a <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003132:	697b      	ldr	r3, [r7, #20]
 8003134:	2201      	movs	r2, #1
 8003136:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	b29a      	uxth	r2, r3
 800313c:	697b      	ldr	r3, [r7, #20]
 800313e:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	0c1b      	lsrs	r3, r3, #16
 8003144:	b29a      	uxth	r2, r3
 8003146:	697b      	ldr	r3, [r7, #20]
 8003148:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 800314a:	2300      	movs	r3, #0
}
 800314c:	4618      	mov	r0, r3
 800314e:	371c      	adds	r7, #28
 8003150:	46bd      	mov	sp, r7
 8003152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003156:	4770      	bx	lr

08003158 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003158:	b480      	push	{r7}
 800315a:	b085      	sub	sp, #20
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2201      	movs	r2, #1
 800316a:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2200      	movs	r2, #0
 8003172:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800317c:	b29b      	uxth	r3, r3
 800317e:	f043 0301 	orr.w	r3, r3, #1
 8003182:	b29a      	uxth	r2, r3
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003190:	b29b      	uxth	r3, r3
 8003192:	f043 0302 	orr.w	r3, r3, #2
 8003196:	b29a      	uxth	r2, r3
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 800319e:	2300      	movs	r3, #0
}
 80031a0:	4618      	mov	r0, r3
 80031a2:	3714      	adds	r7, #20
 80031a4:	46bd      	mov	sp, r7
 80031a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031aa:	4770      	bx	lr

080031ac <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80031ac:	b480      	push	{r7}
 80031ae:	b085      	sub	sp, #20
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d141      	bne.n	800323e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80031ba:	4b4b      	ldr	r3, [pc, #300]	; (80032e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80031c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031c6:	d131      	bne.n	800322c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80031c8:	4b47      	ldr	r3, [pc, #284]	; (80032e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80031ce:	4a46      	ldr	r2, [pc, #280]	; (80032e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80031d4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80031d8:	4b43      	ldr	r3, [pc, #268]	; (80032e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80031e0:	4a41      	ldr	r2, [pc, #260]	; (80032e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80031e6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80031e8:	4b40      	ldr	r3, [pc, #256]	; (80032ec <HAL_PWREx_ControlVoltageScaling+0x140>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	2232      	movs	r2, #50	; 0x32
 80031ee:	fb02 f303 	mul.w	r3, r2, r3
 80031f2:	4a3f      	ldr	r2, [pc, #252]	; (80032f0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80031f4:	fba2 2303 	umull	r2, r3, r2, r3
 80031f8:	0c9b      	lsrs	r3, r3, #18
 80031fa:	3301      	adds	r3, #1
 80031fc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80031fe:	e002      	b.n	8003206 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	3b01      	subs	r3, #1
 8003204:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003206:	4b38      	ldr	r3, [pc, #224]	; (80032e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003208:	695b      	ldr	r3, [r3, #20]
 800320a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800320e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003212:	d102      	bne.n	800321a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d1f2      	bne.n	8003200 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800321a:	4b33      	ldr	r3, [pc, #204]	; (80032e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800321c:	695b      	ldr	r3, [r3, #20]
 800321e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003222:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003226:	d158      	bne.n	80032da <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003228:	2303      	movs	r3, #3
 800322a:	e057      	b.n	80032dc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800322c:	4b2e      	ldr	r3, [pc, #184]	; (80032e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800322e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003232:	4a2d      	ldr	r2, [pc, #180]	; (80032e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003234:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003238:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800323c:	e04d      	b.n	80032da <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003244:	d141      	bne.n	80032ca <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003246:	4b28      	ldr	r3, [pc, #160]	; (80032e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800324e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003252:	d131      	bne.n	80032b8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003254:	4b24      	ldr	r3, [pc, #144]	; (80032e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003256:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800325a:	4a23      	ldr	r2, [pc, #140]	; (80032e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800325c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003260:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003264:	4b20      	ldr	r3, [pc, #128]	; (80032e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800326c:	4a1e      	ldr	r2, [pc, #120]	; (80032e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800326e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003272:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003274:	4b1d      	ldr	r3, [pc, #116]	; (80032ec <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	2232      	movs	r2, #50	; 0x32
 800327a:	fb02 f303 	mul.w	r3, r2, r3
 800327e:	4a1c      	ldr	r2, [pc, #112]	; (80032f0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003280:	fba2 2303 	umull	r2, r3, r2, r3
 8003284:	0c9b      	lsrs	r3, r3, #18
 8003286:	3301      	adds	r3, #1
 8003288:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800328a:	e002      	b.n	8003292 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	3b01      	subs	r3, #1
 8003290:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003292:	4b15      	ldr	r3, [pc, #84]	; (80032e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003294:	695b      	ldr	r3, [r3, #20]
 8003296:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800329a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800329e:	d102      	bne.n	80032a6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d1f2      	bne.n	800328c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80032a6:	4b10      	ldr	r3, [pc, #64]	; (80032e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032a8:	695b      	ldr	r3, [r3, #20]
 80032aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032b2:	d112      	bne.n	80032da <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80032b4:	2303      	movs	r3, #3
 80032b6:	e011      	b.n	80032dc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80032b8:	4b0b      	ldr	r3, [pc, #44]	; (80032e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80032be:	4a0a      	ldr	r2, [pc, #40]	; (80032e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032c4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80032c8:	e007      	b.n	80032da <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80032ca:	4b07      	ldr	r3, [pc, #28]	; (80032e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80032d2:	4a05      	ldr	r2, [pc, #20]	; (80032e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032d4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80032d8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80032da:	2300      	movs	r3, #0
}
 80032dc:	4618      	mov	r0, r3
 80032de:	3714      	adds	r7, #20
 80032e0:	46bd      	mov	sp, r7
 80032e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e6:	4770      	bx	lr
 80032e8:	40007000 	.word	0x40007000
 80032ec:	2000003c 	.word	0x2000003c
 80032f0:	431bde83 	.word	0x431bde83

080032f4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80032f4:	b480      	push	{r7}
 80032f6:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80032f8:	4b05      	ldr	r3, [pc, #20]	; (8003310 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80032fa:	689b      	ldr	r3, [r3, #8]
 80032fc:	4a04      	ldr	r2, [pc, #16]	; (8003310 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80032fe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003302:	6093      	str	r3, [r2, #8]
}
 8003304:	bf00      	nop
 8003306:	46bd      	mov	sp, r7
 8003308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330c:	4770      	bx	lr
 800330e:	bf00      	nop
 8003310:	40007000 	.word	0x40007000

08003314 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b088      	sub	sp, #32
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d101      	bne.n	8003326 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003322:	2301      	movs	r3, #1
 8003324:	e308      	b.n	8003938 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f003 0301 	and.w	r3, r3, #1
 800332e:	2b00      	cmp	r3, #0
 8003330:	d075      	beq.n	800341e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003332:	4ba3      	ldr	r3, [pc, #652]	; (80035c0 <HAL_RCC_OscConfig+0x2ac>)
 8003334:	689b      	ldr	r3, [r3, #8]
 8003336:	f003 030c 	and.w	r3, r3, #12
 800333a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800333c:	4ba0      	ldr	r3, [pc, #640]	; (80035c0 <HAL_RCC_OscConfig+0x2ac>)
 800333e:	68db      	ldr	r3, [r3, #12]
 8003340:	f003 0303 	and.w	r3, r3, #3
 8003344:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003346:	69bb      	ldr	r3, [r7, #24]
 8003348:	2b0c      	cmp	r3, #12
 800334a:	d102      	bne.n	8003352 <HAL_RCC_OscConfig+0x3e>
 800334c:	697b      	ldr	r3, [r7, #20]
 800334e:	2b03      	cmp	r3, #3
 8003350:	d002      	beq.n	8003358 <HAL_RCC_OscConfig+0x44>
 8003352:	69bb      	ldr	r3, [r7, #24]
 8003354:	2b08      	cmp	r3, #8
 8003356:	d10b      	bne.n	8003370 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003358:	4b99      	ldr	r3, [pc, #612]	; (80035c0 <HAL_RCC_OscConfig+0x2ac>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003360:	2b00      	cmp	r3, #0
 8003362:	d05b      	beq.n	800341c <HAL_RCC_OscConfig+0x108>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d157      	bne.n	800341c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800336c:	2301      	movs	r3, #1
 800336e:	e2e3      	b.n	8003938 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003378:	d106      	bne.n	8003388 <HAL_RCC_OscConfig+0x74>
 800337a:	4b91      	ldr	r3, [pc, #580]	; (80035c0 <HAL_RCC_OscConfig+0x2ac>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4a90      	ldr	r2, [pc, #576]	; (80035c0 <HAL_RCC_OscConfig+0x2ac>)
 8003380:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003384:	6013      	str	r3, [r2, #0]
 8003386:	e01d      	b.n	80033c4 <HAL_RCC_OscConfig+0xb0>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003390:	d10c      	bne.n	80033ac <HAL_RCC_OscConfig+0x98>
 8003392:	4b8b      	ldr	r3, [pc, #556]	; (80035c0 <HAL_RCC_OscConfig+0x2ac>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4a8a      	ldr	r2, [pc, #552]	; (80035c0 <HAL_RCC_OscConfig+0x2ac>)
 8003398:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800339c:	6013      	str	r3, [r2, #0]
 800339e:	4b88      	ldr	r3, [pc, #544]	; (80035c0 <HAL_RCC_OscConfig+0x2ac>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4a87      	ldr	r2, [pc, #540]	; (80035c0 <HAL_RCC_OscConfig+0x2ac>)
 80033a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033a8:	6013      	str	r3, [r2, #0]
 80033aa:	e00b      	b.n	80033c4 <HAL_RCC_OscConfig+0xb0>
 80033ac:	4b84      	ldr	r3, [pc, #528]	; (80035c0 <HAL_RCC_OscConfig+0x2ac>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a83      	ldr	r2, [pc, #524]	; (80035c0 <HAL_RCC_OscConfig+0x2ac>)
 80033b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033b6:	6013      	str	r3, [r2, #0]
 80033b8:	4b81      	ldr	r3, [pc, #516]	; (80035c0 <HAL_RCC_OscConfig+0x2ac>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4a80      	ldr	r2, [pc, #512]	; (80035c0 <HAL_RCC_OscConfig+0x2ac>)
 80033be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d013      	beq.n	80033f4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033cc:	f7fe f8b6 	bl	800153c <HAL_GetTick>
 80033d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80033d2:	e008      	b.n	80033e6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033d4:	f7fe f8b2 	bl	800153c <HAL_GetTick>
 80033d8:	4602      	mov	r2, r0
 80033da:	693b      	ldr	r3, [r7, #16]
 80033dc:	1ad3      	subs	r3, r2, r3
 80033de:	2b64      	cmp	r3, #100	; 0x64
 80033e0:	d901      	bls.n	80033e6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80033e2:	2303      	movs	r3, #3
 80033e4:	e2a8      	b.n	8003938 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80033e6:	4b76      	ldr	r3, [pc, #472]	; (80035c0 <HAL_RCC_OscConfig+0x2ac>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d0f0      	beq.n	80033d4 <HAL_RCC_OscConfig+0xc0>
 80033f2:	e014      	b.n	800341e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033f4:	f7fe f8a2 	bl	800153c <HAL_GetTick>
 80033f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80033fa:	e008      	b.n	800340e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033fc:	f7fe f89e 	bl	800153c <HAL_GetTick>
 8003400:	4602      	mov	r2, r0
 8003402:	693b      	ldr	r3, [r7, #16]
 8003404:	1ad3      	subs	r3, r2, r3
 8003406:	2b64      	cmp	r3, #100	; 0x64
 8003408:	d901      	bls.n	800340e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800340a:	2303      	movs	r3, #3
 800340c:	e294      	b.n	8003938 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800340e:	4b6c      	ldr	r3, [pc, #432]	; (80035c0 <HAL_RCC_OscConfig+0x2ac>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003416:	2b00      	cmp	r3, #0
 8003418:	d1f0      	bne.n	80033fc <HAL_RCC_OscConfig+0xe8>
 800341a:	e000      	b.n	800341e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800341c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f003 0302 	and.w	r3, r3, #2
 8003426:	2b00      	cmp	r3, #0
 8003428:	d075      	beq.n	8003516 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800342a:	4b65      	ldr	r3, [pc, #404]	; (80035c0 <HAL_RCC_OscConfig+0x2ac>)
 800342c:	689b      	ldr	r3, [r3, #8]
 800342e:	f003 030c 	and.w	r3, r3, #12
 8003432:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003434:	4b62      	ldr	r3, [pc, #392]	; (80035c0 <HAL_RCC_OscConfig+0x2ac>)
 8003436:	68db      	ldr	r3, [r3, #12]
 8003438:	f003 0303 	and.w	r3, r3, #3
 800343c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800343e:	69bb      	ldr	r3, [r7, #24]
 8003440:	2b0c      	cmp	r3, #12
 8003442:	d102      	bne.n	800344a <HAL_RCC_OscConfig+0x136>
 8003444:	697b      	ldr	r3, [r7, #20]
 8003446:	2b02      	cmp	r3, #2
 8003448:	d002      	beq.n	8003450 <HAL_RCC_OscConfig+0x13c>
 800344a:	69bb      	ldr	r3, [r7, #24]
 800344c:	2b04      	cmp	r3, #4
 800344e:	d11f      	bne.n	8003490 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003450:	4b5b      	ldr	r3, [pc, #364]	; (80035c0 <HAL_RCC_OscConfig+0x2ac>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003458:	2b00      	cmp	r3, #0
 800345a:	d005      	beq.n	8003468 <HAL_RCC_OscConfig+0x154>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	68db      	ldr	r3, [r3, #12]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d101      	bne.n	8003468 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003464:	2301      	movs	r3, #1
 8003466:	e267      	b.n	8003938 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003468:	4b55      	ldr	r3, [pc, #340]	; (80035c0 <HAL_RCC_OscConfig+0x2ac>)
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	691b      	ldr	r3, [r3, #16]
 8003474:	061b      	lsls	r3, r3, #24
 8003476:	4952      	ldr	r1, [pc, #328]	; (80035c0 <HAL_RCC_OscConfig+0x2ac>)
 8003478:	4313      	orrs	r3, r2
 800347a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800347c:	4b51      	ldr	r3, [pc, #324]	; (80035c4 <HAL_RCC_OscConfig+0x2b0>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4618      	mov	r0, r3
 8003482:	f7fe f80f 	bl	80014a4 <HAL_InitTick>
 8003486:	4603      	mov	r3, r0
 8003488:	2b00      	cmp	r3, #0
 800348a:	d043      	beq.n	8003514 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800348c:	2301      	movs	r3, #1
 800348e:	e253      	b.n	8003938 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	68db      	ldr	r3, [r3, #12]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d023      	beq.n	80034e0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003498:	4b49      	ldr	r3, [pc, #292]	; (80035c0 <HAL_RCC_OscConfig+0x2ac>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a48      	ldr	r2, [pc, #288]	; (80035c0 <HAL_RCC_OscConfig+0x2ac>)
 800349e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034a4:	f7fe f84a 	bl	800153c <HAL_GetTick>
 80034a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80034aa:	e008      	b.n	80034be <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034ac:	f7fe f846 	bl	800153c <HAL_GetTick>
 80034b0:	4602      	mov	r2, r0
 80034b2:	693b      	ldr	r3, [r7, #16]
 80034b4:	1ad3      	subs	r3, r2, r3
 80034b6:	2b02      	cmp	r3, #2
 80034b8:	d901      	bls.n	80034be <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80034ba:	2303      	movs	r3, #3
 80034bc:	e23c      	b.n	8003938 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80034be:	4b40      	ldr	r3, [pc, #256]	; (80035c0 <HAL_RCC_OscConfig+0x2ac>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d0f0      	beq.n	80034ac <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034ca:	4b3d      	ldr	r3, [pc, #244]	; (80035c0 <HAL_RCC_OscConfig+0x2ac>)
 80034cc:	685b      	ldr	r3, [r3, #4]
 80034ce:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	691b      	ldr	r3, [r3, #16]
 80034d6:	061b      	lsls	r3, r3, #24
 80034d8:	4939      	ldr	r1, [pc, #228]	; (80035c0 <HAL_RCC_OscConfig+0x2ac>)
 80034da:	4313      	orrs	r3, r2
 80034dc:	604b      	str	r3, [r1, #4]
 80034de:	e01a      	b.n	8003516 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034e0:	4b37      	ldr	r3, [pc, #220]	; (80035c0 <HAL_RCC_OscConfig+0x2ac>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4a36      	ldr	r2, [pc, #216]	; (80035c0 <HAL_RCC_OscConfig+0x2ac>)
 80034e6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80034ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034ec:	f7fe f826 	bl	800153c <HAL_GetTick>
 80034f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80034f2:	e008      	b.n	8003506 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034f4:	f7fe f822 	bl	800153c <HAL_GetTick>
 80034f8:	4602      	mov	r2, r0
 80034fa:	693b      	ldr	r3, [r7, #16]
 80034fc:	1ad3      	subs	r3, r2, r3
 80034fe:	2b02      	cmp	r3, #2
 8003500:	d901      	bls.n	8003506 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003502:	2303      	movs	r3, #3
 8003504:	e218      	b.n	8003938 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003506:	4b2e      	ldr	r3, [pc, #184]	; (80035c0 <HAL_RCC_OscConfig+0x2ac>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800350e:	2b00      	cmp	r3, #0
 8003510:	d1f0      	bne.n	80034f4 <HAL_RCC_OscConfig+0x1e0>
 8003512:	e000      	b.n	8003516 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003514:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f003 0308 	and.w	r3, r3, #8
 800351e:	2b00      	cmp	r3, #0
 8003520:	d03c      	beq.n	800359c <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	695b      	ldr	r3, [r3, #20]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d01c      	beq.n	8003564 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800352a:	4b25      	ldr	r3, [pc, #148]	; (80035c0 <HAL_RCC_OscConfig+0x2ac>)
 800352c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003530:	4a23      	ldr	r2, [pc, #140]	; (80035c0 <HAL_RCC_OscConfig+0x2ac>)
 8003532:	f043 0301 	orr.w	r3, r3, #1
 8003536:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800353a:	f7fd ffff 	bl	800153c <HAL_GetTick>
 800353e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003540:	e008      	b.n	8003554 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003542:	f7fd fffb 	bl	800153c <HAL_GetTick>
 8003546:	4602      	mov	r2, r0
 8003548:	693b      	ldr	r3, [r7, #16]
 800354a:	1ad3      	subs	r3, r2, r3
 800354c:	2b02      	cmp	r3, #2
 800354e:	d901      	bls.n	8003554 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003550:	2303      	movs	r3, #3
 8003552:	e1f1      	b.n	8003938 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003554:	4b1a      	ldr	r3, [pc, #104]	; (80035c0 <HAL_RCC_OscConfig+0x2ac>)
 8003556:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800355a:	f003 0302 	and.w	r3, r3, #2
 800355e:	2b00      	cmp	r3, #0
 8003560:	d0ef      	beq.n	8003542 <HAL_RCC_OscConfig+0x22e>
 8003562:	e01b      	b.n	800359c <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003564:	4b16      	ldr	r3, [pc, #88]	; (80035c0 <HAL_RCC_OscConfig+0x2ac>)
 8003566:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800356a:	4a15      	ldr	r2, [pc, #84]	; (80035c0 <HAL_RCC_OscConfig+0x2ac>)
 800356c:	f023 0301 	bic.w	r3, r3, #1
 8003570:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003574:	f7fd ffe2 	bl	800153c <HAL_GetTick>
 8003578:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800357a:	e008      	b.n	800358e <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800357c:	f7fd ffde 	bl	800153c <HAL_GetTick>
 8003580:	4602      	mov	r2, r0
 8003582:	693b      	ldr	r3, [r7, #16]
 8003584:	1ad3      	subs	r3, r2, r3
 8003586:	2b02      	cmp	r3, #2
 8003588:	d901      	bls.n	800358e <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 800358a:	2303      	movs	r3, #3
 800358c:	e1d4      	b.n	8003938 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800358e:	4b0c      	ldr	r3, [pc, #48]	; (80035c0 <HAL_RCC_OscConfig+0x2ac>)
 8003590:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003594:	f003 0302 	and.w	r3, r3, #2
 8003598:	2b00      	cmp	r3, #0
 800359a:	d1ef      	bne.n	800357c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f003 0304 	and.w	r3, r3, #4
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	f000 80ab 	beq.w	8003700 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035aa:	2300      	movs	r3, #0
 80035ac:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80035ae:	4b04      	ldr	r3, [pc, #16]	; (80035c0 <HAL_RCC_OscConfig+0x2ac>)
 80035b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d106      	bne.n	80035c8 <HAL_RCC_OscConfig+0x2b4>
 80035ba:	2301      	movs	r3, #1
 80035bc:	e005      	b.n	80035ca <HAL_RCC_OscConfig+0x2b6>
 80035be:	bf00      	nop
 80035c0:	40021000 	.word	0x40021000
 80035c4:	20000040 	.word	0x20000040
 80035c8:	2300      	movs	r3, #0
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d00d      	beq.n	80035ea <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035ce:	4baf      	ldr	r3, [pc, #700]	; (800388c <HAL_RCC_OscConfig+0x578>)
 80035d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035d2:	4aae      	ldr	r2, [pc, #696]	; (800388c <HAL_RCC_OscConfig+0x578>)
 80035d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035d8:	6593      	str	r3, [r2, #88]	; 0x58
 80035da:	4bac      	ldr	r3, [pc, #688]	; (800388c <HAL_RCC_OscConfig+0x578>)
 80035dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035e2:	60fb      	str	r3, [r7, #12]
 80035e4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80035e6:	2301      	movs	r3, #1
 80035e8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80035ea:	4ba9      	ldr	r3, [pc, #676]	; (8003890 <HAL_RCC_OscConfig+0x57c>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d118      	bne.n	8003628 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80035f6:	4ba6      	ldr	r3, [pc, #664]	; (8003890 <HAL_RCC_OscConfig+0x57c>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4aa5      	ldr	r2, [pc, #660]	; (8003890 <HAL_RCC_OscConfig+0x57c>)
 80035fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003600:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003602:	f7fd ff9b 	bl	800153c <HAL_GetTick>
 8003606:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003608:	e008      	b.n	800361c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800360a:	f7fd ff97 	bl	800153c <HAL_GetTick>
 800360e:	4602      	mov	r2, r0
 8003610:	693b      	ldr	r3, [r7, #16]
 8003612:	1ad3      	subs	r3, r2, r3
 8003614:	2b02      	cmp	r3, #2
 8003616:	d901      	bls.n	800361c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003618:	2303      	movs	r3, #3
 800361a:	e18d      	b.n	8003938 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800361c:	4b9c      	ldr	r3, [pc, #624]	; (8003890 <HAL_RCC_OscConfig+0x57c>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003624:	2b00      	cmp	r3, #0
 8003626:	d0f0      	beq.n	800360a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	689b      	ldr	r3, [r3, #8]
 800362c:	2b01      	cmp	r3, #1
 800362e:	d108      	bne.n	8003642 <HAL_RCC_OscConfig+0x32e>
 8003630:	4b96      	ldr	r3, [pc, #600]	; (800388c <HAL_RCC_OscConfig+0x578>)
 8003632:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003636:	4a95      	ldr	r2, [pc, #596]	; (800388c <HAL_RCC_OscConfig+0x578>)
 8003638:	f043 0301 	orr.w	r3, r3, #1
 800363c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003640:	e024      	b.n	800368c <HAL_RCC_OscConfig+0x378>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	689b      	ldr	r3, [r3, #8]
 8003646:	2b05      	cmp	r3, #5
 8003648:	d110      	bne.n	800366c <HAL_RCC_OscConfig+0x358>
 800364a:	4b90      	ldr	r3, [pc, #576]	; (800388c <HAL_RCC_OscConfig+0x578>)
 800364c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003650:	4a8e      	ldr	r2, [pc, #568]	; (800388c <HAL_RCC_OscConfig+0x578>)
 8003652:	f043 0304 	orr.w	r3, r3, #4
 8003656:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800365a:	4b8c      	ldr	r3, [pc, #560]	; (800388c <HAL_RCC_OscConfig+0x578>)
 800365c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003660:	4a8a      	ldr	r2, [pc, #552]	; (800388c <HAL_RCC_OscConfig+0x578>)
 8003662:	f043 0301 	orr.w	r3, r3, #1
 8003666:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800366a:	e00f      	b.n	800368c <HAL_RCC_OscConfig+0x378>
 800366c:	4b87      	ldr	r3, [pc, #540]	; (800388c <HAL_RCC_OscConfig+0x578>)
 800366e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003672:	4a86      	ldr	r2, [pc, #536]	; (800388c <HAL_RCC_OscConfig+0x578>)
 8003674:	f023 0301 	bic.w	r3, r3, #1
 8003678:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800367c:	4b83      	ldr	r3, [pc, #524]	; (800388c <HAL_RCC_OscConfig+0x578>)
 800367e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003682:	4a82      	ldr	r2, [pc, #520]	; (800388c <HAL_RCC_OscConfig+0x578>)
 8003684:	f023 0304 	bic.w	r3, r3, #4
 8003688:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	689b      	ldr	r3, [r3, #8]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d016      	beq.n	80036c2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003694:	f7fd ff52 	bl	800153c <HAL_GetTick>
 8003698:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800369a:	e00a      	b.n	80036b2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800369c:	f7fd ff4e 	bl	800153c <HAL_GetTick>
 80036a0:	4602      	mov	r2, r0
 80036a2:	693b      	ldr	r3, [r7, #16]
 80036a4:	1ad3      	subs	r3, r2, r3
 80036a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d901      	bls.n	80036b2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80036ae:	2303      	movs	r3, #3
 80036b0:	e142      	b.n	8003938 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80036b2:	4b76      	ldr	r3, [pc, #472]	; (800388c <HAL_RCC_OscConfig+0x578>)
 80036b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036b8:	f003 0302 	and.w	r3, r3, #2
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d0ed      	beq.n	800369c <HAL_RCC_OscConfig+0x388>
 80036c0:	e015      	b.n	80036ee <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036c2:	f7fd ff3b 	bl	800153c <HAL_GetTick>
 80036c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80036c8:	e00a      	b.n	80036e0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036ca:	f7fd ff37 	bl	800153c <HAL_GetTick>
 80036ce:	4602      	mov	r2, r0
 80036d0:	693b      	ldr	r3, [r7, #16]
 80036d2:	1ad3      	subs	r3, r2, r3
 80036d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80036d8:	4293      	cmp	r3, r2
 80036da:	d901      	bls.n	80036e0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80036dc:	2303      	movs	r3, #3
 80036de:	e12b      	b.n	8003938 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80036e0:	4b6a      	ldr	r3, [pc, #424]	; (800388c <HAL_RCC_OscConfig+0x578>)
 80036e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036e6:	f003 0302 	and.w	r3, r3, #2
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d1ed      	bne.n	80036ca <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80036ee:	7ffb      	ldrb	r3, [r7, #31]
 80036f0:	2b01      	cmp	r3, #1
 80036f2:	d105      	bne.n	8003700 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036f4:	4b65      	ldr	r3, [pc, #404]	; (800388c <HAL_RCC_OscConfig+0x578>)
 80036f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036f8:	4a64      	ldr	r2, [pc, #400]	; (800388c <HAL_RCC_OscConfig+0x578>)
 80036fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036fe:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f003 0320 	and.w	r3, r3, #32
 8003708:	2b00      	cmp	r3, #0
 800370a:	d03c      	beq.n	8003786 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	699b      	ldr	r3, [r3, #24]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d01c      	beq.n	800374e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003714:	4b5d      	ldr	r3, [pc, #372]	; (800388c <HAL_RCC_OscConfig+0x578>)
 8003716:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800371a:	4a5c      	ldr	r2, [pc, #368]	; (800388c <HAL_RCC_OscConfig+0x578>)
 800371c:	f043 0301 	orr.w	r3, r3, #1
 8003720:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003724:	f7fd ff0a 	bl	800153c <HAL_GetTick>
 8003728:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800372a:	e008      	b.n	800373e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800372c:	f7fd ff06 	bl	800153c <HAL_GetTick>
 8003730:	4602      	mov	r2, r0
 8003732:	693b      	ldr	r3, [r7, #16]
 8003734:	1ad3      	subs	r3, r2, r3
 8003736:	2b02      	cmp	r3, #2
 8003738:	d901      	bls.n	800373e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800373a:	2303      	movs	r3, #3
 800373c:	e0fc      	b.n	8003938 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800373e:	4b53      	ldr	r3, [pc, #332]	; (800388c <HAL_RCC_OscConfig+0x578>)
 8003740:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003744:	f003 0302 	and.w	r3, r3, #2
 8003748:	2b00      	cmp	r3, #0
 800374a:	d0ef      	beq.n	800372c <HAL_RCC_OscConfig+0x418>
 800374c:	e01b      	b.n	8003786 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800374e:	4b4f      	ldr	r3, [pc, #316]	; (800388c <HAL_RCC_OscConfig+0x578>)
 8003750:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003754:	4a4d      	ldr	r2, [pc, #308]	; (800388c <HAL_RCC_OscConfig+0x578>)
 8003756:	f023 0301 	bic.w	r3, r3, #1
 800375a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800375e:	f7fd feed 	bl	800153c <HAL_GetTick>
 8003762:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003764:	e008      	b.n	8003778 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003766:	f7fd fee9 	bl	800153c <HAL_GetTick>
 800376a:	4602      	mov	r2, r0
 800376c:	693b      	ldr	r3, [r7, #16]
 800376e:	1ad3      	subs	r3, r2, r3
 8003770:	2b02      	cmp	r3, #2
 8003772:	d901      	bls.n	8003778 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003774:	2303      	movs	r3, #3
 8003776:	e0df      	b.n	8003938 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003778:	4b44      	ldr	r3, [pc, #272]	; (800388c <HAL_RCC_OscConfig+0x578>)
 800377a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800377e:	f003 0302 	and.w	r3, r3, #2
 8003782:	2b00      	cmp	r3, #0
 8003784:	d1ef      	bne.n	8003766 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	69db      	ldr	r3, [r3, #28]
 800378a:	2b00      	cmp	r3, #0
 800378c:	f000 80d3 	beq.w	8003936 <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003790:	4b3e      	ldr	r3, [pc, #248]	; (800388c <HAL_RCC_OscConfig+0x578>)
 8003792:	689b      	ldr	r3, [r3, #8]
 8003794:	f003 030c 	and.w	r3, r3, #12
 8003798:	2b0c      	cmp	r3, #12
 800379a:	f000 808d 	beq.w	80038b8 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	69db      	ldr	r3, [r3, #28]
 80037a2:	2b02      	cmp	r3, #2
 80037a4:	d15a      	bne.n	800385c <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037a6:	4b39      	ldr	r3, [pc, #228]	; (800388c <HAL_RCC_OscConfig+0x578>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4a38      	ldr	r2, [pc, #224]	; (800388c <HAL_RCC_OscConfig+0x578>)
 80037ac:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80037b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037b2:	f7fd fec3 	bl	800153c <HAL_GetTick>
 80037b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037b8:	e008      	b.n	80037cc <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037ba:	f7fd febf 	bl	800153c <HAL_GetTick>
 80037be:	4602      	mov	r2, r0
 80037c0:	693b      	ldr	r3, [r7, #16]
 80037c2:	1ad3      	subs	r3, r2, r3
 80037c4:	2b02      	cmp	r3, #2
 80037c6:	d901      	bls.n	80037cc <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 80037c8:	2303      	movs	r3, #3
 80037ca:	e0b5      	b.n	8003938 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037cc:	4b2f      	ldr	r3, [pc, #188]	; (800388c <HAL_RCC_OscConfig+0x578>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d1f0      	bne.n	80037ba <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80037d8:	4b2c      	ldr	r3, [pc, #176]	; (800388c <HAL_RCC_OscConfig+0x578>)
 80037da:	68da      	ldr	r2, [r3, #12]
 80037dc:	4b2d      	ldr	r3, [pc, #180]	; (8003894 <HAL_RCC_OscConfig+0x580>)
 80037de:	4013      	ands	r3, r2
 80037e0:	687a      	ldr	r2, [r7, #4]
 80037e2:	6a11      	ldr	r1, [r2, #32]
 80037e4:	687a      	ldr	r2, [r7, #4]
 80037e6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80037e8:	3a01      	subs	r2, #1
 80037ea:	0112      	lsls	r2, r2, #4
 80037ec:	4311      	orrs	r1, r2
 80037ee:	687a      	ldr	r2, [r7, #4]
 80037f0:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80037f2:	0212      	lsls	r2, r2, #8
 80037f4:	4311      	orrs	r1, r2
 80037f6:	687a      	ldr	r2, [r7, #4]
 80037f8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80037fa:	0852      	lsrs	r2, r2, #1
 80037fc:	3a01      	subs	r2, #1
 80037fe:	0552      	lsls	r2, r2, #21
 8003800:	4311      	orrs	r1, r2
 8003802:	687a      	ldr	r2, [r7, #4]
 8003804:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003806:	0852      	lsrs	r2, r2, #1
 8003808:	3a01      	subs	r2, #1
 800380a:	0652      	lsls	r2, r2, #25
 800380c:	4311      	orrs	r1, r2
 800380e:	687a      	ldr	r2, [r7, #4]
 8003810:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003812:	06d2      	lsls	r2, r2, #27
 8003814:	430a      	orrs	r2, r1
 8003816:	491d      	ldr	r1, [pc, #116]	; (800388c <HAL_RCC_OscConfig+0x578>)
 8003818:	4313      	orrs	r3, r2
 800381a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800381c:	4b1b      	ldr	r3, [pc, #108]	; (800388c <HAL_RCC_OscConfig+0x578>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4a1a      	ldr	r2, [pc, #104]	; (800388c <HAL_RCC_OscConfig+0x578>)
 8003822:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003826:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003828:	4b18      	ldr	r3, [pc, #96]	; (800388c <HAL_RCC_OscConfig+0x578>)
 800382a:	68db      	ldr	r3, [r3, #12]
 800382c:	4a17      	ldr	r2, [pc, #92]	; (800388c <HAL_RCC_OscConfig+0x578>)
 800382e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003832:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003834:	f7fd fe82 	bl	800153c <HAL_GetTick>
 8003838:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800383a:	e008      	b.n	800384e <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800383c:	f7fd fe7e 	bl	800153c <HAL_GetTick>
 8003840:	4602      	mov	r2, r0
 8003842:	693b      	ldr	r3, [r7, #16]
 8003844:	1ad3      	subs	r3, r2, r3
 8003846:	2b02      	cmp	r3, #2
 8003848:	d901      	bls.n	800384e <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 800384a:	2303      	movs	r3, #3
 800384c:	e074      	b.n	8003938 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800384e:	4b0f      	ldr	r3, [pc, #60]	; (800388c <HAL_RCC_OscConfig+0x578>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003856:	2b00      	cmp	r3, #0
 8003858:	d0f0      	beq.n	800383c <HAL_RCC_OscConfig+0x528>
 800385a:	e06c      	b.n	8003936 <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800385c:	4b0b      	ldr	r3, [pc, #44]	; (800388c <HAL_RCC_OscConfig+0x578>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4a0a      	ldr	r2, [pc, #40]	; (800388c <HAL_RCC_OscConfig+0x578>)
 8003862:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003866:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003868:	4b08      	ldr	r3, [pc, #32]	; (800388c <HAL_RCC_OscConfig+0x578>)
 800386a:	68db      	ldr	r3, [r3, #12]
 800386c:	4a07      	ldr	r2, [pc, #28]	; (800388c <HAL_RCC_OscConfig+0x578>)
 800386e:	f023 0303 	bic.w	r3, r3, #3
 8003872:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003874:	4b05      	ldr	r3, [pc, #20]	; (800388c <HAL_RCC_OscConfig+0x578>)
 8003876:	68db      	ldr	r3, [r3, #12]
 8003878:	4a04      	ldr	r2, [pc, #16]	; (800388c <HAL_RCC_OscConfig+0x578>)
 800387a:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800387e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003882:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003884:	f7fd fe5a 	bl	800153c <HAL_GetTick>
 8003888:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800388a:	e00e      	b.n	80038aa <HAL_RCC_OscConfig+0x596>
 800388c:	40021000 	.word	0x40021000
 8003890:	40007000 	.word	0x40007000
 8003894:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003898:	f7fd fe50 	bl	800153c <HAL_GetTick>
 800389c:	4602      	mov	r2, r0
 800389e:	693b      	ldr	r3, [r7, #16]
 80038a0:	1ad3      	subs	r3, r2, r3
 80038a2:	2b02      	cmp	r3, #2
 80038a4:	d901      	bls.n	80038aa <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 80038a6:	2303      	movs	r3, #3
 80038a8:	e046      	b.n	8003938 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80038aa:	4b25      	ldr	r3, [pc, #148]	; (8003940 <HAL_RCC_OscConfig+0x62c>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d1f0      	bne.n	8003898 <HAL_RCC_OscConfig+0x584>
 80038b6:	e03e      	b.n	8003936 <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	69db      	ldr	r3, [r3, #28]
 80038bc:	2b01      	cmp	r3, #1
 80038be:	d101      	bne.n	80038c4 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 80038c0:	2301      	movs	r3, #1
 80038c2:	e039      	b.n	8003938 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80038c4:	4b1e      	ldr	r3, [pc, #120]	; (8003940 <HAL_RCC_OscConfig+0x62c>)
 80038c6:	68db      	ldr	r3, [r3, #12]
 80038c8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038ca:	697b      	ldr	r3, [r7, #20]
 80038cc:	f003 0203 	and.w	r2, r3, #3
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6a1b      	ldr	r3, [r3, #32]
 80038d4:	429a      	cmp	r2, r3
 80038d6:	d12c      	bne.n	8003932 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80038d8:	697b      	ldr	r3, [r7, #20]
 80038da:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038e2:	3b01      	subs	r3, #1
 80038e4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038e6:	429a      	cmp	r2, r3
 80038e8:	d123      	bne.n	8003932 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80038ea:	697b      	ldr	r3, [r7, #20]
 80038ec:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038f4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80038f6:	429a      	cmp	r2, r3
 80038f8:	d11b      	bne.n	8003932 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80038fa:	697b      	ldr	r3, [r7, #20]
 80038fc:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003904:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003906:	429a      	cmp	r2, r3
 8003908:	d113      	bne.n	8003932 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800390a:	697b      	ldr	r3, [r7, #20]
 800390c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003914:	085b      	lsrs	r3, r3, #1
 8003916:	3b01      	subs	r3, #1
 8003918:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800391a:	429a      	cmp	r2, r3
 800391c:	d109      	bne.n	8003932 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800391e:	697b      	ldr	r3, [r7, #20]
 8003920:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003928:	085b      	lsrs	r3, r3, #1
 800392a:	3b01      	subs	r3, #1
 800392c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800392e:	429a      	cmp	r2, r3
 8003930:	d001      	beq.n	8003936 <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 8003932:	2301      	movs	r3, #1
 8003934:	e000      	b.n	8003938 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 8003936:	2300      	movs	r3, #0
}
 8003938:	4618      	mov	r0, r3
 800393a:	3720      	adds	r7, #32
 800393c:	46bd      	mov	sp, r7
 800393e:	bd80      	pop	{r7, pc}
 8003940:	40021000 	.word	0x40021000

08003944 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b086      	sub	sp, #24
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
 800394c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800394e:	2300      	movs	r3, #0
 8003950:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d101      	bne.n	800395c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003958:	2301      	movs	r3, #1
 800395a:	e11e      	b.n	8003b9a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800395c:	4b91      	ldr	r3, [pc, #580]	; (8003ba4 <HAL_RCC_ClockConfig+0x260>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f003 030f 	and.w	r3, r3, #15
 8003964:	683a      	ldr	r2, [r7, #0]
 8003966:	429a      	cmp	r2, r3
 8003968:	d910      	bls.n	800398c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800396a:	4b8e      	ldr	r3, [pc, #568]	; (8003ba4 <HAL_RCC_ClockConfig+0x260>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f023 020f 	bic.w	r2, r3, #15
 8003972:	498c      	ldr	r1, [pc, #560]	; (8003ba4 <HAL_RCC_ClockConfig+0x260>)
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	4313      	orrs	r3, r2
 8003978:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800397a:	4b8a      	ldr	r3, [pc, #552]	; (8003ba4 <HAL_RCC_ClockConfig+0x260>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f003 030f 	and.w	r3, r3, #15
 8003982:	683a      	ldr	r2, [r7, #0]
 8003984:	429a      	cmp	r2, r3
 8003986:	d001      	beq.n	800398c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003988:	2301      	movs	r3, #1
 800398a:	e106      	b.n	8003b9a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f003 0301 	and.w	r3, r3, #1
 8003994:	2b00      	cmp	r3, #0
 8003996:	d073      	beq.n	8003a80 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	2b03      	cmp	r3, #3
 800399e:	d129      	bne.n	80039f4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039a0:	4b81      	ldr	r3, [pc, #516]	; (8003ba8 <HAL_RCC_ClockConfig+0x264>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d101      	bne.n	80039b0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80039ac:	2301      	movs	r3, #1
 80039ae:	e0f4      	b.n	8003b9a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80039b0:	f000 f966 	bl	8003c80 <RCC_GetSysClockFreqFromPLLSource>
 80039b4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80039b6:	693b      	ldr	r3, [r7, #16]
 80039b8:	4a7c      	ldr	r2, [pc, #496]	; (8003bac <HAL_RCC_ClockConfig+0x268>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d93f      	bls.n	8003a3e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80039be:	4b7a      	ldr	r3, [pc, #488]	; (8003ba8 <HAL_RCC_ClockConfig+0x264>)
 80039c0:	689b      	ldr	r3, [r3, #8]
 80039c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d009      	beq.n	80039de <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d033      	beq.n	8003a3e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d12f      	bne.n	8003a3e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80039de:	4b72      	ldr	r3, [pc, #456]	; (8003ba8 <HAL_RCC_ClockConfig+0x264>)
 80039e0:	689b      	ldr	r3, [r3, #8]
 80039e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80039e6:	4a70      	ldr	r2, [pc, #448]	; (8003ba8 <HAL_RCC_ClockConfig+0x264>)
 80039e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80039ec:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80039ee:	2380      	movs	r3, #128	; 0x80
 80039f0:	617b      	str	r3, [r7, #20]
 80039f2:	e024      	b.n	8003a3e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	2b02      	cmp	r3, #2
 80039fa:	d107      	bne.n	8003a0c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80039fc:	4b6a      	ldr	r3, [pc, #424]	; (8003ba8 <HAL_RCC_ClockConfig+0x264>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d109      	bne.n	8003a1c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003a08:	2301      	movs	r3, #1
 8003a0a:	e0c6      	b.n	8003b9a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a0c:	4b66      	ldr	r3, [pc, #408]	; (8003ba8 <HAL_RCC_ClockConfig+0x264>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d101      	bne.n	8003a1c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	e0be      	b.n	8003b9a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003a1c:	f000 f8ce 	bl	8003bbc <HAL_RCC_GetSysClockFreq>
 8003a20:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003a22:	693b      	ldr	r3, [r7, #16]
 8003a24:	4a61      	ldr	r2, [pc, #388]	; (8003bac <HAL_RCC_ClockConfig+0x268>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d909      	bls.n	8003a3e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003a2a:	4b5f      	ldr	r3, [pc, #380]	; (8003ba8 <HAL_RCC_ClockConfig+0x264>)
 8003a2c:	689b      	ldr	r3, [r3, #8]
 8003a2e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003a32:	4a5d      	ldr	r2, [pc, #372]	; (8003ba8 <HAL_RCC_ClockConfig+0x264>)
 8003a34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a38:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003a3a:	2380      	movs	r3, #128	; 0x80
 8003a3c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003a3e:	4b5a      	ldr	r3, [pc, #360]	; (8003ba8 <HAL_RCC_ClockConfig+0x264>)
 8003a40:	689b      	ldr	r3, [r3, #8]
 8003a42:	f023 0203 	bic.w	r2, r3, #3
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	4957      	ldr	r1, [pc, #348]	; (8003ba8 <HAL_RCC_ClockConfig+0x264>)
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a50:	f7fd fd74 	bl	800153c <HAL_GetTick>
 8003a54:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a56:	e00a      	b.n	8003a6e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a58:	f7fd fd70 	bl	800153c <HAL_GetTick>
 8003a5c:	4602      	mov	r2, r0
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	1ad3      	subs	r3, r2, r3
 8003a62:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d901      	bls.n	8003a6e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003a6a:	2303      	movs	r3, #3
 8003a6c:	e095      	b.n	8003b9a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a6e:	4b4e      	ldr	r3, [pc, #312]	; (8003ba8 <HAL_RCC_ClockConfig+0x264>)
 8003a70:	689b      	ldr	r3, [r3, #8]
 8003a72:	f003 020c 	and.w	r2, r3, #12
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	009b      	lsls	r3, r3, #2
 8003a7c:	429a      	cmp	r2, r3
 8003a7e:	d1eb      	bne.n	8003a58 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f003 0302 	and.w	r3, r3, #2
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d023      	beq.n	8003ad4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f003 0304 	and.w	r3, r3, #4
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d005      	beq.n	8003aa4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a98:	4b43      	ldr	r3, [pc, #268]	; (8003ba8 <HAL_RCC_ClockConfig+0x264>)
 8003a9a:	689b      	ldr	r3, [r3, #8]
 8003a9c:	4a42      	ldr	r2, [pc, #264]	; (8003ba8 <HAL_RCC_ClockConfig+0x264>)
 8003a9e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003aa2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f003 0308 	and.w	r3, r3, #8
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d007      	beq.n	8003ac0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003ab0:	4b3d      	ldr	r3, [pc, #244]	; (8003ba8 <HAL_RCC_ClockConfig+0x264>)
 8003ab2:	689b      	ldr	r3, [r3, #8]
 8003ab4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003ab8:	4a3b      	ldr	r2, [pc, #236]	; (8003ba8 <HAL_RCC_ClockConfig+0x264>)
 8003aba:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003abe:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ac0:	4b39      	ldr	r3, [pc, #228]	; (8003ba8 <HAL_RCC_ClockConfig+0x264>)
 8003ac2:	689b      	ldr	r3, [r3, #8]
 8003ac4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	689b      	ldr	r3, [r3, #8]
 8003acc:	4936      	ldr	r1, [pc, #216]	; (8003ba8 <HAL_RCC_ClockConfig+0x264>)
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	608b      	str	r3, [r1, #8]
 8003ad2:	e008      	b.n	8003ae6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003ad4:	697b      	ldr	r3, [r7, #20]
 8003ad6:	2b80      	cmp	r3, #128	; 0x80
 8003ad8:	d105      	bne.n	8003ae6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003ada:	4b33      	ldr	r3, [pc, #204]	; (8003ba8 <HAL_RCC_ClockConfig+0x264>)
 8003adc:	689b      	ldr	r3, [r3, #8]
 8003ade:	4a32      	ldr	r2, [pc, #200]	; (8003ba8 <HAL_RCC_ClockConfig+0x264>)
 8003ae0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003ae4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003ae6:	4b2f      	ldr	r3, [pc, #188]	; (8003ba4 <HAL_RCC_ClockConfig+0x260>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f003 030f 	and.w	r3, r3, #15
 8003aee:	683a      	ldr	r2, [r7, #0]
 8003af0:	429a      	cmp	r2, r3
 8003af2:	d21d      	bcs.n	8003b30 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003af4:	4b2b      	ldr	r3, [pc, #172]	; (8003ba4 <HAL_RCC_ClockConfig+0x260>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f023 020f 	bic.w	r2, r3, #15
 8003afc:	4929      	ldr	r1, [pc, #164]	; (8003ba4 <HAL_RCC_ClockConfig+0x260>)
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	4313      	orrs	r3, r2
 8003b02:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003b04:	f7fd fd1a 	bl	800153c <HAL_GetTick>
 8003b08:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b0a:	e00a      	b.n	8003b22 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b0c:	f7fd fd16 	bl	800153c <HAL_GetTick>
 8003b10:	4602      	mov	r2, r0
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	1ad3      	subs	r3, r2, r3
 8003b16:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d901      	bls.n	8003b22 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003b1e:	2303      	movs	r3, #3
 8003b20:	e03b      	b.n	8003b9a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b22:	4b20      	ldr	r3, [pc, #128]	; (8003ba4 <HAL_RCC_ClockConfig+0x260>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f003 030f 	and.w	r3, r3, #15
 8003b2a:	683a      	ldr	r2, [r7, #0]
 8003b2c:	429a      	cmp	r2, r3
 8003b2e:	d1ed      	bne.n	8003b0c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f003 0304 	and.w	r3, r3, #4
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d008      	beq.n	8003b4e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b3c:	4b1a      	ldr	r3, [pc, #104]	; (8003ba8 <HAL_RCC_ClockConfig+0x264>)
 8003b3e:	689b      	ldr	r3, [r3, #8]
 8003b40:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	68db      	ldr	r3, [r3, #12]
 8003b48:	4917      	ldr	r1, [pc, #92]	; (8003ba8 <HAL_RCC_ClockConfig+0x264>)
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f003 0308 	and.w	r3, r3, #8
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d009      	beq.n	8003b6e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b5a:	4b13      	ldr	r3, [pc, #76]	; (8003ba8 <HAL_RCC_ClockConfig+0x264>)
 8003b5c:	689b      	ldr	r3, [r3, #8]
 8003b5e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	691b      	ldr	r3, [r3, #16]
 8003b66:	00db      	lsls	r3, r3, #3
 8003b68:	490f      	ldr	r1, [pc, #60]	; (8003ba8 <HAL_RCC_ClockConfig+0x264>)
 8003b6a:	4313      	orrs	r3, r2
 8003b6c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003b6e:	f000 f825 	bl	8003bbc <HAL_RCC_GetSysClockFreq>
 8003b72:	4601      	mov	r1, r0
 8003b74:	4b0c      	ldr	r3, [pc, #48]	; (8003ba8 <HAL_RCC_ClockConfig+0x264>)
 8003b76:	689b      	ldr	r3, [r3, #8]
 8003b78:	091b      	lsrs	r3, r3, #4
 8003b7a:	f003 030f 	and.w	r3, r3, #15
 8003b7e:	4a0c      	ldr	r2, [pc, #48]	; (8003bb0 <HAL_RCC_ClockConfig+0x26c>)
 8003b80:	5cd3      	ldrb	r3, [r2, r3]
 8003b82:	f003 031f 	and.w	r3, r3, #31
 8003b86:	fa21 f303 	lsr.w	r3, r1, r3
 8003b8a:	4a0a      	ldr	r2, [pc, #40]	; (8003bb4 <HAL_RCC_ClockConfig+0x270>)
 8003b8c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003b8e:	4b0a      	ldr	r3, [pc, #40]	; (8003bb8 <HAL_RCC_ClockConfig+0x274>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4618      	mov	r0, r3
 8003b94:	f7fd fc86 	bl	80014a4 <HAL_InitTick>
 8003b98:	4603      	mov	r3, r0
}
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	3718      	adds	r7, #24
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bd80      	pop	{r7, pc}
 8003ba2:	bf00      	nop
 8003ba4:	40022000 	.word	0x40022000
 8003ba8:	40021000 	.word	0x40021000
 8003bac:	04c4b400 	.word	0x04c4b400
 8003bb0:	08009b30 	.word	0x08009b30
 8003bb4:	2000003c 	.word	0x2000003c
 8003bb8:	20000040 	.word	0x20000040

08003bbc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	b087      	sub	sp, #28
 8003bc0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003bc2:	4b2c      	ldr	r3, [pc, #176]	; (8003c74 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003bc4:	689b      	ldr	r3, [r3, #8]
 8003bc6:	f003 030c 	and.w	r3, r3, #12
 8003bca:	2b04      	cmp	r3, #4
 8003bcc:	d102      	bne.n	8003bd4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003bce:	4b2a      	ldr	r3, [pc, #168]	; (8003c78 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003bd0:	613b      	str	r3, [r7, #16]
 8003bd2:	e047      	b.n	8003c64 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003bd4:	4b27      	ldr	r3, [pc, #156]	; (8003c74 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003bd6:	689b      	ldr	r3, [r3, #8]
 8003bd8:	f003 030c 	and.w	r3, r3, #12
 8003bdc:	2b08      	cmp	r3, #8
 8003bde:	d102      	bne.n	8003be6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003be0:	4b26      	ldr	r3, [pc, #152]	; (8003c7c <HAL_RCC_GetSysClockFreq+0xc0>)
 8003be2:	613b      	str	r3, [r7, #16]
 8003be4:	e03e      	b.n	8003c64 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003be6:	4b23      	ldr	r3, [pc, #140]	; (8003c74 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003be8:	689b      	ldr	r3, [r3, #8]
 8003bea:	f003 030c 	and.w	r3, r3, #12
 8003bee:	2b0c      	cmp	r3, #12
 8003bf0:	d136      	bne.n	8003c60 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003bf2:	4b20      	ldr	r3, [pc, #128]	; (8003c74 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003bf4:	68db      	ldr	r3, [r3, #12]
 8003bf6:	f003 0303 	and.w	r3, r3, #3
 8003bfa:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003bfc:	4b1d      	ldr	r3, [pc, #116]	; (8003c74 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003bfe:	68db      	ldr	r3, [r3, #12]
 8003c00:	091b      	lsrs	r3, r3, #4
 8003c02:	f003 030f 	and.w	r3, r3, #15
 8003c06:	3301      	adds	r3, #1
 8003c08:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	2b03      	cmp	r3, #3
 8003c0e:	d10c      	bne.n	8003c2a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003c10:	4a1a      	ldr	r2, [pc, #104]	; (8003c7c <HAL_RCC_GetSysClockFreq+0xc0>)
 8003c12:	68bb      	ldr	r3, [r7, #8]
 8003c14:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c18:	4a16      	ldr	r2, [pc, #88]	; (8003c74 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c1a:	68d2      	ldr	r2, [r2, #12]
 8003c1c:	0a12      	lsrs	r2, r2, #8
 8003c1e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003c22:	fb02 f303 	mul.w	r3, r2, r3
 8003c26:	617b      	str	r3, [r7, #20]
      break;
 8003c28:	e00c      	b.n	8003c44 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003c2a:	4a13      	ldr	r2, [pc, #76]	; (8003c78 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003c2c:	68bb      	ldr	r3, [r7, #8]
 8003c2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c32:	4a10      	ldr	r2, [pc, #64]	; (8003c74 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c34:	68d2      	ldr	r2, [r2, #12]
 8003c36:	0a12      	lsrs	r2, r2, #8
 8003c38:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003c3c:	fb02 f303 	mul.w	r3, r2, r3
 8003c40:	617b      	str	r3, [r7, #20]
      break;
 8003c42:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003c44:	4b0b      	ldr	r3, [pc, #44]	; (8003c74 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c46:	68db      	ldr	r3, [r3, #12]
 8003c48:	0e5b      	lsrs	r3, r3, #25
 8003c4a:	f003 0303 	and.w	r3, r3, #3
 8003c4e:	3301      	adds	r3, #1
 8003c50:	005b      	lsls	r3, r3, #1
 8003c52:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003c54:	697a      	ldr	r2, [r7, #20]
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c5c:	613b      	str	r3, [r7, #16]
 8003c5e:	e001      	b.n	8003c64 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003c60:	2300      	movs	r3, #0
 8003c62:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003c64:	693b      	ldr	r3, [r7, #16]
}
 8003c66:	4618      	mov	r0, r3
 8003c68:	371c      	adds	r7, #28
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c70:	4770      	bx	lr
 8003c72:	bf00      	nop
 8003c74:	40021000 	.word	0x40021000
 8003c78:	00f42400 	.word	0x00f42400
 8003c7c:	007a1200 	.word	0x007a1200

08003c80 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003c80:	b480      	push	{r7}
 8003c82:	b087      	sub	sp, #28
 8003c84:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003c86:	4b1e      	ldr	r3, [pc, #120]	; (8003d00 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003c88:	68db      	ldr	r3, [r3, #12]
 8003c8a:	f003 0303 	and.w	r3, r3, #3
 8003c8e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003c90:	4b1b      	ldr	r3, [pc, #108]	; (8003d00 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003c92:	68db      	ldr	r3, [r3, #12]
 8003c94:	091b      	lsrs	r3, r3, #4
 8003c96:	f003 030f 	and.w	r3, r3, #15
 8003c9a:	3301      	adds	r3, #1
 8003c9c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003c9e:	693b      	ldr	r3, [r7, #16]
 8003ca0:	2b03      	cmp	r3, #3
 8003ca2:	d10c      	bne.n	8003cbe <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003ca4:	4a17      	ldr	r2, [pc, #92]	; (8003d04 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cac:	4a14      	ldr	r2, [pc, #80]	; (8003d00 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003cae:	68d2      	ldr	r2, [r2, #12]
 8003cb0:	0a12      	lsrs	r2, r2, #8
 8003cb2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003cb6:	fb02 f303 	mul.w	r3, r2, r3
 8003cba:	617b      	str	r3, [r7, #20]
    break;
 8003cbc:	e00c      	b.n	8003cd8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003cbe:	4a12      	ldr	r2, [pc, #72]	; (8003d08 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cc6:	4a0e      	ldr	r2, [pc, #56]	; (8003d00 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003cc8:	68d2      	ldr	r2, [r2, #12]
 8003cca:	0a12      	lsrs	r2, r2, #8
 8003ccc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003cd0:	fb02 f303 	mul.w	r3, r2, r3
 8003cd4:	617b      	str	r3, [r7, #20]
    break;
 8003cd6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003cd8:	4b09      	ldr	r3, [pc, #36]	; (8003d00 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003cda:	68db      	ldr	r3, [r3, #12]
 8003cdc:	0e5b      	lsrs	r3, r3, #25
 8003cde:	f003 0303 	and.w	r3, r3, #3
 8003ce2:	3301      	adds	r3, #1
 8003ce4:	005b      	lsls	r3, r3, #1
 8003ce6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003ce8:	697a      	ldr	r2, [r7, #20]
 8003cea:	68bb      	ldr	r3, [r7, #8]
 8003cec:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cf0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003cf2:	687b      	ldr	r3, [r7, #4]
}
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	371c      	adds	r7, #28
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfe:	4770      	bx	lr
 8003d00:	40021000 	.word	0x40021000
 8003d04:	007a1200 	.word	0x007a1200
 8003d08:	00f42400 	.word	0x00f42400

08003d0c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b086      	sub	sp, #24
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003d14:	2300      	movs	r3, #0
 8003d16:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003d18:	2300      	movs	r3, #0
 8003d1a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	f000 8098 	beq.w	8003e5a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d2e:	4b43      	ldr	r3, [pc, #268]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d10d      	bne.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d3a:	4b40      	ldr	r3, [pc, #256]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d3e:	4a3f      	ldr	r2, [pc, #252]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d44:	6593      	str	r3, [r2, #88]	; 0x58
 8003d46:	4b3d      	ldr	r3, [pc, #244]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d4e:	60bb      	str	r3, [r7, #8]
 8003d50:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d52:	2301      	movs	r3, #1
 8003d54:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d56:	4b3a      	ldr	r3, [pc, #232]	; (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4a39      	ldr	r2, [pc, #228]	; (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003d5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d60:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003d62:	f7fd fbeb 	bl	800153c <HAL_GetTick>
 8003d66:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003d68:	e009      	b.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d6a:	f7fd fbe7 	bl	800153c <HAL_GetTick>
 8003d6e:	4602      	mov	r2, r0
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	1ad3      	subs	r3, r2, r3
 8003d74:	2b02      	cmp	r3, #2
 8003d76:	d902      	bls.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003d78:	2303      	movs	r3, #3
 8003d7a:	74fb      	strb	r3, [r7, #19]
        break;
 8003d7c:	e005      	b.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003d7e:	4b30      	ldr	r3, [pc, #192]	; (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d0ef      	beq.n	8003d6a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003d8a:	7cfb      	ldrb	r3, [r7, #19]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d159      	bne.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003d90:	4b2a      	ldr	r3, [pc, #168]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d9a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003d9c:	697b      	ldr	r3, [r7, #20]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d01e      	beq.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003da6:	697a      	ldr	r2, [r7, #20]
 8003da8:	429a      	cmp	r2, r3
 8003daa:	d019      	beq.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003dac:	4b23      	ldr	r3, [pc, #140]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003dae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003db2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003db6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003db8:	4b20      	ldr	r3, [pc, #128]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003dba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dbe:	4a1f      	ldr	r2, [pc, #124]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003dc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003dc4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003dc8:	4b1c      	ldr	r3, [pc, #112]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003dca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dce:	4a1b      	ldr	r2, [pc, #108]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003dd0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003dd4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003dd8:	4a18      	ldr	r2, [pc, #96]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003dda:	697b      	ldr	r3, [r7, #20]
 8003ddc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003de0:	697b      	ldr	r3, [r7, #20]
 8003de2:	f003 0301 	and.w	r3, r3, #1
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d016      	beq.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dea:	f7fd fba7 	bl	800153c <HAL_GetTick>
 8003dee:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003df0:	e00b      	b.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003df2:	f7fd fba3 	bl	800153c <HAL_GetTick>
 8003df6:	4602      	mov	r2, r0
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	1ad3      	subs	r3, r2, r3
 8003dfc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d902      	bls.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003e04:	2303      	movs	r3, #3
 8003e06:	74fb      	strb	r3, [r7, #19]
            break;
 8003e08:	e006      	b.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e0a:	4b0c      	ldr	r3, [pc, #48]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e10:	f003 0302 	and.w	r3, r3, #2
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d0ec      	beq.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003e18:	7cfb      	ldrb	r3, [r7, #19]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d10b      	bne.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e1e:	4b07      	ldr	r3, [pc, #28]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e24:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e2c:	4903      	ldr	r1, [pc, #12]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e2e:	4313      	orrs	r3, r2
 8003e30:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003e34:	e008      	b.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003e36:	7cfb      	ldrb	r3, [r7, #19]
 8003e38:	74bb      	strb	r3, [r7, #18]
 8003e3a:	e005      	b.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003e3c:	40021000 	.word	0x40021000
 8003e40:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e44:	7cfb      	ldrb	r3, [r7, #19]
 8003e46:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003e48:	7c7b      	ldrb	r3, [r7, #17]
 8003e4a:	2b01      	cmp	r3, #1
 8003e4c:	d105      	bne.n	8003e5a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e4e:	4ba6      	ldr	r3, [pc, #664]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e52:	4aa5      	ldr	r2, [pc, #660]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e54:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e58:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f003 0301 	and.w	r3, r3, #1
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d00a      	beq.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003e66:	4ba0      	ldr	r3, [pc, #640]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e6c:	f023 0203 	bic.w	r2, r3, #3
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	685b      	ldr	r3, [r3, #4]
 8003e74:	499c      	ldr	r1, [pc, #624]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e76:	4313      	orrs	r3, r2
 8003e78:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f003 0302 	and.w	r3, r3, #2
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d00a      	beq.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003e88:	4b97      	ldr	r3, [pc, #604]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e8e:	f023 020c 	bic.w	r2, r3, #12
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	689b      	ldr	r3, [r3, #8]
 8003e96:	4994      	ldr	r1, [pc, #592]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f003 0304 	and.w	r3, r3, #4
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d00a      	beq.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003eaa:	4b8f      	ldr	r3, [pc, #572]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003eac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eb0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	68db      	ldr	r3, [r3, #12]
 8003eb8:	498b      	ldr	r1, [pc, #556]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f003 0308 	and.w	r3, r3, #8
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d00a      	beq.n	8003ee2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003ecc:	4b86      	ldr	r3, [pc, #536]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ece:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ed2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	691b      	ldr	r3, [r3, #16]
 8003eda:	4983      	ldr	r1, [pc, #524]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003edc:	4313      	orrs	r3, r2
 8003ede:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f003 0320 	and.w	r3, r3, #32
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d00a      	beq.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003eee:	4b7e      	ldr	r3, [pc, #504]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ef0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ef4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	695b      	ldr	r3, [r3, #20]
 8003efc:	497a      	ldr	r1, [pc, #488]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003efe:	4313      	orrs	r3, r2
 8003f00:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d00a      	beq.n	8003f26 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003f10:	4b75      	ldr	r3, [pc, #468]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f16:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	699b      	ldr	r3, [r3, #24]
 8003f1e:	4972      	ldr	r1, [pc, #456]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f20:	4313      	orrs	r3, r2
 8003f22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d00a      	beq.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003f32:	4b6d      	ldr	r3, [pc, #436]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f38:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	69db      	ldr	r3, [r3, #28]
 8003f40:	4969      	ldr	r1, [pc, #420]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f42:	4313      	orrs	r3, r2
 8003f44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d00a      	beq.n	8003f6a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003f54:	4b64      	ldr	r3, [pc, #400]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f5a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6a1b      	ldr	r3, [r3, #32]
 8003f62:	4961      	ldr	r1, [pc, #388]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f64:	4313      	orrs	r3, r2
 8003f66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d00a      	beq.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003f76:	4b5c      	ldr	r3, [pc, #368]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f7c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f84:	4958      	ldr	r1, [pc, #352]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f86:	4313      	orrs	r3, r2
 8003f88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d015      	beq.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003f98:	4b53      	ldr	r3, [pc, #332]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f9e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fa6:	4950      	ldr	r1, [pc, #320]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fb2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003fb6:	d105      	bne.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003fb8:	4b4b      	ldr	r3, [pc, #300]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fba:	68db      	ldr	r3, [r3, #12]
 8003fbc:	4a4a      	ldr	r2, [pc, #296]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fbe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003fc2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d015      	beq.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003fd0:	4b45      	ldr	r3, [pc, #276]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fd6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fde:	4942      	ldr	r1, [pc, #264]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003fee:	d105      	bne.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ff0:	4b3d      	ldr	r3, [pc, #244]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ff2:	68db      	ldr	r3, [r3, #12]
 8003ff4:	4a3c      	ldr	r2, [pc, #240]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ff6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003ffa:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004004:	2b00      	cmp	r3, #0
 8004006:	d015      	beq.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004008:	4b37      	ldr	r3, [pc, #220]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800400a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800400e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004016:	4934      	ldr	r1, [pc, #208]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004018:	4313      	orrs	r3, r2
 800401a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004022:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004026:	d105      	bne.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004028:	4b2f      	ldr	r3, [pc, #188]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800402a:	68db      	ldr	r3, [r3, #12]
 800402c:	4a2e      	ldr	r2, [pc, #184]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800402e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004032:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800403c:	2b00      	cmp	r3, #0
 800403e:	d015      	beq.n	800406c <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004040:	4b29      	ldr	r3, [pc, #164]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004042:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004046:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800404e:	4926      	ldr	r1, [pc, #152]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004050:	4313      	orrs	r3, r2
 8004052:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800405a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800405e:	d105      	bne.n	800406c <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004060:	4b21      	ldr	r3, [pc, #132]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004062:	68db      	ldr	r3, [r3, #12]
 8004064:	4a20      	ldr	r2, [pc, #128]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004066:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800406a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004074:	2b00      	cmp	r3, #0
 8004076:	d015      	beq.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004078:	4b1b      	ldr	r3, [pc, #108]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800407a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800407e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004086:	4918      	ldr	r1, [pc, #96]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004088:	4313      	orrs	r3, r2
 800408a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004092:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004096:	d105      	bne.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004098:	4b13      	ldr	r3, [pc, #76]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800409a:	68db      	ldr	r3, [r3, #12]
 800409c:	4a12      	ldr	r2, [pc, #72]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800409e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80040a2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d015      	beq.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80040b0:	4b0d      	ldr	r3, [pc, #52]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040b6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040be:	490a      	ldr	r1, [pc, #40]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040c0:	4313      	orrs	r3, r2
 80040c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040ca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80040ce:	d105      	bne.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80040d0:	4b05      	ldr	r3, [pc, #20]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040d2:	68db      	ldr	r3, [r3, #12]
 80040d4:	4a04      	ldr	r2, [pc, #16]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040da:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80040dc:	7cbb      	ldrb	r3, [r7, #18]
}
 80040de:	4618      	mov	r0, r3
 80040e0:	3718      	adds	r7, #24
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bd80      	pop	{r7, pc}
 80040e6:	bf00      	nop
 80040e8:	40021000 	.word	0x40021000

080040ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b082      	sub	sp, #8
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d101      	bne.n	80040fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80040fa:	2301      	movs	r3, #1
 80040fc:	e049      	b.n	8004192 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004104:	b2db      	uxtb	r3, r3
 8004106:	2b00      	cmp	r3, #0
 8004108:	d106      	bne.n	8004118 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2200      	movs	r2, #0
 800410e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004112:	6878      	ldr	r0, [r7, #4]
 8004114:	f7fd f802 	bl	800111c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2202      	movs	r2, #2
 800411c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681a      	ldr	r2, [r3, #0]
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	3304      	adds	r3, #4
 8004128:	4619      	mov	r1, r3
 800412a:	4610      	mov	r0, r2
 800412c:	f000 fde2 	bl	8004cf4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2201      	movs	r2, #1
 8004134:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2201      	movs	r2, #1
 800413c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2201      	movs	r2, #1
 8004144:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2201      	movs	r2, #1
 800414c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2201      	movs	r2, #1
 8004154:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2201      	movs	r2, #1
 800415c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2201      	movs	r2, #1
 8004164:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2201      	movs	r2, #1
 800416c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2201      	movs	r2, #1
 8004174:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2201      	movs	r2, #1
 800417c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2201      	movs	r2, #1
 8004184:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2201      	movs	r2, #1
 800418c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004190:	2300      	movs	r3, #0
}
 8004192:	4618      	mov	r0, r3
 8004194:	3708      	adds	r7, #8
 8004196:	46bd      	mov	sp, r7
 8004198:	bd80      	pop	{r7, pc}
	...

0800419c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800419c:	b480      	push	{r7}
 800419e:	b085      	sub	sp, #20
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041aa:	b2db      	uxtb	r3, r3
 80041ac:	2b01      	cmp	r3, #1
 80041ae:	d001      	beq.n	80041b4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80041b0:	2301      	movs	r3, #1
 80041b2:	e04a      	b.n	800424a <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2202      	movs	r2, #2
 80041b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	68da      	ldr	r2, [r3, #12]
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f042 0201 	orr.w	r2, r2, #1
 80041ca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4a21      	ldr	r2, [pc, #132]	; (8004258 <HAL_TIM_Base_Start_IT+0xbc>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d018      	beq.n	8004208 <HAL_TIM_Base_Start_IT+0x6c>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041de:	d013      	beq.n	8004208 <HAL_TIM_Base_Start_IT+0x6c>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a1d      	ldr	r2, [pc, #116]	; (800425c <HAL_TIM_Base_Start_IT+0xc0>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d00e      	beq.n	8004208 <HAL_TIM_Base_Start_IT+0x6c>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4a1c      	ldr	r2, [pc, #112]	; (8004260 <HAL_TIM_Base_Start_IT+0xc4>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d009      	beq.n	8004208 <HAL_TIM_Base_Start_IT+0x6c>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4a1a      	ldr	r2, [pc, #104]	; (8004264 <HAL_TIM_Base_Start_IT+0xc8>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d004      	beq.n	8004208 <HAL_TIM_Base_Start_IT+0x6c>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4a19      	ldr	r2, [pc, #100]	; (8004268 <HAL_TIM_Base_Start_IT+0xcc>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d115      	bne.n	8004234 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	689a      	ldr	r2, [r3, #8]
 800420e:	4b17      	ldr	r3, [pc, #92]	; (800426c <HAL_TIM_Base_Start_IT+0xd0>)
 8004210:	4013      	ands	r3, r2
 8004212:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	2b06      	cmp	r3, #6
 8004218:	d015      	beq.n	8004246 <HAL_TIM_Base_Start_IT+0xaa>
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004220:	d011      	beq.n	8004246 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	681a      	ldr	r2, [r3, #0]
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f042 0201 	orr.w	r2, r2, #1
 8004230:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004232:	e008      	b.n	8004246 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	681a      	ldr	r2, [r3, #0]
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f042 0201 	orr.w	r2, r2, #1
 8004242:	601a      	str	r2, [r3, #0]
 8004244:	e000      	b.n	8004248 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004246:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004248:	2300      	movs	r3, #0
}
 800424a:	4618      	mov	r0, r3
 800424c:	3714      	adds	r7, #20
 800424e:	46bd      	mov	sp, r7
 8004250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004254:	4770      	bx	lr
 8004256:	bf00      	nop
 8004258:	40012c00 	.word	0x40012c00
 800425c:	40000400 	.word	0x40000400
 8004260:	40000800 	.word	0x40000800
 8004264:	40013400 	.word	0x40013400
 8004268:	40014000 	.word	0x40014000
 800426c:	00010007 	.word	0x00010007

08004270 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b082      	sub	sp, #8
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d101      	bne.n	8004282 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800427e:	2301      	movs	r3, #1
 8004280:	e049      	b.n	8004316 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004288:	b2db      	uxtb	r3, r3
 800428a:	2b00      	cmp	r3, #0
 800428c:	d106      	bne.n	800429c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2200      	movs	r2, #0
 8004292:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004296:	6878      	ldr	r0, [r7, #4]
 8004298:	f7fc fefa 	bl	8001090 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2202      	movs	r2, #2
 80042a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681a      	ldr	r2, [r3, #0]
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	3304      	adds	r3, #4
 80042ac:	4619      	mov	r1, r3
 80042ae:	4610      	mov	r0, r2
 80042b0:	f000 fd20 	bl	8004cf4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2201      	movs	r2, #1
 80042b8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2201      	movs	r2, #1
 80042c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2201      	movs	r2, #1
 80042c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2201      	movs	r2, #1
 80042d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2201      	movs	r2, #1
 80042d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2201      	movs	r2, #1
 80042e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2201      	movs	r2, #1
 80042e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2201      	movs	r2, #1
 80042f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2201      	movs	r2, #1
 80042f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2201      	movs	r2, #1
 8004300:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2201      	movs	r2, #1
 8004308:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2201      	movs	r2, #1
 8004310:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004314:	2300      	movs	r3, #0
}
 8004316:	4618      	mov	r0, r3
 8004318:	3708      	adds	r7, #8
 800431a:	46bd      	mov	sp, r7
 800431c:	bd80      	pop	{r7, pc}
	...

08004320 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b084      	sub	sp, #16
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
 8004328:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d109      	bne.n	8004344 <HAL_TIM_PWM_Start+0x24>
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004336:	b2db      	uxtb	r3, r3
 8004338:	2b01      	cmp	r3, #1
 800433a:	bf14      	ite	ne
 800433c:	2301      	movne	r3, #1
 800433e:	2300      	moveq	r3, #0
 8004340:	b2db      	uxtb	r3, r3
 8004342:	e03c      	b.n	80043be <HAL_TIM_PWM_Start+0x9e>
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	2b04      	cmp	r3, #4
 8004348:	d109      	bne.n	800435e <HAL_TIM_PWM_Start+0x3e>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004350:	b2db      	uxtb	r3, r3
 8004352:	2b01      	cmp	r3, #1
 8004354:	bf14      	ite	ne
 8004356:	2301      	movne	r3, #1
 8004358:	2300      	moveq	r3, #0
 800435a:	b2db      	uxtb	r3, r3
 800435c:	e02f      	b.n	80043be <HAL_TIM_PWM_Start+0x9e>
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	2b08      	cmp	r3, #8
 8004362:	d109      	bne.n	8004378 <HAL_TIM_PWM_Start+0x58>
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800436a:	b2db      	uxtb	r3, r3
 800436c:	2b01      	cmp	r3, #1
 800436e:	bf14      	ite	ne
 8004370:	2301      	movne	r3, #1
 8004372:	2300      	moveq	r3, #0
 8004374:	b2db      	uxtb	r3, r3
 8004376:	e022      	b.n	80043be <HAL_TIM_PWM_Start+0x9e>
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	2b0c      	cmp	r3, #12
 800437c:	d109      	bne.n	8004392 <HAL_TIM_PWM_Start+0x72>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004384:	b2db      	uxtb	r3, r3
 8004386:	2b01      	cmp	r3, #1
 8004388:	bf14      	ite	ne
 800438a:	2301      	movne	r3, #1
 800438c:	2300      	moveq	r3, #0
 800438e:	b2db      	uxtb	r3, r3
 8004390:	e015      	b.n	80043be <HAL_TIM_PWM_Start+0x9e>
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	2b10      	cmp	r3, #16
 8004396:	d109      	bne.n	80043ac <HAL_TIM_PWM_Start+0x8c>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800439e:	b2db      	uxtb	r3, r3
 80043a0:	2b01      	cmp	r3, #1
 80043a2:	bf14      	ite	ne
 80043a4:	2301      	movne	r3, #1
 80043a6:	2300      	moveq	r3, #0
 80043a8:	b2db      	uxtb	r3, r3
 80043aa:	e008      	b.n	80043be <HAL_TIM_PWM_Start+0x9e>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80043b2:	b2db      	uxtb	r3, r3
 80043b4:	2b01      	cmp	r3, #1
 80043b6:	bf14      	ite	ne
 80043b8:	2301      	movne	r3, #1
 80043ba:	2300      	moveq	r3, #0
 80043bc:	b2db      	uxtb	r3, r3
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d001      	beq.n	80043c6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80043c2:	2301      	movs	r3, #1
 80043c4:	e097      	b.n	80044f6 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d104      	bne.n	80043d6 <HAL_TIM_PWM_Start+0xb6>
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2202      	movs	r2, #2
 80043d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80043d4:	e023      	b.n	800441e <HAL_TIM_PWM_Start+0xfe>
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	2b04      	cmp	r3, #4
 80043da:	d104      	bne.n	80043e6 <HAL_TIM_PWM_Start+0xc6>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2202      	movs	r2, #2
 80043e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80043e4:	e01b      	b.n	800441e <HAL_TIM_PWM_Start+0xfe>
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	2b08      	cmp	r3, #8
 80043ea:	d104      	bne.n	80043f6 <HAL_TIM_PWM_Start+0xd6>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2202      	movs	r2, #2
 80043f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80043f4:	e013      	b.n	800441e <HAL_TIM_PWM_Start+0xfe>
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	2b0c      	cmp	r3, #12
 80043fa:	d104      	bne.n	8004406 <HAL_TIM_PWM_Start+0xe6>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2202      	movs	r2, #2
 8004400:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004404:	e00b      	b.n	800441e <HAL_TIM_PWM_Start+0xfe>
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	2b10      	cmp	r3, #16
 800440a:	d104      	bne.n	8004416 <HAL_TIM_PWM_Start+0xf6>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2202      	movs	r2, #2
 8004410:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004414:	e003      	b.n	800441e <HAL_TIM_PWM_Start+0xfe>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2202      	movs	r2, #2
 800441a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	2201      	movs	r2, #1
 8004424:	6839      	ldr	r1, [r7, #0]
 8004426:	4618      	mov	r0, r3
 8004428:	f000 ffea 	bl	8005400 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4a33      	ldr	r2, [pc, #204]	; (8004500 <HAL_TIM_PWM_Start+0x1e0>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d013      	beq.n	800445e <HAL_TIM_PWM_Start+0x13e>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4a32      	ldr	r2, [pc, #200]	; (8004504 <HAL_TIM_PWM_Start+0x1e4>)
 800443c:	4293      	cmp	r3, r2
 800443e:	d00e      	beq.n	800445e <HAL_TIM_PWM_Start+0x13e>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a30      	ldr	r2, [pc, #192]	; (8004508 <HAL_TIM_PWM_Start+0x1e8>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d009      	beq.n	800445e <HAL_TIM_PWM_Start+0x13e>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4a2f      	ldr	r2, [pc, #188]	; (800450c <HAL_TIM_PWM_Start+0x1ec>)
 8004450:	4293      	cmp	r3, r2
 8004452:	d004      	beq.n	800445e <HAL_TIM_PWM_Start+0x13e>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4a2d      	ldr	r2, [pc, #180]	; (8004510 <HAL_TIM_PWM_Start+0x1f0>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d101      	bne.n	8004462 <HAL_TIM_PWM_Start+0x142>
 800445e:	2301      	movs	r3, #1
 8004460:	e000      	b.n	8004464 <HAL_TIM_PWM_Start+0x144>
 8004462:	2300      	movs	r3, #0
 8004464:	2b00      	cmp	r3, #0
 8004466:	d007      	beq.n	8004478 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004476:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4a20      	ldr	r2, [pc, #128]	; (8004500 <HAL_TIM_PWM_Start+0x1e0>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d018      	beq.n	80044b4 <HAL_TIM_PWM_Start+0x194>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800448a:	d013      	beq.n	80044b4 <HAL_TIM_PWM_Start+0x194>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4a20      	ldr	r2, [pc, #128]	; (8004514 <HAL_TIM_PWM_Start+0x1f4>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d00e      	beq.n	80044b4 <HAL_TIM_PWM_Start+0x194>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4a1f      	ldr	r2, [pc, #124]	; (8004518 <HAL_TIM_PWM_Start+0x1f8>)
 800449c:	4293      	cmp	r3, r2
 800449e:	d009      	beq.n	80044b4 <HAL_TIM_PWM_Start+0x194>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4a17      	ldr	r2, [pc, #92]	; (8004504 <HAL_TIM_PWM_Start+0x1e4>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d004      	beq.n	80044b4 <HAL_TIM_PWM_Start+0x194>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4a16      	ldr	r2, [pc, #88]	; (8004508 <HAL_TIM_PWM_Start+0x1e8>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d115      	bne.n	80044e0 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	689a      	ldr	r2, [r3, #8]
 80044ba:	4b18      	ldr	r3, [pc, #96]	; (800451c <HAL_TIM_PWM_Start+0x1fc>)
 80044bc:	4013      	ands	r3, r2
 80044be:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	2b06      	cmp	r3, #6
 80044c4:	d015      	beq.n	80044f2 <HAL_TIM_PWM_Start+0x1d2>
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044cc:	d011      	beq.n	80044f2 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	681a      	ldr	r2, [r3, #0]
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f042 0201 	orr.w	r2, r2, #1
 80044dc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044de:	e008      	b.n	80044f2 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	681a      	ldr	r2, [r3, #0]
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f042 0201 	orr.w	r2, r2, #1
 80044ee:	601a      	str	r2, [r3, #0]
 80044f0:	e000      	b.n	80044f4 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044f2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80044f4:	2300      	movs	r3, #0
}
 80044f6:	4618      	mov	r0, r3
 80044f8:	3710      	adds	r7, #16
 80044fa:	46bd      	mov	sp, r7
 80044fc:	bd80      	pop	{r7, pc}
 80044fe:	bf00      	nop
 8004500:	40012c00 	.word	0x40012c00
 8004504:	40013400 	.word	0x40013400
 8004508:	40014000 	.word	0x40014000
 800450c:	40014400 	.word	0x40014400
 8004510:	40014800 	.word	0x40014800
 8004514:	40000400 	.word	0x40000400
 8004518:	40000800 	.word	0x40000800
 800451c:	00010007 	.word	0x00010007

08004520 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b086      	sub	sp, #24
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
 8004528:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d101      	bne.n	8004534 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004530:	2301      	movs	r3, #1
 8004532:	e097      	b.n	8004664 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800453a:	b2db      	uxtb	r3, r3
 800453c:	2b00      	cmp	r3, #0
 800453e:	d106      	bne.n	800454e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2200      	movs	r2, #0
 8004544:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004548:	6878      	ldr	r0, [r7, #4]
 800454a:	f7fc fcfb 	bl	8000f44 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2202      	movs	r2, #2
 8004552:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	689b      	ldr	r3, [r3, #8]
 800455c:	687a      	ldr	r2, [r7, #4]
 800455e:	6812      	ldr	r2, [r2, #0]
 8004560:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8004564:	f023 0307 	bic.w	r3, r3, #7
 8004568:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681a      	ldr	r2, [r3, #0]
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	3304      	adds	r3, #4
 8004572:	4619      	mov	r1, r3
 8004574:	4610      	mov	r0, r2
 8004576:	f000 fbbd 	bl	8004cf4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	689b      	ldr	r3, [r3, #8]
 8004580:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	699b      	ldr	r3, [r3, #24]
 8004588:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	6a1b      	ldr	r3, [r3, #32]
 8004590:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	697a      	ldr	r2, [r7, #20]
 8004598:	4313      	orrs	r3, r2
 800459a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800459c:	693b      	ldr	r3, [r7, #16]
 800459e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045a2:	f023 0303 	bic.w	r3, r3, #3
 80045a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	689a      	ldr	r2, [r3, #8]
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	699b      	ldr	r3, [r3, #24]
 80045b0:	021b      	lsls	r3, r3, #8
 80045b2:	4313      	orrs	r3, r2
 80045b4:	693a      	ldr	r2, [r7, #16]
 80045b6:	4313      	orrs	r3, r2
 80045b8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80045ba:	693b      	ldr	r3, [r7, #16]
 80045bc:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80045c0:	f023 030c 	bic.w	r3, r3, #12
 80045c4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80045c6:	693b      	ldr	r3, [r7, #16]
 80045c8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80045cc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80045d0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	68da      	ldr	r2, [r3, #12]
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	69db      	ldr	r3, [r3, #28]
 80045da:	021b      	lsls	r3, r3, #8
 80045dc:	4313      	orrs	r3, r2
 80045de:	693a      	ldr	r2, [r7, #16]
 80045e0:	4313      	orrs	r3, r2
 80045e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	691b      	ldr	r3, [r3, #16]
 80045e8:	011a      	lsls	r2, r3, #4
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	6a1b      	ldr	r3, [r3, #32]
 80045ee:	031b      	lsls	r3, r3, #12
 80045f0:	4313      	orrs	r3, r2
 80045f2:	693a      	ldr	r2, [r7, #16]
 80045f4:	4313      	orrs	r3, r2
 80045f6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80045fe:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8004606:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	685a      	ldr	r2, [r3, #4]
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	695b      	ldr	r3, [r3, #20]
 8004610:	011b      	lsls	r3, r3, #4
 8004612:	4313      	orrs	r3, r2
 8004614:	68fa      	ldr	r2, [r7, #12]
 8004616:	4313      	orrs	r3, r2
 8004618:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	697a      	ldr	r2, [r7, #20]
 8004620:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	693a      	ldr	r2, [r7, #16]
 8004628:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	68fa      	ldr	r2, [r7, #12]
 8004630:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2201      	movs	r2, #1
 8004636:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2201      	movs	r2, #1
 800463e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2201      	movs	r2, #1
 8004646:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2201      	movs	r2, #1
 800464e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2201      	movs	r2, #1
 8004656:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2201      	movs	r2, #1
 800465e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004662:	2300      	movs	r3, #0
}
 8004664:	4618      	mov	r0, r3
 8004666:	3718      	adds	r7, #24
 8004668:	46bd      	mov	sp, r7
 800466a:	bd80      	pop	{r7, pc}

0800466c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b084      	sub	sp, #16
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
 8004674:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800467c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004684:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800468c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004694:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d110      	bne.n	80046be <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800469c:	7bfb      	ldrb	r3, [r7, #15]
 800469e:	2b01      	cmp	r3, #1
 80046a0:	d102      	bne.n	80046a8 <HAL_TIM_Encoder_Start+0x3c>
     || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80046a2:	7b7b      	ldrb	r3, [r7, #13]
 80046a4:	2b01      	cmp	r3, #1
 80046a6:	d001      	beq.n	80046ac <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80046a8:	2301      	movs	r3, #1
 80046aa:	e068      	b.n	800477e <HAL_TIM_Encoder_Start+0x112>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2202      	movs	r2, #2
 80046b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2202      	movs	r2, #2
 80046b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80046bc:	e031      	b.n	8004722 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	2b04      	cmp	r3, #4
 80046c2:	d110      	bne.n	80046e6 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80046c4:	7bbb      	ldrb	r3, [r7, #14]
 80046c6:	2b01      	cmp	r3, #1
 80046c8:	d102      	bne.n	80046d0 <HAL_TIM_Encoder_Start+0x64>
     || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80046ca:	7b3b      	ldrb	r3, [r7, #12]
 80046cc:	2b01      	cmp	r3, #1
 80046ce:	d001      	beq.n	80046d4 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80046d0:	2301      	movs	r3, #1
 80046d2:	e054      	b.n	800477e <HAL_TIM_Encoder_Start+0x112>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2202      	movs	r2, #2
 80046d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2202      	movs	r2, #2
 80046e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80046e4:	e01d      	b.n	8004722 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80046e6:	7bfb      	ldrb	r3, [r7, #15]
 80046e8:	2b01      	cmp	r3, #1
 80046ea:	d108      	bne.n	80046fe <HAL_TIM_Encoder_Start+0x92>
     || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80046ec:	7bbb      	ldrb	r3, [r7, #14]
 80046ee:	2b01      	cmp	r3, #1
 80046f0:	d105      	bne.n	80046fe <HAL_TIM_Encoder_Start+0x92>
     || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80046f2:	7b7b      	ldrb	r3, [r7, #13]
 80046f4:	2b01      	cmp	r3, #1
 80046f6:	d102      	bne.n	80046fe <HAL_TIM_Encoder_Start+0x92>
     || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80046f8:	7b3b      	ldrb	r3, [r7, #12]
 80046fa:	2b01      	cmp	r3, #1
 80046fc:	d001      	beq.n	8004702 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80046fe:	2301      	movs	r3, #1
 8004700:	e03d      	b.n	800477e <HAL_TIM_Encoder_Start+0x112>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2202      	movs	r2, #2
 8004706:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2202      	movs	r2, #2
 800470e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2202      	movs	r2, #2
 8004716:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2202      	movs	r2, #2
 800471e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d002      	beq.n	800472e <HAL_TIM_Encoder_Start+0xc2>
 8004728:	2b04      	cmp	r3, #4
 800472a:	d008      	beq.n	800473e <HAL_TIM_Encoder_Start+0xd2>
 800472c:	e00f      	b.n	800474e <HAL_TIM_Encoder_Start+0xe2>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	2201      	movs	r2, #1
 8004734:	2100      	movs	r1, #0
 8004736:	4618      	mov	r0, r3
 8004738:	f000 fe62 	bl	8005400 <TIM_CCxChannelCmd>
      break;
 800473c:	e016      	b.n	800476c <HAL_TIM_Encoder_Start+0x100>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	2201      	movs	r2, #1
 8004744:	2104      	movs	r1, #4
 8004746:	4618      	mov	r0, r3
 8004748:	f000 fe5a 	bl	8005400 <TIM_CCxChannelCmd>
      break;
 800474c:	e00e      	b.n	800476c <HAL_TIM_Encoder_Start+0x100>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	2201      	movs	r2, #1
 8004754:	2100      	movs	r1, #0
 8004756:	4618      	mov	r0, r3
 8004758:	f000 fe52 	bl	8005400 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	2201      	movs	r2, #1
 8004762:	2104      	movs	r1, #4
 8004764:	4618      	mov	r0, r3
 8004766:	f000 fe4b 	bl	8005400 <TIM_CCxChannelCmd>
      break;
 800476a:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	681a      	ldr	r2, [r3, #0]
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f042 0201 	orr.w	r2, r2, #1
 800477a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800477c:	2300      	movs	r3, #0
}
 800477e:	4618      	mov	r0, r3
 8004780:	3710      	adds	r7, #16
 8004782:	46bd      	mov	sp, r7
 8004784:	bd80      	pop	{r7, pc}

08004786 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004786:	b580      	push	{r7, lr}
 8004788:	b082      	sub	sp, #8
 800478a:	af00      	add	r7, sp, #0
 800478c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	691b      	ldr	r3, [r3, #16]
 8004794:	f003 0302 	and.w	r3, r3, #2
 8004798:	2b02      	cmp	r3, #2
 800479a:	d122      	bne.n	80047e2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	68db      	ldr	r3, [r3, #12]
 80047a2:	f003 0302 	and.w	r3, r3, #2
 80047a6:	2b02      	cmp	r3, #2
 80047a8:	d11b      	bne.n	80047e2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f06f 0202 	mvn.w	r2, #2
 80047b2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2201      	movs	r2, #1
 80047b8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	699b      	ldr	r3, [r3, #24]
 80047c0:	f003 0303 	and.w	r3, r3, #3
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d003      	beq.n	80047d0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80047c8:	6878      	ldr	r0, [r7, #4]
 80047ca:	f000 fa75 	bl	8004cb8 <HAL_TIM_IC_CaptureCallback>
 80047ce:	e005      	b.n	80047dc <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80047d0:	6878      	ldr	r0, [r7, #4]
 80047d2:	f000 fa67 	bl	8004ca4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047d6:	6878      	ldr	r0, [r7, #4]
 80047d8:	f000 fa78 	bl	8004ccc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2200      	movs	r2, #0
 80047e0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	691b      	ldr	r3, [r3, #16]
 80047e8:	f003 0304 	and.w	r3, r3, #4
 80047ec:	2b04      	cmp	r3, #4
 80047ee:	d122      	bne.n	8004836 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	68db      	ldr	r3, [r3, #12]
 80047f6:	f003 0304 	and.w	r3, r3, #4
 80047fa:	2b04      	cmp	r3, #4
 80047fc:	d11b      	bne.n	8004836 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f06f 0204 	mvn.w	r2, #4
 8004806:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2202      	movs	r2, #2
 800480c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	699b      	ldr	r3, [r3, #24]
 8004814:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004818:	2b00      	cmp	r3, #0
 800481a:	d003      	beq.n	8004824 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800481c:	6878      	ldr	r0, [r7, #4]
 800481e:	f000 fa4b 	bl	8004cb8 <HAL_TIM_IC_CaptureCallback>
 8004822:	e005      	b.n	8004830 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004824:	6878      	ldr	r0, [r7, #4]
 8004826:	f000 fa3d 	bl	8004ca4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800482a:	6878      	ldr	r0, [r7, #4]
 800482c:	f000 fa4e 	bl	8004ccc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2200      	movs	r2, #0
 8004834:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	691b      	ldr	r3, [r3, #16]
 800483c:	f003 0308 	and.w	r3, r3, #8
 8004840:	2b08      	cmp	r3, #8
 8004842:	d122      	bne.n	800488a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	68db      	ldr	r3, [r3, #12]
 800484a:	f003 0308 	and.w	r3, r3, #8
 800484e:	2b08      	cmp	r3, #8
 8004850:	d11b      	bne.n	800488a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f06f 0208 	mvn.w	r2, #8
 800485a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2204      	movs	r2, #4
 8004860:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	69db      	ldr	r3, [r3, #28]
 8004868:	f003 0303 	and.w	r3, r3, #3
 800486c:	2b00      	cmp	r3, #0
 800486e:	d003      	beq.n	8004878 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004870:	6878      	ldr	r0, [r7, #4]
 8004872:	f000 fa21 	bl	8004cb8 <HAL_TIM_IC_CaptureCallback>
 8004876:	e005      	b.n	8004884 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004878:	6878      	ldr	r0, [r7, #4]
 800487a:	f000 fa13 	bl	8004ca4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800487e:	6878      	ldr	r0, [r7, #4]
 8004880:	f000 fa24 	bl	8004ccc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2200      	movs	r2, #0
 8004888:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	691b      	ldr	r3, [r3, #16]
 8004890:	f003 0310 	and.w	r3, r3, #16
 8004894:	2b10      	cmp	r3, #16
 8004896:	d122      	bne.n	80048de <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	68db      	ldr	r3, [r3, #12]
 800489e:	f003 0310 	and.w	r3, r3, #16
 80048a2:	2b10      	cmp	r3, #16
 80048a4:	d11b      	bne.n	80048de <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f06f 0210 	mvn.w	r2, #16
 80048ae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2208      	movs	r2, #8
 80048b4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	69db      	ldr	r3, [r3, #28]
 80048bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d003      	beq.n	80048cc <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048c4:	6878      	ldr	r0, [r7, #4]
 80048c6:	f000 f9f7 	bl	8004cb8 <HAL_TIM_IC_CaptureCallback>
 80048ca:	e005      	b.n	80048d8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048cc:	6878      	ldr	r0, [r7, #4]
 80048ce:	f000 f9e9 	bl	8004ca4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048d2:	6878      	ldr	r0, [r7, #4]
 80048d4:	f000 f9fa 	bl	8004ccc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2200      	movs	r2, #0
 80048dc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	691b      	ldr	r3, [r3, #16]
 80048e4:	f003 0301 	and.w	r3, r3, #1
 80048e8:	2b01      	cmp	r3, #1
 80048ea:	d10e      	bne.n	800490a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	68db      	ldr	r3, [r3, #12]
 80048f2:	f003 0301 	and.w	r3, r3, #1
 80048f6:	2b01      	cmp	r3, #1
 80048f8:	d107      	bne.n	800490a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f06f 0201 	mvn.w	r2, #1
 8004902:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004904:	6878      	ldr	r0, [r7, #4]
 8004906:	f7fc fa47 	bl	8000d98 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	691b      	ldr	r3, [r3, #16]
 8004910:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004914:	2b80      	cmp	r3, #128	; 0x80
 8004916:	d10e      	bne.n	8004936 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	68db      	ldr	r3, [r3, #12]
 800491e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004922:	2b80      	cmp	r3, #128	; 0x80
 8004924:	d107      	bne.n	8004936 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800492e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004930:	6878      	ldr	r0, [r7, #4]
 8004932:	f000 feb7 	bl	80056a4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	691b      	ldr	r3, [r3, #16]
 800493c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004940:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004944:	d10e      	bne.n	8004964 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	68db      	ldr	r3, [r3, #12]
 800494c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004950:	2b80      	cmp	r3, #128	; 0x80
 8004952:	d107      	bne.n	8004964 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800495c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800495e:	6878      	ldr	r0, [r7, #4]
 8004960:	f000 feaa 	bl	80056b8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	691b      	ldr	r3, [r3, #16]
 800496a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800496e:	2b40      	cmp	r3, #64	; 0x40
 8004970:	d10e      	bne.n	8004990 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	68db      	ldr	r3, [r3, #12]
 8004978:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800497c:	2b40      	cmp	r3, #64	; 0x40
 800497e:	d107      	bne.n	8004990 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004988:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800498a:	6878      	ldr	r0, [r7, #4]
 800498c:	f000 f9a8 	bl	8004ce0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	691b      	ldr	r3, [r3, #16]
 8004996:	f003 0320 	and.w	r3, r3, #32
 800499a:	2b20      	cmp	r3, #32
 800499c:	d10e      	bne.n	80049bc <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	68db      	ldr	r3, [r3, #12]
 80049a4:	f003 0320 	and.w	r3, r3, #32
 80049a8:	2b20      	cmp	r3, #32
 80049aa:	d107      	bne.n	80049bc <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f06f 0220 	mvn.w	r2, #32
 80049b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80049b6:	6878      	ldr	r0, [r7, #4]
 80049b8:	f000 fe6a 	bl	8005690 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	691b      	ldr	r3, [r3, #16]
 80049c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80049c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80049ca:	d10f      	bne.n	80049ec <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	68db      	ldr	r3, [r3, #12]
 80049d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80049d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80049da:	d107      	bne.n	80049ec <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 80049e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80049e6:	6878      	ldr	r0, [r7, #4]
 80049e8:	f000 fe70 	bl	80056cc <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	691b      	ldr	r3, [r3, #16]
 80049f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80049f6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80049fa:	d10f      	bne.n	8004a1c <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	68db      	ldr	r3, [r3, #12]
 8004a02:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a06:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004a0a:	d107      	bne.n	8004a1c <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8004a14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8004a16:	6878      	ldr	r0, [r7, #4]
 8004a18:	f000 fe62 	bl	80056e0 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	691b      	ldr	r3, [r3, #16]
 8004a22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a26:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a2a:	d10f      	bne.n	8004a4c <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	68db      	ldr	r3, [r3, #12]
 8004a32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a36:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a3a:	d107      	bne.n	8004a4c <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8004a44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8004a46:	6878      	ldr	r0, [r7, #4]
 8004a48:	f000 fe54 	bl	80056f4 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	691b      	ldr	r3, [r3, #16]
 8004a52:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004a56:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004a5a:	d10f      	bne.n	8004a7c <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	68db      	ldr	r3, [r3, #12]
 8004a62:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004a66:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004a6a:	d107      	bne.n	8004a7c <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8004a74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8004a76:	6878      	ldr	r0, [r7, #4]
 8004a78:	f000 fe46 	bl	8005708 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004a7c:	bf00      	nop
 8004a7e:	3708      	adds	r7, #8
 8004a80:	46bd      	mov	sp, r7
 8004a82:	bd80      	pop	{r7, pc}

08004a84 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b084      	sub	sp, #16
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	60f8      	str	r0, [r7, #12]
 8004a8c:	60b9      	str	r1, [r7, #8]
 8004a8e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a96:	2b01      	cmp	r3, #1
 8004a98:	d101      	bne.n	8004a9e <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004a9a:	2302      	movs	r3, #2
 8004a9c:	e0fd      	b.n	8004c9a <HAL_TIM_PWM_ConfigChannel+0x216>
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	2201      	movs	r2, #1
 8004aa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2b14      	cmp	r3, #20
 8004aaa:	f200 80f0 	bhi.w	8004c8e <HAL_TIM_PWM_ConfigChannel+0x20a>
 8004aae:	a201      	add	r2, pc, #4	; (adr r2, 8004ab4 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8004ab0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ab4:	08004b09 	.word	0x08004b09
 8004ab8:	08004c8f 	.word	0x08004c8f
 8004abc:	08004c8f 	.word	0x08004c8f
 8004ac0:	08004c8f 	.word	0x08004c8f
 8004ac4:	08004b49 	.word	0x08004b49
 8004ac8:	08004c8f 	.word	0x08004c8f
 8004acc:	08004c8f 	.word	0x08004c8f
 8004ad0:	08004c8f 	.word	0x08004c8f
 8004ad4:	08004b8b 	.word	0x08004b8b
 8004ad8:	08004c8f 	.word	0x08004c8f
 8004adc:	08004c8f 	.word	0x08004c8f
 8004ae0:	08004c8f 	.word	0x08004c8f
 8004ae4:	08004bcb 	.word	0x08004bcb
 8004ae8:	08004c8f 	.word	0x08004c8f
 8004aec:	08004c8f 	.word	0x08004c8f
 8004af0:	08004c8f 	.word	0x08004c8f
 8004af4:	08004c0d 	.word	0x08004c0d
 8004af8:	08004c8f 	.word	0x08004c8f
 8004afc:	08004c8f 	.word	0x08004c8f
 8004b00:	08004c8f 	.word	0x08004c8f
 8004b04:	08004c4d 	.word	0x08004c4d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	68b9      	ldr	r1, [r7, #8]
 8004b0e:	4618      	mov	r0, r3
 8004b10:	f000 f980 	bl	8004e14 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	699a      	ldr	r2, [r3, #24]
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f042 0208 	orr.w	r2, r2, #8
 8004b22:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	699a      	ldr	r2, [r3, #24]
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f022 0204 	bic.w	r2, r2, #4
 8004b32:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	6999      	ldr	r1, [r3, #24]
 8004b3a:	68bb      	ldr	r3, [r7, #8]
 8004b3c:	691a      	ldr	r2, [r3, #16]
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	430a      	orrs	r2, r1
 8004b44:	619a      	str	r2, [r3, #24]
      break;
 8004b46:	e0a3      	b.n	8004c90 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	68b9      	ldr	r1, [r7, #8]
 8004b4e:	4618      	mov	r0, r3
 8004b50:	f000 f9f0 	bl	8004f34 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	699a      	ldr	r2, [r3, #24]
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b62:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	699a      	ldr	r2, [r3, #24]
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b72:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	6999      	ldr	r1, [r3, #24]
 8004b7a:	68bb      	ldr	r3, [r7, #8]
 8004b7c:	691b      	ldr	r3, [r3, #16]
 8004b7e:	021a      	lsls	r2, r3, #8
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	430a      	orrs	r2, r1
 8004b86:	619a      	str	r2, [r3, #24]
      break;
 8004b88:	e082      	b.n	8004c90 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	68b9      	ldr	r1, [r7, #8]
 8004b90:	4618      	mov	r0, r3
 8004b92:	f000 fa59 	bl	8005048 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	69da      	ldr	r2, [r3, #28]
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f042 0208 	orr.w	r2, r2, #8
 8004ba4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	69da      	ldr	r2, [r3, #28]
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f022 0204 	bic.w	r2, r2, #4
 8004bb4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	69d9      	ldr	r1, [r3, #28]
 8004bbc:	68bb      	ldr	r3, [r7, #8]
 8004bbe:	691a      	ldr	r2, [r3, #16]
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	430a      	orrs	r2, r1
 8004bc6:	61da      	str	r2, [r3, #28]
      break;
 8004bc8:	e062      	b.n	8004c90 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	68b9      	ldr	r1, [r7, #8]
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	f000 fac1 	bl	8005158 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	69da      	ldr	r2, [r3, #28]
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004be4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	69da      	ldr	r2, [r3, #28]
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004bf4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	69d9      	ldr	r1, [r3, #28]
 8004bfc:	68bb      	ldr	r3, [r7, #8]
 8004bfe:	691b      	ldr	r3, [r3, #16]
 8004c00:	021a      	lsls	r2, r3, #8
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	430a      	orrs	r2, r1
 8004c08:	61da      	str	r2, [r3, #28]
      break;
 8004c0a:	e041      	b.n	8004c90 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	68b9      	ldr	r1, [r7, #8]
 8004c12:	4618      	mov	r0, r3
 8004c14:	f000 fb2a 	bl	800526c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f042 0208 	orr.w	r2, r2, #8
 8004c26:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f022 0204 	bic.w	r2, r2, #4
 8004c36:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004c3e:	68bb      	ldr	r3, [r7, #8]
 8004c40:	691a      	ldr	r2, [r3, #16]
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	430a      	orrs	r2, r1
 8004c48:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8004c4a:	e021      	b.n	8004c90 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	68b9      	ldr	r1, [r7, #8]
 8004c52:	4618      	mov	r0, r3
 8004c54:	f000 fb6e 	bl	8005334 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c66:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c76:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004c7e:	68bb      	ldr	r3, [r7, #8]
 8004c80:	691b      	ldr	r3, [r3, #16]
 8004c82:	021a      	lsls	r2, r3, #8
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	430a      	orrs	r2, r1
 8004c8a:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8004c8c:	e000      	b.n	8004c90 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8004c8e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	2200      	movs	r2, #0
 8004c94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004c98:	2300      	movs	r3, #0
}
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	3710      	adds	r7, #16
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	bd80      	pop	{r7, pc}
 8004ca2:	bf00      	nop

08004ca4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004ca4:	b480      	push	{r7}
 8004ca6:	b083      	sub	sp, #12
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004cac:	bf00      	nop
 8004cae:	370c      	adds	r7, #12
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb6:	4770      	bx	lr

08004cb8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004cb8:	b480      	push	{r7}
 8004cba:	b083      	sub	sp, #12
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004cc0:	bf00      	nop
 8004cc2:	370c      	adds	r7, #12
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cca:	4770      	bx	lr

08004ccc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004ccc:	b480      	push	{r7}
 8004cce:	b083      	sub	sp, #12
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004cd4:	bf00      	nop
 8004cd6:	370c      	adds	r7, #12
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cde:	4770      	bx	lr

08004ce0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004ce0:	b480      	push	{r7}
 8004ce2:	b083      	sub	sp, #12
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004ce8:	bf00      	nop
 8004cea:	370c      	adds	r7, #12
 8004cec:	46bd      	mov	sp, r7
 8004cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf2:	4770      	bx	lr

08004cf4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004cf4:	b480      	push	{r7}
 8004cf6:	b085      	sub	sp, #20
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
 8004cfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	4a3c      	ldr	r2, [pc, #240]	; (8004df8 <TIM_Base_SetConfig+0x104>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d00f      	beq.n	8004d2c <TIM_Base_SetConfig+0x38>
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d12:	d00b      	beq.n	8004d2c <TIM_Base_SetConfig+0x38>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	4a39      	ldr	r2, [pc, #228]	; (8004dfc <TIM_Base_SetConfig+0x108>)
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d007      	beq.n	8004d2c <TIM_Base_SetConfig+0x38>
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	4a38      	ldr	r2, [pc, #224]	; (8004e00 <TIM_Base_SetConfig+0x10c>)
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d003      	beq.n	8004d2c <TIM_Base_SetConfig+0x38>
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	4a37      	ldr	r2, [pc, #220]	; (8004e04 <TIM_Base_SetConfig+0x110>)
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d108      	bne.n	8004d3e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d32:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	685b      	ldr	r3, [r3, #4]
 8004d38:	68fa      	ldr	r2, [r7, #12]
 8004d3a:	4313      	orrs	r3, r2
 8004d3c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	4a2d      	ldr	r2, [pc, #180]	; (8004df8 <TIM_Base_SetConfig+0x104>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d01b      	beq.n	8004d7e <TIM_Base_SetConfig+0x8a>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d4c:	d017      	beq.n	8004d7e <TIM_Base_SetConfig+0x8a>
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	4a2a      	ldr	r2, [pc, #168]	; (8004dfc <TIM_Base_SetConfig+0x108>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d013      	beq.n	8004d7e <TIM_Base_SetConfig+0x8a>
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	4a29      	ldr	r2, [pc, #164]	; (8004e00 <TIM_Base_SetConfig+0x10c>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d00f      	beq.n	8004d7e <TIM_Base_SetConfig+0x8a>
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	4a28      	ldr	r2, [pc, #160]	; (8004e04 <TIM_Base_SetConfig+0x110>)
 8004d62:	4293      	cmp	r3, r2
 8004d64:	d00b      	beq.n	8004d7e <TIM_Base_SetConfig+0x8a>
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	4a27      	ldr	r2, [pc, #156]	; (8004e08 <TIM_Base_SetConfig+0x114>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d007      	beq.n	8004d7e <TIM_Base_SetConfig+0x8a>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	4a26      	ldr	r2, [pc, #152]	; (8004e0c <TIM_Base_SetConfig+0x118>)
 8004d72:	4293      	cmp	r3, r2
 8004d74:	d003      	beq.n	8004d7e <TIM_Base_SetConfig+0x8a>
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	4a25      	ldr	r2, [pc, #148]	; (8004e10 <TIM_Base_SetConfig+0x11c>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d108      	bne.n	8004d90 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d84:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	68db      	ldr	r3, [r3, #12]
 8004d8a:	68fa      	ldr	r2, [r7, #12]
 8004d8c:	4313      	orrs	r3, r2
 8004d8e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	695b      	ldr	r3, [r3, #20]
 8004d9a:	4313      	orrs	r3, r2
 8004d9c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	68fa      	ldr	r2, [r7, #12]
 8004da2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	689a      	ldr	r2, [r3, #8]
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	681a      	ldr	r2, [r3, #0]
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	4a10      	ldr	r2, [pc, #64]	; (8004df8 <TIM_Base_SetConfig+0x104>)
 8004db8:	4293      	cmp	r3, r2
 8004dba:	d00f      	beq.n	8004ddc <TIM_Base_SetConfig+0xe8>
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	4a11      	ldr	r2, [pc, #68]	; (8004e04 <TIM_Base_SetConfig+0x110>)
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d00b      	beq.n	8004ddc <TIM_Base_SetConfig+0xe8>
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	4a10      	ldr	r2, [pc, #64]	; (8004e08 <TIM_Base_SetConfig+0x114>)
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d007      	beq.n	8004ddc <TIM_Base_SetConfig+0xe8>
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	4a0f      	ldr	r2, [pc, #60]	; (8004e0c <TIM_Base_SetConfig+0x118>)
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	d003      	beq.n	8004ddc <TIM_Base_SetConfig+0xe8>
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	4a0e      	ldr	r2, [pc, #56]	; (8004e10 <TIM_Base_SetConfig+0x11c>)
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d103      	bne.n	8004de4 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	691a      	ldr	r2, [r3, #16]
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2201      	movs	r2, #1
 8004de8:	615a      	str	r2, [r3, #20]
}
 8004dea:	bf00      	nop
 8004dec:	3714      	adds	r7, #20
 8004dee:	46bd      	mov	sp, r7
 8004df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df4:	4770      	bx	lr
 8004df6:	bf00      	nop
 8004df8:	40012c00 	.word	0x40012c00
 8004dfc:	40000400 	.word	0x40000400
 8004e00:	40000800 	.word	0x40000800
 8004e04:	40013400 	.word	0x40013400
 8004e08:	40014000 	.word	0x40014000
 8004e0c:	40014400 	.word	0x40014400
 8004e10:	40014800 	.word	0x40014800

08004e14 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004e14:	b480      	push	{r7}
 8004e16:	b087      	sub	sp, #28
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
 8004e1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6a1b      	ldr	r3, [r3, #32]
 8004e22:	f023 0201 	bic.w	r2, r3, #1
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6a1b      	ldr	r3, [r3, #32]
 8004e2e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	685b      	ldr	r3, [r3, #4]
 8004e34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	699b      	ldr	r3, [r3, #24]
 8004e3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	f023 0303 	bic.w	r3, r3, #3
 8004e4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	68fa      	ldr	r2, [r7, #12]
 8004e56:	4313      	orrs	r3, r2
 8004e58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004e5a:	697b      	ldr	r3, [r7, #20]
 8004e5c:	f023 0302 	bic.w	r3, r3, #2
 8004e60:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	689b      	ldr	r3, [r3, #8]
 8004e66:	697a      	ldr	r2, [r7, #20]
 8004e68:	4313      	orrs	r3, r2
 8004e6a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	4a2c      	ldr	r2, [pc, #176]	; (8004f20 <TIM_OC1_SetConfig+0x10c>)
 8004e70:	4293      	cmp	r3, r2
 8004e72:	d00f      	beq.n	8004e94 <TIM_OC1_SetConfig+0x80>
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	4a2b      	ldr	r2, [pc, #172]	; (8004f24 <TIM_OC1_SetConfig+0x110>)
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d00b      	beq.n	8004e94 <TIM_OC1_SetConfig+0x80>
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	4a2a      	ldr	r2, [pc, #168]	; (8004f28 <TIM_OC1_SetConfig+0x114>)
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d007      	beq.n	8004e94 <TIM_OC1_SetConfig+0x80>
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	4a29      	ldr	r2, [pc, #164]	; (8004f2c <TIM_OC1_SetConfig+0x118>)
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d003      	beq.n	8004e94 <TIM_OC1_SetConfig+0x80>
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	4a28      	ldr	r2, [pc, #160]	; (8004f30 <TIM_OC1_SetConfig+0x11c>)
 8004e90:	4293      	cmp	r3, r2
 8004e92:	d10c      	bne.n	8004eae <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004e94:	697b      	ldr	r3, [r7, #20]
 8004e96:	f023 0308 	bic.w	r3, r3, #8
 8004e9a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	68db      	ldr	r3, [r3, #12]
 8004ea0:	697a      	ldr	r2, [r7, #20]
 8004ea2:	4313      	orrs	r3, r2
 8004ea4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004ea6:	697b      	ldr	r3, [r7, #20]
 8004ea8:	f023 0304 	bic.w	r3, r3, #4
 8004eac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	4a1b      	ldr	r2, [pc, #108]	; (8004f20 <TIM_OC1_SetConfig+0x10c>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d00f      	beq.n	8004ed6 <TIM_OC1_SetConfig+0xc2>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	4a1a      	ldr	r2, [pc, #104]	; (8004f24 <TIM_OC1_SetConfig+0x110>)
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d00b      	beq.n	8004ed6 <TIM_OC1_SetConfig+0xc2>
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	4a19      	ldr	r2, [pc, #100]	; (8004f28 <TIM_OC1_SetConfig+0x114>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d007      	beq.n	8004ed6 <TIM_OC1_SetConfig+0xc2>
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	4a18      	ldr	r2, [pc, #96]	; (8004f2c <TIM_OC1_SetConfig+0x118>)
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d003      	beq.n	8004ed6 <TIM_OC1_SetConfig+0xc2>
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	4a17      	ldr	r2, [pc, #92]	; (8004f30 <TIM_OC1_SetConfig+0x11c>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d111      	bne.n	8004efa <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004ed6:	693b      	ldr	r3, [r7, #16]
 8004ed8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004edc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004ede:	693b      	ldr	r3, [r7, #16]
 8004ee0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004ee4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	695b      	ldr	r3, [r3, #20]
 8004eea:	693a      	ldr	r2, [r7, #16]
 8004eec:	4313      	orrs	r3, r2
 8004eee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	699b      	ldr	r3, [r3, #24]
 8004ef4:	693a      	ldr	r2, [r7, #16]
 8004ef6:	4313      	orrs	r3, r2
 8004ef8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	693a      	ldr	r2, [r7, #16]
 8004efe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	68fa      	ldr	r2, [r7, #12]
 8004f04:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	685a      	ldr	r2, [r3, #4]
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	697a      	ldr	r2, [r7, #20]
 8004f12:	621a      	str	r2, [r3, #32]
}
 8004f14:	bf00      	nop
 8004f16:	371c      	adds	r7, #28
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1e:	4770      	bx	lr
 8004f20:	40012c00 	.word	0x40012c00
 8004f24:	40013400 	.word	0x40013400
 8004f28:	40014000 	.word	0x40014000
 8004f2c:	40014400 	.word	0x40014400
 8004f30:	40014800 	.word	0x40014800

08004f34 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004f34:	b480      	push	{r7}
 8004f36:	b087      	sub	sp, #28
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
 8004f3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6a1b      	ldr	r3, [r3, #32]
 8004f42:	f023 0210 	bic.w	r2, r3, #16
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6a1b      	ldr	r3, [r3, #32]
 8004f4e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	685b      	ldr	r3, [r3, #4]
 8004f54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	699b      	ldr	r3, [r3, #24]
 8004f5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004f62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f6e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	021b      	lsls	r3, r3, #8
 8004f76:	68fa      	ldr	r2, [r7, #12]
 8004f78:	4313      	orrs	r3, r2
 8004f7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004f7c:	697b      	ldr	r3, [r7, #20]
 8004f7e:	f023 0320 	bic.w	r3, r3, #32
 8004f82:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	689b      	ldr	r3, [r3, #8]
 8004f88:	011b      	lsls	r3, r3, #4
 8004f8a:	697a      	ldr	r2, [r7, #20]
 8004f8c:	4313      	orrs	r3, r2
 8004f8e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	4a28      	ldr	r2, [pc, #160]	; (8005034 <TIM_OC2_SetConfig+0x100>)
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d003      	beq.n	8004fa0 <TIM_OC2_SetConfig+0x6c>
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	4a27      	ldr	r2, [pc, #156]	; (8005038 <TIM_OC2_SetConfig+0x104>)
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d10d      	bne.n	8004fbc <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004fa0:	697b      	ldr	r3, [r7, #20]
 8004fa2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004fa6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	68db      	ldr	r3, [r3, #12]
 8004fac:	011b      	lsls	r3, r3, #4
 8004fae:	697a      	ldr	r2, [r7, #20]
 8004fb0:	4313      	orrs	r3, r2
 8004fb2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004fb4:	697b      	ldr	r3, [r7, #20]
 8004fb6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004fba:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	4a1d      	ldr	r2, [pc, #116]	; (8005034 <TIM_OC2_SetConfig+0x100>)
 8004fc0:	4293      	cmp	r3, r2
 8004fc2:	d00f      	beq.n	8004fe4 <TIM_OC2_SetConfig+0xb0>
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	4a1c      	ldr	r2, [pc, #112]	; (8005038 <TIM_OC2_SetConfig+0x104>)
 8004fc8:	4293      	cmp	r3, r2
 8004fca:	d00b      	beq.n	8004fe4 <TIM_OC2_SetConfig+0xb0>
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	4a1b      	ldr	r2, [pc, #108]	; (800503c <TIM_OC2_SetConfig+0x108>)
 8004fd0:	4293      	cmp	r3, r2
 8004fd2:	d007      	beq.n	8004fe4 <TIM_OC2_SetConfig+0xb0>
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	4a1a      	ldr	r2, [pc, #104]	; (8005040 <TIM_OC2_SetConfig+0x10c>)
 8004fd8:	4293      	cmp	r3, r2
 8004fda:	d003      	beq.n	8004fe4 <TIM_OC2_SetConfig+0xb0>
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	4a19      	ldr	r2, [pc, #100]	; (8005044 <TIM_OC2_SetConfig+0x110>)
 8004fe0:	4293      	cmp	r3, r2
 8004fe2:	d113      	bne.n	800500c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004fe4:	693b      	ldr	r3, [r7, #16]
 8004fe6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004fea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004fec:	693b      	ldr	r3, [r7, #16]
 8004fee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004ff2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	695b      	ldr	r3, [r3, #20]
 8004ff8:	009b      	lsls	r3, r3, #2
 8004ffa:	693a      	ldr	r2, [r7, #16]
 8004ffc:	4313      	orrs	r3, r2
 8004ffe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	699b      	ldr	r3, [r3, #24]
 8005004:	009b      	lsls	r3, r3, #2
 8005006:	693a      	ldr	r2, [r7, #16]
 8005008:	4313      	orrs	r3, r2
 800500a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	693a      	ldr	r2, [r7, #16]
 8005010:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	68fa      	ldr	r2, [r7, #12]
 8005016:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	685a      	ldr	r2, [r3, #4]
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	697a      	ldr	r2, [r7, #20]
 8005024:	621a      	str	r2, [r3, #32]
}
 8005026:	bf00      	nop
 8005028:	371c      	adds	r7, #28
 800502a:	46bd      	mov	sp, r7
 800502c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005030:	4770      	bx	lr
 8005032:	bf00      	nop
 8005034:	40012c00 	.word	0x40012c00
 8005038:	40013400 	.word	0x40013400
 800503c:	40014000 	.word	0x40014000
 8005040:	40014400 	.word	0x40014400
 8005044:	40014800 	.word	0x40014800

08005048 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005048:	b480      	push	{r7}
 800504a:	b087      	sub	sp, #28
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
 8005050:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6a1b      	ldr	r3, [r3, #32]
 8005056:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6a1b      	ldr	r3, [r3, #32]
 8005062:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	685b      	ldr	r3, [r3, #4]
 8005068:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	69db      	ldr	r3, [r3, #28]
 800506e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005076:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800507a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	f023 0303 	bic.w	r3, r3, #3
 8005082:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	68fa      	ldr	r2, [r7, #12]
 800508a:	4313      	orrs	r3, r2
 800508c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800508e:	697b      	ldr	r3, [r7, #20]
 8005090:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005094:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	689b      	ldr	r3, [r3, #8]
 800509a:	021b      	lsls	r3, r3, #8
 800509c:	697a      	ldr	r2, [r7, #20]
 800509e:	4313      	orrs	r3, r2
 80050a0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	4a27      	ldr	r2, [pc, #156]	; (8005144 <TIM_OC3_SetConfig+0xfc>)
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d003      	beq.n	80050b2 <TIM_OC3_SetConfig+0x6a>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	4a26      	ldr	r2, [pc, #152]	; (8005148 <TIM_OC3_SetConfig+0x100>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d10d      	bne.n	80050ce <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80050b2:	697b      	ldr	r3, [r7, #20]
 80050b4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80050b8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	68db      	ldr	r3, [r3, #12]
 80050be:	021b      	lsls	r3, r3, #8
 80050c0:	697a      	ldr	r2, [r7, #20]
 80050c2:	4313      	orrs	r3, r2
 80050c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80050c6:	697b      	ldr	r3, [r7, #20]
 80050c8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80050cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	4a1c      	ldr	r2, [pc, #112]	; (8005144 <TIM_OC3_SetConfig+0xfc>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d00f      	beq.n	80050f6 <TIM_OC3_SetConfig+0xae>
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	4a1b      	ldr	r2, [pc, #108]	; (8005148 <TIM_OC3_SetConfig+0x100>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d00b      	beq.n	80050f6 <TIM_OC3_SetConfig+0xae>
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	4a1a      	ldr	r2, [pc, #104]	; (800514c <TIM_OC3_SetConfig+0x104>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d007      	beq.n	80050f6 <TIM_OC3_SetConfig+0xae>
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	4a19      	ldr	r2, [pc, #100]	; (8005150 <TIM_OC3_SetConfig+0x108>)
 80050ea:	4293      	cmp	r3, r2
 80050ec:	d003      	beq.n	80050f6 <TIM_OC3_SetConfig+0xae>
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	4a18      	ldr	r2, [pc, #96]	; (8005154 <TIM_OC3_SetConfig+0x10c>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d113      	bne.n	800511e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80050f6:	693b      	ldr	r3, [r7, #16]
 80050f8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80050fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80050fe:	693b      	ldr	r3, [r7, #16]
 8005100:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005104:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	695b      	ldr	r3, [r3, #20]
 800510a:	011b      	lsls	r3, r3, #4
 800510c:	693a      	ldr	r2, [r7, #16]
 800510e:	4313      	orrs	r3, r2
 8005110:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	699b      	ldr	r3, [r3, #24]
 8005116:	011b      	lsls	r3, r3, #4
 8005118:	693a      	ldr	r2, [r7, #16]
 800511a:	4313      	orrs	r3, r2
 800511c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	693a      	ldr	r2, [r7, #16]
 8005122:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	68fa      	ldr	r2, [r7, #12]
 8005128:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	685a      	ldr	r2, [r3, #4]
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	697a      	ldr	r2, [r7, #20]
 8005136:	621a      	str	r2, [r3, #32]
}
 8005138:	bf00      	nop
 800513a:	371c      	adds	r7, #28
 800513c:	46bd      	mov	sp, r7
 800513e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005142:	4770      	bx	lr
 8005144:	40012c00 	.word	0x40012c00
 8005148:	40013400 	.word	0x40013400
 800514c:	40014000 	.word	0x40014000
 8005150:	40014400 	.word	0x40014400
 8005154:	40014800 	.word	0x40014800

08005158 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005158:	b480      	push	{r7}
 800515a:	b087      	sub	sp, #28
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
 8005160:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6a1b      	ldr	r3, [r3, #32]
 8005166:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6a1b      	ldr	r3, [r3, #32]
 8005172:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	685b      	ldr	r3, [r3, #4]
 8005178:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	69db      	ldr	r3, [r3, #28]
 800517e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005186:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800518a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005192:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	021b      	lsls	r3, r3, #8
 800519a:	68fa      	ldr	r2, [r7, #12]
 800519c:	4313      	orrs	r3, r2
 800519e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80051a0:	697b      	ldr	r3, [r7, #20]
 80051a2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80051a6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	689b      	ldr	r3, [r3, #8]
 80051ac:	031b      	lsls	r3, r3, #12
 80051ae:	697a      	ldr	r2, [r7, #20]
 80051b0:	4313      	orrs	r3, r2
 80051b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	4a28      	ldr	r2, [pc, #160]	; (8005258 <TIM_OC4_SetConfig+0x100>)
 80051b8:	4293      	cmp	r3, r2
 80051ba:	d003      	beq.n	80051c4 <TIM_OC4_SetConfig+0x6c>
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	4a27      	ldr	r2, [pc, #156]	; (800525c <TIM_OC4_SetConfig+0x104>)
 80051c0:	4293      	cmp	r3, r2
 80051c2:	d10d      	bne.n	80051e0 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80051c4:	697b      	ldr	r3, [r7, #20]
 80051c6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80051ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	68db      	ldr	r3, [r3, #12]
 80051d0:	031b      	lsls	r3, r3, #12
 80051d2:	697a      	ldr	r2, [r7, #20]
 80051d4:	4313      	orrs	r3, r2
 80051d6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80051d8:	697b      	ldr	r3, [r7, #20]
 80051da:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80051de:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	4a1d      	ldr	r2, [pc, #116]	; (8005258 <TIM_OC4_SetConfig+0x100>)
 80051e4:	4293      	cmp	r3, r2
 80051e6:	d00f      	beq.n	8005208 <TIM_OC4_SetConfig+0xb0>
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	4a1c      	ldr	r2, [pc, #112]	; (800525c <TIM_OC4_SetConfig+0x104>)
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d00b      	beq.n	8005208 <TIM_OC4_SetConfig+0xb0>
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	4a1b      	ldr	r2, [pc, #108]	; (8005260 <TIM_OC4_SetConfig+0x108>)
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d007      	beq.n	8005208 <TIM_OC4_SetConfig+0xb0>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	4a1a      	ldr	r2, [pc, #104]	; (8005264 <TIM_OC4_SetConfig+0x10c>)
 80051fc:	4293      	cmp	r3, r2
 80051fe:	d003      	beq.n	8005208 <TIM_OC4_SetConfig+0xb0>
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	4a19      	ldr	r2, [pc, #100]	; (8005268 <TIM_OC4_SetConfig+0x110>)
 8005204:	4293      	cmp	r3, r2
 8005206:	d113      	bne.n	8005230 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005208:	693b      	ldr	r3, [r7, #16]
 800520a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800520e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8005210:	693b      	ldr	r3, [r7, #16]
 8005212:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005216:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	695b      	ldr	r3, [r3, #20]
 800521c:	019b      	lsls	r3, r3, #6
 800521e:	693a      	ldr	r2, [r7, #16]
 8005220:	4313      	orrs	r3, r2
 8005222:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	699b      	ldr	r3, [r3, #24]
 8005228:	019b      	lsls	r3, r3, #6
 800522a:	693a      	ldr	r2, [r7, #16]
 800522c:	4313      	orrs	r3, r2
 800522e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	693a      	ldr	r2, [r7, #16]
 8005234:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	68fa      	ldr	r2, [r7, #12]
 800523a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	685a      	ldr	r2, [r3, #4]
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	697a      	ldr	r2, [r7, #20]
 8005248:	621a      	str	r2, [r3, #32]
}
 800524a:	bf00      	nop
 800524c:	371c      	adds	r7, #28
 800524e:	46bd      	mov	sp, r7
 8005250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005254:	4770      	bx	lr
 8005256:	bf00      	nop
 8005258:	40012c00 	.word	0x40012c00
 800525c:	40013400 	.word	0x40013400
 8005260:	40014000 	.word	0x40014000
 8005264:	40014400 	.word	0x40014400
 8005268:	40014800 	.word	0x40014800

0800526c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800526c:	b480      	push	{r7}
 800526e:	b087      	sub	sp, #28
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
 8005274:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6a1b      	ldr	r3, [r3, #32]
 800527a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6a1b      	ldr	r3, [r3, #32]
 8005286:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	685b      	ldr	r3, [r3, #4]
 800528c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005292:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800529a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800529e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	68fa      	ldr	r2, [r7, #12]
 80052a6:	4313      	orrs	r3, r2
 80052a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80052aa:	693b      	ldr	r3, [r7, #16]
 80052ac:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80052b0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	689b      	ldr	r3, [r3, #8]
 80052b6:	041b      	lsls	r3, r3, #16
 80052b8:	693a      	ldr	r2, [r7, #16]
 80052ba:	4313      	orrs	r3, r2
 80052bc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	4a17      	ldr	r2, [pc, #92]	; (8005320 <TIM_OC5_SetConfig+0xb4>)
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d00f      	beq.n	80052e6 <TIM_OC5_SetConfig+0x7a>
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	4a16      	ldr	r2, [pc, #88]	; (8005324 <TIM_OC5_SetConfig+0xb8>)
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d00b      	beq.n	80052e6 <TIM_OC5_SetConfig+0x7a>
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	4a15      	ldr	r2, [pc, #84]	; (8005328 <TIM_OC5_SetConfig+0xbc>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d007      	beq.n	80052e6 <TIM_OC5_SetConfig+0x7a>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	4a14      	ldr	r2, [pc, #80]	; (800532c <TIM_OC5_SetConfig+0xc0>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	d003      	beq.n	80052e6 <TIM_OC5_SetConfig+0x7a>
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	4a13      	ldr	r2, [pc, #76]	; (8005330 <TIM_OC5_SetConfig+0xc4>)
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d109      	bne.n	80052fa <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80052e6:	697b      	ldr	r3, [r7, #20]
 80052e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80052ec:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	695b      	ldr	r3, [r3, #20]
 80052f2:	021b      	lsls	r3, r3, #8
 80052f4:	697a      	ldr	r2, [r7, #20]
 80052f6:	4313      	orrs	r3, r2
 80052f8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	697a      	ldr	r2, [r7, #20]
 80052fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	68fa      	ldr	r2, [r7, #12]
 8005304:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	685a      	ldr	r2, [r3, #4]
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	693a      	ldr	r2, [r7, #16]
 8005312:	621a      	str	r2, [r3, #32]
}
 8005314:	bf00      	nop
 8005316:	371c      	adds	r7, #28
 8005318:	46bd      	mov	sp, r7
 800531a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531e:	4770      	bx	lr
 8005320:	40012c00 	.word	0x40012c00
 8005324:	40013400 	.word	0x40013400
 8005328:	40014000 	.word	0x40014000
 800532c:	40014400 	.word	0x40014400
 8005330:	40014800 	.word	0x40014800

08005334 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005334:	b480      	push	{r7}
 8005336:	b087      	sub	sp, #28
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
 800533c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6a1b      	ldr	r3, [r3, #32]
 8005342:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6a1b      	ldr	r3, [r3, #32]
 800534e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	685b      	ldr	r3, [r3, #4]
 8005354:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800535a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005362:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005366:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	021b      	lsls	r3, r3, #8
 800536e:	68fa      	ldr	r2, [r7, #12]
 8005370:	4313      	orrs	r3, r2
 8005372:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005374:	693b      	ldr	r3, [r7, #16]
 8005376:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800537a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	689b      	ldr	r3, [r3, #8]
 8005380:	051b      	lsls	r3, r3, #20
 8005382:	693a      	ldr	r2, [r7, #16]
 8005384:	4313      	orrs	r3, r2
 8005386:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	4a18      	ldr	r2, [pc, #96]	; (80053ec <TIM_OC6_SetConfig+0xb8>)
 800538c:	4293      	cmp	r3, r2
 800538e:	d00f      	beq.n	80053b0 <TIM_OC6_SetConfig+0x7c>
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	4a17      	ldr	r2, [pc, #92]	; (80053f0 <TIM_OC6_SetConfig+0xbc>)
 8005394:	4293      	cmp	r3, r2
 8005396:	d00b      	beq.n	80053b0 <TIM_OC6_SetConfig+0x7c>
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	4a16      	ldr	r2, [pc, #88]	; (80053f4 <TIM_OC6_SetConfig+0xc0>)
 800539c:	4293      	cmp	r3, r2
 800539e:	d007      	beq.n	80053b0 <TIM_OC6_SetConfig+0x7c>
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	4a15      	ldr	r2, [pc, #84]	; (80053f8 <TIM_OC6_SetConfig+0xc4>)
 80053a4:	4293      	cmp	r3, r2
 80053a6:	d003      	beq.n	80053b0 <TIM_OC6_SetConfig+0x7c>
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	4a14      	ldr	r2, [pc, #80]	; (80053fc <TIM_OC6_SetConfig+0xc8>)
 80053ac:	4293      	cmp	r3, r2
 80053ae:	d109      	bne.n	80053c4 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80053b0:	697b      	ldr	r3, [r7, #20]
 80053b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80053b6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	695b      	ldr	r3, [r3, #20]
 80053bc:	029b      	lsls	r3, r3, #10
 80053be:	697a      	ldr	r2, [r7, #20]
 80053c0:	4313      	orrs	r3, r2
 80053c2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	697a      	ldr	r2, [r7, #20]
 80053c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	68fa      	ldr	r2, [r7, #12]
 80053ce:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	685a      	ldr	r2, [r3, #4]
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	693a      	ldr	r2, [r7, #16]
 80053dc:	621a      	str	r2, [r3, #32]
}
 80053de:	bf00      	nop
 80053e0:	371c      	adds	r7, #28
 80053e2:	46bd      	mov	sp, r7
 80053e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e8:	4770      	bx	lr
 80053ea:	bf00      	nop
 80053ec:	40012c00 	.word	0x40012c00
 80053f0:	40013400 	.word	0x40013400
 80053f4:	40014000 	.word	0x40014000
 80053f8:	40014400 	.word	0x40014400
 80053fc:	40014800 	.word	0x40014800

08005400 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005400:	b480      	push	{r7}
 8005402:	b087      	sub	sp, #28
 8005404:	af00      	add	r7, sp, #0
 8005406:	60f8      	str	r0, [r7, #12]
 8005408:	60b9      	str	r1, [r7, #8]
 800540a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800540c:	68bb      	ldr	r3, [r7, #8]
 800540e:	f003 031f 	and.w	r3, r3, #31
 8005412:	2201      	movs	r2, #1
 8005414:	fa02 f303 	lsl.w	r3, r2, r3
 8005418:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	6a1a      	ldr	r2, [r3, #32]
 800541e:	697b      	ldr	r3, [r7, #20]
 8005420:	43db      	mvns	r3, r3
 8005422:	401a      	ands	r2, r3
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	6a1a      	ldr	r2, [r3, #32]
 800542c:	68bb      	ldr	r3, [r7, #8]
 800542e:	f003 031f 	and.w	r3, r3, #31
 8005432:	6879      	ldr	r1, [r7, #4]
 8005434:	fa01 f303 	lsl.w	r3, r1, r3
 8005438:	431a      	orrs	r2, r3
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	621a      	str	r2, [r3, #32]
}
 800543e:	bf00      	nop
 8005440:	371c      	adds	r7, #28
 8005442:	46bd      	mov	sp, r7
 8005444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005448:	4770      	bx	lr
	...

0800544c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800544c:	b480      	push	{r7}
 800544e:	b085      	sub	sp, #20
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
 8005454:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800545c:	2b01      	cmp	r3, #1
 800545e:	d101      	bne.n	8005464 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005460:	2302      	movs	r3, #2
 8005462:	e065      	b.n	8005530 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2201      	movs	r2, #1
 8005468:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2202      	movs	r2, #2
 8005470:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	685b      	ldr	r3, [r3, #4]
 800547a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	689b      	ldr	r3, [r3, #8]
 8005482:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	4a2c      	ldr	r2, [pc, #176]	; (800553c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d004      	beq.n	8005498 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	4a2b      	ldr	r2, [pc, #172]	; (8005540 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005494:	4293      	cmp	r3, r2
 8005496:	d108      	bne.n	80054aa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800549e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	685b      	ldr	r3, [r3, #4]
 80054a4:	68fa      	ldr	r2, [r7, #12]
 80054a6:	4313      	orrs	r3, r2
 80054a8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80054b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054b4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	68fa      	ldr	r2, [r7, #12]
 80054bc:	4313      	orrs	r3, r2
 80054be:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	68fa      	ldr	r2, [r7, #12]
 80054c6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	4a1b      	ldr	r2, [pc, #108]	; (800553c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d018      	beq.n	8005504 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054da:	d013      	beq.n	8005504 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	4a18      	ldr	r2, [pc, #96]	; (8005544 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d00e      	beq.n	8005504 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	4a17      	ldr	r2, [pc, #92]	; (8005548 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d009      	beq.n	8005504 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	4a12      	ldr	r2, [pc, #72]	; (8005540 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d004      	beq.n	8005504 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	4a13      	ldr	r2, [pc, #76]	; (800554c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005500:	4293      	cmp	r3, r2
 8005502:	d10c      	bne.n	800551e <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005504:	68bb      	ldr	r3, [r7, #8]
 8005506:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800550a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	689b      	ldr	r3, [r3, #8]
 8005510:	68ba      	ldr	r2, [r7, #8]
 8005512:	4313      	orrs	r3, r2
 8005514:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	68ba      	ldr	r2, [r7, #8]
 800551c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	2201      	movs	r2, #1
 8005522:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2200      	movs	r2, #0
 800552a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800552e:	2300      	movs	r3, #0
}
 8005530:	4618      	mov	r0, r3
 8005532:	3714      	adds	r7, #20
 8005534:	46bd      	mov	sp, r7
 8005536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553a:	4770      	bx	lr
 800553c:	40012c00 	.word	0x40012c00
 8005540:	40013400 	.word	0x40013400
 8005544:	40000400 	.word	0x40000400
 8005548:	40000800 	.word	0x40000800
 800554c:	40014000 	.word	0x40014000

08005550 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005550:	b480      	push	{r7}
 8005552:	b085      	sub	sp, #20
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
 8005558:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800555a:	2300      	movs	r3, #0
 800555c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005564:	2b01      	cmp	r3, #1
 8005566:	d101      	bne.n	800556c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005568:	2302      	movs	r3, #2
 800556a:	e087      	b.n	800567c <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2201      	movs	r2, #1
 8005570:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	68db      	ldr	r3, [r3, #12]
 800557e:	4313      	orrs	r3, r2
 8005580:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	689b      	ldr	r3, [r3, #8]
 800558c:	4313      	orrs	r3, r2
 800558e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	685b      	ldr	r3, [r3, #4]
 800559a:	4313      	orrs	r3, r2
 800559c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	4313      	orrs	r3, r2
 80055aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	691b      	ldr	r3, [r3, #16]
 80055b6:	4313      	orrs	r3, r2
 80055b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	695b      	ldr	r3, [r3, #20]
 80055c4:	4313      	orrs	r3, r2
 80055c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055d2:	4313      	orrs	r3, r2
 80055d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80055dc:	683b      	ldr	r3, [r7, #0]
 80055de:	699b      	ldr	r3, [r3, #24]
 80055e0:	041b      	lsls	r3, r3, #16
 80055e2:	4313      	orrs	r3, r2
 80055e4:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	4a27      	ldr	r2, [pc, #156]	; (8005688 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d004      	beq.n	80055fa <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	4a25      	ldr	r2, [pc, #148]	; (800568c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d106      	bne.n	8005608 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	69db      	ldr	r3, [r3, #28]
 8005604:	4313      	orrs	r3, r2
 8005606:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	4a1e      	ldr	r2, [pc, #120]	; (8005688 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800560e:	4293      	cmp	r3, r2
 8005610:	d004      	beq.n	800561c <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	4a1d      	ldr	r2, [pc, #116]	; (800568c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8005618:	4293      	cmp	r3, r2
 800561a:	d126      	bne.n	800566a <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005626:	051b      	lsls	r3, r3, #20
 8005628:	4313      	orrs	r3, r2
 800562a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	6a1b      	ldr	r3, [r3, #32]
 8005636:	4313      	orrs	r3, r2
 8005638:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005644:	4313      	orrs	r3, r2
 8005646:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	4a0e      	ldr	r2, [pc, #56]	; (8005688 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800564e:	4293      	cmp	r3, r2
 8005650:	d004      	beq.n	800565c <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	4a0d      	ldr	r2, [pc, #52]	; (800568c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8005658:	4293      	cmp	r3, r2
 800565a:	d106      	bne.n	800566a <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005666:	4313      	orrs	r3, r2
 8005668:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	68fa      	ldr	r2, [r7, #12]
 8005670:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	2200      	movs	r2, #0
 8005676:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800567a:	2300      	movs	r3, #0
}
 800567c:	4618      	mov	r0, r3
 800567e:	3714      	adds	r7, #20
 8005680:	46bd      	mov	sp, r7
 8005682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005686:	4770      	bx	lr
 8005688:	40012c00 	.word	0x40012c00
 800568c:	40013400 	.word	0x40013400

08005690 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005690:	b480      	push	{r7}
 8005692:	b083      	sub	sp, #12
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005698:	bf00      	nop
 800569a:	370c      	adds	r7, #12
 800569c:	46bd      	mov	sp, r7
 800569e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a2:	4770      	bx	lr

080056a4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80056a4:	b480      	push	{r7}
 80056a6:	b083      	sub	sp, #12
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80056ac:	bf00      	nop
 80056ae:	370c      	adds	r7, #12
 80056b0:	46bd      	mov	sp, r7
 80056b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b6:	4770      	bx	lr

080056b8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80056b8:	b480      	push	{r7}
 80056ba:	b083      	sub	sp, #12
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80056c0:	bf00      	nop
 80056c2:	370c      	adds	r7, #12
 80056c4:	46bd      	mov	sp, r7
 80056c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ca:	4770      	bx	lr

080056cc <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80056cc:	b480      	push	{r7}
 80056ce:	b083      	sub	sp, #12
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80056d4:	bf00      	nop
 80056d6:	370c      	adds	r7, #12
 80056d8:	46bd      	mov	sp, r7
 80056da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056de:	4770      	bx	lr

080056e0 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80056e0:	b480      	push	{r7}
 80056e2:	b083      	sub	sp, #12
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80056e8:	bf00      	nop
 80056ea:	370c      	adds	r7, #12
 80056ec:	46bd      	mov	sp, r7
 80056ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f2:	4770      	bx	lr

080056f4 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80056f4:	b480      	push	{r7}
 80056f6:	b083      	sub	sp, #12
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80056fc:	bf00      	nop
 80056fe:	370c      	adds	r7, #12
 8005700:	46bd      	mov	sp, r7
 8005702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005706:	4770      	bx	lr

08005708 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8005708:	b480      	push	{r7}
 800570a:	b083      	sub	sp, #12
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8005710:	bf00      	nop
 8005712:	370c      	adds	r7, #12
 8005714:	46bd      	mov	sp, r7
 8005716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571a:	4770      	bx	lr

0800571c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800571c:	b480      	push	{r7}
 800571e:	b085      	sub	sp, #20
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2200      	movs	r2, #0
 8005728:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800572c:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8005730:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	b29a      	uxth	r2, r3
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800573c:	2300      	movs	r3, #0
}
 800573e:	4618      	mov	r0, r3
 8005740:	3714      	adds	r7, #20
 8005742:	46bd      	mov	sp, r7
 8005744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005748:	4770      	bx	lr

0800574a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800574a:	b480      	push	{r7}
 800574c:	b085      	sub	sp, #20
 800574e:	af00      	add	r7, sp, #0
 8005750:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005752:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8005756:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800575e:	b29a      	uxth	r2, r3
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	b29b      	uxth	r3, r3
 8005764:	43db      	mvns	r3, r3
 8005766:	b29b      	uxth	r3, r3
 8005768:	4013      	ands	r3, r2
 800576a:	b29a      	uxth	r2, r3
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005772:	2300      	movs	r3, #0
}
 8005774:	4618      	mov	r0, r3
 8005776:	3714      	adds	r7, #20
 8005778:	46bd      	mov	sp, r7
 800577a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577e:	4770      	bx	lr

08005780 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005780:	b084      	sub	sp, #16
 8005782:	b480      	push	{r7}
 8005784:	b083      	sub	sp, #12
 8005786:	af00      	add	r7, sp, #0
 8005788:	6078      	str	r0, [r7, #4]
 800578a:	f107 0014 	add.w	r0, r7, #20
 800578e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2201      	movs	r2, #1
 8005796:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0U;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2200      	movs	r2, #0
 800579e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0U;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2200      	movs	r2, #0
 80057a6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2200      	movs	r2, #0
 80057ae:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80057b2:	2300      	movs	r3, #0
}
 80057b4:	4618      	mov	r0, r3
 80057b6:	370c      	adds	r7, #12
 80057b8:	46bd      	mov	sp, r7
 80057ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057be:	b004      	add	sp, #16
 80057c0:	4770      	bx	lr
	...

080057c4 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80057c4:	b480      	push	{r7}
 80057c6:	b09b      	sub	sp, #108	; 0x6c
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]
 80057cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80057ce:	2300      	movs	r3, #0
 80057d0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80057d4:	687a      	ldr	r2, [r7, #4]
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	781b      	ldrb	r3, [r3, #0]
 80057da:	009b      	lsls	r3, r3, #2
 80057dc:	4413      	add	r3, r2
 80057de:	881b      	ldrh	r3, [r3, #0]
 80057e0:	b29b      	uxth	r3, r3
 80057e2:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80057e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057ea:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	78db      	ldrb	r3, [r3, #3]
 80057f2:	2b03      	cmp	r3, #3
 80057f4:	d81f      	bhi.n	8005836 <USB_ActivateEndpoint+0x72>
 80057f6:	a201      	add	r2, pc, #4	; (adr r2, 80057fc <USB_ActivateEndpoint+0x38>)
 80057f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057fc:	0800580d 	.word	0x0800580d
 8005800:	08005829 	.word	0x08005829
 8005804:	0800583f 	.word	0x0800583f
 8005808:	0800581b 	.word	0x0800581b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800580c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005810:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005814:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8005818:	e012      	b.n	8005840 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800581a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800581e:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8005822:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8005826:	e00b      	b.n	8005840 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8005828:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800582c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005830:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8005834:	e004      	b.n	8005840 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8005836:	2301      	movs	r3, #1
 8005838:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 800583c:	e000      	b.n	8005840 <USB_ActivateEndpoint+0x7c>
      break;
 800583e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8005840:	687a      	ldr	r2, [r7, #4]
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	781b      	ldrb	r3, [r3, #0]
 8005846:	009b      	lsls	r3, r3, #2
 8005848:	441a      	add	r2, r3
 800584a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800584e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005852:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005856:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800585a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800585e:	b29b      	uxth	r3, r3
 8005860:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8005862:	687a      	ldr	r2, [r7, #4]
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	781b      	ldrb	r3, [r3, #0]
 8005868:	009b      	lsls	r3, r3, #2
 800586a:	4413      	add	r3, r2
 800586c:	881b      	ldrh	r3, [r3, #0]
 800586e:	b29b      	uxth	r3, r3
 8005870:	b21b      	sxth	r3, r3
 8005872:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005876:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800587a:	b21a      	sxth	r2, r3
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	781b      	ldrb	r3, [r3, #0]
 8005880:	b21b      	sxth	r3, r3
 8005882:	4313      	orrs	r3, r2
 8005884:	b21b      	sxth	r3, r3
 8005886:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 800588a:	687a      	ldr	r2, [r7, #4]
 800588c:	683b      	ldr	r3, [r7, #0]
 800588e:	781b      	ldrb	r3, [r3, #0]
 8005890:	009b      	lsls	r3, r3, #2
 8005892:	441a      	add	r2, r3
 8005894:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8005898:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800589c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80058a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80058a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058a8:	b29b      	uxth	r3, r3
 80058aa:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	7b1b      	ldrb	r3, [r3, #12]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	f040 8149 	bne.w	8005b48 <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 80058b6:	683b      	ldr	r3, [r7, #0]
 80058b8:	785b      	ldrb	r3, [r3, #1]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	f000 8084 	beq.w	80059c8 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	617b      	str	r3, [r7, #20]
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80058ca:	b29b      	uxth	r3, r3
 80058cc:	461a      	mov	r2, r3
 80058ce:	697b      	ldr	r3, [r7, #20]
 80058d0:	4413      	add	r3, r2
 80058d2:	617b      	str	r3, [r7, #20]
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	781b      	ldrb	r3, [r3, #0]
 80058d8:	00da      	lsls	r2, r3, #3
 80058da:	697b      	ldr	r3, [r7, #20]
 80058dc:	4413      	add	r3, r2
 80058de:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80058e2:	613b      	str	r3, [r7, #16]
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	88db      	ldrh	r3, [r3, #6]
 80058e8:	085b      	lsrs	r3, r3, #1
 80058ea:	b29b      	uxth	r3, r3
 80058ec:	005b      	lsls	r3, r3, #1
 80058ee:	b29a      	uxth	r2, r3
 80058f0:	693b      	ldr	r3, [r7, #16]
 80058f2:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80058f4:	687a      	ldr	r2, [r7, #4]
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	781b      	ldrb	r3, [r3, #0]
 80058fa:	009b      	lsls	r3, r3, #2
 80058fc:	4413      	add	r3, r2
 80058fe:	881b      	ldrh	r3, [r3, #0]
 8005900:	81fb      	strh	r3, [r7, #14]
 8005902:	89fb      	ldrh	r3, [r7, #14]
 8005904:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005908:	2b00      	cmp	r3, #0
 800590a:	d01b      	beq.n	8005944 <USB_ActivateEndpoint+0x180>
 800590c:	687a      	ldr	r2, [r7, #4]
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	781b      	ldrb	r3, [r3, #0]
 8005912:	009b      	lsls	r3, r3, #2
 8005914:	4413      	add	r3, r2
 8005916:	881b      	ldrh	r3, [r3, #0]
 8005918:	b29b      	uxth	r3, r3
 800591a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800591e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005922:	81bb      	strh	r3, [r7, #12]
 8005924:	687a      	ldr	r2, [r7, #4]
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	781b      	ldrb	r3, [r3, #0]
 800592a:	009b      	lsls	r3, r3, #2
 800592c:	441a      	add	r2, r3
 800592e:	89bb      	ldrh	r3, [r7, #12]
 8005930:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005934:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005938:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800593c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005940:	b29b      	uxth	r3, r3
 8005942:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	78db      	ldrb	r3, [r3, #3]
 8005948:	2b01      	cmp	r3, #1
 800594a:	d020      	beq.n	800598e <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800594c:	687a      	ldr	r2, [r7, #4]
 800594e:	683b      	ldr	r3, [r7, #0]
 8005950:	781b      	ldrb	r3, [r3, #0]
 8005952:	009b      	lsls	r3, r3, #2
 8005954:	4413      	add	r3, r2
 8005956:	881b      	ldrh	r3, [r3, #0]
 8005958:	b29b      	uxth	r3, r3
 800595a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800595e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005962:	813b      	strh	r3, [r7, #8]
 8005964:	893b      	ldrh	r3, [r7, #8]
 8005966:	f083 0320 	eor.w	r3, r3, #32
 800596a:	813b      	strh	r3, [r7, #8]
 800596c:	687a      	ldr	r2, [r7, #4]
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	781b      	ldrb	r3, [r3, #0]
 8005972:	009b      	lsls	r3, r3, #2
 8005974:	441a      	add	r2, r3
 8005976:	893b      	ldrh	r3, [r7, #8]
 8005978:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800597c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005980:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005984:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005988:	b29b      	uxth	r3, r3
 800598a:	8013      	strh	r3, [r2, #0]
 800598c:	e27f      	b.n	8005e8e <USB_ActivateEndpoint+0x6ca>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800598e:	687a      	ldr	r2, [r7, #4]
 8005990:	683b      	ldr	r3, [r7, #0]
 8005992:	781b      	ldrb	r3, [r3, #0]
 8005994:	009b      	lsls	r3, r3, #2
 8005996:	4413      	add	r3, r2
 8005998:	881b      	ldrh	r3, [r3, #0]
 800599a:	b29b      	uxth	r3, r3
 800599c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80059a4:	817b      	strh	r3, [r7, #10]
 80059a6:	687a      	ldr	r2, [r7, #4]
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	781b      	ldrb	r3, [r3, #0]
 80059ac:	009b      	lsls	r3, r3, #2
 80059ae:	441a      	add	r2, r3
 80059b0:	897b      	ldrh	r3, [r7, #10]
 80059b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80059b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80059ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80059be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059c2:	b29b      	uxth	r3, r3
 80059c4:	8013      	strh	r3, [r2, #0]
 80059c6:	e262      	b.n	8005e8e <USB_ActivateEndpoint+0x6ca>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059d2:	b29b      	uxth	r3, r3
 80059d4:	461a      	mov	r2, r3
 80059d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059d8:	4413      	add	r3, r2
 80059da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	781b      	ldrb	r3, [r3, #0]
 80059e0:	00da      	lsls	r2, r3, #3
 80059e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059e4:	4413      	add	r3, r2
 80059e6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80059ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80059ec:	683b      	ldr	r3, [r7, #0]
 80059ee:	88db      	ldrh	r3, [r3, #6]
 80059f0:	085b      	lsrs	r3, r3, #1
 80059f2:	b29b      	uxth	r3, r3
 80059f4:	005b      	lsls	r3, r3, #1
 80059f6:	b29a      	uxth	r2, r3
 80059f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059fa:	801a      	strh	r2, [r3, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	627b      	str	r3, [r7, #36]	; 0x24
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a06:	b29b      	uxth	r3, r3
 8005a08:	461a      	mov	r2, r3
 8005a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a0c:	4413      	add	r3, r2
 8005a0e:	627b      	str	r3, [r7, #36]	; 0x24
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	781b      	ldrb	r3, [r3, #0]
 8005a14:	00da      	lsls	r2, r3, #3
 8005a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a18:	4413      	add	r3, r2
 8005a1a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005a1e:	623b      	str	r3, [r7, #32]
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	691b      	ldr	r3, [r3, #16]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d112      	bne.n	8005a4e <USB_ActivateEndpoint+0x28a>
 8005a28:	6a3b      	ldr	r3, [r7, #32]
 8005a2a:	881b      	ldrh	r3, [r3, #0]
 8005a2c:	b29b      	uxth	r3, r3
 8005a2e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005a32:	b29a      	uxth	r2, r3
 8005a34:	6a3b      	ldr	r3, [r7, #32]
 8005a36:	801a      	strh	r2, [r3, #0]
 8005a38:	6a3b      	ldr	r3, [r7, #32]
 8005a3a:	881b      	ldrh	r3, [r3, #0]
 8005a3c:	b29b      	uxth	r3, r3
 8005a3e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a42:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a46:	b29a      	uxth	r2, r3
 8005a48:	6a3b      	ldr	r3, [r7, #32]
 8005a4a:	801a      	strh	r2, [r3, #0]
 8005a4c:	e02f      	b.n	8005aae <USB_ActivateEndpoint+0x2ea>
 8005a4e:	683b      	ldr	r3, [r7, #0]
 8005a50:	691b      	ldr	r3, [r3, #16]
 8005a52:	2b3e      	cmp	r3, #62	; 0x3e
 8005a54:	d813      	bhi.n	8005a7e <USB_ActivateEndpoint+0x2ba>
 8005a56:	683b      	ldr	r3, [r7, #0]
 8005a58:	691b      	ldr	r3, [r3, #16]
 8005a5a:	085b      	lsrs	r3, r3, #1
 8005a5c:	663b      	str	r3, [r7, #96]	; 0x60
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	691b      	ldr	r3, [r3, #16]
 8005a62:	f003 0301 	and.w	r3, r3, #1
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d002      	beq.n	8005a70 <USB_ActivateEndpoint+0x2ac>
 8005a6a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005a6c:	3301      	adds	r3, #1
 8005a6e:	663b      	str	r3, [r7, #96]	; 0x60
 8005a70:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005a72:	b29b      	uxth	r3, r3
 8005a74:	029b      	lsls	r3, r3, #10
 8005a76:	b29a      	uxth	r2, r3
 8005a78:	6a3b      	ldr	r3, [r7, #32]
 8005a7a:	801a      	strh	r2, [r3, #0]
 8005a7c:	e017      	b.n	8005aae <USB_ActivateEndpoint+0x2ea>
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	691b      	ldr	r3, [r3, #16]
 8005a82:	095b      	lsrs	r3, r3, #5
 8005a84:	663b      	str	r3, [r7, #96]	; 0x60
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	691b      	ldr	r3, [r3, #16]
 8005a8a:	f003 031f 	and.w	r3, r3, #31
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d102      	bne.n	8005a98 <USB_ActivateEndpoint+0x2d4>
 8005a92:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005a94:	3b01      	subs	r3, #1
 8005a96:	663b      	str	r3, [r7, #96]	; 0x60
 8005a98:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005a9a:	b29b      	uxth	r3, r3
 8005a9c:	029b      	lsls	r3, r3, #10
 8005a9e:	b29b      	uxth	r3, r3
 8005aa0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005aa4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005aa8:	b29a      	uxth	r2, r3
 8005aaa:	6a3b      	ldr	r3, [r7, #32]
 8005aac:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005aae:	687a      	ldr	r2, [r7, #4]
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	781b      	ldrb	r3, [r3, #0]
 8005ab4:	009b      	lsls	r3, r3, #2
 8005ab6:	4413      	add	r3, r2
 8005ab8:	881b      	ldrh	r3, [r3, #0]
 8005aba:	83fb      	strh	r3, [r7, #30]
 8005abc:	8bfb      	ldrh	r3, [r7, #30]
 8005abe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d01b      	beq.n	8005afe <USB_ActivateEndpoint+0x33a>
 8005ac6:	687a      	ldr	r2, [r7, #4]
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	781b      	ldrb	r3, [r3, #0]
 8005acc:	009b      	lsls	r3, r3, #2
 8005ace:	4413      	add	r3, r2
 8005ad0:	881b      	ldrh	r3, [r3, #0]
 8005ad2:	b29b      	uxth	r3, r3
 8005ad4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ad8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005adc:	83bb      	strh	r3, [r7, #28]
 8005ade:	687a      	ldr	r2, [r7, #4]
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	781b      	ldrb	r3, [r3, #0]
 8005ae4:	009b      	lsls	r3, r3, #2
 8005ae6:	441a      	add	r2, r3
 8005ae8:	8bbb      	ldrh	r3, [r7, #28]
 8005aea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005aee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005af2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005af6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005afa:	b29b      	uxth	r3, r3
 8005afc:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005afe:	687a      	ldr	r2, [r7, #4]
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	781b      	ldrb	r3, [r3, #0]
 8005b04:	009b      	lsls	r3, r3, #2
 8005b06:	4413      	add	r3, r2
 8005b08:	881b      	ldrh	r3, [r3, #0]
 8005b0a:	b29b      	uxth	r3, r3
 8005b0c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005b10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b14:	837b      	strh	r3, [r7, #26]
 8005b16:	8b7b      	ldrh	r3, [r7, #26]
 8005b18:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005b1c:	837b      	strh	r3, [r7, #26]
 8005b1e:	8b7b      	ldrh	r3, [r7, #26]
 8005b20:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005b24:	837b      	strh	r3, [r7, #26]
 8005b26:	687a      	ldr	r2, [r7, #4]
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	781b      	ldrb	r3, [r3, #0]
 8005b2c:	009b      	lsls	r3, r3, #2
 8005b2e:	441a      	add	r2, r3
 8005b30:	8b7b      	ldrh	r3, [r7, #26]
 8005b32:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b36:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b42:	b29b      	uxth	r3, r3
 8005b44:	8013      	strh	r3, [r2, #0]
 8005b46:	e1a2      	b.n	8005e8e <USB_ActivateEndpoint+0x6ca>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8005b48:	687a      	ldr	r2, [r7, #4]
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	781b      	ldrb	r3, [r3, #0]
 8005b4e:	009b      	lsls	r3, r3, #2
 8005b50:	4413      	add	r3, r2
 8005b52:	881b      	ldrh	r3, [r3, #0]
 8005b54:	b29b      	uxth	r3, r3
 8005b56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b5e:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8005b62:	687a      	ldr	r2, [r7, #4]
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	781b      	ldrb	r3, [r3, #0]
 8005b68:	009b      	lsls	r3, r3, #2
 8005b6a:	441a      	add	r2, r3
 8005b6c:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8005b70:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b74:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b78:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005b7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b80:	b29b      	uxth	r3, r3
 8005b82:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	65bb      	str	r3, [r7, #88]	; 0x58
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b8e:	b29b      	uxth	r3, r3
 8005b90:	461a      	mov	r2, r3
 8005b92:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005b94:	4413      	add	r3, r2
 8005b96:	65bb      	str	r3, [r7, #88]	; 0x58
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	781b      	ldrb	r3, [r3, #0]
 8005b9c:	00da      	lsls	r2, r3, #3
 8005b9e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005ba0:	4413      	add	r3, r2
 8005ba2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005ba6:	657b      	str	r3, [r7, #84]	; 0x54
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	891b      	ldrh	r3, [r3, #8]
 8005bac:	085b      	lsrs	r3, r3, #1
 8005bae:	b29b      	uxth	r3, r3
 8005bb0:	005b      	lsls	r3, r3, #1
 8005bb2:	b29a      	uxth	r2, r3
 8005bb4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005bb6:	801a      	strh	r2, [r3, #0]
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	653b      	str	r3, [r7, #80]	; 0x50
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005bc2:	b29b      	uxth	r3, r3
 8005bc4:	461a      	mov	r2, r3
 8005bc6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005bc8:	4413      	add	r3, r2
 8005bca:	653b      	str	r3, [r7, #80]	; 0x50
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	781b      	ldrb	r3, [r3, #0]
 8005bd0:	00da      	lsls	r2, r3, #3
 8005bd2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005bd4:	4413      	add	r3, r2
 8005bd6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005bda:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	895b      	ldrh	r3, [r3, #10]
 8005be0:	085b      	lsrs	r3, r3, #1
 8005be2:	b29b      	uxth	r3, r3
 8005be4:	005b      	lsls	r3, r3, #1
 8005be6:	b29a      	uxth	r2, r3
 8005be8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005bea:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8005bec:	683b      	ldr	r3, [r7, #0]
 8005bee:	785b      	ldrb	r3, [r3, #1]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	f040 8091 	bne.w	8005d18 <USB_ActivateEndpoint+0x554>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005bf6:	687a      	ldr	r2, [r7, #4]
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	781b      	ldrb	r3, [r3, #0]
 8005bfc:	009b      	lsls	r3, r3, #2
 8005bfe:	4413      	add	r3, r2
 8005c00:	881b      	ldrh	r3, [r3, #0]
 8005c02:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8005c04:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005c06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d01b      	beq.n	8005c46 <USB_ActivateEndpoint+0x482>
 8005c0e:	687a      	ldr	r2, [r7, #4]
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	781b      	ldrb	r3, [r3, #0]
 8005c14:	009b      	lsls	r3, r3, #2
 8005c16:	4413      	add	r3, r2
 8005c18:	881b      	ldrh	r3, [r3, #0]
 8005c1a:	b29b      	uxth	r3, r3
 8005c1c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c24:	877b      	strh	r3, [r7, #58]	; 0x3a
 8005c26:	687a      	ldr	r2, [r7, #4]
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	781b      	ldrb	r3, [r3, #0]
 8005c2c:	009b      	lsls	r3, r3, #2
 8005c2e:	441a      	add	r2, r3
 8005c30:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8005c32:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c36:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c3a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005c3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c42:	b29b      	uxth	r3, r3
 8005c44:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005c46:	687a      	ldr	r2, [r7, #4]
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	781b      	ldrb	r3, [r3, #0]
 8005c4c:	009b      	lsls	r3, r3, #2
 8005c4e:	4413      	add	r3, r2
 8005c50:	881b      	ldrh	r3, [r3, #0]
 8005c52:	873b      	strh	r3, [r7, #56]	; 0x38
 8005c54:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005c56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d01b      	beq.n	8005c96 <USB_ActivateEndpoint+0x4d2>
 8005c5e:	687a      	ldr	r2, [r7, #4]
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	781b      	ldrb	r3, [r3, #0]
 8005c64:	009b      	lsls	r3, r3, #2
 8005c66:	4413      	add	r3, r2
 8005c68:	881b      	ldrh	r3, [r3, #0]
 8005c6a:	b29b      	uxth	r3, r3
 8005c6c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c74:	86fb      	strh	r3, [r7, #54]	; 0x36
 8005c76:	687a      	ldr	r2, [r7, #4]
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	781b      	ldrb	r3, [r3, #0]
 8005c7c:	009b      	lsls	r3, r3, #2
 8005c7e:	441a      	add	r2, r3
 8005c80:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005c82:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c86:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c8e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005c92:	b29b      	uxth	r3, r3
 8005c94:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005c96:	687a      	ldr	r2, [r7, #4]
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	781b      	ldrb	r3, [r3, #0]
 8005c9c:	009b      	lsls	r3, r3, #2
 8005c9e:	4413      	add	r3, r2
 8005ca0:	881b      	ldrh	r3, [r3, #0]
 8005ca2:	b29b      	uxth	r3, r3
 8005ca4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005ca8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cac:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005cae:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005cb0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005cb4:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005cb6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005cb8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005cbc:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005cbe:	687a      	ldr	r2, [r7, #4]
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	781b      	ldrb	r3, [r3, #0]
 8005cc4:	009b      	lsls	r3, r3, #2
 8005cc6:	441a      	add	r2, r3
 8005cc8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005cca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005cce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005cd2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005cd6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005cda:	b29b      	uxth	r3, r3
 8005cdc:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005cde:	687a      	ldr	r2, [r7, #4]
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	781b      	ldrb	r3, [r3, #0]
 8005ce4:	009b      	lsls	r3, r3, #2
 8005ce6:	4413      	add	r3, r2
 8005ce8:	881b      	ldrh	r3, [r3, #0]
 8005cea:	b29b      	uxth	r3, r3
 8005cec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005cf0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005cf4:	867b      	strh	r3, [r7, #50]	; 0x32
 8005cf6:	687a      	ldr	r2, [r7, #4]
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	781b      	ldrb	r3, [r3, #0]
 8005cfc:	009b      	lsls	r3, r3, #2
 8005cfe:	441a      	add	r2, r3
 8005d00:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8005d02:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d06:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d12:	b29b      	uxth	r3, r3
 8005d14:	8013      	strh	r3, [r2, #0]
 8005d16:	e0ba      	b.n	8005e8e <USB_ActivateEndpoint+0x6ca>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005d18:	687a      	ldr	r2, [r7, #4]
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	781b      	ldrb	r3, [r3, #0]
 8005d1e:	009b      	lsls	r3, r3, #2
 8005d20:	4413      	add	r3, r2
 8005d22:	881b      	ldrh	r3, [r3, #0]
 8005d24:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8005d28:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005d2c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d01d      	beq.n	8005d70 <USB_ActivateEndpoint+0x5ac>
 8005d34:	687a      	ldr	r2, [r7, #4]
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	781b      	ldrb	r3, [r3, #0]
 8005d3a:	009b      	lsls	r3, r3, #2
 8005d3c:	4413      	add	r3, r2
 8005d3e:	881b      	ldrh	r3, [r3, #0]
 8005d40:	b29b      	uxth	r3, r3
 8005d42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d4a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8005d4e:	687a      	ldr	r2, [r7, #4]
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	781b      	ldrb	r3, [r3, #0]
 8005d54:	009b      	lsls	r3, r3, #2
 8005d56:	441a      	add	r2, r3
 8005d58:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005d5c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d60:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d64:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005d68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d6c:	b29b      	uxth	r3, r3
 8005d6e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005d70:	687a      	ldr	r2, [r7, #4]
 8005d72:	683b      	ldr	r3, [r7, #0]
 8005d74:	781b      	ldrb	r3, [r3, #0]
 8005d76:	009b      	lsls	r3, r3, #2
 8005d78:	4413      	add	r3, r2
 8005d7a:	881b      	ldrh	r3, [r3, #0]
 8005d7c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8005d80:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8005d84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d01d      	beq.n	8005dc8 <USB_ActivateEndpoint+0x604>
 8005d8c:	687a      	ldr	r2, [r7, #4]
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	781b      	ldrb	r3, [r3, #0]
 8005d92:	009b      	lsls	r3, r3, #2
 8005d94:	4413      	add	r3, r2
 8005d96:	881b      	ldrh	r3, [r3, #0]
 8005d98:	b29b      	uxth	r3, r3
 8005d9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005da2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005da6:	687a      	ldr	r2, [r7, #4]
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	781b      	ldrb	r3, [r3, #0]
 8005dac:	009b      	lsls	r3, r3, #2
 8005dae:	441a      	add	r2, r3
 8005db0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005db4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005db8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005dbc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005dc0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005dc4:	b29b      	uxth	r3, r3
 8005dc6:	8013      	strh	r3, [r2, #0]


      if (ep->type != EP_TYPE_ISOC)
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	78db      	ldrb	r3, [r3, #3]
 8005dcc:	2b01      	cmp	r3, #1
 8005dce:	d024      	beq.n	8005e1a <USB_ActivateEndpoint+0x656>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005dd0:	687a      	ldr	r2, [r7, #4]
 8005dd2:	683b      	ldr	r3, [r7, #0]
 8005dd4:	781b      	ldrb	r3, [r3, #0]
 8005dd6:	009b      	lsls	r3, r3, #2
 8005dd8:	4413      	add	r3, r2
 8005dda:	881b      	ldrh	r3, [r3, #0]
 8005ddc:	b29b      	uxth	r3, r3
 8005dde:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005de2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005de6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8005dea:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005dee:	f083 0320 	eor.w	r3, r3, #32
 8005df2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8005df6:	687a      	ldr	r2, [r7, #4]
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	781b      	ldrb	r3, [r3, #0]
 8005dfc:	009b      	lsls	r3, r3, #2
 8005dfe:	441a      	add	r2, r3
 8005e00:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005e04:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e08:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e0c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e14:	b29b      	uxth	r3, r3
 8005e16:	8013      	strh	r3, [r2, #0]
 8005e18:	e01d      	b.n	8005e56 <USB_ActivateEndpoint+0x692>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005e1a:	687a      	ldr	r2, [r7, #4]
 8005e1c:	683b      	ldr	r3, [r7, #0]
 8005e1e:	781b      	ldrb	r3, [r3, #0]
 8005e20:	009b      	lsls	r3, r3, #2
 8005e22:	4413      	add	r3, r2
 8005e24:	881b      	ldrh	r3, [r3, #0]
 8005e26:	b29b      	uxth	r3, r3
 8005e28:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e2c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e30:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8005e34:	687a      	ldr	r2, [r7, #4]
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	781b      	ldrb	r3, [r3, #0]
 8005e3a:	009b      	lsls	r3, r3, #2
 8005e3c:	441a      	add	r2, r3
 8005e3e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8005e42:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e46:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e52:	b29b      	uxth	r3, r3
 8005e54:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005e56:	687a      	ldr	r2, [r7, #4]
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	781b      	ldrb	r3, [r3, #0]
 8005e5c:	009b      	lsls	r3, r3, #2
 8005e5e:	4413      	add	r3, r2
 8005e60:	881b      	ldrh	r3, [r3, #0]
 8005e62:	b29b      	uxth	r3, r3
 8005e64:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005e68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e6c:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8005e6e:	687a      	ldr	r2, [r7, #4]
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	781b      	ldrb	r3, [r3, #0]
 8005e74:	009b      	lsls	r3, r3, #2
 8005e76:	441a      	add	r2, r3
 8005e78:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005e7a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e7e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e8a:	b29b      	uxth	r3, r3
 8005e8c:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8005e8e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8005e92:	4618      	mov	r0, r3
 8005e94:	376c      	adds	r7, #108	; 0x6c
 8005e96:	46bd      	mov	sp, r7
 8005e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9c:	4770      	bx	lr
 8005e9e:	bf00      	nop

08005ea0 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005ea0:	b480      	push	{r7}
 8005ea2:	b08d      	sub	sp, #52	; 0x34
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
 8005ea8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005eaa:	683b      	ldr	r3, [r7, #0]
 8005eac:	7b1b      	ldrb	r3, [r3, #12]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	f040 808e 	bne.w	8005fd0 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	785b      	ldrb	r3, [r3, #1]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d044      	beq.n	8005f46 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005ebc:	687a      	ldr	r2, [r7, #4]
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	781b      	ldrb	r3, [r3, #0]
 8005ec2:	009b      	lsls	r3, r3, #2
 8005ec4:	4413      	add	r3, r2
 8005ec6:	881b      	ldrh	r3, [r3, #0]
 8005ec8:	81bb      	strh	r3, [r7, #12]
 8005eca:	89bb      	ldrh	r3, [r7, #12]
 8005ecc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d01b      	beq.n	8005f0c <USB_DeactivateEndpoint+0x6c>
 8005ed4:	687a      	ldr	r2, [r7, #4]
 8005ed6:	683b      	ldr	r3, [r7, #0]
 8005ed8:	781b      	ldrb	r3, [r3, #0]
 8005eda:	009b      	lsls	r3, r3, #2
 8005edc:	4413      	add	r3, r2
 8005ede:	881b      	ldrh	r3, [r3, #0]
 8005ee0:	b29b      	uxth	r3, r3
 8005ee2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ee6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005eea:	817b      	strh	r3, [r7, #10]
 8005eec:	687a      	ldr	r2, [r7, #4]
 8005eee:	683b      	ldr	r3, [r7, #0]
 8005ef0:	781b      	ldrb	r3, [r3, #0]
 8005ef2:	009b      	lsls	r3, r3, #2
 8005ef4:	441a      	add	r2, r3
 8005ef6:	897b      	ldrh	r3, [r7, #10]
 8005ef8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005efc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f00:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f04:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005f08:	b29b      	uxth	r3, r3
 8005f0a:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005f0c:	687a      	ldr	r2, [r7, #4]
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	781b      	ldrb	r3, [r3, #0]
 8005f12:	009b      	lsls	r3, r3, #2
 8005f14:	4413      	add	r3, r2
 8005f16:	881b      	ldrh	r3, [r3, #0]
 8005f18:	b29b      	uxth	r3, r3
 8005f1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f1e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f22:	813b      	strh	r3, [r7, #8]
 8005f24:	687a      	ldr	r2, [r7, #4]
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	781b      	ldrb	r3, [r3, #0]
 8005f2a:	009b      	lsls	r3, r3, #2
 8005f2c:	441a      	add	r2, r3
 8005f2e:	893b      	ldrh	r3, [r7, #8]
 8005f30:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f34:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f38:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f40:	b29b      	uxth	r3, r3
 8005f42:	8013      	strh	r3, [r2, #0]
 8005f44:	e192      	b.n	800626c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005f46:	687a      	ldr	r2, [r7, #4]
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	781b      	ldrb	r3, [r3, #0]
 8005f4c:	009b      	lsls	r3, r3, #2
 8005f4e:	4413      	add	r3, r2
 8005f50:	881b      	ldrh	r3, [r3, #0]
 8005f52:	827b      	strh	r3, [r7, #18]
 8005f54:	8a7b      	ldrh	r3, [r7, #18]
 8005f56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d01b      	beq.n	8005f96 <USB_DeactivateEndpoint+0xf6>
 8005f5e:	687a      	ldr	r2, [r7, #4]
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	781b      	ldrb	r3, [r3, #0]
 8005f64:	009b      	lsls	r3, r3, #2
 8005f66:	4413      	add	r3, r2
 8005f68:	881b      	ldrh	r3, [r3, #0]
 8005f6a:	b29b      	uxth	r3, r3
 8005f6c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f74:	823b      	strh	r3, [r7, #16]
 8005f76:	687a      	ldr	r2, [r7, #4]
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	781b      	ldrb	r3, [r3, #0]
 8005f7c:	009b      	lsls	r3, r3, #2
 8005f7e:	441a      	add	r2, r3
 8005f80:	8a3b      	ldrh	r3, [r7, #16]
 8005f82:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f86:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f8a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005f8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f92:	b29b      	uxth	r3, r3
 8005f94:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005f96:	687a      	ldr	r2, [r7, #4]
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	781b      	ldrb	r3, [r3, #0]
 8005f9c:	009b      	lsls	r3, r3, #2
 8005f9e:	4413      	add	r3, r2
 8005fa0:	881b      	ldrh	r3, [r3, #0]
 8005fa2:	b29b      	uxth	r3, r3
 8005fa4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005fa8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fac:	81fb      	strh	r3, [r7, #14]
 8005fae:	687a      	ldr	r2, [r7, #4]
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	781b      	ldrb	r3, [r3, #0]
 8005fb4:	009b      	lsls	r3, r3, #2
 8005fb6:	441a      	add	r2, r3
 8005fb8:	89fb      	ldrh	r3, [r7, #14]
 8005fba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005fbe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005fc2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005fc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005fca:	b29b      	uxth	r3, r3
 8005fcc:	8013      	strh	r3, [r2, #0]
 8005fce:	e14d      	b.n	800626c <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	785b      	ldrb	r3, [r3, #1]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	f040 80a5 	bne.w	8006124 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005fda:	687a      	ldr	r2, [r7, #4]
 8005fdc:	683b      	ldr	r3, [r7, #0]
 8005fde:	781b      	ldrb	r3, [r3, #0]
 8005fe0:	009b      	lsls	r3, r3, #2
 8005fe2:	4413      	add	r3, r2
 8005fe4:	881b      	ldrh	r3, [r3, #0]
 8005fe6:	843b      	strh	r3, [r7, #32]
 8005fe8:	8c3b      	ldrh	r3, [r7, #32]
 8005fea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d01b      	beq.n	800602a <USB_DeactivateEndpoint+0x18a>
 8005ff2:	687a      	ldr	r2, [r7, #4]
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	781b      	ldrb	r3, [r3, #0]
 8005ff8:	009b      	lsls	r3, r3, #2
 8005ffa:	4413      	add	r3, r2
 8005ffc:	881b      	ldrh	r3, [r3, #0]
 8005ffe:	b29b      	uxth	r3, r3
 8006000:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006004:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006008:	83fb      	strh	r3, [r7, #30]
 800600a:	687a      	ldr	r2, [r7, #4]
 800600c:	683b      	ldr	r3, [r7, #0]
 800600e:	781b      	ldrb	r3, [r3, #0]
 8006010:	009b      	lsls	r3, r3, #2
 8006012:	441a      	add	r2, r3
 8006014:	8bfb      	ldrh	r3, [r7, #30]
 8006016:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800601a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800601e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006022:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006026:	b29b      	uxth	r3, r3
 8006028:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800602a:	687a      	ldr	r2, [r7, #4]
 800602c:	683b      	ldr	r3, [r7, #0]
 800602e:	781b      	ldrb	r3, [r3, #0]
 8006030:	009b      	lsls	r3, r3, #2
 8006032:	4413      	add	r3, r2
 8006034:	881b      	ldrh	r3, [r3, #0]
 8006036:	83bb      	strh	r3, [r7, #28]
 8006038:	8bbb      	ldrh	r3, [r7, #28]
 800603a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800603e:	2b00      	cmp	r3, #0
 8006040:	d01b      	beq.n	800607a <USB_DeactivateEndpoint+0x1da>
 8006042:	687a      	ldr	r2, [r7, #4]
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	781b      	ldrb	r3, [r3, #0]
 8006048:	009b      	lsls	r3, r3, #2
 800604a:	4413      	add	r3, r2
 800604c:	881b      	ldrh	r3, [r3, #0]
 800604e:	b29b      	uxth	r3, r3
 8006050:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006054:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006058:	837b      	strh	r3, [r7, #26]
 800605a:	687a      	ldr	r2, [r7, #4]
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	781b      	ldrb	r3, [r3, #0]
 8006060:	009b      	lsls	r3, r3, #2
 8006062:	441a      	add	r2, r3
 8006064:	8b7b      	ldrh	r3, [r7, #26]
 8006066:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800606a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800606e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006072:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006076:	b29b      	uxth	r3, r3
 8006078:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800607a:	687a      	ldr	r2, [r7, #4]
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	781b      	ldrb	r3, [r3, #0]
 8006080:	009b      	lsls	r3, r3, #2
 8006082:	4413      	add	r3, r2
 8006084:	881b      	ldrh	r3, [r3, #0]
 8006086:	b29b      	uxth	r3, r3
 8006088:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800608c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006090:	833b      	strh	r3, [r7, #24]
 8006092:	687a      	ldr	r2, [r7, #4]
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	781b      	ldrb	r3, [r3, #0]
 8006098:	009b      	lsls	r3, r3, #2
 800609a:	441a      	add	r2, r3
 800609c:	8b3b      	ldrh	r3, [r7, #24]
 800609e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80060aa:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80060ae:	b29b      	uxth	r3, r3
 80060b0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80060b2:	687a      	ldr	r2, [r7, #4]
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	781b      	ldrb	r3, [r3, #0]
 80060b8:	009b      	lsls	r3, r3, #2
 80060ba:	4413      	add	r3, r2
 80060bc:	881b      	ldrh	r3, [r3, #0]
 80060be:	b29b      	uxth	r3, r3
 80060c0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80060c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060c8:	82fb      	strh	r3, [r7, #22]
 80060ca:	687a      	ldr	r2, [r7, #4]
 80060cc:	683b      	ldr	r3, [r7, #0]
 80060ce:	781b      	ldrb	r3, [r3, #0]
 80060d0:	009b      	lsls	r3, r3, #2
 80060d2:	441a      	add	r2, r3
 80060d4:	8afb      	ldrh	r3, [r7, #22]
 80060d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80060e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060e6:	b29b      	uxth	r3, r3
 80060e8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80060ea:	687a      	ldr	r2, [r7, #4]
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	781b      	ldrb	r3, [r3, #0]
 80060f0:	009b      	lsls	r3, r3, #2
 80060f2:	4413      	add	r3, r2
 80060f4:	881b      	ldrh	r3, [r3, #0]
 80060f6:	b29b      	uxth	r3, r3
 80060f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006100:	82bb      	strh	r3, [r7, #20]
 8006102:	687a      	ldr	r2, [r7, #4]
 8006104:	683b      	ldr	r3, [r7, #0]
 8006106:	781b      	ldrb	r3, [r3, #0]
 8006108:	009b      	lsls	r3, r3, #2
 800610a:	441a      	add	r2, r3
 800610c:	8abb      	ldrh	r3, [r7, #20]
 800610e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006112:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006116:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800611a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800611e:	b29b      	uxth	r3, r3
 8006120:	8013      	strh	r3, [r2, #0]
 8006122:	e0a3      	b.n	800626c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006124:	687a      	ldr	r2, [r7, #4]
 8006126:	683b      	ldr	r3, [r7, #0]
 8006128:	781b      	ldrb	r3, [r3, #0]
 800612a:	009b      	lsls	r3, r3, #2
 800612c:	4413      	add	r3, r2
 800612e:	881b      	ldrh	r3, [r3, #0]
 8006130:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8006132:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006134:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006138:	2b00      	cmp	r3, #0
 800613a:	d01b      	beq.n	8006174 <USB_DeactivateEndpoint+0x2d4>
 800613c:	687a      	ldr	r2, [r7, #4]
 800613e:	683b      	ldr	r3, [r7, #0]
 8006140:	781b      	ldrb	r3, [r3, #0]
 8006142:	009b      	lsls	r3, r3, #2
 8006144:	4413      	add	r3, r2
 8006146:	881b      	ldrh	r3, [r3, #0]
 8006148:	b29b      	uxth	r3, r3
 800614a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800614e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006152:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8006154:	687a      	ldr	r2, [r7, #4]
 8006156:	683b      	ldr	r3, [r7, #0]
 8006158:	781b      	ldrb	r3, [r3, #0]
 800615a:	009b      	lsls	r3, r3, #2
 800615c:	441a      	add	r2, r3
 800615e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006160:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006164:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006168:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800616c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006170:	b29b      	uxth	r3, r3
 8006172:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006174:	687a      	ldr	r2, [r7, #4]
 8006176:	683b      	ldr	r3, [r7, #0]
 8006178:	781b      	ldrb	r3, [r3, #0]
 800617a:	009b      	lsls	r3, r3, #2
 800617c:	4413      	add	r3, r2
 800617e:	881b      	ldrh	r3, [r3, #0]
 8006180:	857b      	strh	r3, [r7, #42]	; 0x2a
 8006182:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006184:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006188:	2b00      	cmp	r3, #0
 800618a:	d01b      	beq.n	80061c4 <USB_DeactivateEndpoint+0x324>
 800618c:	687a      	ldr	r2, [r7, #4]
 800618e:	683b      	ldr	r3, [r7, #0]
 8006190:	781b      	ldrb	r3, [r3, #0]
 8006192:	009b      	lsls	r3, r3, #2
 8006194:	4413      	add	r3, r2
 8006196:	881b      	ldrh	r3, [r3, #0]
 8006198:	b29b      	uxth	r3, r3
 800619a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800619e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061a2:	853b      	strh	r3, [r7, #40]	; 0x28
 80061a4:	687a      	ldr	r2, [r7, #4]
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	781b      	ldrb	r3, [r3, #0]
 80061aa:	009b      	lsls	r3, r3, #2
 80061ac:	441a      	add	r2, r3
 80061ae:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80061b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80061b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80061b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80061bc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80061c0:	b29b      	uxth	r3, r3
 80061c2:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80061c4:	687a      	ldr	r2, [r7, #4]
 80061c6:	683b      	ldr	r3, [r7, #0]
 80061c8:	781b      	ldrb	r3, [r3, #0]
 80061ca:	009b      	lsls	r3, r3, #2
 80061cc:	4413      	add	r3, r2
 80061ce:	881b      	ldrh	r3, [r3, #0]
 80061d0:	b29b      	uxth	r3, r3
 80061d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80061d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061da:	84fb      	strh	r3, [r7, #38]	; 0x26
 80061dc:	687a      	ldr	r2, [r7, #4]
 80061de:	683b      	ldr	r3, [r7, #0]
 80061e0:	781b      	ldrb	r3, [r3, #0]
 80061e2:	009b      	lsls	r3, r3, #2
 80061e4:	441a      	add	r2, r3
 80061e6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80061e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80061ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80061f0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80061f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061f8:	b29b      	uxth	r3, r3
 80061fa:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80061fc:	687a      	ldr	r2, [r7, #4]
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	781b      	ldrb	r3, [r3, #0]
 8006202:	009b      	lsls	r3, r3, #2
 8006204:	4413      	add	r3, r2
 8006206:	881b      	ldrh	r3, [r3, #0]
 8006208:	b29b      	uxth	r3, r3
 800620a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800620e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006212:	84bb      	strh	r3, [r7, #36]	; 0x24
 8006214:	687a      	ldr	r2, [r7, #4]
 8006216:	683b      	ldr	r3, [r7, #0]
 8006218:	781b      	ldrb	r3, [r3, #0]
 800621a:	009b      	lsls	r3, r3, #2
 800621c:	441a      	add	r2, r3
 800621e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006220:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006224:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006228:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800622c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006230:	b29b      	uxth	r3, r3
 8006232:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006234:	687a      	ldr	r2, [r7, #4]
 8006236:	683b      	ldr	r3, [r7, #0]
 8006238:	781b      	ldrb	r3, [r3, #0]
 800623a:	009b      	lsls	r3, r3, #2
 800623c:	4413      	add	r3, r2
 800623e:	881b      	ldrh	r3, [r3, #0]
 8006240:	b29b      	uxth	r3, r3
 8006242:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006246:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800624a:	847b      	strh	r3, [r7, #34]	; 0x22
 800624c:	687a      	ldr	r2, [r7, #4]
 800624e:	683b      	ldr	r3, [r7, #0]
 8006250:	781b      	ldrb	r3, [r3, #0]
 8006252:	009b      	lsls	r3, r3, #2
 8006254:	441a      	add	r2, r3
 8006256:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006258:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800625c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006260:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006264:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006268:	b29b      	uxth	r3, r3
 800626a:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800626c:	2300      	movs	r3, #0
}
 800626e:	4618      	mov	r0, r3
 8006270:	3734      	adds	r7, #52	; 0x34
 8006272:	46bd      	mov	sp, r7
 8006274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006278:	4770      	bx	lr

0800627a <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800627a:	b580      	push	{r7, lr}
 800627c:	b0c4      	sub	sp, #272	; 0x110
 800627e:	af00      	add	r7, sp, #0
 8006280:	1d3b      	adds	r3, r7, #4
 8006282:	6018      	str	r0, [r3, #0]
 8006284:	463b      	mov	r3, r7
 8006286:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint32_t len;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006288:	463b      	mov	r3, r7
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	785b      	ldrb	r3, [r3, #1]
 800628e:	2b01      	cmp	r3, #1
 8006290:	f040 8566 	bne.w	8006d60 <USB_EPStartXfer+0xae6>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8006294:	463b      	mov	r3, r7
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	699a      	ldr	r2, [r3, #24]
 800629a:	463b      	mov	r3, r7
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	691b      	ldr	r3, [r3, #16]
 80062a0:	429a      	cmp	r2, r3
 80062a2:	d905      	bls.n	80062b0 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 80062a4:	463b      	mov	r3, r7
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	691b      	ldr	r3, [r3, #16]
 80062aa:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80062ae:	e004      	b.n	80062ba <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 80062b0:	463b      	mov	r3, r7
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	699b      	ldr	r3, [r3, #24]
 80062b6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80062ba:	463b      	mov	r3, r7
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	7b1b      	ldrb	r3, [r3, #12]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d12c      	bne.n	800631e <USB_EPStartXfer+0xa4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80062c4:	463b      	mov	r3, r7
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	6959      	ldr	r1, [r3, #20]
 80062ca:	463b      	mov	r3, r7
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	88da      	ldrh	r2, [r3, #6]
 80062d0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80062d4:	b29b      	uxth	r3, r3
 80062d6:	1d38      	adds	r0, r7, #4
 80062d8:	6800      	ldr	r0, [r0, #0]
 80062da:	f001 fa43 	bl	8007764 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80062de:	1d3b      	adds	r3, r7, #4
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	617b      	str	r3, [r7, #20]
 80062e4:	1d3b      	adds	r3, r7, #4
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80062ec:	b29b      	uxth	r3, r3
 80062ee:	461a      	mov	r2, r3
 80062f0:	697b      	ldr	r3, [r7, #20]
 80062f2:	4413      	add	r3, r2
 80062f4:	617b      	str	r3, [r7, #20]
 80062f6:	463b      	mov	r3, r7
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	781b      	ldrb	r3, [r3, #0]
 80062fc:	00da      	lsls	r2, r3, #3
 80062fe:	697b      	ldr	r3, [r7, #20]
 8006300:	4413      	add	r3, r2
 8006302:	f203 4202 	addw	r2, r3, #1026	; 0x402
 8006306:	f107 0310 	add.w	r3, r7, #16
 800630a:	601a      	str	r2, [r3, #0]
 800630c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006310:	b29a      	uxth	r2, r3
 8006312:	f107 0310 	add.w	r3, r7, #16
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	801a      	strh	r2, [r3, #0]
 800631a:	f000 bcec 	b.w	8006cf6 <USB_EPStartXfer+0xa7c>
    }
    else
    {
      /*double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800631e:	463b      	mov	r3, r7
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	78db      	ldrb	r3, [r3, #3]
 8006324:	2b02      	cmp	r3, #2
 8006326:	f040 8356 	bne.w	80069d6 <USB_EPStartXfer+0x75c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800632a:	463b      	mov	r3, r7
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	6a1a      	ldr	r2, [r3, #32]
 8006330:	463b      	mov	r3, r7
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	691b      	ldr	r3, [r3, #16]
 8006336:	429a      	cmp	r2, r3
 8006338:	f240 82fa 	bls.w	8006930 <USB_EPStartXfer+0x6b6>
        {
          /*enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 800633c:	1d3b      	adds	r3, r7, #4
 800633e:	681a      	ldr	r2, [r3, #0]
 8006340:	463b      	mov	r3, r7
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	781b      	ldrb	r3, [r3, #0]
 8006346:	009b      	lsls	r3, r3, #2
 8006348:	4413      	add	r3, r2
 800634a:	881b      	ldrh	r3, [r3, #0]
 800634c:	b29b      	uxth	r3, r3
 800634e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006352:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006356:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 800635a:	1d3b      	adds	r3, r7, #4
 800635c:	681a      	ldr	r2, [r3, #0]
 800635e:	463b      	mov	r3, r7
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	781b      	ldrb	r3, [r3, #0]
 8006364:	009b      	lsls	r3, r3, #2
 8006366:	441a      	add	r2, r3
 8006368:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 800636c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006370:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006374:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006378:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800637c:	b29b      	uxth	r3, r3
 800637e:	8013      	strh	r3, [r2, #0]
          len = ep->maxpacket;
 8006380:	463b      	mov	r3, r7
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	691b      	ldr	r3, [r3, #16]
 8006386:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          /*each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800638a:	463b      	mov	r3, r7
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	6a1a      	ldr	r2, [r3, #32]
 8006390:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006394:	1ad2      	subs	r2, r2, r3
 8006396:	463b      	mov	r3, r7
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1*/
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800639c:	1d3b      	adds	r3, r7, #4
 800639e:	681a      	ldr	r2, [r3, #0]
 80063a0:	463b      	mov	r3, r7
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	781b      	ldrb	r3, [r3, #0]
 80063a6:	009b      	lsls	r3, r3, #2
 80063a8:	4413      	add	r3, r2
 80063aa:	881b      	ldrh	r3, [r3, #0]
 80063ac:	b29b      	uxth	r3, r3
 80063ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	f000 815e 	beq.w	8006674 <USB_EPStartXfer+0x3fa>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80063b8:	1d3b      	adds	r3, r7, #4
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	637b      	str	r3, [r7, #52]	; 0x34
 80063be:	463b      	mov	r3, r7
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	785b      	ldrb	r3, [r3, #1]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d164      	bne.n	8006492 <USB_EPStartXfer+0x218>
 80063c8:	1d3b      	adds	r3, r7, #4
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80063ce:	1d3b      	adds	r3, r7, #4
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80063d6:	b29b      	uxth	r3, r3
 80063d8:	461a      	mov	r2, r3
 80063da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063dc:	4413      	add	r3, r2
 80063de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80063e0:	463b      	mov	r3, r7
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	781b      	ldrb	r3, [r3, #0]
 80063e6:	00da      	lsls	r2, r3, #3
 80063e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063ea:	4413      	add	r3, r2
 80063ec:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80063f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80063f2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d112      	bne.n	8006420 <USB_EPStartXfer+0x1a6>
 80063fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063fc:	881b      	ldrh	r3, [r3, #0]
 80063fe:	b29b      	uxth	r3, r3
 8006400:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006404:	b29a      	uxth	r2, r3
 8006406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006408:	801a      	strh	r2, [r3, #0]
 800640a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800640c:	881b      	ldrh	r3, [r3, #0]
 800640e:	b29b      	uxth	r3, r3
 8006410:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006414:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006418:	b29a      	uxth	r2, r3
 800641a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800641c:	801a      	strh	r2, [r3, #0]
 800641e:	e054      	b.n	80064ca <USB_EPStartXfer+0x250>
 8006420:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006424:	2b3e      	cmp	r3, #62	; 0x3e
 8006426:	d817      	bhi.n	8006458 <USB_EPStartXfer+0x1de>
 8006428:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800642c:	085b      	lsrs	r3, r3, #1
 800642e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006432:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006436:	f003 0301 	and.w	r3, r3, #1
 800643a:	2b00      	cmp	r3, #0
 800643c:	d004      	beq.n	8006448 <USB_EPStartXfer+0x1ce>
 800643e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006442:	3301      	adds	r3, #1
 8006444:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006448:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800644c:	b29b      	uxth	r3, r3
 800644e:	029b      	lsls	r3, r3, #10
 8006450:	b29a      	uxth	r2, r3
 8006452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006454:	801a      	strh	r2, [r3, #0]
 8006456:	e038      	b.n	80064ca <USB_EPStartXfer+0x250>
 8006458:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800645c:	095b      	lsrs	r3, r3, #5
 800645e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006462:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006466:	f003 031f 	and.w	r3, r3, #31
 800646a:	2b00      	cmp	r3, #0
 800646c:	d104      	bne.n	8006478 <USB_EPStartXfer+0x1fe>
 800646e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006472:	3b01      	subs	r3, #1
 8006474:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006478:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800647c:	b29b      	uxth	r3, r3
 800647e:	029b      	lsls	r3, r3, #10
 8006480:	b29b      	uxth	r3, r3
 8006482:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006486:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800648a:	b29a      	uxth	r2, r3
 800648c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800648e:	801a      	strh	r2, [r3, #0]
 8006490:	e01b      	b.n	80064ca <USB_EPStartXfer+0x250>
 8006492:	463b      	mov	r3, r7
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	785b      	ldrb	r3, [r3, #1]
 8006498:	2b01      	cmp	r3, #1
 800649a:	d116      	bne.n	80064ca <USB_EPStartXfer+0x250>
 800649c:	1d3b      	adds	r3, r7, #4
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80064a4:	b29b      	uxth	r3, r3
 80064a6:	461a      	mov	r2, r3
 80064a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064aa:	4413      	add	r3, r2
 80064ac:	637b      	str	r3, [r7, #52]	; 0x34
 80064ae:	463b      	mov	r3, r7
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	781b      	ldrb	r3, [r3, #0]
 80064b4:	00da      	lsls	r2, r3, #3
 80064b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064b8:	4413      	add	r3, r2
 80064ba:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80064be:	633b      	str	r3, [r7, #48]	; 0x30
 80064c0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80064c4:	b29a      	uxth	r2, r3
 80064c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064c8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80064ca:	463b      	mov	r3, r7
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	895b      	ldrh	r3, [r3, #10]
 80064d0:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80064d4:	463b      	mov	r3, r7
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	6959      	ldr	r1, [r3, #20]
 80064da:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80064de:	b29b      	uxth	r3, r3
 80064e0:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 80064e4:	1d38      	adds	r0, r7, #4
 80064e6:	6800      	ldr	r0, [r0, #0]
 80064e8:	f001 f93c 	bl	8007764 <USB_WritePMA>
            ep->xfer_buff += len;
 80064ec:	463b      	mov	r3, r7
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	695a      	ldr	r2, [r3, #20]
 80064f2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80064f6:	441a      	add	r2, r3
 80064f8:	463b      	mov	r3, r7
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80064fe:	463b      	mov	r3, r7
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	6a1a      	ldr	r2, [r3, #32]
 8006504:	463b      	mov	r3, r7
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	691b      	ldr	r3, [r3, #16]
 800650a:	429a      	cmp	r2, r3
 800650c:	d90e      	bls.n	800652c <USB_EPStartXfer+0x2b2>
            {
              len = ep->maxpacket;
 800650e:	463b      	mov	r3, r7
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	691b      	ldr	r3, [r3, #16]
 8006514:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db -= len;
 8006518:	463b      	mov	r3, r7
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	6a1a      	ldr	r2, [r3, #32]
 800651e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006522:	1ad2      	subs	r2, r2, r3
 8006524:	463b      	mov	r3, r7
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	621a      	str	r2, [r3, #32]
 800652a:	e008      	b.n	800653e <USB_EPStartXfer+0x2c4>
            }
            else
            {
              len = ep->xfer_len_db;
 800652c:	463b      	mov	r3, r7
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	6a1b      	ldr	r3, [r3, #32]
 8006532:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db = 0;
 8006536:	463b      	mov	r3, r7
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	2200      	movs	r2, #0
 800653c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800653e:	463b      	mov	r3, r7
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	785b      	ldrb	r3, [r3, #1]
 8006544:	2b00      	cmp	r3, #0
 8006546:	d164      	bne.n	8006612 <USB_EPStartXfer+0x398>
 8006548:	1d3b      	adds	r3, r7, #4
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	61fb      	str	r3, [r7, #28]
 800654e:	1d3b      	adds	r3, r7, #4
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006556:	b29b      	uxth	r3, r3
 8006558:	461a      	mov	r2, r3
 800655a:	69fb      	ldr	r3, [r7, #28]
 800655c:	4413      	add	r3, r2
 800655e:	61fb      	str	r3, [r7, #28]
 8006560:	463b      	mov	r3, r7
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	781b      	ldrb	r3, [r3, #0]
 8006566:	00da      	lsls	r2, r3, #3
 8006568:	69fb      	ldr	r3, [r7, #28]
 800656a:	4413      	add	r3, r2
 800656c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006570:	61bb      	str	r3, [r7, #24]
 8006572:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006576:	2b00      	cmp	r3, #0
 8006578:	d112      	bne.n	80065a0 <USB_EPStartXfer+0x326>
 800657a:	69bb      	ldr	r3, [r7, #24]
 800657c:	881b      	ldrh	r3, [r3, #0]
 800657e:	b29b      	uxth	r3, r3
 8006580:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006584:	b29a      	uxth	r2, r3
 8006586:	69bb      	ldr	r3, [r7, #24]
 8006588:	801a      	strh	r2, [r3, #0]
 800658a:	69bb      	ldr	r3, [r7, #24]
 800658c:	881b      	ldrh	r3, [r3, #0]
 800658e:	b29b      	uxth	r3, r3
 8006590:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006594:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006598:	b29a      	uxth	r2, r3
 800659a:	69bb      	ldr	r3, [r7, #24]
 800659c:	801a      	strh	r2, [r3, #0]
 800659e:	e057      	b.n	8006650 <USB_EPStartXfer+0x3d6>
 80065a0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80065a4:	2b3e      	cmp	r3, #62	; 0x3e
 80065a6:	d817      	bhi.n	80065d8 <USB_EPStartXfer+0x35e>
 80065a8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80065ac:	085b      	lsrs	r3, r3, #1
 80065ae:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80065b2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80065b6:	f003 0301 	and.w	r3, r3, #1
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d004      	beq.n	80065c8 <USB_EPStartXfer+0x34e>
 80065be:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80065c2:	3301      	adds	r3, #1
 80065c4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80065c8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80065cc:	b29b      	uxth	r3, r3
 80065ce:	029b      	lsls	r3, r3, #10
 80065d0:	b29a      	uxth	r2, r3
 80065d2:	69bb      	ldr	r3, [r7, #24]
 80065d4:	801a      	strh	r2, [r3, #0]
 80065d6:	e03b      	b.n	8006650 <USB_EPStartXfer+0x3d6>
 80065d8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80065dc:	095b      	lsrs	r3, r3, #5
 80065de:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80065e2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80065e6:	f003 031f 	and.w	r3, r3, #31
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d104      	bne.n	80065f8 <USB_EPStartXfer+0x37e>
 80065ee:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80065f2:	3b01      	subs	r3, #1
 80065f4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80065f8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80065fc:	b29b      	uxth	r3, r3
 80065fe:	029b      	lsls	r3, r3, #10
 8006600:	b29b      	uxth	r3, r3
 8006602:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006606:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800660a:	b29a      	uxth	r2, r3
 800660c:	69bb      	ldr	r3, [r7, #24]
 800660e:	801a      	strh	r2, [r3, #0]
 8006610:	e01e      	b.n	8006650 <USB_EPStartXfer+0x3d6>
 8006612:	463b      	mov	r3, r7
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	785b      	ldrb	r3, [r3, #1]
 8006618:	2b01      	cmp	r3, #1
 800661a:	d119      	bne.n	8006650 <USB_EPStartXfer+0x3d6>
 800661c:	1d3b      	adds	r3, r7, #4
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	627b      	str	r3, [r7, #36]	; 0x24
 8006622:	1d3b      	adds	r3, r7, #4
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800662a:	b29b      	uxth	r3, r3
 800662c:	461a      	mov	r2, r3
 800662e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006630:	4413      	add	r3, r2
 8006632:	627b      	str	r3, [r7, #36]	; 0x24
 8006634:	463b      	mov	r3, r7
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	781b      	ldrb	r3, [r3, #0]
 800663a:	00da      	lsls	r2, r3, #3
 800663c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800663e:	4413      	add	r3, r2
 8006640:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006644:	623b      	str	r3, [r7, #32]
 8006646:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800664a:	b29a      	uxth	r2, r3
 800664c:	6a3b      	ldr	r3, [r7, #32]
 800664e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006650:	463b      	mov	r3, r7
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	891b      	ldrh	r3, [r3, #8]
 8006656:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800665a:	463b      	mov	r3, r7
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	6959      	ldr	r1, [r3, #20]
 8006660:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006664:	b29b      	uxth	r3, r3
 8006666:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 800666a:	1d38      	adds	r0, r7, #4
 800666c:	6800      	ldr	r0, [r0, #0]
 800666e:	f001 f879 	bl	8007764 <USB_WritePMA>
 8006672:	e340      	b.n	8006cf6 <USB_EPStartXfer+0xa7c>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006674:	463b      	mov	r3, r7
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	785b      	ldrb	r3, [r3, #1]
 800667a:	2b00      	cmp	r3, #0
 800667c:	d164      	bne.n	8006748 <USB_EPStartXfer+0x4ce>
 800667e:	1d3b      	adds	r3, r7, #4
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006684:	1d3b      	adds	r3, r7, #4
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800668c:	b29b      	uxth	r3, r3
 800668e:	461a      	mov	r2, r3
 8006690:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006692:	4413      	add	r3, r2
 8006694:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006696:	463b      	mov	r3, r7
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	781b      	ldrb	r3, [r3, #0]
 800669c:	00da      	lsls	r2, r3, #3
 800669e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80066a0:	4413      	add	r3, r2
 80066a2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80066a6:	64bb      	str	r3, [r7, #72]	; 0x48
 80066a8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d112      	bne.n	80066d6 <USB_EPStartXfer+0x45c>
 80066b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80066b2:	881b      	ldrh	r3, [r3, #0]
 80066b4:	b29b      	uxth	r3, r3
 80066b6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80066ba:	b29a      	uxth	r2, r3
 80066bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80066be:	801a      	strh	r2, [r3, #0]
 80066c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80066c2:	881b      	ldrh	r3, [r3, #0]
 80066c4:	b29b      	uxth	r3, r3
 80066c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80066ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80066ce:	b29a      	uxth	r2, r3
 80066d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80066d2:	801a      	strh	r2, [r3, #0]
 80066d4:	e057      	b.n	8006786 <USB_EPStartXfer+0x50c>
 80066d6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80066da:	2b3e      	cmp	r3, #62	; 0x3e
 80066dc:	d817      	bhi.n	800670e <USB_EPStartXfer+0x494>
 80066de:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80066e2:	085b      	lsrs	r3, r3, #1
 80066e4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80066e8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80066ec:	f003 0301 	and.w	r3, r3, #1
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d004      	beq.n	80066fe <USB_EPStartXfer+0x484>
 80066f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80066f8:	3301      	adds	r3, #1
 80066fa:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80066fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006702:	b29b      	uxth	r3, r3
 8006704:	029b      	lsls	r3, r3, #10
 8006706:	b29a      	uxth	r2, r3
 8006708:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800670a:	801a      	strh	r2, [r3, #0]
 800670c:	e03b      	b.n	8006786 <USB_EPStartXfer+0x50c>
 800670e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006712:	095b      	lsrs	r3, r3, #5
 8006714:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006718:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800671c:	f003 031f 	and.w	r3, r3, #31
 8006720:	2b00      	cmp	r3, #0
 8006722:	d104      	bne.n	800672e <USB_EPStartXfer+0x4b4>
 8006724:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006728:	3b01      	subs	r3, #1
 800672a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800672e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006732:	b29b      	uxth	r3, r3
 8006734:	029b      	lsls	r3, r3, #10
 8006736:	b29b      	uxth	r3, r3
 8006738:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800673c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006740:	b29a      	uxth	r2, r3
 8006742:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006744:	801a      	strh	r2, [r3, #0]
 8006746:	e01e      	b.n	8006786 <USB_EPStartXfer+0x50c>
 8006748:	463b      	mov	r3, r7
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	785b      	ldrb	r3, [r3, #1]
 800674e:	2b01      	cmp	r3, #1
 8006750:	d119      	bne.n	8006786 <USB_EPStartXfer+0x50c>
 8006752:	1d3b      	adds	r3, r7, #4
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	657b      	str	r3, [r7, #84]	; 0x54
 8006758:	1d3b      	adds	r3, r7, #4
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006760:	b29b      	uxth	r3, r3
 8006762:	461a      	mov	r2, r3
 8006764:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006766:	4413      	add	r3, r2
 8006768:	657b      	str	r3, [r7, #84]	; 0x54
 800676a:	463b      	mov	r3, r7
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	781b      	ldrb	r3, [r3, #0]
 8006770:	00da      	lsls	r2, r3, #3
 8006772:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006774:	4413      	add	r3, r2
 8006776:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800677a:	653b      	str	r3, [r7, #80]	; 0x50
 800677c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006780:	b29a      	uxth	r2, r3
 8006782:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006784:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006786:	463b      	mov	r3, r7
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	891b      	ldrh	r3, [r3, #8]
 800678c:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006790:	463b      	mov	r3, r7
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	6959      	ldr	r1, [r3, #20]
 8006796:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800679a:	b29b      	uxth	r3, r3
 800679c:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 80067a0:	1d38      	adds	r0, r7, #4
 80067a2:	6800      	ldr	r0, [r0, #0]
 80067a4:	f000 ffde 	bl	8007764 <USB_WritePMA>
            ep->xfer_buff += len;
 80067a8:	463b      	mov	r3, r7
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	695a      	ldr	r2, [r3, #20]
 80067ae:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80067b2:	441a      	add	r2, r3
 80067b4:	463b      	mov	r3, r7
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80067ba:	463b      	mov	r3, r7
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	6a1a      	ldr	r2, [r3, #32]
 80067c0:	463b      	mov	r3, r7
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	691b      	ldr	r3, [r3, #16]
 80067c6:	429a      	cmp	r2, r3
 80067c8:	d90e      	bls.n	80067e8 <USB_EPStartXfer+0x56e>
            {
              len = ep->maxpacket;
 80067ca:	463b      	mov	r3, r7
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	691b      	ldr	r3, [r3, #16]
 80067d0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db -= len;
 80067d4:	463b      	mov	r3, r7
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	6a1a      	ldr	r2, [r3, #32]
 80067da:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80067de:	1ad2      	subs	r2, r2, r3
 80067e0:	463b      	mov	r3, r7
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	621a      	str	r2, [r3, #32]
 80067e6:	e008      	b.n	80067fa <USB_EPStartXfer+0x580>
            }
            else
            {
              len = ep->xfer_len_db;
 80067e8:	463b      	mov	r3, r7
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	6a1b      	ldr	r3, [r3, #32]
 80067ee:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db = 0;
 80067f2:	463b      	mov	r3, r7
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	2200      	movs	r2, #0
 80067f8:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80067fa:	1d3b      	adds	r3, r7, #4
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	647b      	str	r3, [r7, #68]	; 0x44
 8006800:	463b      	mov	r3, r7
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	785b      	ldrb	r3, [r3, #1]
 8006806:	2b00      	cmp	r3, #0
 8006808:	d164      	bne.n	80068d4 <USB_EPStartXfer+0x65a>
 800680a:	1d3b      	adds	r3, r7, #4
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006810:	1d3b      	adds	r3, r7, #4
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006818:	b29b      	uxth	r3, r3
 800681a:	461a      	mov	r2, r3
 800681c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800681e:	4413      	add	r3, r2
 8006820:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006822:	463b      	mov	r3, r7
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	781b      	ldrb	r3, [r3, #0]
 8006828:	00da      	lsls	r2, r3, #3
 800682a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800682c:	4413      	add	r3, r2
 800682e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006832:	63bb      	str	r3, [r7, #56]	; 0x38
 8006834:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006838:	2b00      	cmp	r3, #0
 800683a:	d112      	bne.n	8006862 <USB_EPStartXfer+0x5e8>
 800683c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800683e:	881b      	ldrh	r3, [r3, #0]
 8006840:	b29b      	uxth	r3, r3
 8006842:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006846:	b29a      	uxth	r2, r3
 8006848:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800684a:	801a      	strh	r2, [r3, #0]
 800684c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800684e:	881b      	ldrh	r3, [r3, #0]
 8006850:	b29b      	uxth	r3, r3
 8006852:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006856:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800685a:	b29a      	uxth	r2, r3
 800685c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800685e:	801a      	strh	r2, [r3, #0]
 8006860:	e054      	b.n	800690c <USB_EPStartXfer+0x692>
 8006862:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006866:	2b3e      	cmp	r3, #62	; 0x3e
 8006868:	d817      	bhi.n	800689a <USB_EPStartXfer+0x620>
 800686a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800686e:	085b      	lsrs	r3, r3, #1
 8006870:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006874:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006878:	f003 0301 	and.w	r3, r3, #1
 800687c:	2b00      	cmp	r3, #0
 800687e:	d004      	beq.n	800688a <USB_EPStartXfer+0x610>
 8006880:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006884:	3301      	adds	r3, #1
 8006886:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800688a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800688e:	b29b      	uxth	r3, r3
 8006890:	029b      	lsls	r3, r3, #10
 8006892:	b29a      	uxth	r2, r3
 8006894:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006896:	801a      	strh	r2, [r3, #0]
 8006898:	e038      	b.n	800690c <USB_EPStartXfer+0x692>
 800689a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800689e:	095b      	lsrs	r3, r3, #5
 80068a0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80068a4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80068a8:	f003 031f 	and.w	r3, r3, #31
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d104      	bne.n	80068ba <USB_EPStartXfer+0x640>
 80068b0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80068b4:	3b01      	subs	r3, #1
 80068b6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80068ba:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80068be:	b29b      	uxth	r3, r3
 80068c0:	029b      	lsls	r3, r3, #10
 80068c2:	b29b      	uxth	r3, r3
 80068c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80068c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80068cc:	b29a      	uxth	r2, r3
 80068ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068d0:	801a      	strh	r2, [r3, #0]
 80068d2:	e01b      	b.n	800690c <USB_EPStartXfer+0x692>
 80068d4:	463b      	mov	r3, r7
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	785b      	ldrb	r3, [r3, #1]
 80068da:	2b01      	cmp	r3, #1
 80068dc:	d116      	bne.n	800690c <USB_EPStartXfer+0x692>
 80068de:	1d3b      	adds	r3, r7, #4
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80068e6:	b29b      	uxth	r3, r3
 80068e8:	461a      	mov	r2, r3
 80068ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80068ec:	4413      	add	r3, r2
 80068ee:	647b      	str	r3, [r7, #68]	; 0x44
 80068f0:	463b      	mov	r3, r7
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	781b      	ldrb	r3, [r3, #0]
 80068f6:	00da      	lsls	r2, r3, #3
 80068f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80068fa:	4413      	add	r3, r2
 80068fc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006900:	643b      	str	r3, [r7, #64]	; 0x40
 8006902:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006906:	b29a      	uxth	r2, r3
 8006908:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800690a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800690c:	463b      	mov	r3, r7
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	895b      	ldrh	r3, [r3, #10]
 8006912:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006916:	463b      	mov	r3, r7
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	6959      	ldr	r1, [r3, #20]
 800691c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006920:	b29b      	uxth	r3, r3
 8006922:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8006926:	1d38      	adds	r0, r7, #4
 8006928:	6800      	ldr	r0, [r0, #0]
 800692a:	f000 ff1b 	bl	8007764 <USB_WritePMA>
 800692e:	e1e2      	b.n	8006cf6 <USB_EPStartXfer+0xa7c>
          }
        }
        /*auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer*/
        else
        {
          len = ep->xfer_len_db;
 8006930:	463b      	mov	r3, r7
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	6a1b      	ldr	r3, [r3, #32]
 8006936:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          /*disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 800693a:	1d3b      	adds	r3, r7, #4
 800693c:	681a      	ldr	r2, [r3, #0]
 800693e:	463b      	mov	r3, r7
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	781b      	ldrb	r3, [r3, #0]
 8006944:	009b      	lsls	r3, r3, #2
 8006946:	4413      	add	r3, r2
 8006948:	881b      	ldrh	r3, [r3, #0]
 800694a:	b29b      	uxth	r3, r3
 800694c:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8006950:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006954:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8006958:	1d3b      	adds	r3, r7, #4
 800695a:	681a      	ldr	r2, [r3, #0]
 800695c:	463b      	mov	r3, r7
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	781b      	ldrb	r3, [r3, #0]
 8006962:	009b      	lsls	r3, r3, #2
 8006964:	441a      	add	r2, r3
 8006966:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800696a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800696e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006972:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006976:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800697a:	b29b      	uxth	r3, r3
 800697c:	8013      	strh	r3, [r2, #0]
          /*Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800697e:	1d3b      	adds	r3, r7, #4
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	663b      	str	r3, [r7, #96]	; 0x60
 8006984:	1d3b      	adds	r3, r7, #4
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800698c:	b29b      	uxth	r3, r3
 800698e:	461a      	mov	r2, r3
 8006990:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006992:	4413      	add	r3, r2
 8006994:	663b      	str	r3, [r7, #96]	; 0x60
 8006996:	463b      	mov	r3, r7
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	781b      	ldrb	r3, [r3, #0]
 800699c:	00da      	lsls	r2, r3, #3
 800699e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80069a0:	4413      	add	r3, r2
 80069a2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80069a6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80069a8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80069ac:	b29a      	uxth	r2, r3
 80069ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80069b0:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80069b2:	463b      	mov	r3, r7
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	891b      	ldrh	r3, [r3, #8]
 80069b8:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
          /*Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80069bc:	463b      	mov	r3, r7
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	6959      	ldr	r1, [r3, #20]
 80069c2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80069c6:	b29b      	uxth	r3, r3
 80069c8:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 80069cc:	1d38      	adds	r0, r7, #4
 80069ce:	6800      	ldr	r0, [r0, #0]
 80069d0:	f000 fec8 	bl	8007764 <USB_WritePMA>
 80069d4:	e18f      	b.n	8006cf6 <USB_EPStartXfer+0xa7c>

      /*mange isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80069d6:	1d3b      	adds	r3, r7, #4
 80069d8:	681a      	ldr	r2, [r3, #0]
 80069da:	463b      	mov	r3, r7
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	781b      	ldrb	r3, [r3, #0]
 80069e0:	009b      	lsls	r3, r3, #2
 80069e2:	4413      	add	r3, r2
 80069e4:	881b      	ldrh	r3, [r3, #0]
 80069e6:	b29b      	uxth	r3, r3
 80069e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	f000 808f 	beq.w	8006b10 <USB_EPStartXfer+0x896>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80069f2:	1d3b      	adds	r3, r7, #4
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	67bb      	str	r3, [r7, #120]	; 0x78
 80069f8:	463b      	mov	r3, r7
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	785b      	ldrb	r3, [r3, #1]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d164      	bne.n	8006acc <USB_EPStartXfer+0x852>
 8006a02:	1d3b      	adds	r3, r7, #4
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	673b      	str	r3, [r7, #112]	; 0x70
 8006a08:	1d3b      	adds	r3, r7, #4
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a10:	b29b      	uxth	r3, r3
 8006a12:	461a      	mov	r2, r3
 8006a14:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006a16:	4413      	add	r3, r2
 8006a18:	673b      	str	r3, [r7, #112]	; 0x70
 8006a1a:	463b      	mov	r3, r7
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	781b      	ldrb	r3, [r3, #0]
 8006a20:	00da      	lsls	r2, r3, #3
 8006a22:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006a24:	4413      	add	r3, r2
 8006a26:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006a2a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006a2c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d112      	bne.n	8006a5a <USB_EPStartXfer+0x7e0>
 8006a34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a36:	881b      	ldrh	r3, [r3, #0]
 8006a38:	b29b      	uxth	r3, r3
 8006a3a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006a3e:	b29a      	uxth	r2, r3
 8006a40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a42:	801a      	strh	r2, [r3, #0]
 8006a44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a46:	881b      	ldrh	r3, [r3, #0]
 8006a48:	b29b      	uxth	r3, r3
 8006a4a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a4e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a52:	b29a      	uxth	r2, r3
 8006a54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a56:	801a      	strh	r2, [r3, #0]
 8006a58:	e054      	b.n	8006b04 <USB_EPStartXfer+0x88a>
 8006a5a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006a5e:	2b3e      	cmp	r3, #62	; 0x3e
 8006a60:	d817      	bhi.n	8006a92 <USB_EPStartXfer+0x818>
 8006a62:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006a66:	085b      	lsrs	r3, r3, #1
 8006a68:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006a6c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006a70:	f003 0301 	and.w	r3, r3, #1
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d004      	beq.n	8006a82 <USB_EPStartXfer+0x808>
 8006a78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a7c:	3301      	adds	r3, #1
 8006a7e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006a82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a86:	b29b      	uxth	r3, r3
 8006a88:	029b      	lsls	r3, r3, #10
 8006a8a:	b29a      	uxth	r2, r3
 8006a8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a8e:	801a      	strh	r2, [r3, #0]
 8006a90:	e038      	b.n	8006b04 <USB_EPStartXfer+0x88a>
 8006a92:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006a96:	095b      	lsrs	r3, r3, #5
 8006a98:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006a9c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006aa0:	f003 031f 	and.w	r3, r3, #31
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d104      	bne.n	8006ab2 <USB_EPStartXfer+0x838>
 8006aa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006aac:	3b01      	subs	r3, #1
 8006aae:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006ab2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ab6:	b29b      	uxth	r3, r3
 8006ab8:	029b      	lsls	r3, r3, #10
 8006aba:	b29b      	uxth	r3, r3
 8006abc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ac0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ac4:	b29a      	uxth	r2, r3
 8006ac6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ac8:	801a      	strh	r2, [r3, #0]
 8006aca:	e01b      	b.n	8006b04 <USB_EPStartXfer+0x88a>
 8006acc:	463b      	mov	r3, r7
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	785b      	ldrb	r3, [r3, #1]
 8006ad2:	2b01      	cmp	r3, #1
 8006ad4:	d116      	bne.n	8006b04 <USB_EPStartXfer+0x88a>
 8006ad6:	1d3b      	adds	r3, r7, #4
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ade:	b29b      	uxth	r3, r3
 8006ae0:	461a      	mov	r2, r3
 8006ae2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006ae4:	4413      	add	r3, r2
 8006ae6:	67bb      	str	r3, [r7, #120]	; 0x78
 8006ae8:	463b      	mov	r3, r7
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	781b      	ldrb	r3, [r3, #0]
 8006aee:	00da      	lsls	r2, r3, #3
 8006af0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006af2:	4413      	add	r3, r2
 8006af4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006af8:	677b      	str	r3, [r7, #116]	; 0x74
 8006afa:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006afe:	b29a      	uxth	r2, r3
 8006b00:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006b02:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8006b04:	463b      	mov	r3, r7
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	895b      	ldrh	r3, [r3, #10]
 8006b0a:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
 8006b0e:	e097      	b.n	8006c40 <USB_EPStartXfer+0x9c6>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006b10:	463b      	mov	r3, r7
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	785b      	ldrb	r3, [r3, #1]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d168      	bne.n	8006bec <USB_EPStartXfer+0x972>
 8006b1a:	1d3b      	adds	r3, r7, #4
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006b22:	1d3b      	adds	r3, r7, #4
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b2a:	b29b      	uxth	r3, r3
 8006b2c:	461a      	mov	r2, r3
 8006b2e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006b32:	4413      	add	r3, r2
 8006b34:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006b38:	463b      	mov	r3, r7
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	781b      	ldrb	r3, [r3, #0]
 8006b3e:	00da      	lsls	r2, r3, #3
 8006b40:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006b44:	4413      	add	r3, r2
 8006b46:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006b4a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006b4c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d112      	bne.n	8006b7a <USB_EPStartXfer+0x900>
 8006b54:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006b56:	881b      	ldrh	r3, [r3, #0]
 8006b58:	b29b      	uxth	r3, r3
 8006b5a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006b5e:	b29a      	uxth	r2, r3
 8006b60:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006b62:	801a      	strh	r2, [r3, #0]
 8006b64:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006b66:	881b      	ldrh	r3, [r3, #0]
 8006b68:	b29b      	uxth	r3, r3
 8006b6a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b6e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b72:	b29a      	uxth	r2, r3
 8006b74:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006b76:	801a      	strh	r2, [r3, #0]
 8006b78:	e05d      	b.n	8006c36 <USB_EPStartXfer+0x9bc>
 8006b7a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006b7e:	2b3e      	cmp	r3, #62	; 0x3e
 8006b80:	d817      	bhi.n	8006bb2 <USB_EPStartXfer+0x938>
 8006b82:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006b86:	085b      	lsrs	r3, r3, #1
 8006b88:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006b8c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006b90:	f003 0301 	and.w	r3, r3, #1
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d004      	beq.n	8006ba2 <USB_EPStartXfer+0x928>
 8006b98:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006b9c:	3301      	adds	r3, #1
 8006b9e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006ba2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006ba6:	b29b      	uxth	r3, r3
 8006ba8:	029b      	lsls	r3, r3, #10
 8006baa:	b29a      	uxth	r2, r3
 8006bac:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006bae:	801a      	strh	r2, [r3, #0]
 8006bb0:	e041      	b.n	8006c36 <USB_EPStartXfer+0x9bc>
 8006bb2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006bb6:	095b      	lsrs	r3, r3, #5
 8006bb8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006bbc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006bc0:	f003 031f 	and.w	r3, r3, #31
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d104      	bne.n	8006bd2 <USB_EPStartXfer+0x958>
 8006bc8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006bcc:	3b01      	subs	r3, #1
 8006bce:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006bd2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006bd6:	b29b      	uxth	r3, r3
 8006bd8:	029b      	lsls	r3, r3, #10
 8006bda:	b29b      	uxth	r3, r3
 8006bdc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006be0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006be4:	b29a      	uxth	r2, r3
 8006be6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006be8:	801a      	strh	r2, [r3, #0]
 8006bea:	e024      	b.n	8006c36 <USB_EPStartXfer+0x9bc>
 8006bec:	463b      	mov	r3, r7
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	785b      	ldrb	r3, [r3, #1]
 8006bf2:	2b01      	cmp	r3, #1
 8006bf4:	d11f      	bne.n	8006c36 <USB_EPStartXfer+0x9bc>
 8006bf6:	1d3b      	adds	r3, r7, #4
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006bfe:	1d3b      	adds	r3, r7, #4
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c06:	b29b      	uxth	r3, r3
 8006c08:	461a      	mov	r2, r3
 8006c0a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006c0e:	4413      	add	r3, r2
 8006c10:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006c14:	463b      	mov	r3, r7
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	781b      	ldrb	r3, [r3, #0]
 8006c1a:	00da      	lsls	r2, r3, #3
 8006c1c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006c20:	4413      	add	r3, r2
 8006c22:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006c26:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006c2a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006c2e:	b29a      	uxth	r2, r3
 8006c30:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006c34:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006c36:	463b      	mov	r3, r7
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	891b      	ldrh	r3, [r3, #8]
 8006c3c:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
        }
        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006c40:	463b      	mov	r3, r7
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	6959      	ldr	r1, [r3, #20]
 8006c46:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006c4a:	b29b      	uxth	r3, r3
 8006c4c:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8006c50:	1d38      	adds	r0, r7, #4
 8006c52:	6800      	ldr	r0, [r0, #0]
 8006c54:	f000 fd86 	bl	8007764 <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8006c58:	463b      	mov	r3, r7
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	785b      	ldrb	r3, [r3, #1]
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d122      	bne.n	8006ca8 <USB_EPStartXfer+0xa2e>
 8006c62:	1d3b      	adds	r3, r7, #4
 8006c64:	681a      	ldr	r2, [r3, #0]
 8006c66:	463b      	mov	r3, r7
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	781b      	ldrb	r3, [r3, #0]
 8006c6c:	009b      	lsls	r3, r3, #2
 8006c6e:	4413      	add	r3, r2
 8006c70:	881b      	ldrh	r3, [r3, #0]
 8006c72:	b29b      	uxth	r3, r3
 8006c74:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c7c:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8006c80:	1d3b      	adds	r3, r7, #4
 8006c82:	681a      	ldr	r2, [r3, #0]
 8006c84:	463b      	mov	r3, r7
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	781b      	ldrb	r3, [r3, #0]
 8006c8a:	009b      	lsls	r3, r3, #2
 8006c8c:	441a      	add	r2, r3
 8006c8e:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8006c92:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c96:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c9e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006ca2:	b29b      	uxth	r3, r3
 8006ca4:	8013      	strh	r3, [r2, #0]
 8006ca6:	e026      	b.n	8006cf6 <USB_EPStartXfer+0xa7c>
 8006ca8:	463b      	mov	r3, r7
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	785b      	ldrb	r3, [r3, #1]
 8006cae:	2b01      	cmp	r3, #1
 8006cb0:	d121      	bne.n	8006cf6 <USB_EPStartXfer+0xa7c>
 8006cb2:	1d3b      	adds	r3, r7, #4
 8006cb4:	681a      	ldr	r2, [r3, #0]
 8006cb6:	463b      	mov	r3, r7
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	781b      	ldrb	r3, [r3, #0]
 8006cbc:	009b      	lsls	r3, r3, #2
 8006cbe:	4413      	add	r3, r2
 8006cc0:	881b      	ldrh	r3, [r3, #0]
 8006cc2:	b29b      	uxth	r3, r3
 8006cc4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006cc8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ccc:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 8006cd0:	1d3b      	adds	r3, r7, #4
 8006cd2:	681a      	ldr	r2, [r3, #0]
 8006cd4:	463b      	mov	r3, r7
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	781b      	ldrb	r3, [r3, #0]
 8006cda:	009b      	lsls	r3, r3, #2
 8006cdc:	441a      	add	r2, r3
 8006cde:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8006ce2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ce6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006cea:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006cee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006cf2:	b29b      	uxth	r3, r3
 8006cf4:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8006cf6:	1d3b      	adds	r3, r7, #4
 8006cf8:	681a      	ldr	r2, [r3, #0]
 8006cfa:	463b      	mov	r3, r7
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	781b      	ldrb	r3, [r3, #0]
 8006d00:	009b      	lsls	r3, r3, #2
 8006d02:	4413      	add	r3, r2
 8006d04:	881b      	ldrh	r3, [r3, #0]
 8006d06:	b29b      	uxth	r3, r3
 8006d08:	f107 020e 	add.w	r2, r7, #14
 8006d0c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d10:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d14:	8013      	strh	r3, [r2, #0]
 8006d16:	f107 030e 	add.w	r3, r7, #14
 8006d1a:	f107 020e 	add.w	r2, r7, #14
 8006d1e:	8812      	ldrh	r2, [r2, #0]
 8006d20:	f082 0210 	eor.w	r2, r2, #16
 8006d24:	801a      	strh	r2, [r3, #0]
 8006d26:	f107 030e 	add.w	r3, r7, #14
 8006d2a:	f107 020e 	add.w	r2, r7, #14
 8006d2e:	8812      	ldrh	r2, [r2, #0]
 8006d30:	f082 0220 	eor.w	r2, r2, #32
 8006d34:	801a      	strh	r2, [r3, #0]
 8006d36:	1d3b      	adds	r3, r7, #4
 8006d38:	681a      	ldr	r2, [r3, #0]
 8006d3a:	463b      	mov	r3, r7
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	781b      	ldrb	r3, [r3, #0]
 8006d40:	009b      	lsls	r3, r3, #2
 8006d42:	441a      	add	r2, r3
 8006d44:	f107 030e 	add.w	r3, r7, #14
 8006d48:	881b      	ldrh	r3, [r3, #0]
 8006d4a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d4e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d5a:	b29b      	uxth	r3, r3
 8006d5c:	8013      	strh	r3, [r2, #0]
 8006d5e:	e3b5      	b.n	80074cc <USB_EPStartXfer+0x1252>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8006d60:	463b      	mov	r3, r7
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	7b1b      	ldrb	r3, [r3, #12]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	f040 8090 	bne.w	8006e8c <USB_EPStartXfer+0xc12>
    {
      /* Multi packet transfer*/
      if (ep->xfer_len > ep->maxpacket)
 8006d6c:	463b      	mov	r3, r7
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	699a      	ldr	r2, [r3, #24]
 8006d72:	463b      	mov	r3, r7
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	691b      	ldr	r3, [r3, #16]
 8006d78:	429a      	cmp	r2, r3
 8006d7a:	d90e      	bls.n	8006d9a <USB_EPStartXfer+0xb20>
      {
        len = ep->maxpacket;
 8006d7c:	463b      	mov	r3, r7
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	691b      	ldr	r3, [r3, #16]
 8006d82:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        ep->xfer_len -= len;
 8006d86:	463b      	mov	r3, r7
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	699a      	ldr	r2, [r3, #24]
 8006d8c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006d90:	1ad2      	subs	r2, r2, r3
 8006d92:	463b      	mov	r3, r7
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	619a      	str	r2, [r3, #24]
 8006d98:	e008      	b.n	8006dac <USB_EPStartXfer+0xb32>
      }
      else
      {
        len = ep->xfer_len;
 8006d9a:	463b      	mov	r3, r7
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	699b      	ldr	r3, [r3, #24]
 8006da0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        ep->xfer_len = 0U;
 8006da4:	463b      	mov	r3, r7
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	2200      	movs	r2, #0
 8006daa:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8006dac:	1d3b      	adds	r3, r7, #4
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006db4:	1d3b      	adds	r3, r7, #4
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006dbc:	b29b      	uxth	r3, r3
 8006dbe:	461a      	mov	r2, r3
 8006dc0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006dc4:	4413      	add	r3, r2
 8006dc6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006dca:	463b      	mov	r3, r7
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	781b      	ldrb	r3, [r3, #0]
 8006dd0:	00da      	lsls	r2, r3, #3
 8006dd2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006dd6:	4413      	add	r3, r2
 8006dd8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006ddc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006de0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d116      	bne.n	8006e16 <USB_EPStartXfer+0xb9c>
 8006de8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006dec:	881b      	ldrh	r3, [r3, #0]
 8006dee:	b29b      	uxth	r3, r3
 8006df0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006df4:	b29a      	uxth	r2, r3
 8006df6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006dfa:	801a      	strh	r2, [r3, #0]
 8006dfc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006e00:	881b      	ldrh	r3, [r3, #0]
 8006e02:	b29b      	uxth	r3, r3
 8006e04:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e08:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e0c:	b29a      	uxth	r2, r3
 8006e0e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006e12:	801a      	strh	r2, [r3, #0]
 8006e14:	e32c      	b.n	8007470 <USB_EPStartXfer+0x11f6>
 8006e16:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006e1a:	2b3e      	cmp	r3, #62	; 0x3e
 8006e1c:	d818      	bhi.n	8006e50 <USB_EPStartXfer+0xbd6>
 8006e1e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006e22:	085b      	lsrs	r3, r3, #1
 8006e24:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006e28:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006e2c:	f003 0301 	and.w	r3, r3, #1
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d004      	beq.n	8006e3e <USB_EPStartXfer+0xbc4>
 8006e34:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006e38:	3301      	adds	r3, #1
 8006e3a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006e3e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006e42:	b29b      	uxth	r3, r3
 8006e44:	029b      	lsls	r3, r3, #10
 8006e46:	b29a      	uxth	r2, r3
 8006e48:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006e4c:	801a      	strh	r2, [r3, #0]
 8006e4e:	e30f      	b.n	8007470 <USB_EPStartXfer+0x11f6>
 8006e50:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006e54:	095b      	lsrs	r3, r3, #5
 8006e56:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006e5a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006e5e:	f003 031f 	and.w	r3, r3, #31
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d104      	bne.n	8006e70 <USB_EPStartXfer+0xbf6>
 8006e66:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006e6a:	3b01      	subs	r3, #1
 8006e6c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006e70:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006e74:	b29b      	uxth	r3, r3
 8006e76:	029b      	lsls	r3, r3, #10
 8006e78:	b29b      	uxth	r3, r3
 8006e7a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e7e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e82:	b29a      	uxth	r2, r3
 8006e84:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006e88:	801a      	strh	r2, [r3, #0]
 8006e8a:	e2f1      	b.n	8007470 <USB_EPStartXfer+0x11f6>
    }
    else
    {
      /*First Transfer Coming From HAL_PCD_EP_Receive & From ISR*/
      /*Set the Double buffer counter*/
      if (ep->type == EP_TYPE_BULK)
 8006e8c:	463b      	mov	r3, r7
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	78db      	ldrb	r3, [r3, #3]
 8006e92:	2b02      	cmp	r3, #2
 8006e94:	f040 818f 	bne.w	80071b6 <USB_EPStartXfer+0xf3c>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8006e98:	463b      	mov	r3, r7
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	785b      	ldrb	r3, [r3, #1]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d175      	bne.n	8006f8e <USB_EPStartXfer+0xd14>
 8006ea2:	1d3b      	adds	r3, r7, #4
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006eaa:	1d3b      	adds	r3, r7, #4
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006eb2:	b29b      	uxth	r3, r3
 8006eb4:	461a      	mov	r2, r3
 8006eb6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006eba:	4413      	add	r3, r2
 8006ebc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006ec0:	463b      	mov	r3, r7
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	781b      	ldrb	r3, [r3, #0]
 8006ec6:	00da      	lsls	r2, r3, #3
 8006ec8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006ecc:	4413      	add	r3, r2
 8006ece:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006ed2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006ed6:	463b      	mov	r3, r7
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	691b      	ldr	r3, [r3, #16]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d116      	bne.n	8006f0e <USB_EPStartXfer+0xc94>
 8006ee0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006ee4:	881b      	ldrh	r3, [r3, #0]
 8006ee6:	b29b      	uxth	r3, r3
 8006ee8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006eec:	b29a      	uxth	r2, r3
 8006eee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006ef2:	801a      	strh	r2, [r3, #0]
 8006ef4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006ef8:	881b      	ldrh	r3, [r3, #0]
 8006efa:	b29b      	uxth	r3, r3
 8006efc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f00:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f04:	b29a      	uxth	r2, r3
 8006f06:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006f0a:	801a      	strh	r2, [r3, #0]
 8006f0c:	e065      	b.n	8006fda <USB_EPStartXfer+0xd60>
 8006f0e:	463b      	mov	r3, r7
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	691b      	ldr	r3, [r3, #16]
 8006f14:	2b3e      	cmp	r3, #62	; 0x3e
 8006f16:	d81a      	bhi.n	8006f4e <USB_EPStartXfer+0xcd4>
 8006f18:	463b      	mov	r3, r7
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	691b      	ldr	r3, [r3, #16]
 8006f1e:	085b      	lsrs	r3, r3, #1
 8006f20:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006f24:	463b      	mov	r3, r7
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	691b      	ldr	r3, [r3, #16]
 8006f2a:	f003 0301 	and.w	r3, r3, #1
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d004      	beq.n	8006f3c <USB_EPStartXfer+0xcc2>
 8006f32:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006f36:	3301      	adds	r3, #1
 8006f38:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006f3c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006f40:	b29b      	uxth	r3, r3
 8006f42:	029b      	lsls	r3, r3, #10
 8006f44:	b29a      	uxth	r2, r3
 8006f46:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006f4a:	801a      	strh	r2, [r3, #0]
 8006f4c:	e045      	b.n	8006fda <USB_EPStartXfer+0xd60>
 8006f4e:	463b      	mov	r3, r7
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	691b      	ldr	r3, [r3, #16]
 8006f54:	095b      	lsrs	r3, r3, #5
 8006f56:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006f5a:	463b      	mov	r3, r7
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	691b      	ldr	r3, [r3, #16]
 8006f60:	f003 031f 	and.w	r3, r3, #31
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d104      	bne.n	8006f72 <USB_EPStartXfer+0xcf8>
 8006f68:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006f6c:	3b01      	subs	r3, #1
 8006f6e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006f72:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006f76:	b29b      	uxth	r3, r3
 8006f78:	029b      	lsls	r3, r3, #10
 8006f7a:	b29b      	uxth	r3, r3
 8006f7c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f80:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f84:	b29a      	uxth	r2, r3
 8006f86:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006f8a:	801a      	strh	r2, [r3, #0]
 8006f8c:	e025      	b.n	8006fda <USB_EPStartXfer+0xd60>
 8006f8e:	463b      	mov	r3, r7
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	785b      	ldrb	r3, [r3, #1]
 8006f94:	2b01      	cmp	r3, #1
 8006f96:	d120      	bne.n	8006fda <USB_EPStartXfer+0xd60>
 8006f98:	1d3b      	adds	r3, r7, #4
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006fa0:	1d3b      	adds	r3, r7, #4
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006fa8:	b29b      	uxth	r3, r3
 8006faa:	461a      	mov	r2, r3
 8006fac:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006fb0:	4413      	add	r3, r2
 8006fb2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006fb6:	463b      	mov	r3, r7
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	781b      	ldrb	r3, [r3, #0]
 8006fbc:	00da      	lsls	r2, r3, #3
 8006fbe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006fc2:	4413      	add	r3, r2
 8006fc4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006fc8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006fcc:	463b      	mov	r3, r7
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	691b      	ldr	r3, [r3, #16]
 8006fd2:	b29a      	uxth	r2, r3
 8006fd4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006fd8:	801a      	strh	r2, [r3, #0]
 8006fda:	1d3b      	adds	r3, r7, #4
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006fe2:	463b      	mov	r3, r7
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	785b      	ldrb	r3, [r3, #1]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d175      	bne.n	80070d8 <USB_EPStartXfer+0xe5e>
 8006fec:	1d3b      	adds	r3, r7, #4
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006ff4:	1d3b      	adds	r3, r7, #4
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ffc:	b29b      	uxth	r3, r3
 8006ffe:	461a      	mov	r2, r3
 8007000:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007004:	4413      	add	r3, r2
 8007006:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800700a:	463b      	mov	r3, r7
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	781b      	ldrb	r3, [r3, #0]
 8007010:	00da      	lsls	r2, r3, #3
 8007012:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007016:	4413      	add	r3, r2
 8007018:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800701c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007020:	463b      	mov	r3, r7
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	691b      	ldr	r3, [r3, #16]
 8007026:	2b00      	cmp	r3, #0
 8007028:	d116      	bne.n	8007058 <USB_EPStartXfer+0xdde>
 800702a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800702e:	881b      	ldrh	r3, [r3, #0]
 8007030:	b29b      	uxth	r3, r3
 8007032:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007036:	b29a      	uxth	r2, r3
 8007038:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800703c:	801a      	strh	r2, [r3, #0]
 800703e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007042:	881b      	ldrh	r3, [r3, #0]
 8007044:	b29b      	uxth	r3, r3
 8007046:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800704a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800704e:	b29a      	uxth	r2, r3
 8007050:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007054:	801a      	strh	r2, [r3, #0]
 8007056:	e061      	b.n	800711c <USB_EPStartXfer+0xea2>
 8007058:	463b      	mov	r3, r7
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	691b      	ldr	r3, [r3, #16]
 800705e:	2b3e      	cmp	r3, #62	; 0x3e
 8007060:	d81a      	bhi.n	8007098 <USB_EPStartXfer+0xe1e>
 8007062:	463b      	mov	r3, r7
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	691b      	ldr	r3, [r3, #16]
 8007068:	085b      	lsrs	r3, r3, #1
 800706a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800706e:	463b      	mov	r3, r7
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	691b      	ldr	r3, [r3, #16]
 8007074:	f003 0301 	and.w	r3, r3, #1
 8007078:	2b00      	cmp	r3, #0
 800707a:	d004      	beq.n	8007086 <USB_EPStartXfer+0xe0c>
 800707c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007080:	3301      	adds	r3, #1
 8007082:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007086:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800708a:	b29b      	uxth	r3, r3
 800708c:	029b      	lsls	r3, r3, #10
 800708e:	b29a      	uxth	r2, r3
 8007090:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007094:	801a      	strh	r2, [r3, #0]
 8007096:	e041      	b.n	800711c <USB_EPStartXfer+0xea2>
 8007098:	463b      	mov	r3, r7
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	691b      	ldr	r3, [r3, #16]
 800709e:	095b      	lsrs	r3, r3, #5
 80070a0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80070a4:	463b      	mov	r3, r7
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	691b      	ldr	r3, [r3, #16]
 80070aa:	f003 031f 	and.w	r3, r3, #31
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d104      	bne.n	80070bc <USB_EPStartXfer+0xe42>
 80070b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070b6:	3b01      	subs	r3, #1
 80070b8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80070bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070c0:	b29b      	uxth	r3, r3
 80070c2:	029b      	lsls	r3, r3, #10
 80070c4:	b29b      	uxth	r3, r3
 80070c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80070ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80070ce:	b29a      	uxth	r2, r3
 80070d0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80070d4:	801a      	strh	r2, [r3, #0]
 80070d6:	e021      	b.n	800711c <USB_EPStartXfer+0xea2>
 80070d8:	463b      	mov	r3, r7
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	785b      	ldrb	r3, [r3, #1]
 80070de:	2b01      	cmp	r3, #1
 80070e0:	d11c      	bne.n	800711c <USB_EPStartXfer+0xea2>
 80070e2:	1d3b      	adds	r3, r7, #4
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80070ea:	b29b      	uxth	r3, r3
 80070ec:	461a      	mov	r2, r3
 80070ee:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80070f2:	4413      	add	r3, r2
 80070f4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80070f8:	463b      	mov	r3, r7
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	781b      	ldrb	r3, [r3, #0]
 80070fe:	00da      	lsls	r2, r3, #3
 8007100:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007104:	4413      	add	r3, r2
 8007106:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800710a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800710e:	463b      	mov	r3, r7
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	691b      	ldr	r3, [r3, #16]
 8007114:	b29a      	uxth	r2, r3
 8007116:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800711a:	801a      	strh	r2, [r3, #0]
        /*Coming from ISR*/
        if (ep->xfer_count != 0U)
 800711c:	463b      	mov	r3, r7
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	69db      	ldr	r3, [r3, #28]
 8007122:	2b00      	cmp	r3, #0
 8007124:	f000 81a4 	beq.w	8007470 <USB_EPStartXfer+0x11f6>
        {
          /* update last value to check if there is blocking state*/
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8007128:	1d3b      	adds	r3, r7, #4
 800712a:	681a      	ldr	r2, [r3, #0]
 800712c:	463b      	mov	r3, r7
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	781b      	ldrb	r3, [r3, #0]
 8007132:	009b      	lsls	r3, r3, #2
 8007134:	4413      	add	r3, r2
 8007136:	881b      	ldrh	r3, [r3, #0]
 8007138:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800713c:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8007140:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007144:	2b00      	cmp	r3, #0
 8007146:	d005      	beq.n	8007154 <USB_EPStartXfer+0xeda>
 8007148:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800714c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007150:	2b00      	cmp	r3, #0
 8007152:	d10d      	bne.n	8007170 <USB_EPStartXfer+0xef6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007154:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8007158:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800715c:	2b00      	cmp	r3, #0
 800715e:	f040 8187 	bne.w	8007470 <USB_EPStartXfer+0x11f6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007162:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8007166:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800716a:	2b00      	cmp	r3, #0
 800716c:	f040 8180 	bne.w	8007470 <USB_EPStartXfer+0x11f6>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8007170:	1d3b      	adds	r3, r7, #4
 8007172:	681a      	ldr	r2, [r3, #0]
 8007174:	463b      	mov	r3, r7
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	781b      	ldrb	r3, [r3, #0]
 800717a:	009b      	lsls	r3, r3, #2
 800717c:	4413      	add	r3, r2
 800717e:	881b      	ldrh	r3, [r3, #0]
 8007180:	b29b      	uxth	r3, r3
 8007182:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007186:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800718a:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 800718e:	1d3b      	adds	r3, r7, #4
 8007190:	681a      	ldr	r2, [r3, #0]
 8007192:	463b      	mov	r3, r7
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	781b      	ldrb	r3, [r3, #0]
 8007198:	009b      	lsls	r3, r3, #2
 800719a:	441a      	add	r2, r3
 800719c:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 80071a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80071a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80071a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80071ac:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80071b0:	b29b      	uxth	r3, r3
 80071b2:	8013      	strh	r3, [r2, #0]
 80071b4:	e15c      	b.n	8007470 <USB_EPStartXfer+0x11f6>
          }
        }
      }
      /*iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80071b6:	463b      	mov	r3, r7
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	78db      	ldrb	r3, [r3, #3]
 80071bc:	2b01      	cmp	r3, #1
 80071be:	f040 8155 	bne.w	800746c <USB_EPStartXfer+0x11f2>
      {
        /* Multi packet transfer*/
        if (ep->xfer_len > ep->maxpacket)
 80071c2:	463b      	mov	r3, r7
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	699a      	ldr	r2, [r3, #24]
 80071c8:	463b      	mov	r3, r7
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	691b      	ldr	r3, [r3, #16]
 80071ce:	429a      	cmp	r2, r3
 80071d0:	d90e      	bls.n	80071f0 <USB_EPStartXfer+0xf76>
        {
          len = ep->maxpacket;
 80071d2:	463b      	mov	r3, r7
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	691b      	ldr	r3, [r3, #16]
 80071d8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          ep->xfer_len -= len;
 80071dc:	463b      	mov	r3, r7
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	699a      	ldr	r2, [r3, #24]
 80071e2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80071e6:	1ad2      	subs	r2, r2, r3
 80071e8:	463b      	mov	r3, r7
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	619a      	str	r2, [r3, #24]
 80071ee:	e008      	b.n	8007202 <USB_EPStartXfer+0xf88>
        }
        else
        {
          len = ep->xfer_len;
 80071f0:	463b      	mov	r3, r7
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	699b      	ldr	r3, [r3, #24]
 80071f6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          ep->xfer_len = 0U;
 80071fa:	463b      	mov	r3, r7
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	2200      	movs	r2, #0
 8007200:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8007202:	463b      	mov	r3, r7
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	785b      	ldrb	r3, [r3, #1]
 8007208:	2b00      	cmp	r3, #0
 800720a:	d16f      	bne.n	80072ec <USB_EPStartXfer+0x1072>
 800720c:	1d3b      	adds	r3, r7, #4
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007214:	1d3b      	adds	r3, r7, #4
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800721c:	b29b      	uxth	r3, r3
 800721e:	461a      	mov	r2, r3
 8007220:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007224:	4413      	add	r3, r2
 8007226:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800722a:	463b      	mov	r3, r7
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	781b      	ldrb	r3, [r3, #0]
 8007230:	00da      	lsls	r2, r3, #3
 8007232:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007236:	4413      	add	r3, r2
 8007238:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800723c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007240:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007244:	2b00      	cmp	r3, #0
 8007246:	d116      	bne.n	8007276 <USB_EPStartXfer+0xffc>
 8007248:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800724c:	881b      	ldrh	r3, [r3, #0]
 800724e:	b29b      	uxth	r3, r3
 8007250:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007254:	b29a      	uxth	r2, r3
 8007256:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800725a:	801a      	strh	r2, [r3, #0]
 800725c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007260:	881b      	ldrh	r3, [r3, #0]
 8007262:	b29b      	uxth	r3, r3
 8007264:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007268:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800726c:	b29a      	uxth	r2, r3
 800726e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007272:	801a      	strh	r2, [r3, #0]
 8007274:	e05f      	b.n	8007336 <USB_EPStartXfer+0x10bc>
 8007276:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800727a:	2b3e      	cmp	r3, #62	; 0x3e
 800727c:	d818      	bhi.n	80072b0 <USB_EPStartXfer+0x1036>
 800727e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007282:	085b      	lsrs	r3, r3, #1
 8007284:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007288:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800728c:	f003 0301 	and.w	r3, r3, #1
 8007290:	2b00      	cmp	r3, #0
 8007292:	d004      	beq.n	800729e <USB_EPStartXfer+0x1024>
 8007294:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007298:	3301      	adds	r3, #1
 800729a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800729e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80072a2:	b29b      	uxth	r3, r3
 80072a4:	029b      	lsls	r3, r3, #10
 80072a6:	b29a      	uxth	r2, r3
 80072a8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80072ac:	801a      	strh	r2, [r3, #0]
 80072ae:	e042      	b.n	8007336 <USB_EPStartXfer+0x10bc>
 80072b0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80072b4:	095b      	lsrs	r3, r3, #5
 80072b6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80072ba:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80072be:	f003 031f 	and.w	r3, r3, #31
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d104      	bne.n	80072d0 <USB_EPStartXfer+0x1056>
 80072c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80072ca:	3b01      	subs	r3, #1
 80072cc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80072d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80072d4:	b29b      	uxth	r3, r3
 80072d6:	029b      	lsls	r3, r3, #10
 80072d8:	b29b      	uxth	r3, r3
 80072da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80072de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80072e2:	b29a      	uxth	r2, r3
 80072e4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80072e8:	801a      	strh	r2, [r3, #0]
 80072ea:	e024      	b.n	8007336 <USB_EPStartXfer+0x10bc>
 80072ec:	463b      	mov	r3, r7
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	785b      	ldrb	r3, [r3, #1]
 80072f2:	2b01      	cmp	r3, #1
 80072f4:	d11f      	bne.n	8007336 <USB_EPStartXfer+0x10bc>
 80072f6:	1d3b      	adds	r3, r7, #4
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80072fe:	1d3b      	adds	r3, r7, #4
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007306:	b29b      	uxth	r3, r3
 8007308:	461a      	mov	r2, r3
 800730a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800730e:	4413      	add	r3, r2
 8007310:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007314:	463b      	mov	r3, r7
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	781b      	ldrb	r3, [r3, #0]
 800731a:	00da      	lsls	r2, r3, #3
 800731c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007320:	4413      	add	r3, r2
 8007322:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007326:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800732a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800732e:	b29a      	uxth	r2, r3
 8007330:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007334:	801a      	strh	r2, [r3, #0]
 8007336:	1d3b      	adds	r3, r7, #4
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800733e:	463b      	mov	r3, r7
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	785b      	ldrb	r3, [r3, #1]
 8007344:	2b00      	cmp	r3, #0
 8007346:	d16f      	bne.n	8007428 <USB_EPStartXfer+0x11ae>
 8007348:	1d3b      	adds	r3, r7, #4
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007350:	1d3b      	adds	r3, r7, #4
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007358:	b29b      	uxth	r3, r3
 800735a:	461a      	mov	r2, r3
 800735c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007360:	4413      	add	r3, r2
 8007362:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007366:	463b      	mov	r3, r7
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	781b      	ldrb	r3, [r3, #0]
 800736c:	00da      	lsls	r2, r3, #3
 800736e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007372:	4413      	add	r3, r2
 8007374:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007378:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800737c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007380:	2b00      	cmp	r3, #0
 8007382:	d116      	bne.n	80073b2 <USB_EPStartXfer+0x1138>
 8007384:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007388:	881b      	ldrh	r3, [r3, #0]
 800738a:	b29b      	uxth	r3, r3
 800738c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007390:	b29a      	uxth	r2, r3
 8007392:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007396:	801a      	strh	r2, [r3, #0]
 8007398:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800739c:	881b      	ldrh	r3, [r3, #0]
 800739e:	b29b      	uxth	r3, r3
 80073a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80073a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80073a8:	b29a      	uxth	r2, r3
 80073aa:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80073ae:	801a      	strh	r2, [r3, #0]
 80073b0:	e05e      	b.n	8007470 <USB_EPStartXfer+0x11f6>
 80073b2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80073b6:	2b3e      	cmp	r3, #62	; 0x3e
 80073b8:	d818      	bhi.n	80073ec <USB_EPStartXfer+0x1172>
 80073ba:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80073be:	085b      	lsrs	r3, r3, #1
 80073c0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80073c4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80073c8:	f003 0301 	and.w	r3, r3, #1
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d004      	beq.n	80073da <USB_EPStartXfer+0x1160>
 80073d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80073d4:	3301      	adds	r3, #1
 80073d6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80073da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80073de:	b29b      	uxth	r3, r3
 80073e0:	029b      	lsls	r3, r3, #10
 80073e2:	b29a      	uxth	r2, r3
 80073e4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80073e8:	801a      	strh	r2, [r3, #0]
 80073ea:	e041      	b.n	8007470 <USB_EPStartXfer+0x11f6>
 80073ec:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80073f0:	095b      	lsrs	r3, r3, #5
 80073f2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80073f6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80073fa:	f003 031f 	and.w	r3, r3, #31
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d104      	bne.n	800740c <USB_EPStartXfer+0x1192>
 8007402:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007406:	3b01      	subs	r3, #1
 8007408:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800740c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007410:	b29b      	uxth	r3, r3
 8007412:	029b      	lsls	r3, r3, #10
 8007414:	b29b      	uxth	r3, r3
 8007416:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800741a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800741e:	b29a      	uxth	r2, r3
 8007420:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007424:	801a      	strh	r2, [r3, #0]
 8007426:	e023      	b.n	8007470 <USB_EPStartXfer+0x11f6>
 8007428:	463b      	mov	r3, r7
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	785b      	ldrb	r3, [r3, #1]
 800742e:	2b01      	cmp	r3, #1
 8007430:	d11e      	bne.n	8007470 <USB_EPStartXfer+0x11f6>
 8007432:	1d3b      	adds	r3, r7, #4
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800743a:	b29b      	uxth	r3, r3
 800743c:	461a      	mov	r2, r3
 800743e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007442:	4413      	add	r3, r2
 8007444:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007448:	463b      	mov	r3, r7
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	781b      	ldrb	r3, [r3, #0]
 800744e:	00da      	lsls	r2, r3, #3
 8007450:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007454:	4413      	add	r3, r2
 8007456:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800745a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800745e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007462:	b29a      	uxth	r2, r3
 8007464:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007468:	801a      	strh	r2, [r3, #0]
 800746a:	e001      	b.n	8007470 <USB_EPStartXfer+0x11f6>
      }
      else
      {
        return HAL_ERROR;
 800746c:	2301      	movs	r3, #1
 800746e:	e02e      	b.n	80074ce <USB_EPStartXfer+0x1254>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007470:	1d3b      	adds	r3, r7, #4
 8007472:	681a      	ldr	r2, [r3, #0]
 8007474:	463b      	mov	r3, r7
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	781b      	ldrb	r3, [r3, #0]
 800747a:	009b      	lsls	r3, r3, #2
 800747c:	4413      	add	r3, r2
 800747e:	881b      	ldrh	r3, [r3, #0]
 8007480:	b29b      	uxth	r3, r3
 8007482:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007486:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800748a:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 800748e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8007492:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007496:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 800749a:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800749e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80074a2:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 80074a6:	1d3b      	adds	r3, r7, #4
 80074a8:	681a      	ldr	r2, [r3, #0]
 80074aa:	463b      	mov	r3, r7
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	781b      	ldrb	r3, [r3, #0]
 80074b0:	009b      	lsls	r3, r3, #2
 80074b2:	441a      	add	r2, r3
 80074b4:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80074b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80074bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80074c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80074c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80074c8:	b29b      	uxth	r3, r3
 80074ca:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80074cc:	2300      	movs	r3, #0
}
 80074ce:	4618      	mov	r0, r3
 80074d0:	f507 7788 	add.w	r7, r7, #272	; 0x110
 80074d4:	46bd      	mov	sp, r7
 80074d6:	bd80      	pop	{r7, pc}

080074d8 <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80074d8:	b480      	push	{r7}
 80074da:	b085      	sub	sp, #20
 80074dc:	af00      	add	r7, sp, #0
 80074de:	6078      	str	r0, [r7, #4]
 80074e0:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80074e2:	683b      	ldr	r3, [r7, #0]
 80074e4:	785b      	ldrb	r3, [r3, #1]
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d020      	beq.n	800752c <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80074ea:	687a      	ldr	r2, [r7, #4]
 80074ec:	683b      	ldr	r3, [r7, #0]
 80074ee:	781b      	ldrb	r3, [r3, #0]
 80074f0:	009b      	lsls	r3, r3, #2
 80074f2:	4413      	add	r3, r2
 80074f4:	881b      	ldrh	r3, [r3, #0]
 80074f6:	b29b      	uxth	r3, r3
 80074f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80074fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007500:	81bb      	strh	r3, [r7, #12]
 8007502:	89bb      	ldrh	r3, [r7, #12]
 8007504:	f083 0310 	eor.w	r3, r3, #16
 8007508:	81bb      	strh	r3, [r7, #12]
 800750a:	687a      	ldr	r2, [r7, #4]
 800750c:	683b      	ldr	r3, [r7, #0]
 800750e:	781b      	ldrb	r3, [r3, #0]
 8007510:	009b      	lsls	r3, r3, #2
 8007512:	441a      	add	r2, r3
 8007514:	89bb      	ldrh	r3, [r7, #12]
 8007516:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800751a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800751e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007522:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007526:	b29b      	uxth	r3, r3
 8007528:	8013      	strh	r3, [r2, #0]
 800752a:	e01f      	b.n	800756c <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800752c:	687a      	ldr	r2, [r7, #4]
 800752e:	683b      	ldr	r3, [r7, #0]
 8007530:	781b      	ldrb	r3, [r3, #0]
 8007532:	009b      	lsls	r3, r3, #2
 8007534:	4413      	add	r3, r2
 8007536:	881b      	ldrh	r3, [r3, #0]
 8007538:	b29b      	uxth	r3, r3
 800753a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800753e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007542:	81fb      	strh	r3, [r7, #14]
 8007544:	89fb      	ldrh	r3, [r7, #14]
 8007546:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800754a:	81fb      	strh	r3, [r7, #14]
 800754c:	687a      	ldr	r2, [r7, #4]
 800754e:	683b      	ldr	r3, [r7, #0]
 8007550:	781b      	ldrb	r3, [r3, #0]
 8007552:	009b      	lsls	r3, r3, #2
 8007554:	441a      	add	r2, r3
 8007556:	89fb      	ldrh	r3, [r7, #14]
 8007558:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800755c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007560:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007564:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007568:	b29b      	uxth	r3, r3
 800756a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800756c:	2300      	movs	r3, #0
}
 800756e:	4618      	mov	r0, r3
 8007570:	3714      	adds	r7, #20
 8007572:	46bd      	mov	sp, r7
 8007574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007578:	4770      	bx	lr

0800757a <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800757a:	b480      	push	{r7}
 800757c:	b087      	sub	sp, #28
 800757e:	af00      	add	r7, sp, #0
 8007580:	6078      	str	r0, [r7, #4]
 8007582:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007584:	683b      	ldr	r3, [r7, #0]
 8007586:	7b1b      	ldrb	r3, [r3, #12]
 8007588:	2b00      	cmp	r3, #0
 800758a:	f040 809d 	bne.w	80076c8 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800758e:	683b      	ldr	r3, [r7, #0]
 8007590:	785b      	ldrb	r3, [r3, #1]
 8007592:	2b00      	cmp	r3, #0
 8007594:	d04c      	beq.n	8007630 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007596:	687a      	ldr	r2, [r7, #4]
 8007598:	683b      	ldr	r3, [r7, #0]
 800759a:	781b      	ldrb	r3, [r3, #0]
 800759c:	009b      	lsls	r3, r3, #2
 800759e:	4413      	add	r3, r2
 80075a0:	881b      	ldrh	r3, [r3, #0]
 80075a2:	823b      	strh	r3, [r7, #16]
 80075a4:	8a3b      	ldrh	r3, [r7, #16]
 80075a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d01b      	beq.n	80075e6 <USB_EPClearStall+0x6c>
 80075ae:	687a      	ldr	r2, [r7, #4]
 80075b0:	683b      	ldr	r3, [r7, #0]
 80075b2:	781b      	ldrb	r3, [r3, #0]
 80075b4:	009b      	lsls	r3, r3, #2
 80075b6:	4413      	add	r3, r2
 80075b8:	881b      	ldrh	r3, [r3, #0]
 80075ba:	b29b      	uxth	r3, r3
 80075bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80075c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075c4:	81fb      	strh	r3, [r7, #14]
 80075c6:	687a      	ldr	r2, [r7, #4]
 80075c8:	683b      	ldr	r3, [r7, #0]
 80075ca:	781b      	ldrb	r3, [r3, #0]
 80075cc:	009b      	lsls	r3, r3, #2
 80075ce:	441a      	add	r2, r3
 80075d0:	89fb      	ldrh	r3, [r7, #14]
 80075d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80075d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80075da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80075de:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80075e2:	b29b      	uxth	r3, r3
 80075e4:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80075e6:	683b      	ldr	r3, [r7, #0]
 80075e8:	78db      	ldrb	r3, [r3, #3]
 80075ea:	2b01      	cmp	r3, #1
 80075ec:	d06c      	beq.n	80076c8 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80075ee:	687a      	ldr	r2, [r7, #4]
 80075f0:	683b      	ldr	r3, [r7, #0]
 80075f2:	781b      	ldrb	r3, [r3, #0]
 80075f4:	009b      	lsls	r3, r3, #2
 80075f6:	4413      	add	r3, r2
 80075f8:	881b      	ldrh	r3, [r3, #0]
 80075fa:	b29b      	uxth	r3, r3
 80075fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007600:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007604:	81bb      	strh	r3, [r7, #12]
 8007606:	89bb      	ldrh	r3, [r7, #12]
 8007608:	f083 0320 	eor.w	r3, r3, #32
 800760c:	81bb      	strh	r3, [r7, #12]
 800760e:	687a      	ldr	r2, [r7, #4]
 8007610:	683b      	ldr	r3, [r7, #0]
 8007612:	781b      	ldrb	r3, [r3, #0]
 8007614:	009b      	lsls	r3, r3, #2
 8007616:	441a      	add	r2, r3
 8007618:	89bb      	ldrh	r3, [r7, #12]
 800761a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800761e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007622:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007626:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800762a:	b29b      	uxth	r3, r3
 800762c:	8013      	strh	r3, [r2, #0]
 800762e:	e04b      	b.n	80076c8 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007630:	687a      	ldr	r2, [r7, #4]
 8007632:	683b      	ldr	r3, [r7, #0]
 8007634:	781b      	ldrb	r3, [r3, #0]
 8007636:	009b      	lsls	r3, r3, #2
 8007638:	4413      	add	r3, r2
 800763a:	881b      	ldrh	r3, [r3, #0]
 800763c:	82fb      	strh	r3, [r7, #22]
 800763e:	8afb      	ldrh	r3, [r7, #22]
 8007640:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007644:	2b00      	cmp	r3, #0
 8007646:	d01b      	beq.n	8007680 <USB_EPClearStall+0x106>
 8007648:	687a      	ldr	r2, [r7, #4]
 800764a:	683b      	ldr	r3, [r7, #0]
 800764c:	781b      	ldrb	r3, [r3, #0]
 800764e:	009b      	lsls	r3, r3, #2
 8007650:	4413      	add	r3, r2
 8007652:	881b      	ldrh	r3, [r3, #0]
 8007654:	b29b      	uxth	r3, r3
 8007656:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800765a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800765e:	82bb      	strh	r3, [r7, #20]
 8007660:	687a      	ldr	r2, [r7, #4]
 8007662:	683b      	ldr	r3, [r7, #0]
 8007664:	781b      	ldrb	r3, [r3, #0]
 8007666:	009b      	lsls	r3, r3, #2
 8007668:	441a      	add	r2, r3
 800766a:	8abb      	ldrh	r3, [r7, #20]
 800766c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007670:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007674:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007678:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800767c:	b29b      	uxth	r3, r3
 800767e:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007680:	687a      	ldr	r2, [r7, #4]
 8007682:	683b      	ldr	r3, [r7, #0]
 8007684:	781b      	ldrb	r3, [r3, #0]
 8007686:	009b      	lsls	r3, r3, #2
 8007688:	4413      	add	r3, r2
 800768a:	881b      	ldrh	r3, [r3, #0]
 800768c:	b29b      	uxth	r3, r3
 800768e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007692:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007696:	827b      	strh	r3, [r7, #18]
 8007698:	8a7b      	ldrh	r3, [r7, #18]
 800769a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800769e:	827b      	strh	r3, [r7, #18]
 80076a0:	8a7b      	ldrh	r3, [r7, #18]
 80076a2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80076a6:	827b      	strh	r3, [r7, #18]
 80076a8:	687a      	ldr	r2, [r7, #4]
 80076aa:	683b      	ldr	r3, [r7, #0]
 80076ac:	781b      	ldrb	r3, [r3, #0]
 80076ae:	009b      	lsls	r3, r3, #2
 80076b0:	441a      	add	r2, r3
 80076b2:	8a7b      	ldrh	r3, [r7, #18]
 80076b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80076b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80076bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80076c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80076c4:	b29b      	uxth	r3, r3
 80076c6:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80076c8:	2300      	movs	r3, #0
}
 80076ca:	4618      	mov	r0, r3
 80076cc:	371c      	adds	r7, #28
 80076ce:	46bd      	mov	sp, r7
 80076d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d4:	4770      	bx	lr

080076d6 <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80076d6:	b480      	push	{r7}
 80076d8:	b083      	sub	sp, #12
 80076da:	af00      	add	r7, sp, #0
 80076dc:	6078      	str	r0, [r7, #4]
 80076de:	460b      	mov	r3, r1
 80076e0:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80076e2:	78fb      	ldrb	r3, [r7, #3]
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d103      	bne.n	80076f0 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	2280      	movs	r2, #128	; 0x80
 80076ec:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80076f0:	2300      	movs	r3, #0
}
 80076f2:	4618      	mov	r0, r3
 80076f4:	370c      	adds	r7, #12
 80076f6:	46bd      	mov	sp, r7
 80076f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fc:	4770      	bx	lr

080076fe <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80076fe:	b480      	push	{r7}
 8007700:	b083      	sub	sp, #12
 8007702:	af00      	add	r7, sp, #0
 8007704:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800770c:	b29b      	uxth	r3, r3
 800770e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007712:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007716:	b29a      	uxth	r2, r3
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800771e:	2300      	movs	r3, #0
}
 8007720:	4618      	mov	r0, r3
 8007722:	370c      	adds	r7, #12
 8007724:	46bd      	mov	sp, r7
 8007726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772a:	4770      	bx	lr

0800772c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800772c:	b480      	push	{r7}
 800772e:	b085      	sub	sp, #20
 8007730:	af00      	add	r7, sp, #0
 8007732:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800773a:	b29b      	uxth	r3, r3
 800773c:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800773e:	68fb      	ldr	r3, [r7, #12]
}
 8007740:	4618      	mov	r0, r3
 8007742:	3714      	adds	r7, #20
 8007744:	46bd      	mov	sp, r7
 8007746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800774a:	4770      	bx	lr

0800774c <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800774c:	b480      	push	{r7}
 800774e:	b083      	sub	sp, #12
 8007750:	af00      	add	r7, sp, #0
 8007752:	6078      	str	r0, [r7, #4]
 8007754:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8007756:	2300      	movs	r3, #0
}
 8007758:	4618      	mov	r0, r3
 800775a:	370c      	adds	r7, #12
 800775c:	46bd      	mov	sp, r7
 800775e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007762:	4770      	bx	lr

08007764 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007764:	b480      	push	{r7}
 8007766:	b08d      	sub	sp, #52	; 0x34
 8007768:	af00      	add	r7, sp, #0
 800776a:	60f8      	str	r0, [r7, #12]
 800776c:	60b9      	str	r1, [r7, #8]
 800776e:	4611      	mov	r1, r2
 8007770:	461a      	mov	r2, r3
 8007772:	460b      	mov	r3, r1
 8007774:	80fb      	strh	r3, [r7, #6]
 8007776:	4613      	mov	r3, r2
 8007778:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800777a:	88bb      	ldrh	r3, [r7, #4]
 800777c:	3301      	adds	r3, #1
 800777e:	085b      	lsrs	r3, r3, #1
 8007780:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007786:	68bb      	ldr	r3, [r7, #8]
 8007788:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800778a:	88fa      	ldrh	r2, [r7, #6]
 800778c:	69fb      	ldr	r3, [r7, #28]
 800778e:	4413      	add	r3, r2
 8007790:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007794:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8007796:	6a3b      	ldr	r3, [r7, #32]
 8007798:	62fb      	str	r3, [r7, #44]	; 0x2c
 800779a:	e01b      	b.n	80077d4 <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 800779c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800779e:	781b      	ldrb	r3, [r3, #0]
 80077a0:	61bb      	str	r3, [r7, #24]
    pBuf++;
 80077a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077a4:	3301      	adds	r3, #1
 80077a6:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 80077a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077aa:	781b      	ldrb	r3, [r3, #0]
 80077ac:	b29b      	uxth	r3, r3
 80077ae:	021b      	lsls	r3, r3, #8
 80077b0:	b29b      	uxth	r3, r3
 80077b2:	461a      	mov	r2, r3
 80077b4:	69bb      	ldr	r3, [r7, #24]
 80077b6:	4313      	orrs	r3, r2
 80077b8:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 80077ba:	697b      	ldr	r3, [r7, #20]
 80077bc:	b29a      	uxth	r2, r3
 80077be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077c0:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80077c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077c4:	3302      	adds	r3, #2
 80077c6:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 80077c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077ca:	3301      	adds	r3, #1
 80077cc:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 80077ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077d0:	3b01      	subs	r3, #1
 80077d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80077d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d1e0      	bne.n	800779c <USB_WritePMA+0x38>
  }
}
 80077da:	bf00      	nop
 80077dc:	3734      	adds	r7, #52	; 0x34
 80077de:	46bd      	mov	sp, r7
 80077e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e4:	4770      	bx	lr

080077e6 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80077e6:	b480      	push	{r7}
 80077e8:	b08b      	sub	sp, #44	; 0x2c
 80077ea:	af00      	add	r7, sp, #0
 80077ec:	60f8      	str	r0, [r7, #12]
 80077ee:	60b9      	str	r1, [r7, #8]
 80077f0:	4611      	mov	r1, r2
 80077f2:	461a      	mov	r2, r3
 80077f4:	460b      	mov	r3, r1
 80077f6:	80fb      	strh	r3, [r7, #6]
 80077f8:	4613      	mov	r3, r2
 80077fa:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80077fc:	88bb      	ldrh	r3, [r7, #4]
 80077fe:	085b      	lsrs	r3, r3, #1
 8007800:	b29b      	uxth	r3, r3
 8007802:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007808:	68bb      	ldr	r3, [r7, #8]
 800780a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800780c:	88fa      	ldrh	r2, [r7, #6]
 800780e:	697b      	ldr	r3, [r7, #20]
 8007810:	4413      	add	r3, r2
 8007812:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007816:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8007818:	69bb      	ldr	r3, [r7, #24]
 800781a:	627b      	str	r3, [r7, #36]	; 0x24
 800781c:	e018      	b.n	8007850 <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800781e:	6a3b      	ldr	r3, [r7, #32]
 8007820:	881b      	ldrh	r3, [r3, #0]
 8007822:	b29b      	uxth	r3, r3
 8007824:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8007826:	6a3b      	ldr	r3, [r7, #32]
 8007828:	3302      	adds	r3, #2
 800782a:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800782c:	693b      	ldr	r3, [r7, #16]
 800782e:	b2da      	uxtb	r2, r3
 8007830:	69fb      	ldr	r3, [r7, #28]
 8007832:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007834:	69fb      	ldr	r3, [r7, #28]
 8007836:	3301      	adds	r3, #1
 8007838:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800783a:	693b      	ldr	r3, [r7, #16]
 800783c:	0a1b      	lsrs	r3, r3, #8
 800783e:	b2da      	uxtb	r2, r3
 8007840:	69fb      	ldr	r3, [r7, #28]
 8007842:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007844:	69fb      	ldr	r3, [r7, #28]
 8007846:	3301      	adds	r3, #1
 8007848:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 800784a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800784c:	3b01      	subs	r3, #1
 800784e:	627b      	str	r3, [r7, #36]	; 0x24
 8007850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007852:	2b00      	cmp	r3, #0
 8007854:	d1e3      	bne.n	800781e <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8007856:	88bb      	ldrh	r3, [r7, #4]
 8007858:	f003 0301 	and.w	r3, r3, #1
 800785c:	b29b      	uxth	r3, r3
 800785e:	2b00      	cmp	r3, #0
 8007860:	d007      	beq.n	8007872 <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 8007862:	6a3b      	ldr	r3, [r7, #32]
 8007864:	881b      	ldrh	r3, [r3, #0]
 8007866:	b29b      	uxth	r3, r3
 8007868:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800786a:	693b      	ldr	r3, [r7, #16]
 800786c:	b2da      	uxtb	r2, r3
 800786e:	69fb      	ldr	r3, [r7, #28]
 8007870:	701a      	strb	r2, [r3, #0]
  }
}
 8007872:	bf00      	nop
 8007874:	372c      	adds	r7, #44	; 0x2c
 8007876:	46bd      	mov	sp, r7
 8007878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787c:	4770      	bx	lr

0800787e <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800787e:	b580      	push	{r7, lr}
 8007880:	b084      	sub	sp, #16
 8007882:	af00      	add	r7, sp, #0
 8007884:	6078      	str	r0, [r7, #4]
 8007886:	460b      	mov	r3, r1
 8007888:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800788a:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800788e:	f002 f89d 	bl	80099cc <USBD_static_malloc>
 8007892:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	2b00      	cmp	r3, #0
 8007898:	d105      	bne.n	80078a6 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	2200      	movs	r2, #0
 800789e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 80078a2:	2302      	movs	r3, #2
 80078a4:	e066      	b.n	8007974 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	68fa      	ldr	r2, [r7, #12]
 80078aa:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	7c1b      	ldrb	r3, [r3, #16]
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d119      	bne.n	80078ea <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80078b6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80078ba:	2202      	movs	r2, #2
 80078bc:	2181      	movs	r1, #129	; 0x81
 80078be:	6878      	ldr	r0, [r7, #4]
 80078c0:	f001 ff29 	bl	8009716 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	2201      	movs	r2, #1
 80078c8:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80078ca:	f44f 7300 	mov.w	r3, #512	; 0x200
 80078ce:	2202      	movs	r2, #2
 80078d0:	2101      	movs	r1, #1
 80078d2:	6878      	ldr	r0, [r7, #4]
 80078d4:	f001 ff1f 	bl	8009716 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	2201      	movs	r2, #1
 80078dc:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	2210      	movs	r2, #16
 80078e4:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 80078e8:	e016      	b.n	8007918 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80078ea:	2340      	movs	r3, #64	; 0x40
 80078ec:	2202      	movs	r2, #2
 80078ee:	2181      	movs	r1, #129	; 0x81
 80078f0:	6878      	ldr	r0, [r7, #4]
 80078f2:	f001 ff10 	bl	8009716 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	2201      	movs	r2, #1
 80078fa:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80078fc:	2340      	movs	r3, #64	; 0x40
 80078fe:	2202      	movs	r2, #2
 8007900:	2101      	movs	r1, #1
 8007902:	6878      	ldr	r0, [r7, #4]
 8007904:	f001 ff07 	bl	8009716 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	2201      	movs	r2, #1
 800790c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	2210      	movs	r2, #16
 8007914:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007918:	2308      	movs	r3, #8
 800791a:	2203      	movs	r2, #3
 800791c:	2182      	movs	r1, #130	; 0x82
 800791e:	6878      	ldr	r0, [r7, #4]
 8007920:	f001 fef9 	bl	8009716 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	2201      	movs	r2, #1
 8007928:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	2200      	movs	r2, #0
 800793a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	2200      	movs	r2, #0
 8007942:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	7c1b      	ldrb	r3, [r3, #16]
 800794a:	2b00      	cmp	r3, #0
 800794c:	d109      	bne.n	8007962 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007954:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007958:	2101      	movs	r1, #1
 800795a:	6878      	ldr	r0, [r7, #4]
 800795c:	f001 ffcb 	bl	80098f6 <USBD_LL_PrepareReceive>
 8007960:	e007      	b.n	8007972 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007968:	2340      	movs	r3, #64	; 0x40
 800796a:	2101      	movs	r1, #1
 800796c:	6878      	ldr	r0, [r7, #4]
 800796e:	f001 ffc2 	bl	80098f6 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007972:	2300      	movs	r3, #0
}
 8007974:	4618      	mov	r0, r3
 8007976:	3710      	adds	r7, #16
 8007978:	46bd      	mov	sp, r7
 800797a:	bd80      	pop	{r7, pc}

0800797c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800797c:	b580      	push	{r7, lr}
 800797e:	b082      	sub	sp, #8
 8007980:	af00      	add	r7, sp, #0
 8007982:	6078      	str	r0, [r7, #4]
 8007984:	460b      	mov	r3, r1
 8007986:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8007988:	2181      	movs	r1, #129	; 0x81
 800798a:	6878      	ldr	r0, [r7, #4]
 800798c:	f001 fee9 	bl	8009762 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	2200      	movs	r2, #0
 8007994:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8007996:	2101      	movs	r1, #1
 8007998:	6878      	ldr	r0, [r7, #4]
 800799a:	f001 fee2 	bl	8009762 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	2200      	movs	r2, #0
 80079a2:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80079a6:	2182      	movs	r1, #130	; 0x82
 80079a8:	6878      	ldr	r0, [r7, #4]
 80079aa:	f001 feda 	bl	8009762 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	2200      	movs	r2, #0
 80079b2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	2200      	movs	r2, #0
 80079ba:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d00e      	beq.n	80079e6 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80079ce:	685b      	ldr	r3, [r3, #4]
 80079d0:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80079d8:	4618      	mov	r0, r3
 80079da:	f002 f805 	bl	80099e8 <USBD_static_free>
    pdev->pClassData = NULL;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	2200      	movs	r2, #0
 80079e2:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80079e6:	2300      	movs	r3, #0
}
 80079e8:	4618      	mov	r0, r3
 80079ea:	3708      	adds	r7, #8
 80079ec:	46bd      	mov	sp, r7
 80079ee:	bd80      	pop	{r7, pc}

080079f0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80079f0:	b580      	push	{r7, lr}
 80079f2:	b086      	sub	sp, #24
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	6078      	str	r0, [r7, #4]
 80079f8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007a00:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8007a02:	2300      	movs	r3, #0
 8007a04:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8007a06:	2300      	movs	r3, #0
 8007a08:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8007a0a:	2300      	movs	r3, #0
 8007a0c:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007a0e:	683b      	ldr	r3, [r7, #0]
 8007a10:	781b      	ldrb	r3, [r3, #0]
 8007a12:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d03a      	beq.n	8007a90 <USBD_CDC_Setup+0xa0>
 8007a1a:	2b20      	cmp	r3, #32
 8007a1c:	f040 8097 	bne.w	8007b4e <USBD_CDC_Setup+0x15e>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8007a20:	683b      	ldr	r3, [r7, #0]
 8007a22:	88db      	ldrh	r3, [r3, #6]
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d029      	beq.n	8007a7c <USBD_CDC_Setup+0x8c>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8007a28:	683b      	ldr	r3, [r7, #0]
 8007a2a:	781b      	ldrb	r3, [r3, #0]
 8007a2c:	b25b      	sxtb	r3, r3
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	da11      	bge.n	8007a56 <USBD_CDC_Setup+0x66>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007a38:	689b      	ldr	r3, [r3, #8]
 8007a3a:	683a      	ldr	r2, [r7, #0]
 8007a3c:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8007a3e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007a40:	683a      	ldr	r2, [r7, #0]
 8007a42:	88d2      	ldrh	r2, [r2, #6]
 8007a44:	4798      	blx	r3
                                                            req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 8007a46:	6939      	ldr	r1, [r7, #16]
 8007a48:	683b      	ldr	r3, [r7, #0]
 8007a4a:	88db      	ldrh	r3, [r3, #6]
 8007a4c:	461a      	mov	r2, r3
 8007a4e:	6878      	ldr	r0, [r7, #4]
 8007a50:	f001 fa8d 	bl	8008f6e <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8007a54:	e082      	b.n	8007b5c <USBD_CDC_Setup+0x16c>
          hcdc->CmdOpCode = req->bRequest;
 8007a56:	683b      	ldr	r3, [r7, #0]
 8007a58:	785a      	ldrb	r2, [r3, #1]
 8007a5a:	693b      	ldr	r3, [r7, #16]
 8007a5c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8007a60:	683b      	ldr	r3, [r7, #0]
 8007a62:	88db      	ldrh	r3, [r3, #6]
 8007a64:	b2da      	uxtb	r2, r3
 8007a66:	693b      	ldr	r3, [r7, #16]
 8007a68:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8007a6c:	6939      	ldr	r1, [r7, #16]
 8007a6e:	683b      	ldr	r3, [r7, #0]
 8007a70:	88db      	ldrh	r3, [r3, #6]
 8007a72:	461a      	mov	r2, r3
 8007a74:	6878      	ldr	r0, [r7, #4]
 8007a76:	f001 faa6 	bl	8008fc6 <USBD_CtlPrepareRx>
      break;
 8007a7a:	e06f      	b.n	8007b5c <USBD_CDC_Setup+0x16c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007a82:	689b      	ldr	r3, [r3, #8]
 8007a84:	683a      	ldr	r2, [r7, #0]
 8007a86:	7850      	ldrb	r0, [r2, #1]
 8007a88:	2200      	movs	r2, #0
 8007a8a:	6839      	ldr	r1, [r7, #0]
 8007a8c:	4798      	blx	r3
      break;
 8007a8e:	e065      	b.n	8007b5c <USBD_CDC_Setup+0x16c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007a90:	683b      	ldr	r3, [r7, #0]
 8007a92:	785b      	ldrb	r3, [r3, #1]
 8007a94:	2b0b      	cmp	r3, #11
 8007a96:	d84f      	bhi.n	8007b38 <USBD_CDC_Setup+0x148>
 8007a98:	a201      	add	r2, pc, #4	; (adr r2, 8007aa0 <USBD_CDC_Setup+0xb0>)
 8007a9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a9e:	bf00      	nop
 8007aa0:	08007ad1 	.word	0x08007ad1
 8007aa4:	08007b47 	.word	0x08007b47
 8007aa8:	08007b39 	.word	0x08007b39
 8007aac:	08007b39 	.word	0x08007b39
 8007ab0:	08007b39 	.word	0x08007b39
 8007ab4:	08007b39 	.word	0x08007b39
 8007ab8:	08007b39 	.word	0x08007b39
 8007abc:	08007b39 	.word	0x08007b39
 8007ac0:	08007b39 	.word	0x08007b39
 8007ac4:	08007b39 	.word	0x08007b39
 8007ac8:	08007af9 	.word	0x08007af9
 8007acc:	08007b21 	.word	0x08007b21
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ad6:	2b03      	cmp	r3, #3
 8007ad8:	d107      	bne.n	8007aea <USBD_CDC_Setup+0xfa>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007ada:	f107 030c 	add.w	r3, r7, #12
 8007ade:	2202      	movs	r2, #2
 8007ae0:	4619      	mov	r1, r3
 8007ae2:	6878      	ldr	r0, [r7, #4]
 8007ae4:	f001 fa43 	bl	8008f6e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007ae8:	e030      	b.n	8007b4c <USBD_CDC_Setup+0x15c>
            USBD_CtlError(pdev, req);
 8007aea:	6839      	ldr	r1, [r7, #0]
 8007aec:	6878      	ldr	r0, [r7, #4]
 8007aee:	f001 f9cd 	bl	8008e8c <USBD_CtlError>
            ret = USBD_FAIL;
 8007af2:	2303      	movs	r3, #3
 8007af4:	75fb      	strb	r3, [r7, #23]
          break;
 8007af6:	e029      	b.n	8007b4c <USBD_CDC_Setup+0x15c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007afe:	2b03      	cmp	r3, #3
 8007b00:	d107      	bne.n	8007b12 <USBD_CDC_Setup+0x122>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007b02:	f107 030f 	add.w	r3, r7, #15
 8007b06:	2201      	movs	r2, #1
 8007b08:	4619      	mov	r1, r3
 8007b0a:	6878      	ldr	r0, [r7, #4]
 8007b0c:	f001 fa2f 	bl	8008f6e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007b10:	e01c      	b.n	8007b4c <USBD_CDC_Setup+0x15c>
            USBD_CtlError(pdev, req);
 8007b12:	6839      	ldr	r1, [r7, #0]
 8007b14:	6878      	ldr	r0, [r7, #4]
 8007b16:	f001 f9b9 	bl	8008e8c <USBD_CtlError>
            ret = USBD_FAIL;
 8007b1a:	2303      	movs	r3, #3
 8007b1c:	75fb      	strb	r3, [r7, #23]
          break;
 8007b1e:	e015      	b.n	8007b4c <USBD_CDC_Setup+0x15c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b26:	2b03      	cmp	r3, #3
 8007b28:	d00f      	beq.n	8007b4a <USBD_CDC_Setup+0x15a>
          {
            USBD_CtlError(pdev, req);
 8007b2a:	6839      	ldr	r1, [r7, #0]
 8007b2c:	6878      	ldr	r0, [r7, #4]
 8007b2e:	f001 f9ad 	bl	8008e8c <USBD_CtlError>
            ret = USBD_FAIL;
 8007b32:	2303      	movs	r3, #3
 8007b34:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007b36:	e008      	b.n	8007b4a <USBD_CDC_Setup+0x15a>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007b38:	6839      	ldr	r1, [r7, #0]
 8007b3a:	6878      	ldr	r0, [r7, #4]
 8007b3c:	f001 f9a6 	bl	8008e8c <USBD_CtlError>
          ret = USBD_FAIL;
 8007b40:	2303      	movs	r3, #3
 8007b42:	75fb      	strb	r3, [r7, #23]
          break;
 8007b44:	e002      	b.n	8007b4c <USBD_CDC_Setup+0x15c>
          break;
 8007b46:	bf00      	nop
 8007b48:	e008      	b.n	8007b5c <USBD_CDC_Setup+0x16c>
          break;
 8007b4a:	bf00      	nop
      }
      break;
 8007b4c:	e006      	b.n	8007b5c <USBD_CDC_Setup+0x16c>

    default:
      USBD_CtlError(pdev, req);
 8007b4e:	6839      	ldr	r1, [r7, #0]
 8007b50:	6878      	ldr	r0, [r7, #4]
 8007b52:	f001 f99b 	bl	8008e8c <USBD_CtlError>
      ret = USBD_FAIL;
 8007b56:	2303      	movs	r3, #3
 8007b58:	75fb      	strb	r3, [r7, #23]
      break;
 8007b5a:	bf00      	nop
  }

  return (uint8_t)ret;
 8007b5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b5e:	4618      	mov	r0, r3
 8007b60:	3718      	adds	r7, #24
 8007b62:	46bd      	mov	sp, r7
 8007b64:	bd80      	pop	{r7, pc}
 8007b66:	bf00      	nop

08007b68 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007b68:	b580      	push	{r7, lr}
 8007b6a:	b084      	sub	sp, #16
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	6078      	str	r0, [r7, #4]
 8007b70:	460b      	mov	r3, r1
 8007b72:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007b7a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d101      	bne.n	8007b8a <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007b86:	2303      	movs	r3, #3
 8007b88:	e04f      	b.n	8007c2a <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007b90:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8007b92:	78fa      	ldrb	r2, [r7, #3]
 8007b94:	6879      	ldr	r1, [r7, #4]
 8007b96:	4613      	mov	r3, r2
 8007b98:	009b      	lsls	r3, r3, #2
 8007b9a:	4413      	add	r3, r2
 8007b9c:	009b      	lsls	r3, r3, #2
 8007b9e:	440b      	add	r3, r1
 8007ba0:	3318      	adds	r3, #24
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d029      	beq.n	8007bfc <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8007ba8:	78fa      	ldrb	r2, [r7, #3]
 8007baa:	6879      	ldr	r1, [r7, #4]
 8007bac:	4613      	mov	r3, r2
 8007bae:	009b      	lsls	r3, r3, #2
 8007bb0:	4413      	add	r3, r2
 8007bb2:	009b      	lsls	r3, r3, #2
 8007bb4:	440b      	add	r3, r1
 8007bb6:	3318      	adds	r3, #24
 8007bb8:	681a      	ldr	r2, [r3, #0]
 8007bba:	78f9      	ldrb	r1, [r7, #3]
 8007bbc:	68f8      	ldr	r0, [r7, #12]
 8007bbe:	460b      	mov	r3, r1
 8007bc0:	009b      	lsls	r3, r3, #2
 8007bc2:	440b      	add	r3, r1
 8007bc4:	00db      	lsls	r3, r3, #3
 8007bc6:	4403      	add	r3, r0
 8007bc8:	3338      	adds	r3, #56	; 0x38
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	fbb2 f1f3 	udiv	r1, r2, r3
 8007bd0:	fb03 f301 	mul.w	r3, r3, r1
 8007bd4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d110      	bne.n	8007bfc <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8007bda:	78fa      	ldrb	r2, [r7, #3]
 8007bdc:	6879      	ldr	r1, [r7, #4]
 8007bde:	4613      	mov	r3, r2
 8007be0:	009b      	lsls	r3, r3, #2
 8007be2:	4413      	add	r3, r2
 8007be4:	009b      	lsls	r3, r3, #2
 8007be6:	440b      	add	r3, r1
 8007be8:	3318      	adds	r3, #24
 8007bea:	2200      	movs	r2, #0
 8007bec:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007bee:	78f9      	ldrb	r1, [r7, #3]
 8007bf0:	2300      	movs	r3, #0
 8007bf2:	2200      	movs	r2, #0
 8007bf4:	6878      	ldr	r0, [r7, #4]
 8007bf6:	f001 fe5d 	bl	80098b4 <USBD_LL_Transmit>
 8007bfa:	e015      	b.n	8007c28 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8007bfc:	68bb      	ldr	r3, [r7, #8]
 8007bfe:	2200      	movs	r2, #0
 8007c00:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007c0a:	691b      	ldr	r3, [r3, #16]
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d00b      	beq.n	8007c28 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007c16:	691b      	ldr	r3, [r3, #16]
 8007c18:	68ba      	ldr	r2, [r7, #8]
 8007c1a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8007c1e:	68ba      	ldr	r2, [r7, #8]
 8007c20:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8007c24:	78fa      	ldrb	r2, [r7, #3]
 8007c26:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8007c28:	2300      	movs	r3, #0
}
 8007c2a:	4618      	mov	r0, r3
 8007c2c:	3710      	adds	r7, #16
 8007c2e:	46bd      	mov	sp, r7
 8007c30:	bd80      	pop	{r7, pc}

08007c32 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007c32:	b580      	push	{r7, lr}
 8007c34:	b084      	sub	sp, #16
 8007c36:	af00      	add	r7, sp, #0
 8007c38:	6078      	str	r0, [r7, #4]
 8007c3a:	460b      	mov	r3, r1
 8007c3c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007c44:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d101      	bne.n	8007c54 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007c50:	2303      	movs	r3, #3
 8007c52:	e015      	b.n	8007c80 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007c54:	78fb      	ldrb	r3, [r7, #3]
 8007c56:	4619      	mov	r1, r3
 8007c58:	6878      	ldr	r0, [r7, #4]
 8007c5a:	f001 fe6d 	bl	8009938 <USBD_LL_GetRxDataSize>
 8007c5e:	4602      	mov	r2, r0
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007c6c:	68db      	ldr	r3, [r3, #12]
 8007c6e:	68fa      	ldr	r2, [r7, #12]
 8007c70:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007c74:	68fa      	ldr	r2, [r7, #12]
 8007c76:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007c7a:	4611      	mov	r1, r2
 8007c7c:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007c7e:	2300      	movs	r3, #0
}
 8007c80:	4618      	mov	r0, r3
 8007c82:	3710      	adds	r7, #16
 8007c84:	46bd      	mov	sp, r7
 8007c86:	bd80      	pop	{r7, pc}

08007c88 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007c88:	b580      	push	{r7, lr}
 8007c8a:	b084      	sub	sp, #16
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007c96:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d015      	beq.n	8007cce <USBD_CDC_EP0_RxReady+0x46>
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007ca8:	2bff      	cmp	r3, #255	; 0xff
 8007caa:	d010      	beq.n	8007cce <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007cb2:	689b      	ldr	r3, [r3, #8]
 8007cb4:	68fa      	ldr	r2, [r7, #12]
 8007cb6:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8007cba:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8007cbc:	68fa      	ldr	r2, [r7, #12]
 8007cbe:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007cc2:	b292      	uxth	r2, r2
 8007cc4:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	22ff      	movs	r2, #255	; 0xff
 8007cca:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8007cce:	2300      	movs	r3, #0
}
 8007cd0:	4618      	mov	r0, r3
 8007cd2:	3710      	adds	r7, #16
 8007cd4:	46bd      	mov	sp, r7
 8007cd6:	bd80      	pop	{r7, pc}

08007cd8 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007cd8:	b480      	push	{r7}
 8007cda:	b083      	sub	sp, #12
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	2243      	movs	r2, #67	; 0x43
 8007ce4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8007ce6:	4b03      	ldr	r3, [pc, #12]	; (8007cf4 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8007ce8:	4618      	mov	r0, r3
 8007cea:	370c      	adds	r7, #12
 8007cec:	46bd      	mov	sp, r7
 8007cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf2:	4770      	bx	lr
 8007cf4:	200000d0 	.word	0x200000d0

08007cf8 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007cf8:	b480      	push	{r7}
 8007cfa:	b083      	sub	sp, #12
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	2243      	movs	r2, #67	; 0x43
 8007d04:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8007d06:	4b03      	ldr	r3, [pc, #12]	; (8007d14 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8007d08:	4618      	mov	r0, r3
 8007d0a:	370c      	adds	r7, #12
 8007d0c:	46bd      	mov	sp, r7
 8007d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d12:	4770      	bx	lr
 8007d14:	2000008c 	.word	0x2000008c

08007d18 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007d18:	b480      	push	{r7}
 8007d1a:	b083      	sub	sp, #12
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	2243      	movs	r2, #67	; 0x43
 8007d24:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8007d26:	4b03      	ldr	r3, [pc, #12]	; (8007d34 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8007d28:	4618      	mov	r0, r3
 8007d2a:	370c      	adds	r7, #12
 8007d2c:	46bd      	mov	sp, r7
 8007d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d32:	4770      	bx	lr
 8007d34:	20000114 	.word	0x20000114

08007d38 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007d38:	b480      	push	{r7}
 8007d3a:	b083      	sub	sp, #12
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	220a      	movs	r2, #10
 8007d44:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8007d46:	4b03      	ldr	r3, [pc, #12]	; (8007d54 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007d48:	4618      	mov	r0, r3
 8007d4a:	370c      	adds	r7, #12
 8007d4c:	46bd      	mov	sp, r7
 8007d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d52:	4770      	bx	lr
 8007d54:	20000048 	.word	0x20000048

08007d58 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007d58:	b480      	push	{r7}
 8007d5a:	b083      	sub	sp, #12
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	6078      	str	r0, [r7, #4]
 8007d60:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007d62:	683b      	ldr	r3, [r7, #0]
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d101      	bne.n	8007d6c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007d68:	2303      	movs	r3, #3
 8007d6a:	e004      	b.n	8007d76 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	683a      	ldr	r2, [r7, #0]
 8007d70:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8007d74:	2300      	movs	r3, #0
}
 8007d76:	4618      	mov	r0, r3
 8007d78:	370c      	adds	r7, #12
 8007d7a:	46bd      	mov	sp, r7
 8007d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d80:	4770      	bx	lr

08007d82 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007d82:	b480      	push	{r7}
 8007d84:	b087      	sub	sp, #28
 8007d86:	af00      	add	r7, sp, #0
 8007d88:	60f8      	str	r0, [r7, #12]
 8007d8a:	60b9      	str	r1, [r7, #8]
 8007d8c:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007d94:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8007d96:	697b      	ldr	r3, [r7, #20]
 8007d98:	68ba      	ldr	r2, [r7, #8]
 8007d9a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007d9e:	697b      	ldr	r3, [r7, #20]
 8007da0:	687a      	ldr	r2, [r7, #4]
 8007da2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8007da6:	2300      	movs	r3, #0
}
 8007da8:	4618      	mov	r0, r3
 8007daa:	371c      	adds	r7, #28
 8007dac:	46bd      	mov	sp, r7
 8007dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db2:	4770      	bx	lr

08007db4 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007db4:	b480      	push	{r7}
 8007db6:	b085      	sub	sp, #20
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	6078      	str	r0, [r7, #4]
 8007dbc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007dc4:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	683a      	ldr	r2, [r7, #0]
 8007dca:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8007dce:	2300      	movs	r3, #0
}
 8007dd0:	4618      	mov	r0, r3
 8007dd2:	3714      	adds	r7, #20
 8007dd4:	46bd      	mov	sp, r7
 8007dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dda:	4770      	bx	lr

08007ddc <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007ddc:	b580      	push	{r7, lr}
 8007dde:	b084      	sub	sp, #16
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007dea:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8007dec:	2301      	movs	r3, #1
 8007dee:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d101      	bne.n	8007dfe <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007dfa:	2303      	movs	r3, #3
 8007dfc:	e01a      	b.n	8007e34 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8007dfe:	68bb      	ldr	r3, [r7, #8]
 8007e00:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d114      	bne.n	8007e32 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8007e08:	68bb      	ldr	r3, [r7, #8]
 8007e0a:	2201      	movs	r2, #1
 8007e0c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8007e10:	68bb      	ldr	r3, [r7, #8]
 8007e12:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8007e1a:	68bb      	ldr	r3, [r7, #8]
 8007e1c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8007e20:	68bb      	ldr	r3, [r7, #8]
 8007e22:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8007e26:	2181      	movs	r1, #129	; 0x81
 8007e28:	6878      	ldr	r0, [r7, #4]
 8007e2a:	f001 fd43 	bl	80098b4 <USBD_LL_Transmit>

    ret = USBD_OK;
 8007e2e:	2300      	movs	r3, #0
 8007e30:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8007e32:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e34:	4618      	mov	r0, r3
 8007e36:	3710      	adds	r7, #16
 8007e38:	46bd      	mov	sp, r7
 8007e3a:	bd80      	pop	{r7, pc}

08007e3c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007e3c:	b580      	push	{r7, lr}
 8007e3e:	b084      	sub	sp, #16
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007e4a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d101      	bne.n	8007e5a <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8007e56:	2303      	movs	r3, #3
 8007e58:	e016      	b.n	8007e88 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	7c1b      	ldrb	r3, [r3, #16]
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d109      	bne.n	8007e76 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007e68:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007e6c:	2101      	movs	r1, #1
 8007e6e:	6878      	ldr	r0, [r7, #4]
 8007e70:	f001 fd41 	bl	80098f6 <USBD_LL_PrepareReceive>
 8007e74:	e007      	b.n	8007e86 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007e7c:	2340      	movs	r3, #64	; 0x40
 8007e7e:	2101      	movs	r1, #1
 8007e80:	6878      	ldr	r0, [r7, #4]
 8007e82:	f001 fd38 	bl	80098f6 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007e86:	2300      	movs	r3, #0
}
 8007e88:	4618      	mov	r0, r3
 8007e8a:	3710      	adds	r7, #16
 8007e8c:	46bd      	mov	sp, r7
 8007e8e:	bd80      	pop	{r7, pc}

08007e90 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007e90:	b580      	push	{r7, lr}
 8007e92:	b086      	sub	sp, #24
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	60f8      	str	r0, [r7, #12]
 8007e98:	60b9      	str	r1, [r7, #8]
 8007e9a:	4613      	mov	r3, r2
 8007e9c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d101      	bne.n	8007ea8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007ea4:	2303      	movs	r3, #3
 8007ea6:	e01f      	b.n	8007ee8 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	2200      	movs	r2, #0
 8007eac:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	2200      	movs	r2, #0
 8007eb4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	2200      	movs	r2, #0
 8007ebc:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007ec0:	68bb      	ldr	r3, [r7, #8]
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d003      	beq.n	8007ece <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	68ba      	ldr	r2, [r7, #8]
 8007eca:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	2201      	movs	r2, #1
 8007ed2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	79fa      	ldrb	r2, [r7, #7]
 8007eda:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007edc:	68f8      	ldr	r0, [r7, #12]
 8007ede:	f001 fb9f 	bl	8009620 <USBD_LL_Init>
 8007ee2:	4603      	mov	r3, r0
 8007ee4:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007ee6:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ee8:	4618      	mov	r0, r3
 8007eea:	3718      	adds	r7, #24
 8007eec:	46bd      	mov	sp, r7
 8007eee:	bd80      	pop	{r7, pc}

08007ef0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007ef0:	b580      	push	{r7, lr}
 8007ef2:	b084      	sub	sp, #16
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	6078      	str	r0, [r7, #4]
 8007ef8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007efa:	2300      	movs	r3, #0
 8007efc:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007efe:	683b      	ldr	r3, [r7, #0]
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d101      	bne.n	8007f08 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8007f04:	2303      	movs	r3, #3
 8007f06:	e016      	b.n	8007f36 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	683a      	ldr	r2, [r7, #0]
 8007f0c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d00b      	beq.n	8007f34 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f24:	f107 020e 	add.w	r2, r7, #14
 8007f28:	4610      	mov	r0, r2
 8007f2a:	4798      	blx	r3
 8007f2c:	4602      	mov	r2, r0
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8007f34:	2300      	movs	r3, #0
}
 8007f36:	4618      	mov	r0, r3
 8007f38:	3710      	adds	r7, #16
 8007f3a:	46bd      	mov	sp, r7
 8007f3c:	bd80      	pop	{r7, pc}

08007f3e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007f3e:	b580      	push	{r7, lr}
 8007f40:	b082      	sub	sp, #8
 8007f42:	af00      	add	r7, sp, #0
 8007f44:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007f46:	6878      	ldr	r0, [r7, #4]
 8007f48:	f001 fbca 	bl	80096e0 <USBD_LL_Start>
 8007f4c:	4603      	mov	r3, r0
}
 8007f4e:	4618      	mov	r0, r3
 8007f50:	3708      	adds	r7, #8
 8007f52:	46bd      	mov	sp, r7
 8007f54:	bd80      	pop	{r7, pc}

08007f56 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007f56:	b480      	push	{r7}
 8007f58:	b083      	sub	sp, #12
 8007f5a:	af00      	add	r7, sp, #0
 8007f5c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007f5e:	2300      	movs	r3, #0
}
 8007f60:	4618      	mov	r0, r3
 8007f62:	370c      	adds	r7, #12
 8007f64:	46bd      	mov	sp, r7
 8007f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f6a:	4770      	bx	lr

08007f6c <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007f6c:	b580      	push	{r7, lr}
 8007f6e:	b084      	sub	sp, #16
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	6078      	str	r0, [r7, #4]
 8007f74:	460b      	mov	r3, r1
 8007f76:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007f78:	2303      	movs	r3, #3
 8007f7a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d009      	beq.n	8007f9a <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	78fa      	ldrb	r2, [r7, #3]
 8007f90:	4611      	mov	r1, r2
 8007f92:	6878      	ldr	r0, [r7, #4]
 8007f94:	4798      	blx	r3
 8007f96:	4603      	mov	r3, r0
 8007f98:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007f9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f9c:	4618      	mov	r0, r3
 8007f9e:	3710      	adds	r7, #16
 8007fa0:	46bd      	mov	sp, r7
 8007fa2:	bd80      	pop	{r7, pc}

08007fa4 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007fa4:	b580      	push	{r7, lr}
 8007fa6:	b082      	sub	sp, #8
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	6078      	str	r0, [r7, #4]
 8007fac:	460b      	mov	r3, r1
 8007fae:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d007      	beq.n	8007fca <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007fc0:	685b      	ldr	r3, [r3, #4]
 8007fc2:	78fa      	ldrb	r2, [r7, #3]
 8007fc4:	4611      	mov	r1, r2
 8007fc6:	6878      	ldr	r0, [r7, #4]
 8007fc8:	4798      	blx	r3
  }

  return USBD_OK;
 8007fca:	2300      	movs	r3, #0
}
 8007fcc:	4618      	mov	r0, r3
 8007fce:	3708      	adds	r7, #8
 8007fd0:	46bd      	mov	sp, r7
 8007fd2:	bd80      	pop	{r7, pc}

08007fd4 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007fd4:	b580      	push	{r7, lr}
 8007fd6:	b084      	sub	sp, #16
 8007fd8:	af00      	add	r7, sp, #0
 8007fda:	6078      	str	r0, [r7, #4]
 8007fdc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007fe4:	6839      	ldr	r1, [r7, #0]
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	f000 ff16 	bl	8008e18 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	2201      	movs	r2, #1
 8007ff0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8007ffa:	461a      	mov	r2, r3
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008008:	f003 031f 	and.w	r3, r3, #31
 800800c:	2b01      	cmp	r3, #1
 800800e:	d00e      	beq.n	800802e <USBD_LL_SetupStage+0x5a>
 8008010:	2b01      	cmp	r3, #1
 8008012:	d302      	bcc.n	800801a <USBD_LL_SetupStage+0x46>
 8008014:	2b02      	cmp	r3, #2
 8008016:	d014      	beq.n	8008042 <USBD_LL_SetupStage+0x6e>
 8008018:	e01d      	b.n	8008056 <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008020:	4619      	mov	r1, r3
 8008022:	6878      	ldr	r0, [r7, #4]
 8008024:	f000 f9d6 	bl	80083d4 <USBD_StdDevReq>
 8008028:	4603      	mov	r3, r0
 800802a:	73fb      	strb	r3, [r7, #15]
      break;
 800802c:	e020      	b.n	8008070 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008034:	4619      	mov	r1, r3
 8008036:	6878      	ldr	r0, [r7, #4]
 8008038:	f000 fa3a 	bl	80084b0 <USBD_StdItfReq>
 800803c:	4603      	mov	r3, r0
 800803e:	73fb      	strb	r3, [r7, #15]
      break;
 8008040:	e016      	b.n	8008070 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008048:	4619      	mov	r1, r3
 800804a:	6878      	ldr	r0, [r7, #4]
 800804c:	f000 fa76 	bl	800853c <USBD_StdEPReq>
 8008050:	4603      	mov	r3, r0
 8008052:	73fb      	strb	r3, [r7, #15]
      break;
 8008054:	e00c      	b.n	8008070 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800805c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008060:	b2db      	uxtb	r3, r3
 8008062:	4619      	mov	r1, r3
 8008064:	6878      	ldr	r0, [r7, #4]
 8008066:	f001 fb9b 	bl	80097a0 <USBD_LL_StallEP>
 800806a:	4603      	mov	r3, r0
 800806c:	73fb      	strb	r3, [r7, #15]
      break;
 800806e:	bf00      	nop
  }

  return ret;
 8008070:	7bfb      	ldrb	r3, [r7, #15]
}
 8008072:	4618      	mov	r0, r3
 8008074:	3710      	adds	r7, #16
 8008076:	46bd      	mov	sp, r7
 8008078:	bd80      	pop	{r7, pc}

0800807a <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800807a:	b580      	push	{r7, lr}
 800807c:	b086      	sub	sp, #24
 800807e:	af00      	add	r7, sp, #0
 8008080:	60f8      	str	r0, [r7, #12]
 8008082:	460b      	mov	r3, r1
 8008084:	607a      	str	r2, [r7, #4]
 8008086:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8008088:	7afb      	ldrb	r3, [r7, #11]
 800808a:	2b00      	cmp	r3, #0
 800808c:	d137      	bne.n	80080fe <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008094:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800809c:	2b03      	cmp	r3, #3
 800809e:	d14a      	bne.n	8008136 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80080a0:	693b      	ldr	r3, [r7, #16]
 80080a2:	689a      	ldr	r2, [r3, #8]
 80080a4:	693b      	ldr	r3, [r7, #16]
 80080a6:	68db      	ldr	r3, [r3, #12]
 80080a8:	429a      	cmp	r2, r3
 80080aa:	d913      	bls.n	80080d4 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80080ac:	693b      	ldr	r3, [r7, #16]
 80080ae:	689a      	ldr	r2, [r3, #8]
 80080b0:	693b      	ldr	r3, [r7, #16]
 80080b2:	68db      	ldr	r3, [r3, #12]
 80080b4:	1ad2      	subs	r2, r2, r3
 80080b6:	693b      	ldr	r3, [r7, #16]
 80080b8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80080ba:	693b      	ldr	r3, [r7, #16]
 80080bc:	68da      	ldr	r2, [r3, #12]
 80080be:	693b      	ldr	r3, [r7, #16]
 80080c0:	689b      	ldr	r3, [r3, #8]
 80080c2:	4293      	cmp	r3, r2
 80080c4:	bf28      	it	cs
 80080c6:	4613      	movcs	r3, r2
 80080c8:	461a      	mov	r2, r3
 80080ca:	6879      	ldr	r1, [r7, #4]
 80080cc:	68f8      	ldr	r0, [r7, #12]
 80080ce:	f000 ff97 	bl	8009000 <USBD_CtlContinueRx>
 80080d2:	e030      	b.n	8008136 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080da:	691b      	ldr	r3, [r3, #16]
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d00a      	beq.n	80080f6 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80080e6:	2b03      	cmp	r3, #3
 80080e8:	d105      	bne.n	80080f6 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080f0:	691b      	ldr	r3, [r3, #16]
 80080f2:	68f8      	ldr	r0, [r7, #12]
 80080f4:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 80080f6:	68f8      	ldr	r0, [r7, #12]
 80080f8:	f000 ff93 	bl	8009022 <USBD_CtlSendStatus>
 80080fc:	e01b      	b.n	8008136 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008104:	699b      	ldr	r3, [r3, #24]
 8008106:	2b00      	cmp	r3, #0
 8008108:	d013      	beq.n	8008132 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8008110:	2b03      	cmp	r3, #3
 8008112:	d10e      	bne.n	8008132 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800811a:	699b      	ldr	r3, [r3, #24]
 800811c:	7afa      	ldrb	r2, [r7, #11]
 800811e:	4611      	mov	r1, r2
 8008120:	68f8      	ldr	r0, [r7, #12]
 8008122:	4798      	blx	r3
 8008124:	4603      	mov	r3, r0
 8008126:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8008128:	7dfb      	ldrb	r3, [r7, #23]
 800812a:	2b00      	cmp	r3, #0
 800812c:	d003      	beq.n	8008136 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 800812e:	7dfb      	ldrb	r3, [r7, #23]
 8008130:	e002      	b.n	8008138 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008132:	2303      	movs	r3, #3
 8008134:	e000      	b.n	8008138 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 8008136:	2300      	movs	r3, #0
}
 8008138:	4618      	mov	r0, r3
 800813a:	3718      	adds	r7, #24
 800813c:	46bd      	mov	sp, r7
 800813e:	bd80      	pop	{r7, pc}

08008140 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008140:	b580      	push	{r7, lr}
 8008142:	b086      	sub	sp, #24
 8008144:	af00      	add	r7, sp, #0
 8008146:	60f8      	str	r0, [r7, #12]
 8008148:	460b      	mov	r3, r1
 800814a:	607a      	str	r2, [r7, #4]
 800814c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800814e:	7afb      	ldrb	r3, [r7, #11]
 8008150:	2b00      	cmp	r3, #0
 8008152:	d16a      	bne.n	800822a <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	3314      	adds	r3, #20
 8008158:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008160:	2b02      	cmp	r3, #2
 8008162:	d155      	bne.n	8008210 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 8008164:	693b      	ldr	r3, [r7, #16]
 8008166:	689a      	ldr	r2, [r3, #8]
 8008168:	693b      	ldr	r3, [r7, #16]
 800816a:	68db      	ldr	r3, [r3, #12]
 800816c:	429a      	cmp	r2, r3
 800816e:	d914      	bls.n	800819a <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008170:	693b      	ldr	r3, [r7, #16]
 8008172:	689a      	ldr	r2, [r3, #8]
 8008174:	693b      	ldr	r3, [r7, #16]
 8008176:	68db      	ldr	r3, [r3, #12]
 8008178:	1ad2      	subs	r2, r2, r3
 800817a:	693b      	ldr	r3, [r7, #16]
 800817c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800817e:	693b      	ldr	r3, [r7, #16]
 8008180:	689b      	ldr	r3, [r3, #8]
 8008182:	461a      	mov	r2, r3
 8008184:	6879      	ldr	r1, [r7, #4]
 8008186:	68f8      	ldr	r0, [r7, #12]
 8008188:	f000 ff0c 	bl	8008fa4 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800818c:	2300      	movs	r3, #0
 800818e:	2200      	movs	r2, #0
 8008190:	2100      	movs	r1, #0
 8008192:	68f8      	ldr	r0, [r7, #12]
 8008194:	f001 fbaf 	bl	80098f6 <USBD_LL_PrepareReceive>
 8008198:	e03a      	b.n	8008210 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800819a:	693b      	ldr	r3, [r7, #16]
 800819c:	68da      	ldr	r2, [r3, #12]
 800819e:	693b      	ldr	r3, [r7, #16]
 80081a0:	689b      	ldr	r3, [r3, #8]
 80081a2:	429a      	cmp	r2, r3
 80081a4:	d11c      	bne.n	80081e0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80081a6:	693b      	ldr	r3, [r7, #16]
 80081a8:	685a      	ldr	r2, [r3, #4]
 80081aa:	693b      	ldr	r3, [r7, #16]
 80081ac:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80081ae:	429a      	cmp	r2, r3
 80081b0:	d316      	bcc.n	80081e0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80081b2:	693b      	ldr	r3, [r7, #16]
 80081b4:	685a      	ldr	r2, [r3, #4]
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80081bc:	429a      	cmp	r2, r3
 80081be:	d20f      	bcs.n	80081e0 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80081c0:	2200      	movs	r2, #0
 80081c2:	2100      	movs	r1, #0
 80081c4:	68f8      	ldr	r0, [r7, #12]
 80081c6:	f000 feed 	bl	8008fa4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	2200      	movs	r2, #0
 80081ce:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80081d2:	2300      	movs	r3, #0
 80081d4:	2200      	movs	r2, #0
 80081d6:	2100      	movs	r1, #0
 80081d8:	68f8      	ldr	r0, [r7, #12]
 80081da:	f001 fb8c 	bl	80098f6 <USBD_LL_PrepareReceive>
 80081de:	e017      	b.n	8008210 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081e6:	68db      	ldr	r3, [r3, #12]
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d00a      	beq.n	8008202 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80081f2:	2b03      	cmp	r3, #3
 80081f4:	d105      	bne.n	8008202 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081fc:	68db      	ldr	r3, [r3, #12]
 80081fe:	68f8      	ldr	r0, [r7, #12]
 8008200:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008202:	2180      	movs	r1, #128	; 0x80
 8008204:	68f8      	ldr	r0, [r7, #12]
 8008206:	f001 facb 	bl	80097a0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800820a:	68f8      	ldr	r0, [r7, #12]
 800820c:	f000 ff1c 	bl	8009048 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8008216:	2b01      	cmp	r3, #1
 8008218:	d123      	bne.n	8008262 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800821a:	68f8      	ldr	r0, [r7, #12]
 800821c:	f7ff fe9b 	bl	8007f56 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	2200      	movs	r2, #0
 8008224:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008228:	e01b      	b.n	8008262 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008230:	695b      	ldr	r3, [r3, #20]
 8008232:	2b00      	cmp	r3, #0
 8008234:	d013      	beq.n	800825e <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800823c:	2b03      	cmp	r3, #3
 800823e:	d10e      	bne.n	800825e <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008246:	695b      	ldr	r3, [r3, #20]
 8008248:	7afa      	ldrb	r2, [r7, #11]
 800824a:	4611      	mov	r1, r2
 800824c:	68f8      	ldr	r0, [r7, #12]
 800824e:	4798      	blx	r3
 8008250:	4603      	mov	r3, r0
 8008252:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8008254:	7dfb      	ldrb	r3, [r7, #23]
 8008256:	2b00      	cmp	r3, #0
 8008258:	d003      	beq.n	8008262 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 800825a:	7dfb      	ldrb	r3, [r7, #23]
 800825c:	e002      	b.n	8008264 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800825e:	2303      	movs	r3, #3
 8008260:	e000      	b.n	8008264 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 8008262:	2300      	movs	r3, #0
}
 8008264:	4618      	mov	r0, r3
 8008266:	3718      	adds	r7, #24
 8008268:	46bd      	mov	sp, r7
 800826a:	bd80      	pop	{r7, pc}

0800826c <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800826c:	b580      	push	{r7, lr}
 800826e:	b082      	sub	sp, #8
 8008270:	af00      	add	r7, sp, #0
 8008272:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	2201      	movs	r2, #1
 8008278:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	2200      	movs	r2, #0
 8008280:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	2200      	movs	r2, #0
 8008288:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	2200      	movs	r2, #0
 800828e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008298:	2b00      	cmp	r3, #0
 800829a:	d009      	beq.n	80082b0 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082a2:	685b      	ldr	r3, [r3, #4]
 80082a4:	687a      	ldr	r2, [r7, #4]
 80082a6:	6852      	ldr	r2, [r2, #4]
 80082a8:	b2d2      	uxtb	r2, r2
 80082aa:	4611      	mov	r1, r2
 80082ac:	6878      	ldr	r0, [r7, #4]
 80082ae:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80082b0:	2340      	movs	r3, #64	; 0x40
 80082b2:	2200      	movs	r2, #0
 80082b4:	2100      	movs	r1, #0
 80082b6:	6878      	ldr	r0, [r7, #4]
 80082b8:	f001 fa2d 	bl	8009716 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	2201      	movs	r2, #1
 80082c0:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	2240      	movs	r2, #64	; 0x40
 80082c8:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80082cc:	2340      	movs	r3, #64	; 0x40
 80082ce:	2200      	movs	r2, #0
 80082d0:	2180      	movs	r1, #128	; 0x80
 80082d2:	6878      	ldr	r0, [r7, #4]
 80082d4:	f001 fa1f 	bl	8009716 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	2201      	movs	r2, #1
 80082dc:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	2240      	movs	r2, #64	; 0x40
 80082e2:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80082e4:	2300      	movs	r3, #0
}
 80082e6:	4618      	mov	r0, r3
 80082e8:	3708      	adds	r7, #8
 80082ea:	46bd      	mov	sp, r7
 80082ec:	bd80      	pop	{r7, pc}

080082ee <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80082ee:	b480      	push	{r7}
 80082f0:	b083      	sub	sp, #12
 80082f2:	af00      	add	r7, sp, #0
 80082f4:	6078      	str	r0, [r7, #4]
 80082f6:	460b      	mov	r3, r1
 80082f8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	78fa      	ldrb	r2, [r7, #3]
 80082fe:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008300:	2300      	movs	r3, #0
}
 8008302:	4618      	mov	r0, r3
 8008304:	370c      	adds	r7, #12
 8008306:	46bd      	mov	sp, r7
 8008308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800830c:	4770      	bx	lr

0800830e <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800830e:	b480      	push	{r7}
 8008310:	b083      	sub	sp, #12
 8008312:	af00      	add	r7, sp, #0
 8008314:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	2204      	movs	r2, #4
 8008326:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800832a:	2300      	movs	r3, #0
}
 800832c:	4618      	mov	r0, r3
 800832e:	370c      	adds	r7, #12
 8008330:	46bd      	mov	sp, r7
 8008332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008336:	4770      	bx	lr

08008338 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008338:	b480      	push	{r7}
 800833a:	b083      	sub	sp, #12
 800833c:	af00      	add	r7, sp, #0
 800833e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008346:	2b04      	cmp	r3, #4
 8008348:	d105      	bne.n	8008356 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008356:	2300      	movs	r3, #0
}
 8008358:	4618      	mov	r0, r3
 800835a:	370c      	adds	r7, #12
 800835c:	46bd      	mov	sp, r7
 800835e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008362:	4770      	bx	lr

08008364 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008364:	b580      	push	{r7, lr}
 8008366:	b082      	sub	sp, #8
 8008368:	af00      	add	r7, sp, #0
 800836a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008372:	2b03      	cmp	r3, #3
 8008374:	d10b      	bne.n	800838e <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800837c:	69db      	ldr	r3, [r3, #28]
 800837e:	2b00      	cmp	r3, #0
 8008380:	d005      	beq.n	800838e <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008388:	69db      	ldr	r3, [r3, #28]
 800838a:	6878      	ldr	r0, [r7, #4]
 800838c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800838e:	2300      	movs	r3, #0
}
 8008390:	4618      	mov	r0, r3
 8008392:	3708      	adds	r7, #8
 8008394:	46bd      	mov	sp, r7
 8008396:	bd80      	pop	{r7, pc}

08008398 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008398:	b480      	push	{r7}
 800839a:	b087      	sub	sp, #28
 800839c:	af00      	add	r7, sp, #0
 800839e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80083a4:	697b      	ldr	r3, [r7, #20]
 80083a6:	781b      	ldrb	r3, [r3, #0]
 80083a8:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80083aa:	697b      	ldr	r3, [r7, #20]
 80083ac:	3301      	adds	r3, #1
 80083ae:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80083b0:	697b      	ldr	r3, [r7, #20]
 80083b2:	781b      	ldrb	r3, [r3, #0]
 80083b4:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80083b6:	8a3b      	ldrh	r3, [r7, #16]
 80083b8:	021b      	lsls	r3, r3, #8
 80083ba:	b21a      	sxth	r2, r3
 80083bc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80083c0:	4313      	orrs	r3, r2
 80083c2:	b21b      	sxth	r3, r3
 80083c4:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80083c6:	89fb      	ldrh	r3, [r7, #14]
}
 80083c8:	4618      	mov	r0, r3
 80083ca:	371c      	adds	r7, #28
 80083cc:	46bd      	mov	sp, r7
 80083ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d2:	4770      	bx	lr

080083d4 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80083d4:	b580      	push	{r7, lr}
 80083d6:	b084      	sub	sp, #16
 80083d8:	af00      	add	r7, sp, #0
 80083da:	6078      	str	r0, [r7, #4]
 80083dc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80083de:	2300      	movs	r3, #0
 80083e0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80083e2:	683b      	ldr	r3, [r7, #0]
 80083e4:	781b      	ldrb	r3, [r3, #0]
 80083e6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80083ea:	2b20      	cmp	r3, #32
 80083ec:	d004      	beq.n	80083f8 <USBD_StdDevReq+0x24>
 80083ee:	2b40      	cmp	r3, #64	; 0x40
 80083f0:	d002      	beq.n	80083f8 <USBD_StdDevReq+0x24>
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d00a      	beq.n	800840c <USBD_StdDevReq+0x38>
 80083f6:	e050      	b.n	800849a <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083fe:	689b      	ldr	r3, [r3, #8]
 8008400:	6839      	ldr	r1, [r7, #0]
 8008402:	6878      	ldr	r0, [r7, #4]
 8008404:	4798      	blx	r3
 8008406:	4603      	mov	r3, r0
 8008408:	73fb      	strb	r3, [r7, #15]
    break;
 800840a:	e04b      	b.n	80084a4 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800840c:	683b      	ldr	r3, [r7, #0]
 800840e:	785b      	ldrb	r3, [r3, #1]
 8008410:	2b09      	cmp	r3, #9
 8008412:	d83c      	bhi.n	800848e <USBD_StdDevReq+0xba>
 8008414:	a201      	add	r2, pc, #4	; (adr r2, 800841c <USBD_StdDevReq+0x48>)
 8008416:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800841a:	bf00      	nop
 800841c:	08008471 	.word	0x08008471
 8008420:	08008485 	.word	0x08008485
 8008424:	0800848f 	.word	0x0800848f
 8008428:	0800847b 	.word	0x0800847b
 800842c:	0800848f 	.word	0x0800848f
 8008430:	0800844f 	.word	0x0800844f
 8008434:	08008445 	.word	0x08008445
 8008438:	0800848f 	.word	0x0800848f
 800843c:	08008467 	.word	0x08008467
 8008440:	08008459 	.word	0x08008459
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 8008444:	6839      	ldr	r1, [r7, #0]
 8008446:	6878      	ldr	r0, [r7, #4]
 8008448:	f000 f9d0 	bl	80087ec <USBD_GetDescriptor>
      break;
 800844c:	e024      	b.n	8008498 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 800844e:	6839      	ldr	r1, [r7, #0]
 8008450:	6878      	ldr	r0, [r7, #4]
 8008452:	f000 fb5f 	bl	8008b14 <USBD_SetAddress>
      break;
 8008456:	e01f      	b.n	8008498 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 8008458:	6839      	ldr	r1, [r7, #0]
 800845a:	6878      	ldr	r0, [r7, #4]
 800845c:	f000 fb9c 	bl	8008b98 <USBD_SetConfig>
 8008460:	4603      	mov	r3, r0
 8008462:	73fb      	strb	r3, [r7, #15]
      break;
 8008464:	e018      	b.n	8008498 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 8008466:	6839      	ldr	r1, [r7, #0]
 8008468:	6878      	ldr	r0, [r7, #4]
 800846a:	f000 fc39 	bl	8008ce0 <USBD_GetConfig>
      break;
 800846e:	e013      	b.n	8008498 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 8008470:	6839      	ldr	r1, [r7, #0]
 8008472:	6878      	ldr	r0, [r7, #4]
 8008474:	f000 fc68 	bl	8008d48 <USBD_GetStatus>
      break;
 8008478:	e00e      	b.n	8008498 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 800847a:	6839      	ldr	r1, [r7, #0]
 800847c:	6878      	ldr	r0, [r7, #4]
 800847e:	f000 fc96 	bl	8008dae <USBD_SetFeature>
      break;
 8008482:	e009      	b.n	8008498 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 8008484:	6839      	ldr	r1, [r7, #0]
 8008486:	6878      	ldr	r0, [r7, #4]
 8008488:	f000 fca5 	bl	8008dd6 <USBD_ClrFeature>
      break;
 800848c:	e004      	b.n	8008498 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 800848e:	6839      	ldr	r1, [r7, #0]
 8008490:	6878      	ldr	r0, [r7, #4]
 8008492:	f000 fcfb 	bl	8008e8c <USBD_CtlError>
      break;
 8008496:	bf00      	nop
    }
    break;
 8008498:	e004      	b.n	80084a4 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 800849a:	6839      	ldr	r1, [r7, #0]
 800849c:	6878      	ldr	r0, [r7, #4]
 800849e:	f000 fcf5 	bl	8008e8c <USBD_CtlError>
    break;
 80084a2:	bf00      	nop
  }

  return ret;
 80084a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80084a6:	4618      	mov	r0, r3
 80084a8:	3710      	adds	r7, #16
 80084aa:	46bd      	mov	sp, r7
 80084ac:	bd80      	pop	{r7, pc}
 80084ae:	bf00      	nop

080084b0 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80084b0:	b580      	push	{r7, lr}
 80084b2:	b084      	sub	sp, #16
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	6078      	str	r0, [r7, #4]
 80084b8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80084ba:	2300      	movs	r3, #0
 80084bc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80084be:	683b      	ldr	r3, [r7, #0]
 80084c0:	781b      	ldrb	r3, [r3, #0]
 80084c2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80084c6:	2b20      	cmp	r3, #32
 80084c8:	d003      	beq.n	80084d2 <USBD_StdItfReq+0x22>
 80084ca:	2b40      	cmp	r3, #64	; 0x40
 80084cc:	d001      	beq.n	80084d2 <USBD_StdItfReq+0x22>
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d12a      	bne.n	8008528 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80084d8:	3b01      	subs	r3, #1
 80084da:	2b02      	cmp	r3, #2
 80084dc:	d81d      	bhi.n	800851a <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80084de:	683b      	ldr	r3, [r7, #0]
 80084e0:	889b      	ldrh	r3, [r3, #4]
 80084e2:	b2db      	uxtb	r3, r3
 80084e4:	2b01      	cmp	r3, #1
 80084e6:	d813      	bhi.n	8008510 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80084ee:	689b      	ldr	r3, [r3, #8]
 80084f0:	6839      	ldr	r1, [r7, #0]
 80084f2:	6878      	ldr	r0, [r7, #4]
 80084f4:	4798      	blx	r3
 80084f6:	4603      	mov	r3, r0
 80084f8:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 80084fa:	683b      	ldr	r3, [r7, #0]
 80084fc:	88db      	ldrh	r3, [r3, #6]
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d110      	bne.n	8008524 <USBD_StdItfReq+0x74>
 8008502:	7bfb      	ldrb	r3, [r7, #15]
 8008504:	2b00      	cmp	r3, #0
 8008506:	d10d      	bne.n	8008524 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 8008508:	6878      	ldr	r0, [r7, #4]
 800850a:	f000 fd8a 	bl	8009022 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800850e:	e009      	b.n	8008524 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8008510:	6839      	ldr	r1, [r7, #0]
 8008512:	6878      	ldr	r0, [r7, #4]
 8008514:	f000 fcba 	bl	8008e8c <USBD_CtlError>
      break;
 8008518:	e004      	b.n	8008524 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 800851a:	6839      	ldr	r1, [r7, #0]
 800851c:	6878      	ldr	r0, [r7, #4]
 800851e:	f000 fcb5 	bl	8008e8c <USBD_CtlError>
      break;
 8008522:	e000      	b.n	8008526 <USBD_StdItfReq+0x76>
      break;
 8008524:	bf00      	nop
    }
    break;
 8008526:	e004      	b.n	8008532 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8008528:	6839      	ldr	r1, [r7, #0]
 800852a:	6878      	ldr	r0, [r7, #4]
 800852c:	f000 fcae 	bl	8008e8c <USBD_CtlError>
    break;
 8008530:	bf00      	nop
  }

  return ret;
 8008532:	7bfb      	ldrb	r3, [r7, #15]
}
 8008534:	4618      	mov	r0, r3
 8008536:	3710      	adds	r7, #16
 8008538:	46bd      	mov	sp, r7
 800853a:	bd80      	pop	{r7, pc}

0800853c <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800853c:	b580      	push	{r7, lr}
 800853e:	b084      	sub	sp, #16
 8008540:	af00      	add	r7, sp, #0
 8008542:	6078      	str	r0, [r7, #4]
 8008544:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008546:	2300      	movs	r3, #0
 8008548:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800854a:	683b      	ldr	r3, [r7, #0]
 800854c:	889b      	ldrh	r3, [r3, #4]
 800854e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008550:	683b      	ldr	r3, [r7, #0]
 8008552:	781b      	ldrb	r3, [r3, #0]
 8008554:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008558:	2b20      	cmp	r3, #32
 800855a:	d004      	beq.n	8008566 <USBD_StdEPReq+0x2a>
 800855c:	2b40      	cmp	r3, #64	; 0x40
 800855e:	d002      	beq.n	8008566 <USBD_StdEPReq+0x2a>
 8008560:	2b00      	cmp	r3, #0
 8008562:	d00a      	beq.n	800857a <USBD_StdEPReq+0x3e>
 8008564:	e137      	b.n	80087d6 <USBD_StdEPReq+0x29a>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800856c:	689b      	ldr	r3, [r3, #8]
 800856e:	6839      	ldr	r1, [r7, #0]
 8008570:	6878      	ldr	r0, [r7, #4]
 8008572:	4798      	blx	r3
 8008574:	4603      	mov	r3, r0
 8008576:	73fb      	strb	r3, [r7, #15]
    break;
 8008578:	e132      	b.n	80087e0 <USBD_StdEPReq+0x2a4>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800857a:	683b      	ldr	r3, [r7, #0]
 800857c:	785b      	ldrb	r3, [r3, #1]
 800857e:	2b01      	cmp	r3, #1
 8008580:	d03e      	beq.n	8008600 <USBD_StdEPReq+0xc4>
 8008582:	2b03      	cmp	r3, #3
 8008584:	d002      	beq.n	800858c <USBD_StdEPReq+0x50>
 8008586:	2b00      	cmp	r3, #0
 8008588:	d079      	beq.n	800867e <USBD_StdEPReq+0x142>
 800858a:	e11e      	b.n	80087ca <USBD_StdEPReq+0x28e>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008592:	2b02      	cmp	r3, #2
 8008594:	d002      	beq.n	800859c <USBD_StdEPReq+0x60>
 8008596:	2b03      	cmp	r3, #3
 8008598:	d015      	beq.n	80085c6 <USBD_StdEPReq+0x8a>
 800859a:	e02b      	b.n	80085f4 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800859c:	7bbb      	ldrb	r3, [r7, #14]
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d00c      	beq.n	80085bc <USBD_StdEPReq+0x80>
 80085a2:	7bbb      	ldrb	r3, [r7, #14]
 80085a4:	2b80      	cmp	r3, #128	; 0x80
 80085a6:	d009      	beq.n	80085bc <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 80085a8:	7bbb      	ldrb	r3, [r7, #14]
 80085aa:	4619      	mov	r1, r3
 80085ac:	6878      	ldr	r0, [r7, #4]
 80085ae:	f001 f8f7 	bl	80097a0 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80085b2:	2180      	movs	r1, #128	; 0x80
 80085b4:	6878      	ldr	r0, [r7, #4]
 80085b6:	f001 f8f3 	bl	80097a0 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80085ba:	e020      	b.n	80085fe <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 80085bc:	6839      	ldr	r1, [r7, #0]
 80085be:	6878      	ldr	r0, [r7, #4]
 80085c0:	f000 fc64 	bl	8008e8c <USBD_CtlError>
        break;
 80085c4:	e01b      	b.n	80085fe <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80085c6:	683b      	ldr	r3, [r7, #0]
 80085c8:	885b      	ldrh	r3, [r3, #2]
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d10e      	bne.n	80085ec <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80085ce:	7bbb      	ldrb	r3, [r7, #14]
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d00b      	beq.n	80085ec <USBD_StdEPReq+0xb0>
 80085d4:	7bbb      	ldrb	r3, [r7, #14]
 80085d6:	2b80      	cmp	r3, #128	; 0x80
 80085d8:	d008      	beq.n	80085ec <USBD_StdEPReq+0xb0>
 80085da:	683b      	ldr	r3, [r7, #0]
 80085dc:	88db      	ldrh	r3, [r3, #6]
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d104      	bne.n	80085ec <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 80085e2:	7bbb      	ldrb	r3, [r7, #14]
 80085e4:	4619      	mov	r1, r3
 80085e6:	6878      	ldr	r0, [r7, #4]
 80085e8:	f001 f8da 	bl	80097a0 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 80085ec:	6878      	ldr	r0, [r7, #4]
 80085ee:	f000 fd18 	bl	8009022 <USBD_CtlSendStatus>

        break;
 80085f2:	e004      	b.n	80085fe <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 80085f4:	6839      	ldr	r1, [r7, #0]
 80085f6:	6878      	ldr	r0, [r7, #4]
 80085f8:	f000 fc48 	bl	8008e8c <USBD_CtlError>
        break;
 80085fc:	bf00      	nop
      }
      break;
 80085fe:	e0e9      	b.n	80087d4 <USBD_StdEPReq+0x298>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008606:	2b02      	cmp	r3, #2
 8008608:	d002      	beq.n	8008610 <USBD_StdEPReq+0xd4>
 800860a:	2b03      	cmp	r3, #3
 800860c:	d015      	beq.n	800863a <USBD_StdEPReq+0xfe>
 800860e:	e02f      	b.n	8008670 <USBD_StdEPReq+0x134>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008610:	7bbb      	ldrb	r3, [r7, #14]
 8008612:	2b00      	cmp	r3, #0
 8008614:	d00c      	beq.n	8008630 <USBD_StdEPReq+0xf4>
 8008616:	7bbb      	ldrb	r3, [r7, #14]
 8008618:	2b80      	cmp	r3, #128	; 0x80
 800861a:	d009      	beq.n	8008630 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800861c:	7bbb      	ldrb	r3, [r7, #14]
 800861e:	4619      	mov	r1, r3
 8008620:	6878      	ldr	r0, [r7, #4]
 8008622:	f001 f8bd 	bl	80097a0 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008626:	2180      	movs	r1, #128	; 0x80
 8008628:	6878      	ldr	r0, [r7, #4]
 800862a:	f001 f8b9 	bl	80097a0 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800862e:	e025      	b.n	800867c <USBD_StdEPReq+0x140>
          USBD_CtlError(pdev, req);
 8008630:	6839      	ldr	r1, [r7, #0]
 8008632:	6878      	ldr	r0, [r7, #4]
 8008634:	f000 fc2a 	bl	8008e8c <USBD_CtlError>
        break;
 8008638:	e020      	b.n	800867c <USBD_StdEPReq+0x140>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800863a:	683b      	ldr	r3, [r7, #0]
 800863c:	885b      	ldrh	r3, [r3, #2]
 800863e:	2b00      	cmp	r3, #0
 8008640:	d11b      	bne.n	800867a <USBD_StdEPReq+0x13e>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8008642:	7bbb      	ldrb	r3, [r7, #14]
 8008644:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008648:	2b00      	cmp	r3, #0
 800864a:	d004      	beq.n	8008656 <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800864c:	7bbb      	ldrb	r3, [r7, #14]
 800864e:	4619      	mov	r1, r3
 8008650:	6878      	ldr	r0, [r7, #4]
 8008652:	f001 f8c4 	bl	80097de <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 8008656:	6878      	ldr	r0, [r7, #4]
 8008658:	f000 fce3 	bl	8009022 <USBD_CtlSendStatus>
          ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008662:	689b      	ldr	r3, [r3, #8]
 8008664:	6839      	ldr	r1, [r7, #0]
 8008666:	6878      	ldr	r0, [r7, #4]
 8008668:	4798      	blx	r3
 800866a:	4603      	mov	r3, r0
 800866c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800866e:	e004      	b.n	800867a <USBD_StdEPReq+0x13e>

      default:
        USBD_CtlError(pdev, req);
 8008670:	6839      	ldr	r1, [r7, #0]
 8008672:	6878      	ldr	r0, [r7, #4]
 8008674:	f000 fc0a 	bl	8008e8c <USBD_CtlError>
        break;
 8008678:	e000      	b.n	800867c <USBD_StdEPReq+0x140>
        break;
 800867a:	bf00      	nop
      }
      break;
 800867c:	e0aa      	b.n	80087d4 <USBD_StdEPReq+0x298>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008684:	2b02      	cmp	r3, #2
 8008686:	d002      	beq.n	800868e <USBD_StdEPReq+0x152>
 8008688:	2b03      	cmp	r3, #3
 800868a:	d032      	beq.n	80086f2 <USBD_StdEPReq+0x1b6>
 800868c:	e097      	b.n	80087be <USBD_StdEPReq+0x282>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800868e:	7bbb      	ldrb	r3, [r7, #14]
 8008690:	2b00      	cmp	r3, #0
 8008692:	d007      	beq.n	80086a4 <USBD_StdEPReq+0x168>
 8008694:	7bbb      	ldrb	r3, [r7, #14]
 8008696:	2b80      	cmp	r3, #128	; 0x80
 8008698:	d004      	beq.n	80086a4 <USBD_StdEPReq+0x168>
        {
          USBD_CtlError(pdev, req);
 800869a:	6839      	ldr	r1, [r7, #0]
 800869c:	6878      	ldr	r0, [r7, #4]
 800869e:	f000 fbf5 	bl	8008e8c <USBD_CtlError>
          break;
 80086a2:	e091      	b.n	80087c8 <USBD_StdEPReq+0x28c>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80086a4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	da0b      	bge.n	80086c4 <USBD_StdEPReq+0x188>
 80086ac:	7bbb      	ldrb	r3, [r7, #14]
 80086ae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80086b2:	4613      	mov	r3, r2
 80086b4:	009b      	lsls	r3, r3, #2
 80086b6:	4413      	add	r3, r2
 80086b8:	009b      	lsls	r3, r3, #2
 80086ba:	3310      	adds	r3, #16
 80086bc:	687a      	ldr	r2, [r7, #4]
 80086be:	4413      	add	r3, r2
 80086c0:	3304      	adds	r3, #4
 80086c2:	e00b      	b.n	80086dc <USBD_StdEPReq+0x1a0>
              &pdev->ep_out[ep_addr & 0x7FU];
 80086c4:	7bbb      	ldrb	r3, [r7, #14]
 80086c6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80086ca:	4613      	mov	r3, r2
 80086cc:	009b      	lsls	r3, r3, #2
 80086ce:	4413      	add	r3, r2
 80086d0:	009b      	lsls	r3, r3, #2
 80086d2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80086d6:	687a      	ldr	r2, [r7, #4]
 80086d8:	4413      	add	r3, r2
 80086da:	3304      	adds	r3, #4
 80086dc:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 80086de:	68bb      	ldr	r3, [r7, #8]
 80086e0:	2200      	movs	r2, #0
 80086e2:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80086e4:	68bb      	ldr	r3, [r7, #8]
 80086e6:	2202      	movs	r2, #2
 80086e8:	4619      	mov	r1, r3
 80086ea:	6878      	ldr	r0, [r7, #4]
 80086ec:	f000 fc3f 	bl	8008f6e <USBD_CtlSendData>
        break;
 80086f0:	e06a      	b.n	80087c8 <USBD_StdEPReq+0x28c>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 80086f2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	da11      	bge.n	800871e <USBD_StdEPReq+0x1e2>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80086fa:	7bbb      	ldrb	r3, [r7, #14]
 80086fc:	f003 020f 	and.w	r2, r3, #15
 8008700:	6879      	ldr	r1, [r7, #4]
 8008702:	4613      	mov	r3, r2
 8008704:	009b      	lsls	r3, r3, #2
 8008706:	4413      	add	r3, r2
 8008708:	009b      	lsls	r3, r3, #2
 800870a:	440b      	add	r3, r1
 800870c:	3324      	adds	r3, #36	; 0x24
 800870e:	881b      	ldrh	r3, [r3, #0]
 8008710:	2b00      	cmp	r3, #0
 8008712:	d117      	bne.n	8008744 <USBD_StdEPReq+0x208>
          {
            USBD_CtlError(pdev, req);
 8008714:	6839      	ldr	r1, [r7, #0]
 8008716:	6878      	ldr	r0, [r7, #4]
 8008718:	f000 fbb8 	bl	8008e8c <USBD_CtlError>
            break;
 800871c:	e054      	b.n	80087c8 <USBD_StdEPReq+0x28c>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800871e:	7bbb      	ldrb	r3, [r7, #14]
 8008720:	f003 020f 	and.w	r2, r3, #15
 8008724:	6879      	ldr	r1, [r7, #4]
 8008726:	4613      	mov	r3, r2
 8008728:	009b      	lsls	r3, r3, #2
 800872a:	4413      	add	r3, r2
 800872c:	009b      	lsls	r3, r3, #2
 800872e:	440b      	add	r3, r1
 8008730:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008734:	881b      	ldrh	r3, [r3, #0]
 8008736:	2b00      	cmp	r3, #0
 8008738:	d104      	bne.n	8008744 <USBD_StdEPReq+0x208>
          {
            USBD_CtlError(pdev, req);
 800873a:	6839      	ldr	r1, [r7, #0]
 800873c:	6878      	ldr	r0, [r7, #4]
 800873e:	f000 fba5 	bl	8008e8c <USBD_CtlError>
            break;
 8008742:	e041      	b.n	80087c8 <USBD_StdEPReq+0x28c>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008744:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008748:	2b00      	cmp	r3, #0
 800874a:	da0b      	bge.n	8008764 <USBD_StdEPReq+0x228>
 800874c:	7bbb      	ldrb	r3, [r7, #14]
 800874e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008752:	4613      	mov	r3, r2
 8008754:	009b      	lsls	r3, r3, #2
 8008756:	4413      	add	r3, r2
 8008758:	009b      	lsls	r3, r3, #2
 800875a:	3310      	adds	r3, #16
 800875c:	687a      	ldr	r2, [r7, #4]
 800875e:	4413      	add	r3, r2
 8008760:	3304      	adds	r3, #4
 8008762:	e00b      	b.n	800877c <USBD_StdEPReq+0x240>
              &pdev->ep_out[ep_addr & 0x7FU];
 8008764:	7bbb      	ldrb	r3, [r7, #14]
 8008766:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800876a:	4613      	mov	r3, r2
 800876c:	009b      	lsls	r3, r3, #2
 800876e:	4413      	add	r3, r2
 8008770:	009b      	lsls	r3, r3, #2
 8008772:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008776:	687a      	ldr	r2, [r7, #4]
 8008778:	4413      	add	r3, r2
 800877a:	3304      	adds	r3, #4
 800877c:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800877e:	7bbb      	ldrb	r3, [r7, #14]
 8008780:	2b00      	cmp	r3, #0
 8008782:	d002      	beq.n	800878a <USBD_StdEPReq+0x24e>
 8008784:	7bbb      	ldrb	r3, [r7, #14]
 8008786:	2b80      	cmp	r3, #128	; 0x80
 8008788:	d103      	bne.n	8008792 <USBD_StdEPReq+0x256>
          {
            pep->status = 0x0000U;
 800878a:	68bb      	ldr	r3, [r7, #8]
 800878c:	2200      	movs	r2, #0
 800878e:	601a      	str	r2, [r3, #0]
 8008790:	e00e      	b.n	80087b0 <USBD_StdEPReq+0x274>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008792:	7bbb      	ldrb	r3, [r7, #14]
 8008794:	4619      	mov	r1, r3
 8008796:	6878      	ldr	r0, [r7, #4]
 8008798:	f001 f840 	bl	800981c <USBD_LL_IsStallEP>
 800879c:	4603      	mov	r3, r0
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d003      	beq.n	80087aa <USBD_StdEPReq+0x26e>
          {
            pep->status = 0x0001U;
 80087a2:	68bb      	ldr	r3, [r7, #8]
 80087a4:	2201      	movs	r2, #1
 80087a6:	601a      	str	r2, [r3, #0]
 80087a8:	e002      	b.n	80087b0 <USBD_StdEPReq+0x274>
          }
          else
          {
            pep->status = 0x0000U;
 80087aa:	68bb      	ldr	r3, [r7, #8]
 80087ac:	2200      	movs	r2, #0
 80087ae:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80087b0:	68bb      	ldr	r3, [r7, #8]
 80087b2:	2202      	movs	r2, #2
 80087b4:	4619      	mov	r1, r3
 80087b6:	6878      	ldr	r0, [r7, #4]
 80087b8:	f000 fbd9 	bl	8008f6e <USBD_CtlSendData>
          break;
 80087bc:	e004      	b.n	80087c8 <USBD_StdEPReq+0x28c>

      default:
        USBD_CtlError(pdev, req);
 80087be:	6839      	ldr	r1, [r7, #0]
 80087c0:	6878      	ldr	r0, [r7, #4]
 80087c2:	f000 fb63 	bl	8008e8c <USBD_CtlError>
        break;
 80087c6:	bf00      	nop
      }
      break;
 80087c8:	e004      	b.n	80087d4 <USBD_StdEPReq+0x298>

    default:
      USBD_CtlError(pdev, req);
 80087ca:	6839      	ldr	r1, [r7, #0]
 80087cc:	6878      	ldr	r0, [r7, #4]
 80087ce:	f000 fb5d 	bl	8008e8c <USBD_CtlError>
      break;
 80087d2:	bf00      	nop
    }
    break;
 80087d4:	e004      	b.n	80087e0 <USBD_StdEPReq+0x2a4>

  default:
    USBD_CtlError(pdev, req);
 80087d6:	6839      	ldr	r1, [r7, #0]
 80087d8:	6878      	ldr	r0, [r7, #4]
 80087da:	f000 fb57 	bl	8008e8c <USBD_CtlError>
    break;
 80087de:	bf00      	nop
  }

  return ret;
 80087e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80087e2:	4618      	mov	r0, r3
 80087e4:	3710      	adds	r7, #16
 80087e6:	46bd      	mov	sp, r7
 80087e8:	bd80      	pop	{r7, pc}
	...

080087ec <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80087ec:	b580      	push	{r7, lr}
 80087ee:	b084      	sub	sp, #16
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	6078      	str	r0, [r7, #4]
 80087f4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80087f6:	2300      	movs	r3, #0
 80087f8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80087fa:	2300      	movs	r3, #0
 80087fc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80087fe:	2300      	movs	r3, #0
 8008800:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008802:	683b      	ldr	r3, [r7, #0]
 8008804:	885b      	ldrh	r3, [r3, #2]
 8008806:	0a1b      	lsrs	r3, r3, #8
 8008808:	b29b      	uxth	r3, r3
 800880a:	3b01      	subs	r3, #1
 800880c:	2b0e      	cmp	r3, #14
 800880e:	f200 8152 	bhi.w	8008ab6 <USBD_GetDescriptor+0x2ca>
 8008812:	a201      	add	r2, pc, #4	; (adr r2, 8008818 <USBD_GetDescriptor+0x2c>)
 8008814:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008818:	08008889 	.word	0x08008889
 800881c:	080088a1 	.word	0x080088a1
 8008820:	080088e1 	.word	0x080088e1
 8008824:	08008ab7 	.word	0x08008ab7
 8008828:	08008ab7 	.word	0x08008ab7
 800882c:	08008a57 	.word	0x08008a57
 8008830:	08008a83 	.word	0x08008a83
 8008834:	08008ab7 	.word	0x08008ab7
 8008838:	08008ab7 	.word	0x08008ab7
 800883c:	08008ab7 	.word	0x08008ab7
 8008840:	08008ab7 	.word	0x08008ab7
 8008844:	08008ab7 	.word	0x08008ab7
 8008848:	08008ab7 	.word	0x08008ab7
 800884c:	08008ab7 	.word	0x08008ab7
 8008850:	08008855 	.word	0x08008855
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
  case USB_DESC_TYPE_BOS:
    if (pdev->pDesc->GetBOSDescriptor != NULL)
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800885a:	69db      	ldr	r3, [r3, #28]
 800885c:	2b00      	cmp	r3, #0
 800885e:	d00b      	beq.n	8008878 <USBD_GetDescriptor+0x8c>
    {
      pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008866:	69db      	ldr	r3, [r3, #28]
 8008868:	687a      	ldr	r2, [r7, #4]
 800886a:	7c12      	ldrb	r2, [r2, #16]
 800886c:	f107 0108 	add.w	r1, r7, #8
 8008870:	4610      	mov	r0, r2
 8008872:	4798      	blx	r3
 8008874:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8008876:	e126      	b.n	8008ac6 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 8008878:	6839      	ldr	r1, [r7, #0]
 800887a:	6878      	ldr	r0, [r7, #4]
 800887c:	f000 fb06 	bl	8008e8c <USBD_CtlError>
      err++;
 8008880:	7afb      	ldrb	r3, [r7, #11]
 8008882:	3301      	adds	r3, #1
 8008884:	72fb      	strb	r3, [r7, #11]
    break;
 8008886:	e11e      	b.n	8008ac6 <USBD_GetDescriptor+0x2da>
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	687a      	ldr	r2, [r7, #4]
 8008892:	7c12      	ldrb	r2, [r2, #16]
 8008894:	f107 0108 	add.w	r1, r7, #8
 8008898:	4610      	mov	r0, r2
 800889a:	4798      	blx	r3
 800889c:	60f8      	str	r0, [r7, #12]
    break;
 800889e:	e112      	b.n	8008ac6 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	7c1b      	ldrb	r3, [r3, #16]
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d10d      	bne.n	80088c4 <USBD_GetDescriptor+0xd8>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088b0:	f107 0208 	add.w	r2, r7, #8
 80088b4:	4610      	mov	r0, r2
 80088b6:	4798      	blx	r3
 80088b8:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	3301      	adds	r3, #1
 80088be:	2202      	movs	r2, #2
 80088c0:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 80088c2:	e100      	b.n	8008ac6 <USBD_GetDescriptor+0x2da>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088cc:	f107 0208 	add.w	r2, r7, #8
 80088d0:	4610      	mov	r0, r2
 80088d2:	4798      	blx	r3
 80088d4:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	3301      	adds	r3, #1
 80088da:	2202      	movs	r2, #2
 80088dc:	701a      	strb	r2, [r3, #0]
    break;
 80088de:	e0f2      	b.n	8008ac6 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 80088e0:	683b      	ldr	r3, [r7, #0]
 80088e2:	885b      	ldrh	r3, [r3, #2]
 80088e4:	b2db      	uxtb	r3, r3
 80088e6:	2b05      	cmp	r3, #5
 80088e8:	f200 80ac 	bhi.w	8008a44 <USBD_GetDescriptor+0x258>
 80088ec:	a201      	add	r2, pc, #4	; (adr r2, 80088f4 <USBD_GetDescriptor+0x108>)
 80088ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088f2:	bf00      	nop
 80088f4:	0800890d 	.word	0x0800890d
 80088f8:	08008941 	.word	0x08008941
 80088fc:	08008975 	.word	0x08008975
 8008900:	080089a9 	.word	0x080089a9
 8008904:	080089dd 	.word	0x080089dd
 8008908:	08008a11 	.word	0x08008a11
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008912:	685b      	ldr	r3, [r3, #4]
 8008914:	2b00      	cmp	r3, #0
 8008916:	d00b      	beq.n	8008930 <USBD_GetDescriptor+0x144>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800891e:	685b      	ldr	r3, [r3, #4]
 8008920:	687a      	ldr	r2, [r7, #4]
 8008922:	7c12      	ldrb	r2, [r2, #16]
 8008924:	f107 0108 	add.w	r1, r7, #8
 8008928:	4610      	mov	r0, r2
 800892a:	4798      	blx	r3
 800892c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800892e:	e091      	b.n	8008a54 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8008930:	6839      	ldr	r1, [r7, #0]
 8008932:	6878      	ldr	r0, [r7, #4]
 8008934:	f000 faaa 	bl	8008e8c <USBD_CtlError>
        err++;
 8008938:	7afb      	ldrb	r3, [r7, #11]
 800893a:	3301      	adds	r3, #1
 800893c:	72fb      	strb	r3, [r7, #11]
      break;
 800893e:	e089      	b.n	8008a54 <USBD_GetDescriptor+0x268>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008946:	689b      	ldr	r3, [r3, #8]
 8008948:	2b00      	cmp	r3, #0
 800894a:	d00b      	beq.n	8008964 <USBD_GetDescriptor+0x178>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008952:	689b      	ldr	r3, [r3, #8]
 8008954:	687a      	ldr	r2, [r7, #4]
 8008956:	7c12      	ldrb	r2, [r2, #16]
 8008958:	f107 0108 	add.w	r1, r7, #8
 800895c:	4610      	mov	r0, r2
 800895e:	4798      	blx	r3
 8008960:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008962:	e077      	b.n	8008a54 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8008964:	6839      	ldr	r1, [r7, #0]
 8008966:	6878      	ldr	r0, [r7, #4]
 8008968:	f000 fa90 	bl	8008e8c <USBD_CtlError>
        err++;
 800896c:	7afb      	ldrb	r3, [r7, #11]
 800896e:	3301      	adds	r3, #1
 8008970:	72fb      	strb	r3, [r7, #11]
      break;
 8008972:	e06f      	b.n	8008a54 <USBD_GetDescriptor+0x268>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800897a:	68db      	ldr	r3, [r3, #12]
 800897c:	2b00      	cmp	r3, #0
 800897e:	d00b      	beq.n	8008998 <USBD_GetDescriptor+0x1ac>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008986:	68db      	ldr	r3, [r3, #12]
 8008988:	687a      	ldr	r2, [r7, #4]
 800898a:	7c12      	ldrb	r2, [r2, #16]
 800898c:	f107 0108 	add.w	r1, r7, #8
 8008990:	4610      	mov	r0, r2
 8008992:	4798      	blx	r3
 8008994:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008996:	e05d      	b.n	8008a54 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8008998:	6839      	ldr	r1, [r7, #0]
 800899a:	6878      	ldr	r0, [r7, #4]
 800899c:	f000 fa76 	bl	8008e8c <USBD_CtlError>
        err++;
 80089a0:	7afb      	ldrb	r3, [r7, #11]
 80089a2:	3301      	adds	r3, #1
 80089a4:	72fb      	strb	r3, [r7, #11]
      break;
 80089a6:	e055      	b.n	8008a54 <USBD_GetDescriptor+0x268>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089ae:	691b      	ldr	r3, [r3, #16]
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d00b      	beq.n	80089cc <USBD_GetDescriptor+0x1e0>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089ba:	691b      	ldr	r3, [r3, #16]
 80089bc:	687a      	ldr	r2, [r7, #4]
 80089be:	7c12      	ldrb	r2, [r2, #16]
 80089c0:	f107 0108 	add.w	r1, r7, #8
 80089c4:	4610      	mov	r0, r2
 80089c6:	4798      	blx	r3
 80089c8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80089ca:	e043      	b.n	8008a54 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 80089cc:	6839      	ldr	r1, [r7, #0]
 80089ce:	6878      	ldr	r0, [r7, #4]
 80089d0:	f000 fa5c 	bl	8008e8c <USBD_CtlError>
        err++;
 80089d4:	7afb      	ldrb	r3, [r7, #11]
 80089d6:	3301      	adds	r3, #1
 80089d8:	72fb      	strb	r3, [r7, #11]
      break;
 80089da:	e03b      	b.n	8008a54 <USBD_GetDescriptor+0x268>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089e2:	695b      	ldr	r3, [r3, #20]
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d00b      	beq.n	8008a00 <USBD_GetDescriptor+0x214>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089ee:	695b      	ldr	r3, [r3, #20]
 80089f0:	687a      	ldr	r2, [r7, #4]
 80089f2:	7c12      	ldrb	r2, [r2, #16]
 80089f4:	f107 0108 	add.w	r1, r7, #8
 80089f8:	4610      	mov	r0, r2
 80089fa:	4798      	blx	r3
 80089fc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80089fe:	e029      	b.n	8008a54 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8008a00:	6839      	ldr	r1, [r7, #0]
 8008a02:	6878      	ldr	r0, [r7, #4]
 8008a04:	f000 fa42 	bl	8008e8c <USBD_CtlError>
        err++;
 8008a08:	7afb      	ldrb	r3, [r7, #11]
 8008a0a:	3301      	adds	r3, #1
 8008a0c:	72fb      	strb	r3, [r7, #11]
      break;
 8008a0e:	e021      	b.n	8008a54 <USBD_GetDescriptor+0x268>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a16:	699b      	ldr	r3, [r3, #24]
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d00b      	beq.n	8008a34 <USBD_GetDescriptor+0x248>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a22:	699b      	ldr	r3, [r3, #24]
 8008a24:	687a      	ldr	r2, [r7, #4]
 8008a26:	7c12      	ldrb	r2, [r2, #16]
 8008a28:	f107 0108 	add.w	r1, r7, #8
 8008a2c:	4610      	mov	r0, r2
 8008a2e:	4798      	blx	r3
 8008a30:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008a32:	e00f      	b.n	8008a54 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8008a34:	6839      	ldr	r1, [r7, #0]
 8008a36:	6878      	ldr	r0, [r7, #4]
 8008a38:	f000 fa28 	bl	8008e8c <USBD_CtlError>
        err++;
 8008a3c:	7afb      	ldrb	r3, [r7, #11]
 8008a3e:	3301      	adds	r3, #1
 8008a40:	72fb      	strb	r3, [r7, #11]
      break;
 8008a42:	e007      	b.n	8008a54 <USBD_GetDescriptor+0x268>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8008a44:	6839      	ldr	r1, [r7, #0]
 8008a46:	6878      	ldr	r0, [r7, #4]
 8008a48:	f000 fa20 	bl	8008e8c <USBD_CtlError>
      err++;
 8008a4c:	7afb      	ldrb	r3, [r7, #11]
 8008a4e:	3301      	adds	r3, #1
 8008a50:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 8008a52:	bf00      	nop
    }
    break;
 8008a54:	e037      	b.n	8008ac6 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	7c1b      	ldrb	r3, [r3, #16]
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d109      	bne.n	8008a72 <USBD_GetDescriptor+0x286>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a66:	f107 0208 	add.w	r2, r7, #8
 8008a6a:	4610      	mov	r0, r2
 8008a6c:	4798      	blx	r3
 8008a6e:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8008a70:	e029      	b.n	8008ac6 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 8008a72:	6839      	ldr	r1, [r7, #0]
 8008a74:	6878      	ldr	r0, [r7, #4]
 8008a76:	f000 fa09 	bl	8008e8c <USBD_CtlError>
      err++;
 8008a7a:	7afb      	ldrb	r3, [r7, #11]
 8008a7c:	3301      	adds	r3, #1
 8008a7e:	72fb      	strb	r3, [r7, #11]
    break;
 8008a80:	e021      	b.n	8008ac6 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	7c1b      	ldrb	r3, [r3, #16]
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d10d      	bne.n	8008aa6 <USBD_GetDescriptor+0x2ba>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a92:	f107 0208 	add.w	r2, r7, #8
 8008a96:	4610      	mov	r0, r2
 8008a98:	4798      	blx	r3
 8008a9a:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	3301      	adds	r3, #1
 8008aa0:	2207      	movs	r2, #7
 8008aa2:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8008aa4:	e00f      	b.n	8008ac6 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 8008aa6:	6839      	ldr	r1, [r7, #0]
 8008aa8:	6878      	ldr	r0, [r7, #4]
 8008aaa:	f000 f9ef 	bl	8008e8c <USBD_CtlError>
      err++;
 8008aae:	7afb      	ldrb	r3, [r7, #11]
 8008ab0:	3301      	adds	r3, #1
 8008ab2:	72fb      	strb	r3, [r7, #11]
    break;
 8008ab4:	e007      	b.n	8008ac6 <USBD_GetDescriptor+0x2da>

  default:
    USBD_CtlError(pdev, req);
 8008ab6:	6839      	ldr	r1, [r7, #0]
 8008ab8:	6878      	ldr	r0, [r7, #4]
 8008aba:	f000 f9e7 	bl	8008e8c <USBD_CtlError>
    err++;
 8008abe:	7afb      	ldrb	r3, [r7, #11]
 8008ac0:	3301      	adds	r3, #1
 8008ac2:	72fb      	strb	r3, [r7, #11]
    break;
 8008ac4:	bf00      	nop
  }

  if (err != 0U)
 8008ac6:	7afb      	ldrb	r3, [r7, #11]
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d11e      	bne.n	8008b0a <USBD_GetDescriptor+0x31e>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8008acc:	683b      	ldr	r3, [r7, #0]
 8008ace:	88db      	ldrh	r3, [r3, #6]
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d016      	beq.n	8008b02 <USBD_GetDescriptor+0x316>
    {
      if (len != 0U)
 8008ad4:	893b      	ldrh	r3, [r7, #8]
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d00e      	beq.n	8008af8 <USBD_GetDescriptor+0x30c>
      {
        len = MIN(len, req->wLength);
 8008ada:	683b      	ldr	r3, [r7, #0]
 8008adc:	88da      	ldrh	r2, [r3, #6]
 8008ade:	893b      	ldrh	r3, [r7, #8]
 8008ae0:	4293      	cmp	r3, r2
 8008ae2:	bf28      	it	cs
 8008ae4:	4613      	movcs	r3, r2
 8008ae6:	b29b      	uxth	r3, r3
 8008ae8:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8008aea:	893b      	ldrh	r3, [r7, #8]
 8008aec:	461a      	mov	r2, r3
 8008aee:	68f9      	ldr	r1, [r7, #12]
 8008af0:	6878      	ldr	r0, [r7, #4]
 8008af2:	f000 fa3c 	bl	8008f6e <USBD_CtlSendData>
 8008af6:	e009      	b.n	8008b0c <USBD_GetDescriptor+0x320>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8008af8:	6839      	ldr	r1, [r7, #0]
 8008afa:	6878      	ldr	r0, [r7, #4]
 8008afc:	f000 f9c6 	bl	8008e8c <USBD_CtlError>
 8008b00:	e004      	b.n	8008b0c <USBD_GetDescriptor+0x320>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8008b02:	6878      	ldr	r0, [r7, #4]
 8008b04:	f000 fa8d 	bl	8009022 <USBD_CtlSendStatus>
 8008b08:	e000      	b.n	8008b0c <USBD_GetDescriptor+0x320>
    return;
 8008b0a:	bf00      	nop
    }
  }
}
 8008b0c:	3710      	adds	r7, #16
 8008b0e:	46bd      	mov	sp, r7
 8008b10:	bd80      	pop	{r7, pc}
 8008b12:	bf00      	nop

08008b14 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b14:	b580      	push	{r7, lr}
 8008b16:	b084      	sub	sp, #16
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	6078      	str	r0, [r7, #4]
 8008b1c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008b1e:	683b      	ldr	r3, [r7, #0]
 8008b20:	889b      	ldrh	r3, [r3, #4]
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d130      	bne.n	8008b88 <USBD_SetAddress+0x74>
 8008b26:	683b      	ldr	r3, [r7, #0]
 8008b28:	88db      	ldrh	r3, [r3, #6]
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d12c      	bne.n	8008b88 <USBD_SetAddress+0x74>
 8008b2e:	683b      	ldr	r3, [r7, #0]
 8008b30:	885b      	ldrh	r3, [r3, #2]
 8008b32:	2b7f      	cmp	r3, #127	; 0x7f
 8008b34:	d828      	bhi.n	8008b88 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008b36:	683b      	ldr	r3, [r7, #0]
 8008b38:	885b      	ldrh	r3, [r3, #2]
 8008b3a:	b2db      	uxtb	r3, r3
 8008b3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b40:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b48:	2b03      	cmp	r3, #3
 8008b4a:	d104      	bne.n	8008b56 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8008b4c:	6839      	ldr	r1, [r7, #0]
 8008b4e:	6878      	ldr	r0, [r7, #4]
 8008b50:	f000 f99c 	bl	8008e8c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b54:	e01c      	b.n	8008b90 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	7bfa      	ldrb	r2, [r7, #15]
 8008b5a:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008b5e:	7bfb      	ldrb	r3, [r7, #15]
 8008b60:	4619      	mov	r1, r3
 8008b62:	6878      	ldr	r0, [r7, #4]
 8008b64:	f000 fe87 	bl	8009876 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008b68:	6878      	ldr	r0, [r7, #4]
 8008b6a:	f000 fa5a 	bl	8009022 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008b6e:	7bfb      	ldrb	r3, [r7, #15]
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d004      	beq.n	8008b7e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	2202      	movs	r2, #2
 8008b78:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b7c:	e008      	b.n	8008b90 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	2201      	movs	r2, #1
 8008b82:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b86:	e003      	b.n	8008b90 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008b88:	6839      	ldr	r1, [r7, #0]
 8008b8a:	6878      	ldr	r0, [r7, #4]
 8008b8c:	f000 f97e 	bl	8008e8c <USBD_CtlError>
  }
}
 8008b90:	bf00      	nop
 8008b92:	3710      	adds	r7, #16
 8008b94:	46bd      	mov	sp, r7
 8008b96:	bd80      	pop	{r7, pc}

08008b98 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b98:	b580      	push	{r7, lr}
 8008b9a:	b084      	sub	sp, #16
 8008b9c:	af00      	add	r7, sp, #0
 8008b9e:	6078      	str	r0, [r7, #4]
 8008ba0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008ba2:	2300      	movs	r3, #0
 8008ba4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008ba6:	683b      	ldr	r3, [r7, #0]
 8008ba8:	885b      	ldrh	r3, [r3, #2]
 8008baa:	b2da      	uxtb	r2, r3
 8008bac:	4b4b      	ldr	r3, [pc, #300]	; (8008cdc <USBD_SetConfig+0x144>)
 8008bae:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008bb0:	4b4a      	ldr	r3, [pc, #296]	; (8008cdc <USBD_SetConfig+0x144>)
 8008bb2:	781b      	ldrb	r3, [r3, #0]
 8008bb4:	2b01      	cmp	r3, #1
 8008bb6:	d905      	bls.n	8008bc4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008bb8:	6839      	ldr	r1, [r7, #0]
 8008bba:	6878      	ldr	r0, [r7, #4]
 8008bbc:	f000 f966 	bl	8008e8c <USBD_CtlError>
    return USBD_FAIL;
 8008bc0:	2303      	movs	r3, #3
 8008bc2:	e087      	b.n	8008cd4 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008bca:	2b02      	cmp	r3, #2
 8008bcc:	d002      	beq.n	8008bd4 <USBD_SetConfig+0x3c>
 8008bce:	2b03      	cmp	r3, #3
 8008bd0:	d025      	beq.n	8008c1e <USBD_SetConfig+0x86>
 8008bd2:	e071      	b.n	8008cb8 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8008bd4:	4b41      	ldr	r3, [pc, #260]	; (8008cdc <USBD_SetConfig+0x144>)
 8008bd6:	781b      	ldrb	r3, [r3, #0]
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d01c      	beq.n	8008c16 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8008bdc:	4b3f      	ldr	r3, [pc, #252]	; (8008cdc <USBD_SetConfig+0x144>)
 8008bde:	781b      	ldrb	r3, [r3, #0]
 8008be0:	461a      	mov	r2, r3
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 8008be6:	4b3d      	ldr	r3, [pc, #244]	; (8008cdc <USBD_SetConfig+0x144>)
 8008be8:	781b      	ldrb	r3, [r3, #0]
 8008bea:	4619      	mov	r1, r3
 8008bec:	6878      	ldr	r0, [r7, #4]
 8008bee:	f7ff f9bd 	bl	8007f6c <USBD_SetClassConfig>
 8008bf2:	4603      	mov	r3, r0
 8008bf4:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 8008bf6:	7bfb      	ldrb	r3, [r7, #15]
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d004      	beq.n	8008c06 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8008bfc:	6839      	ldr	r1, [r7, #0]
 8008bfe:	6878      	ldr	r0, [r7, #4]
 8008c00:	f000 f944 	bl	8008e8c <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8008c04:	e065      	b.n	8008cd2 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8008c06:	6878      	ldr	r0, [r7, #4]
 8008c08:	f000 fa0b 	bl	8009022 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	2203      	movs	r2, #3
 8008c10:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8008c14:	e05d      	b.n	8008cd2 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8008c16:	6878      	ldr	r0, [r7, #4]
 8008c18:	f000 fa03 	bl	8009022 <USBD_CtlSendStatus>
    break;
 8008c1c:	e059      	b.n	8008cd2 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 8008c1e:	4b2f      	ldr	r3, [pc, #188]	; (8008cdc <USBD_SetConfig+0x144>)
 8008c20:	781b      	ldrb	r3, [r3, #0]
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d112      	bne.n	8008c4c <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	2202      	movs	r2, #2
 8008c2a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8008c2e:	4b2b      	ldr	r3, [pc, #172]	; (8008cdc <USBD_SetConfig+0x144>)
 8008c30:	781b      	ldrb	r3, [r3, #0]
 8008c32:	461a      	mov	r2, r3
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008c38:	4b28      	ldr	r3, [pc, #160]	; (8008cdc <USBD_SetConfig+0x144>)
 8008c3a:	781b      	ldrb	r3, [r3, #0]
 8008c3c:	4619      	mov	r1, r3
 8008c3e:	6878      	ldr	r0, [r7, #4]
 8008c40:	f7ff f9b0 	bl	8007fa4 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8008c44:	6878      	ldr	r0, [r7, #4]
 8008c46:	f000 f9ec 	bl	8009022 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8008c4a:	e042      	b.n	8008cd2 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8008c4c:	4b23      	ldr	r3, [pc, #140]	; (8008cdc <USBD_SetConfig+0x144>)
 8008c4e:	781b      	ldrb	r3, [r3, #0]
 8008c50:	461a      	mov	r2, r3
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	685b      	ldr	r3, [r3, #4]
 8008c56:	429a      	cmp	r2, r3
 8008c58:	d02a      	beq.n	8008cb0 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	685b      	ldr	r3, [r3, #4]
 8008c5e:	b2db      	uxtb	r3, r3
 8008c60:	4619      	mov	r1, r3
 8008c62:	6878      	ldr	r0, [r7, #4]
 8008c64:	f7ff f99e 	bl	8007fa4 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8008c68:	4b1c      	ldr	r3, [pc, #112]	; (8008cdc <USBD_SetConfig+0x144>)
 8008c6a:	781b      	ldrb	r3, [r3, #0]
 8008c6c:	461a      	mov	r2, r3
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8008c72:	4b1a      	ldr	r3, [pc, #104]	; (8008cdc <USBD_SetConfig+0x144>)
 8008c74:	781b      	ldrb	r3, [r3, #0]
 8008c76:	4619      	mov	r1, r3
 8008c78:	6878      	ldr	r0, [r7, #4]
 8008c7a:	f7ff f977 	bl	8007f6c <USBD_SetClassConfig>
 8008c7e:	4603      	mov	r3, r0
 8008c80:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 8008c82:	7bfb      	ldrb	r3, [r7, #15]
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d00f      	beq.n	8008ca8 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8008c88:	6839      	ldr	r1, [r7, #0]
 8008c8a:	6878      	ldr	r0, [r7, #4]
 8008c8c:	f000 f8fe 	bl	8008e8c <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	685b      	ldr	r3, [r3, #4]
 8008c94:	b2db      	uxtb	r3, r3
 8008c96:	4619      	mov	r1, r3
 8008c98:	6878      	ldr	r0, [r7, #4]
 8008c9a:	f7ff f983 	bl	8007fa4 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	2202      	movs	r2, #2
 8008ca2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8008ca6:	e014      	b.n	8008cd2 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8008ca8:	6878      	ldr	r0, [r7, #4]
 8008caa:	f000 f9ba 	bl	8009022 <USBD_CtlSendStatus>
    break;
 8008cae:	e010      	b.n	8008cd2 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8008cb0:	6878      	ldr	r0, [r7, #4]
 8008cb2:	f000 f9b6 	bl	8009022 <USBD_CtlSendStatus>
    break;
 8008cb6:	e00c      	b.n	8008cd2 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8008cb8:	6839      	ldr	r1, [r7, #0]
 8008cba:	6878      	ldr	r0, [r7, #4]
 8008cbc:	f000 f8e6 	bl	8008e8c <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008cc0:	4b06      	ldr	r3, [pc, #24]	; (8008cdc <USBD_SetConfig+0x144>)
 8008cc2:	781b      	ldrb	r3, [r3, #0]
 8008cc4:	4619      	mov	r1, r3
 8008cc6:	6878      	ldr	r0, [r7, #4]
 8008cc8:	f7ff f96c 	bl	8007fa4 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8008ccc:	2303      	movs	r3, #3
 8008cce:	73fb      	strb	r3, [r7, #15]
    break;
 8008cd0:	bf00      	nop
  }

  return ret;
 8008cd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cd4:	4618      	mov	r0, r3
 8008cd6:	3710      	adds	r7, #16
 8008cd8:	46bd      	mov	sp, r7
 8008cda:	bd80      	pop	{r7, pc}
 8008cdc:	200001e9 	.word	0x200001e9

08008ce0 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ce0:	b580      	push	{r7, lr}
 8008ce2:	b082      	sub	sp, #8
 8008ce4:	af00      	add	r7, sp, #0
 8008ce6:	6078      	str	r0, [r7, #4]
 8008ce8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008cea:	683b      	ldr	r3, [r7, #0]
 8008cec:	88db      	ldrh	r3, [r3, #6]
 8008cee:	2b01      	cmp	r3, #1
 8008cf0:	d004      	beq.n	8008cfc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008cf2:	6839      	ldr	r1, [r7, #0]
 8008cf4:	6878      	ldr	r0, [r7, #4]
 8008cf6:	f000 f8c9 	bl	8008e8c <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 8008cfa:	e021      	b.n	8008d40 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d02:	2b01      	cmp	r3, #1
 8008d04:	db17      	blt.n	8008d36 <USBD_GetConfig+0x56>
 8008d06:	2b02      	cmp	r3, #2
 8008d08:	dd02      	ble.n	8008d10 <USBD_GetConfig+0x30>
 8008d0a:	2b03      	cmp	r3, #3
 8008d0c:	d00b      	beq.n	8008d26 <USBD_GetConfig+0x46>
 8008d0e:	e012      	b.n	8008d36 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	2200      	movs	r2, #0
 8008d14:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	3308      	adds	r3, #8
 8008d1a:	2201      	movs	r2, #1
 8008d1c:	4619      	mov	r1, r3
 8008d1e:	6878      	ldr	r0, [r7, #4]
 8008d20:	f000 f925 	bl	8008f6e <USBD_CtlSendData>
      break;
 8008d24:	e00c      	b.n	8008d40 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	3304      	adds	r3, #4
 8008d2a:	2201      	movs	r2, #1
 8008d2c:	4619      	mov	r1, r3
 8008d2e:	6878      	ldr	r0, [r7, #4]
 8008d30:	f000 f91d 	bl	8008f6e <USBD_CtlSendData>
      break;
 8008d34:	e004      	b.n	8008d40 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 8008d36:	6839      	ldr	r1, [r7, #0]
 8008d38:	6878      	ldr	r0, [r7, #4]
 8008d3a:	f000 f8a7 	bl	8008e8c <USBD_CtlError>
      break;
 8008d3e:	bf00      	nop
}
 8008d40:	bf00      	nop
 8008d42:	3708      	adds	r7, #8
 8008d44:	46bd      	mov	sp, r7
 8008d46:	bd80      	pop	{r7, pc}

08008d48 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d48:	b580      	push	{r7, lr}
 8008d4a:	b082      	sub	sp, #8
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	6078      	str	r0, [r7, #4]
 8008d50:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d58:	3b01      	subs	r3, #1
 8008d5a:	2b02      	cmp	r3, #2
 8008d5c:	d81e      	bhi.n	8008d9c <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 8008d5e:	683b      	ldr	r3, [r7, #0]
 8008d60:	88db      	ldrh	r3, [r3, #6]
 8008d62:	2b02      	cmp	r3, #2
 8008d64:	d004      	beq.n	8008d70 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8008d66:	6839      	ldr	r1, [r7, #0]
 8008d68:	6878      	ldr	r0, [r7, #4]
 8008d6a:	f000 f88f 	bl	8008e8c <USBD_CtlError>
      break;
 8008d6e:	e01a      	b.n	8008da6 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	2201      	movs	r2, #1
 8008d74:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d005      	beq.n	8008d8c <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	68db      	ldr	r3, [r3, #12]
 8008d84:	f043 0202 	orr.w	r2, r3, #2
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	330c      	adds	r3, #12
 8008d90:	2202      	movs	r2, #2
 8008d92:	4619      	mov	r1, r3
 8008d94:	6878      	ldr	r0, [r7, #4]
 8008d96:	f000 f8ea 	bl	8008f6e <USBD_CtlSendData>
    break;
 8008d9a:	e004      	b.n	8008da6 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 8008d9c:	6839      	ldr	r1, [r7, #0]
 8008d9e:	6878      	ldr	r0, [r7, #4]
 8008da0:	f000 f874 	bl	8008e8c <USBD_CtlError>
    break;
 8008da4:	bf00      	nop
  }
}
 8008da6:	bf00      	nop
 8008da8:	3708      	adds	r7, #8
 8008daa:	46bd      	mov	sp, r7
 8008dac:	bd80      	pop	{r7, pc}

08008dae <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008dae:	b580      	push	{r7, lr}
 8008db0:	b082      	sub	sp, #8
 8008db2:	af00      	add	r7, sp, #0
 8008db4:	6078      	str	r0, [r7, #4]
 8008db6:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008db8:	683b      	ldr	r3, [r7, #0]
 8008dba:	885b      	ldrh	r3, [r3, #2]
 8008dbc:	2b01      	cmp	r3, #1
 8008dbe:	d106      	bne.n	8008dce <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	2201      	movs	r2, #1
 8008dc4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008dc8:	6878      	ldr	r0, [r7, #4]
 8008dca:	f000 f92a 	bl	8009022 <USBD_CtlSendStatus>
  }
}
 8008dce:	bf00      	nop
 8008dd0:	3708      	adds	r7, #8
 8008dd2:	46bd      	mov	sp, r7
 8008dd4:	bd80      	pop	{r7, pc}

08008dd6 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008dd6:	b580      	push	{r7, lr}
 8008dd8:	b082      	sub	sp, #8
 8008dda:	af00      	add	r7, sp, #0
 8008ddc:	6078      	str	r0, [r7, #4]
 8008dde:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008de6:	3b01      	subs	r3, #1
 8008de8:	2b02      	cmp	r3, #2
 8008dea:	d80b      	bhi.n	8008e04 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008dec:	683b      	ldr	r3, [r7, #0]
 8008dee:	885b      	ldrh	r3, [r3, #2]
 8008df0:	2b01      	cmp	r3, #1
 8008df2:	d10c      	bne.n	8008e0e <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	2200      	movs	r2, #0
 8008df8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008dfc:	6878      	ldr	r0, [r7, #4]
 8008dfe:	f000 f910 	bl	8009022 <USBD_CtlSendStatus>
      }
      break;
 8008e02:	e004      	b.n	8008e0e <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8008e04:	6839      	ldr	r1, [r7, #0]
 8008e06:	6878      	ldr	r0, [r7, #4]
 8008e08:	f000 f840 	bl	8008e8c <USBD_CtlError>
      break;
 8008e0c:	e000      	b.n	8008e10 <USBD_ClrFeature+0x3a>
      break;
 8008e0e:	bf00      	nop
  }
}
 8008e10:	bf00      	nop
 8008e12:	3708      	adds	r7, #8
 8008e14:	46bd      	mov	sp, r7
 8008e16:	bd80      	pop	{r7, pc}

08008e18 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008e18:	b580      	push	{r7, lr}
 8008e1a:	b084      	sub	sp, #16
 8008e1c:	af00      	add	r7, sp, #0
 8008e1e:	6078      	str	r0, [r7, #4]
 8008e20:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008e22:	683b      	ldr	r3, [r7, #0]
 8008e24:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	781a      	ldrb	r2, [r3, #0]
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	3301      	adds	r3, #1
 8008e32:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	781a      	ldrb	r2, [r3, #0]
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	3301      	adds	r3, #1
 8008e40:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008e42:	68f8      	ldr	r0, [r7, #12]
 8008e44:	f7ff faa8 	bl	8008398 <SWAPBYTE>
 8008e48:	4603      	mov	r3, r0
 8008e4a:	461a      	mov	r2, r3
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	3301      	adds	r3, #1
 8008e54:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	3301      	adds	r3, #1
 8008e5a:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008e5c:	68f8      	ldr	r0, [r7, #12]
 8008e5e:	f7ff fa9b 	bl	8008398 <SWAPBYTE>
 8008e62:	4603      	mov	r3, r0
 8008e64:	461a      	mov	r2, r3
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	3301      	adds	r3, #1
 8008e6e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	3301      	adds	r3, #1
 8008e74:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008e76:	68f8      	ldr	r0, [r7, #12]
 8008e78:	f7ff fa8e 	bl	8008398 <SWAPBYTE>
 8008e7c:	4603      	mov	r3, r0
 8008e7e:	461a      	mov	r2, r3
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	80da      	strh	r2, [r3, #6]
}
 8008e84:	bf00      	nop
 8008e86:	3710      	adds	r7, #16
 8008e88:	46bd      	mov	sp, r7
 8008e8a:	bd80      	pop	{r7, pc}

08008e8c <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e8c:	b580      	push	{r7, lr}
 8008e8e:	b082      	sub	sp, #8
 8008e90:	af00      	add	r7, sp, #0
 8008e92:	6078      	str	r0, [r7, #4]
 8008e94:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008e96:	2180      	movs	r1, #128	; 0x80
 8008e98:	6878      	ldr	r0, [r7, #4]
 8008e9a:	f000 fc81 	bl	80097a0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008e9e:	2100      	movs	r1, #0
 8008ea0:	6878      	ldr	r0, [r7, #4]
 8008ea2:	f000 fc7d 	bl	80097a0 <USBD_LL_StallEP>
}
 8008ea6:	bf00      	nop
 8008ea8:	3708      	adds	r7, #8
 8008eaa:	46bd      	mov	sp, r7
 8008eac:	bd80      	pop	{r7, pc}

08008eae <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008eae:	b580      	push	{r7, lr}
 8008eb0:	b086      	sub	sp, #24
 8008eb2:	af00      	add	r7, sp, #0
 8008eb4:	60f8      	str	r0, [r7, #12]
 8008eb6:	60b9      	str	r1, [r7, #8]
 8008eb8:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008eba:	2300      	movs	r3, #0
 8008ebc:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d036      	beq.n	8008f32 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008ec8:	6938      	ldr	r0, [r7, #16]
 8008eca:	f000 f836 	bl	8008f3a <USBD_GetLen>
 8008ece:	4603      	mov	r3, r0
 8008ed0:	3301      	adds	r3, #1
 8008ed2:	b29b      	uxth	r3, r3
 8008ed4:	005b      	lsls	r3, r3, #1
 8008ed6:	b29a      	uxth	r2, r3
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008edc:	7dfb      	ldrb	r3, [r7, #23]
 8008ede:	68ba      	ldr	r2, [r7, #8]
 8008ee0:	4413      	add	r3, r2
 8008ee2:	687a      	ldr	r2, [r7, #4]
 8008ee4:	7812      	ldrb	r2, [r2, #0]
 8008ee6:	701a      	strb	r2, [r3, #0]
  idx++;
 8008ee8:	7dfb      	ldrb	r3, [r7, #23]
 8008eea:	3301      	adds	r3, #1
 8008eec:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008eee:	7dfb      	ldrb	r3, [r7, #23]
 8008ef0:	68ba      	ldr	r2, [r7, #8]
 8008ef2:	4413      	add	r3, r2
 8008ef4:	2203      	movs	r2, #3
 8008ef6:	701a      	strb	r2, [r3, #0]
  idx++;
 8008ef8:	7dfb      	ldrb	r3, [r7, #23]
 8008efa:	3301      	adds	r3, #1
 8008efc:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008efe:	e013      	b.n	8008f28 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008f00:	7dfb      	ldrb	r3, [r7, #23]
 8008f02:	68ba      	ldr	r2, [r7, #8]
 8008f04:	4413      	add	r3, r2
 8008f06:	693a      	ldr	r2, [r7, #16]
 8008f08:	7812      	ldrb	r2, [r2, #0]
 8008f0a:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008f0c:	693b      	ldr	r3, [r7, #16]
 8008f0e:	3301      	adds	r3, #1
 8008f10:	613b      	str	r3, [r7, #16]
    idx++;
 8008f12:	7dfb      	ldrb	r3, [r7, #23]
 8008f14:	3301      	adds	r3, #1
 8008f16:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008f18:	7dfb      	ldrb	r3, [r7, #23]
 8008f1a:	68ba      	ldr	r2, [r7, #8]
 8008f1c:	4413      	add	r3, r2
 8008f1e:	2200      	movs	r2, #0
 8008f20:	701a      	strb	r2, [r3, #0]
    idx++;
 8008f22:	7dfb      	ldrb	r3, [r7, #23]
 8008f24:	3301      	adds	r3, #1
 8008f26:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008f28:	693b      	ldr	r3, [r7, #16]
 8008f2a:	781b      	ldrb	r3, [r3, #0]
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d1e7      	bne.n	8008f00 <USBD_GetString+0x52>
 8008f30:	e000      	b.n	8008f34 <USBD_GetString+0x86>
    return;
 8008f32:	bf00      	nop
  }
}
 8008f34:	3718      	adds	r7, #24
 8008f36:	46bd      	mov	sp, r7
 8008f38:	bd80      	pop	{r7, pc}

08008f3a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008f3a:	b480      	push	{r7}
 8008f3c:	b085      	sub	sp, #20
 8008f3e:	af00      	add	r7, sp, #0
 8008f40:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008f42:	2300      	movs	r3, #0
 8008f44:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008f4a:	e005      	b.n	8008f58 <USBD_GetLen+0x1e>
  {
    len++;
 8008f4c:	7bfb      	ldrb	r3, [r7, #15]
 8008f4e:	3301      	adds	r3, #1
 8008f50:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008f52:	68bb      	ldr	r3, [r7, #8]
 8008f54:	3301      	adds	r3, #1
 8008f56:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008f58:	68bb      	ldr	r3, [r7, #8]
 8008f5a:	781b      	ldrb	r3, [r3, #0]
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d1f5      	bne.n	8008f4c <USBD_GetLen+0x12>
  }

  return len;
 8008f60:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f62:	4618      	mov	r0, r3
 8008f64:	3714      	adds	r7, #20
 8008f66:	46bd      	mov	sp, r7
 8008f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f6c:	4770      	bx	lr

08008f6e <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008f6e:	b580      	push	{r7, lr}
 8008f70:	b084      	sub	sp, #16
 8008f72:	af00      	add	r7, sp, #0
 8008f74:	60f8      	str	r0, [r7, #12]
 8008f76:	60b9      	str	r1, [r7, #8]
 8008f78:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	2202      	movs	r2, #2
 8008f7e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	687a      	ldr	r2, [r7, #4]
 8008f86:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	687a      	ldr	r2, [r7, #4]
 8008f8c:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	68ba      	ldr	r2, [r7, #8]
 8008f92:	2100      	movs	r1, #0
 8008f94:	68f8      	ldr	r0, [r7, #12]
 8008f96:	f000 fc8d 	bl	80098b4 <USBD_LL_Transmit>

  return USBD_OK;
 8008f9a:	2300      	movs	r3, #0
}
 8008f9c:	4618      	mov	r0, r3
 8008f9e:	3710      	adds	r7, #16
 8008fa0:	46bd      	mov	sp, r7
 8008fa2:	bd80      	pop	{r7, pc}

08008fa4 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008fa4:	b580      	push	{r7, lr}
 8008fa6:	b084      	sub	sp, #16
 8008fa8:	af00      	add	r7, sp, #0
 8008faa:	60f8      	str	r0, [r7, #12]
 8008fac:	60b9      	str	r1, [r7, #8]
 8008fae:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	68ba      	ldr	r2, [r7, #8]
 8008fb4:	2100      	movs	r1, #0
 8008fb6:	68f8      	ldr	r0, [r7, #12]
 8008fb8:	f000 fc7c 	bl	80098b4 <USBD_LL_Transmit>

  return USBD_OK;
 8008fbc:	2300      	movs	r3, #0
}
 8008fbe:	4618      	mov	r0, r3
 8008fc0:	3710      	adds	r7, #16
 8008fc2:	46bd      	mov	sp, r7
 8008fc4:	bd80      	pop	{r7, pc}

08008fc6 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008fc6:	b580      	push	{r7, lr}
 8008fc8:	b084      	sub	sp, #16
 8008fca:	af00      	add	r7, sp, #0
 8008fcc:	60f8      	str	r0, [r7, #12]
 8008fce:	60b9      	str	r1, [r7, #8]
 8008fd0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	2203      	movs	r2, #3
 8008fd6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	687a      	ldr	r2, [r7, #4]
 8008fde:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	687a      	ldr	r2, [r7, #4]
 8008fe6:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	68ba      	ldr	r2, [r7, #8]
 8008fee:	2100      	movs	r1, #0
 8008ff0:	68f8      	ldr	r0, [r7, #12]
 8008ff2:	f000 fc80 	bl	80098f6 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008ff6:	2300      	movs	r3, #0
}
 8008ff8:	4618      	mov	r0, r3
 8008ffa:	3710      	adds	r7, #16
 8008ffc:	46bd      	mov	sp, r7
 8008ffe:	bd80      	pop	{r7, pc}

08009000 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009000:	b580      	push	{r7, lr}
 8009002:	b084      	sub	sp, #16
 8009004:	af00      	add	r7, sp, #0
 8009006:	60f8      	str	r0, [r7, #12]
 8009008:	60b9      	str	r1, [r7, #8]
 800900a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	68ba      	ldr	r2, [r7, #8]
 8009010:	2100      	movs	r1, #0
 8009012:	68f8      	ldr	r0, [r7, #12]
 8009014:	f000 fc6f 	bl	80098f6 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009018:	2300      	movs	r3, #0
}
 800901a:	4618      	mov	r0, r3
 800901c:	3710      	adds	r7, #16
 800901e:	46bd      	mov	sp, r7
 8009020:	bd80      	pop	{r7, pc}

08009022 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009022:	b580      	push	{r7, lr}
 8009024:	b082      	sub	sp, #8
 8009026:	af00      	add	r7, sp, #0
 8009028:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	2204      	movs	r2, #4
 800902e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009032:	2300      	movs	r3, #0
 8009034:	2200      	movs	r2, #0
 8009036:	2100      	movs	r1, #0
 8009038:	6878      	ldr	r0, [r7, #4]
 800903a:	f000 fc3b 	bl	80098b4 <USBD_LL_Transmit>

  return USBD_OK;
 800903e:	2300      	movs	r3, #0
}
 8009040:	4618      	mov	r0, r3
 8009042:	3708      	adds	r7, #8
 8009044:	46bd      	mov	sp, r7
 8009046:	bd80      	pop	{r7, pc}

08009048 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009048:	b580      	push	{r7, lr}
 800904a:	b082      	sub	sp, #8
 800904c:	af00      	add	r7, sp, #0
 800904e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	2205      	movs	r2, #5
 8009054:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009058:	2300      	movs	r3, #0
 800905a:	2200      	movs	r2, #0
 800905c:	2100      	movs	r1, #0
 800905e:	6878      	ldr	r0, [r7, #4]
 8009060:	f000 fc49 	bl	80098f6 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009064:	2300      	movs	r3, #0
}
 8009066:	4618      	mov	r0, r3
 8009068:	3708      	adds	r7, #8
 800906a:	46bd      	mov	sp, r7
 800906c:	bd80      	pop	{r7, pc}
	...

08009070 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 8009070:	b580      	push	{r7, lr}
 8009072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 8009074:	2200      	movs	r2, #0
 8009076:	4912      	ldr	r1, [pc, #72]	; (80090c0 <MX_USB_Device_Init+0x50>)
 8009078:	4812      	ldr	r0, [pc, #72]	; (80090c4 <MX_USB_Device_Init+0x54>)
 800907a:	f7fe ff09 	bl	8007e90 <USBD_Init>
 800907e:	4603      	mov	r3, r0
 8009080:	2b00      	cmp	r3, #0
 8009082:	d001      	beq.n	8009088 <MX_USB_Device_Init+0x18>
    Error_Handler();
 8009084:	f7f7 ff32 	bl	8000eec <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 8009088:	490f      	ldr	r1, [pc, #60]	; (80090c8 <MX_USB_Device_Init+0x58>)
 800908a:	480e      	ldr	r0, [pc, #56]	; (80090c4 <MX_USB_Device_Init+0x54>)
 800908c:	f7fe ff30 	bl	8007ef0 <USBD_RegisterClass>
 8009090:	4603      	mov	r3, r0
 8009092:	2b00      	cmp	r3, #0
 8009094:	d001      	beq.n	800909a <MX_USB_Device_Init+0x2a>
    Error_Handler();
 8009096:	f7f7 ff29 	bl	8000eec <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800909a:	490c      	ldr	r1, [pc, #48]	; (80090cc <MX_USB_Device_Init+0x5c>)
 800909c:	4809      	ldr	r0, [pc, #36]	; (80090c4 <MX_USB_Device_Init+0x54>)
 800909e:	f7fe fe5b 	bl	8007d58 <USBD_CDC_RegisterInterface>
 80090a2:	4603      	mov	r3, r0
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d001      	beq.n	80090ac <MX_USB_Device_Init+0x3c>
    Error_Handler();
 80090a8:	f7f7 ff20 	bl	8000eec <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 80090ac:	4805      	ldr	r0, [pc, #20]	; (80090c4 <MX_USB_Device_Init+0x54>)
 80090ae:	f7fe ff46 	bl	8007f3e <USBD_Start>
 80090b2:	4603      	mov	r3, r0
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d001      	beq.n	80090bc <MX_USB_Device_Init+0x4c>
    Error_Handler();
 80090b8:	f7f7 ff18 	bl	8000eec <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 80090bc:	bf00      	nop
 80090be:	bd80      	pop	{r7, pc}
 80090c0:	2000016c 	.word	0x2000016c
 80090c4:	200006bc 	.word	0x200006bc
 80090c8:	20000054 	.word	0x20000054
 80090cc:	20000158 	.word	0x20000158

080090d0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80090d0:	b580      	push	{r7, lr}
 80090d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80090d4:	2200      	movs	r2, #0
 80090d6:	4905      	ldr	r1, [pc, #20]	; (80090ec <CDC_Init_FS+0x1c>)
 80090d8:	4805      	ldr	r0, [pc, #20]	; (80090f0 <CDC_Init_FS+0x20>)
 80090da:	f7fe fe52 	bl	8007d82 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80090de:	4905      	ldr	r1, [pc, #20]	; (80090f4 <CDC_Init_FS+0x24>)
 80090e0:	4803      	ldr	r0, [pc, #12]	; (80090f0 <CDC_Init_FS+0x20>)
 80090e2:	f7fe fe67 	bl	8007db4 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80090e6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80090e8:	4618      	mov	r0, r3
 80090ea:	bd80      	pop	{r7, pc}
 80090ec:	20000d74 	.word	0x20000d74
 80090f0:	200006bc 	.word	0x200006bc
 80090f4:	2000098c 	.word	0x2000098c

080090f8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80090f8:	b480      	push	{r7}
 80090fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80090fc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80090fe:	4618      	mov	r0, r3
 8009100:	46bd      	mov	sp, r7
 8009102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009106:	4770      	bx	lr

08009108 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009108:	b480      	push	{r7}
 800910a:	b083      	sub	sp, #12
 800910c:	af00      	add	r7, sp, #0
 800910e:	4603      	mov	r3, r0
 8009110:	6039      	str	r1, [r7, #0]
 8009112:	71fb      	strb	r3, [r7, #7]
 8009114:	4613      	mov	r3, r2
 8009116:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009118:	79fb      	ldrb	r3, [r7, #7]
 800911a:	2b23      	cmp	r3, #35	; 0x23
 800911c:	d84a      	bhi.n	80091b4 <CDC_Control_FS+0xac>
 800911e:	a201      	add	r2, pc, #4	; (adr r2, 8009124 <CDC_Control_FS+0x1c>)
 8009120:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009124:	080091b5 	.word	0x080091b5
 8009128:	080091b5 	.word	0x080091b5
 800912c:	080091b5 	.word	0x080091b5
 8009130:	080091b5 	.word	0x080091b5
 8009134:	080091b5 	.word	0x080091b5
 8009138:	080091b5 	.word	0x080091b5
 800913c:	080091b5 	.word	0x080091b5
 8009140:	080091b5 	.word	0x080091b5
 8009144:	080091b5 	.word	0x080091b5
 8009148:	080091b5 	.word	0x080091b5
 800914c:	080091b5 	.word	0x080091b5
 8009150:	080091b5 	.word	0x080091b5
 8009154:	080091b5 	.word	0x080091b5
 8009158:	080091b5 	.word	0x080091b5
 800915c:	080091b5 	.word	0x080091b5
 8009160:	080091b5 	.word	0x080091b5
 8009164:	080091b5 	.word	0x080091b5
 8009168:	080091b5 	.word	0x080091b5
 800916c:	080091b5 	.word	0x080091b5
 8009170:	080091b5 	.word	0x080091b5
 8009174:	080091b5 	.word	0x080091b5
 8009178:	080091b5 	.word	0x080091b5
 800917c:	080091b5 	.word	0x080091b5
 8009180:	080091b5 	.word	0x080091b5
 8009184:	080091b5 	.word	0x080091b5
 8009188:	080091b5 	.word	0x080091b5
 800918c:	080091b5 	.word	0x080091b5
 8009190:	080091b5 	.word	0x080091b5
 8009194:	080091b5 	.word	0x080091b5
 8009198:	080091b5 	.word	0x080091b5
 800919c:	080091b5 	.word	0x080091b5
 80091a0:	080091b5 	.word	0x080091b5
 80091a4:	080091b5 	.word	0x080091b5
 80091a8:	080091b5 	.word	0x080091b5
 80091ac:	080091b5 	.word	0x080091b5
 80091b0:	080091b5 	.word	0x080091b5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80091b4:	bf00      	nop
  }

  return (USBD_OK);
 80091b6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80091b8:	4618      	mov	r0, r3
 80091ba:	370c      	adds	r7, #12
 80091bc:	46bd      	mov	sp, r7
 80091be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c2:	4770      	bx	lr

080091c4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80091c4:	b580      	push	{r7, lr}
 80091c6:	b082      	sub	sp, #8
 80091c8:	af00      	add	r7, sp, #0
 80091ca:	6078      	str	r0, [r7, #4]
 80091cc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  CDC_On_Receive(Buf, Len); // (1)
 80091ce:	6839      	ldr	r1, [r7, #0]
 80091d0:	6878      	ldr	r0, [r7, #4]
 80091d2:	f7f7 f821 	bl	8000218 <CDC_On_Receive>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80091d6:	6879      	ldr	r1, [r7, #4]
 80091d8:	4805      	ldr	r0, [pc, #20]	; (80091f0 <CDC_Receive_FS+0x2c>)
 80091da:	f7fe fdeb 	bl	8007db4 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80091de:	4804      	ldr	r0, [pc, #16]	; (80091f0 <CDC_Receive_FS+0x2c>)
 80091e0:	f7fe fe2c 	bl	8007e3c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80091e4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80091e6:	4618      	mov	r0, r3
 80091e8:	3708      	adds	r7, #8
 80091ea:	46bd      	mov	sp, r7
 80091ec:	bd80      	pop	{r7, pc}
 80091ee:	bf00      	nop
 80091f0:	200006bc 	.word	0x200006bc

080091f4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80091f4:	b580      	push	{r7, lr}
 80091f6:	b084      	sub	sp, #16
 80091f8:	af00      	add	r7, sp, #0
 80091fa:	6078      	str	r0, [r7, #4]
 80091fc:	460b      	mov	r3, r1
 80091fe:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8009200:	2300      	movs	r3, #0
 8009202:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8009204:	4b0d      	ldr	r3, [pc, #52]	; (800923c <CDC_Transmit_FS+0x48>)
 8009206:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800920a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800920c:	68bb      	ldr	r3, [r7, #8]
 800920e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009212:	2b00      	cmp	r3, #0
 8009214:	d001      	beq.n	800921a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8009216:	2301      	movs	r3, #1
 8009218:	e00b      	b.n	8009232 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800921a:	887b      	ldrh	r3, [r7, #2]
 800921c:	461a      	mov	r2, r3
 800921e:	6879      	ldr	r1, [r7, #4]
 8009220:	4806      	ldr	r0, [pc, #24]	; (800923c <CDC_Transmit_FS+0x48>)
 8009222:	f7fe fdae 	bl	8007d82 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8009226:	4805      	ldr	r0, [pc, #20]	; (800923c <CDC_Transmit_FS+0x48>)
 8009228:	f7fe fdd8 	bl	8007ddc <USBD_CDC_TransmitPacket>
 800922c:	4603      	mov	r3, r0
 800922e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8009230:	7bfb      	ldrb	r3, [r7, #15]
}
 8009232:	4618      	mov	r0, r3
 8009234:	3710      	adds	r7, #16
 8009236:	46bd      	mov	sp, r7
 8009238:	bd80      	pop	{r7, pc}
 800923a:	bf00      	nop
 800923c:	200006bc 	.word	0x200006bc

08009240 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8009240:	b480      	push	{r7}
 8009242:	b087      	sub	sp, #28
 8009244:	af00      	add	r7, sp, #0
 8009246:	60f8      	str	r0, [r7, #12]
 8009248:	60b9      	str	r1, [r7, #8]
 800924a:	4613      	mov	r3, r2
 800924c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800924e:	2300      	movs	r3, #0
 8009250:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8009252:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009256:	4618      	mov	r0, r3
 8009258:	371c      	adds	r7, #28
 800925a:	46bd      	mov	sp, r7
 800925c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009260:	4770      	bx	lr
	...

08009264 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009264:	b480      	push	{r7}
 8009266:	b083      	sub	sp, #12
 8009268:	af00      	add	r7, sp, #0
 800926a:	4603      	mov	r3, r0
 800926c:	6039      	str	r1, [r7, #0]
 800926e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 8009270:	683b      	ldr	r3, [r7, #0]
 8009272:	2212      	movs	r2, #18
 8009274:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 8009276:	4b03      	ldr	r3, [pc, #12]	; (8009284 <USBD_CDC_DeviceDescriptor+0x20>)
}
 8009278:	4618      	mov	r0, r3
 800927a:	370c      	adds	r7, #12
 800927c:	46bd      	mov	sp, r7
 800927e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009282:	4770      	bx	lr
 8009284:	2000018c 	.word	0x2000018c

08009288 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009288:	b480      	push	{r7}
 800928a:	b083      	sub	sp, #12
 800928c:	af00      	add	r7, sp, #0
 800928e:	4603      	mov	r3, r0
 8009290:	6039      	str	r1, [r7, #0]
 8009292:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009294:	683b      	ldr	r3, [r7, #0]
 8009296:	2204      	movs	r2, #4
 8009298:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800929a:	4b03      	ldr	r3, [pc, #12]	; (80092a8 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 800929c:	4618      	mov	r0, r3
 800929e:	370c      	adds	r7, #12
 80092a0:	46bd      	mov	sp, r7
 80092a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a6:	4770      	bx	lr
 80092a8:	200001a0 	.word	0x200001a0

080092ac <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80092ac:	b580      	push	{r7, lr}
 80092ae:	b082      	sub	sp, #8
 80092b0:	af00      	add	r7, sp, #0
 80092b2:	4603      	mov	r3, r0
 80092b4:	6039      	str	r1, [r7, #0]
 80092b6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80092b8:	79fb      	ldrb	r3, [r7, #7]
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d105      	bne.n	80092ca <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 80092be:	683a      	ldr	r2, [r7, #0]
 80092c0:	4907      	ldr	r1, [pc, #28]	; (80092e0 <USBD_CDC_ProductStrDescriptor+0x34>)
 80092c2:	4808      	ldr	r0, [pc, #32]	; (80092e4 <USBD_CDC_ProductStrDescriptor+0x38>)
 80092c4:	f7ff fdf3 	bl	8008eae <USBD_GetString>
 80092c8:	e004      	b.n	80092d4 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 80092ca:	683a      	ldr	r2, [r7, #0]
 80092cc:	4904      	ldr	r1, [pc, #16]	; (80092e0 <USBD_CDC_ProductStrDescriptor+0x34>)
 80092ce:	4805      	ldr	r0, [pc, #20]	; (80092e4 <USBD_CDC_ProductStrDescriptor+0x38>)
 80092d0:	f7ff fded 	bl	8008eae <USBD_GetString>
  }
  return USBD_StrDesc;
 80092d4:	4b02      	ldr	r3, [pc, #8]	; (80092e0 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 80092d6:	4618      	mov	r0, r3
 80092d8:	3708      	adds	r7, #8
 80092da:	46bd      	mov	sp, r7
 80092dc:	bd80      	pop	{r7, pc}
 80092de:	bf00      	nop
 80092e0:	2000115c 	.word	0x2000115c
 80092e4:	08009ae8 	.word	0x08009ae8

080092e8 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80092e8:	b580      	push	{r7, lr}
 80092ea:	b082      	sub	sp, #8
 80092ec:	af00      	add	r7, sp, #0
 80092ee:	4603      	mov	r3, r0
 80092f0:	6039      	str	r1, [r7, #0]
 80092f2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80092f4:	683a      	ldr	r2, [r7, #0]
 80092f6:	4904      	ldr	r1, [pc, #16]	; (8009308 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 80092f8:	4804      	ldr	r0, [pc, #16]	; (800930c <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 80092fa:	f7ff fdd8 	bl	8008eae <USBD_GetString>
  return USBD_StrDesc;
 80092fe:	4b02      	ldr	r3, [pc, #8]	; (8009308 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 8009300:	4618      	mov	r0, r3
 8009302:	3708      	adds	r7, #8
 8009304:	46bd      	mov	sp, r7
 8009306:	bd80      	pop	{r7, pc}
 8009308:	2000115c 	.word	0x2000115c
 800930c:	08009b00 	.word	0x08009b00

08009310 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009310:	b580      	push	{r7, lr}
 8009312:	b082      	sub	sp, #8
 8009314:	af00      	add	r7, sp, #0
 8009316:	4603      	mov	r3, r0
 8009318:	6039      	str	r1, [r7, #0]
 800931a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800931c:	683b      	ldr	r3, [r7, #0]
 800931e:	221a      	movs	r2, #26
 8009320:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009322:	f000 f843 	bl	80093ac <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8009326:	4b02      	ldr	r3, [pc, #8]	; (8009330 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 8009328:	4618      	mov	r0, r3
 800932a:	3708      	adds	r7, #8
 800932c:	46bd      	mov	sp, r7
 800932e:	bd80      	pop	{r7, pc}
 8009330:	200001a4 	.word	0x200001a4

08009334 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009334:	b580      	push	{r7, lr}
 8009336:	b082      	sub	sp, #8
 8009338:	af00      	add	r7, sp, #0
 800933a:	4603      	mov	r3, r0
 800933c:	6039      	str	r1, [r7, #0]
 800933e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009340:	79fb      	ldrb	r3, [r7, #7]
 8009342:	2b00      	cmp	r3, #0
 8009344:	d105      	bne.n	8009352 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8009346:	683a      	ldr	r2, [r7, #0]
 8009348:	4907      	ldr	r1, [pc, #28]	; (8009368 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800934a:	4808      	ldr	r0, [pc, #32]	; (800936c <USBD_CDC_ConfigStrDescriptor+0x38>)
 800934c:	f7ff fdaf 	bl	8008eae <USBD_GetString>
 8009350:	e004      	b.n	800935c <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8009352:	683a      	ldr	r2, [r7, #0]
 8009354:	4904      	ldr	r1, [pc, #16]	; (8009368 <USBD_CDC_ConfigStrDescriptor+0x34>)
 8009356:	4805      	ldr	r0, [pc, #20]	; (800936c <USBD_CDC_ConfigStrDescriptor+0x38>)
 8009358:	f7ff fda9 	bl	8008eae <USBD_GetString>
  }
  return USBD_StrDesc;
 800935c:	4b02      	ldr	r3, [pc, #8]	; (8009368 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 800935e:	4618      	mov	r0, r3
 8009360:	3708      	adds	r7, #8
 8009362:	46bd      	mov	sp, r7
 8009364:	bd80      	pop	{r7, pc}
 8009366:	bf00      	nop
 8009368:	2000115c 	.word	0x2000115c
 800936c:	08009b14 	.word	0x08009b14

08009370 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009370:	b580      	push	{r7, lr}
 8009372:	b082      	sub	sp, #8
 8009374:	af00      	add	r7, sp, #0
 8009376:	4603      	mov	r3, r0
 8009378:	6039      	str	r1, [r7, #0]
 800937a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800937c:	79fb      	ldrb	r3, [r7, #7]
 800937e:	2b00      	cmp	r3, #0
 8009380:	d105      	bne.n	800938e <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8009382:	683a      	ldr	r2, [r7, #0]
 8009384:	4907      	ldr	r1, [pc, #28]	; (80093a4 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8009386:	4808      	ldr	r0, [pc, #32]	; (80093a8 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8009388:	f7ff fd91 	bl	8008eae <USBD_GetString>
 800938c:	e004      	b.n	8009398 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800938e:	683a      	ldr	r2, [r7, #0]
 8009390:	4904      	ldr	r1, [pc, #16]	; (80093a4 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8009392:	4805      	ldr	r0, [pc, #20]	; (80093a8 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8009394:	f7ff fd8b 	bl	8008eae <USBD_GetString>
  }
  return USBD_StrDesc;
 8009398:	4b02      	ldr	r3, [pc, #8]	; (80093a4 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 800939a:	4618      	mov	r0, r3
 800939c:	3708      	adds	r7, #8
 800939e:	46bd      	mov	sp, r7
 80093a0:	bd80      	pop	{r7, pc}
 80093a2:	bf00      	nop
 80093a4:	2000115c 	.word	0x2000115c
 80093a8:	08009b20 	.word	0x08009b20

080093ac <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80093ac:	b580      	push	{r7, lr}
 80093ae:	b084      	sub	sp, #16
 80093b0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80093b2:	4b0f      	ldr	r3, [pc, #60]	; (80093f0 <Get_SerialNum+0x44>)
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80093b8:	4b0e      	ldr	r3, [pc, #56]	; (80093f4 <Get_SerialNum+0x48>)
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80093be:	4b0e      	ldr	r3, [pc, #56]	; (80093f8 <Get_SerialNum+0x4c>)
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80093c4:	68fa      	ldr	r2, [r7, #12]
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	4413      	add	r3, r2
 80093ca:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d009      	beq.n	80093e6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80093d2:	2208      	movs	r2, #8
 80093d4:	4909      	ldr	r1, [pc, #36]	; (80093fc <Get_SerialNum+0x50>)
 80093d6:	68f8      	ldr	r0, [r7, #12]
 80093d8:	f000 f814 	bl	8009404 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80093dc:	2204      	movs	r2, #4
 80093de:	4908      	ldr	r1, [pc, #32]	; (8009400 <Get_SerialNum+0x54>)
 80093e0:	68b8      	ldr	r0, [r7, #8]
 80093e2:	f000 f80f 	bl	8009404 <IntToUnicode>
  }
}
 80093e6:	bf00      	nop
 80093e8:	3710      	adds	r7, #16
 80093ea:	46bd      	mov	sp, r7
 80093ec:	bd80      	pop	{r7, pc}
 80093ee:	bf00      	nop
 80093f0:	1fff7590 	.word	0x1fff7590
 80093f4:	1fff7594 	.word	0x1fff7594
 80093f8:	1fff7598 	.word	0x1fff7598
 80093fc:	200001a6 	.word	0x200001a6
 8009400:	200001b6 	.word	0x200001b6

08009404 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009404:	b480      	push	{r7}
 8009406:	b087      	sub	sp, #28
 8009408:	af00      	add	r7, sp, #0
 800940a:	60f8      	str	r0, [r7, #12]
 800940c:	60b9      	str	r1, [r7, #8]
 800940e:	4613      	mov	r3, r2
 8009410:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009412:	2300      	movs	r3, #0
 8009414:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009416:	2300      	movs	r3, #0
 8009418:	75fb      	strb	r3, [r7, #23]
 800941a:	e027      	b.n	800946c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	0f1b      	lsrs	r3, r3, #28
 8009420:	2b09      	cmp	r3, #9
 8009422:	d80b      	bhi.n	800943c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	0f1b      	lsrs	r3, r3, #28
 8009428:	b2da      	uxtb	r2, r3
 800942a:	7dfb      	ldrb	r3, [r7, #23]
 800942c:	005b      	lsls	r3, r3, #1
 800942e:	4619      	mov	r1, r3
 8009430:	68bb      	ldr	r3, [r7, #8]
 8009432:	440b      	add	r3, r1
 8009434:	3230      	adds	r2, #48	; 0x30
 8009436:	b2d2      	uxtb	r2, r2
 8009438:	701a      	strb	r2, [r3, #0]
 800943a:	e00a      	b.n	8009452 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	0f1b      	lsrs	r3, r3, #28
 8009440:	b2da      	uxtb	r2, r3
 8009442:	7dfb      	ldrb	r3, [r7, #23]
 8009444:	005b      	lsls	r3, r3, #1
 8009446:	4619      	mov	r1, r3
 8009448:	68bb      	ldr	r3, [r7, #8]
 800944a:	440b      	add	r3, r1
 800944c:	3237      	adds	r2, #55	; 0x37
 800944e:	b2d2      	uxtb	r2, r2
 8009450:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	011b      	lsls	r3, r3, #4
 8009456:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009458:	7dfb      	ldrb	r3, [r7, #23]
 800945a:	005b      	lsls	r3, r3, #1
 800945c:	3301      	adds	r3, #1
 800945e:	68ba      	ldr	r2, [r7, #8]
 8009460:	4413      	add	r3, r2
 8009462:	2200      	movs	r2, #0
 8009464:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009466:	7dfb      	ldrb	r3, [r7, #23]
 8009468:	3301      	adds	r3, #1
 800946a:	75fb      	strb	r3, [r7, #23]
 800946c:	7dfa      	ldrb	r2, [r7, #23]
 800946e:	79fb      	ldrb	r3, [r7, #7]
 8009470:	429a      	cmp	r2, r3
 8009472:	d3d3      	bcc.n	800941c <IntToUnicode+0x18>
  }
}
 8009474:	bf00      	nop
 8009476:	371c      	adds	r7, #28
 8009478:	46bd      	mov	sp, r7
 800947a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800947e:	4770      	bx	lr

08009480 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACK == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACK */
{
 8009480:	b580      	push	{r7, lr}
 8009482:	b084      	sub	sp, #16
 8009484:	af00      	add	r7, sp, #0
 8009486:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	4a0d      	ldr	r2, [pc, #52]	; (80094c4 <HAL_PCD_MspInit+0x44>)
 800948e:	4293      	cmp	r3, r2
 8009490:	d113      	bne.n	80094ba <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8009492:	4b0d      	ldr	r3, [pc, #52]	; (80094c8 <HAL_PCD_MspInit+0x48>)
 8009494:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009496:	4a0c      	ldr	r2, [pc, #48]	; (80094c8 <HAL_PCD_MspInit+0x48>)
 8009498:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800949c:	6593      	str	r3, [r2, #88]	; 0x58
 800949e:	4b0a      	ldr	r3, [pc, #40]	; (80094c8 <HAL_PCD_MspInit+0x48>)
 80094a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80094a2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80094a6:	60fb      	str	r3, [r7, #12]
 80094a8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 80094aa:	2200      	movs	r2, #0
 80094ac:	2100      	movs	r1, #0
 80094ae:	2014      	movs	r0, #20
 80094b0:	f7f8 f92b 	bl	800170a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 80094b4:	2014      	movs	r0, #20
 80094b6:	f7f8 f942 	bl	800173e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80094ba:	bf00      	nop
 80094bc:	3710      	adds	r7, #16
 80094be:	46bd      	mov	sp, r7
 80094c0:	bd80      	pop	{r7, pc}
 80094c2:	bf00      	nop
 80094c4:	40005c00 	.word	0x40005c00
 80094c8:	40021000 	.word	0x40021000

080094cc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80094cc:	b580      	push	{r7, lr}
 80094ce:	b082      	sub	sp, #8
 80094d0:	af00      	add	r7, sp, #0
 80094d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	f8d3 22f0 	ldr.w	r2, [r3, #752]	; 0x2f0
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80094e0:	4619      	mov	r1, r3
 80094e2:	4610      	mov	r0, r2
 80094e4:	f7fe fd76 	bl	8007fd4 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 80094e8:	bf00      	nop
 80094ea:	3708      	adds	r7, #8
 80094ec:	46bd      	mov	sp, r7
 80094ee:	bd80      	pop	{r7, pc}

080094f0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80094f0:	b580      	push	{r7, lr}
 80094f2:	b082      	sub	sp, #8
 80094f4:	af00      	add	r7, sp, #0
 80094f6:	6078      	str	r0, [r7, #4]
 80094f8:	460b      	mov	r3, r1
 80094fa:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 8009502:	78fa      	ldrb	r2, [r7, #3]
 8009504:	6879      	ldr	r1, [r7, #4]
 8009506:	4613      	mov	r3, r2
 8009508:	009b      	lsls	r3, r3, #2
 800950a:	4413      	add	r3, r2
 800950c:	00db      	lsls	r3, r3, #3
 800950e:	440b      	add	r3, r1
 8009510:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8009514:	681a      	ldr	r2, [r3, #0]
 8009516:	78fb      	ldrb	r3, [r7, #3]
 8009518:	4619      	mov	r1, r3
 800951a:	f7fe fdae 	bl	800807a <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800951e:	bf00      	nop
 8009520:	3708      	adds	r7, #8
 8009522:	46bd      	mov	sp, r7
 8009524:	bd80      	pop	{r7, pc}

08009526 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009526:	b580      	push	{r7, lr}
 8009528:	b082      	sub	sp, #8
 800952a:	af00      	add	r7, sp, #0
 800952c:	6078      	str	r0, [r7, #4]
 800952e:	460b      	mov	r3, r1
 8009530:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 8009538:	78fa      	ldrb	r2, [r7, #3]
 800953a:	6879      	ldr	r1, [r7, #4]
 800953c:	4613      	mov	r3, r2
 800953e:	009b      	lsls	r3, r3, #2
 8009540:	4413      	add	r3, r2
 8009542:	00db      	lsls	r3, r3, #3
 8009544:	440b      	add	r3, r1
 8009546:	333c      	adds	r3, #60	; 0x3c
 8009548:	681a      	ldr	r2, [r3, #0]
 800954a:	78fb      	ldrb	r3, [r7, #3]
 800954c:	4619      	mov	r1, r3
 800954e:	f7fe fdf7 	bl	8008140 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 8009552:	bf00      	nop
 8009554:	3708      	adds	r7, #8
 8009556:	46bd      	mov	sp, r7
 8009558:	bd80      	pop	{r7, pc}

0800955a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800955a:	b580      	push	{r7, lr}
 800955c:	b082      	sub	sp, #8
 800955e:	af00      	add	r7, sp, #0
 8009560:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009568:	4618      	mov	r0, r3
 800956a:	f7fe fefb 	bl	8008364 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800956e:	bf00      	nop
 8009570:	3708      	adds	r7, #8
 8009572:	46bd      	mov	sp, r7
 8009574:	bd80      	pop	{r7, pc}

08009576 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009576:	b580      	push	{r7, lr}
 8009578:	b084      	sub	sp, #16
 800957a:	af00      	add	r7, sp, #0
 800957c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800957e:	2301      	movs	r3, #1
 8009580:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	689b      	ldr	r3, [r3, #8]
 8009586:	2b02      	cmp	r3, #2
 8009588:	d001      	beq.n	800958e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800958a:	f7f7 fcaf 	bl	8000eec <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009594:	7bfa      	ldrb	r2, [r7, #15]
 8009596:	4611      	mov	r1, r2
 8009598:	4618      	mov	r0, r3
 800959a:	f7fe fea8 	bl	80082ee <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 80095a4:	4618      	mov	r0, r3
 80095a6:	f7fe fe61 	bl	800826c <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 80095aa:	bf00      	nop
 80095ac:	3710      	adds	r7, #16
 80095ae:	46bd      	mov	sp, r7
 80095b0:	bd80      	pop	{r7, pc}
	...

080095b4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80095b4:	b580      	push	{r7, lr}
 80095b6:	b082      	sub	sp, #8
 80095b8:	af00      	add	r7, sp, #0
 80095ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 80095c2:	4618      	mov	r0, r3
 80095c4:	f7fe fea3 	bl	800830e <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	699b      	ldr	r3, [r3, #24]
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d005      	beq.n	80095dc <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80095d0:	4b04      	ldr	r3, [pc, #16]	; (80095e4 <HAL_PCD_SuspendCallback+0x30>)
 80095d2:	691b      	ldr	r3, [r3, #16]
 80095d4:	4a03      	ldr	r2, [pc, #12]	; (80095e4 <HAL_PCD_SuspendCallback+0x30>)
 80095d6:	f043 0306 	orr.w	r3, r3, #6
 80095da:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 80095dc:	bf00      	nop
 80095de:	3708      	adds	r7, #8
 80095e0:	46bd      	mov	sp, r7
 80095e2:	bd80      	pop	{r7, pc}
 80095e4:	e000ed00 	.word	0xe000ed00

080095e8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80095e8:	b580      	push	{r7, lr}
 80095ea:	b082      	sub	sp, #8
 80095ec:	af00      	add	r7, sp, #0
 80095ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	699b      	ldr	r3, [r3, #24]
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d007      	beq.n	8009608 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80095f8:	4b08      	ldr	r3, [pc, #32]	; (800961c <HAL_PCD_ResumeCallback+0x34>)
 80095fa:	691b      	ldr	r3, [r3, #16]
 80095fc:	4a07      	ldr	r2, [pc, #28]	; (800961c <HAL_PCD_ResumeCallback+0x34>)
 80095fe:	f023 0306 	bic.w	r3, r3, #6
 8009602:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8009604:	f000 f9fa 	bl	80099fc <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800960e:	4618      	mov	r0, r3
 8009610:	f7fe fe92 	bl	8008338 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 8009614:	bf00      	nop
 8009616:	3708      	adds	r7, #8
 8009618:	46bd      	mov	sp, r7
 800961a:	bd80      	pop	{r7, pc}
 800961c:	e000ed00 	.word	0xe000ed00

08009620 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009620:	b580      	push	{r7, lr}
 8009622:	b082      	sub	sp, #8
 8009624:	af00      	add	r7, sp, #0
 8009626:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 8009628:	4a2b      	ldr	r2, [pc, #172]	; (80096d8 <USBD_LL_Init+0xb8>)
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	4a29      	ldr	r2, [pc, #164]	; (80096d8 <USBD_LL_Init+0xb8>)
 8009634:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 8009638:	4b27      	ldr	r3, [pc, #156]	; (80096d8 <USBD_LL_Init+0xb8>)
 800963a:	4a28      	ldr	r2, [pc, #160]	; (80096dc <USBD_LL_Init+0xbc>)
 800963c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800963e:	4b26      	ldr	r3, [pc, #152]	; (80096d8 <USBD_LL_Init+0xb8>)
 8009640:	2208      	movs	r2, #8
 8009642:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8009644:	4b24      	ldr	r3, [pc, #144]	; (80096d8 <USBD_LL_Init+0xb8>)
 8009646:	2202      	movs	r2, #2
 8009648:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800964a:	4b23      	ldr	r3, [pc, #140]	; (80096d8 <USBD_LL_Init+0xb8>)
 800964c:	2202      	movs	r2, #2
 800964e:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8009650:	4b21      	ldr	r3, [pc, #132]	; (80096d8 <USBD_LL_Init+0xb8>)
 8009652:	2200      	movs	r2, #0
 8009654:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8009656:	4b20      	ldr	r3, [pc, #128]	; (80096d8 <USBD_LL_Init+0xb8>)
 8009658:	2200      	movs	r2, #0
 800965a:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800965c:	4b1e      	ldr	r3, [pc, #120]	; (80096d8 <USBD_LL_Init+0xb8>)
 800965e:	2200      	movs	r2, #0
 8009660:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8009662:	4b1d      	ldr	r3, [pc, #116]	; (80096d8 <USBD_LL_Init+0xb8>)
 8009664:	2200      	movs	r2, #0
 8009666:	621a      	str	r2, [r3, #32]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8009668:	481b      	ldr	r0, [pc, #108]	; (80096d8 <USBD_LL_Init+0xb8>)
 800966a:	f7f8 fa37 	bl	8001adc <HAL_PCD_Init>
 800966e:	4603      	mov	r3, r0
 8009670:	2b00      	cmp	r3, #0
 8009672:	d001      	beq.n	8009678 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 8009674:	f7f7 fc3a 	bl	8000eec <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800967e:	2318      	movs	r3, #24
 8009680:	2200      	movs	r2, #0
 8009682:	2100      	movs	r1, #0
 8009684:	f7f9 fd25 	bl	80030d2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800968e:	2358      	movs	r3, #88	; 0x58
 8009690:	2200      	movs	r2, #0
 8009692:	2180      	movs	r1, #128	; 0x80
 8009694:	f7f9 fd1d 	bl	80030d2 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800969e:	23c0      	movs	r3, #192	; 0xc0
 80096a0:	2200      	movs	r2, #0
 80096a2:	2181      	movs	r1, #129	; 0x81
 80096a4:	f7f9 fd15 	bl	80030d2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80096ae:	f44f 7388 	mov.w	r3, #272	; 0x110
 80096b2:	2200      	movs	r2, #0
 80096b4:	2101      	movs	r1, #1
 80096b6:	f7f9 fd0c 	bl	80030d2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80096c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80096c4:	2200      	movs	r2, #0
 80096c6:	2182      	movs	r1, #130	; 0x82
 80096c8:	f7f9 fd03 	bl	80030d2 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 80096cc:	2300      	movs	r3, #0
}
 80096ce:	4618      	mov	r0, r3
 80096d0:	3708      	adds	r7, #8
 80096d2:	46bd      	mov	sp, r7
 80096d4:	bd80      	pop	{r7, pc}
 80096d6:	bf00      	nop
 80096d8:	2000135c 	.word	0x2000135c
 80096dc:	40005c00 	.word	0x40005c00

080096e0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80096e0:	b580      	push	{r7, lr}
 80096e2:	b084      	sub	sp, #16
 80096e4:	af00      	add	r7, sp, #0
 80096e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80096e8:	2300      	movs	r3, #0
 80096ea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80096ec:	2300      	movs	r3, #0
 80096ee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80096f6:	4618      	mov	r0, r3
 80096f8:	f7f8 fad5 	bl	8001ca6 <HAL_PCD_Start>
 80096fc:	4603      	mov	r3, r0
 80096fe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009700:	7bfb      	ldrb	r3, [r7, #15]
 8009702:	4618      	mov	r0, r3
 8009704:	f000 f980 	bl	8009a08 <USBD_Get_USB_Status>
 8009708:	4603      	mov	r3, r0
 800970a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800970c:	7bbb      	ldrb	r3, [r7, #14]
}
 800970e:	4618      	mov	r0, r3
 8009710:	3710      	adds	r7, #16
 8009712:	46bd      	mov	sp, r7
 8009714:	bd80      	pop	{r7, pc}

08009716 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009716:	b580      	push	{r7, lr}
 8009718:	b084      	sub	sp, #16
 800971a:	af00      	add	r7, sp, #0
 800971c:	6078      	str	r0, [r7, #4]
 800971e:	4608      	mov	r0, r1
 8009720:	4611      	mov	r1, r2
 8009722:	461a      	mov	r2, r3
 8009724:	4603      	mov	r3, r0
 8009726:	70fb      	strb	r3, [r7, #3]
 8009728:	460b      	mov	r3, r1
 800972a:	70bb      	strb	r3, [r7, #2]
 800972c:	4613      	mov	r3, r2
 800972e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009730:	2300      	movs	r3, #0
 8009732:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009734:	2300      	movs	r3, #0
 8009736:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800973e:	78bb      	ldrb	r3, [r7, #2]
 8009740:	883a      	ldrh	r2, [r7, #0]
 8009742:	78f9      	ldrb	r1, [r7, #3]
 8009744:	f7f8 fc44 	bl	8001fd0 <HAL_PCD_EP_Open>
 8009748:	4603      	mov	r3, r0
 800974a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800974c:	7bfb      	ldrb	r3, [r7, #15]
 800974e:	4618      	mov	r0, r3
 8009750:	f000 f95a 	bl	8009a08 <USBD_Get_USB_Status>
 8009754:	4603      	mov	r3, r0
 8009756:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009758:	7bbb      	ldrb	r3, [r7, #14]
}
 800975a:	4618      	mov	r0, r3
 800975c:	3710      	adds	r7, #16
 800975e:	46bd      	mov	sp, r7
 8009760:	bd80      	pop	{r7, pc}

08009762 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009762:	b580      	push	{r7, lr}
 8009764:	b084      	sub	sp, #16
 8009766:	af00      	add	r7, sp, #0
 8009768:	6078      	str	r0, [r7, #4]
 800976a:	460b      	mov	r3, r1
 800976c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800976e:	2300      	movs	r3, #0
 8009770:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009772:	2300      	movs	r3, #0
 8009774:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800977c:	78fa      	ldrb	r2, [r7, #3]
 800977e:	4611      	mov	r1, r2
 8009780:	4618      	mov	r0, r3
 8009782:	f7f8 fc8b 	bl	800209c <HAL_PCD_EP_Close>
 8009786:	4603      	mov	r3, r0
 8009788:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800978a:	7bfb      	ldrb	r3, [r7, #15]
 800978c:	4618      	mov	r0, r3
 800978e:	f000 f93b 	bl	8009a08 <USBD_Get_USB_Status>
 8009792:	4603      	mov	r3, r0
 8009794:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009796:	7bbb      	ldrb	r3, [r7, #14]
}
 8009798:	4618      	mov	r0, r3
 800979a:	3710      	adds	r7, #16
 800979c:	46bd      	mov	sp, r7
 800979e:	bd80      	pop	{r7, pc}

080097a0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80097a0:	b580      	push	{r7, lr}
 80097a2:	b084      	sub	sp, #16
 80097a4:	af00      	add	r7, sp, #0
 80097a6:	6078      	str	r0, [r7, #4]
 80097a8:	460b      	mov	r3, r1
 80097aa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80097ac:	2300      	movs	r3, #0
 80097ae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80097b0:	2300      	movs	r3, #0
 80097b2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80097ba:	78fa      	ldrb	r2, [r7, #3]
 80097bc:	4611      	mov	r1, r2
 80097be:	4618      	mov	r0, r3
 80097c0:	f7f8 fd4c 	bl	800225c <HAL_PCD_EP_SetStall>
 80097c4:	4603      	mov	r3, r0
 80097c6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80097c8:	7bfb      	ldrb	r3, [r7, #15]
 80097ca:	4618      	mov	r0, r3
 80097cc:	f000 f91c 	bl	8009a08 <USBD_Get_USB_Status>
 80097d0:	4603      	mov	r3, r0
 80097d2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80097d4:	7bbb      	ldrb	r3, [r7, #14]
}
 80097d6:	4618      	mov	r0, r3
 80097d8:	3710      	adds	r7, #16
 80097da:	46bd      	mov	sp, r7
 80097dc:	bd80      	pop	{r7, pc}

080097de <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80097de:	b580      	push	{r7, lr}
 80097e0:	b084      	sub	sp, #16
 80097e2:	af00      	add	r7, sp, #0
 80097e4:	6078      	str	r0, [r7, #4]
 80097e6:	460b      	mov	r3, r1
 80097e8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80097ea:	2300      	movs	r3, #0
 80097ec:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80097ee:	2300      	movs	r3, #0
 80097f0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80097f8:	78fa      	ldrb	r2, [r7, #3]
 80097fa:	4611      	mov	r1, r2
 80097fc:	4618      	mov	r0, r3
 80097fe:	f7f8 fd8d 	bl	800231c <HAL_PCD_EP_ClrStall>
 8009802:	4603      	mov	r3, r0
 8009804:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009806:	7bfb      	ldrb	r3, [r7, #15]
 8009808:	4618      	mov	r0, r3
 800980a:	f000 f8fd 	bl	8009a08 <USBD_Get_USB_Status>
 800980e:	4603      	mov	r3, r0
 8009810:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009812:	7bbb      	ldrb	r3, [r7, #14]
}
 8009814:	4618      	mov	r0, r3
 8009816:	3710      	adds	r7, #16
 8009818:	46bd      	mov	sp, r7
 800981a:	bd80      	pop	{r7, pc}

0800981c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800981c:	b480      	push	{r7}
 800981e:	b085      	sub	sp, #20
 8009820:	af00      	add	r7, sp, #0
 8009822:	6078      	str	r0, [r7, #4]
 8009824:	460b      	mov	r3, r1
 8009826:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800982e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009830:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009834:	2b00      	cmp	r3, #0
 8009836:	da0c      	bge.n	8009852 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009838:	78fb      	ldrb	r3, [r7, #3]
 800983a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800983e:	68f9      	ldr	r1, [r7, #12]
 8009840:	1c5a      	adds	r2, r3, #1
 8009842:	4613      	mov	r3, r2
 8009844:	009b      	lsls	r3, r3, #2
 8009846:	4413      	add	r3, r2
 8009848:	00db      	lsls	r3, r3, #3
 800984a:	440b      	add	r3, r1
 800984c:	3302      	adds	r3, #2
 800984e:	781b      	ldrb	r3, [r3, #0]
 8009850:	e00b      	b.n	800986a <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009852:	78fb      	ldrb	r3, [r7, #3]
 8009854:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009858:	68f9      	ldr	r1, [r7, #12]
 800985a:	4613      	mov	r3, r2
 800985c:	009b      	lsls	r3, r3, #2
 800985e:	4413      	add	r3, r2
 8009860:	00db      	lsls	r3, r3, #3
 8009862:	440b      	add	r3, r1
 8009864:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8009868:	781b      	ldrb	r3, [r3, #0]
  }
}
 800986a:	4618      	mov	r0, r3
 800986c:	3714      	adds	r7, #20
 800986e:	46bd      	mov	sp, r7
 8009870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009874:	4770      	bx	lr

08009876 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009876:	b580      	push	{r7, lr}
 8009878:	b084      	sub	sp, #16
 800987a:	af00      	add	r7, sp, #0
 800987c:	6078      	str	r0, [r7, #4]
 800987e:	460b      	mov	r3, r1
 8009880:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009882:	2300      	movs	r3, #0
 8009884:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009886:	2300      	movs	r3, #0
 8009888:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009890:	78fa      	ldrb	r2, [r7, #3]
 8009892:	4611      	mov	r1, r2
 8009894:	4618      	mov	r0, r3
 8009896:	f7f8 fb76 	bl	8001f86 <HAL_PCD_SetAddress>
 800989a:	4603      	mov	r3, r0
 800989c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800989e:	7bfb      	ldrb	r3, [r7, #15]
 80098a0:	4618      	mov	r0, r3
 80098a2:	f000 f8b1 	bl	8009a08 <USBD_Get_USB_Status>
 80098a6:	4603      	mov	r3, r0
 80098a8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80098aa:	7bbb      	ldrb	r3, [r7, #14]
}
 80098ac:	4618      	mov	r0, r3
 80098ae:	3710      	adds	r7, #16
 80098b0:	46bd      	mov	sp, r7
 80098b2:	bd80      	pop	{r7, pc}

080098b4 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80098b4:	b580      	push	{r7, lr}
 80098b6:	b086      	sub	sp, #24
 80098b8:	af00      	add	r7, sp, #0
 80098ba:	60f8      	str	r0, [r7, #12]
 80098bc:	607a      	str	r2, [r7, #4]
 80098be:	603b      	str	r3, [r7, #0]
 80098c0:	460b      	mov	r3, r1
 80098c2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80098c4:	2300      	movs	r3, #0
 80098c6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80098c8:	2300      	movs	r3, #0
 80098ca:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80098d2:	7af9      	ldrb	r1, [r7, #11]
 80098d4:	683b      	ldr	r3, [r7, #0]
 80098d6:	687a      	ldr	r2, [r7, #4]
 80098d8:	f7f8 fc7d 	bl	80021d6 <HAL_PCD_EP_Transmit>
 80098dc:	4603      	mov	r3, r0
 80098de:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80098e0:	7dfb      	ldrb	r3, [r7, #23]
 80098e2:	4618      	mov	r0, r3
 80098e4:	f000 f890 	bl	8009a08 <USBD_Get_USB_Status>
 80098e8:	4603      	mov	r3, r0
 80098ea:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80098ec:	7dbb      	ldrb	r3, [r7, #22]
}
 80098ee:	4618      	mov	r0, r3
 80098f0:	3718      	adds	r7, #24
 80098f2:	46bd      	mov	sp, r7
 80098f4:	bd80      	pop	{r7, pc}

080098f6 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80098f6:	b580      	push	{r7, lr}
 80098f8:	b086      	sub	sp, #24
 80098fa:	af00      	add	r7, sp, #0
 80098fc:	60f8      	str	r0, [r7, #12]
 80098fe:	607a      	str	r2, [r7, #4]
 8009900:	603b      	str	r3, [r7, #0]
 8009902:	460b      	mov	r3, r1
 8009904:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009906:	2300      	movs	r3, #0
 8009908:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800990a:	2300      	movs	r3, #0
 800990c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009914:	7af9      	ldrb	r1, [r7, #11]
 8009916:	683b      	ldr	r3, [r7, #0]
 8009918:	687a      	ldr	r2, [r7, #4]
 800991a:	f7f8 fc07 	bl	800212c <HAL_PCD_EP_Receive>
 800991e:	4603      	mov	r3, r0
 8009920:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009922:	7dfb      	ldrb	r3, [r7, #23]
 8009924:	4618      	mov	r0, r3
 8009926:	f000 f86f 	bl	8009a08 <USBD_Get_USB_Status>
 800992a:	4603      	mov	r3, r0
 800992c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800992e:	7dbb      	ldrb	r3, [r7, #22]
}
 8009930:	4618      	mov	r0, r3
 8009932:	3718      	adds	r7, #24
 8009934:	46bd      	mov	sp, r7
 8009936:	bd80      	pop	{r7, pc}

08009938 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009938:	b580      	push	{r7, lr}
 800993a:	b082      	sub	sp, #8
 800993c:	af00      	add	r7, sp, #0
 800993e:	6078      	str	r0, [r7, #4]
 8009940:	460b      	mov	r3, r1
 8009942:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800994a:	78fa      	ldrb	r2, [r7, #3]
 800994c:	4611      	mov	r1, r2
 800994e:	4618      	mov	r0, r3
 8009950:	f7f8 fc29 	bl	80021a6 <HAL_PCD_EP_GetRxCount>
 8009954:	4603      	mov	r3, r0
}
 8009956:	4618      	mov	r0, r3
 8009958:	3708      	adds	r7, #8
 800995a:	46bd      	mov	sp, r7
 800995c:	bd80      	pop	{r7, pc}
	...

08009960 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009960:	b580      	push	{r7, lr}
 8009962:	b082      	sub	sp, #8
 8009964:	af00      	add	r7, sp, #0
 8009966:	6078      	str	r0, [r7, #4]
 8009968:	460b      	mov	r3, r1
 800996a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800996c:	78fb      	ldrb	r3, [r7, #3]
 800996e:	2b00      	cmp	r3, #0
 8009970:	d002      	beq.n	8009978 <HAL_PCDEx_LPM_Callback+0x18>
 8009972:	2b01      	cmp	r3, #1
 8009974:	d013      	beq.n	800999e <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 8009976:	e023      	b.n	80099c0 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	699b      	ldr	r3, [r3, #24]
 800997c:	2b00      	cmp	r3, #0
 800997e:	d007      	beq.n	8009990 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8009980:	f000 f83c 	bl	80099fc <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009984:	4b10      	ldr	r3, [pc, #64]	; (80099c8 <HAL_PCDEx_LPM_Callback+0x68>)
 8009986:	691b      	ldr	r3, [r3, #16]
 8009988:	4a0f      	ldr	r2, [pc, #60]	; (80099c8 <HAL_PCDEx_LPM_Callback+0x68>)
 800998a:	f023 0306 	bic.w	r3, r3, #6
 800998e:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009996:	4618      	mov	r0, r3
 8009998:	f7fe fcce 	bl	8008338 <USBD_LL_Resume>
    break;
 800999c:	e010      	b.n	80099c0 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 80099a4:	4618      	mov	r0, r3
 80099a6:	f7fe fcb2 	bl	800830e <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	699b      	ldr	r3, [r3, #24]
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d005      	beq.n	80099be <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80099b2:	4b05      	ldr	r3, [pc, #20]	; (80099c8 <HAL_PCDEx_LPM_Callback+0x68>)
 80099b4:	691b      	ldr	r3, [r3, #16]
 80099b6:	4a04      	ldr	r2, [pc, #16]	; (80099c8 <HAL_PCDEx_LPM_Callback+0x68>)
 80099b8:	f043 0306 	orr.w	r3, r3, #6
 80099bc:	6113      	str	r3, [r2, #16]
    break;
 80099be:	bf00      	nop
}
 80099c0:	bf00      	nop
 80099c2:	3708      	adds	r7, #8
 80099c4:	46bd      	mov	sp, r7
 80099c6:	bd80      	pop	{r7, pc}
 80099c8:	e000ed00 	.word	0xe000ed00

080099cc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80099cc:	b480      	push	{r7}
 80099ce:	b083      	sub	sp, #12
 80099d0:	af00      	add	r7, sp, #0
 80099d2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80099d4:	4b03      	ldr	r3, [pc, #12]	; (80099e4 <USBD_static_malloc+0x18>)
}
 80099d6:	4618      	mov	r0, r3
 80099d8:	370c      	adds	r7, #12
 80099da:	46bd      	mov	sp, r7
 80099dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e0:	4770      	bx	lr
 80099e2:	bf00      	nop
 80099e4:	200001ec 	.word	0x200001ec

080099e8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80099e8:	b480      	push	{r7}
 80099ea:	b083      	sub	sp, #12
 80099ec:	af00      	add	r7, sp, #0
 80099ee:	6078      	str	r0, [r7, #4]

}
 80099f0:	bf00      	nop
 80099f2:	370c      	adds	r7, #12
 80099f4:	46bd      	mov	sp, r7
 80099f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099fa:	4770      	bx	lr

080099fc <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 80099fc:	b580      	push	{r7, lr}
 80099fe:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8009a00:	f7f6 fcda 	bl	80003b8 <SystemClock_Config>
}
 8009a04:	bf00      	nop
 8009a06:	bd80      	pop	{r7, pc}

08009a08 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009a08:	b480      	push	{r7}
 8009a0a:	b085      	sub	sp, #20
 8009a0c:	af00      	add	r7, sp, #0
 8009a0e:	4603      	mov	r3, r0
 8009a10:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a12:	2300      	movs	r3, #0
 8009a14:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009a16:	79fb      	ldrb	r3, [r7, #7]
 8009a18:	2b03      	cmp	r3, #3
 8009a1a:	d817      	bhi.n	8009a4c <USBD_Get_USB_Status+0x44>
 8009a1c:	a201      	add	r2, pc, #4	; (adr r2, 8009a24 <USBD_Get_USB_Status+0x1c>)
 8009a1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a22:	bf00      	nop
 8009a24:	08009a35 	.word	0x08009a35
 8009a28:	08009a3b 	.word	0x08009a3b
 8009a2c:	08009a41 	.word	0x08009a41
 8009a30:	08009a47 	.word	0x08009a47
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009a34:	2300      	movs	r3, #0
 8009a36:	73fb      	strb	r3, [r7, #15]
    break;
 8009a38:	e00b      	b.n	8009a52 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009a3a:	2303      	movs	r3, #3
 8009a3c:	73fb      	strb	r3, [r7, #15]
    break;
 8009a3e:	e008      	b.n	8009a52 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009a40:	2301      	movs	r3, #1
 8009a42:	73fb      	strb	r3, [r7, #15]
    break;
 8009a44:	e005      	b.n	8009a52 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009a46:	2303      	movs	r3, #3
 8009a48:	73fb      	strb	r3, [r7, #15]
    break;
 8009a4a:	e002      	b.n	8009a52 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009a4c:	2303      	movs	r3, #3
 8009a4e:	73fb      	strb	r3, [r7, #15]
    break;
 8009a50:	bf00      	nop
  }
  return usb_status;
 8009a52:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a54:	4618      	mov	r0, r3
 8009a56:	3714      	adds	r7, #20
 8009a58:	46bd      	mov	sp, r7
 8009a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a5e:	4770      	bx	lr

08009a60 <__libc_init_array>:
 8009a60:	b570      	push	{r4, r5, r6, lr}
 8009a62:	4e0d      	ldr	r6, [pc, #52]	; (8009a98 <__libc_init_array+0x38>)
 8009a64:	4c0d      	ldr	r4, [pc, #52]	; (8009a9c <__libc_init_array+0x3c>)
 8009a66:	1ba4      	subs	r4, r4, r6
 8009a68:	10a4      	asrs	r4, r4, #2
 8009a6a:	2500      	movs	r5, #0
 8009a6c:	42a5      	cmp	r5, r4
 8009a6e:	d109      	bne.n	8009a84 <__libc_init_array+0x24>
 8009a70:	4e0b      	ldr	r6, [pc, #44]	; (8009aa0 <__libc_init_array+0x40>)
 8009a72:	4c0c      	ldr	r4, [pc, #48]	; (8009aa4 <__libc_init_array+0x44>)
 8009a74:	f000 f82c 	bl	8009ad0 <_init>
 8009a78:	1ba4      	subs	r4, r4, r6
 8009a7a:	10a4      	asrs	r4, r4, #2
 8009a7c:	2500      	movs	r5, #0
 8009a7e:	42a5      	cmp	r5, r4
 8009a80:	d105      	bne.n	8009a8e <__libc_init_array+0x2e>
 8009a82:	bd70      	pop	{r4, r5, r6, pc}
 8009a84:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009a88:	4798      	blx	r3
 8009a8a:	3501      	adds	r5, #1
 8009a8c:	e7ee      	b.n	8009a6c <__libc_init_array+0xc>
 8009a8e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009a92:	4798      	blx	r3
 8009a94:	3501      	adds	r5, #1
 8009a96:	e7f2      	b.n	8009a7e <__libc_init_array+0x1e>
 8009a98:	08009b40 	.word	0x08009b40
 8009a9c:	08009b40 	.word	0x08009b40
 8009aa0:	08009b40 	.word	0x08009b40
 8009aa4:	08009b44 	.word	0x08009b44

08009aa8 <memcpy>:
 8009aa8:	b510      	push	{r4, lr}
 8009aaa:	1e43      	subs	r3, r0, #1
 8009aac:	440a      	add	r2, r1
 8009aae:	4291      	cmp	r1, r2
 8009ab0:	d100      	bne.n	8009ab4 <memcpy+0xc>
 8009ab2:	bd10      	pop	{r4, pc}
 8009ab4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009ab8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009abc:	e7f7      	b.n	8009aae <memcpy+0x6>

08009abe <memset>:
 8009abe:	4402      	add	r2, r0
 8009ac0:	4603      	mov	r3, r0
 8009ac2:	4293      	cmp	r3, r2
 8009ac4:	d100      	bne.n	8009ac8 <memset+0xa>
 8009ac6:	4770      	bx	lr
 8009ac8:	f803 1b01 	strb.w	r1, [r3], #1
 8009acc:	e7f9      	b.n	8009ac2 <memset+0x4>
	...

08009ad0 <_init>:
 8009ad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ad2:	bf00      	nop
 8009ad4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ad6:	bc08      	pop	{r3}
 8009ad8:	469e      	mov	lr, r3
 8009ada:	4770      	bx	lr

08009adc <_fini>:
 8009adc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ade:	bf00      	nop
 8009ae0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ae2:	bc08      	pop	{r3}
 8009ae4:	469e      	mov	lr, r3
 8009ae6:	4770      	bx	lr
