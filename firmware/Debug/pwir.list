
pwir.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009588  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08009760  08009760  00019760  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080097b8  080097b8  00020184  2**0
                  CONTENTS
  4 .ARM          00000000  080097b8  080097b8  00020184  2**0
                  CONTENTS
  5 .preinit_array 00000000  080097b8  080097b8  00020184  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080097b8  080097b8  000197b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080097bc  080097bc  000197bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000184  20000000  080097c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001440  20000184  08009944  00020184  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200015c4  08009944  000215c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020184  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ab93  00000000  00000000  000201b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000344b  00000000  00000000  0003ad47  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001388  00000000  00000000  0003e198  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001210  00000000  00000000  0003f520  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000205b2  00000000  00000000  00040730  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00011b3d  00000000  00000000  00060ce2  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c420c  00000000  00000000  0007281f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00136a2b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000515c  00000000  00000000  00136aa8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000184 	.word	0x20000184
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08009748 	.word	0x08009748

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000188 	.word	0x20000188
 8000214:	08009748 	.word	0x08009748

08000218 <CDC_On_Receive>:
  .delimiter = 0
}; // (4) Instance of received data.

volatile uint8_t isCommandReceived = 0; // (5) Boolean (0/1) variable to signify that data has been received. Variable is marked volatile to prevent the compiler from removing it during optimisation.

void CDC_On_Receive(uint8_t* buffer, uint32_t* length) { // (6) Define the function that is called when data is received. It is usually preferable to keep interrupt handlers small and fast to avoid blocking other code from executing. Only data copying and setting isCommandReceived to 1 is done in the handler. Rest is handled in the main while loop.
 8000218:	b580      	push	{r7, lr}
 800021a:	b082      	sub	sp, #8
 800021c:	af00      	add	r7, sp, #0
 800021e:	6078      	str	r0, [r7, #4]
 8000220:	6039      	str	r1, [r7, #0]
  //HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
  if (*length == sizeof(Command)) { // (7) Check if received data the has same length as Command struct.
 8000222:	683b      	ldr	r3, [r7, #0]
 8000224:	681b      	ldr	r3, [r3, #0]
 8000226:	2b0a      	cmp	r3, #10
 8000228:	d10d      	bne.n	8000246 <CDC_On_Receive+0x2e>
    memcpy(&command, buffer, sizeof(Command)); // (8) Copy received data to command instance.
 800022a:	220a      	movs	r2, #10
 800022c:	6879      	ldr	r1, [r7, #4]
 800022e:	4808      	ldr	r0, [pc, #32]	; (8000250 <CDC_On_Receive+0x38>)
 8000230:	f009 fa76 	bl	8009720 <memcpy>

    if (command.delimiter == 0xAAAA) { // (9) Check the delimiter as a validation of received data.
 8000234:	4b06      	ldr	r3, [pc, #24]	; (8000250 <CDC_On_Receive+0x38>)
 8000236:	891b      	ldrh	r3, [r3, #8]
 8000238:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800023c:	4293      	cmp	r3, r2
 800023e:	d102      	bne.n	8000246 <CDC_On_Receive+0x2e>
      isCommandReceived = 1;
 8000240:	4b04      	ldr	r3, [pc, #16]	; (8000254 <CDC_On_Receive+0x3c>)
 8000242:	2201      	movs	r2, #1
 8000244:	701a      	strb	r2, [r3, #0]
    }
  }
}
 8000246:	bf00      	nop
 8000248:	3708      	adds	r7, #8
 800024a:	46bd      	mov	sp, r7
 800024c:	bd80      	pop	{r7, pc}
 800024e:	bf00      	nop
 8000250:	200001a0 	.word	0x200001a0
 8000254:	200001aa 	.word	0x200001aa

08000258 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000258:	b580      	push	{r7, lr}
 800025a:	b082      	sub	sp, #8
 800025c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  // (1) Define an instance of Feedback for sending data.
  Feedback feedback = {
 800025e:	2300      	movs	r3, #0
 8000260:	803b      	strh	r3, [r7, #0]
 8000262:	2300      	movs	r3, #0
 8000264:	807b      	strh	r3, [r7, #2]
 8000266:	2300      	movs	r3, #0
 8000268:	80bb      	strh	r3, [r7, #4]
 800026a:	f64a 23aa 	movw	r3, #43690	; 0xaaaa
 800026e:	80fb      	strh	r3, [r7, #6]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000270:	f000 ff3b 	bl	80010ea <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000274:	f000 f8b6 	bl	80003e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000278:	f000 fc76 	bl	8000b68 <MX_GPIO_Init>
  MX_TIM1_Init();
 800027c:	f000 f91a 	bl	80004b4 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000280:	f000 f988 	bl	8000594 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000284:	f000 fa06 	bl	8000694 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000288:	f000 fa5a 	bl	8000740 <MX_TIM4_Init>
  MX_TIM8_Init();
 800028c:	f000 fae4 	bl	8000858 <MX_TIM8_Init>
  MX_TIM16_Init();
 8000290:	f000 fb76 	bl	8000980 <MX_TIM16_Init>
  MX_TIM17_Init();
 8000294:	f000 fbee 	bl	8000a74 <MX_TIM17_Init>
  MX_USB_Device_Init();
 8000298:	f008 fd26 	bl	8008ce8 <MX_USB_Device_Init>
  MX_TIM6_Init();
 800029c:	f000 faa6 	bl	80007ec <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_1 | TIM_CHANNEL_2); // Encoder 1
 80002a0:	2104      	movs	r1, #4
 80002a2:	4840      	ldr	r0, [pc, #256]	; (80003a4 <main+0x14c>)
 80002a4:	f004 f81e 	bl	80042e4 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_1 | TIM_CHANNEL_2); // Encoder 2
 80002a8:	2104      	movs	r1, #4
 80002aa:	483f      	ldr	r0, [pc, #252]	; (80003a8 <main+0x150>)
 80002ac:	f004 f81a 	bl	80042e4 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_1 | TIM_CHANNEL_2); // Encoder 3
 80002b0:	2104      	movs	r1, #4
 80002b2:	483e      	ldr	r0, [pc, #248]	; (80003ac <main+0x154>)
 80002b4:	f004 f816 	bl	80042e4 <HAL_TIM_Encoder_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1); // Motor PWM for draiver 1
 80002b8:	2100      	movs	r1, #0
 80002ba:	483d      	ldr	r0, [pc, #244]	; (80003b0 <main+0x158>)
 80002bc:	f003 fe6c 	bl	8003f98 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2); // Motor PWM for draiver 1
 80002c0:	2104      	movs	r1, #4
 80002c2:	483b      	ldr	r0, [pc, #236]	; (80003b0 <main+0x158>)
 80002c4:	f003 fe68 	bl	8003f98 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3); // Motor PWM for draiver 2
 80002c8:	2108      	movs	r1, #8
 80002ca:	4839      	ldr	r0, [pc, #228]	; (80003b0 <main+0x158>)
 80002cc:	f003 fe64 	bl	8003f98 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4); // Motor PWM for draiver 2
 80002d0:	210c      	movs	r1, #12
 80002d2:	4837      	ldr	r0, [pc, #220]	; (80003b0 <main+0x158>)
 80002d4:	f003 fe60 	bl	8003f98 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1); // Motor PWM for draiver 3
 80002d8:	2100      	movs	r1, #0
 80002da:	4836      	ldr	r0, [pc, #216]	; (80003b4 <main+0x15c>)
 80002dc:	f003 fe5c 	bl	8003f98 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim17, TIM_CHANNEL_1); // Motor PWM for draiver 3
 80002e0:	2100      	movs	r1, #0
 80002e2:	4835      	ldr	r0, [pc, #212]	; (80003b8 <main+0x160>)
 80002e4:	f003 fe58 	bl	8003f98 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1); // Thrower PWM
 80002e8:	2100      	movs	r1, #0
 80002ea:	4834      	ldr	r0, [pc, #208]	; (80003bc <main+0x164>)
 80002ec:	f003 fe54 	bl	8003f98 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim6);
 80002f0:	4833      	ldr	r0, [pc, #204]	; (80003c0 <main+0x168>)
 80002f2:	f003 fd8f 	bl	8003e14 <HAL_TIM_Base_Start_IT>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //HAL_Delay(1000);
	if (isCommandReceived) { // (2) Only return data when something has been received.
 80002f6:	4b33      	ldr	r3, [pc, #204]	; (80003c4 <main+0x16c>)
 80002f8:	781b      	ldrb	r3, [r3, #0]
 80002fa:	b2db      	uxtb	r3, r3
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d0fa      	beq.n	80002f6 <main+0x9e>
		isCommandReceived = 0;
 8000300:	4b30      	ldr	r3, [pc, #192]	; (80003c4 <main+0x16c>)
 8000302:	2200      	movs	r2, #0
 8000304:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin); // (3) Toggle LED to indicate that data has been received.
 8000306:	f44f 7180 	mov.w	r1, #256	; 0x100
 800030a:	482f      	ldr	r0, [pc, #188]	; (80003c8 <main+0x170>)
 800030c:	f001 fa08 	bl	8001720 <HAL_GPIO_TogglePin>
		// (4) Update feedback with current motor speeds.
		/*feedback.speed1 = motor1Control.speed;
		feedback.speed2 = motor2Control.speed;
		feedback.speed3 = motor3Control.speed;*/
		feedback.speed1 = (int16_t)TIM1->CNT;
 8000310:	4b2e      	ldr	r3, [pc, #184]	; (80003cc <main+0x174>)
 8000312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000314:	b21b      	sxth	r3, r3
 8000316:	803b      	strh	r3, [r7, #0]
		feedback.speed2 = (int16_t)TIM3->CNT;
 8000318:	4b2d      	ldr	r3, [pc, #180]	; (80003d0 <main+0x178>)
 800031a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800031c:	b21b      	sxth	r3, r3
 800031e:	807b      	strh	r3, [r7, #2]
		feedback.speed3 = (int16_t)TIM4->CNT;
 8000320:	4b2c      	ldr	r3, [pc, #176]	; (80003d4 <main+0x17c>)
 8000322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000324:	b21b      	sxth	r3, r3
 8000326:	80bb      	strh	r3, [r7, #4]
		if (command.speed1 == 1) {
 8000328:	4b2b      	ldr	r3, [pc, #172]	; (80003d8 <main+0x180>)
 800032a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800032e:	2b01      	cmp	r3, #1
 8000330:	d10b      	bne.n	800034a <main+0xf2>
			TIM2->CCR1 = TIM2->ARR / 2; // esimene draiver
 8000332:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000338:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800033c:	085b      	lsrs	r3, r3, #1
 800033e:	6353      	str	r3, [r2, #52]	; 0x34
			TIM2->CCR2 = 0; // esimene draiver
 8000340:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000344:	2200      	movs	r2, #0
 8000346:	639a      	str	r2, [r3, #56]	; 0x38
 8000348:	e018      	b.n	800037c <main+0x124>
		}
		else if (command.speed1 == 2) {
 800034a:	4b23      	ldr	r3, [pc, #140]	; (80003d8 <main+0x180>)
 800034c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000350:	2b02      	cmp	r3, #2
 8000352:	d10b      	bne.n	800036c <main+0x114>
			TIM2->CCR1 = 0; // esimene draiver
 8000354:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000358:	2200      	movs	r2, #0
 800035a:	635a      	str	r2, [r3, #52]	; 0x34
			TIM2->CCR2 = TIM2->ARR / 2; // esimene draiver
 800035c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000360:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000362:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000366:	085b      	lsrs	r3, r3, #1
 8000368:	6393      	str	r3, [r2, #56]	; 0x38
 800036a:	e007      	b.n	800037c <main+0x124>
		}
		else {
			TIM2->CCR1 = 0; // esimene draiver
 800036c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000370:	2200      	movs	r2, #0
 8000372:	635a      	str	r2, [r3, #52]	; 0x34
			TIM2->CCR2 = 0; // esimene draiver
 8000374:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000378:	2200      	movs	r2, #0
 800037a:	639a      	str	r2, [r3, #56]	; 0x38
		}
		TIM2->CCR3 = 0; // teine draiver
 800037c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000380:	2200      	movs	r2, #0
 8000382:	63da      	str	r2, [r3, #60]	; 0x3c
		TIM2->CCR4 = 0; // teine draiver
 8000384:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000388:	2200      	movs	r2, #0
 800038a:	641a      	str	r2, [r3, #64]	; 0x40
		TIM16->CCR1 = 0; // kolmas draiver
 800038c:	4b13      	ldr	r3, [pc, #76]	; (80003dc <main+0x184>)
 800038e:	2200      	movs	r2, #0
 8000390:	635a      	str	r2, [r3, #52]	; 0x34
		TIM17->CCR1 = 0; // kolmas draiver
 8000392:	4b13      	ldr	r3, [pc, #76]	; (80003e0 <main+0x188>)
 8000394:	2200      	movs	r2, #0
 8000396:	635a      	str	r2, [r3, #52]	; 0x34
		CDC_Transmit_FS(&feedback, sizeof(feedback)); // (5) Send data over USB.
 8000398:	463b      	mov	r3, r7
 800039a:	2108      	movs	r1, #8
 800039c:	4618      	mov	r0, r3
 800039e:	f008 fd65 	bl	8008e6c <CDC_Transmit_FS>
	if (isCommandReceived) { // (2) Only return data when something has been received.
 80003a2:	e7a8      	b.n	80002f6 <main+0x9e>
 80003a4:	20000548 	.word	0x20000548
 80003a8:	200004b0 	.word	0x200004b0
 80003ac:	20000418 	.word	0x20000418
 80003b0:	20000594 	.word	0x20000594
 80003b4:	200005e0 	.word	0x200005e0
 80003b8:	20000464 	.word	0x20000464
 80003bc:	200003cc 	.word	0x200003cc
 80003c0:	200004fc 	.word	0x200004fc
 80003c4:	200001aa 	.word	0x200001aa
 80003c8:	48000400 	.word	0x48000400
 80003cc:	40012c00 	.word	0x40012c00
 80003d0:	40000400 	.word	0x40000400
 80003d4:	40000800 	.word	0x40000800
 80003d8:	200001a0 	.word	0x200001a0
 80003dc:	40014400 	.word	0x40014400
 80003e0:	40014800 	.word	0x40014800

080003e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003e4:	b580      	push	{r7, lr}
 80003e6:	b0a4      	sub	sp, #144	; 0x90
 80003e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003ea:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80003ee:	2238      	movs	r2, #56	; 0x38
 80003f0:	2100      	movs	r1, #0
 80003f2:	4618      	mov	r0, r3
 80003f4:	f009 f99f 	bl	8009736 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003f8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80003fc:	2200      	movs	r2, #0
 80003fe:	601a      	str	r2, [r3, #0]
 8000400:	605a      	str	r2, [r3, #4]
 8000402:	609a      	str	r2, [r3, #8]
 8000404:	60da      	str	r2, [r3, #12]
 8000406:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000408:	463b      	mov	r3, r7
 800040a:	2244      	movs	r2, #68	; 0x44
 800040c:	2100      	movs	r1, #0
 800040e:	4618      	mov	r0, r3
 8000410:	f009 f991 	bl	8009736 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000414:	2000      	movs	r0, #0
 8000416:	f002 fd05 	bl	8002e24 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 800041a:	2322      	movs	r3, #34	; 0x22
 800041c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800041e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000422:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000424:	2340      	movs	r3, #64	; 0x40
 8000426:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000428:	2301      	movs	r3, #1
 800042a:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800042c:	2302      	movs	r3, #2
 800042e:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000430:	2302      	movs	r3, #2
 8000432:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000434:	2301      	movs	r3, #1
 8000436:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 20;
 8000438:	2314      	movs	r3, #20
 800043a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800043e:	2302      	movs	r3, #2
 8000440:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 8000444:	2304      	movs	r3, #4
 8000446:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800044a:	2302      	movs	r3, #2
 800044c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000450:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000454:	4618      	mov	r0, r3
 8000456:	f002 fd99 	bl	8002f8c <HAL_RCC_OscConfig>
 800045a:	4603      	mov	r3, r0
 800045c:	2b00      	cmp	r3, #0
 800045e:	d001      	beq.n	8000464 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000460:	f000 fbcc 	bl	8000bfc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000464:	230f      	movs	r3, #15
 8000466:	647b      	str	r3, [r7, #68]	; 0x44
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000468:	2303      	movs	r3, #3
 800046a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800046c:	2300      	movs	r3, #0
 800046e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000470:	2300      	movs	r3, #0
 8000472:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000474:	2300      	movs	r3, #0
 8000476:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000478:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800047c:	2104      	movs	r1, #4
 800047e:	4618      	mov	r0, r3
 8000480:	f003 f89c 	bl	80035bc <HAL_RCC_ClockConfig>
 8000484:	4603      	mov	r3, r0
 8000486:	2b00      	cmp	r3, #0
 8000488:	d001      	beq.n	800048e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800048a:	f000 fbb7 	bl	8000bfc <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800048e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000492:	603b      	str	r3, [r7, #0]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8000494:	2300      	movs	r3, #0
 8000496:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000498:	463b      	mov	r3, r7
 800049a:	4618      	mov	r0, r3
 800049c:	f003 fa72 	bl	8003984 <HAL_RCCEx_PeriphCLKConfig>
 80004a0:	4603      	mov	r3, r0
 80004a2:	2b00      	cmp	r3, #0
 80004a4:	d001      	beq.n	80004aa <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80004a6:	f000 fba9 	bl	8000bfc <Error_Handler>
  }
}
 80004aa:	bf00      	nop
 80004ac:	3790      	adds	r7, #144	; 0x90
 80004ae:	46bd      	mov	sp, r7
 80004b0:	bd80      	pop	{r7, pc}
	...

080004b4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b09a      	sub	sp, #104	; 0x68
 80004b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80004ba:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80004be:	2224      	movs	r2, #36	; 0x24
 80004c0:	2100      	movs	r1, #0
 80004c2:	4618      	mov	r0, r3
 80004c4:	f009 f937 	bl	8009736 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004c8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80004cc:	2200      	movs	r2, #0
 80004ce:	601a      	str	r2, [r3, #0]
 80004d0:	605a      	str	r2, [r3, #4]
 80004d2:	609a      	str	r2, [r3, #8]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80004d4:	1d3b      	adds	r3, r7, #4
 80004d6:	2234      	movs	r2, #52	; 0x34
 80004d8:	2100      	movs	r1, #0
 80004da:	4618      	mov	r0, r3
 80004dc:	f009 f92b 	bl	8009736 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80004e0:	4b2a      	ldr	r3, [pc, #168]	; (800058c <MX_TIM1_Init+0xd8>)
 80004e2:	4a2b      	ldr	r2, [pc, #172]	; (8000590 <MX_TIM1_Init+0xdc>)
 80004e4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80004e6:	4b29      	ldr	r3, [pc, #164]	; (800058c <MX_TIM1_Init+0xd8>)
 80004e8:	2200      	movs	r2, #0
 80004ea:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004ec:	4b27      	ldr	r3, [pc, #156]	; (800058c <MX_TIM1_Init+0xd8>)
 80004ee:	2200      	movs	r2, #0
 80004f0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80004f2:	4b26      	ldr	r3, [pc, #152]	; (800058c <MX_TIM1_Init+0xd8>)
 80004f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80004f8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004fa:	4b24      	ldr	r3, [pc, #144]	; (800058c <MX_TIM1_Init+0xd8>)
 80004fc:	2200      	movs	r2, #0
 80004fe:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000500:	4b22      	ldr	r3, [pc, #136]	; (800058c <MX_TIM1_Init+0xd8>)
 8000502:	2200      	movs	r2, #0
 8000504:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000506:	4b21      	ldr	r3, [pc, #132]	; (800058c <MX_TIM1_Init+0xd8>)
 8000508:	2200      	movs	r2, #0
 800050a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800050c:	2301      	movs	r3, #1
 800050e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000510:	2300      	movs	r3, #0
 8000512:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000514:	2301      	movs	r3, #1
 8000516:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000518:	2300      	movs	r3, #0
 800051a:	653b      	str	r3, [r7, #80]	; 0x50
  sConfig.IC1Filter = 0;
 800051c:	2300      	movs	r3, #0
 800051e:	657b      	str	r3, [r7, #84]	; 0x54
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000520:	2300      	movs	r3, #0
 8000522:	65bb      	str	r3, [r7, #88]	; 0x58
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000524:	2301      	movs	r3, #1
 8000526:	65fb      	str	r3, [r7, #92]	; 0x5c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000528:	2300      	movs	r3, #0
 800052a:	663b      	str	r3, [r7, #96]	; 0x60
  sConfig.IC2Filter = 0;
 800052c:	2300      	movs	r3, #0
 800052e:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8000530:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000534:	4619      	mov	r1, r3
 8000536:	4815      	ldr	r0, [pc, #84]	; (800058c <MX_TIM1_Init+0xd8>)
 8000538:	f003 fe2e 	bl	8004198 <HAL_TIM_Encoder_Init>
 800053c:	4603      	mov	r3, r0
 800053e:	2b00      	cmp	r3, #0
 8000540:	d001      	beq.n	8000546 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8000542:	f000 fb5b 	bl	8000bfc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000546:	2300      	movs	r3, #0
 8000548:	63bb      	str	r3, [r7, #56]	; 0x38
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800054a:	2300      	movs	r3, #0
 800054c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800054e:	2300      	movs	r3, #0
 8000550:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000552:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000556:	4619      	mov	r1, r3
 8000558:	480c      	ldr	r0, [pc, #48]	; (800058c <MX_TIM1_Init+0xd8>)
 800055a:	f004 fdb3 	bl	80050c4 <HAL_TIMEx_MasterConfigSynchronization>
 800055e:	4603      	mov	r3, r0
 8000560:	2b00      	cmp	r3, #0
 8000562:	d001      	beq.n	8000568 <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 8000564:	f000 fb4a 	bl	8000bfc <Error_Handler>
  }
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000568:	2300      	movs	r3, #0
 800056a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800056c:	2300      	movs	r3, #0
 800056e:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000570:	1d3b      	adds	r3, r7, #4
 8000572:	4619      	mov	r1, r3
 8000574:	4805      	ldr	r0, [pc, #20]	; (800058c <MX_TIM1_Init+0xd8>)
 8000576:	f004 fe27 	bl	80051c8 <HAL_TIMEx_ConfigBreakDeadTime>
 800057a:	4603      	mov	r3, r0
 800057c:	2b00      	cmp	r3, #0
 800057e:	d001      	beq.n	8000584 <MX_TIM1_Init+0xd0>
  {
    Error_Handler();
 8000580:	f000 fb3c 	bl	8000bfc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000584:	bf00      	nop
 8000586:	3768      	adds	r7, #104	; 0x68
 8000588:	46bd      	mov	sp, r7
 800058a:	bd80      	pop	{r7, pc}
 800058c:	20000548 	.word	0x20000548
 8000590:	40012c00 	.word	0x40012c00

08000594 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b08a      	sub	sp, #40	; 0x28
 8000598:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800059a:	f107 031c 	add.w	r3, r7, #28
 800059e:	2200      	movs	r2, #0
 80005a0:	601a      	str	r2, [r3, #0]
 80005a2:	605a      	str	r2, [r3, #4]
 80005a4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80005a6:	463b      	mov	r3, r7
 80005a8:	2200      	movs	r2, #0
 80005aa:	601a      	str	r2, [r3, #0]
 80005ac:	605a      	str	r2, [r3, #4]
 80005ae:	609a      	str	r2, [r3, #8]
 80005b0:	60da      	str	r2, [r3, #12]
 80005b2:	611a      	str	r2, [r3, #16]
 80005b4:	615a      	str	r2, [r3, #20]
 80005b6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80005b8:	4b35      	ldr	r3, [pc, #212]	; (8000690 <MX_TIM2_Init+0xfc>)
 80005ba:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80005be:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80005c0:	4b33      	ldr	r3, [pc, #204]	; (8000690 <MX_TIM2_Init+0xfc>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005c6:	4b32      	ldr	r3, [pc, #200]	; (8000690 <MX_TIM2_Init+0xfc>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80005cc:	4b30      	ldr	r3, [pc, #192]	; (8000690 <MX_TIM2_Init+0xfc>)
 80005ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80005d2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005d4:	4b2e      	ldr	r3, [pc, #184]	; (8000690 <MX_TIM2_Init+0xfc>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005da:	4b2d      	ldr	r3, [pc, #180]	; (8000690 <MX_TIM2_Init+0xfc>)
 80005dc:	2200      	movs	r2, #0
 80005de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80005e0:	482b      	ldr	r0, [pc, #172]	; (8000690 <MX_TIM2_Init+0xfc>)
 80005e2:	f003 fc81 	bl	8003ee8 <HAL_TIM_PWM_Init>
 80005e6:	4603      	mov	r3, r0
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d001      	beq.n	80005f0 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 80005ec:	f000 fb06 	bl	8000bfc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005f0:	2300      	movs	r3, #0
 80005f2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005f4:	2300      	movs	r3, #0
 80005f6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80005f8:	f107 031c 	add.w	r3, r7, #28
 80005fc:	4619      	mov	r1, r3
 80005fe:	4824      	ldr	r0, [pc, #144]	; (8000690 <MX_TIM2_Init+0xfc>)
 8000600:	f004 fd60 	bl	80050c4 <HAL_TIMEx_MasterConfigSynchronization>
 8000604:	4603      	mov	r3, r0
 8000606:	2b00      	cmp	r3, #0
 8000608:	d001      	beq.n	800060e <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 800060a:	f000 faf7 	bl	8000bfc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800060e:	2360      	movs	r3, #96	; 0x60
 8000610:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000612:	2300      	movs	r3, #0
 8000614:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000616:	2300      	movs	r3, #0
 8000618:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800061a:	2300      	movs	r3, #0
 800061c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800061e:	463b      	mov	r3, r7
 8000620:	2200      	movs	r2, #0
 8000622:	4619      	mov	r1, r3
 8000624:	481a      	ldr	r0, [pc, #104]	; (8000690 <MX_TIM2_Init+0xfc>)
 8000626:	f004 f869 	bl	80046fc <HAL_TIM_PWM_ConfigChannel>
 800062a:	4603      	mov	r3, r0
 800062c:	2b00      	cmp	r3, #0
 800062e:	d001      	beq.n	8000634 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8000630:	f000 fae4 	bl	8000bfc <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8000634:	2300      	movs	r3, #0
 8000636:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000638:	463b      	mov	r3, r7
 800063a:	2204      	movs	r2, #4
 800063c:	4619      	mov	r1, r3
 800063e:	4814      	ldr	r0, [pc, #80]	; (8000690 <MX_TIM2_Init+0xfc>)
 8000640:	f004 f85c 	bl	80046fc <HAL_TIM_PWM_ConfigChannel>
 8000644:	4603      	mov	r3, r0
 8000646:	2b00      	cmp	r3, #0
 8000648:	d001      	beq.n	800064e <MX_TIM2_Init+0xba>
  {
    Error_Handler();
 800064a:	f000 fad7 	bl	8000bfc <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 800064e:	2300      	movs	r3, #0
 8000650:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000652:	463b      	mov	r3, r7
 8000654:	2208      	movs	r2, #8
 8000656:	4619      	mov	r1, r3
 8000658:	480d      	ldr	r0, [pc, #52]	; (8000690 <MX_TIM2_Init+0xfc>)
 800065a:	f004 f84f 	bl	80046fc <HAL_TIM_PWM_ConfigChannel>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d001      	beq.n	8000668 <MX_TIM2_Init+0xd4>
  {
    Error_Handler();
 8000664:	f000 faca 	bl	8000bfc <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8000668:	2300      	movs	r3, #0
 800066a:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800066c:	463b      	mov	r3, r7
 800066e:	220c      	movs	r2, #12
 8000670:	4619      	mov	r1, r3
 8000672:	4807      	ldr	r0, [pc, #28]	; (8000690 <MX_TIM2_Init+0xfc>)
 8000674:	f004 f842 	bl	80046fc <HAL_TIM_PWM_ConfigChannel>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d001      	beq.n	8000682 <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 800067e:	f000 fabd 	bl	8000bfc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000682:	4803      	ldr	r0, [pc, #12]	; (8000690 <MX_TIM2_Init+0xfc>)
 8000684:	f000 fc0c 	bl	8000ea0 <HAL_TIM_MspPostInit>

}
 8000688:	bf00      	nop
 800068a:	3728      	adds	r7, #40	; 0x28
 800068c:	46bd      	mov	sp, r7
 800068e:	bd80      	pop	{r7, pc}
 8000690:	20000594 	.word	0x20000594

08000694 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b08c      	sub	sp, #48	; 0x30
 8000698:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800069a:	f107 030c 	add.w	r3, r7, #12
 800069e:	2224      	movs	r2, #36	; 0x24
 80006a0:	2100      	movs	r1, #0
 80006a2:	4618      	mov	r0, r3
 80006a4:	f009 f847 	bl	8009736 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006a8:	463b      	mov	r3, r7
 80006aa:	2200      	movs	r2, #0
 80006ac:	601a      	str	r2, [r3, #0]
 80006ae:	605a      	str	r2, [r3, #4]
 80006b0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80006b2:	4b21      	ldr	r3, [pc, #132]	; (8000738 <MX_TIM3_Init+0xa4>)
 80006b4:	4a21      	ldr	r2, [pc, #132]	; (800073c <MX_TIM3_Init+0xa8>)
 80006b6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80006b8:	4b1f      	ldr	r3, [pc, #124]	; (8000738 <MX_TIM3_Init+0xa4>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006be:	4b1e      	ldr	r3, [pc, #120]	; (8000738 <MX_TIM3_Init+0xa4>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80006c4:	4b1c      	ldr	r3, [pc, #112]	; (8000738 <MX_TIM3_Init+0xa4>)
 80006c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80006ca:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006cc:	4b1a      	ldr	r3, [pc, #104]	; (8000738 <MX_TIM3_Init+0xa4>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006d2:	4b19      	ldr	r3, [pc, #100]	; (8000738 <MX_TIM3_Init+0xa4>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80006d8:	2301      	movs	r3, #1
 80006da:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80006dc:	2300      	movs	r3, #0
 80006de:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80006e0:	2301      	movs	r3, #1
 80006e2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80006e4:	2300      	movs	r3, #0
 80006e6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80006e8:	2300      	movs	r3, #0
 80006ea:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80006ec:	2300      	movs	r3, #0
 80006ee:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80006f0:	2301      	movs	r3, #1
 80006f2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80006f4:	2300      	movs	r3, #0
 80006f6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80006f8:	2300      	movs	r3, #0
 80006fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80006fc:	f107 030c 	add.w	r3, r7, #12
 8000700:	4619      	mov	r1, r3
 8000702:	480d      	ldr	r0, [pc, #52]	; (8000738 <MX_TIM3_Init+0xa4>)
 8000704:	f003 fd48 	bl	8004198 <HAL_TIM_Encoder_Init>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d001      	beq.n	8000712 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 800070e:	f000 fa75 	bl	8000bfc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000712:	2300      	movs	r3, #0
 8000714:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000716:	2300      	movs	r3, #0
 8000718:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800071a:	463b      	mov	r3, r7
 800071c:	4619      	mov	r1, r3
 800071e:	4806      	ldr	r0, [pc, #24]	; (8000738 <MX_TIM3_Init+0xa4>)
 8000720:	f004 fcd0 	bl	80050c4 <HAL_TIMEx_MasterConfigSynchronization>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d001      	beq.n	800072e <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 800072a:	f000 fa67 	bl	8000bfc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800072e:	bf00      	nop
 8000730:	3730      	adds	r7, #48	; 0x30
 8000732:	46bd      	mov	sp, r7
 8000734:	bd80      	pop	{r7, pc}
 8000736:	bf00      	nop
 8000738:	200004b0 	.word	0x200004b0
 800073c:	40000400 	.word	0x40000400

08000740 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b08c      	sub	sp, #48	; 0x30
 8000744:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000746:	f107 030c 	add.w	r3, r7, #12
 800074a:	2224      	movs	r2, #36	; 0x24
 800074c:	2100      	movs	r1, #0
 800074e:	4618      	mov	r0, r3
 8000750:	f008 fff1 	bl	8009736 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000754:	463b      	mov	r3, r7
 8000756:	2200      	movs	r2, #0
 8000758:	601a      	str	r2, [r3, #0]
 800075a:	605a      	str	r2, [r3, #4]
 800075c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800075e:	4b21      	ldr	r3, [pc, #132]	; (80007e4 <MX_TIM4_Init+0xa4>)
 8000760:	4a21      	ldr	r2, [pc, #132]	; (80007e8 <MX_TIM4_Init+0xa8>)
 8000762:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000764:	4b1f      	ldr	r3, [pc, #124]	; (80007e4 <MX_TIM4_Init+0xa4>)
 8000766:	2200      	movs	r2, #0
 8000768:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800076a:	4b1e      	ldr	r3, [pc, #120]	; (80007e4 <MX_TIM4_Init+0xa4>)
 800076c:	2200      	movs	r2, #0
 800076e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000770:	4b1c      	ldr	r3, [pc, #112]	; (80007e4 <MX_TIM4_Init+0xa4>)
 8000772:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000776:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000778:	4b1a      	ldr	r3, [pc, #104]	; (80007e4 <MX_TIM4_Init+0xa4>)
 800077a:	2200      	movs	r2, #0
 800077c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800077e:	4b19      	ldr	r3, [pc, #100]	; (80007e4 <MX_TIM4_Init+0xa4>)
 8000780:	2200      	movs	r2, #0
 8000782:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000784:	2301      	movs	r3, #1
 8000786:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000788:	2300      	movs	r3, #0
 800078a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800078c:	2301      	movs	r3, #1
 800078e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000790:	2300      	movs	r3, #0
 8000792:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000794:	2300      	movs	r3, #0
 8000796:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000798:	2300      	movs	r3, #0
 800079a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800079c:	2301      	movs	r3, #1
 800079e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80007a0:	2300      	movs	r3, #0
 80007a2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80007a4:	2300      	movs	r3, #0
 80007a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80007a8:	f107 030c 	add.w	r3, r7, #12
 80007ac:	4619      	mov	r1, r3
 80007ae:	480d      	ldr	r0, [pc, #52]	; (80007e4 <MX_TIM4_Init+0xa4>)
 80007b0:	f003 fcf2 	bl	8004198 <HAL_TIM_Encoder_Init>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d001      	beq.n	80007be <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 80007ba:	f000 fa1f 	bl	8000bfc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007be:	2300      	movs	r3, #0
 80007c0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007c2:	2300      	movs	r3, #0
 80007c4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80007c6:	463b      	mov	r3, r7
 80007c8:	4619      	mov	r1, r3
 80007ca:	4806      	ldr	r0, [pc, #24]	; (80007e4 <MX_TIM4_Init+0xa4>)
 80007cc:	f004 fc7a 	bl	80050c4 <HAL_TIMEx_MasterConfigSynchronization>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d001      	beq.n	80007da <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 80007d6:	f000 fa11 	bl	8000bfc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80007da:	bf00      	nop
 80007dc:	3730      	adds	r7, #48	; 0x30
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	20000418 	.word	0x20000418
 80007e8:	40000800 	.word	0x40000800

080007ec <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b084      	sub	sp, #16
 80007f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007f2:	1d3b      	adds	r3, r7, #4
 80007f4:	2200      	movs	r2, #0
 80007f6:	601a      	str	r2, [r3, #0]
 80007f8:	605a      	str	r2, [r3, #4]
 80007fa:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80007fc:	4b14      	ldr	r3, [pc, #80]	; (8000850 <MX_TIM6_Init+0x64>)
 80007fe:	4a15      	ldr	r2, [pc, #84]	; (8000854 <MX_TIM6_Init+0x68>)
 8000800:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 25 - 1;
 8000802:	4b13      	ldr	r3, [pc, #76]	; (8000850 <MX_TIM6_Init+0x64>)
 8000804:	2218      	movs	r2, #24
 8000806:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000808:	4b11      	ldr	r3, [pc, #68]	; (8000850 <MX_TIM6_Init+0x64>)
 800080a:	2200      	movs	r2, #0
 800080c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 63999;
 800080e:	4b10      	ldr	r3, [pc, #64]	; (8000850 <MX_TIM6_Init+0x64>)
 8000810:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8000814:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000816:	4b0e      	ldr	r3, [pc, #56]	; (8000850 <MX_TIM6_Init+0x64>)
 8000818:	2200      	movs	r2, #0
 800081a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800081c:	480c      	ldr	r0, [pc, #48]	; (8000850 <MX_TIM6_Init+0x64>)
 800081e:	f003 faa1 	bl	8003d64 <HAL_TIM_Base_Init>
 8000822:	4603      	mov	r3, r0
 8000824:	2b00      	cmp	r3, #0
 8000826:	d001      	beq.n	800082c <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000828:	f000 f9e8 	bl	8000bfc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800082c:	2300      	movs	r3, #0
 800082e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000830:	2300      	movs	r3, #0
 8000832:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000834:	1d3b      	adds	r3, r7, #4
 8000836:	4619      	mov	r1, r3
 8000838:	4805      	ldr	r0, [pc, #20]	; (8000850 <MX_TIM6_Init+0x64>)
 800083a:	f004 fc43 	bl	80050c4 <HAL_TIMEx_MasterConfigSynchronization>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d001      	beq.n	8000848 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000844:	f000 f9da 	bl	8000bfc <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000848:	bf00      	nop
 800084a:	3710      	adds	r7, #16
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}
 8000850:	200004fc 	.word	0x200004fc
 8000854:	40001000 	.word	0x40001000

08000858 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b098      	sub	sp, #96	; 0x60
 800085c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800085e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000862:	2200      	movs	r2, #0
 8000864:	601a      	str	r2, [r3, #0]
 8000866:	605a      	str	r2, [r3, #4]
 8000868:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800086a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800086e:	2200      	movs	r2, #0
 8000870:	601a      	str	r2, [r3, #0]
 8000872:	605a      	str	r2, [r3, #4]
 8000874:	609a      	str	r2, [r3, #8]
 8000876:	60da      	str	r2, [r3, #12]
 8000878:	611a      	str	r2, [r3, #16]
 800087a:	615a      	str	r2, [r3, #20]
 800087c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800087e:	1d3b      	adds	r3, r7, #4
 8000880:	2234      	movs	r2, #52	; 0x34
 8000882:	2100      	movs	r1, #0
 8000884:	4618      	mov	r0, r3
 8000886:	f008 ff56 	bl	8009736 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800088a:	4b3b      	ldr	r3, [pc, #236]	; (8000978 <MX_TIM8_Init+0x120>)
 800088c:	4a3b      	ldr	r2, [pc, #236]	; (800097c <MX_TIM8_Init+0x124>)
 800088e:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 50 - 1;
 8000890:	4b39      	ldr	r3, [pc, #228]	; (8000978 <MX_TIM8_Init+0x120>)
 8000892:	2231      	movs	r2, #49	; 0x31
 8000894:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000896:	4b38      	ldr	r3, [pc, #224]	; (8000978 <MX_TIM8_Init+0x120>)
 8000898:	2200      	movs	r2, #0
 800089a:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 63999;
 800089c:	4b36      	ldr	r3, [pc, #216]	; (8000978 <MX_TIM8_Init+0x120>)
 800089e:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 80008a2:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008a4:	4b34      	ldr	r3, [pc, #208]	; (8000978 <MX_TIM8_Init+0x120>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80008aa:	4b33      	ldr	r3, [pc, #204]	; (8000978 <MX_TIM8_Init+0x120>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008b0:	4b31      	ldr	r3, [pc, #196]	; (8000978 <MX_TIM8_Init+0x120>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80008b6:	4830      	ldr	r0, [pc, #192]	; (8000978 <MX_TIM8_Init+0x120>)
 80008b8:	f003 fb16 	bl	8003ee8 <HAL_TIM_PWM_Init>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d001      	beq.n	80008c6 <MX_TIM8_Init+0x6e>
  {
    Error_Handler();
 80008c2:	f000 f99b 	bl	8000bfc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008c6:	2300      	movs	r3, #0
 80008c8:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80008ca:	2300      	movs	r3, #0
 80008cc:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008ce:	2300      	movs	r3, #0
 80008d0:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80008d2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80008d6:	4619      	mov	r1, r3
 80008d8:	4827      	ldr	r0, [pc, #156]	; (8000978 <MX_TIM8_Init+0x120>)
 80008da:	f004 fbf3 	bl	80050c4 <HAL_TIMEx_MasterConfigSynchronization>
 80008de:	4603      	mov	r3, r0
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d001      	beq.n	80008e8 <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 80008e4:	f000 f98a 	bl	8000bfc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008e8:	2360      	movs	r3, #96	; 0x60
 80008ea:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 80008ec:	2300      	movs	r3, #0
 80008ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008f0:	2300      	movs	r3, #0
 80008f2:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80008f4:	2300      	movs	r3, #0
 80008f6:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008f8:	2300      	movs	r3, #0
 80008fa:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80008fc:	2300      	movs	r3, #0
 80008fe:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000900:	2300      	movs	r3, #0
 8000902:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000904:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000908:	2200      	movs	r2, #0
 800090a:	4619      	mov	r1, r3
 800090c:	481a      	ldr	r0, [pc, #104]	; (8000978 <MX_TIM8_Init+0x120>)
 800090e:	f003 fef5 	bl	80046fc <HAL_TIM_PWM_ConfigChannel>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d001      	beq.n	800091c <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8000918:	f000 f970 	bl	8000bfc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800091c:	2300      	movs	r3, #0
 800091e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000920:	2300      	movs	r3, #0
 8000922:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000924:	2300      	movs	r3, #0
 8000926:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000928:	2300      	movs	r3, #0
 800092a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800092c:	2300      	movs	r3, #0
 800092e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000930:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000934:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000936:	2300      	movs	r3, #0
 8000938:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800093a:	2300      	movs	r3, #0
 800093c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800093e:	2300      	movs	r3, #0
 8000940:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000942:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000946:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000948:	2300      	movs	r3, #0
 800094a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800094c:	2300      	movs	r3, #0
 800094e:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000950:	2300      	movs	r3, #0
 8000952:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8000954:	1d3b      	adds	r3, r7, #4
 8000956:	4619      	mov	r1, r3
 8000958:	4807      	ldr	r0, [pc, #28]	; (8000978 <MX_TIM8_Init+0x120>)
 800095a:	f004 fc35 	bl	80051c8 <HAL_TIMEx_ConfigBreakDeadTime>
 800095e:	4603      	mov	r3, r0
 8000960:	2b00      	cmp	r3, #0
 8000962:	d001      	beq.n	8000968 <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 8000964:	f000 f94a 	bl	8000bfc <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8000968:	4803      	ldr	r0, [pc, #12]	; (8000978 <MX_TIM8_Init+0x120>)
 800096a:	f000 fa99 	bl	8000ea0 <HAL_TIM_MspPostInit>

}
 800096e:	bf00      	nop
 8000970:	3760      	adds	r7, #96	; 0x60
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	200003cc 	.word	0x200003cc
 800097c:	40013400 	.word	0x40013400

08000980 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b094      	sub	sp, #80	; 0x50
 8000984:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000986:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800098a:	2200      	movs	r2, #0
 800098c:	601a      	str	r2, [r3, #0]
 800098e:	605a      	str	r2, [r3, #4]
 8000990:	609a      	str	r2, [r3, #8]
 8000992:	60da      	str	r2, [r3, #12]
 8000994:	611a      	str	r2, [r3, #16]
 8000996:	615a      	str	r2, [r3, #20]
 8000998:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800099a:	463b      	mov	r3, r7
 800099c:	2234      	movs	r2, #52	; 0x34
 800099e:	2100      	movs	r1, #0
 80009a0:	4618      	mov	r0, r3
 80009a2:	f008 fec8 	bl	8009736 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80009a6:	4b31      	ldr	r3, [pc, #196]	; (8000a6c <MX_TIM16_Init+0xec>)
 80009a8:	4a31      	ldr	r2, [pc, #196]	; (8000a70 <MX_TIM16_Init+0xf0>)
 80009aa:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 80009ac:	4b2f      	ldr	r3, [pc, #188]	; (8000a6c <MX_TIM16_Init+0xec>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009b2:	4b2e      	ldr	r3, [pc, #184]	; (8000a6c <MX_TIM16_Init+0xec>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 80009b8:	4b2c      	ldr	r3, [pc, #176]	; (8000a6c <MX_TIM16_Init+0xec>)
 80009ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80009be:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009c0:	4b2a      	ldr	r3, [pc, #168]	; (8000a6c <MX_TIM16_Init+0xec>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80009c6:	4b29      	ldr	r3, [pc, #164]	; (8000a6c <MX_TIM16_Init+0xec>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009cc:	4b27      	ldr	r3, [pc, #156]	; (8000a6c <MX_TIM16_Init+0xec>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80009d2:	4826      	ldr	r0, [pc, #152]	; (8000a6c <MX_TIM16_Init+0xec>)
 80009d4:	f003 f9c6 	bl	8003d64 <HAL_TIM_Base_Init>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d001      	beq.n	80009e2 <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 80009de:	f000 f90d 	bl	8000bfc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 80009e2:	4822      	ldr	r0, [pc, #136]	; (8000a6c <MX_TIM16_Init+0xec>)
 80009e4:	f003 fa80 	bl	8003ee8 <HAL_TIM_PWM_Init>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d001      	beq.n	80009f2 <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 80009ee:	f000 f905 	bl	8000bfc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009f2:	2360      	movs	r3, #96	; 0x60
 80009f4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 0;
 80009f6:	2300      	movs	r3, #0
 80009f8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009fa:	2300      	movs	r3, #0
 80009fc:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80009fe:	2300      	movs	r3, #0
 8000a00:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a02:	2300      	movs	r3, #0
 8000a04:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000a06:	2300      	movs	r3, #0
 8000a08:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a0e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000a12:	2200      	movs	r2, #0
 8000a14:	4619      	mov	r1, r3
 8000a16:	4815      	ldr	r0, [pc, #84]	; (8000a6c <MX_TIM16_Init+0xec>)
 8000a18:	f003 fe70 	bl	80046fc <HAL_TIM_PWM_ConfigChannel>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d001      	beq.n	8000a26 <MX_TIM16_Init+0xa6>
  {
    Error_Handler();
 8000a22:	f000 f8eb 	bl	8000bfc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000a26:	2300      	movs	r3, #0
 8000a28:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000a32:	2300      	movs	r3, #0
 8000a34:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000a36:	2300      	movs	r3, #0
 8000a38:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000a3a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a3e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000a40:	2300      	movs	r3, #0
 8000a42:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000a44:	2300      	movs	r3, #0
 8000a46:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8000a48:	463b      	mov	r3, r7
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	4807      	ldr	r0, [pc, #28]	; (8000a6c <MX_TIM16_Init+0xec>)
 8000a4e:	f004 fbbb 	bl	80051c8 <HAL_TIMEx_ConfigBreakDeadTime>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d001      	beq.n	8000a5c <MX_TIM16_Init+0xdc>
  {
    Error_Handler();
 8000a58:	f000 f8d0 	bl	8000bfc <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8000a5c:	4803      	ldr	r0, [pc, #12]	; (8000a6c <MX_TIM16_Init+0xec>)
 8000a5e:	f000 fa1f 	bl	8000ea0 <HAL_TIM_MspPostInit>

}
 8000a62:	bf00      	nop
 8000a64:	3750      	adds	r7, #80	; 0x50
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	200005e0 	.word	0x200005e0
 8000a70:	40014400 	.word	0x40014400

08000a74 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b094      	sub	sp, #80	; 0x50
 8000a78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a7a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000a7e:	2200      	movs	r2, #0
 8000a80:	601a      	str	r2, [r3, #0]
 8000a82:	605a      	str	r2, [r3, #4]
 8000a84:	609a      	str	r2, [r3, #8]
 8000a86:	60da      	str	r2, [r3, #12]
 8000a88:	611a      	str	r2, [r3, #16]
 8000a8a:	615a      	str	r2, [r3, #20]
 8000a8c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000a8e:	463b      	mov	r3, r7
 8000a90:	2234      	movs	r2, #52	; 0x34
 8000a92:	2100      	movs	r1, #0
 8000a94:	4618      	mov	r0, r3
 8000a96:	f008 fe4e 	bl	8009736 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8000a9a:	4b31      	ldr	r3, [pc, #196]	; (8000b60 <MX_TIM17_Init+0xec>)
 8000a9c:	4a31      	ldr	r2, [pc, #196]	; (8000b64 <MX_TIM17_Init+0xf0>)
 8000a9e:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 8000aa0:	4b2f      	ldr	r3, [pc, #188]	; (8000b60 <MX_TIM17_Init+0xec>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000aa6:	4b2e      	ldr	r3, [pc, #184]	; (8000b60 <MX_TIM17_Init+0xec>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 8000aac:	4b2c      	ldr	r3, [pc, #176]	; (8000b60 <MX_TIM17_Init+0xec>)
 8000aae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ab2:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ab4:	4b2a      	ldr	r3, [pc, #168]	; (8000b60 <MX_TIM17_Init+0xec>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8000aba:	4b29      	ldr	r3, [pc, #164]	; (8000b60 <MX_TIM17_Init+0xec>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ac0:	4b27      	ldr	r3, [pc, #156]	; (8000b60 <MX_TIM17_Init+0xec>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8000ac6:	4826      	ldr	r0, [pc, #152]	; (8000b60 <MX_TIM17_Init+0xec>)
 8000ac8:	f003 f94c 	bl	8003d64 <HAL_TIM_Base_Init>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d001      	beq.n	8000ad6 <MX_TIM17_Init+0x62>
  {
    Error_Handler();
 8000ad2:	f000 f893 	bl	8000bfc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 8000ad6:	4822      	ldr	r0, [pc, #136]	; (8000b60 <MX_TIM17_Init+0xec>)
 8000ad8:	f003 fa06 	bl	8003ee8 <HAL_TIM_PWM_Init>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d001      	beq.n	8000ae6 <MX_TIM17_Init+0x72>
  {
    Error_Handler();
 8000ae2:	f000 f88b 	bl	8000bfc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ae6:	2360      	movs	r3, #96	; 0x60
 8000ae8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 0;
 8000aea:	2300      	movs	r3, #0
 8000aec:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000aee:	2300      	movs	r3, #0
 8000af0:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000af2:	2300      	movs	r3, #0
 8000af4:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000af6:	2300      	movs	r3, #0
 8000af8:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000afa:	2300      	movs	r3, #0
 8000afc:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000afe:	2300      	movs	r3, #0
 8000b00:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b02:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000b06:	2200      	movs	r2, #0
 8000b08:	4619      	mov	r1, r3
 8000b0a:	4815      	ldr	r0, [pc, #84]	; (8000b60 <MX_TIM17_Init+0xec>)
 8000b0c:	f003 fdf6 	bl	80046fc <HAL_TIM_PWM_ConfigChannel>
 8000b10:	4603      	mov	r3, r0
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d001      	beq.n	8000b1a <MX_TIM17_Init+0xa6>
  {
    Error_Handler();
 8000b16:	f000 f871 	bl	8000bfc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000b22:	2300      	movs	r3, #0
 8000b24:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000b26:	2300      	movs	r3, #0
 8000b28:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000b2e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b32:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000b34:	2300      	movs	r3, #0
 8000b36:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8000b3c:	463b      	mov	r3, r7
 8000b3e:	4619      	mov	r1, r3
 8000b40:	4807      	ldr	r0, [pc, #28]	; (8000b60 <MX_TIM17_Init+0xec>)
 8000b42:	f004 fb41 	bl	80051c8 <HAL_TIMEx_ConfigBreakDeadTime>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d001      	beq.n	8000b50 <MX_TIM17_Init+0xdc>
  {
    Error_Handler();
 8000b4c:	f000 f856 	bl	8000bfc <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 8000b50:	4803      	ldr	r0, [pc, #12]	; (8000b60 <MX_TIM17_Init+0xec>)
 8000b52:	f000 f9a5 	bl	8000ea0 <HAL_TIM_MspPostInit>

}
 8000b56:	bf00      	nop
 8000b58:	3750      	adds	r7, #80	; 0x50
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	20000464 	.word	0x20000464
 8000b64:	40014800 	.word	0x40014800

08000b68 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b088      	sub	sp, #32
 8000b6c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b6e:	f107 030c 	add.w	r3, r7, #12
 8000b72:	2200      	movs	r2, #0
 8000b74:	601a      	str	r2, [r3, #0]
 8000b76:	605a      	str	r2, [r3, #4]
 8000b78:	609a      	str	r2, [r3, #8]
 8000b7a:	60da      	str	r2, [r3, #12]
 8000b7c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b7e:	4b18      	ldr	r3, [pc, #96]	; (8000be0 <MX_GPIO_Init+0x78>)
 8000b80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b82:	4a17      	ldr	r2, [pc, #92]	; (8000be0 <MX_GPIO_Init+0x78>)
 8000b84:	f043 0301 	orr.w	r3, r3, #1
 8000b88:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b8a:	4b15      	ldr	r3, [pc, #84]	; (8000be0 <MX_GPIO_Init+0x78>)
 8000b8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b8e:	f003 0301 	and.w	r3, r3, #1
 8000b92:	60bb      	str	r3, [r7, #8]
 8000b94:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b96:	4b12      	ldr	r3, [pc, #72]	; (8000be0 <MX_GPIO_Init+0x78>)
 8000b98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b9a:	4a11      	ldr	r2, [pc, #68]	; (8000be0 <MX_GPIO_Init+0x78>)
 8000b9c:	f043 0302 	orr.w	r3, r3, #2
 8000ba0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ba2:	4b0f      	ldr	r3, [pc, #60]	; (8000be0 <MX_GPIO_Init+0x78>)
 8000ba4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ba6:	f003 0302 	and.w	r3, r3, #2
 8000baa:	607b      	str	r3, [r7, #4]
 8000bac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000bae:	2200      	movs	r2, #0
 8000bb0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bb4:	480b      	ldr	r0, [pc, #44]	; (8000be4 <MX_GPIO_Init+0x7c>)
 8000bb6:	f000 fd9b 	bl	80016f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000bba:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bbe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bc0:	2301      	movs	r3, #1
 8000bc2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000bcc:	f107 030c 	add.w	r3, r7, #12
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	4804      	ldr	r0, [pc, #16]	; (8000be4 <MX_GPIO_Init+0x7c>)
 8000bd4:	f000 fc0a 	bl	80013ec <HAL_GPIO_Init>

}
 8000bd8:	bf00      	nop
 8000bda:	3720      	adds	r7, #32
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}
 8000be0:	40021000 	.word	0x40021000
 8000be4:	48000400 	.word	0x48000400

08000be8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000be8:	b480      	push	{r7}
 8000bea:	b083      	sub	sp, #12
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
  // Motor control calculations can be called from here
}
 8000bf0:	bf00      	nop
 8000bf2:	370c      	adds	r7, #12
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfa:	4770      	bx	lr

08000bfc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000c00:	bf00      	nop
 8000c02:	46bd      	mov	sp, r7
 8000c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c08:	4770      	bx	lr
	...

08000c0c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b082      	sub	sp, #8
 8000c10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c12:	4b0f      	ldr	r3, [pc, #60]	; (8000c50 <HAL_MspInit+0x44>)
 8000c14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c16:	4a0e      	ldr	r2, [pc, #56]	; (8000c50 <HAL_MspInit+0x44>)
 8000c18:	f043 0301 	orr.w	r3, r3, #1
 8000c1c:	6613      	str	r3, [r2, #96]	; 0x60
 8000c1e:	4b0c      	ldr	r3, [pc, #48]	; (8000c50 <HAL_MspInit+0x44>)
 8000c20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c22:	f003 0301 	and.w	r3, r3, #1
 8000c26:	607b      	str	r3, [r7, #4]
 8000c28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c2a:	4b09      	ldr	r3, [pc, #36]	; (8000c50 <HAL_MspInit+0x44>)
 8000c2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c2e:	4a08      	ldr	r2, [pc, #32]	; (8000c50 <HAL_MspInit+0x44>)
 8000c30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c34:	6593      	str	r3, [r2, #88]	; 0x58
 8000c36:	4b06      	ldr	r3, [pc, #24]	; (8000c50 <HAL_MspInit+0x44>)
 8000c38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c3e:	603b      	str	r3, [r7, #0]
 8000c40:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000c42:	f002 f993 	bl	8002f6c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c46:	bf00      	nop
 8000c48:	3708      	adds	r7, #8
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	40021000 	.word	0x40021000

08000c54 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b08e      	sub	sp, #56	; 0x38
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c60:	2200      	movs	r2, #0
 8000c62:	601a      	str	r2, [r3, #0]
 8000c64:	605a      	str	r2, [r3, #4]
 8000c66:	609a      	str	r2, [r3, #8]
 8000c68:	60da      	str	r2, [r3, #12]
 8000c6a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	4a46      	ldr	r2, [pc, #280]	; (8000d8c <HAL_TIM_Encoder_MspInit+0x138>)
 8000c72:	4293      	cmp	r3, r2
 8000c74:	d12a      	bne.n	8000ccc <HAL_TIM_Encoder_MspInit+0x78>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000c76:	4b46      	ldr	r3, [pc, #280]	; (8000d90 <HAL_TIM_Encoder_MspInit+0x13c>)
 8000c78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c7a:	4a45      	ldr	r2, [pc, #276]	; (8000d90 <HAL_TIM_Encoder_MspInit+0x13c>)
 8000c7c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000c80:	6613      	str	r3, [r2, #96]	; 0x60
 8000c82:	4b43      	ldr	r3, [pc, #268]	; (8000d90 <HAL_TIM_Encoder_MspInit+0x13c>)
 8000c84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c86:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000c8a:	623b      	str	r3, [r7, #32]
 8000c8c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c8e:	4b40      	ldr	r3, [pc, #256]	; (8000d90 <HAL_TIM_Encoder_MspInit+0x13c>)
 8000c90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c92:	4a3f      	ldr	r2, [pc, #252]	; (8000d90 <HAL_TIM_Encoder_MspInit+0x13c>)
 8000c94:	f043 0301 	orr.w	r3, r3, #1
 8000c98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c9a:	4b3d      	ldr	r3, [pc, #244]	; (8000d90 <HAL_TIM_Encoder_MspInit+0x13c>)
 8000c9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c9e:	f003 0301 	and.w	r3, r3, #1
 8000ca2:	61fb      	str	r3, [r7, #28]
 8000ca4:	69fb      	ldr	r3, [r7, #28]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000ca6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000caa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cac:	2302      	movs	r3, #2
 8000cae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8000cb8:	2306      	movs	r3, #6
 8000cba:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cbc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cc6:	f000 fb91 	bl	80013ec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000cca:	e05a      	b.n	8000d82 <HAL_TIM_Encoder_MspInit+0x12e>
  else if(htim_encoder->Instance==TIM3)
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	4a30      	ldr	r2, [pc, #192]	; (8000d94 <HAL_TIM_Encoder_MspInit+0x140>)
 8000cd2:	4293      	cmp	r3, r2
 8000cd4:	d128      	bne.n	8000d28 <HAL_TIM_Encoder_MspInit+0xd4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000cd6:	4b2e      	ldr	r3, [pc, #184]	; (8000d90 <HAL_TIM_Encoder_MspInit+0x13c>)
 8000cd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cda:	4a2d      	ldr	r2, [pc, #180]	; (8000d90 <HAL_TIM_Encoder_MspInit+0x13c>)
 8000cdc:	f043 0302 	orr.w	r3, r3, #2
 8000ce0:	6593      	str	r3, [r2, #88]	; 0x58
 8000ce2:	4b2b      	ldr	r3, [pc, #172]	; (8000d90 <HAL_TIM_Encoder_MspInit+0x13c>)
 8000ce4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ce6:	f003 0302 	and.w	r3, r3, #2
 8000cea:	61bb      	str	r3, [r7, #24]
 8000cec:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cee:	4b28      	ldr	r3, [pc, #160]	; (8000d90 <HAL_TIM_Encoder_MspInit+0x13c>)
 8000cf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cf2:	4a27      	ldr	r2, [pc, #156]	; (8000d90 <HAL_TIM_Encoder_MspInit+0x13c>)
 8000cf4:	f043 0302 	orr.w	r3, r3, #2
 8000cf8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cfa:	4b25      	ldr	r3, [pc, #148]	; (8000d90 <HAL_TIM_Encoder_MspInit+0x13c>)
 8000cfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cfe:	f003 0302 	and.w	r3, r3, #2
 8000d02:	617b      	str	r3, [r7, #20]
 8000d04:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000d06:	2330      	movs	r3, #48	; 0x30
 8000d08:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d0a:	2302      	movs	r3, #2
 8000d0c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d12:	2300      	movs	r3, #0
 8000d14:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000d16:	2302      	movs	r3, #2
 8000d18:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d1e:	4619      	mov	r1, r3
 8000d20:	481d      	ldr	r0, [pc, #116]	; (8000d98 <HAL_TIM_Encoder_MspInit+0x144>)
 8000d22:	f000 fb63 	bl	80013ec <HAL_GPIO_Init>
}
 8000d26:	e02c      	b.n	8000d82 <HAL_TIM_Encoder_MspInit+0x12e>
  else if(htim_encoder->Instance==TIM4)
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	4a1b      	ldr	r2, [pc, #108]	; (8000d9c <HAL_TIM_Encoder_MspInit+0x148>)
 8000d2e:	4293      	cmp	r3, r2
 8000d30:	d127      	bne.n	8000d82 <HAL_TIM_Encoder_MspInit+0x12e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000d32:	4b17      	ldr	r3, [pc, #92]	; (8000d90 <HAL_TIM_Encoder_MspInit+0x13c>)
 8000d34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d36:	4a16      	ldr	r2, [pc, #88]	; (8000d90 <HAL_TIM_Encoder_MspInit+0x13c>)
 8000d38:	f043 0304 	orr.w	r3, r3, #4
 8000d3c:	6593      	str	r3, [r2, #88]	; 0x58
 8000d3e:	4b14      	ldr	r3, [pc, #80]	; (8000d90 <HAL_TIM_Encoder_MspInit+0x13c>)
 8000d40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d42:	f003 0304 	and.w	r3, r3, #4
 8000d46:	613b      	str	r3, [r7, #16]
 8000d48:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d4a:	4b11      	ldr	r3, [pc, #68]	; (8000d90 <HAL_TIM_Encoder_MspInit+0x13c>)
 8000d4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d4e:	4a10      	ldr	r2, [pc, #64]	; (8000d90 <HAL_TIM_Encoder_MspInit+0x13c>)
 8000d50:	f043 0302 	orr.w	r3, r3, #2
 8000d54:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d56:	4b0e      	ldr	r3, [pc, #56]	; (8000d90 <HAL_TIM_Encoder_MspInit+0x13c>)
 8000d58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d5a:	f003 0302 	and.w	r3, r3, #2
 8000d5e:	60fb      	str	r3, [r7, #12]
 8000d60:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000d62:	23c0      	movs	r3, #192	; 0xc0
 8000d64:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d66:	2302      	movs	r3, #2
 8000d68:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000d72:	2302      	movs	r3, #2
 8000d74:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d7a:	4619      	mov	r1, r3
 8000d7c:	4806      	ldr	r0, [pc, #24]	; (8000d98 <HAL_TIM_Encoder_MspInit+0x144>)
 8000d7e:	f000 fb35 	bl	80013ec <HAL_GPIO_Init>
}
 8000d82:	bf00      	nop
 8000d84:	3738      	adds	r7, #56	; 0x38
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	40012c00 	.word	0x40012c00
 8000d90:	40021000 	.word	0x40021000
 8000d94:	40000400 	.word	0x40000400
 8000d98:	48000400 	.word	0x48000400
 8000d9c:	40000800 	.word	0x40000800

08000da0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000da0:	b480      	push	{r7}
 8000da2:	b085      	sub	sp, #20
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000db0:	d10c      	bne.n	8000dcc <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000db2:	4b12      	ldr	r3, [pc, #72]	; (8000dfc <HAL_TIM_PWM_MspInit+0x5c>)
 8000db4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000db6:	4a11      	ldr	r2, [pc, #68]	; (8000dfc <HAL_TIM_PWM_MspInit+0x5c>)
 8000db8:	f043 0301 	orr.w	r3, r3, #1
 8000dbc:	6593      	str	r3, [r2, #88]	; 0x58
 8000dbe:	4b0f      	ldr	r3, [pc, #60]	; (8000dfc <HAL_TIM_PWM_MspInit+0x5c>)
 8000dc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dc2:	f003 0301 	and.w	r3, r3, #1
 8000dc6:	60fb      	str	r3, [r7, #12]
 8000dc8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8000dca:	e010      	b.n	8000dee <HAL_TIM_PWM_MspInit+0x4e>
  else if(htim_pwm->Instance==TIM8)
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	4a0b      	ldr	r2, [pc, #44]	; (8000e00 <HAL_TIM_PWM_MspInit+0x60>)
 8000dd2:	4293      	cmp	r3, r2
 8000dd4:	d10b      	bne.n	8000dee <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8000dd6:	4b09      	ldr	r3, [pc, #36]	; (8000dfc <HAL_TIM_PWM_MspInit+0x5c>)
 8000dd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000dda:	4a08      	ldr	r2, [pc, #32]	; (8000dfc <HAL_TIM_PWM_MspInit+0x5c>)
 8000ddc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000de0:	6613      	str	r3, [r2, #96]	; 0x60
 8000de2:	4b06      	ldr	r3, [pc, #24]	; (8000dfc <HAL_TIM_PWM_MspInit+0x5c>)
 8000de4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000de6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000dea:	60bb      	str	r3, [r7, #8]
 8000dec:	68bb      	ldr	r3, [r7, #8]
}
 8000dee:	bf00      	nop
 8000df0:	3714      	adds	r7, #20
 8000df2:	46bd      	mov	sp, r7
 8000df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df8:	4770      	bx	lr
 8000dfa:	bf00      	nop
 8000dfc:	40021000 	.word	0x40021000
 8000e00:	40013400 	.word	0x40013400

08000e04 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b086      	sub	sp, #24
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	4a1f      	ldr	r2, [pc, #124]	; (8000e90 <HAL_TIM_Base_MspInit+0x8c>)
 8000e12:	4293      	cmp	r3, r2
 8000e14:	d114      	bne.n	8000e40 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000e16:	4b1f      	ldr	r3, [pc, #124]	; (8000e94 <HAL_TIM_Base_MspInit+0x90>)
 8000e18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e1a:	4a1e      	ldr	r2, [pc, #120]	; (8000e94 <HAL_TIM_Base_MspInit+0x90>)
 8000e1c:	f043 0310 	orr.w	r3, r3, #16
 8000e20:	6593      	str	r3, [r2, #88]	; 0x58
 8000e22:	4b1c      	ldr	r3, [pc, #112]	; (8000e94 <HAL_TIM_Base_MspInit+0x90>)
 8000e24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e26:	f003 0310 	and.w	r3, r3, #16
 8000e2a:	617b      	str	r3, [r7, #20]
 8000e2c:	697b      	ldr	r3, [r7, #20]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000e2e:	2200      	movs	r2, #0
 8000e30:	2100      	movs	r1, #0
 8000e32:	2036      	movs	r0, #54	; 0x36
 8000e34:	f000 faa5 	bl	8001382 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000e38:	2036      	movs	r0, #54	; 0x36
 8000e3a:	f000 fabc 	bl	80013b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8000e3e:	e022      	b.n	8000e86 <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM16)
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	4a14      	ldr	r2, [pc, #80]	; (8000e98 <HAL_TIM_Base_MspInit+0x94>)
 8000e46:	4293      	cmp	r3, r2
 8000e48:	d10c      	bne.n	8000e64 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000e4a:	4b12      	ldr	r3, [pc, #72]	; (8000e94 <HAL_TIM_Base_MspInit+0x90>)
 8000e4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e4e:	4a11      	ldr	r2, [pc, #68]	; (8000e94 <HAL_TIM_Base_MspInit+0x90>)
 8000e50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e54:	6613      	str	r3, [r2, #96]	; 0x60
 8000e56:	4b0f      	ldr	r3, [pc, #60]	; (8000e94 <HAL_TIM_Base_MspInit+0x90>)
 8000e58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e5e:	613b      	str	r3, [r7, #16]
 8000e60:	693b      	ldr	r3, [r7, #16]
}
 8000e62:	e010      	b.n	8000e86 <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM17)
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	4a0c      	ldr	r2, [pc, #48]	; (8000e9c <HAL_TIM_Base_MspInit+0x98>)
 8000e6a:	4293      	cmp	r3, r2
 8000e6c:	d10b      	bne.n	8000e86 <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8000e6e:	4b09      	ldr	r3, [pc, #36]	; (8000e94 <HAL_TIM_Base_MspInit+0x90>)
 8000e70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e72:	4a08      	ldr	r2, [pc, #32]	; (8000e94 <HAL_TIM_Base_MspInit+0x90>)
 8000e74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e78:	6613      	str	r3, [r2, #96]	; 0x60
 8000e7a:	4b06      	ldr	r3, [pc, #24]	; (8000e94 <HAL_TIM_Base_MspInit+0x90>)
 8000e7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e7e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e82:	60fb      	str	r3, [r7, #12]
 8000e84:	68fb      	ldr	r3, [r7, #12]
}
 8000e86:	bf00      	nop
 8000e88:	3718      	adds	r7, #24
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	40001000 	.word	0x40001000
 8000e94:	40021000 	.word	0x40021000
 8000e98:	40014400 	.word	0x40014400
 8000e9c:	40014800 	.word	0x40014800

08000ea0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b08c      	sub	sp, #48	; 0x30
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ea8:	f107 031c 	add.w	r3, r7, #28
 8000eac:	2200      	movs	r2, #0
 8000eae:	601a      	str	r2, [r3, #0]
 8000eb0:	605a      	str	r2, [r3, #4]
 8000eb2:	609a      	str	r2, [r3, #8]
 8000eb4:	60da      	str	r2, [r3, #12]
 8000eb6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ec0:	d11d      	bne.n	8000efe <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ec2:	4b45      	ldr	r3, [pc, #276]	; (8000fd8 <HAL_TIM_MspPostInit+0x138>)
 8000ec4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ec6:	4a44      	ldr	r2, [pc, #272]	; (8000fd8 <HAL_TIM_MspPostInit+0x138>)
 8000ec8:	f043 0301 	orr.w	r3, r3, #1
 8000ecc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ece:	4b42      	ldr	r3, [pc, #264]	; (8000fd8 <HAL_TIM_MspPostInit+0x138>)
 8000ed0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ed2:	f003 0301 	and.w	r3, r3, #1
 8000ed6:	61bb      	str	r3, [r7, #24]
 8000ed8:	69bb      	ldr	r3, [r7, #24]
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000eda:	230f      	movs	r3, #15
 8000edc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ede:	2302      	movs	r3, #2
 8000ee0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000eea:	2301      	movs	r3, #1
 8000eec:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eee:	f107 031c 	add.w	r3, r7, #28
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ef8:	f000 fa78 	bl	80013ec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 8000efc:	e068      	b.n	8000fd0 <HAL_TIM_MspPostInit+0x130>
  else if(htim->Instance==TIM8)
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	4a36      	ldr	r2, [pc, #216]	; (8000fdc <HAL_TIM_MspPostInit+0x13c>)
 8000f04:	4293      	cmp	r3, r2
 8000f06:	d11e      	bne.n	8000f46 <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f08:	4b33      	ldr	r3, [pc, #204]	; (8000fd8 <HAL_TIM_MspPostInit+0x138>)
 8000f0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f0c:	4a32      	ldr	r2, [pc, #200]	; (8000fd8 <HAL_TIM_MspPostInit+0x138>)
 8000f0e:	f043 0301 	orr.w	r3, r3, #1
 8000f12:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f14:	4b30      	ldr	r3, [pc, #192]	; (8000fd8 <HAL_TIM_MspPostInit+0x138>)
 8000f16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f18:	f003 0301 	and.w	r3, r3, #1
 8000f1c:	617b      	str	r3, [r7, #20]
 8000f1e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000f20:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000f24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f26:	2302      	movs	r3, #2
 8000f28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM8;
 8000f32:	2302      	movs	r3, #2
 8000f34:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f36:	f107 031c 	add.w	r3, r7, #28
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f40:	f000 fa54 	bl	80013ec <HAL_GPIO_Init>
}
 8000f44:	e044      	b.n	8000fd0 <HAL_TIM_MspPostInit+0x130>
  else if(htim->Instance==TIM16)
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	4a25      	ldr	r2, [pc, #148]	; (8000fe0 <HAL_TIM_MspPostInit+0x140>)
 8000f4c:	4293      	cmp	r3, r2
 8000f4e:	d11d      	bne.n	8000f8c <HAL_TIM_MspPostInit+0xec>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f50:	4b21      	ldr	r3, [pc, #132]	; (8000fd8 <HAL_TIM_MspPostInit+0x138>)
 8000f52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f54:	4a20      	ldr	r2, [pc, #128]	; (8000fd8 <HAL_TIM_MspPostInit+0x138>)
 8000f56:	f043 0301 	orr.w	r3, r3, #1
 8000f5a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f5c:	4b1e      	ldr	r3, [pc, #120]	; (8000fd8 <HAL_TIM_MspPostInit+0x138>)
 8000f5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f60:	f003 0301 	and.w	r3, r3, #1
 8000f64:	613b      	str	r3, [r7, #16]
 8000f66:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000f68:	2340      	movs	r3, #64	; 0x40
 8000f6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f6c:	2302      	movs	r3, #2
 8000f6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f70:	2300      	movs	r3, #0
 8000f72:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f74:	2300      	movs	r3, #0
 8000f76:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 8000f78:	2301      	movs	r3, #1
 8000f7a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f7c:	f107 031c 	add.w	r3, r7, #28
 8000f80:	4619      	mov	r1, r3
 8000f82:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f86:	f000 fa31 	bl	80013ec <HAL_GPIO_Init>
}
 8000f8a:	e021      	b.n	8000fd0 <HAL_TIM_MspPostInit+0x130>
  else if(htim->Instance==TIM17)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4a14      	ldr	r2, [pc, #80]	; (8000fe4 <HAL_TIM_MspPostInit+0x144>)
 8000f92:	4293      	cmp	r3, r2
 8000f94:	d11c      	bne.n	8000fd0 <HAL_TIM_MspPostInit+0x130>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f96:	4b10      	ldr	r3, [pc, #64]	; (8000fd8 <HAL_TIM_MspPostInit+0x138>)
 8000f98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f9a:	4a0f      	ldr	r2, [pc, #60]	; (8000fd8 <HAL_TIM_MspPostInit+0x138>)
 8000f9c:	f043 0301 	orr.w	r3, r3, #1
 8000fa0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fa2:	4b0d      	ldr	r3, [pc, #52]	; (8000fd8 <HAL_TIM_MspPostInit+0x138>)
 8000fa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fa6:	f003 0301 	and.w	r3, r3, #1
 8000faa:	60fb      	str	r3, [r7, #12]
 8000fac:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000fae:	2380      	movs	r3, #128	; 0x80
 8000fb0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fb2:	2302      	movs	r3, #2
 8000fb4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM17;
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fc2:	f107 031c 	add.w	r3, r7, #28
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fcc:	f000 fa0e 	bl	80013ec <HAL_GPIO_Init>
}
 8000fd0:	bf00      	nop
 8000fd2:	3730      	adds	r7, #48	; 0x30
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	40021000 	.word	0x40021000
 8000fdc:	40013400 	.word	0x40013400
 8000fe0:	40014400 	.word	0x40014400
 8000fe4:	40014800 	.word	0x40014800

08000fe8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000fec:	bf00      	nop
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff4:	4770      	bx	lr

08000ff6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ff6:	b480      	push	{r7}
 8000ff8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ffa:	e7fe      	b.n	8000ffa <HardFault_Handler+0x4>

08000ffc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001000:	e7fe      	b.n	8001000 <MemManage_Handler+0x4>

08001002 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001002:	b480      	push	{r7}
 8001004:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001006:	e7fe      	b.n	8001006 <BusFault_Handler+0x4>

08001008 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800100c:	e7fe      	b.n	800100c <UsageFault_Handler+0x4>

0800100e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800100e:	b480      	push	{r7}
 8001010:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001012:	bf00      	nop
 8001014:	46bd      	mov	sp, r7
 8001016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101a:	4770      	bx	lr

0800101c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001020:	bf00      	nop
 8001022:	46bd      	mov	sp, r7
 8001024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001028:	4770      	bx	lr

0800102a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800102a:	b480      	push	{r7}
 800102c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800102e:	bf00      	nop
 8001030:	46bd      	mov	sp, r7
 8001032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001036:	4770      	bx	lr

08001038 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800103c:	f000 f8a8 	bl	8001190 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001040:	bf00      	nop
 8001042:	bd80      	pop	{r7, pc}

08001044 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001048:	4802      	ldr	r0, [pc, #8]	; (8001054 <USB_LP_IRQHandler+0x10>)
 800104a:	f000 fc8a 	bl	8001962 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 800104e:	bf00      	nop
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	200012d0 	.word	0x200012d0

08001058 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800105c:	4802      	ldr	r0, [pc, #8]	; (8001068 <TIM6_DAC_IRQHandler+0x10>)
 800105e:	f003 f9ce 	bl	80043fe <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001062:	bf00      	nop
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	200004fc 	.word	0x200004fc

0800106c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001070:	4b08      	ldr	r3, [pc, #32]	; (8001094 <SystemInit+0x28>)
 8001072:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001076:	4a07      	ldr	r2, [pc, #28]	; (8001094 <SystemInit+0x28>)
 8001078:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800107c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001080:	4b04      	ldr	r3, [pc, #16]	; (8001094 <SystemInit+0x28>)
 8001082:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001086:	609a      	str	r2, [r3, #8]
#endif
}
 8001088:	bf00      	nop
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop
 8001094:	e000ed00 	.word	0xe000ed00

08001098 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001098:	480d      	ldr	r0, [pc, #52]	; (80010d0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800109a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800109c:	480d      	ldr	r0, [pc, #52]	; (80010d4 <LoopForever+0x6>)
  ldr r1, =_edata
 800109e:	490e      	ldr	r1, [pc, #56]	; (80010d8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80010a0:	4a0e      	ldr	r2, [pc, #56]	; (80010dc <LoopForever+0xe>)
  movs r3, #0
 80010a2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80010a4:	e002      	b.n	80010ac <LoopCopyDataInit>

080010a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010aa:	3304      	adds	r3, #4

080010ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010b0:	d3f9      	bcc.n	80010a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010b2:	4a0b      	ldr	r2, [pc, #44]	; (80010e0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80010b4:	4c0b      	ldr	r4, [pc, #44]	; (80010e4 <LoopForever+0x16>)
  movs r3, #0
 80010b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010b8:	e001      	b.n	80010be <LoopFillZerobss>

080010ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010bc:	3204      	adds	r2, #4

080010be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010c0:	d3fb      	bcc.n	80010ba <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80010c2:	f7ff ffd3 	bl	800106c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010c6:	f008 fb07 	bl	80096d8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80010ca:	f7ff f8c5 	bl	8000258 <main>

080010ce <LoopForever>:

LoopForever:
    b LoopForever
 80010ce:	e7fe      	b.n	80010ce <LoopForever>
  ldr   r0, =_estack
 80010d0:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80010d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010d8:	20000184 	.word	0x20000184
  ldr r2, =_sidata
 80010dc:	080097c0 	.word	0x080097c0
  ldr r2, =_sbss
 80010e0:	20000184 	.word	0x20000184
  ldr r4, =_ebss
 80010e4:	200015c4 	.word	0x200015c4

080010e8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80010e8:	e7fe      	b.n	80010e8 <ADC1_2_IRQHandler>

080010ea <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010ea:	b580      	push	{r7, lr}
 80010ec:	b082      	sub	sp, #8
 80010ee:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80010f0:	2300      	movs	r3, #0
 80010f2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010f4:	2003      	movs	r0, #3
 80010f6:	f000 f939 	bl	800136c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80010fa:	2000      	movs	r0, #0
 80010fc:	f000 f80e 	bl	800111c <HAL_InitTick>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d002      	beq.n	800110c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001106:	2301      	movs	r3, #1
 8001108:	71fb      	strb	r3, [r7, #7]
 800110a:	e001      	b.n	8001110 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800110c:	f7ff fd7e 	bl	8000c0c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001110:	79fb      	ldrb	r3, [r7, #7]

}
 8001112:	4618      	mov	r0, r3
 8001114:	3708      	adds	r7, #8
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
	...

0800111c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b084      	sub	sp, #16
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001124:	2300      	movs	r3, #0
 8001126:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001128:	4b16      	ldr	r3, [pc, #88]	; (8001184 <HAL_InitTick+0x68>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	2b00      	cmp	r3, #0
 800112e:	d022      	beq.n	8001176 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001130:	4b15      	ldr	r3, [pc, #84]	; (8001188 <HAL_InitTick+0x6c>)
 8001132:	681a      	ldr	r2, [r3, #0]
 8001134:	4b13      	ldr	r3, [pc, #76]	; (8001184 <HAL_InitTick+0x68>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800113c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001140:	fbb2 f3f3 	udiv	r3, r2, r3
 8001144:	4618      	mov	r0, r3
 8001146:	f000 f944 	bl	80013d2 <HAL_SYSTICK_Config>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d10f      	bne.n	8001170 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	2b0f      	cmp	r3, #15
 8001154:	d809      	bhi.n	800116a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001156:	2200      	movs	r2, #0
 8001158:	6879      	ldr	r1, [r7, #4]
 800115a:	f04f 30ff 	mov.w	r0, #4294967295
 800115e:	f000 f910 	bl	8001382 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001162:	4a0a      	ldr	r2, [pc, #40]	; (800118c <HAL_InitTick+0x70>)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	6013      	str	r3, [r2, #0]
 8001168:	e007      	b.n	800117a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800116a:	2301      	movs	r3, #1
 800116c:	73fb      	strb	r3, [r7, #15]
 800116e:	e004      	b.n	800117a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001170:	2301      	movs	r3, #1
 8001172:	73fb      	strb	r3, [r7, #15]
 8001174:	e001      	b.n	800117a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001176:	2301      	movs	r3, #1
 8001178:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800117a:	7bfb      	ldrb	r3, [r7, #15]
}
 800117c:	4618      	mov	r0, r3
 800117e:	3710      	adds	r7, #16
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}
 8001184:	20000008 	.word	0x20000008
 8001188:	20000000 	.word	0x20000000
 800118c:	20000004 	.word	0x20000004

08001190 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001194:	4b05      	ldr	r3, [pc, #20]	; (80011ac <HAL_IncTick+0x1c>)
 8001196:	681a      	ldr	r2, [r3, #0]
 8001198:	4b05      	ldr	r3, [pc, #20]	; (80011b0 <HAL_IncTick+0x20>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	4413      	add	r3, r2
 800119e:	4a03      	ldr	r2, [pc, #12]	; (80011ac <HAL_IncTick+0x1c>)
 80011a0:	6013      	str	r3, [r2, #0]
}
 80011a2:	bf00      	nop
 80011a4:	46bd      	mov	sp, r7
 80011a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011aa:	4770      	bx	lr
 80011ac:	2000062c 	.word	0x2000062c
 80011b0:	20000008 	.word	0x20000008

080011b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011b4:	b480      	push	{r7}
 80011b6:	af00      	add	r7, sp, #0
  return uwTick;
 80011b8:	4b03      	ldr	r3, [pc, #12]	; (80011c8 <HAL_GetTick+0x14>)
 80011ba:	681b      	ldr	r3, [r3, #0]
}
 80011bc:	4618      	mov	r0, r3
 80011be:	46bd      	mov	sp, r7
 80011c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c4:	4770      	bx	lr
 80011c6:	bf00      	nop
 80011c8:	2000062c 	.word	0x2000062c

080011cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b085      	sub	sp, #20
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	f003 0307 	and.w	r3, r3, #7
 80011da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011dc:	4b0c      	ldr	r3, [pc, #48]	; (8001210 <__NVIC_SetPriorityGrouping+0x44>)
 80011de:	68db      	ldr	r3, [r3, #12]
 80011e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011e2:	68ba      	ldr	r2, [r7, #8]
 80011e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011e8:	4013      	ands	r3, r2
 80011ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011f0:	68bb      	ldr	r3, [r7, #8]
 80011f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011fe:	4a04      	ldr	r2, [pc, #16]	; (8001210 <__NVIC_SetPriorityGrouping+0x44>)
 8001200:	68bb      	ldr	r3, [r7, #8]
 8001202:	60d3      	str	r3, [r2, #12]
}
 8001204:	bf00      	nop
 8001206:	3714      	adds	r7, #20
 8001208:	46bd      	mov	sp, r7
 800120a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120e:	4770      	bx	lr
 8001210:	e000ed00 	.word	0xe000ed00

08001214 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001218:	4b04      	ldr	r3, [pc, #16]	; (800122c <__NVIC_GetPriorityGrouping+0x18>)
 800121a:	68db      	ldr	r3, [r3, #12]
 800121c:	0a1b      	lsrs	r3, r3, #8
 800121e:	f003 0307 	and.w	r3, r3, #7
}
 8001222:	4618      	mov	r0, r3
 8001224:	46bd      	mov	sp, r7
 8001226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122a:	4770      	bx	lr
 800122c:	e000ed00 	.word	0xe000ed00

08001230 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001230:	b480      	push	{r7}
 8001232:	b083      	sub	sp, #12
 8001234:	af00      	add	r7, sp, #0
 8001236:	4603      	mov	r3, r0
 8001238:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800123a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800123e:	2b00      	cmp	r3, #0
 8001240:	db0b      	blt.n	800125a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001242:	79fb      	ldrb	r3, [r7, #7]
 8001244:	f003 021f 	and.w	r2, r3, #31
 8001248:	4907      	ldr	r1, [pc, #28]	; (8001268 <__NVIC_EnableIRQ+0x38>)
 800124a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800124e:	095b      	lsrs	r3, r3, #5
 8001250:	2001      	movs	r0, #1
 8001252:	fa00 f202 	lsl.w	r2, r0, r2
 8001256:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800125a:	bf00      	nop
 800125c:	370c      	adds	r7, #12
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr
 8001266:	bf00      	nop
 8001268:	e000e100 	.word	0xe000e100

0800126c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800126c:	b480      	push	{r7}
 800126e:	b083      	sub	sp, #12
 8001270:	af00      	add	r7, sp, #0
 8001272:	4603      	mov	r3, r0
 8001274:	6039      	str	r1, [r7, #0]
 8001276:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001278:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800127c:	2b00      	cmp	r3, #0
 800127e:	db0a      	blt.n	8001296 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	b2da      	uxtb	r2, r3
 8001284:	490c      	ldr	r1, [pc, #48]	; (80012b8 <__NVIC_SetPriority+0x4c>)
 8001286:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800128a:	0112      	lsls	r2, r2, #4
 800128c:	b2d2      	uxtb	r2, r2
 800128e:	440b      	add	r3, r1
 8001290:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001294:	e00a      	b.n	80012ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	b2da      	uxtb	r2, r3
 800129a:	4908      	ldr	r1, [pc, #32]	; (80012bc <__NVIC_SetPriority+0x50>)
 800129c:	79fb      	ldrb	r3, [r7, #7]
 800129e:	f003 030f 	and.w	r3, r3, #15
 80012a2:	3b04      	subs	r3, #4
 80012a4:	0112      	lsls	r2, r2, #4
 80012a6:	b2d2      	uxtb	r2, r2
 80012a8:	440b      	add	r3, r1
 80012aa:	761a      	strb	r2, [r3, #24]
}
 80012ac:	bf00      	nop
 80012ae:	370c      	adds	r7, #12
 80012b0:	46bd      	mov	sp, r7
 80012b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b6:	4770      	bx	lr
 80012b8:	e000e100 	.word	0xe000e100
 80012bc:	e000ed00 	.word	0xe000ed00

080012c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b089      	sub	sp, #36	; 0x24
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	60f8      	str	r0, [r7, #12]
 80012c8:	60b9      	str	r1, [r7, #8]
 80012ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	f003 0307 	and.w	r3, r3, #7
 80012d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012d4:	69fb      	ldr	r3, [r7, #28]
 80012d6:	f1c3 0307 	rsb	r3, r3, #7
 80012da:	2b04      	cmp	r3, #4
 80012dc:	bf28      	it	cs
 80012de:	2304      	movcs	r3, #4
 80012e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012e2:	69fb      	ldr	r3, [r7, #28]
 80012e4:	3304      	adds	r3, #4
 80012e6:	2b06      	cmp	r3, #6
 80012e8:	d902      	bls.n	80012f0 <NVIC_EncodePriority+0x30>
 80012ea:	69fb      	ldr	r3, [r7, #28]
 80012ec:	3b03      	subs	r3, #3
 80012ee:	e000      	b.n	80012f2 <NVIC_EncodePriority+0x32>
 80012f0:	2300      	movs	r3, #0
 80012f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012f4:	f04f 32ff 	mov.w	r2, #4294967295
 80012f8:	69bb      	ldr	r3, [r7, #24]
 80012fa:	fa02 f303 	lsl.w	r3, r2, r3
 80012fe:	43da      	mvns	r2, r3
 8001300:	68bb      	ldr	r3, [r7, #8]
 8001302:	401a      	ands	r2, r3
 8001304:	697b      	ldr	r3, [r7, #20]
 8001306:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001308:	f04f 31ff 	mov.w	r1, #4294967295
 800130c:	697b      	ldr	r3, [r7, #20]
 800130e:	fa01 f303 	lsl.w	r3, r1, r3
 8001312:	43d9      	mvns	r1, r3
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001318:	4313      	orrs	r3, r2
         );
}
 800131a:	4618      	mov	r0, r3
 800131c:	3724      	adds	r7, #36	; 0x24
 800131e:	46bd      	mov	sp, r7
 8001320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001324:	4770      	bx	lr
	...

08001328 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b082      	sub	sp, #8
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	3b01      	subs	r3, #1
 8001334:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001338:	d301      	bcc.n	800133e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800133a:	2301      	movs	r3, #1
 800133c:	e00f      	b.n	800135e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800133e:	4a0a      	ldr	r2, [pc, #40]	; (8001368 <SysTick_Config+0x40>)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	3b01      	subs	r3, #1
 8001344:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001346:	210f      	movs	r1, #15
 8001348:	f04f 30ff 	mov.w	r0, #4294967295
 800134c:	f7ff ff8e 	bl	800126c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001350:	4b05      	ldr	r3, [pc, #20]	; (8001368 <SysTick_Config+0x40>)
 8001352:	2200      	movs	r2, #0
 8001354:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001356:	4b04      	ldr	r3, [pc, #16]	; (8001368 <SysTick_Config+0x40>)
 8001358:	2207      	movs	r2, #7
 800135a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800135c:	2300      	movs	r3, #0
}
 800135e:	4618      	mov	r0, r3
 8001360:	3708      	adds	r7, #8
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	e000e010 	.word	0xe000e010

0800136c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b082      	sub	sp, #8
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001374:	6878      	ldr	r0, [r7, #4]
 8001376:	f7ff ff29 	bl	80011cc <__NVIC_SetPriorityGrouping>
}
 800137a:	bf00      	nop
 800137c:	3708      	adds	r7, #8
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}

08001382 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001382:	b580      	push	{r7, lr}
 8001384:	b086      	sub	sp, #24
 8001386:	af00      	add	r7, sp, #0
 8001388:	4603      	mov	r3, r0
 800138a:	60b9      	str	r1, [r7, #8]
 800138c:	607a      	str	r2, [r7, #4]
 800138e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001390:	f7ff ff40 	bl	8001214 <__NVIC_GetPriorityGrouping>
 8001394:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001396:	687a      	ldr	r2, [r7, #4]
 8001398:	68b9      	ldr	r1, [r7, #8]
 800139a:	6978      	ldr	r0, [r7, #20]
 800139c:	f7ff ff90 	bl	80012c0 <NVIC_EncodePriority>
 80013a0:	4602      	mov	r2, r0
 80013a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013a6:	4611      	mov	r1, r2
 80013a8:	4618      	mov	r0, r3
 80013aa:	f7ff ff5f 	bl	800126c <__NVIC_SetPriority>
}
 80013ae:	bf00      	nop
 80013b0:	3718      	adds	r7, #24
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}

080013b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013b6:	b580      	push	{r7, lr}
 80013b8:	b082      	sub	sp, #8
 80013ba:	af00      	add	r7, sp, #0
 80013bc:	4603      	mov	r3, r0
 80013be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013c4:	4618      	mov	r0, r3
 80013c6:	f7ff ff33 	bl	8001230 <__NVIC_EnableIRQ>
}
 80013ca:	bf00      	nop
 80013cc:	3708      	adds	r7, #8
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}

080013d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013d2:	b580      	push	{r7, lr}
 80013d4:	b082      	sub	sp, #8
 80013d6:	af00      	add	r7, sp, #0
 80013d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013da:	6878      	ldr	r0, [r7, #4]
 80013dc:	f7ff ffa4 	bl	8001328 <SysTick_Config>
 80013e0:	4603      	mov	r3, r0
}
 80013e2:	4618      	mov	r0, r3
 80013e4:	3708      	adds	r7, #8
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
	...

080013ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b087      	sub	sp, #28
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
 80013f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80013f6:	2300      	movs	r3, #0
 80013f8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80013fa:	e15a      	b.n	80016b2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	681a      	ldr	r2, [r3, #0]
 8001400:	2101      	movs	r1, #1
 8001402:	697b      	ldr	r3, [r7, #20]
 8001404:	fa01 f303 	lsl.w	r3, r1, r3
 8001408:	4013      	ands	r3, r2
 800140a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	2b00      	cmp	r3, #0
 8001410:	f000 814c 	beq.w	80016ac <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	2b01      	cmp	r3, #1
 800141a:	d00b      	beq.n	8001434 <HAL_GPIO_Init+0x48>
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	2b02      	cmp	r3, #2
 8001422:	d007      	beq.n	8001434 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001428:	2b11      	cmp	r3, #17
 800142a:	d003      	beq.n	8001434 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	2b12      	cmp	r3, #18
 8001432:	d130      	bne.n	8001496 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	689b      	ldr	r3, [r3, #8]
 8001438:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800143a:	697b      	ldr	r3, [r7, #20]
 800143c:	005b      	lsls	r3, r3, #1
 800143e:	2203      	movs	r2, #3
 8001440:	fa02 f303 	lsl.w	r3, r2, r3
 8001444:	43db      	mvns	r3, r3
 8001446:	693a      	ldr	r2, [r7, #16]
 8001448:	4013      	ands	r3, r2
 800144a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	68da      	ldr	r2, [r3, #12]
 8001450:	697b      	ldr	r3, [r7, #20]
 8001452:	005b      	lsls	r3, r3, #1
 8001454:	fa02 f303 	lsl.w	r3, r2, r3
 8001458:	693a      	ldr	r2, [r7, #16]
 800145a:	4313      	orrs	r3, r2
 800145c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	693a      	ldr	r2, [r7, #16]
 8001462:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800146a:	2201      	movs	r2, #1
 800146c:	697b      	ldr	r3, [r7, #20]
 800146e:	fa02 f303 	lsl.w	r3, r2, r3
 8001472:	43db      	mvns	r3, r3
 8001474:	693a      	ldr	r2, [r7, #16]
 8001476:	4013      	ands	r3, r2
 8001478:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	685b      	ldr	r3, [r3, #4]
 800147e:	091b      	lsrs	r3, r3, #4
 8001480:	f003 0201 	and.w	r2, r3, #1
 8001484:	697b      	ldr	r3, [r7, #20]
 8001486:	fa02 f303 	lsl.w	r3, r2, r3
 800148a:	693a      	ldr	r2, [r7, #16]
 800148c:	4313      	orrs	r3, r2
 800148e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	693a      	ldr	r2, [r7, #16]
 8001494:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	68db      	ldr	r3, [r3, #12]
 800149a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800149c:	697b      	ldr	r3, [r7, #20]
 800149e:	005b      	lsls	r3, r3, #1
 80014a0:	2203      	movs	r2, #3
 80014a2:	fa02 f303 	lsl.w	r3, r2, r3
 80014a6:	43db      	mvns	r3, r3
 80014a8:	693a      	ldr	r2, [r7, #16]
 80014aa:	4013      	ands	r3, r2
 80014ac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	689a      	ldr	r2, [r3, #8]
 80014b2:	697b      	ldr	r3, [r7, #20]
 80014b4:	005b      	lsls	r3, r3, #1
 80014b6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ba:	693a      	ldr	r2, [r7, #16]
 80014bc:	4313      	orrs	r3, r2
 80014be:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	693a      	ldr	r2, [r7, #16]
 80014c4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	685b      	ldr	r3, [r3, #4]
 80014ca:	2b02      	cmp	r3, #2
 80014cc:	d003      	beq.n	80014d6 <HAL_GPIO_Init+0xea>
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	2b12      	cmp	r3, #18
 80014d4:	d123      	bne.n	800151e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80014d6:	697b      	ldr	r3, [r7, #20]
 80014d8:	08da      	lsrs	r2, r3, #3
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	3208      	adds	r2, #8
 80014de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014e2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80014e4:	697b      	ldr	r3, [r7, #20]
 80014e6:	f003 0307 	and.w	r3, r3, #7
 80014ea:	009b      	lsls	r3, r3, #2
 80014ec:	220f      	movs	r2, #15
 80014ee:	fa02 f303 	lsl.w	r3, r2, r3
 80014f2:	43db      	mvns	r3, r3
 80014f4:	693a      	ldr	r2, [r7, #16]
 80014f6:	4013      	ands	r3, r2
 80014f8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	691a      	ldr	r2, [r3, #16]
 80014fe:	697b      	ldr	r3, [r7, #20]
 8001500:	f003 0307 	and.w	r3, r3, #7
 8001504:	009b      	lsls	r3, r3, #2
 8001506:	fa02 f303 	lsl.w	r3, r2, r3
 800150a:	693a      	ldr	r2, [r7, #16]
 800150c:	4313      	orrs	r3, r2
 800150e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001510:	697b      	ldr	r3, [r7, #20]
 8001512:	08da      	lsrs	r2, r3, #3
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	3208      	adds	r2, #8
 8001518:	6939      	ldr	r1, [r7, #16]
 800151a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001524:	697b      	ldr	r3, [r7, #20]
 8001526:	005b      	lsls	r3, r3, #1
 8001528:	2203      	movs	r2, #3
 800152a:	fa02 f303 	lsl.w	r3, r2, r3
 800152e:	43db      	mvns	r3, r3
 8001530:	693a      	ldr	r2, [r7, #16]
 8001532:	4013      	ands	r3, r2
 8001534:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	f003 0203 	and.w	r2, r3, #3
 800153e:	697b      	ldr	r3, [r7, #20]
 8001540:	005b      	lsls	r3, r3, #1
 8001542:	fa02 f303 	lsl.w	r3, r2, r3
 8001546:	693a      	ldr	r2, [r7, #16]
 8001548:	4313      	orrs	r3, r2
 800154a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	693a      	ldr	r2, [r7, #16]
 8001550:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800155a:	2b00      	cmp	r3, #0
 800155c:	f000 80a6 	beq.w	80016ac <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001560:	4b5b      	ldr	r3, [pc, #364]	; (80016d0 <HAL_GPIO_Init+0x2e4>)
 8001562:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001564:	4a5a      	ldr	r2, [pc, #360]	; (80016d0 <HAL_GPIO_Init+0x2e4>)
 8001566:	f043 0301 	orr.w	r3, r3, #1
 800156a:	6613      	str	r3, [r2, #96]	; 0x60
 800156c:	4b58      	ldr	r3, [pc, #352]	; (80016d0 <HAL_GPIO_Init+0x2e4>)
 800156e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001570:	f003 0301 	and.w	r3, r3, #1
 8001574:	60bb      	str	r3, [r7, #8]
 8001576:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001578:	4a56      	ldr	r2, [pc, #344]	; (80016d4 <HAL_GPIO_Init+0x2e8>)
 800157a:	697b      	ldr	r3, [r7, #20]
 800157c:	089b      	lsrs	r3, r3, #2
 800157e:	3302      	adds	r3, #2
 8001580:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001584:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001586:	697b      	ldr	r3, [r7, #20]
 8001588:	f003 0303 	and.w	r3, r3, #3
 800158c:	009b      	lsls	r3, r3, #2
 800158e:	220f      	movs	r2, #15
 8001590:	fa02 f303 	lsl.w	r3, r2, r3
 8001594:	43db      	mvns	r3, r3
 8001596:	693a      	ldr	r2, [r7, #16]
 8001598:	4013      	ands	r3, r2
 800159a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80015a2:	d01f      	beq.n	80015e4 <HAL_GPIO_Init+0x1f8>
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	4a4c      	ldr	r2, [pc, #304]	; (80016d8 <HAL_GPIO_Init+0x2ec>)
 80015a8:	4293      	cmp	r3, r2
 80015aa:	d019      	beq.n	80015e0 <HAL_GPIO_Init+0x1f4>
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	4a4b      	ldr	r2, [pc, #300]	; (80016dc <HAL_GPIO_Init+0x2f0>)
 80015b0:	4293      	cmp	r3, r2
 80015b2:	d013      	beq.n	80015dc <HAL_GPIO_Init+0x1f0>
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	4a4a      	ldr	r2, [pc, #296]	; (80016e0 <HAL_GPIO_Init+0x2f4>)
 80015b8:	4293      	cmp	r3, r2
 80015ba:	d00d      	beq.n	80015d8 <HAL_GPIO_Init+0x1ec>
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	4a49      	ldr	r2, [pc, #292]	; (80016e4 <HAL_GPIO_Init+0x2f8>)
 80015c0:	4293      	cmp	r3, r2
 80015c2:	d007      	beq.n	80015d4 <HAL_GPIO_Init+0x1e8>
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	4a48      	ldr	r2, [pc, #288]	; (80016e8 <HAL_GPIO_Init+0x2fc>)
 80015c8:	4293      	cmp	r3, r2
 80015ca:	d101      	bne.n	80015d0 <HAL_GPIO_Init+0x1e4>
 80015cc:	2305      	movs	r3, #5
 80015ce:	e00a      	b.n	80015e6 <HAL_GPIO_Init+0x1fa>
 80015d0:	2306      	movs	r3, #6
 80015d2:	e008      	b.n	80015e6 <HAL_GPIO_Init+0x1fa>
 80015d4:	2304      	movs	r3, #4
 80015d6:	e006      	b.n	80015e6 <HAL_GPIO_Init+0x1fa>
 80015d8:	2303      	movs	r3, #3
 80015da:	e004      	b.n	80015e6 <HAL_GPIO_Init+0x1fa>
 80015dc:	2302      	movs	r3, #2
 80015de:	e002      	b.n	80015e6 <HAL_GPIO_Init+0x1fa>
 80015e0:	2301      	movs	r3, #1
 80015e2:	e000      	b.n	80015e6 <HAL_GPIO_Init+0x1fa>
 80015e4:	2300      	movs	r3, #0
 80015e6:	697a      	ldr	r2, [r7, #20]
 80015e8:	f002 0203 	and.w	r2, r2, #3
 80015ec:	0092      	lsls	r2, r2, #2
 80015ee:	4093      	lsls	r3, r2
 80015f0:	693a      	ldr	r2, [r7, #16]
 80015f2:	4313      	orrs	r3, r2
 80015f4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80015f6:	4937      	ldr	r1, [pc, #220]	; (80016d4 <HAL_GPIO_Init+0x2e8>)
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	089b      	lsrs	r3, r3, #2
 80015fc:	3302      	adds	r3, #2
 80015fe:	693a      	ldr	r2, [r7, #16]
 8001600:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001604:	4b39      	ldr	r3, [pc, #228]	; (80016ec <HAL_GPIO_Init+0x300>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	43db      	mvns	r3, r3
 800160e:	693a      	ldr	r2, [r7, #16]
 8001610:	4013      	ands	r3, r2
 8001612:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800161c:	2b00      	cmp	r3, #0
 800161e:	d003      	beq.n	8001628 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001620:	693a      	ldr	r2, [r7, #16]
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	4313      	orrs	r3, r2
 8001626:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001628:	4a30      	ldr	r2, [pc, #192]	; (80016ec <HAL_GPIO_Init+0x300>)
 800162a:	693b      	ldr	r3, [r7, #16]
 800162c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800162e:	4b2f      	ldr	r3, [pc, #188]	; (80016ec <HAL_GPIO_Init+0x300>)
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	43db      	mvns	r3, r3
 8001638:	693a      	ldr	r2, [r7, #16]
 800163a:	4013      	ands	r3, r2
 800163c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001646:	2b00      	cmp	r3, #0
 8001648:	d003      	beq.n	8001652 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800164a:	693a      	ldr	r2, [r7, #16]
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	4313      	orrs	r3, r2
 8001650:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001652:	4a26      	ldr	r2, [pc, #152]	; (80016ec <HAL_GPIO_Init+0x300>)
 8001654:	693b      	ldr	r3, [r7, #16]
 8001656:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001658:	4b24      	ldr	r3, [pc, #144]	; (80016ec <HAL_GPIO_Init+0x300>)
 800165a:	689b      	ldr	r3, [r3, #8]
 800165c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	43db      	mvns	r3, r3
 8001662:	693a      	ldr	r2, [r7, #16]
 8001664:	4013      	ands	r3, r2
 8001666:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001670:	2b00      	cmp	r3, #0
 8001672:	d003      	beq.n	800167c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001674:	693a      	ldr	r2, [r7, #16]
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	4313      	orrs	r3, r2
 800167a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800167c:	4a1b      	ldr	r2, [pc, #108]	; (80016ec <HAL_GPIO_Init+0x300>)
 800167e:	693b      	ldr	r3, [r7, #16]
 8001680:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001682:	4b1a      	ldr	r3, [pc, #104]	; (80016ec <HAL_GPIO_Init+0x300>)
 8001684:	68db      	ldr	r3, [r3, #12]
 8001686:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	43db      	mvns	r3, r3
 800168c:	693a      	ldr	r2, [r7, #16]
 800168e:	4013      	ands	r3, r2
 8001690:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800169a:	2b00      	cmp	r3, #0
 800169c:	d003      	beq.n	80016a6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800169e:	693a      	ldr	r2, [r7, #16]
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	4313      	orrs	r3, r2
 80016a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80016a6:	4a11      	ldr	r2, [pc, #68]	; (80016ec <HAL_GPIO_Init+0x300>)
 80016a8:	693b      	ldr	r3, [r7, #16]
 80016aa:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80016ac:	697b      	ldr	r3, [r7, #20]
 80016ae:	3301      	adds	r3, #1
 80016b0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	681a      	ldr	r2, [r3, #0]
 80016b6:	697b      	ldr	r3, [r7, #20]
 80016b8:	fa22 f303 	lsr.w	r3, r2, r3
 80016bc:	2b00      	cmp	r3, #0
 80016be:	f47f ae9d 	bne.w	80013fc <HAL_GPIO_Init+0x10>
  }
}
 80016c2:	bf00      	nop
 80016c4:	371c      	adds	r7, #28
 80016c6:	46bd      	mov	sp, r7
 80016c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016cc:	4770      	bx	lr
 80016ce:	bf00      	nop
 80016d0:	40021000 	.word	0x40021000
 80016d4:	40010000 	.word	0x40010000
 80016d8:	48000400 	.word	0x48000400
 80016dc:	48000800 	.word	0x48000800
 80016e0:	48000c00 	.word	0x48000c00
 80016e4:	48001000 	.word	0x48001000
 80016e8:	48001400 	.word	0x48001400
 80016ec:	40010400 	.word	0x40010400

080016f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b083      	sub	sp, #12
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
 80016f8:	460b      	mov	r3, r1
 80016fa:	807b      	strh	r3, [r7, #2]
 80016fc:	4613      	mov	r3, r2
 80016fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001700:	787b      	ldrb	r3, [r7, #1]
 8001702:	2b00      	cmp	r3, #0
 8001704:	d003      	beq.n	800170e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001706:	887a      	ldrh	r2, [r7, #2]
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800170c:	e002      	b.n	8001714 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800170e:	887a      	ldrh	r2, [r7, #2]
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001714:	bf00      	nop
 8001716:	370c      	adds	r7, #12
 8001718:	46bd      	mov	sp, r7
 800171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171e:	4770      	bx	lr

08001720 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001720:	b480      	push	{r7}
 8001722:	b085      	sub	sp, #20
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
 8001728:	460b      	mov	r3, r1
 800172a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	695b      	ldr	r3, [r3, #20]
 8001730:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001732:	887a      	ldrh	r2, [r7, #2]
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	4013      	ands	r3, r2
 8001738:	041a      	lsls	r2, r3, #16
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	43d9      	mvns	r1, r3
 800173e:	887b      	ldrh	r3, [r7, #2]
 8001740:	400b      	ands	r3, r1
 8001742:	431a      	orrs	r2, r3
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	619a      	str	r2, [r3, #24]
}
 8001748:	bf00      	nop
 800174a:	3714      	adds	r7, #20
 800174c:	46bd      	mov	sp, r7
 800174e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001752:	4770      	bx	lr

08001754 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001754:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001756:	b08b      	sub	sp, #44	; 0x2c
 8001758:	af06      	add	r7, sp, #24
 800175a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	2b00      	cmp	r3, #0
 8001760:	d101      	bne.n	8001766 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001762:	2301      	movs	r3, #1
 8001764:	e0d7      	b.n	8001916 <HAL_PCD_Init+0x1c2>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 800176c:	b2db      	uxtb	r3, r3
 800176e:	2b00      	cmp	r3, #0
 8001770:	d106      	bne.n	8001780 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	2200      	movs	r2, #0
 8001776:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800177a:	6878      	ldr	r0, [r7, #4]
 800177c:	f007 fcbc 	bl	80090f8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	2203      	movs	r2, #3
 8001784:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4618      	mov	r0, r3
 800178e:	f003 fe18 	bl	80053c2 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001792:	2300      	movs	r3, #0
 8001794:	73fb      	strb	r3, [r7, #15]
 8001796:	e04c      	b.n	8001832 <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001798:	7bfb      	ldrb	r3, [r7, #15]
 800179a:	6879      	ldr	r1, [r7, #4]
 800179c:	1c5a      	adds	r2, r3, #1
 800179e:	4613      	mov	r3, r2
 80017a0:	009b      	lsls	r3, r3, #2
 80017a2:	4413      	add	r3, r2
 80017a4:	00db      	lsls	r3, r3, #3
 80017a6:	440b      	add	r3, r1
 80017a8:	3301      	adds	r3, #1
 80017aa:	2201      	movs	r2, #1
 80017ac:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80017ae:	7bfb      	ldrb	r3, [r7, #15]
 80017b0:	6879      	ldr	r1, [r7, #4]
 80017b2:	1c5a      	adds	r2, r3, #1
 80017b4:	4613      	mov	r3, r2
 80017b6:	009b      	lsls	r3, r3, #2
 80017b8:	4413      	add	r3, r2
 80017ba:	00db      	lsls	r3, r3, #3
 80017bc:	440b      	add	r3, r1
 80017be:	7bfa      	ldrb	r2, [r7, #15]
 80017c0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80017c2:	7bfa      	ldrb	r2, [r7, #15]
 80017c4:	7bfb      	ldrb	r3, [r7, #15]
 80017c6:	b298      	uxth	r0, r3
 80017c8:	6879      	ldr	r1, [r7, #4]
 80017ca:	4613      	mov	r3, r2
 80017cc:	009b      	lsls	r3, r3, #2
 80017ce:	4413      	add	r3, r2
 80017d0:	00db      	lsls	r3, r3, #3
 80017d2:	440b      	add	r3, r1
 80017d4:	3336      	adds	r3, #54	; 0x36
 80017d6:	4602      	mov	r2, r0
 80017d8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80017da:	7bfb      	ldrb	r3, [r7, #15]
 80017dc:	6879      	ldr	r1, [r7, #4]
 80017de:	1c5a      	adds	r2, r3, #1
 80017e0:	4613      	mov	r3, r2
 80017e2:	009b      	lsls	r3, r3, #2
 80017e4:	4413      	add	r3, r2
 80017e6:	00db      	lsls	r3, r3, #3
 80017e8:	440b      	add	r3, r1
 80017ea:	3303      	adds	r3, #3
 80017ec:	2200      	movs	r2, #0
 80017ee:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80017f0:	7bfa      	ldrb	r2, [r7, #15]
 80017f2:	6879      	ldr	r1, [r7, #4]
 80017f4:	4613      	mov	r3, r2
 80017f6:	009b      	lsls	r3, r3, #2
 80017f8:	4413      	add	r3, r2
 80017fa:	00db      	lsls	r3, r3, #3
 80017fc:	440b      	add	r3, r1
 80017fe:	3338      	adds	r3, #56	; 0x38
 8001800:	2200      	movs	r2, #0
 8001802:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001804:	7bfa      	ldrb	r2, [r7, #15]
 8001806:	6879      	ldr	r1, [r7, #4]
 8001808:	4613      	mov	r3, r2
 800180a:	009b      	lsls	r3, r3, #2
 800180c:	4413      	add	r3, r2
 800180e:	00db      	lsls	r3, r3, #3
 8001810:	440b      	add	r3, r1
 8001812:	333c      	adds	r3, #60	; 0x3c
 8001814:	2200      	movs	r2, #0
 8001816:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001818:	7bfa      	ldrb	r2, [r7, #15]
 800181a:	6879      	ldr	r1, [r7, #4]
 800181c:	4613      	mov	r3, r2
 800181e:	009b      	lsls	r3, r3, #2
 8001820:	4413      	add	r3, r2
 8001822:	00db      	lsls	r3, r3, #3
 8001824:	440b      	add	r3, r1
 8001826:	3340      	adds	r3, #64	; 0x40
 8001828:	2200      	movs	r2, #0
 800182a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800182c:	7bfb      	ldrb	r3, [r7, #15]
 800182e:	3301      	adds	r3, #1
 8001830:	73fb      	strb	r3, [r7, #15]
 8001832:	7bfa      	ldrb	r2, [r7, #15]
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	429a      	cmp	r2, r3
 800183a:	d3ad      	bcc.n	8001798 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800183c:	2300      	movs	r3, #0
 800183e:	73fb      	strb	r3, [r7, #15]
 8001840:	e044      	b.n	80018cc <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001842:	7bfa      	ldrb	r2, [r7, #15]
 8001844:	6879      	ldr	r1, [r7, #4]
 8001846:	4613      	mov	r3, r2
 8001848:	009b      	lsls	r3, r3, #2
 800184a:	4413      	add	r3, r2
 800184c:	00db      	lsls	r3, r3, #3
 800184e:	440b      	add	r3, r1
 8001850:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001854:	2200      	movs	r2, #0
 8001856:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001858:	7bfa      	ldrb	r2, [r7, #15]
 800185a:	6879      	ldr	r1, [r7, #4]
 800185c:	4613      	mov	r3, r2
 800185e:	009b      	lsls	r3, r3, #2
 8001860:	4413      	add	r3, r2
 8001862:	00db      	lsls	r3, r3, #3
 8001864:	440b      	add	r3, r1
 8001866:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800186a:	7bfa      	ldrb	r2, [r7, #15]
 800186c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800186e:	7bfa      	ldrb	r2, [r7, #15]
 8001870:	6879      	ldr	r1, [r7, #4]
 8001872:	4613      	mov	r3, r2
 8001874:	009b      	lsls	r3, r3, #2
 8001876:	4413      	add	r3, r2
 8001878:	00db      	lsls	r3, r3, #3
 800187a:	440b      	add	r3, r1
 800187c:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001880:	2200      	movs	r2, #0
 8001882:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001884:	7bfa      	ldrb	r2, [r7, #15]
 8001886:	6879      	ldr	r1, [r7, #4]
 8001888:	4613      	mov	r3, r2
 800188a:	009b      	lsls	r3, r3, #2
 800188c:	4413      	add	r3, r2
 800188e:	00db      	lsls	r3, r3, #3
 8001890:	440b      	add	r3, r1
 8001892:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001896:	2200      	movs	r2, #0
 8001898:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800189a:	7bfa      	ldrb	r2, [r7, #15]
 800189c:	6879      	ldr	r1, [r7, #4]
 800189e:	4613      	mov	r3, r2
 80018a0:	009b      	lsls	r3, r3, #2
 80018a2:	4413      	add	r3, r2
 80018a4:	00db      	lsls	r3, r3, #3
 80018a6:	440b      	add	r3, r1
 80018a8:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80018ac:	2200      	movs	r2, #0
 80018ae:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80018b0:	7bfa      	ldrb	r2, [r7, #15]
 80018b2:	6879      	ldr	r1, [r7, #4]
 80018b4:	4613      	mov	r3, r2
 80018b6:	009b      	lsls	r3, r3, #2
 80018b8:	4413      	add	r3, r2
 80018ba:	00db      	lsls	r3, r3, #3
 80018bc:	440b      	add	r3, r1
 80018be:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80018c2:	2200      	movs	r2, #0
 80018c4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80018c6:	7bfb      	ldrb	r3, [r7, #15]
 80018c8:	3301      	adds	r3, #1
 80018ca:	73fb      	strb	r3, [r7, #15]
 80018cc:	7bfa      	ldrb	r2, [r7, #15]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	429a      	cmp	r2, r3
 80018d4:	d3b5      	bcc.n	8001842 <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	603b      	str	r3, [r7, #0]
 80018dc:	687e      	ldr	r6, [r7, #4]
 80018de:	466d      	mov	r5, sp
 80018e0:	f106 0410 	add.w	r4, r6, #16
 80018e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018e8:	6823      	ldr	r3, [r4, #0]
 80018ea:	602b      	str	r3, [r5, #0]
 80018ec:	1d33      	adds	r3, r6, #4
 80018ee:	cb0e      	ldmia	r3, {r1, r2, r3}
 80018f0:	6838      	ldr	r0, [r7, #0]
 80018f2:	f003 fd81 	bl	80053f8 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	2200      	movs	r2, #0
 80018fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	2201      	movs	r2, #1
 8001902:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	69db      	ldr	r3, [r3, #28]
 800190a:	2b01      	cmp	r3, #1
 800190c:	d102      	bne.n	8001914 <HAL_PCD_Init+0x1c0>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800190e:	6878      	ldr	r0, [r7, #4]
 8001910:	f001 fa5e 	bl	8002dd0 <HAL_PCDEx_ActivateLPM>
  }
  
  return HAL_OK;
 8001914:	2300      	movs	r3, #0
}
 8001916:	4618      	mov	r0, r3
 8001918:	3714      	adds	r7, #20
 800191a:	46bd      	mov	sp, r7
 800191c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800191e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800191e:	b580      	push	{r7, lr}
 8001920:	b082      	sub	sp, #8
 8001922:	af00      	add	r7, sp, #0
 8001924:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800192c:	2b01      	cmp	r3, #1
 800192e:	d101      	bne.n	8001934 <HAL_PCD_Start+0x16>
 8001930:	2302      	movs	r3, #2
 8001932:	e012      	b.n	800195a <HAL_PCD_Start+0x3c>
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	2201      	movs	r2, #1
 8001938:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4618      	mov	r0, r3
 8001942:	f003 fd27 	bl	8005394 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4618      	mov	r0, r3
 800194c:	f005 fd13 	bl	8007376 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2200      	movs	r2, #0
 8001954:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001958:	2300      	movs	r3, #0
}
 800195a:	4618      	mov	r0, r3
 800195c:	3708      	adds	r7, #8
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}

08001962 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001962:	b580      	push	{r7, lr}
 8001964:	b082      	sub	sp, #8
 8001966:	af00      	add	r7, sp, #0
 8001968:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	4618      	mov	r0, r3
 8001970:	f005 fd18 	bl	80073a4 <USB_ReadInterrupts>
 8001974:	4603      	mov	r3, r0
 8001976:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800197a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800197e:	d102      	bne.n	8001986 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001980:	6878      	ldr	r0, [r7, #4]
 8001982:	f000 fb5b 	bl	800203c <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4618      	mov	r0, r3
 800198c:	f005 fd0a 	bl	80073a4 <USB_ReadInterrupts>
 8001990:	4603      	mov	r3, r0
 8001992:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001996:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800199a:	d112      	bne.n	80019c2 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80019a4:	b29a      	uxth	r2, r3
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80019ae:	b292      	uxth	r2, r2
 80019b0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80019b4:	6878      	ldr	r0, [r7, #4]
 80019b6:	f007 fc1a 	bl	80091ee <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80019ba:	2100      	movs	r1, #0
 80019bc:	6878      	ldr	r0, [r7, #4]
 80019be:	f000 f91e 	bl	8001bfe <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4618      	mov	r0, r3
 80019c8:	f005 fcec 	bl	80073a4 <USB_ReadInterrupts>
 80019cc:	4603      	mov	r3, r0
 80019ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019d2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80019d6:	d10b      	bne.n	80019f0 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80019e0:	b29a      	uxth	r2, r3
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80019ea:	b292      	uxth	r2, r2
 80019ec:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4618      	mov	r0, r3
 80019f6:	f005 fcd5 	bl	80073a4 <USB_ReadInterrupts>
 80019fa:	4603      	mov	r3, r0
 80019fc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001a00:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001a04:	d10b      	bne.n	8001a1e <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001a0e:	b29a      	uxth	r2, r3
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001a18:	b292      	uxth	r2, r2
 8001a1a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4618      	mov	r0, r3
 8001a24:	f005 fcbe 	bl	80073a4 <USB_ReadInterrupts>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a32:	d133      	bne.n	8001a9c <HAL_PCD_IRQHandler+0x13a>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001a3c:	b29a      	uxth	r2, r3
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f022 0204 	bic.w	r2, r2, #4
 8001a46:	b292      	uxth	r2, r2
 8001a48:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001a54:	b29a      	uxth	r2, r3
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f022 0208 	bic.w	r2, r2, #8
 8001a5e:	b292      	uxth	r2, r2
 8001a60:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8001a6a:	2b01      	cmp	r3, #1
 8001a6c:	d107      	bne.n	8001a7e <HAL_PCD_IRQHandler+0x11c>
    {
      hpcd->LPM_State = LPM_L0;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	2200      	movs	r2, #0
 8001a72:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001a76:	2100      	movs	r1, #0
 8001a78:	6878      	ldr	r0, [r7, #4]
 8001a7a:	f007 fdad 	bl	80095d8 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001a7e:	6878      	ldr	r0, [r7, #4]
 8001a80:	f007 fbee 	bl	8009260 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001a8c:	b29a      	uxth	r2, r3
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001a96:	b292      	uxth	r2, r2
 8001a98:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f005 fc7f 	bl	80073a4 <USB_ReadInterrupts>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001aac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001ab0:	d126      	bne.n	8001b00 <HAL_PCD_IRQHandler+0x19e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001aba:	b29a      	uxth	r2, r3
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f042 0208 	orr.w	r2, r2, #8
 8001ac4:	b292      	uxth	r2, r2
 8001ac6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001ad2:	b29a      	uxth	r2, r3
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001adc:	b292      	uxth	r2, r2
 8001ade:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001aea:	b29a      	uxth	r2, r3
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f042 0204 	orr.w	r2, r2, #4
 8001af4:	b292      	uxth	r2, r2
 8001af6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001afa:	6878      	ldr	r0, [r7, #4]
 8001afc:	f007 fb96 	bl	800922c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  /* Handle LPM Interrupt */
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4618      	mov	r0, r3
 8001b06:	f005 fc4d 	bl	80073a4 <USB_ReadInterrupts>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b10:	2b80      	cmp	r3, #128	; 0x80
 8001b12:	d13f      	bne.n	8001b94 <HAL_PCD_IRQHandler+0x232>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001b1c:	b29a      	uxth	r2, r3
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001b26:	b292      	uxth	r2, r2
 8001b28:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d12b      	bne.n	8001b8e <HAL_PCD_IRQHandler+0x22c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001b3e:	b29a      	uxth	r2, r3
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f042 0204 	orr.w	r2, r2, #4
 8001b48:	b292      	uxth	r2, r2
 8001b4a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001b56:	b29a      	uxth	r2, r3
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f042 0208 	orr.w	r2, r2, #8
 8001b60:	b292      	uxth	r2, r2
 8001b62:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2201      	movs	r2, #1
 8001b6a:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001b76:	b29b      	uxth	r3, r3
 8001b78:	089b      	lsrs	r3, r3, #2
 8001b7a:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001b84:	2101      	movs	r1, #1
 8001b86:	6878      	ldr	r0, [r7, #4]
 8001b88:	f007 fd26 	bl	80095d8 <HAL_PCDEx_LPM_Callback>
 8001b8c:	e002      	b.n	8001b94 <HAL_PCD_IRQHandler+0x232>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 8001b8e:	6878      	ldr	r0, [r7, #4]
 8001b90:	f007 fb4c 	bl	800922c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f005 fc03 	bl	80073a4 <USB_ReadInterrupts>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ba4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ba8:	d10e      	bne.n	8001bc8 <HAL_PCD_IRQHandler+0x266>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001bb2:	b29a      	uxth	r2, r3
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001bbc:	b292      	uxth	r2, r2
 8001bbe:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001bc2:	6878      	ldr	r0, [r7, #4]
 8001bc4:	f007 fb05 	bl	80091d2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f005 fbe9 	bl	80073a4 <USB_ReadInterrupts>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bd8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001bdc:	d10b      	bne.n	8001bf6 <HAL_PCD_IRQHandler+0x294>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001be6:	b29a      	uxth	r2, r3
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001bf0:	b292      	uxth	r2, r2
 8001bf2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8001bf6:	bf00      	nop
 8001bf8:	3708      	adds	r7, #8
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}

08001bfe <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001bfe:	b580      	push	{r7, lr}
 8001c00:	b082      	sub	sp, #8
 8001c02:	af00      	add	r7, sp, #0
 8001c04:	6078      	str	r0, [r7, #4]
 8001c06:	460b      	mov	r3, r1
 8001c08:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001c10:	2b01      	cmp	r3, #1
 8001c12:	d101      	bne.n	8001c18 <HAL_PCD_SetAddress+0x1a>
 8001c14:	2302      	movs	r3, #2
 8001c16:	e013      	b.n	8001c40 <HAL_PCD_SetAddress+0x42>
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2201      	movs	r2, #1
 8001c1c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	78fa      	ldrb	r2, [r7, #3]
 8001c24:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	78fa      	ldrb	r2, [r7, #3]
 8001c2e:	4611      	mov	r1, r2
 8001c30:	4618      	mov	r0, r3
 8001c32:	f005 fb8c 	bl	800734e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2200      	movs	r2, #0
 8001c3a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001c3e:	2300      	movs	r3, #0
}
 8001c40:	4618      	mov	r0, r3
 8001c42:	3708      	adds	r7, #8
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}

08001c48 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b084      	sub	sp, #16
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
 8001c50:	4608      	mov	r0, r1
 8001c52:	4611      	mov	r1, r2
 8001c54:	461a      	mov	r2, r3
 8001c56:	4603      	mov	r3, r0
 8001c58:	70fb      	strb	r3, [r7, #3]
 8001c5a:	460b      	mov	r3, r1
 8001c5c:	803b      	strh	r3, [r7, #0]
 8001c5e:	4613      	mov	r3, r2
 8001c60:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001c62:	2300      	movs	r3, #0
 8001c64:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001c66:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	da0e      	bge.n	8001c8c <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c6e:	78fb      	ldrb	r3, [r7, #3]
 8001c70:	f003 0307 	and.w	r3, r3, #7
 8001c74:	1c5a      	adds	r2, r3, #1
 8001c76:	4613      	mov	r3, r2
 8001c78:	009b      	lsls	r3, r3, #2
 8001c7a:	4413      	add	r3, r2
 8001c7c:	00db      	lsls	r3, r3, #3
 8001c7e:	687a      	ldr	r2, [r7, #4]
 8001c80:	4413      	add	r3, r2
 8001c82:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	2201      	movs	r2, #1
 8001c88:	705a      	strb	r2, [r3, #1]
 8001c8a:	e00e      	b.n	8001caa <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c8c:	78fb      	ldrb	r3, [r7, #3]
 8001c8e:	f003 0207 	and.w	r2, r3, #7
 8001c92:	4613      	mov	r3, r2
 8001c94:	009b      	lsls	r3, r3, #2
 8001c96:	4413      	add	r3, r2
 8001c98:	00db      	lsls	r3, r3, #3
 8001c9a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001c9e:	687a      	ldr	r2, [r7, #4]
 8001ca0:	4413      	add	r3, r2
 8001ca2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001caa:	78fb      	ldrb	r3, [r7, #3]
 8001cac:	f003 0307 	and.w	r3, r3, #7
 8001cb0:	b2da      	uxtb	r2, r3
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001cb6:	883a      	ldrh	r2, [r7, #0]
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	78ba      	ldrb	r2, [r7, #2]
 8001cc0:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	785b      	ldrb	r3, [r3, #1]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d004      	beq.n	8001cd4 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	781b      	ldrb	r3, [r3, #0]
 8001cce:	b29a      	uxth	r2, r3
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001cd4:	78bb      	ldrb	r3, [r7, #2]
 8001cd6:	2b02      	cmp	r3, #2
 8001cd8:	d102      	bne.n	8001ce0 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	2200      	movs	r2, #0
 8001cde:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001ce6:	2b01      	cmp	r3, #1
 8001ce8:	d101      	bne.n	8001cee <HAL_PCD_EP_Open+0xa6>
 8001cea:	2302      	movs	r3, #2
 8001cec:	e00e      	b.n	8001d0c <HAL_PCD_EP_Open+0xc4>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2201      	movs	r2, #1
 8001cf2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	68f9      	ldr	r1, [r7, #12]
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f003 fb9d 	bl	800543c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2200      	movs	r2, #0
 8001d06:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8001d0a:	7afb      	ldrb	r3, [r7, #11]
}
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	3710      	adds	r7, #16
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}

08001d14 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b084      	sub	sp, #16
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
 8001d1c:	460b      	mov	r3, r1
 8001d1e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001d20:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	da0e      	bge.n	8001d46 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d28:	78fb      	ldrb	r3, [r7, #3]
 8001d2a:	f003 0307 	and.w	r3, r3, #7
 8001d2e:	1c5a      	adds	r2, r3, #1
 8001d30:	4613      	mov	r3, r2
 8001d32:	009b      	lsls	r3, r3, #2
 8001d34:	4413      	add	r3, r2
 8001d36:	00db      	lsls	r3, r3, #3
 8001d38:	687a      	ldr	r2, [r7, #4]
 8001d3a:	4413      	add	r3, r2
 8001d3c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	2201      	movs	r2, #1
 8001d42:	705a      	strb	r2, [r3, #1]
 8001d44:	e00e      	b.n	8001d64 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d46:	78fb      	ldrb	r3, [r7, #3]
 8001d48:	f003 0207 	and.w	r2, r3, #7
 8001d4c:	4613      	mov	r3, r2
 8001d4e:	009b      	lsls	r3, r3, #2
 8001d50:	4413      	add	r3, r2
 8001d52:	00db      	lsls	r3, r3, #3
 8001d54:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001d58:	687a      	ldr	r2, [r7, #4]
 8001d5a:	4413      	add	r3, r2
 8001d5c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	2200      	movs	r2, #0
 8001d62:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001d64:	78fb      	ldrb	r3, [r7, #3]
 8001d66:	f003 0307 	and.w	r3, r3, #7
 8001d6a:	b2da      	uxtb	r2, r3
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001d76:	2b01      	cmp	r3, #1
 8001d78:	d101      	bne.n	8001d7e <HAL_PCD_EP_Close+0x6a>
 8001d7a:	2302      	movs	r3, #2
 8001d7c:	e00e      	b.n	8001d9c <HAL_PCD_EP_Close+0x88>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2201      	movs	r2, #1
 8001d82:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	68f9      	ldr	r1, [r7, #12]
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f003 fec3 	bl	8005b18 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2200      	movs	r2, #0
 8001d96:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8001d9a:	2300      	movs	r3, #0
}
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	3710      	adds	r7, #16
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}

08001da4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b086      	sub	sp, #24
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	60f8      	str	r0, [r7, #12]
 8001dac:	607a      	str	r2, [r7, #4]
 8001dae:	603b      	str	r3, [r7, #0]
 8001db0:	460b      	mov	r3, r1
 8001db2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001db4:	7afb      	ldrb	r3, [r7, #11]
 8001db6:	f003 0207 	and.w	r2, r3, #7
 8001dba:	4613      	mov	r3, r2
 8001dbc:	009b      	lsls	r3, r3, #2
 8001dbe:	4413      	add	r3, r2
 8001dc0:	00db      	lsls	r3, r3, #3
 8001dc2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001dc6:	68fa      	ldr	r2, [r7, #12]
 8001dc8:	4413      	add	r3, r2
 8001dca:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001dcc:	697b      	ldr	r3, [r7, #20]
 8001dce:	687a      	ldr	r2, [r7, #4]
 8001dd0:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001dd2:	697b      	ldr	r3, [r7, #20]
 8001dd4:	683a      	ldr	r2, [r7, #0]
 8001dd6:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001dd8:	697b      	ldr	r3, [r7, #20]
 8001dda:	2200      	movs	r2, #0
 8001ddc:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001dde:	697b      	ldr	r3, [r7, #20]
 8001de0:	2200      	movs	r2, #0
 8001de2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001de4:	7afb      	ldrb	r3, [r7, #11]
 8001de6:	f003 0307 	and.w	r3, r3, #7
 8001dea:	b2da      	uxtb	r2, r3
 8001dec:	697b      	ldr	r3, [r7, #20]
 8001dee:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001df0:	7afb      	ldrb	r3, [r7, #11]
 8001df2:	f003 0307 	and.w	r3, r3, #7
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d106      	bne.n	8001e08 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	6979      	ldr	r1, [r7, #20]
 8001e00:	4618      	mov	r0, r3
 8001e02:	f004 f876 	bl	8005ef2 <USB_EPStartXfer>
 8001e06:	e005      	b.n	8001e14 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	6979      	ldr	r1, [r7, #20]
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f004 f86f 	bl	8005ef2 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001e14:	2300      	movs	r3, #0
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	3718      	adds	r7, #24
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}

08001e1e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001e1e:	b480      	push	{r7}
 8001e20:	b083      	sub	sp, #12
 8001e22:	af00      	add	r7, sp, #0
 8001e24:	6078      	str	r0, [r7, #4]
 8001e26:	460b      	mov	r3, r1
 8001e28:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001e2a:	78fb      	ldrb	r3, [r7, #3]
 8001e2c:	f003 0207 	and.w	r2, r3, #7
 8001e30:	6879      	ldr	r1, [r7, #4]
 8001e32:	4613      	mov	r3, r2
 8001e34:	009b      	lsls	r3, r3, #2
 8001e36:	4413      	add	r3, r2
 8001e38:	00db      	lsls	r3, r3, #3
 8001e3a:	440b      	add	r3, r1
 8001e3c:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8001e40:	681b      	ldr	r3, [r3, #0]
}
 8001e42:	4618      	mov	r0, r3
 8001e44:	370c      	adds	r7, #12
 8001e46:	46bd      	mov	sp, r7
 8001e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4c:	4770      	bx	lr

08001e4e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001e4e:	b580      	push	{r7, lr}
 8001e50:	b086      	sub	sp, #24
 8001e52:	af00      	add	r7, sp, #0
 8001e54:	60f8      	str	r0, [r7, #12]
 8001e56:	607a      	str	r2, [r7, #4]
 8001e58:	603b      	str	r3, [r7, #0]
 8001e5a:	460b      	mov	r3, r1
 8001e5c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e5e:	7afb      	ldrb	r3, [r7, #11]
 8001e60:	f003 0307 	and.w	r3, r3, #7
 8001e64:	1c5a      	adds	r2, r3, #1
 8001e66:	4613      	mov	r3, r2
 8001e68:	009b      	lsls	r3, r3, #2
 8001e6a:	4413      	add	r3, r2
 8001e6c:	00db      	lsls	r3, r3, #3
 8001e6e:	68fa      	ldr	r2, [r7, #12]
 8001e70:	4413      	add	r3, r2
 8001e72:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001e74:	697b      	ldr	r3, [r7, #20]
 8001e76:	687a      	ldr	r2, [r7, #4]
 8001e78:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001e7a:	697b      	ldr	r3, [r7, #20]
 8001e7c:	683a      	ldr	r2, [r7, #0]
 8001e7e:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8001e80:	697b      	ldr	r3, [r7, #20]
 8001e82:	2201      	movs	r2, #1
 8001e84:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8001e88:	697b      	ldr	r3, [r7, #20]
 8001e8a:	683a      	ldr	r2, [r7, #0]
 8001e8c:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8001e8e:	697b      	ldr	r3, [r7, #20]
 8001e90:	2200      	movs	r2, #0
 8001e92:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001e94:	697b      	ldr	r3, [r7, #20]
 8001e96:	2201      	movs	r2, #1
 8001e98:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e9a:	7afb      	ldrb	r3, [r7, #11]
 8001e9c:	f003 0307 	and.w	r3, r3, #7
 8001ea0:	b2da      	uxtb	r2, r3
 8001ea2:	697b      	ldr	r3, [r7, #20]
 8001ea4:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001ea6:	7afb      	ldrb	r3, [r7, #11]
 8001ea8:	f003 0307 	and.w	r3, r3, #7
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d106      	bne.n	8001ebe <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	6979      	ldr	r1, [r7, #20]
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f004 f81b 	bl	8005ef2 <USB_EPStartXfer>
 8001ebc:	e005      	b.n	8001eca <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	6979      	ldr	r1, [r7, #20]
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f004 f814 	bl	8005ef2 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001eca:	2300      	movs	r3, #0
}
 8001ecc:	4618      	mov	r0, r3
 8001ece:	3718      	adds	r7, #24
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd80      	pop	{r7, pc}

08001ed4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b084      	sub	sp, #16
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
 8001edc:	460b      	mov	r3, r1
 8001ede:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001ee0:	78fb      	ldrb	r3, [r7, #3]
 8001ee2:	f003 0207 	and.w	r2, r3, #7
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	429a      	cmp	r2, r3
 8001eec:	d901      	bls.n	8001ef2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	e04c      	b.n	8001f8c <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001ef2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	da0e      	bge.n	8001f18 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001efa:	78fb      	ldrb	r3, [r7, #3]
 8001efc:	f003 0307 	and.w	r3, r3, #7
 8001f00:	1c5a      	adds	r2, r3, #1
 8001f02:	4613      	mov	r3, r2
 8001f04:	009b      	lsls	r3, r3, #2
 8001f06:	4413      	add	r3, r2
 8001f08:	00db      	lsls	r3, r3, #3
 8001f0a:	687a      	ldr	r2, [r7, #4]
 8001f0c:	4413      	add	r3, r2
 8001f0e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	2201      	movs	r2, #1
 8001f14:	705a      	strb	r2, [r3, #1]
 8001f16:	e00c      	b.n	8001f32 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001f18:	78fa      	ldrb	r2, [r7, #3]
 8001f1a:	4613      	mov	r3, r2
 8001f1c:	009b      	lsls	r3, r3, #2
 8001f1e:	4413      	add	r3, r2
 8001f20:	00db      	lsls	r3, r3, #3
 8001f22:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001f26:	687a      	ldr	r2, [r7, #4]
 8001f28:	4413      	add	r3, r2
 8001f2a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	2200      	movs	r2, #0
 8001f30:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	2201      	movs	r2, #1
 8001f36:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f38:	78fb      	ldrb	r3, [r7, #3]
 8001f3a:	f003 0307 	and.w	r3, r3, #7
 8001f3e:	b2da      	uxtb	r2, r3
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001f4a:	2b01      	cmp	r3, #1
 8001f4c:	d101      	bne.n	8001f52 <HAL_PCD_EP_SetStall+0x7e>
 8001f4e:	2302      	movs	r3, #2
 8001f50:	e01c      	b.n	8001f8c <HAL_PCD_EP_SetStall+0xb8>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2201      	movs	r2, #1
 8001f56:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	68f9      	ldr	r1, [r7, #12]
 8001f60:	4618      	mov	r0, r3
 8001f62:	f005 f8f5 	bl	8007150 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001f66:	78fb      	ldrb	r3, [r7, #3]
 8001f68:	f003 0307 	and.w	r3, r3, #7
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d108      	bne.n	8001f82 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681a      	ldr	r2, [r3, #0]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8001f7a:	4619      	mov	r1, r3
 8001f7c:	4610      	mov	r0, r2
 8001f7e:	f005 fa21 	bl	80073c4 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2200      	movs	r2, #0
 8001f86:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001f8a:	2300      	movs	r3, #0
}
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	3710      	adds	r7, #16
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd80      	pop	{r7, pc}

08001f94 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b084      	sub	sp, #16
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
 8001f9c:	460b      	mov	r3, r1
 8001f9e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001fa0:	78fb      	ldrb	r3, [r7, #3]
 8001fa2:	f003 020f 	and.w	r2, r3, #15
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	429a      	cmp	r2, r3
 8001fac:	d901      	bls.n	8001fb2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	e040      	b.n	8002034 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001fb2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	da0e      	bge.n	8001fd8 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001fba:	78fb      	ldrb	r3, [r7, #3]
 8001fbc:	f003 0307 	and.w	r3, r3, #7
 8001fc0:	1c5a      	adds	r2, r3, #1
 8001fc2:	4613      	mov	r3, r2
 8001fc4:	009b      	lsls	r3, r3, #2
 8001fc6:	4413      	add	r3, r2
 8001fc8:	00db      	lsls	r3, r3, #3
 8001fca:	687a      	ldr	r2, [r7, #4]
 8001fcc:	4413      	add	r3, r2
 8001fce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	705a      	strb	r2, [r3, #1]
 8001fd6:	e00e      	b.n	8001ff6 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001fd8:	78fb      	ldrb	r3, [r7, #3]
 8001fda:	f003 0207 	and.w	r2, r3, #7
 8001fde:	4613      	mov	r3, r2
 8001fe0:	009b      	lsls	r3, r3, #2
 8001fe2:	4413      	add	r3, r2
 8001fe4:	00db      	lsls	r3, r3, #3
 8001fe6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001fea:	687a      	ldr	r2, [r7, #4]
 8001fec:	4413      	add	r3, r2
 8001fee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001ffc:	78fb      	ldrb	r3, [r7, #3]
 8001ffe:	f003 0307 	and.w	r3, r3, #7
 8002002:	b2da      	uxtb	r2, r3
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800200e:	2b01      	cmp	r3, #1
 8002010:	d101      	bne.n	8002016 <HAL_PCD_EP_ClrStall+0x82>
 8002012:	2302      	movs	r3, #2
 8002014:	e00e      	b.n	8002034 <HAL_PCD_EP_ClrStall+0xa0>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2201      	movs	r2, #1
 800201a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	68f9      	ldr	r1, [r7, #12]
 8002024:	4618      	mov	r0, r3
 8002026:	f005 f8e4 	bl	80071f2 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2200      	movs	r2, #0
 800202e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002032:	2300      	movs	r3, #0
}
 8002034:	4618      	mov	r0, r3
 8002036:	3710      	adds	r7, #16
 8002038:	46bd      	mov	sp, r7
 800203a:	bd80      	pop	{r7, pc}

0800203c <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b08e      	sub	sp, #56	; 0x38
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002044:	e2d1      	b.n	80025ea <PCD_EP_ISR_Handler+0x5ae>
  {
    wIstr = hpcd->Instance->ISTR;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800204e:	85fb      	strh	r3, [r7, #46]	; 0x2e
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002050:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002052:	b2db      	uxtb	r3, r3
 8002054:	f003 030f 	and.w	r3, r3, #15
 8002058:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 800205c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002060:	2b00      	cmp	r3, #0
 8002062:	f040 8152 	bne.w	800230a <PCD_EP_ISR_Handler+0x2ce>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002066:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002068:	f003 0310 	and.w	r3, r3, #16
 800206c:	2b00      	cmp	r3, #0
 800206e:	d150      	bne.n	8002112 <PCD_EP_ISR_Handler+0xd6>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	881b      	ldrh	r3, [r3, #0]
 8002076:	b29b      	uxth	r3, r3
 8002078:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800207c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002080:	81fb      	strh	r3, [r7, #14]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681a      	ldr	r2, [r3, #0]
 8002086:	89fb      	ldrh	r3, [r7, #14]
 8002088:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800208c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002090:	b29b      	uxth	r3, r3
 8002092:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	3328      	adds	r3, #40	; 0x28
 8002098:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80020a2:	b29b      	uxth	r3, r3
 80020a4:	461a      	mov	r2, r3
 80020a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a8:	781b      	ldrb	r3, [r3, #0]
 80020aa:	00db      	lsls	r3, r3, #3
 80020ac:	4413      	add	r3, r2
 80020ae:	687a      	ldr	r2, [r7, #4]
 80020b0:	6812      	ldr	r2, [r2, #0]
 80020b2:	4413      	add	r3, r2
 80020b4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80020b8:	881b      	ldrh	r3, [r3, #0]
 80020ba:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80020be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c0:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80020c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c4:	695a      	ldr	r2, [r3, #20]
 80020c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c8:	69db      	ldr	r3, [r3, #28]
 80020ca:	441a      	add	r2, r3
 80020cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ce:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80020d0:	2100      	movs	r1, #0
 80020d2:	6878      	ldr	r0, [r7, #4]
 80020d4:	f007 f863 	bl	800919e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80020de:	b2db      	uxtb	r3, r3
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	f000 8282 	beq.w	80025ea <PCD_EP_ISR_Handler+0x5ae>
 80020e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e8:	699b      	ldr	r3, [r3, #24]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	f040 827d 	bne.w	80025ea <PCD_EP_ISR_Handler+0x5ae>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80020f6:	b2db      	uxtb	r3, r3
 80020f8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80020fc:	b2da      	uxtb	r2, r3
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	b292      	uxth	r2, r2
 8002104:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2200      	movs	r2, #0
 800210c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002110:	e26b      	b.n	80025ea <PCD_EP_ISR_Handler+0x5ae>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002118:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	881b      	ldrh	r3, [r3, #0]
 8002120:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002122:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002124:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002128:	2b00      	cmp	r3, #0
 800212a:	d032      	beq.n	8002192 <PCD_EP_ISR_Handler+0x156>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002134:	b29b      	uxth	r3, r3
 8002136:	461a      	mov	r2, r3
 8002138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800213a:	781b      	ldrb	r3, [r3, #0]
 800213c:	00db      	lsls	r3, r3, #3
 800213e:	4413      	add	r3, r2
 8002140:	687a      	ldr	r2, [r7, #4]
 8002142:	6812      	ldr	r2, [r2, #0]
 8002144:	4413      	add	r3, r2
 8002146:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800214a:	881b      	ldrh	r3, [r3, #0]
 800214c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002152:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6818      	ldr	r0, [r3, #0]
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 800215e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002160:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002164:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002166:	b29b      	uxth	r3, r3
 8002168:	f005 f979 	bl	800745e <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	881b      	ldrh	r3, [r3, #0]
 8002172:	b29a      	uxth	r2, r3
 8002174:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002178:	4013      	ands	r3, r2
 800217a:	823b      	strh	r3, [r7, #16]
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	8a3a      	ldrh	r2, [r7, #16]
 8002182:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002186:	b292      	uxth	r2, r2
 8002188:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800218a:	6878      	ldr	r0, [r7, #4]
 800218c:	f006 ffda 	bl	8009144 <HAL_PCD_SetupStageCallback>
 8002190:	e22b      	b.n	80025ea <PCD_EP_ISR_Handler+0x5ae>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002192:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8002196:	2b00      	cmp	r3, #0
 8002198:	f280 8227 	bge.w	80025ea <PCD_EP_ISR_Handler+0x5ae>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	881b      	ldrh	r3, [r3, #0]
 80021a2:	b29a      	uxth	r2, r3
 80021a4:	f640 738f 	movw	r3, #3983	; 0xf8f
 80021a8:	4013      	ands	r3, r2
 80021aa:	83bb      	strh	r3, [r7, #28]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	8bba      	ldrh	r2, [r7, #28]
 80021b2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80021b6:	b292      	uxth	r2, r2
 80021b8:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80021c2:	b29b      	uxth	r3, r3
 80021c4:	461a      	mov	r2, r3
 80021c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c8:	781b      	ldrb	r3, [r3, #0]
 80021ca:	00db      	lsls	r3, r3, #3
 80021cc:	4413      	add	r3, r2
 80021ce:	687a      	ldr	r2, [r7, #4]
 80021d0:	6812      	ldr	r2, [r2, #0]
 80021d2:	4413      	add	r3, r2
 80021d4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80021d8:	881b      	ldrh	r3, [r3, #0]
 80021da:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80021de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e0:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80021e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e4:	69db      	ldr	r3, [r3, #28]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d019      	beq.n	800221e <PCD_EP_ISR_Handler+0x1e2>
 80021ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ec:	695b      	ldr	r3, [r3, #20]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d015      	beq.n	800221e <PCD_EP_ISR_Handler+0x1e2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6818      	ldr	r0, [r3, #0]
 80021f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f8:	6959      	ldr	r1, [r3, #20]
 80021fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021fc:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80021fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002200:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002202:	b29b      	uxth	r3, r3
 8002204:	f005 f92b 	bl	800745e <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800220a:	695a      	ldr	r2, [r3, #20]
 800220c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800220e:	69db      	ldr	r3, [r3, #28]
 8002210:	441a      	add	r2, r3
 8002212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002214:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002216:	2100      	movs	r1, #0
 8002218:	6878      	ldr	r0, [r7, #4]
 800221a:	f006 ffa5 	bl	8009168 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	61bb      	str	r3, [r7, #24]
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800222c:	b29b      	uxth	r3, r3
 800222e:	461a      	mov	r2, r3
 8002230:	69bb      	ldr	r3, [r7, #24]
 8002232:	4413      	add	r3, r2
 8002234:	61bb      	str	r3, [r7, #24]
 8002236:	69bb      	ldr	r3, [r7, #24]
 8002238:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800223c:	617b      	str	r3, [r7, #20]
 800223e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002240:	691b      	ldr	r3, [r3, #16]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d112      	bne.n	800226c <PCD_EP_ISR_Handler+0x230>
 8002246:	697b      	ldr	r3, [r7, #20]
 8002248:	881b      	ldrh	r3, [r3, #0]
 800224a:	b29b      	uxth	r3, r3
 800224c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002250:	b29a      	uxth	r2, r3
 8002252:	697b      	ldr	r3, [r7, #20]
 8002254:	801a      	strh	r2, [r3, #0]
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	881b      	ldrh	r3, [r3, #0]
 800225a:	b29b      	uxth	r3, r3
 800225c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002260:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002264:	b29a      	uxth	r2, r3
 8002266:	697b      	ldr	r3, [r7, #20]
 8002268:	801a      	strh	r2, [r3, #0]
 800226a:	e02f      	b.n	80022cc <PCD_EP_ISR_Handler+0x290>
 800226c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800226e:	691b      	ldr	r3, [r3, #16]
 8002270:	2b3e      	cmp	r3, #62	; 0x3e
 8002272:	d813      	bhi.n	800229c <PCD_EP_ISR_Handler+0x260>
 8002274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002276:	691b      	ldr	r3, [r3, #16]
 8002278:	085b      	lsrs	r3, r3, #1
 800227a:	633b      	str	r3, [r7, #48]	; 0x30
 800227c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800227e:	691b      	ldr	r3, [r3, #16]
 8002280:	f003 0301 	and.w	r3, r3, #1
 8002284:	2b00      	cmp	r3, #0
 8002286:	d002      	beq.n	800228e <PCD_EP_ISR_Handler+0x252>
 8002288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800228a:	3301      	adds	r3, #1
 800228c:	633b      	str	r3, [r7, #48]	; 0x30
 800228e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002290:	b29b      	uxth	r3, r3
 8002292:	029b      	lsls	r3, r3, #10
 8002294:	b29a      	uxth	r2, r3
 8002296:	697b      	ldr	r3, [r7, #20]
 8002298:	801a      	strh	r2, [r3, #0]
 800229a:	e017      	b.n	80022cc <PCD_EP_ISR_Handler+0x290>
 800229c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800229e:	691b      	ldr	r3, [r3, #16]
 80022a0:	095b      	lsrs	r3, r3, #5
 80022a2:	633b      	str	r3, [r7, #48]	; 0x30
 80022a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a6:	691b      	ldr	r3, [r3, #16]
 80022a8:	f003 031f 	and.w	r3, r3, #31
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d102      	bne.n	80022b6 <PCD_EP_ISR_Handler+0x27a>
 80022b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022b2:	3b01      	subs	r3, #1
 80022b4:	633b      	str	r3, [r7, #48]	; 0x30
 80022b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022b8:	b29b      	uxth	r3, r3
 80022ba:	029b      	lsls	r3, r3, #10
 80022bc:	b29b      	uxth	r3, r3
 80022be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80022c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80022c6:	b29a      	uxth	r2, r3
 80022c8:	697b      	ldr	r3, [r7, #20]
 80022ca:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	881b      	ldrh	r3, [r3, #0]
 80022d2:	b29b      	uxth	r3, r3
 80022d4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80022d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022dc:	827b      	strh	r3, [r7, #18]
 80022de:	8a7b      	ldrh	r3, [r7, #18]
 80022e0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80022e4:	827b      	strh	r3, [r7, #18]
 80022e6:	8a7b      	ldrh	r3, [r7, #18]
 80022e8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80022ec:	827b      	strh	r3, [r7, #18]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681a      	ldr	r2, [r3, #0]
 80022f2:	8a7b      	ldrh	r3, [r7, #18]
 80022f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80022f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80022fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002300:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002304:	b29b      	uxth	r3, r3
 8002306:	8013      	strh	r3, [r2, #0]
 8002308:	e16f      	b.n	80025ea <PCD_EP_ISR_Handler+0x5ae>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	461a      	mov	r2, r3
 8002310:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002314:	009b      	lsls	r3, r3, #2
 8002316:	4413      	add	r3, r2
 8002318:	881b      	ldrh	r3, [r3, #0]
 800231a:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800231c:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8002320:	2b00      	cmp	r3, #0
 8002322:	f280 80e4 	bge.w	80024ee <PCD_EP_ISR_Handler+0x4b2>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	461a      	mov	r2, r3
 800232c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002330:	009b      	lsls	r3, r3, #2
 8002332:	4413      	add	r3, r2
 8002334:	881b      	ldrh	r3, [r3, #0]
 8002336:	b29a      	uxth	r2, r3
 8002338:	f640 738f 	movw	r3, #3983	; 0xf8f
 800233c:	4013      	ands	r3, r2
 800233e:	853b      	strh	r3, [r7, #40]	; 0x28
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	461a      	mov	r2, r3
 8002346:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800234a:	009b      	lsls	r3, r3, #2
 800234c:	4413      	add	r3, r2
 800234e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002350:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002354:	b292      	uxth	r2, r2
 8002356:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002358:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800235c:	4613      	mov	r3, r2
 800235e:	009b      	lsls	r3, r3, #2
 8002360:	4413      	add	r3, r2
 8002362:	00db      	lsls	r3, r3, #3
 8002364:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002368:	687a      	ldr	r2, [r7, #4]
 800236a:	4413      	add	r3, r2
 800236c:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800236e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002370:	7b1b      	ldrb	r3, [r3, #12]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d120      	bne.n	80023b8 <PCD_EP_ISR_Handler+0x37c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800237e:	b29b      	uxth	r3, r3
 8002380:	461a      	mov	r2, r3
 8002382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002384:	781b      	ldrb	r3, [r3, #0]
 8002386:	00db      	lsls	r3, r3, #3
 8002388:	4413      	add	r3, r2
 800238a:	687a      	ldr	r2, [r7, #4]
 800238c:	6812      	ldr	r2, [r2, #0]
 800238e:	4413      	add	r3, r2
 8002390:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002394:	881b      	ldrh	r3, [r3, #0]
 8002396:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800239a:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 800239c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800239e:	2b00      	cmp	r3, #0
 80023a0:	f000 8083 	beq.w	80024aa <PCD_EP_ISR_Handler+0x46e>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6818      	ldr	r0, [r3, #0]
 80023a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023aa:	6959      	ldr	r1, [r3, #20]
 80023ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ae:	88da      	ldrh	r2, [r3, #6]
 80023b0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80023b2:	f005 f854 	bl	800745e <USB_ReadPMA>
 80023b6:	e078      	b.n	80024aa <PCD_EP_ISR_Handler+0x46e>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80023b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ba:	78db      	ldrb	r3, [r3, #3]
 80023bc:	2b02      	cmp	r3, #2
 80023be:	d108      	bne.n	80023d2 <PCD_EP_ISR_Handler+0x396>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80023c0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80023c2:	461a      	mov	r2, r3
 80023c4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80023c6:	6878      	ldr	r0, [r7, #4]
 80023c8:	f000 f91d 	bl	8002606 <HAL_PCD_EP_DB_Receive>
 80023cc:	4603      	mov	r3, r0
 80023ce:	86fb      	strh	r3, [r7, #54]	; 0x36
 80023d0:	e06b      	b.n	80024aa <PCD_EP_ISR_Handler+0x46e>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	461a      	mov	r2, r3
 80023d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023da:	781b      	ldrb	r3, [r3, #0]
 80023dc:	009b      	lsls	r3, r3, #2
 80023de:	4413      	add	r3, r2
 80023e0:	881b      	ldrh	r3, [r3, #0]
 80023e2:	b29b      	uxth	r3, r3
 80023e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80023e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023ec:	847b      	strh	r3, [r7, #34]	; 0x22
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	461a      	mov	r2, r3
 80023f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f6:	781b      	ldrb	r3, [r3, #0]
 80023f8:	009b      	lsls	r3, r3, #2
 80023fa:	441a      	add	r2, r3
 80023fc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80023fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002402:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002406:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800240a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800240e:	b29b      	uxth	r3, r3
 8002410:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	461a      	mov	r2, r3
 8002418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800241a:	781b      	ldrb	r3, [r3, #0]
 800241c:	009b      	lsls	r3, r3, #2
 800241e:	4413      	add	r3, r2
 8002420:	881b      	ldrh	r3, [r3, #0]
 8002422:	b29b      	uxth	r3, r3
 8002424:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002428:	2b00      	cmp	r3, #0
 800242a:	d01f      	beq.n	800246c <PCD_EP_ISR_Handler+0x430>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002434:	b29b      	uxth	r3, r3
 8002436:	461a      	mov	r2, r3
 8002438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800243a:	781b      	ldrb	r3, [r3, #0]
 800243c:	00db      	lsls	r3, r3, #3
 800243e:	4413      	add	r3, r2
 8002440:	687a      	ldr	r2, [r7, #4]
 8002442:	6812      	ldr	r2, [r2, #0]
 8002444:	4413      	add	r3, r2
 8002446:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800244a:	881b      	ldrh	r3, [r3, #0]
 800244c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002450:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8002452:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002454:	2b00      	cmp	r3, #0
 8002456:	d028      	beq.n	80024aa <PCD_EP_ISR_Handler+0x46e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6818      	ldr	r0, [r3, #0]
 800245c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800245e:	6959      	ldr	r1, [r3, #20]
 8002460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002462:	891a      	ldrh	r2, [r3, #8]
 8002464:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002466:	f004 fffa 	bl	800745e <USB_ReadPMA>
 800246a:	e01e      	b.n	80024aa <PCD_EP_ISR_Handler+0x46e>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002474:	b29b      	uxth	r3, r3
 8002476:	461a      	mov	r2, r3
 8002478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800247a:	781b      	ldrb	r3, [r3, #0]
 800247c:	00db      	lsls	r3, r3, #3
 800247e:	4413      	add	r3, r2
 8002480:	687a      	ldr	r2, [r7, #4]
 8002482:	6812      	ldr	r2, [r2, #0]
 8002484:	4413      	add	r3, r2
 8002486:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800248a:	881b      	ldrh	r3, [r3, #0]
 800248c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002490:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8002492:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002494:	2b00      	cmp	r3, #0
 8002496:	d008      	beq.n	80024aa <PCD_EP_ISR_Handler+0x46e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6818      	ldr	r0, [r3, #0]
 800249c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800249e:	6959      	ldr	r1, [r3, #20]
 80024a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a2:	895a      	ldrh	r2, [r3, #10]
 80024a4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80024a6:	f004 ffda 	bl	800745e <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80024aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ac:	69da      	ldr	r2, [r3, #28]
 80024ae:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80024b0:	441a      	add	r2, r3
 80024b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b4:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80024b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b8:	695a      	ldr	r2, [r3, #20]
 80024ba:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80024bc:	441a      	add	r2, r3
 80024be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c0:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80024c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c4:	699b      	ldr	r3, [r3, #24]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d004      	beq.n	80024d4 <PCD_EP_ISR_Handler+0x498>
 80024ca:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80024cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ce:	691b      	ldr	r3, [r3, #16]
 80024d0:	429a      	cmp	r2, r3
 80024d2:	d206      	bcs.n	80024e2 <PCD_EP_ISR_Handler+0x4a6>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80024d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d6:	781b      	ldrb	r3, [r3, #0]
 80024d8:	4619      	mov	r1, r3
 80024da:	6878      	ldr	r0, [r7, #4]
 80024dc:	f006 fe44 	bl	8009168 <HAL_PCD_DataOutStageCallback>
 80024e0:	e005      	b.n	80024ee <PCD_EP_ISR_Handler+0x4b2>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80024e8:	4618      	mov	r0, r3
 80024ea:	f003 fd02 	bl	8005ef2 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80024ee:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80024f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d078      	beq.n	80025ea <PCD_EP_ISR_Handler+0x5ae>
      {
        ep = &hpcd->IN_ep[epindex];
 80024f8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80024fc:	1c5a      	adds	r2, r3, #1
 80024fe:	4613      	mov	r3, r2
 8002500:	009b      	lsls	r3, r3, #2
 8002502:	4413      	add	r3, r2
 8002504:	00db      	lsls	r3, r3, #3
 8002506:	687a      	ldr	r2, [r7, #4]
 8002508:	4413      	add	r3, r2
 800250a:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	461a      	mov	r2, r3
 8002512:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002516:	009b      	lsls	r3, r3, #2
 8002518:	4413      	add	r3, r2
 800251a:	881b      	ldrh	r3, [r3, #0]
 800251c:	b29b      	uxth	r3, r3
 800251e:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002522:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002526:	843b      	strh	r3, [r7, #32]
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	461a      	mov	r2, r3
 800252e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002532:	009b      	lsls	r3, r3, #2
 8002534:	441a      	add	r2, r3
 8002536:	8c3b      	ldrh	r3, [r7, #32]
 8002538:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800253c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002540:	b29b      	uxth	r3, r3
 8002542:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 8002544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002546:	78db      	ldrb	r3, [r3, #3]
 8002548:	2b02      	cmp	r3, #2
 800254a:	d108      	bne.n	800255e <PCD_EP_ISR_Handler+0x522>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 800254c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800254e:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 8002550:	2b02      	cmp	r3, #2
 8002552:	d144      	bne.n	80025de <PCD_EP_ISR_Handler+0x5a2>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002554:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002556:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800255a:	2b00      	cmp	r3, #0
 800255c:	d13f      	bne.n	80025de <PCD_EP_ISR_Handler+0x5a2>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002566:	b29b      	uxth	r3, r3
 8002568:	461a      	mov	r2, r3
 800256a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800256c:	781b      	ldrb	r3, [r3, #0]
 800256e:	00db      	lsls	r3, r3, #3
 8002570:	4413      	add	r3, r2
 8002572:	687a      	ldr	r2, [r7, #4]
 8002574:	6812      	ldr	r2, [r2, #0]
 8002576:	4413      	add	r3, r2
 8002578:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800257c:	881b      	ldrh	r3, [r3, #0]
 800257e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002582:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8002584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002586:	699a      	ldr	r2, [r3, #24]
 8002588:	8bfb      	ldrh	r3, [r7, #30]
 800258a:	429a      	cmp	r2, r3
 800258c:	d906      	bls.n	800259c <PCD_EP_ISR_Handler+0x560>
          {
            ep->xfer_len -= TxByteNbre;
 800258e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002590:	699a      	ldr	r2, [r3, #24]
 8002592:	8bfb      	ldrh	r3, [r7, #30]
 8002594:	1ad2      	subs	r2, r2, r3
 8002596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002598:	619a      	str	r2, [r3, #24]
 800259a:	e002      	b.n	80025a2 <PCD_EP_ISR_Handler+0x566>
          }
          else
          {
            ep->xfer_len = 0U;
 800259c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800259e:	2200      	movs	r2, #0
 80025a0:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 80025a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a4:	699b      	ldr	r3, [r3, #24]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d106      	bne.n	80025b8 <PCD_EP_ISR_Handler+0x57c>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80025aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ac:	781b      	ldrb	r3, [r3, #0]
 80025ae:	4619      	mov	r1, r3
 80025b0:	6878      	ldr	r0, [r7, #4]
 80025b2:	f006 fdf4 	bl	800919e <HAL_PCD_DataInStageCallback>
 80025b6:	e018      	b.n	80025ea <PCD_EP_ISR_Handler+0x5ae>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 80025b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ba:	695a      	ldr	r2, [r3, #20]
 80025bc:	8bfb      	ldrh	r3, [r7, #30]
 80025be:	441a      	add	r2, r3
 80025c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c2:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 80025c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c6:	69da      	ldr	r2, [r3, #28]
 80025c8:	8bfb      	ldrh	r3, [r7, #30]
 80025ca:	441a      	add	r2, r3
 80025cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ce:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80025d6:	4618      	mov	r0, r3
 80025d8:	f003 fc8b 	bl	8005ef2 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 80025dc:	e005      	b.n	80025ea <PCD_EP_ISR_Handler+0x5ae>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80025de:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80025e0:	461a      	mov	r2, r3
 80025e2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80025e4:	6878      	ldr	r0, [r7, #4]
 80025e6:	f000 f917 	bl	8002818 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80025f2:	b29b      	uxth	r3, r3
 80025f4:	b21b      	sxth	r3, r3
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	f6ff ad25 	blt.w	8002046 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80025fc:	2300      	movs	r3, #0
}
 80025fe:	4618      	mov	r0, r3
 8002600:	3738      	adds	r7, #56	; 0x38
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}

08002606 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002606:	b580      	push	{r7, lr}
 8002608:	b088      	sub	sp, #32
 800260a:	af00      	add	r7, sp, #0
 800260c:	60f8      	str	r0, [r7, #12]
 800260e:	60b9      	str	r1, [r7, #8]
 8002610:	4613      	mov	r3, r2
 8002612:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002614:	88fb      	ldrh	r3, [r7, #6]
 8002616:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800261a:	2b00      	cmp	r3, #0
 800261c:	d07c      	beq.n	8002718 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002626:	b29b      	uxth	r3, r3
 8002628:	461a      	mov	r2, r3
 800262a:	68bb      	ldr	r3, [r7, #8]
 800262c:	781b      	ldrb	r3, [r3, #0]
 800262e:	00db      	lsls	r3, r3, #3
 8002630:	4413      	add	r3, r2
 8002632:	68fa      	ldr	r2, [r7, #12]
 8002634:	6812      	ldr	r2, [r2, #0]
 8002636:	4413      	add	r3, r2
 8002638:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800263c:	881b      	ldrh	r3, [r3, #0]
 800263e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002642:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002644:	68bb      	ldr	r3, [r7, #8]
 8002646:	699a      	ldr	r2, [r3, #24]
 8002648:	8b7b      	ldrh	r3, [r7, #26]
 800264a:	429a      	cmp	r2, r3
 800264c:	d306      	bcc.n	800265c <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 800264e:	68bb      	ldr	r3, [r7, #8]
 8002650:	699a      	ldr	r2, [r3, #24]
 8002652:	8b7b      	ldrh	r3, [r7, #26]
 8002654:	1ad2      	subs	r2, r2, r3
 8002656:	68bb      	ldr	r3, [r7, #8]
 8002658:	619a      	str	r2, [r3, #24]
 800265a:	e002      	b.n	8002662 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 800265c:	68bb      	ldr	r3, [r7, #8]
 800265e:	2200      	movs	r2, #0
 8002660:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002662:	68bb      	ldr	r3, [r7, #8]
 8002664:	699b      	ldr	r3, [r3, #24]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d123      	bne.n	80026b2 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	461a      	mov	r2, r3
 8002670:	68bb      	ldr	r3, [r7, #8]
 8002672:	781b      	ldrb	r3, [r3, #0]
 8002674:	009b      	lsls	r3, r3, #2
 8002676:	4413      	add	r3, r2
 8002678:	881b      	ldrh	r3, [r3, #0]
 800267a:	b29b      	uxth	r3, r3
 800267c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002680:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002684:	833b      	strh	r3, [r7, #24]
 8002686:	8b3b      	ldrh	r3, [r7, #24]
 8002688:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800268c:	833b      	strh	r3, [r7, #24]
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	461a      	mov	r2, r3
 8002694:	68bb      	ldr	r3, [r7, #8]
 8002696:	781b      	ldrb	r3, [r3, #0]
 8002698:	009b      	lsls	r3, r3, #2
 800269a:	441a      	add	r2, r3
 800269c:	8b3b      	ldrh	r3, [r7, #24]
 800269e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80026a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80026a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80026aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80026ae:	b29b      	uxth	r3, r3
 80026b0:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80026b2:	88fb      	ldrh	r3, [r7, #6]
 80026b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d01f      	beq.n	80026fc <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	461a      	mov	r2, r3
 80026c2:	68bb      	ldr	r3, [r7, #8]
 80026c4:	781b      	ldrb	r3, [r3, #0]
 80026c6:	009b      	lsls	r3, r3, #2
 80026c8:	4413      	add	r3, r2
 80026ca:	881b      	ldrh	r3, [r3, #0]
 80026cc:	b29b      	uxth	r3, r3
 80026ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80026d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026d6:	82fb      	strh	r3, [r7, #22]
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	461a      	mov	r2, r3
 80026de:	68bb      	ldr	r3, [r7, #8]
 80026e0:	781b      	ldrb	r3, [r3, #0]
 80026e2:	009b      	lsls	r3, r3, #2
 80026e4:	441a      	add	r2, r3
 80026e6:	8afb      	ldrh	r3, [r7, #22]
 80026e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80026ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80026f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80026f4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80026f8:	b29b      	uxth	r3, r3
 80026fa:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80026fc:	8b7b      	ldrh	r3, [r7, #26]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	f000 8085 	beq.w	800280e <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	6818      	ldr	r0, [r3, #0]
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	6959      	ldr	r1, [r3, #20]
 800270c:	68bb      	ldr	r3, [r7, #8]
 800270e:	891a      	ldrh	r2, [r3, #8]
 8002710:	8b7b      	ldrh	r3, [r7, #26]
 8002712:	f004 fea4 	bl	800745e <USB_ReadPMA>
 8002716:	e07a      	b.n	800280e <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002720:	b29b      	uxth	r3, r3
 8002722:	461a      	mov	r2, r3
 8002724:	68bb      	ldr	r3, [r7, #8]
 8002726:	781b      	ldrb	r3, [r3, #0]
 8002728:	00db      	lsls	r3, r3, #3
 800272a:	4413      	add	r3, r2
 800272c:	68fa      	ldr	r2, [r7, #12]
 800272e:	6812      	ldr	r2, [r2, #0]
 8002730:	4413      	add	r3, r2
 8002732:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002736:	881b      	ldrh	r3, [r3, #0]
 8002738:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800273c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800273e:	68bb      	ldr	r3, [r7, #8]
 8002740:	699a      	ldr	r2, [r3, #24]
 8002742:	8b7b      	ldrh	r3, [r7, #26]
 8002744:	429a      	cmp	r2, r3
 8002746:	d306      	bcc.n	8002756 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8002748:	68bb      	ldr	r3, [r7, #8]
 800274a:	699a      	ldr	r2, [r3, #24]
 800274c:	8b7b      	ldrh	r3, [r7, #26]
 800274e:	1ad2      	subs	r2, r2, r3
 8002750:	68bb      	ldr	r3, [r7, #8]
 8002752:	619a      	str	r2, [r3, #24]
 8002754:	e002      	b.n	800275c <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8002756:	68bb      	ldr	r3, [r7, #8]
 8002758:	2200      	movs	r2, #0
 800275a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800275c:	68bb      	ldr	r3, [r7, #8]
 800275e:	699b      	ldr	r3, [r3, #24]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d123      	bne.n	80027ac <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	461a      	mov	r2, r3
 800276a:	68bb      	ldr	r3, [r7, #8]
 800276c:	781b      	ldrb	r3, [r3, #0]
 800276e:	009b      	lsls	r3, r3, #2
 8002770:	4413      	add	r3, r2
 8002772:	881b      	ldrh	r3, [r3, #0]
 8002774:	b29b      	uxth	r3, r3
 8002776:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800277a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800277e:	83fb      	strh	r3, [r7, #30]
 8002780:	8bfb      	ldrh	r3, [r7, #30]
 8002782:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002786:	83fb      	strh	r3, [r7, #30]
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	461a      	mov	r2, r3
 800278e:	68bb      	ldr	r3, [r7, #8]
 8002790:	781b      	ldrb	r3, [r3, #0]
 8002792:	009b      	lsls	r3, r3, #2
 8002794:	441a      	add	r2, r3
 8002796:	8bfb      	ldrh	r3, [r7, #30]
 8002798:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800279c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80027a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80027a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027a8:	b29b      	uxth	r3, r3
 80027aa:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80027ac:	88fb      	ldrh	r3, [r7, #6]
 80027ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d11f      	bne.n	80027f6 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	461a      	mov	r2, r3
 80027bc:	68bb      	ldr	r3, [r7, #8]
 80027be:	781b      	ldrb	r3, [r3, #0]
 80027c0:	009b      	lsls	r3, r3, #2
 80027c2:	4413      	add	r3, r2
 80027c4:	881b      	ldrh	r3, [r3, #0]
 80027c6:	b29b      	uxth	r3, r3
 80027c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80027cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027d0:	83bb      	strh	r3, [r7, #28]
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	461a      	mov	r2, r3
 80027d8:	68bb      	ldr	r3, [r7, #8]
 80027da:	781b      	ldrb	r3, [r3, #0]
 80027dc:	009b      	lsls	r3, r3, #2
 80027de:	441a      	add	r2, r3
 80027e0:	8bbb      	ldrh	r3, [r7, #28]
 80027e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80027e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80027ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80027ee:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80027f2:	b29b      	uxth	r3, r3
 80027f4:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80027f6:	8b7b      	ldrh	r3, [r7, #26]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d008      	beq.n	800280e <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	6818      	ldr	r0, [r3, #0]
 8002800:	68bb      	ldr	r3, [r7, #8]
 8002802:	6959      	ldr	r1, [r3, #20]
 8002804:	68bb      	ldr	r3, [r7, #8]
 8002806:	895a      	ldrh	r2, [r3, #10]
 8002808:	8b7b      	ldrh	r3, [r7, #26]
 800280a:	f004 fe28 	bl	800745e <USB_ReadPMA>
    }
  }

  return count;
 800280e:	8b7b      	ldrh	r3, [r7, #26]
}
 8002810:	4618      	mov	r0, r3
 8002812:	3720      	adds	r7, #32
 8002814:	46bd      	mov	sp, r7
 8002816:	bd80      	pop	{r7, pc}

08002818 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b092      	sub	sp, #72	; 0x48
 800281c:	af00      	add	r7, sp, #0
 800281e:	60f8      	str	r0, [r7, #12]
 8002820:	60b9      	str	r1, [r7, #8]
 8002822:	4613      	mov	r3, r2
 8002824:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002826:	88fb      	ldrh	r3, [r7, #6]
 8002828:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800282c:	2b00      	cmp	r3, #0
 800282e:	f000 8130 	beq.w	8002a92 <HAL_PCD_EP_DB_Transmit+0x27a>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800283a:	b29b      	uxth	r3, r3
 800283c:	461a      	mov	r2, r3
 800283e:	68bb      	ldr	r3, [r7, #8]
 8002840:	781b      	ldrb	r3, [r3, #0]
 8002842:	00db      	lsls	r3, r3, #3
 8002844:	4413      	add	r3, r2
 8002846:	68fa      	ldr	r2, [r7, #12]
 8002848:	6812      	ldr	r2, [r2, #0]
 800284a:	4413      	add	r3, r2
 800284c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002850:	881b      	ldrh	r3, [r3, #0]
 8002852:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002856:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len > TxByteNbre)
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	699a      	ldr	r2, [r3, #24]
 800285c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800285e:	429a      	cmp	r2, r3
 8002860:	d906      	bls.n	8002870 <HAL_PCD_EP_DB_Transmit+0x58>
    {
      ep->xfer_len -= TxByteNbre;
 8002862:	68bb      	ldr	r3, [r7, #8]
 8002864:	699a      	ldr	r2, [r3, #24]
 8002866:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002868:	1ad2      	subs	r2, r2, r3
 800286a:	68bb      	ldr	r3, [r7, #8]
 800286c:	619a      	str	r2, [r3, #24]
 800286e:	e002      	b.n	8002876 <HAL_PCD_EP_DB_Transmit+0x5e>
    }
    else
    {
      ep->xfer_len = 0U;
 8002870:	68bb      	ldr	r3, [r7, #8]
 8002872:	2200      	movs	r2, #0
 8002874:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002876:	68bb      	ldr	r3, [r7, #8]
 8002878:	699b      	ldr	r3, [r3, #24]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d12c      	bne.n	80028d8 <HAL_PCD_EP_DB_Transmit+0xc0>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800287e:	68bb      	ldr	r3, [r7, #8]
 8002880:	781b      	ldrb	r3, [r3, #0]
 8002882:	4619      	mov	r1, r3
 8002884:	68f8      	ldr	r0, [r7, #12]
 8002886:	f006 fc8a 	bl	800919e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800288a:	88fb      	ldrh	r3, [r7, #6]
 800288c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002890:	2b00      	cmp	r3, #0
 8002892:	f000 822d 	beq.w	8002cf0 <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	461a      	mov	r2, r3
 800289c:	68bb      	ldr	r3, [r7, #8]
 800289e:	781b      	ldrb	r3, [r3, #0]
 80028a0:	009b      	lsls	r3, r3, #2
 80028a2:	4413      	add	r3, r2
 80028a4:	881b      	ldrh	r3, [r3, #0]
 80028a6:	b29b      	uxth	r3, r3
 80028a8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80028ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028b0:	827b      	strh	r3, [r7, #18]
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	461a      	mov	r2, r3
 80028b8:	68bb      	ldr	r3, [r7, #8]
 80028ba:	781b      	ldrb	r3, [r3, #0]
 80028bc:	009b      	lsls	r3, r3, #2
 80028be:	441a      	add	r2, r3
 80028c0:	8a7b      	ldrh	r3, [r7, #18]
 80028c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80028c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80028ca:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80028ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028d2:	b29b      	uxth	r3, r3
 80028d4:	8013      	strh	r3, [r2, #0]
 80028d6:	e20b      	b.n	8002cf0 <HAL_PCD_EP_DB_Transmit+0x4d8>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80028d8:	88fb      	ldrh	r3, [r7, #6]
 80028da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d01f      	beq.n	8002922 <HAL_PCD_EP_DB_Transmit+0x10a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	461a      	mov	r2, r3
 80028e8:	68bb      	ldr	r3, [r7, #8]
 80028ea:	781b      	ldrb	r3, [r3, #0]
 80028ec:	009b      	lsls	r3, r3, #2
 80028ee:	4413      	add	r3, r2
 80028f0:	881b      	ldrh	r3, [r3, #0]
 80028f2:	b29b      	uxth	r3, r3
 80028f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80028f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028fc:	84bb      	strh	r3, [r7, #36]	; 0x24
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	461a      	mov	r2, r3
 8002904:	68bb      	ldr	r3, [r7, #8]
 8002906:	781b      	ldrb	r3, [r3, #0]
 8002908:	009b      	lsls	r3, r3, #2
 800290a:	441a      	add	r2, r3
 800290c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800290e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002912:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002916:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800291a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800291e:	b29b      	uxth	r3, r3
 8002920:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002922:	68bb      	ldr	r3, [r7, #8]
 8002924:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002928:	2b01      	cmp	r3, #1
 800292a:	f040 81e1 	bne.w	8002cf0 <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        ep->xfer_buff += TxByteNbre;
 800292e:	68bb      	ldr	r3, [r7, #8]
 8002930:	695a      	ldr	r2, [r3, #20]
 8002932:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002934:	441a      	add	r2, r3
 8002936:	68bb      	ldr	r3, [r7, #8]
 8002938:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 800293a:	68bb      	ldr	r3, [r7, #8]
 800293c:	69da      	ldr	r2, [r3, #28]
 800293e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002940:	441a      	add	r2, r3
 8002942:	68bb      	ldr	r3, [r7, #8]
 8002944:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002946:	68bb      	ldr	r3, [r7, #8]
 8002948:	6a1a      	ldr	r2, [r3, #32]
 800294a:	68bb      	ldr	r3, [r7, #8]
 800294c:	691b      	ldr	r3, [r3, #16]
 800294e:	429a      	cmp	r2, r3
 8002950:	d309      	bcc.n	8002966 <HAL_PCD_EP_DB_Transmit+0x14e>
        {
          len = ep->maxpacket;
 8002952:	68bb      	ldr	r3, [r7, #8]
 8002954:	691b      	ldr	r3, [r3, #16]
 8002956:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 8002958:	68bb      	ldr	r3, [r7, #8]
 800295a:	6a1a      	ldr	r2, [r3, #32]
 800295c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800295e:	1ad2      	subs	r2, r2, r3
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	621a      	str	r2, [r3, #32]
 8002964:	e014      	b.n	8002990 <HAL_PCD_EP_DB_Transmit+0x178>
        }
        else if (ep->xfer_len_db == 0U)
 8002966:	68bb      	ldr	r3, [r7, #8]
 8002968:	6a1b      	ldr	r3, [r3, #32]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d106      	bne.n	800297c <HAL_PCD_EP_DB_Transmit+0x164>
        {
          len = TxByteNbre;
 800296e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002970:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 8002972:	68bb      	ldr	r3, [r7, #8]
 8002974:	2200      	movs	r2, #0
 8002976:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800297a:	e009      	b.n	8002990 <HAL_PCD_EP_DB_Transmit+0x178>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800297c:	68bb      	ldr	r3, [r7, #8]
 800297e:	2200      	movs	r2, #0
 8002980:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8002984:	68bb      	ldr	r3, [r7, #8]
 8002986:	6a1b      	ldr	r3, [r3, #32]
 8002988:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 800298a:	68bb      	ldr	r3, [r7, #8]
 800298c:	2200      	movs	r2, #0
 800298e:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002990:	68bb      	ldr	r3, [r7, #8]
 8002992:	785b      	ldrb	r3, [r3, #1]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d155      	bne.n	8002a44 <HAL_PCD_EP_DB_Transmit+0x22c>
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	61bb      	str	r3, [r7, #24]
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80029a6:	b29b      	uxth	r3, r3
 80029a8:	461a      	mov	r2, r3
 80029aa:	69bb      	ldr	r3, [r7, #24]
 80029ac:	4413      	add	r3, r2
 80029ae:	61bb      	str	r3, [r7, #24]
 80029b0:	68bb      	ldr	r3, [r7, #8]
 80029b2:	781b      	ldrb	r3, [r3, #0]
 80029b4:	00da      	lsls	r2, r3, #3
 80029b6:	69bb      	ldr	r3, [r7, #24]
 80029b8:	4413      	add	r3, r2
 80029ba:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80029be:	617b      	str	r3, [r7, #20]
 80029c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d112      	bne.n	80029ec <HAL_PCD_EP_DB_Transmit+0x1d4>
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	881b      	ldrh	r3, [r3, #0]
 80029ca:	b29b      	uxth	r3, r3
 80029cc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80029d0:	b29a      	uxth	r2, r3
 80029d2:	697b      	ldr	r3, [r7, #20]
 80029d4:	801a      	strh	r2, [r3, #0]
 80029d6:	697b      	ldr	r3, [r7, #20]
 80029d8:	881b      	ldrh	r3, [r3, #0]
 80029da:	b29b      	uxth	r3, r3
 80029dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80029e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80029e4:	b29a      	uxth	r2, r3
 80029e6:	697b      	ldr	r3, [r7, #20]
 80029e8:	801a      	strh	r2, [r3, #0]
 80029ea:	e047      	b.n	8002a7c <HAL_PCD_EP_DB_Transmit+0x264>
 80029ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029ee:	2b3e      	cmp	r3, #62	; 0x3e
 80029f0:	d811      	bhi.n	8002a16 <HAL_PCD_EP_DB_Transmit+0x1fe>
 80029f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029f4:	085b      	lsrs	r3, r3, #1
 80029f6:	62bb      	str	r3, [r7, #40]	; 0x28
 80029f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029fa:	f003 0301 	and.w	r3, r3, #1
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d002      	beq.n	8002a08 <HAL_PCD_EP_DB_Transmit+0x1f0>
 8002a02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a04:	3301      	adds	r3, #1
 8002a06:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a0a:	b29b      	uxth	r3, r3
 8002a0c:	029b      	lsls	r3, r3, #10
 8002a0e:	b29a      	uxth	r2, r3
 8002a10:	697b      	ldr	r3, [r7, #20]
 8002a12:	801a      	strh	r2, [r3, #0]
 8002a14:	e032      	b.n	8002a7c <HAL_PCD_EP_DB_Transmit+0x264>
 8002a16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a18:	095b      	lsrs	r3, r3, #5
 8002a1a:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a1e:	f003 031f 	and.w	r3, r3, #31
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d102      	bne.n	8002a2c <HAL_PCD_EP_DB_Transmit+0x214>
 8002a26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a28:	3b01      	subs	r3, #1
 8002a2a:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a2e:	b29b      	uxth	r3, r3
 8002a30:	029b      	lsls	r3, r3, #10
 8002a32:	b29b      	uxth	r3, r3
 8002a34:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a38:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a3c:	b29a      	uxth	r2, r3
 8002a3e:	697b      	ldr	r3, [r7, #20]
 8002a40:	801a      	strh	r2, [r3, #0]
 8002a42:	e01b      	b.n	8002a7c <HAL_PCD_EP_DB_Transmit+0x264>
 8002a44:	68bb      	ldr	r3, [r7, #8]
 8002a46:	785b      	ldrb	r3, [r3, #1]
 8002a48:	2b01      	cmp	r3, #1
 8002a4a:	d117      	bne.n	8002a7c <HAL_PCD_EP_DB_Transmit+0x264>
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	623b      	str	r3, [r7, #32]
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a5a:	b29b      	uxth	r3, r3
 8002a5c:	461a      	mov	r2, r3
 8002a5e:	6a3b      	ldr	r3, [r7, #32]
 8002a60:	4413      	add	r3, r2
 8002a62:	623b      	str	r3, [r7, #32]
 8002a64:	68bb      	ldr	r3, [r7, #8]
 8002a66:	781b      	ldrb	r3, [r3, #0]
 8002a68:	00da      	lsls	r2, r3, #3
 8002a6a:	6a3b      	ldr	r3, [r7, #32]
 8002a6c:	4413      	add	r3, r2
 8002a6e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002a72:	61fb      	str	r3, [r7, #28]
 8002a74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a76:	b29a      	uxth	r2, r3
 8002a78:	69fb      	ldr	r3, [r7, #28]
 8002a7a:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	6818      	ldr	r0, [r3, #0]
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	6959      	ldr	r1, [r3, #20]
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	891a      	ldrh	r2, [r3, #8]
 8002a88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a8a:	b29b      	uxth	r3, r3
 8002a8c:	f004 fca6 	bl	80073dc <USB_WritePMA>
 8002a90:	e12e      	b.n	8002cf0 <HAL_PCD_EP_DB_Transmit+0x4d8>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a9a:	b29b      	uxth	r3, r3
 8002a9c:	461a      	mov	r2, r3
 8002a9e:	68bb      	ldr	r3, [r7, #8]
 8002aa0:	781b      	ldrb	r3, [r3, #0]
 8002aa2:	00db      	lsls	r3, r3, #3
 8002aa4:	4413      	add	r3, r2
 8002aa6:	68fa      	ldr	r2, [r7, #12]
 8002aa8:	6812      	ldr	r2, [r2, #0]
 8002aaa:	4413      	add	r3, r2
 8002aac:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002ab0:	881b      	ldrh	r3, [r3, #0]
 8002ab2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ab6:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len >= TxByteNbre)
 8002ab8:	68bb      	ldr	r3, [r7, #8]
 8002aba:	699a      	ldr	r2, [r3, #24]
 8002abc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002abe:	429a      	cmp	r2, r3
 8002ac0:	d306      	bcc.n	8002ad0 <HAL_PCD_EP_DB_Transmit+0x2b8>
    {
      ep->xfer_len -= TxByteNbre;
 8002ac2:	68bb      	ldr	r3, [r7, #8]
 8002ac4:	699a      	ldr	r2, [r3, #24]
 8002ac6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002ac8:	1ad2      	subs	r2, r2, r3
 8002aca:	68bb      	ldr	r3, [r7, #8]
 8002acc:	619a      	str	r2, [r3, #24]
 8002ace:	e002      	b.n	8002ad6 <HAL_PCD_EP_DB_Transmit+0x2be>
    }
    else
    {
      ep->xfer_len = 0U;
 8002ad0:	68bb      	ldr	r3, [r7, #8]
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002ad6:	68bb      	ldr	r3, [r7, #8]
 8002ad8:	699b      	ldr	r3, [r3, #24]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d12c      	bne.n	8002b38 <HAL_PCD_EP_DB_Transmit+0x320>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002ade:	68bb      	ldr	r3, [r7, #8]
 8002ae0:	781b      	ldrb	r3, [r3, #0]
 8002ae2:	4619      	mov	r1, r3
 8002ae4:	68f8      	ldr	r0, [r7, #12]
 8002ae6:	f006 fb5a 	bl	800919e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002aea:	88fb      	ldrh	r3, [r7, #6]
 8002aec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	f040 80fd 	bne.w	8002cf0 <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	461a      	mov	r2, r3
 8002afc:	68bb      	ldr	r3, [r7, #8]
 8002afe:	781b      	ldrb	r3, [r3, #0]
 8002b00:	009b      	lsls	r3, r3, #2
 8002b02:	4413      	add	r3, r2
 8002b04:	881b      	ldrh	r3, [r3, #0]
 8002b06:	b29b      	uxth	r3, r3
 8002b08:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b10:	84fb      	strh	r3, [r7, #38]	; 0x26
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	461a      	mov	r2, r3
 8002b18:	68bb      	ldr	r3, [r7, #8]
 8002b1a:	781b      	ldrb	r3, [r3, #0]
 8002b1c:	009b      	lsls	r3, r3, #2
 8002b1e:	441a      	add	r2, r3
 8002b20:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002b22:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002b26:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002b2a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002b2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b32:	b29b      	uxth	r3, r3
 8002b34:	8013      	strh	r3, [r2, #0]
 8002b36:	e0db      	b.n	8002cf0 <HAL_PCD_EP_DB_Transmit+0x4d8>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002b38:	88fb      	ldrh	r3, [r7, #6]
 8002b3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d11f      	bne.n	8002b82 <HAL_PCD_EP_DB_Transmit+0x36a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	461a      	mov	r2, r3
 8002b48:	68bb      	ldr	r3, [r7, #8]
 8002b4a:	781b      	ldrb	r3, [r3, #0]
 8002b4c:	009b      	lsls	r3, r3, #2
 8002b4e:	4413      	add	r3, r2
 8002b50:	881b      	ldrh	r3, [r3, #0]
 8002b52:	b29b      	uxth	r3, r3
 8002b54:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b5c:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	461a      	mov	r2, r3
 8002b64:	68bb      	ldr	r3, [r7, #8]
 8002b66:	781b      	ldrb	r3, [r3, #0]
 8002b68:	009b      	lsls	r3, r3, #2
 8002b6a:	441a      	add	r2, r3
 8002b6c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8002b6e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002b72:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002b76:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002b7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b7e:	b29b      	uxth	r3, r3
 8002b80:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002b82:	68bb      	ldr	r3, [r7, #8]
 8002b84:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002b88:	2b01      	cmp	r3, #1
 8002b8a:	f040 80b1 	bne.w	8002cf0 <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        ep->xfer_buff += TxByteNbre;
 8002b8e:	68bb      	ldr	r3, [r7, #8]
 8002b90:	695a      	ldr	r2, [r3, #20]
 8002b92:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002b94:	441a      	add	r2, r3
 8002b96:	68bb      	ldr	r3, [r7, #8]
 8002b98:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002b9a:	68bb      	ldr	r3, [r7, #8]
 8002b9c:	69da      	ldr	r2, [r3, #28]
 8002b9e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002ba0:	441a      	add	r2, r3
 8002ba2:	68bb      	ldr	r3, [r7, #8]
 8002ba4:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002ba6:	68bb      	ldr	r3, [r7, #8]
 8002ba8:	6a1a      	ldr	r2, [r3, #32]
 8002baa:	68bb      	ldr	r3, [r7, #8]
 8002bac:	691b      	ldr	r3, [r3, #16]
 8002bae:	429a      	cmp	r2, r3
 8002bb0:	d309      	bcc.n	8002bc6 <HAL_PCD_EP_DB_Transmit+0x3ae>
        {
          len = ep->maxpacket;
 8002bb2:	68bb      	ldr	r3, [r7, #8]
 8002bb4:	691b      	ldr	r3, [r3, #16]
 8002bb6:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	6a1a      	ldr	r2, [r3, #32]
 8002bbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bbe:	1ad2      	subs	r2, r2, r3
 8002bc0:	68bb      	ldr	r3, [r7, #8]
 8002bc2:	621a      	str	r2, [r3, #32]
 8002bc4:	e014      	b.n	8002bf0 <HAL_PCD_EP_DB_Transmit+0x3d8>
        }
        else if (ep->xfer_len_db == 0U)
 8002bc6:	68bb      	ldr	r3, [r7, #8]
 8002bc8:	6a1b      	ldr	r3, [r3, #32]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d106      	bne.n	8002bdc <HAL_PCD_EP_DB_Transmit+0x3c4>
        {
          len = TxByteNbre;
 8002bce:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002bd0:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 8002bd2:	68bb      	ldr	r3, [r7, #8]
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002bda:	e009      	b.n	8002bf0 <HAL_PCD_EP_DB_Transmit+0x3d8>
        }
        else
        {
          len = ep->xfer_len_db;
 8002bdc:	68bb      	ldr	r3, [r7, #8]
 8002bde:	6a1b      	ldr	r3, [r3, #32]
 8002be0:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 8002be2:	68bb      	ldr	r3, [r7, #8]
 8002be4:	2200      	movs	r2, #0
 8002be6:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002be8:	68bb      	ldr	r3, [r7, #8]
 8002bea:	2200      	movs	r2, #0
 8002bec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	637b      	str	r3, [r7, #52]	; 0x34
 8002bf6:	68bb      	ldr	r3, [r7, #8]
 8002bf8:	785b      	ldrb	r3, [r3, #1]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d155      	bne.n	8002caa <HAL_PCD_EP_DB_Transmit+0x492>
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	647b      	str	r3, [r7, #68]	; 0x44
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c0c:	b29b      	uxth	r3, r3
 8002c0e:	461a      	mov	r2, r3
 8002c10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c12:	4413      	add	r3, r2
 8002c14:	647b      	str	r3, [r7, #68]	; 0x44
 8002c16:	68bb      	ldr	r3, [r7, #8]
 8002c18:	781b      	ldrb	r3, [r3, #0]
 8002c1a:	00da      	lsls	r2, r3, #3
 8002c1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c1e:	4413      	add	r3, r2
 8002c20:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002c24:	643b      	str	r3, [r7, #64]	; 0x40
 8002c26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d112      	bne.n	8002c52 <HAL_PCD_EP_DB_Transmit+0x43a>
 8002c2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c2e:	881b      	ldrh	r3, [r3, #0]
 8002c30:	b29b      	uxth	r3, r3
 8002c32:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002c36:	b29a      	uxth	r2, r3
 8002c38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c3a:	801a      	strh	r2, [r3, #0]
 8002c3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c3e:	881b      	ldrh	r3, [r3, #0]
 8002c40:	b29b      	uxth	r3, r3
 8002c42:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002c46:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002c4a:	b29a      	uxth	r2, r3
 8002c4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c4e:	801a      	strh	r2, [r3, #0]
 8002c50:	e044      	b.n	8002cdc <HAL_PCD_EP_DB_Transmit+0x4c4>
 8002c52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c54:	2b3e      	cmp	r3, #62	; 0x3e
 8002c56:	d811      	bhi.n	8002c7c <HAL_PCD_EP_DB_Transmit+0x464>
 8002c58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c5a:	085b      	lsrs	r3, r3, #1
 8002c5c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c60:	f003 0301 	and.w	r3, r3, #1
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d002      	beq.n	8002c6e <HAL_PCD_EP_DB_Transmit+0x456>
 8002c68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c6a:	3301      	adds	r3, #1
 8002c6c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c70:	b29b      	uxth	r3, r3
 8002c72:	029b      	lsls	r3, r3, #10
 8002c74:	b29a      	uxth	r2, r3
 8002c76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c78:	801a      	strh	r2, [r3, #0]
 8002c7a:	e02f      	b.n	8002cdc <HAL_PCD_EP_DB_Transmit+0x4c4>
 8002c7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c7e:	095b      	lsrs	r3, r3, #5
 8002c80:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c84:	f003 031f 	and.w	r3, r3, #31
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d102      	bne.n	8002c92 <HAL_PCD_EP_DB_Transmit+0x47a>
 8002c8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c8e:	3b01      	subs	r3, #1
 8002c90:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c94:	b29b      	uxth	r3, r3
 8002c96:	029b      	lsls	r3, r3, #10
 8002c98:	b29b      	uxth	r3, r3
 8002c9a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002c9e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002ca2:	b29a      	uxth	r2, r3
 8002ca4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ca6:	801a      	strh	r2, [r3, #0]
 8002ca8:	e018      	b.n	8002cdc <HAL_PCD_EP_DB_Transmit+0x4c4>
 8002caa:	68bb      	ldr	r3, [r7, #8]
 8002cac:	785b      	ldrb	r3, [r3, #1]
 8002cae:	2b01      	cmp	r3, #1
 8002cb0:	d114      	bne.n	8002cdc <HAL_PCD_EP_DB_Transmit+0x4c4>
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002cba:	b29b      	uxth	r3, r3
 8002cbc:	461a      	mov	r2, r3
 8002cbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cc0:	4413      	add	r3, r2
 8002cc2:	637b      	str	r3, [r7, #52]	; 0x34
 8002cc4:	68bb      	ldr	r3, [r7, #8]
 8002cc6:	781b      	ldrb	r3, [r3, #0]
 8002cc8:	00da      	lsls	r2, r3, #3
 8002cca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ccc:	4413      	add	r3, r2
 8002cce:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002cd2:	633b      	str	r3, [r7, #48]	; 0x30
 8002cd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cd6:	b29a      	uxth	r2, r3
 8002cd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cda:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	6818      	ldr	r0, [r3, #0]
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	6959      	ldr	r1, [r3, #20]
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	895a      	ldrh	r2, [r3, #10]
 8002ce8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cea:	b29b      	uxth	r3, r3
 8002cec:	f004 fb76 	bl	80073dc <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	461a      	mov	r2, r3
 8002cf6:	68bb      	ldr	r3, [r7, #8]
 8002cf8:	781b      	ldrb	r3, [r3, #0]
 8002cfa:	009b      	lsls	r3, r3, #2
 8002cfc:	4413      	add	r3, r2
 8002cfe:	881b      	ldrh	r3, [r3, #0]
 8002d00:	b29b      	uxth	r3, r3
 8002d02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d06:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002d0a:	823b      	strh	r3, [r7, #16]
 8002d0c:	8a3b      	ldrh	r3, [r7, #16]
 8002d0e:	f083 0310 	eor.w	r3, r3, #16
 8002d12:	823b      	strh	r3, [r7, #16]
 8002d14:	8a3b      	ldrh	r3, [r7, #16]
 8002d16:	f083 0320 	eor.w	r3, r3, #32
 8002d1a:	823b      	strh	r3, [r7, #16]
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	461a      	mov	r2, r3
 8002d22:	68bb      	ldr	r3, [r7, #8]
 8002d24:	781b      	ldrb	r3, [r3, #0]
 8002d26:	009b      	lsls	r3, r3, #2
 8002d28:	441a      	add	r2, r3
 8002d2a:	8a3b      	ldrh	r3, [r7, #16]
 8002d2c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002d30:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002d34:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d3c:	b29b      	uxth	r3, r3
 8002d3e:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002d40:	2300      	movs	r3, #0
}
 8002d42:	4618      	mov	r0, r3
 8002d44:	3748      	adds	r7, #72	; 0x48
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bd80      	pop	{r7, pc}

08002d4a <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 8002d4a:	b480      	push	{r7}
 8002d4c:	b087      	sub	sp, #28
 8002d4e:	af00      	add	r7, sp, #0
 8002d50:	60f8      	str	r0, [r7, #12]
 8002d52:	607b      	str	r3, [r7, #4]
 8002d54:	460b      	mov	r3, r1
 8002d56:	817b      	strh	r3, [r7, #10]
 8002d58:	4613      	mov	r3, r2
 8002d5a:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002d5c:	897b      	ldrh	r3, [r7, #10]
 8002d5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d62:	b29b      	uxth	r3, r3
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d00b      	beq.n	8002d80 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d68:	897b      	ldrh	r3, [r7, #10]
 8002d6a:	f003 0307 	and.w	r3, r3, #7
 8002d6e:	1c5a      	adds	r2, r3, #1
 8002d70:	4613      	mov	r3, r2
 8002d72:	009b      	lsls	r3, r3, #2
 8002d74:	4413      	add	r3, r2
 8002d76:	00db      	lsls	r3, r3, #3
 8002d78:	68fa      	ldr	r2, [r7, #12]
 8002d7a:	4413      	add	r3, r2
 8002d7c:	617b      	str	r3, [r7, #20]
 8002d7e:	e009      	b.n	8002d94 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002d80:	897a      	ldrh	r2, [r7, #10]
 8002d82:	4613      	mov	r3, r2
 8002d84:	009b      	lsls	r3, r3, #2
 8002d86:	4413      	add	r3, r2
 8002d88:	00db      	lsls	r3, r3, #3
 8002d8a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002d8e:	68fa      	ldr	r2, [r7, #12]
 8002d90:	4413      	add	r3, r2
 8002d92:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002d94:	893b      	ldrh	r3, [r7, #8]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d107      	bne.n	8002daa <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002d9a:	697b      	ldr	r3, [r7, #20]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	b29a      	uxth	r2, r3
 8002da4:	697b      	ldr	r3, [r7, #20]
 8002da6:	80da      	strh	r2, [r3, #6]
 8002da8:	e00b      	b.n	8002dc2 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002daa:	697b      	ldr	r3, [r7, #20]
 8002dac:	2201      	movs	r2, #1
 8002dae:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	b29a      	uxth	r2, r3
 8002db4:	697b      	ldr	r3, [r7, #20]
 8002db6:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	0c1b      	lsrs	r3, r3, #16
 8002dbc:	b29a      	uxth	r2, r3
 8002dbe:	697b      	ldr	r3, [r7, #20]
 8002dc0:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8002dc2:	2300      	movs	r3, #0
}
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	371c      	adds	r7, #28
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dce:	4770      	bx	lr

08002dd0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	b085      	sub	sp, #20
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2201      	movs	r2, #1
 8002de2:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2200      	movs	r2, #0
 8002dea:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002df4:	b29b      	uxth	r3, r3
 8002df6:	f043 0301 	orr.w	r3, r3, #1
 8002dfa:	b29a      	uxth	r2, r3
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002e08:	b29b      	uxth	r3, r3
 8002e0a:	f043 0302 	orr.w	r3, r3, #2
 8002e0e:	b29a      	uxth	r2, r3
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8002e16:	2300      	movs	r3, #0
}
 8002e18:	4618      	mov	r0, r3
 8002e1a:	3714      	adds	r7, #20
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e22:	4770      	bx	lr

08002e24 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002e24:	b480      	push	{r7}
 8002e26:	b085      	sub	sp, #20
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d141      	bne.n	8002eb6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002e32:	4b4b      	ldr	r3, [pc, #300]	; (8002f60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002e3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e3e:	d131      	bne.n	8002ea4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002e40:	4b47      	ldr	r3, [pc, #284]	; (8002f60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e42:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002e46:	4a46      	ldr	r2, [pc, #280]	; (8002f60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002e4c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002e50:	4b43      	ldr	r3, [pc, #268]	; (8002f60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002e58:	4a41      	ldr	r2, [pc, #260]	; (8002f60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e5a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e5e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002e60:	4b40      	ldr	r3, [pc, #256]	; (8002f64 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	2232      	movs	r2, #50	; 0x32
 8002e66:	fb02 f303 	mul.w	r3, r2, r3
 8002e6a:	4a3f      	ldr	r2, [pc, #252]	; (8002f68 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002e6c:	fba2 2303 	umull	r2, r3, r2, r3
 8002e70:	0c9b      	lsrs	r3, r3, #18
 8002e72:	3301      	adds	r3, #1
 8002e74:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002e76:	e002      	b.n	8002e7e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	3b01      	subs	r3, #1
 8002e7c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002e7e:	4b38      	ldr	r3, [pc, #224]	; (8002f60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e80:	695b      	ldr	r3, [r3, #20]
 8002e82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e8a:	d102      	bne.n	8002e92 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d1f2      	bne.n	8002e78 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002e92:	4b33      	ldr	r3, [pc, #204]	; (8002f60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e94:	695b      	ldr	r3, [r3, #20]
 8002e96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e9e:	d158      	bne.n	8002f52 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002ea0:	2303      	movs	r3, #3
 8002ea2:	e057      	b.n	8002f54 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002ea4:	4b2e      	ldr	r3, [pc, #184]	; (8002f60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ea6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002eaa:	4a2d      	ldr	r2, [pc, #180]	; (8002f60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002eac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002eb0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002eb4:	e04d      	b.n	8002f52 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ebc:	d141      	bne.n	8002f42 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002ebe:	4b28      	ldr	r3, [pc, #160]	; (8002f60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002ec6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002eca:	d131      	bne.n	8002f30 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002ecc:	4b24      	ldr	r3, [pc, #144]	; (8002f60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ece:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ed2:	4a23      	ldr	r2, [pc, #140]	; (8002f60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ed4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ed8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002edc:	4b20      	ldr	r3, [pc, #128]	; (8002f60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002ee4:	4a1e      	ldr	r2, [pc, #120]	; (8002f60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ee6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002eea:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002eec:	4b1d      	ldr	r3, [pc, #116]	; (8002f64 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	2232      	movs	r2, #50	; 0x32
 8002ef2:	fb02 f303 	mul.w	r3, r2, r3
 8002ef6:	4a1c      	ldr	r2, [pc, #112]	; (8002f68 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002ef8:	fba2 2303 	umull	r2, r3, r2, r3
 8002efc:	0c9b      	lsrs	r3, r3, #18
 8002efe:	3301      	adds	r3, #1
 8002f00:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002f02:	e002      	b.n	8002f0a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	3b01      	subs	r3, #1
 8002f08:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002f0a:	4b15      	ldr	r3, [pc, #84]	; (8002f60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f0c:	695b      	ldr	r3, [r3, #20]
 8002f0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f16:	d102      	bne.n	8002f1e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d1f2      	bne.n	8002f04 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002f1e:	4b10      	ldr	r3, [pc, #64]	; (8002f60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f20:	695b      	ldr	r3, [r3, #20]
 8002f22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f2a:	d112      	bne.n	8002f52 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002f2c:	2303      	movs	r3, #3
 8002f2e:	e011      	b.n	8002f54 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002f30:	4b0b      	ldr	r3, [pc, #44]	; (8002f60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f32:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f36:	4a0a      	ldr	r2, [pc, #40]	; (8002f60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f3c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002f40:	e007      	b.n	8002f52 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002f42:	4b07      	ldr	r3, [pc, #28]	; (8002f60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002f4a:	4a05      	ldr	r2, [pc, #20]	; (8002f60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f4c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002f50:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002f52:	2300      	movs	r3, #0
}
 8002f54:	4618      	mov	r0, r3
 8002f56:	3714      	adds	r7, #20
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5e:	4770      	bx	lr
 8002f60:	40007000 	.word	0x40007000
 8002f64:	20000000 	.word	0x20000000
 8002f68:	431bde83 	.word	0x431bde83

08002f6c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002f70:	4b05      	ldr	r3, [pc, #20]	; (8002f88 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002f72:	689b      	ldr	r3, [r3, #8]
 8002f74:	4a04      	ldr	r2, [pc, #16]	; (8002f88 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002f76:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f7a:	6093      	str	r3, [r2, #8]
}
 8002f7c:	bf00      	nop
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f84:	4770      	bx	lr
 8002f86:	bf00      	nop
 8002f88:	40007000 	.word	0x40007000

08002f8c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b088      	sub	sp, #32
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d101      	bne.n	8002f9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	e308      	b.n	80035b0 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f003 0301 	and.w	r3, r3, #1
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d075      	beq.n	8003096 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002faa:	4ba3      	ldr	r3, [pc, #652]	; (8003238 <HAL_RCC_OscConfig+0x2ac>)
 8002fac:	689b      	ldr	r3, [r3, #8]
 8002fae:	f003 030c 	and.w	r3, r3, #12
 8002fb2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002fb4:	4ba0      	ldr	r3, [pc, #640]	; (8003238 <HAL_RCC_OscConfig+0x2ac>)
 8002fb6:	68db      	ldr	r3, [r3, #12]
 8002fb8:	f003 0303 	and.w	r3, r3, #3
 8002fbc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002fbe:	69bb      	ldr	r3, [r7, #24]
 8002fc0:	2b0c      	cmp	r3, #12
 8002fc2:	d102      	bne.n	8002fca <HAL_RCC_OscConfig+0x3e>
 8002fc4:	697b      	ldr	r3, [r7, #20]
 8002fc6:	2b03      	cmp	r3, #3
 8002fc8:	d002      	beq.n	8002fd0 <HAL_RCC_OscConfig+0x44>
 8002fca:	69bb      	ldr	r3, [r7, #24]
 8002fcc:	2b08      	cmp	r3, #8
 8002fce:	d10b      	bne.n	8002fe8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fd0:	4b99      	ldr	r3, [pc, #612]	; (8003238 <HAL_RCC_OscConfig+0x2ac>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d05b      	beq.n	8003094 <HAL_RCC_OscConfig+0x108>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d157      	bne.n	8003094 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	e2e3      	b.n	80035b0 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ff0:	d106      	bne.n	8003000 <HAL_RCC_OscConfig+0x74>
 8002ff2:	4b91      	ldr	r3, [pc, #580]	; (8003238 <HAL_RCC_OscConfig+0x2ac>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a90      	ldr	r2, [pc, #576]	; (8003238 <HAL_RCC_OscConfig+0x2ac>)
 8002ff8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ffc:	6013      	str	r3, [r2, #0]
 8002ffe:	e01d      	b.n	800303c <HAL_RCC_OscConfig+0xb0>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003008:	d10c      	bne.n	8003024 <HAL_RCC_OscConfig+0x98>
 800300a:	4b8b      	ldr	r3, [pc, #556]	; (8003238 <HAL_RCC_OscConfig+0x2ac>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4a8a      	ldr	r2, [pc, #552]	; (8003238 <HAL_RCC_OscConfig+0x2ac>)
 8003010:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003014:	6013      	str	r3, [r2, #0]
 8003016:	4b88      	ldr	r3, [pc, #544]	; (8003238 <HAL_RCC_OscConfig+0x2ac>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4a87      	ldr	r2, [pc, #540]	; (8003238 <HAL_RCC_OscConfig+0x2ac>)
 800301c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003020:	6013      	str	r3, [r2, #0]
 8003022:	e00b      	b.n	800303c <HAL_RCC_OscConfig+0xb0>
 8003024:	4b84      	ldr	r3, [pc, #528]	; (8003238 <HAL_RCC_OscConfig+0x2ac>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a83      	ldr	r2, [pc, #524]	; (8003238 <HAL_RCC_OscConfig+0x2ac>)
 800302a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800302e:	6013      	str	r3, [r2, #0]
 8003030:	4b81      	ldr	r3, [pc, #516]	; (8003238 <HAL_RCC_OscConfig+0x2ac>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4a80      	ldr	r2, [pc, #512]	; (8003238 <HAL_RCC_OscConfig+0x2ac>)
 8003036:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800303a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d013      	beq.n	800306c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003044:	f7fe f8b6 	bl	80011b4 <HAL_GetTick>
 8003048:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800304a:	e008      	b.n	800305e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800304c:	f7fe f8b2 	bl	80011b4 <HAL_GetTick>
 8003050:	4602      	mov	r2, r0
 8003052:	693b      	ldr	r3, [r7, #16]
 8003054:	1ad3      	subs	r3, r2, r3
 8003056:	2b64      	cmp	r3, #100	; 0x64
 8003058:	d901      	bls.n	800305e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800305a:	2303      	movs	r3, #3
 800305c:	e2a8      	b.n	80035b0 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800305e:	4b76      	ldr	r3, [pc, #472]	; (8003238 <HAL_RCC_OscConfig+0x2ac>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003066:	2b00      	cmp	r3, #0
 8003068:	d0f0      	beq.n	800304c <HAL_RCC_OscConfig+0xc0>
 800306a:	e014      	b.n	8003096 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800306c:	f7fe f8a2 	bl	80011b4 <HAL_GetTick>
 8003070:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003072:	e008      	b.n	8003086 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003074:	f7fe f89e 	bl	80011b4 <HAL_GetTick>
 8003078:	4602      	mov	r2, r0
 800307a:	693b      	ldr	r3, [r7, #16]
 800307c:	1ad3      	subs	r3, r2, r3
 800307e:	2b64      	cmp	r3, #100	; 0x64
 8003080:	d901      	bls.n	8003086 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003082:	2303      	movs	r3, #3
 8003084:	e294      	b.n	80035b0 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003086:	4b6c      	ldr	r3, [pc, #432]	; (8003238 <HAL_RCC_OscConfig+0x2ac>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800308e:	2b00      	cmp	r3, #0
 8003090:	d1f0      	bne.n	8003074 <HAL_RCC_OscConfig+0xe8>
 8003092:	e000      	b.n	8003096 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003094:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f003 0302 	and.w	r3, r3, #2
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d075      	beq.n	800318e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80030a2:	4b65      	ldr	r3, [pc, #404]	; (8003238 <HAL_RCC_OscConfig+0x2ac>)
 80030a4:	689b      	ldr	r3, [r3, #8]
 80030a6:	f003 030c 	and.w	r3, r3, #12
 80030aa:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80030ac:	4b62      	ldr	r3, [pc, #392]	; (8003238 <HAL_RCC_OscConfig+0x2ac>)
 80030ae:	68db      	ldr	r3, [r3, #12]
 80030b0:	f003 0303 	and.w	r3, r3, #3
 80030b4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80030b6:	69bb      	ldr	r3, [r7, #24]
 80030b8:	2b0c      	cmp	r3, #12
 80030ba:	d102      	bne.n	80030c2 <HAL_RCC_OscConfig+0x136>
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	2b02      	cmp	r3, #2
 80030c0:	d002      	beq.n	80030c8 <HAL_RCC_OscConfig+0x13c>
 80030c2:	69bb      	ldr	r3, [r7, #24]
 80030c4:	2b04      	cmp	r3, #4
 80030c6:	d11f      	bne.n	8003108 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80030c8:	4b5b      	ldr	r3, [pc, #364]	; (8003238 <HAL_RCC_OscConfig+0x2ac>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d005      	beq.n	80030e0 <HAL_RCC_OscConfig+0x154>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	68db      	ldr	r3, [r3, #12]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d101      	bne.n	80030e0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80030dc:	2301      	movs	r3, #1
 80030de:	e267      	b.n	80035b0 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030e0:	4b55      	ldr	r3, [pc, #340]	; (8003238 <HAL_RCC_OscConfig+0x2ac>)
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	691b      	ldr	r3, [r3, #16]
 80030ec:	061b      	lsls	r3, r3, #24
 80030ee:	4952      	ldr	r1, [pc, #328]	; (8003238 <HAL_RCC_OscConfig+0x2ac>)
 80030f0:	4313      	orrs	r3, r2
 80030f2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80030f4:	4b51      	ldr	r3, [pc, #324]	; (800323c <HAL_RCC_OscConfig+0x2b0>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4618      	mov	r0, r3
 80030fa:	f7fe f80f 	bl	800111c <HAL_InitTick>
 80030fe:	4603      	mov	r3, r0
 8003100:	2b00      	cmp	r3, #0
 8003102:	d043      	beq.n	800318c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003104:	2301      	movs	r3, #1
 8003106:	e253      	b.n	80035b0 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	68db      	ldr	r3, [r3, #12]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d023      	beq.n	8003158 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003110:	4b49      	ldr	r3, [pc, #292]	; (8003238 <HAL_RCC_OscConfig+0x2ac>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4a48      	ldr	r2, [pc, #288]	; (8003238 <HAL_RCC_OscConfig+0x2ac>)
 8003116:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800311a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800311c:	f7fe f84a 	bl	80011b4 <HAL_GetTick>
 8003120:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003122:	e008      	b.n	8003136 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003124:	f7fe f846 	bl	80011b4 <HAL_GetTick>
 8003128:	4602      	mov	r2, r0
 800312a:	693b      	ldr	r3, [r7, #16]
 800312c:	1ad3      	subs	r3, r2, r3
 800312e:	2b02      	cmp	r3, #2
 8003130:	d901      	bls.n	8003136 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003132:	2303      	movs	r3, #3
 8003134:	e23c      	b.n	80035b0 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003136:	4b40      	ldr	r3, [pc, #256]	; (8003238 <HAL_RCC_OscConfig+0x2ac>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800313e:	2b00      	cmp	r3, #0
 8003140:	d0f0      	beq.n	8003124 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003142:	4b3d      	ldr	r3, [pc, #244]	; (8003238 <HAL_RCC_OscConfig+0x2ac>)
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	691b      	ldr	r3, [r3, #16]
 800314e:	061b      	lsls	r3, r3, #24
 8003150:	4939      	ldr	r1, [pc, #228]	; (8003238 <HAL_RCC_OscConfig+0x2ac>)
 8003152:	4313      	orrs	r3, r2
 8003154:	604b      	str	r3, [r1, #4]
 8003156:	e01a      	b.n	800318e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003158:	4b37      	ldr	r3, [pc, #220]	; (8003238 <HAL_RCC_OscConfig+0x2ac>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a36      	ldr	r2, [pc, #216]	; (8003238 <HAL_RCC_OscConfig+0x2ac>)
 800315e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003162:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003164:	f7fe f826 	bl	80011b4 <HAL_GetTick>
 8003168:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800316a:	e008      	b.n	800317e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800316c:	f7fe f822 	bl	80011b4 <HAL_GetTick>
 8003170:	4602      	mov	r2, r0
 8003172:	693b      	ldr	r3, [r7, #16]
 8003174:	1ad3      	subs	r3, r2, r3
 8003176:	2b02      	cmp	r3, #2
 8003178:	d901      	bls.n	800317e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800317a:	2303      	movs	r3, #3
 800317c:	e218      	b.n	80035b0 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800317e:	4b2e      	ldr	r3, [pc, #184]	; (8003238 <HAL_RCC_OscConfig+0x2ac>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003186:	2b00      	cmp	r3, #0
 8003188:	d1f0      	bne.n	800316c <HAL_RCC_OscConfig+0x1e0>
 800318a:	e000      	b.n	800318e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800318c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f003 0308 	and.w	r3, r3, #8
 8003196:	2b00      	cmp	r3, #0
 8003198:	d03c      	beq.n	8003214 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	695b      	ldr	r3, [r3, #20]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d01c      	beq.n	80031dc <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031a2:	4b25      	ldr	r3, [pc, #148]	; (8003238 <HAL_RCC_OscConfig+0x2ac>)
 80031a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031a8:	4a23      	ldr	r2, [pc, #140]	; (8003238 <HAL_RCC_OscConfig+0x2ac>)
 80031aa:	f043 0301 	orr.w	r3, r3, #1
 80031ae:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031b2:	f7fd ffff 	bl	80011b4 <HAL_GetTick>
 80031b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80031b8:	e008      	b.n	80031cc <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031ba:	f7fd fffb 	bl	80011b4 <HAL_GetTick>
 80031be:	4602      	mov	r2, r0
 80031c0:	693b      	ldr	r3, [r7, #16]
 80031c2:	1ad3      	subs	r3, r2, r3
 80031c4:	2b02      	cmp	r3, #2
 80031c6:	d901      	bls.n	80031cc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80031c8:	2303      	movs	r3, #3
 80031ca:	e1f1      	b.n	80035b0 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80031cc:	4b1a      	ldr	r3, [pc, #104]	; (8003238 <HAL_RCC_OscConfig+0x2ac>)
 80031ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031d2:	f003 0302 	and.w	r3, r3, #2
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d0ef      	beq.n	80031ba <HAL_RCC_OscConfig+0x22e>
 80031da:	e01b      	b.n	8003214 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80031dc:	4b16      	ldr	r3, [pc, #88]	; (8003238 <HAL_RCC_OscConfig+0x2ac>)
 80031de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031e2:	4a15      	ldr	r2, [pc, #84]	; (8003238 <HAL_RCC_OscConfig+0x2ac>)
 80031e4:	f023 0301 	bic.w	r3, r3, #1
 80031e8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031ec:	f7fd ffe2 	bl	80011b4 <HAL_GetTick>
 80031f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80031f2:	e008      	b.n	8003206 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031f4:	f7fd ffde 	bl	80011b4 <HAL_GetTick>
 80031f8:	4602      	mov	r2, r0
 80031fa:	693b      	ldr	r3, [r7, #16]
 80031fc:	1ad3      	subs	r3, r2, r3
 80031fe:	2b02      	cmp	r3, #2
 8003200:	d901      	bls.n	8003206 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8003202:	2303      	movs	r3, #3
 8003204:	e1d4      	b.n	80035b0 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003206:	4b0c      	ldr	r3, [pc, #48]	; (8003238 <HAL_RCC_OscConfig+0x2ac>)
 8003208:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800320c:	f003 0302 	and.w	r3, r3, #2
 8003210:	2b00      	cmp	r3, #0
 8003212:	d1ef      	bne.n	80031f4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f003 0304 	and.w	r3, r3, #4
 800321c:	2b00      	cmp	r3, #0
 800321e:	f000 80ab 	beq.w	8003378 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003222:	2300      	movs	r3, #0
 8003224:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003226:	4b04      	ldr	r3, [pc, #16]	; (8003238 <HAL_RCC_OscConfig+0x2ac>)
 8003228:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800322a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800322e:	2b00      	cmp	r3, #0
 8003230:	d106      	bne.n	8003240 <HAL_RCC_OscConfig+0x2b4>
 8003232:	2301      	movs	r3, #1
 8003234:	e005      	b.n	8003242 <HAL_RCC_OscConfig+0x2b6>
 8003236:	bf00      	nop
 8003238:	40021000 	.word	0x40021000
 800323c:	20000004 	.word	0x20000004
 8003240:	2300      	movs	r3, #0
 8003242:	2b00      	cmp	r3, #0
 8003244:	d00d      	beq.n	8003262 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003246:	4baf      	ldr	r3, [pc, #700]	; (8003504 <HAL_RCC_OscConfig+0x578>)
 8003248:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800324a:	4aae      	ldr	r2, [pc, #696]	; (8003504 <HAL_RCC_OscConfig+0x578>)
 800324c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003250:	6593      	str	r3, [r2, #88]	; 0x58
 8003252:	4bac      	ldr	r3, [pc, #688]	; (8003504 <HAL_RCC_OscConfig+0x578>)
 8003254:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003256:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800325a:	60fb      	str	r3, [r7, #12]
 800325c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800325e:	2301      	movs	r3, #1
 8003260:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003262:	4ba9      	ldr	r3, [pc, #676]	; (8003508 <HAL_RCC_OscConfig+0x57c>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800326a:	2b00      	cmp	r3, #0
 800326c:	d118      	bne.n	80032a0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800326e:	4ba6      	ldr	r3, [pc, #664]	; (8003508 <HAL_RCC_OscConfig+0x57c>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4aa5      	ldr	r2, [pc, #660]	; (8003508 <HAL_RCC_OscConfig+0x57c>)
 8003274:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003278:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800327a:	f7fd ff9b 	bl	80011b4 <HAL_GetTick>
 800327e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003280:	e008      	b.n	8003294 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003282:	f7fd ff97 	bl	80011b4 <HAL_GetTick>
 8003286:	4602      	mov	r2, r0
 8003288:	693b      	ldr	r3, [r7, #16]
 800328a:	1ad3      	subs	r3, r2, r3
 800328c:	2b02      	cmp	r3, #2
 800328e:	d901      	bls.n	8003294 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003290:	2303      	movs	r3, #3
 8003292:	e18d      	b.n	80035b0 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003294:	4b9c      	ldr	r3, [pc, #624]	; (8003508 <HAL_RCC_OscConfig+0x57c>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800329c:	2b00      	cmp	r3, #0
 800329e:	d0f0      	beq.n	8003282 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	689b      	ldr	r3, [r3, #8]
 80032a4:	2b01      	cmp	r3, #1
 80032a6:	d108      	bne.n	80032ba <HAL_RCC_OscConfig+0x32e>
 80032a8:	4b96      	ldr	r3, [pc, #600]	; (8003504 <HAL_RCC_OscConfig+0x578>)
 80032aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032ae:	4a95      	ldr	r2, [pc, #596]	; (8003504 <HAL_RCC_OscConfig+0x578>)
 80032b0:	f043 0301 	orr.w	r3, r3, #1
 80032b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80032b8:	e024      	b.n	8003304 <HAL_RCC_OscConfig+0x378>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	689b      	ldr	r3, [r3, #8]
 80032be:	2b05      	cmp	r3, #5
 80032c0:	d110      	bne.n	80032e4 <HAL_RCC_OscConfig+0x358>
 80032c2:	4b90      	ldr	r3, [pc, #576]	; (8003504 <HAL_RCC_OscConfig+0x578>)
 80032c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032c8:	4a8e      	ldr	r2, [pc, #568]	; (8003504 <HAL_RCC_OscConfig+0x578>)
 80032ca:	f043 0304 	orr.w	r3, r3, #4
 80032ce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80032d2:	4b8c      	ldr	r3, [pc, #560]	; (8003504 <HAL_RCC_OscConfig+0x578>)
 80032d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032d8:	4a8a      	ldr	r2, [pc, #552]	; (8003504 <HAL_RCC_OscConfig+0x578>)
 80032da:	f043 0301 	orr.w	r3, r3, #1
 80032de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80032e2:	e00f      	b.n	8003304 <HAL_RCC_OscConfig+0x378>
 80032e4:	4b87      	ldr	r3, [pc, #540]	; (8003504 <HAL_RCC_OscConfig+0x578>)
 80032e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032ea:	4a86      	ldr	r2, [pc, #536]	; (8003504 <HAL_RCC_OscConfig+0x578>)
 80032ec:	f023 0301 	bic.w	r3, r3, #1
 80032f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80032f4:	4b83      	ldr	r3, [pc, #524]	; (8003504 <HAL_RCC_OscConfig+0x578>)
 80032f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032fa:	4a82      	ldr	r2, [pc, #520]	; (8003504 <HAL_RCC_OscConfig+0x578>)
 80032fc:	f023 0304 	bic.w	r3, r3, #4
 8003300:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	689b      	ldr	r3, [r3, #8]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d016      	beq.n	800333a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800330c:	f7fd ff52 	bl	80011b4 <HAL_GetTick>
 8003310:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003312:	e00a      	b.n	800332a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003314:	f7fd ff4e 	bl	80011b4 <HAL_GetTick>
 8003318:	4602      	mov	r2, r0
 800331a:	693b      	ldr	r3, [r7, #16]
 800331c:	1ad3      	subs	r3, r2, r3
 800331e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003322:	4293      	cmp	r3, r2
 8003324:	d901      	bls.n	800332a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003326:	2303      	movs	r3, #3
 8003328:	e142      	b.n	80035b0 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800332a:	4b76      	ldr	r3, [pc, #472]	; (8003504 <HAL_RCC_OscConfig+0x578>)
 800332c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003330:	f003 0302 	and.w	r3, r3, #2
 8003334:	2b00      	cmp	r3, #0
 8003336:	d0ed      	beq.n	8003314 <HAL_RCC_OscConfig+0x388>
 8003338:	e015      	b.n	8003366 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800333a:	f7fd ff3b 	bl	80011b4 <HAL_GetTick>
 800333e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003340:	e00a      	b.n	8003358 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003342:	f7fd ff37 	bl	80011b4 <HAL_GetTick>
 8003346:	4602      	mov	r2, r0
 8003348:	693b      	ldr	r3, [r7, #16]
 800334a:	1ad3      	subs	r3, r2, r3
 800334c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003350:	4293      	cmp	r3, r2
 8003352:	d901      	bls.n	8003358 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003354:	2303      	movs	r3, #3
 8003356:	e12b      	b.n	80035b0 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003358:	4b6a      	ldr	r3, [pc, #424]	; (8003504 <HAL_RCC_OscConfig+0x578>)
 800335a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800335e:	f003 0302 	and.w	r3, r3, #2
 8003362:	2b00      	cmp	r3, #0
 8003364:	d1ed      	bne.n	8003342 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003366:	7ffb      	ldrb	r3, [r7, #31]
 8003368:	2b01      	cmp	r3, #1
 800336a:	d105      	bne.n	8003378 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800336c:	4b65      	ldr	r3, [pc, #404]	; (8003504 <HAL_RCC_OscConfig+0x578>)
 800336e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003370:	4a64      	ldr	r2, [pc, #400]	; (8003504 <HAL_RCC_OscConfig+0x578>)
 8003372:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003376:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f003 0320 	and.w	r3, r3, #32
 8003380:	2b00      	cmp	r3, #0
 8003382:	d03c      	beq.n	80033fe <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	699b      	ldr	r3, [r3, #24]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d01c      	beq.n	80033c6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800338c:	4b5d      	ldr	r3, [pc, #372]	; (8003504 <HAL_RCC_OscConfig+0x578>)
 800338e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003392:	4a5c      	ldr	r2, [pc, #368]	; (8003504 <HAL_RCC_OscConfig+0x578>)
 8003394:	f043 0301 	orr.w	r3, r3, #1
 8003398:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800339c:	f7fd ff0a 	bl	80011b4 <HAL_GetTick>
 80033a0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80033a2:	e008      	b.n	80033b6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80033a4:	f7fd ff06 	bl	80011b4 <HAL_GetTick>
 80033a8:	4602      	mov	r2, r0
 80033aa:	693b      	ldr	r3, [r7, #16]
 80033ac:	1ad3      	subs	r3, r2, r3
 80033ae:	2b02      	cmp	r3, #2
 80033b0:	d901      	bls.n	80033b6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80033b2:	2303      	movs	r3, #3
 80033b4:	e0fc      	b.n	80035b0 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80033b6:	4b53      	ldr	r3, [pc, #332]	; (8003504 <HAL_RCC_OscConfig+0x578>)
 80033b8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80033bc:	f003 0302 	and.w	r3, r3, #2
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d0ef      	beq.n	80033a4 <HAL_RCC_OscConfig+0x418>
 80033c4:	e01b      	b.n	80033fe <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80033c6:	4b4f      	ldr	r3, [pc, #316]	; (8003504 <HAL_RCC_OscConfig+0x578>)
 80033c8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80033cc:	4a4d      	ldr	r2, [pc, #308]	; (8003504 <HAL_RCC_OscConfig+0x578>)
 80033ce:	f023 0301 	bic.w	r3, r3, #1
 80033d2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033d6:	f7fd feed 	bl	80011b4 <HAL_GetTick>
 80033da:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80033dc:	e008      	b.n	80033f0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80033de:	f7fd fee9 	bl	80011b4 <HAL_GetTick>
 80033e2:	4602      	mov	r2, r0
 80033e4:	693b      	ldr	r3, [r7, #16]
 80033e6:	1ad3      	subs	r3, r2, r3
 80033e8:	2b02      	cmp	r3, #2
 80033ea:	d901      	bls.n	80033f0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80033ec:	2303      	movs	r3, #3
 80033ee:	e0df      	b.n	80035b0 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80033f0:	4b44      	ldr	r3, [pc, #272]	; (8003504 <HAL_RCC_OscConfig+0x578>)
 80033f2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80033f6:	f003 0302 	and.w	r3, r3, #2
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d1ef      	bne.n	80033de <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	69db      	ldr	r3, [r3, #28]
 8003402:	2b00      	cmp	r3, #0
 8003404:	f000 80d3 	beq.w	80035ae <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003408:	4b3e      	ldr	r3, [pc, #248]	; (8003504 <HAL_RCC_OscConfig+0x578>)
 800340a:	689b      	ldr	r3, [r3, #8]
 800340c:	f003 030c 	and.w	r3, r3, #12
 8003410:	2b0c      	cmp	r3, #12
 8003412:	f000 808d 	beq.w	8003530 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	69db      	ldr	r3, [r3, #28]
 800341a:	2b02      	cmp	r3, #2
 800341c:	d15a      	bne.n	80034d4 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800341e:	4b39      	ldr	r3, [pc, #228]	; (8003504 <HAL_RCC_OscConfig+0x578>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4a38      	ldr	r2, [pc, #224]	; (8003504 <HAL_RCC_OscConfig+0x578>)
 8003424:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003428:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800342a:	f7fd fec3 	bl	80011b4 <HAL_GetTick>
 800342e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003430:	e008      	b.n	8003444 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003432:	f7fd febf 	bl	80011b4 <HAL_GetTick>
 8003436:	4602      	mov	r2, r0
 8003438:	693b      	ldr	r3, [r7, #16]
 800343a:	1ad3      	subs	r3, r2, r3
 800343c:	2b02      	cmp	r3, #2
 800343e:	d901      	bls.n	8003444 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8003440:	2303      	movs	r3, #3
 8003442:	e0b5      	b.n	80035b0 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003444:	4b2f      	ldr	r3, [pc, #188]	; (8003504 <HAL_RCC_OscConfig+0x578>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800344c:	2b00      	cmp	r3, #0
 800344e:	d1f0      	bne.n	8003432 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003450:	4b2c      	ldr	r3, [pc, #176]	; (8003504 <HAL_RCC_OscConfig+0x578>)
 8003452:	68da      	ldr	r2, [r3, #12]
 8003454:	4b2d      	ldr	r3, [pc, #180]	; (800350c <HAL_RCC_OscConfig+0x580>)
 8003456:	4013      	ands	r3, r2
 8003458:	687a      	ldr	r2, [r7, #4]
 800345a:	6a11      	ldr	r1, [r2, #32]
 800345c:	687a      	ldr	r2, [r7, #4]
 800345e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003460:	3a01      	subs	r2, #1
 8003462:	0112      	lsls	r2, r2, #4
 8003464:	4311      	orrs	r1, r2
 8003466:	687a      	ldr	r2, [r7, #4]
 8003468:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800346a:	0212      	lsls	r2, r2, #8
 800346c:	4311      	orrs	r1, r2
 800346e:	687a      	ldr	r2, [r7, #4]
 8003470:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003472:	0852      	lsrs	r2, r2, #1
 8003474:	3a01      	subs	r2, #1
 8003476:	0552      	lsls	r2, r2, #21
 8003478:	4311      	orrs	r1, r2
 800347a:	687a      	ldr	r2, [r7, #4]
 800347c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800347e:	0852      	lsrs	r2, r2, #1
 8003480:	3a01      	subs	r2, #1
 8003482:	0652      	lsls	r2, r2, #25
 8003484:	4311      	orrs	r1, r2
 8003486:	687a      	ldr	r2, [r7, #4]
 8003488:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800348a:	06d2      	lsls	r2, r2, #27
 800348c:	430a      	orrs	r2, r1
 800348e:	491d      	ldr	r1, [pc, #116]	; (8003504 <HAL_RCC_OscConfig+0x578>)
 8003490:	4313      	orrs	r3, r2
 8003492:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003494:	4b1b      	ldr	r3, [pc, #108]	; (8003504 <HAL_RCC_OscConfig+0x578>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4a1a      	ldr	r2, [pc, #104]	; (8003504 <HAL_RCC_OscConfig+0x578>)
 800349a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800349e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80034a0:	4b18      	ldr	r3, [pc, #96]	; (8003504 <HAL_RCC_OscConfig+0x578>)
 80034a2:	68db      	ldr	r3, [r3, #12]
 80034a4:	4a17      	ldr	r2, [pc, #92]	; (8003504 <HAL_RCC_OscConfig+0x578>)
 80034a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80034aa:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034ac:	f7fd fe82 	bl	80011b4 <HAL_GetTick>
 80034b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034b2:	e008      	b.n	80034c6 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034b4:	f7fd fe7e 	bl	80011b4 <HAL_GetTick>
 80034b8:	4602      	mov	r2, r0
 80034ba:	693b      	ldr	r3, [r7, #16]
 80034bc:	1ad3      	subs	r3, r2, r3
 80034be:	2b02      	cmp	r3, #2
 80034c0:	d901      	bls.n	80034c6 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 80034c2:	2303      	movs	r3, #3
 80034c4:	e074      	b.n	80035b0 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034c6:	4b0f      	ldr	r3, [pc, #60]	; (8003504 <HAL_RCC_OscConfig+0x578>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d0f0      	beq.n	80034b4 <HAL_RCC_OscConfig+0x528>
 80034d2:	e06c      	b.n	80035ae <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034d4:	4b0b      	ldr	r3, [pc, #44]	; (8003504 <HAL_RCC_OscConfig+0x578>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a0a      	ldr	r2, [pc, #40]	; (8003504 <HAL_RCC_OscConfig+0x578>)
 80034da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80034de:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80034e0:	4b08      	ldr	r3, [pc, #32]	; (8003504 <HAL_RCC_OscConfig+0x578>)
 80034e2:	68db      	ldr	r3, [r3, #12]
 80034e4:	4a07      	ldr	r2, [pc, #28]	; (8003504 <HAL_RCC_OscConfig+0x578>)
 80034e6:	f023 0303 	bic.w	r3, r3, #3
 80034ea:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80034ec:	4b05      	ldr	r3, [pc, #20]	; (8003504 <HAL_RCC_OscConfig+0x578>)
 80034ee:	68db      	ldr	r3, [r3, #12]
 80034f0:	4a04      	ldr	r2, [pc, #16]	; (8003504 <HAL_RCC_OscConfig+0x578>)
 80034f2:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80034f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034fa:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034fc:	f7fd fe5a 	bl	80011b4 <HAL_GetTick>
 8003500:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003502:	e00e      	b.n	8003522 <HAL_RCC_OscConfig+0x596>
 8003504:	40021000 	.word	0x40021000
 8003508:	40007000 	.word	0x40007000
 800350c:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003510:	f7fd fe50 	bl	80011b4 <HAL_GetTick>
 8003514:	4602      	mov	r2, r0
 8003516:	693b      	ldr	r3, [r7, #16]
 8003518:	1ad3      	subs	r3, r2, r3
 800351a:	2b02      	cmp	r3, #2
 800351c:	d901      	bls.n	8003522 <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 800351e:	2303      	movs	r3, #3
 8003520:	e046      	b.n	80035b0 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003522:	4b25      	ldr	r3, [pc, #148]	; (80035b8 <HAL_RCC_OscConfig+0x62c>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800352a:	2b00      	cmp	r3, #0
 800352c:	d1f0      	bne.n	8003510 <HAL_RCC_OscConfig+0x584>
 800352e:	e03e      	b.n	80035ae <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	69db      	ldr	r3, [r3, #28]
 8003534:	2b01      	cmp	r3, #1
 8003536:	d101      	bne.n	800353c <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8003538:	2301      	movs	r3, #1
 800353a:	e039      	b.n	80035b0 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800353c:	4b1e      	ldr	r3, [pc, #120]	; (80035b8 <HAL_RCC_OscConfig+0x62c>)
 800353e:	68db      	ldr	r3, [r3, #12]
 8003540:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003542:	697b      	ldr	r3, [r7, #20]
 8003544:	f003 0203 	and.w	r2, r3, #3
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6a1b      	ldr	r3, [r3, #32]
 800354c:	429a      	cmp	r2, r3
 800354e:	d12c      	bne.n	80035aa <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003550:	697b      	ldr	r3, [r7, #20]
 8003552:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800355a:	3b01      	subs	r3, #1
 800355c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800355e:	429a      	cmp	r2, r3
 8003560:	d123      	bne.n	80035aa <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003562:	697b      	ldr	r3, [r7, #20]
 8003564:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800356c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800356e:	429a      	cmp	r2, r3
 8003570:	d11b      	bne.n	80035aa <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003572:	697b      	ldr	r3, [r7, #20]
 8003574:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800357c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800357e:	429a      	cmp	r2, r3
 8003580:	d113      	bne.n	80035aa <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003582:	697b      	ldr	r3, [r7, #20]
 8003584:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800358c:	085b      	lsrs	r3, r3, #1
 800358e:	3b01      	subs	r3, #1
 8003590:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003592:	429a      	cmp	r2, r3
 8003594:	d109      	bne.n	80035aa <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003596:	697b      	ldr	r3, [r7, #20]
 8003598:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035a0:	085b      	lsrs	r3, r3, #1
 80035a2:	3b01      	subs	r3, #1
 80035a4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80035a6:	429a      	cmp	r2, r3
 80035a8:	d001      	beq.n	80035ae <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 80035aa:	2301      	movs	r3, #1
 80035ac:	e000      	b.n	80035b0 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 80035ae:	2300      	movs	r3, #0
}
 80035b0:	4618      	mov	r0, r3
 80035b2:	3720      	adds	r7, #32
 80035b4:	46bd      	mov	sp, r7
 80035b6:	bd80      	pop	{r7, pc}
 80035b8:	40021000 	.word	0x40021000

080035bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b086      	sub	sp, #24
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
 80035c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80035c6:	2300      	movs	r3, #0
 80035c8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d101      	bne.n	80035d4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80035d0:	2301      	movs	r3, #1
 80035d2:	e11e      	b.n	8003812 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80035d4:	4b91      	ldr	r3, [pc, #580]	; (800381c <HAL_RCC_ClockConfig+0x260>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f003 030f 	and.w	r3, r3, #15
 80035dc:	683a      	ldr	r2, [r7, #0]
 80035de:	429a      	cmp	r2, r3
 80035e0:	d910      	bls.n	8003604 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035e2:	4b8e      	ldr	r3, [pc, #568]	; (800381c <HAL_RCC_ClockConfig+0x260>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f023 020f 	bic.w	r2, r3, #15
 80035ea:	498c      	ldr	r1, [pc, #560]	; (800381c <HAL_RCC_ClockConfig+0x260>)
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	4313      	orrs	r3, r2
 80035f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035f2:	4b8a      	ldr	r3, [pc, #552]	; (800381c <HAL_RCC_ClockConfig+0x260>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f003 030f 	and.w	r3, r3, #15
 80035fa:	683a      	ldr	r2, [r7, #0]
 80035fc:	429a      	cmp	r2, r3
 80035fe:	d001      	beq.n	8003604 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003600:	2301      	movs	r3, #1
 8003602:	e106      	b.n	8003812 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f003 0301 	and.w	r3, r3, #1
 800360c:	2b00      	cmp	r3, #0
 800360e:	d073      	beq.n	80036f8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	2b03      	cmp	r3, #3
 8003616:	d129      	bne.n	800366c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003618:	4b81      	ldr	r3, [pc, #516]	; (8003820 <HAL_RCC_ClockConfig+0x264>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003620:	2b00      	cmp	r3, #0
 8003622:	d101      	bne.n	8003628 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003624:	2301      	movs	r3, #1
 8003626:	e0f4      	b.n	8003812 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003628:	f000 f966 	bl	80038f8 <RCC_GetSysClockFreqFromPLLSource>
 800362c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800362e:	693b      	ldr	r3, [r7, #16]
 8003630:	4a7c      	ldr	r2, [pc, #496]	; (8003824 <HAL_RCC_ClockConfig+0x268>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d93f      	bls.n	80036b6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003636:	4b7a      	ldr	r3, [pc, #488]	; (8003820 <HAL_RCC_ClockConfig+0x264>)
 8003638:	689b      	ldr	r3, [r3, #8]
 800363a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800363e:	2b00      	cmp	r3, #0
 8003640:	d009      	beq.n	8003656 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800364a:	2b00      	cmp	r3, #0
 800364c:	d033      	beq.n	80036b6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003652:	2b00      	cmp	r3, #0
 8003654:	d12f      	bne.n	80036b6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003656:	4b72      	ldr	r3, [pc, #456]	; (8003820 <HAL_RCC_ClockConfig+0x264>)
 8003658:	689b      	ldr	r3, [r3, #8]
 800365a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800365e:	4a70      	ldr	r2, [pc, #448]	; (8003820 <HAL_RCC_ClockConfig+0x264>)
 8003660:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003664:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003666:	2380      	movs	r3, #128	; 0x80
 8003668:	617b      	str	r3, [r7, #20]
 800366a:	e024      	b.n	80036b6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	2b02      	cmp	r3, #2
 8003672:	d107      	bne.n	8003684 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003674:	4b6a      	ldr	r3, [pc, #424]	; (8003820 <HAL_RCC_ClockConfig+0x264>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800367c:	2b00      	cmp	r3, #0
 800367e:	d109      	bne.n	8003694 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003680:	2301      	movs	r3, #1
 8003682:	e0c6      	b.n	8003812 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003684:	4b66      	ldr	r3, [pc, #408]	; (8003820 <HAL_RCC_ClockConfig+0x264>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800368c:	2b00      	cmp	r3, #0
 800368e:	d101      	bne.n	8003694 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003690:	2301      	movs	r3, #1
 8003692:	e0be      	b.n	8003812 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003694:	f000 f8ce 	bl	8003834 <HAL_RCC_GetSysClockFreq>
 8003698:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800369a:	693b      	ldr	r3, [r7, #16]
 800369c:	4a61      	ldr	r2, [pc, #388]	; (8003824 <HAL_RCC_ClockConfig+0x268>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d909      	bls.n	80036b6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80036a2:	4b5f      	ldr	r3, [pc, #380]	; (8003820 <HAL_RCC_ClockConfig+0x264>)
 80036a4:	689b      	ldr	r3, [r3, #8]
 80036a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80036aa:	4a5d      	ldr	r2, [pc, #372]	; (8003820 <HAL_RCC_ClockConfig+0x264>)
 80036ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036b0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80036b2:	2380      	movs	r3, #128	; 0x80
 80036b4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80036b6:	4b5a      	ldr	r3, [pc, #360]	; (8003820 <HAL_RCC_ClockConfig+0x264>)
 80036b8:	689b      	ldr	r3, [r3, #8]
 80036ba:	f023 0203 	bic.w	r2, r3, #3
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	4957      	ldr	r1, [pc, #348]	; (8003820 <HAL_RCC_ClockConfig+0x264>)
 80036c4:	4313      	orrs	r3, r2
 80036c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80036c8:	f7fd fd74 	bl	80011b4 <HAL_GetTick>
 80036cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036ce:	e00a      	b.n	80036e6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036d0:	f7fd fd70 	bl	80011b4 <HAL_GetTick>
 80036d4:	4602      	mov	r2, r0
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	1ad3      	subs	r3, r2, r3
 80036da:	f241 3288 	movw	r2, #5000	; 0x1388
 80036de:	4293      	cmp	r3, r2
 80036e0:	d901      	bls.n	80036e6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80036e2:	2303      	movs	r3, #3
 80036e4:	e095      	b.n	8003812 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036e6:	4b4e      	ldr	r3, [pc, #312]	; (8003820 <HAL_RCC_ClockConfig+0x264>)
 80036e8:	689b      	ldr	r3, [r3, #8]
 80036ea:	f003 020c 	and.w	r2, r3, #12
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	009b      	lsls	r3, r3, #2
 80036f4:	429a      	cmp	r2, r3
 80036f6:	d1eb      	bne.n	80036d0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f003 0302 	and.w	r3, r3, #2
 8003700:	2b00      	cmp	r3, #0
 8003702:	d023      	beq.n	800374c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f003 0304 	and.w	r3, r3, #4
 800370c:	2b00      	cmp	r3, #0
 800370e:	d005      	beq.n	800371c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003710:	4b43      	ldr	r3, [pc, #268]	; (8003820 <HAL_RCC_ClockConfig+0x264>)
 8003712:	689b      	ldr	r3, [r3, #8]
 8003714:	4a42      	ldr	r2, [pc, #264]	; (8003820 <HAL_RCC_ClockConfig+0x264>)
 8003716:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800371a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f003 0308 	and.w	r3, r3, #8
 8003724:	2b00      	cmp	r3, #0
 8003726:	d007      	beq.n	8003738 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003728:	4b3d      	ldr	r3, [pc, #244]	; (8003820 <HAL_RCC_ClockConfig+0x264>)
 800372a:	689b      	ldr	r3, [r3, #8]
 800372c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003730:	4a3b      	ldr	r2, [pc, #236]	; (8003820 <HAL_RCC_ClockConfig+0x264>)
 8003732:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003736:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003738:	4b39      	ldr	r3, [pc, #228]	; (8003820 <HAL_RCC_ClockConfig+0x264>)
 800373a:	689b      	ldr	r3, [r3, #8]
 800373c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	689b      	ldr	r3, [r3, #8]
 8003744:	4936      	ldr	r1, [pc, #216]	; (8003820 <HAL_RCC_ClockConfig+0x264>)
 8003746:	4313      	orrs	r3, r2
 8003748:	608b      	str	r3, [r1, #8]
 800374a:	e008      	b.n	800375e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800374c:	697b      	ldr	r3, [r7, #20]
 800374e:	2b80      	cmp	r3, #128	; 0x80
 8003750:	d105      	bne.n	800375e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003752:	4b33      	ldr	r3, [pc, #204]	; (8003820 <HAL_RCC_ClockConfig+0x264>)
 8003754:	689b      	ldr	r3, [r3, #8]
 8003756:	4a32      	ldr	r2, [pc, #200]	; (8003820 <HAL_RCC_ClockConfig+0x264>)
 8003758:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800375c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800375e:	4b2f      	ldr	r3, [pc, #188]	; (800381c <HAL_RCC_ClockConfig+0x260>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f003 030f 	and.w	r3, r3, #15
 8003766:	683a      	ldr	r2, [r7, #0]
 8003768:	429a      	cmp	r2, r3
 800376a:	d21d      	bcs.n	80037a8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800376c:	4b2b      	ldr	r3, [pc, #172]	; (800381c <HAL_RCC_ClockConfig+0x260>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f023 020f 	bic.w	r2, r3, #15
 8003774:	4929      	ldr	r1, [pc, #164]	; (800381c <HAL_RCC_ClockConfig+0x260>)
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	4313      	orrs	r3, r2
 800377a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800377c:	f7fd fd1a 	bl	80011b4 <HAL_GetTick>
 8003780:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003782:	e00a      	b.n	800379a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003784:	f7fd fd16 	bl	80011b4 <HAL_GetTick>
 8003788:	4602      	mov	r2, r0
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	1ad3      	subs	r3, r2, r3
 800378e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003792:	4293      	cmp	r3, r2
 8003794:	d901      	bls.n	800379a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003796:	2303      	movs	r3, #3
 8003798:	e03b      	b.n	8003812 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800379a:	4b20      	ldr	r3, [pc, #128]	; (800381c <HAL_RCC_ClockConfig+0x260>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f003 030f 	and.w	r3, r3, #15
 80037a2:	683a      	ldr	r2, [r7, #0]
 80037a4:	429a      	cmp	r2, r3
 80037a6:	d1ed      	bne.n	8003784 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f003 0304 	and.w	r3, r3, #4
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d008      	beq.n	80037c6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80037b4:	4b1a      	ldr	r3, [pc, #104]	; (8003820 <HAL_RCC_ClockConfig+0x264>)
 80037b6:	689b      	ldr	r3, [r3, #8]
 80037b8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	68db      	ldr	r3, [r3, #12]
 80037c0:	4917      	ldr	r1, [pc, #92]	; (8003820 <HAL_RCC_ClockConfig+0x264>)
 80037c2:	4313      	orrs	r3, r2
 80037c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f003 0308 	and.w	r3, r3, #8
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d009      	beq.n	80037e6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80037d2:	4b13      	ldr	r3, [pc, #76]	; (8003820 <HAL_RCC_ClockConfig+0x264>)
 80037d4:	689b      	ldr	r3, [r3, #8]
 80037d6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	691b      	ldr	r3, [r3, #16]
 80037de:	00db      	lsls	r3, r3, #3
 80037e0:	490f      	ldr	r1, [pc, #60]	; (8003820 <HAL_RCC_ClockConfig+0x264>)
 80037e2:	4313      	orrs	r3, r2
 80037e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80037e6:	f000 f825 	bl	8003834 <HAL_RCC_GetSysClockFreq>
 80037ea:	4601      	mov	r1, r0
 80037ec:	4b0c      	ldr	r3, [pc, #48]	; (8003820 <HAL_RCC_ClockConfig+0x264>)
 80037ee:	689b      	ldr	r3, [r3, #8]
 80037f0:	091b      	lsrs	r3, r3, #4
 80037f2:	f003 030f 	and.w	r3, r3, #15
 80037f6:	4a0c      	ldr	r2, [pc, #48]	; (8003828 <HAL_RCC_ClockConfig+0x26c>)
 80037f8:	5cd3      	ldrb	r3, [r2, r3]
 80037fa:	f003 031f 	and.w	r3, r3, #31
 80037fe:	fa21 f303 	lsr.w	r3, r1, r3
 8003802:	4a0a      	ldr	r2, [pc, #40]	; (800382c <HAL_RCC_ClockConfig+0x270>)
 8003804:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003806:	4b0a      	ldr	r3, [pc, #40]	; (8003830 <HAL_RCC_ClockConfig+0x274>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4618      	mov	r0, r3
 800380c:	f7fd fc86 	bl	800111c <HAL_InitTick>
 8003810:	4603      	mov	r3, r0
}
 8003812:	4618      	mov	r0, r3
 8003814:	3718      	adds	r7, #24
 8003816:	46bd      	mov	sp, r7
 8003818:	bd80      	pop	{r7, pc}
 800381a:	bf00      	nop
 800381c:	40022000 	.word	0x40022000
 8003820:	40021000 	.word	0x40021000
 8003824:	04c4b400 	.word	0x04c4b400
 8003828:	080097a8 	.word	0x080097a8
 800382c:	20000000 	.word	0x20000000
 8003830:	20000004 	.word	0x20000004

08003834 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003834:	b480      	push	{r7}
 8003836:	b087      	sub	sp, #28
 8003838:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800383a:	4b2c      	ldr	r3, [pc, #176]	; (80038ec <HAL_RCC_GetSysClockFreq+0xb8>)
 800383c:	689b      	ldr	r3, [r3, #8]
 800383e:	f003 030c 	and.w	r3, r3, #12
 8003842:	2b04      	cmp	r3, #4
 8003844:	d102      	bne.n	800384c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003846:	4b2a      	ldr	r3, [pc, #168]	; (80038f0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003848:	613b      	str	r3, [r7, #16]
 800384a:	e047      	b.n	80038dc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800384c:	4b27      	ldr	r3, [pc, #156]	; (80038ec <HAL_RCC_GetSysClockFreq+0xb8>)
 800384e:	689b      	ldr	r3, [r3, #8]
 8003850:	f003 030c 	and.w	r3, r3, #12
 8003854:	2b08      	cmp	r3, #8
 8003856:	d102      	bne.n	800385e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003858:	4b26      	ldr	r3, [pc, #152]	; (80038f4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800385a:	613b      	str	r3, [r7, #16]
 800385c:	e03e      	b.n	80038dc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800385e:	4b23      	ldr	r3, [pc, #140]	; (80038ec <HAL_RCC_GetSysClockFreq+0xb8>)
 8003860:	689b      	ldr	r3, [r3, #8]
 8003862:	f003 030c 	and.w	r3, r3, #12
 8003866:	2b0c      	cmp	r3, #12
 8003868:	d136      	bne.n	80038d8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800386a:	4b20      	ldr	r3, [pc, #128]	; (80038ec <HAL_RCC_GetSysClockFreq+0xb8>)
 800386c:	68db      	ldr	r3, [r3, #12]
 800386e:	f003 0303 	and.w	r3, r3, #3
 8003872:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003874:	4b1d      	ldr	r3, [pc, #116]	; (80038ec <HAL_RCC_GetSysClockFreq+0xb8>)
 8003876:	68db      	ldr	r3, [r3, #12]
 8003878:	091b      	lsrs	r3, r3, #4
 800387a:	f003 030f 	and.w	r3, r3, #15
 800387e:	3301      	adds	r3, #1
 8003880:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	2b03      	cmp	r3, #3
 8003886:	d10c      	bne.n	80038a2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003888:	4a1a      	ldr	r2, [pc, #104]	; (80038f4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800388a:	68bb      	ldr	r3, [r7, #8]
 800388c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003890:	4a16      	ldr	r2, [pc, #88]	; (80038ec <HAL_RCC_GetSysClockFreq+0xb8>)
 8003892:	68d2      	ldr	r2, [r2, #12]
 8003894:	0a12      	lsrs	r2, r2, #8
 8003896:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800389a:	fb02 f303 	mul.w	r3, r2, r3
 800389e:	617b      	str	r3, [r7, #20]
      break;
 80038a0:	e00c      	b.n	80038bc <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80038a2:	4a13      	ldr	r2, [pc, #76]	; (80038f0 <HAL_RCC_GetSysClockFreq+0xbc>)
 80038a4:	68bb      	ldr	r3, [r7, #8]
 80038a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80038aa:	4a10      	ldr	r2, [pc, #64]	; (80038ec <HAL_RCC_GetSysClockFreq+0xb8>)
 80038ac:	68d2      	ldr	r2, [r2, #12]
 80038ae:	0a12      	lsrs	r2, r2, #8
 80038b0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80038b4:	fb02 f303 	mul.w	r3, r2, r3
 80038b8:	617b      	str	r3, [r7, #20]
      break;
 80038ba:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80038bc:	4b0b      	ldr	r3, [pc, #44]	; (80038ec <HAL_RCC_GetSysClockFreq+0xb8>)
 80038be:	68db      	ldr	r3, [r3, #12]
 80038c0:	0e5b      	lsrs	r3, r3, #25
 80038c2:	f003 0303 	and.w	r3, r3, #3
 80038c6:	3301      	adds	r3, #1
 80038c8:	005b      	lsls	r3, r3, #1
 80038ca:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80038cc:	697a      	ldr	r2, [r7, #20]
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80038d4:	613b      	str	r3, [r7, #16]
 80038d6:	e001      	b.n	80038dc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80038d8:	2300      	movs	r3, #0
 80038da:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80038dc:	693b      	ldr	r3, [r7, #16]
}
 80038de:	4618      	mov	r0, r3
 80038e0:	371c      	adds	r7, #28
 80038e2:	46bd      	mov	sp, r7
 80038e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e8:	4770      	bx	lr
 80038ea:	bf00      	nop
 80038ec:	40021000 	.word	0x40021000
 80038f0:	00f42400 	.word	0x00f42400
 80038f4:	007a1200 	.word	0x007a1200

080038f8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80038f8:	b480      	push	{r7}
 80038fa:	b087      	sub	sp, #28
 80038fc:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80038fe:	4b1e      	ldr	r3, [pc, #120]	; (8003978 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003900:	68db      	ldr	r3, [r3, #12]
 8003902:	f003 0303 	and.w	r3, r3, #3
 8003906:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003908:	4b1b      	ldr	r3, [pc, #108]	; (8003978 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800390a:	68db      	ldr	r3, [r3, #12]
 800390c:	091b      	lsrs	r3, r3, #4
 800390e:	f003 030f 	and.w	r3, r3, #15
 8003912:	3301      	adds	r3, #1
 8003914:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003916:	693b      	ldr	r3, [r7, #16]
 8003918:	2b03      	cmp	r3, #3
 800391a:	d10c      	bne.n	8003936 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800391c:	4a17      	ldr	r2, [pc, #92]	; (800397c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	fbb2 f3f3 	udiv	r3, r2, r3
 8003924:	4a14      	ldr	r2, [pc, #80]	; (8003978 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003926:	68d2      	ldr	r2, [r2, #12]
 8003928:	0a12      	lsrs	r2, r2, #8
 800392a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800392e:	fb02 f303 	mul.w	r3, r2, r3
 8003932:	617b      	str	r3, [r7, #20]
    break;
 8003934:	e00c      	b.n	8003950 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003936:	4a12      	ldr	r2, [pc, #72]	; (8003980 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	fbb2 f3f3 	udiv	r3, r2, r3
 800393e:	4a0e      	ldr	r2, [pc, #56]	; (8003978 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003940:	68d2      	ldr	r2, [r2, #12]
 8003942:	0a12      	lsrs	r2, r2, #8
 8003944:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003948:	fb02 f303 	mul.w	r3, r2, r3
 800394c:	617b      	str	r3, [r7, #20]
    break;
 800394e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003950:	4b09      	ldr	r3, [pc, #36]	; (8003978 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003952:	68db      	ldr	r3, [r3, #12]
 8003954:	0e5b      	lsrs	r3, r3, #25
 8003956:	f003 0303 	and.w	r3, r3, #3
 800395a:	3301      	adds	r3, #1
 800395c:	005b      	lsls	r3, r3, #1
 800395e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003960:	697a      	ldr	r2, [r7, #20]
 8003962:	68bb      	ldr	r3, [r7, #8]
 8003964:	fbb2 f3f3 	udiv	r3, r2, r3
 8003968:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800396a:	687b      	ldr	r3, [r7, #4]
}
 800396c:	4618      	mov	r0, r3
 800396e:	371c      	adds	r7, #28
 8003970:	46bd      	mov	sp, r7
 8003972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003976:	4770      	bx	lr
 8003978:	40021000 	.word	0x40021000
 800397c:	007a1200 	.word	0x007a1200
 8003980:	00f42400 	.word	0x00f42400

08003984 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b086      	sub	sp, #24
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800398c:	2300      	movs	r3, #0
 800398e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003990:	2300      	movs	r3, #0
 8003992:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800399c:	2b00      	cmp	r3, #0
 800399e:	f000 8098 	beq.w	8003ad2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039a2:	2300      	movs	r3, #0
 80039a4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039a6:	4b43      	ldr	r3, [pc, #268]	; (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80039a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d10d      	bne.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039b2:	4b40      	ldr	r3, [pc, #256]	; (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80039b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039b6:	4a3f      	ldr	r2, [pc, #252]	; (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80039b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039bc:	6593      	str	r3, [r2, #88]	; 0x58
 80039be:	4b3d      	ldr	r3, [pc, #244]	; (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80039c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039c6:	60bb      	str	r3, [r7, #8]
 80039c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039ca:	2301      	movs	r3, #1
 80039cc:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80039ce:	4b3a      	ldr	r3, [pc, #232]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4a39      	ldr	r2, [pc, #228]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80039d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039d8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80039da:	f7fd fbeb 	bl	80011b4 <HAL_GetTick>
 80039de:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80039e0:	e009      	b.n	80039f6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039e2:	f7fd fbe7 	bl	80011b4 <HAL_GetTick>
 80039e6:	4602      	mov	r2, r0
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	1ad3      	subs	r3, r2, r3
 80039ec:	2b02      	cmp	r3, #2
 80039ee:	d902      	bls.n	80039f6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80039f0:	2303      	movs	r3, #3
 80039f2:	74fb      	strb	r3, [r7, #19]
        break;
 80039f4:	e005      	b.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80039f6:	4b30      	ldr	r3, [pc, #192]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d0ef      	beq.n	80039e2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003a02:	7cfb      	ldrb	r3, [r7, #19]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d159      	bne.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003a08:	4b2a      	ldr	r3, [pc, #168]	; (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a12:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003a14:	697b      	ldr	r3, [r7, #20]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d01e      	beq.n	8003a58 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a1e:	697a      	ldr	r2, [r7, #20]
 8003a20:	429a      	cmp	r2, r3
 8003a22:	d019      	beq.n	8003a58 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003a24:	4b23      	ldr	r3, [pc, #140]	; (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a2e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003a30:	4b20      	ldr	r3, [pc, #128]	; (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a36:	4a1f      	ldr	r2, [pc, #124]	; (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a3c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003a40:	4b1c      	ldr	r3, [pc, #112]	; (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a46:	4a1b      	ldr	r2, [pc, #108]	; (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a48:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a4c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003a50:	4a18      	ldr	r2, [pc, #96]	; (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a52:	697b      	ldr	r3, [r7, #20]
 8003a54:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003a58:	697b      	ldr	r3, [r7, #20]
 8003a5a:	f003 0301 	and.w	r3, r3, #1
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d016      	beq.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a62:	f7fd fba7 	bl	80011b4 <HAL_GetTick>
 8003a66:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a68:	e00b      	b.n	8003a82 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a6a:	f7fd fba3 	bl	80011b4 <HAL_GetTick>
 8003a6e:	4602      	mov	r2, r0
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	1ad3      	subs	r3, r2, r3
 8003a74:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d902      	bls.n	8003a82 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003a7c:	2303      	movs	r3, #3
 8003a7e:	74fb      	strb	r3, [r7, #19]
            break;
 8003a80:	e006      	b.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a82:	4b0c      	ldr	r3, [pc, #48]	; (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a88:	f003 0302 	and.w	r3, r3, #2
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d0ec      	beq.n	8003a6a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003a90:	7cfb      	ldrb	r3, [r7, #19]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d10b      	bne.n	8003aae <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003a96:	4b07      	ldr	r3, [pc, #28]	; (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a9c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aa4:	4903      	ldr	r1, [pc, #12]	; (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003aac:	e008      	b.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003aae:	7cfb      	ldrb	r3, [r7, #19]
 8003ab0:	74bb      	strb	r3, [r7, #18]
 8003ab2:	e005      	b.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003ab4:	40021000 	.word	0x40021000
 8003ab8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003abc:	7cfb      	ldrb	r3, [r7, #19]
 8003abe:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003ac0:	7c7b      	ldrb	r3, [r7, #17]
 8003ac2:	2b01      	cmp	r3, #1
 8003ac4:	d105      	bne.n	8003ad2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ac6:	4ba6      	ldr	r3, [pc, #664]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ac8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003aca:	4aa5      	ldr	r2, [pc, #660]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003acc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ad0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f003 0301 	and.w	r3, r3, #1
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d00a      	beq.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003ade:	4ba0      	ldr	r3, [pc, #640]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ae0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ae4:	f023 0203 	bic.w	r2, r3, #3
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	499c      	ldr	r1, [pc, #624]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003aee:	4313      	orrs	r3, r2
 8003af0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f003 0302 	and.w	r3, r3, #2
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d00a      	beq.n	8003b16 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003b00:	4b97      	ldr	r3, [pc, #604]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b06:	f023 020c 	bic.w	r2, r3, #12
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	689b      	ldr	r3, [r3, #8]
 8003b0e:	4994      	ldr	r1, [pc, #592]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b10:	4313      	orrs	r3, r2
 8003b12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f003 0304 	and.w	r3, r3, #4
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d00a      	beq.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003b22:	4b8f      	ldr	r3, [pc, #572]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b28:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	68db      	ldr	r3, [r3, #12]
 8003b30:	498b      	ldr	r1, [pc, #556]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b32:	4313      	orrs	r3, r2
 8003b34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f003 0308 	and.w	r3, r3, #8
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d00a      	beq.n	8003b5a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003b44:	4b86      	ldr	r3, [pc, #536]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b4a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	691b      	ldr	r3, [r3, #16]
 8003b52:	4983      	ldr	r1, [pc, #524]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b54:	4313      	orrs	r3, r2
 8003b56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f003 0320 	and.w	r3, r3, #32
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d00a      	beq.n	8003b7c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003b66:	4b7e      	ldr	r3, [pc, #504]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b6c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	695b      	ldr	r3, [r3, #20]
 8003b74:	497a      	ldr	r1, [pc, #488]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b76:	4313      	orrs	r3, r2
 8003b78:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d00a      	beq.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003b88:	4b75      	ldr	r3, [pc, #468]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b8e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	699b      	ldr	r3, [r3, #24]
 8003b96:	4972      	ldr	r1, [pc, #456]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d00a      	beq.n	8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003baa:	4b6d      	ldr	r3, [pc, #436]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003bac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bb0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	69db      	ldr	r3, [r3, #28]
 8003bb8:	4969      	ldr	r1, [pc, #420]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d00a      	beq.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003bcc:	4b64      	ldr	r3, [pc, #400]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003bce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bd2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6a1b      	ldr	r3, [r3, #32]
 8003bda:	4961      	ldr	r1, [pc, #388]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003bdc:	4313      	orrs	r3, r2
 8003bde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d00a      	beq.n	8003c04 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003bee:	4b5c      	ldr	r3, [pc, #368]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003bf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bf4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bfc:	4958      	ldr	r1, [pc, #352]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003bfe:	4313      	orrs	r3, r2
 8003c00:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d015      	beq.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003c10:	4b53      	ldr	r3, [pc, #332]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c16:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c1e:	4950      	ldr	r1, [pc, #320]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c20:	4313      	orrs	r3, r2
 8003c22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c2a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c2e:	d105      	bne.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003c30:	4b4b      	ldr	r3, [pc, #300]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c32:	68db      	ldr	r3, [r3, #12]
 8003c34:	4a4a      	ldr	r2, [pc, #296]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c36:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003c3a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d015      	beq.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003c48:	4b45      	ldr	r3, [pc, #276]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c4e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c56:	4942      	ldr	r1, [pc, #264]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c62:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c66:	d105      	bne.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003c68:	4b3d      	ldr	r3, [pc, #244]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c6a:	68db      	ldr	r3, [r3, #12]
 8003c6c:	4a3c      	ldr	r2, [pc, #240]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c6e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003c72:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d015      	beq.n	8003cac <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003c80:	4b37      	ldr	r3, [pc, #220]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c86:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c8e:	4934      	ldr	r1, [pc, #208]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c90:	4313      	orrs	r3, r2
 8003c92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c9a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003c9e:	d105      	bne.n	8003cac <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ca0:	4b2f      	ldr	r3, [pc, #188]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ca2:	68db      	ldr	r3, [r3, #12]
 8003ca4:	4a2e      	ldr	r2, [pc, #184]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ca6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003caa:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d015      	beq.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003cb8:	4b29      	ldr	r3, [pc, #164]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003cba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cbe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cc6:	4926      	ldr	r1, [pc, #152]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003cc8:	4313      	orrs	r3, r2
 8003cca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cd2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003cd6:	d105      	bne.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003cd8:	4b21      	ldr	r3, [pc, #132]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003cda:	68db      	ldr	r3, [r3, #12]
 8003cdc:	4a20      	ldr	r2, [pc, #128]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003cde:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003ce2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d015      	beq.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003cf0:	4b1b      	ldr	r3, [pc, #108]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003cf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cf6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cfe:	4918      	ldr	r1, [pc, #96]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d00:	4313      	orrs	r3, r2
 8003d02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d0a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003d0e:	d105      	bne.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d10:	4b13      	ldr	r3, [pc, #76]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d12:	68db      	ldr	r3, [r3, #12]
 8003d14:	4a12      	ldr	r2, [pc, #72]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d16:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003d1a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d015      	beq.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003d28:	4b0d      	ldr	r3, [pc, #52]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d2e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d36:	490a      	ldr	r1, [pc, #40]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d38:	4313      	orrs	r3, r2
 8003d3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d42:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003d46:	d105      	bne.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003d48:	4b05      	ldr	r3, [pc, #20]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d4a:	68db      	ldr	r3, [r3, #12]
 8003d4c:	4a04      	ldr	r2, [pc, #16]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d52:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003d54:	7cbb      	ldrb	r3, [r7, #18]
}
 8003d56:	4618      	mov	r0, r3
 8003d58:	3718      	adds	r7, #24
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	bd80      	pop	{r7, pc}
 8003d5e:	bf00      	nop
 8003d60:	40021000 	.word	0x40021000

08003d64 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b082      	sub	sp, #8
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d101      	bne.n	8003d76 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003d72:	2301      	movs	r3, #1
 8003d74:	e049      	b.n	8003e0a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d7c:	b2db      	uxtb	r3, r3
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d106      	bne.n	8003d90 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2200      	movs	r2, #0
 8003d86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003d8a:	6878      	ldr	r0, [r7, #4]
 8003d8c:	f7fd f83a 	bl	8000e04 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2202      	movs	r2, #2
 8003d94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681a      	ldr	r2, [r3, #0]
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	3304      	adds	r3, #4
 8003da0:	4619      	mov	r1, r3
 8003da2:	4610      	mov	r0, r2
 8003da4:	f000 fde2 	bl	800496c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2201      	movs	r2, #1
 8003dac:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2201      	movs	r2, #1
 8003db4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2201      	movs	r2, #1
 8003dbc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2201      	movs	r2, #1
 8003dc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2201      	movs	r2, #1
 8003dcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2201      	movs	r2, #1
 8003dd4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2201      	movs	r2, #1
 8003ddc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2201      	movs	r2, #1
 8003de4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2201      	movs	r2, #1
 8003dec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2201      	movs	r2, #1
 8003df4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2201      	movs	r2, #1
 8003dfc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2201      	movs	r2, #1
 8003e04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003e08:	2300      	movs	r3, #0
}
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	3708      	adds	r7, #8
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	bd80      	pop	{r7, pc}
	...

08003e14 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003e14:	b480      	push	{r7}
 8003e16:	b085      	sub	sp, #20
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e22:	b2db      	uxtb	r3, r3
 8003e24:	2b01      	cmp	r3, #1
 8003e26:	d001      	beq.n	8003e2c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003e28:	2301      	movs	r3, #1
 8003e2a:	e04a      	b.n	8003ec2 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2202      	movs	r2, #2
 8003e30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	68da      	ldr	r2, [r3, #12]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f042 0201 	orr.w	r2, r2, #1
 8003e42:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4a21      	ldr	r2, [pc, #132]	; (8003ed0 <HAL_TIM_Base_Start_IT+0xbc>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d018      	beq.n	8003e80 <HAL_TIM_Base_Start_IT+0x6c>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e56:	d013      	beq.n	8003e80 <HAL_TIM_Base_Start_IT+0x6c>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4a1d      	ldr	r2, [pc, #116]	; (8003ed4 <HAL_TIM_Base_Start_IT+0xc0>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d00e      	beq.n	8003e80 <HAL_TIM_Base_Start_IT+0x6c>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4a1c      	ldr	r2, [pc, #112]	; (8003ed8 <HAL_TIM_Base_Start_IT+0xc4>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d009      	beq.n	8003e80 <HAL_TIM_Base_Start_IT+0x6c>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4a1a      	ldr	r2, [pc, #104]	; (8003edc <HAL_TIM_Base_Start_IT+0xc8>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d004      	beq.n	8003e80 <HAL_TIM_Base_Start_IT+0x6c>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4a19      	ldr	r2, [pc, #100]	; (8003ee0 <HAL_TIM_Base_Start_IT+0xcc>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d115      	bne.n	8003eac <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	689a      	ldr	r2, [r3, #8]
 8003e86:	4b17      	ldr	r3, [pc, #92]	; (8003ee4 <HAL_TIM_Base_Start_IT+0xd0>)
 8003e88:	4013      	ands	r3, r2
 8003e8a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	2b06      	cmp	r3, #6
 8003e90:	d015      	beq.n	8003ebe <HAL_TIM_Base_Start_IT+0xaa>
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e98:	d011      	beq.n	8003ebe <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	681a      	ldr	r2, [r3, #0]
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f042 0201 	orr.w	r2, r2, #1
 8003ea8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003eaa:	e008      	b.n	8003ebe <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	681a      	ldr	r2, [r3, #0]
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f042 0201 	orr.w	r2, r2, #1
 8003eba:	601a      	str	r2, [r3, #0]
 8003ebc:	e000      	b.n	8003ec0 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ebe:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003ec0:	2300      	movs	r3, #0
}
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	3714      	adds	r7, #20
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ecc:	4770      	bx	lr
 8003ece:	bf00      	nop
 8003ed0:	40012c00 	.word	0x40012c00
 8003ed4:	40000400 	.word	0x40000400
 8003ed8:	40000800 	.word	0x40000800
 8003edc:	40013400 	.word	0x40013400
 8003ee0:	40014000 	.word	0x40014000
 8003ee4:	00010007 	.word	0x00010007

08003ee8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b082      	sub	sp, #8
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d101      	bne.n	8003efa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	e049      	b.n	8003f8e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f00:	b2db      	uxtb	r3, r3
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d106      	bne.n	8003f14 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003f0e:	6878      	ldr	r0, [r7, #4]
 8003f10:	f7fc ff46 	bl	8000da0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2202      	movs	r2, #2
 8003f18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681a      	ldr	r2, [r3, #0]
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	3304      	adds	r3, #4
 8003f24:	4619      	mov	r1, r3
 8003f26:	4610      	mov	r0, r2
 8003f28:	f000 fd20 	bl	800496c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2201      	movs	r2, #1
 8003f30:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2201      	movs	r2, #1
 8003f38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2201      	movs	r2, #1
 8003f40:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2201      	movs	r2, #1
 8003f48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2201      	movs	r2, #1
 8003f50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2201      	movs	r2, #1
 8003f58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2201      	movs	r2, #1
 8003f60:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2201      	movs	r2, #1
 8003f68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2201      	movs	r2, #1
 8003f70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2201      	movs	r2, #1
 8003f78:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2201      	movs	r2, #1
 8003f80:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2201      	movs	r2, #1
 8003f88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003f8c:	2300      	movs	r3, #0
}
 8003f8e:	4618      	mov	r0, r3
 8003f90:	3708      	adds	r7, #8
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bd80      	pop	{r7, pc}
	...

08003f98 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b084      	sub	sp, #16
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
 8003fa0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d109      	bne.n	8003fbc <HAL_TIM_PWM_Start+0x24>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003fae:	b2db      	uxtb	r3, r3
 8003fb0:	2b01      	cmp	r3, #1
 8003fb2:	bf14      	ite	ne
 8003fb4:	2301      	movne	r3, #1
 8003fb6:	2300      	moveq	r3, #0
 8003fb8:	b2db      	uxtb	r3, r3
 8003fba:	e03c      	b.n	8004036 <HAL_TIM_PWM_Start+0x9e>
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	2b04      	cmp	r3, #4
 8003fc0:	d109      	bne.n	8003fd6 <HAL_TIM_PWM_Start+0x3e>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003fc8:	b2db      	uxtb	r3, r3
 8003fca:	2b01      	cmp	r3, #1
 8003fcc:	bf14      	ite	ne
 8003fce:	2301      	movne	r3, #1
 8003fd0:	2300      	moveq	r3, #0
 8003fd2:	b2db      	uxtb	r3, r3
 8003fd4:	e02f      	b.n	8004036 <HAL_TIM_PWM_Start+0x9e>
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	2b08      	cmp	r3, #8
 8003fda:	d109      	bne.n	8003ff0 <HAL_TIM_PWM_Start+0x58>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003fe2:	b2db      	uxtb	r3, r3
 8003fe4:	2b01      	cmp	r3, #1
 8003fe6:	bf14      	ite	ne
 8003fe8:	2301      	movne	r3, #1
 8003fea:	2300      	moveq	r3, #0
 8003fec:	b2db      	uxtb	r3, r3
 8003fee:	e022      	b.n	8004036 <HAL_TIM_PWM_Start+0x9e>
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	2b0c      	cmp	r3, #12
 8003ff4:	d109      	bne.n	800400a <HAL_TIM_PWM_Start+0x72>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ffc:	b2db      	uxtb	r3, r3
 8003ffe:	2b01      	cmp	r3, #1
 8004000:	bf14      	ite	ne
 8004002:	2301      	movne	r3, #1
 8004004:	2300      	moveq	r3, #0
 8004006:	b2db      	uxtb	r3, r3
 8004008:	e015      	b.n	8004036 <HAL_TIM_PWM_Start+0x9e>
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	2b10      	cmp	r3, #16
 800400e:	d109      	bne.n	8004024 <HAL_TIM_PWM_Start+0x8c>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004016:	b2db      	uxtb	r3, r3
 8004018:	2b01      	cmp	r3, #1
 800401a:	bf14      	ite	ne
 800401c:	2301      	movne	r3, #1
 800401e:	2300      	moveq	r3, #0
 8004020:	b2db      	uxtb	r3, r3
 8004022:	e008      	b.n	8004036 <HAL_TIM_PWM_Start+0x9e>
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800402a:	b2db      	uxtb	r3, r3
 800402c:	2b01      	cmp	r3, #1
 800402e:	bf14      	ite	ne
 8004030:	2301      	movne	r3, #1
 8004032:	2300      	moveq	r3, #0
 8004034:	b2db      	uxtb	r3, r3
 8004036:	2b00      	cmp	r3, #0
 8004038:	d001      	beq.n	800403e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800403a:	2301      	movs	r3, #1
 800403c:	e097      	b.n	800416e <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d104      	bne.n	800404e <HAL_TIM_PWM_Start+0xb6>
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2202      	movs	r2, #2
 8004048:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800404c:	e023      	b.n	8004096 <HAL_TIM_PWM_Start+0xfe>
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	2b04      	cmp	r3, #4
 8004052:	d104      	bne.n	800405e <HAL_TIM_PWM_Start+0xc6>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2202      	movs	r2, #2
 8004058:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800405c:	e01b      	b.n	8004096 <HAL_TIM_PWM_Start+0xfe>
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	2b08      	cmp	r3, #8
 8004062:	d104      	bne.n	800406e <HAL_TIM_PWM_Start+0xd6>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2202      	movs	r2, #2
 8004068:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800406c:	e013      	b.n	8004096 <HAL_TIM_PWM_Start+0xfe>
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	2b0c      	cmp	r3, #12
 8004072:	d104      	bne.n	800407e <HAL_TIM_PWM_Start+0xe6>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2202      	movs	r2, #2
 8004078:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800407c:	e00b      	b.n	8004096 <HAL_TIM_PWM_Start+0xfe>
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	2b10      	cmp	r3, #16
 8004082:	d104      	bne.n	800408e <HAL_TIM_PWM_Start+0xf6>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2202      	movs	r2, #2
 8004088:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800408c:	e003      	b.n	8004096 <HAL_TIM_PWM_Start+0xfe>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2202      	movs	r2, #2
 8004092:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	2201      	movs	r2, #1
 800409c:	6839      	ldr	r1, [r7, #0]
 800409e:	4618      	mov	r0, r3
 80040a0:	f000 ffea 	bl	8005078 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	4a33      	ldr	r2, [pc, #204]	; (8004178 <HAL_TIM_PWM_Start+0x1e0>)
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d013      	beq.n	80040d6 <HAL_TIM_PWM_Start+0x13e>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4a32      	ldr	r2, [pc, #200]	; (800417c <HAL_TIM_PWM_Start+0x1e4>)
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d00e      	beq.n	80040d6 <HAL_TIM_PWM_Start+0x13e>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4a30      	ldr	r2, [pc, #192]	; (8004180 <HAL_TIM_PWM_Start+0x1e8>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d009      	beq.n	80040d6 <HAL_TIM_PWM_Start+0x13e>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	4a2f      	ldr	r2, [pc, #188]	; (8004184 <HAL_TIM_PWM_Start+0x1ec>)
 80040c8:	4293      	cmp	r3, r2
 80040ca:	d004      	beq.n	80040d6 <HAL_TIM_PWM_Start+0x13e>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4a2d      	ldr	r2, [pc, #180]	; (8004188 <HAL_TIM_PWM_Start+0x1f0>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d101      	bne.n	80040da <HAL_TIM_PWM_Start+0x142>
 80040d6:	2301      	movs	r3, #1
 80040d8:	e000      	b.n	80040dc <HAL_TIM_PWM_Start+0x144>
 80040da:	2300      	movs	r3, #0
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d007      	beq.n	80040f0 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80040ee:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4a20      	ldr	r2, [pc, #128]	; (8004178 <HAL_TIM_PWM_Start+0x1e0>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d018      	beq.n	800412c <HAL_TIM_PWM_Start+0x194>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004102:	d013      	beq.n	800412c <HAL_TIM_PWM_Start+0x194>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4a20      	ldr	r2, [pc, #128]	; (800418c <HAL_TIM_PWM_Start+0x1f4>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d00e      	beq.n	800412c <HAL_TIM_PWM_Start+0x194>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	4a1f      	ldr	r2, [pc, #124]	; (8004190 <HAL_TIM_PWM_Start+0x1f8>)
 8004114:	4293      	cmp	r3, r2
 8004116:	d009      	beq.n	800412c <HAL_TIM_PWM_Start+0x194>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4a17      	ldr	r2, [pc, #92]	; (800417c <HAL_TIM_PWM_Start+0x1e4>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d004      	beq.n	800412c <HAL_TIM_PWM_Start+0x194>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4a16      	ldr	r2, [pc, #88]	; (8004180 <HAL_TIM_PWM_Start+0x1e8>)
 8004128:	4293      	cmp	r3, r2
 800412a:	d115      	bne.n	8004158 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	689a      	ldr	r2, [r3, #8]
 8004132:	4b18      	ldr	r3, [pc, #96]	; (8004194 <HAL_TIM_PWM_Start+0x1fc>)
 8004134:	4013      	ands	r3, r2
 8004136:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	2b06      	cmp	r3, #6
 800413c:	d015      	beq.n	800416a <HAL_TIM_PWM_Start+0x1d2>
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004144:	d011      	beq.n	800416a <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	681a      	ldr	r2, [r3, #0]
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f042 0201 	orr.w	r2, r2, #1
 8004154:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004156:	e008      	b.n	800416a <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	681a      	ldr	r2, [r3, #0]
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f042 0201 	orr.w	r2, r2, #1
 8004166:	601a      	str	r2, [r3, #0]
 8004168:	e000      	b.n	800416c <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800416a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800416c:	2300      	movs	r3, #0
}
 800416e:	4618      	mov	r0, r3
 8004170:	3710      	adds	r7, #16
 8004172:	46bd      	mov	sp, r7
 8004174:	bd80      	pop	{r7, pc}
 8004176:	bf00      	nop
 8004178:	40012c00 	.word	0x40012c00
 800417c:	40013400 	.word	0x40013400
 8004180:	40014000 	.word	0x40014000
 8004184:	40014400 	.word	0x40014400
 8004188:	40014800 	.word	0x40014800
 800418c:	40000400 	.word	0x40000400
 8004190:	40000800 	.word	0x40000800
 8004194:	00010007 	.word	0x00010007

08004198 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b086      	sub	sp, #24
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
 80041a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d101      	bne.n	80041ac <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80041a8:	2301      	movs	r3, #1
 80041aa:	e097      	b.n	80042dc <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041b2:	b2db      	uxtb	r3, r3
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d106      	bne.n	80041c6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2200      	movs	r2, #0
 80041bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80041c0:	6878      	ldr	r0, [r7, #4]
 80041c2:	f7fc fd47 	bl	8000c54 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2202      	movs	r2, #2
 80041ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	689b      	ldr	r3, [r3, #8]
 80041d4:	687a      	ldr	r2, [r7, #4]
 80041d6:	6812      	ldr	r2, [r2, #0]
 80041d8:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 80041dc:	f023 0307 	bic.w	r3, r3, #7
 80041e0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681a      	ldr	r2, [r3, #0]
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	3304      	adds	r3, #4
 80041ea:	4619      	mov	r1, r3
 80041ec:	4610      	mov	r0, r2
 80041ee:	f000 fbbd 	bl	800496c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	689b      	ldr	r3, [r3, #8]
 80041f8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	699b      	ldr	r3, [r3, #24]
 8004200:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	6a1b      	ldr	r3, [r3, #32]
 8004208:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	697a      	ldr	r2, [r7, #20]
 8004210:	4313      	orrs	r3, r2
 8004212:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004214:	693b      	ldr	r3, [r7, #16]
 8004216:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800421a:	f023 0303 	bic.w	r3, r3, #3
 800421e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	689a      	ldr	r2, [r3, #8]
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	699b      	ldr	r3, [r3, #24]
 8004228:	021b      	lsls	r3, r3, #8
 800422a:	4313      	orrs	r3, r2
 800422c:	693a      	ldr	r2, [r7, #16]
 800422e:	4313      	orrs	r3, r2
 8004230:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004232:	693b      	ldr	r3, [r7, #16]
 8004234:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004238:	f023 030c 	bic.w	r3, r3, #12
 800423c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800423e:	693b      	ldr	r3, [r7, #16]
 8004240:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004244:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004248:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	68da      	ldr	r2, [r3, #12]
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	69db      	ldr	r3, [r3, #28]
 8004252:	021b      	lsls	r3, r3, #8
 8004254:	4313      	orrs	r3, r2
 8004256:	693a      	ldr	r2, [r7, #16]
 8004258:	4313      	orrs	r3, r2
 800425a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	691b      	ldr	r3, [r3, #16]
 8004260:	011a      	lsls	r2, r3, #4
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	6a1b      	ldr	r3, [r3, #32]
 8004266:	031b      	lsls	r3, r3, #12
 8004268:	4313      	orrs	r3, r2
 800426a:	693a      	ldr	r2, [r7, #16]
 800426c:	4313      	orrs	r3, r2
 800426e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004276:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800427e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	685a      	ldr	r2, [r3, #4]
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	695b      	ldr	r3, [r3, #20]
 8004288:	011b      	lsls	r3, r3, #4
 800428a:	4313      	orrs	r3, r2
 800428c:	68fa      	ldr	r2, [r7, #12]
 800428e:	4313      	orrs	r3, r2
 8004290:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	697a      	ldr	r2, [r7, #20]
 8004298:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	693a      	ldr	r2, [r7, #16]
 80042a0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	68fa      	ldr	r2, [r7, #12]
 80042a8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2201      	movs	r2, #1
 80042ae:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2201      	movs	r2, #1
 80042b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2201      	movs	r2, #1
 80042be:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2201      	movs	r2, #1
 80042c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2201      	movs	r2, #1
 80042ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2201      	movs	r2, #1
 80042d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80042da:	2300      	movs	r3, #0
}
 80042dc:	4618      	mov	r0, r3
 80042de:	3718      	adds	r7, #24
 80042e0:	46bd      	mov	sp, r7
 80042e2:	bd80      	pop	{r7, pc}

080042e4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b084      	sub	sp, #16
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
 80042ec:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80042f4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80042fc:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004304:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800430c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d110      	bne.n	8004336 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004314:	7bfb      	ldrb	r3, [r7, #15]
 8004316:	2b01      	cmp	r3, #1
 8004318:	d102      	bne.n	8004320 <HAL_TIM_Encoder_Start+0x3c>
     || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800431a:	7b7b      	ldrb	r3, [r7, #13]
 800431c:	2b01      	cmp	r3, #1
 800431e:	d001      	beq.n	8004324 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004320:	2301      	movs	r3, #1
 8004322:	e068      	b.n	80043f6 <HAL_TIM_Encoder_Start+0x112>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2202      	movs	r2, #2
 8004328:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2202      	movs	r2, #2
 8004330:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004334:	e031      	b.n	800439a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	2b04      	cmp	r3, #4
 800433a:	d110      	bne.n	800435e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800433c:	7bbb      	ldrb	r3, [r7, #14]
 800433e:	2b01      	cmp	r3, #1
 8004340:	d102      	bne.n	8004348 <HAL_TIM_Encoder_Start+0x64>
     || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004342:	7b3b      	ldrb	r3, [r7, #12]
 8004344:	2b01      	cmp	r3, #1
 8004346:	d001      	beq.n	800434c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004348:	2301      	movs	r3, #1
 800434a:	e054      	b.n	80043f6 <HAL_TIM_Encoder_Start+0x112>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2202      	movs	r2, #2
 8004350:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2202      	movs	r2, #2
 8004358:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800435c:	e01d      	b.n	800439a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800435e:	7bfb      	ldrb	r3, [r7, #15]
 8004360:	2b01      	cmp	r3, #1
 8004362:	d108      	bne.n	8004376 <HAL_TIM_Encoder_Start+0x92>
     || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004364:	7bbb      	ldrb	r3, [r7, #14]
 8004366:	2b01      	cmp	r3, #1
 8004368:	d105      	bne.n	8004376 <HAL_TIM_Encoder_Start+0x92>
     || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800436a:	7b7b      	ldrb	r3, [r7, #13]
 800436c:	2b01      	cmp	r3, #1
 800436e:	d102      	bne.n	8004376 <HAL_TIM_Encoder_Start+0x92>
     || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004370:	7b3b      	ldrb	r3, [r7, #12]
 8004372:	2b01      	cmp	r3, #1
 8004374:	d001      	beq.n	800437a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8004376:	2301      	movs	r3, #1
 8004378:	e03d      	b.n	80043f6 <HAL_TIM_Encoder_Start+0x112>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2202      	movs	r2, #2
 800437e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2202      	movs	r2, #2
 8004386:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2202      	movs	r2, #2
 800438e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2202      	movs	r2, #2
 8004396:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d002      	beq.n	80043a6 <HAL_TIM_Encoder_Start+0xc2>
 80043a0:	2b04      	cmp	r3, #4
 80043a2:	d008      	beq.n	80043b6 <HAL_TIM_Encoder_Start+0xd2>
 80043a4:	e00f      	b.n	80043c6 <HAL_TIM_Encoder_Start+0xe2>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	2201      	movs	r2, #1
 80043ac:	2100      	movs	r1, #0
 80043ae:	4618      	mov	r0, r3
 80043b0:	f000 fe62 	bl	8005078 <TIM_CCxChannelCmd>
      break;
 80043b4:	e016      	b.n	80043e4 <HAL_TIM_Encoder_Start+0x100>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	2201      	movs	r2, #1
 80043bc:	2104      	movs	r1, #4
 80043be:	4618      	mov	r0, r3
 80043c0:	f000 fe5a 	bl	8005078 <TIM_CCxChannelCmd>
      break;
 80043c4:	e00e      	b.n	80043e4 <HAL_TIM_Encoder_Start+0x100>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	2201      	movs	r2, #1
 80043cc:	2100      	movs	r1, #0
 80043ce:	4618      	mov	r0, r3
 80043d0:	f000 fe52 	bl	8005078 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	2201      	movs	r2, #1
 80043da:	2104      	movs	r1, #4
 80043dc:	4618      	mov	r0, r3
 80043de:	f000 fe4b 	bl	8005078 <TIM_CCxChannelCmd>
      break;
 80043e2:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	681a      	ldr	r2, [r3, #0]
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f042 0201 	orr.w	r2, r2, #1
 80043f2:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80043f4:	2300      	movs	r3, #0
}
 80043f6:	4618      	mov	r0, r3
 80043f8:	3710      	adds	r7, #16
 80043fa:	46bd      	mov	sp, r7
 80043fc:	bd80      	pop	{r7, pc}

080043fe <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80043fe:	b580      	push	{r7, lr}
 8004400:	b082      	sub	sp, #8
 8004402:	af00      	add	r7, sp, #0
 8004404:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	691b      	ldr	r3, [r3, #16]
 800440c:	f003 0302 	and.w	r3, r3, #2
 8004410:	2b02      	cmp	r3, #2
 8004412:	d122      	bne.n	800445a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	68db      	ldr	r3, [r3, #12]
 800441a:	f003 0302 	and.w	r3, r3, #2
 800441e:	2b02      	cmp	r3, #2
 8004420:	d11b      	bne.n	800445a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f06f 0202 	mvn.w	r2, #2
 800442a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2201      	movs	r2, #1
 8004430:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	699b      	ldr	r3, [r3, #24]
 8004438:	f003 0303 	and.w	r3, r3, #3
 800443c:	2b00      	cmp	r3, #0
 800443e:	d003      	beq.n	8004448 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004440:	6878      	ldr	r0, [r7, #4]
 8004442:	f000 fa75 	bl	8004930 <HAL_TIM_IC_CaptureCallback>
 8004446:	e005      	b.n	8004454 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004448:	6878      	ldr	r0, [r7, #4]
 800444a:	f000 fa67 	bl	800491c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800444e:	6878      	ldr	r0, [r7, #4]
 8004450:	f000 fa78 	bl	8004944 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2200      	movs	r2, #0
 8004458:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	691b      	ldr	r3, [r3, #16]
 8004460:	f003 0304 	and.w	r3, r3, #4
 8004464:	2b04      	cmp	r3, #4
 8004466:	d122      	bne.n	80044ae <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	68db      	ldr	r3, [r3, #12]
 800446e:	f003 0304 	and.w	r3, r3, #4
 8004472:	2b04      	cmp	r3, #4
 8004474:	d11b      	bne.n	80044ae <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f06f 0204 	mvn.w	r2, #4
 800447e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2202      	movs	r2, #2
 8004484:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	699b      	ldr	r3, [r3, #24]
 800448c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004490:	2b00      	cmp	r3, #0
 8004492:	d003      	beq.n	800449c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004494:	6878      	ldr	r0, [r7, #4]
 8004496:	f000 fa4b 	bl	8004930 <HAL_TIM_IC_CaptureCallback>
 800449a:	e005      	b.n	80044a8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800449c:	6878      	ldr	r0, [r7, #4]
 800449e:	f000 fa3d 	bl	800491c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044a2:	6878      	ldr	r0, [r7, #4]
 80044a4:	f000 fa4e 	bl	8004944 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2200      	movs	r2, #0
 80044ac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	691b      	ldr	r3, [r3, #16]
 80044b4:	f003 0308 	and.w	r3, r3, #8
 80044b8:	2b08      	cmp	r3, #8
 80044ba:	d122      	bne.n	8004502 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	68db      	ldr	r3, [r3, #12]
 80044c2:	f003 0308 	and.w	r3, r3, #8
 80044c6:	2b08      	cmp	r3, #8
 80044c8:	d11b      	bne.n	8004502 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f06f 0208 	mvn.w	r2, #8
 80044d2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2204      	movs	r2, #4
 80044d8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	69db      	ldr	r3, [r3, #28]
 80044e0:	f003 0303 	and.w	r3, r3, #3
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d003      	beq.n	80044f0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044e8:	6878      	ldr	r0, [r7, #4]
 80044ea:	f000 fa21 	bl	8004930 <HAL_TIM_IC_CaptureCallback>
 80044ee:	e005      	b.n	80044fc <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044f0:	6878      	ldr	r0, [r7, #4]
 80044f2:	f000 fa13 	bl	800491c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044f6:	6878      	ldr	r0, [r7, #4]
 80044f8:	f000 fa24 	bl	8004944 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2200      	movs	r2, #0
 8004500:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	691b      	ldr	r3, [r3, #16]
 8004508:	f003 0310 	and.w	r3, r3, #16
 800450c:	2b10      	cmp	r3, #16
 800450e:	d122      	bne.n	8004556 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	68db      	ldr	r3, [r3, #12]
 8004516:	f003 0310 	and.w	r3, r3, #16
 800451a:	2b10      	cmp	r3, #16
 800451c:	d11b      	bne.n	8004556 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f06f 0210 	mvn.w	r2, #16
 8004526:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2208      	movs	r2, #8
 800452c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	69db      	ldr	r3, [r3, #28]
 8004534:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004538:	2b00      	cmp	r3, #0
 800453a:	d003      	beq.n	8004544 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800453c:	6878      	ldr	r0, [r7, #4]
 800453e:	f000 f9f7 	bl	8004930 <HAL_TIM_IC_CaptureCallback>
 8004542:	e005      	b.n	8004550 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004544:	6878      	ldr	r0, [r7, #4]
 8004546:	f000 f9e9 	bl	800491c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800454a:	6878      	ldr	r0, [r7, #4]
 800454c:	f000 f9fa 	bl	8004944 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2200      	movs	r2, #0
 8004554:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	691b      	ldr	r3, [r3, #16]
 800455c:	f003 0301 	and.w	r3, r3, #1
 8004560:	2b01      	cmp	r3, #1
 8004562:	d10e      	bne.n	8004582 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	68db      	ldr	r3, [r3, #12]
 800456a:	f003 0301 	and.w	r3, r3, #1
 800456e:	2b01      	cmp	r3, #1
 8004570:	d107      	bne.n	8004582 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f06f 0201 	mvn.w	r2, #1
 800457a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800457c:	6878      	ldr	r0, [r7, #4]
 800457e:	f7fc fb33 	bl	8000be8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	691b      	ldr	r3, [r3, #16]
 8004588:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800458c:	2b80      	cmp	r3, #128	; 0x80
 800458e:	d10e      	bne.n	80045ae <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	68db      	ldr	r3, [r3, #12]
 8004596:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800459a:	2b80      	cmp	r3, #128	; 0x80
 800459c:	d107      	bne.n	80045ae <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80045a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80045a8:	6878      	ldr	r0, [r7, #4]
 80045aa:	f000 feb7 	bl	800531c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	691b      	ldr	r3, [r3, #16]
 80045b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045bc:	d10e      	bne.n	80045dc <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	68db      	ldr	r3, [r3, #12]
 80045c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045c8:	2b80      	cmp	r3, #128	; 0x80
 80045ca:	d107      	bne.n	80045dc <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80045d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80045d6:	6878      	ldr	r0, [r7, #4]
 80045d8:	f000 feaa 	bl	8005330 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	691b      	ldr	r3, [r3, #16]
 80045e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045e6:	2b40      	cmp	r3, #64	; 0x40
 80045e8:	d10e      	bne.n	8004608 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	68db      	ldr	r3, [r3, #12]
 80045f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045f4:	2b40      	cmp	r3, #64	; 0x40
 80045f6:	d107      	bne.n	8004608 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004600:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004602:	6878      	ldr	r0, [r7, #4]
 8004604:	f000 f9a8 	bl	8004958 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	691b      	ldr	r3, [r3, #16]
 800460e:	f003 0320 	and.w	r3, r3, #32
 8004612:	2b20      	cmp	r3, #32
 8004614:	d10e      	bne.n	8004634 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	68db      	ldr	r3, [r3, #12]
 800461c:	f003 0320 	and.w	r3, r3, #32
 8004620:	2b20      	cmp	r3, #32
 8004622:	d107      	bne.n	8004634 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f06f 0220 	mvn.w	r2, #32
 800462c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800462e:	6878      	ldr	r0, [r7, #4]
 8004630:	f000 fe6a 	bl	8005308 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	691b      	ldr	r3, [r3, #16]
 800463a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800463e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004642:	d10f      	bne.n	8004664 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	68db      	ldr	r3, [r3, #12]
 800464a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800464e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004652:	d107      	bne.n	8004664 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800465c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800465e:	6878      	ldr	r0, [r7, #4]
 8004660:	f000 fe70 	bl	8005344 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	691b      	ldr	r3, [r3, #16]
 800466a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800466e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004672:	d10f      	bne.n	8004694 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	68db      	ldr	r3, [r3, #12]
 800467a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800467e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004682:	d107      	bne.n	8004694 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800468c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800468e:	6878      	ldr	r0, [r7, #4]
 8004690:	f000 fe62 	bl	8005358 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	691b      	ldr	r3, [r3, #16]
 800469a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800469e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80046a2:	d10f      	bne.n	80046c4 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	68db      	ldr	r3, [r3, #12]
 80046aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80046b2:	d107      	bne.n	80046c4 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 80046bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80046be:	6878      	ldr	r0, [r7, #4]
 80046c0:	f000 fe54 	bl	800536c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	691b      	ldr	r3, [r3, #16]
 80046ca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80046ce:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80046d2:	d10f      	bne.n	80046f4 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	68db      	ldr	r3, [r3, #12]
 80046da:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80046de:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80046e2:	d107      	bne.n	80046f4 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 80046ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80046ee:	6878      	ldr	r0, [r7, #4]
 80046f0:	f000 fe46 	bl	8005380 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80046f4:	bf00      	nop
 80046f6:	3708      	adds	r7, #8
 80046f8:	46bd      	mov	sp, r7
 80046fa:	bd80      	pop	{r7, pc}

080046fc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b084      	sub	sp, #16
 8004700:	af00      	add	r7, sp, #0
 8004702:	60f8      	str	r0, [r7, #12]
 8004704:	60b9      	str	r1, [r7, #8]
 8004706:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800470e:	2b01      	cmp	r3, #1
 8004710:	d101      	bne.n	8004716 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004712:	2302      	movs	r3, #2
 8004714:	e0fd      	b.n	8004912 <HAL_TIM_PWM_ConfigChannel+0x216>
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	2201      	movs	r2, #1
 800471a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2b14      	cmp	r3, #20
 8004722:	f200 80f0 	bhi.w	8004906 <HAL_TIM_PWM_ConfigChannel+0x20a>
 8004726:	a201      	add	r2, pc, #4	; (adr r2, 800472c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8004728:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800472c:	08004781 	.word	0x08004781
 8004730:	08004907 	.word	0x08004907
 8004734:	08004907 	.word	0x08004907
 8004738:	08004907 	.word	0x08004907
 800473c:	080047c1 	.word	0x080047c1
 8004740:	08004907 	.word	0x08004907
 8004744:	08004907 	.word	0x08004907
 8004748:	08004907 	.word	0x08004907
 800474c:	08004803 	.word	0x08004803
 8004750:	08004907 	.word	0x08004907
 8004754:	08004907 	.word	0x08004907
 8004758:	08004907 	.word	0x08004907
 800475c:	08004843 	.word	0x08004843
 8004760:	08004907 	.word	0x08004907
 8004764:	08004907 	.word	0x08004907
 8004768:	08004907 	.word	0x08004907
 800476c:	08004885 	.word	0x08004885
 8004770:	08004907 	.word	0x08004907
 8004774:	08004907 	.word	0x08004907
 8004778:	08004907 	.word	0x08004907
 800477c:	080048c5 	.word	0x080048c5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	68b9      	ldr	r1, [r7, #8]
 8004786:	4618      	mov	r0, r3
 8004788:	f000 f980 	bl	8004a8c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	699a      	ldr	r2, [r3, #24]
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f042 0208 	orr.w	r2, r2, #8
 800479a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	699a      	ldr	r2, [r3, #24]
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f022 0204 	bic.w	r2, r2, #4
 80047aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	6999      	ldr	r1, [r3, #24]
 80047b2:	68bb      	ldr	r3, [r7, #8]
 80047b4:	691a      	ldr	r2, [r3, #16]
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	430a      	orrs	r2, r1
 80047bc:	619a      	str	r2, [r3, #24]
      break;
 80047be:	e0a3      	b.n	8004908 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	68b9      	ldr	r1, [r7, #8]
 80047c6:	4618      	mov	r0, r3
 80047c8:	f000 f9f0 	bl	8004bac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	699a      	ldr	r2, [r3, #24]
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80047da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	699a      	ldr	r2, [r3, #24]
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80047ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	6999      	ldr	r1, [r3, #24]
 80047f2:	68bb      	ldr	r3, [r7, #8]
 80047f4:	691b      	ldr	r3, [r3, #16]
 80047f6:	021a      	lsls	r2, r3, #8
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	430a      	orrs	r2, r1
 80047fe:	619a      	str	r2, [r3, #24]
      break;
 8004800:	e082      	b.n	8004908 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	68b9      	ldr	r1, [r7, #8]
 8004808:	4618      	mov	r0, r3
 800480a:	f000 fa59 	bl	8004cc0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	69da      	ldr	r2, [r3, #28]
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f042 0208 	orr.w	r2, r2, #8
 800481c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	69da      	ldr	r2, [r3, #28]
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f022 0204 	bic.w	r2, r2, #4
 800482c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	69d9      	ldr	r1, [r3, #28]
 8004834:	68bb      	ldr	r3, [r7, #8]
 8004836:	691a      	ldr	r2, [r3, #16]
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	430a      	orrs	r2, r1
 800483e:	61da      	str	r2, [r3, #28]
      break;
 8004840:	e062      	b.n	8004908 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	68b9      	ldr	r1, [r7, #8]
 8004848:	4618      	mov	r0, r3
 800484a:	f000 fac1 	bl	8004dd0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	69da      	ldr	r2, [r3, #28]
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800485c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	69da      	ldr	r2, [r3, #28]
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800486c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	69d9      	ldr	r1, [r3, #28]
 8004874:	68bb      	ldr	r3, [r7, #8]
 8004876:	691b      	ldr	r3, [r3, #16]
 8004878:	021a      	lsls	r2, r3, #8
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	430a      	orrs	r2, r1
 8004880:	61da      	str	r2, [r3, #28]
      break;
 8004882:	e041      	b.n	8004908 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	68b9      	ldr	r1, [r7, #8]
 800488a:	4618      	mov	r0, r3
 800488c:	f000 fb2a 	bl	8004ee4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f042 0208 	orr.w	r2, r2, #8
 800489e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f022 0204 	bic.w	r2, r2, #4
 80048ae:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80048b6:	68bb      	ldr	r3, [r7, #8]
 80048b8:	691a      	ldr	r2, [r3, #16]
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	430a      	orrs	r2, r1
 80048c0:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80048c2:	e021      	b.n	8004908 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	68b9      	ldr	r1, [r7, #8]
 80048ca:	4618      	mov	r0, r3
 80048cc:	f000 fb6e 	bl	8004fac <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80048de:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048ee:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80048f6:	68bb      	ldr	r3, [r7, #8]
 80048f8:	691b      	ldr	r3, [r3, #16]
 80048fa:	021a      	lsls	r2, r3, #8
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	430a      	orrs	r2, r1
 8004902:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8004904:	e000      	b.n	8004908 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8004906:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	2200      	movs	r2, #0
 800490c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004910:	2300      	movs	r3, #0
}
 8004912:	4618      	mov	r0, r3
 8004914:	3710      	adds	r7, #16
 8004916:	46bd      	mov	sp, r7
 8004918:	bd80      	pop	{r7, pc}
 800491a:	bf00      	nop

0800491c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800491c:	b480      	push	{r7}
 800491e:	b083      	sub	sp, #12
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004924:	bf00      	nop
 8004926:	370c      	adds	r7, #12
 8004928:	46bd      	mov	sp, r7
 800492a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492e:	4770      	bx	lr

08004930 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004930:	b480      	push	{r7}
 8004932:	b083      	sub	sp, #12
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004938:	bf00      	nop
 800493a:	370c      	adds	r7, #12
 800493c:	46bd      	mov	sp, r7
 800493e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004942:	4770      	bx	lr

08004944 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004944:	b480      	push	{r7}
 8004946:	b083      	sub	sp, #12
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800494c:	bf00      	nop
 800494e:	370c      	adds	r7, #12
 8004950:	46bd      	mov	sp, r7
 8004952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004956:	4770      	bx	lr

08004958 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004958:	b480      	push	{r7}
 800495a:	b083      	sub	sp, #12
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004960:	bf00      	nop
 8004962:	370c      	adds	r7, #12
 8004964:	46bd      	mov	sp, r7
 8004966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496a:	4770      	bx	lr

0800496c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800496c:	b480      	push	{r7}
 800496e:	b085      	sub	sp, #20
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
 8004974:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	4a3c      	ldr	r2, [pc, #240]	; (8004a70 <TIM_Base_SetConfig+0x104>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d00f      	beq.n	80049a4 <TIM_Base_SetConfig+0x38>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800498a:	d00b      	beq.n	80049a4 <TIM_Base_SetConfig+0x38>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	4a39      	ldr	r2, [pc, #228]	; (8004a74 <TIM_Base_SetConfig+0x108>)
 8004990:	4293      	cmp	r3, r2
 8004992:	d007      	beq.n	80049a4 <TIM_Base_SetConfig+0x38>
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	4a38      	ldr	r2, [pc, #224]	; (8004a78 <TIM_Base_SetConfig+0x10c>)
 8004998:	4293      	cmp	r3, r2
 800499a:	d003      	beq.n	80049a4 <TIM_Base_SetConfig+0x38>
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	4a37      	ldr	r2, [pc, #220]	; (8004a7c <TIM_Base_SetConfig+0x110>)
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d108      	bne.n	80049b6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	685b      	ldr	r3, [r3, #4]
 80049b0:	68fa      	ldr	r2, [r7, #12]
 80049b2:	4313      	orrs	r3, r2
 80049b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	4a2d      	ldr	r2, [pc, #180]	; (8004a70 <TIM_Base_SetConfig+0x104>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d01b      	beq.n	80049f6 <TIM_Base_SetConfig+0x8a>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049c4:	d017      	beq.n	80049f6 <TIM_Base_SetConfig+0x8a>
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	4a2a      	ldr	r2, [pc, #168]	; (8004a74 <TIM_Base_SetConfig+0x108>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d013      	beq.n	80049f6 <TIM_Base_SetConfig+0x8a>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	4a29      	ldr	r2, [pc, #164]	; (8004a78 <TIM_Base_SetConfig+0x10c>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d00f      	beq.n	80049f6 <TIM_Base_SetConfig+0x8a>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	4a28      	ldr	r2, [pc, #160]	; (8004a7c <TIM_Base_SetConfig+0x110>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d00b      	beq.n	80049f6 <TIM_Base_SetConfig+0x8a>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	4a27      	ldr	r2, [pc, #156]	; (8004a80 <TIM_Base_SetConfig+0x114>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d007      	beq.n	80049f6 <TIM_Base_SetConfig+0x8a>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	4a26      	ldr	r2, [pc, #152]	; (8004a84 <TIM_Base_SetConfig+0x118>)
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d003      	beq.n	80049f6 <TIM_Base_SetConfig+0x8a>
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	4a25      	ldr	r2, [pc, #148]	; (8004a88 <TIM_Base_SetConfig+0x11c>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d108      	bne.n	8004a08 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	68db      	ldr	r3, [r3, #12]
 8004a02:	68fa      	ldr	r2, [r7, #12]
 8004a04:	4313      	orrs	r3, r2
 8004a06:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	695b      	ldr	r3, [r3, #20]
 8004a12:	4313      	orrs	r3, r2
 8004a14:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	68fa      	ldr	r2, [r7, #12]
 8004a1a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	689a      	ldr	r2, [r3, #8]
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	681a      	ldr	r2, [r3, #0]
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	4a10      	ldr	r2, [pc, #64]	; (8004a70 <TIM_Base_SetConfig+0x104>)
 8004a30:	4293      	cmp	r3, r2
 8004a32:	d00f      	beq.n	8004a54 <TIM_Base_SetConfig+0xe8>
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	4a11      	ldr	r2, [pc, #68]	; (8004a7c <TIM_Base_SetConfig+0x110>)
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d00b      	beq.n	8004a54 <TIM_Base_SetConfig+0xe8>
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	4a10      	ldr	r2, [pc, #64]	; (8004a80 <TIM_Base_SetConfig+0x114>)
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d007      	beq.n	8004a54 <TIM_Base_SetConfig+0xe8>
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	4a0f      	ldr	r2, [pc, #60]	; (8004a84 <TIM_Base_SetConfig+0x118>)
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	d003      	beq.n	8004a54 <TIM_Base_SetConfig+0xe8>
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	4a0e      	ldr	r2, [pc, #56]	; (8004a88 <TIM_Base_SetConfig+0x11c>)
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d103      	bne.n	8004a5c <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	691a      	ldr	r2, [r3, #16]
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2201      	movs	r2, #1
 8004a60:	615a      	str	r2, [r3, #20]
}
 8004a62:	bf00      	nop
 8004a64:	3714      	adds	r7, #20
 8004a66:	46bd      	mov	sp, r7
 8004a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6c:	4770      	bx	lr
 8004a6e:	bf00      	nop
 8004a70:	40012c00 	.word	0x40012c00
 8004a74:	40000400 	.word	0x40000400
 8004a78:	40000800 	.word	0x40000800
 8004a7c:	40013400 	.word	0x40013400
 8004a80:	40014000 	.word	0x40014000
 8004a84:	40014400 	.word	0x40014400
 8004a88:	40014800 	.word	0x40014800

08004a8c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004a8c:	b480      	push	{r7}
 8004a8e:	b087      	sub	sp, #28
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
 8004a94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6a1b      	ldr	r3, [r3, #32]
 8004a9a:	f023 0201 	bic.w	r2, r3, #1
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6a1b      	ldr	r3, [r3, #32]
 8004aa6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	685b      	ldr	r3, [r3, #4]
 8004aac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	699b      	ldr	r3, [r3, #24]
 8004ab2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004aba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004abe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	f023 0303 	bic.w	r3, r3, #3
 8004ac6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	68fa      	ldr	r2, [r7, #12]
 8004ace:	4313      	orrs	r3, r2
 8004ad0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004ad2:	697b      	ldr	r3, [r7, #20]
 8004ad4:	f023 0302 	bic.w	r3, r3, #2
 8004ad8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	689b      	ldr	r3, [r3, #8]
 8004ade:	697a      	ldr	r2, [r7, #20]
 8004ae0:	4313      	orrs	r3, r2
 8004ae2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	4a2c      	ldr	r2, [pc, #176]	; (8004b98 <TIM_OC1_SetConfig+0x10c>)
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d00f      	beq.n	8004b0c <TIM_OC1_SetConfig+0x80>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	4a2b      	ldr	r2, [pc, #172]	; (8004b9c <TIM_OC1_SetConfig+0x110>)
 8004af0:	4293      	cmp	r3, r2
 8004af2:	d00b      	beq.n	8004b0c <TIM_OC1_SetConfig+0x80>
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	4a2a      	ldr	r2, [pc, #168]	; (8004ba0 <TIM_OC1_SetConfig+0x114>)
 8004af8:	4293      	cmp	r3, r2
 8004afa:	d007      	beq.n	8004b0c <TIM_OC1_SetConfig+0x80>
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	4a29      	ldr	r2, [pc, #164]	; (8004ba4 <TIM_OC1_SetConfig+0x118>)
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d003      	beq.n	8004b0c <TIM_OC1_SetConfig+0x80>
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	4a28      	ldr	r2, [pc, #160]	; (8004ba8 <TIM_OC1_SetConfig+0x11c>)
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d10c      	bne.n	8004b26 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004b0c:	697b      	ldr	r3, [r7, #20]
 8004b0e:	f023 0308 	bic.w	r3, r3, #8
 8004b12:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	68db      	ldr	r3, [r3, #12]
 8004b18:	697a      	ldr	r2, [r7, #20]
 8004b1a:	4313      	orrs	r3, r2
 8004b1c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004b1e:	697b      	ldr	r3, [r7, #20]
 8004b20:	f023 0304 	bic.w	r3, r3, #4
 8004b24:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	4a1b      	ldr	r2, [pc, #108]	; (8004b98 <TIM_OC1_SetConfig+0x10c>)
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d00f      	beq.n	8004b4e <TIM_OC1_SetConfig+0xc2>
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	4a1a      	ldr	r2, [pc, #104]	; (8004b9c <TIM_OC1_SetConfig+0x110>)
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d00b      	beq.n	8004b4e <TIM_OC1_SetConfig+0xc2>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	4a19      	ldr	r2, [pc, #100]	; (8004ba0 <TIM_OC1_SetConfig+0x114>)
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d007      	beq.n	8004b4e <TIM_OC1_SetConfig+0xc2>
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	4a18      	ldr	r2, [pc, #96]	; (8004ba4 <TIM_OC1_SetConfig+0x118>)
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d003      	beq.n	8004b4e <TIM_OC1_SetConfig+0xc2>
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	4a17      	ldr	r2, [pc, #92]	; (8004ba8 <TIM_OC1_SetConfig+0x11c>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d111      	bne.n	8004b72 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004b4e:	693b      	ldr	r3, [r7, #16]
 8004b50:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b54:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004b56:	693b      	ldr	r3, [r7, #16]
 8004b58:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004b5c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	695b      	ldr	r3, [r3, #20]
 8004b62:	693a      	ldr	r2, [r7, #16]
 8004b64:	4313      	orrs	r3, r2
 8004b66:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	699b      	ldr	r3, [r3, #24]
 8004b6c:	693a      	ldr	r2, [r7, #16]
 8004b6e:	4313      	orrs	r3, r2
 8004b70:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	693a      	ldr	r2, [r7, #16]
 8004b76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	68fa      	ldr	r2, [r7, #12]
 8004b7c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	685a      	ldr	r2, [r3, #4]
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	697a      	ldr	r2, [r7, #20]
 8004b8a:	621a      	str	r2, [r3, #32]
}
 8004b8c:	bf00      	nop
 8004b8e:	371c      	adds	r7, #28
 8004b90:	46bd      	mov	sp, r7
 8004b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b96:	4770      	bx	lr
 8004b98:	40012c00 	.word	0x40012c00
 8004b9c:	40013400 	.word	0x40013400
 8004ba0:	40014000 	.word	0x40014000
 8004ba4:	40014400 	.word	0x40014400
 8004ba8:	40014800 	.word	0x40014800

08004bac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004bac:	b480      	push	{r7}
 8004bae:	b087      	sub	sp, #28
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
 8004bb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6a1b      	ldr	r3, [r3, #32]
 8004bba:	f023 0210 	bic.w	r2, r3, #16
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6a1b      	ldr	r3, [r3, #32]
 8004bc6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	685b      	ldr	r3, [r3, #4]
 8004bcc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	699b      	ldr	r3, [r3, #24]
 8004bd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004bda:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004bde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004be6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	021b      	lsls	r3, r3, #8
 8004bee:	68fa      	ldr	r2, [r7, #12]
 8004bf0:	4313      	orrs	r3, r2
 8004bf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004bf4:	697b      	ldr	r3, [r7, #20]
 8004bf6:	f023 0320 	bic.w	r3, r3, #32
 8004bfa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	689b      	ldr	r3, [r3, #8]
 8004c00:	011b      	lsls	r3, r3, #4
 8004c02:	697a      	ldr	r2, [r7, #20]
 8004c04:	4313      	orrs	r3, r2
 8004c06:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	4a28      	ldr	r2, [pc, #160]	; (8004cac <TIM_OC2_SetConfig+0x100>)
 8004c0c:	4293      	cmp	r3, r2
 8004c0e:	d003      	beq.n	8004c18 <TIM_OC2_SetConfig+0x6c>
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	4a27      	ldr	r2, [pc, #156]	; (8004cb0 <TIM_OC2_SetConfig+0x104>)
 8004c14:	4293      	cmp	r3, r2
 8004c16:	d10d      	bne.n	8004c34 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004c18:	697b      	ldr	r3, [r7, #20]
 8004c1a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004c1e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	68db      	ldr	r3, [r3, #12]
 8004c24:	011b      	lsls	r3, r3, #4
 8004c26:	697a      	ldr	r2, [r7, #20]
 8004c28:	4313      	orrs	r3, r2
 8004c2a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004c2c:	697b      	ldr	r3, [r7, #20]
 8004c2e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c32:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	4a1d      	ldr	r2, [pc, #116]	; (8004cac <TIM_OC2_SetConfig+0x100>)
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	d00f      	beq.n	8004c5c <TIM_OC2_SetConfig+0xb0>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	4a1c      	ldr	r2, [pc, #112]	; (8004cb0 <TIM_OC2_SetConfig+0x104>)
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d00b      	beq.n	8004c5c <TIM_OC2_SetConfig+0xb0>
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	4a1b      	ldr	r2, [pc, #108]	; (8004cb4 <TIM_OC2_SetConfig+0x108>)
 8004c48:	4293      	cmp	r3, r2
 8004c4a:	d007      	beq.n	8004c5c <TIM_OC2_SetConfig+0xb0>
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	4a1a      	ldr	r2, [pc, #104]	; (8004cb8 <TIM_OC2_SetConfig+0x10c>)
 8004c50:	4293      	cmp	r3, r2
 8004c52:	d003      	beq.n	8004c5c <TIM_OC2_SetConfig+0xb0>
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	4a19      	ldr	r2, [pc, #100]	; (8004cbc <TIM_OC2_SetConfig+0x110>)
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d113      	bne.n	8004c84 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004c5c:	693b      	ldr	r3, [r7, #16]
 8004c5e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004c62:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004c64:	693b      	ldr	r3, [r7, #16]
 8004c66:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004c6a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	695b      	ldr	r3, [r3, #20]
 8004c70:	009b      	lsls	r3, r3, #2
 8004c72:	693a      	ldr	r2, [r7, #16]
 8004c74:	4313      	orrs	r3, r2
 8004c76:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	699b      	ldr	r3, [r3, #24]
 8004c7c:	009b      	lsls	r3, r3, #2
 8004c7e:	693a      	ldr	r2, [r7, #16]
 8004c80:	4313      	orrs	r3, r2
 8004c82:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	693a      	ldr	r2, [r7, #16]
 8004c88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	68fa      	ldr	r2, [r7, #12]
 8004c8e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	685a      	ldr	r2, [r3, #4]
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	697a      	ldr	r2, [r7, #20]
 8004c9c:	621a      	str	r2, [r3, #32]
}
 8004c9e:	bf00      	nop
 8004ca0:	371c      	adds	r7, #28
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca8:	4770      	bx	lr
 8004caa:	bf00      	nop
 8004cac:	40012c00 	.word	0x40012c00
 8004cb0:	40013400 	.word	0x40013400
 8004cb4:	40014000 	.word	0x40014000
 8004cb8:	40014400 	.word	0x40014400
 8004cbc:	40014800 	.word	0x40014800

08004cc0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004cc0:	b480      	push	{r7}
 8004cc2:	b087      	sub	sp, #28
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
 8004cc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6a1b      	ldr	r3, [r3, #32]
 8004cce:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6a1b      	ldr	r3, [r3, #32]
 8004cda:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	685b      	ldr	r3, [r3, #4]
 8004ce0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	69db      	ldr	r3, [r3, #28]
 8004ce6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004cee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cf2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	f023 0303 	bic.w	r3, r3, #3
 8004cfa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	68fa      	ldr	r2, [r7, #12]
 8004d02:	4313      	orrs	r3, r2
 8004d04:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004d06:	697b      	ldr	r3, [r7, #20]
 8004d08:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004d0c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	689b      	ldr	r3, [r3, #8]
 8004d12:	021b      	lsls	r3, r3, #8
 8004d14:	697a      	ldr	r2, [r7, #20]
 8004d16:	4313      	orrs	r3, r2
 8004d18:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	4a27      	ldr	r2, [pc, #156]	; (8004dbc <TIM_OC3_SetConfig+0xfc>)
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d003      	beq.n	8004d2a <TIM_OC3_SetConfig+0x6a>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	4a26      	ldr	r2, [pc, #152]	; (8004dc0 <TIM_OC3_SetConfig+0x100>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d10d      	bne.n	8004d46 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004d2a:	697b      	ldr	r3, [r7, #20]
 8004d2c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004d30:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	68db      	ldr	r3, [r3, #12]
 8004d36:	021b      	lsls	r3, r3, #8
 8004d38:	697a      	ldr	r2, [r7, #20]
 8004d3a:	4313      	orrs	r3, r2
 8004d3c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004d3e:	697b      	ldr	r3, [r7, #20]
 8004d40:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004d44:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	4a1c      	ldr	r2, [pc, #112]	; (8004dbc <TIM_OC3_SetConfig+0xfc>)
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	d00f      	beq.n	8004d6e <TIM_OC3_SetConfig+0xae>
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	4a1b      	ldr	r2, [pc, #108]	; (8004dc0 <TIM_OC3_SetConfig+0x100>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d00b      	beq.n	8004d6e <TIM_OC3_SetConfig+0xae>
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	4a1a      	ldr	r2, [pc, #104]	; (8004dc4 <TIM_OC3_SetConfig+0x104>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d007      	beq.n	8004d6e <TIM_OC3_SetConfig+0xae>
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	4a19      	ldr	r2, [pc, #100]	; (8004dc8 <TIM_OC3_SetConfig+0x108>)
 8004d62:	4293      	cmp	r3, r2
 8004d64:	d003      	beq.n	8004d6e <TIM_OC3_SetConfig+0xae>
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	4a18      	ldr	r2, [pc, #96]	; (8004dcc <TIM_OC3_SetConfig+0x10c>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d113      	bne.n	8004d96 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004d6e:	693b      	ldr	r3, [r7, #16]
 8004d70:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004d74:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004d76:	693b      	ldr	r3, [r7, #16]
 8004d78:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004d7c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	695b      	ldr	r3, [r3, #20]
 8004d82:	011b      	lsls	r3, r3, #4
 8004d84:	693a      	ldr	r2, [r7, #16]
 8004d86:	4313      	orrs	r3, r2
 8004d88:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	699b      	ldr	r3, [r3, #24]
 8004d8e:	011b      	lsls	r3, r3, #4
 8004d90:	693a      	ldr	r2, [r7, #16]
 8004d92:	4313      	orrs	r3, r2
 8004d94:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	693a      	ldr	r2, [r7, #16]
 8004d9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	68fa      	ldr	r2, [r7, #12]
 8004da0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	685a      	ldr	r2, [r3, #4]
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	697a      	ldr	r2, [r7, #20]
 8004dae:	621a      	str	r2, [r3, #32]
}
 8004db0:	bf00      	nop
 8004db2:	371c      	adds	r7, #28
 8004db4:	46bd      	mov	sp, r7
 8004db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dba:	4770      	bx	lr
 8004dbc:	40012c00 	.word	0x40012c00
 8004dc0:	40013400 	.word	0x40013400
 8004dc4:	40014000 	.word	0x40014000
 8004dc8:	40014400 	.word	0x40014400
 8004dcc:	40014800 	.word	0x40014800

08004dd0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004dd0:	b480      	push	{r7}
 8004dd2:	b087      	sub	sp, #28
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
 8004dd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6a1b      	ldr	r3, [r3, #32]
 8004dde:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6a1b      	ldr	r3, [r3, #32]
 8004dea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	685b      	ldr	r3, [r3, #4]
 8004df0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	69db      	ldr	r3, [r3, #28]
 8004df6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004dfe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e0a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	021b      	lsls	r3, r3, #8
 8004e12:	68fa      	ldr	r2, [r7, #12]
 8004e14:	4313      	orrs	r3, r2
 8004e16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004e18:	697b      	ldr	r3, [r7, #20]
 8004e1a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004e1e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	689b      	ldr	r3, [r3, #8]
 8004e24:	031b      	lsls	r3, r3, #12
 8004e26:	697a      	ldr	r2, [r7, #20]
 8004e28:	4313      	orrs	r3, r2
 8004e2a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	4a28      	ldr	r2, [pc, #160]	; (8004ed0 <TIM_OC4_SetConfig+0x100>)
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d003      	beq.n	8004e3c <TIM_OC4_SetConfig+0x6c>
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	4a27      	ldr	r2, [pc, #156]	; (8004ed4 <TIM_OC4_SetConfig+0x104>)
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d10d      	bne.n	8004e58 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8004e3c:	697b      	ldr	r3, [r7, #20]
 8004e3e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004e42:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	68db      	ldr	r3, [r3, #12]
 8004e48:	031b      	lsls	r3, r3, #12
 8004e4a:	697a      	ldr	r2, [r7, #20]
 8004e4c:	4313      	orrs	r3, r2
 8004e4e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8004e50:	697b      	ldr	r3, [r7, #20]
 8004e52:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004e56:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	4a1d      	ldr	r2, [pc, #116]	; (8004ed0 <TIM_OC4_SetConfig+0x100>)
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d00f      	beq.n	8004e80 <TIM_OC4_SetConfig+0xb0>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	4a1c      	ldr	r2, [pc, #112]	; (8004ed4 <TIM_OC4_SetConfig+0x104>)
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d00b      	beq.n	8004e80 <TIM_OC4_SetConfig+0xb0>
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	4a1b      	ldr	r2, [pc, #108]	; (8004ed8 <TIM_OC4_SetConfig+0x108>)
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d007      	beq.n	8004e80 <TIM_OC4_SetConfig+0xb0>
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	4a1a      	ldr	r2, [pc, #104]	; (8004edc <TIM_OC4_SetConfig+0x10c>)
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d003      	beq.n	8004e80 <TIM_OC4_SetConfig+0xb0>
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	4a19      	ldr	r2, [pc, #100]	; (8004ee0 <TIM_OC4_SetConfig+0x110>)
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	d113      	bne.n	8004ea8 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004e80:	693b      	ldr	r3, [r7, #16]
 8004e82:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004e86:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8004e88:	693b      	ldr	r3, [r7, #16]
 8004e8a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004e8e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	695b      	ldr	r3, [r3, #20]
 8004e94:	019b      	lsls	r3, r3, #6
 8004e96:	693a      	ldr	r2, [r7, #16]
 8004e98:	4313      	orrs	r3, r2
 8004e9a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	699b      	ldr	r3, [r3, #24]
 8004ea0:	019b      	lsls	r3, r3, #6
 8004ea2:	693a      	ldr	r2, [r7, #16]
 8004ea4:	4313      	orrs	r3, r2
 8004ea6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	693a      	ldr	r2, [r7, #16]
 8004eac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	68fa      	ldr	r2, [r7, #12]
 8004eb2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	685a      	ldr	r2, [r3, #4]
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	697a      	ldr	r2, [r7, #20]
 8004ec0:	621a      	str	r2, [r3, #32]
}
 8004ec2:	bf00      	nop
 8004ec4:	371c      	adds	r7, #28
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ecc:	4770      	bx	lr
 8004ece:	bf00      	nop
 8004ed0:	40012c00 	.word	0x40012c00
 8004ed4:	40013400 	.word	0x40013400
 8004ed8:	40014000 	.word	0x40014000
 8004edc:	40014400 	.word	0x40014400
 8004ee0:	40014800 	.word	0x40014800

08004ee4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004ee4:	b480      	push	{r7}
 8004ee6:	b087      	sub	sp, #28
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
 8004eec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6a1b      	ldr	r3, [r3, #32]
 8004ef2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6a1b      	ldr	r3, [r3, #32]
 8004efe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	685b      	ldr	r3, [r3, #4]
 8004f04:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	68fa      	ldr	r2, [r7, #12]
 8004f1e:	4313      	orrs	r3, r2
 8004f20:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004f22:	693b      	ldr	r3, [r7, #16]
 8004f24:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004f28:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	689b      	ldr	r3, [r3, #8]
 8004f2e:	041b      	lsls	r3, r3, #16
 8004f30:	693a      	ldr	r2, [r7, #16]
 8004f32:	4313      	orrs	r3, r2
 8004f34:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	4a17      	ldr	r2, [pc, #92]	; (8004f98 <TIM_OC5_SetConfig+0xb4>)
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d00f      	beq.n	8004f5e <TIM_OC5_SetConfig+0x7a>
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	4a16      	ldr	r2, [pc, #88]	; (8004f9c <TIM_OC5_SetConfig+0xb8>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d00b      	beq.n	8004f5e <TIM_OC5_SetConfig+0x7a>
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	4a15      	ldr	r2, [pc, #84]	; (8004fa0 <TIM_OC5_SetConfig+0xbc>)
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	d007      	beq.n	8004f5e <TIM_OC5_SetConfig+0x7a>
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	4a14      	ldr	r2, [pc, #80]	; (8004fa4 <TIM_OC5_SetConfig+0xc0>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d003      	beq.n	8004f5e <TIM_OC5_SetConfig+0x7a>
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	4a13      	ldr	r2, [pc, #76]	; (8004fa8 <TIM_OC5_SetConfig+0xc4>)
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d109      	bne.n	8004f72 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004f5e:	697b      	ldr	r3, [r7, #20]
 8004f60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f64:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	695b      	ldr	r3, [r3, #20]
 8004f6a:	021b      	lsls	r3, r3, #8
 8004f6c:	697a      	ldr	r2, [r7, #20]
 8004f6e:	4313      	orrs	r3, r2
 8004f70:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	697a      	ldr	r2, [r7, #20]
 8004f76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	68fa      	ldr	r2, [r7, #12]
 8004f7c:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	685a      	ldr	r2, [r3, #4]
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	693a      	ldr	r2, [r7, #16]
 8004f8a:	621a      	str	r2, [r3, #32]
}
 8004f8c:	bf00      	nop
 8004f8e:	371c      	adds	r7, #28
 8004f90:	46bd      	mov	sp, r7
 8004f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f96:	4770      	bx	lr
 8004f98:	40012c00 	.word	0x40012c00
 8004f9c:	40013400 	.word	0x40013400
 8004fa0:	40014000 	.word	0x40014000
 8004fa4:	40014400 	.word	0x40014400
 8004fa8:	40014800 	.word	0x40014800

08004fac <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004fac:	b480      	push	{r7}
 8004fae:	b087      	sub	sp, #28
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
 8004fb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6a1b      	ldr	r3, [r3, #32]
 8004fba:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6a1b      	ldr	r3, [r3, #32]
 8004fc6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	685b      	ldr	r3, [r3, #4]
 8004fcc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004fda:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004fde:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	021b      	lsls	r3, r3, #8
 8004fe6:	68fa      	ldr	r2, [r7, #12]
 8004fe8:	4313      	orrs	r3, r2
 8004fea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004fec:	693b      	ldr	r3, [r7, #16]
 8004fee:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004ff2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	689b      	ldr	r3, [r3, #8]
 8004ff8:	051b      	lsls	r3, r3, #20
 8004ffa:	693a      	ldr	r2, [r7, #16]
 8004ffc:	4313      	orrs	r3, r2
 8004ffe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	4a18      	ldr	r2, [pc, #96]	; (8005064 <TIM_OC6_SetConfig+0xb8>)
 8005004:	4293      	cmp	r3, r2
 8005006:	d00f      	beq.n	8005028 <TIM_OC6_SetConfig+0x7c>
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	4a17      	ldr	r2, [pc, #92]	; (8005068 <TIM_OC6_SetConfig+0xbc>)
 800500c:	4293      	cmp	r3, r2
 800500e:	d00b      	beq.n	8005028 <TIM_OC6_SetConfig+0x7c>
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	4a16      	ldr	r2, [pc, #88]	; (800506c <TIM_OC6_SetConfig+0xc0>)
 8005014:	4293      	cmp	r3, r2
 8005016:	d007      	beq.n	8005028 <TIM_OC6_SetConfig+0x7c>
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	4a15      	ldr	r2, [pc, #84]	; (8005070 <TIM_OC6_SetConfig+0xc4>)
 800501c:	4293      	cmp	r3, r2
 800501e:	d003      	beq.n	8005028 <TIM_OC6_SetConfig+0x7c>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	4a14      	ldr	r2, [pc, #80]	; (8005074 <TIM_OC6_SetConfig+0xc8>)
 8005024:	4293      	cmp	r3, r2
 8005026:	d109      	bne.n	800503c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005028:	697b      	ldr	r3, [r7, #20]
 800502a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800502e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	695b      	ldr	r3, [r3, #20]
 8005034:	029b      	lsls	r3, r3, #10
 8005036:	697a      	ldr	r2, [r7, #20]
 8005038:	4313      	orrs	r3, r2
 800503a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	697a      	ldr	r2, [r7, #20]
 8005040:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	68fa      	ldr	r2, [r7, #12]
 8005046:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	685a      	ldr	r2, [r3, #4]
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	693a      	ldr	r2, [r7, #16]
 8005054:	621a      	str	r2, [r3, #32]
}
 8005056:	bf00      	nop
 8005058:	371c      	adds	r7, #28
 800505a:	46bd      	mov	sp, r7
 800505c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005060:	4770      	bx	lr
 8005062:	bf00      	nop
 8005064:	40012c00 	.word	0x40012c00
 8005068:	40013400 	.word	0x40013400
 800506c:	40014000 	.word	0x40014000
 8005070:	40014400 	.word	0x40014400
 8005074:	40014800 	.word	0x40014800

08005078 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005078:	b480      	push	{r7}
 800507a:	b087      	sub	sp, #28
 800507c:	af00      	add	r7, sp, #0
 800507e:	60f8      	str	r0, [r7, #12]
 8005080:	60b9      	str	r1, [r7, #8]
 8005082:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005084:	68bb      	ldr	r3, [r7, #8]
 8005086:	f003 031f 	and.w	r3, r3, #31
 800508a:	2201      	movs	r2, #1
 800508c:	fa02 f303 	lsl.w	r3, r2, r3
 8005090:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	6a1a      	ldr	r2, [r3, #32]
 8005096:	697b      	ldr	r3, [r7, #20]
 8005098:	43db      	mvns	r3, r3
 800509a:	401a      	ands	r2, r3
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	6a1a      	ldr	r2, [r3, #32]
 80050a4:	68bb      	ldr	r3, [r7, #8]
 80050a6:	f003 031f 	and.w	r3, r3, #31
 80050aa:	6879      	ldr	r1, [r7, #4]
 80050ac:	fa01 f303 	lsl.w	r3, r1, r3
 80050b0:	431a      	orrs	r2, r3
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	621a      	str	r2, [r3, #32]
}
 80050b6:	bf00      	nop
 80050b8:	371c      	adds	r7, #28
 80050ba:	46bd      	mov	sp, r7
 80050bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c0:	4770      	bx	lr
	...

080050c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80050c4:	b480      	push	{r7}
 80050c6:	b085      	sub	sp, #20
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
 80050cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050d4:	2b01      	cmp	r3, #1
 80050d6:	d101      	bne.n	80050dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80050d8:	2302      	movs	r3, #2
 80050da:	e065      	b.n	80051a8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2201      	movs	r2, #1
 80050e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2202      	movs	r2, #2
 80050e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	685b      	ldr	r3, [r3, #4]
 80050f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	689b      	ldr	r3, [r3, #8]
 80050fa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	4a2c      	ldr	r2, [pc, #176]	; (80051b4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d004      	beq.n	8005110 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	4a2b      	ldr	r2, [pc, #172]	; (80051b8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800510c:	4293      	cmp	r3, r2
 800510e:	d108      	bne.n	8005122 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005116:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	685b      	ldr	r3, [r3, #4]
 800511c:	68fa      	ldr	r2, [r7, #12]
 800511e:	4313      	orrs	r3, r2
 8005120:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8005128:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800512c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	68fa      	ldr	r2, [r7, #12]
 8005134:	4313      	orrs	r3, r2
 8005136:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	68fa      	ldr	r2, [r7, #12]
 800513e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	4a1b      	ldr	r2, [pc, #108]	; (80051b4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005146:	4293      	cmp	r3, r2
 8005148:	d018      	beq.n	800517c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005152:	d013      	beq.n	800517c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	4a18      	ldr	r2, [pc, #96]	; (80051bc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d00e      	beq.n	800517c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	4a17      	ldr	r2, [pc, #92]	; (80051c0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005164:	4293      	cmp	r3, r2
 8005166:	d009      	beq.n	800517c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	4a12      	ldr	r2, [pc, #72]	; (80051b8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d004      	beq.n	800517c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	4a13      	ldr	r2, [pc, #76]	; (80051c4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005178:	4293      	cmp	r3, r2
 800517a:	d10c      	bne.n	8005196 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800517c:	68bb      	ldr	r3, [r7, #8]
 800517e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005182:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	689b      	ldr	r3, [r3, #8]
 8005188:	68ba      	ldr	r2, [r7, #8]
 800518a:	4313      	orrs	r3, r2
 800518c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	68ba      	ldr	r2, [r7, #8]
 8005194:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2201      	movs	r2, #1
 800519a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2200      	movs	r2, #0
 80051a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80051a6:	2300      	movs	r3, #0
}
 80051a8:	4618      	mov	r0, r3
 80051aa:	3714      	adds	r7, #20
 80051ac:	46bd      	mov	sp, r7
 80051ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b2:	4770      	bx	lr
 80051b4:	40012c00 	.word	0x40012c00
 80051b8:	40013400 	.word	0x40013400
 80051bc:	40000400 	.word	0x40000400
 80051c0:	40000800 	.word	0x40000800
 80051c4:	40014000 	.word	0x40014000

080051c8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80051c8:	b480      	push	{r7}
 80051ca:	b085      	sub	sp, #20
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
 80051d0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80051d2:	2300      	movs	r3, #0
 80051d4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051dc:	2b01      	cmp	r3, #1
 80051de:	d101      	bne.n	80051e4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80051e0:	2302      	movs	r3, #2
 80051e2:	e087      	b.n	80052f4 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2201      	movs	r2, #1
 80051e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	68db      	ldr	r3, [r3, #12]
 80051f6:	4313      	orrs	r3, r2
 80051f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	689b      	ldr	r3, [r3, #8]
 8005204:	4313      	orrs	r3, r2
 8005206:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	685b      	ldr	r3, [r3, #4]
 8005212:	4313      	orrs	r3, r2
 8005214:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	4313      	orrs	r3, r2
 8005222:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	691b      	ldr	r3, [r3, #16]
 800522e:	4313      	orrs	r3, r2
 8005230:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	695b      	ldr	r3, [r3, #20]
 800523c:	4313      	orrs	r3, r2
 800523e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800524a:	4313      	orrs	r3, r2
 800524c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	699b      	ldr	r3, [r3, #24]
 8005258:	041b      	lsls	r3, r3, #16
 800525a:	4313      	orrs	r3, r2
 800525c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	4a27      	ldr	r2, [pc, #156]	; (8005300 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8005264:	4293      	cmp	r3, r2
 8005266:	d004      	beq.n	8005272 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	4a25      	ldr	r2, [pc, #148]	; (8005304 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d106      	bne.n	8005280 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	69db      	ldr	r3, [r3, #28]
 800527c:	4313      	orrs	r3, r2
 800527e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	4a1e      	ldr	r2, [pc, #120]	; (8005300 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8005286:	4293      	cmp	r3, r2
 8005288:	d004      	beq.n	8005294 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	4a1d      	ldr	r2, [pc, #116]	; (8005304 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8005290:	4293      	cmp	r3, r2
 8005292:	d126      	bne.n	80052e2 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800529e:	051b      	lsls	r3, r3, #20
 80052a0:	4313      	orrs	r3, r2
 80052a2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	6a1b      	ldr	r3, [r3, #32]
 80052ae:	4313      	orrs	r3, r2
 80052b0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052bc:	4313      	orrs	r3, r2
 80052be:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	4a0e      	ldr	r2, [pc, #56]	; (8005300 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d004      	beq.n	80052d4 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	4a0d      	ldr	r2, [pc, #52]	; (8005304 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80052d0:	4293      	cmp	r3, r2
 80052d2:	d106      	bne.n	80052e2 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052de:	4313      	orrs	r3, r2
 80052e0:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	68fa      	ldr	r2, [r7, #12]
 80052e8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2200      	movs	r2, #0
 80052ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80052f2:	2300      	movs	r3, #0
}
 80052f4:	4618      	mov	r0, r3
 80052f6:	3714      	adds	r7, #20
 80052f8:	46bd      	mov	sp, r7
 80052fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fe:	4770      	bx	lr
 8005300:	40012c00 	.word	0x40012c00
 8005304:	40013400 	.word	0x40013400

08005308 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005308:	b480      	push	{r7}
 800530a:	b083      	sub	sp, #12
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005310:	bf00      	nop
 8005312:	370c      	adds	r7, #12
 8005314:	46bd      	mov	sp, r7
 8005316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531a:	4770      	bx	lr

0800531c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800531c:	b480      	push	{r7}
 800531e:	b083      	sub	sp, #12
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005324:	bf00      	nop
 8005326:	370c      	adds	r7, #12
 8005328:	46bd      	mov	sp, r7
 800532a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532e:	4770      	bx	lr

08005330 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005330:	b480      	push	{r7}
 8005332:	b083      	sub	sp, #12
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005338:	bf00      	nop
 800533a:	370c      	adds	r7, #12
 800533c:	46bd      	mov	sp, r7
 800533e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005342:	4770      	bx	lr

08005344 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8005344:	b480      	push	{r7}
 8005346:	b083      	sub	sp, #12
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800534c:	bf00      	nop
 800534e:	370c      	adds	r7, #12
 8005350:	46bd      	mov	sp, r7
 8005352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005356:	4770      	bx	lr

08005358 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8005358:	b480      	push	{r7}
 800535a:	b083      	sub	sp, #12
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8005360:	bf00      	nop
 8005362:	370c      	adds	r7, #12
 8005364:	46bd      	mov	sp, r7
 8005366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536a:	4770      	bx	lr

0800536c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800536c:	b480      	push	{r7}
 800536e:	b083      	sub	sp, #12
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8005374:	bf00      	nop
 8005376:	370c      	adds	r7, #12
 8005378:	46bd      	mov	sp, r7
 800537a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537e:	4770      	bx	lr

08005380 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8005380:	b480      	push	{r7}
 8005382:	b083      	sub	sp, #12
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8005388:	bf00      	nop
 800538a:	370c      	adds	r7, #12
 800538c:	46bd      	mov	sp, r7
 800538e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005392:	4770      	bx	lr

08005394 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8005394:	b480      	push	{r7}
 8005396:	b085      	sub	sp, #20
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2200      	movs	r2, #0
 80053a0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80053a4:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80053a8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	b29a      	uxth	r2, r3
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80053b4:	2300      	movs	r3, #0
}
 80053b6:	4618      	mov	r0, r3
 80053b8:	3714      	adds	r7, #20
 80053ba:	46bd      	mov	sp, r7
 80053bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c0:	4770      	bx	lr

080053c2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80053c2:	b480      	push	{r7}
 80053c4:	b085      	sub	sp, #20
 80053c6:	af00      	add	r7, sp, #0
 80053c8:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80053ca:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80053ce:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80053d6:	b29a      	uxth	r2, r3
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	b29b      	uxth	r3, r3
 80053dc:	43db      	mvns	r3, r3
 80053de:	b29b      	uxth	r3, r3
 80053e0:	4013      	ands	r3, r2
 80053e2:	b29a      	uxth	r2, r3
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80053ea:	2300      	movs	r3, #0
}
 80053ec:	4618      	mov	r0, r3
 80053ee:	3714      	adds	r7, #20
 80053f0:	46bd      	mov	sp, r7
 80053f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f6:	4770      	bx	lr

080053f8 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80053f8:	b084      	sub	sp, #16
 80053fa:	b480      	push	{r7}
 80053fc:	b083      	sub	sp, #12
 80053fe:	af00      	add	r7, sp, #0
 8005400:	6078      	str	r0, [r7, #4]
 8005402:	f107 0014 	add.w	r0, r7, #20
 8005406:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2201      	movs	r2, #1
 800540e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0U;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2200      	movs	r2, #0
 8005416:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0U;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	2200      	movs	r2, #0
 800541e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	2200      	movs	r2, #0
 8005426:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800542a:	2300      	movs	r3, #0
}
 800542c:	4618      	mov	r0, r3
 800542e:	370c      	adds	r7, #12
 8005430:	46bd      	mov	sp, r7
 8005432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005436:	b004      	add	sp, #16
 8005438:	4770      	bx	lr
	...

0800543c <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800543c:	b480      	push	{r7}
 800543e:	b09b      	sub	sp, #108	; 0x6c
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
 8005444:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8005446:	2300      	movs	r3, #0
 8005448:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800544c:	687a      	ldr	r2, [r7, #4]
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	781b      	ldrb	r3, [r3, #0]
 8005452:	009b      	lsls	r3, r3, #2
 8005454:	4413      	add	r3, r2
 8005456:	881b      	ldrh	r3, [r3, #0]
 8005458:	b29b      	uxth	r3, r3
 800545a:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800545e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005462:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	78db      	ldrb	r3, [r3, #3]
 800546a:	2b03      	cmp	r3, #3
 800546c:	d81f      	bhi.n	80054ae <USB_ActivateEndpoint+0x72>
 800546e:	a201      	add	r2, pc, #4	; (adr r2, 8005474 <USB_ActivateEndpoint+0x38>)
 8005470:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005474:	08005485 	.word	0x08005485
 8005478:	080054a1 	.word	0x080054a1
 800547c:	080054b7 	.word	0x080054b7
 8005480:	08005493 	.word	0x08005493
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8005484:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005488:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800548c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8005490:	e012      	b.n	80054b8 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8005492:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005496:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800549a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800549e:	e00b      	b.n	80054b8 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80054a0:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80054a4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80054a8:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80054ac:	e004      	b.n	80054b8 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80054ae:	2301      	movs	r3, #1
 80054b0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 80054b4:	e000      	b.n	80054b8 <USB_ActivateEndpoint+0x7c>
      break;
 80054b6:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80054b8:	687a      	ldr	r2, [r7, #4]
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	781b      	ldrb	r3, [r3, #0]
 80054be:	009b      	lsls	r3, r3, #2
 80054c0:	441a      	add	r2, r3
 80054c2:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80054c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80054ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80054ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054d6:	b29b      	uxth	r3, r3
 80054d8:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80054da:	687a      	ldr	r2, [r7, #4]
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	781b      	ldrb	r3, [r3, #0]
 80054e0:	009b      	lsls	r3, r3, #2
 80054e2:	4413      	add	r3, r2
 80054e4:	881b      	ldrh	r3, [r3, #0]
 80054e6:	b29b      	uxth	r3, r3
 80054e8:	b21b      	sxth	r3, r3
 80054ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054f2:	b21a      	sxth	r2, r3
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	781b      	ldrb	r3, [r3, #0]
 80054f8:	b21b      	sxth	r3, r3
 80054fa:	4313      	orrs	r3, r2
 80054fc:	b21b      	sxth	r3, r3
 80054fe:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8005502:	687a      	ldr	r2, [r7, #4]
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	781b      	ldrb	r3, [r3, #0]
 8005508:	009b      	lsls	r3, r3, #2
 800550a:	441a      	add	r2, r3
 800550c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8005510:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005514:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005518:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800551c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005520:	b29b      	uxth	r3, r3
 8005522:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	7b1b      	ldrb	r3, [r3, #12]
 8005528:	2b00      	cmp	r3, #0
 800552a:	f040 8149 	bne.w	80057c0 <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	785b      	ldrb	r3, [r3, #1]
 8005532:	2b00      	cmp	r3, #0
 8005534:	f000 8084 	beq.w	8005640 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	617b      	str	r3, [r7, #20]
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005542:	b29b      	uxth	r3, r3
 8005544:	461a      	mov	r2, r3
 8005546:	697b      	ldr	r3, [r7, #20]
 8005548:	4413      	add	r3, r2
 800554a:	617b      	str	r3, [r7, #20]
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	781b      	ldrb	r3, [r3, #0]
 8005550:	00da      	lsls	r2, r3, #3
 8005552:	697b      	ldr	r3, [r7, #20]
 8005554:	4413      	add	r3, r2
 8005556:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800555a:	613b      	str	r3, [r7, #16]
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	88db      	ldrh	r3, [r3, #6]
 8005560:	085b      	lsrs	r3, r3, #1
 8005562:	b29b      	uxth	r3, r3
 8005564:	005b      	lsls	r3, r3, #1
 8005566:	b29a      	uxth	r2, r3
 8005568:	693b      	ldr	r3, [r7, #16]
 800556a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800556c:	687a      	ldr	r2, [r7, #4]
 800556e:	683b      	ldr	r3, [r7, #0]
 8005570:	781b      	ldrb	r3, [r3, #0]
 8005572:	009b      	lsls	r3, r3, #2
 8005574:	4413      	add	r3, r2
 8005576:	881b      	ldrh	r3, [r3, #0]
 8005578:	81fb      	strh	r3, [r7, #14]
 800557a:	89fb      	ldrh	r3, [r7, #14]
 800557c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005580:	2b00      	cmp	r3, #0
 8005582:	d01b      	beq.n	80055bc <USB_ActivateEndpoint+0x180>
 8005584:	687a      	ldr	r2, [r7, #4]
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	781b      	ldrb	r3, [r3, #0]
 800558a:	009b      	lsls	r3, r3, #2
 800558c:	4413      	add	r3, r2
 800558e:	881b      	ldrh	r3, [r3, #0]
 8005590:	b29b      	uxth	r3, r3
 8005592:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005596:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800559a:	81bb      	strh	r3, [r7, #12]
 800559c:	687a      	ldr	r2, [r7, #4]
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	781b      	ldrb	r3, [r3, #0]
 80055a2:	009b      	lsls	r3, r3, #2
 80055a4:	441a      	add	r2, r3
 80055a6:	89bb      	ldrh	r3, [r7, #12]
 80055a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80055ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80055b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80055b4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80055b8:	b29b      	uxth	r3, r3
 80055ba:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	78db      	ldrb	r3, [r3, #3]
 80055c0:	2b01      	cmp	r3, #1
 80055c2:	d020      	beq.n	8005606 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80055c4:	687a      	ldr	r2, [r7, #4]
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	781b      	ldrb	r3, [r3, #0]
 80055ca:	009b      	lsls	r3, r3, #2
 80055cc:	4413      	add	r3, r2
 80055ce:	881b      	ldrh	r3, [r3, #0]
 80055d0:	b29b      	uxth	r3, r3
 80055d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80055da:	813b      	strh	r3, [r7, #8]
 80055dc:	893b      	ldrh	r3, [r7, #8]
 80055de:	f083 0320 	eor.w	r3, r3, #32
 80055e2:	813b      	strh	r3, [r7, #8]
 80055e4:	687a      	ldr	r2, [r7, #4]
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	781b      	ldrb	r3, [r3, #0]
 80055ea:	009b      	lsls	r3, r3, #2
 80055ec:	441a      	add	r2, r3
 80055ee:	893b      	ldrh	r3, [r7, #8]
 80055f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80055f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80055f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80055fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005600:	b29b      	uxth	r3, r3
 8005602:	8013      	strh	r3, [r2, #0]
 8005604:	e27f      	b.n	8005b06 <USB_ActivateEndpoint+0x6ca>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005606:	687a      	ldr	r2, [r7, #4]
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	781b      	ldrb	r3, [r3, #0]
 800560c:	009b      	lsls	r3, r3, #2
 800560e:	4413      	add	r3, r2
 8005610:	881b      	ldrh	r3, [r3, #0]
 8005612:	b29b      	uxth	r3, r3
 8005614:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005618:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800561c:	817b      	strh	r3, [r7, #10]
 800561e:	687a      	ldr	r2, [r7, #4]
 8005620:	683b      	ldr	r3, [r7, #0]
 8005622:	781b      	ldrb	r3, [r3, #0]
 8005624:	009b      	lsls	r3, r3, #2
 8005626:	441a      	add	r2, r3
 8005628:	897b      	ldrh	r3, [r7, #10]
 800562a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800562e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005632:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005636:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800563a:	b29b      	uxth	r3, r3
 800563c:	8013      	strh	r3, [r2, #0]
 800563e:	e262      	b.n	8005b06 <USB_ActivateEndpoint+0x6ca>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800564a:	b29b      	uxth	r3, r3
 800564c:	461a      	mov	r2, r3
 800564e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005650:	4413      	add	r3, r2
 8005652:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	781b      	ldrb	r3, [r3, #0]
 8005658:	00da      	lsls	r2, r3, #3
 800565a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800565c:	4413      	add	r3, r2
 800565e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005662:	62bb      	str	r3, [r7, #40]	; 0x28
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	88db      	ldrh	r3, [r3, #6]
 8005668:	085b      	lsrs	r3, r3, #1
 800566a:	b29b      	uxth	r3, r3
 800566c:	005b      	lsls	r3, r3, #1
 800566e:	b29a      	uxth	r2, r3
 8005670:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005672:	801a      	strh	r2, [r3, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	627b      	str	r3, [r7, #36]	; 0x24
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800567e:	b29b      	uxth	r3, r3
 8005680:	461a      	mov	r2, r3
 8005682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005684:	4413      	add	r3, r2
 8005686:	627b      	str	r3, [r7, #36]	; 0x24
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	781b      	ldrb	r3, [r3, #0]
 800568c:	00da      	lsls	r2, r3, #3
 800568e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005690:	4413      	add	r3, r2
 8005692:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005696:	623b      	str	r3, [r7, #32]
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	691b      	ldr	r3, [r3, #16]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d112      	bne.n	80056c6 <USB_ActivateEndpoint+0x28a>
 80056a0:	6a3b      	ldr	r3, [r7, #32]
 80056a2:	881b      	ldrh	r3, [r3, #0]
 80056a4:	b29b      	uxth	r3, r3
 80056a6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80056aa:	b29a      	uxth	r2, r3
 80056ac:	6a3b      	ldr	r3, [r7, #32]
 80056ae:	801a      	strh	r2, [r3, #0]
 80056b0:	6a3b      	ldr	r3, [r7, #32]
 80056b2:	881b      	ldrh	r3, [r3, #0]
 80056b4:	b29b      	uxth	r3, r3
 80056b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80056ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80056be:	b29a      	uxth	r2, r3
 80056c0:	6a3b      	ldr	r3, [r7, #32]
 80056c2:	801a      	strh	r2, [r3, #0]
 80056c4:	e02f      	b.n	8005726 <USB_ActivateEndpoint+0x2ea>
 80056c6:	683b      	ldr	r3, [r7, #0]
 80056c8:	691b      	ldr	r3, [r3, #16]
 80056ca:	2b3e      	cmp	r3, #62	; 0x3e
 80056cc:	d813      	bhi.n	80056f6 <USB_ActivateEndpoint+0x2ba>
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	691b      	ldr	r3, [r3, #16]
 80056d2:	085b      	lsrs	r3, r3, #1
 80056d4:	663b      	str	r3, [r7, #96]	; 0x60
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	691b      	ldr	r3, [r3, #16]
 80056da:	f003 0301 	and.w	r3, r3, #1
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d002      	beq.n	80056e8 <USB_ActivateEndpoint+0x2ac>
 80056e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80056e4:	3301      	adds	r3, #1
 80056e6:	663b      	str	r3, [r7, #96]	; 0x60
 80056e8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80056ea:	b29b      	uxth	r3, r3
 80056ec:	029b      	lsls	r3, r3, #10
 80056ee:	b29a      	uxth	r2, r3
 80056f0:	6a3b      	ldr	r3, [r7, #32]
 80056f2:	801a      	strh	r2, [r3, #0]
 80056f4:	e017      	b.n	8005726 <USB_ActivateEndpoint+0x2ea>
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	691b      	ldr	r3, [r3, #16]
 80056fa:	095b      	lsrs	r3, r3, #5
 80056fc:	663b      	str	r3, [r7, #96]	; 0x60
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	691b      	ldr	r3, [r3, #16]
 8005702:	f003 031f 	and.w	r3, r3, #31
 8005706:	2b00      	cmp	r3, #0
 8005708:	d102      	bne.n	8005710 <USB_ActivateEndpoint+0x2d4>
 800570a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800570c:	3b01      	subs	r3, #1
 800570e:	663b      	str	r3, [r7, #96]	; 0x60
 8005710:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005712:	b29b      	uxth	r3, r3
 8005714:	029b      	lsls	r3, r3, #10
 8005716:	b29b      	uxth	r3, r3
 8005718:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800571c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005720:	b29a      	uxth	r2, r3
 8005722:	6a3b      	ldr	r3, [r7, #32]
 8005724:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005726:	687a      	ldr	r2, [r7, #4]
 8005728:	683b      	ldr	r3, [r7, #0]
 800572a:	781b      	ldrb	r3, [r3, #0]
 800572c:	009b      	lsls	r3, r3, #2
 800572e:	4413      	add	r3, r2
 8005730:	881b      	ldrh	r3, [r3, #0]
 8005732:	83fb      	strh	r3, [r7, #30]
 8005734:	8bfb      	ldrh	r3, [r7, #30]
 8005736:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800573a:	2b00      	cmp	r3, #0
 800573c:	d01b      	beq.n	8005776 <USB_ActivateEndpoint+0x33a>
 800573e:	687a      	ldr	r2, [r7, #4]
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	781b      	ldrb	r3, [r3, #0]
 8005744:	009b      	lsls	r3, r3, #2
 8005746:	4413      	add	r3, r2
 8005748:	881b      	ldrh	r3, [r3, #0]
 800574a:	b29b      	uxth	r3, r3
 800574c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005750:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005754:	83bb      	strh	r3, [r7, #28]
 8005756:	687a      	ldr	r2, [r7, #4]
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	781b      	ldrb	r3, [r3, #0]
 800575c:	009b      	lsls	r3, r3, #2
 800575e:	441a      	add	r2, r3
 8005760:	8bbb      	ldrh	r3, [r7, #28]
 8005762:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005766:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800576a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800576e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005772:	b29b      	uxth	r3, r3
 8005774:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005776:	687a      	ldr	r2, [r7, #4]
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	781b      	ldrb	r3, [r3, #0]
 800577c:	009b      	lsls	r3, r3, #2
 800577e:	4413      	add	r3, r2
 8005780:	881b      	ldrh	r3, [r3, #0]
 8005782:	b29b      	uxth	r3, r3
 8005784:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005788:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800578c:	837b      	strh	r3, [r7, #26]
 800578e:	8b7b      	ldrh	r3, [r7, #26]
 8005790:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005794:	837b      	strh	r3, [r7, #26]
 8005796:	8b7b      	ldrh	r3, [r7, #26]
 8005798:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800579c:	837b      	strh	r3, [r7, #26]
 800579e:	687a      	ldr	r2, [r7, #4]
 80057a0:	683b      	ldr	r3, [r7, #0]
 80057a2:	781b      	ldrb	r3, [r3, #0]
 80057a4:	009b      	lsls	r3, r3, #2
 80057a6:	441a      	add	r2, r3
 80057a8:	8b7b      	ldrh	r3, [r7, #26]
 80057aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80057ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80057b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80057b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057ba:	b29b      	uxth	r3, r3
 80057bc:	8013      	strh	r3, [r2, #0]
 80057be:	e1a2      	b.n	8005b06 <USB_ActivateEndpoint+0x6ca>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 80057c0:	687a      	ldr	r2, [r7, #4]
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	781b      	ldrb	r3, [r3, #0]
 80057c6:	009b      	lsls	r3, r3, #2
 80057c8:	4413      	add	r3, r2
 80057ca:	881b      	ldrh	r3, [r3, #0]
 80057cc:	b29b      	uxth	r3, r3
 80057ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057d6:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 80057da:	687a      	ldr	r2, [r7, #4]
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	781b      	ldrb	r3, [r3, #0]
 80057e0:	009b      	lsls	r3, r3, #2
 80057e2:	441a      	add	r2, r3
 80057e4:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80057e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80057ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80057f0:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80057f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057f8:	b29b      	uxth	r3, r3
 80057fa:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	65bb      	str	r3, [r7, #88]	; 0x58
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005806:	b29b      	uxth	r3, r3
 8005808:	461a      	mov	r2, r3
 800580a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800580c:	4413      	add	r3, r2
 800580e:	65bb      	str	r3, [r7, #88]	; 0x58
 8005810:	683b      	ldr	r3, [r7, #0]
 8005812:	781b      	ldrb	r3, [r3, #0]
 8005814:	00da      	lsls	r2, r3, #3
 8005816:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005818:	4413      	add	r3, r2
 800581a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800581e:	657b      	str	r3, [r7, #84]	; 0x54
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	891b      	ldrh	r3, [r3, #8]
 8005824:	085b      	lsrs	r3, r3, #1
 8005826:	b29b      	uxth	r3, r3
 8005828:	005b      	lsls	r3, r3, #1
 800582a:	b29a      	uxth	r2, r3
 800582c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800582e:	801a      	strh	r2, [r3, #0]
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	653b      	str	r3, [r7, #80]	; 0x50
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800583a:	b29b      	uxth	r3, r3
 800583c:	461a      	mov	r2, r3
 800583e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005840:	4413      	add	r3, r2
 8005842:	653b      	str	r3, [r7, #80]	; 0x50
 8005844:	683b      	ldr	r3, [r7, #0]
 8005846:	781b      	ldrb	r3, [r3, #0]
 8005848:	00da      	lsls	r2, r3, #3
 800584a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800584c:	4413      	add	r3, r2
 800584e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005852:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	895b      	ldrh	r3, [r3, #10]
 8005858:	085b      	lsrs	r3, r3, #1
 800585a:	b29b      	uxth	r3, r3
 800585c:	005b      	lsls	r3, r3, #1
 800585e:	b29a      	uxth	r2, r3
 8005860:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005862:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	785b      	ldrb	r3, [r3, #1]
 8005868:	2b00      	cmp	r3, #0
 800586a:	f040 8091 	bne.w	8005990 <USB_ActivateEndpoint+0x554>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800586e:	687a      	ldr	r2, [r7, #4]
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	781b      	ldrb	r3, [r3, #0]
 8005874:	009b      	lsls	r3, r3, #2
 8005876:	4413      	add	r3, r2
 8005878:	881b      	ldrh	r3, [r3, #0]
 800587a:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800587c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800587e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005882:	2b00      	cmp	r3, #0
 8005884:	d01b      	beq.n	80058be <USB_ActivateEndpoint+0x482>
 8005886:	687a      	ldr	r2, [r7, #4]
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	781b      	ldrb	r3, [r3, #0]
 800588c:	009b      	lsls	r3, r3, #2
 800588e:	4413      	add	r3, r2
 8005890:	881b      	ldrh	r3, [r3, #0]
 8005892:	b29b      	uxth	r3, r3
 8005894:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005898:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800589c:	877b      	strh	r3, [r7, #58]	; 0x3a
 800589e:	687a      	ldr	r2, [r7, #4]
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	781b      	ldrb	r3, [r3, #0]
 80058a4:	009b      	lsls	r3, r3, #2
 80058a6:	441a      	add	r2, r3
 80058a8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80058aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80058ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80058b2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80058b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058ba:	b29b      	uxth	r3, r3
 80058bc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80058be:	687a      	ldr	r2, [r7, #4]
 80058c0:	683b      	ldr	r3, [r7, #0]
 80058c2:	781b      	ldrb	r3, [r3, #0]
 80058c4:	009b      	lsls	r3, r3, #2
 80058c6:	4413      	add	r3, r2
 80058c8:	881b      	ldrh	r3, [r3, #0]
 80058ca:	873b      	strh	r3, [r7, #56]	; 0x38
 80058cc:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80058ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d01b      	beq.n	800590e <USB_ActivateEndpoint+0x4d2>
 80058d6:	687a      	ldr	r2, [r7, #4]
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	781b      	ldrb	r3, [r3, #0]
 80058dc:	009b      	lsls	r3, r3, #2
 80058de:	4413      	add	r3, r2
 80058e0:	881b      	ldrh	r3, [r3, #0]
 80058e2:	b29b      	uxth	r3, r3
 80058e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80058e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058ec:	86fb      	strh	r3, [r7, #54]	; 0x36
 80058ee:	687a      	ldr	r2, [r7, #4]
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	781b      	ldrb	r3, [r3, #0]
 80058f4:	009b      	lsls	r3, r3, #2
 80058f6:	441a      	add	r2, r3
 80058f8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80058fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80058fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005902:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005906:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800590a:	b29b      	uxth	r3, r3
 800590c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800590e:	687a      	ldr	r2, [r7, #4]
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	781b      	ldrb	r3, [r3, #0]
 8005914:	009b      	lsls	r3, r3, #2
 8005916:	4413      	add	r3, r2
 8005918:	881b      	ldrh	r3, [r3, #0]
 800591a:	b29b      	uxth	r3, r3
 800591c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005920:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005924:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005926:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005928:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800592c:	86bb      	strh	r3, [r7, #52]	; 0x34
 800592e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005930:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005934:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005936:	687a      	ldr	r2, [r7, #4]
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	781b      	ldrb	r3, [r3, #0]
 800593c:	009b      	lsls	r3, r3, #2
 800593e:	441a      	add	r2, r3
 8005940:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005942:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005946:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800594a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800594e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005952:	b29b      	uxth	r3, r3
 8005954:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005956:	687a      	ldr	r2, [r7, #4]
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	781b      	ldrb	r3, [r3, #0]
 800595c:	009b      	lsls	r3, r3, #2
 800595e:	4413      	add	r3, r2
 8005960:	881b      	ldrh	r3, [r3, #0]
 8005962:	b29b      	uxth	r3, r3
 8005964:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005968:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800596c:	867b      	strh	r3, [r7, #50]	; 0x32
 800596e:	687a      	ldr	r2, [r7, #4]
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	781b      	ldrb	r3, [r3, #0]
 8005974:	009b      	lsls	r3, r3, #2
 8005976:	441a      	add	r2, r3
 8005978:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800597a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800597e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005982:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005986:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800598a:	b29b      	uxth	r3, r3
 800598c:	8013      	strh	r3, [r2, #0]
 800598e:	e0ba      	b.n	8005b06 <USB_ActivateEndpoint+0x6ca>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005990:	687a      	ldr	r2, [r7, #4]
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	781b      	ldrb	r3, [r3, #0]
 8005996:	009b      	lsls	r3, r3, #2
 8005998:	4413      	add	r3, r2
 800599a:	881b      	ldrh	r3, [r3, #0]
 800599c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80059a0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80059a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d01d      	beq.n	80059e8 <USB_ActivateEndpoint+0x5ac>
 80059ac:	687a      	ldr	r2, [r7, #4]
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	781b      	ldrb	r3, [r3, #0]
 80059b2:	009b      	lsls	r3, r3, #2
 80059b4:	4413      	add	r3, r2
 80059b6:	881b      	ldrh	r3, [r3, #0]
 80059b8:	b29b      	uxth	r3, r3
 80059ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059c2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80059c6:	687a      	ldr	r2, [r7, #4]
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	781b      	ldrb	r3, [r3, #0]
 80059cc:	009b      	lsls	r3, r3, #2
 80059ce:	441a      	add	r2, r3
 80059d0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80059d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80059d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80059dc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80059e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059e4:	b29b      	uxth	r3, r3
 80059e6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80059e8:	687a      	ldr	r2, [r7, #4]
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	781b      	ldrb	r3, [r3, #0]
 80059ee:	009b      	lsls	r3, r3, #2
 80059f0:	4413      	add	r3, r2
 80059f2:	881b      	ldrh	r3, [r3, #0]
 80059f4:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80059f8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80059fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d01d      	beq.n	8005a40 <USB_ActivateEndpoint+0x604>
 8005a04:	687a      	ldr	r2, [r7, #4]
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	781b      	ldrb	r3, [r3, #0]
 8005a0a:	009b      	lsls	r3, r3, #2
 8005a0c:	4413      	add	r3, r2
 8005a0e:	881b      	ldrh	r3, [r3, #0]
 8005a10:	b29b      	uxth	r3, r3
 8005a12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a1a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005a1e:	687a      	ldr	r2, [r7, #4]
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	781b      	ldrb	r3, [r3, #0]
 8005a24:	009b      	lsls	r3, r3, #2
 8005a26:	441a      	add	r2, r3
 8005a28:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005a2c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a30:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a34:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a38:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005a3c:	b29b      	uxth	r3, r3
 8005a3e:	8013      	strh	r3, [r2, #0]


      if (ep->type != EP_TYPE_ISOC)
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	78db      	ldrb	r3, [r3, #3]
 8005a44:	2b01      	cmp	r3, #1
 8005a46:	d024      	beq.n	8005a92 <USB_ActivateEndpoint+0x656>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005a48:	687a      	ldr	r2, [r7, #4]
 8005a4a:	683b      	ldr	r3, [r7, #0]
 8005a4c:	781b      	ldrb	r3, [r3, #0]
 8005a4e:	009b      	lsls	r3, r3, #2
 8005a50:	4413      	add	r3, r2
 8005a52:	881b      	ldrh	r3, [r3, #0]
 8005a54:	b29b      	uxth	r3, r3
 8005a56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a5a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a5e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8005a62:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005a66:	f083 0320 	eor.w	r3, r3, #32
 8005a6a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8005a6e:	687a      	ldr	r2, [r7, #4]
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	781b      	ldrb	r3, [r3, #0]
 8005a74:	009b      	lsls	r3, r3, #2
 8005a76:	441a      	add	r2, r3
 8005a78:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005a7c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a80:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a84:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a8c:	b29b      	uxth	r3, r3
 8005a8e:	8013      	strh	r3, [r2, #0]
 8005a90:	e01d      	b.n	8005ace <USB_ActivateEndpoint+0x692>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005a92:	687a      	ldr	r2, [r7, #4]
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	781b      	ldrb	r3, [r3, #0]
 8005a98:	009b      	lsls	r3, r3, #2
 8005a9a:	4413      	add	r3, r2
 8005a9c:	881b      	ldrh	r3, [r3, #0]
 8005a9e:	b29b      	uxth	r3, r3
 8005aa0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005aa4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005aa8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8005aac:	687a      	ldr	r2, [r7, #4]
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	781b      	ldrb	r3, [r3, #0]
 8005ab2:	009b      	lsls	r3, r3, #2
 8005ab4:	441a      	add	r2, r3
 8005ab6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8005aba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005abe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ac2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ac6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005aca:	b29b      	uxth	r3, r3
 8005acc:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005ace:	687a      	ldr	r2, [r7, #4]
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	781b      	ldrb	r3, [r3, #0]
 8005ad4:	009b      	lsls	r3, r3, #2
 8005ad6:	4413      	add	r3, r2
 8005ad8:	881b      	ldrh	r3, [r3, #0]
 8005ada:	b29b      	uxth	r3, r3
 8005adc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005ae0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ae4:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8005ae6:	687a      	ldr	r2, [r7, #4]
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	781b      	ldrb	r3, [r3, #0]
 8005aec:	009b      	lsls	r3, r3, #2
 8005aee:	441a      	add	r2, r3
 8005af0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005af2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005af6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005afa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005afe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b02:	b29b      	uxth	r3, r3
 8005b04:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8005b06:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	376c      	adds	r7, #108	; 0x6c
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b14:	4770      	bx	lr
 8005b16:	bf00      	nop

08005b18 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005b18:	b480      	push	{r7}
 8005b1a:	b08d      	sub	sp, #52	; 0x34
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
 8005b20:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	7b1b      	ldrb	r3, [r3, #12]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	f040 808e 	bne.w	8005c48 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	785b      	ldrb	r3, [r3, #1]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d044      	beq.n	8005bbe <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005b34:	687a      	ldr	r2, [r7, #4]
 8005b36:	683b      	ldr	r3, [r7, #0]
 8005b38:	781b      	ldrb	r3, [r3, #0]
 8005b3a:	009b      	lsls	r3, r3, #2
 8005b3c:	4413      	add	r3, r2
 8005b3e:	881b      	ldrh	r3, [r3, #0]
 8005b40:	81bb      	strh	r3, [r7, #12]
 8005b42:	89bb      	ldrh	r3, [r7, #12]
 8005b44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d01b      	beq.n	8005b84 <USB_DeactivateEndpoint+0x6c>
 8005b4c:	687a      	ldr	r2, [r7, #4]
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	781b      	ldrb	r3, [r3, #0]
 8005b52:	009b      	lsls	r3, r3, #2
 8005b54:	4413      	add	r3, r2
 8005b56:	881b      	ldrh	r3, [r3, #0]
 8005b58:	b29b      	uxth	r3, r3
 8005b5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b62:	817b      	strh	r3, [r7, #10]
 8005b64:	687a      	ldr	r2, [r7, #4]
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	781b      	ldrb	r3, [r3, #0]
 8005b6a:	009b      	lsls	r3, r3, #2
 8005b6c:	441a      	add	r2, r3
 8005b6e:	897b      	ldrh	r3, [r7, #10]
 8005b70:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b74:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b78:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b7c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005b80:	b29b      	uxth	r3, r3
 8005b82:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005b84:	687a      	ldr	r2, [r7, #4]
 8005b86:	683b      	ldr	r3, [r7, #0]
 8005b88:	781b      	ldrb	r3, [r3, #0]
 8005b8a:	009b      	lsls	r3, r3, #2
 8005b8c:	4413      	add	r3, r2
 8005b8e:	881b      	ldrh	r3, [r3, #0]
 8005b90:	b29b      	uxth	r3, r3
 8005b92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b96:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b9a:	813b      	strh	r3, [r7, #8]
 8005b9c:	687a      	ldr	r2, [r7, #4]
 8005b9e:	683b      	ldr	r3, [r7, #0]
 8005ba0:	781b      	ldrb	r3, [r3, #0]
 8005ba2:	009b      	lsls	r3, r3, #2
 8005ba4:	441a      	add	r2, r3
 8005ba6:	893b      	ldrh	r3, [r7, #8]
 8005ba8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005bac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005bb0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005bb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005bb8:	b29b      	uxth	r3, r3
 8005bba:	8013      	strh	r3, [r2, #0]
 8005bbc:	e192      	b.n	8005ee4 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005bbe:	687a      	ldr	r2, [r7, #4]
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	781b      	ldrb	r3, [r3, #0]
 8005bc4:	009b      	lsls	r3, r3, #2
 8005bc6:	4413      	add	r3, r2
 8005bc8:	881b      	ldrh	r3, [r3, #0]
 8005bca:	827b      	strh	r3, [r7, #18]
 8005bcc:	8a7b      	ldrh	r3, [r7, #18]
 8005bce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d01b      	beq.n	8005c0e <USB_DeactivateEndpoint+0xf6>
 8005bd6:	687a      	ldr	r2, [r7, #4]
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	781b      	ldrb	r3, [r3, #0]
 8005bdc:	009b      	lsls	r3, r3, #2
 8005bde:	4413      	add	r3, r2
 8005be0:	881b      	ldrh	r3, [r3, #0]
 8005be2:	b29b      	uxth	r3, r3
 8005be4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005be8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bec:	823b      	strh	r3, [r7, #16]
 8005bee:	687a      	ldr	r2, [r7, #4]
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	781b      	ldrb	r3, [r3, #0]
 8005bf4:	009b      	lsls	r3, r3, #2
 8005bf6:	441a      	add	r2, r3
 8005bf8:	8a3b      	ldrh	r3, [r7, #16]
 8005bfa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005bfe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c02:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005c06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c0a:	b29b      	uxth	r3, r3
 8005c0c:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005c0e:	687a      	ldr	r2, [r7, #4]
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	781b      	ldrb	r3, [r3, #0]
 8005c14:	009b      	lsls	r3, r3, #2
 8005c16:	4413      	add	r3, r2
 8005c18:	881b      	ldrh	r3, [r3, #0]
 8005c1a:	b29b      	uxth	r3, r3
 8005c1c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005c20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c24:	81fb      	strh	r3, [r7, #14]
 8005c26:	687a      	ldr	r2, [r7, #4]
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	781b      	ldrb	r3, [r3, #0]
 8005c2c:	009b      	lsls	r3, r3, #2
 8005c2e:	441a      	add	r2, r3
 8005c30:	89fb      	ldrh	r3, [r7, #14]
 8005c32:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c36:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c42:	b29b      	uxth	r3, r3
 8005c44:	8013      	strh	r3, [r2, #0]
 8005c46:	e14d      	b.n	8005ee4 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	785b      	ldrb	r3, [r3, #1]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	f040 80a5 	bne.w	8005d9c <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005c52:	687a      	ldr	r2, [r7, #4]
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	781b      	ldrb	r3, [r3, #0]
 8005c58:	009b      	lsls	r3, r3, #2
 8005c5a:	4413      	add	r3, r2
 8005c5c:	881b      	ldrh	r3, [r3, #0]
 8005c5e:	843b      	strh	r3, [r7, #32]
 8005c60:	8c3b      	ldrh	r3, [r7, #32]
 8005c62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d01b      	beq.n	8005ca2 <USB_DeactivateEndpoint+0x18a>
 8005c6a:	687a      	ldr	r2, [r7, #4]
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	781b      	ldrb	r3, [r3, #0]
 8005c70:	009b      	lsls	r3, r3, #2
 8005c72:	4413      	add	r3, r2
 8005c74:	881b      	ldrh	r3, [r3, #0]
 8005c76:	b29b      	uxth	r3, r3
 8005c78:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c80:	83fb      	strh	r3, [r7, #30]
 8005c82:	687a      	ldr	r2, [r7, #4]
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	781b      	ldrb	r3, [r3, #0]
 8005c88:	009b      	lsls	r3, r3, #2
 8005c8a:	441a      	add	r2, r3
 8005c8c:	8bfb      	ldrh	r3, [r7, #30]
 8005c8e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c92:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c96:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005c9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c9e:	b29b      	uxth	r3, r3
 8005ca0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005ca2:	687a      	ldr	r2, [r7, #4]
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	781b      	ldrb	r3, [r3, #0]
 8005ca8:	009b      	lsls	r3, r3, #2
 8005caa:	4413      	add	r3, r2
 8005cac:	881b      	ldrh	r3, [r3, #0]
 8005cae:	83bb      	strh	r3, [r7, #28]
 8005cb0:	8bbb      	ldrh	r3, [r7, #28]
 8005cb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d01b      	beq.n	8005cf2 <USB_DeactivateEndpoint+0x1da>
 8005cba:	687a      	ldr	r2, [r7, #4]
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	781b      	ldrb	r3, [r3, #0]
 8005cc0:	009b      	lsls	r3, r3, #2
 8005cc2:	4413      	add	r3, r2
 8005cc4:	881b      	ldrh	r3, [r3, #0]
 8005cc6:	b29b      	uxth	r3, r3
 8005cc8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ccc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cd0:	837b      	strh	r3, [r7, #26]
 8005cd2:	687a      	ldr	r2, [r7, #4]
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	781b      	ldrb	r3, [r3, #0]
 8005cd8:	009b      	lsls	r3, r3, #2
 8005cda:	441a      	add	r2, r3
 8005cdc:	8b7b      	ldrh	r3, [r7, #26]
 8005cde:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ce2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ce6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005cea:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005cee:	b29b      	uxth	r3, r3
 8005cf0:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8005cf2:	687a      	ldr	r2, [r7, #4]
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	781b      	ldrb	r3, [r3, #0]
 8005cf8:	009b      	lsls	r3, r3, #2
 8005cfa:	4413      	add	r3, r2
 8005cfc:	881b      	ldrh	r3, [r3, #0]
 8005cfe:	b29b      	uxth	r3, r3
 8005d00:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d08:	833b      	strh	r3, [r7, #24]
 8005d0a:	687a      	ldr	r2, [r7, #4]
 8005d0c:	683b      	ldr	r3, [r7, #0]
 8005d0e:	781b      	ldrb	r3, [r3, #0]
 8005d10:	009b      	lsls	r3, r3, #2
 8005d12:	441a      	add	r2, r3
 8005d14:	8b3b      	ldrh	r3, [r7, #24]
 8005d16:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d1a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d22:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005d26:	b29b      	uxth	r3, r3
 8005d28:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005d2a:	687a      	ldr	r2, [r7, #4]
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	781b      	ldrb	r3, [r3, #0]
 8005d30:	009b      	lsls	r3, r3, #2
 8005d32:	4413      	add	r3, r2
 8005d34:	881b      	ldrh	r3, [r3, #0]
 8005d36:	b29b      	uxth	r3, r3
 8005d38:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005d3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d40:	82fb      	strh	r3, [r7, #22]
 8005d42:	687a      	ldr	r2, [r7, #4]
 8005d44:	683b      	ldr	r3, [r7, #0]
 8005d46:	781b      	ldrb	r3, [r3, #0]
 8005d48:	009b      	lsls	r3, r3, #2
 8005d4a:	441a      	add	r2, r3
 8005d4c:	8afb      	ldrh	r3, [r7, #22]
 8005d4e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d52:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d5e:	b29b      	uxth	r3, r3
 8005d60:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005d62:	687a      	ldr	r2, [r7, #4]
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	781b      	ldrb	r3, [r3, #0]
 8005d68:	009b      	lsls	r3, r3, #2
 8005d6a:	4413      	add	r3, r2
 8005d6c:	881b      	ldrh	r3, [r3, #0]
 8005d6e:	b29b      	uxth	r3, r3
 8005d70:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d74:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d78:	82bb      	strh	r3, [r7, #20]
 8005d7a:	687a      	ldr	r2, [r7, #4]
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	781b      	ldrb	r3, [r3, #0]
 8005d80:	009b      	lsls	r3, r3, #2
 8005d82:	441a      	add	r2, r3
 8005d84:	8abb      	ldrh	r3, [r7, #20]
 8005d86:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d8a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d96:	b29b      	uxth	r3, r3
 8005d98:	8013      	strh	r3, [r2, #0]
 8005d9a:	e0a3      	b.n	8005ee4 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005d9c:	687a      	ldr	r2, [r7, #4]
 8005d9e:	683b      	ldr	r3, [r7, #0]
 8005da0:	781b      	ldrb	r3, [r3, #0]
 8005da2:	009b      	lsls	r3, r3, #2
 8005da4:	4413      	add	r3, r2
 8005da6:	881b      	ldrh	r3, [r3, #0]
 8005da8:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8005daa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005dac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d01b      	beq.n	8005dec <USB_DeactivateEndpoint+0x2d4>
 8005db4:	687a      	ldr	r2, [r7, #4]
 8005db6:	683b      	ldr	r3, [r7, #0]
 8005db8:	781b      	ldrb	r3, [r3, #0]
 8005dba:	009b      	lsls	r3, r3, #2
 8005dbc:	4413      	add	r3, r2
 8005dbe:	881b      	ldrh	r3, [r3, #0]
 8005dc0:	b29b      	uxth	r3, r3
 8005dc2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005dc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dca:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8005dcc:	687a      	ldr	r2, [r7, #4]
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	781b      	ldrb	r3, [r3, #0]
 8005dd2:	009b      	lsls	r3, r3, #2
 8005dd4:	441a      	add	r2, r3
 8005dd6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005dd8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ddc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005de0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005de4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005de8:	b29b      	uxth	r3, r3
 8005dea:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005dec:	687a      	ldr	r2, [r7, #4]
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	781b      	ldrb	r3, [r3, #0]
 8005df2:	009b      	lsls	r3, r3, #2
 8005df4:	4413      	add	r3, r2
 8005df6:	881b      	ldrh	r3, [r3, #0]
 8005df8:	857b      	strh	r3, [r7, #42]	; 0x2a
 8005dfa:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005dfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d01b      	beq.n	8005e3c <USB_DeactivateEndpoint+0x324>
 8005e04:	687a      	ldr	r2, [r7, #4]
 8005e06:	683b      	ldr	r3, [r7, #0]
 8005e08:	781b      	ldrb	r3, [r3, #0]
 8005e0a:	009b      	lsls	r3, r3, #2
 8005e0c:	4413      	add	r3, r2
 8005e0e:	881b      	ldrh	r3, [r3, #0]
 8005e10:	b29b      	uxth	r3, r3
 8005e12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e1a:	853b      	strh	r3, [r7, #40]	; 0x28
 8005e1c:	687a      	ldr	r2, [r7, #4]
 8005e1e:	683b      	ldr	r3, [r7, #0]
 8005e20:	781b      	ldrb	r3, [r3, #0]
 8005e22:	009b      	lsls	r3, r3, #2
 8005e24:	441a      	add	r2, r3
 8005e26:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005e28:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e2c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e30:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e34:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005e38:	b29b      	uxth	r3, r3
 8005e3a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8005e3c:	687a      	ldr	r2, [r7, #4]
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	781b      	ldrb	r3, [r3, #0]
 8005e42:	009b      	lsls	r3, r3, #2
 8005e44:	4413      	add	r3, r2
 8005e46:	881b      	ldrh	r3, [r3, #0]
 8005e48:	b29b      	uxth	r3, r3
 8005e4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e52:	84fb      	strh	r3, [r7, #38]	; 0x26
 8005e54:	687a      	ldr	r2, [r7, #4]
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	781b      	ldrb	r3, [r3, #0]
 8005e5a:	009b      	lsls	r3, r3, #2
 8005e5c:	441a      	add	r2, r3
 8005e5e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005e60:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e64:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e68:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005e6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e70:	b29b      	uxth	r3, r3
 8005e72:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005e74:	687a      	ldr	r2, [r7, #4]
 8005e76:	683b      	ldr	r3, [r7, #0]
 8005e78:	781b      	ldrb	r3, [r3, #0]
 8005e7a:	009b      	lsls	r3, r3, #2
 8005e7c:	4413      	add	r3, r2
 8005e7e:	881b      	ldrh	r3, [r3, #0]
 8005e80:	b29b      	uxth	r3, r3
 8005e82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e86:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e8a:	84bb      	strh	r3, [r7, #36]	; 0x24
 8005e8c:	687a      	ldr	r2, [r7, #4]
 8005e8e:	683b      	ldr	r3, [r7, #0]
 8005e90:	781b      	ldrb	r3, [r3, #0]
 8005e92:	009b      	lsls	r3, r3, #2
 8005e94:	441a      	add	r2, r3
 8005e96:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005e98:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e9c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ea0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ea4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ea8:	b29b      	uxth	r3, r3
 8005eaa:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005eac:	687a      	ldr	r2, [r7, #4]
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	781b      	ldrb	r3, [r3, #0]
 8005eb2:	009b      	lsls	r3, r3, #2
 8005eb4:	4413      	add	r3, r2
 8005eb6:	881b      	ldrh	r3, [r3, #0]
 8005eb8:	b29b      	uxth	r3, r3
 8005eba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005ebe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ec2:	847b      	strh	r3, [r7, #34]	; 0x22
 8005ec4:	687a      	ldr	r2, [r7, #4]
 8005ec6:	683b      	ldr	r3, [r7, #0]
 8005ec8:	781b      	ldrb	r3, [r3, #0]
 8005eca:	009b      	lsls	r3, r3, #2
 8005ecc:	441a      	add	r2, r3
 8005ece:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005ed0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ed4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ed8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005edc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ee0:	b29b      	uxth	r3, r3
 8005ee2:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8005ee4:	2300      	movs	r3, #0
}
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	3734      	adds	r7, #52	; 0x34
 8005eea:	46bd      	mov	sp, r7
 8005eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef0:	4770      	bx	lr

08005ef2 <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005ef2:	b580      	push	{r7, lr}
 8005ef4:	b0c4      	sub	sp, #272	; 0x110
 8005ef6:	af00      	add	r7, sp, #0
 8005ef8:	1d3b      	adds	r3, r7, #4
 8005efa:	6018      	str	r0, [r3, #0]
 8005efc:	463b      	mov	r3, r7
 8005efe:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint32_t len;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005f00:	463b      	mov	r3, r7
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	785b      	ldrb	r3, [r3, #1]
 8005f06:	2b01      	cmp	r3, #1
 8005f08:	f040 8566 	bne.w	80069d8 <USB_EPStartXfer+0xae6>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8005f0c:	463b      	mov	r3, r7
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	699a      	ldr	r2, [r3, #24]
 8005f12:	463b      	mov	r3, r7
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	691b      	ldr	r3, [r3, #16]
 8005f18:	429a      	cmp	r2, r3
 8005f1a:	d905      	bls.n	8005f28 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8005f1c:	463b      	mov	r3, r7
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	691b      	ldr	r3, [r3, #16]
 8005f22:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005f26:	e004      	b.n	8005f32 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8005f28:	463b      	mov	r3, r7
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	699b      	ldr	r3, [r3, #24]
 8005f2e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8005f32:	463b      	mov	r3, r7
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	7b1b      	ldrb	r3, [r3, #12]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d12c      	bne.n	8005f96 <USB_EPStartXfer+0xa4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8005f3c:	463b      	mov	r3, r7
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	6959      	ldr	r1, [r3, #20]
 8005f42:	463b      	mov	r3, r7
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	88da      	ldrh	r2, [r3, #6]
 8005f48:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005f4c:	b29b      	uxth	r3, r3
 8005f4e:	1d38      	adds	r0, r7, #4
 8005f50:	6800      	ldr	r0, [r0, #0]
 8005f52:	f001 fa43 	bl	80073dc <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005f56:	1d3b      	adds	r3, r7, #4
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	617b      	str	r3, [r7, #20]
 8005f5c:	1d3b      	adds	r3, r7, #4
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f64:	b29b      	uxth	r3, r3
 8005f66:	461a      	mov	r2, r3
 8005f68:	697b      	ldr	r3, [r7, #20]
 8005f6a:	4413      	add	r3, r2
 8005f6c:	617b      	str	r3, [r7, #20]
 8005f6e:	463b      	mov	r3, r7
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	781b      	ldrb	r3, [r3, #0]
 8005f74:	00da      	lsls	r2, r3, #3
 8005f76:	697b      	ldr	r3, [r7, #20]
 8005f78:	4413      	add	r3, r2
 8005f7a:	f203 4202 	addw	r2, r3, #1026	; 0x402
 8005f7e:	f107 0310 	add.w	r3, r7, #16
 8005f82:	601a      	str	r2, [r3, #0]
 8005f84:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005f88:	b29a      	uxth	r2, r3
 8005f8a:	f107 0310 	add.w	r3, r7, #16
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	801a      	strh	r2, [r3, #0]
 8005f92:	f000 bcec 	b.w	800696e <USB_EPStartXfer+0xa7c>
    }
    else
    {
      /*double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8005f96:	463b      	mov	r3, r7
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	78db      	ldrb	r3, [r3, #3]
 8005f9c:	2b02      	cmp	r3, #2
 8005f9e:	f040 8356 	bne.w	800664e <USB_EPStartXfer+0x75c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8005fa2:	463b      	mov	r3, r7
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	6a1a      	ldr	r2, [r3, #32]
 8005fa8:	463b      	mov	r3, r7
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	691b      	ldr	r3, [r3, #16]
 8005fae:	429a      	cmp	r2, r3
 8005fb0:	f240 82fa 	bls.w	80065a8 <USB_EPStartXfer+0x6b6>
        {
          /*enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8005fb4:	1d3b      	adds	r3, r7, #4
 8005fb6:	681a      	ldr	r2, [r3, #0]
 8005fb8:	463b      	mov	r3, r7
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	781b      	ldrb	r3, [r3, #0]
 8005fbe:	009b      	lsls	r3, r3, #2
 8005fc0:	4413      	add	r3, r2
 8005fc2:	881b      	ldrh	r3, [r3, #0]
 8005fc4:	b29b      	uxth	r3, r3
 8005fc6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005fca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fce:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 8005fd2:	1d3b      	adds	r3, r7, #4
 8005fd4:	681a      	ldr	r2, [r3, #0]
 8005fd6:	463b      	mov	r3, r7
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	781b      	ldrb	r3, [r3, #0]
 8005fdc:	009b      	lsls	r3, r3, #2
 8005fde:	441a      	add	r2, r3
 8005fe0:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8005fe4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005fe8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005fec:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005ff0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ff4:	b29b      	uxth	r3, r3
 8005ff6:	8013      	strh	r3, [r2, #0]
          len = ep->maxpacket;
 8005ff8:	463b      	mov	r3, r7
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	691b      	ldr	r3, [r3, #16]
 8005ffe:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          /*each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8006002:	463b      	mov	r3, r7
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	6a1a      	ldr	r2, [r3, #32]
 8006008:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800600c:	1ad2      	subs	r2, r2, r3
 800600e:	463b      	mov	r3, r7
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1*/
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006014:	1d3b      	adds	r3, r7, #4
 8006016:	681a      	ldr	r2, [r3, #0]
 8006018:	463b      	mov	r3, r7
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	781b      	ldrb	r3, [r3, #0]
 800601e:	009b      	lsls	r3, r3, #2
 8006020:	4413      	add	r3, r2
 8006022:	881b      	ldrh	r3, [r3, #0]
 8006024:	b29b      	uxth	r3, r3
 8006026:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800602a:	2b00      	cmp	r3, #0
 800602c:	f000 815e 	beq.w	80062ec <USB_EPStartXfer+0x3fa>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006030:	1d3b      	adds	r3, r7, #4
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	637b      	str	r3, [r7, #52]	; 0x34
 8006036:	463b      	mov	r3, r7
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	785b      	ldrb	r3, [r3, #1]
 800603c:	2b00      	cmp	r3, #0
 800603e:	d164      	bne.n	800610a <USB_EPStartXfer+0x218>
 8006040:	1d3b      	adds	r3, r7, #4
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006046:	1d3b      	adds	r3, r7, #4
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800604e:	b29b      	uxth	r3, r3
 8006050:	461a      	mov	r2, r3
 8006052:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006054:	4413      	add	r3, r2
 8006056:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006058:	463b      	mov	r3, r7
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	781b      	ldrb	r3, [r3, #0]
 800605e:	00da      	lsls	r2, r3, #3
 8006060:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006062:	4413      	add	r3, r2
 8006064:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006068:	62bb      	str	r3, [r7, #40]	; 0x28
 800606a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800606e:	2b00      	cmp	r3, #0
 8006070:	d112      	bne.n	8006098 <USB_EPStartXfer+0x1a6>
 8006072:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006074:	881b      	ldrh	r3, [r3, #0]
 8006076:	b29b      	uxth	r3, r3
 8006078:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800607c:	b29a      	uxth	r2, r3
 800607e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006080:	801a      	strh	r2, [r3, #0]
 8006082:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006084:	881b      	ldrh	r3, [r3, #0]
 8006086:	b29b      	uxth	r3, r3
 8006088:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800608c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006090:	b29a      	uxth	r2, r3
 8006092:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006094:	801a      	strh	r2, [r3, #0]
 8006096:	e054      	b.n	8006142 <USB_EPStartXfer+0x250>
 8006098:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800609c:	2b3e      	cmp	r3, #62	; 0x3e
 800609e:	d817      	bhi.n	80060d0 <USB_EPStartXfer+0x1de>
 80060a0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80060a4:	085b      	lsrs	r3, r3, #1
 80060a6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80060aa:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80060ae:	f003 0301 	and.w	r3, r3, #1
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d004      	beq.n	80060c0 <USB_EPStartXfer+0x1ce>
 80060b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060ba:	3301      	adds	r3, #1
 80060bc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80060c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060c4:	b29b      	uxth	r3, r3
 80060c6:	029b      	lsls	r3, r3, #10
 80060c8:	b29a      	uxth	r2, r3
 80060ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060cc:	801a      	strh	r2, [r3, #0]
 80060ce:	e038      	b.n	8006142 <USB_EPStartXfer+0x250>
 80060d0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80060d4:	095b      	lsrs	r3, r3, #5
 80060d6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80060da:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80060de:	f003 031f 	and.w	r3, r3, #31
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d104      	bne.n	80060f0 <USB_EPStartXfer+0x1fe>
 80060e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060ea:	3b01      	subs	r3, #1
 80060ec:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80060f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060f4:	b29b      	uxth	r3, r3
 80060f6:	029b      	lsls	r3, r3, #10
 80060f8:	b29b      	uxth	r3, r3
 80060fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80060fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006102:	b29a      	uxth	r2, r3
 8006104:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006106:	801a      	strh	r2, [r3, #0]
 8006108:	e01b      	b.n	8006142 <USB_EPStartXfer+0x250>
 800610a:	463b      	mov	r3, r7
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	785b      	ldrb	r3, [r3, #1]
 8006110:	2b01      	cmp	r3, #1
 8006112:	d116      	bne.n	8006142 <USB_EPStartXfer+0x250>
 8006114:	1d3b      	adds	r3, r7, #4
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800611c:	b29b      	uxth	r3, r3
 800611e:	461a      	mov	r2, r3
 8006120:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006122:	4413      	add	r3, r2
 8006124:	637b      	str	r3, [r7, #52]	; 0x34
 8006126:	463b      	mov	r3, r7
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	781b      	ldrb	r3, [r3, #0]
 800612c:	00da      	lsls	r2, r3, #3
 800612e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006130:	4413      	add	r3, r2
 8006132:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006136:	633b      	str	r3, [r7, #48]	; 0x30
 8006138:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800613c:	b29a      	uxth	r2, r3
 800613e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006140:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006142:	463b      	mov	r3, r7
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	895b      	ldrh	r3, [r3, #10]
 8006148:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800614c:	463b      	mov	r3, r7
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	6959      	ldr	r1, [r3, #20]
 8006152:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006156:	b29b      	uxth	r3, r3
 8006158:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 800615c:	1d38      	adds	r0, r7, #4
 800615e:	6800      	ldr	r0, [r0, #0]
 8006160:	f001 f93c 	bl	80073dc <USB_WritePMA>
            ep->xfer_buff += len;
 8006164:	463b      	mov	r3, r7
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	695a      	ldr	r2, [r3, #20]
 800616a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800616e:	441a      	add	r2, r3
 8006170:	463b      	mov	r3, r7
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006176:	463b      	mov	r3, r7
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	6a1a      	ldr	r2, [r3, #32]
 800617c:	463b      	mov	r3, r7
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	691b      	ldr	r3, [r3, #16]
 8006182:	429a      	cmp	r2, r3
 8006184:	d90e      	bls.n	80061a4 <USB_EPStartXfer+0x2b2>
            {
              len = ep->maxpacket;
 8006186:	463b      	mov	r3, r7
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	691b      	ldr	r3, [r3, #16]
 800618c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db -= len;
 8006190:	463b      	mov	r3, r7
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	6a1a      	ldr	r2, [r3, #32]
 8006196:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800619a:	1ad2      	subs	r2, r2, r3
 800619c:	463b      	mov	r3, r7
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	621a      	str	r2, [r3, #32]
 80061a2:	e008      	b.n	80061b6 <USB_EPStartXfer+0x2c4>
            }
            else
            {
              len = ep->xfer_len_db;
 80061a4:	463b      	mov	r3, r7
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	6a1b      	ldr	r3, [r3, #32]
 80061aa:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db = 0;
 80061ae:	463b      	mov	r3, r7
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	2200      	movs	r2, #0
 80061b4:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80061b6:	463b      	mov	r3, r7
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	785b      	ldrb	r3, [r3, #1]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d164      	bne.n	800628a <USB_EPStartXfer+0x398>
 80061c0:	1d3b      	adds	r3, r7, #4
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	61fb      	str	r3, [r7, #28]
 80061c6:	1d3b      	adds	r3, r7, #4
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80061ce:	b29b      	uxth	r3, r3
 80061d0:	461a      	mov	r2, r3
 80061d2:	69fb      	ldr	r3, [r7, #28]
 80061d4:	4413      	add	r3, r2
 80061d6:	61fb      	str	r3, [r7, #28]
 80061d8:	463b      	mov	r3, r7
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	781b      	ldrb	r3, [r3, #0]
 80061de:	00da      	lsls	r2, r3, #3
 80061e0:	69fb      	ldr	r3, [r7, #28]
 80061e2:	4413      	add	r3, r2
 80061e4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80061e8:	61bb      	str	r3, [r7, #24]
 80061ea:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d112      	bne.n	8006218 <USB_EPStartXfer+0x326>
 80061f2:	69bb      	ldr	r3, [r7, #24]
 80061f4:	881b      	ldrh	r3, [r3, #0]
 80061f6:	b29b      	uxth	r3, r3
 80061f8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80061fc:	b29a      	uxth	r2, r3
 80061fe:	69bb      	ldr	r3, [r7, #24]
 8006200:	801a      	strh	r2, [r3, #0]
 8006202:	69bb      	ldr	r3, [r7, #24]
 8006204:	881b      	ldrh	r3, [r3, #0]
 8006206:	b29b      	uxth	r3, r3
 8006208:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800620c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006210:	b29a      	uxth	r2, r3
 8006212:	69bb      	ldr	r3, [r7, #24]
 8006214:	801a      	strh	r2, [r3, #0]
 8006216:	e057      	b.n	80062c8 <USB_EPStartXfer+0x3d6>
 8006218:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800621c:	2b3e      	cmp	r3, #62	; 0x3e
 800621e:	d817      	bhi.n	8006250 <USB_EPStartXfer+0x35e>
 8006220:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006224:	085b      	lsrs	r3, r3, #1
 8006226:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800622a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800622e:	f003 0301 	and.w	r3, r3, #1
 8006232:	2b00      	cmp	r3, #0
 8006234:	d004      	beq.n	8006240 <USB_EPStartXfer+0x34e>
 8006236:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800623a:	3301      	adds	r3, #1
 800623c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006240:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006244:	b29b      	uxth	r3, r3
 8006246:	029b      	lsls	r3, r3, #10
 8006248:	b29a      	uxth	r2, r3
 800624a:	69bb      	ldr	r3, [r7, #24]
 800624c:	801a      	strh	r2, [r3, #0]
 800624e:	e03b      	b.n	80062c8 <USB_EPStartXfer+0x3d6>
 8006250:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006254:	095b      	lsrs	r3, r3, #5
 8006256:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800625a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800625e:	f003 031f 	and.w	r3, r3, #31
 8006262:	2b00      	cmp	r3, #0
 8006264:	d104      	bne.n	8006270 <USB_EPStartXfer+0x37e>
 8006266:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800626a:	3b01      	subs	r3, #1
 800626c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006270:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006274:	b29b      	uxth	r3, r3
 8006276:	029b      	lsls	r3, r3, #10
 8006278:	b29b      	uxth	r3, r3
 800627a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800627e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006282:	b29a      	uxth	r2, r3
 8006284:	69bb      	ldr	r3, [r7, #24]
 8006286:	801a      	strh	r2, [r3, #0]
 8006288:	e01e      	b.n	80062c8 <USB_EPStartXfer+0x3d6>
 800628a:	463b      	mov	r3, r7
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	785b      	ldrb	r3, [r3, #1]
 8006290:	2b01      	cmp	r3, #1
 8006292:	d119      	bne.n	80062c8 <USB_EPStartXfer+0x3d6>
 8006294:	1d3b      	adds	r3, r7, #4
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	627b      	str	r3, [r7, #36]	; 0x24
 800629a:	1d3b      	adds	r3, r7, #4
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80062a2:	b29b      	uxth	r3, r3
 80062a4:	461a      	mov	r2, r3
 80062a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062a8:	4413      	add	r3, r2
 80062aa:	627b      	str	r3, [r7, #36]	; 0x24
 80062ac:	463b      	mov	r3, r7
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	781b      	ldrb	r3, [r3, #0]
 80062b2:	00da      	lsls	r2, r3, #3
 80062b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062b6:	4413      	add	r3, r2
 80062b8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80062bc:	623b      	str	r3, [r7, #32]
 80062be:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80062c2:	b29a      	uxth	r2, r3
 80062c4:	6a3b      	ldr	r3, [r7, #32]
 80062c6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80062c8:	463b      	mov	r3, r7
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	891b      	ldrh	r3, [r3, #8]
 80062ce:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80062d2:	463b      	mov	r3, r7
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	6959      	ldr	r1, [r3, #20]
 80062d8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80062dc:	b29b      	uxth	r3, r3
 80062de:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 80062e2:	1d38      	adds	r0, r7, #4
 80062e4:	6800      	ldr	r0, [r0, #0]
 80062e6:	f001 f879 	bl	80073dc <USB_WritePMA>
 80062ea:	e340      	b.n	800696e <USB_EPStartXfer+0xa7c>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80062ec:	463b      	mov	r3, r7
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	785b      	ldrb	r3, [r3, #1]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d164      	bne.n	80063c0 <USB_EPStartXfer+0x4ce>
 80062f6:	1d3b      	adds	r3, r7, #4
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80062fc:	1d3b      	adds	r3, r7, #4
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006304:	b29b      	uxth	r3, r3
 8006306:	461a      	mov	r2, r3
 8006308:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800630a:	4413      	add	r3, r2
 800630c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800630e:	463b      	mov	r3, r7
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	781b      	ldrb	r3, [r3, #0]
 8006314:	00da      	lsls	r2, r3, #3
 8006316:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006318:	4413      	add	r3, r2
 800631a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800631e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006320:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006324:	2b00      	cmp	r3, #0
 8006326:	d112      	bne.n	800634e <USB_EPStartXfer+0x45c>
 8006328:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800632a:	881b      	ldrh	r3, [r3, #0]
 800632c:	b29b      	uxth	r3, r3
 800632e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006332:	b29a      	uxth	r2, r3
 8006334:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006336:	801a      	strh	r2, [r3, #0]
 8006338:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800633a:	881b      	ldrh	r3, [r3, #0]
 800633c:	b29b      	uxth	r3, r3
 800633e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006342:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006346:	b29a      	uxth	r2, r3
 8006348:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800634a:	801a      	strh	r2, [r3, #0]
 800634c:	e057      	b.n	80063fe <USB_EPStartXfer+0x50c>
 800634e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006352:	2b3e      	cmp	r3, #62	; 0x3e
 8006354:	d817      	bhi.n	8006386 <USB_EPStartXfer+0x494>
 8006356:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800635a:	085b      	lsrs	r3, r3, #1
 800635c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006360:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006364:	f003 0301 	and.w	r3, r3, #1
 8006368:	2b00      	cmp	r3, #0
 800636a:	d004      	beq.n	8006376 <USB_EPStartXfer+0x484>
 800636c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006370:	3301      	adds	r3, #1
 8006372:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006376:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800637a:	b29b      	uxth	r3, r3
 800637c:	029b      	lsls	r3, r3, #10
 800637e:	b29a      	uxth	r2, r3
 8006380:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006382:	801a      	strh	r2, [r3, #0]
 8006384:	e03b      	b.n	80063fe <USB_EPStartXfer+0x50c>
 8006386:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800638a:	095b      	lsrs	r3, r3, #5
 800638c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006390:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006394:	f003 031f 	and.w	r3, r3, #31
 8006398:	2b00      	cmp	r3, #0
 800639a:	d104      	bne.n	80063a6 <USB_EPStartXfer+0x4b4>
 800639c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80063a0:	3b01      	subs	r3, #1
 80063a2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80063a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80063aa:	b29b      	uxth	r3, r3
 80063ac:	029b      	lsls	r3, r3, #10
 80063ae:	b29b      	uxth	r3, r3
 80063b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80063b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80063b8:	b29a      	uxth	r2, r3
 80063ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80063bc:	801a      	strh	r2, [r3, #0]
 80063be:	e01e      	b.n	80063fe <USB_EPStartXfer+0x50c>
 80063c0:	463b      	mov	r3, r7
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	785b      	ldrb	r3, [r3, #1]
 80063c6:	2b01      	cmp	r3, #1
 80063c8:	d119      	bne.n	80063fe <USB_EPStartXfer+0x50c>
 80063ca:	1d3b      	adds	r3, r7, #4
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	657b      	str	r3, [r7, #84]	; 0x54
 80063d0:	1d3b      	adds	r3, r7, #4
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80063d8:	b29b      	uxth	r3, r3
 80063da:	461a      	mov	r2, r3
 80063dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80063de:	4413      	add	r3, r2
 80063e0:	657b      	str	r3, [r7, #84]	; 0x54
 80063e2:	463b      	mov	r3, r7
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	781b      	ldrb	r3, [r3, #0]
 80063e8:	00da      	lsls	r2, r3, #3
 80063ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80063ec:	4413      	add	r3, r2
 80063ee:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80063f2:	653b      	str	r3, [r7, #80]	; 0x50
 80063f4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80063f8:	b29a      	uxth	r2, r3
 80063fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80063fc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80063fe:	463b      	mov	r3, r7
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	891b      	ldrh	r3, [r3, #8]
 8006404:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006408:	463b      	mov	r3, r7
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	6959      	ldr	r1, [r3, #20]
 800640e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006412:	b29b      	uxth	r3, r3
 8006414:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8006418:	1d38      	adds	r0, r7, #4
 800641a:	6800      	ldr	r0, [r0, #0]
 800641c:	f000 ffde 	bl	80073dc <USB_WritePMA>
            ep->xfer_buff += len;
 8006420:	463b      	mov	r3, r7
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	695a      	ldr	r2, [r3, #20]
 8006426:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800642a:	441a      	add	r2, r3
 800642c:	463b      	mov	r3, r7
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006432:	463b      	mov	r3, r7
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	6a1a      	ldr	r2, [r3, #32]
 8006438:	463b      	mov	r3, r7
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	691b      	ldr	r3, [r3, #16]
 800643e:	429a      	cmp	r2, r3
 8006440:	d90e      	bls.n	8006460 <USB_EPStartXfer+0x56e>
            {
              len = ep->maxpacket;
 8006442:	463b      	mov	r3, r7
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	691b      	ldr	r3, [r3, #16]
 8006448:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db -= len;
 800644c:	463b      	mov	r3, r7
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	6a1a      	ldr	r2, [r3, #32]
 8006452:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006456:	1ad2      	subs	r2, r2, r3
 8006458:	463b      	mov	r3, r7
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	621a      	str	r2, [r3, #32]
 800645e:	e008      	b.n	8006472 <USB_EPStartXfer+0x580>
            }
            else
            {
              len = ep->xfer_len_db;
 8006460:	463b      	mov	r3, r7
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	6a1b      	ldr	r3, [r3, #32]
 8006466:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db = 0;
 800646a:	463b      	mov	r3, r7
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	2200      	movs	r2, #0
 8006470:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006472:	1d3b      	adds	r3, r7, #4
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	647b      	str	r3, [r7, #68]	; 0x44
 8006478:	463b      	mov	r3, r7
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	785b      	ldrb	r3, [r3, #1]
 800647e:	2b00      	cmp	r3, #0
 8006480:	d164      	bne.n	800654c <USB_EPStartXfer+0x65a>
 8006482:	1d3b      	adds	r3, r7, #4
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006488:	1d3b      	adds	r3, r7, #4
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006490:	b29b      	uxth	r3, r3
 8006492:	461a      	mov	r2, r3
 8006494:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006496:	4413      	add	r3, r2
 8006498:	63fb      	str	r3, [r7, #60]	; 0x3c
 800649a:	463b      	mov	r3, r7
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	781b      	ldrb	r3, [r3, #0]
 80064a0:	00da      	lsls	r2, r3, #3
 80064a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064a4:	4413      	add	r3, r2
 80064a6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80064aa:	63bb      	str	r3, [r7, #56]	; 0x38
 80064ac:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d112      	bne.n	80064da <USB_EPStartXfer+0x5e8>
 80064b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064b6:	881b      	ldrh	r3, [r3, #0]
 80064b8:	b29b      	uxth	r3, r3
 80064ba:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80064be:	b29a      	uxth	r2, r3
 80064c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064c2:	801a      	strh	r2, [r3, #0]
 80064c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064c6:	881b      	ldrh	r3, [r3, #0]
 80064c8:	b29b      	uxth	r3, r3
 80064ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80064ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80064d2:	b29a      	uxth	r2, r3
 80064d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064d6:	801a      	strh	r2, [r3, #0]
 80064d8:	e054      	b.n	8006584 <USB_EPStartXfer+0x692>
 80064da:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80064de:	2b3e      	cmp	r3, #62	; 0x3e
 80064e0:	d817      	bhi.n	8006512 <USB_EPStartXfer+0x620>
 80064e2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80064e6:	085b      	lsrs	r3, r3, #1
 80064e8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80064ec:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80064f0:	f003 0301 	and.w	r3, r3, #1
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d004      	beq.n	8006502 <USB_EPStartXfer+0x610>
 80064f8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80064fc:	3301      	adds	r3, #1
 80064fe:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006502:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006506:	b29b      	uxth	r3, r3
 8006508:	029b      	lsls	r3, r3, #10
 800650a:	b29a      	uxth	r2, r3
 800650c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800650e:	801a      	strh	r2, [r3, #0]
 8006510:	e038      	b.n	8006584 <USB_EPStartXfer+0x692>
 8006512:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006516:	095b      	lsrs	r3, r3, #5
 8006518:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800651c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006520:	f003 031f 	and.w	r3, r3, #31
 8006524:	2b00      	cmp	r3, #0
 8006526:	d104      	bne.n	8006532 <USB_EPStartXfer+0x640>
 8006528:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800652c:	3b01      	subs	r3, #1
 800652e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006532:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006536:	b29b      	uxth	r3, r3
 8006538:	029b      	lsls	r3, r3, #10
 800653a:	b29b      	uxth	r3, r3
 800653c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006540:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006544:	b29a      	uxth	r2, r3
 8006546:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006548:	801a      	strh	r2, [r3, #0]
 800654a:	e01b      	b.n	8006584 <USB_EPStartXfer+0x692>
 800654c:	463b      	mov	r3, r7
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	785b      	ldrb	r3, [r3, #1]
 8006552:	2b01      	cmp	r3, #1
 8006554:	d116      	bne.n	8006584 <USB_EPStartXfer+0x692>
 8006556:	1d3b      	adds	r3, r7, #4
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800655e:	b29b      	uxth	r3, r3
 8006560:	461a      	mov	r2, r3
 8006562:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006564:	4413      	add	r3, r2
 8006566:	647b      	str	r3, [r7, #68]	; 0x44
 8006568:	463b      	mov	r3, r7
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	781b      	ldrb	r3, [r3, #0]
 800656e:	00da      	lsls	r2, r3, #3
 8006570:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006572:	4413      	add	r3, r2
 8006574:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006578:	643b      	str	r3, [r7, #64]	; 0x40
 800657a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800657e:	b29a      	uxth	r2, r3
 8006580:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006582:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006584:	463b      	mov	r3, r7
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	895b      	ldrh	r3, [r3, #10]
 800658a:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800658e:	463b      	mov	r3, r7
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	6959      	ldr	r1, [r3, #20]
 8006594:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006598:	b29b      	uxth	r3, r3
 800659a:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 800659e:	1d38      	adds	r0, r7, #4
 80065a0:	6800      	ldr	r0, [r0, #0]
 80065a2:	f000 ff1b 	bl	80073dc <USB_WritePMA>
 80065a6:	e1e2      	b.n	800696e <USB_EPStartXfer+0xa7c>
          }
        }
        /*auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer*/
        else
        {
          len = ep->xfer_len_db;
 80065a8:	463b      	mov	r3, r7
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	6a1b      	ldr	r3, [r3, #32]
 80065ae:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          /*disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 80065b2:	1d3b      	adds	r3, r7, #4
 80065b4:	681a      	ldr	r2, [r3, #0]
 80065b6:	463b      	mov	r3, r7
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	781b      	ldrb	r3, [r3, #0]
 80065bc:	009b      	lsls	r3, r3, #2
 80065be:	4413      	add	r3, r2
 80065c0:	881b      	ldrh	r3, [r3, #0]
 80065c2:	b29b      	uxth	r3, r3
 80065c4:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80065c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065cc:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 80065d0:	1d3b      	adds	r3, r7, #4
 80065d2:	681a      	ldr	r2, [r3, #0]
 80065d4:	463b      	mov	r3, r7
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	781b      	ldrb	r3, [r3, #0]
 80065da:	009b      	lsls	r3, r3, #2
 80065dc:	441a      	add	r2, r3
 80065de:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80065e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80065e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80065ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80065ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065f2:	b29b      	uxth	r3, r3
 80065f4:	8013      	strh	r3, [r2, #0]
          /*Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80065f6:	1d3b      	adds	r3, r7, #4
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	663b      	str	r3, [r7, #96]	; 0x60
 80065fc:	1d3b      	adds	r3, r7, #4
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006604:	b29b      	uxth	r3, r3
 8006606:	461a      	mov	r2, r3
 8006608:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800660a:	4413      	add	r3, r2
 800660c:	663b      	str	r3, [r7, #96]	; 0x60
 800660e:	463b      	mov	r3, r7
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	781b      	ldrb	r3, [r3, #0]
 8006614:	00da      	lsls	r2, r3, #3
 8006616:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006618:	4413      	add	r3, r2
 800661a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800661e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006620:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006624:	b29a      	uxth	r2, r3
 8006626:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006628:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800662a:	463b      	mov	r3, r7
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	891b      	ldrh	r3, [r3, #8]
 8006630:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
          /*Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006634:	463b      	mov	r3, r7
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	6959      	ldr	r1, [r3, #20]
 800663a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800663e:	b29b      	uxth	r3, r3
 8006640:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8006644:	1d38      	adds	r0, r7, #4
 8006646:	6800      	ldr	r0, [r0, #0]
 8006648:	f000 fec8 	bl	80073dc <USB_WritePMA>
 800664c:	e18f      	b.n	800696e <USB_EPStartXfer+0xa7c>

      /*mange isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800664e:	1d3b      	adds	r3, r7, #4
 8006650:	681a      	ldr	r2, [r3, #0]
 8006652:	463b      	mov	r3, r7
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	781b      	ldrb	r3, [r3, #0]
 8006658:	009b      	lsls	r3, r3, #2
 800665a:	4413      	add	r3, r2
 800665c:	881b      	ldrh	r3, [r3, #0]
 800665e:	b29b      	uxth	r3, r3
 8006660:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006664:	2b00      	cmp	r3, #0
 8006666:	f000 808f 	beq.w	8006788 <USB_EPStartXfer+0x896>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800666a:	1d3b      	adds	r3, r7, #4
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	67bb      	str	r3, [r7, #120]	; 0x78
 8006670:	463b      	mov	r3, r7
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	785b      	ldrb	r3, [r3, #1]
 8006676:	2b00      	cmp	r3, #0
 8006678:	d164      	bne.n	8006744 <USB_EPStartXfer+0x852>
 800667a:	1d3b      	adds	r3, r7, #4
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	673b      	str	r3, [r7, #112]	; 0x70
 8006680:	1d3b      	adds	r3, r7, #4
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006688:	b29b      	uxth	r3, r3
 800668a:	461a      	mov	r2, r3
 800668c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800668e:	4413      	add	r3, r2
 8006690:	673b      	str	r3, [r7, #112]	; 0x70
 8006692:	463b      	mov	r3, r7
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	781b      	ldrb	r3, [r3, #0]
 8006698:	00da      	lsls	r2, r3, #3
 800669a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800669c:	4413      	add	r3, r2
 800669e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80066a2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80066a4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d112      	bne.n	80066d2 <USB_EPStartXfer+0x7e0>
 80066ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066ae:	881b      	ldrh	r3, [r3, #0]
 80066b0:	b29b      	uxth	r3, r3
 80066b2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80066b6:	b29a      	uxth	r2, r3
 80066b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066ba:	801a      	strh	r2, [r3, #0]
 80066bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066be:	881b      	ldrh	r3, [r3, #0]
 80066c0:	b29b      	uxth	r3, r3
 80066c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80066c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80066ca:	b29a      	uxth	r2, r3
 80066cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066ce:	801a      	strh	r2, [r3, #0]
 80066d0:	e054      	b.n	800677c <USB_EPStartXfer+0x88a>
 80066d2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80066d6:	2b3e      	cmp	r3, #62	; 0x3e
 80066d8:	d817      	bhi.n	800670a <USB_EPStartXfer+0x818>
 80066da:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80066de:	085b      	lsrs	r3, r3, #1
 80066e0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80066e4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80066e8:	f003 0301 	and.w	r3, r3, #1
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d004      	beq.n	80066fa <USB_EPStartXfer+0x808>
 80066f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066f4:	3301      	adds	r3, #1
 80066f6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80066fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066fe:	b29b      	uxth	r3, r3
 8006700:	029b      	lsls	r3, r3, #10
 8006702:	b29a      	uxth	r2, r3
 8006704:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006706:	801a      	strh	r2, [r3, #0]
 8006708:	e038      	b.n	800677c <USB_EPStartXfer+0x88a>
 800670a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800670e:	095b      	lsrs	r3, r3, #5
 8006710:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006714:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006718:	f003 031f 	and.w	r3, r3, #31
 800671c:	2b00      	cmp	r3, #0
 800671e:	d104      	bne.n	800672a <USB_EPStartXfer+0x838>
 8006720:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006724:	3b01      	subs	r3, #1
 8006726:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800672a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800672e:	b29b      	uxth	r3, r3
 8006730:	029b      	lsls	r3, r3, #10
 8006732:	b29b      	uxth	r3, r3
 8006734:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006738:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800673c:	b29a      	uxth	r2, r3
 800673e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006740:	801a      	strh	r2, [r3, #0]
 8006742:	e01b      	b.n	800677c <USB_EPStartXfer+0x88a>
 8006744:	463b      	mov	r3, r7
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	785b      	ldrb	r3, [r3, #1]
 800674a:	2b01      	cmp	r3, #1
 800674c:	d116      	bne.n	800677c <USB_EPStartXfer+0x88a>
 800674e:	1d3b      	adds	r3, r7, #4
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006756:	b29b      	uxth	r3, r3
 8006758:	461a      	mov	r2, r3
 800675a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800675c:	4413      	add	r3, r2
 800675e:	67bb      	str	r3, [r7, #120]	; 0x78
 8006760:	463b      	mov	r3, r7
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	781b      	ldrb	r3, [r3, #0]
 8006766:	00da      	lsls	r2, r3, #3
 8006768:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800676a:	4413      	add	r3, r2
 800676c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006770:	677b      	str	r3, [r7, #116]	; 0x74
 8006772:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006776:	b29a      	uxth	r2, r3
 8006778:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800677a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800677c:	463b      	mov	r3, r7
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	895b      	ldrh	r3, [r3, #10]
 8006782:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
 8006786:	e097      	b.n	80068b8 <USB_EPStartXfer+0x9c6>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006788:	463b      	mov	r3, r7
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	785b      	ldrb	r3, [r3, #1]
 800678e:	2b00      	cmp	r3, #0
 8006790:	d168      	bne.n	8006864 <USB_EPStartXfer+0x972>
 8006792:	1d3b      	adds	r3, r7, #4
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800679a:	1d3b      	adds	r3, r7, #4
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80067a2:	b29b      	uxth	r3, r3
 80067a4:	461a      	mov	r2, r3
 80067a6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80067aa:	4413      	add	r3, r2
 80067ac:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80067b0:	463b      	mov	r3, r7
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	781b      	ldrb	r3, [r3, #0]
 80067b6:	00da      	lsls	r2, r3, #3
 80067b8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80067bc:	4413      	add	r3, r2
 80067be:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80067c2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80067c4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d112      	bne.n	80067f2 <USB_EPStartXfer+0x900>
 80067cc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80067ce:	881b      	ldrh	r3, [r3, #0]
 80067d0:	b29b      	uxth	r3, r3
 80067d2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80067d6:	b29a      	uxth	r2, r3
 80067d8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80067da:	801a      	strh	r2, [r3, #0]
 80067dc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80067de:	881b      	ldrh	r3, [r3, #0]
 80067e0:	b29b      	uxth	r3, r3
 80067e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067ea:	b29a      	uxth	r2, r3
 80067ec:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80067ee:	801a      	strh	r2, [r3, #0]
 80067f0:	e05d      	b.n	80068ae <USB_EPStartXfer+0x9bc>
 80067f2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80067f6:	2b3e      	cmp	r3, #62	; 0x3e
 80067f8:	d817      	bhi.n	800682a <USB_EPStartXfer+0x938>
 80067fa:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80067fe:	085b      	lsrs	r3, r3, #1
 8006800:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006804:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006808:	f003 0301 	and.w	r3, r3, #1
 800680c:	2b00      	cmp	r3, #0
 800680e:	d004      	beq.n	800681a <USB_EPStartXfer+0x928>
 8006810:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006814:	3301      	adds	r3, #1
 8006816:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800681a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800681e:	b29b      	uxth	r3, r3
 8006820:	029b      	lsls	r3, r3, #10
 8006822:	b29a      	uxth	r2, r3
 8006824:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006826:	801a      	strh	r2, [r3, #0]
 8006828:	e041      	b.n	80068ae <USB_EPStartXfer+0x9bc>
 800682a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800682e:	095b      	lsrs	r3, r3, #5
 8006830:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006834:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006838:	f003 031f 	and.w	r3, r3, #31
 800683c:	2b00      	cmp	r3, #0
 800683e:	d104      	bne.n	800684a <USB_EPStartXfer+0x958>
 8006840:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006844:	3b01      	subs	r3, #1
 8006846:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800684a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800684e:	b29b      	uxth	r3, r3
 8006850:	029b      	lsls	r3, r3, #10
 8006852:	b29b      	uxth	r3, r3
 8006854:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006858:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800685c:	b29a      	uxth	r2, r3
 800685e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006860:	801a      	strh	r2, [r3, #0]
 8006862:	e024      	b.n	80068ae <USB_EPStartXfer+0x9bc>
 8006864:	463b      	mov	r3, r7
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	785b      	ldrb	r3, [r3, #1]
 800686a:	2b01      	cmp	r3, #1
 800686c:	d11f      	bne.n	80068ae <USB_EPStartXfer+0x9bc>
 800686e:	1d3b      	adds	r3, r7, #4
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006876:	1d3b      	adds	r3, r7, #4
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800687e:	b29b      	uxth	r3, r3
 8006880:	461a      	mov	r2, r3
 8006882:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006886:	4413      	add	r3, r2
 8006888:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800688c:	463b      	mov	r3, r7
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	781b      	ldrb	r3, [r3, #0]
 8006892:	00da      	lsls	r2, r3, #3
 8006894:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006898:	4413      	add	r3, r2
 800689a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800689e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80068a2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80068a6:	b29a      	uxth	r2, r3
 80068a8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80068ac:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80068ae:	463b      	mov	r3, r7
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	891b      	ldrh	r3, [r3, #8]
 80068b4:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
        }
        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80068b8:	463b      	mov	r3, r7
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	6959      	ldr	r1, [r3, #20]
 80068be:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80068c2:	b29b      	uxth	r3, r3
 80068c4:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 80068c8:	1d38      	adds	r0, r7, #4
 80068ca:	6800      	ldr	r0, [r0, #0]
 80068cc:	f000 fd86 	bl	80073dc <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 80068d0:	463b      	mov	r3, r7
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	785b      	ldrb	r3, [r3, #1]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d122      	bne.n	8006920 <USB_EPStartXfer+0xa2e>
 80068da:	1d3b      	adds	r3, r7, #4
 80068dc:	681a      	ldr	r2, [r3, #0]
 80068de:	463b      	mov	r3, r7
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	781b      	ldrb	r3, [r3, #0]
 80068e4:	009b      	lsls	r3, r3, #2
 80068e6:	4413      	add	r3, r2
 80068e8:	881b      	ldrh	r3, [r3, #0]
 80068ea:	b29b      	uxth	r3, r3
 80068ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80068f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068f4:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 80068f8:	1d3b      	adds	r3, r7, #4
 80068fa:	681a      	ldr	r2, [r3, #0]
 80068fc:	463b      	mov	r3, r7
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	781b      	ldrb	r3, [r3, #0]
 8006902:	009b      	lsls	r3, r3, #2
 8006904:	441a      	add	r2, r3
 8006906:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 800690a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800690e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006912:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006916:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800691a:	b29b      	uxth	r3, r3
 800691c:	8013      	strh	r3, [r2, #0]
 800691e:	e026      	b.n	800696e <USB_EPStartXfer+0xa7c>
 8006920:	463b      	mov	r3, r7
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	785b      	ldrb	r3, [r3, #1]
 8006926:	2b01      	cmp	r3, #1
 8006928:	d121      	bne.n	800696e <USB_EPStartXfer+0xa7c>
 800692a:	1d3b      	adds	r3, r7, #4
 800692c:	681a      	ldr	r2, [r3, #0]
 800692e:	463b      	mov	r3, r7
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	781b      	ldrb	r3, [r3, #0]
 8006934:	009b      	lsls	r3, r3, #2
 8006936:	4413      	add	r3, r2
 8006938:	881b      	ldrh	r3, [r3, #0]
 800693a:	b29b      	uxth	r3, r3
 800693c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006940:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006944:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 8006948:	1d3b      	adds	r3, r7, #4
 800694a:	681a      	ldr	r2, [r3, #0]
 800694c:	463b      	mov	r3, r7
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	781b      	ldrb	r3, [r3, #0]
 8006952:	009b      	lsls	r3, r3, #2
 8006954:	441a      	add	r2, r3
 8006956:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 800695a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800695e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006962:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006966:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800696a:	b29b      	uxth	r3, r3
 800696c:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800696e:	1d3b      	adds	r3, r7, #4
 8006970:	681a      	ldr	r2, [r3, #0]
 8006972:	463b      	mov	r3, r7
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	781b      	ldrb	r3, [r3, #0]
 8006978:	009b      	lsls	r3, r3, #2
 800697a:	4413      	add	r3, r2
 800697c:	881b      	ldrh	r3, [r3, #0]
 800697e:	b29b      	uxth	r3, r3
 8006980:	f107 020e 	add.w	r2, r7, #14
 8006984:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006988:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800698c:	8013      	strh	r3, [r2, #0]
 800698e:	f107 030e 	add.w	r3, r7, #14
 8006992:	f107 020e 	add.w	r2, r7, #14
 8006996:	8812      	ldrh	r2, [r2, #0]
 8006998:	f082 0210 	eor.w	r2, r2, #16
 800699c:	801a      	strh	r2, [r3, #0]
 800699e:	f107 030e 	add.w	r3, r7, #14
 80069a2:	f107 020e 	add.w	r2, r7, #14
 80069a6:	8812      	ldrh	r2, [r2, #0]
 80069a8:	f082 0220 	eor.w	r2, r2, #32
 80069ac:	801a      	strh	r2, [r3, #0]
 80069ae:	1d3b      	adds	r3, r7, #4
 80069b0:	681a      	ldr	r2, [r3, #0]
 80069b2:	463b      	mov	r3, r7
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	781b      	ldrb	r3, [r3, #0]
 80069b8:	009b      	lsls	r3, r3, #2
 80069ba:	441a      	add	r2, r3
 80069bc:	f107 030e 	add.w	r3, r7, #14
 80069c0:	881b      	ldrh	r3, [r3, #0]
 80069c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80069c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80069ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80069ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069d2:	b29b      	uxth	r3, r3
 80069d4:	8013      	strh	r3, [r2, #0]
 80069d6:	e3b5      	b.n	8007144 <USB_EPStartXfer+0x1252>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80069d8:	463b      	mov	r3, r7
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	7b1b      	ldrb	r3, [r3, #12]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	f040 8090 	bne.w	8006b04 <USB_EPStartXfer+0xc12>
    {
      /* Multi packet transfer*/
      if (ep->xfer_len > ep->maxpacket)
 80069e4:	463b      	mov	r3, r7
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	699a      	ldr	r2, [r3, #24]
 80069ea:	463b      	mov	r3, r7
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	691b      	ldr	r3, [r3, #16]
 80069f0:	429a      	cmp	r2, r3
 80069f2:	d90e      	bls.n	8006a12 <USB_EPStartXfer+0xb20>
      {
        len = ep->maxpacket;
 80069f4:	463b      	mov	r3, r7
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	691b      	ldr	r3, [r3, #16]
 80069fa:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        ep->xfer_len -= len;
 80069fe:	463b      	mov	r3, r7
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	699a      	ldr	r2, [r3, #24]
 8006a04:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006a08:	1ad2      	subs	r2, r2, r3
 8006a0a:	463b      	mov	r3, r7
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	619a      	str	r2, [r3, #24]
 8006a10:	e008      	b.n	8006a24 <USB_EPStartXfer+0xb32>
      }
      else
      {
        len = ep->xfer_len;
 8006a12:	463b      	mov	r3, r7
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	699b      	ldr	r3, [r3, #24]
 8006a18:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        ep->xfer_len = 0U;
 8006a1c:	463b      	mov	r3, r7
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	2200      	movs	r2, #0
 8006a22:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8006a24:	1d3b      	adds	r3, r7, #4
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006a2c:	1d3b      	adds	r3, r7, #4
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a34:	b29b      	uxth	r3, r3
 8006a36:	461a      	mov	r2, r3
 8006a38:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006a3c:	4413      	add	r3, r2
 8006a3e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006a42:	463b      	mov	r3, r7
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	781b      	ldrb	r3, [r3, #0]
 8006a48:	00da      	lsls	r2, r3, #3
 8006a4a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006a4e:	4413      	add	r3, r2
 8006a50:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006a54:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006a58:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d116      	bne.n	8006a8e <USB_EPStartXfer+0xb9c>
 8006a60:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006a64:	881b      	ldrh	r3, [r3, #0]
 8006a66:	b29b      	uxth	r3, r3
 8006a68:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006a6c:	b29a      	uxth	r2, r3
 8006a6e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006a72:	801a      	strh	r2, [r3, #0]
 8006a74:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006a78:	881b      	ldrh	r3, [r3, #0]
 8006a7a:	b29b      	uxth	r3, r3
 8006a7c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a80:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a84:	b29a      	uxth	r2, r3
 8006a86:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006a8a:	801a      	strh	r2, [r3, #0]
 8006a8c:	e32c      	b.n	80070e8 <USB_EPStartXfer+0x11f6>
 8006a8e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006a92:	2b3e      	cmp	r3, #62	; 0x3e
 8006a94:	d818      	bhi.n	8006ac8 <USB_EPStartXfer+0xbd6>
 8006a96:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006a9a:	085b      	lsrs	r3, r3, #1
 8006a9c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006aa0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006aa4:	f003 0301 	and.w	r3, r3, #1
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d004      	beq.n	8006ab6 <USB_EPStartXfer+0xbc4>
 8006aac:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006ab0:	3301      	adds	r3, #1
 8006ab2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006ab6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006aba:	b29b      	uxth	r3, r3
 8006abc:	029b      	lsls	r3, r3, #10
 8006abe:	b29a      	uxth	r2, r3
 8006ac0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006ac4:	801a      	strh	r2, [r3, #0]
 8006ac6:	e30f      	b.n	80070e8 <USB_EPStartXfer+0x11f6>
 8006ac8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006acc:	095b      	lsrs	r3, r3, #5
 8006ace:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006ad2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006ad6:	f003 031f 	and.w	r3, r3, #31
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d104      	bne.n	8006ae8 <USB_EPStartXfer+0xbf6>
 8006ade:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006ae2:	3b01      	subs	r3, #1
 8006ae4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006ae8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006aec:	b29b      	uxth	r3, r3
 8006aee:	029b      	lsls	r3, r3, #10
 8006af0:	b29b      	uxth	r3, r3
 8006af2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006af6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006afa:	b29a      	uxth	r2, r3
 8006afc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006b00:	801a      	strh	r2, [r3, #0]
 8006b02:	e2f1      	b.n	80070e8 <USB_EPStartXfer+0x11f6>
    }
    else
    {
      /*First Transfer Coming From HAL_PCD_EP_Receive & From ISR*/
      /*Set the Double buffer counter*/
      if (ep->type == EP_TYPE_BULK)
 8006b04:	463b      	mov	r3, r7
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	78db      	ldrb	r3, [r3, #3]
 8006b0a:	2b02      	cmp	r3, #2
 8006b0c:	f040 818f 	bne.w	8006e2e <USB_EPStartXfer+0xf3c>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8006b10:	463b      	mov	r3, r7
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	785b      	ldrb	r3, [r3, #1]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d175      	bne.n	8006c06 <USB_EPStartXfer+0xd14>
 8006b1a:	1d3b      	adds	r3, r7, #4
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006b22:	1d3b      	adds	r3, r7, #4
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b2a:	b29b      	uxth	r3, r3
 8006b2c:	461a      	mov	r2, r3
 8006b2e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006b32:	4413      	add	r3, r2
 8006b34:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006b38:	463b      	mov	r3, r7
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	781b      	ldrb	r3, [r3, #0]
 8006b3e:	00da      	lsls	r2, r3, #3
 8006b40:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006b44:	4413      	add	r3, r2
 8006b46:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006b4a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006b4e:	463b      	mov	r3, r7
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	691b      	ldr	r3, [r3, #16]
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d116      	bne.n	8006b86 <USB_EPStartXfer+0xc94>
 8006b58:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006b5c:	881b      	ldrh	r3, [r3, #0]
 8006b5e:	b29b      	uxth	r3, r3
 8006b60:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006b64:	b29a      	uxth	r2, r3
 8006b66:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006b6a:	801a      	strh	r2, [r3, #0]
 8006b6c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006b70:	881b      	ldrh	r3, [r3, #0]
 8006b72:	b29b      	uxth	r3, r3
 8006b74:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b78:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b7c:	b29a      	uxth	r2, r3
 8006b7e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006b82:	801a      	strh	r2, [r3, #0]
 8006b84:	e065      	b.n	8006c52 <USB_EPStartXfer+0xd60>
 8006b86:	463b      	mov	r3, r7
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	691b      	ldr	r3, [r3, #16]
 8006b8c:	2b3e      	cmp	r3, #62	; 0x3e
 8006b8e:	d81a      	bhi.n	8006bc6 <USB_EPStartXfer+0xcd4>
 8006b90:	463b      	mov	r3, r7
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	691b      	ldr	r3, [r3, #16]
 8006b96:	085b      	lsrs	r3, r3, #1
 8006b98:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006b9c:	463b      	mov	r3, r7
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	691b      	ldr	r3, [r3, #16]
 8006ba2:	f003 0301 	and.w	r3, r3, #1
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d004      	beq.n	8006bb4 <USB_EPStartXfer+0xcc2>
 8006baa:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006bae:	3301      	adds	r3, #1
 8006bb0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006bb4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006bb8:	b29b      	uxth	r3, r3
 8006bba:	029b      	lsls	r3, r3, #10
 8006bbc:	b29a      	uxth	r2, r3
 8006bbe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006bc2:	801a      	strh	r2, [r3, #0]
 8006bc4:	e045      	b.n	8006c52 <USB_EPStartXfer+0xd60>
 8006bc6:	463b      	mov	r3, r7
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	691b      	ldr	r3, [r3, #16]
 8006bcc:	095b      	lsrs	r3, r3, #5
 8006bce:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006bd2:	463b      	mov	r3, r7
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	691b      	ldr	r3, [r3, #16]
 8006bd8:	f003 031f 	and.w	r3, r3, #31
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d104      	bne.n	8006bea <USB_EPStartXfer+0xcf8>
 8006be0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006be4:	3b01      	subs	r3, #1
 8006be6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006bea:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006bee:	b29b      	uxth	r3, r3
 8006bf0:	029b      	lsls	r3, r3, #10
 8006bf2:	b29b      	uxth	r3, r3
 8006bf4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006bf8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006bfc:	b29a      	uxth	r2, r3
 8006bfe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006c02:	801a      	strh	r2, [r3, #0]
 8006c04:	e025      	b.n	8006c52 <USB_EPStartXfer+0xd60>
 8006c06:	463b      	mov	r3, r7
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	785b      	ldrb	r3, [r3, #1]
 8006c0c:	2b01      	cmp	r3, #1
 8006c0e:	d120      	bne.n	8006c52 <USB_EPStartXfer+0xd60>
 8006c10:	1d3b      	adds	r3, r7, #4
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006c18:	1d3b      	adds	r3, r7, #4
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c20:	b29b      	uxth	r3, r3
 8006c22:	461a      	mov	r2, r3
 8006c24:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006c28:	4413      	add	r3, r2
 8006c2a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006c2e:	463b      	mov	r3, r7
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	781b      	ldrb	r3, [r3, #0]
 8006c34:	00da      	lsls	r2, r3, #3
 8006c36:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006c3a:	4413      	add	r3, r2
 8006c3c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006c40:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006c44:	463b      	mov	r3, r7
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	691b      	ldr	r3, [r3, #16]
 8006c4a:	b29a      	uxth	r2, r3
 8006c4c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006c50:	801a      	strh	r2, [r3, #0]
 8006c52:	1d3b      	adds	r3, r7, #4
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006c5a:	463b      	mov	r3, r7
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	785b      	ldrb	r3, [r3, #1]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d175      	bne.n	8006d50 <USB_EPStartXfer+0xe5e>
 8006c64:	1d3b      	adds	r3, r7, #4
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006c6c:	1d3b      	adds	r3, r7, #4
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c74:	b29b      	uxth	r3, r3
 8006c76:	461a      	mov	r2, r3
 8006c78:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006c7c:	4413      	add	r3, r2
 8006c7e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006c82:	463b      	mov	r3, r7
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	781b      	ldrb	r3, [r3, #0]
 8006c88:	00da      	lsls	r2, r3, #3
 8006c8a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006c8e:	4413      	add	r3, r2
 8006c90:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006c94:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006c98:	463b      	mov	r3, r7
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	691b      	ldr	r3, [r3, #16]
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d116      	bne.n	8006cd0 <USB_EPStartXfer+0xdde>
 8006ca2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006ca6:	881b      	ldrh	r3, [r3, #0]
 8006ca8:	b29b      	uxth	r3, r3
 8006caa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006cae:	b29a      	uxth	r2, r3
 8006cb0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006cb4:	801a      	strh	r2, [r3, #0]
 8006cb6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006cba:	881b      	ldrh	r3, [r3, #0]
 8006cbc:	b29b      	uxth	r3, r3
 8006cbe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006cc2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006cc6:	b29a      	uxth	r2, r3
 8006cc8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006ccc:	801a      	strh	r2, [r3, #0]
 8006cce:	e061      	b.n	8006d94 <USB_EPStartXfer+0xea2>
 8006cd0:	463b      	mov	r3, r7
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	691b      	ldr	r3, [r3, #16]
 8006cd6:	2b3e      	cmp	r3, #62	; 0x3e
 8006cd8:	d81a      	bhi.n	8006d10 <USB_EPStartXfer+0xe1e>
 8006cda:	463b      	mov	r3, r7
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	691b      	ldr	r3, [r3, #16]
 8006ce0:	085b      	lsrs	r3, r3, #1
 8006ce2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006ce6:	463b      	mov	r3, r7
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	691b      	ldr	r3, [r3, #16]
 8006cec:	f003 0301 	and.w	r3, r3, #1
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d004      	beq.n	8006cfe <USB_EPStartXfer+0xe0c>
 8006cf4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006cf8:	3301      	adds	r3, #1
 8006cfa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006cfe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d02:	b29b      	uxth	r3, r3
 8006d04:	029b      	lsls	r3, r3, #10
 8006d06:	b29a      	uxth	r2, r3
 8006d08:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006d0c:	801a      	strh	r2, [r3, #0]
 8006d0e:	e041      	b.n	8006d94 <USB_EPStartXfer+0xea2>
 8006d10:	463b      	mov	r3, r7
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	691b      	ldr	r3, [r3, #16]
 8006d16:	095b      	lsrs	r3, r3, #5
 8006d18:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006d1c:	463b      	mov	r3, r7
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	691b      	ldr	r3, [r3, #16]
 8006d22:	f003 031f 	and.w	r3, r3, #31
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d104      	bne.n	8006d34 <USB_EPStartXfer+0xe42>
 8006d2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d2e:	3b01      	subs	r3, #1
 8006d30:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006d34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d38:	b29b      	uxth	r3, r3
 8006d3a:	029b      	lsls	r3, r3, #10
 8006d3c:	b29b      	uxth	r3, r3
 8006d3e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d42:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d46:	b29a      	uxth	r2, r3
 8006d48:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006d4c:	801a      	strh	r2, [r3, #0]
 8006d4e:	e021      	b.n	8006d94 <USB_EPStartXfer+0xea2>
 8006d50:	463b      	mov	r3, r7
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	785b      	ldrb	r3, [r3, #1]
 8006d56:	2b01      	cmp	r3, #1
 8006d58:	d11c      	bne.n	8006d94 <USB_EPStartXfer+0xea2>
 8006d5a:	1d3b      	adds	r3, r7, #4
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d62:	b29b      	uxth	r3, r3
 8006d64:	461a      	mov	r2, r3
 8006d66:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006d6a:	4413      	add	r3, r2
 8006d6c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006d70:	463b      	mov	r3, r7
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	781b      	ldrb	r3, [r3, #0]
 8006d76:	00da      	lsls	r2, r3, #3
 8006d78:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006d7c:	4413      	add	r3, r2
 8006d7e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006d82:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006d86:	463b      	mov	r3, r7
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	691b      	ldr	r3, [r3, #16]
 8006d8c:	b29a      	uxth	r2, r3
 8006d8e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006d92:	801a      	strh	r2, [r3, #0]
        /*Coming from ISR*/
        if (ep->xfer_count != 0U)
 8006d94:	463b      	mov	r3, r7
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	69db      	ldr	r3, [r3, #28]
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	f000 81a4 	beq.w	80070e8 <USB_EPStartXfer+0x11f6>
        {
          /* update last value to check if there is blocking state*/
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8006da0:	1d3b      	adds	r3, r7, #4
 8006da2:	681a      	ldr	r2, [r3, #0]
 8006da4:	463b      	mov	r3, r7
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	781b      	ldrb	r3, [r3, #0]
 8006daa:	009b      	lsls	r3, r3, #2
 8006dac:	4413      	add	r3, r2
 8006dae:	881b      	ldrh	r3, [r3, #0]
 8006db0:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006db4:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8006db8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d005      	beq.n	8006dcc <USB_EPStartXfer+0xeda>
 8006dc0:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8006dc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d10d      	bne.n	8006de8 <USB_EPStartXfer+0xef6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006dcc:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8006dd0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	f040 8187 	bne.w	80070e8 <USB_EPStartXfer+0x11f6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006dda:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8006dde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	f040 8180 	bne.w	80070e8 <USB_EPStartXfer+0x11f6>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8006de8:	1d3b      	adds	r3, r7, #4
 8006dea:	681a      	ldr	r2, [r3, #0]
 8006dec:	463b      	mov	r3, r7
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	781b      	ldrb	r3, [r3, #0]
 8006df2:	009b      	lsls	r3, r3, #2
 8006df4:	4413      	add	r3, r2
 8006df6:	881b      	ldrh	r3, [r3, #0]
 8006df8:	b29b      	uxth	r3, r3
 8006dfa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006dfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e02:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 8006e06:	1d3b      	adds	r3, r7, #4
 8006e08:	681a      	ldr	r2, [r3, #0]
 8006e0a:	463b      	mov	r3, r7
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	781b      	ldrb	r3, [r3, #0]
 8006e10:	009b      	lsls	r3, r3, #2
 8006e12:	441a      	add	r2, r3
 8006e14:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8006e18:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e1c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e20:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e24:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006e28:	b29b      	uxth	r3, r3
 8006e2a:	8013      	strh	r3, [r2, #0]
 8006e2c:	e15c      	b.n	80070e8 <USB_EPStartXfer+0x11f6>
          }
        }
      }
      /*iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8006e2e:	463b      	mov	r3, r7
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	78db      	ldrb	r3, [r3, #3]
 8006e34:	2b01      	cmp	r3, #1
 8006e36:	f040 8155 	bne.w	80070e4 <USB_EPStartXfer+0x11f2>
      {
        /* Multi packet transfer*/
        if (ep->xfer_len > ep->maxpacket)
 8006e3a:	463b      	mov	r3, r7
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	699a      	ldr	r2, [r3, #24]
 8006e40:	463b      	mov	r3, r7
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	691b      	ldr	r3, [r3, #16]
 8006e46:	429a      	cmp	r2, r3
 8006e48:	d90e      	bls.n	8006e68 <USB_EPStartXfer+0xf76>
        {
          len = ep->maxpacket;
 8006e4a:	463b      	mov	r3, r7
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	691b      	ldr	r3, [r3, #16]
 8006e50:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          ep->xfer_len -= len;
 8006e54:	463b      	mov	r3, r7
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	699a      	ldr	r2, [r3, #24]
 8006e5a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006e5e:	1ad2      	subs	r2, r2, r3
 8006e60:	463b      	mov	r3, r7
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	619a      	str	r2, [r3, #24]
 8006e66:	e008      	b.n	8006e7a <USB_EPStartXfer+0xf88>
        }
        else
        {
          len = ep->xfer_len;
 8006e68:	463b      	mov	r3, r7
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	699b      	ldr	r3, [r3, #24]
 8006e6e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          ep->xfer_len = 0U;
 8006e72:	463b      	mov	r3, r7
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	2200      	movs	r2, #0
 8006e78:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8006e7a:	463b      	mov	r3, r7
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	785b      	ldrb	r3, [r3, #1]
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d16f      	bne.n	8006f64 <USB_EPStartXfer+0x1072>
 8006e84:	1d3b      	adds	r3, r7, #4
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006e8c:	1d3b      	adds	r3, r7, #4
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e94:	b29b      	uxth	r3, r3
 8006e96:	461a      	mov	r2, r3
 8006e98:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006e9c:	4413      	add	r3, r2
 8006e9e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006ea2:	463b      	mov	r3, r7
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	781b      	ldrb	r3, [r3, #0]
 8006ea8:	00da      	lsls	r2, r3, #3
 8006eaa:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006eae:	4413      	add	r3, r2
 8006eb0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006eb4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006eb8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d116      	bne.n	8006eee <USB_EPStartXfer+0xffc>
 8006ec0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006ec4:	881b      	ldrh	r3, [r3, #0]
 8006ec6:	b29b      	uxth	r3, r3
 8006ec8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006ecc:	b29a      	uxth	r2, r3
 8006ece:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006ed2:	801a      	strh	r2, [r3, #0]
 8006ed4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006ed8:	881b      	ldrh	r3, [r3, #0]
 8006eda:	b29b      	uxth	r3, r3
 8006edc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ee0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ee4:	b29a      	uxth	r2, r3
 8006ee6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006eea:	801a      	strh	r2, [r3, #0]
 8006eec:	e05f      	b.n	8006fae <USB_EPStartXfer+0x10bc>
 8006eee:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006ef2:	2b3e      	cmp	r3, #62	; 0x3e
 8006ef4:	d818      	bhi.n	8006f28 <USB_EPStartXfer+0x1036>
 8006ef6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006efa:	085b      	lsrs	r3, r3, #1
 8006efc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006f00:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006f04:	f003 0301 	and.w	r3, r3, #1
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d004      	beq.n	8006f16 <USB_EPStartXfer+0x1024>
 8006f0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f10:	3301      	adds	r3, #1
 8006f12:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006f16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f1a:	b29b      	uxth	r3, r3
 8006f1c:	029b      	lsls	r3, r3, #10
 8006f1e:	b29a      	uxth	r2, r3
 8006f20:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006f24:	801a      	strh	r2, [r3, #0]
 8006f26:	e042      	b.n	8006fae <USB_EPStartXfer+0x10bc>
 8006f28:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006f2c:	095b      	lsrs	r3, r3, #5
 8006f2e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006f32:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006f36:	f003 031f 	and.w	r3, r3, #31
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d104      	bne.n	8006f48 <USB_EPStartXfer+0x1056>
 8006f3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f42:	3b01      	subs	r3, #1
 8006f44:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006f48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f4c:	b29b      	uxth	r3, r3
 8006f4e:	029b      	lsls	r3, r3, #10
 8006f50:	b29b      	uxth	r3, r3
 8006f52:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f56:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f5a:	b29a      	uxth	r2, r3
 8006f5c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006f60:	801a      	strh	r2, [r3, #0]
 8006f62:	e024      	b.n	8006fae <USB_EPStartXfer+0x10bc>
 8006f64:	463b      	mov	r3, r7
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	785b      	ldrb	r3, [r3, #1]
 8006f6a:	2b01      	cmp	r3, #1
 8006f6c:	d11f      	bne.n	8006fae <USB_EPStartXfer+0x10bc>
 8006f6e:	1d3b      	adds	r3, r7, #4
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006f76:	1d3b      	adds	r3, r7, #4
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f7e:	b29b      	uxth	r3, r3
 8006f80:	461a      	mov	r2, r3
 8006f82:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006f86:	4413      	add	r3, r2
 8006f88:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006f8c:	463b      	mov	r3, r7
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	781b      	ldrb	r3, [r3, #0]
 8006f92:	00da      	lsls	r2, r3, #3
 8006f94:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006f98:	4413      	add	r3, r2
 8006f9a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006f9e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006fa2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006fa6:	b29a      	uxth	r2, r3
 8006fa8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006fac:	801a      	strh	r2, [r3, #0]
 8006fae:	1d3b      	adds	r3, r7, #4
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006fb6:	463b      	mov	r3, r7
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	785b      	ldrb	r3, [r3, #1]
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d16f      	bne.n	80070a0 <USB_EPStartXfer+0x11ae>
 8006fc0:	1d3b      	adds	r3, r7, #4
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006fc8:	1d3b      	adds	r3, r7, #4
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006fd0:	b29b      	uxth	r3, r3
 8006fd2:	461a      	mov	r2, r3
 8006fd4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006fd8:	4413      	add	r3, r2
 8006fda:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006fde:	463b      	mov	r3, r7
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	781b      	ldrb	r3, [r3, #0]
 8006fe4:	00da      	lsls	r2, r3, #3
 8006fe6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006fea:	4413      	add	r3, r2
 8006fec:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006ff0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006ff4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d116      	bne.n	800702a <USB_EPStartXfer+0x1138>
 8006ffc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007000:	881b      	ldrh	r3, [r3, #0]
 8007002:	b29b      	uxth	r3, r3
 8007004:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007008:	b29a      	uxth	r2, r3
 800700a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800700e:	801a      	strh	r2, [r3, #0]
 8007010:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007014:	881b      	ldrh	r3, [r3, #0]
 8007016:	b29b      	uxth	r3, r3
 8007018:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800701c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007020:	b29a      	uxth	r2, r3
 8007022:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007026:	801a      	strh	r2, [r3, #0]
 8007028:	e05e      	b.n	80070e8 <USB_EPStartXfer+0x11f6>
 800702a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800702e:	2b3e      	cmp	r3, #62	; 0x3e
 8007030:	d818      	bhi.n	8007064 <USB_EPStartXfer+0x1172>
 8007032:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007036:	085b      	lsrs	r3, r3, #1
 8007038:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800703c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007040:	f003 0301 	and.w	r3, r3, #1
 8007044:	2b00      	cmp	r3, #0
 8007046:	d004      	beq.n	8007052 <USB_EPStartXfer+0x1160>
 8007048:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800704c:	3301      	adds	r3, #1
 800704e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007052:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007056:	b29b      	uxth	r3, r3
 8007058:	029b      	lsls	r3, r3, #10
 800705a:	b29a      	uxth	r2, r3
 800705c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007060:	801a      	strh	r2, [r3, #0]
 8007062:	e041      	b.n	80070e8 <USB_EPStartXfer+0x11f6>
 8007064:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007068:	095b      	lsrs	r3, r3, #5
 800706a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800706e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007072:	f003 031f 	and.w	r3, r3, #31
 8007076:	2b00      	cmp	r3, #0
 8007078:	d104      	bne.n	8007084 <USB_EPStartXfer+0x1192>
 800707a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800707e:	3b01      	subs	r3, #1
 8007080:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007084:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007088:	b29b      	uxth	r3, r3
 800708a:	029b      	lsls	r3, r3, #10
 800708c:	b29b      	uxth	r3, r3
 800708e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007092:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007096:	b29a      	uxth	r2, r3
 8007098:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800709c:	801a      	strh	r2, [r3, #0]
 800709e:	e023      	b.n	80070e8 <USB_EPStartXfer+0x11f6>
 80070a0:	463b      	mov	r3, r7
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	785b      	ldrb	r3, [r3, #1]
 80070a6:	2b01      	cmp	r3, #1
 80070a8:	d11e      	bne.n	80070e8 <USB_EPStartXfer+0x11f6>
 80070aa:	1d3b      	adds	r3, r7, #4
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80070b2:	b29b      	uxth	r3, r3
 80070b4:	461a      	mov	r2, r3
 80070b6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80070ba:	4413      	add	r3, r2
 80070bc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80070c0:	463b      	mov	r3, r7
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	781b      	ldrb	r3, [r3, #0]
 80070c6:	00da      	lsls	r2, r3, #3
 80070c8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80070cc:	4413      	add	r3, r2
 80070ce:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80070d2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80070d6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80070da:	b29a      	uxth	r2, r3
 80070dc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80070e0:	801a      	strh	r2, [r3, #0]
 80070e2:	e001      	b.n	80070e8 <USB_EPStartXfer+0x11f6>
      }
      else
      {
        return HAL_ERROR;
 80070e4:	2301      	movs	r3, #1
 80070e6:	e02e      	b.n	8007146 <USB_EPStartXfer+0x1254>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80070e8:	1d3b      	adds	r3, r7, #4
 80070ea:	681a      	ldr	r2, [r3, #0]
 80070ec:	463b      	mov	r3, r7
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	781b      	ldrb	r3, [r3, #0]
 80070f2:	009b      	lsls	r3, r3, #2
 80070f4:	4413      	add	r3, r2
 80070f6:	881b      	ldrh	r3, [r3, #0]
 80070f8:	b29b      	uxth	r3, r3
 80070fa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80070fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007102:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8007106:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800710a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800710e:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8007112:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8007116:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800711a:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 800711e:	1d3b      	adds	r3, r7, #4
 8007120:	681a      	ldr	r2, [r3, #0]
 8007122:	463b      	mov	r3, r7
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	781b      	ldrb	r3, [r3, #0]
 8007128:	009b      	lsls	r3, r3, #2
 800712a:	441a      	add	r2, r3
 800712c:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8007130:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007134:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007138:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800713c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007140:	b29b      	uxth	r3, r3
 8007142:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007144:	2300      	movs	r3, #0
}
 8007146:	4618      	mov	r0, r3
 8007148:	f507 7788 	add.w	r7, r7, #272	; 0x110
 800714c:	46bd      	mov	sp, r7
 800714e:	bd80      	pop	{r7, pc}

08007150 <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007150:	b480      	push	{r7}
 8007152:	b085      	sub	sp, #20
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]
 8007158:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800715a:	683b      	ldr	r3, [r7, #0]
 800715c:	785b      	ldrb	r3, [r3, #1]
 800715e:	2b00      	cmp	r3, #0
 8007160:	d020      	beq.n	80071a4 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8007162:	687a      	ldr	r2, [r7, #4]
 8007164:	683b      	ldr	r3, [r7, #0]
 8007166:	781b      	ldrb	r3, [r3, #0]
 8007168:	009b      	lsls	r3, r3, #2
 800716a:	4413      	add	r3, r2
 800716c:	881b      	ldrh	r3, [r3, #0]
 800716e:	b29b      	uxth	r3, r3
 8007170:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007174:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007178:	81bb      	strh	r3, [r7, #12]
 800717a:	89bb      	ldrh	r3, [r7, #12]
 800717c:	f083 0310 	eor.w	r3, r3, #16
 8007180:	81bb      	strh	r3, [r7, #12]
 8007182:	687a      	ldr	r2, [r7, #4]
 8007184:	683b      	ldr	r3, [r7, #0]
 8007186:	781b      	ldrb	r3, [r3, #0]
 8007188:	009b      	lsls	r3, r3, #2
 800718a:	441a      	add	r2, r3
 800718c:	89bb      	ldrh	r3, [r7, #12]
 800718e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007192:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007196:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800719a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800719e:	b29b      	uxth	r3, r3
 80071a0:	8013      	strh	r3, [r2, #0]
 80071a2:	e01f      	b.n	80071e4 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80071a4:	687a      	ldr	r2, [r7, #4]
 80071a6:	683b      	ldr	r3, [r7, #0]
 80071a8:	781b      	ldrb	r3, [r3, #0]
 80071aa:	009b      	lsls	r3, r3, #2
 80071ac:	4413      	add	r3, r2
 80071ae:	881b      	ldrh	r3, [r3, #0]
 80071b0:	b29b      	uxth	r3, r3
 80071b2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80071b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071ba:	81fb      	strh	r3, [r7, #14]
 80071bc:	89fb      	ldrh	r3, [r7, #14]
 80071be:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80071c2:	81fb      	strh	r3, [r7, #14]
 80071c4:	687a      	ldr	r2, [r7, #4]
 80071c6:	683b      	ldr	r3, [r7, #0]
 80071c8:	781b      	ldrb	r3, [r3, #0]
 80071ca:	009b      	lsls	r3, r3, #2
 80071cc:	441a      	add	r2, r3
 80071ce:	89fb      	ldrh	r3, [r7, #14]
 80071d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80071d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80071d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80071dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80071e0:	b29b      	uxth	r3, r3
 80071e2:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80071e4:	2300      	movs	r3, #0
}
 80071e6:	4618      	mov	r0, r3
 80071e8:	3714      	adds	r7, #20
 80071ea:	46bd      	mov	sp, r7
 80071ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f0:	4770      	bx	lr

080071f2 <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80071f2:	b480      	push	{r7}
 80071f4:	b087      	sub	sp, #28
 80071f6:	af00      	add	r7, sp, #0
 80071f8:	6078      	str	r0, [r7, #4]
 80071fa:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80071fc:	683b      	ldr	r3, [r7, #0]
 80071fe:	7b1b      	ldrb	r3, [r3, #12]
 8007200:	2b00      	cmp	r3, #0
 8007202:	f040 809d 	bne.w	8007340 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8007206:	683b      	ldr	r3, [r7, #0]
 8007208:	785b      	ldrb	r3, [r3, #1]
 800720a:	2b00      	cmp	r3, #0
 800720c:	d04c      	beq.n	80072a8 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800720e:	687a      	ldr	r2, [r7, #4]
 8007210:	683b      	ldr	r3, [r7, #0]
 8007212:	781b      	ldrb	r3, [r3, #0]
 8007214:	009b      	lsls	r3, r3, #2
 8007216:	4413      	add	r3, r2
 8007218:	881b      	ldrh	r3, [r3, #0]
 800721a:	823b      	strh	r3, [r7, #16]
 800721c:	8a3b      	ldrh	r3, [r7, #16]
 800721e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007222:	2b00      	cmp	r3, #0
 8007224:	d01b      	beq.n	800725e <USB_EPClearStall+0x6c>
 8007226:	687a      	ldr	r2, [r7, #4]
 8007228:	683b      	ldr	r3, [r7, #0]
 800722a:	781b      	ldrb	r3, [r3, #0]
 800722c:	009b      	lsls	r3, r3, #2
 800722e:	4413      	add	r3, r2
 8007230:	881b      	ldrh	r3, [r3, #0]
 8007232:	b29b      	uxth	r3, r3
 8007234:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007238:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800723c:	81fb      	strh	r3, [r7, #14]
 800723e:	687a      	ldr	r2, [r7, #4]
 8007240:	683b      	ldr	r3, [r7, #0]
 8007242:	781b      	ldrb	r3, [r3, #0]
 8007244:	009b      	lsls	r3, r3, #2
 8007246:	441a      	add	r2, r3
 8007248:	89fb      	ldrh	r3, [r7, #14]
 800724a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800724e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007252:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007256:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800725a:	b29b      	uxth	r3, r3
 800725c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800725e:	683b      	ldr	r3, [r7, #0]
 8007260:	78db      	ldrb	r3, [r3, #3]
 8007262:	2b01      	cmp	r3, #1
 8007264:	d06c      	beq.n	8007340 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007266:	687a      	ldr	r2, [r7, #4]
 8007268:	683b      	ldr	r3, [r7, #0]
 800726a:	781b      	ldrb	r3, [r3, #0]
 800726c:	009b      	lsls	r3, r3, #2
 800726e:	4413      	add	r3, r2
 8007270:	881b      	ldrh	r3, [r3, #0]
 8007272:	b29b      	uxth	r3, r3
 8007274:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007278:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800727c:	81bb      	strh	r3, [r7, #12]
 800727e:	89bb      	ldrh	r3, [r7, #12]
 8007280:	f083 0320 	eor.w	r3, r3, #32
 8007284:	81bb      	strh	r3, [r7, #12]
 8007286:	687a      	ldr	r2, [r7, #4]
 8007288:	683b      	ldr	r3, [r7, #0]
 800728a:	781b      	ldrb	r3, [r3, #0]
 800728c:	009b      	lsls	r3, r3, #2
 800728e:	441a      	add	r2, r3
 8007290:	89bb      	ldrh	r3, [r7, #12]
 8007292:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007296:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800729a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800729e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80072a2:	b29b      	uxth	r3, r3
 80072a4:	8013      	strh	r3, [r2, #0]
 80072a6:	e04b      	b.n	8007340 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80072a8:	687a      	ldr	r2, [r7, #4]
 80072aa:	683b      	ldr	r3, [r7, #0]
 80072ac:	781b      	ldrb	r3, [r3, #0]
 80072ae:	009b      	lsls	r3, r3, #2
 80072b0:	4413      	add	r3, r2
 80072b2:	881b      	ldrh	r3, [r3, #0]
 80072b4:	82fb      	strh	r3, [r7, #22]
 80072b6:	8afb      	ldrh	r3, [r7, #22]
 80072b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d01b      	beq.n	80072f8 <USB_EPClearStall+0x106>
 80072c0:	687a      	ldr	r2, [r7, #4]
 80072c2:	683b      	ldr	r3, [r7, #0]
 80072c4:	781b      	ldrb	r3, [r3, #0]
 80072c6:	009b      	lsls	r3, r3, #2
 80072c8:	4413      	add	r3, r2
 80072ca:	881b      	ldrh	r3, [r3, #0]
 80072cc:	b29b      	uxth	r3, r3
 80072ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80072d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072d6:	82bb      	strh	r3, [r7, #20]
 80072d8:	687a      	ldr	r2, [r7, #4]
 80072da:	683b      	ldr	r3, [r7, #0]
 80072dc:	781b      	ldrb	r3, [r3, #0]
 80072de:	009b      	lsls	r3, r3, #2
 80072e0:	441a      	add	r2, r3
 80072e2:	8abb      	ldrh	r3, [r7, #20]
 80072e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80072e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80072ec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80072f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80072f4:	b29b      	uxth	r3, r3
 80072f6:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80072f8:	687a      	ldr	r2, [r7, #4]
 80072fa:	683b      	ldr	r3, [r7, #0]
 80072fc:	781b      	ldrb	r3, [r3, #0]
 80072fe:	009b      	lsls	r3, r3, #2
 8007300:	4413      	add	r3, r2
 8007302:	881b      	ldrh	r3, [r3, #0]
 8007304:	b29b      	uxth	r3, r3
 8007306:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800730a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800730e:	827b      	strh	r3, [r7, #18]
 8007310:	8a7b      	ldrh	r3, [r7, #18]
 8007312:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007316:	827b      	strh	r3, [r7, #18]
 8007318:	8a7b      	ldrh	r3, [r7, #18]
 800731a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800731e:	827b      	strh	r3, [r7, #18]
 8007320:	687a      	ldr	r2, [r7, #4]
 8007322:	683b      	ldr	r3, [r7, #0]
 8007324:	781b      	ldrb	r3, [r3, #0]
 8007326:	009b      	lsls	r3, r3, #2
 8007328:	441a      	add	r2, r3
 800732a:	8a7b      	ldrh	r3, [r7, #18]
 800732c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007330:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007334:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007338:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800733c:	b29b      	uxth	r3, r3
 800733e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8007340:	2300      	movs	r3, #0
}
 8007342:	4618      	mov	r0, r3
 8007344:	371c      	adds	r7, #28
 8007346:	46bd      	mov	sp, r7
 8007348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734c:	4770      	bx	lr

0800734e <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800734e:	b480      	push	{r7}
 8007350:	b083      	sub	sp, #12
 8007352:	af00      	add	r7, sp, #0
 8007354:	6078      	str	r0, [r7, #4]
 8007356:	460b      	mov	r3, r1
 8007358:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800735a:	78fb      	ldrb	r3, [r7, #3]
 800735c:	2b00      	cmp	r3, #0
 800735e:	d103      	bne.n	8007368 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	2280      	movs	r2, #128	; 0x80
 8007364:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8007368:	2300      	movs	r3, #0
}
 800736a:	4618      	mov	r0, r3
 800736c:	370c      	adds	r7, #12
 800736e:	46bd      	mov	sp, r7
 8007370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007374:	4770      	bx	lr

08007376 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8007376:	b480      	push	{r7}
 8007378:	b083      	sub	sp, #12
 800737a:	af00      	add	r7, sp, #0
 800737c:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007384:	b29b      	uxth	r3, r3
 8007386:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800738a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800738e:	b29a      	uxth	r2, r3
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8007396:	2300      	movs	r3, #0
}
 8007398:	4618      	mov	r0, r3
 800739a:	370c      	adds	r7, #12
 800739c:	46bd      	mov	sp, r7
 800739e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a2:	4770      	bx	lr

080073a4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 80073a4:	b480      	push	{r7}
 80073a6:	b085      	sub	sp, #20
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80073b2:	b29b      	uxth	r3, r3
 80073b4:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80073b6:	68fb      	ldr	r3, [r7, #12]
}
 80073b8:	4618      	mov	r0, r3
 80073ba:	3714      	adds	r7, #20
 80073bc:	46bd      	mov	sp, r7
 80073be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c2:	4770      	bx	lr

080073c4 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 80073c4:	b480      	push	{r7}
 80073c6:	b083      	sub	sp, #12
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]
 80073cc:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80073ce:	2300      	movs	r3, #0
}
 80073d0:	4618      	mov	r0, r3
 80073d2:	370c      	adds	r7, #12
 80073d4:	46bd      	mov	sp, r7
 80073d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073da:	4770      	bx	lr

080073dc <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80073dc:	b480      	push	{r7}
 80073de:	b08d      	sub	sp, #52	; 0x34
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	60f8      	str	r0, [r7, #12]
 80073e4:	60b9      	str	r1, [r7, #8]
 80073e6:	4611      	mov	r1, r2
 80073e8:	461a      	mov	r2, r3
 80073ea:	460b      	mov	r3, r1
 80073ec:	80fb      	strh	r3, [r7, #6]
 80073ee:	4613      	mov	r3, r2
 80073f0:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80073f2:	88bb      	ldrh	r3, [r7, #4]
 80073f4:	3301      	adds	r3, #1
 80073f6:	085b      	lsrs	r3, r3, #1
 80073f8:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80073fe:	68bb      	ldr	r3, [r7, #8]
 8007400:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007402:	88fa      	ldrh	r2, [r7, #6]
 8007404:	69fb      	ldr	r3, [r7, #28]
 8007406:	4413      	add	r3, r2
 8007408:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800740c:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800740e:	6a3b      	ldr	r3, [r7, #32]
 8007410:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007412:	e01b      	b.n	800744c <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 8007414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007416:	781b      	ldrb	r3, [r3, #0]
 8007418:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800741a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800741c:	3301      	adds	r3, #1
 800741e:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8007420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007422:	781b      	ldrb	r3, [r3, #0]
 8007424:	b29b      	uxth	r3, r3
 8007426:	021b      	lsls	r3, r3, #8
 8007428:	b29b      	uxth	r3, r3
 800742a:	461a      	mov	r2, r3
 800742c:	69bb      	ldr	r3, [r7, #24]
 800742e:	4313      	orrs	r3, r2
 8007430:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8007432:	697b      	ldr	r3, [r7, #20]
 8007434:	b29a      	uxth	r2, r3
 8007436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007438:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800743a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800743c:	3302      	adds	r3, #2
 800743e:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 8007440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007442:	3301      	adds	r3, #1
 8007444:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8007446:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007448:	3b01      	subs	r3, #1
 800744a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800744c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800744e:	2b00      	cmp	r3, #0
 8007450:	d1e0      	bne.n	8007414 <USB_WritePMA+0x38>
  }
}
 8007452:	bf00      	nop
 8007454:	3734      	adds	r7, #52	; 0x34
 8007456:	46bd      	mov	sp, r7
 8007458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745c:	4770      	bx	lr

0800745e <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800745e:	b480      	push	{r7}
 8007460:	b08b      	sub	sp, #44	; 0x2c
 8007462:	af00      	add	r7, sp, #0
 8007464:	60f8      	str	r0, [r7, #12]
 8007466:	60b9      	str	r1, [r7, #8]
 8007468:	4611      	mov	r1, r2
 800746a:	461a      	mov	r2, r3
 800746c:	460b      	mov	r3, r1
 800746e:	80fb      	strh	r3, [r7, #6]
 8007470:	4613      	mov	r3, r2
 8007472:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8007474:	88bb      	ldrh	r3, [r7, #4]
 8007476:	085b      	lsrs	r3, r3, #1
 8007478:	b29b      	uxth	r3, r3
 800747a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007480:	68bb      	ldr	r3, [r7, #8]
 8007482:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007484:	88fa      	ldrh	r2, [r7, #6]
 8007486:	697b      	ldr	r3, [r7, #20]
 8007488:	4413      	add	r3, r2
 800748a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800748e:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8007490:	69bb      	ldr	r3, [r7, #24]
 8007492:	627b      	str	r3, [r7, #36]	; 0x24
 8007494:	e018      	b.n	80074c8 <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8007496:	6a3b      	ldr	r3, [r7, #32]
 8007498:	881b      	ldrh	r3, [r3, #0]
 800749a:	b29b      	uxth	r3, r3
 800749c:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800749e:	6a3b      	ldr	r3, [r7, #32]
 80074a0:	3302      	adds	r3, #2
 80074a2:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80074a4:	693b      	ldr	r3, [r7, #16]
 80074a6:	b2da      	uxtb	r2, r3
 80074a8:	69fb      	ldr	r3, [r7, #28]
 80074aa:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80074ac:	69fb      	ldr	r3, [r7, #28]
 80074ae:	3301      	adds	r3, #1
 80074b0:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 80074b2:	693b      	ldr	r3, [r7, #16]
 80074b4:	0a1b      	lsrs	r3, r3, #8
 80074b6:	b2da      	uxtb	r2, r3
 80074b8:	69fb      	ldr	r3, [r7, #28]
 80074ba:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80074bc:	69fb      	ldr	r3, [r7, #28]
 80074be:	3301      	adds	r3, #1
 80074c0:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 80074c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074c4:	3b01      	subs	r3, #1
 80074c6:	627b      	str	r3, [r7, #36]	; 0x24
 80074c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d1e3      	bne.n	8007496 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 80074ce:	88bb      	ldrh	r3, [r7, #4]
 80074d0:	f003 0301 	and.w	r3, r3, #1
 80074d4:	b29b      	uxth	r3, r3
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d007      	beq.n	80074ea <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 80074da:	6a3b      	ldr	r3, [r7, #32]
 80074dc:	881b      	ldrh	r3, [r3, #0]
 80074de:	b29b      	uxth	r3, r3
 80074e0:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80074e2:	693b      	ldr	r3, [r7, #16]
 80074e4:	b2da      	uxtb	r2, r3
 80074e6:	69fb      	ldr	r3, [r7, #28]
 80074e8:	701a      	strb	r2, [r3, #0]
  }
}
 80074ea:	bf00      	nop
 80074ec:	372c      	adds	r7, #44	; 0x2c
 80074ee:	46bd      	mov	sp, r7
 80074f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f4:	4770      	bx	lr

080074f6 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80074f6:	b580      	push	{r7, lr}
 80074f8:	b084      	sub	sp, #16
 80074fa:	af00      	add	r7, sp, #0
 80074fc:	6078      	str	r0, [r7, #4]
 80074fe:	460b      	mov	r3, r1
 8007500:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007502:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007506:	f002 f89d 	bl	8009644 <USBD_static_malloc>
 800750a:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	2b00      	cmp	r3, #0
 8007510:	d105      	bne.n	800751e <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	2200      	movs	r2, #0
 8007516:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800751a:	2302      	movs	r3, #2
 800751c:	e066      	b.n	80075ec <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	68fa      	ldr	r2, [r7, #12]
 8007522:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	7c1b      	ldrb	r3, [r3, #16]
 800752a:	2b00      	cmp	r3, #0
 800752c:	d119      	bne.n	8007562 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800752e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007532:	2202      	movs	r2, #2
 8007534:	2181      	movs	r1, #129	; 0x81
 8007536:	6878      	ldr	r0, [r7, #4]
 8007538:	f001 ff29 	bl	800938e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	2201      	movs	r2, #1
 8007540:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007542:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007546:	2202      	movs	r2, #2
 8007548:	2101      	movs	r1, #1
 800754a:	6878      	ldr	r0, [r7, #4]
 800754c:	f001 ff1f 	bl	800938e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	2201      	movs	r2, #1
 8007554:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	2210      	movs	r2, #16
 800755c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8007560:	e016      	b.n	8007590 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007562:	2340      	movs	r3, #64	; 0x40
 8007564:	2202      	movs	r2, #2
 8007566:	2181      	movs	r1, #129	; 0x81
 8007568:	6878      	ldr	r0, [r7, #4]
 800756a:	f001 ff10 	bl	800938e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	2201      	movs	r2, #1
 8007572:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007574:	2340      	movs	r3, #64	; 0x40
 8007576:	2202      	movs	r2, #2
 8007578:	2101      	movs	r1, #1
 800757a:	6878      	ldr	r0, [r7, #4]
 800757c:	f001 ff07 	bl	800938e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	2201      	movs	r2, #1
 8007584:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	2210      	movs	r2, #16
 800758c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007590:	2308      	movs	r3, #8
 8007592:	2203      	movs	r2, #3
 8007594:	2182      	movs	r1, #130	; 0x82
 8007596:	6878      	ldr	r0, [r7, #4]
 8007598:	f001 fef9 	bl	800938e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	2201      	movs	r2, #1
 80075a0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	2200      	movs	r2, #0
 80075b2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	2200      	movs	r2, #0
 80075ba:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	7c1b      	ldrb	r3, [r3, #16]
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d109      	bne.n	80075da <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80075cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80075d0:	2101      	movs	r1, #1
 80075d2:	6878      	ldr	r0, [r7, #4]
 80075d4:	f001 ffcb 	bl	800956e <USBD_LL_PrepareReceive>
 80075d8:	e007      	b.n	80075ea <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80075e0:	2340      	movs	r3, #64	; 0x40
 80075e2:	2101      	movs	r1, #1
 80075e4:	6878      	ldr	r0, [r7, #4]
 80075e6:	f001 ffc2 	bl	800956e <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80075ea:	2300      	movs	r3, #0
}
 80075ec:	4618      	mov	r0, r3
 80075ee:	3710      	adds	r7, #16
 80075f0:	46bd      	mov	sp, r7
 80075f2:	bd80      	pop	{r7, pc}

080075f4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80075f4:	b580      	push	{r7, lr}
 80075f6:	b082      	sub	sp, #8
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]
 80075fc:	460b      	mov	r3, r1
 80075fe:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8007600:	2181      	movs	r1, #129	; 0x81
 8007602:	6878      	ldr	r0, [r7, #4]
 8007604:	f001 fee9 	bl	80093da <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	2200      	movs	r2, #0
 800760c:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800760e:	2101      	movs	r1, #1
 8007610:	6878      	ldr	r0, [r7, #4]
 8007612:	f001 fee2 	bl	80093da <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	2200      	movs	r2, #0
 800761a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800761e:	2182      	movs	r1, #130	; 0x82
 8007620:	6878      	ldr	r0, [r7, #4]
 8007622:	f001 feda 	bl	80093da <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	2200      	movs	r2, #0
 800762a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	2200      	movs	r2, #0
 8007632:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800763c:	2b00      	cmp	r3, #0
 800763e:	d00e      	beq.n	800765e <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007646:	685b      	ldr	r3, [r3, #4]
 8007648:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007650:	4618      	mov	r0, r3
 8007652:	f002 f805 	bl	8009660 <USBD_static_free>
    pdev->pClassData = NULL;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	2200      	movs	r2, #0
 800765a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800765e:	2300      	movs	r3, #0
}
 8007660:	4618      	mov	r0, r3
 8007662:	3708      	adds	r7, #8
 8007664:	46bd      	mov	sp, r7
 8007666:	bd80      	pop	{r7, pc}

08007668 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007668:	b580      	push	{r7, lr}
 800766a:	b086      	sub	sp, #24
 800766c:	af00      	add	r7, sp, #0
 800766e:	6078      	str	r0, [r7, #4]
 8007670:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007678:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800767a:	2300      	movs	r3, #0
 800767c:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800767e:	2300      	movs	r3, #0
 8007680:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8007682:	2300      	movs	r3, #0
 8007684:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007686:	683b      	ldr	r3, [r7, #0]
 8007688:	781b      	ldrb	r3, [r3, #0]
 800768a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800768e:	2b00      	cmp	r3, #0
 8007690:	d03a      	beq.n	8007708 <USBD_CDC_Setup+0xa0>
 8007692:	2b20      	cmp	r3, #32
 8007694:	f040 8097 	bne.w	80077c6 <USBD_CDC_Setup+0x15e>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8007698:	683b      	ldr	r3, [r7, #0]
 800769a:	88db      	ldrh	r3, [r3, #6]
 800769c:	2b00      	cmp	r3, #0
 800769e:	d029      	beq.n	80076f4 <USBD_CDC_Setup+0x8c>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80076a0:	683b      	ldr	r3, [r7, #0]
 80076a2:	781b      	ldrb	r3, [r3, #0]
 80076a4:	b25b      	sxtb	r3, r3
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	da11      	bge.n	80076ce <USBD_CDC_Setup+0x66>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80076b0:	689b      	ldr	r3, [r3, #8]
 80076b2:	683a      	ldr	r2, [r7, #0]
 80076b4:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 80076b6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80076b8:	683a      	ldr	r2, [r7, #0]
 80076ba:	88d2      	ldrh	r2, [r2, #6]
 80076bc:	4798      	blx	r3
                                                            req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 80076be:	6939      	ldr	r1, [r7, #16]
 80076c0:	683b      	ldr	r3, [r7, #0]
 80076c2:	88db      	ldrh	r3, [r3, #6]
 80076c4:	461a      	mov	r2, r3
 80076c6:	6878      	ldr	r0, [r7, #4]
 80076c8:	f001 fa8d 	bl	8008be6 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 80076cc:	e082      	b.n	80077d4 <USBD_CDC_Setup+0x16c>
          hcdc->CmdOpCode = req->bRequest;
 80076ce:	683b      	ldr	r3, [r7, #0]
 80076d0:	785a      	ldrb	r2, [r3, #1]
 80076d2:	693b      	ldr	r3, [r7, #16]
 80076d4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80076d8:	683b      	ldr	r3, [r7, #0]
 80076da:	88db      	ldrh	r3, [r3, #6]
 80076dc:	b2da      	uxtb	r2, r3
 80076de:	693b      	ldr	r3, [r7, #16]
 80076e0:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 80076e4:	6939      	ldr	r1, [r7, #16]
 80076e6:	683b      	ldr	r3, [r7, #0]
 80076e8:	88db      	ldrh	r3, [r3, #6]
 80076ea:	461a      	mov	r2, r3
 80076ec:	6878      	ldr	r0, [r7, #4]
 80076ee:	f001 faa6 	bl	8008c3e <USBD_CtlPrepareRx>
      break;
 80076f2:	e06f      	b.n	80077d4 <USBD_CDC_Setup+0x16c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80076fa:	689b      	ldr	r3, [r3, #8]
 80076fc:	683a      	ldr	r2, [r7, #0]
 80076fe:	7850      	ldrb	r0, [r2, #1]
 8007700:	2200      	movs	r2, #0
 8007702:	6839      	ldr	r1, [r7, #0]
 8007704:	4798      	blx	r3
      break;
 8007706:	e065      	b.n	80077d4 <USBD_CDC_Setup+0x16c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007708:	683b      	ldr	r3, [r7, #0]
 800770a:	785b      	ldrb	r3, [r3, #1]
 800770c:	2b0b      	cmp	r3, #11
 800770e:	d84f      	bhi.n	80077b0 <USBD_CDC_Setup+0x148>
 8007710:	a201      	add	r2, pc, #4	; (adr r2, 8007718 <USBD_CDC_Setup+0xb0>)
 8007712:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007716:	bf00      	nop
 8007718:	08007749 	.word	0x08007749
 800771c:	080077bf 	.word	0x080077bf
 8007720:	080077b1 	.word	0x080077b1
 8007724:	080077b1 	.word	0x080077b1
 8007728:	080077b1 	.word	0x080077b1
 800772c:	080077b1 	.word	0x080077b1
 8007730:	080077b1 	.word	0x080077b1
 8007734:	080077b1 	.word	0x080077b1
 8007738:	080077b1 	.word	0x080077b1
 800773c:	080077b1 	.word	0x080077b1
 8007740:	08007771 	.word	0x08007771
 8007744:	08007799 	.word	0x08007799
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800774e:	2b03      	cmp	r3, #3
 8007750:	d107      	bne.n	8007762 <USBD_CDC_Setup+0xfa>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007752:	f107 030c 	add.w	r3, r7, #12
 8007756:	2202      	movs	r2, #2
 8007758:	4619      	mov	r1, r3
 800775a:	6878      	ldr	r0, [r7, #4]
 800775c:	f001 fa43 	bl	8008be6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007760:	e030      	b.n	80077c4 <USBD_CDC_Setup+0x15c>
            USBD_CtlError(pdev, req);
 8007762:	6839      	ldr	r1, [r7, #0]
 8007764:	6878      	ldr	r0, [r7, #4]
 8007766:	f001 f9cd 	bl	8008b04 <USBD_CtlError>
            ret = USBD_FAIL;
 800776a:	2303      	movs	r3, #3
 800776c:	75fb      	strb	r3, [r7, #23]
          break;
 800776e:	e029      	b.n	80077c4 <USBD_CDC_Setup+0x15c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007776:	2b03      	cmp	r3, #3
 8007778:	d107      	bne.n	800778a <USBD_CDC_Setup+0x122>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800777a:	f107 030f 	add.w	r3, r7, #15
 800777e:	2201      	movs	r2, #1
 8007780:	4619      	mov	r1, r3
 8007782:	6878      	ldr	r0, [r7, #4]
 8007784:	f001 fa2f 	bl	8008be6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007788:	e01c      	b.n	80077c4 <USBD_CDC_Setup+0x15c>
            USBD_CtlError(pdev, req);
 800778a:	6839      	ldr	r1, [r7, #0]
 800778c:	6878      	ldr	r0, [r7, #4]
 800778e:	f001 f9b9 	bl	8008b04 <USBD_CtlError>
            ret = USBD_FAIL;
 8007792:	2303      	movs	r3, #3
 8007794:	75fb      	strb	r3, [r7, #23]
          break;
 8007796:	e015      	b.n	80077c4 <USBD_CDC_Setup+0x15c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800779e:	2b03      	cmp	r3, #3
 80077a0:	d00f      	beq.n	80077c2 <USBD_CDC_Setup+0x15a>
          {
            USBD_CtlError(pdev, req);
 80077a2:	6839      	ldr	r1, [r7, #0]
 80077a4:	6878      	ldr	r0, [r7, #4]
 80077a6:	f001 f9ad 	bl	8008b04 <USBD_CtlError>
            ret = USBD_FAIL;
 80077aa:	2303      	movs	r3, #3
 80077ac:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80077ae:	e008      	b.n	80077c2 <USBD_CDC_Setup+0x15a>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80077b0:	6839      	ldr	r1, [r7, #0]
 80077b2:	6878      	ldr	r0, [r7, #4]
 80077b4:	f001 f9a6 	bl	8008b04 <USBD_CtlError>
          ret = USBD_FAIL;
 80077b8:	2303      	movs	r3, #3
 80077ba:	75fb      	strb	r3, [r7, #23]
          break;
 80077bc:	e002      	b.n	80077c4 <USBD_CDC_Setup+0x15c>
          break;
 80077be:	bf00      	nop
 80077c0:	e008      	b.n	80077d4 <USBD_CDC_Setup+0x16c>
          break;
 80077c2:	bf00      	nop
      }
      break;
 80077c4:	e006      	b.n	80077d4 <USBD_CDC_Setup+0x16c>

    default:
      USBD_CtlError(pdev, req);
 80077c6:	6839      	ldr	r1, [r7, #0]
 80077c8:	6878      	ldr	r0, [r7, #4]
 80077ca:	f001 f99b 	bl	8008b04 <USBD_CtlError>
      ret = USBD_FAIL;
 80077ce:	2303      	movs	r3, #3
 80077d0:	75fb      	strb	r3, [r7, #23]
      break;
 80077d2:	bf00      	nop
  }

  return (uint8_t)ret;
 80077d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80077d6:	4618      	mov	r0, r3
 80077d8:	3718      	adds	r7, #24
 80077da:	46bd      	mov	sp, r7
 80077dc:	bd80      	pop	{r7, pc}
 80077de:	bf00      	nop

080077e0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80077e0:	b580      	push	{r7, lr}
 80077e2:	b084      	sub	sp, #16
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	6078      	str	r0, [r7, #4]
 80077e8:	460b      	mov	r3, r1
 80077ea:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80077f2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d101      	bne.n	8007802 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80077fe:	2303      	movs	r3, #3
 8007800:	e04f      	b.n	80078a2 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007808:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800780a:	78fa      	ldrb	r2, [r7, #3]
 800780c:	6879      	ldr	r1, [r7, #4]
 800780e:	4613      	mov	r3, r2
 8007810:	009b      	lsls	r3, r3, #2
 8007812:	4413      	add	r3, r2
 8007814:	009b      	lsls	r3, r3, #2
 8007816:	440b      	add	r3, r1
 8007818:	3318      	adds	r3, #24
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	2b00      	cmp	r3, #0
 800781e:	d029      	beq.n	8007874 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8007820:	78fa      	ldrb	r2, [r7, #3]
 8007822:	6879      	ldr	r1, [r7, #4]
 8007824:	4613      	mov	r3, r2
 8007826:	009b      	lsls	r3, r3, #2
 8007828:	4413      	add	r3, r2
 800782a:	009b      	lsls	r3, r3, #2
 800782c:	440b      	add	r3, r1
 800782e:	3318      	adds	r3, #24
 8007830:	681a      	ldr	r2, [r3, #0]
 8007832:	78f9      	ldrb	r1, [r7, #3]
 8007834:	68f8      	ldr	r0, [r7, #12]
 8007836:	460b      	mov	r3, r1
 8007838:	009b      	lsls	r3, r3, #2
 800783a:	440b      	add	r3, r1
 800783c:	00db      	lsls	r3, r3, #3
 800783e:	4403      	add	r3, r0
 8007840:	3338      	adds	r3, #56	; 0x38
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	fbb2 f1f3 	udiv	r1, r2, r3
 8007848:	fb03 f301 	mul.w	r3, r3, r1
 800784c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800784e:	2b00      	cmp	r3, #0
 8007850:	d110      	bne.n	8007874 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8007852:	78fa      	ldrb	r2, [r7, #3]
 8007854:	6879      	ldr	r1, [r7, #4]
 8007856:	4613      	mov	r3, r2
 8007858:	009b      	lsls	r3, r3, #2
 800785a:	4413      	add	r3, r2
 800785c:	009b      	lsls	r3, r3, #2
 800785e:	440b      	add	r3, r1
 8007860:	3318      	adds	r3, #24
 8007862:	2200      	movs	r2, #0
 8007864:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007866:	78f9      	ldrb	r1, [r7, #3]
 8007868:	2300      	movs	r3, #0
 800786a:	2200      	movs	r2, #0
 800786c:	6878      	ldr	r0, [r7, #4]
 800786e:	f001 fe5d 	bl	800952c <USBD_LL_Transmit>
 8007872:	e015      	b.n	80078a0 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8007874:	68bb      	ldr	r3, [r7, #8]
 8007876:	2200      	movs	r2, #0
 8007878:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007882:	691b      	ldr	r3, [r3, #16]
 8007884:	2b00      	cmp	r3, #0
 8007886:	d00b      	beq.n	80078a0 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800788e:	691b      	ldr	r3, [r3, #16]
 8007890:	68ba      	ldr	r2, [r7, #8]
 8007892:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8007896:	68ba      	ldr	r2, [r7, #8]
 8007898:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800789c:	78fa      	ldrb	r2, [r7, #3]
 800789e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80078a0:	2300      	movs	r3, #0
}
 80078a2:	4618      	mov	r0, r3
 80078a4:	3710      	adds	r7, #16
 80078a6:	46bd      	mov	sp, r7
 80078a8:	bd80      	pop	{r7, pc}

080078aa <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80078aa:	b580      	push	{r7, lr}
 80078ac:	b084      	sub	sp, #16
 80078ae:	af00      	add	r7, sp, #0
 80078b0:	6078      	str	r0, [r7, #4]
 80078b2:	460b      	mov	r3, r1
 80078b4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80078bc:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d101      	bne.n	80078cc <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80078c8:	2303      	movs	r3, #3
 80078ca:	e015      	b.n	80078f8 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80078cc:	78fb      	ldrb	r3, [r7, #3]
 80078ce:	4619      	mov	r1, r3
 80078d0:	6878      	ldr	r0, [r7, #4]
 80078d2:	f001 fe6d 	bl	80095b0 <USBD_LL_GetRxDataSize>
 80078d6:	4602      	mov	r2, r0
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80078e4:	68db      	ldr	r3, [r3, #12]
 80078e6:	68fa      	ldr	r2, [r7, #12]
 80078e8:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80078ec:	68fa      	ldr	r2, [r7, #12]
 80078ee:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80078f2:	4611      	mov	r1, r2
 80078f4:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80078f6:	2300      	movs	r3, #0
}
 80078f8:	4618      	mov	r0, r3
 80078fa:	3710      	adds	r7, #16
 80078fc:	46bd      	mov	sp, r7
 80078fe:	bd80      	pop	{r7, pc}

08007900 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007900:	b580      	push	{r7, lr}
 8007902:	b084      	sub	sp, #16
 8007904:	af00      	add	r7, sp, #0
 8007906:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800790e:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007916:	2b00      	cmp	r3, #0
 8007918:	d015      	beq.n	8007946 <USBD_CDC_EP0_RxReady+0x46>
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007920:	2bff      	cmp	r3, #255	; 0xff
 8007922:	d010      	beq.n	8007946 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800792a:	689b      	ldr	r3, [r3, #8]
 800792c:	68fa      	ldr	r2, [r7, #12]
 800792e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8007932:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8007934:	68fa      	ldr	r2, [r7, #12]
 8007936:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800793a:	b292      	uxth	r2, r2
 800793c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	22ff      	movs	r2, #255	; 0xff
 8007942:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8007946:	2300      	movs	r3, #0
}
 8007948:	4618      	mov	r0, r3
 800794a:	3710      	adds	r7, #16
 800794c:	46bd      	mov	sp, r7
 800794e:	bd80      	pop	{r7, pc}

08007950 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007950:	b480      	push	{r7}
 8007952:	b083      	sub	sp, #12
 8007954:	af00      	add	r7, sp, #0
 8007956:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	2243      	movs	r2, #67	; 0x43
 800795c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800795e:	4b03      	ldr	r3, [pc, #12]	; (800796c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8007960:	4618      	mov	r0, r3
 8007962:	370c      	adds	r7, #12
 8007964:	46bd      	mov	sp, r7
 8007966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796a:	4770      	bx	lr
 800796c:	20000094 	.word	0x20000094

08007970 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007970:	b480      	push	{r7}
 8007972:	b083      	sub	sp, #12
 8007974:	af00      	add	r7, sp, #0
 8007976:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	2243      	movs	r2, #67	; 0x43
 800797c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800797e:	4b03      	ldr	r3, [pc, #12]	; (800798c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8007980:	4618      	mov	r0, r3
 8007982:	370c      	adds	r7, #12
 8007984:	46bd      	mov	sp, r7
 8007986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800798a:	4770      	bx	lr
 800798c:	20000050 	.word	0x20000050

08007990 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007990:	b480      	push	{r7}
 8007992:	b083      	sub	sp, #12
 8007994:	af00      	add	r7, sp, #0
 8007996:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	2243      	movs	r2, #67	; 0x43
 800799c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800799e:	4b03      	ldr	r3, [pc, #12]	; (80079ac <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80079a0:	4618      	mov	r0, r3
 80079a2:	370c      	adds	r7, #12
 80079a4:	46bd      	mov	sp, r7
 80079a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079aa:	4770      	bx	lr
 80079ac:	200000d8 	.word	0x200000d8

080079b0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80079b0:	b480      	push	{r7}
 80079b2:	b083      	sub	sp, #12
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	220a      	movs	r2, #10
 80079bc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80079be:	4b03      	ldr	r3, [pc, #12]	; (80079cc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80079c0:	4618      	mov	r0, r3
 80079c2:	370c      	adds	r7, #12
 80079c4:	46bd      	mov	sp, r7
 80079c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ca:	4770      	bx	lr
 80079cc:	2000000c 	.word	0x2000000c

080079d0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80079d0:	b480      	push	{r7}
 80079d2:	b083      	sub	sp, #12
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	6078      	str	r0, [r7, #4]
 80079d8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80079da:	683b      	ldr	r3, [r7, #0]
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d101      	bne.n	80079e4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80079e0:	2303      	movs	r3, #3
 80079e2:	e004      	b.n	80079ee <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	683a      	ldr	r2, [r7, #0]
 80079e8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80079ec:	2300      	movs	r3, #0
}
 80079ee:	4618      	mov	r0, r3
 80079f0:	370c      	adds	r7, #12
 80079f2:	46bd      	mov	sp, r7
 80079f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f8:	4770      	bx	lr

080079fa <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80079fa:	b480      	push	{r7}
 80079fc:	b087      	sub	sp, #28
 80079fe:	af00      	add	r7, sp, #0
 8007a00:	60f8      	str	r0, [r7, #12]
 8007a02:	60b9      	str	r1, [r7, #8]
 8007a04:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007a0c:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8007a0e:	697b      	ldr	r3, [r7, #20]
 8007a10:	68ba      	ldr	r2, [r7, #8]
 8007a12:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007a16:	697b      	ldr	r3, [r7, #20]
 8007a18:	687a      	ldr	r2, [r7, #4]
 8007a1a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8007a1e:	2300      	movs	r3, #0
}
 8007a20:	4618      	mov	r0, r3
 8007a22:	371c      	adds	r7, #28
 8007a24:	46bd      	mov	sp, r7
 8007a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a2a:	4770      	bx	lr

08007a2c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007a2c:	b480      	push	{r7}
 8007a2e:	b085      	sub	sp, #20
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	6078      	str	r0, [r7, #4]
 8007a34:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007a3c:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	683a      	ldr	r2, [r7, #0]
 8007a42:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8007a46:	2300      	movs	r3, #0
}
 8007a48:	4618      	mov	r0, r3
 8007a4a:	3714      	adds	r7, #20
 8007a4c:	46bd      	mov	sp, r7
 8007a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a52:	4770      	bx	lr

08007a54 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007a54:	b580      	push	{r7, lr}
 8007a56:	b084      	sub	sp, #16
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007a62:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8007a64:	2301      	movs	r3, #1
 8007a66:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d101      	bne.n	8007a76 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007a72:	2303      	movs	r3, #3
 8007a74:	e01a      	b.n	8007aac <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8007a76:	68bb      	ldr	r3, [r7, #8]
 8007a78:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d114      	bne.n	8007aaa <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8007a80:	68bb      	ldr	r3, [r7, #8]
 8007a82:	2201      	movs	r2, #1
 8007a84:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8007a88:	68bb      	ldr	r3, [r7, #8]
 8007a8a:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8007a92:	68bb      	ldr	r3, [r7, #8]
 8007a94:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8007a98:	68bb      	ldr	r3, [r7, #8]
 8007a9a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8007a9e:	2181      	movs	r1, #129	; 0x81
 8007aa0:	6878      	ldr	r0, [r7, #4]
 8007aa2:	f001 fd43 	bl	800952c <USBD_LL_Transmit>

    ret = USBD_OK;
 8007aa6:	2300      	movs	r3, #0
 8007aa8:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8007aaa:	7bfb      	ldrb	r3, [r7, #15]
}
 8007aac:	4618      	mov	r0, r3
 8007aae:	3710      	adds	r7, #16
 8007ab0:	46bd      	mov	sp, r7
 8007ab2:	bd80      	pop	{r7, pc}

08007ab4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007ab4:	b580      	push	{r7, lr}
 8007ab6:	b084      	sub	sp, #16
 8007ab8:	af00      	add	r7, sp, #0
 8007aba:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007ac2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d101      	bne.n	8007ad2 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8007ace:	2303      	movs	r3, #3
 8007ad0:	e016      	b.n	8007b00 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	7c1b      	ldrb	r3, [r3, #16]
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d109      	bne.n	8007aee <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007ae0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007ae4:	2101      	movs	r1, #1
 8007ae6:	6878      	ldr	r0, [r7, #4]
 8007ae8:	f001 fd41 	bl	800956e <USBD_LL_PrepareReceive>
 8007aec:	e007      	b.n	8007afe <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007af4:	2340      	movs	r3, #64	; 0x40
 8007af6:	2101      	movs	r1, #1
 8007af8:	6878      	ldr	r0, [r7, #4]
 8007afa:	f001 fd38 	bl	800956e <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007afe:	2300      	movs	r3, #0
}
 8007b00:	4618      	mov	r0, r3
 8007b02:	3710      	adds	r7, #16
 8007b04:	46bd      	mov	sp, r7
 8007b06:	bd80      	pop	{r7, pc}

08007b08 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007b08:	b580      	push	{r7, lr}
 8007b0a:	b086      	sub	sp, #24
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	60f8      	str	r0, [r7, #12]
 8007b10:	60b9      	str	r1, [r7, #8]
 8007b12:	4613      	mov	r3, r2
 8007b14:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d101      	bne.n	8007b20 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007b1c:	2303      	movs	r3, #3
 8007b1e:	e01f      	b.n	8007b60 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	2200      	movs	r2, #0
 8007b24:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	2200      	movs	r2, #0
 8007b2c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	2200      	movs	r2, #0
 8007b34:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007b38:	68bb      	ldr	r3, [r7, #8]
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d003      	beq.n	8007b46 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	68ba      	ldr	r2, [r7, #8]
 8007b42:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	2201      	movs	r2, #1
 8007b4a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	79fa      	ldrb	r2, [r7, #7]
 8007b52:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007b54:	68f8      	ldr	r0, [r7, #12]
 8007b56:	f001 fb9f 	bl	8009298 <USBD_LL_Init>
 8007b5a:	4603      	mov	r3, r0
 8007b5c:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007b5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b60:	4618      	mov	r0, r3
 8007b62:	3718      	adds	r7, #24
 8007b64:	46bd      	mov	sp, r7
 8007b66:	bd80      	pop	{r7, pc}

08007b68 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007b68:	b580      	push	{r7, lr}
 8007b6a:	b084      	sub	sp, #16
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	6078      	str	r0, [r7, #4]
 8007b70:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007b72:	2300      	movs	r3, #0
 8007b74:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007b76:	683b      	ldr	r3, [r7, #0]
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d101      	bne.n	8007b80 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8007b7c:	2303      	movs	r3, #3
 8007b7e:	e016      	b.n	8007bae <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	683a      	ldr	r2, [r7, #0]
 8007b84:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d00b      	beq.n	8007bac <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b9c:	f107 020e 	add.w	r2, r7, #14
 8007ba0:	4610      	mov	r0, r2
 8007ba2:	4798      	blx	r3
 8007ba4:	4602      	mov	r2, r0
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8007bac:	2300      	movs	r3, #0
}
 8007bae:	4618      	mov	r0, r3
 8007bb0:	3710      	adds	r7, #16
 8007bb2:	46bd      	mov	sp, r7
 8007bb4:	bd80      	pop	{r7, pc}

08007bb6 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007bb6:	b580      	push	{r7, lr}
 8007bb8:	b082      	sub	sp, #8
 8007bba:	af00      	add	r7, sp, #0
 8007bbc:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007bbe:	6878      	ldr	r0, [r7, #4]
 8007bc0:	f001 fbca 	bl	8009358 <USBD_LL_Start>
 8007bc4:	4603      	mov	r3, r0
}
 8007bc6:	4618      	mov	r0, r3
 8007bc8:	3708      	adds	r7, #8
 8007bca:	46bd      	mov	sp, r7
 8007bcc:	bd80      	pop	{r7, pc}

08007bce <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007bce:	b480      	push	{r7}
 8007bd0:	b083      	sub	sp, #12
 8007bd2:	af00      	add	r7, sp, #0
 8007bd4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007bd6:	2300      	movs	r3, #0
}
 8007bd8:	4618      	mov	r0, r3
 8007bda:	370c      	adds	r7, #12
 8007bdc:	46bd      	mov	sp, r7
 8007bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be2:	4770      	bx	lr

08007be4 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007be4:	b580      	push	{r7, lr}
 8007be6:	b084      	sub	sp, #16
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	6078      	str	r0, [r7, #4]
 8007bec:	460b      	mov	r3, r1
 8007bee:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007bf0:	2303      	movs	r3, #3
 8007bf2:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d009      	beq.n	8007c12 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	78fa      	ldrb	r2, [r7, #3]
 8007c08:	4611      	mov	r1, r2
 8007c0a:	6878      	ldr	r0, [r7, #4]
 8007c0c:	4798      	blx	r3
 8007c0e:	4603      	mov	r3, r0
 8007c10:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007c12:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c14:	4618      	mov	r0, r3
 8007c16:	3710      	adds	r7, #16
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	bd80      	pop	{r7, pc}

08007c1c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007c1c:	b580      	push	{r7, lr}
 8007c1e:	b082      	sub	sp, #8
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	6078      	str	r0, [r7, #4]
 8007c24:	460b      	mov	r3, r1
 8007c26:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d007      	beq.n	8007c42 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c38:	685b      	ldr	r3, [r3, #4]
 8007c3a:	78fa      	ldrb	r2, [r7, #3]
 8007c3c:	4611      	mov	r1, r2
 8007c3e:	6878      	ldr	r0, [r7, #4]
 8007c40:	4798      	blx	r3
  }

  return USBD_OK;
 8007c42:	2300      	movs	r3, #0
}
 8007c44:	4618      	mov	r0, r3
 8007c46:	3708      	adds	r7, #8
 8007c48:	46bd      	mov	sp, r7
 8007c4a:	bd80      	pop	{r7, pc}

08007c4c <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007c4c:	b580      	push	{r7, lr}
 8007c4e:	b084      	sub	sp, #16
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	6078      	str	r0, [r7, #4]
 8007c54:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007c5c:	6839      	ldr	r1, [r7, #0]
 8007c5e:	4618      	mov	r0, r3
 8007c60:	f000 ff16 	bl	8008a90 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	2201      	movs	r2, #1
 8007c68:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8007c72:	461a      	mov	r2, r3
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007c80:	f003 031f 	and.w	r3, r3, #31
 8007c84:	2b01      	cmp	r3, #1
 8007c86:	d00e      	beq.n	8007ca6 <USBD_LL_SetupStage+0x5a>
 8007c88:	2b01      	cmp	r3, #1
 8007c8a:	d302      	bcc.n	8007c92 <USBD_LL_SetupStage+0x46>
 8007c8c:	2b02      	cmp	r3, #2
 8007c8e:	d014      	beq.n	8007cba <USBD_LL_SetupStage+0x6e>
 8007c90:	e01d      	b.n	8007cce <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007c98:	4619      	mov	r1, r3
 8007c9a:	6878      	ldr	r0, [r7, #4]
 8007c9c:	f000 f9d6 	bl	800804c <USBD_StdDevReq>
 8007ca0:	4603      	mov	r3, r0
 8007ca2:	73fb      	strb	r3, [r7, #15]
      break;
 8007ca4:	e020      	b.n	8007ce8 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007cac:	4619      	mov	r1, r3
 8007cae:	6878      	ldr	r0, [r7, #4]
 8007cb0:	f000 fa3a 	bl	8008128 <USBD_StdItfReq>
 8007cb4:	4603      	mov	r3, r0
 8007cb6:	73fb      	strb	r3, [r7, #15]
      break;
 8007cb8:	e016      	b.n	8007ce8 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007cc0:	4619      	mov	r1, r3
 8007cc2:	6878      	ldr	r0, [r7, #4]
 8007cc4:	f000 fa76 	bl	80081b4 <USBD_StdEPReq>
 8007cc8:	4603      	mov	r3, r0
 8007cca:	73fb      	strb	r3, [r7, #15]
      break;
 8007ccc:	e00c      	b.n	8007ce8 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007cd4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007cd8:	b2db      	uxtb	r3, r3
 8007cda:	4619      	mov	r1, r3
 8007cdc:	6878      	ldr	r0, [r7, #4]
 8007cde:	f001 fb9b 	bl	8009418 <USBD_LL_StallEP>
 8007ce2:	4603      	mov	r3, r0
 8007ce4:	73fb      	strb	r3, [r7, #15]
      break;
 8007ce6:	bf00      	nop
  }

  return ret;
 8007ce8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cea:	4618      	mov	r0, r3
 8007cec:	3710      	adds	r7, #16
 8007cee:	46bd      	mov	sp, r7
 8007cf0:	bd80      	pop	{r7, pc}

08007cf2 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007cf2:	b580      	push	{r7, lr}
 8007cf4:	b086      	sub	sp, #24
 8007cf6:	af00      	add	r7, sp, #0
 8007cf8:	60f8      	str	r0, [r7, #12]
 8007cfa:	460b      	mov	r3, r1
 8007cfc:	607a      	str	r2, [r7, #4]
 8007cfe:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007d00:	7afb      	ldrb	r3, [r7, #11]
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d137      	bne.n	8007d76 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007d0c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007d14:	2b03      	cmp	r3, #3
 8007d16:	d14a      	bne.n	8007dae <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8007d18:	693b      	ldr	r3, [r7, #16]
 8007d1a:	689a      	ldr	r2, [r3, #8]
 8007d1c:	693b      	ldr	r3, [r7, #16]
 8007d1e:	68db      	ldr	r3, [r3, #12]
 8007d20:	429a      	cmp	r2, r3
 8007d22:	d913      	bls.n	8007d4c <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007d24:	693b      	ldr	r3, [r7, #16]
 8007d26:	689a      	ldr	r2, [r3, #8]
 8007d28:	693b      	ldr	r3, [r7, #16]
 8007d2a:	68db      	ldr	r3, [r3, #12]
 8007d2c:	1ad2      	subs	r2, r2, r3
 8007d2e:	693b      	ldr	r3, [r7, #16]
 8007d30:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007d32:	693b      	ldr	r3, [r7, #16]
 8007d34:	68da      	ldr	r2, [r3, #12]
 8007d36:	693b      	ldr	r3, [r7, #16]
 8007d38:	689b      	ldr	r3, [r3, #8]
 8007d3a:	4293      	cmp	r3, r2
 8007d3c:	bf28      	it	cs
 8007d3e:	4613      	movcs	r3, r2
 8007d40:	461a      	mov	r2, r3
 8007d42:	6879      	ldr	r1, [r7, #4]
 8007d44:	68f8      	ldr	r0, [r7, #12]
 8007d46:	f000 ff97 	bl	8008c78 <USBD_CtlContinueRx>
 8007d4a:	e030      	b.n	8007dae <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d52:	691b      	ldr	r3, [r3, #16]
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d00a      	beq.n	8007d6e <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007d5e:	2b03      	cmp	r3, #3
 8007d60:	d105      	bne.n	8007d6e <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d68:	691b      	ldr	r3, [r3, #16]
 8007d6a:	68f8      	ldr	r0, [r7, #12]
 8007d6c:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 8007d6e:	68f8      	ldr	r0, [r7, #12]
 8007d70:	f000 ff93 	bl	8008c9a <USBD_CtlSendStatus>
 8007d74:	e01b      	b.n	8007dae <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d7c:	699b      	ldr	r3, [r3, #24]
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d013      	beq.n	8007daa <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8007d88:	2b03      	cmp	r3, #3
 8007d8a:	d10e      	bne.n	8007daa <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d92:	699b      	ldr	r3, [r3, #24]
 8007d94:	7afa      	ldrb	r2, [r7, #11]
 8007d96:	4611      	mov	r1, r2
 8007d98:	68f8      	ldr	r0, [r7, #12]
 8007d9a:	4798      	blx	r3
 8007d9c:	4603      	mov	r3, r0
 8007d9e:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8007da0:	7dfb      	ldrb	r3, [r7, #23]
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d003      	beq.n	8007dae <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 8007da6:	7dfb      	ldrb	r3, [r7, #23]
 8007da8:	e002      	b.n	8007db0 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007daa:	2303      	movs	r3, #3
 8007dac:	e000      	b.n	8007db0 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 8007dae:	2300      	movs	r3, #0
}
 8007db0:	4618      	mov	r0, r3
 8007db2:	3718      	adds	r7, #24
 8007db4:	46bd      	mov	sp, r7
 8007db6:	bd80      	pop	{r7, pc}

08007db8 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007db8:	b580      	push	{r7, lr}
 8007dba:	b086      	sub	sp, #24
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	60f8      	str	r0, [r7, #12]
 8007dc0:	460b      	mov	r3, r1
 8007dc2:	607a      	str	r2, [r7, #4]
 8007dc4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007dc6:	7afb      	ldrb	r3, [r7, #11]
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d16a      	bne.n	8007ea2 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	3314      	adds	r3, #20
 8007dd0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007dd8:	2b02      	cmp	r3, #2
 8007dda:	d155      	bne.n	8007e88 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 8007ddc:	693b      	ldr	r3, [r7, #16]
 8007dde:	689a      	ldr	r2, [r3, #8]
 8007de0:	693b      	ldr	r3, [r7, #16]
 8007de2:	68db      	ldr	r3, [r3, #12]
 8007de4:	429a      	cmp	r2, r3
 8007de6:	d914      	bls.n	8007e12 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007de8:	693b      	ldr	r3, [r7, #16]
 8007dea:	689a      	ldr	r2, [r3, #8]
 8007dec:	693b      	ldr	r3, [r7, #16]
 8007dee:	68db      	ldr	r3, [r3, #12]
 8007df0:	1ad2      	subs	r2, r2, r3
 8007df2:	693b      	ldr	r3, [r7, #16]
 8007df4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007df6:	693b      	ldr	r3, [r7, #16]
 8007df8:	689b      	ldr	r3, [r3, #8]
 8007dfa:	461a      	mov	r2, r3
 8007dfc:	6879      	ldr	r1, [r7, #4]
 8007dfe:	68f8      	ldr	r0, [r7, #12]
 8007e00:	f000 ff0c 	bl	8008c1c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007e04:	2300      	movs	r3, #0
 8007e06:	2200      	movs	r2, #0
 8007e08:	2100      	movs	r1, #0
 8007e0a:	68f8      	ldr	r0, [r7, #12]
 8007e0c:	f001 fbaf 	bl	800956e <USBD_LL_PrepareReceive>
 8007e10:	e03a      	b.n	8007e88 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007e12:	693b      	ldr	r3, [r7, #16]
 8007e14:	68da      	ldr	r2, [r3, #12]
 8007e16:	693b      	ldr	r3, [r7, #16]
 8007e18:	689b      	ldr	r3, [r3, #8]
 8007e1a:	429a      	cmp	r2, r3
 8007e1c:	d11c      	bne.n	8007e58 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007e1e:	693b      	ldr	r3, [r7, #16]
 8007e20:	685a      	ldr	r2, [r3, #4]
 8007e22:	693b      	ldr	r3, [r7, #16]
 8007e24:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007e26:	429a      	cmp	r2, r3
 8007e28:	d316      	bcc.n	8007e58 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007e2a:	693b      	ldr	r3, [r7, #16]
 8007e2c:	685a      	ldr	r2, [r3, #4]
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007e34:	429a      	cmp	r2, r3
 8007e36:	d20f      	bcs.n	8007e58 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007e38:	2200      	movs	r2, #0
 8007e3a:	2100      	movs	r1, #0
 8007e3c:	68f8      	ldr	r0, [r7, #12]
 8007e3e:	f000 feed 	bl	8008c1c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	2200      	movs	r2, #0
 8007e46:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007e4a:	2300      	movs	r3, #0
 8007e4c:	2200      	movs	r2, #0
 8007e4e:	2100      	movs	r1, #0
 8007e50:	68f8      	ldr	r0, [r7, #12]
 8007e52:	f001 fb8c 	bl	800956e <USBD_LL_PrepareReceive>
 8007e56:	e017      	b.n	8007e88 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e5e:	68db      	ldr	r3, [r3, #12]
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d00a      	beq.n	8007e7a <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007e6a:	2b03      	cmp	r3, #3
 8007e6c:	d105      	bne.n	8007e7a <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e74:	68db      	ldr	r3, [r3, #12]
 8007e76:	68f8      	ldr	r0, [r7, #12]
 8007e78:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007e7a:	2180      	movs	r1, #128	; 0x80
 8007e7c:	68f8      	ldr	r0, [r7, #12]
 8007e7e:	f001 facb 	bl	8009418 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007e82:	68f8      	ldr	r0, [r7, #12]
 8007e84:	f000 ff1c 	bl	8008cc0 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007e8e:	2b01      	cmp	r3, #1
 8007e90:	d123      	bne.n	8007eda <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8007e92:	68f8      	ldr	r0, [r7, #12]
 8007e94:	f7ff fe9b 	bl	8007bce <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	2200      	movs	r2, #0
 8007e9c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007ea0:	e01b      	b.n	8007eda <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ea8:	695b      	ldr	r3, [r3, #20]
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d013      	beq.n	8007ed6 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8007eb4:	2b03      	cmp	r3, #3
 8007eb6:	d10e      	bne.n	8007ed6 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ebe:	695b      	ldr	r3, [r3, #20]
 8007ec0:	7afa      	ldrb	r2, [r7, #11]
 8007ec2:	4611      	mov	r1, r2
 8007ec4:	68f8      	ldr	r0, [r7, #12]
 8007ec6:	4798      	blx	r3
 8007ec8:	4603      	mov	r3, r0
 8007eca:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8007ecc:	7dfb      	ldrb	r3, [r7, #23]
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d003      	beq.n	8007eda <USBD_LL_DataInStage+0x122>
    {
      return ret;
 8007ed2:	7dfb      	ldrb	r3, [r7, #23]
 8007ed4:	e002      	b.n	8007edc <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007ed6:	2303      	movs	r3, #3
 8007ed8:	e000      	b.n	8007edc <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 8007eda:	2300      	movs	r3, #0
}
 8007edc:	4618      	mov	r0, r3
 8007ede:	3718      	adds	r7, #24
 8007ee0:	46bd      	mov	sp, r7
 8007ee2:	bd80      	pop	{r7, pc}

08007ee4 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007ee4:	b580      	push	{r7, lr}
 8007ee6:	b082      	sub	sp, #8
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	2201      	movs	r2, #1
 8007ef0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	2200      	movs	r2, #0
 8007ef8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	2200      	movs	r2, #0
 8007f00:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	2200      	movs	r2, #0
 8007f06:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d009      	beq.n	8007f28 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f1a:	685b      	ldr	r3, [r3, #4]
 8007f1c:	687a      	ldr	r2, [r7, #4]
 8007f1e:	6852      	ldr	r2, [r2, #4]
 8007f20:	b2d2      	uxtb	r2, r2
 8007f22:	4611      	mov	r1, r2
 8007f24:	6878      	ldr	r0, [r7, #4]
 8007f26:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007f28:	2340      	movs	r3, #64	; 0x40
 8007f2a:	2200      	movs	r2, #0
 8007f2c:	2100      	movs	r1, #0
 8007f2e:	6878      	ldr	r0, [r7, #4]
 8007f30:	f001 fa2d 	bl	800938e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	2201      	movs	r2, #1
 8007f38:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	2240      	movs	r2, #64	; 0x40
 8007f40:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007f44:	2340      	movs	r3, #64	; 0x40
 8007f46:	2200      	movs	r2, #0
 8007f48:	2180      	movs	r1, #128	; 0x80
 8007f4a:	6878      	ldr	r0, [r7, #4]
 8007f4c:	f001 fa1f 	bl	800938e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	2201      	movs	r2, #1
 8007f54:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	2240      	movs	r2, #64	; 0x40
 8007f5a:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8007f5c:	2300      	movs	r3, #0
}
 8007f5e:	4618      	mov	r0, r3
 8007f60:	3708      	adds	r7, #8
 8007f62:	46bd      	mov	sp, r7
 8007f64:	bd80      	pop	{r7, pc}

08007f66 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007f66:	b480      	push	{r7}
 8007f68:	b083      	sub	sp, #12
 8007f6a:	af00      	add	r7, sp, #0
 8007f6c:	6078      	str	r0, [r7, #4]
 8007f6e:	460b      	mov	r3, r1
 8007f70:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	78fa      	ldrb	r2, [r7, #3]
 8007f76:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007f78:	2300      	movs	r3, #0
}
 8007f7a:	4618      	mov	r0, r3
 8007f7c:	370c      	adds	r7, #12
 8007f7e:	46bd      	mov	sp, r7
 8007f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f84:	4770      	bx	lr

08007f86 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007f86:	b480      	push	{r7}
 8007f88:	b083      	sub	sp, #12
 8007f8a:	af00      	add	r7, sp, #0
 8007f8c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	2204      	movs	r2, #4
 8007f9e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007fa2:	2300      	movs	r3, #0
}
 8007fa4:	4618      	mov	r0, r3
 8007fa6:	370c      	adds	r7, #12
 8007fa8:	46bd      	mov	sp, r7
 8007faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fae:	4770      	bx	lr

08007fb0 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007fb0:	b480      	push	{r7}
 8007fb2:	b083      	sub	sp, #12
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007fbe:	2b04      	cmp	r3, #4
 8007fc0:	d105      	bne.n	8007fce <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007fce:	2300      	movs	r3, #0
}
 8007fd0:	4618      	mov	r0, r3
 8007fd2:	370c      	adds	r7, #12
 8007fd4:	46bd      	mov	sp, r7
 8007fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fda:	4770      	bx	lr

08007fdc <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007fdc:	b580      	push	{r7, lr}
 8007fde:	b082      	sub	sp, #8
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007fea:	2b03      	cmp	r3, #3
 8007fec:	d10b      	bne.n	8008006 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ff4:	69db      	ldr	r3, [r3, #28]
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d005      	beq.n	8008006 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008000:	69db      	ldr	r3, [r3, #28]
 8008002:	6878      	ldr	r0, [r7, #4]
 8008004:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008006:	2300      	movs	r3, #0
}
 8008008:	4618      	mov	r0, r3
 800800a:	3708      	adds	r7, #8
 800800c:	46bd      	mov	sp, r7
 800800e:	bd80      	pop	{r7, pc}

08008010 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008010:	b480      	push	{r7}
 8008012:	b087      	sub	sp, #28
 8008014:	af00      	add	r7, sp, #0
 8008016:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800801c:	697b      	ldr	r3, [r7, #20]
 800801e:	781b      	ldrb	r3, [r3, #0]
 8008020:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008022:	697b      	ldr	r3, [r7, #20]
 8008024:	3301      	adds	r3, #1
 8008026:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008028:	697b      	ldr	r3, [r7, #20]
 800802a:	781b      	ldrb	r3, [r3, #0]
 800802c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800802e:	8a3b      	ldrh	r3, [r7, #16]
 8008030:	021b      	lsls	r3, r3, #8
 8008032:	b21a      	sxth	r2, r3
 8008034:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008038:	4313      	orrs	r3, r2
 800803a:	b21b      	sxth	r3, r3
 800803c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800803e:	89fb      	ldrh	r3, [r7, #14]
}
 8008040:	4618      	mov	r0, r3
 8008042:	371c      	adds	r7, #28
 8008044:	46bd      	mov	sp, r7
 8008046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800804a:	4770      	bx	lr

0800804c <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800804c:	b580      	push	{r7, lr}
 800804e:	b084      	sub	sp, #16
 8008050:	af00      	add	r7, sp, #0
 8008052:	6078      	str	r0, [r7, #4]
 8008054:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008056:	2300      	movs	r3, #0
 8008058:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800805a:	683b      	ldr	r3, [r7, #0]
 800805c:	781b      	ldrb	r3, [r3, #0]
 800805e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008062:	2b20      	cmp	r3, #32
 8008064:	d004      	beq.n	8008070 <USBD_StdDevReq+0x24>
 8008066:	2b40      	cmp	r3, #64	; 0x40
 8008068:	d002      	beq.n	8008070 <USBD_StdDevReq+0x24>
 800806a:	2b00      	cmp	r3, #0
 800806c:	d00a      	beq.n	8008084 <USBD_StdDevReq+0x38>
 800806e:	e050      	b.n	8008112 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008076:	689b      	ldr	r3, [r3, #8]
 8008078:	6839      	ldr	r1, [r7, #0]
 800807a:	6878      	ldr	r0, [r7, #4]
 800807c:	4798      	blx	r3
 800807e:	4603      	mov	r3, r0
 8008080:	73fb      	strb	r3, [r7, #15]
    break;
 8008082:	e04b      	b.n	800811c <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8008084:	683b      	ldr	r3, [r7, #0]
 8008086:	785b      	ldrb	r3, [r3, #1]
 8008088:	2b09      	cmp	r3, #9
 800808a:	d83c      	bhi.n	8008106 <USBD_StdDevReq+0xba>
 800808c:	a201      	add	r2, pc, #4	; (adr r2, 8008094 <USBD_StdDevReq+0x48>)
 800808e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008092:	bf00      	nop
 8008094:	080080e9 	.word	0x080080e9
 8008098:	080080fd 	.word	0x080080fd
 800809c:	08008107 	.word	0x08008107
 80080a0:	080080f3 	.word	0x080080f3
 80080a4:	08008107 	.word	0x08008107
 80080a8:	080080c7 	.word	0x080080c7
 80080ac:	080080bd 	.word	0x080080bd
 80080b0:	08008107 	.word	0x08008107
 80080b4:	080080df 	.word	0x080080df
 80080b8:	080080d1 	.word	0x080080d1
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 80080bc:	6839      	ldr	r1, [r7, #0]
 80080be:	6878      	ldr	r0, [r7, #4]
 80080c0:	f000 f9d0 	bl	8008464 <USBD_GetDescriptor>
      break;
 80080c4:	e024      	b.n	8008110 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 80080c6:	6839      	ldr	r1, [r7, #0]
 80080c8:	6878      	ldr	r0, [r7, #4]
 80080ca:	f000 fb5f 	bl	800878c <USBD_SetAddress>
      break;
 80080ce:	e01f      	b.n	8008110 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 80080d0:	6839      	ldr	r1, [r7, #0]
 80080d2:	6878      	ldr	r0, [r7, #4]
 80080d4:	f000 fb9c 	bl	8008810 <USBD_SetConfig>
 80080d8:	4603      	mov	r3, r0
 80080da:	73fb      	strb	r3, [r7, #15]
      break;
 80080dc:	e018      	b.n	8008110 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 80080de:	6839      	ldr	r1, [r7, #0]
 80080e0:	6878      	ldr	r0, [r7, #4]
 80080e2:	f000 fc39 	bl	8008958 <USBD_GetConfig>
      break;
 80080e6:	e013      	b.n	8008110 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 80080e8:	6839      	ldr	r1, [r7, #0]
 80080ea:	6878      	ldr	r0, [r7, #4]
 80080ec:	f000 fc68 	bl	80089c0 <USBD_GetStatus>
      break;
 80080f0:	e00e      	b.n	8008110 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 80080f2:	6839      	ldr	r1, [r7, #0]
 80080f4:	6878      	ldr	r0, [r7, #4]
 80080f6:	f000 fc96 	bl	8008a26 <USBD_SetFeature>
      break;
 80080fa:	e009      	b.n	8008110 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 80080fc:	6839      	ldr	r1, [r7, #0]
 80080fe:	6878      	ldr	r0, [r7, #4]
 8008100:	f000 fca5 	bl	8008a4e <USBD_ClrFeature>
      break;
 8008104:	e004      	b.n	8008110 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 8008106:	6839      	ldr	r1, [r7, #0]
 8008108:	6878      	ldr	r0, [r7, #4]
 800810a:	f000 fcfb 	bl	8008b04 <USBD_CtlError>
      break;
 800810e:	bf00      	nop
    }
    break;
 8008110:	e004      	b.n	800811c <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 8008112:	6839      	ldr	r1, [r7, #0]
 8008114:	6878      	ldr	r0, [r7, #4]
 8008116:	f000 fcf5 	bl	8008b04 <USBD_CtlError>
    break;
 800811a:	bf00      	nop
  }

  return ret;
 800811c:	7bfb      	ldrb	r3, [r7, #15]
}
 800811e:	4618      	mov	r0, r3
 8008120:	3710      	adds	r7, #16
 8008122:	46bd      	mov	sp, r7
 8008124:	bd80      	pop	{r7, pc}
 8008126:	bf00      	nop

08008128 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008128:	b580      	push	{r7, lr}
 800812a:	b084      	sub	sp, #16
 800812c:	af00      	add	r7, sp, #0
 800812e:	6078      	str	r0, [r7, #4]
 8008130:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008132:	2300      	movs	r3, #0
 8008134:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008136:	683b      	ldr	r3, [r7, #0]
 8008138:	781b      	ldrb	r3, [r3, #0]
 800813a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800813e:	2b20      	cmp	r3, #32
 8008140:	d003      	beq.n	800814a <USBD_StdItfReq+0x22>
 8008142:	2b40      	cmp	r3, #64	; 0x40
 8008144:	d001      	beq.n	800814a <USBD_StdItfReq+0x22>
 8008146:	2b00      	cmp	r3, #0
 8008148:	d12a      	bne.n	80081a0 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008150:	3b01      	subs	r3, #1
 8008152:	2b02      	cmp	r3, #2
 8008154:	d81d      	bhi.n	8008192 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008156:	683b      	ldr	r3, [r7, #0]
 8008158:	889b      	ldrh	r3, [r3, #4]
 800815a:	b2db      	uxtb	r3, r3
 800815c:	2b01      	cmp	r3, #1
 800815e:	d813      	bhi.n	8008188 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008166:	689b      	ldr	r3, [r3, #8]
 8008168:	6839      	ldr	r1, [r7, #0]
 800816a:	6878      	ldr	r0, [r7, #4]
 800816c:	4798      	blx	r3
 800816e:	4603      	mov	r3, r0
 8008170:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8008172:	683b      	ldr	r3, [r7, #0]
 8008174:	88db      	ldrh	r3, [r3, #6]
 8008176:	2b00      	cmp	r3, #0
 8008178:	d110      	bne.n	800819c <USBD_StdItfReq+0x74>
 800817a:	7bfb      	ldrb	r3, [r7, #15]
 800817c:	2b00      	cmp	r3, #0
 800817e:	d10d      	bne.n	800819c <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 8008180:	6878      	ldr	r0, [r7, #4]
 8008182:	f000 fd8a 	bl	8008c9a <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8008186:	e009      	b.n	800819c <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8008188:	6839      	ldr	r1, [r7, #0]
 800818a:	6878      	ldr	r0, [r7, #4]
 800818c:	f000 fcba 	bl	8008b04 <USBD_CtlError>
      break;
 8008190:	e004      	b.n	800819c <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 8008192:	6839      	ldr	r1, [r7, #0]
 8008194:	6878      	ldr	r0, [r7, #4]
 8008196:	f000 fcb5 	bl	8008b04 <USBD_CtlError>
      break;
 800819a:	e000      	b.n	800819e <USBD_StdItfReq+0x76>
      break;
 800819c:	bf00      	nop
    }
    break;
 800819e:	e004      	b.n	80081aa <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 80081a0:	6839      	ldr	r1, [r7, #0]
 80081a2:	6878      	ldr	r0, [r7, #4]
 80081a4:	f000 fcae 	bl	8008b04 <USBD_CtlError>
    break;
 80081a8:	bf00      	nop
  }

  return ret;
 80081aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80081ac:	4618      	mov	r0, r3
 80081ae:	3710      	adds	r7, #16
 80081b0:	46bd      	mov	sp, r7
 80081b2:	bd80      	pop	{r7, pc}

080081b4 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80081b4:	b580      	push	{r7, lr}
 80081b6:	b084      	sub	sp, #16
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	6078      	str	r0, [r7, #4]
 80081bc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80081be:	2300      	movs	r3, #0
 80081c0:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80081c2:	683b      	ldr	r3, [r7, #0]
 80081c4:	889b      	ldrh	r3, [r3, #4]
 80081c6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80081c8:	683b      	ldr	r3, [r7, #0]
 80081ca:	781b      	ldrb	r3, [r3, #0]
 80081cc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80081d0:	2b20      	cmp	r3, #32
 80081d2:	d004      	beq.n	80081de <USBD_StdEPReq+0x2a>
 80081d4:	2b40      	cmp	r3, #64	; 0x40
 80081d6:	d002      	beq.n	80081de <USBD_StdEPReq+0x2a>
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d00a      	beq.n	80081f2 <USBD_StdEPReq+0x3e>
 80081dc:	e137      	b.n	800844e <USBD_StdEPReq+0x29a>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081e4:	689b      	ldr	r3, [r3, #8]
 80081e6:	6839      	ldr	r1, [r7, #0]
 80081e8:	6878      	ldr	r0, [r7, #4]
 80081ea:	4798      	blx	r3
 80081ec:	4603      	mov	r3, r0
 80081ee:	73fb      	strb	r3, [r7, #15]
    break;
 80081f0:	e132      	b.n	8008458 <USBD_StdEPReq+0x2a4>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80081f2:	683b      	ldr	r3, [r7, #0]
 80081f4:	785b      	ldrb	r3, [r3, #1]
 80081f6:	2b01      	cmp	r3, #1
 80081f8:	d03e      	beq.n	8008278 <USBD_StdEPReq+0xc4>
 80081fa:	2b03      	cmp	r3, #3
 80081fc:	d002      	beq.n	8008204 <USBD_StdEPReq+0x50>
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d079      	beq.n	80082f6 <USBD_StdEPReq+0x142>
 8008202:	e11e      	b.n	8008442 <USBD_StdEPReq+0x28e>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800820a:	2b02      	cmp	r3, #2
 800820c:	d002      	beq.n	8008214 <USBD_StdEPReq+0x60>
 800820e:	2b03      	cmp	r3, #3
 8008210:	d015      	beq.n	800823e <USBD_StdEPReq+0x8a>
 8008212:	e02b      	b.n	800826c <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008214:	7bbb      	ldrb	r3, [r7, #14]
 8008216:	2b00      	cmp	r3, #0
 8008218:	d00c      	beq.n	8008234 <USBD_StdEPReq+0x80>
 800821a:	7bbb      	ldrb	r3, [r7, #14]
 800821c:	2b80      	cmp	r3, #128	; 0x80
 800821e:	d009      	beq.n	8008234 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8008220:	7bbb      	ldrb	r3, [r7, #14]
 8008222:	4619      	mov	r1, r3
 8008224:	6878      	ldr	r0, [r7, #4]
 8008226:	f001 f8f7 	bl	8009418 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800822a:	2180      	movs	r1, #128	; 0x80
 800822c:	6878      	ldr	r0, [r7, #4]
 800822e:	f001 f8f3 	bl	8009418 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8008232:	e020      	b.n	8008276 <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 8008234:	6839      	ldr	r1, [r7, #0]
 8008236:	6878      	ldr	r0, [r7, #4]
 8008238:	f000 fc64 	bl	8008b04 <USBD_CtlError>
        break;
 800823c:	e01b      	b.n	8008276 <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800823e:	683b      	ldr	r3, [r7, #0]
 8008240:	885b      	ldrh	r3, [r3, #2]
 8008242:	2b00      	cmp	r3, #0
 8008244:	d10e      	bne.n	8008264 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008246:	7bbb      	ldrb	r3, [r7, #14]
 8008248:	2b00      	cmp	r3, #0
 800824a:	d00b      	beq.n	8008264 <USBD_StdEPReq+0xb0>
 800824c:	7bbb      	ldrb	r3, [r7, #14]
 800824e:	2b80      	cmp	r3, #128	; 0x80
 8008250:	d008      	beq.n	8008264 <USBD_StdEPReq+0xb0>
 8008252:	683b      	ldr	r3, [r7, #0]
 8008254:	88db      	ldrh	r3, [r3, #6]
 8008256:	2b00      	cmp	r3, #0
 8008258:	d104      	bne.n	8008264 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 800825a:	7bbb      	ldrb	r3, [r7, #14]
 800825c:	4619      	mov	r1, r3
 800825e:	6878      	ldr	r0, [r7, #4]
 8008260:	f001 f8da 	bl	8009418 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 8008264:	6878      	ldr	r0, [r7, #4]
 8008266:	f000 fd18 	bl	8008c9a <USBD_CtlSendStatus>

        break;
 800826a:	e004      	b.n	8008276 <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 800826c:	6839      	ldr	r1, [r7, #0]
 800826e:	6878      	ldr	r0, [r7, #4]
 8008270:	f000 fc48 	bl	8008b04 <USBD_CtlError>
        break;
 8008274:	bf00      	nop
      }
      break;
 8008276:	e0e9      	b.n	800844c <USBD_StdEPReq+0x298>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800827e:	2b02      	cmp	r3, #2
 8008280:	d002      	beq.n	8008288 <USBD_StdEPReq+0xd4>
 8008282:	2b03      	cmp	r3, #3
 8008284:	d015      	beq.n	80082b2 <USBD_StdEPReq+0xfe>
 8008286:	e02f      	b.n	80082e8 <USBD_StdEPReq+0x134>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008288:	7bbb      	ldrb	r3, [r7, #14]
 800828a:	2b00      	cmp	r3, #0
 800828c:	d00c      	beq.n	80082a8 <USBD_StdEPReq+0xf4>
 800828e:	7bbb      	ldrb	r3, [r7, #14]
 8008290:	2b80      	cmp	r3, #128	; 0x80
 8008292:	d009      	beq.n	80082a8 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8008294:	7bbb      	ldrb	r3, [r7, #14]
 8008296:	4619      	mov	r1, r3
 8008298:	6878      	ldr	r0, [r7, #4]
 800829a:	f001 f8bd 	bl	8009418 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800829e:	2180      	movs	r1, #128	; 0x80
 80082a0:	6878      	ldr	r0, [r7, #4]
 80082a2:	f001 f8b9 	bl	8009418 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80082a6:	e025      	b.n	80082f4 <USBD_StdEPReq+0x140>
          USBD_CtlError(pdev, req);
 80082a8:	6839      	ldr	r1, [r7, #0]
 80082aa:	6878      	ldr	r0, [r7, #4]
 80082ac:	f000 fc2a 	bl	8008b04 <USBD_CtlError>
        break;
 80082b0:	e020      	b.n	80082f4 <USBD_StdEPReq+0x140>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80082b2:	683b      	ldr	r3, [r7, #0]
 80082b4:	885b      	ldrh	r3, [r3, #2]
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d11b      	bne.n	80082f2 <USBD_StdEPReq+0x13e>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 80082ba:	7bbb      	ldrb	r3, [r7, #14]
 80082bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d004      	beq.n	80082ce <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80082c4:	7bbb      	ldrb	r3, [r7, #14]
 80082c6:	4619      	mov	r1, r3
 80082c8:	6878      	ldr	r0, [r7, #4]
 80082ca:	f001 f8c4 	bl	8009456 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 80082ce:	6878      	ldr	r0, [r7, #4]
 80082d0:	f000 fce3 	bl	8008c9a <USBD_CtlSendStatus>
          ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082da:	689b      	ldr	r3, [r3, #8]
 80082dc:	6839      	ldr	r1, [r7, #0]
 80082de:	6878      	ldr	r0, [r7, #4]
 80082e0:	4798      	blx	r3
 80082e2:	4603      	mov	r3, r0
 80082e4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80082e6:	e004      	b.n	80082f2 <USBD_StdEPReq+0x13e>

      default:
        USBD_CtlError(pdev, req);
 80082e8:	6839      	ldr	r1, [r7, #0]
 80082ea:	6878      	ldr	r0, [r7, #4]
 80082ec:	f000 fc0a 	bl	8008b04 <USBD_CtlError>
        break;
 80082f0:	e000      	b.n	80082f4 <USBD_StdEPReq+0x140>
        break;
 80082f2:	bf00      	nop
      }
      break;
 80082f4:	e0aa      	b.n	800844c <USBD_StdEPReq+0x298>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80082fc:	2b02      	cmp	r3, #2
 80082fe:	d002      	beq.n	8008306 <USBD_StdEPReq+0x152>
 8008300:	2b03      	cmp	r3, #3
 8008302:	d032      	beq.n	800836a <USBD_StdEPReq+0x1b6>
 8008304:	e097      	b.n	8008436 <USBD_StdEPReq+0x282>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008306:	7bbb      	ldrb	r3, [r7, #14]
 8008308:	2b00      	cmp	r3, #0
 800830a:	d007      	beq.n	800831c <USBD_StdEPReq+0x168>
 800830c:	7bbb      	ldrb	r3, [r7, #14]
 800830e:	2b80      	cmp	r3, #128	; 0x80
 8008310:	d004      	beq.n	800831c <USBD_StdEPReq+0x168>
        {
          USBD_CtlError(pdev, req);
 8008312:	6839      	ldr	r1, [r7, #0]
 8008314:	6878      	ldr	r0, [r7, #4]
 8008316:	f000 fbf5 	bl	8008b04 <USBD_CtlError>
          break;
 800831a:	e091      	b.n	8008440 <USBD_StdEPReq+0x28c>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800831c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008320:	2b00      	cmp	r3, #0
 8008322:	da0b      	bge.n	800833c <USBD_StdEPReq+0x188>
 8008324:	7bbb      	ldrb	r3, [r7, #14]
 8008326:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800832a:	4613      	mov	r3, r2
 800832c:	009b      	lsls	r3, r3, #2
 800832e:	4413      	add	r3, r2
 8008330:	009b      	lsls	r3, r3, #2
 8008332:	3310      	adds	r3, #16
 8008334:	687a      	ldr	r2, [r7, #4]
 8008336:	4413      	add	r3, r2
 8008338:	3304      	adds	r3, #4
 800833a:	e00b      	b.n	8008354 <USBD_StdEPReq+0x1a0>
              &pdev->ep_out[ep_addr & 0x7FU];
 800833c:	7bbb      	ldrb	r3, [r7, #14]
 800833e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008342:	4613      	mov	r3, r2
 8008344:	009b      	lsls	r3, r3, #2
 8008346:	4413      	add	r3, r2
 8008348:	009b      	lsls	r3, r3, #2
 800834a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800834e:	687a      	ldr	r2, [r7, #4]
 8008350:	4413      	add	r3, r2
 8008352:	3304      	adds	r3, #4
 8008354:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 8008356:	68bb      	ldr	r3, [r7, #8]
 8008358:	2200      	movs	r2, #0
 800835a:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800835c:	68bb      	ldr	r3, [r7, #8]
 800835e:	2202      	movs	r2, #2
 8008360:	4619      	mov	r1, r3
 8008362:	6878      	ldr	r0, [r7, #4]
 8008364:	f000 fc3f 	bl	8008be6 <USBD_CtlSendData>
        break;
 8008368:	e06a      	b.n	8008440 <USBD_StdEPReq+0x28c>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 800836a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800836e:	2b00      	cmp	r3, #0
 8008370:	da11      	bge.n	8008396 <USBD_StdEPReq+0x1e2>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008372:	7bbb      	ldrb	r3, [r7, #14]
 8008374:	f003 020f 	and.w	r2, r3, #15
 8008378:	6879      	ldr	r1, [r7, #4]
 800837a:	4613      	mov	r3, r2
 800837c:	009b      	lsls	r3, r3, #2
 800837e:	4413      	add	r3, r2
 8008380:	009b      	lsls	r3, r3, #2
 8008382:	440b      	add	r3, r1
 8008384:	3324      	adds	r3, #36	; 0x24
 8008386:	881b      	ldrh	r3, [r3, #0]
 8008388:	2b00      	cmp	r3, #0
 800838a:	d117      	bne.n	80083bc <USBD_StdEPReq+0x208>
          {
            USBD_CtlError(pdev, req);
 800838c:	6839      	ldr	r1, [r7, #0]
 800838e:	6878      	ldr	r0, [r7, #4]
 8008390:	f000 fbb8 	bl	8008b04 <USBD_CtlError>
            break;
 8008394:	e054      	b.n	8008440 <USBD_StdEPReq+0x28c>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008396:	7bbb      	ldrb	r3, [r7, #14]
 8008398:	f003 020f 	and.w	r2, r3, #15
 800839c:	6879      	ldr	r1, [r7, #4]
 800839e:	4613      	mov	r3, r2
 80083a0:	009b      	lsls	r3, r3, #2
 80083a2:	4413      	add	r3, r2
 80083a4:	009b      	lsls	r3, r3, #2
 80083a6:	440b      	add	r3, r1
 80083a8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80083ac:	881b      	ldrh	r3, [r3, #0]
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d104      	bne.n	80083bc <USBD_StdEPReq+0x208>
          {
            USBD_CtlError(pdev, req);
 80083b2:	6839      	ldr	r1, [r7, #0]
 80083b4:	6878      	ldr	r0, [r7, #4]
 80083b6:	f000 fba5 	bl	8008b04 <USBD_CtlError>
            break;
 80083ba:	e041      	b.n	8008440 <USBD_StdEPReq+0x28c>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80083bc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	da0b      	bge.n	80083dc <USBD_StdEPReq+0x228>
 80083c4:	7bbb      	ldrb	r3, [r7, #14]
 80083c6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80083ca:	4613      	mov	r3, r2
 80083cc:	009b      	lsls	r3, r3, #2
 80083ce:	4413      	add	r3, r2
 80083d0:	009b      	lsls	r3, r3, #2
 80083d2:	3310      	adds	r3, #16
 80083d4:	687a      	ldr	r2, [r7, #4]
 80083d6:	4413      	add	r3, r2
 80083d8:	3304      	adds	r3, #4
 80083da:	e00b      	b.n	80083f4 <USBD_StdEPReq+0x240>
              &pdev->ep_out[ep_addr & 0x7FU];
 80083dc:	7bbb      	ldrb	r3, [r7, #14]
 80083de:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80083e2:	4613      	mov	r3, r2
 80083e4:	009b      	lsls	r3, r3, #2
 80083e6:	4413      	add	r3, r2
 80083e8:	009b      	lsls	r3, r3, #2
 80083ea:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80083ee:	687a      	ldr	r2, [r7, #4]
 80083f0:	4413      	add	r3, r2
 80083f2:	3304      	adds	r3, #4
 80083f4:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80083f6:	7bbb      	ldrb	r3, [r7, #14]
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d002      	beq.n	8008402 <USBD_StdEPReq+0x24e>
 80083fc:	7bbb      	ldrb	r3, [r7, #14]
 80083fe:	2b80      	cmp	r3, #128	; 0x80
 8008400:	d103      	bne.n	800840a <USBD_StdEPReq+0x256>
          {
            pep->status = 0x0000U;
 8008402:	68bb      	ldr	r3, [r7, #8]
 8008404:	2200      	movs	r2, #0
 8008406:	601a      	str	r2, [r3, #0]
 8008408:	e00e      	b.n	8008428 <USBD_StdEPReq+0x274>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800840a:	7bbb      	ldrb	r3, [r7, #14]
 800840c:	4619      	mov	r1, r3
 800840e:	6878      	ldr	r0, [r7, #4]
 8008410:	f001 f840 	bl	8009494 <USBD_LL_IsStallEP>
 8008414:	4603      	mov	r3, r0
 8008416:	2b00      	cmp	r3, #0
 8008418:	d003      	beq.n	8008422 <USBD_StdEPReq+0x26e>
          {
            pep->status = 0x0001U;
 800841a:	68bb      	ldr	r3, [r7, #8]
 800841c:	2201      	movs	r2, #1
 800841e:	601a      	str	r2, [r3, #0]
 8008420:	e002      	b.n	8008428 <USBD_StdEPReq+0x274>
          }
          else
          {
            pep->status = 0x0000U;
 8008422:	68bb      	ldr	r3, [r7, #8]
 8008424:	2200      	movs	r2, #0
 8008426:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008428:	68bb      	ldr	r3, [r7, #8]
 800842a:	2202      	movs	r2, #2
 800842c:	4619      	mov	r1, r3
 800842e:	6878      	ldr	r0, [r7, #4]
 8008430:	f000 fbd9 	bl	8008be6 <USBD_CtlSendData>
          break;
 8008434:	e004      	b.n	8008440 <USBD_StdEPReq+0x28c>

      default:
        USBD_CtlError(pdev, req);
 8008436:	6839      	ldr	r1, [r7, #0]
 8008438:	6878      	ldr	r0, [r7, #4]
 800843a:	f000 fb63 	bl	8008b04 <USBD_CtlError>
        break;
 800843e:	bf00      	nop
      }
      break;
 8008440:	e004      	b.n	800844c <USBD_StdEPReq+0x298>

    default:
      USBD_CtlError(pdev, req);
 8008442:	6839      	ldr	r1, [r7, #0]
 8008444:	6878      	ldr	r0, [r7, #4]
 8008446:	f000 fb5d 	bl	8008b04 <USBD_CtlError>
      break;
 800844a:	bf00      	nop
    }
    break;
 800844c:	e004      	b.n	8008458 <USBD_StdEPReq+0x2a4>

  default:
    USBD_CtlError(pdev, req);
 800844e:	6839      	ldr	r1, [r7, #0]
 8008450:	6878      	ldr	r0, [r7, #4]
 8008452:	f000 fb57 	bl	8008b04 <USBD_CtlError>
    break;
 8008456:	bf00      	nop
  }

  return ret;
 8008458:	7bfb      	ldrb	r3, [r7, #15]
}
 800845a:	4618      	mov	r0, r3
 800845c:	3710      	adds	r7, #16
 800845e:	46bd      	mov	sp, r7
 8008460:	bd80      	pop	{r7, pc}
	...

08008464 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008464:	b580      	push	{r7, lr}
 8008466:	b084      	sub	sp, #16
 8008468:	af00      	add	r7, sp, #0
 800846a:	6078      	str	r0, [r7, #4]
 800846c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800846e:	2300      	movs	r3, #0
 8008470:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008472:	2300      	movs	r3, #0
 8008474:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008476:	2300      	movs	r3, #0
 8008478:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800847a:	683b      	ldr	r3, [r7, #0]
 800847c:	885b      	ldrh	r3, [r3, #2]
 800847e:	0a1b      	lsrs	r3, r3, #8
 8008480:	b29b      	uxth	r3, r3
 8008482:	3b01      	subs	r3, #1
 8008484:	2b0e      	cmp	r3, #14
 8008486:	f200 8152 	bhi.w	800872e <USBD_GetDescriptor+0x2ca>
 800848a:	a201      	add	r2, pc, #4	; (adr r2, 8008490 <USBD_GetDescriptor+0x2c>)
 800848c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008490:	08008501 	.word	0x08008501
 8008494:	08008519 	.word	0x08008519
 8008498:	08008559 	.word	0x08008559
 800849c:	0800872f 	.word	0x0800872f
 80084a0:	0800872f 	.word	0x0800872f
 80084a4:	080086cf 	.word	0x080086cf
 80084a8:	080086fb 	.word	0x080086fb
 80084ac:	0800872f 	.word	0x0800872f
 80084b0:	0800872f 	.word	0x0800872f
 80084b4:	0800872f 	.word	0x0800872f
 80084b8:	0800872f 	.word	0x0800872f
 80084bc:	0800872f 	.word	0x0800872f
 80084c0:	0800872f 	.word	0x0800872f
 80084c4:	0800872f 	.word	0x0800872f
 80084c8:	080084cd 	.word	0x080084cd
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
  case USB_DESC_TYPE_BOS:
    if (pdev->pDesc->GetBOSDescriptor != NULL)
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80084d2:	69db      	ldr	r3, [r3, #28]
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d00b      	beq.n	80084f0 <USBD_GetDescriptor+0x8c>
    {
      pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80084de:	69db      	ldr	r3, [r3, #28]
 80084e0:	687a      	ldr	r2, [r7, #4]
 80084e2:	7c12      	ldrb	r2, [r2, #16]
 80084e4:	f107 0108 	add.w	r1, r7, #8
 80084e8:	4610      	mov	r0, r2
 80084ea:	4798      	blx	r3
 80084ec:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 80084ee:	e126      	b.n	800873e <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 80084f0:	6839      	ldr	r1, [r7, #0]
 80084f2:	6878      	ldr	r0, [r7, #4]
 80084f4:	f000 fb06 	bl	8008b04 <USBD_CtlError>
      err++;
 80084f8:	7afb      	ldrb	r3, [r7, #11]
 80084fa:	3301      	adds	r3, #1
 80084fc:	72fb      	strb	r3, [r7, #11]
    break;
 80084fe:	e11e      	b.n	800873e <USBD_GetDescriptor+0x2da>
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	687a      	ldr	r2, [r7, #4]
 800850a:	7c12      	ldrb	r2, [r2, #16]
 800850c:	f107 0108 	add.w	r1, r7, #8
 8008510:	4610      	mov	r0, r2
 8008512:	4798      	blx	r3
 8008514:	60f8      	str	r0, [r7, #12]
    break;
 8008516:	e112      	b.n	800873e <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	7c1b      	ldrb	r3, [r3, #16]
 800851c:	2b00      	cmp	r3, #0
 800851e:	d10d      	bne.n	800853c <USBD_GetDescriptor+0xd8>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008526:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008528:	f107 0208 	add.w	r2, r7, #8
 800852c:	4610      	mov	r0, r2
 800852e:	4798      	blx	r3
 8008530:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	3301      	adds	r3, #1
 8008536:	2202      	movs	r2, #2
 8008538:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800853a:	e100      	b.n	800873e <USBD_GetDescriptor+0x2da>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008544:	f107 0208 	add.w	r2, r7, #8
 8008548:	4610      	mov	r0, r2
 800854a:	4798      	blx	r3
 800854c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	3301      	adds	r3, #1
 8008552:	2202      	movs	r2, #2
 8008554:	701a      	strb	r2, [r3, #0]
    break;
 8008556:	e0f2      	b.n	800873e <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8008558:	683b      	ldr	r3, [r7, #0]
 800855a:	885b      	ldrh	r3, [r3, #2]
 800855c:	b2db      	uxtb	r3, r3
 800855e:	2b05      	cmp	r3, #5
 8008560:	f200 80ac 	bhi.w	80086bc <USBD_GetDescriptor+0x258>
 8008564:	a201      	add	r2, pc, #4	; (adr r2, 800856c <USBD_GetDescriptor+0x108>)
 8008566:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800856a:	bf00      	nop
 800856c:	08008585 	.word	0x08008585
 8008570:	080085b9 	.word	0x080085b9
 8008574:	080085ed 	.word	0x080085ed
 8008578:	08008621 	.word	0x08008621
 800857c:	08008655 	.word	0x08008655
 8008580:	08008689 	.word	0x08008689
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800858a:	685b      	ldr	r3, [r3, #4]
 800858c:	2b00      	cmp	r3, #0
 800858e:	d00b      	beq.n	80085a8 <USBD_GetDescriptor+0x144>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008596:	685b      	ldr	r3, [r3, #4]
 8008598:	687a      	ldr	r2, [r7, #4]
 800859a:	7c12      	ldrb	r2, [r2, #16]
 800859c:	f107 0108 	add.w	r1, r7, #8
 80085a0:	4610      	mov	r0, r2
 80085a2:	4798      	blx	r3
 80085a4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80085a6:	e091      	b.n	80086cc <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 80085a8:	6839      	ldr	r1, [r7, #0]
 80085aa:	6878      	ldr	r0, [r7, #4]
 80085ac:	f000 faaa 	bl	8008b04 <USBD_CtlError>
        err++;
 80085b0:	7afb      	ldrb	r3, [r7, #11]
 80085b2:	3301      	adds	r3, #1
 80085b4:	72fb      	strb	r3, [r7, #11]
      break;
 80085b6:	e089      	b.n	80086cc <USBD_GetDescriptor+0x268>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80085be:	689b      	ldr	r3, [r3, #8]
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d00b      	beq.n	80085dc <USBD_GetDescriptor+0x178>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80085ca:	689b      	ldr	r3, [r3, #8]
 80085cc:	687a      	ldr	r2, [r7, #4]
 80085ce:	7c12      	ldrb	r2, [r2, #16]
 80085d0:	f107 0108 	add.w	r1, r7, #8
 80085d4:	4610      	mov	r0, r2
 80085d6:	4798      	blx	r3
 80085d8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80085da:	e077      	b.n	80086cc <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 80085dc:	6839      	ldr	r1, [r7, #0]
 80085de:	6878      	ldr	r0, [r7, #4]
 80085e0:	f000 fa90 	bl	8008b04 <USBD_CtlError>
        err++;
 80085e4:	7afb      	ldrb	r3, [r7, #11]
 80085e6:	3301      	adds	r3, #1
 80085e8:	72fb      	strb	r3, [r7, #11]
      break;
 80085ea:	e06f      	b.n	80086cc <USBD_GetDescriptor+0x268>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80085f2:	68db      	ldr	r3, [r3, #12]
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d00b      	beq.n	8008610 <USBD_GetDescriptor+0x1ac>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80085fe:	68db      	ldr	r3, [r3, #12]
 8008600:	687a      	ldr	r2, [r7, #4]
 8008602:	7c12      	ldrb	r2, [r2, #16]
 8008604:	f107 0108 	add.w	r1, r7, #8
 8008608:	4610      	mov	r0, r2
 800860a:	4798      	blx	r3
 800860c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800860e:	e05d      	b.n	80086cc <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8008610:	6839      	ldr	r1, [r7, #0]
 8008612:	6878      	ldr	r0, [r7, #4]
 8008614:	f000 fa76 	bl	8008b04 <USBD_CtlError>
        err++;
 8008618:	7afb      	ldrb	r3, [r7, #11]
 800861a:	3301      	adds	r3, #1
 800861c:	72fb      	strb	r3, [r7, #11]
      break;
 800861e:	e055      	b.n	80086cc <USBD_GetDescriptor+0x268>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008626:	691b      	ldr	r3, [r3, #16]
 8008628:	2b00      	cmp	r3, #0
 800862a:	d00b      	beq.n	8008644 <USBD_GetDescriptor+0x1e0>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008632:	691b      	ldr	r3, [r3, #16]
 8008634:	687a      	ldr	r2, [r7, #4]
 8008636:	7c12      	ldrb	r2, [r2, #16]
 8008638:	f107 0108 	add.w	r1, r7, #8
 800863c:	4610      	mov	r0, r2
 800863e:	4798      	blx	r3
 8008640:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008642:	e043      	b.n	80086cc <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8008644:	6839      	ldr	r1, [r7, #0]
 8008646:	6878      	ldr	r0, [r7, #4]
 8008648:	f000 fa5c 	bl	8008b04 <USBD_CtlError>
        err++;
 800864c:	7afb      	ldrb	r3, [r7, #11]
 800864e:	3301      	adds	r3, #1
 8008650:	72fb      	strb	r3, [r7, #11]
      break;
 8008652:	e03b      	b.n	80086cc <USBD_GetDescriptor+0x268>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800865a:	695b      	ldr	r3, [r3, #20]
 800865c:	2b00      	cmp	r3, #0
 800865e:	d00b      	beq.n	8008678 <USBD_GetDescriptor+0x214>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008666:	695b      	ldr	r3, [r3, #20]
 8008668:	687a      	ldr	r2, [r7, #4]
 800866a:	7c12      	ldrb	r2, [r2, #16]
 800866c:	f107 0108 	add.w	r1, r7, #8
 8008670:	4610      	mov	r0, r2
 8008672:	4798      	blx	r3
 8008674:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008676:	e029      	b.n	80086cc <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8008678:	6839      	ldr	r1, [r7, #0]
 800867a:	6878      	ldr	r0, [r7, #4]
 800867c:	f000 fa42 	bl	8008b04 <USBD_CtlError>
        err++;
 8008680:	7afb      	ldrb	r3, [r7, #11]
 8008682:	3301      	adds	r3, #1
 8008684:	72fb      	strb	r3, [r7, #11]
      break;
 8008686:	e021      	b.n	80086cc <USBD_GetDescriptor+0x268>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800868e:	699b      	ldr	r3, [r3, #24]
 8008690:	2b00      	cmp	r3, #0
 8008692:	d00b      	beq.n	80086ac <USBD_GetDescriptor+0x248>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800869a:	699b      	ldr	r3, [r3, #24]
 800869c:	687a      	ldr	r2, [r7, #4]
 800869e:	7c12      	ldrb	r2, [r2, #16]
 80086a0:	f107 0108 	add.w	r1, r7, #8
 80086a4:	4610      	mov	r0, r2
 80086a6:	4798      	blx	r3
 80086a8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80086aa:	e00f      	b.n	80086cc <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 80086ac:	6839      	ldr	r1, [r7, #0]
 80086ae:	6878      	ldr	r0, [r7, #4]
 80086b0:	f000 fa28 	bl	8008b04 <USBD_CtlError>
        err++;
 80086b4:	7afb      	ldrb	r3, [r7, #11]
 80086b6:	3301      	adds	r3, #1
 80086b8:	72fb      	strb	r3, [r7, #11]
      break;
 80086ba:	e007      	b.n	80086cc <USBD_GetDescriptor+0x268>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 80086bc:	6839      	ldr	r1, [r7, #0]
 80086be:	6878      	ldr	r0, [r7, #4]
 80086c0:	f000 fa20 	bl	8008b04 <USBD_CtlError>
      err++;
 80086c4:	7afb      	ldrb	r3, [r7, #11]
 80086c6:	3301      	adds	r3, #1
 80086c8:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 80086ca:	bf00      	nop
    }
    break;
 80086cc:	e037      	b.n	800873e <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	7c1b      	ldrb	r3, [r3, #16]
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d109      	bne.n	80086ea <USBD_GetDescriptor+0x286>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80086dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086de:	f107 0208 	add.w	r2, r7, #8
 80086e2:	4610      	mov	r0, r2
 80086e4:	4798      	blx	r3
 80086e6:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 80086e8:	e029      	b.n	800873e <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 80086ea:	6839      	ldr	r1, [r7, #0]
 80086ec:	6878      	ldr	r0, [r7, #4]
 80086ee:	f000 fa09 	bl	8008b04 <USBD_CtlError>
      err++;
 80086f2:	7afb      	ldrb	r3, [r7, #11]
 80086f4:	3301      	adds	r3, #1
 80086f6:	72fb      	strb	r3, [r7, #11]
    break;
 80086f8:	e021      	b.n	800873e <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	7c1b      	ldrb	r3, [r3, #16]
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d10d      	bne.n	800871e <USBD_GetDescriptor+0x2ba>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800870a:	f107 0208 	add.w	r2, r7, #8
 800870e:	4610      	mov	r0, r2
 8008710:	4798      	blx	r3
 8008712:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	3301      	adds	r3, #1
 8008718:	2207      	movs	r2, #7
 800871a:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800871c:	e00f      	b.n	800873e <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 800871e:	6839      	ldr	r1, [r7, #0]
 8008720:	6878      	ldr	r0, [r7, #4]
 8008722:	f000 f9ef 	bl	8008b04 <USBD_CtlError>
      err++;
 8008726:	7afb      	ldrb	r3, [r7, #11]
 8008728:	3301      	adds	r3, #1
 800872a:	72fb      	strb	r3, [r7, #11]
    break;
 800872c:	e007      	b.n	800873e <USBD_GetDescriptor+0x2da>

  default:
    USBD_CtlError(pdev, req);
 800872e:	6839      	ldr	r1, [r7, #0]
 8008730:	6878      	ldr	r0, [r7, #4]
 8008732:	f000 f9e7 	bl	8008b04 <USBD_CtlError>
    err++;
 8008736:	7afb      	ldrb	r3, [r7, #11]
 8008738:	3301      	adds	r3, #1
 800873a:	72fb      	strb	r3, [r7, #11]
    break;
 800873c:	bf00      	nop
  }

  if (err != 0U)
 800873e:	7afb      	ldrb	r3, [r7, #11]
 8008740:	2b00      	cmp	r3, #0
 8008742:	d11e      	bne.n	8008782 <USBD_GetDescriptor+0x31e>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8008744:	683b      	ldr	r3, [r7, #0]
 8008746:	88db      	ldrh	r3, [r3, #6]
 8008748:	2b00      	cmp	r3, #0
 800874a:	d016      	beq.n	800877a <USBD_GetDescriptor+0x316>
    {
      if (len != 0U)
 800874c:	893b      	ldrh	r3, [r7, #8]
 800874e:	2b00      	cmp	r3, #0
 8008750:	d00e      	beq.n	8008770 <USBD_GetDescriptor+0x30c>
      {
        len = MIN(len, req->wLength);
 8008752:	683b      	ldr	r3, [r7, #0]
 8008754:	88da      	ldrh	r2, [r3, #6]
 8008756:	893b      	ldrh	r3, [r7, #8]
 8008758:	4293      	cmp	r3, r2
 800875a:	bf28      	it	cs
 800875c:	4613      	movcs	r3, r2
 800875e:	b29b      	uxth	r3, r3
 8008760:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8008762:	893b      	ldrh	r3, [r7, #8]
 8008764:	461a      	mov	r2, r3
 8008766:	68f9      	ldr	r1, [r7, #12]
 8008768:	6878      	ldr	r0, [r7, #4]
 800876a:	f000 fa3c 	bl	8008be6 <USBD_CtlSendData>
 800876e:	e009      	b.n	8008784 <USBD_GetDescriptor+0x320>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8008770:	6839      	ldr	r1, [r7, #0]
 8008772:	6878      	ldr	r0, [r7, #4]
 8008774:	f000 f9c6 	bl	8008b04 <USBD_CtlError>
 8008778:	e004      	b.n	8008784 <USBD_GetDescriptor+0x320>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 800877a:	6878      	ldr	r0, [r7, #4]
 800877c:	f000 fa8d 	bl	8008c9a <USBD_CtlSendStatus>
 8008780:	e000      	b.n	8008784 <USBD_GetDescriptor+0x320>
    return;
 8008782:	bf00      	nop
    }
  }
}
 8008784:	3710      	adds	r7, #16
 8008786:	46bd      	mov	sp, r7
 8008788:	bd80      	pop	{r7, pc}
 800878a:	bf00      	nop

0800878c <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800878c:	b580      	push	{r7, lr}
 800878e:	b084      	sub	sp, #16
 8008790:	af00      	add	r7, sp, #0
 8008792:	6078      	str	r0, [r7, #4]
 8008794:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008796:	683b      	ldr	r3, [r7, #0]
 8008798:	889b      	ldrh	r3, [r3, #4]
 800879a:	2b00      	cmp	r3, #0
 800879c:	d130      	bne.n	8008800 <USBD_SetAddress+0x74>
 800879e:	683b      	ldr	r3, [r7, #0]
 80087a0:	88db      	ldrh	r3, [r3, #6]
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d12c      	bne.n	8008800 <USBD_SetAddress+0x74>
 80087a6:	683b      	ldr	r3, [r7, #0]
 80087a8:	885b      	ldrh	r3, [r3, #2]
 80087aa:	2b7f      	cmp	r3, #127	; 0x7f
 80087ac:	d828      	bhi.n	8008800 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80087ae:	683b      	ldr	r3, [r7, #0]
 80087b0:	885b      	ldrh	r3, [r3, #2]
 80087b2:	b2db      	uxtb	r3, r3
 80087b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80087b8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80087c0:	2b03      	cmp	r3, #3
 80087c2:	d104      	bne.n	80087ce <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80087c4:	6839      	ldr	r1, [r7, #0]
 80087c6:	6878      	ldr	r0, [r7, #4]
 80087c8:	f000 f99c 	bl	8008b04 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80087cc:	e01c      	b.n	8008808 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	7bfa      	ldrb	r2, [r7, #15]
 80087d2:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80087d6:	7bfb      	ldrb	r3, [r7, #15]
 80087d8:	4619      	mov	r1, r3
 80087da:	6878      	ldr	r0, [r7, #4]
 80087dc:	f000 fe87 	bl	80094ee <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80087e0:	6878      	ldr	r0, [r7, #4]
 80087e2:	f000 fa5a 	bl	8008c9a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80087e6:	7bfb      	ldrb	r3, [r7, #15]
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d004      	beq.n	80087f6 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	2202      	movs	r2, #2
 80087f0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80087f4:	e008      	b.n	8008808 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	2201      	movs	r2, #1
 80087fa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80087fe:	e003      	b.n	8008808 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008800:	6839      	ldr	r1, [r7, #0]
 8008802:	6878      	ldr	r0, [r7, #4]
 8008804:	f000 f97e 	bl	8008b04 <USBD_CtlError>
  }
}
 8008808:	bf00      	nop
 800880a:	3710      	adds	r7, #16
 800880c:	46bd      	mov	sp, r7
 800880e:	bd80      	pop	{r7, pc}

08008810 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008810:	b580      	push	{r7, lr}
 8008812:	b084      	sub	sp, #16
 8008814:	af00      	add	r7, sp, #0
 8008816:	6078      	str	r0, [r7, #4]
 8008818:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800881a:	2300      	movs	r3, #0
 800881c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800881e:	683b      	ldr	r3, [r7, #0]
 8008820:	885b      	ldrh	r3, [r3, #2]
 8008822:	b2da      	uxtb	r2, r3
 8008824:	4b4b      	ldr	r3, [pc, #300]	; (8008954 <USBD_SetConfig+0x144>)
 8008826:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008828:	4b4a      	ldr	r3, [pc, #296]	; (8008954 <USBD_SetConfig+0x144>)
 800882a:	781b      	ldrb	r3, [r3, #0]
 800882c:	2b01      	cmp	r3, #1
 800882e:	d905      	bls.n	800883c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008830:	6839      	ldr	r1, [r7, #0]
 8008832:	6878      	ldr	r0, [r7, #4]
 8008834:	f000 f966 	bl	8008b04 <USBD_CtlError>
    return USBD_FAIL;
 8008838:	2303      	movs	r3, #3
 800883a:	e087      	b.n	800894c <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008842:	2b02      	cmp	r3, #2
 8008844:	d002      	beq.n	800884c <USBD_SetConfig+0x3c>
 8008846:	2b03      	cmp	r3, #3
 8008848:	d025      	beq.n	8008896 <USBD_SetConfig+0x86>
 800884a:	e071      	b.n	8008930 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 800884c:	4b41      	ldr	r3, [pc, #260]	; (8008954 <USBD_SetConfig+0x144>)
 800884e:	781b      	ldrb	r3, [r3, #0]
 8008850:	2b00      	cmp	r3, #0
 8008852:	d01c      	beq.n	800888e <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8008854:	4b3f      	ldr	r3, [pc, #252]	; (8008954 <USBD_SetConfig+0x144>)
 8008856:	781b      	ldrb	r3, [r3, #0]
 8008858:	461a      	mov	r2, r3
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 800885e:	4b3d      	ldr	r3, [pc, #244]	; (8008954 <USBD_SetConfig+0x144>)
 8008860:	781b      	ldrb	r3, [r3, #0]
 8008862:	4619      	mov	r1, r3
 8008864:	6878      	ldr	r0, [r7, #4]
 8008866:	f7ff f9bd 	bl	8007be4 <USBD_SetClassConfig>
 800886a:	4603      	mov	r3, r0
 800886c:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 800886e:	7bfb      	ldrb	r3, [r7, #15]
 8008870:	2b00      	cmp	r3, #0
 8008872:	d004      	beq.n	800887e <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8008874:	6839      	ldr	r1, [r7, #0]
 8008876:	6878      	ldr	r0, [r7, #4]
 8008878:	f000 f944 	bl	8008b04 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800887c:	e065      	b.n	800894a <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800887e:	6878      	ldr	r0, [r7, #4]
 8008880:	f000 fa0b 	bl	8008c9a <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	2203      	movs	r2, #3
 8008888:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800888c:	e05d      	b.n	800894a <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800888e:	6878      	ldr	r0, [r7, #4]
 8008890:	f000 fa03 	bl	8008c9a <USBD_CtlSendStatus>
    break;
 8008894:	e059      	b.n	800894a <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 8008896:	4b2f      	ldr	r3, [pc, #188]	; (8008954 <USBD_SetConfig+0x144>)
 8008898:	781b      	ldrb	r3, [r3, #0]
 800889a:	2b00      	cmp	r3, #0
 800889c:	d112      	bne.n	80088c4 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	2202      	movs	r2, #2
 80088a2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 80088a6:	4b2b      	ldr	r3, [pc, #172]	; (8008954 <USBD_SetConfig+0x144>)
 80088a8:	781b      	ldrb	r3, [r3, #0]
 80088aa:	461a      	mov	r2, r3
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80088b0:	4b28      	ldr	r3, [pc, #160]	; (8008954 <USBD_SetConfig+0x144>)
 80088b2:	781b      	ldrb	r3, [r3, #0]
 80088b4:	4619      	mov	r1, r3
 80088b6:	6878      	ldr	r0, [r7, #4]
 80088b8:	f7ff f9b0 	bl	8007c1c <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 80088bc:	6878      	ldr	r0, [r7, #4]
 80088be:	f000 f9ec 	bl	8008c9a <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 80088c2:	e042      	b.n	800894a <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 80088c4:	4b23      	ldr	r3, [pc, #140]	; (8008954 <USBD_SetConfig+0x144>)
 80088c6:	781b      	ldrb	r3, [r3, #0]
 80088c8:	461a      	mov	r2, r3
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	685b      	ldr	r3, [r3, #4]
 80088ce:	429a      	cmp	r2, r3
 80088d0:	d02a      	beq.n	8008928 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	685b      	ldr	r3, [r3, #4]
 80088d6:	b2db      	uxtb	r3, r3
 80088d8:	4619      	mov	r1, r3
 80088da:	6878      	ldr	r0, [r7, #4]
 80088dc:	f7ff f99e 	bl	8007c1c <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 80088e0:	4b1c      	ldr	r3, [pc, #112]	; (8008954 <USBD_SetConfig+0x144>)
 80088e2:	781b      	ldrb	r3, [r3, #0]
 80088e4:	461a      	mov	r2, r3
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 80088ea:	4b1a      	ldr	r3, [pc, #104]	; (8008954 <USBD_SetConfig+0x144>)
 80088ec:	781b      	ldrb	r3, [r3, #0]
 80088ee:	4619      	mov	r1, r3
 80088f0:	6878      	ldr	r0, [r7, #4]
 80088f2:	f7ff f977 	bl	8007be4 <USBD_SetClassConfig>
 80088f6:	4603      	mov	r3, r0
 80088f8:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 80088fa:	7bfb      	ldrb	r3, [r7, #15]
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d00f      	beq.n	8008920 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8008900:	6839      	ldr	r1, [r7, #0]
 8008902:	6878      	ldr	r0, [r7, #4]
 8008904:	f000 f8fe 	bl	8008b04 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	685b      	ldr	r3, [r3, #4]
 800890c:	b2db      	uxtb	r3, r3
 800890e:	4619      	mov	r1, r3
 8008910:	6878      	ldr	r0, [r7, #4]
 8008912:	f7ff f983 	bl	8007c1c <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	2202      	movs	r2, #2
 800891a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800891e:	e014      	b.n	800894a <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8008920:	6878      	ldr	r0, [r7, #4]
 8008922:	f000 f9ba 	bl	8008c9a <USBD_CtlSendStatus>
    break;
 8008926:	e010      	b.n	800894a <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8008928:	6878      	ldr	r0, [r7, #4]
 800892a:	f000 f9b6 	bl	8008c9a <USBD_CtlSendStatus>
    break;
 800892e:	e00c      	b.n	800894a <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8008930:	6839      	ldr	r1, [r7, #0]
 8008932:	6878      	ldr	r0, [r7, #4]
 8008934:	f000 f8e6 	bl	8008b04 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008938:	4b06      	ldr	r3, [pc, #24]	; (8008954 <USBD_SetConfig+0x144>)
 800893a:	781b      	ldrb	r3, [r3, #0]
 800893c:	4619      	mov	r1, r3
 800893e:	6878      	ldr	r0, [r7, #4]
 8008940:	f7ff f96c 	bl	8007c1c <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8008944:	2303      	movs	r3, #3
 8008946:	73fb      	strb	r3, [r7, #15]
    break;
 8008948:	bf00      	nop
  }

  return ret;
 800894a:	7bfb      	ldrb	r3, [r7, #15]
}
 800894c:	4618      	mov	r0, r3
 800894e:	3710      	adds	r7, #16
 8008950:	46bd      	mov	sp, r7
 8008952:	bd80      	pop	{r7, pc}
 8008954:	200001ab 	.word	0x200001ab

08008958 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008958:	b580      	push	{r7, lr}
 800895a:	b082      	sub	sp, #8
 800895c:	af00      	add	r7, sp, #0
 800895e:	6078      	str	r0, [r7, #4]
 8008960:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008962:	683b      	ldr	r3, [r7, #0]
 8008964:	88db      	ldrh	r3, [r3, #6]
 8008966:	2b01      	cmp	r3, #1
 8008968:	d004      	beq.n	8008974 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800896a:	6839      	ldr	r1, [r7, #0]
 800896c:	6878      	ldr	r0, [r7, #4]
 800896e:	f000 f8c9 	bl	8008b04 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 8008972:	e021      	b.n	80089b8 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800897a:	2b01      	cmp	r3, #1
 800897c:	db17      	blt.n	80089ae <USBD_GetConfig+0x56>
 800897e:	2b02      	cmp	r3, #2
 8008980:	dd02      	ble.n	8008988 <USBD_GetConfig+0x30>
 8008982:	2b03      	cmp	r3, #3
 8008984:	d00b      	beq.n	800899e <USBD_GetConfig+0x46>
 8008986:	e012      	b.n	80089ae <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	2200      	movs	r2, #0
 800898c:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	3308      	adds	r3, #8
 8008992:	2201      	movs	r2, #1
 8008994:	4619      	mov	r1, r3
 8008996:	6878      	ldr	r0, [r7, #4]
 8008998:	f000 f925 	bl	8008be6 <USBD_CtlSendData>
      break;
 800899c:	e00c      	b.n	80089b8 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	3304      	adds	r3, #4
 80089a2:	2201      	movs	r2, #1
 80089a4:	4619      	mov	r1, r3
 80089a6:	6878      	ldr	r0, [r7, #4]
 80089a8:	f000 f91d 	bl	8008be6 <USBD_CtlSendData>
      break;
 80089ac:	e004      	b.n	80089b8 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 80089ae:	6839      	ldr	r1, [r7, #0]
 80089b0:	6878      	ldr	r0, [r7, #4]
 80089b2:	f000 f8a7 	bl	8008b04 <USBD_CtlError>
      break;
 80089b6:	bf00      	nop
}
 80089b8:	bf00      	nop
 80089ba:	3708      	adds	r7, #8
 80089bc:	46bd      	mov	sp, r7
 80089be:	bd80      	pop	{r7, pc}

080089c0 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80089c0:	b580      	push	{r7, lr}
 80089c2:	b082      	sub	sp, #8
 80089c4:	af00      	add	r7, sp, #0
 80089c6:	6078      	str	r0, [r7, #4]
 80089c8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80089d0:	3b01      	subs	r3, #1
 80089d2:	2b02      	cmp	r3, #2
 80089d4:	d81e      	bhi.n	8008a14 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 80089d6:	683b      	ldr	r3, [r7, #0]
 80089d8:	88db      	ldrh	r3, [r3, #6]
 80089da:	2b02      	cmp	r3, #2
 80089dc:	d004      	beq.n	80089e8 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 80089de:	6839      	ldr	r1, [r7, #0]
 80089e0:	6878      	ldr	r0, [r7, #4]
 80089e2:	f000 f88f 	bl	8008b04 <USBD_CtlError>
      break;
 80089e6:	e01a      	b.n	8008a1e <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	2201      	movs	r2, #1
 80089ec:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d005      	beq.n	8008a04 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	68db      	ldr	r3, [r3, #12]
 80089fc:	f043 0202 	orr.w	r2, r3, #2
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	330c      	adds	r3, #12
 8008a08:	2202      	movs	r2, #2
 8008a0a:	4619      	mov	r1, r3
 8008a0c:	6878      	ldr	r0, [r7, #4]
 8008a0e:	f000 f8ea 	bl	8008be6 <USBD_CtlSendData>
    break;
 8008a12:	e004      	b.n	8008a1e <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 8008a14:	6839      	ldr	r1, [r7, #0]
 8008a16:	6878      	ldr	r0, [r7, #4]
 8008a18:	f000 f874 	bl	8008b04 <USBD_CtlError>
    break;
 8008a1c:	bf00      	nop
  }
}
 8008a1e:	bf00      	nop
 8008a20:	3708      	adds	r7, #8
 8008a22:	46bd      	mov	sp, r7
 8008a24:	bd80      	pop	{r7, pc}

08008a26 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a26:	b580      	push	{r7, lr}
 8008a28:	b082      	sub	sp, #8
 8008a2a:	af00      	add	r7, sp, #0
 8008a2c:	6078      	str	r0, [r7, #4]
 8008a2e:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008a30:	683b      	ldr	r3, [r7, #0]
 8008a32:	885b      	ldrh	r3, [r3, #2]
 8008a34:	2b01      	cmp	r3, #1
 8008a36:	d106      	bne.n	8008a46 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	2201      	movs	r2, #1
 8008a3c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008a40:	6878      	ldr	r0, [r7, #4]
 8008a42:	f000 f92a 	bl	8008c9a <USBD_CtlSendStatus>
  }
}
 8008a46:	bf00      	nop
 8008a48:	3708      	adds	r7, #8
 8008a4a:	46bd      	mov	sp, r7
 8008a4c:	bd80      	pop	{r7, pc}

08008a4e <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a4e:	b580      	push	{r7, lr}
 8008a50:	b082      	sub	sp, #8
 8008a52:	af00      	add	r7, sp, #0
 8008a54:	6078      	str	r0, [r7, #4]
 8008a56:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a5e:	3b01      	subs	r3, #1
 8008a60:	2b02      	cmp	r3, #2
 8008a62:	d80b      	bhi.n	8008a7c <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008a64:	683b      	ldr	r3, [r7, #0]
 8008a66:	885b      	ldrh	r3, [r3, #2]
 8008a68:	2b01      	cmp	r3, #1
 8008a6a:	d10c      	bne.n	8008a86 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	2200      	movs	r2, #0
 8008a70:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008a74:	6878      	ldr	r0, [r7, #4]
 8008a76:	f000 f910 	bl	8008c9a <USBD_CtlSendStatus>
      }
      break;
 8008a7a:	e004      	b.n	8008a86 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8008a7c:	6839      	ldr	r1, [r7, #0]
 8008a7e:	6878      	ldr	r0, [r7, #4]
 8008a80:	f000 f840 	bl	8008b04 <USBD_CtlError>
      break;
 8008a84:	e000      	b.n	8008a88 <USBD_ClrFeature+0x3a>
      break;
 8008a86:	bf00      	nop
  }
}
 8008a88:	bf00      	nop
 8008a8a:	3708      	adds	r7, #8
 8008a8c:	46bd      	mov	sp, r7
 8008a8e:	bd80      	pop	{r7, pc}

08008a90 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008a90:	b580      	push	{r7, lr}
 8008a92:	b084      	sub	sp, #16
 8008a94:	af00      	add	r7, sp, #0
 8008a96:	6078      	str	r0, [r7, #4]
 8008a98:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008a9a:	683b      	ldr	r3, [r7, #0]
 8008a9c:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	781a      	ldrb	r2, [r3, #0]
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	3301      	adds	r3, #1
 8008aaa:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	781a      	ldrb	r2, [r3, #0]
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	3301      	adds	r3, #1
 8008ab8:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008aba:	68f8      	ldr	r0, [r7, #12]
 8008abc:	f7ff faa8 	bl	8008010 <SWAPBYTE>
 8008ac0:	4603      	mov	r3, r0
 8008ac2:	461a      	mov	r2, r3
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	3301      	adds	r3, #1
 8008acc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	3301      	adds	r3, #1
 8008ad2:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008ad4:	68f8      	ldr	r0, [r7, #12]
 8008ad6:	f7ff fa9b 	bl	8008010 <SWAPBYTE>
 8008ada:	4603      	mov	r3, r0
 8008adc:	461a      	mov	r2, r3
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	3301      	adds	r3, #1
 8008ae6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	3301      	adds	r3, #1
 8008aec:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008aee:	68f8      	ldr	r0, [r7, #12]
 8008af0:	f7ff fa8e 	bl	8008010 <SWAPBYTE>
 8008af4:	4603      	mov	r3, r0
 8008af6:	461a      	mov	r2, r3
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	80da      	strh	r2, [r3, #6]
}
 8008afc:	bf00      	nop
 8008afe:	3710      	adds	r7, #16
 8008b00:	46bd      	mov	sp, r7
 8008b02:	bd80      	pop	{r7, pc}

08008b04 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b04:	b580      	push	{r7, lr}
 8008b06:	b082      	sub	sp, #8
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	6078      	str	r0, [r7, #4]
 8008b0c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008b0e:	2180      	movs	r1, #128	; 0x80
 8008b10:	6878      	ldr	r0, [r7, #4]
 8008b12:	f000 fc81 	bl	8009418 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008b16:	2100      	movs	r1, #0
 8008b18:	6878      	ldr	r0, [r7, #4]
 8008b1a:	f000 fc7d 	bl	8009418 <USBD_LL_StallEP>
}
 8008b1e:	bf00      	nop
 8008b20:	3708      	adds	r7, #8
 8008b22:	46bd      	mov	sp, r7
 8008b24:	bd80      	pop	{r7, pc}

08008b26 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008b26:	b580      	push	{r7, lr}
 8008b28:	b086      	sub	sp, #24
 8008b2a:	af00      	add	r7, sp, #0
 8008b2c:	60f8      	str	r0, [r7, #12]
 8008b2e:	60b9      	str	r1, [r7, #8]
 8008b30:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008b32:	2300      	movs	r3, #0
 8008b34:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d036      	beq.n	8008baa <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008b40:	6938      	ldr	r0, [r7, #16]
 8008b42:	f000 f836 	bl	8008bb2 <USBD_GetLen>
 8008b46:	4603      	mov	r3, r0
 8008b48:	3301      	adds	r3, #1
 8008b4a:	b29b      	uxth	r3, r3
 8008b4c:	005b      	lsls	r3, r3, #1
 8008b4e:	b29a      	uxth	r2, r3
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008b54:	7dfb      	ldrb	r3, [r7, #23]
 8008b56:	68ba      	ldr	r2, [r7, #8]
 8008b58:	4413      	add	r3, r2
 8008b5a:	687a      	ldr	r2, [r7, #4]
 8008b5c:	7812      	ldrb	r2, [r2, #0]
 8008b5e:	701a      	strb	r2, [r3, #0]
  idx++;
 8008b60:	7dfb      	ldrb	r3, [r7, #23]
 8008b62:	3301      	adds	r3, #1
 8008b64:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008b66:	7dfb      	ldrb	r3, [r7, #23]
 8008b68:	68ba      	ldr	r2, [r7, #8]
 8008b6a:	4413      	add	r3, r2
 8008b6c:	2203      	movs	r2, #3
 8008b6e:	701a      	strb	r2, [r3, #0]
  idx++;
 8008b70:	7dfb      	ldrb	r3, [r7, #23]
 8008b72:	3301      	adds	r3, #1
 8008b74:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008b76:	e013      	b.n	8008ba0 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008b78:	7dfb      	ldrb	r3, [r7, #23]
 8008b7a:	68ba      	ldr	r2, [r7, #8]
 8008b7c:	4413      	add	r3, r2
 8008b7e:	693a      	ldr	r2, [r7, #16]
 8008b80:	7812      	ldrb	r2, [r2, #0]
 8008b82:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008b84:	693b      	ldr	r3, [r7, #16]
 8008b86:	3301      	adds	r3, #1
 8008b88:	613b      	str	r3, [r7, #16]
    idx++;
 8008b8a:	7dfb      	ldrb	r3, [r7, #23]
 8008b8c:	3301      	adds	r3, #1
 8008b8e:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008b90:	7dfb      	ldrb	r3, [r7, #23]
 8008b92:	68ba      	ldr	r2, [r7, #8]
 8008b94:	4413      	add	r3, r2
 8008b96:	2200      	movs	r2, #0
 8008b98:	701a      	strb	r2, [r3, #0]
    idx++;
 8008b9a:	7dfb      	ldrb	r3, [r7, #23]
 8008b9c:	3301      	adds	r3, #1
 8008b9e:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008ba0:	693b      	ldr	r3, [r7, #16]
 8008ba2:	781b      	ldrb	r3, [r3, #0]
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d1e7      	bne.n	8008b78 <USBD_GetString+0x52>
 8008ba8:	e000      	b.n	8008bac <USBD_GetString+0x86>
    return;
 8008baa:	bf00      	nop
  }
}
 8008bac:	3718      	adds	r7, #24
 8008bae:	46bd      	mov	sp, r7
 8008bb0:	bd80      	pop	{r7, pc}

08008bb2 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008bb2:	b480      	push	{r7}
 8008bb4:	b085      	sub	sp, #20
 8008bb6:	af00      	add	r7, sp, #0
 8008bb8:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008bba:	2300      	movs	r3, #0
 8008bbc:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008bc2:	e005      	b.n	8008bd0 <USBD_GetLen+0x1e>
  {
    len++;
 8008bc4:	7bfb      	ldrb	r3, [r7, #15]
 8008bc6:	3301      	adds	r3, #1
 8008bc8:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008bca:	68bb      	ldr	r3, [r7, #8]
 8008bcc:	3301      	adds	r3, #1
 8008bce:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008bd0:	68bb      	ldr	r3, [r7, #8]
 8008bd2:	781b      	ldrb	r3, [r3, #0]
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d1f5      	bne.n	8008bc4 <USBD_GetLen+0x12>
  }

  return len;
 8008bd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bda:	4618      	mov	r0, r3
 8008bdc:	3714      	adds	r7, #20
 8008bde:	46bd      	mov	sp, r7
 8008be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be4:	4770      	bx	lr

08008be6 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008be6:	b580      	push	{r7, lr}
 8008be8:	b084      	sub	sp, #16
 8008bea:	af00      	add	r7, sp, #0
 8008bec:	60f8      	str	r0, [r7, #12]
 8008bee:	60b9      	str	r1, [r7, #8]
 8008bf0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	2202      	movs	r2, #2
 8008bf6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	687a      	ldr	r2, [r7, #4]
 8008bfe:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	687a      	ldr	r2, [r7, #4]
 8008c04:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	68ba      	ldr	r2, [r7, #8]
 8008c0a:	2100      	movs	r1, #0
 8008c0c:	68f8      	ldr	r0, [r7, #12]
 8008c0e:	f000 fc8d 	bl	800952c <USBD_LL_Transmit>

  return USBD_OK;
 8008c12:	2300      	movs	r3, #0
}
 8008c14:	4618      	mov	r0, r3
 8008c16:	3710      	adds	r7, #16
 8008c18:	46bd      	mov	sp, r7
 8008c1a:	bd80      	pop	{r7, pc}

08008c1c <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008c1c:	b580      	push	{r7, lr}
 8008c1e:	b084      	sub	sp, #16
 8008c20:	af00      	add	r7, sp, #0
 8008c22:	60f8      	str	r0, [r7, #12]
 8008c24:	60b9      	str	r1, [r7, #8]
 8008c26:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	68ba      	ldr	r2, [r7, #8]
 8008c2c:	2100      	movs	r1, #0
 8008c2e:	68f8      	ldr	r0, [r7, #12]
 8008c30:	f000 fc7c 	bl	800952c <USBD_LL_Transmit>

  return USBD_OK;
 8008c34:	2300      	movs	r3, #0
}
 8008c36:	4618      	mov	r0, r3
 8008c38:	3710      	adds	r7, #16
 8008c3a:	46bd      	mov	sp, r7
 8008c3c:	bd80      	pop	{r7, pc}

08008c3e <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008c3e:	b580      	push	{r7, lr}
 8008c40:	b084      	sub	sp, #16
 8008c42:	af00      	add	r7, sp, #0
 8008c44:	60f8      	str	r0, [r7, #12]
 8008c46:	60b9      	str	r1, [r7, #8]
 8008c48:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	2203      	movs	r2, #3
 8008c4e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	687a      	ldr	r2, [r7, #4]
 8008c56:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	687a      	ldr	r2, [r7, #4]
 8008c5e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	68ba      	ldr	r2, [r7, #8]
 8008c66:	2100      	movs	r1, #0
 8008c68:	68f8      	ldr	r0, [r7, #12]
 8008c6a:	f000 fc80 	bl	800956e <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008c6e:	2300      	movs	r3, #0
}
 8008c70:	4618      	mov	r0, r3
 8008c72:	3710      	adds	r7, #16
 8008c74:	46bd      	mov	sp, r7
 8008c76:	bd80      	pop	{r7, pc}

08008c78 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008c78:	b580      	push	{r7, lr}
 8008c7a:	b084      	sub	sp, #16
 8008c7c:	af00      	add	r7, sp, #0
 8008c7e:	60f8      	str	r0, [r7, #12]
 8008c80:	60b9      	str	r1, [r7, #8]
 8008c82:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	68ba      	ldr	r2, [r7, #8]
 8008c88:	2100      	movs	r1, #0
 8008c8a:	68f8      	ldr	r0, [r7, #12]
 8008c8c:	f000 fc6f 	bl	800956e <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008c90:	2300      	movs	r3, #0
}
 8008c92:	4618      	mov	r0, r3
 8008c94:	3710      	adds	r7, #16
 8008c96:	46bd      	mov	sp, r7
 8008c98:	bd80      	pop	{r7, pc}

08008c9a <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008c9a:	b580      	push	{r7, lr}
 8008c9c:	b082      	sub	sp, #8
 8008c9e:	af00      	add	r7, sp, #0
 8008ca0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	2204      	movs	r2, #4
 8008ca6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008caa:	2300      	movs	r3, #0
 8008cac:	2200      	movs	r2, #0
 8008cae:	2100      	movs	r1, #0
 8008cb0:	6878      	ldr	r0, [r7, #4]
 8008cb2:	f000 fc3b 	bl	800952c <USBD_LL_Transmit>

  return USBD_OK;
 8008cb6:	2300      	movs	r3, #0
}
 8008cb8:	4618      	mov	r0, r3
 8008cba:	3708      	adds	r7, #8
 8008cbc:	46bd      	mov	sp, r7
 8008cbe:	bd80      	pop	{r7, pc}

08008cc0 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008cc0:	b580      	push	{r7, lr}
 8008cc2:	b082      	sub	sp, #8
 8008cc4:	af00      	add	r7, sp, #0
 8008cc6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	2205      	movs	r2, #5
 8008ccc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008cd0:	2300      	movs	r3, #0
 8008cd2:	2200      	movs	r2, #0
 8008cd4:	2100      	movs	r1, #0
 8008cd6:	6878      	ldr	r0, [r7, #4]
 8008cd8:	f000 fc49 	bl	800956e <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008cdc:	2300      	movs	r3, #0
}
 8008cde:	4618      	mov	r0, r3
 8008ce0:	3708      	adds	r7, #8
 8008ce2:	46bd      	mov	sp, r7
 8008ce4:	bd80      	pop	{r7, pc}
	...

08008ce8 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 8008ce8:	b580      	push	{r7, lr}
 8008cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 8008cec:	2200      	movs	r2, #0
 8008cee:	4912      	ldr	r1, [pc, #72]	; (8008d38 <MX_USB_Device_Init+0x50>)
 8008cf0:	4812      	ldr	r0, [pc, #72]	; (8008d3c <MX_USB_Device_Init+0x54>)
 8008cf2:	f7fe ff09 	bl	8007b08 <USBD_Init>
 8008cf6:	4603      	mov	r3, r0
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d001      	beq.n	8008d00 <MX_USB_Device_Init+0x18>
    Error_Handler();
 8008cfc:	f7f7 ff7e 	bl	8000bfc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 8008d00:	490f      	ldr	r1, [pc, #60]	; (8008d40 <MX_USB_Device_Init+0x58>)
 8008d02:	480e      	ldr	r0, [pc, #56]	; (8008d3c <MX_USB_Device_Init+0x54>)
 8008d04:	f7fe ff30 	bl	8007b68 <USBD_RegisterClass>
 8008d08:	4603      	mov	r3, r0
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d001      	beq.n	8008d12 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 8008d0e:	f7f7 ff75 	bl	8000bfc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 8008d12:	490c      	ldr	r1, [pc, #48]	; (8008d44 <MX_USB_Device_Init+0x5c>)
 8008d14:	4809      	ldr	r0, [pc, #36]	; (8008d3c <MX_USB_Device_Init+0x54>)
 8008d16:	f7fe fe5b 	bl	80079d0 <USBD_CDC_RegisterInterface>
 8008d1a:	4603      	mov	r3, r0
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d001      	beq.n	8008d24 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 8008d20:	f7f7 ff6c 	bl	8000bfc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 8008d24:	4805      	ldr	r0, [pc, #20]	; (8008d3c <MX_USB_Device_Init+0x54>)
 8008d26:	f7fe ff46 	bl	8007bb6 <USBD_Start>
 8008d2a:	4603      	mov	r3, r0
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d001      	beq.n	8008d34 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 8008d30:	f7f7 ff64 	bl	8000bfc <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 8008d34:	bf00      	nop
 8008d36:	bd80      	pop	{r7, pc}
 8008d38:	20000130 	.word	0x20000130
 8008d3c:	20000630 	.word	0x20000630
 8008d40:	20000018 	.word	0x20000018
 8008d44:	2000011c 	.word	0x2000011c

08008d48 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008d48:	b580      	push	{r7, lr}
 8008d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008d4c:	2200      	movs	r2, #0
 8008d4e:	4905      	ldr	r1, [pc, #20]	; (8008d64 <CDC_Init_FS+0x1c>)
 8008d50:	4805      	ldr	r0, [pc, #20]	; (8008d68 <CDC_Init_FS+0x20>)
 8008d52:	f7fe fe52 	bl	80079fa <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008d56:	4905      	ldr	r1, [pc, #20]	; (8008d6c <CDC_Init_FS+0x24>)
 8008d58:	4803      	ldr	r0, [pc, #12]	; (8008d68 <CDC_Init_FS+0x20>)
 8008d5a:	f7fe fe67 	bl	8007a2c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008d5e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008d60:	4618      	mov	r0, r3
 8008d62:	bd80      	pop	{r7, pc}
 8008d64:	20000ce8 	.word	0x20000ce8
 8008d68:	20000630 	.word	0x20000630
 8008d6c:	20000900 	.word	0x20000900

08008d70 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008d70:	b480      	push	{r7}
 8008d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008d74:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008d76:	4618      	mov	r0, r3
 8008d78:	46bd      	mov	sp, r7
 8008d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d7e:	4770      	bx	lr

08008d80 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008d80:	b480      	push	{r7}
 8008d82:	b083      	sub	sp, #12
 8008d84:	af00      	add	r7, sp, #0
 8008d86:	4603      	mov	r3, r0
 8008d88:	6039      	str	r1, [r7, #0]
 8008d8a:	71fb      	strb	r3, [r7, #7]
 8008d8c:	4613      	mov	r3, r2
 8008d8e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008d90:	79fb      	ldrb	r3, [r7, #7]
 8008d92:	2b23      	cmp	r3, #35	; 0x23
 8008d94:	d84a      	bhi.n	8008e2c <CDC_Control_FS+0xac>
 8008d96:	a201      	add	r2, pc, #4	; (adr r2, 8008d9c <CDC_Control_FS+0x1c>)
 8008d98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d9c:	08008e2d 	.word	0x08008e2d
 8008da0:	08008e2d 	.word	0x08008e2d
 8008da4:	08008e2d 	.word	0x08008e2d
 8008da8:	08008e2d 	.word	0x08008e2d
 8008dac:	08008e2d 	.word	0x08008e2d
 8008db0:	08008e2d 	.word	0x08008e2d
 8008db4:	08008e2d 	.word	0x08008e2d
 8008db8:	08008e2d 	.word	0x08008e2d
 8008dbc:	08008e2d 	.word	0x08008e2d
 8008dc0:	08008e2d 	.word	0x08008e2d
 8008dc4:	08008e2d 	.word	0x08008e2d
 8008dc8:	08008e2d 	.word	0x08008e2d
 8008dcc:	08008e2d 	.word	0x08008e2d
 8008dd0:	08008e2d 	.word	0x08008e2d
 8008dd4:	08008e2d 	.word	0x08008e2d
 8008dd8:	08008e2d 	.word	0x08008e2d
 8008ddc:	08008e2d 	.word	0x08008e2d
 8008de0:	08008e2d 	.word	0x08008e2d
 8008de4:	08008e2d 	.word	0x08008e2d
 8008de8:	08008e2d 	.word	0x08008e2d
 8008dec:	08008e2d 	.word	0x08008e2d
 8008df0:	08008e2d 	.word	0x08008e2d
 8008df4:	08008e2d 	.word	0x08008e2d
 8008df8:	08008e2d 	.word	0x08008e2d
 8008dfc:	08008e2d 	.word	0x08008e2d
 8008e00:	08008e2d 	.word	0x08008e2d
 8008e04:	08008e2d 	.word	0x08008e2d
 8008e08:	08008e2d 	.word	0x08008e2d
 8008e0c:	08008e2d 	.word	0x08008e2d
 8008e10:	08008e2d 	.word	0x08008e2d
 8008e14:	08008e2d 	.word	0x08008e2d
 8008e18:	08008e2d 	.word	0x08008e2d
 8008e1c:	08008e2d 	.word	0x08008e2d
 8008e20:	08008e2d 	.word	0x08008e2d
 8008e24:	08008e2d 	.word	0x08008e2d
 8008e28:	08008e2d 	.word	0x08008e2d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008e2c:	bf00      	nop
  }

  return (USBD_OK);
 8008e2e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008e30:	4618      	mov	r0, r3
 8008e32:	370c      	adds	r7, #12
 8008e34:	46bd      	mov	sp, r7
 8008e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e3a:	4770      	bx	lr

08008e3c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008e3c:	b580      	push	{r7, lr}
 8008e3e:	b082      	sub	sp, #8
 8008e40:	af00      	add	r7, sp, #0
 8008e42:	6078      	str	r0, [r7, #4]
 8008e44:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  CDC_On_Receive(Buf, Len); // (1)
 8008e46:	6839      	ldr	r1, [r7, #0]
 8008e48:	6878      	ldr	r0, [r7, #4]
 8008e4a:	f7f7 f9e5 	bl	8000218 <CDC_On_Receive>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008e4e:	6879      	ldr	r1, [r7, #4]
 8008e50:	4805      	ldr	r0, [pc, #20]	; (8008e68 <CDC_Receive_FS+0x2c>)
 8008e52:	f7fe fdeb 	bl	8007a2c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008e56:	4804      	ldr	r0, [pc, #16]	; (8008e68 <CDC_Receive_FS+0x2c>)
 8008e58:	f7fe fe2c 	bl	8007ab4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008e5c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008e5e:	4618      	mov	r0, r3
 8008e60:	3708      	adds	r7, #8
 8008e62:	46bd      	mov	sp, r7
 8008e64:	bd80      	pop	{r7, pc}
 8008e66:	bf00      	nop
 8008e68:	20000630 	.word	0x20000630

08008e6c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008e6c:	b580      	push	{r7, lr}
 8008e6e:	b084      	sub	sp, #16
 8008e70:	af00      	add	r7, sp, #0
 8008e72:	6078      	str	r0, [r7, #4]
 8008e74:	460b      	mov	r3, r1
 8008e76:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008e78:	2300      	movs	r3, #0
 8008e7a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008e7c:	4b0d      	ldr	r3, [pc, #52]	; (8008eb4 <CDC_Transmit_FS+0x48>)
 8008e7e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008e82:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008e84:	68bb      	ldr	r3, [r7, #8]
 8008e86:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d001      	beq.n	8008e92 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8008e8e:	2301      	movs	r3, #1
 8008e90:	e00b      	b.n	8008eaa <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008e92:	887b      	ldrh	r3, [r7, #2]
 8008e94:	461a      	mov	r2, r3
 8008e96:	6879      	ldr	r1, [r7, #4]
 8008e98:	4806      	ldr	r0, [pc, #24]	; (8008eb4 <CDC_Transmit_FS+0x48>)
 8008e9a:	f7fe fdae 	bl	80079fa <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008e9e:	4805      	ldr	r0, [pc, #20]	; (8008eb4 <CDC_Transmit_FS+0x48>)
 8008ea0:	f7fe fdd8 	bl	8007a54 <USBD_CDC_TransmitPacket>
 8008ea4:	4603      	mov	r3, r0
 8008ea6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008ea8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008eaa:	4618      	mov	r0, r3
 8008eac:	3710      	adds	r7, #16
 8008eae:	46bd      	mov	sp, r7
 8008eb0:	bd80      	pop	{r7, pc}
 8008eb2:	bf00      	nop
 8008eb4:	20000630 	.word	0x20000630

08008eb8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008eb8:	b480      	push	{r7}
 8008eba:	b087      	sub	sp, #28
 8008ebc:	af00      	add	r7, sp, #0
 8008ebe:	60f8      	str	r0, [r7, #12]
 8008ec0:	60b9      	str	r1, [r7, #8]
 8008ec2:	4613      	mov	r3, r2
 8008ec4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8008ec6:	2300      	movs	r3, #0
 8008ec8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8008eca:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008ece:	4618      	mov	r0, r3
 8008ed0:	371c      	adds	r7, #28
 8008ed2:	46bd      	mov	sp, r7
 8008ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed8:	4770      	bx	lr
	...

08008edc <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008edc:	b480      	push	{r7}
 8008ede:	b083      	sub	sp, #12
 8008ee0:	af00      	add	r7, sp, #0
 8008ee2:	4603      	mov	r3, r0
 8008ee4:	6039      	str	r1, [r7, #0]
 8008ee6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 8008ee8:	683b      	ldr	r3, [r7, #0]
 8008eea:	2212      	movs	r2, #18
 8008eec:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 8008eee:	4b03      	ldr	r3, [pc, #12]	; (8008efc <USBD_CDC_DeviceDescriptor+0x20>)
}
 8008ef0:	4618      	mov	r0, r3
 8008ef2:	370c      	adds	r7, #12
 8008ef4:	46bd      	mov	sp, r7
 8008ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008efa:	4770      	bx	lr
 8008efc:	20000150 	.word	0x20000150

08008f00 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008f00:	b480      	push	{r7}
 8008f02:	b083      	sub	sp, #12
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	4603      	mov	r3, r0
 8008f08:	6039      	str	r1, [r7, #0]
 8008f0a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008f0c:	683b      	ldr	r3, [r7, #0]
 8008f0e:	2204      	movs	r2, #4
 8008f10:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008f12:	4b03      	ldr	r3, [pc, #12]	; (8008f20 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 8008f14:	4618      	mov	r0, r3
 8008f16:	370c      	adds	r7, #12
 8008f18:	46bd      	mov	sp, r7
 8008f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f1e:	4770      	bx	lr
 8008f20:	20000164 	.word	0x20000164

08008f24 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008f24:	b580      	push	{r7, lr}
 8008f26:	b082      	sub	sp, #8
 8008f28:	af00      	add	r7, sp, #0
 8008f2a:	4603      	mov	r3, r0
 8008f2c:	6039      	str	r1, [r7, #0]
 8008f2e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008f30:	79fb      	ldrb	r3, [r7, #7]
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d105      	bne.n	8008f42 <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8008f36:	683a      	ldr	r2, [r7, #0]
 8008f38:	4907      	ldr	r1, [pc, #28]	; (8008f58 <USBD_CDC_ProductStrDescriptor+0x34>)
 8008f3a:	4808      	ldr	r0, [pc, #32]	; (8008f5c <USBD_CDC_ProductStrDescriptor+0x38>)
 8008f3c:	f7ff fdf3 	bl	8008b26 <USBD_GetString>
 8008f40:	e004      	b.n	8008f4c <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8008f42:	683a      	ldr	r2, [r7, #0]
 8008f44:	4904      	ldr	r1, [pc, #16]	; (8008f58 <USBD_CDC_ProductStrDescriptor+0x34>)
 8008f46:	4805      	ldr	r0, [pc, #20]	; (8008f5c <USBD_CDC_ProductStrDescriptor+0x38>)
 8008f48:	f7ff fded 	bl	8008b26 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008f4c:	4b02      	ldr	r3, [pc, #8]	; (8008f58 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 8008f4e:	4618      	mov	r0, r3
 8008f50:	3708      	adds	r7, #8
 8008f52:	46bd      	mov	sp, r7
 8008f54:	bd80      	pop	{r7, pc}
 8008f56:	bf00      	nop
 8008f58:	200010d0 	.word	0x200010d0
 8008f5c:	08009760 	.word	0x08009760

08008f60 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008f60:	b580      	push	{r7, lr}
 8008f62:	b082      	sub	sp, #8
 8008f64:	af00      	add	r7, sp, #0
 8008f66:	4603      	mov	r3, r0
 8008f68:	6039      	str	r1, [r7, #0]
 8008f6a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008f6c:	683a      	ldr	r2, [r7, #0]
 8008f6e:	4904      	ldr	r1, [pc, #16]	; (8008f80 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 8008f70:	4804      	ldr	r0, [pc, #16]	; (8008f84 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 8008f72:	f7ff fdd8 	bl	8008b26 <USBD_GetString>
  return USBD_StrDesc;
 8008f76:	4b02      	ldr	r3, [pc, #8]	; (8008f80 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 8008f78:	4618      	mov	r0, r3
 8008f7a:	3708      	adds	r7, #8
 8008f7c:	46bd      	mov	sp, r7
 8008f7e:	bd80      	pop	{r7, pc}
 8008f80:	200010d0 	.word	0x200010d0
 8008f84:	08009778 	.word	0x08009778

08008f88 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008f88:	b580      	push	{r7, lr}
 8008f8a:	b082      	sub	sp, #8
 8008f8c:	af00      	add	r7, sp, #0
 8008f8e:	4603      	mov	r3, r0
 8008f90:	6039      	str	r1, [r7, #0]
 8008f92:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008f94:	683b      	ldr	r3, [r7, #0]
 8008f96:	221a      	movs	r2, #26
 8008f98:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008f9a:	f000 f843 	bl	8009024 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8008f9e:	4b02      	ldr	r3, [pc, #8]	; (8008fa8 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 8008fa0:	4618      	mov	r0, r3
 8008fa2:	3708      	adds	r7, #8
 8008fa4:	46bd      	mov	sp, r7
 8008fa6:	bd80      	pop	{r7, pc}
 8008fa8:	20000168 	.word	0x20000168

08008fac <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008fac:	b580      	push	{r7, lr}
 8008fae:	b082      	sub	sp, #8
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	4603      	mov	r3, r0
 8008fb4:	6039      	str	r1, [r7, #0]
 8008fb6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008fb8:	79fb      	ldrb	r3, [r7, #7]
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d105      	bne.n	8008fca <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8008fbe:	683a      	ldr	r2, [r7, #0]
 8008fc0:	4907      	ldr	r1, [pc, #28]	; (8008fe0 <USBD_CDC_ConfigStrDescriptor+0x34>)
 8008fc2:	4808      	ldr	r0, [pc, #32]	; (8008fe4 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8008fc4:	f7ff fdaf 	bl	8008b26 <USBD_GetString>
 8008fc8:	e004      	b.n	8008fd4 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8008fca:	683a      	ldr	r2, [r7, #0]
 8008fcc:	4904      	ldr	r1, [pc, #16]	; (8008fe0 <USBD_CDC_ConfigStrDescriptor+0x34>)
 8008fce:	4805      	ldr	r0, [pc, #20]	; (8008fe4 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8008fd0:	f7ff fda9 	bl	8008b26 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008fd4:	4b02      	ldr	r3, [pc, #8]	; (8008fe0 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 8008fd6:	4618      	mov	r0, r3
 8008fd8:	3708      	adds	r7, #8
 8008fda:	46bd      	mov	sp, r7
 8008fdc:	bd80      	pop	{r7, pc}
 8008fde:	bf00      	nop
 8008fe0:	200010d0 	.word	0x200010d0
 8008fe4:	0800978c 	.word	0x0800978c

08008fe8 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008fe8:	b580      	push	{r7, lr}
 8008fea:	b082      	sub	sp, #8
 8008fec:	af00      	add	r7, sp, #0
 8008fee:	4603      	mov	r3, r0
 8008ff0:	6039      	str	r1, [r7, #0]
 8008ff2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008ff4:	79fb      	ldrb	r3, [r7, #7]
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d105      	bne.n	8009006 <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8008ffa:	683a      	ldr	r2, [r7, #0]
 8008ffc:	4907      	ldr	r1, [pc, #28]	; (800901c <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8008ffe:	4808      	ldr	r0, [pc, #32]	; (8009020 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8009000:	f7ff fd91 	bl	8008b26 <USBD_GetString>
 8009004:	e004      	b.n	8009010 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8009006:	683a      	ldr	r2, [r7, #0]
 8009008:	4904      	ldr	r1, [pc, #16]	; (800901c <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800900a:	4805      	ldr	r0, [pc, #20]	; (8009020 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800900c:	f7ff fd8b 	bl	8008b26 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009010:	4b02      	ldr	r3, [pc, #8]	; (800901c <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 8009012:	4618      	mov	r0, r3
 8009014:	3708      	adds	r7, #8
 8009016:	46bd      	mov	sp, r7
 8009018:	bd80      	pop	{r7, pc}
 800901a:	bf00      	nop
 800901c:	200010d0 	.word	0x200010d0
 8009020:	08009798 	.word	0x08009798

08009024 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009024:	b580      	push	{r7, lr}
 8009026:	b084      	sub	sp, #16
 8009028:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800902a:	4b0f      	ldr	r3, [pc, #60]	; (8009068 <Get_SerialNum+0x44>)
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009030:	4b0e      	ldr	r3, [pc, #56]	; (800906c <Get_SerialNum+0x48>)
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009036:	4b0e      	ldr	r3, [pc, #56]	; (8009070 <Get_SerialNum+0x4c>)
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800903c:	68fa      	ldr	r2, [r7, #12]
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	4413      	add	r3, r2
 8009042:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	2b00      	cmp	r3, #0
 8009048:	d009      	beq.n	800905e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800904a:	2208      	movs	r2, #8
 800904c:	4909      	ldr	r1, [pc, #36]	; (8009074 <Get_SerialNum+0x50>)
 800904e:	68f8      	ldr	r0, [r7, #12]
 8009050:	f000 f814 	bl	800907c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009054:	2204      	movs	r2, #4
 8009056:	4908      	ldr	r1, [pc, #32]	; (8009078 <Get_SerialNum+0x54>)
 8009058:	68b8      	ldr	r0, [r7, #8]
 800905a:	f000 f80f 	bl	800907c <IntToUnicode>
  }
}
 800905e:	bf00      	nop
 8009060:	3710      	adds	r7, #16
 8009062:	46bd      	mov	sp, r7
 8009064:	bd80      	pop	{r7, pc}
 8009066:	bf00      	nop
 8009068:	1fff7590 	.word	0x1fff7590
 800906c:	1fff7594 	.word	0x1fff7594
 8009070:	1fff7598 	.word	0x1fff7598
 8009074:	2000016a 	.word	0x2000016a
 8009078:	2000017a 	.word	0x2000017a

0800907c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800907c:	b480      	push	{r7}
 800907e:	b087      	sub	sp, #28
 8009080:	af00      	add	r7, sp, #0
 8009082:	60f8      	str	r0, [r7, #12]
 8009084:	60b9      	str	r1, [r7, #8]
 8009086:	4613      	mov	r3, r2
 8009088:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800908a:	2300      	movs	r3, #0
 800908c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800908e:	2300      	movs	r3, #0
 8009090:	75fb      	strb	r3, [r7, #23]
 8009092:	e027      	b.n	80090e4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	0f1b      	lsrs	r3, r3, #28
 8009098:	2b09      	cmp	r3, #9
 800909a:	d80b      	bhi.n	80090b4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	0f1b      	lsrs	r3, r3, #28
 80090a0:	b2da      	uxtb	r2, r3
 80090a2:	7dfb      	ldrb	r3, [r7, #23]
 80090a4:	005b      	lsls	r3, r3, #1
 80090a6:	4619      	mov	r1, r3
 80090a8:	68bb      	ldr	r3, [r7, #8]
 80090aa:	440b      	add	r3, r1
 80090ac:	3230      	adds	r2, #48	; 0x30
 80090ae:	b2d2      	uxtb	r2, r2
 80090b0:	701a      	strb	r2, [r3, #0]
 80090b2:	e00a      	b.n	80090ca <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	0f1b      	lsrs	r3, r3, #28
 80090b8:	b2da      	uxtb	r2, r3
 80090ba:	7dfb      	ldrb	r3, [r7, #23]
 80090bc:	005b      	lsls	r3, r3, #1
 80090be:	4619      	mov	r1, r3
 80090c0:	68bb      	ldr	r3, [r7, #8]
 80090c2:	440b      	add	r3, r1
 80090c4:	3237      	adds	r2, #55	; 0x37
 80090c6:	b2d2      	uxtb	r2, r2
 80090c8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	011b      	lsls	r3, r3, #4
 80090ce:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80090d0:	7dfb      	ldrb	r3, [r7, #23]
 80090d2:	005b      	lsls	r3, r3, #1
 80090d4:	3301      	adds	r3, #1
 80090d6:	68ba      	ldr	r2, [r7, #8]
 80090d8:	4413      	add	r3, r2
 80090da:	2200      	movs	r2, #0
 80090dc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80090de:	7dfb      	ldrb	r3, [r7, #23]
 80090e0:	3301      	adds	r3, #1
 80090e2:	75fb      	strb	r3, [r7, #23]
 80090e4:	7dfa      	ldrb	r2, [r7, #23]
 80090e6:	79fb      	ldrb	r3, [r7, #7]
 80090e8:	429a      	cmp	r2, r3
 80090ea:	d3d3      	bcc.n	8009094 <IntToUnicode+0x18>
  }
}
 80090ec:	bf00      	nop
 80090ee:	371c      	adds	r7, #28
 80090f0:	46bd      	mov	sp, r7
 80090f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f6:	4770      	bx	lr

080090f8 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACK == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACK */
{
 80090f8:	b580      	push	{r7, lr}
 80090fa:	b084      	sub	sp, #16
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	4a0d      	ldr	r2, [pc, #52]	; (800913c <HAL_PCD_MspInit+0x44>)
 8009106:	4293      	cmp	r3, r2
 8009108:	d113      	bne.n	8009132 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800910a:	4b0d      	ldr	r3, [pc, #52]	; (8009140 <HAL_PCD_MspInit+0x48>)
 800910c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800910e:	4a0c      	ldr	r2, [pc, #48]	; (8009140 <HAL_PCD_MspInit+0x48>)
 8009110:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009114:	6593      	str	r3, [r2, #88]	; 0x58
 8009116:	4b0a      	ldr	r3, [pc, #40]	; (8009140 <HAL_PCD_MspInit+0x48>)
 8009118:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800911a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800911e:	60fb      	str	r3, [r7, #12]
 8009120:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 8009122:	2200      	movs	r2, #0
 8009124:	2100      	movs	r1, #0
 8009126:	2014      	movs	r0, #20
 8009128:	f7f8 f92b 	bl	8001382 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800912c:	2014      	movs	r0, #20
 800912e:	f7f8 f942 	bl	80013b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8009132:	bf00      	nop
 8009134:	3710      	adds	r7, #16
 8009136:	46bd      	mov	sp, r7
 8009138:	bd80      	pop	{r7, pc}
 800913a:	bf00      	nop
 800913c:	40005c00 	.word	0x40005c00
 8009140:	40021000 	.word	0x40021000

08009144 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009144:	b580      	push	{r7, lr}
 8009146:	b082      	sub	sp, #8
 8009148:	af00      	add	r7, sp, #0
 800914a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	f8d3 22f0 	ldr.w	r2, [r3, #752]	; 0x2f0
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8009158:	4619      	mov	r1, r3
 800915a:	4610      	mov	r0, r2
 800915c:	f7fe fd76 	bl	8007c4c <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 8009160:	bf00      	nop
 8009162:	3708      	adds	r7, #8
 8009164:	46bd      	mov	sp, r7
 8009166:	bd80      	pop	{r7, pc}

08009168 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009168:	b580      	push	{r7, lr}
 800916a:	b082      	sub	sp, #8
 800916c:	af00      	add	r7, sp, #0
 800916e:	6078      	str	r0, [r7, #4]
 8009170:	460b      	mov	r3, r1
 8009172:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 800917a:	78fa      	ldrb	r2, [r7, #3]
 800917c:	6879      	ldr	r1, [r7, #4]
 800917e:	4613      	mov	r3, r2
 8009180:	009b      	lsls	r3, r3, #2
 8009182:	4413      	add	r3, r2
 8009184:	00db      	lsls	r3, r3, #3
 8009186:	440b      	add	r3, r1
 8009188:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800918c:	681a      	ldr	r2, [r3, #0]
 800918e:	78fb      	ldrb	r3, [r7, #3]
 8009190:	4619      	mov	r1, r3
 8009192:	f7fe fdae 	bl	8007cf2 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 8009196:	bf00      	nop
 8009198:	3708      	adds	r7, #8
 800919a:	46bd      	mov	sp, r7
 800919c:	bd80      	pop	{r7, pc}

0800919e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800919e:	b580      	push	{r7, lr}
 80091a0:	b082      	sub	sp, #8
 80091a2:	af00      	add	r7, sp, #0
 80091a4:	6078      	str	r0, [r7, #4]
 80091a6:	460b      	mov	r3, r1
 80091a8:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 80091b0:	78fa      	ldrb	r2, [r7, #3]
 80091b2:	6879      	ldr	r1, [r7, #4]
 80091b4:	4613      	mov	r3, r2
 80091b6:	009b      	lsls	r3, r3, #2
 80091b8:	4413      	add	r3, r2
 80091ba:	00db      	lsls	r3, r3, #3
 80091bc:	440b      	add	r3, r1
 80091be:	333c      	adds	r3, #60	; 0x3c
 80091c0:	681a      	ldr	r2, [r3, #0]
 80091c2:	78fb      	ldrb	r3, [r7, #3]
 80091c4:	4619      	mov	r1, r3
 80091c6:	f7fe fdf7 	bl	8007db8 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 80091ca:	bf00      	nop
 80091cc:	3708      	adds	r7, #8
 80091ce:	46bd      	mov	sp, r7
 80091d0:	bd80      	pop	{r7, pc}

080091d2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80091d2:	b580      	push	{r7, lr}
 80091d4:	b082      	sub	sp, #8
 80091d6:	af00      	add	r7, sp, #0
 80091d8:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 80091e0:	4618      	mov	r0, r3
 80091e2:	f7fe fefb 	bl	8007fdc <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 80091e6:	bf00      	nop
 80091e8:	3708      	adds	r7, #8
 80091ea:	46bd      	mov	sp, r7
 80091ec:	bd80      	pop	{r7, pc}

080091ee <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80091ee:	b580      	push	{r7, lr}
 80091f0:	b084      	sub	sp, #16
 80091f2:	af00      	add	r7, sp, #0
 80091f4:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80091f6:	2301      	movs	r3, #1
 80091f8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	689b      	ldr	r3, [r3, #8]
 80091fe:	2b02      	cmp	r3, #2
 8009200:	d001      	beq.n	8009206 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009202:	f7f7 fcfb 	bl	8000bfc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800920c:	7bfa      	ldrb	r2, [r7, #15]
 800920e:	4611      	mov	r1, r2
 8009210:	4618      	mov	r0, r3
 8009212:	f7fe fea8 	bl	8007f66 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800921c:	4618      	mov	r0, r3
 800921e:	f7fe fe61 	bl	8007ee4 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 8009222:	bf00      	nop
 8009224:	3710      	adds	r7, #16
 8009226:	46bd      	mov	sp, r7
 8009228:	bd80      	pop	{r7, pc}
	...

0800922c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800922c:	b580      	push	{r7, lr}
 800922e:	b082      	sub	sp, #8
 8009230:	af00      	add	r7, sp, #0
 8009232:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800923a:	4618      	mov	r0, r3
 800923c:	f7fe fea3 	bl	8007f86 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	699b      	ldr	r3, [r3, #24]
 8009244:	2b00      	cmp	r3, #0
 8009246:	d005      	beq.n	8009254 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009248:	4b04      	ldr	r3, [pc, #16]	; (800925c <HAL_PCD_SuspendCallback+0x30>)
 800924a:	691b      	ldr	r3, [r3, #16]
 800924c:	4a03      	ldr	r2, [pc, #12]	; (800925c <HAL_PCD_SuspendCallback+0x30>)
 800924e:	f043 0306 	orr.w	r3, r3, #6
 8009252:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 8009254:	bf00      	nop
 8009256:	3708      	adds	r7, #8
 8009258:	46bd      	mov	sp, r7
 800925a:	bd80      	pop	{r7, pc}
 800925c:	e000ed00 	.word	0xe000ed00

08009260 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009260:	b580      	push	{r7, lr}
 8009262:	b082      	sub	sp, #8
 8009264:	af00      	add	r7, sp, #0
 8009266:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	699b      	ldr	r3, [r3, #24]
 800926c:	2b00      	cmp	r3, #0
 800926e:	d007      	beq.n	8009280 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009270:	4b08      	ldr	r3, [pc, #32]	; (8009294 <HAL_PCD_ResumeCallback+0x34>)
 8009272:	691b      	ldr	r3, [r3, #16]
 8009274:	4a07      	ldr	r2, [pc, #28]	; (8009294 <HAL_PCD_ResumeCallback+0x34>)
 8009276:	f023 0306 	bic.w	r3, r3, #6
 800927a:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800927c:	f000 f9fa 	bl	8009674 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009286:	4618      	mov	r0, r3
 8009288:	f7fe fe92 	bl	8007fb0 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800928c:	bf00      	nop
 800928e:	3708      	adds	r7, #8
 8009290:	46bd      	mov	sp, r7
 8009292:	bd80      	pop	{r7, pc}
 8009294:	e000ed00 	.word	0xe000ed00

08009298 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009298:	b580      	push	{r7, lr}
 800929a:	b082      	sub	sp, #8
 800929c:	af00      	add	r7, sp, #0
 800929e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 80092a0:	4a2b      	ldr	r2, [pc, #172]	; (8009350 <USBD_LL_Init+0xb8>)
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	4a29      	ldr	r2, [pc, #164]	; (8009350 <USBD_LL_Init+0xb8>)
 80092ac:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 80092b0:	4b27      	ldr	r3, [pc, #156]	; (8009350 <USBD_LL_Init+0xb8>)
 80092b2:	4a28      	ldr	r2, [pc, #160]	; (8009354 <USBD_LL_Init+0xbc>)
 80092b4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80092b6:	4b26      	ldr	r3, [pc, #152]	; (8009350 <USBD_LL_Init+0xb8>)
 80092b8:	2208      	movs	r2, #8
 80092ba:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80092bc:	4b24      	ldr	r3, [pc, #144]	; (8009350 <USBD_LL_Init+0xb8>)
 80092be:	2202      	movs	r2, #2
 80092c0:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80092c2:	4b23      	ldr	r3, [pc, #140]	; (8009350 <USBD_LL_Init+0xb8>)
 80092c4:	2202      	movs	r2, #2
 80092c6:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 80092c8:	4b21      	ldr	r3, [pc, #132]	; (8009350 <USBD_LL_Init+0xb8>)
 80092ca:	2200      	movs	r2, #0
 80092cc:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80092ce:	4b20      	ldr	r3, [pc, #128]	; (8009350 <USBD_LL_Init+0xb8>)
 80092d0:	2200      	movs	r2, #0
 80092d2:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80092d4:	4b1e      	ldr	r3, [pc, #120]	; (8009350 <USBD_LL_Init+0xb8>)
 80092d6:	2200      	movs	r2, #0
 80092d8:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80092da:	4b1d      	ldr	r3, [pc, #116]	; (8009350 <USBD_LL_Init+0xb8>)
 80092dc:	2200      	movs	r2, #0
 80092de:	621a      	str	r2, [r3, #32]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80092e0:	481b      	ldr	r0, [pc, #108]	; (8009350 <USBD_LL_Init+0xb8>)
 80092e2:	f7f8 fa37 	bl	8001754 <HAL_PCD_Init>
 80092e6:	4603      	mov	r3, r0
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d001      	beq.n	80092f0 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 80092ec:	f7f7 fc86 	bl	8000bfc <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80092f6:	2318      	movs	r3, #24
 80092f8:	2200      	movs	r2, #0
 80092fa:	2100      	movs	r1, #0
 80092fc:	f7f9 fd25 	bl	8002d4a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009306:	2358      	movs	r3, #88	; 0x58
 8009308:	2200      	movs	r2, #0
 800930a:	2180      	movs	r1, #128	; 0x80
 800930c:	f7f9 fd1d 	bl	8002d4a <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009316:	23c0      	movs	r3, #192	; 0xc0
 8009318:	2200      	movs	r2, #0
 800931a:	2181      	movs	r1, #129	; 0x81
 800931c:	f7f9 fd15 	bl	8002d4a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009326:	f44f 7388 	mov.w	r3, #272	; 0x110
 800932a:	2200      	movs	r2, #0
 800932c:	2101      	movs	r1, #1
 800932e:	f7f9 fd0c 	bl	8002d4a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009338:	f44f 7380 	mov.w	r3, #256	; 0x100
 800933c:	2200      	movs	r2, #0
 800933e:	2182      	movs	r1, #130	; 0x82
 8009340:	f7f9 fd03 	bl	8002d4a <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8009344:	2300      	movs	r3, #0
}
 8009346:	4618      	mov	r0, r3
 8009348:	3708      	adds	r7, #8
 800934a:	46bd      	mov	sp, r7
 800934c:	bd80      	pop	{r7, pc}
 800934e:	bf00      	nop
 8009350:	200012d0 	.word	0x200012d0
 8009354:	40005c00 	.word	0x40005c00

08009358 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009358:	b580      	push	{r7, lr}
 800935a:	b084      	sub	sp, #16
 800935c:	af00      	add	r7, sp, #0
 800935e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009360:	2300      	movs	r3, #0
 8009362:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009364:	2300      	movs	r3, #0
 8009366:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800936e:	4618      	mov	r0, r3
 8009370:	f7f8 fad5 	bl	800191e <HAL_PCD_Start>
 8009374:	4603      	mov	r3, r0
 8009376:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009378:	7bfb      	ldrb	r3, [r7, #15]
 800937a:	4618      	mov	r0, r3
 800937c:	f000 f980 	bl	8009680 <USBD_Get_USB_Status>
 8009380:	4603      	mov	r3, r0
 8009382:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009384:	7bbb      	ldrb	r3, [r7, #14]
}
 8009386:	4618      	mov	r0, r3
 8009388:	3710      	adds	r7, #16
 800938a:	46bd      	mov	sp, r7
 800938c:	bd80      	pop	{r7, pc}

0800938e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800938e:	b580      	push	{r7, lr}
 8009390:	b084      	sub	sp, #16
 8009392:	af00      	add	r7, sp, #0
 8009394:	6078      	str	r0, [r7, #4]
 8009396:	4608      	mov	r0, r1
 8009398:	4611      	mov	r1, r2
 800939a:	461a      	mov	r2, r3
 800939c:	4603      	mov	r3, r0
 800939e:	70fb      	strb	r3, [r7, #3]
 80093a0:	460b      	mov	r3, r1
 80093a2:	70bb      	strb	r3, [r7, #2]
 80093a4:	4613      	mov	r3, r2
 80093a6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80093a8:	2300      	movs	r3, #0
 80093aa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80093ac:	2300      	movs	r3, #0
 80093ae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80093b6:	78bb      	ldrb	r3, [r7, #2]
 80093b8:	883a      	ldrh	r2, [r7, #0]
 80093ba:	78f9      	ldrb	r1, [r7, #3]
 80093bc:	f7f8 fc44 	bl	8001c48 <HAL_PCD_EP_Open>
 80093c0:	4603      	mov	r3, r0
 80093c2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80093c4:	7bfb      	ldrb	r3, [r7, #15]
 80093c6:	4618      	mov	r0, r3
 80093c8:	f000 f95a 	bl	8009680 <USBD_Get_USB_Status>
 80093cc:	4603      	mov	r3, r0
 80093ce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80093d0:	7bbb      	ldrb	r3, [r7, #14]
}
 80093d2:	4618      	mov	r0, r3
 80093d4:	3710      	adds	r7, #16
 80093d6:	46bd      	mov	sp, r7
 80093d8:	bd80      	pop	{r7, pc}

080093da <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80093da:	b580      	push	{r7, lr}
 80093dc:	b084      	sub	sp, #16
 80093de:	af00      	add	r7, sp, #0
 80093e0:	6078      	str	r0, [r7, #4]
 80093e2:	460b      	mov	r3, r1
 80093e4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80093e6:	2300      	movs	r3, #0
 80093e8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80093ea:	2300      	movs	r3, #0
 80093ec:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80093f4:	78fa      	ldrb	r2, [r7, #3]
 80093f6:	4611      	mov	r1, r2
 80093f8:	4618      	mov	r0, r3
 80093fa:	f7f8 fc8b 	bl	8001d14 <HAL_PCD_EP_Close>
 80093fe:	4603      	mov	r3, r0
 8009400:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009402:	7bfb      	ldrb	r3, [r7, #15]
 8009404:	4618      	mov	r0, r3
 8009406:	f000 f93b 	bl	8009680 <USBD_Get_USB_Status>
 800940a:	4603      	mov	r3, r0
 800940c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800940e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009410:	4618      	mov	r0, r3
 8009412:	3710      	adds	r7, #16
 8009414:	46bd      	mov	sp, r7
 8009416:	bd80      	pop	{r7, pc}

08009418 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009418:	b580      	push	{r7, lr}
 800941a:	b084      	sub	sp, #16
 800941c:	af00      	add	r7, sp, #0
 800941e:	6078      	str	r0, [r7, #4]
 8009420:	460b      	mov	r3, r1
 8009422:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009424:	2300      	movs	r3, #0
 8009426:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009428:	2300      	movs	r3, #0
 800942a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009432:	78fa      	ldrb	r2, [r7, #3]
 8009434:	4611      	mov	r1, r2
 8009436:	4618      	mov	r0, r3
 8009438:	f7f8 fd4c 	bl	8001ed4 <HAL_PCD_EP_SetStall>
 800943c:	4603      	mov	r3, r0
 800943e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009440:	7bfb      	ldrb	r3, [r7, #15]
 8009442:	4618      	mov	r0, r3
 8009444:	f000 f91c 	bl	8009680 <USBD_Get_USB_Status>
 8009448:	4603      	mov	r3, r0
 800944a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800944c:	7bbb      	ldrb	r3, [r7, #14]
}
 800944e:	4618      	mov	r0, r3
 8009450:	3710      	adds	r7, #16
 8009452:	46bd      	mov	sp, r7
 8009454:	bd80      	pop	{r7, pc}

08009456 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009456:	b580      	push	{r7, lr}
 8009458:	b084      	sub	sp, #16
 800945a:	af00      	add	r7, sp, #0
 800945c:	6078      	str	r0, [r7, #4]
 800945e:	460b      	mov	r3, r1
 8009460:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009462:	2300      	movs	r3, #0
 8009464:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009466:	2300      	movs	r3, #0
 8009468:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009470:	78fa      	ldrb	r2, [r7, #3]
 8009472:	4611      	mov	r1, r2
 8009474:	4618      	mov	r0, r3
 8009476:	f7f8 fd8d 	bl	8001f94 <HAL_PCD_EP_ClrStall>
 800947a:	4603      	mov	r3, r0
 800947c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800947e:	7bfb      	ldrb	r3, [r7, #15]
 8009480:	4618      	mov	r0, r3
 8009482:	f000 f8fd 	bl	8009680 <USBD_Get_USB_Status>
 8009486:	4603      	mov	r3, r0
 8009488:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800948a:	7bbb      	ldrb	r3, [r7, #14]
}
 800948c:	4618      	mov	r0, r3
 800948e:	3710      	adds	r7, #16
 8009490:	46bd      	mov	sp, r7
 8009492:	bd80      	pop	{r7, pc}

08009494 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009494:	b480      	push	{r7}
 8009496:	b085      	sub	sp, #20
 8009498:	af00      	add	r7, sp, #0
 800949a:	6078      	str	r0, [r7, #4]
 800949c:	460b      	mov	r3, r1
 800949e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80094a6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80094a8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	da0c      	bge.n	80094ca <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80094b0:	78fb      	ldrb	r3, [r7, #3]
 80094b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80094b6:	68f9      	ldr	r1, [r7, #12]
 80094b8:	1c5a      	adds	r2, r3, #1
 80094ba:	4613      	mov	r3, r2
 80094bc:	009b      	lsls	r3, r3, #2
 80094be:	4413      	add	r3, r2
 80094c0:	00db      	lsls	r3, r3, #3
 80094c2:	440b      	add	r3, r1
 80094c4:	3302      	adds	r3, #2
 80094c6:	781b      	ldrb	r3, [r3, #0]
 80094c8:	e00b      	b.n	80094e2 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80094ca:	78fb      	ldrb	r3, [r7, #3]
 80094cc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80094d0:	68f9      	ldr	r1, [r7, #12]
 80094d2:	4613      	mov	r3, r2
 80094d4:	009b      	lsls	r3, r3, #2
 80094d6:	4413      	add	r3, r2
 80094d8:	00db      	lsls	r3, r3, #3
 80094da:	440b      	add	r3, r1
 80094dc:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 80094e0:	781b      	ldrb	r3, [r3, #0]
  }
}
 80094e2:	4618      	mov	r0, r3
 80094e4:	3714      	adds	r7, #20
 80094e6:	46bd      	mov	sp, r7
 80094e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ec:	4770      	bx	lr

080094ee <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80094ee:	b580      	push	{r7, lr}
 80094f0:	b084      	sub	sp, #16
 80094f2:	af00      	add	r7, sp, #0
 80094f4:	6078      	str	r0, [r7, #4]
 80094f6:	460b      	mov	r3, r1
 80094f8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80094fa:	2300      	movs	r3, #0
 80094fc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80094fe:	2300      	movs	r3, #0
 8009500:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009508:	78fa      	ldrb	r2, [r7, #3]
 800950a:	4611      	mov	r1, r2
 800950c:	4618      	mov	r0, r3
 800950e:	f7f8 fb76 	bl	8001bfe <HAL_PCD_SetAddress>
 8009512:	4603      	mov	r3, r0
 8009514:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009516:	7bfb      	ldrb	r3, [r7, #15]
 8009518:	4618      	mov	r0, r3
 800951a:	f000 f8b1 	bl	8009680 <USBD_Get_USB_Status>
 800951e:	4603      	mov	r3, r0
 8009520:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009522:	7bbb      	ldrb	r3, [r7, #14]
}
 8009524:	4618      	mov	r0, r3
 8009526:	3710      	adds	r7, #16
 8009528:	46bd      	mov	sp, r7
 800952a:	bd80      	pop	{r7, pc}

0800952c <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800952c:	b580      	push	{r7, lr}
 800952e:	b086      	sub	sp, #24
 8009530:	af00      	add	r7, sp, #0
 8009532:	60f8      	str	r0, [r7, #12]
 8009534:	607a      	str	r2, [r7, #4]
 8009536:	603b      	str	r3, [r7, #0]
 8009538:	460b      	mov	r3, r1
 800953a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800953c:	2300      	movs	r3, #0
 800953e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009540:	2300      	movs	r3, #0
 8009542:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800954a:	7af9      	ldrb	r1, [r7, #11]
 800954c:	683b      	ldr	r3, [r7, #0]
 800954e:	687a      	ldr	r2, [r7, #4]
 8009550:	f7f8 fc7d 	bl	8001e4e <HAL_PCD_EP_Transmit>
 8009554:	4603      	mov	r3, r0
 8009556:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009558:	7dfb      	ldrb	r3, [r7, #23]
 800955a:	4618      	mov	r0, r3
 800955c:	f000 f890 	bl	8009680 <USBD_Get_USB_Status>
 8009560:	4603      	mov	r3, r0
 8009562:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009564:	7dbb      	ldrb	r3, [r7, #22]
}
 8009566:	4618      	mov	r0, r3
 8009568:	3718      	adds	r7, #24
 800956a:	46bd      	mov	sp, r7
 800956c:	bd80      	pop	{r7, pc}

0800956e <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800956e:	b580      	push	{r7, lr}
 8009570:	b086      	sub	sp, #24
 8009572:	af00      	add	r7, sp, #0
 8009574:	60f8      	str	r0, [r7, #12]
 8009576:	607a      	str	r2, [r7, #4]
 8009578:	603b      	str	r3, [r7, #0]
 800957a:	460b      	mov	r3, r1
 800957c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800957e:	2300      	movs	r3, #0
 8009580:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009582:	2300      	movs	r3, #0
 8009584:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800958c:	7af9      	ldrb	r1, [r7, #11]
 800958e:	683b      	ldr	r3, [r7, #0]
 8009590:	687a      	ldr	r2, [r7, #4]
 8009592:	f7f8 fc07 	bl	8001da4 <HAL_PCD_EP_Receive>
 8009596:	4603      	mov	r3, r0
 8009598:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800959a:	7dfb      	ldrb	r3, [r7, #23]
 800959c:	4618      	mov	r0, r3
 800959e:	f000 f86f 	bl	8009680 <USBD_Get_USB_Status>
 80095a2:	4603      	mov	r3, r0
 80095a4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80095a6:	7dbb      	ldrb	r3, [r7, #22]
}
 80095a8:	4618      	mov	r0, r3
 80095aa:	3718      	adds	r7, #24
 80095ac:	46bd      	mov	sp, r7
 80095ae:	bd80      	pop	{r7, pc}

080095b0 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80095b0:	b580      	push	{r7, lr}
 80095b2:	b082      	sub	sp, #8
 80095b4:	af00      	add	r7, sp, #0
 80095b6:	6078      	str	r0, [r7, #4]
 80095b8:	460b      	mov	r3, r1
 80095ba:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80095c2:	78fa      	ldrb	r2, [r7, #3]
 80095c4:	4611      	mov	r1, r2
 80095c6:	4618      	mov	r0, r3
 80095c8:	f7f8 fc29 	bl	8001e1e <HAL_PCD_EP_GetRxCount>
 80095cc:	4603      	mov	r3, r0
}
 80095ce:	4618      	mov	r0, r3
 80095d0:	3708      	adds	r7, #8
 80095d2:	46bd      	mov	sp, r7
 80095d4:	bd80      	pop	{r7, pc}
	...

080095d8 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80095d8:	b580      	push	{r7, lr}
 80095da:	b082      	sub	sp, #8
 80095dc:	af00      	add	r7, sp, #0
 80095de:	6078      	str	r0, [r7, #4]
 80095e0:	460b      	mov	r3, r1
 80095e2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 80095e4:	78fb      	ldrb	r3, [r7, #3]
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d002      	beq.n	80095f0 <HAL_PCDEx_LPM_Callback+0x18>
 80095ea:	2b01      	cmp	r3, #1
 80095ec:	d013      	beq.n	8009616 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 80095ee:	e023      	b.n	8009638 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	699b      	ldr	r3, [r3, #24]
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d007      	beq.n	8009608 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 80095f8:	f000 f83c 	bl	8009674 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80095fc:	4b10      	ldr	r3, [pc, #64]	; (8009640 <HAL_PCDEx_LPM_Callback+0x68>)
 80095fe:	691b      	ldr	r3, [r3, #16]
 8009600:	4a0f      	ldr	r2, [pc, #60]	; (8009640 <HAL_PCDEx_LPM_Callback+0x68>)
 8009602:	f023 0306 	bic.w	r3, r3, #6
 8009606:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800960e:	4618      	mov	r0, r3
 8009610:	f7fe fcce 	bl	8007fb0 <USBD_LL_Resume>
    break;
 8009614:	e010      	b.n	8009638 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800961c:	4618      	mov	r0, r3
 800961e:	f7fe fcb2 	bl	8007f86 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	699b      	ldr	r3, [r3, #24]
 8009626:	2b00      	cmp	r3, #0
 8009628:	d005      	beq.n	8009636 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800962a:	4b05      	ldr	r3, [pc, #20]	; (8009640 <HAL_PCDEx_LPM_Callback+0x68>)
 800962c:	691b      	ldr	r3, [r3, #16]
 800962e:	4a04      	ldr	r2, [pc, #16]	; (8009640 <HAL_PCDEx_LPM_Callback+0x68>)
 8009630:	f043 0306 	orr.w	r3, r3, #6
 8009634:	6113      	str	r3, [r2, #16]
    break;
 8009636:	bf00      	nop
}
 8009638:	bf00      	nop
 800963a:	3708      	adds	r7, #8
 800963c:	46bd      	mov	sp, r7
 800963e:	bd80      	pop	{r7, pc}
 8009640:	e000ed00 	.word	0xe000ed00

08009644 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009644:	b480      	push	{r7}
 8009646:	b083      	sub	sp, #12
 8009648:	af00      	add	r7, sp, #0
 800964a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800964c:	4b03      	ldr	r3, [pc, #12]	; (800965c <USBD_static_malloc+0x18>)
}
 800964e:	4618      	mov	r0, r3
 8009650:	370c      	adds	r7, #12
 8009652:	46bd      	mov	sp, r7
 8009654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009658:	4770      	bx	lr
 800965a:	bf00      	nop
 800965c:	200001ac 	.word	0x200001ac

08009660 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009660:	b480      	push	{r7}
 8009662:	b083      	sub	sp, #12
 8009664:	af00      	add	r7, sp, #0
 8009666:	6078      	str	r0, [r7, #4]

}
 8009668:	bf00      	nop
 800966a:	370c      	adds	r7, #12
 800966c:	46bd      	mov	sp, r7
 800966e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009672:	4770      	bx	lr

08009674 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8009674:	b580      	push	{r7, lr}
 8009676:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8009678:	f7f6 feb4 	bl	80003e4 <SystemClock_Config>
}
 800967c:	bf00      	nop
 800967e:	bd80      	pop	{r7, pc}

08009680 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009680:	b480      	push	{r7}
 8009682:	b085      	sub	sp, #20
 8009684:	af00      	add	r7, sp, #0
 8009686:	4603      	mov	r3, r0
 8009688:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800968a:	2300      	movs	r3, #0
 800968c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800968e:	79fb      	ldrb	r3, [r7, #7]
 8009690:	2b03      	cmp	r3, #3
 8009692:	d817      	bhi.n	80096c4 <USBD_Get_USB_Status+0x44>
 8009694:	a201      	add	r2, pc, #4	; (adr r2, 800969c <USBD_Get_USB_Status+0x1c>)
 8009696:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800969a:	bf00      	nop
 800969c:	080096ad 	.word	0x080096ad
 80096a0:	080096b3 	.word	0x080096b3
 80096a4:	080096b9 	.word	0x080096b9
 80096a8:	080096bf 	.word	0x080096bf
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80096ac:	2300      	movs	r3, #0
 80096ae:	73fb      	strb	r3, [r7, #15]
    break;
 80096b0:	e00b      	b.n	80096ca <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80096b2:	2303      	movs	r3, #3
 80096b4:	73fb      	strb	r3, [r7, #15]
    break;
 80096b6:	e008      	b.n	80096ca <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80096b8:	2301      	movs	r3, #1
 80096ba:	73fb      	strb	r3, [r7, #15]
    break;
 80096bc:	e005      	b.n	80096ca <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80096be:	2303      	movs	r3, #3
 80096c0:	73fb      	strb	r3, [r7, #15]
    break;
 80096c2:	e002      	b.n	80096ca <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80096c4:	2303      	movs	r3, #3
 80096c6:	73fb      	strb	r3, [r7, #15]
    break;
 80096c8:	bf00      	nop
  }
  return usb_status;
 80096ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80096cc:	4618      	mov	r0, r3
 80096ce:	3714      	adds	r7, #20
 80096d0:	46bd      	mov	sp, r7
 80096d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d6:	4770      	bx	lr

080096d8 <__libc_init_array>:
 80096d8:	b570      	push	{r4, r5, r6, lr}
 80096da:	4e0d      	ldr	r6, [pc, #52]	; (8009710 <__libc_init_array+0x38>)
 80096dc:	4c0d      	ldr	r4, [pc, #52]	; (8009714 <__libc_init_array+0x3c>)
 80096de:	1ba4      	subs	r4, r4, r6
 80096e0:	10a4      	asrs	r4, r4, #2
 80096e2:	2500      	movs	r5, #0
 80096e4:	42a5      	cmp	r5, r4
 80096e6:	d109      	bne.n	80096fc <__libc_init_array+0x24>
 80096e8:	4e0b      	ldr	r6, [pc, #44]	; (8009718 <__libc_init_array+0x40>)
 80096ea:	4c0c      	ldr	r4, [pc, #48]	; (800971c <__libc_init_array+0x44>)
 80096ec:	f000 f82c 	bl	8009748 <_init>
 80096f0:	1ba4      	subs	r4, r4, r6
 80096f2:	10a4      	asrs	r4, r4, #2
 80096f4:	2500      	movs	r5, #0
 80096f6:	42a5      	cmp	r5, r4
 80096f8:	d105      	bne.n	8009706 <__libc_init_array+0x2e>
 80096fa:	bd70      	pop	{r4, r5, r6, pc}
 80096fc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009700:	4798      	blx	r3
 8009702:	3501      	adds	r5, #1
 8009704:	e7ee      	b.n	80096e4 <__libc_init_array+0xc>
 8009706:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800970a:	4798      	blx	r3
 800970c:	3501      	adds	r5, #1
 800970e:	e7f2      	b.n	80096f6 <__libc_init_array+0x1e>
 8009710:	080097b8 	.word	0x080097b8
 8009714:	080097b8 	.word	0x080097b8
 8009718:	080097b8 	.word	0x080097b8
 800971c:	080097bc 	.word	0x080097bc

08009720 <memcpy>:
 8009720:	b510      	push	{r4, lr}
 8009722:	1e43      	subs	r3, r0, #1
 8009724:	440a      	add	r2, r1
 8009726:	4291      	cmp	r1, r2
 8009728:	d100      	bne.n	800972c <memcpy+0xc>
 800972a:	bd10      	pop	{r4, pc}
 800972c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009730:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009734:	e7f7      	b.n	8009726 <memcpy+0x6>

08009736 <memset>:
 8009736:	4402      	add	r2, r0
 8009738:	4603      	mov	r3, r0
 800973a:	4293      	cmp	r3, r2
 800973c:	d100      	bne.n	8009740 <memset+0xa>
 800973e:	4770      	bx	lr
 8009740:	f803 1b01 	strb.w	r1, [r3], #1
 8009744:	e7f9      	b.n	800973a <memset+0x4>
	...

08009748 <_init>:
 8009748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800974a:	bf00      	nop
 800974c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800974e:	bc08      	pop	{r3}
 8009750:	469e      	mov	lr, r3
 8009752:	4770      	bx	lr

08009754 <_fini>:
 8009754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009756:	bf00      	nop
 8009758:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800975a:	bc08      	pop	{r3}
 800975c:	469e      	mov	lr, r3
 800975e:	4770      	bx	lr
