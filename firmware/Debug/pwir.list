
pwir.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009920  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08009af8  08009af8  00019af8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009b50  08009b50  000201cc  2**0
                  CONTENTS
  4 .ARM          00000000  08009b50  08009b50  000201cc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009b50  08009b50  000201cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009b50  08009b50  00019b50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009b54  08009b54  00019b54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001cc  20000000  08009b58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001490  200001cc  08009d24  000201cc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000165c  08009d24  0002165c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ad5f  00000000  00000000  000201fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003476  00000000  00000000  0003af5b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001398  00000000  00000000  0003e3d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001220  00000000  00000000  0003f770  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000205b2  00000000  00000000  00040990  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00011bd1  00000000  00000000  00060f42  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c428f  00000000  00000000  00072b13  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00136da2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000051a4  00000000  00000000  00136e20  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	200001cc 	.word	0x200001cc
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08009ae0 	.word	0x08009ae0

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	200001d0 	.word	0x200001d0
 8000214:	08009ae0 	.word	0x08009ae0

08000218 <CDC_On_Receive>:
  .delimiter = 0
}; // (4) Instance of received data.

volatile uint8_t isCommandReceived = 0; // (5) Boolean (0/1) variable to signify that data has been received. Variable is marked volatile to prevent the compiler from removing it during optimisation.

void CDC_On_Receive(uint8_t* buffer, uint32_t* length) { // (6) Define the function that is called when data is received. It is usually preferable to keep interrupt handlers small and fast to avoid blocking other code from executing. Only data copying and setting isCommandReceived to 1 is done in the handler. Rest is handled in the main while loop.
 8000218:	b580      	push	{r7, lr}
 800021a:	b082      	sub	sp, #8
 800021c:	af00      	add	r7, sp, #0
 800021e:	6078      	str	r0, [r7, #4]
 8000220:	6039      	str	r1, [r7, #0]
  //HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
  if (*length == sizeof(Command)) { // (7) Check if received data the has same length as Command struct.
 8000222:	683b      	ldr	r3, [r7, #0]
 8000224:	681b      	ldr	r3, [r3, #0]
 8000226:	2b0c      	cmp	r3, #12
 8000228:	d10d      	bne.n	8000246 <CDC_On_Receive+0x2e>
    memcpy(&command, buffer, sizeof(Command)); // (8) Copy received data to command instance.
 800022a:	220c      	movs	r2, #12
 800022c:	6879      	ldr	r1, [r7, #4]
 800022e:	4808      	ldr	r0, [pc, #32]	; (8000250 <CDC_On_Receive+0x38>)
 8000230:	f009 fc42 	bl	8009ab8 <memcpy>

    if (command.delimiter == 0xAAAA) { // (9) Check the delimiter as a validation of received data.
 8000234:	4b06      	ldr	r3, [pc, #24]	; (8000250 <CDC_On_Receive+0x38>)
 8000236:	895b      	ldrh	r3, [r3, #10]
 8000238:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800023c:	4293      	cmp	r3, r2
 800023e:	d102      	bne.n	8000246 <CDC_On_Receive+0x2e>
      isCommandReceived = 1;
 8000240:	4b04      	ldr	r3, [pc, #16]	; (8000254 <CDC_On_Receive+0x3c>)
 8000242:	2201      	movs	r2, #1
 8000244:	701a      	strb	r2, [r3, #0]
    }
  }
}
 8000246:	bf00      	nop
 8000248:	3708      	adds	r7, #8
 800024a:	46bd      	mov	sp, r7
 800024c:	bd80      	pop	{r7, pc}
 800024e:	bf00      	nop
 8000250:	200001e8 	.word	0x200001e8
 8000254:	200001f4 	.word	0x200001f4

08000258 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000258:	b580      	push	{r7, lr}
 800025a:	b082      	sub	sp, #8
 800025c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  // (1) Define an instance of Feedback for sending data.
  Feedback feedback = {
 800025e:	2300      	movs	r3, #0
 8000260:	803b      	strh	r3, [r7, #0]
 8000262:	2300      	movs	r3, #0
 8000264:	807b      	strh	r3, [r7, #2]
 8000266:	2300      	movs	r3, #0
 8000268:	80bb      	strh	r3, [r7, #4]
 800026a:	f64a 23aa 	movw	r3, #43690	; 0xaaaa
 800026e:	80fb      	strh	r3, [r7, #6]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000270:	f001 f907 	bl	8001482 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000274:	f000 f8a0 	bl	80003b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000278:	f000 fce6 	bl	8000c48 <MX_GPIO_Init>
  MX_TIM1_Init();
 800027c:	f000 f904 	bl	8000488 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000280:	f000 f972 	bl	8000568 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000284:	f000 f9f0 	bl	8000668 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000288:	f000 fa44 	bl	8000714 <MX_TIM4_Init>
  MX_TIM8_Init();
 800028c:	f000 face 	bl	800082c <MX_TIM8_Init>
  MX_TIM16_Init();
 8000290:	f000 fbe6 	bl	8000a60 <MX_TIM16_Init>
  MX_TIM17_Init();
 8000294:	f000 fc5e 	bl	8000b54 <MX_TIM17_Init>
  MX_USB_Device_Init();
 8000298:	f008 fef2 	bl	8009080 <MX_USB_Device_Init>
  MX_TIM15_Init();
 800029c:	f000 fb5a 	bl	8000954 <MX_TIM15_Init>
  MX_TIM6_Init();
 80002a0:	f000 fa8e 	bl	80007c0 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_1 | TIM_CHANNEL_2); // Encoder 1
 80002a4:	2104      	movs	r1, #4
 80002a6:	4833      	ldr	r0, [pc, #204]	; (8000374 <main+0x11c>)
 80002a8:	f004 f9e8 	bl	800467c <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_1 | TIM_CHANNEL_2); // Encoder 2
 80002ac:	2104      	movs	r1, #4
 80002ae:	4832      	ldr	r0, [pc, #200]	; (8000378 <main+0x120>)
 80002b0:	f004 f9e4 	bl	800467c <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_1 | TIM_CHANNEL_2); // Encoder 3
 80002b4:	2104      	movs	r1, #4
 80002b6:	4831      	ldr	r0, [pc, #196]	; (800037c <main+0x124>)
 80002b8:	f004 f9e0 	bl	800467c <HAL_TIM_Encoder_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1); // Motor PWM for draiver 1
 80002bc:	2100      	movs	r1, #0
 80002be:	4830      	ldr	r0, [pc, #192]	; (8000380 <main+0x128>)
 80002c0:	f004 f836 	bl	8004330 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2); // Motor PWM for draiver 1
 80002c4:	2104      	movs	r1, #4
 80002c6:	482e      	ldr	r0, [pc, #184]	; (8000380 <main+0x128>)
 80002c8:	f004 f832 	bl	8004330 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3); // Motor PWM for draiver 2
 80002cc:	2108      	movs	r1, #8
 80002ce:	482c      	ldr	r0, [pc, #176]	; (8000380 <main+0x128>)
 80002d0:	f004 f82e 	bl	8004330 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4); // Motor PWM for draiver 2
 80002d4:	210c      	movs	r1, #12
 80002d6:	482a      	ldr	r0, [pc, #168]	; (8000380 <main+0x128>)
 80002d8:	f004 f82a 	bl	8004330 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1); // Motor PWM for draiver 3
 80002dc:	2100      	movs	r1, #0
 80002de:	4829      	ldr	r0, [pc, #164]	; (8000384 <main+0x12c>)
 80002e0:	f004 f826 	bl	8004330 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim17, TIM_CHANNEL_1); // Motor PWM for draiver 3
 80002e4:	2100      	movs	r1, #0
 80002e6:	4828      	ldr	r0, [pc, #160]	; (8000388 <main+0x130>)
 80002e8:	f004 f822 	bl	8004330 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1); // Thrower PWM
 80002ec:	2100      	movs	r1, #0
 80002ee:	4827      	ldr	r0, [pc, #156]	; (800038c <main+0x134>)
 80002f0:	f004 f81e 	bl	8004330 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_2); // Thrower Angle PWM
 80002f4:	2104      	movs	r1, #4
 80002f6:	4826      	ldr	r0, [pc, #152]	; (8000390 <main+0x138>)
 80002f8:	f004 f81a 	bl	8004330 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim6);
 80002fc:	4825      	ldr	r0, [pc, #148]	; (8000394 <main+0x13c>)
 80002fe:	f003 ff55 	bl	80041ac <HAL_TIM_Base_Start_IT>
    /* USER CODE BEGIN 3 */
	  //HAL_Delay(1000);
	  // Send command: 00 00 00 00 00 00 00 00 AA AA
	  //               01
	  //               02
	if (isCommandReceived) { // (2) Only return data when something has been received.
 8000302:	4b25      	ldr	r3, [pc, #148]	; (8000398 <main+0x140>)
 8000304:	781b      	ldrb	r3, [r3, #0]
 8000306:	b2db      	uxtb	r3, r3
 8000308:	2b00      	cmp	r3, #0
 800030a:	d0fa      	beq.n	8000302 <main+0xaa>
		isCommandReceived = 0;
 800030c:	4b22      	ldr	r3, [pc, #136]	; (8000398 <main+0x140>)
 800030e:	2200      	movs	r2, #0
 8000310:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin); // (3) Toggle LED to indicate that data has been received.
 8000312:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000316:	4821      	ldr	r0, [pc, #132]	; (800039c <main+0x144>)
 8000318:	f001 fbce 	bl	8001ab8 <HAL_GPIO_TogglePin>

		motor1.setpoint = command.speed1;
 800031c:	4b20      	ldr	r3, [pc, #128]	; (80003a0 <main+0x148>)
 800031e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000322:	b29a      	uxth	r2, r3
 8000324:	4b1f      	ldr	r3, [pc, #124]	; (80003a4 <main+0x14c>)
 8000326:	801a      	strh	r2, [r3, #0]
		motor2.setpoint = command.speed2;
 8000328:	4b1d      	ldr	r3, [pc, #116]	; (80003a0 <main+0x148>)
 800032a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800032e:	b29a      	uxth	r2, r3
 8000330:	4b1d      	ldr	r3, [pc, #116]	; (80003a8 <main+0x150>)
 8000332:	801a      	strh	r2, [r3, #0]
		motor3.setpoint = command.speed3;
 8000334:	4b1a      	ldr	r3, [pc, #104]	; (80003a0 <main+0x148>)
 8000336:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800033a:	b29a      	uxth	r2, r3
 800033c:	4b1b      	ldr	r3, [pc, #108]	; (80003ac <main+0x154>)
 800033e:	801a      	strh	r2, [r3, #0]

		// (4) Update feedback with current motor speeds.
		feedback.speed1 = motor1.speed;
 8000340:	4b18      	ldr	r3, [pc, #96]	; (80003a4 <main+0x14c>)
 8000342:	685b      	ldr	r3, [r3, #4]
 8000344:	b21b      	sxth	r3, r3
 8000346:	803b      	strh	r3, [r7, #0]
		feedback.speed2 = motor2.speed;
 8000348:	4b17      	ldr	r3, [pc, #92]	; (80003a8 <main+0x150>)
 800034a:	685b      	ldr	r3, [r3, #4]
 800034c:	b21b      	sxth	r3, r3
 800034e:	807b      	strh	r3, [r7, #2]
		feedback.speed3 = motor3.speed;
 8000350:	4b16      	ldr	r3, [pc, #88]	; (80003ac <main+0x154>)
 8000352:	685b      	ldr	r3, [r3, #4]
 8000354:	b21b      	sxth	r3, r3
 8000356:	80bb      	strh	r3, [r7, #4]
			TIM2->CCR2 = 0; // esimene draiver
		}*/

		// Start thrower ESC at lower than 3200
		// Then set speed to 3200 ... 6400
		TIM8->CCR1 = command.throwerSpeed; // thrower
 8000358:	4b11      	ldr	r3, [pc, #68]	; (80003a0 <main+0x148>)
 800035a:	88da      	ldrh	r2, [r3, #6]
 800035c:	4b14      	ldr	r3, [pc, #80]	; (80003b0 <main+0x158>)
 800035e:	635a      	str	r2, [r3, #52]	; 0x34

		TIM15->CCR2 = command.throwerAngle; // thrower angle
 8000360:	4b0f      	ldr	r3, [pc, #60]	; (80003a0 <main+0x148>)
 8000362:	891a      	ldrh	r2, [r3, #8]
 8000364:	4b13      	ldr	r3, [pc, #76]	; (80003b4 <main+0x15c>)
 8000366:	639a      	str	r2, [r3, #56]	; 0x38

		CDC_Transmit_FS(&feedback, sizeof(feedback)); // (5) Send data over USB.
 8000368:	463b      	mov	r3, r7
 800036a:	2108      	movs	r1, #8
 800036c:	4618      	mov	r0, r3
 800036e:	f008 ff49 	bl	8009204 <CDC_Transmit_FS>
	if (isCommandReceived) { // (2) Only return data when something has been received.
 8000372:	e7c6      	b.n	8000302 <main+0xaa>
 8000374:	200005e0 	.word	0x200005e0
 8000378:	20000548 	.word	0x20000548
 800037c:	20000464 	.word	0x20000464
 8000380:	2000062c 	.word	0x2000062c
 8000384:	20000678 	.word	0x20000678
 8000388:	200004fc 	.word	0x200004fc
 800038c:	20000418 	.word	0x20000418
 8000390:	200004b0 	.word	0x200004b0
 8000394:	20000594 	.word	0x20000594
 8000398:	200001f4 	.word	0x200001f4
 800039c:	48000400 	.word	0x48000400
 80003a0:	200001e8 	.word	0x200001e8
 80003a4:	20000000 	.word	0x20000000
 80003a8:	20000018 	.word	0x20000018
 80003ac:	20000030 	.word	0x20000030
 80003b0:	40013400 	.word	0x40013400
 80003b4:	40014000 	.word	0x40014000

080003b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003b8:	b580      	push	{r7, lr}
 80003ba:	b0a4      	sub	sp, #144	; 0x90
 80003bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003be:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80003c2:	2238      	movs	r2, #56	; 0x38
 80003c4:	2100      	movs	r1, #0
 80003c6:	4618      	mov	r0, r3
 80003c8:	f009 fb81 	bl	8009ace <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003cc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80003d0:	2200      	movs	r2, #0
 80003d2:	601a      	str	r2, [r3, #0]
 80003d4:	605a      	str	r2, [r3, #4]
 80003d6:	609a      	str	r2, [r3, #8]
 80003d8:	60da      	str	r2, [r3, #12]
 80003da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80003dc:	463b      	mov	r3, r7
 80003de:	2244      	movs	r2, #68	; 0x44
 80003e0:	2100      	movs	r1, #0
 80003e2:	4618      	mov	r0, r3
 80003e4:	f009 fb73 	bl	8009ace <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80003e8:	2000      	movs	r0, #0
 80003ea:	f002 fee7 	bl	80031bc <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 80003ee:	2322      	movs	r3, #34	; 0x22
 80003f0:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80003f6:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003f8:	2340      	movs	r3, #64	; 0x40
 80003fa:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80003fc:	2301      	movs	r3, #1
 80003fe:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000400:	2302      	movs	r3, #2
 8000402:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000404:	2302      	movs	r3, #2
 8000406:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000408:	2301      	movs	r3, #1
 800040a:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 20;
 800040c:	2314      	movs	r3, #20
 800040e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000412:	2302      	movs	r3, #2
 8000414:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 8000418:	2304      	movs	r3, #4
 800041a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800041e:	2302      	movs	r3, #2
 8000420:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000424:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000428:	4618      	mov	r0, r3
 800042a:	f002 ff7b 	bl	8003324 <HAL_RCC_OscConfig>
 800042e:	4603      	mov	r3, r0
 8000430:	2b00      	cmp	r3, #0
 8000432:	d001      	beq.n	8000438 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000434:	f000 fd62 	bl	8000efc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000438:	230f      	movs	r3, #15
 800043a:	647b      	str	r3, [r7, #68]	; 0x44
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800043c:	2303      	movs	r3, #3
 800043e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000440:	2300      	movs	r3, #0
 8000442:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000444:	2300      	movs	r3, #0
 8000446:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000448:	2300      	movs	r3, #0
 800044a:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800044c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000450:	2104      	movs	r1, #4
 8000452:	4618      	mov	r0, r3
 8000454:	f003 fa7e 	bl	8003954 <HAL_RCC_ClockConfig>
 8000458:	4603      	mov	r3, r0
 800045a:	2b00      	cmp	r3, #0
 800045c:	d001      	beq.n	8000462 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800045e:	f000 fd4d 	bl	8000efc <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000462:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000466:	603b      	str	r3, [r7, #0]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8000468:	2300      	movs	r3, #0
 800046a:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800046c:	463b      	mov	r3, r7
 800046e:	4618      	mov	r0, r3
 8000470:	f003 fc54 	bl	8003d1c <HAL_RCCEx_PeriphCLKConfig>
 8000474:	4603      	mov	r3, r0
 8000476:	2b00      	cmp	r3, #0
 8000478:	d001      	beq.n	800047e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800047a:	f000 fd3f 	bl	8000efc <Error_Handler>
  }
}
 800047e:	bf00      	nop
 8000480:	3790      	adds	r7, #144	; 0x90
 8000482:	46bd      	mov	sp, r7
 8000484:	bd80      	pop	{r7, pc}
	...

08000488 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000488:	b580      	push	{r7, lr}
 800048a:	b09a      	sub	sp, #104	; 0x68
 800048c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800048e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000492:	2224      	movs	r2, #36	; 0x24
 8000494:	2100      	movs	r1, #0
 8000496:	4618      	mov	r0, r3
 8000498:	f009 fb19 	bl	8009ace <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800049c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80004a0:	2200      	movs	r2, #0
 80004a2:	601a      	str	r2, [r3, #0]
 80004a4:	605a      	str	r2, [r3, #4]
 80004a6:	609a      	str	r2, [r3, #8]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80004a8:	1d3b      	adds	r3, r7, #4
 80004aa:	2234      	movs	r2, #52	; 0x34
 80004ac:	2100      	movs	r1, #0
 80004ae:	4618      	mov	r0, r3
 80004b0:	f009 fb0d 	bl	8009ace <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80004b4:	4b2a      	ldr	r3, [pc, #168]	; (8000560 <MX_TIM1_Init+0xd8>)
 80004b6:	4a2b      	ldr	r2, [pc, #172]	; (8000564 <MX_TIM1_Init+0xdc>)
 80004b8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80004ba:	4b29      	ldr	r3, [pc, #164]	; (8000560 <MX_TIM1_Init+0xd8>)
 80004bc:	2200      	movs	r2, #0
 80004be:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004c0:	4b27      	ldr	r3, [pc, #156]	; (8000560 <MX_TIM1_Init+0xd8>)
 80004c2:	2200      	movs	r2, #0
 80004c4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80004c6:	4b26      	ldr	r3, [pc, #152]	; (8000560 <MX_TIM1_Init+0xd8>)
 80004c8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80004cc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004ce:	4b24      	ldr	r3, [pc, #144]	; (8000560 <MX_TIM1_Init+0xd8>)
 80004d0:	2200      	movs	r2, #0
 80004d2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80004d4:	4b22      	ldr	r3, [pc, #136]	; (8000560 <MX_TIM1_Init+0xd8>)
 80004d6:	2200      	movs	r2, #0
 80004d8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80004da:	4b21      	ldr	r3, [pc, #132]	; (8000560 <MX_TIM1_Init+0xd8>)
 80004dc:	2200      	movs	r2, #0
 80004de:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80004e0:	2301      	movs	r3, #1
 80004e2:	647b      	str	r3, [r7, #68]	; 0x44
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80004e4:	2300      	movs	r3, #0
 80004e6:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80004e8:	2301      	movs	r3, #1
 80004ea:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80004ec:	2300      	movs	r3, #0
 80004ee:	653b      	str	r3, [r7, #80]	; 0x50
  sConfig.IC1Filter = 0;
 80004f0:	2300      	movs	r3, #0
 80004f2:	657b      	str	r3, [r7, #84]	; 0x54
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80004f4:	2300      	movs	r3, #0
 80004f6:	65bb      	str	r3, [r7, #88]	; 0x58
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80004f8:	2301      	movs	r3, #1
 80004fa:	65fb      	str	r3, [r7, #92]	; 0x5c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80004fc:	2300      	movs	r3, #0
 80004fe:	663b      	str	r3, [r7, #96]	; 0x60
  sConfig.IC2Filter = 0;
 8000500:	2300      	movs	r3, #0
 8000502:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8000504:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000508:	4619      	mov	r1, r3
 800050a:	4815      	ldr	r0, [pc, #84]	; (8000560 <MX_TIM1_Init+0xd8>)
 800050c:	f004 f810 	bl	8004530 <HAL_TIM_Encoder_Init>
 8000510:	4603      	mov	r3, r0
 8000512:	2b00      	cmp	r3, #0
 8000514:	d001      	beq.n	800051a <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8000516:	f000 fcf1 	bl	8000efc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800051a:	2300      	movs	r3, #0
 800051c:	63bb      	str	r3, [r7, #56]	; 0x38
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800051e:	2300      	movs	r3, #0
 8000520:	63fb      	str	r3, [r7, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000522:	2300      	movs	r3, #0
 8000524:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000526:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800052a:	4619      	mov	r1, r3
 800052c:	480c      	ldr	r0, [pc, #48]	; (8000560 <MX_TIM1_Init+0xd8>)
 800052e:	f004 ff95 	bl	800545c <HAL_TIMEx_MasterConfigSynchronization>
 8000532:	4603      	mov	r3, r0
 8000534:	2b00      	cmp	r3, #0
 8000536:	d001      	beq.n	800053c <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 8000538:	f000 fce0 	bl	8000efc <Error_Handler>
  }
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800053c:	2300      	movs	r3, #0
 800053e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000540:	2300      	movs	r3, #0
 8000542:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000544:	1d3b      	adds	r3, r7, #4
 8000546:	4619      	mov	r1, r3
 8000548:	4805      	ldr	r0, [pc, #20]	; (8000560 <MX_TIM1_Init+0xd8>)
 800054a:	f005 f809 	bl	8005560 <HAL_TIMEx_ConfigBreakDeadTime>
 800054e:	4603      	mov	r3, r0
 8000550:	2b00      	cmp	r3, #0
 8000552:	d001      	beq.n	8000558 <MX_TIM1_Init+0xd0>
  {
    Error_Handler();
 8000554:	f000 fcd2 	bl	8000efc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000558:	bf00      	nop
 800055a:	3768      	adds	r7, #104	; 0x68
 800055c:	46bd      	mov	sp, r7
 800055e:	bd80      	pop	{r7, pc}
 8000560:	200005e0 	.word	0x200005e0
 8000564:	40012c00 	.word	0x40012c00

08000568 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b08a      	sub	sp, #40	; 0x28
 800056c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800056e:	f107 031c 	add.w	r3, r7, #28
 8000572:	2200      	movs	r2, #0
 8000574:	601a      	str	r2, [r3, #0]
 8000576:	605a      	str	r2, [r3, #4]
 8000578:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800057a:	463b      	mov	r3, r7
 800057c:	2200      	movs	r2, #0
 800057e:	601a      	str	r2, [r3, #0]
 8000580:	605a      	str	r2, [r3, #4]
 8000582:	609a      	str	r2, [r3, #8]
 8000584:	60da      	str	r2, [r3, #12]
 8000586:	611a      	str	r2, [r3, #16]
 8000588:	615a      	str	r2, [r3, #20]
 800058a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800058c:	4b35      	ldr	r3, [pc, #212]	; (8000664 <MX_TIM2_Init+0xfc>)
 800058e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000592:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 50 - 1;
 8000594:	4b33      	ldr	r3, [pc, #204]	; (8000664 <MX_TIM2_Init+0xfc>)
 8000596:	2231      	movs	r2, #49	; 0x31
 8000598:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800059a:	4b32      	ldr	r3, [pc, #200]	; (8000664 <MX_TIM2_Init+0xfc>)
 800059c:	2200      	movs	r2, #0
 800059e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 63999;
 80005a0:	4b30      	ldr	r3, [pc, #192]	; (8000664 <MX_TIM2_Init+0xfc>)
 80005a2:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 80005a6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005a8:	4b2e      	ldr	r3, [pc, #184]	; (8000664 <MX_TIM2_Init+0xfc>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005ae:	4b2d      	ldr	r3, [pc, #180]	; (8000664 <MX_TIM2_Init+0xfc>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80005b4:	482b      	ldr	r0, [pc, #172]	; (8000664 <MX_TIM2_Init+0xfc>)
 80005b6:	f003 fe63 	bl	8004280 <HAL_TIM_PWM_Init>
 80005ba:	4603      	mov	r3, r0
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d001      	beq.n	80005c4 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 80005c0:	f000 fc9c 	bl	8000efc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005c4:	2300      	movs	r3, #0
 80005c6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005c8:	2300      	movs	r3, #0
 80005ca:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80005cc:	f107 031c 	add.w	r3, r7, #28
 80005d0:	4619      	mov	r1, r3
 80005d2:	4824      	ldr	r0, [pc, #144]	; (8000664 <MX_TIM2_Init+0xfc>)
 80005d4:	f004 ff42 	bl	800545c <HAL_TIMEx_MasterConfigSynchronization>
 80005d8:	4603      	mov	r3, r0
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d001      	beq.n	80005e2 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 80005de:	f000 fc8d 	bl	8000efc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80005e2:	2360      	movs	r3, #96	; 0x60
 80005e4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80005e6:	2300      	movs	r3, #0
 80005e8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80005ea:	2300      	movs	r3, #0
 80005ec:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80005ee:	2300      	movs	r3, #0
 80005f0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80005f2:	463b      	mov	r3, r7
 80005f4:	2200      	movs	r2, #0
 80005f6:	4619      	mov	r1, r3
 80005f8:	481a      	ldr	r0, [pc, #104]	; (8000664 <MX_TIM2_Init+0xfc>)
 80005fa:	f004 fa4b 	bl	8004a94 <HAL_TIM_PWM_ConfigChannel>
 80005fe:	4603      	mov	r3, r0
 8000600:	2b00      	cmp	r3, #0
 8000602:	d001      	beq.n	8000608 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8000604:	f000 fc7a 	bl	8000efc <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8000608:	2300      	movs	r3, #0
 800060a:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800060c:	463b      	mov	r3, r7
 800060e:	2204      	movs	r2, #4
 8000610:	4619      	mov	r1, r3
 8000612:	4814      	ldr	r0, [pc, #80]	; (8000664 <MX_TIM2_Init+0xfc>)
 8000614:	f004 fa3e 	bl	8004a94 <HAL_TIM_PWM_ConfigChannel>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d001      	beq.n	8000622 <MX_TIM2_Init+0xba>
  {
    Error_Handler();
 800061e:	f000 fc6d 	bl	8000efc <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8000622:	2300      	movs	r3, #0
 8000624:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000626:	463b      	mov	r3, r7
 8000628:	2208      	movs	r2, #8
 800062a:	4619      	mov	r1, r3
 800062c:	480d      	ldr	r0, [pc, #52]	; (8000664 <MX_TIM2_Init+0xfc>)
 800062e:	f004 fa31 	bl	8004a94 <HAL_TIM_PWM_ConfigChannel>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	d001      	beq.n	800063c <MX_TIM2_Init+0xd4>
  {
    Error_Handler();
 8000638:	f000 fc60 	bl	8000efc <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 800063c:	2300      	movs	r3, #0
 800063e:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000640:	463b      	mov	r3, r7
 8000642:	220c      	movs	r2, #12
 8000644:	4619      	mov	r1, r3
 8000646:	4807      	ldr	r0, [pc, #28]	; (8000664 <MX_TIM2_Init+0xfc>)
 8000648:	f004 fa24 	bl	8004a94 <HAL_TIM_PWM_ConfigChannel>
 800064c:	4603      	mov	r3, r0
 800064e:	2b00      	cmp	r3, #0
 8000650:	d001      	beq.n	8000656 <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8000652:	f000 fc53 	bl	8000efc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000656:	4803      	ldr	r0, [pc, #12]	; (8000664 <MX_TIM2_Init+0xfc>)
 8000658:	f000 fdb6 	bl	80011c8 <HAL_TIM_MspPostInit>

}
 800065c:	bf00      	nop
 800065e:	3728      	adds	r7, #40	; 0x28
 8000660:	46bd      	mov	sp, r7
 8000662:	bd80      	pop	{r7, pc}
 8000664:	2000062c 	.word	0x2000062c

08000668 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b08c      	sub	sp, #48	; 0x30
 800066c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800066e:	f107 030c 	add.w	r3, r7, #12
 8000672:	2224      	movs	r2, #36	; 0x24
 8000674:	2100      	movs	r1, #0
 8000676:	4618      	mov	r0, r3
 8000678:	f009 fa29 	bl	8009ace <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800067c:	463b      	mov	r3, r7
 800067e:	2200      	movs	r2, #0
 8000680:	601a      	str	r2, [r3, #0]
 8000682:	605a      	str	r2, [r3, #4]
 8000684:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000686:	4b21      	ldr	r3, [pc, #132]	; (800070c <MX_TIM3_Init+0xa4>)
 8000688:	4a21      	ldr	r2, [pc, #132]	; (8000710 <MX_TIM3_Init+0xa8>)
 800068a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800068c:	4b1f      	ldr	r3, [pc, #124]	; (800070c <MX_TIM3_Init+0xa4>)
 800068e:	2200      	movs	r2, #0
 8000690:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000692:	4b1e      	ldr	r3, [pc, #120]	; (800070c <MX_TIM3_Init+0xa4>)
 8000694:	2200      	movs	r2, #0
 8000696:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000698:	4b1c      	ldr	r3, [pc, #112]	; (800070c <MX_TIM3_Init+0xa4>)
 800069a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800069e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006a0:	4b1a      	ldr	r3, [pc, #104]	; (800070c <MX_TIM3_Init+0xa4>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006a6:	4b19      	ldr	r3, [pc, #100]	; (800070c <MX_TIM3_Init+0xa4>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80006ac:	2301      	movs	r3, #1
 80006ae:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80006b0:	2300      	movs	r3, #0
 80006b2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80006b4:	2301      	movs	r3, #1
 80006b6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80006b8:	2300      	movs	r3, #0
 80006ba:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80006bc:	2300      	movs	r3, #0
 80006be:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80006c0:	2300      	movs	r3, #0
 80006c2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80006c4:	2301      	movs	r3, #1
 80006c6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80006c8:	2300      	movs	r3, #0
 80006ca:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80006cc:	2300      	movs	r3, #0
 80006ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80006d0:	f107 030c 	add.w	r3, r7, #12
 80006d4:	4619      	mov	r1, r3
 80006d6:	480d      	ldr	r0, [pc, #52]	; (800070c <MX_TIM3_Init+0xa4>)
 80006d8:	f003 ff2a 	bl	8004530 <HAL_TIM_Encoder_Init>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d001      	beq.n	80006e6 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 80006e2:	f000 fc0b 	bl	8000efc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006e6:	2300      	movs	r3, #0
 80006e8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006ea:	2300      	movs	r3, #0
 80006ec:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80006ee:	463b      	mov	r3, r7
 80006f0:	4619      	mov	r1, r3
 80006f2:	4806      	ldr	r0, [pc, #24]	; (800070c <MX_TIM3_Init+0xa4>)
 80006f4:	f004 feb2 	bl	800545c <HAL_TIMEx_MasterConfigSynchronization>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d001      	beq.n	8000702 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 80006fe:	f000 fbfd 	bl	8000efc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000702:	bf00      	nop
 8000704:	3730      	adds	r7, #48	; 0x30
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	20000548 	.word	0x20000548
 8000710:	40000400 	.word	0x40000400

08000714 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b08c      	sub	sp, #48	; 0x30
 8000718:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800071a:	f107 030c 	add.w	r3, r7, #12
 800071e:	2224      	movs	r2, #36	; 0x24
 8000720:	2100      	movs	r1, #0
 8000722:	4618      	mov	r0, r3
 8000724:	f009 f9d3 	bl	8009ace <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000728:	463b      	mov	r3, r7
 800072a:	2200      	movs	r2, #0
 800072c:	601a      	str	r2, [r3, #0]
 800072e:	605a      	str	r2, [r3, #4]
 8000730:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000732:	4b21      	ldr	r3, [pc, #132]	; (80007b8 <MX_TIM4_Init+0xa4>)
 8000734:	4a21      	ldr	r2, [pc, #132]	; (80007bc <MX_TIM4_Init+0xa8>)
 8000736:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000738:	4b1f      	ldr	r3, [pc, #124]	; (80007b8 <MX_TIM4_Init+0xa4>)
 800073a:	2200      	movs	r2, #0
 800073c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800073e:	4b1e      	ldr	r3, [pc, #120]	; (80007b8 <MX_TIM4_Init+0xa4>)
 8000740:	2200      	movs	r2, #0
 8000742:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000744:	4b1c      	ldr	r3, [pc, #112]	; (80007b8 <MX_TIM4_Init+0xa4>)
 8000746:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800074a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800074c:	4b1a      	ldr	r3, [pc, #104]	; (80007b8 <MX_TIM4_Init+0xa4>)
 800074e:	2200      	movs	r2, #0
 8000750:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000752:	4b19      	ldr	r3, [pc, #100]	; (80007b8 <MX_TIM4_Init+0xa4>)
 8000754:	2200      	movs	r2, #0
 8000756:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000758:	2301      	movs	r3, #1
 800075a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800075c:	2300      	movs	r3, #0
 800075e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000760:	2301      	movs	r3, #1
 8000762:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000764:	2300      	movs	r3, #0
 8000766:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000768:	2300      	movs	r3, #0
 800076a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800076c:	2300      	movs	r3, #0
 800076e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000770:	2301      	movs	r3, #1
 8000772:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000774:	2300      	movs	r3, #0
 8000776:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000778:	2300      	movs	r3, #0
 800077a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800077c:	f107 030c 	add.w	r3, r7, #12
 8000780:	4619      	mov	r1, r3
 8000782:	480d      	ldr	r0, [pc, #52]	; (80007b8 <MX_TIM4_Init+0xa4>)
 8000784:	f003 fed4 	bl	8004530 <HAL_TIM_Encoder_Init>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d001      	beq.n	8000792 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 800078e:	f000 fbb5 	bl	8000efc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000792:	2300      	movs	r3, #0
 8000794:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000796:	2300      	movs	r3, #0
 8000798:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800079a:	463b      	mov	r3, r7
 800079c:	4619      	mov	r1, r3
 800079e:	4806      	ldr	r0, [pc, #24]	; (80007b8 <MX_TIM4_Init+0xa4>)
 80007a0:	f004 fe5c 	bl	800545c <HAL_TIMEx_MasterConfigSynchronization>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 80007aa:	f000 fba7 	bl	8000efc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80007ae:	bf00      	nop
 80007b0:	3730      	adds	r7, #48	; 0x30
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	20000464 	.word	0x20000464
 80007bc:	40000800 	.word	0x40000800

080007c0 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b084      	sub	sp, #16
 80007c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007c6:	1d3b      	adds	r3, r7, #4
 80007c8:	2200      	movs	r2, #0
 80007ca:	601a      	str	r2, [r3, #0]
 80007cc:	605a      	str	r2, [r3, #4]
 80007ce:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80007d0:	4b14      	ldr	r3, [pc, #80]	; (8000824 <MX_TIM6_Init+0x64>)
 80007d2:	4a15      	ldr	r2, [pc, #84]	; (8000828 <MX_TIM6_Init+0x68>)
 80007d4:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 25 - 1;
 80007d6:	4b13      	ldr	r3, [pc, #76]	; (8000824 <MX_TIM6_Init+0x64>)
 80007d8:	2218      	movs	r2, #24
 80007da:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007dc:	4b11      	ldr	r3, [pc, #68]	; (8000824 <MX_TIM6_Init+0x64>)
 80007de:	2200      	movs	r2, #0
 80007e0:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 63999;
 80007e2:	4b10      	ldr	r3, [pc, #64]	; (8000824 <MX_TIM6_Init+0x64>)
 80007e4:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 80007e8:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007ea:	4b0e      	ldr	r3, [pc, #56]	; (8000824 <MX_TIM6_Init+0x64>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80007f0:	480c      	ldr	r0, [pc, #48]	; (8000824 <MX_TIM6_Init+0x64>)
 80007f2:	f003 fc83 	bl	80040fc <HAL_TIM_Base_Init>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d001      	beq.n	8000800 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80007fc:	f000 fb7e 	bl	8000efc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000800:	2300      	movs	r3, #0
 8000802:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000804:	2300      	movs	r3, #0
 8000806:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000808:	1d3b      	adds	r3, r7, #4
 800080a:	4619      	mov	r1, r3
 800080c:	4805      	ldr	r0, [pc, #20]	; (8000824 <MX_TIM6_Init+0x64>)
 800080e:	f004 fe25 	bl	800545c <HAL_TIMEx_MasterConfigSynchronization>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d001      	beq.n	800081c <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000818:	f000 fb70 	bl	8000efc <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800081c:	bf00      	nop
 800081e:	3710      	adds	r7, #16
 8000820:	46bd      	mov	sp, r7
 8000822:	bd80      	pop	{r7, pc}
 8000824:	20000594 	.word	0x20000594
 8000828:	40001000 	.word	0x40001000

0800082c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b098      	sub	sp, #96	; 0x60
 8000830:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000832:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000836:	2200      	movs	r2, #0
 8000838:	601a      	str	r2, [r3, #0]
 800083a:	605a      	str	r2, [r3, #4]
 800083c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800083e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000842:	2200      	movs	r2, #0
 8000844:	601a      	str	r2, [r3, #0]
 8000846:	605a      	str	r2, [r3, #4]
 8000848:	609a      	str	r2, [r3, #8]
 800084a:	60da      	str	r2, [r3, #12]
 800084c:	611a      	str	r2, [r3, #16]
 800084e:	615a      	str	r2, [r3, #20]
 8000850:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000852:	1d3b      	adds	r3, r7, #4
 8000854:	2234      	movs	r2, #52	; 0x34
 8000856:	2100      	movs	r1, #0
 8000858:	4618      	mov	r0, r3
 800085a:	f009 f938 	bl	8009ace <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800085e:	4b3b      	ldr	r3, [pc, #236]	; (800094c <MX_TIM8_Init+0x120>)
 8000860:	4a3b      	ldr	r2, [pc, #236]	; (8000950 <MX_TIM8_Init+0x124>)
 8000862:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 50 - 1;
 8000864:	4b39      	ldr	r3, [pc, #228]	; (800094c <MX_TIM8_Init+0x120>)
 8000866:	2231      	movs	r2, #49	; 0x31
 8000868:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800086a:	4b38      	ldr	r3, [pc, #224]	; (800094c <MX_TIM8_Init+0x120>)
 800086c:	2200      	movs	r2, #0
 800086e:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 63999;
 8000870:	4b36      	ldr	r3, [pc, #216]	; (800094c <MX_TIM8_Init+0x120>)
 8000872:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8000876:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000878:	4b34      	ldr	r3, [pc, #208]	; (800094c <MX_TIM8_Init+0x120>)
 800087a:	2200      	movs	r2, #0
 800087c:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800087e:	4b33      	ldr	r3, [pc, #204]	; (800094c <MX_TIM8_Init+0x120>)
 8000880:	2200      	movs	r2, #0
 8000882:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000884:	4b31      	ldr	r3, [pc, #196]	; (800094c <MX_TIM8_Init+0x120>)
 8000886:	2200      	movs	r2, #0
 8000888:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800088a:	4830      	ldr	r0, [pc, #192]	; (800094c <MX_TIM8_Init+0x120>)
 800088c:	f003 fcf8 	bl	8004280 <HAL_TIM_PWM_Init>
 8000890:	4603      	mov	r3, r0
 8000892:	2b00      	cmp	r3, #0
 8000894:	d001      	beq.n	800089a <MX_TIM8_Init+0x6e>
  {
    Error_Handler();
 8000896:	f000 fb31 	bl	8000efc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800089a:	2300      	movs	r3, #0
 800089c:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800089e:	2300      	movs	r3, #0
 80008a0:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008a2:	2300      	movs	r3, #0
 80008a4:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80008a6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80008aa:	4619      	mov	r1, r3
 80008ac:	4827      	ldr	r0, [pc, #156]	; (800094c <MX_TIM8_Init+0x120>)
 80008ae:	f004 fdd5 	bl	800545c <HAL_TIMEx_MasterConfigSynchronization>
 80008b2:	4603      	mov	r3, r0
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d001      	beq.n	80008bc <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 80008b8:	f000 fb20 	bl	8000efc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008bc:	2360      	movs	r3, #96	; 0x60
 80008be:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 80008c0:	2300      	movs	r3, #0
 80008c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008c4:	2300      	movs	r3, #0
 80008c6:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80008c8:	2300      	movs	r3, #0
 80008ca:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008cc:	2300      	movs	r3, #0
 80008ce:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80008d0:	2300      	movs	r3, #0
 80008d2:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80008d4:	2300      	movs	r3, #0
 80008d6:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80008d8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80008dc:	2200      	movs	r2, #0
 80008de:	4619      	mov	r1, r3
 80008e0:	481a      	ldr	r0, [pc, #104]	; (800094c <MX_TIM8_Init+0x120>)
 80008e2:	f004 f8d7 	bl	8004a94 <HAL_TIM_PWM_ConfigChannel>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d001      	beq.n	80008f0 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 80008ec:	f000 fb06 	bl	8000efc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80008f0:	2300      	movs	r3, #0
 80008f2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80008f4:	2300      	movs	r3, #0
 80008f6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80008f8:	2300      	movs	r3, #0
 80008fa:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80008fc:	2300      	movs	r3, #0
 80008fe:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000900:	2300      	movs	r3, #0
 8000902:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000904:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000908:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800090a:	2300      	movs	r3, #0
 800090c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800090e:	2300      	movs	r3, #0
 8000910:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000912:	2300      	movs	r3, #0
 8000914:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000916:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800091a:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800091c:	2300      	movs	r3, #0
 800091e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000920:	2300      	movs	r3, #0
 8000922:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000924:	2300      	movs	r3, #0
 8000926:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8000928:	1d3b      	adds	r3, r7, #4
 800092a:	4619      	mov	r1, r3
 800092c:	4807      	ldr	r0, [pc, #28]	; (800094c <MX_TIM8_Init+0x120>)
 800092e:	f004 fe17 	bl	8005560 <HAL_TIMEx_ConfigBreakDeadTime>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	d001      	beq.n	800093c <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 8000938:	f000 fae0 	bl	8000efc <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 800093c:	4803      	ldr	r0, [pc, #12]	; (800094c <MX_TIM8_Init+0x120>)
 800093e:	f000 fc43 	bl	80011c8 <HAL_TIM_MspPostInit>

}
 8000942:	bf00      	nop
 8000944:	3760      	adds	r7, #96	; 0x60
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	20000418 	.word	0x20000418
 8000950:	40013400 	.word	0x40013400

08000954 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b098      	sub	sp, #96	; 0x60
 8000958:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800095a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800095e:	2200      	movs	r2, #0
 8000960:	601a      	str	r2, [r3, #0]
 8000962:	605a      	str	r2, [r3, #4]
 8000964:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000966:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800096a:	2200      	movs	r2, #0
 800096c:	601a      	str	r2, [r3, #0]
 800096e:	605a      	str	r2, [r3, #4]
 8000970:	609a      	str	r2, [r3, #8]
 8000972:	60da      	str	r2, [r3, #12]
 8000974:	611a      	str	r2, [r3, #16]
 8000976:	615a      	str	r2, [r3, #20]
 8000978:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800097a:	1d3b      	adds	r3, r7, #4
 800097c:	2234      	movs	r2, #52	; 0x34
 800097e:	2100      	movs	r1, #0
 8000980:	4618      	mov	r0, r3
 8000982:	f009 f8a4 	bl	8009ace <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8000986:	4b34      	ldr	r3, [pc, #208]	; (8000a58 <MX_TIM15_Init+0x104>)
 8000988:	4a34      	ldr	r2, [pc, #208]	; (8000a5c <MX_TIM15_Init+0x108>)
 800098a:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 50 - 1;
 800098c:	4b32      	ldr	r3, [pc, #200]	; (8000a58 <MX_TIM15_Init+0x104>)
 800098e:	2231      	movs	r2, #49	; 0x31
 8000990:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000992:	4b31      	ldr	r3, [pc, #196]	; (8000a58 <MX_TIM15_Init+0x104>)
 8000994:	2200      	movs	r2, #0
 8000996:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 63999;
 8000998:	4b2f      	ldr	r3, [pc, #188]	; (8000a58 <MX_TIM15_Init+0x104>)
 800099a:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 800099e:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009a0:	4b2d      	ldr	r3, [pc, #180]	; (8000a58 <MX_TIM15_Init+0x104>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80009a6:	4b2c      	ldr	r3, [pc, #176]	; (8000a58 <MX_TIM15_Init+0x104>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009ac:	4b2a      	ldr	r3, [pc, #168]	; (8000a58 <MX_TIM15_Init+0x104>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 80009b2:	4829      	ldr	r0, [pc, #164]	; (8000a58 <MX_TIM15_Init+0x104>)
 80009b4:	f003 fc64 	bl	8004280 <HAL_TIM_PWM_Init>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d001      	beq.n	80009c2 <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 80009be:	f000 fa9d 	bl	8000efc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009c2:	2300      	movs	r3, #0
 80009c4:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009c6:	2300      	movs	r3, #0
 80009c8:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80009ca:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80009ce:	4619      	mov	r1, r3
 80009d0:	4821      	ldr	r0, [pc, #132]	; (8000a58 <MX_TIM15_Init+0x104>)
 80009d2:	f004 fd43 	bl	800545c <HAL_TIMEx_MasterConfigSynchronization>
 80009d6:	4603      	mov	r3, r0
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d001      	beq.n	80009e0 <MX_TIM15_Init+0x8c>
  {
    Error_Handler();
 80009dc:	f000 fa8e 	bl	8000efc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009e0:	2360      	movs	r3, #96	; 0x60
 80009e2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 80009e4:	2300      	movs	r3, #0
 80009e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009e8:	2300      	movs	r3, #0
 80009ea:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80009ec:	2300      	movs	r3, #0
 80009ee:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009f0:	2300      	movs	r3, #0
 80009f2:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80009f4:	2300      	movs	r3, #0
 80009f6:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80009f8:	2300      	movs	r3, #0
 80009fa:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80009fc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000a00:	2204      	movs	r2, #4
 8000a02:	4619      	mov	r1, r3
 8000a04:	4814      	ldr	r0, [pc, #80]	; (8000a58 <MX_TIM15_Init+0x104>)
 8000a06:	f004 f845 	bl	8004a94 <HAL_TIM_PWM_ConfigChannel>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d001      	beq.n	8000a14 <MX_TIM15_Init+0xc0>
  {
    Error_Handler();
 8000a10:	f000 fa74 	bl	8000efc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000a14:	2300      	movs	r3, #0
 8000a16:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000a20:	2300      	movs	r3, #0
 8000a22:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000a24:	2300      	movs	r3, #0
 8000a26:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000a28:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a2c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000a32:	2300      	movs	r3, #0
 8000a34:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8000a36:	1d3b      	adds	r3, r7, #4
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4807      	ldr	r0, [pc, #28]	; (8000a58 <MX_TIM15_Init+0x104>)
 8000a3c:	f004 fd90 	bl	8005560 <HAL_TIMEx_ConfigBreakDeadTime>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d001      	beq.n	8000a4a <MX_TIM15_Init+0xf6>
  {
    Error_Handler();
 8000a46:	f000 fa59 	bl	8000efc <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8000a4a:	4803      	ldr	r0, [pc, #12]	; (8000a58 <MX_TIM15_Init+0x104>)
 8000a4c:	f000 fbbc 	bl	80011c8 <HAL_TIM_MspPostInit>

}
 8000a50:	bf00      	nop
 8000a52:	3760      	adds	r7, #96	; 0x60
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bd80      	pop	{r7, pc}
 8000a58:	200004b0 	.word	0x200004b0
 8000a5c:	40014000 	.word	0x40014000

08000a60 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b094      	sub	sp, #80	; 0x50
 8000a64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a66:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	601a      	str	r2, [r3, #0]
 8000a6e:	605a      	str	r2, [r3, #4]
 8000a70:	609a      	str	r2, [r3, #8]
 8000a72:	60da      	str	r2, [r3, #12]
 8000a74:	611a      	str	r2, [r3, #16]
 8000a76:	615a      	str	r2, [r3, #20]
 8000a78:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000a7a:	463b      	mov	r3, r7
 8000a7c:	2234      	movs	r2, #52	; 0x34
 8000a7e:	2100      	movs	r1, #0
 8000a80:	4618      	mov	r0, r3
 8000a82:	f009 f824 	bl	8009ace <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000a86:	4b31      	ldr	r3, [pc, #196]	; (8000b4c <MX_TIM16_Init+0xec>)
 8000a88:	4a31      	ldr	r2, [pc, #196]	; (8000b50 <MX_TIM16_Init+0xf0>)
 8000a8a:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 50 - 1;
 8000a8c:	4b2f      	ldr	r3, [pc, #188]	; (8000b4c <MX_TIM16_Init+0xec>)
 8000a8e:	2231      	movs	r2, #49	; 0x31
 8000a90:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a92:	4b2e      	ldr	r3, [pc, #184]	; (8000b4c <MX_TIM16_Init+0xec>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 63999;
 8000a98:	4b2c      	ldr	r3, [pc, #176]	; (8000b4c <MX_TIM16_Init+0xec>)
 8000a9a:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8000a9e:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000aa0:	4b2a      	ldr	r3, [pc, #168]	; (8000b4c <MX_TIM16_Init+0xec>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000aa6:	4b29      	ldr	r3, [pc, #164]	; (8000b4c <MX_TIM16_Init+0xec>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000aac:	4b27      	ldr	r3, [pc, #156]	; (8000b4c <MX_TIM16_Init+0xec>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000ab2:	4826      	ldr	r0, [pc, #152]	; (8000b4c <MX_TIM16_Init+0xec>)
 8000ab4:	f003 fb22 	bl	80040fc <HAL_TIM_Base_Init>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d001      	beq.n	8000ac2 <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 8000abe:	f000 fa1d 	bl	8000efc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8000ac2:	4822      	ldr	r0, [pc, #136]	; (8000b4c <MX_TIM16_Init+0xec>)
 8000ac4:	f003 fbdc 	bl	8004280 <HAL_TIM_PWM_Init>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d001      	beq.n	8000ad2 <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 8000ace:	f000 fa15 	bl	8000efc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ad2:	2360      	movs	r3, #96	; 0x60
 8000ad4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 0;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ada:	2300      	movs	r3, #0
 8000adc:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000aea:	2300      	movs	r3, #0
 8000aec:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000aee:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000af2:	2200      	movs	r2, #0
 8000af4:	4619      	mov	r1, r3
 8000af6:	4815      	ldr	r0, [pc, #84]	; (8000b4c <MX_TIM16_Init+0xec>)
 8000af8:	f003 ffcc 	bl	8004a94 <HAL_TIM_PWM_ConfigChannel>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d001      	beq.n	8000b06 <MX_TIM16_Init+0xa6>
  {
    Error_Handler();
 8000b02:	f000 f9fb 	bl	8000efc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000b06:	2300      	movs	r3, #0
 8000b08:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000b12:	2300      	movs	r3, #0
 8000b14:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000b16:	2300      	movs	r3, #0
 8000b18:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000b1a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b1e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000b20:	2300      	movs	r3, #0
 8000b22:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000b24:	2300      	movs	r3, #0
 8000b26:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8000b28:	463b      	mov	r3, r7
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	4807      	ldr	r0, [pc, #28]	; (8000b4c <MX_TIM16_Init+0xec>)
 8000b2e:	f004 fd17 	bl	8005560 <HAL_TIMEx_ConfigBreakDeadTime>
 8000b32:	4603      	mov	r3, r0
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d001      	beq.n	8000b3c <MX_TIM16_Init+0xdc>
  {
    Error_Handler();
 8000b38:	f000 f9e0 	bl	8000efc <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8000b3c:	4803      	ldr	r0, [pc, #12]	; (8000b4c <MX_TIM16_Init+0xec>)
 8000b3e:	f000 fb43 	bl	80011c8 <HAL_TIM_MspPostInit>

}
 8000b42:	bf00      	nop
 8000b44:	3750      	adds	r7, #80	; 0x50
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	20000678 	.word	0x20000678
 8000b50:	40014400 	.word	0x40014400

08000b54 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b094      	sub	sp, #80	; 0x50
 8000b58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b5a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000b5e:	2200      	movs	r2, #0
 8000b60:	601a      	str	r2, [r3, #0]
 8000b62:	605a      	str	r2, [r3, #4]
 8000b64:	609a      	str	r2, [r3, #8]
 8000b66:	60da      	str	r2, [r3, #12]
 8000b68:	611a      	str	r2, [r3, #16]
 8000b6a:	615a      	str	r2, [r3, #20]
 8000b6c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000b6e:	463b      	mov	r3, r7
 8000b70:	2234      	movs	r2, #52	; 0x34
 8000b72:	2100      	movs	r1, #0
 8000b74:	4618      	mov	r0, r3
 8000b76:	f008 ffaa 	bl	8009ace <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8000b7a:	4b31      	ldr	r3, [pc, #196]	; (8000c40 <MX_TIM17_Init+0xec>)
 8000b7c:	4a31      	ldr	r2, [pc, #196]	; (8000c44 <MX_TIM17_Init+0xf0>)
 8000b7e:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 50 - 1;
 8000b80:	4b2f      	ldr	r3, [pc, #188]	; (8000c40 <MX_TIM17_Init+0xec>)
 8000b82:	2231      	movs	r2, #49	; 0x31
 8000b84:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b86:	4b2e      	ldr	r3, [pc, #184]	; (8000c40 <MX_TIM17_Init+0xec>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 63999;
 8000b8c:	4b2c      	ldr	r3, [pc, #176]	; (8000c40 <MX_TIM17_Init+0xec>)
 8000b8e:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8000b92:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b94:	4b2a      	ldr	r3, [pc, #168]	; (8000c40 <MX_TIM17_Init+0xec>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8000b9a:	4b29      	ldr	r3, [pc, #164]	; (8000c40 <MX_TIM17_Init+0xec>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ba0:	4b27      	ldr	r3, [pc, #156]	; (8000c40 <MX_TIM17_Init+0xec>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8000ba6:	4826      	ldr	r0, [pc, #152]	; (8000c40 <MX_TIM17_Init+0xec>)
 8000ba8:	f003 faa8 	bl	80040fc <HAL_TIM_Base_Init>
 8000bac:	4603      	mov	r3, r0
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d001      	beq.n	8000bb6 <MX_TIM17_Init+0x62>
  {
    Error_Handler();
 8000bb2:	f000 f9a3 	bl	8000efc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 8000bb6:	4822      	ldr	r0, [pc, #136]	; (8000c40 <MX_TIM17_Init+0xec>)
 8000bb8:	f003 fb62 	bl	8004280 <HAL_TIM_PWM_Init>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d001      	beq.n	8000bc6 <MX_TIM17_Init+0x72>
  {
    Error_Handler();
 8000bc2:	f000 f99b 	bl	8000efc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000bc6:	2360      	movs	r3, #96	; 0x60
 8000bc8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 0;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000bde:	2300      	movs	r3, #0
 8000be0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000be2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000be6:	2200      	movs	r2, #0
 8000be8:	4619      	mov	r1, r3
 8000bea:	4815      	ldr	r0, [pc, #84]	; (8000c40 <MX_TIM17_Init+0xec>)
 8000bec:	f003 ff52 	bl	8004a94 <HAL_TIM_PWM_ConfigChannel>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d001      	beq.n	8000bfa <MX_TIM17_Init+0xa6>
  {
    Error_Handler();
 8000bf6:	f000 f981 	bl	8000efc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000c02:	2300      	movs	r3, #0
 8000c04:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000c06:	2300      	movs	r3, #0
 8000c08:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000c0e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c12:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000c14:	2300      	movs	r3, #0
 8000c16:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8000c1c:	463b      	mov	r3, r7
 8000c1e:	4619      	mov	r1, r3
 8000c20:	4807      	ldr	r0, [pc, #28]	; (8000c40 <MX_TIM17_Init+0xec>)
 8000c22:	f004 fc9d 	bl	8005560 <HAL_TIMEx_ConfigBreakDeadTime>
 8000c26:	4603      	mov	r3, r0
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d001      	beq.n	8000c30 <MX_TIM17_Init+0xdc>
  {
    Error_Handler();
 8000c2c:	f000 f966 	bl	8000efc <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 8000c30:	4803      	ldr	r0, [pc, #12]	; (8000c40 <MX_TIM17_Init+0xec>)
 8000c32:	f000 fac9 	bl	80011c8 <HAL_TIM_MspPostInit>

}
 8000c36:	bf00      	nop
 8000c38:	3750      	adds	r7, #80	; 0x50
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	200004fc 	.word	0x200004fc
 8000c44:	40014800 	.word	0x40014800

08000c48 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b088      	sub	sp, #32
 8000c4c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c4e:	f107 030c 	add.w	r3, r7, #12
 8000c52:	2200      	movs	r2, #0
 8000c54:	601a      	str	r2, [r3, #0]
 8000c56:	605a      	str	r2, [r3, #4]
 8000c58:	609a      	str	r2, [r3, #8]
 8000c5a:	60da      	str	r2, [r3, #12]
 8000c5c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c5e:	4b18      	ldr	r3, [pc, #96]	; (8000cc0 <MX_GPIO_Init+0x78>)
 8000c60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c62:	4a17      	ldr	r2, [pc, #92]	; (8000cc0 <MX_GPIO_Init+0x78>)
 8000c64:	f043 0301 	orr.w	r3, r3, #1
 8000c68:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c6a:	4b15      	ldr	r3, [pc, #84]	; (8000cc0 <MX_GPIO_Init+0x78>)
 8000c6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c6e:	f003 0301 	and.w	r3, r3, #1
 8000c72:	60bb      	str	r3, [r7, #8]
 8000c74:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c76:	4b12      	ldr	r3, [pc, #72]	; (8000cc0 <MX_GPIO_Init+0x78>)
 8000c78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c7a:	4a11      	ldr	r2, [pc, #68]	; (8000cc0 <MX_GPIO_Init+0x78>)
 8000c7c:	f043 0302 	orr.w	r3, r3, #2
 8000c80:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c82:	4b0f      	ldr	r3, [pc, #60]	; (8000cc0 <MX_GPIO_Init+0x78>)
 8000c84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c86:	f003 0302 	and.w	r3, r3, #2
 8000c8a:	607b      	str	r3, [r7, #4]
 8000c8c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000c8e:	2200      	movs	r2, #0
 8000c90:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c94:	480b      	ldr	r0, [pc, #44]	; (8000cc4 <MX_GPIO_Init+0x7c>)
 8000c96:	f000 fef7 	bl	8001a88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000c9a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c9e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ca0:	2301      	movs	r3, #1
 8000ca2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000cac:	f107 030c 	add.w	r3, r7, #12
 8000cb0:	4619      	mov	r1, r3
 8000cb2:	4804      	ldr	r0, [pc, #16]	; (8000cc4 <MX_GPIO_Init+0x7c>)
 8000cb4:	f000 fd66 	bl	8001784 <HAL_GPIO_Init>

}
 8000cb8:	bf00      	nop
 8000cba:	3720      	adds	r7, #32
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}
 8000cc0:	40021000 	.word	0x40021000
 8000cc4:	48000400 	.word	0x48000400

08000cc8 <PID>:

/* USER CODE BEGIN 4 */

int32_t PID(Motor* motor, int16_t position) {
 8000cc8:	b480      	push	{r7}
 8000cca:	b087      	sub	sp, #28
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
 8000cd0:	460b      	mov	r3, r1
 8000cd2:	807b      	strh	r3, [r7, #2]
	motor->position = position; // Update motor position from encoder output
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	887a      	ldrh	r2, [r7, #2]
 8000cd8:	81da      	strh	r2, [r3, #14]
	motor->positionChange = ( position - motor->positionPrev );
 8000cda:	887a      	ldrh	r2, [r7, #2]
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8000ce2:	b29b      	uxth	r3, r3
 8000ce4:	1ad3      	subs	r3, r2, r3
 8000ce6:	b29b      	uxth	r3, r3
 8000ce8:	b21a      	sxth	r2, r3
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	825a      	strh	r2, [r3, #18]
	motor->error = ( motor->setpoint - motor->positionChange ); // Update current PID error
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	881a      	ldrh	r2, [r3, #0]
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8000cf8:	b29b      	uxth	r3, r3
 8000cfa:	1ad3      	subs	r3, r2, r3
 8000cfc:	b29b      	uxth	r3, r3
 8000cfe:	b21a      	sxth	r2, r3
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	829a      	strh	r2, [r3, #20]
	motor->sumOfErrors += motor->error; // Add current PID error to PID sum of errors
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8000d0a:	b29a      	uxth	r2, r3
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8000d12:	b29b      	uxth	r3, r3
 8000d14:	4413      	add	r3, r2
 8000d16:	b29b      	uxth	r3, r3
 8000d18:	b21a      	sxth	r2, r3
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	82da      	strh	r2, [r3, #22]
	motor->positionPrev = position;
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	887a      	ldrh	r2, [r7, #2]
 8000d22:	821a      	strh	r2, [r3, #16]
	int32_t p = motor->pGain * motor->error;
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8000d2a:	461a      	mov	r2, r3
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8000d32:	fb03 f302 	mul.w	r3, r3, r2
 8000d36:	617b      	str	r3, [r7, #20]
	int32_t i = motor->iGain * motor->sumOfErrors;
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8000d3e:	461a      	mov	r2, r3
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8000d46:	fb03 f302 	mul.w	r3, r3, r2
 8000d4a:	613b      	str	r3, [r7, #16]
	int32_t d = motor->dGain * motor->positionChange;
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8000d52:	461a      	mov	r2, r3
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8000d5a:	fb03 f302 	mul.w	r3, r3, r2
 8000d5e:	60fb      	str	r3, [r7, #12]
	if (motor->setpoint == 0) { // Speed should be zero, reset all PID calculations
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	881b      	ldrh	r3, [r3, #0]
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d10b      	bne.n	8000d80 <PID+0xb8>
		motor->error = 0;
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	829a      	strh	r2, [r3, #20]
		motor->sumOfErrors = 0;
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	2200      	movs	r2, #0
 8000d72:	82da      	strh	r2, [r3, #22]
		p = 0;
 8000d74:	2300      	movs	r3, #0
 8000d76:	617b      	str	r3, [r7, #20]
		i = 0;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	613b      	str	r3, [r7, #16]
		d = 0;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	60fb      	str	r3, [r7, #12]
	}
	return (p + i + d); // Return PID controller output (speed)
 8000d80:	697a      	ldr	r2, [r7, #20]
 8000d82:	693b      	ldr	r3, [r7, #16]
 8000d84:	441a      	add	r2, r3
 8000d86:	68fb      	ldr	r3, [r7, #12]
 8000d88:	4413      	add	r3, r2
}
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	371c      	adds	r7, #28
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d94:	4770      	bx	lr
	...

08000d98 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b082      	sub	sp, #8
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
	// Second motor <=> J6 encoder socket <=> SECOND ENCODER
	// Third motor <=> J7 encoder socket <=> THIRD ENCODER
	// First motor <=> J3 encoder socket <=> FIRST ENCODER

	// Calculate PID and save variable to motor speed
	motor1.speed = PID(&motor1, (int16_t)TIM1->CNT);
 8000da0:	4b4d      	ldr	r3, [pc, #308]	; (8000ed8 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8000da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000da4:	b21b      	sxth	r3, r3
 8000da6:	4619      	mov	r1, r3
 8000da8:	484c      	ldr	r0, [pc, #304]	; (8000edc <HAL_TIM_PeriodElapsedCallback+0x144>)
 8000daa:	f7ff ff8d 	bl	8000cc8 <PID>
 8000dae:	4602      	mov	r2, r0
 8000db0:	4b4a      	ldr	r3, [pc, #296]	; (8000edc <HAL_TIM_PeriodElapsedCallback+0x144>)
 8000db2:	605a      	str	r2, [r3, #4]
	motor2.speed = PID(&motor2, (int16_t)TIM3->CNT);
 8000db4:	4b4a      	ldr	r3, [pc, #296]	; (8000ee0 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8000db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000db8:	b21b      	sxth	r3, r3
 8000dba:	4619      	mov	r1, r3
 8000dbc:	4849      	ldr	r0, [pc, #292]	; (8000ee4 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8000dbe:	f7ff ff83 	bl	8000cc8 <PID>
 8000dc2:	4602      	mov	r2, r0
 8000dc4:	4b47      	ldr	r3, [pc, #284]	; (8000ee4 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8000dc6:	605a      	str	r2, [r3, #4]
	motor3.speed = PID(&motor3, (int16_t)TIM4->CNT);
 8000dc8:	4b47      	ldr	r3, [pc, #284]	; (8000ee8 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8000dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dcc:	b21b      	sxth	r3, r3
 8000dce:	4619      	mov	r1, r3
 8000dd0:	4846      	ldr	r0, [pc, #280]	; (8000eec <HAL_TIM_PeriodElapsedCallback+0x154>)
 8000dd2:	f7ff ff79 	bl	8000cc8 <PID>
 8000dd6:	4602      	mov	r2, r0
 8000dd8:	4b44      	ldr	r3, [pc, #272]	; (8000eec <HAL_TIM_PeriodElapsedCallback+0x154>)
 8000dda:	605a      	str	r2, [r3, #4]

	// Overflow check
	if (motor1.speed > 65535) {
 8000ddc:	4b3f      	ldr	r3, [pc, #252]	; (8000edc <HAL_TIM_PeriodElapsedCallback+0x144>)
 8000dde:	685b      	ldr	r3, [r3, #4]
 8000de0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000de4:	db04      	blt.n	8000df0 <HAL_TIM_PeriodElapsedCallback+0x58>
		motor1.speed = 65535;
 8000de6:	4b3d      	ldr	r3, [pc, #244]	; (8000edc <HAL_TIM_PeriodElapsedCallback+0x144>)
 8000de8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000dec:	605a      	str	r2, [r3, #4]
 8000dee:	e007      	b.n	8000e00 <HAL_TIM_PeriodElapsedCallback+0x68>
	}
	else if (motor1.speed < -65535) {
 8000df0:	4b3a      	ldr	r3, [pc, #232]	; (8000edc <HAL_TIM_PeriodElapsedCallback+0x144>)
 8000df2:	685b      	ldr	r3, [r3, #4]
 8000df4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8000df8:	dc02      	bgt.n	8000e00 <HAL_TIM_PeriodElapsedCallback+0x68>
		motor1.speed = -65535;
 8000dfa:	4b38      	ldr	r3, [pc, #224]	; (8000edc <HAL_TIM_PeriodElapsedCallback+0x144>)
 8000dfc:	4a3c      	ldr	r2, [pc, #240]	; (8000ef0 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8000dfe:	605a      	str	r2, [r3, #4]
	}

	if (motor2.speed > 65535) {
 8000e00:	4b38      	ldr	r3, [pc, #224]	; (8000ee4 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8000e02:	685b      	ldr	r3, [r3, #4]
 8000e04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e08:	db04      	blt.n	8000e14 <HAL_TIM_PeriodElapsedCallback+0x7c>
		motor2.speed = 65535;
 8000e0a:	4b36      	ldr	r3, [pc, #216]	; (8000ee4 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8000e0c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e10:	605a      	str	r2, [r3, #4]
 8000e12:	e007      	b.n	8000e24 <HAL_TIM_PeriodElapsedCallback+0x8c>
	}
	else if (motor2.speed < -65535) {
 8000e14:	4b33      	ldr	r3, [pc, #204]	; (8000ee4 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8000e16:	685b      	ldr	r3, [r3, #4]
 8000e18:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8000e1c:	dc02      	bgt.n	8000e24 <HAL_TIM_PeriodElapsedCallback+0x8c>
		motor2.speed = -65535;
 8000e1e:	4b31      	ldr	r3, [pc, #196]	; (8000ee4 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8000e20:	4a33      	ldr	r2, [pc, #204]	; (8000ef0 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8000e22:	605a      	str	r2, [r3, #4]
	}

	if (motor3.speed > 65535) {
 8000e24:	4b31      	ldr	r3, [pc, #196]	; (8000eec <HAL_TIM_PeriodElapsedCallback+0x154>)
 8000e26:	685b      	ldr	r3, [r3, #4]
 8000e28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e2c:	db04      	blt.n	8000e38 <HAL_TIM_PeriodElapsedCallback+0xa0>
		motor3.speed = 65535;
 8000e2e:	4b2f      	ldr	r3, [pc, #188]	; (8000eec <HAL_TIM_PeriodElapsedCallback+0x154>)
 8000e30:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e34:	605a      	str	r2, [r3, #4]
 8000e36:	e007      	b.n	8000e48 <HAL_TIM_PeriodElapsedCallback+0xb0>
	}
	else if (motor3.speed < -65535) {
 8000e38:	4b2c      	ldr	r3, [pc, #176]	; (8000eec <HAL_TIM_PeriodElapsedCallback+0x154>)
 8000e3a:	685b      	ldr	r3, [r3, #4]
 8000e3c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8000e40:	dc02      	bgt.n	8000e48 <HAL_TIM_PeriodElapsedCallback+0xb0>
		motor3.speed = -65535;
 8000e42:	4b2a      	ldr	r3, [pc, #168]	; (8000eec <HAL_TIM_PeriodElapsedCallback+0x154>)
 8000e44:	4a2a      	ldr	r2, [pc, #168]	; (8000ef0 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8000e46:	605a      	str	r2, [r3, #4]
	}

	// Set motor speed to PID controller output
	if (motor1.speed > 0) {
 8000e48:	4b24      	ldr	r3, [pc, #144]	; (8000edc <HAL_TIM_PeriodElapsedCallback+0x144>)
 8000e4a:	685b      	ldr	r3, [r3, #4]
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	dd09      	ble.n	8000e64 <HAL_TIM_PeriodElapsedCallback+0xcc>
		TIM2->CCR1 = motor1.speed;
 8000e50:	4b22      	ldr	r3, [pc, #136]	; (8000edc <HAL_TIM_PeriodElapsedCallback+0x144>)
 8000e52:	685a      	ldr	r2, [r3, #4]
 8000e54:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e58:	635a      	str	r2, [r3, #52]	; 0x34
		TIM2->CCR2 = 0;
 8000e5a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e5e:	2200      	movs	r2, #0
 8000e60:	639a      	str	r2, [r3, #56]	; 0x38
 8000e62:	e009      	b.n	8000e78 <HAL_TIM_PeriodElapsedCallback+0xe0>
	}
	else {
		TIM2->CCR1 = 0;
 8000e64:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e68:	2200      	movs	r2, #0
 8000e6a:	635a      	str	r2, [r3, #52]	; 0x34
		TIM2->CCR2 = -motor1.speed;
 8000e6c:	4b1b      	ldr	r3, [pc, #108]	; (8000edc <HAL_TIM_PeriodElapsedCallback+0x144>)
 8000e6e:	685b      	ldr	r3, [r3, #4]
 8000e70:	425a      	negs	r2, r3
 8000e72:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e76:	639a      	str	r2, [r3, #56]	; 0x38
	}

	if (motor2.speed > 0) {
 8000e78:	4b1a      	ldr	r3, [pc, #104]	; (8000ee4 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8000e7a:	685b      	ldr	r3, [r3, #4]
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	dd09      	ble.n	8000e94 <HAL_TIM_PeriodElapsedCallback+0xfc>
		TIM2->CCR3 = motor2.speed;
 8000e80:	4b18      	ldr	r3, [pc, #96]	; (8000ee4 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8000e82:	685a      	ldr	r2, [r3, #4]
 8000e84:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e88:	63da      	str	r2, [r3, #60]	; 0x3c
		TIM2->CCR4 = 0;
 8000e8a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e8e:	2200      	movs	r2, #0
 8000e90:	641a      	str	r2, [r3, #64]	; 0x40
 8000e92:	e009      	b.n	8000ea8 <HAL_TIM_PeriodElapsedCallback+0x110>
	}
	else {
		TIM2->CCR3 = 0;
 8000e94:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e98:	2200      	movs	r2, #0
 8000e9a:	63da      	str	r2, [r3, #60]	; 0x3c
		TIM2->CCR4 = -motor2.speed;
 8000e9c:	4b11      	ldr	r3, [pc, #68]	; (8000ee4 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8000e9e:	685b      	ldr	r3, [r3, #4]
 8000ea0:	425a      	negs	r2, r3
 8000ea2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ea6:	641a      	str	r2, [r3, #64]	; 0x40
	}

	if (motor3.speed > 0) {
 8000ea8:	4b10      	ldr	r3, [pc, #64]	; (8000eec <HAL_TIM_PeriodElapsedCallback+0x154>)
 8000eaa:	685b      	ldr	r3, [r3, #4]
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	dd07      	ble.n	8000ec0 <HAL_TIM_PeriodElapsedCallback+0x128>
		TIM16->CCR1 = motor3.speed;
 8000eb0:	4b0e      	ldr	r3, [pc, #56]	; (8000eec <HAL_TIM_PeriodElapsedCallback+0x154>)
 8000eb2:	685a      	ldr	r2, [r3, #4]
 8000eb4:	4b0f      	ldr	r3, [pc, #60]	; (8000ef4 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8000eb6:	635a      	str	r2, [r3, #52]	; 0x34
		TIM17->CCR1 = 0;
 8000eb8:	4b0f      	ldr	r3, [pc, #60]	; (8000ef8 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	635a      	str	r2, [r3, #52]	; 0x34
	}
	else {
		TIM16->CCR1 = 0;
		TIM17->CCR1 = -motor3.speed;
	}
}
 8000ebe:	e007      	b.n	8000ed0 <HAL_TIM_PeriodElapsedCallback+0x138>
		TIM16->CCR1 = 0;
 8000ec0:	4b0c      	ldr	r3, [pc, #48]	; (8000ef4 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	635a      	str	r2, [r3, #52]	; 0x34
		TIM17->CCR1 = -motor3.speed;
 8000ec6:	4b09      	ldr	r3, [pc, #36]	; (8000eec <HAL_TIM_PeriodElapsedCallback+0x154>)
 8000ec8:	685b      	ldr	r3, [r3, #4]
 8000eca:	425a      	negs	r2, r3
 8000ecc:	4b0a      	ldr	r3, [pc, #40]	; (8000ef8 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8000ece:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000ed0:	bf00      	nop
 8000ed2:	3708      	adds	r7, #8
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	40012c00 	.word	0x40012c00
 8000edc:	20000000 	.word	0x20000000
 8000ee0:	40000400 	.word	0x40000400
 8000ee4:	20000018 	.word	0x20000018
 8000ee8:	40000800 	.word	0x40000800
 8000eec:	20000030 	.word	0x20000030
 8000ef0:	ffff0001 	.word	0xffff0001
 8000ef4:	40014400 	.word	0x40014400
 8000ef8:	40014800 	.word	0x40014800

08000efc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000f00:	bf00      	nop
 8000f02:	46bd      	mov	sp, r7
 8000f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f08:	4770      	bx	lr
	...

08000f0c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b082      	sub	sp, #8
 8000f10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f12:	4b0f      	ldr	r3, [pc, #60]	; (8000f50 <HAL_MspInit+0x44>)
 8000f14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f16:	4a0e      	ldr	r2, [pc, #56]	; (8000f50 <HAL_MspInit+0x44>)
 8000f18:	f043 0301 	orr.w	r3, r3, #1
 8000f1c:	6613      	str	r3, [r2, #96]	; 0x60
 8000f1e:	4b0c      	ldr	r3, [pc, #48]	; (8000f50 <HAL_MspInit+0x44>)
 8000f20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f22:	f003 0301 	and.w	r3, r3, #1
 8000f26:	607b      	str	r3, [r7, #4]
 8000f28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f2a:	4b09      	ldr	r3, [pc, #36]	; (8000f50 <HAL_MspInit+0x44>)
 8000f2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f2e:	4a08      	ldr	r2, [pc, #32]	; (8000f50 <HAL_MspInit+0x44>)
 8000f30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f34:	6593      	str	r3, [r2, #88]	; 0x58
 8000f36:	4b06      	ldr	r3, [pc, #24]	; (8000f50 <HAL_MspInit+0x44>)
 8000f38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f3e:	603b      	str	r3, [r7, #0]
 8000f40:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000f42:	f002 f9df 	bl	8003304 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f46:	bf00      	nop
 8000f48:	3708      	adds	r7, #8
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	40021000 	.word	0x40021000

08000f54 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b08e      	sub	sp, #56	; 0x38
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f60:	2200      	movs	r2, #0
 8000f62:	601a      	str	r2, [r3, #0]
 8000f64:	605a      	str	r2, [r3, #4]
 8000f66:	609a      	str	r2, [r3, #8]
 8000f68:	60da      	str	r2, [r3, #12]
 8000f6a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	4a46      	ldr	r2, [pc, #280]	; (800108c <HAL_TIM_Encoder_MspInit+0x138>)
 8000f72:	4293      	cmp	r3, r2
 8000f74:	d12a      	bne.n	8000fcc <HAL_TIM_Encoder_MspInit+0x78>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000f76:	4b46      	ldr	r3, [pc, #280]	; (8001090 <HAL_TIM_Encoder_MspInit+0x13c>)
 8000f78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f7a:	4a45      	ldr	r2, [pc, #276]	; (8001090 <HAL_TIM_Encoder_MspInit+0x13c>)
 8000f7c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000f80:	6613      	str	r3, [r2, #96]	; 0x60
 8000f82:	4b43      	ldr	r3, [pc, #268]	; (8001090 <HAL_TIM_Encoder_MspInit+0x13c>)
 8000f84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f86:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000f8a:	623b      	str	r3, [r7, #32]
 8000f8c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f8e:	4b40      	ldr	r3, [pc, #256]	; (8001090 <HAL_TIM_Encoder_MspInit+0x13c>)
 8000f90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f92:	4a3f      	ldr	r2, [pc, #252]	; (8001090 <HAL_TIM_Encoder_MspInit+0x13c>)
 8000f94:	f043 0301 	orr.w	r3, r3, #1
 8000f98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f9a:	4b3d      	ldr	r3, [pc, #244]	; (8001090 <HAL_TIM_Encoder_MspInit+0x13c>)
 8000f9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f9e:	f003 0301 	and.w	r3, r3, #1
 8000fa2:	61fb      	str	r3, [r7, #28]
 8000fa4:	69fb      	ldr	r3, [r7, #28]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000fa6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000faa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fac:	2302      	movs	r3, #2
 8000fae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8000fb8:	2306      	movs	r3, #6
 8000fba:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fbc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fc6:	f000 fbdd 	bl	8001784 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000fca:	e05a      	b.n	8001082 <HAL_TIM_Encoder_MspInit+0x12e>
  else if(htim_encoder->Instance==TIM3)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	4a30      	ldr	r2, [pc, #192]	; (8001094 <HAL_TIM_Encoder_MspInit+0x140>)
 8000fd2:	4293      	cmp	r3, r2
 8000fd4:	d128      	bne.n	8001028 <HAL_TIM_Encoder_MspInit+0xd4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000fd6:	4b2e      	ldr	r3, [pc, #184]	; (8001090 <HAL_TIM_Encoder_MspInit+0x13c>)
 8000fd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fda:	4a2d      	ldr	r2, [pc, #180]	; (8001090 <HAL_TIM_Encoder_MspInit+0x13c>)
 8000fdc:	f043 0302 	orr.w	r3, r3, #2
 8000fe0:	6593      	str	r3, [r2, #88]	; 0x58
 8000fe2:	4b2b      	ldr	r3, [pc, #172]	; (8001090 <HAL_TIM_Encoder_MspInit+0x13c>)
 8000fe4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fe6:	f003 0302 	and.w	r3, r3, #2
 8000fea:	61bb      	str	r3, [r7, #24]
 8000fec:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fee:	4b28      	ldr	r3, [pc, #160]	; (8001090 <HAL_TIM_Encoder_MspInit+0x13c>)
 8000ff0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ff2:	4a27      	ldr	r2, [pc, #156]	; (8001090 <HAL_TIM_Encoder_MspInit+0x13c>)
 8000ff4:	f043 0302 	orr.w	r3, r3, #2
 8000ff8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ffa:	4b25      	ldr	r3, [pc, #148]	; (8001090 <HAL_TIM_Encoder_MspInit+0x13c>)
 8000ffc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ffe:	f003 0302 	and.w	r3, r3, #2
 8001002:	617b      	str	r3, [r7, #20]
 8001004:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001006:	2330      	movs	r3, #48	; 0x30
 8001008:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800100a:	2302      	movs	r3, #2
 800100c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100e:	2300      	movs	r3, #0
 8001010:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001012:	2300      	movs	r3, #0
 8001014:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001016:	2302      	movs	r3, #2
 8001018:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800101a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800101e:	4619      	mov	r1, r3
 8001020:	481d      	ldr	r0, [pc, #116]	; (8001098 <HAL_TIM_Encoder_MspInit+0x144>)
 8001022:	f000 fbaf 	bl	8001784 <HAL_GPIO_Init>
}
 8001026:	e02c      	b.n	8001082 <HAL_TIM_Encoder_MspInit+0x12e>
  else if(htim_encoder->Instance==TIM4)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4a1b      	ldr	r2, [pc, #108]	; (800109c <HAL_TIM_Encoder_MspInit+0x148>)
 800102e:	4293      	cmp	r3, r2
 8001030:	d127      	bne.n	8001082 <HAL_TIM_Encoder_MspInit+0x12e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001032:	4b17      	ldr	r3, [pc, #92]	; (8001090 <HAL_TIM_Encoder_MspInit+0x13c>)
 8001034:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001036:	4a16      	ldr	r2, [pc, #88]	; (8001090 <HAL_TIM_Encoder_MspInit+0x13c>)
 8001038:	f043 0304 	orr.w	r3, r3, #4
 800103c:	6593      	str	r3, [r2, #88]	; 0x58
 800103e:	4b14      	ldr	r3, [pc, #80]	; (8001090 <HAL_TIM_Encoder_MspInit+0x13c>)
 8001040:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001042:	f003 0304 	and.w	r3, r3, #4
 8001046:	613b      	str	r3, [r7, #16]
 8001048:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800104a:	4b11      	ldr	r3, [pc, #68]	; (8001090 <HAL_TIM_Encoder_MspInit+0x13c>)
 800104c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800104e:	4a10      	ldr	r2, [pc, #64]	; (8001090 <HAL_TIM_Encoder_MspInit+0x13c>)
 8001050:	f043 0302 	orr.w	r3, r3, #2
 8001054:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001056:	4b0e      	ldr	r3, [pc, #56]	; (8001090 <HAL_TIM_Encoder_MspInit+0x13c>)
 8001058:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800105a:	f003 0302 	and.w	r3, r3, #2
 800105e:	60fb      	str	r3, [r7, #12]
 8001060:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001062:	23c0      	movs	r3, #192	; 0xc0
 8001064:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001066:	2302      	movs	r3, #2
 8001068:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106a:	2300      	movs	r3, #0
 800106c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800106e:	2300      	movs	r3, #0
 8001070:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001072:	2302      	movs	r3, #2
 8001074:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001076:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800107a:	4619      	mov	r1, r3
 800107c:	4806      	ldr	r0, [pc, #24]	; (8001098 <HAL_TIM_Encoder_MspInit+0x144>)
 800107e:	f000 fb81 	bl	8001784 <HAL_GPIO_Init>
}
 8001082:	bf00      	nop
 8001084:	3738      	adds	r7, #56	; 0x38
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	40012c00 	.word	0x40012c00
 8001090:	40021000 	.word	0x40021000
 8001094:	40000400 	.word	0x40000400
 8001098:	48000400 	.word	0x48000400
 800109c:	40000800 	.word	0x40000800

080010a0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80010a0:	b480      	push	{r7}
 80010a2:	b087      	sub	sp, #28
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80010b0:	d10c      	bne.n	80010cc <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80010b2:	4b1b      	ldr	r3, [pc, #108]	; (8001120 <HAL_TIM_PWM_MspInit+0x80>)
 80010b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010b6:	4a1a      	ldr	r2, [pc, #104]	; (8001120 <HAL_TIM_PWM_MspInit+0x80>)
 80010b8:	f043 0301 	orr.w	r3, r3, #1
 80010bc:	6593      	str	r3, [r2, #88]	; 0x58
 80010be:	4b18      	ldr	r3, [pc, #96]	; (8001120 <HAL_TIM_PWM_MspInit+0x80>)
 80010c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010c2:	f003 0301 	and.w	r3, r3, #1
 80010c6:	617b      	str	r3, [r7, #20]
 80010c8:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 80010ca:	e022      	b.n	8001112 <HAL_TIM_PWM_MspInit+0x72>
  else if(htim_pwm->Instance==TIM8)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	4a14      	ldr	r2, [pc, #80]	; (8001124 <HAL_TIM_PWM_MspInit+0x84>)
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d10c      	bne.n	80010f0 <HAL_TIM_PWM_MspInit+0x50>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80010d6:	4b12      	ldr	r3, [pc, #72]	; (8001120 <HAL_TIM_PWM_MspInit+0x80>)
 80010d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010da:	4a11      	ldr	r2, [pc, #68]	; (8001120 <HAL_TIM_PWM_MspInit+0x80>)
 80010dc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80010e0:	6613      	str	r3, [r2, #96]	; 0x60
 80010e2:	4b0f      	ldr	r3, [pc, #60]	; (8001120 <HAL_TIM_PWM_MspInit+0x80>)
 80010e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010e6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80010ea:	613b      	str	r3, [r7, #16]
 80010ec:	693b      	ldr	r3, [r7, #16]
}
 80010ee:	e010      	b.n	8001112 <HAL_TIM_PWM_MspInit+0x72>
  else if(htim_pwm->Instance==TIM15)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	4a0c      	ldr	r2, [pc, #48]	; (8001128 <HAL_TIM_PWM_MspInit+0x88>)
 80010f6:	4293      	cmp	r3, r2
 80010f8:	d10b      	bne.n	8001112 <HAL_TIM_PWM_MspInit+0x72>
    __HAL_RCC_TIM15_CLK_ENABLE();
 80010fa:	4b09      	ldr	r3, [pc, #36]	; (8001120 <HAL_TIM_PWM_MspInit+0x80>)
 80010fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010fe:	4a08      	ldr	r2, [pc, #32]	; (8001120 <HAL_TIM_PWM_MspInit+0x80>)
 8001100:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001104:	6613      	str	r3, [r2, #96]	; 0x60
 8001106:	4b06      	ldr	r3, [pc, #24]	; (8001120 <HAL_TIM_PWM_MspInit+0x80>)
 8001108:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800110a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800110e:	60fb      	str	r3, [r7, #12]
 8001110:	68fb      	ldr	r3, [r7, #12]
}
 8001112:	bf00      	nop
 8001114:	371c      	adds	r7, #28
 8001116:	46bd      	mov	sp, r7
 8001118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111c:	4770      	bx	lr
 800111e:	bf00      	nop
 8001120:	40021000 	.word	0x40021000
 8001124:	40013400 	.word	0x40013400
 8001128:	40014000 	.word	0x40014000

0800112c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b086      	sub	sp, #24
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	4a1f      	ldr	r2, [pc, #124]	; (80011b8 <HAL_TIM_Base_MspInit+0x8c>)
 800113a:	4293      	cmp	r3, r2
 800113c:	d114      	bne.n	8001168 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800113e:	4b1f      	ldr	r3, [pc, #124]	; (80011bc <HAL_TIM_Base_MspInit+0x90>)
 8001140:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001142:	4a1e      	ldr	r2, [pc, #120]	; (80011bc <HAL_TIM_Base_MspInit+0x90>)
 8001144:	f043 0310 	orr.w	r3, r3, #16
 8001148:	6593      	str	r3, [r2, #88]	; 0x58
 800114a:	4b1c      	ldr	r3, [pc, #112]	; (80011bc <HAL_TIM_Base_MspInit+0x90>)
 800114c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800114e:	f003 0310 	and.w	r3, r3, #16
 8001152:	617b      	str	r3, [r7, #20]
 8001154:	697b      	ldr	r3, [r7, #20]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001156:	2200      	movs	r2, #0
 8001158:	2100      	movs	r1, #0
 800115a:	2036      	movs	r0, #54	; 0x36
 800115c:	f000 fadd 	bl	800171a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001160:	2036      	movs	r0, #54	; 0x36
 8001162:	f000 faf4 	bl	800174e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8001166:	e022      	b.n	80011ae <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM16)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	4a14      	ldr	r2, [pc, #80]	; (80011c0 <HAL_TIM_Base_MspInit+0x94>)
 800116e:	4293      	cmp	r3, r2
 8001170:	d10c      	bne.n	800118c <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001172:	4b12      	ldr	r3, [pc, #72]	; (80011bc <HAL_TIM_Base_MspInit+0x90>)
 8001174:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001176:	4a11      	ldr	r2, [pc, #68]	; (80011bc <HAL_TIM_Base_MspInit+0x90>)
 8001178:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800117c:	6613      	str	r3, [r2, #96]	; 0x60
 800117e:	4b0f      	ldr	r3, [pc, #60]	; (80011bc <HAL_TIM_Base_MspInit+0x90>)
 8001180:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001182:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001186:	613b      	str	r3, [r7, #16]
 8001188:	693b      	ldr	r3, [r7, #16]
}
 800118a:	e010      	b.n	80011ae <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM17)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	4a0c      	ldr	r2, [pc, #48]	; (80011c4 <HAL_TIM_Base_MspInit+0x98>)
 8001192:	4293      	cmp	r3, r2
 8001194:	d10b      	bne.n	80011ae <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8001196:	4b09      	ldr	r3, [pc, #36]	; (80011bc <HAL_TIM_Base_MspInit+0x90>)
 8001198:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800119a:	4a08      	ldr	r2, [pc, #32]	; (80011bc <HAL_TIM_Base_MspInit+0x90>)
 800119c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011a0:	6613      	str	r3, [r2, #96]	; 0x60
 80011a2:	4b06      	ldr	r3, [pc, #24]	; (80011bc <HAL_TIM_Base_MspInit+0x90>)
 80011a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80011aa:	60fb      	str	r3, [r7, #12]
 80011ac:	68fb      	ldr	r3, [r7, #12]
}
 80011ae:	bf00      	nop
 80011b0:	3718      	adds	r7, #24
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	40001000 	.word	0x40001000
 80011bc:	40021000 	.word	0x40021000
 80011c0:	40014400 	.word	0x40014400
 80011c4:	40014800 	.word	0x40014800

080011c8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b08c      	sub	sp, #48	; 0x30
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011d0:	f107 031c 	add.w	r3, r7, #28
 80011d4:	2200      	movs	r2, #0
 80011d6:	601a      	str	r2, [r3, #0]
 80011d8:	605a      	str	r2, [r3, #4]
 80011da:	609a      	str	r2, [r3, #8]
 80011dc:	60da      	str	r2, [r3, #12]
 80011de:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80011e8:	d12f      	bne.n	800124a <HAL_TIM_MspPostInit+0x82>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ea:	4b60      	ldr	r3, [pc, #384]	; (800136c <HAL_TIM_MspPostInit+0x1a4>)
 80011ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ee:	4a5f      	ldr	r2, [pc, #380]	; (800136c <HAL_TIM_MspPostInit+0x1a4>)
 80011f0:	f043 0301 	orr.w	r3, r3, #1
 80011f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011f6:	4b5d      	ldr	r3, [pc, #372]	; (800136c <HAL_TIM_MspPostInit+0x1a4>)
 80011f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011fa:	f003 0301 	and.w	r3, r3, #1
 80011fe:	61bb      	str	r3, [r7, #24]
 8001200:	69bb      	ldr	r3, [r7, #24]
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA10     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8001202:	2307      	movs	r3, #7
 8001204:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001206:	2302      	movs	r3, #2
 8001208:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120a:	2300      	movs	r3, #0
 800120c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800120e:	2300      	movs	r3, #0
 8001210:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001212:	2301      	movs	r3, #1
 8001214:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001216:	f107 031c 	add.w	r3, r7, #28
 800121a:	4619      	mov	r1, r3
 800121c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001220:	f000 fab0 	bl	8001784 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001224:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001228:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800122a:	2302      	movs	r3, #2
 800122c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122e:	2300      	movs	r3, #0
 8001230:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001232:	2300      	movs	r3, #0
 8001234:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM2;
 8001236:	230a      	movs	r3, #10
 8001238:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800123a:	f107 031c 	add.w	r3, r7, #28
 800123e:	4619      	mov	r1, r3
 8001240:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001244:	f000 fa9e 	bl	8001784 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 8001248:	e08b      	b.n	8001362 <HAL_TIM_MspPostInit+0x19a>
  else if(htim->Instance==TIM8)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	4a48      	ldr	r2, [pc, #288]	; (8001370 <HAL_TIM_MspPostInit+0x1a8>)
 8001250:	4293      	cmp	r3, r2
 8001252:	d11e      	bne.n	8001292 <HAL_TIM_MspPostInit+0xca>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001254:	4b45      	ldr	r3, [pc, #276]	; (800136c <HAL_TIM_MspPostInit+0x1a4>)
 8001256:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001258:	4a44      	ldr	r2, [pc, #272]	; (800136c <HAL_TIM_MspPostInit+0x1a4>)
 800125a:	f043 0301 	orr.w	r3, r3, #1
 800125e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001260:	4b42      	ldr	r3, [pc, #264]	; (800136c <HAL_TIM_MspPostInit+0x1a4>)
 8001262:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001264:	f003 0301 	and.w	r3, r3, #1
 8001268:	617b      	str	r3, [r7, #20]
 800126a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800126c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001270:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001272:	2302      	movs	r3, #2
 8001274:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001276:	2300      	movs	r3, #0
 8001278:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800127a:	2300      	movs	r3, #0
 800127c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM8;
 800127e:	2302      	movs	r3, #2
 8001280:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001282:	f107 031c 	add.w	r3, r7, #28
 8001286:	4619      	mov	r1, r3
 8001288:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800128c:	f000 fa7a 	bl	8001784 <HAL_GPIO_Init>
}
 8001290:	e067      	b.n	8001362 <HAL_TIM_MspPostInit+0x19a>
  else if(htim->Instance==TIM15)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	4a37      	ldr	r2, [pc, #220]	; (8001374 <HAL_TIM_MspPostInit+0x1ac>)
 8001298:	4293      	cmp	r3, r2
 800129a:	d11d      	bne.n	80012d8 <HAL_TIM_MspPostInit+0x110>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800129c:	4b33      	ldr	r3, [pc, #204]	; (800136c <HAL_TIM_MspPostInit+0x1a4>)
 800129e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012a0:	4a32      	ldr	r2, [pc, #200]	; (800136c <HAL_TIM_MspPostInit+0x1a4>)
 80012a2:	f043 0301 	orr.w	r3, r3, #1
 80012a6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012a8:	4b30      	ldr	r3, [pc, #192]	; (800136c <HAL_TIM_MspPostInit+0x1a4>)
 80012aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012ac:	f003 0301 	and.w	r3, r3, #1
 80012b0:	613b      	str	r3, [r7, #16]
 80012b2:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80012b4:	2308      	movs	r3, #8
 80012b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012b8:	2302      	movs	r3, #2
 80012ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012bc:	2300      	movs	r3, #0
 80012be:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012c0:	2300      	movs	r3, #0
 80012c2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM15;
 80012c4:	2309      	movs	r3, #9
 80012c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012c8:	f107 031c 	add.w	r3, r7, #28
 80012cc:	4619      	mov	r1, r3
 80012ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012d2:	f000 fa57 	bl	8001784 <HAL_GPIO_Init>
}
 80012d6:	e044      	b.n	8001362 <HAL_TIM_MspPostInit+0x19a>
  else if(htim->Instance==TIM16)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4a26      	ldr	r2, [pc, #152]	; (8001378 <HAL_TIM_MspPostInit+0x1b0>)
 80012de:	4293      	cmp	r3, r2
 80012e0:	d11d      	bne.n	800131e <HAL_TIM_MspPostInit+0x156>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012e2:	4b22      	ldr	r3, [pc, #136]	; (800136c <HAL_TIM_MspPostInit+0x1a4>)
 80012e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012e6:	4a21      	ldr	r2, [pc, #132]	; (800136c <HAL_TIM_MspPostInit+0x1a4>)
 80012e8:	f043 0301 	orr.w	r3, r3, #1
 80012ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012ee:	4b1f      	ldr	r3, [pc, #124]	; (800136c <HAL_TIM_MspPostInit+0x1a4>)
 80012f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012f2:	f003 0301 	and.w	r3, r3, #1
 80012f6:	60fb      	str	r3, [r7, #12]
 80012f8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80012fa:	2340      	movs	r3, #64	; 0x40
 80012fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012fe:	2302      	movs	r3, #2
 8001300:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001302:	2300      	movs	r3, #0
 8001304:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001306:	2300      	movs	r3, #0
 8001308:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 800130a:	2301      	movs	r3, #1
 800130c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800130e:	f107 031c 	add.w	r3, r7, #28
 8001312:	4619      	mov	r1, r3
 8001314:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001318:	f000 fa34 	bl	8001784 <HAL_GPIO_Init>
}
 800131c:	e021      	b.n	8001362 <HAL_TIM_MspPostInit+0x19a>
  else if(htim->Instance==TIM17)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	4a16      	ldr	r2, [pc, #88]	; (800137c <HAL_TIM_MspPostInit+0x1b4>)
 8001324:	4293      	cmp	r3, r2
 8001326:	d11c      	bne.n	8001362 <HAL_TIM_MspPostInit+0x19a>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001328:	4b10      	ldr	r3, [pc, #64]	; (800136c <HAL_TIM_MspPostInit+0x1a4>)
 800132a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800132c:	4a0f      	ldr	r2, [pc, #60]	; (800136c <HAL_TIM_MspPostInit+0x1a4>)
 800132e:	f043 0301 	orr.w	r3, r3, #1
 8001332:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001334:	4b0d      	ldr	r3, [pc, #52]	; (800136c <HAL_TIM_MspPostInit+0x1a4>)
 8001336:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001338:	f003 0301 	and.w	r3, r3, #1
 800133c:	60bb      	str	r3, [r7, #8]
 800133e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001340:	2380      	movs	r3, #128	; 0x80
 8001342:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001344:	2302      	movs	r3, #2
 8001346:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001348:	2300      	movs	r3, #0
 800134a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800134c:	2300      	movs	r3, #0
 800134e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM17;
 8001350:	2301      	movs	r3, #1
 8001352:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001354:	f107 031c 	add.w	r3, r7, #28
 8001358:	4619      	mov	r1, r3
 800135a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800135e:	f000 fa11 	bl	8001784 <HAL_GPIO_Init>
}
 8001362:	bf00      	nop
 8001364:	3730      	adds	r7, #48	; 0x30
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	40021000 	.word	0x40021000
 8001370:	40013400 	.word	0x40013400
 8001374:	40014000 	.word	0x40014000
 8001378:	40014400 	.word	0x40014400
 800137c:	40014800 	.word	0x40014800

08001380 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001384:	bf00      	nop
 8001386:	46bd      	mov	sp, r7
 8001388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138c:	4770      	bx	lr

0800138e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800138e:	b480      	push	{r7}
 8001390:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001392:	e7fe      	b.n	8001392 <HardFault_Handler+0x4>

08001394 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001394:	b480      	push	{r7}
 8001396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001398:	e7fe      	b.n	8001398 <MemManage_Handler+0x4>

0800139a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800139a:	b480      	push	{r7}
 800139c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800139e:	e7fe      	b.n	800139e <BusFault_Handler+0x4>

080013a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013a0:	b480      	push	{r7}
 80013a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013a4:	e7fe      	b.n	80013a4 <UsageFault_Handler+0x4>

080013a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013a6:	b480      	push	{r7}
 80013a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013aa:	bf00      	nop
 80013ac:	46bd      	mov	sp, r7
 80013ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b2:	4770      	bx	lr

080013b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013b4:	b480      	push	{r7}
 80013b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013b8:	bf00      	nop
 80013ba:	46bd      	mov	sp, r7
 80013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c0:	4770      	bx	lr

080013c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013c2:	b480      	push	{r7}
 80013c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013c6:	bf00      	nop
 80013c8:	46bd      	mov	sp, r7
 80013ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ce:	4770      	bx	lr

080013d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013d4:	f000 f8a8 	bl	8001528 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013d8:	bf00      	nop
 80013da:	bd80      	pop	{r7, pc}

080013dc <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80013e0:	4802      	ldr	r0, [pc, #8]	; (80013ec <USB_LP_IRQHandler+0x10>)
 80013e2:	f000 fc8a 	bl	8001cfa <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 80013e6:	bf00      	nop
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	20001368 	.word	0x20001368

080013f0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80013f4:	4802      	ldr	r0, [pc, #8]	; (8001400 <TIM6_DAC_IRQHandler+0x10>)
 80013f6:	f003 f9ce 	bl	8004796 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80013fa:	bf00      	nop
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	20000594 	.word	0x20000594

08001404 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001408:	4b08      	ldr	r3, [pc, #32]	; (800142c <SystemInit+0x28>)
 800140a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800140e:	4a07      	ldr	r2, [pc, #28]	; (800142c <SystemInit+0x28>)
 8001410:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001414:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001418:	4b04      	ldr	r3, [pc, #16]	; (800142c <SystemInit+0x28>)
 800141a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800141e:	609a      	str	r2, [r3, #8]
#endif
}
 8001420:	bf00      	nop
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr
 800142a:	bf00      	nop
 800142c:	e000ed00 	.word	0xe000ed00

08001430 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001430:	480d      	ldr	r0, [pc, #52]	; (8001468 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001432:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001434:	480d      	ldr	r0, [pc, #52]	; (800146c <LoopForever+0x6>)
  ldr r1, =_edata
 8001436:	490e      	ldr	r1, [pc, #56]	; (8001470 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001438:	4a0e      	ldr	r2, [pc, #56]	; (8001474 <LoopForever+0xe>)
  movs r3, #0
 800143a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800143c:	e002      	b.n	8001444 <LoopCopyDataInit>

0800143e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800143e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001440:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001442:	3304      	adds	r3, #4

08001444 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001444:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001446:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001448:	d3f9      	bcc.n	800143e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800144a:	4a0b      	ldr	r2, [pc, #44]	; (8001478 <LoopForever+0x12>)
  ldr r4, =_ebss
 800144c:	4c0b      	ldr	r4, [pc, #44]	; (800147c <LoopForever+0x16>)
  movs r3, #0
 800144e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001450:	e001      	b.n	8001456 <LoopFillZerobss>

08001452 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001452:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001454:	3204      	adds	r2, #4

08001456 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001456:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001458:	d3fb      	bcc.n	8001452 <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800145a:	f7ff ffd3 	bl	8001404 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800145e:	f008 fb07 	bl	8009a70 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001462:	f7fe fef9 	bl	8000258 <main>

08001466 <LoopForever>:

LoopForever:
    b LoopForever
 8001466:	e7fe      	b.n	8001466 <LoopForever>
  ldr   r0, =_estack
 8001468:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 800146c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001470:	200001cc 	.word	0x200001cc
  ldr r2, =_sidata
 8001474:	08009b58 	.word	0x08009b58
  ldr r2, =_sbss
 8001478:	200001cc 	.word	0x200001cc
  ldr r4, =_ebss
 800147c:	2000165c 	.word	0x2000165c

08001480 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001480:	e7fe      	b.n	8001480 <ADC1_2_IRQHandler>

08001482 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001482:	b580      	push	{r7, lr}
 8001484:	b082      	sub	sp, #8
 8001486:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001488:	2300      	movs	r3, #0
 800148a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800148c:	2003      	movs	r0, #3
 800148e:	f000 f939 	bl	8001704 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001492:	2000      	movs	r0, #0
 8001494:	f000 f80e 	bl	80014b4 <HAL_InitTick>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	d002      	beq.n	80014a4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800149e:	2301      	movs	r3, #1
 80014a0:	71fb      	strb	r3, [r7, #7]
 80014a2:	e001      	b.n	80014a8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80014a4:	f7ff fd32 	bl	8000f0c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80014a8:	79fb      	ldrb	r3, [r7, #7]

}
 80014aa:	4618      	mov	r0, r3
 80014ac:	3708      	adds	r7, #8
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
	...

080014b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b084      	sub	sp, #16
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80014bc:	2300      	movs	r3, #0
 80014be:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80014c0:	4b16      	ldr	r3, [pc, #88]	; (800151c <HAL_InitTick+0x68>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d022      	beq.n	800150e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80014c8:	4b15      	ldr	r3, [pc, #84]	; (8001520 <HAL_InitTick+0x6c>)
 80014ca:	681a      	ldr	r2, [r3, #0]
 80014cc:	4b13      	ldr	r3, [pc, #76]	; (800151c <HAL_InitTick+0x68>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80014d4:	fbb1 f3f3 	udiv	r3, r1, r3
 80014d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80014dc:	4618      	mov	r0, r3
 80014de:	f000 f944 	bl	800176a <HAL_SYSTICK_Config>
 80014e2:	4603      	mov	r3, r0
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d10f      	bne.n	8001508 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	2b0f      	cmp	r3, #15
 80014ec:	d809      	bhi.n	8001502 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014ee:	2200      	movs	r2, #0
 80014f0:	6879      	ldr	r1, [r7, #4]
 80014f2:	f04f 30ff 	mov.w	r0, #4294967295
 80014f6:	f000 f910 	bl	800171a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80014fa:	4a0a      	ldr	r2, [pc, #40]	; (8001524 <HAL_InitTick+0x70>)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	6013      	str	r3, [r2, #0]
 8001500:	e007      	b.n	8001512 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001502:	2301      	movs	r3, #1
 8001504:	73fb      	strb	r3, [r7, #15]
 8001506:	e004      	b.n	8001512 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001508:	2301      	movs	r3, #1
 800150a:	73fb      	strb	r3, [r7, #15]
 800150c:	e001      	b.n	8001512 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800150e:	2301      	movs	r3, #1
 8001510:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001512:	7bfb      	ldrb	r3, [r7, #15]
}
 8001514:	4618      	mov	r0, r3
 8001516:	3710      	adds	r7, #16
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}
 800151c:	20000050 	.word	0x20000050
 8001520:	20000048 	.word	0x20000048
 8001524:	2000004c 	.word	0x2000004c

08001528 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001528:	b480      	push	{r7}
 800152a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800152c:	4b05      	ldr	r3, [pc, #20]	; (8001544 <HAL_IncTick+0x1c>)
 800152e:	681a      	ldr	r2, [r3, #0]
 8001530:	4b05      	ldr	r3, [pc, #20]	; (8001548 <HAL_IncTick+0x20>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4413      	add	r3, r2
 8001536:	4a03      	ldr	r2, [pc, #12]	; (8001544 <HAL_IncTick+0x1c>)
 8001538:	6013      	str	r3, [r2, #0]
}
 800153a:	bf00      	nop
 800153c:	46bd      	mov	sp, r7
 800153e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001542:	4770      	bx	lr
 8001544:	200006c4 	.word	0x200006c4
 8001548:	20000050 	.word	0x20000050

0800154c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800154c:	b480      	push	{r7}
 800154e:	af00      	add	r7, sp, #0
  return uwTick;
 8001550:	4b03      	ldr	r3, [pc, #12]	; (8001560 <HAL_GetTick+0x14>)
 8001552:	681b      	ldr	r3, [r3, #0]
}
 8001554:	4618      	mov	r0, r3
 8001556:	46bd      	mov	sp, r7
 8001558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155c:	4770      	bx	lr
 800155e:	bf00      	nop
 8001560:	200006c4 	.word	0x200006c4

08001564 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001564:	b480      	push	{r7}
 8001566:	b085      	sub	sp, #20
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	f003 0307 	and.w	r3, r3, #7
 8001572:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001574:	4b0c      	ldr	r3, [pc, #48]	; (80015a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001576:	68db      	ldr	r3, [r3, #12]
 8001578:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800157a:	68ba      	ldr	r2, [r7, #8]
 800157c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001580:	4013      	ands	r3, r2
 8001582:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001588:	68bb      	ldr	r3, [r7, #8]
 800158a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800158c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001590:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001594:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001596:	4a04      	ldr	r2, [pc, #16]	; (80015a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001598:	68bb      	ldr	r3, [r7, #8]
 800159a:	60d3      	str	r3, [r2, #12]
}
 800159c:	bf00      	nop
 800159e:	3714      	adds	r7, #20
 80015a0:	46bd      	mov	sp, r7
 80015a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a6:	4770      	bx	lr
 80015a8:	e000ed00 	.word	0xe000ed00

080015ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015ac:	b480      	push	{r7}
 80015ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015b0:	4b04      	ldr	r3, [pc, #16]	; (80015c4 <__NVIC_GetPriorityGrouping+0x18>)
 80015b2:	68db      	ldr	r3, [r3, #12]
 80015b4:	0a1b      	lsrs	r3, r3, #8
 80015b6:	f003 0307 	and.w	r3, r3, #7
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	46bd      	mov	sp, r7
 80015be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c2:	4770      	bx	lr
 80015c4:	e000ed00 	.word	0xe000ed00

080015c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b083      	sub	sp, #12
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	4603      	mov	r3, r0
 80015d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	db0b      	blt.n	80015f2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015da:	79fb      	ldrb	r3, [r7, #7]
 80015dc:	f003 021f 	and.w	r2, r3, #31
 80015e0:	4907      	ldr	r1, [pc, #28]	; (8001600 <__NVIC_EnableIRQ+0x38>)
 80015e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015e6:	095b      	lsrs	r3, r3, #5
 80015e8:	2001      	movs	r0, #1
 80015ea:	fa00 f202 	lsl.w	r2, r0, r2
 80015ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80015f2:	bf00      	nop
 80015f4:	370c      	adds	r7, #12
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr
 80015fe:	bf00      	nop
 8001600:	e000e100 	.word	0xe000e100

08001604 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001604:	b480      	push	{r7}
 8001606:	b083      	sub	sp, #12
 8001608:	af00      	add	r7, sp, #0
 800160a:	4603      	mov	r3, r0
 800160c:	6039      	str	r1, [r7, #0]
 800160e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001610:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001614:	2b00      	cmp	r3, #0
 8001616:	db0a      	blt.n	800162e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	b2da      	uxtb	r2, r3
 800161c:	490c      	ldr	r1, [pc, #48]	; (8001650 <__NVIC_SetPriority+0x4c>)
 800161e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001622:	0112      	lsls	r2, r2, #4
 8001624:	b2d2      	uxtb	r2, r2
 8001626:	440b      	add	r3, r1
 8001628:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800162c:	e00a      	b.n	8001644 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	b2da      	uxtb	r2, r3
 8001632:	4908      	ldr	r1, [pc, #32]	; (8001654 <__NVIC_SetPriority+0x50>)
 8001634:	79fb      	ldrb	r3, [r7, #7]
 8001636:	f003 030f 	and.w	r3, r3, #15
 800163a:	3b04      	subs	r3, #4
 800163c:	0112      	lsls	r2, r2, #4
 800163e:	b2d2      	uxtb	r2, r2
 8001640:	440b      	add	r3, r1
 8001642:	761a      	strb	r2, [r3, #24]
}
 8001644:	bf00      	nop
 8001646:	370c      	adds	r7, #12
 8001648:	46bd      	mov	sp, r7
 800164a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164e:	4770      	bx	lr
 8001650:	e000e100 	.word	0xe000e100
 8001654:	e000ed00 	.word	0xe000ed00

08001658 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001658:	b480      	push	{r7}
 800165a:	b089      	sub	sp, #36	; 0x24
 800165c:	af00      	add	r7, sp, #0
 800165e:	60f8      	str	r0, [r7, #12]
 8001660:	60b9      	str	r1, [r7, #8]
 8001662:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	f003 0307 	and.w	r3, r3, #7
 800166a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800166c:	69fb      	ldr	r3, [r7, #28]
 800166e:	f1c3 0307 	rsb	r3, r3, #7
 8001672:	2b04      	cmp	r3, #4
 8001674:	bf28      	it	cs
 8001676:	2304      	movcs	r3, #4
 8001678:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800167a:	69fb      	ldr	r3, [r7, #28]
 800167c:	3304      	adds	r3, #4
 800167e:	2b06      	cmp	r3, #6
 8001680:	d902      	bls.n	8001688 <NVIC_EncodePriority+0x30>
 8001682:	69fb      	ldr	r3, [r7, #28]
 8001684:	3b03      	subs	r3, #3
 8001686:	e000      	b.n	800168a <NVIC_EncodePriority+0x32>
 8001688:	2300      	movs	r3, #0
 800168a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800168c:	f04f 32ff 	mov.w	r2, #4294967295
 8001690:	69bb      	ldr	r3, [r7, #24]
 8001692:	fa02 f303 	lsl.w	r3, r2, r3
 8001696:	43da      	mvns	r2, r3
 8001698:	68bb      	ldr	r3, [r7, #8]
 800169a:	401a      	ands	r2, r3
 800169c:	697b      	ldr	r3, [r7, #20]
 800169e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016a0:	f04f 31ff 	mov.w	r1, #4294967295
 80016a4:	697b      	ldr	r3, [r7, #20]
 80016a6:	fa01 f303 	lsl.w	r3, r1, r3
 80016aa:	43d9      	mvns	r1, r3
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016b0:	4313      	orrs	r3, r2
         );
}
 80016b2:	4618      	mov	r0, r3
 80016b4:	3724      	adds	r7, #36	; 0x24
 80016b6:	46bd      	mov	sp, r7
 80016b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016bc:	4770      	bx	lr
	...

080016c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b082      	sub	sp, #8
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	3b01      	subs	r3, #1
 80016cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016d0:	d301      	bcc.n	80016d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016d2:	2301      	movs	r3, #1
 80016d4:	e00f      	b.n	80016f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016d6:	4a0a      	ldr	r2, [pc, #40]	; (8001700 <SysTick_Config+0x40>)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	3b01      	subs	r3, #1
 80016dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016de:	210f      	movs	r1, #15
 80016e0:	f04f 30ff 	mov.w	r0, #4294967295
 80016e4:	f7ff ff8e 	bl	8001604 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016e8:	4b05      	ldr	r3, [pc, #20]	; (8001700 <SysTick_Config+0x40>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016ee:	4b04      	ldr	r3, [pc, #16]	; (8001700 <SysTick_Config+0x40>)
 80016f0:	2207      	movs	r2, #7
 80016f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016f4:	2300      	movs	r3, #0
}
 80016f6:	4618      	mov	r0, r3
 80016f8:	3708      	adds	r7, #8
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	e000e010 	.word	0xe000e010

08001704 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b082      	sub	sp, #8
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800170c:	6878      	ldr	r0, [r7, #4]
 800170e:	f7ff ff29 	bl	8001564 <__NVIC_SetPriorityGrouping>
}
 8001712:	bf00      	nop
 8001714:	3708      	adds	r7, #8
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}

0800171a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800171a:	b580      	push	{r7, lr}
 800171c:	b086      	sub	sp, #24
 800171e:	af00      	add	r7, sp, #0
 8001720:	4603      	mov	r3, r0
 8001722:	60b9      	str	r1, [r7, #8]
 8001724:	607a      	str	r2, [r7, #4]
 8001726:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001728:	f7ff ff40 	bl	80015ac <__NVIC_GetPriorityGrouping>
 800172c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800172e:	687a      	ldr	r2, [r7, #4]
 8001730:	68b9      	ldr	r1, [r7, #8]
 8001732:	6978      	ldr	r0, [r7, #20]
 8001734:	f7ff ff90 	bl	8001658 <NVIC_EncodePriority>
 8001738:	4602      	mov	r2, r0
 800173a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800173e:	4611      	mov	r1, r2
 8001740:	4618      	mov	r0, r3
 8001742:	f7ff ff5f 	bl	8001604 <__NVIC_SetPriority>
}
 8001746:	bf00      	nop
 8001748:	3718      	adds	r7, #24
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}

0800174e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800174e:	b580      	push	{r7, lr}
 8001750:	b082      	sub	sp, #8
 8001752:	af00      	add	r7, sp, #0
 8001754:	4603      	mov	r3, r0
 8001756:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001758:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800175c:	4618      	mov	r0, r3
 800175e:	f7ff ff33 	bl	80015c8 <__NVIC_EnableIRQ>
}
 8001762:	bf00      	nop
 8001764:	3708      	adds	r7, #8
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}

0800176a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800176a:	b580      	push	{r7, lr}
 800176c:	b082      	sub	sp, #8
 800176e:	af00      	add	r7, sp, #0
 8001770:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001772:	6878      	ldr	r0, [r7, #4]
 8001774:	f7ff ffa4 	bl	80016c0 <SysTick_Config>
 8001778:	4603      	mov	r3, r0
}
 800177a:	4618      	mov	r0, r3
 800177c:	3708      	adds	r7, #8
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}
	...

08001784 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001784:	b480      	push	{r7}
 8001786:	b087      	sub	sp, #28
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
 800178c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800178e:	2300      	movs	r3, #0
 8001790:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001792:	e15a      	b.n	8001a4a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	681a      	ldr	r2, [r3, #0]
 8001798:	2101      	movs	r1, #1
 800179a:	697b      	ldr	r3, [r7, #20]
 800179c:	fa01 f303 	lsl.w	r3, r1, r3
 80017a0:	4013      	ands	r3, r2
 80017a2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	f000 814c 	beq.w	8001a44 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	2b01      	cmp	r3, #1
 80017b2:	d00b      	beq.n	80017cc <HAL_GPIO_Init+0x48>
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	2b02      	cmp	r3, #2
 80017ba:	d007      	beq.n	80017cc <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80017c0:	2b11      	cmp	r3, #17
 80017c2:	d003      	beq.n	80017cc <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	2b12      	cmp	r3, #18
 80017ca:	d130      	bne.n	800182e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	689b      	ldr	r3, [r3, #8]
 80017d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80017d2:	697b      	ldr	r3, [r7, #20]
 80017d4:	005b      	lsls	r3, r3, #1
 80017d6:	2203      	movs	r2, #3
 80017d8:	fa02 f303 	lsl.w	r3, r2, r3
 80017dc:	43db      	mvns	r3, r3
 80017de:	693a      	ldr	r2, [r7, #16]
 80017e0:	4013      	ands	r3, r2
 80017e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	68da      	ldr	r2, [r3, #12]
 80017e8:	697b      	ldr	r3, [r7, #20]
 80017ea:	005b      	lsls	r3, r3, #1
 80017ec:	fa02 f303 	lsl.w	r3, r2, r3
 80017f0:	693a      	ldr	r2, [r7, #16]
 80017f2:	4313      	orrs	r3, r2
 80017f4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	693a      	ldr	r2, [r7, #16]
 80017fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001802:	2201      	movs	r2, #1
 8001804:	697b      	ldr	r3, [r7, #20]
 8001806:	fa02 f303 	lsl.w	r3, r2, r3
 800180a:	43db      	mvns	r3, r3
 800180c:	693a      	ldr	r2, [r7, #16]
 800180e:	4013      	ands	r3, r2
 8001810:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	091b      	lsrs	r3, r3, #4
 8001818:	f003 0201 	and.w	r2, r3, #1
 800181c:	697b      	ldr	r3, [r7, #20]
 800181e:	fa02 f303 	lsl.w	r3, r2, r3
 8001822:	693a      	ldr	r2, [r7, #16]
 8001824:	4313      	orrs	r3, r2
 8001826:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	693a      	ldr	r2, [r7, #16]
 800182c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	68db      	ldr	r3, [r3, #12]
 8001832:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001834:	697b      	ldr	r3, [r7, #20]
 8001836:	005b      	lsls	r3, r3, #1
 8001838:	2203      	movs	r2, #3
 800183a:	fa02 f303 	lsl.w	r3, r2, r3
 800183e:	43db      	mvns	r3, r3
 8001840:	693a      	ldr	r2, [r7, #16]
 8001842:	4013      	ands	r3, r2
 8001844:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	689a      	ldr	r2, [r3, #8]
 800184a:	697b      	ldr	r3, [r7, #20]
 800184c:	005b      	lsls	r3, r3, #1
 800184e:	fa02 f303 	lsl.w	r3, r2, r3
 8001852:	693a      	ldr	r2, [r7, #16]
 8001854:	4313      	orrs	r3, r2
 8001856:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	693a      	ldr	r2, [r7, #16]
 800185c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	2b02      	cmp	r3, #2
 8001864:	d003      	beq.n	800186e <HAL_GPIO_Init+0xea>
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	2b12      	cmp	r3, #18
 800186c:	d123      	bne.n	80018b6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800186e:	697b      	ldr	r3, [r7, #20]
 8001870:	08da      	lsrs	r2, r3, #3
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	3208      	adds	r2, #8
 8001876:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800187a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800187c:	697b      	ldr	r3, [r7, #20]
 800187e:	f003 0307 	and.w	r3, r3, #7
 8001882:	009b      	lsls	r3, r3, #2
 8001884:	220f      	movs	r2, #15
 8001886:	fa02 f303 	lsl.w	r3, r2, r3
 800188a:	43db      	mvns	r3, r3
 800188c:	693a      	ldr	r2, [r7, #16]
 800188e:	4013      	ands	r3, r2
 8001890:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	691a      	ldr	r2, [r3, #16]
 8001896:	697b      	ldr	r3, [r7, #20]
 8001898:	f003 0307 	and.w	r3, r3, #7
 800189c:	009b      	lsls	r3, r3, #2
 800189e:	fa02 f303 	lsl.w	r3, r2, r3
 80018a2:	693a      	ldr	r2, [r7, #16]
 80018a4:	4313      	orrs	r3, r2
 80018a6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80018a8:	697b      	ldr	r3, [r7, #20]
 80018aa:	08da      	lsrs	r2, r3, #3
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	3208      	adds	r2, #8
 80018b0:	6939      	ldr	r1, [r7, #16]
 80018b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80018bc:	697b      	ldr	r3, [r7, #20]
 80018be:	005b      	lsls	r3, r3, #1
 80018c0:	2203      	movs	r2, #3
 80018c2:	fa02 f303 	lsl.w	r3, r2, r3
 80018c6:	43db      	mvns	r3, r3
 80018c8:	693a      	ldr	r2, [r7, #16]
 80018ca:	4013      	ands	r3, r2
 80018cc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	f003 0203 	and.w	r2, r3, #3
 80018d6:	697b      	ldr	r3, [r7, #20]
 80018d8:	005b      	lsls	r3, r3, #1
 80018da:	fa02 f303 	lsl.w	r3, r2, r3
 80018de:	693a      	ldr	r2, [r7, #16]
 80018e0:	4313      	orrs	r3, r2
 80018e2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	693a      	ldr	r2, [r7, #16]
 80018e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	f000 80a6 	beq.w	8001a44 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018f8:	4b5b      	ldr	r3, [pc, #364]	; (8001a68 <HAL_GPIO_Init+0x2e4>)
 80018fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018fc:	4a5a      	ldr	r2, [pc, #360]	; (8001a68 <HAL_GPIO_Init+0x2e4>)
 80018fe:	f043 0301 	orr.w	r3, r3, #1
 8001902:	6613      	str	r3, [r2, #96]	; 0x60
 8001904:	4b58      	ldr	r3, [pc, #352]	; (8001a68 <HAL_GPIO_Init+0x2e4>)
 8001906:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001908:	f003 0301 	and.w	r3, r3, #1
 800190c:	60bb      	str	r3, [r7, #8]
 800190e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001910:	4a56      	ldr	r2, [pc, #344]	; (8001a6c <HAL_GPIO_Init+0x2e8>)
 8001912:	697b      	ldr	r3, [r7, #20]
 8001914:	089b      	lsrs	r3, r3, #2
 8001916:	3302      	adds	r3, #2
 8001918:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800191c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800191e:	697b      	ldr	r3, [r7, #20]
 8001920:	f003 0303 	and.w	r3, r3, #3
 8001924:	009b      	lsls	r3, r3, #2
 8001926:	220f      	movs	r2, #15
 8001928:	fa02 f303 	lsl.w	r3, r2, r3
 800192c:	43db      	mvns	r3, r3
 800192e:	693a      	ldr	r2, [r7, #16]
 8001930:	4013      	ands	r3, r2
 8001932:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800193a:	d01f      	beq.n	800197c <HAL_GPIO_Init+0x1f8>
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	4a4c      	ldr	r2, [pc, #304]	; (8001a70 <HAL_GPIO_Init+0x2ec>)
 8001940:	4293      	cmp	r3, r2
 8001942:	d019      	beq.n	8001978 <HAL_GPIO_Init+0x1f4>
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	4a4b      	ldr	r2, [pc, #300]	; (8001a74 <HAL_GPIO_Init+0x2f0>)
 8001948:	4293      	cmp	r3, r2
 800194a:	d013      	beq.n	8001974 <HAL_GPIO_Init+0x1f0>
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	4a4a      	ldr	r2, [pc, #296]	; (8001a78 <HAL_GPIO_Init+0x2f4>)
 8001950:	4293      	cmp	r3, r2
 8001952:	d00d      	beq.n	8001970 <HAL_GPIO_Init+0x1ec>
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	4a49      	ldr	r2, [pc, #292]	; (8001a7c <HAL_GPIO_Init+0x2f8>)
 8001958:	4293      	cmp	r3, r2
 800195a:	d007      	beq.n	800196c <HAL_GPIO_Init+0x1e8>
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	4a48      	ldr	r2, [pc, #288]	; (8001a80 <HAL_GPIO_Init+0x2fc>)
 8001960:	4293      	cmp	r3, r2
 8001962:	d101      	bne.n	8001968 <HAL_GPIO_Init+0x1e4>
 8001964:	2305      	movs	r3, #5
 8001966:	e00a      	b.n	800197e <HAL_GPIO_Init+0x1fa>
 8001968:	2306      	movs	r3, #6
 800196a:	e008      	b.n	800197e <HAL_GPIO_Init+0x1fa>
 800196c:	2304      	movs	r3, #4
 800196e:	e006      	b.n	800197e <HAL_GPIO_Init+0x1fa>
 8001970:	2303      	movs	r3, #3
 8001972:	e004      	b.n	800197e <HAL_GPIO_Init+0x1fa>
 8001974:	2302      	movs	r3, #2
 8001976:	e002      	b.n	800197e <HAL_GPIO_Init+0x1fa>
 8001978:	2301      	movs	r3, #1
 800197a:	e000      	b.n	800197e <HAL_GPIO_Init+0x1fa>
 800197c:	2300      	movs	r3, #0
 800197e:	697a      	ldr	r2, [r7, #20]
 8001980:	f002 0203 	and.w	r2, r2, #3
 8001984:	0092      	lsls	r2, r2, #2
 8001986:	4093      	lsls	r3, r2
 8001988:	693a      	ldr	r2, [r7, #16]
 800198a:	4313      	orrs	r3, r2
 800198c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800198e:	4937      	ldr	r1, [pc, #220]	; (8001a6c <HAL_GPIO_Init+0x2e8>)
 8001990:	697b      	ldr	r3, [r7, #20]
 8001992:	089b      	lsrs	r3, r3, #2
 8001994:	3302      	adds	r3, #2
 8001996:	693a      	ldr	r2, [r7, #16]
 8001998:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800199c:	4b39      	ldr	r3, [pc, #228]	; (8001a84 <HAL_GPIO_Init+0x300>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	43db      	mvns	r3, r3
 80019a6:	693a      	ldr	r2, [r7, #16]
 80019a8:	4013      	ands	r3, r2
 80019aa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d003      	beq.n	80019c0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80019b8:	693a      	ldr	r2, [r7, #16]
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	4313      	orrs	r3, r2
 80019be:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80019c0:	4a30      	ldr	r2, [pc, #192]	; (8001a84 <HAL_GPIO_Init+0x300>)
 80019c2:	693b      	ldr	r3, [r7, #16]
 80019c4:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80019c6:	4b2f      	ldr	r3, [pc, #188]	; (8001a84 <HAL_GPIO_Init+0x300>)
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	43db      	mvns	r3, r3
 80019d0:	693a      	ldr	r2, [r7, #16]
 80019d2:	4013      	ands	r3, r2
 80019d4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d003      	beq.n	80019ea <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80019e2:	693a      	ldr	r2, [r7, #16]
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	4313      	orrs	r3, r2
 80019e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80019ea:	4a26      	ldr	r2, [pc, #152]	; (8001a84 <HAL_GPIO_Init+0x300>)
 80019ec:	693b      	ldr	r3, [r7, #16]
 80019ee:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80019f0:	4b24      	ldr	r3, [pc, #144]	; (8001a84 <HAL_GPIO_Init+0x300>)
 80019f2:	689b      	ldr	r3, [r3, #8]
 80019f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	43db      	mvns	r3, r3
 80019fa:	693a      	ldr	r2, [r7, #16]
 80019fc:	4013      	ands	r3, r2
 80019fe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d003      	beq.n	8001a14 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001a0c:	693a      	ldr	r2, [r7, #16]
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	4313      	orrs	r3, r2
 8001a12:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001a14:	4a1b      	ldr	r2, [pc, #108]	; (8001a84 <HAL_GPIO_Init+0x300>)
 8001a16:	693b      	ldr	r3, [r7, #16]
 8001a18:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001a1a:	4b1a      	ldr	r3, [pc, #104]	; (8001a84 <HAL_GPIO_Init+0x300>)
 8001a1c:	68db      	ldr	r3, [r3, #12]
 8001a1e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	43db      	mvns	r3, r3
 8001a24:	693a      	ldr	r2, [r7, #16]
 8001a26:	4013      	ands	r3, r2
 8001a28:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d003      	beq.n	8001a3e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001a36:	693a      	ldr	r2, [r7, #16]
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	4313      	orrs	r3, r2
 8001a3c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001a3e:	4a11      	ldr	r2, [pc, #68]	; (8001a84 <HAL_GPIO_Init+0x300>)
 8001a40:	693b      	ldr	r3, [r7, #16]
 8001a42:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001a44:	697b      	ldr	r3, [r7, #20]
 8001a46:	3301      	adds	r3, #1
 8001a48:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	681a      	ldr	r2, [r3, #0]
 8001a4e:	697b      	ldr	r3, [r7, #20]
 8001a50:	fa22 f303 	lsr.w	r3, r2, r3
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	f47f ae9d 	bne.w	8001794 <HAL_GPIO_Init+0x10>
  }
}
 8001a5a:	bf00      	nop
 8001a5c:	371c      	adds	r7, #28
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr
 8001a66:	bf00      	nop
 8001a68:	40021000 	.word	0x40021000
 8001a6c:	40010000 	.word	0x40010000
 8001a70:	48000400 	.word	0x48000400
 8001a74:	48000800 	.word	0x48000800
 8001a78:	48000c00 	.word	0x48000c00
 8001a7c:	48001000 	.word	0x48001000
 8001a80:	48001400 	.word	0x48001400
 8001a84:	40010400 	.word	0x40010400

08001a88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b083      	sub	sp, #12
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
 8001a90:	460b      	mov	r3, r1
 8001a92:	807b      	strh	r3, [r7, #2]
 8001a94:	4613      	mov	r3, r2
 8001a96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a98:	787b      	ldrb	r3, [r7, #1]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d003      	beq.n	8001aa6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001a9e:	887a      	ldrh	r2, [r7, #2]
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001aa4:	e002      	b.n	8001aac <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001aa6:	887a      	ldrh	r2, [r7, #2]
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001aac:	bf00      	nop
 8001aae:	370c      	adds	r7, #12
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab6:	4770      	bx	lr

08001ab8 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b085      	sub	sp, #20
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
 8001ac0:	460b      	mov	r3, r1
 8001ac2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	695b      	ldr	r3, [r3, #20]
 8001ac8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001aca:	887a      	ldrh	r2, [r7, #2]
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	4013      	ands	r3, r2
 8001ad0:	041a      	lsls	r2, r3, #16
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	43d9      	mvns	r1, r3
 8001ad6:	887b      	ldrh	r3, [r7, #2]
 8001ad8:	400b      	ands	r3, r1
 8001ada:	431a      	orrs	r2, r3
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	619a      	str	r2, [r3, #24]
}
 8001ae0:	bf00      	nop
 8001ae2:	3714      	adds	r7, #20
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aea:	4770      	bx	lr

08001aec <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001aec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001aee:	b08b      	sub	sp, #44	; 0x2c
 8001af0:	af06      	add	r7, sp, #24
 8001af2:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d101      	bne.n	8001afe <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001afa:	2301      	movs	r3, #1
 8001afc:	e0d7      	b.n	8001cae <HAL_PCD_Init+0x1c2>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001b04:	b2db      	uxtb	r3, r3
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d106      	bne.n	8001b18 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001b12:	6878      	ldr	r0, [r7, #4]
 8001b14:	f007 fcbc 	bl	8009490 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2203      	movs	r2, #3
 8001b1c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4618      	mov	r0, r3
 8001b26:	f003 fe18 	bl	800575a <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	73fb      	strb	r3, [r7, #15]
 8001b2e:	e04c      	b.n	8001bca <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001b30:	7bfb      	ldrb	r3, [r7, #15]
 8001b32:	6879      	ldr	r1, [r7, #4]
 8001b34:	1c5a      	adds	r2, r3, #1
 8001b36:	4613      	mov	r3, r2
 8001b38:	009b      	lsls	r3, r3, #2
 8001b3a:	4413      	add	r3, r2
 8001b3c:	00db      	lsls	r3, r3, #3
 8001b3e:	440b      	add	r3, r1
 8001b40:	3301      	adds	r3, #1
 8001b42:	2201      	movs	r2, #1
 8001b44:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001b46:	7bfb      	ldrb	r3, [r7, #15]
 8001b48:	6879      	ldr	r1, [r7, #4]
 8001b4a:	1c5a      	adds	r2, r3, #1
 8001b4c:	4613      	mov	r3, r2
 8001b4e:	009b      	lsls	r3, r3, #2
 8001b50:	4413      	add	r3, r2
 8001b52:	00db      	lsls	r3, r3, #3
 8001b54:	440b      	add	r3, r1
 8001b56:	7bfa      	ldrb	r2, [r7, #15]
 8001b58:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001b5a:	7bfa      	ldrb	r2, [r7, #15]
 8001b5c:	7bfb      	ldrb	r3, [r7, #15]
 8001b5e:	b298      	uxth	r0, r3
 8001b60:	6879      	ldr	r1, [r7, #4]
 8001b62:	4613      	mov	r3, r2
 8001b64:	009b      	lsls	r3, r3, #2
 8001b66:	4413      	add	r3, r2
 8001b68:	00db      	lsls	r3, r3, #3
 8001b6a:	440b      	add	r3, r1
 8001b6c:	3336      	adds	r3, #54	; 0x36
 8001b6e:	4602      	mov	r2, r0
 8001b70:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001b72:	7bfb      	ldrb	r3, [r7, #15]
 8001b74:	6879      	ldr	r1, [r7, #4]
 8001b76:	1c5a      	adds	r2, r3, #1
 8001b78:	4613      	mov	r3, r2
 8001b7a:	009b      	lsls	r3, r3, #2
 8001b7c:	4413      	add	r3, r2
 8001b7e:	00db      	lsls	r3, r3, #3
 8001b80:	440b      	add	r3, r1
 8001b82:	3303      	adds	r3, #3
 8001b84:	2200      	movs	r2, #0
 8001b86:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001b88:	7bfa      	ldrb	r2, [r7, #15]
 8001b8a:	6879      	ldr	r1, [r7, #4]
 8001b8c:	4613      	mov	r3, r2
 8001b8e:	009b      	lsls	r3, r3, #2
 8001b90:	4413      	add	r3, r2
 8001b92:	00db      	lsls	r3, r3, #3
 8001b94:	440b      	add	r3, r1
 8001b96:	3338      	adds	r3, #56	; 0x38
 8001b98:	2200      	movs	r2, #0
 8001b9a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001b9c:	7bfa      	ldrb	r2, [r7, #15]
 8001b9e:	6879      	ldr	r1, [r7, #4]
 8001ba0:	4613      	mov	r3, r2
 8001ba2:	009b      	lsls	r3, r3, #2
 8001ba4:	4413      	add	r3, r2
 8001ba6:	00db      	lsls	r3, r3, #3
 8001ba8:	440b      	add	r3, r1
 8001baa:	333c      	adds	r3, #60	; 0x3c
 8001bac:	2200      	movs	r2, #0
 8001bae:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001bb0:	7bfa      	ldrb	r2, [r7, #15]
 8001bb2:	6879      	ldr	r1, [r7, #4]
 8001bb4:	4613      	mov	r3, r2
 8001bb6:	009b      	lsls	r3, r3, #2
 8001bb8:	4413      	add	r3, r2
 8001bba:	00db      	lsls	r3, r3, #3
 8001bbc:	440b      	add	r3, r1
 8001bbe:	3340      	adds	r3, #64	; 0x40
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001bc4:	7bfb      	ldrb	r3, [r7, #15]
 8001bc6:	3301      	adds	r3, #1
 8001bc8:	73fb      	strb	r3, [r7, #15]
 8001bca:	7bfa      	ldrb	r2, [r7, #15]
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	429a      	cmp	r2, r3
 8001bd2:	d3ad      	bcc.n	8001b30 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	73fb      	strb	r3, [r7, #15]
 8001bd8:	e044      	b.n	8001c64 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001bda:	7bfa      	ldrb	r2, [r7, #15]
 8001bdc:	6879      	ldr	r1, [r7, #4]
 8001bde:	4613      	mov	r3, r2
 8001be0:	009b      	lsls	r3, r3, #2
 8001be2:	4413      	add	r3, r2
 8001be4:	00db      	lsls	r3, r3, #3
 8001be6:	440b      	add	r3, r1
 8001be8:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001bec:	2200      	movs	r2, #0
 8001bee:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001bf0:	7bfa      	ldrb	r2, [r7, #15]
 8001bf2:	6879      	ldr	r1, [r7, #4]
 8001bf4:	4613      	mov	r3, r2
 8001bf6:	009b      	lsls	r3, r3, #2
 8001bf8:	4413      	add	r3, r2
 8001bfa:	00db      	lsls	r3, r3, #3
 8001bfc:	440b      	add	r3, r1
 8001bfe:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001c02:	7bfa      	ldrb	r2, [r7, #15]
 8001c04:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001c06:	7bfa      	ldrb	r2, [r7, #15]
 8001c08:	6879      	ldr	r1, [r7, #4]
 8001c0a:	4613      	mov	r3, r2
 8001c0c:	009b      	lsls	r3, r3, #2
 8001c0e:	4413      	add	r3, r2
 8001c10:	00db      	lsls	r3, r3, #3
 8001c12:	440b      	add	r3, r1
 8001c14:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001c18:	2200      	movs	r2, #0
 8001c1a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001c1c:	7bfa      	ldrb	r2, [r7, #15]
 8001c1e:	6879      	ldr	r1, [r7, #4]
 8001c20:	4613      	mov	r3, r2
 8001c22:	009b      	lsls	r3, r3, #2
 8001c24:	4413      	add	r3, r2
 8001c26:	00db      	lsls	r3, r3, #3
 8001c28:	440b      	add	r3, r1
 8001c2a:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001c2e:	2200      	movs	r2, #0
 8001c30:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001c32:	7bfa      	ldrb	r2, [r7, #15]
 8001c34:	6879      	ldr	r1, [r7, #4]
 8001c36:	4613      	mov	r3, r2
 8001c38:	009b      	lsls	r3, r3, #2
 8001c3a:	4413      	add	r3, r2
 8001c3c:	00db      	lsls	r3, r3, #3
 8001c3e:	440b      	add	r3, r1
 8001c40:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001c44:	2200      	movs	r2, #0
 8001c46:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001c48:	7bfa      	ldrb	r2, [r7, #15]
 8001c4a:	6879      	ldr	r1, [r7, #4]
 8001c4c:	4613      	mov	r3, r2
 8001c4e:	009b      	lsls	r3, r3, #2
 8001c50:	4413      	add	r3, r2
 8001c52:	00db      	lsls	r3, r3, #3
 8001c54:	440b      	add	r3, r1
 8001c56:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c5e:	7bfb      	ldrb	r3, [r7, #15]
 8001c60:	3301      	adds	r3, #1
 8001c62:	73fb      	strb	r3, [r7, #15]
 8001c64:	7bfa      	ldrb	r2, [r7, #15]
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	429a      	cmp	r2, r3
 8001c6c:	d3b5      	bcc.n	8001bda <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	603b      	str	r3, [r7, #0]
 8001c74:	687e      	ldr	r6, [r7, #4]
 8001c76:	466d      	mov	r5, sp
 8001c78:	f106 0410 	add.w	r4, r6, #16
 8001c7c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c7e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c80:	6823      	ldr	r3, [r4, #0]
 8001c82:	602b      	str	r3, [r5, #0]
 8001c84:	1d33      	adds	r3, r6, #4
 8001c86:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001c88:	6838      	ldr	r0, [r7, #0]
 8001c8a:	f003 fd81 	bl	8005790 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2200      	movs	r2, #0
 8001c92:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2201      	movs	r2, #1
 8001c9a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	69db      	ldr	r3, [r3, #28]
 8001ca2:	2b01      	cmp	r3, #1
 8001ca4:	d102      	bne.n	8001cac <HAL_PCD_Init+0x1c0>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001ca6:	6878      	ldr	r0, [r7, #4]
 8001ca8:	f001 fa5e 	bl	8003168 <HAL_PCDEx_ActivateLPM>
  }
  
  return HAL_OK;
 8001cac:	2300      	movs	r3, #0
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	3714      	adds	r7, #20
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001cb6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001cb6:	b580      	push	{r7, lr}
 8001cb8:	b082      	sub	sp, #8
 8001cba:	af00      	add	r7, sp, #0
 8001cbc:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001cc4:	2b01      	cmp	r3, #1
 8001cc6:	d101      	bne.n	8001ccc <HAL_PCD_Start+0x16>
 8001cc8:	2302      	movs	r3, #2
 8001cca:	e012      	b.n	8001cf2 <HAL_PCD_Start+0x3c>
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2201      	movs	r2, #1
 8001cd0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f003 fd27 	bl	800572c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f005 fd13 	bl	800770e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2200      	movs	r2, #0
 8001cec:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001cf0:	2300      	movs	r3, #0
}
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	3708      	adds	r7, #8
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}

08001cfa <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001cfa:	b580      	push	{r7, lr}
 8001cfc:	b082      	sub	sp, #8
 8001cfe:	af00      	add	r7, sp, #0
 8001d00:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4618      	mov	r0, r3
 8001d08:	f005 fd18 	bl	800773c <USB_ReadInterrupts>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001d12:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001d16:	d102      	bne.n	8001d1e <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001d18:	6878      	ldr	r0, [r7, #4]
 8001d1a:	f000 fb5b 	bl	80023d4 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4618      	mov	r0, r3
 8001d24:	f005 fd0a 	bl	800773c <USB_ReadInterrupts>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d32:	d112      	bne.n	8001d5a <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001d3c:	b29a      	uxth	r2, r3
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d46:	b292      	uxth	r2, r2
 8001d48:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001d4c:	6878      	ldr	r0, [r7, #4]
 8001d4e:	f007 fc1a 	bl	8009586 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001d52:	2100      	movs	r1, #0
 8001d54:	6878      	ldr	r0, [r7, #4]
 8001d56:	f000 f91e 	bl	8001f96 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4618      	mov	r0, r3
 8001d60:	f005 fcec 	bl	800773c <USB_ReadInterrupts>
 8001d64:	4603      	mov	r3, r0
 8001d66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d6a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001d6e:	d10b      	bne.n	8001d88 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001d78:	b29a      	uxth	r2, r3
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001d82:	b292      	uxth	r2, r2
 8001d84:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f005 fcd5 	bl	800773c <USB_ReadInterrupts>
 8001d92:	4603      	mov	r3, r0
 8001d94:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001d98:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001d9c:	d10b      	bne.n	8001db6 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001da6:	b29a      	uxth	r2, r3
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001db0:	b292      	uxth	r2, r2
 8001db2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f005 fcbe 	bl	800773c <USB_ReadInterrupts>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001dc6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001dca:	d133      	bne.n	8001e34 <HAL_PCD_IRQHandler+0x13a>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001dd4:	b29a      	uxth	r2, r3
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f022 0204 	bic.w	r2, r2, #4
 8001dde:	b292      	uxth	r2, r2
 8001de0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001dec:	b29a      	uxth	r2, r3
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f022 0208 	bic.w	r2, r2, #8
 8001df6:	b292      	uxth	r2, r2
 8001df8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8001e02:	2b01      	cmp	r3, #1
 8001e04:	d107      	bne.n	8001e16 <HAL_PCD_IRQHandler+0x11c>
    {
      hpcd->LPM_State = LPM_L0;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2200      	movs	r2, #0
 8001e0a:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001e0e:	2100      	movs	r1, #0
 8001e10:	6878      	ldr	r0, [r7, #4]
 8001e12:	f007 fdad 	bl	8009970 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001e16:	6878      	ldr	r0, [r7, #4]
 8001e18:	f007 fbee 	bl	80095f8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e24:	b29a      	uxth	r2, r3
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001e2e:	b292      	uxth	r2, r2
 8001e30:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f005 fc7f 	bl	800773c <USB_ReadInterrupts>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e44:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001e48:	d126      	bne.n	8001e98 <HAL_PCD_IRQHandler+0x19e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001e52:	b29a      	uxth	r2, r3
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f042 0208 	orr.w	r2, r2, #8
 8001e5c:	b292      	uxth	r2, r2
 8001e5e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e6a:	b29a      	uxth	r2, r3
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e74:	b292      	uxth	r2, r2
 8001e76:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001e82:	b29a      	uxth	r2, r3
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f042 0204 	orr.w	r2, r2, #4
 8001e8c:	b292      	uxth	r2, r2
 8001e8e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001e92:	6878      	ldr	r0, [r7, #4]
 8001e94:	f007 fb96 	bl	80095c4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  /* Handle LPM Interrupt */
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f005 fc4d 	bl	800773c <USB_ReadInterrupts>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ea8:	2b80      	cmp	r3, #128	; 0x80
 8001eaa:	d13f      	bne.n	8001f2c <HAL_PCD_IRQHandler+0x232>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001eb4:	b29a      	uxth	r2, r3
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001ebe:	b292      	uxth	r2, r2
 8001ec0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d12b      	bne.n	8001f26 <HAL_PCD_IRQHandler+0x22c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001ed6:	b29a      	uxth	r2, r3
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f042 0204 	orr.w	r2, r2, #4
 8001ee0:	b292      	uxth	r2, r2
 8001ee2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001eee:	b29a      	uxth	r2, r3
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f042 0208 	orr.w	r2, r2, #8
 8001ef8:	b292      	uxth	r2, r2
 8001efa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2201      	movs	r2, #1
 8001f02:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001f0e:	b29b      	uxth	r3, r3
 8001f10:	089b      	lsrs	r3, r3, #2
 8001f12:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001f1c:	2101      	movs	r1, #1
 8001f1e:	6878      	ldr	r0, [r7, #4]
 8001f20:	f007 fd26 	bl	8009970 <HAL_PCDEx_LPM_Callback>
 8001f24:	e002      	b.n	8001f2c <HAL_PCD_IRQHandler+0x232>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 8001f26:	6878      	ldr	r0, [r7, #4]
 8001f28:	f007 fb4c 	bl	80095c4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4618      	mov	r0, r3
 8001f32:	f005 fc03 	bl	800773c <USB_ReadInterrupts>
 8001f36:	4603      	mov	r3, r0
 8001f38:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f40:	d10e      	bne.n	8001f60 <HAL_PCD_IRQHandler+0x266>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f4a:	b29a      	uxth	r2, r3
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001f54:	b292      	uxth	r2, r2
 8001f56:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001f5a:	6878      	ldr	r0, [r7, #4]
 8001f5c:	f007 fb05 	bl	800956a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4618      	mov	r0, r3
 8001f66:	f005 fbe9 	bl	800773c <USB_ReadInterrupts>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f70:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001f74:	d10b      	bne.n	8001f8e <HAL_PCD_IRQHandler+0x294>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f7e:	b29a      	uxth	r2, r3
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001f88:	b292      	uxth	r2, r2
 8001f8a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8001f8e:	bf00      	nop
 8001f90:	3708      	adds	r7, #8
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}

08001f96 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001f96:	b580      	push	{r7, lr}
 8001f98:	b082      	sub	sp, #8
 8001f9a:	af00      	add	r7, sp, #0
 8001f9c:	6078      	str	r0, [r7, #4]
 8001f9e:	460b      	mov	r3, r1
 8001fa0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001fa8:	2b01      	cmp	r3, #1
 8001faa:	d101      	bne.n	8001fb0 <HAL_PCD_SetAddress+0x1a>
 8001fac:	2302      	movs	r3, #2
 8001fae:	e013      	b.n	8001fd8 <HAL_PCD_SetAddress+0x42>
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2201      	movs	r2, #1
 8001fb4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	78fa      	ldrb	r2, [r7, #3]
 8001fbc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	78fa      	ldrb	r2, [r7, #3]
 8001fc6:	4611      	mov	r1, r2
 8001fc8:	4618      	mov	r0, r3
 8001fca:	f005 fb8c 	bl	80076e6 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001fd6:	2300      	movs	r3, #0
}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	3708      	adds	r7, #8
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}

08001fe0 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b084      	sub	sp, #16
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
 8001fe8:	4608      	mov	r0, r1
 8001fea:	4611      	mov	r1, r2
 8001fec:	461a      	mov	r2, r3
 8001fee:	4603      	mov	r3, r0
 8001ff0:	70fb      	strb	r3, [r7, #3]
 8001ff2:	460b      	mov	r3, r1
 8001ff4:	803b      	strh	r3, [r7, #0]
 8001ff6:	4613      	mov	r3, r2
 8001ff8:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001ffe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002002:	2b00      	cmp	r3, #0
 8002004:	da0e      	bge.n	8002024 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002006:	78fb      	ldrb	r3, [r7, #3]
 8002008:	f003 0307 	and.w	r3, r3, #7
 800200c:	1c5a      	adds	r2, r3, #1
 800200e:	4613      	mov	r3, r2
 8002010:	009b      	lsls	r3, r3, #2
 8002012:	4413      	add	r3, r2
 8002014:	00db      	lsls	r3, r3, #3
 8002016:	687a      	ldr	r2, [r7, #4]
 8002018:	4413      	add	r3, r2
 800201a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	2201      	movs	r2, #1
 8002020:	705a      	strb	r2, [r3, #1]
 8002022:	e00e      	b.n	8002042 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002024:	78fb      	ldrb	r3, [r7, #3]
 8002026:	f003 0207 	and.w	r2, r3, #7
 800202a:	4613      	mov	r3, r2
 800202c:	009b      	lsls	r3, r3, #2
 800202e:	4413      	add	r3, r2
 8002030:	00db      	lsls	r3, r3, #3
 8002032:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002036:	687a      	ldr	r2, [r7, #4]
 8002038:	4413      	add	r3, r2
 800203a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	2200      	movs	r2, #0
 8002040:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002042:	78fb      	ldrb	r3, [r7, #3]
 8002044:	f003 0307 	and.w	r3, r3, #7
 8002048:	b2da      	uxtb	r2, r3
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800204e:	883a      	ldrh	r2, [r7, #0]
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	78ba      	ldrb	r2, [r7, #2]
 8002058:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	785b      	ldrb	r3, [r3, #1]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d004      	beq.n	800206c <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	781b      	ldrb	r3, [r3, #0]
 8002066:	b29a      	uxth	r2, r3
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800206c:	78bb      	ldrb	r3, [r7, #2]
 800206e:	2b02      	cmp	r3, #2
 8002070:	d102      	bne.n	8002078 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	2200      	movs	r2, #0
 8002076:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800207e:	2b01      	cmp	r3, #1
 8002080:	d101      	bne.n	8002086 <HAL_PCD_EP_Open+0xa6>
 8002082:	2302      	movs	r3, #2
 8002084:	e00e      	b.n	80020a4 <HAL_PCD_EP_Open+0xc4>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2201      	movs	r2, #1
 800208a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	68f9      	ldr	r1, [r7, #12]
 8002094:	4618      	mov	r0, r3
 8002096:	f003 fb9d 	bl	80057d4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2200      	movs	r2, #0
 800209e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 80020a2:	7afb      	ldrb	r3, [r7, #11]
}
 80020a4:	4618      	mov	r0, r3
 80020a6:	3710      	adds	r7, #16
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd80      	pop	{r7, pc}

080020ac <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b084      	sub	sp, #16
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
 80020b4:	460b      	mov	r3, r1
 80020b6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80020b8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	da0e      	bge.n	80020de <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80020c0:	78fb      	ldrb	r3, [r7, #3]
 80020c2:	f003 0307 	and.w	r3, r3, #7
 80020c6:	1c5a      	adds	r2, r3, #1
 80020c8:	4613      	mov	r3, r2
 80020ca:	009b      	lsls	r3, r3, #2
 80020cc:	4413      	add	r3, r2
 80020ce:	00db      	lsls	r3, r3, #3
 80020d0:	687a      	ldr	r2, [r7, #4]
 80020d2:	4413      	add	r3, r2
 80020d4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	2201      	movs	r2, #1
 80020da:	705a      	strb	r2, [r3, #1]
 80020dc:	e00e      	b.n	80020fc <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80020de:	78fb      	ldrb	r3, [r7, #3]
 80020e0:	f003 0207 	and.w	r2, r3, #7
 80020e4:	4613      	mov	r3, r2
 80020e6:	009b      	lsls	r3, r3, #2
 80020e8:	4413      	add	r3, r2
 80020ea:	00db      	lsls	r3, r3, #3
 80020ec:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80020f0:	687a      	ldr	r2, [r7, #4]
 80020f2:	4413      	add	r3, r2
 80020f4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	2200      	movs	r2, #0
 80020fa:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80020fc:	78fb      	ldrb	r3, [r7, #3]
 80020fe:	f003 0307 	and.w	r3, r3, #7
 8002102:	b2da      	uxtb	r2, r3
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800210e:	2b01      	cmp	r3, #1
 8002110:	d101      	bne.n	8002116 <HAL_PCD_EP_Close+0x6a>
 8002112:	2302      	movs	r3, #2
 8002114:	e00e      	b.n	8002134 <HAL_PCD_EP_Close+0x88>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2201      	movs	r2, #1
 800211a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	68f9      	ldr	r1, [r7, #12]
 8002124:	4618      	mov	r0, r3
 8002126:	f003 fec3 	bl	8005eb0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2200      	movs	r2, #0
 800212e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8002132:	2300      	movs	r3, #0
}
 8002134:	4618      	mov	r0, r3
 8002136:	3710      	adds	r7, #16
 8002138:	46bd      	mov	sp, r7
 800213a:	bd80      	pop	{r7, pc}

0800213c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b086      	sub	sp, #24
 8002140:	af00      	add	r7, sp, #0
 8002142:	60f8      	str	r0, [r7, #12]
 8002144:	607a      	str	r2, [r7, #4]
 8002146:	603b      	str	r3, [r7, #0]
 8002148:	460b      	mov	r3, r1
 800214a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800214c:	7afb      	ldrb	r3, [r7, #11]
 800214e:	f003 0207 	and.w	r2, r3, #7
 8002152:	4613      	mov	r3, r2
 8002154:	009b      	lsls	r3, r3, #2
 8002156:	4413      	add	r3, r2
 8002158:	00db      	lsls	r3, r3, #3
 800215a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800215e:	68fa      	ldr	r2, [r7, #12]
 8002160:	4413      	add	r3, r2
 8002162:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002164:	697b      	ldr	r3, [r7, #20]
 8002166:	687a      	ldr	r2, [r7, #4]
 8002168:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800216a:	697b      	ldr	r3, [r7, #20]
 800216c:	683a      	ldr	r2, [r7, #0]
 800216e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002170:	697b      	ldr	r3, [r7, #20]
 8002172:	2200      	movs	r2, #0
 8002174:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002176:	697b      	ldr	r3, [r7, #20]
 8002178:	2200      	movs	r2, #0
 800217a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800217c:	7afb      	ldrb	r3, [r7, #11]
 800217e:	f003 0307 	and.w	r3, r3, #7
 8002182:	b2da      	uxtb	r2, r3
 8002184:	697b      	ldr	r3, [r7, #20]
 8002186:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002188:	7afb      	ldrb	r3, [r7, #11]
 800218a:	f003 0307 	and.w	r3, r3, #7
 800218e:	2b00      	cmp	r3, #0
 8002190:	d106      	bne.n	80021a0 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	6979      	ldr	r1, [r7, #20]
 8002198:	4618      	mov	r0, r3
 800219a:	f004 f876 	bl	800628a <USB_EPStartXfer>
 800219e:	e005      	b.n	80021ac <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	6979      	ldr	r1, [r7, #20]
 80021a6:	4618      	mov	r0, r3
 80021a8:	f004 f86f 	bl	800628a <USB_EPStartXfer>
  }

  return HAL_OK;
 80021ac:	2300      	movs	r3, #0
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	3718      	adds	r7, #24
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}

080021b6 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80021b6:	b480      	push	{r7}
 80021b8:	b083      	sub	sp, #12
 80021ba:	af00      	add	r7, sp, #0
 80021bc:	6078      	str	r0, [r7, #4]
 80021be:	460b      	mov	r3, r1
 80021c0:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80021c2:	78fb      	ldrb	r3, [r7, #3]
 80021c4:	f003 0207 	and.w	r2, r3, #7
 80021c8:	6879      	ldr	r1, [r7, #4]
 80021ca:	4613      	mov	r3, r2
 80021cc:	009b      	lsls	r3, r3, #2
 80021ce:	4413      	add	r3, r2
 80021d0:	00db      	lsls	r3, r3, #3
 80021d2:	440b      	add	r3, r1
 80021d4:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80021d8:	681b      	ldr	r3, [r3, #0]
}
 80021da:	4618      	mov	r0, r3
 80021dc:	370c      	adds	r7, #12
 80021de:	46bd      	mov	sp, r7
 80021e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e4:	4770      	bx	lr

080021e6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80021e6:	b580      	push	{r7, lr}
 80021e8:	b086      	sub	sp, #24
 80021ea:	af00      	add	r7, sp, #0
 80021ec:	60f8      	str	r0, [r7, #12]
 80021ee:	607a      	str	r2, [r7, #4]
 80021f0:	603b      	str	r3, [r7, #0]
 80021f2:	460b      	mov	r3, r1
 80021f4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80021f6:	7afb      	ldrb	r3, [r7, #11]
 80021f8:	f003 0307 	and.w	r3, r3, #7
 80021fc:	1c5a      	adds	r2, r3, #1
 80021fe:	4613      	mov	r3, r2
 8002200:	009b      	lsls	r3, r3, #2
 8002202:	4413      	add	r3, r2
 8002204:	00db      	lsls	r3, r3, #3
 8002206:	68fa      	ldr	r2, [r7, #12]
 8002208:	4413      	add	r3, r2
 800220a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800220c:	697b      	ldr	r3, [r7, #20]
 800220e:	687a      	ldr	r2, [r7, #4]
 8002210:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002212:	697b      	ldr	r3, [r7, #20]
 8002214:	683a      	ldr	r2, [r7, #0]
 8002216:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8002218:	697b      	ldr	r3, [r7, #20]
 800221a:	2201      	movs	r2, #1
 800221c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8002220:	697b      	ldr	r3, [r7, #20]
 8002222:	683a      	ldr	r2, [r7, #0]
 8002224:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8002226:	697b      	ldr	r3, [r7, #20]
 8002228:	2200      	movs	r2, #0
 800222a:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800222c:	697b      	ldr	r3, [r7, #20]
 800222e:	2201      	movs	r2, #1
 8002230:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002232:	7afb      	ldrb	r3, [r7, #11]
 8002234:	f003 0307 	and.w	r3, r3, #7
 8002238:	b2da      	uxtb	r2, r3
 800223a:	697b      	ldr	r3, [r7, #20]
 800223c:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800223e:	7afb      	ldrb	r3, [r7, #11]
 8002240:	f003 0307 	and.w	r3, r3, #7
 8002244:	2b00      	cmp	r3, #0
 8002246:	d106      	bne.n	8002256 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	6979      	ldr	r1, [r7, #20]
 800224e:	4618      	mov	r0, r3
 8002250:	f004 f81b 	bl	800628a <USB_EPStartXfer>
 8002254:	e005      	b.n	8002262 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	6979      	ldr	r1, [r7, #20]
 800225c:	4618      	mov	r0, r3
 800225e:	f004 f814 	bl	800628a <USB_EPStartXfer>
  }

  return HAL_OK;
 8002262:	2300      	movs	r3, #0
}
 8002264:	4618      	mov	r0, r3
 8002266:	3718      	adds	r7, #24
 8002268:	46bd      	mov	sp, r7
 800226a:	bd80      	pop	{r7, pc}

0800226c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b084      	sub	sp, #16
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
 8002274:	460b      	mov	r3, r1
 8002276:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002278:	78fb      	ldrb	r3, [r7, #3]
 800227a:	f003 0207 	and.w	r2, r3, #7
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	429a      	cmp	r2, r3
 8002284:	d901      	bls.n	800228a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002286:	2301      	movs	r3, #1
 8002288:	e04c      	b.n	8002324 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800228a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800228e:	2b00      	cmp	r3, #0
 8002290:	da0e      	bge.n	80022b0 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002292:	78fb      	ldrb	r3, [r7, #3]
 8002294:	f003 0307 	and.w	r3, r3, #7
 8002298:	1c5a      	adds	r2, r3, #1
 800229a:	4613      	mov	r3, r2
 800229c:	009b      	lsls	r3, r3, #2
 800229e:	4413      	add	r3, r2
 80022a0:	00db      	lsls	r3, r3, #3
 80022a2:	687a      	ldr	r2, [r7, #4]
 80022a4:	4413      	add	r3, r2
 80022a6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	2201      	movs	r2, #1
 80022ac:	705a      	strb	r2, [r3, #1]
 80022ae:	e00c      	b.n	80022ca <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80022b0:	78fa      	ldrb	r2, [r7, #3]
 80022b2:	4613      	mov	r3, r2
 80022b4:	009b      	lsls	r3, r3, #2
 80022b6:	4413      	add	r3, r2
 80022b8:	00db      	lsls	r3, r3, #3
 80022ba:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80022be:	687a      	ldr	r2, [r7, #4]
 80022c0:	4413      	add	r3, r2
 80022c2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	2200      	movs	r2, #0
 80022c8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	2201      	movs	r2, #1
 80022ce:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80022d0:	78fb      	ldrb	r3, [r7, #3]
 80022d2:	f003 0307 	and.w	r3, r3, #7
 80022d6:	b2da      	uxtb	r2, r3
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80022e2:	2b01      	cmp	r3, #1
 80022e4:	d101      	bne.n	80022ea <HAL_PCD_EP_SetStall+0x7e>
 80022e6:	2302      	movs	r3, #2
 80022e8:	e01c      	b.n	8002324 <HAL_PCD_EP_SetStall+0xb8>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2201      	movs	r2, #1
 80022ee:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	68f9      	ldr	r1, [r7, #12]
 80022f8:	4618      	mov	r0, r3
 80022fa:	f005 f8f5 	bl	80074e8 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80022fe:	78fb      	ldrb	r3, [r7, #3]
 8002300:	f003 0307 	and.w	r3, r3, #7
 8002304:	2b00      	cmp	r3, #0
 8002306:	d108      	bne.n	800231a <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681a      	ldr	r2, [r3, #0]
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8002312:	4619      	mov	r1, r3
 8002314:	4610      	mov	r0, r2
 8002316:	f005 fa21 	bl	800775c <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2200      	movs	r2, #0
 800231e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002322:	2300      	movs	r3, #0
}
 8002324:	4618      	mov	r0, r3
 8002326:	3710      	adds	r7, #16
 8002328:	46bd      	mov	sp, r7
 800232a:	bd80      	pop	{r7, pc}

0800232c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b084      	sub	sp, #16
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
 8002334:	460b      	mov	r3, r1
 8002336:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002338:	78fb      	ldrb	r3, [r7, #3]
 800233a:	f003 020f 	and.w	r2, r3, #15
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	429a      	cmp	r2, r3
 8002344:	d901      	bls.n	800234a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002346:	2301      	movs	r3, #1
 8002348:	e040      	b.n	80023cc <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800234a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800234e:	2b00      	cmp	r3, #0
 8002350:	da0e      	bge.n	8002370 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002352:	78fb      	ldrb	r3, [r7, #3]
 8002354:	f003 0307 	and.w	r3, r3, #7
 8002358:	1c5a      	adds	r2, r3, #1
 800235a:	4613      	mov	r3, r2
 800235c:	009b      	lsls	r3, r3, #2
 800235e:	4413      	add	r3, r2
 8002360:	00db      	lsls	r3, r3, #3
 8002362:	687a      	ldr	r2, [r7, #4]
 8002364:	4413      	add	r3, r2
 8002366:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	2201      	movs	r2, #1
 800236c:	705a      	strb	r2, [r3, #1]
 800236e:	e00e      	b.n	800238e <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002370:	78fb      	ldrb	r3, [r7, #3]
 8002372:	f003 0207 	and.w	r2, r3, #7
 8002376:	4613      	mov	r3, r2
 8002378:	009b      	lsls	r3, r3, #2
 800237a:	4413      	add	r3, r2
 800237c:	00db      	lsls	r3, r3, #3
 800237e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002382:	687a      	ldr	r2, [r7, #4]
 8002384:	4413      	add	r3, r2
 8002386:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	2200      	movs	r2, #0
 800238c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	2200      	movs	r2, #0
 8002392:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002394:	78fb      	ldrb	r3, [r7, #3]
 8002396:	f003 0307 	and.w	r3, r3, #7
 800239a:	b2da      	uxtb	r2, r3
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80023a6:	2b01      	cmp	r3, #1
 80023a8:	d101      	bne.n	80023ae <HAL_PCD_EP_ClrStall+0x82>
 80023aa:	2302      	movs	r3, #2
 80023ac:	e00e      	b.n	80023cc <HAL_PCD_EP_ClrStall+0xa0>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2201      	movs	r2, #1
 80023b2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	68f9      	ldr	r1, [r7, #12]
 80023bc:	4618      	mov	r0, r3
 80023be:	f005 f8e4 	bl	800758a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2200      	movs	r2, #0
 80023c6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80023ca:	2300      	movs	r3, #0
}
 80023cc:	4618      	mov	r0, r3
 80023ce:	3710      	adds	r7, #16
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bd80      	pop	{r7, pc}

080023d4 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b08e      	sub	sp, #56	; 0x38
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80023dc:	e2d1      	b.n	8002982 <PCD_EP_ISR_Handler+0x5ae>
  {
    wIstr = hpcd->Instance->ISTR;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80023e6:	85fb      	strh	r3, [r7, #46]	; 0x2e
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80023e8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80023ea:	b2db      	uxtb	r3, r3
 80023ec:	f003 030f 	and.w	r3, r3, #15
 80023f0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 80023f4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	f040 8152 	bne.w	80026a2 <PCD_EP_ISR_Handler+0x2ce>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80023fe:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002400:	f003 0310 	and.w	r3, r3, #16
 8002404:	2b00      	cmp	r3, #0
 8002406:	d150      	bne.n	80024aa <PCD_EP_ISR_Handler+0xd6>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	881b      	ldrh	r3, [r3, #0]
 800240e:	b29b      	uxth	r3, r3
 8002410:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002414:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002418:	81fb      	strh	r3, [r7, #14]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681a      	ldr	r2, [r3, #0]
 800241e:	89fb      	ldrh	r3, [r7, #14]
 8002420:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002424:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002428:	b29b      	uxth	r3, r3
 800242a:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	3328      	adds	r3, #40	; 0x28
 8002430:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800243a:	b29b      	uxth	r3, r3
 800243c:	461a      	mov	r2, r3
 800243e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002440:	781b      	ldrb	r3, [r3, #0]
 8002442:	00db      	lsls	r3, r3, #3
 8002444:	4413      	add	r3, r2
 8002446:	687a      	ldr	r2, [r7, #4]
 8002448:	6812      	ldr	r2, [r2, #0]
 800244a:	4413      	add	r3, r2
 800244c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002450:	881b      	ldrh	r3, [r3, #0]
 8002452:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002458:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800245a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800245c:	695a      	ldr	r2, [r3, #20]
 800245e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002460:	69db      	ldr	r3, [r3, #28]
 8002462:	441a      	add	r2, r3
 8002464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002466:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002468:	2100      	movs	r1, #0
 800246a:	6878      	ldr	r0, [r7, #4]
 800246c:	f007 f863 	bl	8009536 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002476:	b2db      	uxtb	r3, r3
 8002478:	2b00      	cmp	r3, #0
 800247a:	f000 8282 	beq.w	8002982 <PCD_EP_ISR_Handler+0x5ae>
 800247e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002480:	699b      	ldr	r3, [r3, #24]
 8002482:	2b00      	cmp	r3, #0
 8002484:	f040 827d 	bne.w	8002982 <PCD_EP_ISR_Handler+0x5ae>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800248e:	b2db      	uxtb	r3, r3
 8002490:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002494:	b2da      	uxtb	r2, r3
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	b292      	uxth	r2, r2
 800249c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2200      	movs	r2, #0
 80024a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80024a8:	e26b      	b.n	8002982 <PCD_EP_ISR_Handler+0x5ae>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80024b0:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	881b      	ldrh	r3, [r3, #0]
 80024b8:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80024ba:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80024bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d032      	beq.n	800252a <PCD_EP_ISR_Handler+0x156>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80024cc:	b29b      	uxth	r3, r3
 80024ce:	461a      	mov	r2, r3
 80024d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d2:	781b      	ldrb	r3, [r3, #0]
 80024d4:	00db      	lsls	r3, r3, #3
 80024d6:	4413      	add	r3, r2
 80024d8:	687a      	ldr	r2, [r7, #4]
 80024da:	6812      	ldr	r2, [r2, #0]
 80024dc:	4413      	add	r3, r2
 80024de:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80024e2:	881b      	ldrh	r3, [r3, #0]
 80024e4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80024e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ea:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6818      	ldr	r0, [r3, #0]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 80024f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f8:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80024fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024fc:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80024fe:	b29b      	uxth	r3, r3
 8002500:	f005 f979 	bl	80077f6 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	881b      	ldrh	r3, [r3, #0]
 800250a:	b29a      	uxth	r2, r3
 800250c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002510:	4013      	ands	r3, r2
 8002512:	823b      	strh	r3, [r7, #16]
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	8a3a      	ldrh	r2, [r7, #16]
 800251a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800251e:	b292      	uxth	r2, r2
 8002520:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002522:	6878      	ldr	r0, [r7, #4]
 8002524:	f006 ffda 	bl	80094dc <HAL_PCD_SetupStageCallback>
 8002528:	e22b      	b.n	8002982 <PCD_EP_ISR_Handler+0x5ae>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800252a:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800252e:	2b00      	cmp	r3, #0
 8002530:	f280 8227 	bge.w	8002982 <PCD_EP_ISR_Handler+0x5ae>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	881b      	ldrh	r3, [r3, #0]
 800253a:	b29a      	uxth	r2, r3
 800253c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002540:	4013      	ands	r3, r2
 8002542:	83bb      	strh	r3, [r7, #28]
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	8bba      	ldrh	r2, [r7, #28]
 800254a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800254e:	b292      	uxth	r2, r2
 8002550:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800255a:	b29b      	uxth	r3, r3
 800255c:	461a      	mov	r2, r3
 800255e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002560:	781b      	ldrb	r3, [r3, #0]
 8002562:	00db      	lsls	r3, r3, #3
 8002564:	4413      	add	r3, r2
 8002566:	687a      	ldr	r2, [r7, #4]
 8002568:	6812      	ldr	r2, [r2, #0]
 800256a:	4413      	add	r3, r2
 800256c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002570:	881b      	ldrh	r3, [r3, #0]
 8002572:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002578:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800257a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800257c:	69db      	ldr	r3, [r3, #28]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d019      	beq.n	80025b6 <PCD_EP_ISR_Handler+0x1e2>
 8002582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002584:	695b      	ldr	r3, [r3, #20]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d015      	beq.n	80025b6 <PCD_EP_ISR_Handler+0x1e2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6818      	ldr	r0, [r3, #0]
 800258e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002590:	6959      	ldr	r1, [r3, #20]
 8002592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002594:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002598:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800259a:	b29b      	uxth	r3, r3
 800259c:	f005 f92b 	bl	80077f6 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80025a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a2:	695a      	ldr	r2, [r3, #20]
 80025a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a6:	69db      	ldr	r3, [r3, #28]
 80025a8:	441a      	add	r2, r3
 80025aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ac:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80025ae:	2100      	movs	r1, #0
 80025b0:	6878      	ldr	r0, [r7, #4]
 80025b2:	f006 ffa5 	bl	8009500 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	61bb      	str	r3, [r7, #24]
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025c4:	b29b      	uxth	r3, r3
 80025c6:	461a      	mov	r2, r3
 80025c8:	69bb      	ldr	r3, [r7, #24]
 80025ca:	4413      	add	r3, r2
 80025cc:	61bb      	str	r3, [r7, #24]
 80025ce:	69bb      	ldr	r3, [r7, #24]
 80025d0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80025d4:	617b      	str	r3, [r7, #20]
 80025d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d8:	691b      	ldr	r3, [r3, #16]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d112      	bne.n	8002604 <PCD_EP_ISR_Handler+0x230>
 80025de:	697b      	ldr	r3, [r7, #20]
 80025e0:	881b      	ldrh	r3, [r3, #0]
 80025e2:	b29b      	uxth	r3, r3
 80025e4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80025e8:	b29a      	uxth	r2, r3
 80025ea:	697b      	ldr	r3, [r7, #20]
 80025ec:	801a      	strh	r2, [r3, #0]
 80025ee:	697b      	ldr	r3, [r7, #20]
 80025f0:	881b      	ldrh	r3, [r3, #0]
 80025f2:	b29b      	uxth	r3, r3
 80025f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80025f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80025fc:	b29a      	uxth	r2, r3
 80025fe:	697b      	ldr	r3, [r7, #20]
 8002600:	801a      	strh	r2, [r3, #0]
 8002602:	e02f      	b.n	8002664 <PCD_EP_ISR_Handler+0x290>
 8002604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002606:	691b      	ldr	r3, [r3, #16]
 8002608:	2b3e      	cmp	r3, #62	; 0x3e
 800260a:	d813      	bhi.n	8002634 <PCD_EP_ISR_Handler+0x260>
 800260c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800260e:	691b      	ldr	r3, [r3, #16]
 8002610:	085b      	lsrs	r3, r3, #1
 8002612:	633b      	str	r3, [r7, #48]	; 0x30
 8002614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002616:	691b      	ldr	r3, [r3, #16]
 8002618:	f003 0301 	and.w	r3, r3, #1
 800261c:	2b00      	cmp	r3, #0
 800261e:	d002      	beq.n	8002626 <PCD_EP_ISR_Handler+0x252>
 8002620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002622:	3301      	adds	r3, #1
 8002624:	633b      	str	r3, [r7, #48]	; 0x30
 8002626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002628:	b29b      	uxth	r3, r3
 800262a:	029b      	lsls	r3, r3, #10
 800262c:	b29a      	uxth	r2, r3
 800262e:	697b      	ldr	r3, [r7, #20]
 8002630:	801a      	strh	r2, [r3, #0]
 8002632:	e017      	b.n	8002664 <PCD_EP_ISR_Handler+0x290>
 8002634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002636:	691b      	ldr	r3, [r3, #16]
 8002638:	095b      	lsrs	r3, r3, #5
 800263a:	633b      	str	r3, [r7, #48]	; 0x30
 800263c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800263e:	691b      	ldr	r3, [r3, #16]
 8002640:	f003 031f 	and.w	r3, r3, #31
 8002644:	2b00      	cmp	r3, #0
 8002646:	d102      	bne.n	800264e <PCD_EP_ISR_Handler+0x27a>
 8002648:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800264a:	3b01      	subs	r3, #1
 800264c:	633b      	str	r3, [r7, #48]	; 0x30
 800264e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002650:	b29b      	uxth	r3, r3
 8002652:	029b      	lsls	r3, r3, #10
 8002654:	b29b      	uxth	r3, r3
 8002656:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800265a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800265e:	b29a      	uxth	r2, r3
 8002660:	697b      	ldr	r3, [r7, #20]
 8002662:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	881b      	ldrh	r3, [r3, #0]
 800266a:	b29b      	uxth	r3, r3
 800266c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002670:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002674:	827b      	strh	r3, [r7, #18]
 8002676:	8a7b      	ldrh	r3, [r7, #18]
 8002678:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800267c:	827b      	strh	r3, [r7, #18]
 800267e:	8a7b      	ldrh	r3, [r7, #18]
 8002680:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002684:	827b      	strh	r3, [r7, #18]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681a      	ldr	r2, [r3, #0]
 800268a:	8a7b      	ldrh	r3, [r7, #18]
 800268c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002690:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002694:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002698:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800269c:	b29b      	uxth	r3, r3
 800269e:	8013      	strh	r3, [r2, #0]
 80026a0:	e16f      	b.n	8002982 <PCD_EP_ISR_Handler+0x5ae>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	461a      	mov	r2, r3
 80026a8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80026ac:	009b      	lsls	r3, r3, #2
 80026ae:	4413      	add	r3, r2
 80026b0:	881b      	ldrh	r3, [r3, #0]
 80026b2:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80026b4:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	f280 80e4 	bge.w	8002886 <PCD_EP_ISR_Handler+0x4b2>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	461a      	mov	r2, r3
 80026c4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80026c8:	009b      	lsls	r3, r3, #2
 80026ca:	4413      	add	r3, r2
 80026cc:	881b      	ldrh	r3, [r3, #0]
 80026ce:	b29a      	uxth	r2, r3
 80026d0:	f640 738f 	movw	r3, #3983	; 0xf8f
 80026d4:	4013      	ands	r3, r2
 80026d6:	853b      	strh	r3, [r7, #40]	; 0x28
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	461a      	mov	r2, r3
 80026de:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80026e2:	009b      	lsls	r3, r3, #2
 80026e4:	4413      	add	r3, r2
 80026e6:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80026e8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80026ec:	b292      	uxth	r2, r2
 80026ee:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80026f0:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80026f4:	4613      	mov	r3, r2
 80026f6:	009b      	lsls	r3, r3, #2
 80026f8:	4413      	add	r3, r2
 80026fa:	00db      	lsls	r3, r3, #3
 80026fc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002700:	687a      	ldr	r2, [r7, #4]
 8002702:	4413      	add	r3, r2
 8002704:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002708:	7b1b      	ldrb	r3, [r3, #12]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d120      	bne.n	8002750 <PCD_EP_ISR_Handler+0x37c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002716:	b29b      	uxth	r3, r3
 8002718:	461a      	mov	r2, r3
 800271a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800271c:	781b      	ldrb	r3, [r3, #0]
 800271e:	00db      	lsls	r3, r3, #3
 8002720:	4413      	add	r3, r2
 8002722:	687a      	ldr	r2, [r7, #4]
 8002724:	6812      	ldr	r2, [r2, #0]
 8002726:	4413      	add	r3, r2
 8002728:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800272c:	881b      	ldrh	r3, [r3, #0]
 800272e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002732:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8002734:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002736:	2b00      	cmp	r3, #0
 8002738:	f000 8083 	beq.w	8002842 <PCD_EP_ISR_Handler+0x46e>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6818      	ldr	r0, [r3, #0]
 8002740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002742:	6959      	ldr	r1, [r3, #20]
 8002744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002746:	88da      	ldrh	r2, [r3, #6]
 8002748:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800274a:	f005 f854 	bl	80077f6 <USB_ReadPMA>
 800274e:	e078      	b.n	8002842 <PCD_EP_ISR_Handler+0x46e>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002752:	78db      	ldrb	r3, [r3, #3]
 8002754:	2b02      	cmp	r3, #2
 8002756:	d108      	bne.n	800276a <PCD_EP_ISR_Handler+0x396>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002758:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800275a:	461a      	mov	r2, r3
 800275c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800275e:	6878      	ldr	r0, [r7, #4]
 8002760:	f000 f91d 	bl	800299e <HAL_PCD_EP_DB_Receive>
 8002764:	4603      	mov	r3, r0
 8002766:	86fb      	strh	r3, [r7, #54]	; 0x36
 8002768:	e06b      	b.n	8002842 <PCD_EP_ISR_Handler+0x46e>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	461a      	mov	r2, r3
 8002770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002772:	781b      	ldrb	r3, [r3, #0]
 8002774:	009b      	lsls	r3, r3, #2
 8002776:	4413      	add	r3, r2
 8002778:	881b      	ldrh	r3, [r3, #0]
 800277a:	b29b      	uxth	r3, r3
 800277c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002780:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002784:	847b      	strh	r3, [r7, #34]	; 0x22
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	461a      	mov	r2, r3
 800278c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800278e:	781b      	ldrb	r3, [r3, #0]
 8002790:	009b      	lsls	r3, r3, #2
 8002792:	441a      	add	r2, r3
 8002794:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002796:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800279a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800279e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80027a2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80027a6:	b29b      	uxth	r3, r3
 80027a8:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	461a      	mov	r2, r3
 80027b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b2:	781b      	ldrb	r3, [r3, #0]
 80027b4:	009b      	lsls	r3, r3, #2
 80027b6:	4413      	add	r3, r2
 80027b8:	881b      	ldrh	r3, [r3, #0]
 80027ba:	b29b      	uxth	r3, r3
 80027bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d01f      	beq.n	8002804 <PCD_EP_ISR_Handler+0x430>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80027cc:	b29b      	uxth	r3, r3
 80027ce:	461a      	mov	r2, r3
 80027d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d2:	781b      	ldrb	r3, [r3, #0]
 80027d4:	00db      	lsls	r3, r3, #3
 80027d6:	4413      	add	r3, r2
 80027d8:	687a      	ldr	r2, [r7, #4]
 80027da:	6812      	ldr	r2, [r2, #0]
 80027dc:	4413      	add	r3, r2
 80027de:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80027e2:	881b      	ldrh	r3, [r3, #0]
 80027e4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80027e8:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80027ea:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d028      	beq.n	8002842 <PCD_EP_ISR_Handler+0x46e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6818      	ldr	r0, [r3, #0]
 80027f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f6:	6959      	ldr	r1, [r3, #20]
 80027f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027fa:	891a      	ldrh	r2, [r3, #8]
 80027fc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80027fe:	f004 fffa 	bl	80077f6 <USB_ReadPMA>
 8002802:	e01e      	b.n	8002842 <PCD_EP_ISR_Handler+0x46e>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800280c:	b29b      	uxth	r3, r3
 800280e:	461a      	mov	r2, r3
 8002810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002812:	781b      	ldrb	r3, [r3, #0]
 8002814:	00db      	lsls	r3, r3, #3
 8002816:	4413      	add	r3, r2
 8002818:	687a      	ldr	r2, [r7, #4]
 800281a:	6812      	ldr	r2, [r2, #0]
 800281c:	4413      	add	r3, r2
 800281e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002822:	881b      	ldrh	r3, [r3, #0]
 8002824:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002828:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 800282a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800282c:	2b00      	cmp	r3, #0
 800282e:	d008      	beq.n	8002842 <PCD_EP_ISR_Handler+0x46e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6818      	ldr	r0, [r3, #0]
 8002834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002836:	6959      	ldr	r1, [r3, #20]
 8002838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800283a:	895a      	ldrh	r2, [r3, #10]
 800283c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800283e:	f004 ffda 	bl	80077f6 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002844:	69da      	ldr	r2, [r3, #28]
 8002846:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002848:	441a      	add	r2, r3
 800284a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800284c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800284e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002850:	695a      	ldr	r2, [r3, #20]
 8002852:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002854:	441a      	add	r2, r3
 8002856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002858:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800285a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800285c:	699b      	ldr	r3, [r3, #24]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d004      	beq.n	800286c <PCD_EP_ISR_Handler+0x498>
 8002862:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8002864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002866:	691b      	ldr	r3, [r3, #16]
 8002868:	429a      	cmp	r2, r3
 800286a:	d206      	bcs.n	800287a <PCD_EP_ISR_Handler+0x4a6>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800286c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800286e:	781b      	ldrb	r3, [r3, #0]
 8002870:	4619      	mov	r1, r3
 8002872:	6878      	ldr	r0, [r7, #4]
 8002874:	f006 fe44 	bl	8009500 <HAL_PCD_DataOutStageCallback>
 8002878:	e005      	b.n	8002886 <PCD_EP_ISR_Handler+0x4b2>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002880:	4618      	mov	r0, r3
 8002882:	f003 fd02 	bl	800628a <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002886:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002888:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800288c:	2b00      	cmp	r3, #0
 800288e:	d078      	beq.n	8002982 <PCD_EP_ISR_Handler+0x5ae>
      {
        ep = &hpcd->IN_ep[epindex];
 8002890:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002894:	1c5a      	adds	r2, r3, #1
 8002896:	4613      	mov	r3, r2
 8002898:	009b      	lsls	r3, r3, #2
 800289a:	4413      	add	r3, r2
 800289c:	00db      	lsls	r3, r3, #3
 800289e:	687a      	ldr	r2, [r7, #4]
 80028a0:	4413      	add	r3, r2
 80028a2:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	461a      	mov	r2, r3
 80028aa:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80028ae:	009b      	lsls	r3, r3, #2
 80028b0:	4413      	add	r3, r2
 80028b2:	881b      	ldrh	r3, [r3, #0]
 80028b4:	b29b      	uxth	r3, r3
 80028b6:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80028ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028be:	843b      	strh	r3, [r7, #32]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	461a      	mov	r2, r3
 80028c6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80028ca:	009b      	lsls	r3, r3, #2
 80028cc:	441a      	add	r2, r3
 80028ce:	8c3b      	ldrh	r3, [r7, #32]
 80028d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80028d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80028d8:	b29b      	uxth	r3, r3
 80028da:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 80028dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028de:	78db      	ldrb	r3, [r3, #3]
 80028e0:	2b02      	cmp	r3, #2
 80028e2:	d108      	bne.n	80028f6 <PCD_EP_ISR_Handler+0x522>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80028e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e6:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 80028e8:	2b02      	cmp	r3, #2
 80028ea:	d144      	bne.n	8002976 <PCD_EP_ISR_Handler+0x5a2>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80028ec:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80028ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d13f      	bne.n	8002976 <PCD_EP_ISR_Handler+0x5a2>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80028fe:	b29b      	uxth	r3, r3
 8002900:	461a      	mov	r2, r3
 8002902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002904:	781b      	ldrb	r3, [r3, #0]
 8002906:	00db      	lsls	r3, r3, #3
 8002908:	4413      	add	r3, r2
 800290a:	687a      	ldr	r2, [r7, #4]
 800290c:	6812      	ldr	r2, [r2, #0]
 800290e:	4413      	add	r3, r2
 8002910:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002914:	881b      	ldrh	r3, [r3, #0]
 8002916:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800291a:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 800291c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800291e:	699a      	ldr	r2, [r3, #24]
 8002920:	8bfb      	ldrh	r3, [r7, #30]
 8002922:	429a      	cmp	r2, r3
 8002924:	d906      	bls.n	8002934 <PCD_EP_ISR_Handler+0x560>
          {
            ep->xfer_len -= TxByteNbre;
 8002926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002928:	699a      	ldr	r2, [r3, #24]
 800292a:	8bfb      	ldrh	r3, [r7, #30]
 800292c:	1ad2      	subs	r2, r2, r3
 800292e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002930:	619a      	str	r2, [r3, #24]
 8002932:	e002      	b.n	800293a <PCD_EP_ISR_Handler+0x566>
          }
          else
          {
            ep->xfer_len = 0U;
 8002934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002936:	2200      	movs	r2, #0
 8002938:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 800293a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800293c:	699b      	ldr	r3, [r3, #24]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d106      	bne.n	8002950 <PCD_EP_ISR_Handler+0x57c>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002944:	781b      	ldrb	r3, [r3, #0]
 8002946:	4619      	mov	r1, r3
 8002948:	6878      	ldr	r0, [r7, #4]
 800294a:	f006 fdf4 	bl	8009536 <HAL_PCD_DataInStageCallback>
 800294e:	e018      	b.n	8002982 <PCD_EP_ISR_Handler+0x5ae>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8002950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002952:	695a      	ldr	r2, [r3, #20]
 8002954:	8bfb      	ldrh	r3, [r7, #30]
 8002956:	441a      	add	r2, r3
 8002958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800295a:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 800295c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800295e:	69da      	ldr	r2, [r3, #28]
 8002960:	8bfb      	ldrh	r3, [r7, #30]
 8002962:	441a      	add	r2, r3
 8002964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002966:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800296e:	4618      	mov	r0, r3
 8002970:	f003 fc8b 	bl	800628a <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8002974:	e005      	b.n	8002982 <PCD_EP_ISR_Handler+0x5ae>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002976:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002978:	461a      	mov	r2, r3
 800297a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800297c:	6878      	ldr	r0, [r7, #4]
 800297e:	f000 f917 	bl	8002bb0 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800298a:	b29b      	uxth	r3, r3
 800298c:	b21b      	sxth	r3, r3
 800298e:	2b00      	cmp	r3, #0
 8002990:	f6ff ad25 	blt.w	80023de <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002994:	2300      	movs	r3, #0
}
 8002996:	4618      	mov	r0, r3
 8002998:	3738      	adds	r7, #56	; 0x38
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}

0800299e <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800299e:	b580      	push	{r7, lr}
 80029a0:	b088      	sub	sp, #32
 80029a2:	af00      	add	r7, sp, #0
 80029a4:	60f8      	str	r0, [r7, #12]
 80029a6:	60b9      	str	r1, [r7, #8]
 80029a8:	4613      	mov	r3, r2
 80029aa:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80029ac:	88fb      	ldrh	r3, [r7, #6]
 80029ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d07c      	beq.n	8002ab0 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80029be:	b29b      	uxth	r3, r3
 80029c0:	461a      	mov	r2, r3
 80029c2:	68bb      	ldr	r3, [r7, #8]
 80029c4:	781b      	ldrb	r3, [r3, #0]
 80029c6:	00db      	lsls	r3, r3, #3
 80029c8:	4413      	add	r3, r2
 80029ca:	68fa      	ldr	r2, [r7, #12]
 80029cc:	6812      	ldr	r2, [r2, #0]
 80029ce:	4413      	add	r3, r2
 80029d0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80029d4:	881b      	ldrh	r3, [r3, #0]
 80029d6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80029da:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80029dc:	68bb      	ldr	r3, [r7, #8]
 80029de:	699a      	ldr	r2, [r3, #24]
 80029e0:	8b7b      	ldrh	r3, [r7, #26]
 80029e2:	429a      	cmp	r2, r3
 80029e4:	d306      	bcc.n	80029f4 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 80029e6:	68bb      	ldr	r3, [r7, #8]
 80029e8:	699a      	ldr	r2, [r3, #24]
 80029ea:	8b7b      	ldrh	r3, [r7, #26]
 80029ec:	1ad2      	subs	r2, r2, r3
 80029ee:	68bb      	ldr	r3, [r7, #8]
 80029f0:	619a      	str	r2, [r3, #24]
 80029f2:	e002      	b.n	80029fa <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 80029f4:	68bb      	ldr	r3, [r7, #8]
 80029f6:	2200      	movs	r2, #0
 80029f8:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80029fa:	68bb      	ldr	r3, [r7, #8]
 80029fc:	699b      	ldr	r3, [r3, #24]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d123      	bne.n	8002a4a <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	461a      	mov	r2, r3
 8002a08:	68bb      	ldr	r3, [r7, #8]
 8002a0a:	781b      	ldrb	r3, [r3, #0]
 8002a0c:	009b      	lsls	r3, r3, #2
 8002a0e:	4413      	add	r3, r2
 8002a10:	881b      	ldrh	r3, [r3, #0]
 8002a12:	b29b      	uxth	r3, r3
 8002a14:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002a18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a1c:	833b      	strh	r3, [r7, #24]
 8002a1e:	8b3b      	ldrh	r3, [r7, #24]
 8002a20:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002a24:	833b      	strh	r3, [r7, #24]
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	461a      	mov	r2, r3
 8002a2c:	68bb      	ldr	r3, [r7, #8]
 8002a2e:	781b      	ldrb	r3, [r3, #0]
 8002a30:	009b      	lsls	r3, r3, #2
 8002a32:	441a      	add	r2, r3
 8002a34:	8b3b      	ldrh	r3, [r7, #24]
 8002a36:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002a3a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002a3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a46:	b29b      	uxth	r3, r3
 8002a48:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002a4a:	88fb      	ldrh	r3, [r7, #6]
 8002a4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d01f      	beq.n	8002a94 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	461a      	mov	r2, r3
 8002a5a:	68bb      	ldr	r3, [r7, #8]
 8002a5c:	781b      	ldrb	r3, [r3, #0]
 8002a5e:	009b      	lsls	r3, r3, #2
 8002a60:	4413      	add	r3, r2
 8002a62:	881b      	ldrh	r3, [r3, #0]
 8002a64:	b29b      	uxth	r3, r3
 8002a66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a6e:	82fb      	strh	r3, [r7, #22]
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	461a      	mov	r2, r3
 8002a76:	68bb      	ldr	r3, [r7, #8]
 8002a78:	781b      	ldrb	r3, [r3, #0]
 8002a7a:	009b      	lsls	r3, r3, #2
 8002a7c:	441a      	add	r2, r3
 8002a7e:	8afb      	ldrh	r3, [r7, #22]
 8002a80:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002a84:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002a88:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a8c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002a90:	b29b      	uxth	r3, r3
 8002a92:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002a94:	8b7b      	ldrh	r3, [r7, #26]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	f000 8085 	beq.w	8002ba6 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	6818      	ldr	r0, [r3, #0]
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	6959      	ldr	r1, [r3, #20]
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	891a      	ldrh	r2, [r3, #8]
 8002aa8:	8b7b      	ldrh	r3, [r7, #26]
 8002aaa:	f004 fea4 	bl	80077f6 <USB_ReadPMA>
 8002aae:	e07a      	b.n	8002ba6 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ab8:	b29b      	uxth	r3, r3
 8002aba:	461a      	mov	r2, r3
 8002abc:	68bb      	ldr	r3, [r7, #8]
 8002abe:	781b      	ldrb	r3, [r3, #0]
 8002ac0:	00db      	lsls	r3, r3, #3
 8002ac2:	4413      	add	r3, r2
 8002ac4:	68fa      	ldr	r2, [r7, #12]
 8002ac6:	6812      	ldr	r2, [r2, #0]
 8002ac8:	4413      	add	r3, r2
 8002aca:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002ace:	881b      	ldrh	r3, [r3, #0]
 8002ad0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ad4:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002ad6:	68bb      	ldr	r3, [r7, #8]
 8002ad8:	699a      	ldr	r2, [r3, #24]
 8002ada:	8b7b      	ldrh	r3, [r7, #26]
 8002adc:	429a      	cmp	r2, r3
 8002ade:	d306      	bcc.n	8002aee <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8002ae0:	68bb      	ldr	r3, [r7, #8]
 8002ae2:	699a      	ldr	r2, [r3, #24]
 8002ae4:	8b7b      	ldrh	r3, [r7, #26]
 8002ae6:	1ad2      	subs	r2, r2, r3
 8002ae8:	68bb      	ldr	r3, [r7, #8]
 8002aea:	619a      	str	r2, [r3, #24]
 8002aec:	e002      	b.n	8002af4 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8002aee:	68bb      	ldr	r3, [r7, #8]
 8002af0:	2200      	movs	r2, #0
 8002af2:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002af4:	68bb      	ldr	r3, [r7, #8]
 8002af6:	699b      	ldr	r3, [r3, #24]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d123      	bne.n	8002b44 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	461a      	mov	r2, r3
 8002b02:	68bb      	ldr	r3, [r7, #8]
 8002b04:	781b      	ldrb	r3, [r3, #0]
 8002b06:	009b      	lsls	r3, r3, #2
 8002b08:	4413      	add	r3, r2
 8002b0a:	881b      	ldrh	r3, [r3, #0]
 8002b0c:	b29b      	uxth	r3, r3
 8002b0e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002b12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b16:	83fb      	strh	r3, [r7, #30]
 8002b18:	8bfb      	ldrh	r3, [r7, #30]
 8002b1a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002b1e:	83fb      	strh	r3, [r7, #30]
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	461a      	mov	r2, r3
 8002b26:	68bb      	ldr	r3, [r7, #8]
 8002b28:	781b      	ldrb	r3, [r3, #0]
 8002b2a:	009b      	lsls	r3, r3, #2
 8002b2c:	441a      	add	r2, r3
 8002b2e:	8bfb      	ldrh	r3, [r7, #30]
 8002b30:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002b34:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002b38:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b40:	b29b      	uxth	r3, r3
 8002b42:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002b44:	88fb      	ldrh	r3, [r7, #6]
 8002b46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d11f      	bne.n	8002b8e <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	461a      	mov	r2, r3
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	781b      	ldrb	r3, [r3, #0]
 8002b58:	009b      	lsls	r3, r3, #2
 8002b5a:	4413      	add	r3, r2
 8002b5c:	881b      	ldrh	r3, [r3, #0]
 8002b5e:	b29b      	uxth	r3, r3
 8002b60:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b68:	83bb      	strh	r3, [r7, #28]
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	461a      	mov	r2, r3
 8002b70:	68bb      	ldr	r3, [r7, #8]
 8002b72:	781b      	ldrb	r3, [r3, #0]
 8002b74:	009b      	lsls	r3, r3, #2
 8002b76:	441a      	add	r2, r3
 8002b78:	8bbb      	ldrh	r3, [r7, #28]
 8002b7a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002b7e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002b82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b86:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002b8a:	b29b      	uxth	r3, r3
 8002b8c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002b8e:	8b7b      	ldrh	r3, [r7, #26]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d008      	beq.n	8002ba6 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	6818      	ldr	r0, [r3, #0]
 8002b98:	68bb      	ldr	r3, [r7, #8]
 8002b9a:	6959      	ldr	r1, [r3, #20]
 8002b9c:	68bb      	ldr	r3, [r7, #8]
 8002b9e:	895a      	ldrh	r2, [r3, #10]
 8002ba0:	8b7b      	ldrh	r3, [r7, #26]
 8002ba2:	f004 fe28 	bl	80077f6 <USB_ReadPMA>
    }
  }

  return count;
 8002ba6:	8b7b      	ldrh	r3, [r7, #26]
}
 8002ba8:	4618      	mov	r0, r3
 8002baa:	3720      	adds	r7, #32
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bd80      	pop	{r7, pc}

08002bb0 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b092      	sub	sp, #72	; 0x48
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	60f8      	str	r0, [r7, #12]
 8002bb8:	60b9      	str	r1, [r7, #8]
 8002bba:	4613      	mov	r3, r2
 8002bbc:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002bbe:	88fb      	ldrh	r3, [r7, #6]
 8002bc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	f000 8130 	beq.w	8002e2a <HAL_PCD_EP_DB_Transmit+0x27a>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002bd2:	b29b      	uxth	r3, r3
 8002bd4:	461a      	mov	r2, r3
 8002bd6:	68bb      	ldr	r3, [r7, #8]
 8002bd8:	781b      	ldrb	r3, [r3, #0]
 8002bda:	00db      	lsls	r3, r3, #3
 8002bdc:	4413      	add	r3, r2
 8002bde:	68fa      	ldr	r2, [r7, #12]
 8002be0:	6812      	ldr	r2, [r2, #0]
 8002be2:	4413      	add	r3, r2
 8002be4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002be8:	881b      	ldrh	r3, [r3, #0]
 8002bea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002bee:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len > TxByteNbre)
 8002bf0:	68bb      	ldr	r3, [r7, #8]
 8002bf2:	699a      	ldr	r2, [r3, #24]
 8002bf4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002bf6:	429a      	cmp	r2, r3
 8002bf8:	d906      	bls.n	8002c08 <HAL_PCD_EP_DB_Transmit+0x58>
    {
      ep->xfer_len -= TxByteNbre;
 8002bfa:	68bb      	ldr	r3, [r7, #8]
 8002bfc:	699a      	ldr	r2, [r3, #24]
 8002bfe:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002c00:	1ad2      	subs	r2, r2, r3
 8002c02:	68bb      	ldr	r3, [r7, #8]
 8002c04:	619a      	str	r2, [r3, #24]
 8002c06:	e002      	b.n	8002c0e <HAL_PCD_EP_DB_Transmit+0x5e>
    }
    else
    {
      ep->xfer_len = 0U;
 8002c08:	68bb      	ldr	r3, [r7, #8]
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002c0e:	68bb      	ldr	r3, [r7, #8]
 8002c10:	699b      	ldr	r3, [r3, #24]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d12c      	bne.n	8002c70 <HAL_PCD_EP_DB_Transmit+0xc0>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002c16:	68bb      	ldr	r3, [r7, #8]
 8002c18:	781b      	ldrb	r3, [r3, #0]
 8002c1a:	4619      	mov	r1, r3
 8002c1c:	68f8      	ldr	r0, [r7, #12]
 8002c1e:	f006 fc8a 	bl	8009536 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002c22:	88fb      	ldrh	r3, [r7, #6]
 8002c24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	f000 822d 	beq.w	8003088 <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	461a      	mov	r2, r3
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	781b      	ldrb	r3, [r3, #0]
 8002c38:	009b      	lsls	r3, r3, #2
 8002c3a:	4413      	add	r3, r2
 8002c3c:	881b      	ldrh	r3, [r3, #0]
 8002c3e:	b29b      	uxth	r3, r3
 8002c40:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c48:	827b      	strh	r3, [r7, #18]
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	461a      	mov	r2, r3
 8002c50:	68bb      	ldr	r3, [r7, #8]
 8002c52:	781b      	ldrb	r3, [r3, #0]
 8002c54:	009b      	lsls	r3, r3, #2
 8002c56:	441a      	add	r2, r3
 8002c58:	8a7b      	ldrh	r3, [r7, #18]
 8002c5a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002c5e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002c62:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002c66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c6a:	b29b      	uxth	r3, r3
 8002c6c:	8013      	strh	r3, [r2, #0]
 8002c6e:	e20b      	b.n	8003088 <HAL_PCD_EP_DB_Transmit+0x4d8>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002c70:	88fb      	ldrh	r3, [r7, #6]
 8002c72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d01f      	beq.n	8002cba <HAL_PCD_EP_DB_Transmit+0x10a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	461a      	mov	r2, r3
 8002c80:	68bb      	ldr	r3, [r7, #8]
 8002c82:	781b      	ldrb	r3, [r3, #0]
 8002c84:	009b      	lsls	r3, r3, #2
 8002c86:	4413      	add	r3, r2
 8002c88:	881b      	ldrh	r3, [r3, #0]
 8002c8a:	b29b      	uxth	r3, r3
 8002c8c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c94:	84bb      	strh	r3, [r7, #36]	; 0x24
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	461a      	mov	r2, r3
 8002c9c:	68bb      	ldr	r3, [r7, #8]
 8002c9e:	781b      	ldrb	r3, [r3, #0]
 8002ca0:	009b      	lsls	r3, r3, #2
 8002ca2:	441a      	add	r2, r3
 8002ca4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002ca6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002caa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002cae:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002cb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002cb6:	b29b      	uxth	r3, r3
 8002cb8:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002cba:	68bb      	ldr	r3, [r7, #8]
 8002cbc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002cc0:	2b01      	cmp	r3, #1
 8002cc2:	f040 81e1 	bne.w	8003088 <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        ep->xfer_buff += TxByteNbre;
 8002cc6:	68bb      	ldr	r3, [r7, #8]
 8002cc8:	695a      	ldr	r2, [r3, #20]
 8002cca:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002ccc:	441a      	add	r2, r3
 8002cce:	68bb      	ldr	r3, [r7, #8]
 8002cd0:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002cd2:	68bb      	ldr	r3, [r7, #8]
 8002cd4:	69da      	ldr	r2, [r3, #28]
 8002cd6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002cd8:	441a      	add	r2, r3
 8002cda:	68bb      	ldr	r3, [r7, #8]
 8002cdc:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002cde:	68bb      	ldr	r3, [r7, #8]
 8002ce0:	6a1a      	ldr	r2, [r3, #32]
 8002ce2:	68bb      	ldr	r3, [r7, #8]
 8002ce4:	691b      	ldr	r3, [r3, #16]
 8002ce6:	429a      	cmp	r2, r3
 8002ce8:	d309      	bcc.n	8002cfe <HAL_PCD_EP_DB_Transmit+0x14e>
        {
          len = ep->maxpacket;
 8002cea:	68bb      	ldr	r3, [r7, #8]
 8002cec:	691b      	ldr	r3, [r3, #16]
 8002cee:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 8002cf0:	68bb      	ldr	r3, [r7, #8]
 8002cf2:	6a1a      	ldr	r2, [r3, #32]
 8002cf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cf6:	1ad2      	subs	r2, r2, r3
 8002cf8:	68bb      	ldr	r3, [r7, #8]
 8002cfa:	621a      	str	r2, [r3, #32]
 8002cfc:	e014      	b.n	8002d28 <HAL_PCD_EP_DB_Transmit+0x178>
        }
        else if (ep->xfer_len_db == 0U)
 8002cfe:	68bb      	ldr	r3, [r7, #8]
 8002d00:	6a1b      	ldr	r3, [r3, #32]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d106      	bne.n	8002d14 <HAL_PCD_EP_DB_Transmit+0x164>
        {
          len = TxByteNbre;
 8002d06:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002d08:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 8002d0a:	68bb      	ldr	r3, [r7, #8]
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002d12:	e009      	b.n	8002d28 <HAL_PCD_EP_DB_Transmit+0x178>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002d14:	68bb      	ldr	r3, [r7, #8]
 8002d16:	2200      	movs	r2, #0
 8002d18:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8002d1c:	68bb      	ldr	r3, [r7, #8]
 8002d1e:	6a1b      	ldr	r3, [r3, #32]
 8002d20:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 8002d22:	68bb      	ldr	r3, [r7, #8]
 8002d24:	2200      	movs	r2, #0
 8002d26:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002d28:	68bb      	ldr	r3, [r7, #8]
 8002d2a:	785b      	ldrb	r3, [r3, #1]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d155      	bne.n	8002ddc <HAL_PCD_EP_DB_Transmit+0x22c>
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	61bb      	str	r3, [r7, #24]
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d3e:	b29b      	uxth	r3, r3
 8002d40:	461a      	mov	r2, r3
 8002d42:	69bb      	ldr	r3, [r7, #24]
 8002d44:	4413      	add	r3, r2
 8002d46:	61bb      	str	r3, [r7, #24]
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	781b      	ldrb	r3, [r3, #0]
 8002d4c:	00da      	lsls	r2, r3, #3
 8002d4e:	69bb      	ldr	r3, [r7, #24]
 8002d50:	4413      	add	r3, r2
 8002d52:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002d56:	617b      	str	r3, [r7, #20]
 8002d58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d112      	bne.n	8002d84 <HAL_PCD_EP_DB_Transmit+0x1d4>
 8002d5e:	697b      	ldr	r3, [r7, #20]
 8002d60:	881b      	ldrh	r3, [r3, #0]
 8002d62:	b29b      	uxth	r3, r3
 8002d64:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002d68:	b29a      	uxth	r2, r3
 8002d6a:	697b      	ldr	r3, [r7, #20]
 8002d6c:	801a      	strh	r2, [r3, #0]
 8002d6e:	697b      	ldr	r3, [r7, #20]
 8002d70:	881b      	ldrh	r3, [r3, #0]
 8002d72:	b29b      	uxth	r3, r3
 8002d74:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d78:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d7c:	b29a      	uxth	r2, r3
 8002d7e:	697b      	ldr	r3, [r7, #20]
 8002d80:	801a      	strh	r2, [r3, #0]
 8002d82:	e047      	b.n	8002e14 <HAL_PCD_EP_DB_Transmit+0x264>
 8002d84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d86:	2b3e      	cmp	r3, #62	; 0x3e
 8002d88:	d811      	bhi.n	8002dae <HAL_PCD_EP_DB_Transmit+0x1fe>
 8002d8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d8c:	085b      	lsrs	r3, r3, #1
 8002d8e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d92:	f003 0301 	and.w	r3, r3, #1
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d002      	beq.n	8002da0 <HAL_PCD_EP_DB_Transmit+0x1f0>
 8002d9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d9c:	3301      	adds	r3, #1
 8002d9e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002da0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002da2:	b29b      	uxth	r3, r3
 8002da4:	029b      	lsls	r3, r3, #10
 8002da6:	b29a      	uxth	r2, r3
 8002da8:	697b      	ldr	r3, [r7, #20]
 8002daa:	801a      	strh	r2, [r3, #0]
 8002dac:	e032      	b.n	8002e14 <HAL_PCD_EP_DB_Transmit+0x264>
 8002dae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002db0:	095b      	lsrs	r3, r3, #5
 8002db2:	62bb      	str	r3, [r7, #40]	; 0x28
 8002db4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002db6:	f003 031f 	and.w	r3, r3, #31
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d102      	bne.n	8002dc4 <HAL_PCD_EP_DB_Transmit+0x214>
 8002dbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dc0:	3b01      	subs	r3, #1
 8002dc2:	62bb      	str	r3, [r7, #40]	; 0x28
 8002dc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dc6:	b29b      	uxth	r3, r3
 8002dc8:	029b      	lsls	r3, r3, #10
 8002dca:	b29b      	uxth	r3, r3
 8002dcc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002dd0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002dd4:	b29a      	uxth	r2, r3
 8002dd6:	697b      	ldr	r3, [r7, #20]
 8002dd8:	801a      	strh	r2, [r3, #0]
 8002dda:	e01b      	b.n	8002e14 <HAL_PCD_EP_DB_Transmit+0x264>
 8002ddc:	68bb      	ldr	r3, [r7, #8]
 8002dde:	785b      	ldrb	r3, [r3, #1]
 8002de0:	2b01      	cmp	r3, #1
 8002de2:	d117      	bne.n	8002e14 <HAL_PCD_EP_DB_Transmit+0x264>
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	623b      	str	r3, [r7, #32]
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002df2:	b29b      	uxth	r3, r3
 8002df4:	461a      	mov	r2, r3
 8002df6:	6a3b      	ldr	r3, [r7, #32]
 8002df8:	4413      	add	r3, r2
 8002dfa:	623b      	str	r3, [r7, #32]
 8002dfc:	68bb      	ldr	r3, [r7, #8]
 8002dfe:	781b      	ldrb	r3, [r3, #0]
 8002e00:	00da      	lsls	r2, r3, #3
 8002e02:	6a3b      	ldr	r3, [r7, #32]
 8002e04:	4413      	add	r3, r2
 8002e06:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002e0a:	61fb      	str	r3, [r7, #28]
 8002e0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e0e:	b29a      	uxth	r2, r3
 8002e10:	69fb      	ldr	r3, [r7, #28]
 8002e12:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	6818      	ldr	r0, [r3, #0]
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	6959      	ldr	r1, [r3, #20]
 8002e1c:	68bb      	ldr	r3, [r7, #8]
 8002e1e:	891a      	ldrh	r2, [r3, #8]
 8002e20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e22:	b29b      	uxth	r3, r3
 8002e24:	f004 fca6 	bl	8007774 <USB_WritePMA>
 8002e28:	e12e      	b.n	8003088 <HAL_PCD_EP_DB_Transmit+0x4d8>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e32:	b29b      	uxth	r3, r3
 8002e34:	461a      	mov	r2, r3
 8002e36:	68bb      	ldr	r3, [r7, #8]
 8002e38:	781b      	ldrb	r3, [r3, #0]
 8002e3a:	00db      	lsls	r3, r3, #3
 8002e3c:	4413      	add	r3, r2
 8002e3e:	68fa      	ldr	r2, [r7, #12]
 8002e40:	6812      	ldr	r2, [r2, #0]
 8002e42:	4413      	add	r3, r2
 8002e44:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002e48:	881b      	ldrh	r3, [r3, #0]
 8002e4a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002e4e:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len >= TxByteNbre)
 8002e50:	68bb      	ldr	r3, [r7, #8]
 8002e52:	699a      	ldr	r2, [r3, #24]
 8002e54:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002e56:	429a      	cmp	r2, r3
 8002e58:	d306      	bcc.n	8002e68 <HAL_PCD_EP_DB_Transmit+0x2b8>
    {
      ep->xfer_len -= TxByteNbre;
 8002e5a:	68bb      	ldr	r3, [r7, #8]
 8002e5c:	699a      	ldr	r2, [r3, #24]
 8002e5e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002e60:	1ad2      	subs	r2, r2, r3
 8002e62:	68bb      	ldr	r3, [r7, #8]
 8002e64:	619a      	str	r2, [r3, #24]
 8002e66:	e002      	b.n	8002e6e <HAL_PCD_EP_DB_Transmit+0x2be>
    }
    else
    {
      ep->xfer_len = 0U;
 8002e68:	68bb      	ldr	r3, [r7, #8]
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002e6e:	68bb      	ldr	r3, [r7, #8]
 8002e70:	699b      	ldr	r3, [r3, #24]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d12c      	bne.n	8002ed0 <HAL_PCD_EP_DB_Transmit+0x320>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002e76:	68bb      	ldr	r3, [r7, #8]
 8002e78:	781b      	ldrb	r3, [r3, #0]
 8002e7a:	4619      	mov	r1, r3
 8002e7c:	68f8      	ldr	r0, [r7, #12]
 8002e7e:	f006 fb5a 	bl	8009536 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002e82:	88fb      	ldrh	r3, [r7, #6]
 8002e84:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	f040 80fd 	bne.w	8003088 <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	461a      	mov	r2, r3
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	781b      	ldrb	r3, [r3, #0]
 8002e98:	009b      	lsls	r3, r3, #2
 8002e9a:	4413      	add	r3, r2
 8002e9c:	881b      	ldrh	r3, [r3, #0]
 8002e9e:	b29b      	uxth	r3, r3
 8002ea0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ea4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ea8:	84fb      	strh	r3, [r7, #38]	; 0x26
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	461a      	mov	r2, r3
 8002eb0:	68bb      	ldr	r3, [r7, #8]
 8002eb2:	781b      	ldrb	r3, [r3, #0]
 8002eb4:	009b      	lsls	r3, r3, #2
 8002eb6:	441a      	add	r2, r3
 8002eb8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002eba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002ebe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002ec2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002ec6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002eca:	b29b      	uxth	r3, r3
 8002ecc:	8013      	strh	r3, [r2, #0]
 8002ece:	e0db      	b.n	8003088 <HAL_PCD_EP_DB_Transmit+0x4d8>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002ed0:	88fb      	ldrh	r3, [r7, #6]
 8002ed2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d11f      	bne.n	8002f1a <HAL_PCD_EP_DB_Transmit+0x36a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	461a      	mov	r2, r3
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	781b      	ldrb	r3, [r3, #0]
 8002ee4:	009b      	lsls	r3, r3, #2
 8002ee6:	4413      	add	r3, r2
 8002ee8:	881b      	ldrh	r3, [r3, #0]
 8002eea:	b29b      	uxth	r3, r3
 8002eec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ef0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ef4:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	461a      	mov	r2, r3
 8002efc:	68bb      	ldr	r3, [r7, #8]
 8002efe:	781b      	ldrb	r3, [r3, #0]
 8002f00:	009b      	lsls	r3, r3, #2
 8002f02:	441a      	add	r2, r3
 8002f04:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8002f06:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002f0a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002f0e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002f12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f16:	b29b      	uxth	r3, r3
 8002f18:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002f1a:	68bb      	ldr	r3, [r7, #8]
 8002f1c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002f20:	2b01      	cmp	r3, #1
 8002f22:	f040 80b1 	bne.w	8003088 <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        ep->xfer_buff += TxByteNbre;
 8002f26:	68bb      	ldr	r3, [r7, #8]
 8002f28:	695a      	ldr	r2, [r3, #20]
 8002f2a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002f2c:	441a      	add	r2, r3
 8002f2e:	68bb      	ldr	r3, [r7, #8]
 8002f30:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002f32:	68bb      	ldr	r3, [r7, #8]
 8002f34:	69da      	ldr	r2, [r3, #28]
 8002f36:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002f38:	441a      	add	r2, r3
 8002f3a:	68bb      	ldr	r3, [r7, #8]
 8002f3c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002f3e:	68bb      	ldr	r3, [r7, #8]
 8002f40:	6a1a      	ldr	r2, [r3, #32]
 8002f42:	68bb      	ldr	r3, [r7, #8]
 8002f44:	691b      	ldr	r3, [r3, #16]
 8002f46:	429a      	cmp	r2, r3
 8002f48:	d309      	bcc.n	8002f5e <HAL_PCD_EP_DB_Transmit+0x3ae>
        {
          len = ep->maxpacket;
 8002f4a:	68bb      	ldr	r3, [r7, #8]
 8002f4c:	691b      	ldr	r3, [r3, #16]
 8002f4e:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 8002f50:	68bb      	ldr	r3, [r7, #8]
 8002f52:	6a1a      	ldr	r2, [r3, #32]
 8002f54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f56:	1ad2      	subs	r2, r2, r3
 8002f58:	68bb      	ldr	r3, [r7, #8]
 8002f5a:	621a      	str	r2, [r3, #32]
 8002f5c:	e014      	b.n	8002f88 <HAL_PCD_EP_DB_Transmit+0x3d8>
        }
        else if (ep->xfer_len_db == 0U)
 8002f5e:	68bb      	ldr	r3, [r7, #8]
 8002f60:	6a1b      	ldr	r3, [r3, #32]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d106      	bne.n	8002f74 <HAL_PCD_EP_DB_Transmit+0x3c4>
        {
          len = TxByteNbre;
 8002f66:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002f68:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 8002f6a:	68bb      	ldr	r3, [r7, #8]
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002f72:	e009      	b.n	8002f88 <HAL_PCD_EP_DB_Transmit+0x3d8>
        }
        else
        {
          len = ep->xfer_len_db;
 8002f74:	68bb      	ldr	r3, [r7, #8]
 8002f76:	6a1b      	ldr	r3, [r3, #32]
 8002f78:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 8002f7a:	68bb      	ldr	r3, [r7, #8]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002f80:	68bb      	ldr	r3, [r7, #8]
 8002f82:	2200      	movs	r2, #0
 8002f84:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	637b      	str	r3, [r7, #52]	; 0x34
 8002f8e:	68bb      	ldr	r3, [r7, #8]
 8002f90:	785b      	ldrb	r3, [r3, #1]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d155      	bne.n	8003042 <HAL_PCD_EP_DB_Transmit+0x492>
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	647b      	str	r3, [r7, #68]	; 0x44
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002fa4:	b29b      	uxth	r3, r3
 8002fa6:	461a      	mov	r2, r3
 8002fa8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002faa:	4413      	add	r3, r2
 8002fac:	647b      	str	r3, [r7, #68]	; 0x44
 8002fae:	68bb      	ldr	r3, [r7, #8]
 8002fb0:	781b      	ldrb	r3, [r3, #0]
 8002fb2:	00da      	lsls	r2, r3, #3
 8002fb4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002fb6:	4413      	add	r3, r2
 8002fb8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002fbc:	643b      	str	r3, [r7, #64]	; 0x40
 8002fbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d112      	bne.n	8002fea <HAL_PCD_EP_DB_Transmit+0x43a>
 8002fc4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002fc6:	881b      	ldrh	r3, [r3, #0]
 8002fc8:	b29b      	uxth	r3, r3
 8002fca:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002fce:	b29a      	uxth	r2, r3
 8002fd0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002fd2:	801a      	strh	r2, [r3, #0]
 8002fd4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002fd6:	881b      	ldrh	r3, [r3, #0]
 8002fd8:	b29b      	uxth	r3, r3
 8002fda:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002fde:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002fe2:	b29a      	uxth	r2, r3
 8002fe4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002fe6:	801a      	strh	r2, [r3, #0]
 8002fe8:	e044      	b.n	8003074 <HAL_PCD_EP_DB_Transmit+0x4c4>
 8002fea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fec:	2b3e      	cmp	r3, #62	; 0x3e
 8002fee:	d811      	bhi.n	8003014 <HAL_PCD_EP_DB_Transmit+0x464>
 8002ff0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ff2:	085b      	lsrs	r3, r3, #1
 8002ff4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ff6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ff8:	f003 0301 	and.w	r3, r3, #1
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d002      	beq.n	8003006 <HAL_PCD_EP_DB_Transmit+0x456>
 8003000:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003002:	3301      	adds	r3, #1
 8003004:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003006:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003008:	b29b      	uxth	r3, r3
 800300a:	029b      	lsls	r3, r3, #10
 800300c:	b29a      	uxth	r2, r3
 800300e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003010:	801a      	strh	r2, [r3, #0]
 8003012:	e02f      	b.n	8003074 <HAL_PCD_EP_DB_Transmit+0x4c4>
 8003014:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003016:	095b      	lsrs	r3, r3, #5
 8003018:	63fb      	str	r3, [r7, #60]	; 0x3c
 800301a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800301c:	f003 031f 	and.w	r3, r3, #31
 8003020:	2b00      	cmp	r3, #0
 8003022:	d102      	bne.n	800302a <HAL_PCD_EP_DB_Transmit+0x47a>
 8003024:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003026:	3b01      	subs	r3, #1
 8003028:	63fb      	str	r3, [r7, #60]	; 0x3c
 800302a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800302c:	b29b      	uxth	r3, r3
 800302e:	029b      	lsls	r3, r3, #10
 8003030:	b29b      	uxth	r3, r3
 8003032:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003036:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800303a:	b29a      	uxth	r2, r3
 800303c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800303e:	801a      	strh	r2, [r3, #0]
 8003040:	e018      	b.n	8003074 <HAL_PCD_EP_DB_Transmit+0x4c4>
 8003042:	68bb      	ldr	r3, [r7, #8]
 8003044:	785b      	ldrb	r3, [r3, #1]
 8003046:	2b01      	cmp	r3, #1
 8003048:	d114      	bne.n	8003074 <HAL_PCD_EP_DB_Transmit+0x4c4>
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003052:	b29b      	uxth	r3, r3
 8003054:	461a      	mov	r2, r3
 8003056:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003058:	4413      	add	r3, r2
 800305a:	637b      	str	r3, [r7, #52]	; 0x34
 800305c:	68bb      	ldr	r3, [r7, #8]
 800305e:	781b      	ldrb	r3, [r3, #0]
 8003060:	00da      	lsls	r2, r3, #3
 8003062:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003064:	4413      	add	r3, r2
 8003066:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800306a:	633b      	str	r3, [r7, #48]	; 0x30
 800306c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800306e:	b29a      	uxth	r2, r3
 8003070:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003072:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	6818      	ldr	r0, [r3, #0]
 8003078:	68bb      	ldr	r3, [r7, #8]
 800307a:	6959      	ldr	r1, [r3, #20]
 800307c:	68bb      	ldr	r3, [r7, #8]
 800307e:	895a      	ldrh	r2, [r3, #10]
 8003080:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003082:	b29b      	uxth	r3, r3
 8003084:	f004 fb76 	bl	8007774 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	461a      	mov	r2, r3
 800308e:	68bb      	ldr	r3, [r7, #8]
 8003090:	781b      	ldrb	r3, [r3, #0]
 8003092:	009b      	lsls	r3, r3, #2
 8003094:	4413      	add	r3, r2
 8003096:	881b      	ldrh	r3, [r3, #0]
 8003098:	b29b      	uxth	r3, r3
 800309a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800309e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80030a2:	823b      	strh	r3, [r7, #16]
 80030a4:	8a3b      	ldrh	r3, [r7, #16]
 80030a6:	f083 0310 	eor.w	r3, r3, #16
 80030aa:	823b      	strh	r3, [r7, #16]
 80030ac:	8a3b      	ldrh	r3, [r7, #16]
 80030ae:	f083 0320 	eor.w	r3, r3, #32
 80030b2:	823b      	strh	r3, [r7, #16]
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	461a      	mov	r2, r3
 80030ba:	68bb      	ldr	r3, [r7, #8]
 80030bc:	781b      	ldrb	r3, [r3, #0]
 80030be:	009b      	lsls	r3, r3, #2
 80030c0:	441a      	add	r2, r3
 80030c2:	8a3b      	ldrh	r3, [r7, #16]
 80030c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80030c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80030cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80030d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030d4:	b29b      	uxth	r3, r3
 80030d6:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80030d8:	2300      	movs	r3, #0
}
 80030da:	4618      	mov	r0, r3
 80030dc:	3748      	adds	r7, #72	; 0x48
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}

080030e2 <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 80030e2:	b480      	push	{r7}
 80030e4:	b087      	sub	sp, #28
 80030e6:	af00      	add	r7, sp, #0
 80030e8:	60f8      	str	r0, [r7, #12]
 80030ea:	607b      	str	r3, [r7, #4]
 80030ec:	460b      	mov	r3, r1
 80030ee:	817b      	strh	r3, [r7, #10]
 80030f0:	4613      	mov	r3, r2
 80030f2:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80030f4:	897b      	ldrh	r3, [r7, #10]
 80030f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030fa:	b29b      	uxth	r3, r3
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d00b      	beq.n	8003118 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003100:	897b      	ldrh	r3, [r7, #10]
 8003102:	f003 0307 	and.w	r3, r3, #7
 8003106:	1c5a      	adds	r2, r3, #1
 8003108:	4613      	mov	r3, r2
 800310a:	009b      	lsls	r3, r3, #2
 800310c:	4413      	add	r3, r2
 800310e:	00db      	lsls	r3, r3, #3
 8003110:	68fa      	ldr	r2, [r7, #12]
 8003112:	4413      	add	r3, r2
 8003114:	617b      	str	r3, [r7, #20]
 8003116:	e009      	b.n	800312c <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003118:	897a      	ldrh	r2, [r7, #10]
 800311a:	4613      	mov	r3, r2
 800311c:	009b      	lsls	r3, r3, #2
 800311e:	4413      	add	r3, r2
 8003120:	00db      	lsls	r3, r3, #3
 8003122:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003126:	68fa      	ldr	r2, [r7, #12]
 8003128:	4413      	add	r3, r2
 800312a:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800312c:	893b      	ldrh	r3, [r7, #8]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d107      	bne.n	8003142 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003132:	697b      	ldr	r3, [r7, #20]
 8003134:	2200      	movs	r2, #0
 8003136:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	b29a      	uxth	r2, r3
 800313c:	697b      	ldr	r3, [r7, #20]
 800313e:	80da      	strh	r2, [r3, #6]
 8003140:	e00b      	b.n	800315a <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003142:	697b      	ldr	r3, [r7, #20]
 8003144:	2201      	movs	r2, #1
 8003146:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	b29a      	uxth	r2, r3
 800314c:	697b      	ldr	r3, [r7, #20]
 800314e:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	0c1b      	lsrs	r3, r3, #16
 8003154:	b29a      	uxth	r2, r3
 8003156:	697b      	ldr	r3, [r7, #20]
 8003158:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 800315a:	2300      	movs	r3, #0
}
 800315c:	4618      	mov	r0, r3
 800315e:	371c      	adds	r7, #28
 8003160:	46bd      	mov	sp, r7
 8003162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003166:	4770      	bx	lr

08003168 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003168:	b480      	push	{r7}
 800316a:	b085      	sub	sp, #20
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2201      	movs	r2, #1
 800317a:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2200      	movs	r2, #0
 8003182:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800318c:	b29b      	uxth	r3, r3
 800318e:	f043 0301 	orr.w	r3, r3, #1
 8003192:	b29a      	uxth	r2, r3
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80031a0:	b29b      	uxth	r3, r3
 80031a2:	f043 0302 	orr.w	r3, r3, #2
 80031a6:	b29a      	uxth	r2, r3
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 80031ae:	2300      	movs	r3, #0
}
 80031b0:	4618      	mov	r0, r3
 80031b2:	3714      	adds	r7, #20
 80031b4:	46bd      	mov	sp, r7
 80031b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ba:	4770      	bx	lr

080031bc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80031bc:	b480      	push	{r7}
 80031be:	b085      	sub	sp, #20
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d141      	bne.n	800324e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80031ca:	4b4b      	ldr	r3, [pc, #300]	; (80032f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80031d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031d6:	d131      	bne.n	800323c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80031d8:	4b47      	ldr	r3, [pc, #284]	; (80032f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80031de:	4a46      	ldr	r2, [pc, #280]	; (80032f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80031e4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80031e8:	4b43      	ldr	r3, [pc, #268]	; (80032f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80031f0:	4a41      	ldr	r2, [pc, #260]	; (80032f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80031f6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80031f8:	4b40      	ldr	r3, [pc, #256]	; (80032fc <HAL_PWREx_ControlVoltageScaling+0x140>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	2232      	movs	r2, #50	; 0x32
 80031fe:	fb02 f303 	mul.w	r3, r2, r3
 8003202:	4a3f      	ldr	r2, [pc, #252]	; (8003300 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003204:	fba2 2303 	umull	r2, r3, r2, r3
 8003208:	0c9b      	lsrs	r3, r3, #18
 800320a:	3301      	adds	r3, #1
 800320c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800320e:	e002      	b.n	8003216 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	3b01      	subs	r3, #1
 8003214:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003216:	4b38      	ldr	r3, [pc, #224]	; (80032f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003218:	695b      	ldr	r3, [r3, #20]
 800321a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800321e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003222:	d102      	bne.n	800322a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d1f2      	bne.n	8003210 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800322a:	4b33      	ldr	r3, [pc, #204]	; (80032f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800322c:	695b      	ldr	r3, [r3, #20]
 800322e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003232:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003236:	d158      	bne.n	80032ea <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003238:	2303      	movs	r3, #3
 800323a:	e057      	b.n	80032ec <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800323c:	4b2e      	ldr	r3, [pc, #184]	; (80032f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800323e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003242:	4a2d      	ldr	r2, [pc, #180]	; (80032f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003244:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003248:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800324c:	e04d      	b.n	80032ea <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003254:	d141      	bne.n	80032da <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003256:	4b28      	ldr	r3, [pc, #160]	; (80032f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800325e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003262:	d131      	bne.n	80032c8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003264:	4b24      	ldr	r3, [pc, #144]	; (80032f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003266:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800326a:	4a23      	ldr	r2, [pc, #140]	; (80032f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800326c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003270:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003274:	4b20      	ldr	r3, [pc, #128]	; (80032f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800327c:	4a1e      	ldr	r2, [pc, #120]	; (80032f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800327e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003282:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003284:	4b1d      	ldr	r3, [pc, #116]	; (80032fc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	2232      	movs	r2, #50	; 0x32
 800328a:	fb02 f303 	mul.w	r3, r2, r3
 800328e:	4a1c      	ldr	r2, [pc, #112]	; (8003300 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003290:	fba2 2303 	umull	r2, r3, r2, r3
 8003294:	0c9b      	lsrs	r3, r3, #18
 8003296:	3301      	adds	r3, #1
 8003298:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800329a:	e002      	b.n	80032a2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	3b01      	subs	r3, #1
 80032a0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80032a2:	4b15      	ldr	r3, [pc, #84]	; (80032f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032a4:	695b      	ldr	r3, [r3, #20]
 80032a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032ae:	d102      	bne.n	80032b6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d1f2      	bne.n	800329c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80032b6:	4b10      	ldr	r3, [pc, #64]	; (80032f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032b8:	695b      	ldr	r3, [r3, #20]
 80032ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032c2:	d112      	bne.n	80032ea <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80032c4:	2303      	movs	r3, #3
 80032c6:	e011      	b.n	80032ec <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80032c8:	4b0b      	ldr	r3, [pc, #44]	; (80032f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80032ce:	4a0a      	ldr	r2, [pc, #40]	; (80032f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032d4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80032d8:	e007      	b.n	80032ea <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80032da:	4b07      	ldr	r3, [pc, #28]	; (80032f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80032e2:	4a05      	ldr	r2, [pc, #20]	; (80032f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032e4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80032e8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80032ea:	2300      	movs	r3, #0
}
 80032ec:	4618      	mov	r0, r3
 80032ee:	3714      	adds	r7, #20
 80032f0:	46bd      	mov	sp, r7
 80032f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f6:	4770      	bx	lr
 80032f8:	40007000 	.word	0x40007000
 80032fc:	20000048 	.word	0x20000048
 8003300:	431bde83 	.word	0x431bde83

08003304 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003304:	b480      	push	{r7}
 8003306:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003308:	4b05      	ldr	r3, [pc, #20]	; (8003320 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800330a:	689b      	ldr	r3, [r3, #8]
 800330c:	4a04      	ldr	r2, [pc, #16]	; (8003320 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800330e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003312:	6093      	str	r3, [r2, #8]
}
 8003314:	bf00      	nop
 8003316:	46bd      	mov	sp, r7
 8003318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331c:	4770      	bx	lr
 800331e:	bf00      	nop
 8003320:	40007000 	.word	0x40007000

08003324 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b088      	sub	sp, #32
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d101      	bne.n	8003336 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003332:	2301      	movs	r3, #1
 8003334:	e308      	b.n	8003948 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f003 0301 	and.w	r3, r3, #1
 800333e:	2b00      	cmp	r3, #0
 8003340:	d075      	beq.n	800342e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003342:	4ba3      	ldr	r3, [pc, #652]	; (80035d0 <HAL_RCC_OscConfig+0x2ac>)
 8003344:	689b      	ldr	r3, [r3, #8]
 8003346:	f003 030c 	and.w	r3, r3, #12
 800334a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800334c:	4ba0      	ldr	r3, [pc, #640]	; (80035d0 <HAL_RCC_OscConfig+0x2ac>)
 800334e:	68db      	ldr	r3, [r3, #12]
 8003350:	f003 0303 	and.w	r3, r3, #3
 8003354:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003356:	69bb      	ldr	r3, [r7, #24]
 8003358:	2b0c      	cmp	r3, #12
 800335a:	d102      	bne.n	8003362 <HAL_RCC_OscConfig+0x3e>
 800335c:	697b      	ldr	r3, [r7, #20]
 800335e:	2b03      	cmp	r3, #3
 8003360:	d002      	beq.n	8003368 <HAL_RCC_OscConfig+0x44>
 8003362:	69bb      	ldr	r3, [r7, #24]
 8003364:	2b08      	cmp	r3, #8
 8003366:	d10b      	bne.n	8003380 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003368:	4b99      	ldr	r3, [pc, #612]	; (80035d0 <HAL_RCC_OscConfig+0x2ac>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003370:	2b00      	cmp	r3, #0
 8003372:	d05b      	beq.n	800342c <HAL_RCC_OscConfig+0x108>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d157      	bne.n	800342c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800337c:	2301      	movs	r3, #1
 800337e:	e2e3      	b.n	8003948 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003388:	d106      	bne.n	8003398 <HAL_RCC_OscConfig+0x74>
 800338a:	4b91      	ldr	r3, [pc, #580]	; (80035d0 <HAL_RCC_OscConfig+0x2ac>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4a90      	ldr	r2, [pc, #576]	; (80035d0 <HAL_RCC_OscConfig+0x2ac>)
 8003390:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003394:	6013      	str	r3, [r2, #0]
 8003396:	e01d      	b.n	80033d4 <HAL_RCC_OscConfig+0xb0>
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80033a0:	d10c      	bne.n	80033bc <HAL_RCC_OscConfig+0x98>
 80033a2:	4b8b      	ldr	r3, [pc, #556]	; (80035d0 <HAL_RCC_OscConfig+0x2ac>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4a8a      	ldr	r2, [pc, #552]	; (80035d0 <HAL_RCC_OscConfig+0x2ac>)
 80033a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80033ac:	6013      	str	r3, [r2, #0]
 80033ae:	4b88      	ldr	r3, [pc, #544]	; (80035d0 <HAL_RCC_OscConfig+0x2ac>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4a87      	ldr	r2, [pc, #540]	; (80035d0 <HAL_RCC_OscConfig+0x2ac>)
 80033b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033b8:	6013      	str	r3, [r2, #0]
 80033ba:	e00b      	b.n	80033d4 <HAL_RCC_OscConfig+0xb0>
 80033bc:	4b84      	ldr	r3, [pc, #528]	; (80035d0 <HAL_RCC_OscConfig+0x2ac>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a83      	ldr	r2, [pc, #524]	; (80035d0 <HAL_RCC_OscConfig+0x2ac>)
 80033c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033c6:	6013      	str	r3, [r2, #0]
 80033c8:	4b81      	ldr	r3, [pc, #516]	; (80035d0 <HAL_RCC_OscConfig+0x2ac>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4a80      	ldr	r2, [pc, #512]	; (80035d0 <HAL_RCC_OscConfig+0x2ac>)
 80033ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d013      	beq.n	8003404 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033dc:	f7fe f8b6 	bl	800154c <HAL_GetTick>
 80033e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80033e2:	e008      	b.n	80033f6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033e4:	f7fe f8b2 	bl	800154c <HAL_GetTick>
 80033e8:	4602      	mov	r2, r0
 80033ea:	693b      	ldr	r3, [r7, #16]
 80033ec:	1ad3      	subs	r3, r2, r3
 80033ee:	2b64      	cmp	r3, #100	; 0x64
 80033f0:	d901      	bls.n	80033f6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80033f2:	2303      	movs	r3, #3
 80033f4:	e2a8      	b.n	8003948 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80033f6:	4b76      	ldr	r3, [pc, #472]	; (80035d0 <HAL_RCC_OscConfig+0x2ac>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d0f0      	beq.n	80033e4 <HAL_RCC_OscConfig+0xc0>
 8003402:	e014      	b.n	800342e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003404:	f7fe f8a2 	bl	800154c <HAL_GetTick>
 8003408:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800340a:	e008      	b.n	800341e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800340c:	f7fe f89e 	bl	800154c <HAL_GetTick>
 8003410:	4602      	mov	r2, r0
 8003412:	693b      	ldr	r3, [r7, #16]
 8003414:	1ad3      	subs	r3, r2, r3
 8003416:	2b64      	cmp	r3, #100	; 0x64
 8003418:	d901      	bls.n	800341e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800341a:	2303      	movs	r3, #3
 800341c:	e294      	b.n	8003948 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800341e:	4b6c      	ldr	r3, [pc, #432]	; (80035d0 <HAL_RCC_OscConfig+0x2ac>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003426:	2b00      	cmp	r3, #0
 8003428:	d1f0      	bne.n	800340c <HAL_RCC_OscConfig+0xe8>
 800342a:	e000      	b.n	800342e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800342c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f003 0302 	and.w	r3, r3, #2
 8003436:	2b00      	cmp	r3, #0
 8003438:	d075      	beq.n	8003526 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800343a:	4b65      	ldr	r3, [pc, #404]	; (80035d0 <HAL_RCC_OscConfig+0x2ac>)
 800343c:	689b      	ldr	r3, [r3, #8]
 800343e:	f003 030c 	and.w	r3, r3, #12
 8003442:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003444:	4b62      	ldr	r3, [pc, #392]	; (80035d0 <HAL_RCC_OscConfig+0x2ac>)
 8003446:	68db      	ldr	r3, [r3, #12]
 8003448:	f003 0303 	and.w	r3, r3, #3
 800344c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800344e:	69bb      	ldr	r3, [r7, #24]
 8003450:	2b0c      	cmp	r3, #12
 8003452:	d102      	bne.n	800345a <HAL_RCC_OscConfig+0x136>
 8003454:	697b      	ldr	r3, [r7, #20]
 8003456:	2b02      	cmp	r3, #2
 8003458:	d002      	beq.n	8003460 <HAL_RCC_OscConfig+0x13c>
 800345a:	69bb      	ldr	r3, [r7, #24]
 800345c:	2b04      	cmp	r3, #4
 800345e:	d11f      	bne.n	80034a0 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003460:	4b5b      	ldr	r3, [pc, #364]	; (80035d0 <HAL_RCC_OscConfig+0x2ac>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003468:	2b00      	cmp	r3, #0
 800346a:	d005      	beq.n	8003478 <HAL_RCC_OscConfig+0x154>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	68db      	ldr	r3, [r3, #12]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d101      	bne.n	8003478 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003474:	2301      	movs	r3, #1
 8003476:	e267      	b.n	8003948 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003478:	4b55      	ldr	r3, [pc, #340]	; (80035d0 <HAL_RCC_OscConfig+0x2ac>)
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	691b      	ldr	r3, [r3, #16]
 8003484:	061b      	lsls	r3, r3, #24
 8003486:	4952      	ldr	r1, [pc, #328]	; (80035d0 <HAL_RCC_OscConfig+0x2ac>)
 8003488:	4313      	orrs	r3, r2
 800348a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800348c:	4b51      	ldr	r3, [pc, #324]	; (80035d4 <HAL_RCC_OscConfig+0x2b0>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4618      	mov	r0, r3
 8003492:	f7fe f80f 	bl	80014b4 <HAL_InitTick>
 8003496:	4603      	mov	r3, r0
 8003498:	2b00      	cmp	r3, #0
 800349a:	d043      	beq.n	8003524 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800349c:	2301      	movs	r3, #1
 800349e:	e253      	b.n	8003948 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	68db      	ldr	r3, [r3, #12]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d023      	beq.n	80034f0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034a8:	4b49      	ldr	r3, [pc, #292]	; (80035d0 <HAL_RCC_OscConfig+0x2ac>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a48      	ldr	r2, [pc, #288]	; (80035d0 <HAL_RCC_OscConfig+0x2ac>)
 80034ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034b4:	f7fe f84a 	bl	800154c <HAL_GetTick>
 80034b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80034ba:	e008      	b.n	80034ce <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034bc:	f7fe f846 	bl	800154c <HAL_GetTick>
 80034c0:	4602      	mov	r2, r0
 80034c2:	693b      	ldr	r3, [r7, #16]
 80034c4:	1ad3      	subs	r3, r2, r3
 80034c6:	2b02      	cmp	r3, #2
 80034c8:	d901      	bls.n	80034ce <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80034ca:	2303      	movs	r3, #3
 80034cc:	e23c      	b.n	8003948 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80034ce:	4b40      	ldr	r3, [pc, #256]	; (80035d0 <HAL_RCC_OscConfig+0x2ac>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d0f0      	beq.n	80034bc <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034da:	4b3d      	ldr	r3, [pc, #244]	; (80035d0 <HAL_RCC_OscConfig+0x2ac>)
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	691b      	ldr	r3, [r3, #16]
 80034e6:	061b      	lsls	r3, r3, #24
 80034e8:	4939      	ldr	r1, [pc, #228]	; (80035d0 <HAL_RCC_OscConfig+0x2ac>)
 80034ea:	4313      	orrs	r3, r2
 80034ec:	604b      	str	r3, [r1, #4]
 80034ee:	e01a      	b.n	8003526 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034f0:	4b37      	ldr	r3, [pc, #220]	; (80035d0 <HAL_RCC_OscConfig+0x2ac>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a36      	ldr	r2, [pc, #216]	; (80035d0 <HAL_RCC_OscConfig+0x2ac>)
 80034f6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80034fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034fc:	f7fe f826 	bl	800154c <HAL_GetTick>
 8003500:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003502:	e008      	b.n	8003516 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003504:	f7fe f822 	bl	800154c <HAL_GetTick>
 8003508:	4602      	mov	r2, r0
 800350a:	693b      	ldr	r3, [r7, #16]
 800350c:	1ad3      	subs	r3, r2, r3
 800350e:	2b02      	cmp	r3, #2
 8003510:	d901      	bls.n	8003516 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003512:	2303      	movs	r3, #3
 8003514:	e218      	b.n	8003948 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003516:	4b2e      	ldr	r3, [pc, #184]	; (80035d0 <HAL_RCC_OscConfig+0x2ac>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800351e:	2b00      	cmp	r3, #0
 8003520:	d1f0      	bne.n	8003504 <HAL_RCC_OscConfig+0x1e0>
 8003522:	e000      	b.n	8003526 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003524:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f003 0308 	and.w	r3, r3, #8
 800352e:	2b00      	cmp	r3, #0
 8003530:	d03c      	beq.n	80035ac <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	695b      	ldr	r3, [r3, #20]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d01c      	beq.n	8003574 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800353a:	4b25      	ldr	r3, [pc, #148]	; (80035d0 <HAL_RCC_OscConfig+0x2ac>)
 800353c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003540:	4a23      	ldr	r2, [pc, #140]	; (80035d0 <HAL_RCC_OscConfig+0x2ac>)
 8003542:	f043 0301 	orr.w	r3, r3, #1
 8003546:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800354a:	f7fd ffff 	bl	800154c <HAL_GetTick>
 800354e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003550:	e008      	b.n	8003564 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003552:	f7fd fffb 	bl	800154c <HAL_GetTick>
 8003556:	4602      	mov	r2, r0
 8003558:	693b      	ldr	r3, [r7, #16]
 800355a:	1ad3      	subs	r3, r2, r3
 800355c:	2b02      	cmp	r3, #2
 800355e:	d901      	bls.n	8003564 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003560:	2303      	movs	r3, #3
 8003562:	e1f1      	b.n	8003948 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003564:	4b1a      	ldr	r3, [pc, #104]	; (80035d0 <HAL_RCC_OscConfig+0x2ac>)
 8003566:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800356a:	f003 0302 	and.w	r3, r3, #2
 800356e:	2b00      	cmp	r3, #0
 8003570:	d0ef      	beq.n	8003552 <HAL_RCC_OscConfig+0x22e>
 8003572:	e01b      	b.n	80035ac <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003574:	4b16      	ldr	r3, [pc, #88]	; (80035d0 <HAL_RCC_OscConfig+0x2ac>)
 8003576:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800357a:	4a15      	ldr	r2, [pc, #84]	; (80035d0 <HAL_RCC_OscConfig+0x2ac>)
 800357c:	f023 0301 	bic.w	r3, r3, #1
 8003580:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003584:	f7fd ffe2 	bl	800154c <HAL_GetTick>
 8003588:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800358a:	e008      	b.n	800359e <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800358c:	f7fd ffde 	bl	800154c <HAL_GetTick>
 8003590:	4602      	mov	r2, r0
 8003592:	693b      	ldr	r3, [r7, #16]
 8003594:	1ad3      	subs	r3, r2, r3
 8003596:	2b02      	cmp	r3, #2
 8003598:	d901      	bls.n	800359e <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 800359a:	2303      	movs	r3, #3
 800359c:	e1d4      	b.n	8003948 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800359e:	4b0c      	ldr	r3, [pc, #48]	; (80035d0 <HAL_RCC_OscConfig+0x2ac>)
 80035a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80035a4:	f003 0302 	and.w	r3, r3, #2
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d1ef      	bne.n	800358c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f003 0304 	and.w	r3, r3, #4
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	f000 80ab 	beq.w	8003710 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035ba:	2300      	movs	r3, #0
 80035bc:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80035be:	4b04      	ldr	r3, [pc, #16]	; (80035d0 <HAL_RCC_OscConfig+0x2ac>)
 80035c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d106      	bne.n	80035d8 <HAL_RCC_OscConfig+0x2b4>
 80035ca:	2301      	movs	r3, #1
 80035cc:	e005      	b.n	80035da <HAL_RCC_OscConfig+0x2b6>
 80035ce:	bf00      	nop
 80035d0:	40021000 	.word	0x40021000
 80035d4:	2000004c 	.word	0x2000004c
 80035d8:	2300      	movs	r3, #0
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d00d      	beq.n	80035fa <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035de:	4baf      	ldr	r3, [pc, #700]	; (800389c <HAL_RCC_OscConfig+0x578>)
 80035e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035e2:	4aae      	ldr	r2, [pc, #696]	; (800389c <HAL_RCC_OscConfig+0x578>)
 80035e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035e8:	6593      	str	r3, [r2, #88]	; 0x58
 80035ea:	4bac      	ldr	r3, [pc, #688]	; (800389c <HAL_RCC_OscConfig+0x578>)
 80035ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035f2:	60fb      	str	r3, [r7, #12]
 80035f4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80035f6:	2301      	movs	r3, #1
 80035f8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80035fa:	4ba9      	ldr	r3, [pc, #676]	; (80038a0 <HAL_RCC_OscConfig+0x57c>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003602:	2b00      	cmp	r3, #0
 8003604:	d118      	bne.n	8003638 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003606:	4ba6      	ldr	r3, [pc, #664]	; (80038a0 <HAL_RCC_OscConfig+0x57c>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4aa5      	ldr	r2, [pc, #660]	; (80038a0 <HAL_RCC_OscConfig+0x57c>)
 800360c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003610:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003612:	f7fd ff9b 	bl	800154c <HAL_GetTick>
 8003616:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003618:	e008      	b.n	800362c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800361a:	f7fd ff97 	bl	800154c <HAL_GetTick>
 800361e:	4602      	mov	r2, r0
 8003620:	693b      	ldr	r3, [r7, #16]
 8003622:	1ad3      	subs	r3, r2, r3
 8003624:	2b02      	cmp	r3, #2
 8003626:	d901      	bls.n	800362c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003628:	2303      	movs	r3, #3
 800362a:	e18d      	b.n	8003948 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800362c:	4b9c      	ldr	r3, [pc, #624]	; (80038a0 <HAL_RCC_OscConfig+0x57c>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003634:	2b00      	cmp	r3, #0
 8003636:	d0f0      	beq.n	800361a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	689b      	ldr	r3, [r3, #8]
 800363c:	2b01      	cmp	r3, #1
 800363e:	d108      	bne.n	8003652 <HAL_RCC_OscConfig+0x32e>
 8003640:	4b96      	ldr	r3, [pc, #600]	; (800389c <HAL_RCC_OscConfig+0x578>)
 8003642:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003646:	4a95      	ldr	r2, [pc, #596]	; (800389c <HAL_RCC_OscConfig+0x578>)
 8003648:	f043 0301 	orr.w	r3, r3, #1
 800364c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003650:	e024      	b.n	800369c <HAL_RCC_OscConfig+0x378>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	689b      	ldr	r3, [r3, #8]
 8003656:	2b05      	cmp	r3, #5
 8003658:	d110      	bne.n	800367c <HAL_RCC_OscConfig+0x358>
 800365a:	4b90      	ldr	r3, [pc, #576]	; (800389c <HAL_RCC_OscConfig+0x578>)
 800365c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003660:	4a8e      	ldr	r2, [pc, #568]	; (800389c <HAL_RCC_OscConfig+0x578>)
 8003662:	f043 0304 	orr.w	r3, r3, #4
 8003666:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800366a:	4b8c      	ldr	r3, [pc, #560]	; (800389c <HAL_RCC_OscConfig+0x578>)
 800366c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003670:	4a8a      	ldr	r2, [pc, #552]	; (800389c <HAL_RCC_OscConfig+0x578>)
 8003672:	f043 0301 	orr.w	r3, r3, #1
 8003676:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800367a:	e00f      	b.n	800369c <HAL_RCC_OscConfig+0x378>
 800367c:	4b87      	ldr	r3, [pc, #540]	; (800389c <HAL_RCC_OscConfig+0x578>)
 800367e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003682:	4a86      	ldr	r2, [pc, #536]	; (800389c <HAL_RCC_OscConfig+0x578>)
 8003684:	f023 0301 	bic.w	r3, r3, #1
 8003688:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800368c:	4b83      	ldr	r3, [pc, #524]	; (800389c <HAL_RCC_OscConfig+0x578>)
 800368e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003692:	4a82      	ldr	r2, [pc, #520]	; (800389c <HAL_RCC_OscConfig+0x578>)
 8003694:	f023 0304 	bic.w	r3, r3, #4
 8003698:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	689b      	ldr	r3, [r3, #8]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d016      	beq.n	80036d2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036a4:	f7fd ff52 	bl	800154c <HAL_GetTick>
 80036a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80036aa:	e00a      	b.n	80036c2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036ac:	f7fd ff4e 	bl	800154c <HAL_GetTick>
 80036b0:	4602      	mov	r2, r0
 80036b2:	693b      	ldr	r3, [r7, #16]
 80036b4:	1ad3      	subs	r3, r2, r3
 80036b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d901      	bls.n	80036c2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80036be:	2303      	movs	r3, #3
 80036c0:	e142      	b.n	8003948 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80036c2:	4b76      	ldr	r3, [pc, #472]	; (800389c <HAL_RCC_OscConfig+0x578>)
 80036c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036c8:	f003 0302 	and.w	r3, r3, #2
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d0ed      	beq.n	80036ac <HAL_RCC_OscConfig+0x388>
 80036d0:	e015      	b.n	80036fe <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036d2:	f7fd ff3b 	bl	800154c <HAL_GetTick>
 80036d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80036d8:	e00a      	b.n	80036f0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036da:	f7fd ff37 	bl	800154c <HAL_GetTick>
 80036de:	4602      	mov	r2, r0
 80036e0:	693b      	ldr	r3, [r7, #16]
 80036e2:	1ad3      	subs	r3, r2, r3
 80036e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d901      	bls.n	80036f0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80036ec:	2303      	movs	r3, #3
 80036ee:	e12b      	b.n	8003948 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80036f0:	4b6a      	ldr	r3, [pc, #424]	; (800389c <HAL_RCC_OscConfig+0x578>)
 80036f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036f6:	f003 0302 	and.w	r3, r3, #2
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d1ed      	bne.n	80036da <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80036fe:	7ffb      	ldrb	r3, [r7, #31]
 8003700:	2b01      	cmp	r3, #1
 8003702:	d105      	bne.n	8003710 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003704:	4b65      	ldr	r3, [pc, #404]	; (800389c <HAL_RCC_OscConfig+0x578>)
 8003706:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003708:	4a64      	ldr	r2, [pc, #400]	; (800389c <HAL_RCC_OscConfig+0x578>)
 800370a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800370e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f003 0320 	and.w	r3, r3, #32
 8003718:	2b00      	cmp	r3, #0
 800371a:	d03c      	beq.n	8003796 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	699b      	ldr	r3, [r3, #24]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d01c      	beq.n	800375e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003724:	4b5d      	ldr	r3, [pc, #372]	; (800389c <HAL_RCC_OscConfig+0x578>)
 8003726:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800372a:	4a5c      	ldr	r2, [pc, #368]	; (800389c <HAL_RCC_OscConfig+0x578>)
 800372c:	f043 0301 	orr.w	r3, r3, #1
 8003730:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003734:	f7fd ff0a 	bl	800154c <HAL_GetTick>
 8003738:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800373a:	e008      	b.n	800374e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800373c:	f7fd ff06 	bl	800154c <HAL_GetTick>
 8003740:	4602      	mov	r2, r0
 8003742:	693b      	ldr	r3, [r7, #16]
 8003744:	1ad3      	subs	r3, r2, r3
 8003746:	2b02      	cmp	r3, #2
 8003748:	d901      	bls.n	800374e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800374a:	2303      	movs	r3, #3
 800374c:	e0fc      	b.n	8003948 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800374e:	4b53      	ldr	r3, [pc, #332]	; (800389c <HAL_RCC_OscConfig+0x578>)
 8003750:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003754:	f003 0302 	and.w	r3, r3, #2
 8003758:	2b00      	cmp	r3, #0
 800375a:	d0ef      	beq.n	800373c <HAL_RCC_OscConfig+0x418>
 800375c:	e01b      	b.n	8003796 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800375e:	4b4f      	ldr	r3, [pc, #316]	; (800389c <HAL_RCC_OscConfig+0x578>)
 8003760:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003764:	4a4d      	ldr	r2, [pc, #308]	; (800389c <HAL_RCC_OscConfig+0x578>)
 8003766:	f023 0301 	bic.w	r3, r3, #1
 800376a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800376e:	f7fd feed 	bl	800154c <HAL_GetTick>
 8003772:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003774:	e008      	b.n	8003788 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003776:	f7fd fee9 	bl	800154c <HAL_GetTick>
 800377a:	4602      	mov	r2, r0
 800377c:	693b      	ldr	r3, [r7, #16]
 800377e:	1ad3      	subs	r3, r2, r3
 8003780:	2b02      	cmp	r3, #2
 8003782:	d901      	bls.n	8003788 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003784:	2303      	movs	r3, #3
 8003786:	e0df      	b.n	8003948 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003788:	4b44      	ldr	r3, [pc, #272]	; (800389c <HAL_RCC_OscConfig+0x578>)
 800378a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800378e:	f003 0302 	and.w	r3, r3, #2
 8003792:	2b00      	cmp	r3, #0
 8003794:	d1ef      	bne.n	8003776 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	69db      	ldr	r3, [r3, #28]
 800379a:	2b00      	cmp	r3, #0
 800379c:	f000 80d3 	beq.w	8003946 <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80037a0:	4b3e      	ldr	r3, [pc, #248]	; (800389c <HAL_RCC_OscConfig+0x578>)
 80037a2:	689b      	ldr	r3, [r3, #8]
 80037a4:	f003 030c 	and.w	r3, r3, #12
 80037a8:	2b0c      	cmp	r3, #12
 80037aa:	f000 808d 	beq.w	80038c8 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	69db      	ldr	r3, [r3, #28]
 80037b2:	2b02      	cmp	r3, #2
 80037b4:	d15a      	bne.n	800386c <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037b6:	4b39      	ldr	r3, [pc, #228]	; (800389c <HAL_RCC_OscConfig+0x578>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4a38      	ldr	r2, [pc, #224]	; (800389c <HAL_RCC_OscConfig+0x578>)
 80037bc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80037c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037c2:	f7fd fec3 	bl	800154c <HAL_GetTick>
 80037c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037c8:	e008      	b.n	80037dc <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037ca:	f7fd febf 	bl	800154c <HAL_GetTick>
 80037ce:	4602      	mov	r2, r0
 80037d0:	693b      	ldr	r3, [r7, #16]
 80037d2:	1ad3      	subs	r3, r2, r3
 80037d4:	2b02      	cmp	r3, #2
 80037d6:	d901      	bls.n	80037dc <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 80037d8:	2303      	movs	r3, #3
 80037da:	e0b5      	b.n	8003948 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037dc:	4b2f      	ldr	r3, [pc, #188]	; (800389c <HAL_RCC_OscConfig+0x578>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d1f0      	bne.n	80037ca <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80037e8:	4b2c      	ldr	r3, [pc, #176]	; (800389c <HAL_RCC_OscConfig+0x578>)
 80037ea:	68da      	ldr	r2, [r3, #12]
 80037ec:	4b2d      	ldr	r3, [pc, #180]	; (80038a4 <HAL_RCC_OscConfig+0x580>)
 80037ee:	4013      	ands	r3, r2
 80037f0:	687a      	ldr	r2, [r7, #4]
 80037f2:	6a11      	ldr	r1, [r2, #32]
 80037f4:	687a      	ldr	r2, [r7, #4]
 80037f6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80037f8:	3a01      	subs	r2, #1
 80037fa:	0112      	lsls	r2, r2, #4
 80037fc:	4311      	orrs	r1, r2
 80037fe:	687a      	ldr	r2, [r7, #4]
 8003800:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003802:	0212      	lsls	r2, r2, #8
 8003804:	4311      	orrs	r1, r2
 8003806:	687a      	ldr	r2, [r7, #4]
 8003808:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800380a:	0852      	lsrs	r2, r2, #1
 800380c:	3a01      	subs	r2, #1
 800380e:	0552      	lsls	r2, r2, #21
 8003810:	4311      	orrs	r1, r2
 8003812:	687a      	ldr	r2, [r7, #4]
 8003814:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003816:	0852      	lsrs	r2, r2, #1
 8003818:	3a01      	subs	r2, #1
 800381a:	0652      	lsls	r2, r2, #25
 800381c:	4311      	orrs	r1, r2
 800381e:	687a      	ldr	r2, [r7, #4]
 8003820:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003822:	06d2      	lsls	r2, r2, #27
 8003824:	430a      	orrs	r2, r1
 8003826:	491d      	ldr	r1, [pc, #116]	; (800389c <HAL_RCC_OscConfig+0x578>)
 8003828:	4313      	orrs	r3, r2
 800382a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800382c:	4b1b      	ldr	r3, [pc, #108]	; (800389c <HAL_RCC_OscConfig+0x578>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a1a      	ldr	r2, [pc, #104]	; (800389c <HAL_RCC_OscConfig+0x578>)
 8003832:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003836:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003838:	4b18      	ldr	r3, [pc, #96]	; (800389c <HAL_RCC_OscConfig+0x578>)
 800383a:	68db      	ldr	r3, [r3, #12]
 800383c:	4a17      	ldr	r2, [pc, #92]	; (800389c <HAL_RCC_OscConfig+0x578>)
 800383e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003842:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003844:	f7fd fe82 	bl	800154c <HAL_GetTick>
 8003848:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800384a:	e008      	b.n	800385e <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800384c:	f7fd fe7e 	bl	800154c <HAL_GetTick>
 8003850:	4602      	mov	r2, r0
 8003852:	693b      	ldr	r3, [r7, #16]
 8003854:	1ad3      	subs	r3, r2, r3
 8003856:	2b02      	cmp	r3, #2
 8003858:	d901      	bls.n	800385e <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 800385a:	2303      	movs	r3, #3
 800385c:	e074      	b.n	8003948 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800385e:	4b0f      	ldr	r3, [pc, #60]	; (800389c <HAL_RCC_OscConfig+0x578>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003866:	2b00      	cmp	r3, #0
 8003868:	d0f0      	beq.n	800384c <HAL_RCC_OscConfig+0x528>
 800386a:	e06c      	b.n	8003946 <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800386c:	4b0b      	ldr	r3, [pc, #44]	; (800389c <HAL_RCC_OscConfig+0x578>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4a0a      	ldr	r2, [pc, #40]	; (800389c <HAL_RCC_OscConfig+0x578>)
 8003872:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003876:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003878:	4b08      	ldr	r3, [pc, #32]	; (800389c <HAL_RCC_OscConfig+0x578>)
 800387a:	68db      	ldr	r3, [r3, #12]
 800387c:	4a07      	ldr	r2, [pc, #28]	; (800389c <HAL_RCC_OscConfig+0x578>)
 800387e:	f023 0303 	bic.w	r3, r3, #3
 8003882:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003884:	4b05      	ldr	r3, [pc, #20]	; (800389c <HAL_RCC_OscConfig+0x578>)
 8003886:	68db      	ldr	r3, [r3, #12]
 8003888:	4a04      	ldr	r2, [pc, #16]	; (800389c <HAL_RCC_OscConfig+0x578>)
 800388a:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800388e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003892:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003894:	f7fd fe5a 	bl	800154c <HAL_GetTick>
 8003898:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800389a:	e00e      	b.n	80038ba <HAL_RCC_OscConfig+0x596>
 800389c:	40021000 	.word	0x40021000
 80038a0:	40007000 	.word	0x40007000
 80038a4:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038a8:	f7fd fe50 	bl	800154c <HAL_GetTick>
 80038ac:	4602      	mov	r2, r0
 80038ae:	693b      	ldr	r3, [r7, #16]
 80038b0:	1ad3      	subs	r3, r2, r3
 80038b2:	2b02      	cmp	r3, #2
 80038b4:	d901      	bls.n	80038ba <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 80038b6:	2303      	movs	r3, #3
 80038b8:	e046      	b.n	8003948 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80038ba:	4b25      	ldr	r3, [pc, #148]	; (8003950 <HAL_RCC_OscConfig+0x62c>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d1f0      	bne.n	80038a8 <HAL_RCC_OscConfig+0x584>
 80038c6:	e03e      	b.n	8003946 <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	69db      	ldr	r3, [r3, #28]
 80038cc:	2b01      	cmp	r3, #1
 80038ce:	d101      	bne.n	80038d4 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 80038d0:	2301      	movs	r3, #1
 80038d2:	e039      	b.n	8003948 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80038d4:	4b1e      	ldr	r3, [pc, #120]	; (8003950 <HAL_RCC_OscConfig+0x62c>)
 80038d6:	68db      	ldr	r3, [r3, #12]
 80038d8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038da:	697b      	ldr	r3, [r7, #20]
 80038dc:	f003 0203 	and.w	r2, r3, #3
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6a1b      	ldr	r3, [r3, #32]
 80038e4:	429a      	cmp	r2, r3
 80038e6:	d12c      	bne.n	8003942 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80038e8:	697b      	ldr	r3, [r7, #20]
 80038ea:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038f2:	3b01      	subs	r3, #1
 80038f4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038f6:	429a      	cmp	r2, r3
 80038f8:	d123      	bne.n	8003942 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80038fa:	697b      	ldr	r3, [r7, #20]
 80038fc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003904:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003906:	429a      	cmp	r2, r3
 8003908:	d11b      	bne.n	8003942 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800390a:	697b      	ldr	r3, [r7, #20]
 800390c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003914:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003916:	429a      	cmp	r2, r3
 8003918:	d113      	bne.n	8003942 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800391a:	697b      	ldr	r3, [r7, #20]
 800391c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003924:	085b      	lsrs	r3, r3, #1
 8003926:	3b01      	subs	r3, #1
 8003928:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800392a:	429a      	cmp	r2, r3
 800392c:	d109      	bne.n	8003942 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800392e:	697b      	ldr	r3, [r7, #20]
 8003930:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003938:	085b      	lsrs	r3, r3, #1
 800393a:	3b01      	subs	r3, #1
 800393c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800393e:	429a      	cmp	r2, r3
 8003940:	d001      	beq.n	8003946 <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 8003942:	2301      	movs	r3, #1
 8003944:	e000      	b.n	8003948 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 8003946:	2300      	movs	r3, #0
}
 8003948:	4618      	mov	r0, r3
 800394a:	3720      	adds	r7, #32
 800394c:	46bd      	mov	sp, r7
 800394e:	bd80      	pop	{r7, pc}
 8003950:	40021000 	.word	0x40021000

08003954 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b086      	sub	sp, #24
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
 800395c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800395e:	2300      	movs	r3, #0
 8003960:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d101      	bne.n	800396c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003968:	2301      	movs	r3, #1
 800396a:	e11e      	b.n	8003baa <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800396c:	4b91      	ldr	r3, [pc, #580]	; (8003bb4 <HAL_RCC_ClockConfig+0x260>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f003 030f 	and.w	r3, r3, #15
 8003974:	683a      	ldr	r2, [r7, #0]
 8003976:	429a      	cmp	r2, r3
 8003978:	d910      	bls.n	800399c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800397a:	4b8e      	ldr	r3, [pc, #568]	; (8003bb4 <HAL_RCC_ClockConfig+0x260>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f023 020f 	bic.w	r2, r3, #15
 8003982:	498c      	ldr	r1, [pc, #560]	; (8003bb4 <HAL_RCC_ClockConfig+0x260>)
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	4313      	orrs	r3, r2
 8003988:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800398a:	4b8a      	ldr	r3, [pc, #552]	; (8003bb4 <HAL_RCC_ClockConfig+0x260>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f003 030f 	and.w	r3, r3, #15
 8003992:	683a      	ldr	r2, [r7, #0]
 8003994:	429a      	cmp	r2, r3
 8003996:	d001      	beq.n	800399c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003998:	2301      	movs	r3, #1
 800399a:	e106      	b.n	8003baa <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f003 0301 	and.w	r3, r3, #1
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d073      	beq.n	8003a90 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	2b03      	cmp	r3, #3
 80039ae:	d129      	bne.n	8003a04 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039b0:	4b81      	ldr	r3, [pc, #516]	; (8003bb8 <HAL_RCC_ClockConfig+0x264>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d101      	bne.n	80039c0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80039bc:	2301      	movs	r3, #1
 80039be:	e0f4      	b.n	8003baa <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80039c0:	f000 f966 	bl	8003c90 <RCC_GetSysClockFreqFromPLLSource>
 80039c4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80039c6:	693b      	ldr	r3, [r7, #16]
 80039c8:	4a7c      	ldr	r2, [pc, #496]	; (8003bbc <HAL_RCC_ClockConfig+0x268>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d93f      	bls.n	8003a4e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80039ce:	4b7a      	ldr	r3, [pc, #488]	; (8003bb8 <HAL_RCC_ClockConfig+0x264>)
 80039d0:	689b      	ldr	r3, [r3, #8]
 80039d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d009      	beq.n	80039ee <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d033      	beq.n	8003a4e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d12f      	bne.n	8003a4e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80039ee:	4b72      	ldr	r3, [pc, #456]	; (8003bb8 <HAL_RCC_ClockConfig+0x264>)
 80039f0:	689b      	ldr	r3, [r3, #8]
 80039f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80039f6:	4a70      	ldr	r2, [pc, #448]	; (8003bb8 <HAL_RCC_ClockConfig+0x264>)
 80039f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80039fc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80039fe:	2380      	movs	r3, #128	; 0x80
 8003a00:	617b      	str	r3, [r7, #20]
 8003a02:	e024      	b.n	8003a4e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	2b02      	cmp	r3, #2
 8003a0a:	d107      	bne.n	8003a1c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a0c:	4b6a      	ldr	r3, [pc, #424]	; (8003bb8 <HAL_RCC_ClockConfig+0x264>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d109      	bne.n	8003a2c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	e0c6      	b.n	8003baa <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a1c:	4b66      	ldr	r3, [pc, #408]	; (8003bb8 <HAL_RCC_ClockConfig+0x264>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d101      	bne.n	8003a2c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003a28:	2301      	movs	r3, #1
 8003a2a:	e0be      	b.n	8003baa <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003a2c:	f000 f8ce 	bl	8003bcc <HAL_RCC_GetSysClockFreq>
 8003a30:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003a32:	693b      	ldr	r3, [r7, #16]
 8003a34:	4a61      	ldr	r2, [pc, #388]	; (8003bbc <HAL_RCC_ClockConfig+0x268>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d909      	bls.n	8003a4e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003a3a:	4b5f      	ldr	r3, [pc, #380]	; (8003bb8 <HAL_RCC_ClockConfig+0x264>)
 8003a3c:	689b      	ldr	r3, [r3, #8]
 8003a3e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003a42:	4a5d      	ldr	r2, [pc, #372]	; (8003bb8 <HAL_RCC_ClockConfig+0x264>)
 8003a44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a48:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003a4a:	2380      	movs	r3, #128	; 0x80
 8003a4c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003a4e:	4b5a      	ldr	r3, [pc, #360]	; (8003bb8 <HAL_RCC_ClockConfig+0x264>)
 8003a50:	689b      	ldr	r3, [r3, #8]
 8003a52:	f023 0203 	bic.w	r2, r3, #3
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	4957      	ldr	r1, [pc, #348]	; (8003bb8 <HAL_RCC_ClockConfig+0x264>)
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a60:	f7fd fd74 	bl	800154c <HAL_GetTick>
 8003a64:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a66:	e00a      	b.n	8003a7e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a68:	f7fd fd70 	bl	800154c <HAL_GetTick>
 8003a6c:	4602      	mov	r2, r0
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	1ad3      	subs	r3, r2, r3
 8003a72:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d901      	bls.n	8003a7e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003a7a:	2303      	movs	r3, #3
 8003a7c:	e095      	b.n	8003baa <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a7e:	4b4e      	ldr	r3, [pc, #312]	; (8003bb8 <HAL_RCC_ClockConfig+0x264>)
 8003a80:	689b      	ldr	r3, [r3, #8]
 8003a82:	f003 020c 	and.w	r2, r3, #12
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	009b      	lsls	r3, r3, #2
 8003a8c:	429a      	cmp	r2, r3
 8003a8e:	d1eb      	bne.n	8003a68 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f003 0302 	and.w	r3, r3, #2
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d023      	beq.n	8003ae4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f003 0304 	and.w	r3, r3, #4
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d005      	beq.n	8003ab4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003aa8:	4b43      	ldr	r3, [pc, #268]	; (8003bb8 <HAL_RCC_ClockConfig+0x264>)
 8003aaa:	689b      	ldr	r3, [r3, #8]
 8003aac:	4a42      	ldr	r2, [pc, #264]	; (8003bb8 <HAL_RCC_ClockConfig+0x264>)
 8003aae:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003ab2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f003 0308 	and.w	r3, r3, #8
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d007      	beq.n	8003ad0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003ac0:	4b3d      	ldr	r3, [pc, #244]	; (8003bb8 <HAL_RCC_ClockConfig+0x264>)
 8003ac2:	689b      	ldr	r3, [r3, #8]
 8003ac4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003ac8:	4a3b      	ldr	r2, [pc, #236]	; (8003bb8 <HAL_RCC_ClockConfig+0x264>)
 8003aca:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003ace:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ad0:	4b39      	ldr	r3, [pc, #228]	; (8003bb8 <HAL_RCC_ClockConfig+0x264>)
 8003ad2:	689b      	ldr	r3, [r3, #8]
 8003ad4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	689b      	ldr	r3, [r3, #8]
 8003adc:	4936      	ldr	r1, [pc, #216]	; (8003bb8 <HAL_RCC_ClockConfig+0x264>)
 8003ade:	4313      	orrs	r3, r2
 8003ae0:	608b      	str	r3, [r1, #8]
 8003ae2:	e008      	b.n	8003af6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003ae4:	697b      	ldr	r3, [r7, #20]
 8003ae6:	2b80      	cmp	r3, #128	; 0x80
 8003ae8:	d105      	bne.n	8003af6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003aea:	4b33      	ldr	r3, [pc, #204]	; (8003bb8 <HAL_RCC_ClockConfig+0x264>)
 8003aec:	689b      	ldr	r3, [r3, #8]
 8003aee:	4a32      	ldr	r2, [pc, #200]	; (8003bb8 <HAL_RCC_ClockConfig+0x264>)
 8003af0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003af4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003af6:	4b2f      	ldr	r3, [pc, #188]	; (8003bb4 <HAL_RCC_ClockConfig+0x260>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f003 030f 	and.w	r3, r3, #15
 8003afe:	683a      	ldr	r2, [r7, #0]
 8003b00:	429a      	cmp	r2, r3
 8003b02:	d21d      	bcs.n	8003b40 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b04:	4b2b      	ldr	r3, [pc, #172]	; (8003bb4 <HAL_RCC_ClockConfig+0x260>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f023 020f 	bic.w	r2, r3, #15
 8003b0c:	4929      	ldr	r1, [pc, #164]	; (8003bb4 <HAL_RCC_ClockConfig+0x260>)
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	4313      	orrs	r3, r2
 8003b12:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003b14:	f7fd fd1a 	bl	800154c <HAL_GetTick>
 8003b18:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b1a:	e00a      	b.n	8003b32 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b1c:	f7fd fd16 	bl	800154c <HAL_GetTick>
 8003b20:	4602      	mov	r2, r0
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	1ad3      	subs	r3, r2, r3
 8003b26:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d901      	bls.n	8003b32 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003b2e:	2303      	movs	r3, #3
 8003b30:	e03b      	b.n	8003baa <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b32:	4b20      	ldr	r3, [pc, #128]	; (8003bb4 <HAL_RCC_ClockConfig+0x260>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f003 030f 	and.w	r3, r3, #15
 8003b3a:	683a      	ldr	r2, [r7, #0]
 8003b3c:	429a      	cmp	r2, r3
 8003b3e:	d1ed      	bne.n	8003b1c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f003 0304 	and.w	r3, r3, #4
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d008      	beq.n	8003b5e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b4c:	4b1a      	ldr	r3, [pc, #104]	; (8003bb8 <HAL_RCC_ClockConfig+0x264>)
 8003b4e:	689b      	ldr	r3, [r3, #8]
 8003b50:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	68db      	ldr	r3, [r3, #12]
 8003b58:	4917      	ldr	r1, [pc, #92]	; (8003bb8 <HAL_RCC_ClockConfig+0x264>)
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f003 0308 	and.w	r3, r3, #8
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d009      	beq.n	8003b7e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b6a:	4b13      	ldr	r3, [pc, #76]	; (8003bb8 <HAL_RCC_ClockConfig+0x264>)
 8003b6c:	689b      	ldr	r3, [r3, #8]
 8003b6e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	691b      	ldr	r3, [r3, #16]
 8003b76:	00db      	lsls	r3, r3, #3
 8003b78:	490f      	ldr	r1, [pc, #60]	; (8003bb8 <HAL_RCC_ClockConfig+0x264>)
 8003b7a:	4313      	orrs	r3, r2
 8003b7c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003b7e:	f000 f825 	bl	8003bcc <HAL_RCC_GetSysClockFreq>
 8003b82:	4601      	mov	r1, r0
 8003b84:	4b0c      	ldr	r3, [pc, #48]	; (8003bb8 <HAL_RCC_ClockConfig+0x264>)
 8003b86:	689b      	ldr	r3, [r3, #8]
 8003b88:	091b      	lsrs	r3, r3, #4
 8003b8a:	f003 030f 	and.w	r3, r3, #15
 8003b8e:	4a0c      	ldr	r2, [pc, #48]	; (8003bc0 <HAL_RCC_ClockConfig+0x26c>)
 8003b90:	5cd3      	ldrb	r3, [r2, r3]
 8003b92:	f003 031f 	and.w	r3, r3, #31
 8003b96:	fa21 f303 	lsr.w	r3, r1, r3
 8003b9a:	4a0a      	ldr	r2, [pc, #40]	; (8003bc4 <HAL_RCC_ClockConfig+0x270>)
 8003b9c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003b9e:	4b0a      	ldr	r3, [pc, #40]	; (8003bc8 <HAL_RCC_ClockConfig+0x274>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	f7fd fc86 	bl	80014b4 <HAL_InitTick>
 8003ba8:	4603      	mov	r3, r0
}
 8003baa:	4618      	mov	r0, r3
 8003bac:	3718      	adds	r7, #24
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bd80      	pop	{r7, pc}
 8003bb2:	bf00      	nop
 8003bb4:	40022000 	.word	0x40022000
 8003bb8:	40021000 	.word	0x40021000
 8003bbc:	04c4b400 	.word	0x04c4b400
 8003bc0:	08009b40 	.word	0x08009b40
 8003bc4:	20000048 	.word	0x20000048
 8003bc8:	2000004c 	.word	0x2000004c

08003bcc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003bcc:	b480      	push	{r7}
 8003bce:	b087      	sub	sp, #28
 8003bd0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003bd2:	4b2c      	ldr	r3, [pc, #176]	; (8003c84 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003bd4:	689b      	ldr	r3, [r3, #8]
 8003bd6:	f003 030c 	and.w	r3, r3, #12
 8003bda:	2b04      	cmp	r3, #4
 8003bdc:	d102      	bne.n	8003be4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003bde:	4b2a      	ldr	r3, [pc, #168]	; (8003c88 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003be0:	613b      	str	r3, [r7, #16]
 8003be2:	e047      	b.n	8003c74 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003be4:	4b27      	ldr	r3, [pc, #156]	; (8003c84 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003be6:	689b      	ldr	r3, [r3, #8]
 8003be8:	f003 030c 	and.w	r3, r3, #12
 8003bec:	2b08      	cmp	r3, #8
 8003bee:	d102      	bne.n	8003bf6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003bf0:	4b26      	ldr	r3, [pc, #152]	; (8003c8c <HAL_RCC_GetSysClockFreq+0xc0>)
 8003bf2:	613b      	str	r3, [r7, #16]
 8003bf4:	e03e      	b.n	8003c74 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003bf6:	4b23      	ldr	r3, [pc, #140]	; (8003c84 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003bf8:	689b      	ldr	r3, [r3, #8]
 8003bfa:	f003 030c 	and.w	r3, r3, #12
 8003bfe:	2b0c      	cmp	r3, #12
 8003c00:	d136      	bne.n	8003c70 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003c02:	4b20      	ldr	r3, [pc, #128]	; (8003c84 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c04:	68db      	ldr	r3, [r3, #12]
 8003c06:	f003 0303 	and.w	r3, r3, #3
 8003c0a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003c0c:	4b1d      	ldr	r3, [pc, #116]	; (8003c84 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c0e:	68db      	ldr	r3, [r3, #12]
 8003c10:	091b      	lsrs	r3, r3, #4
 8003c12:	f003 030f 	and.w	r3, r3, #15
 8003c16:	3301      	adds	r3, #1
 8003c18:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	2b03      	cmp	r3, #3
 8003c1e:	d10c      	bne.n	8003c3a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003c20:	4a1a      	ldr	r2, [pc, #104]	; (8003c8c <HAL_RCC_GetSysClockFreq+0xc0>)
 8003c22:	68bb      	ldr	r3, [r7, #8]
 8003c24:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c28:	4a16      	ldr	r2, [pc, #88]	; (8003c84 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c2a:	68d2      	ldr	r2, [r2, #12]
 8003c2c:	0a12      	lsrs	r2, r2, #8
 8003c2e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003c32:	fb02 f303 	mul.w	r3, r2, r3
 8003c36:	617b      	str	r3, [r7, #20]
      break;
 8003c38:	e00c      	b.n	8003c54 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003c3a:	4a13      	ldr	r2, [pc, #76]	; (8003c88 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003c3c:	68bb      	ldr	r3, [r7, #8]
 8003c3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c42:	4a10      	ldr	r2, [pc, #64]	; (8003c84 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c44:	68d2      	ldr	r2, [r2, #12]
 8003c46:	0a12      	lsrs	r2, r2, #8
 8003c48:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003c4c:	fb02 f303 	mul.w	r3, r2, r3
 8003c50:	617b      	str	r3, [r7, #20]
      break;
 8003c52:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003c54:	4b0b      	ldr	r3, [pc, #44]	; (8003c84 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c56:	68db      	ldr	r3, [r3, #12]
 8003c58:	0e5b      	lsrs	r3, r3, #25
 8003c5a:	f003 0303 	and.w	r3, r3, #3
 8003c5e:	3301      	adds	r3, #1
 8003c60:	005b      	lsls	r3, r3, #1
 8003c62:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003c64:	697a      	ldr	r2, [r7, #20]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c6c:	613b      	str	r3, [r7, #16]
 8003c6e:	e001      	b.n	8003c74 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003c70:	2300      	movs	r3, #0
 8003c72:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003c74:	693b      	ldr	r3, [r7, #16]
}
 8003c76:	4618      	mov	r0, r3
 8003c78:	371c      	adds	r7, #28
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c80:	4770      	bx	lr
 8003c82:	bf00      	nop
 8003c84:	40021000 	.word	0x40021000
 8003c88:	00f42400 	.word	0x00f42400
 8003c8c:	007a1200 	.word	0x007a1200

08003c90 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003c90:	b480      	push	{r7}
 8003c92:	b087      	sub	sp, #28
 8003c94:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003c96:	4b1e      	ldr	r3, [pc, #120]	; (8003d10 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003c98:	68db      	ldr	r3, [r3, #12]
 8003c9a:	f003 0303 	and.w	r3, r3, #3
 8003c9e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003ca0:	4b1b      	ldr	r3, [pc, #108]	; (8003d10 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003ca2:	68db      	ldr	r3, [r3, #12]
 8003ca4:	091b      	lsrs	r3, r3, #4
 8003ca6:	f003 030f 	and.w	r3, r3, #15
 8003caa:	3301      	adds	r3, #1
 8003cac:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003cae:	693b      	ldr	r3, [r7, #16]
 8003cb0:	2b03      	cmp	r3, #3
 8003cb2:	d10c      	bne.n	8003cce <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003cb4:	4a17      	ldr	r2, [pc, #92]	; (8003d14 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cbc:	4a14      	ldr	r2, [pc, #80]	; (8003d10 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003cbe:	68d2      	ldr	r2, [r2, #12]
 8003cc0:	0a12      	lsrs	r2, r2, #8
 8003cc2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003cc6:	fb02 f303 	mul.w	r3, r2, r3
 8003cca:	617b      	str	r3, [r7, #20]
    break;
 8003ccc:	e00c      	b.n	8003ce8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003cce:	4a12      	ldr	r2, [pc, #72]	; (8003d18 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cd6:	4a0e      	ldr	r2, [pc, #56]	; (8003d10 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003cd8:	68d2      	ldr	r2, [r2, #12]
 8003cda:	0a12      	lsrs	r2, r2, #8
 8003cdc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003ce0:	fb02 f303 	mul.w	r3, r2, r3
 8003ce4:	617b      	str	r3, [r7, #20]
    break;
 8003ce6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003ce8:	4b09      	ldr	r3, [pc, #36]	; (8003d10 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003cea:	68db      	ldr	r3, [r3, #12]
 8003cec:	0e5b      	lsrs	r3, r3, #25
 8003cee:	f003 0303 	and.w	r3, r3, #3
 8003cf2:	3301      	adds	r3, #1
 8003cf4:	005b      	lsls	r3, r3, #1
 8003cf6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003cf8:	697a      	ldr	r2, [r7, #20]
 8003cfa:	68bb      	ldr	r3, [r7, #8]
 8003cfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d00:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003d02:	687b      	ldr	r3, [r7, #4]
}
 8003d04:	4618      	mov	r0, r3
 8003d06:	371c      	adds	r7, #28
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0e:	4770      	bx	lr
 8003d10:	40021000 	.word	0x40021000
 8003d14:	007a1200 	.word	0x007a1200
 8003d18:	00f42400 	.word	0x00f42400

08003d1c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b086      	sub	sp, #24
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003d24:	2300      	movs	r3, #0
 8003d26:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003d28:	2300      	movs	r3, #0
 8003d2a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	f000 8098 	beq.w	8003e6a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d3e:	4b43      	ldr	r3, [pc, #268]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d10d      	bne.n	8003d66 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d4a:	4b40      	ldr	r3, [pc, #256]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d4e:	4a3f      	ldr	r2, [pc, #252]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d54:	6593      	str	r3, [r2, #88]	; 0x58
 8003d56:	4b3d      	ldr	r3, [pc, #244]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d5e:	60bb      	str	r3, [r7, #8]
 8003d60:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d62:	2301      	movs	r3, #1
 8003d64:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d66:	4b3a      	ldr	r3, [pc, #232]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4a39      	ldr	r2, [pc, #228]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003d6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d70:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003d72:	f7fd fbeb 	bl	800154c <HAL_GetTick>
 8003d76:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003d78:	e009      	b.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d7a:	f7fd fbe7 	bl	800154c <HAL_GetTick>
 8003d7e:	4602      	mov	r2, r0
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	1ad3      	subs	r3, r2, r3
 8003d84:	2b02      	cmp	r3, #2
 8003d86:	d902      	bls.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003d88:	2303      	movs	r3, #3
 8003d8a:	74fb      	strb	r3, [r7, #19]
        break;
 8003d8c:	e005      	b.n	8003d9a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003d8e:	4b30      	ldr	r3, [pc, #192]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d0ef      	beq.n	8003d7a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003d9a:	7cfb      	ldrb	r3, [r7, #19]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d159      	bne.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003da0:	4b2a      	ldr	r3, [pc, #168]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003da2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003da6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003daa:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003dac:	697b      	ldr	r3, [r7, #20]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d01e      	beq.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003db6:	697a      	ldr	r2, [r7, #20]
 8003db8:	429a      	cmp	r2, r3
 8003dba:	d019      	beq.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003dbc:	4b23      	ldr	r3, [pc, #140]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003dbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dc2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003dc6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003dc8:	4b20      	ldr	r3, [pc, #128]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003dca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dce:	4a1f      	ldr	r2, [pc, #124]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003dd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003dd4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003dd8:	4b1c      	ldr	r3, [pc, #112]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003dda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dde:	4a1b      	ldr	r2, [pc, #108]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003de0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003de4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003de8:	4a18      	ldr	r2, [pc, #96]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003dea:	697b      	ldr	r3, [r7, #20]
 8003dec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003df0:	697b      	ldr	r3, [r7, #20]
 8003df2:	f003 0301 	and.w	r3, r3, #1
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d016      	beq.n	8003e28 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dfa:	f7fd fba7 	bl	800154c <HAL_GetTick>
 8003dfe:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e00:	e00b      	b.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e02:	f7fd fba3 	bl	800154c <HAL_GetTick>
 8003e06:	4602      	mov	r2, r0
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	1ad3      	subs	r3, r2, r3
 8003e0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d902      	bls.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003e14:	2303      	movs	r3, #3
 8003e16:	74fb      	strb	r3, [r7, #19]
            break;
 8003e18:	e006      	b.n	8003e28 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e1a:	4b0c      	ldr	r3, [pc, #48]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e20:	f003 0302 	and.w	r3, r3, #2
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d0ec      	beq.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003e28:	7cfb      	ldrb	r3, [r7, #19]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d10b      	bne.n	8003e46 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e2e:	4b07      	ldr	r3, [pc, #28]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e34:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e3c:	4903      	ldr	r1, [pc, #12]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e3e:	4313      	orrs	r3, r2
 8003e40:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003e44:	e008      	b.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003e46:	7cfb      	ldrb	r3, [r7, #19]
 8003e48:	74bb      	strb	r3, [r7, #18]
 8003e4a:	e005      	b.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003e4c:	40021000 	.word	0x40021000
 8003e50:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e54:	7cfb      	ldrb	r3, [r7, #19]
 8003e56:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003e58:	7c7b      	ldrb	r3, [r7, #17]
 8003e5a:	2b01      	cmp	r3, #1
 8003e5c:	d105      	bne.n	8003e6a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e5e:	4ba6      	ldr	r3, [pc, #664]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e62:	4aa5      	ldr	r2, [pc, #660]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e64:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e68:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f003 0301 	and.w	r3, r3, #1
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d00a      	beq.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003e76:	4ba0      	ldr	r3, [pc, #640]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e7c:	f023 0203 	bic.w	r2, r3, #3
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	499c      	ldr	r1, [pc, #624]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e86:	4313      	orrs	r3, r2
 8003e88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f003 0302 	and.w	r3, r3, #2
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d00a      	beq.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003e98:	4b97      	ldr	r3, [pc, #604]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e9e:	f023 020c 	bic.w	r2, r3, #12
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	689b      	ldr	r3, [r3, #8]
 8003ea6:	4994      	ldr	r1, [pc, #592]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ea8:	4313      	orrs	r3, r2
 8003eaa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f003 0304 	and.w	r3, r3, #4
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d00a      	beq.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003eba:	4b8f      	ldr	r3, [pc, #572]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ebc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ec0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	68db      	ldr	r3, [r3, #12]
 8003ec8:	498b      	ldr	r1, [pc, #556]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f003 0308 	and.w	r3, r3, #8
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d00a      	beq.n	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003edc:	4b86      	ldr	r3, [pc, #536]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ede:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ee2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	691b      	ldr	r3, [r3, #16]
 8003eea:	4983      	ldr	r1, [pc, #524]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003eec:	4313      	orrs	r3, r2
 8003eee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f003 0320 	and.w	r3, r3, #32
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d00a      	beq.n	8003f14 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003efe:	4b7e      	ldr	r3, [pc, #504]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f04:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	695b      	ldr	r3, [r3, #20]
 8003f0c:	497a      	ldr	r1, [pc, #488]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d00a      	beq.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003f20:	4b75      	ldr	r3, [pc, #468]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f26:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	699b      	ldr	r3, [r3, #24]
 8003f2e:	4972      	ldr	r1, [pc, #456]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f30:	4313      	orrs	r3, r2
 8003f32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d00a      	beq.n	8003f58 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003f42:	4b6d      	ldr	r3, [pc, #436]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f48:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	69db      	ldr	r3, [r3, #28]
 8003f50:	4969      	ldr	r1, [pc, #420]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f52:	4313      	orrs	r3, r2
 8003f54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d00a      	beq.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003f64:	4b64      	ldr	r3, [pc, #400]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f6a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6a1b      	ldr	r3, [r3, #32]
 8003f72:	4961      	ldr	r1, [pc, #388]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f74:	4313      	orrs	r3, r2
 8003f76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d00a      	beq.n	8003f9c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003f86:	4b5c      	ldr	r3, [pc, #368]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f8c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f94:	4958      	ldr	r1, [pc, #352]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f96:	4313      	orrs	r3, r2
 8003f98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d015      	beq.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003fa8:	4b53      	ldr	r3, [pc, #332]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003faa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fae:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fb6:	4950      	ldr	r1, [pc, #320]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fb8:	4313      	orrs	r3, r2
 8003fba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fc2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003fc6:	d105      	bne.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003fc8:	4b4b      	ldr	r3, [pc, #300]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fca:	68db      	ldr	r3, [r3, #12]
 8003fcc:	4a4a      	ldr	r2, [pc, #296]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003fd2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d015      	beq.n	800400c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003fe0:	4b45      	ldr	r3, [pc, #276]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fe2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fe6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fee:	4942      	ldr	r1, [pc, #264]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ff0:	4313      	orrs	r3, r2
 8003ff2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ffa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ffe:	d105      	bne.n	800400c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004000:	4b3d      	ldr	r3, [pc, #244]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004002:	68db      	ldr	r3, [r3, #12]
 8004004:	4a3c      	ldr	r2, [pc, #240]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004006:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800400a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004014:	2b00      	cmp	r3, #0
 8004016:	d015      	beq.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004018:	4b37      	ldr	r3, [pc, #220]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800401a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800401e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004026:	4934      	ldr	r1, [pc, #208]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004028:	4313      	orrs	r3, r2
 800402a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004032:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004036:	d105      	bne.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004038:	4b2f      	ldr	r3, [pc, #188]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800403a:	68db      	ldr	r3, [r3, #12]
 800403c:	4a2e      	ldr	r2, [pc, #184]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800403e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004042:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800404c:	2b00      	cmp	r3, #0
 800404e:	d015      	beq.n	800407c <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004050:	4b29      	ldr	r3, [pc, #164]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004052:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004056:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800405e:	4926      	ldr	r1, [pc, #152]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004060:	4313      	orrs	r3, r2
 8004062:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800406a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800406e:	d105      	bne.n	800407c <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004070:	4b21      	ldr	r3, [pc, #132]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004072:	68db      	ldr	r3, [r3, #12]
 8004074:	4a20      	ldr	r2, [pc, #128]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004076:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800407a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004084:	2b00      	cmp	r3, #0
 8004086:	d015      	beq.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004088:	4b1b      	ldr	r3, [pc, #108]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800408a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800408e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004096:	4918      	ldr	r1, [pc, #96]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004098:	4313      	orrs	r3, r2
 800409a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040a2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80040a6:	d105      	bne.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80040a8:	4b13      	ldr	r3, [pc, #76]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040aa:	68db      	ldr	r3, [r3, #12]
 80040ac:	4a12      	ldr	r2, [pc, #72]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80040b2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d015      	beq.n	80040ec <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80040c0:	4b0d      	ldr	r3, [pc, #52]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040c6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040ce:	490a      	ldr	r1, [pc, #40]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040d0:	4313      	orrs	r3, r2
 80040d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040da:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80040de:	d105      	bne.n	80040ec <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80040e0:	4b05      	ldr	r3, [pc, #20]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040e2:	68db      	ldr	r3, [r3, #12]
 80040e4:	4a04      	ldr	r2, [pc, #16]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040ea:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80040ec:	7cbb      	ldrb	r3, [r7, #18]
}
 80040ee:	4618      	mov	r0, r3
 80040f0:	3718      	adds	r7, #24
 80040f2:	46bd      	mov	sp, r7
 80040f4:	bd80      	pop	{r7, pc}
 80040f6:	bf00      	nop
 80040f8:	40021000 	.word	0x40021000

080040fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b082      	sub	sp, #8
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d101      	bne.n	800410e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800410a:	2301      	movs	r3, #1
 800410c:	e049      	b.n	80041a2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004114:	b2db      	uxtb	r3, r3
 8004116:	2b00      	cmp	r3, #0
 8004118:	d106      	bne.n	8004128 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2200      	movs	r2, #0
 800411e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004122:	6878      	ldr	r0, [r7, #4]
 8004124:	f7fd f802 	bl	800112c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2202      	movs	r2, #2
 800412c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681a      	ldr	r2, [r3, #0]
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	3304      	adds	r3, #4
 8004138:	4619      	mov	r1, r3
 800413a:	4610      	mov	r0, r2
 800413c:	f000 fde2 	bl	8004d04 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2201      	movs	r2, #1
 8004144:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2201      	movs	r2, #1
 800414c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2201      	movs	r2, #1
 8004154:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2201      	movs	r2, #1
 800415c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2201      	movs	r2, #1
 8004164:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2201      	movs	r2, #1
 800416c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2201      	movs	r2, #1
 8004174:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2201      	movs	r2, #1
 800417c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2201      	movs	r2, #1
 8004184:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2201      	movs	r2, #1
 800418c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2201      	movs	r2, #1
 8004194:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2201      	movs	r2, #1
 800419c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80041a0:	2300      	movs	r3, #0
}
 80041a2:	4618      	mov	r0, r3
 80041a4:	3708      	adds	r7, #8
 80041a6:	46bd      	mov	sp, r7
 80041a8:	bd80      	pop	{r7, pc}
	...

080041ac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80041ac:	b480      	push	{r7}
 80041ae:	b085      	sub	sp, #20
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041ba:	b2db      	uxtb	r3, r3
 80041bc:	2b01      	cmp	r3, #1
 80041be:	d001      	beq.n	80041c4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80041c0:	2301      	movs	r3, #1
 80041c2:	e04a      	b.n	800425a <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2202      	movs	r2, #2
 80041c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	68da      	ldr	r2, [r3, #12]
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f042 0201 	orr.w	r2, r2, #1
 80041da:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4a21      	ldr	r2, [pc, #132]	; (8004268 <HAL_TIM_Base_Start_IT+0xbc>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d018      	beq.n	8004218 <HAL_TIM_Base_Start_IT+0x6c>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041ee:	d013      	beq.n	8004218 <HAL_TIM_Base_Start_IT+0x6c>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4a1d      	ldr	r2, [pc, #116]	; (800426c <HAL_TIM_Base_Start_IT+0xc0>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d00e      	beq.n	8004218 <HAL_TIM_Base_Start_IT+0x6c>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4a1c      	ldr	r2, [pc, #112]	; (8004270 <HAL_TIM_Base_Start_IT+0xc4>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d009      	beq.n	8004218 <HAL_TIM_Base_Start_IT+0x6c>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4a1a      	ldr	r2, [pc, #104]	; (8004274 <HAL_TIM_Base_Start_IT+0xc8>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d004      	beq.n	8004218 <HAL_TIM_Base_Start_IT+0x6c>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4a19      	ldr	r2, [pc, #100]	; (8004278 <HAL_TIM_Base_Start_IT+0xcc>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d115      	bne.n	8004244 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	689a      	ldr	r2, [r3, #8]
 800421e:	4b17      	ldr	r3, [pc, #92]	; (800427c <HAL_TIM_Base_Start_IT+0xd0>)
 8004220:	4013      	ands	r3, r2
 8004222:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	2b06      	cmp	r3, #6
 8004228:	d015      	beq.n	8004256 <HAL_TIM_Base_Start_IT+0xaa>
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004230:	d011      	beq.n	8004256 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	681a      	ldr	r2, [r3, #0]
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f042 0201 	orr.w	r2, r2, #1
 8004240:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004242:	e008      	b.n	8004256 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	681a      	ldr	r2, [r3, #0]
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f042 0201 	orr.w	r2, r2, #1
 8004252:	601a      	str	r2, [r3, #0]
 8004254:	e000      	b.n	8004258 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004256:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004258:	2300      	movs	r3, #0
}
 800425a:	4618      	mov	r0, r3
 800425c:	3714      	adds	r7, #20
 800425e:	46bd      	mov	sp, r7
 8004260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004264:	4770      	bx	lr
 8004266:	bf00      	nop
 8004268:	40012c00 	.word	0x40012c00
 800426c:	40000400 	.word	0x40000400
 8004270:	40000800 	.word	0x40000800
 8004274:	40013400 	.word	0x40013400
 8004278:	40014000 	.word	0x40014000
 800427c:	00010007 	.word	0x00010007

08004280 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b082      	sub	sp, #8
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d101      	bne.n	8004292 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800428e:	2301      	movs	r3, #1
 8004290:	e049      	b.n	8004326 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004298:	b2db      	uxtb	r3, r3
 800429a:	2b00      	cmp	r3, #0
 800429c:	d106      	bne.n	80042ac <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2200      	movs	r2, #0
 80042a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80042a6:	6878      	ldr	r0, [r7, #4]
 80042a8:	f7fc fefa 	bl	80010a0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2202      	movs	r2, #2
 80042b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681a      	ldr	r2, [r3, #0]
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	3304      	adds	r3, #4
 80042bc:	4619      	mov	r1, r3
 80042be:	4610      	mov	r0, r2
 80042c0:	f000 fd20 	bl	8004d04 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2201      	movs	r2, #1
 80042c8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2201      	movs	r2, #1
 80042d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2201      	movs	r2, #1
 80042d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2201      	movs	r2, #1
 80042e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2201      	movs	r2, #1
 80042e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2201      	movs	r2, #1
 80042f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2201      	movs	r2, #1
 80042f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2201      	movs	r2, #1
 8004300:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2201      	movs	r2, #1
 8004308:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2201      	movs	r2, #1
 8004310:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2201      	movs	r2, #1
 8004318:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2201      	movs	r2, #1
 8004320:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004324:	2300      	movs	r3, #0
}
 8004326:	4618      	mov	r0, r3
 8004328:	3708      	adds	r7, #8
 800432a:	46bd      	mov	sp, r7
 800432c:	bd80      	pop	{r7, pc}
	...

08004330 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b084      	sub	sp, #16
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
 8004338:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d109      	bne.n	8004354 <HAL_TIM_PWM_Start+0x24>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004346:	b2db      	uxtb	r3, r3
 8004348:	2b01      	cmp	r3, #1
 800434a:	bf14      	ite	ne
 800434c:	2301      	movne	r3, #1
 800434e:	2300      	moveq	r3, #0
 8004350:	b2db      	uxtb	r3, r3
 8004352:	e03c      	b.n	80043ce <HAL_TIM_PWM_Start+0x9e>
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	2b04      	cmp	r3, #4
 8004358:	d109      	bne.n	800436e <HAL_TIM_PWM_Start+0x3e>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004360:	b2db      	uxtb	r3, r3
 8004362:	2b01      	cmp	r3, #1
 8004364:	bf14      	ite	ne
 8004366:	2301      	movne	r3, #1
 8004368:	2300      	moveq	r3, #0
 800436a:	b2db      	uxtb	r3, r3
 800436c:	e02f      	b.n	80043ce <HAL_TIM_PWM_Start+0x9e>
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	2b08      	cmp	r3, #8
 8004372:	d109      	bne.n	8004388 <HAL_TIM_PWM_Start+0x58>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800437a:	b2db      	uxtb	r3, r3
 800437c:	2b01      	cmp	r3, #1
 800437e:	bf14      	ite	ne
 8004380:	2301      	movne	r3, #1
 8004382:	2300      	moveq	r3, #0
 8004384:	b2db      	uxtb	r3, r3
 8004386:	e022      	b.n	80043ce <HAL_TIM_PWM_Start+0x9e>
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	2b0c      	cmp	r3, #12
 800438c:	d109      	bne.n	80043a2 <HAL_TIM_PWM_Start+0x72>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004394:	b2db      	uxtb	r3, r3
 8004396:	2b01      	cmp	r3, #1
 8004398:	bf14      	ite	ne
 800439a:	2301      	movne	r3, #1
 800439c:	2300      	moveq	r3, #0
 800439e:	b2db      	uxtb	r3, r3
 80043a0:	e015      	b.n	80043ce <HAL_TIM_PWM_Start+0x9e>
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	2b10      	cmp	r3, #16
 80043a6:	d109      	bne.n	80043bc <HAL_TIM_PWM_Start+0x8c>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80043ae:	b2db      	uxtb	r3, r3
 80043b0:	2b01      	cmp	r3, #1
 80043b2:	bf14      	ite	ne
 80043b4:	2301      	movne	r3, #1
 80043b6:	2300      	moveq	r3, #0
 80043b8:	b2db      	uxtb	r3, r3
 80043ba:	e008      	b.n	80043ce <HAL_TIM_PWM_Start+0x9e>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80043c2:	b2db      	uxtb	r3, r3
 80043c4:	2b01      	cmp	r3, #1
 80043c6:	bf14      	ite	ne
 80043c8:	2301      	movne	r3, #1
 80043ca:	2300      	moveq	r3, #0
 80043cc:	b2db      	uxtb	r3, r3
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d001      	beq.n	80043d6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80043d2:	2301      	movs	r3, #1
 80043d4:	e097      	b.n	8004506 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d104      	bne.n	80043e6 <HAL_TIM_PWM_Start+0xb6>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2202      	movs	r2, #2
 80043e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80043e4:	e023      	b.n	800442e <HAL_TIM_PWM_Start+0xfe>
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	2b04      	cmp	r3, #4
 80043ea:	d104      	bne.n	80043f6 <HAL_TIM_PWM_Start+0xc6>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2202      	movs	r2, #2
 80043f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80043f4:	e01b      	b.n	800442e <HAL_TIM_PWM_Start+0xfe>
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	2b08      	cmp	r3, #8
 80043fa:	d104      	bne.n	8004406 <HAL_TIM_PWM_Start+0xd6>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2202      	movs	r2, #2
 8004400:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004404:	e013      	b.n	800442e <HAL_TIM_PWM_Start+0xfe>
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	2b0c      	cmp	r3, #12
 800440a:	d104      	bne.n	8004416 <HAL_TIM_PWM_Start+0xe6>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2202      	movs	r2, #2
 8004410:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004414:	e00b      	b.n	800442e <HAL_TIM_PWM_Start+0xfe>
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	2b10      	cmp	r3, #16
 800441a:	d104      	bne.n	8004426 <HAL_TIM_PWM_Start+0xf6>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2202      	movs	r2, #2
 8004420:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004424:	e003      	b.n	800442e <HAL_TIM_PWM_Start+0xfe>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2202      	movs	r2, #2
 800442a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	2201      	movs	r2, #1
 8004434:	6839      	ldr	r1, [r7, #0]
 8004436:	4618      	mov	r0, r3
 8004438:	f000 ffea 	bl	8005410 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4a33      	ldr	r2, [pc, #204]	; (8004510 <HAL_TIM_PWM_Start+0x1e0>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d013      	beq.n	800446e <HAL_TIM_PWM_Start+0x13e>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4a32      	ldr	r2, [pc, #200]	; (8004514 <HAL_TIM_PWM_Start+0x1e4>)
 800444c:	4293      	cmp	r3, r2
 800444e:	d00e      	beq.n	800446e <HAL_TIM_PWM_Start+0x13e>
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	4a30      	ldr	r2, [pc, #192]	; (8004518 <HAL_TIM_PWM_Start+0x1e8>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d009      	beq.n	800446e <HAL_TIM_PWM_Start+0x13e>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4a2f      	ldr	r2, [pc, #188]	; (800451c <HAL_TIM_PWM_Start+0x1ec>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d004      	beq.n	800446e <HAL_TIM_PWM_Start+0x13e>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4a2d      	ldr	r2, [pc, #180]	; (8004520 <HAL_TIM_PWM_Start+0x1f0>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d101      	bne.n	8004472 <HAL_TIM_PWM_Start+0x142>
 800446e:	2301      	movs	r3, #1
 8004470:	e000      	b.n	8004474 <HAL_TIM_PWM_Start+0x144>
 8004472:	2300      	movs	r3, #0
 8004474:	2b00      	cmp	r3, #0
 8004476:	d007      	beq.n	8004488 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004486:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a20      	ldr	r2, [pc, #128]	; (8004510 <HAL_TIM_PWM_Start+0x1e0>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d018      	beq.n	80044c4 <HAL_TIM_PWM_Start+0x194>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800449a:	d013      	beq.n	80044c4 <HAL_TIM_PWM_Start+0x194>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4a20      	ldr	r2, [pc, #128]	; (8004524 <HAL_TIM_PWM_Start+0x1f4>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d00e      	beq.n	80044c4 <HAL_TIM_PWM_Start+0x194>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4a1f      	ldr	r2, [pc, #124]	; (8004528 <HAL_TIM_PWM_Start+0x1f8>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d009      	beq.n	80044c4 <HAL_TIM_PWM_Start+0x194>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4a17      	ldr	r2, [pc, #92]	; (8004514 <HAL_TIM_PWM_Start+0x1e4>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d004      	beq.n	80044c4 <HAL_TIM_PWM_Start+0x194>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4a16      	ldr	r2, [pc, #88]	; (8004518 <HAL_TIM_PWM_Start+0x1e8>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d115      	bne.n	80044f0 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	689a      	ldr	r2, [r3, #8]
 80044ca:	4b18      	ldr	r3, [pc, #96]	; (800452c <HAL_TIM_PWM_Start+0x1fc>)
 80044cc:	4013      	ands	r3, r2
 80044ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	2b06      	cmp	r3, #6
 80044d4:	d015      	beq.n	8004502 <HAL_TIM_PWM_Start+0x1d2>
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044dc:	d011      	beq.n	8004502 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	681a      	ldr	r2, [r3, #0]
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f042 0201 	orr.w	r2, r2, #1
 80044ec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044ee:	e008      	b.n	8004502 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	681a      	ldr	r2, [r3, #0]
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f042 0201 	orr.w	r2, r2, #1
 80044fe:	601a      	str	r2, [r3, #0]
 8004500:	e000      	b.n	8004504 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004502:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004504:	2300      	movs	r3, #0
}
 8004506:	4618      	mov	r0, r3
 8004508:	3710      	adds	r7, #16
 800450a:	46bd      	mov	sp, r7
 800450c:	bd80      	pop	{r7, pc}
 800450e:	bf00      	nop
 8004510:	40012c00 	.word	0x40012c00
 8004514:	40013400 	.word	0x40013400
 8004518:	40014000 	.word	0x40014000
 800451c:	40014400 	.word	0x40014400
 8004520:	40014800 	.word	0x40014800
 8004524:	40000400 	.word	0x40000400
 8004528:	40000800 	.word	0x40000800
 800452c:	00010007 	.word	0x00010007

08004530 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b086      	sub	sp, #24
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
 8004538:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d101      	bne.n	8004544 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004540:	2301      	movs	r3, #1
 8004542:	e097      	b.n	8004674 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800454a:	b2db      	uxtb	r3, r3
 800454c:	2b00      	cmp	r3, #0
 800454e:	d106      	bne.n	800455e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2200      	movs	r2, #0
 8004554:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004558:	6878      	ldr	r0, [r7, #4]
 800455a:	f7fc fcfb 	bl	8000f54 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2202      	movs	r2, #2
 8004562:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	689b      	ldr	r3, [r3, #8]
 800456c:	687a      	ldr	r2, [r7, #4]
 800456e:	6812      	ldr	r2, [r2, #0]
 8004570:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8004574:	f023 0307 	bic.w	r3, r3, #7
 8004578:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681a      	ldr	r2, [r3, #0]
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	3304      	adds	r3, #4
 8004582:	4619      	mov	r1, r3
 8004584:	4610      	mov	r0, r2
 8004586:	f000 fbbd 	bl	8004d04 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	689b      	ldr	r3, [r3, #8]
 8004590:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	699b      	ldr	r3, [r3, #24]
 8004598:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	6a1b      	ldr	r3, [r3, #32]
 80045a0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	697a      	ldr	r2, [r7, #20]
 80045a8:	4313      	orrs	r3, r2
 80045aa:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80045ac:	693b      	ldr	r3, [r7, #16]
 80045ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045b2:	f023 0303 	bic.w	r3, r3, #3
 80045b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	689a      	ldr	r2, [r3, #8]
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	699b      	ldr	r3, [r3, #24]
 80045c0:	021b      	lsls	r3, r3, #8
 80045c2:	4313      	orrs	r3, r2
 80045c4:	693a      	ldr	r2, [r7, #16]
 80045c6:	4313      	orrs	r3, r2
 80045c8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80045ca:	693b      	ldr	r3, [r7, #16]
 80045cc:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80045d0:	f023 030c 	bic.w	r3, r3, #12
 80045d4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80045d6:	693b      	ldr	r3, [r7, #16]
 80045d8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80045dc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80045e0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	68da      	ldr	r2, [r3, #12]
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	69db      	ldr	r3, [r3, #28]
 80045ea:	021b      	lsls	r3, r3, #8
 80045ec:	4313      	orrs	r3, r2
 80045ee:	693a      	ldr	r2, [r7, #16]
 80045f0:	4313      	orrs	r3, r2
 80045f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	691b      	ldr	r3, [r3, #16]
 80045f8:	011a      	lsls	r2, r3, #4
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	6a1b      	ldr	r3, [r3, #32]
 80045fe:	031b      	lsls	r3, r3, #12
 8004600:	4313      	orrs	r3, r2
 8004602:	693a      	ldr	r2, [r7, #16]
 8004604:	4313      	orrs	r3, r2
 8004606:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800460e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8004616:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	685a      	ldr	r2, [r3, #4]
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	695b      	ldr	r3, [r3, #20]
 8004620:	011b      	lsls	r3, r3, #4
 8004622:	4313      	orrs	r3, r2
 8004624:	68fa      	ldr	r2, [r7, #12]
 8004626:	4313      	orrs	r3, r2
 8004628:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	697a      	ldr	r2, [r7, #20]
 8004630:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	693a      	ldr	r2, [r7, #16]
 8004638:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	68fa      	ldr	r2, [r7, #12]
 8004640:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2201      	movs	r2, #1
 8004646:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2201      	movs	r2, #1
 800464e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2201      	movs	r2, #1
 8004656:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2201      	movs	r2, #1
 800465e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2201      	movs	r2, #1
 8004666:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2201      	movs	r2, #1
 800466e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004672:	2300      	movs	r3, #0
}
 8004674:	4618      	mov	r0, r3
 8004676:	3718      	adds	r7, #24
 8004678:	46bd      	mov	sp, r7
 800467a:	bd80      	pop	{r7, pc}

0800467c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b084      	sub	sp, #16
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
 8004684:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800468c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004694:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800469c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80046a4:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d110      	bne.n	80046ce <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80046ac:	7bfb      	ldrb	r3, [r7, #15]
 80046ae:	2b01      	cmp	r3, #1
 80046b0:	d102      	bne.n	80046b8 <HAL_TIM_Encoder_Start+0x3c>
     || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80046b2:	7b7b      	ldrb	r3, [r7, #13]
 80046b4:	2b01      	cmp	r3, #1
 80046b6:	d001      	beq.n	80046bc <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80046b8:	2301      	movs	r3, #1
 80046ba:	e068      	b.n	800478e <HAL_TIM_Encoder_Start+0x112>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2202      	movs	r2, #2
 80046c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2202      	movs	r2, #2
 80046c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80046cc:	e031      	b.n	8004732 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	2b04      	cmp	r3, #4
 80046d2:	d110      	bne.n	80046f6 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80046d4:	7bbb      	ldrb	r3, [r7, #14]
 80046d6:	2b01      	cmp	r3, #1
 80046d8:	d102      	bne.n	80046e0 <HAL_TIM_Encoder_Start+0x64>
     || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80046da:	7b3b      	ldrb	r3, [r7, #12]
 80046dc:	2b01      	cmp	r3, #1
 80046de:	d001      	beq.n	80046e4 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80046e0:	2301      	movs	r3, #1
 80046e2:	e054      	b.n	800478e <HAL_TIM_Encoder_Start+0x112>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2202      	movs	r2, #2
 80046e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2202      	movs	r2, #2
 80046f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80046f4:	e01d      	b.n	8004732 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80046f6:	7bfb      	ldrb	r3, [r7, #15]
 80046f8:	2b01      	cmp	r3, #1
 80046fa:	d108      	bne.n	800470e <HAL_TIM_Encoder_Start+0x92>
     || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80046fc:	7bbb      	ldrb	r3, [r7, #14]
 80046fe:	2b01      	cmp	r3, #1
 8004700:	d105      	bne.n	800470e <HAL_TIM_Encoder_Start+0x92>
     || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004702:	7b7b      	ldrb	r3, [r7, #13]
 8004704:	2b01      	cmp	r3, #1
 8004706:	d102      	bne.n	800470e <HAL_TIM_Encoder_Start+0x92>
     || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004708:	7b3b      	ldrb	r3, [r7, #12]
 800470a:	2b01      	cmp	r3, #1
 800470c:	d001      	beq.n	8004712 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800470e:	2301      	movs	r3, #1
 8004710:	e03d      	b.n	800478e <HAL_TIM_Encoder_Start+0x112>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2202      	movs	r2, #2
 8004716:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2202      	movs	r2, #2
 800471e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2202      	movs	r2, #2
 8004726:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2202      	movs	r2, #2
 800472e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d002      	beq.n	800473e <HAL_TIM_Encoder_Start+0xc2>
 8004738:	2b04      	cmp	r3, #4
 800473a:	d008      	beq.n	800474e <HAL_TIM_Encoder_Start+0xd2>
 800473c:	e00f      	b.n	800475e <HAL_TIM_Encoder_Start+0xe2>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	2201      	movs	r2, #1
 8004744:	2100      	movs	r1, #0
 8004746:	4618      	mov	r0, r3
 8004748:	f000 fe62 	bl	8005410 <TIM_CCxChannelCmd>
      break;
 800474c:	e016      	b.n	800477c <HAL_TIM_Encoder_Start+0x100>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	2201      	movs	r2, #1
 8004754:	2104      	movs	r1, #4
 8004756:	4618      	mov	r0, r3
 8004758:	f000 fe5a 	bl	8005410 <TIM_CCxChannelCmd>
      break;
 800475c:	e00e      	b.n	800477c <HAL_TIM_Encoder_Start+0x100>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	2201      	movs	r2, #1
 8004764:	2100      	movs	r1, #0
 8004766:	4618      	mov	r0, r3
 8004768:	f000 fe52 	bl	8005410 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	2201      	movs	r2, #1
 8004772:	2104      	movs	r1, #4
 8004774:	4618      	mov	r0, r3
 8004776:	f000 fe4b 	bl	8005410 <TIM_CCxChannelCmd>
      break;
 800477a:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	681a      	ldr	r2, [r3, #0]
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f042 0201 	orr.w	r2, r2, #1
 800478a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800478c:	2300      	movs	r3, #0
}
 800478e:	4618      	mov	r0, r3
 8004790:	3710      	adds	r7, #16
 8004792:	46bd      	mov	sp, r7
 8004794:	bd80      	pop	{r7, pc}

08004796 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004796:	b580      	push	{r7, lr}
 8004798:	b082      	sub	sp, #8
 800479a:	af00      	add	r7, sp, #0
 800479c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	691b      	ldr	r3, [r3, #16]
 80047a4:	f003 0302 	and.w	r3, r3, #2
 80047a8:	2b02      	cmp	r3, #2
 80047aa:	d122      	bne.n	80047f2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	68db      	ldr	r3, [r3, #12]
 80047b2:	f003 0302 	and.w	r3, r3, #2
 80047b6:	2b02      	cmp	r3, #2
 80047b8:	d11b      	bne.n	80047f2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f06f 0202 	mvn.w	r2, #2
 80047c2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2201      	movs	r2, #1
 80047c8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	699b      	ldr	r3, [r3, #24]
 80047d0:	f003 0303 	and.w	r3, r3, #3
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d003      	beq.n	80047e0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80047d8:	6878      	ldr	r0, [r7, #4]
 80047da:	f000 fa75 	bl	8004cc8 <HAL_TIM_IC_CaptureCallback>
 80047de:	e005      	b.n	80047ec <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80047e0:	6878      	ldr	r0, [r7, #4]
 80047e2:	f000 fa67 	bl	8004cb4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047e6:	6878      	ldr	r0, [r7, #4]
 80047e8:	f000 fa78 	bl	8004cdc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2200      	movs	r2, #0
 80047f0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	691b      	ldr	r3, [r3, #16]
 80047f8:	f003 0304 	and.w	r3, r3, #4
 80047fc:	2b04      	cmp	r3, #4
 80047fe:	d122      	bne.n	8004846 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	68db      	ldr	r3, [r3, #12]
 8004806:	f003 0304 	and.w	r3, r3, #4
 800480a:	2b04      	cmp	r3, #4
 800480c:	d11b      	bne.n	8004846 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f06f 0204 	mvn.w	r2, #4
 8004816:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2202      	movs	r2, #2
 800481c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	699b      	ldr	r3, [r3, #24]
 8004824:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004828:	2b00      	cmp	r3, #0
 800482a:	d003      	beq.n	8004834 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800482c:	6878      	ldr	r0, [r7, #4]
 800482e:	f000 fa4b 	bl	8004cc8 <HAL_TIM_IC_CaptureCallback>
 8004832:	e005      	b.n	8004840 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004834:	6878      	ldr	r0, [r7, #4]
 8004836:	f000 fa3d 	bl	8004cb4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800483a:	6878      	ldr	r0, [r7, #4]
 800483c:	f000 fa4e 	bl	8004cdc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2200      	movs	r2, #0
 8004844:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	691b      	ldr	r3, [r3, #16]
 800484c:	f003 0308 	and.w	r3, r3, #8
 8004850:	2b08      	cmp	r3, #8
 8004852:	d122      	bne.n	800489a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	68db      	ldr	r3, [r3, #12]
 800485a:	f003 0308 	and.w	r3, r3, #8
 800485e:	2b08      	cmp	r3, #8
 8004860:	d11b      	bne.n	800489a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f06f 0208 	mvn.w	r2, #8
 800486a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2204      	movs	r2, #4
 8004870:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	69db      	ldr	r3, [r3, #28]
 8004878:	f003 0303 	and.w	r3, r3, #3
 800487c:	2b00      	cmp	r3, #0
 800487e:	d003      	beq.n	8004888 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004880:	6878      	ldr	r0, [r7, #4]
 8004882:	f000 fa21 	bl	8004cc8 <HAL_TIM_IC_CaptureCallback>
 8004886:	e005      	b.n	8004894 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004888:	6878      	ldr	r0, [r7, #4]
 800488a:	f000 fa13 	bl	8004cb4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800488e:	6878      	ldr	r0, [r7, #4]
 8004890:	f000 fa24 	bl	8004cdc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2200      	movs	r2, #0
 8004898:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	691b      	ldr	r3, [r3, #16]
 80048a0:	f003 0310 	and.w	r3, r3, #16
 80048a4:	2b10      	cmp	r3, #16
 80048a6:	d122      	bne.n	80048ee <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	68db      	ldr	r3, [r3, #12]
 80048ae:	f003 0310 	and.w	r3, r3, #16
 80048b2:	2b10      	cmp	r3, #16
 80048b4:	d11b      	bne.n	80048ee <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f06f 0210 	mvn.w	r2, #16
 80048be:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2208      	movs	r2, #8
 80048c4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	69db      	ldr	r3, [r3, #28]
 80048cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d003      	beq.n	80048dc <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048d4:	6878      	ldr	r0, [r7, #4]
 80048d6:	f000 f9f7 	bl	8004cc8 <HAL_TIM_IC_CaptureCallback>
 80048da:	e005      	b.n	80048e8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048dc:	6878      	ldr	r0, [r7, #4]
 80048de:	f000 f9e9 	bl	8004cb4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048e2:	6878      	ldr	r0, [r7, #4]
 80048e4:	f000 f9fa 	bl	8004cdc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2200      	movs	r2, #0
 80048ec:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	691b      	ldr	r3, [r3, #16]
 80048f4:	f003 0301 	and.w	r3, r3, #1
 80048f8:	2b01      	cmp	r3, #1
 80048fa:	d10e      	bne.n	800491a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	68db      	ldr	r3, [r3, #12]
 8004902:	f003 0301 	and.w	r3, r3, #1
 8004906:	2b01      	cmp	r3, #1
 8004908:	d107      	bne.n	800491a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f06f 0201 	mvn.w	r2, #1
 8004912:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004914:	6878      	ldr	r0, [r7, #4]
 8004916:	f7fc fa3f 	bl	8000d98 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	691b      	ldr	r3, [r3, #16]
 8004920:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004924:	2b80      	cmp	r3, #128	; 0x80
 8004926:	d10e      	bne.n	8004946 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	68db      	ldr	r3, [r3, #12]
 800492e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004932:	2b80      	cmp	r3, #128	; 0x80
 8004934:	d107      	bne.n	8004946 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800493e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004940:	6878      	ldr	r0, [r7, #4]
 8004942:	f000 feb7 	bl	80056b4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	691b      	ldr	r3, [r3, #16]
 800494c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004950:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004954:	d10e      	bne.n	8004974 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	68db      	ldr	r3, [r3, #12]
 800495c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004960:	2b80      	cmp	r3, #128	; 0x80
 8004962:	d107      	bne.n	8004974 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800496c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800496e:	6878      	ldr	r0, [r7, #4]
 8004970:	f000 feaa 	bl	80056c8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	691b      	ldr	r3, [r3, #16]
 800497a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800497e:	2b40      	cmp	r3, #64	; 0x40
 8004980:	d10e      	bne.n	80049a0 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	68db      	ldr	r3, [r3, #12]
 8004988:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800498c:	2b40      	cmp	r3, #64	; 0x40
 800498e:	d107      	bne.n	80049a0 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004998:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800499a:	6878      	ldr	r0, [r7, #4]
 800499c:	f000 f9a8 	bl	8004cf0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	691b      	ldr	r3, [r3, #16]
 80049a6:	f003 0320 	and.w	r3, r3, #32
 80049aa:	2b20      	cmp	r3, #32
 80049ac:	d10e      	bne.n	80049cc <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	68db      	ldr	r3, [r3, #12]
 80049b4:	f003 0320 	and.w	r3, r3, #32
 80049b8:	2b20      	cmp	r3, #32
 80049ba:	d107      	bne.n	80049cc <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f06f 0220 	mvn.w	r2, #32
 80049c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80049c6:	6878      	ldr	r0, [r7, #4]
 80049c8:	f000 fe6a 	bl	80056a0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	691b      	ldr	r3, [r3, #16]
 80049d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80049d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80049da:	d10f      	bne.n	80049fc <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	68db      	ldr	r3, [r3, #12]
 80049e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80049e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80049ea:	d107      	bne.n	80049fc <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 80049f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80049f6:	6878      	ldr	r0, [r7, #4]
 80049f8:	f000 fe70 	bl	80056dc <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	691b      	ldr	r3, [r3, #16]
 8004a02:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a06:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004a0a:	d10f      	bne.n	8004a2c <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	68db      	ldr	r3, [r3, #12]
 8004a12:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a16:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004a1a:	d107      	bne.n	8004a2c <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8004a24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8004a26:	6878      	ldr	r0, [r7, #4]
 8004a28:	f000 fe62 	bl	80056f0 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	691b      	ldr	r3, [r3, #16]
 8004a32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a36:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a3a:	d10f      	bne.n	8004a5c <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	68db      	ldr	r3, [r3, #12]
 8004a42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a46:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a4a:	d107      	bne.n	8004a5c <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8004a54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8004a56:	6878      	ldr	r0, [r7, #4]
 8004a58:	f000 fe54 	bl	8005704 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	691b      	ldr	r3, [r3, #16]
 8004a62:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004a66:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004a6a:	d10f      	bne.n	8004a8c <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	68db      	ldr	r3, [r3, #12]
 8004a72:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004a76:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004a7a:	d107      	bne.n	8004a8c <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8004a84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8004a86:	6878      	ldr	r0, [r7, #4]
 8004a88:	f000 fe46 	bl	8005718 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004a8c:	bf00      	nop
 8004a8e:	3708      	adds	r7, #8
 8004a90:	46bd      	mov	sp, r7
 8004a92:	bd80      	pop	{r7, pc}

08004a94 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b084      	sub	sp, #16
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	60f8      	str	r0, [r7, #12]
 8004a9c:	60b9      	str	r1, [r7, #8]
 8004a9e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004aa6:	2b01      	cmp	r3, #1
 8004aa8:	d101      	bne.n	8004aae <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004aaa:	2302      	movs	r3, #2
 8004aac:	e0fd      	b.n	8004caa <HAL_TIM_PWM_ConfigChannel+0x216>
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	2201      	movs	r2, #1
 8004ab2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2b14      	cmp	r3, #20
 8004aba:	f200 80f0 	bhi.w	8004c9e <HAL_TIM_PWM_ConfigChannel+0x20a>
 8004abe:	a201      	add	r2, pc, #4	; (adr r2, 8004ac4 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8004ac0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ac4:	08004b19 	.word	0x08004b19
 8004ac8:	08004c9f 	.word	0x08004c9f
 8004acc:	08004c9f 	.word	0x08004c9f
 8004ad0:	08004c9f 	.word	0x08004c9f
 8004ad4:	08004b59 	.word	0x08004b59
 8004ad8:	08004c9f 	.word	0x08004c9f
 8004adc:	08004c9f 	.word	0x08004c9f
 8004ae0:	08004c9f 	.word	0x08004c9f
 8004ae4:	08004b9b 	.word	0x08004b9b
 8004ae8:	08004c9f 	.word	0x08004c9f
 8004aec:	08004c9f 	.word	0x08004c9f
 8004af0:	08004c9f 	.word	0x08004c9f
 8004af4:	08004bdb 	.word	0x08004bdb
 8004af8:	08004c9f 	.word	0x08004c9f
 8004afc:	08004c9f 	.word	0x08004c9f
 8004b00:	08004c9f 	.word	0x08004c9f
 8004b04:	08004c1d 	.word	0x08004c1d
 8004b08:	08004c9f 	.word	0x08004c9f
 8004b0c:	08004c9f 	.word	0x08004c9f
 8004b10:	08004c9f 	.word	0x08004c9f
 8004b14:	08004c5d 	.word	0x08004c5d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	68b9      	ldr	r1, [r7, #8]
 8004b1e:	4618      	mov	r0, r3
 8004b20:	f000 f980 	bl	8004e24 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	699a      	ldr	r2, [r3, #24]
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f042 0208 	orr.w	r2, r2, #8
 8004b32:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	699a      	ldr	r2, [r3, #24]
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f022 0204 	bic.w	r2, r2, #4
 8004b42:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	6999      	ldr	r1, [r3, #24]
 8004b4a:	68bb      	ldr	r3, [r7, #8]
 8004b4c:	691a      	ldr	r2, [r3, #16]
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	430a      	orrs	r2, r1
 8004b54:	619a      	str	r2, [r3, #24]
      break;
 8004b56:	e0a3      	b.n	8004ca0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	68b9      	ldr	r1, [r7, #8]
 8004b5e:	4618      	mov	r0, r3
 8004b60:	f000 f9f0 	bl	8004f44 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	699a      	ldr	r2, [r3, #24]
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b72:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	699a      	ldr	r2, [r3, #24]
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b82:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	6999      	ldr	r1, [r3, #24]
 8004b8a:	68bb      	ldr	r3, [r7, #8]
 8004b8c:	691b      	ldr	r3, [r3, #16]
 8004b8e:	021a      	lsls	r2, r3, #8
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	430a      	orrs	r2, r1
 8004b96:	619a      	str	r2, [r3, #24]
      break;
 8004b98:	e082      	b.n	8004ca0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	68b9      	ldr	r1, [r7, #8]
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	f000 fa59 	bl	8005058 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	69da      	ldr	r2, [r3, #28]
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f042 0208 	orr.w	r2, r2, #8
 8004bb4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	69da      	ldr	r2, [r3, #28]
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f022 0204 	bic.w	r2, r2, #4
 8004bc4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	69d9      	ldr	r1, [r3, #28]
 8004bcc:	68bb      	ldr	r3, [r7, #8]
 8004bce:	691a      	ldr	r2, [r3, #16]
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	430a      	orrs	r2, r1
 8004bd6:	61da      	str	r2, [r3, #28]
      break;
 8004bd8:	e062      	b.n	8004ca0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	68b9      	ldr	r1, [r7, #8]
 8004be0:	4618      	mov	r0, r3
 8004be2:	f000 fac1 	bl	8005168 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	69da      	ldr	r2, [r3, #28]
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004bf4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	69da      	ldr	r2, [r3, #28]
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c04:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	69d9      	ldr	r1, [r3, #28]
 8004c0c:	68bb      	ldr	r3, [r7, #8]
 8004c0e:	691b      	ldr	r3, [r3, #16]
 8004c10:	021a      	lsls	r2, r3, #8
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	430a      	orrs	r2, r1
 8004c18:	61da      	str	r2, [r3, #28]
      break;
 8004c1a:	e041      	b.n	8004ca0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	68b9      	ldr	r1, [r7, #8]
 8004c22:	4618      	mov	r0, r3
 8004c24:	f000 fb2a 	bl	800527c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f042 0208 	orr.w	r2, r2, #8
 8004c36:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f022 0204 	bic.w	r2, r2, #4
 8004c46:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004c4e:	68bb      	ldr	r3, [r7, #8]
 8004c50:	691a      	ldr	r2, [r3, #16]
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	430a      	orrs	r2, r1
 8004c58:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8004c5a:	e021      	b.n	8004ca0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	68b9      	ldr	r1, [r7, #8]
 8004c62:	4618      	mov	r0, r3
 8004c64:	f000 fb6e 	bl	8005344 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c76:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c86:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004c8e:	68bb      	ldr	r3, [r7, #8]
 8004c90:	691b      	ldr	r3, [r3, #16]
 8004c92:	021a      	lsls	r2, r3, #8
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	430a      	orrs	r2, r1
 8004c9a:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8004c9c:	e000      	b.n	8004ca0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8004c9e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004ca8:	2300      	movs	r3, #0
}
 8004caa:	4618      	mov	r0, r3
 8004cac:	3710      	adds	r7, #16
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	bd80      	pop	{r7, pc}
 8004cb2:	bf00      	nop

08004cb4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004cb4:	b480      	push	{r7}
 8004cb6:	b083      	sub	sp, #12
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004cbc:	bf00      	nop
 8004cbe:	370c      	adds	r7, #12
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc6:	4770      	bx	lr

08004cc8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004cc8:	b480      	push	{r7}
 8004cca:	b083      	sub	sp, #12
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004cd0:	bf00      	nop
 8004cd2:	370c      	adds	r7, #12
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cda:	4770      	bx	lr

08004cdc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004cdc:	b480      	push	{r7}
 8004cde:	b083      	sub	sp, #12
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004ce4:	bf00      	nop
 8004ce6:	370c      	adds	r7, #12
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cee:	4770      	bx	lr

08004cf0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004cf0:	b480      	push	{r7}
 8004cf2:	b083      	sub	sp, #12
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004cf8:	bf00      	nop
 8004cfa:	370c      	adds	r7, #12
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d02:	4770      	bx	lr

08004d04 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004d04:	b480      	push	{r7}
 8004d06:	b085      	sub	sp, #20
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
 8004d0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	4a3c      	ldr	r2, [pc, #240]	; (8004e08 <TIM_Base_SetConfig+0x104>)
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d00f      	beq.n	8004d3c <TIM_Base_SetConfig+0x38>
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d22:	d00b      	beq.n	8004d3c <TIM_Base_SetConfig+0x38>
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	4a39      	ldr	r2, [pc, #228]	; (8004e0c <TIM_Base_SetConfig+0x108>)
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d007      	beq.n	8004d3c <TIM_Base_SetConfig+0x38>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	4a38      	ldr	r2, [pc, #224]	; (8004e10 <TIM_Base_SetConfig+0x10c>)
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d003      	beq.n	8004d3c <TIM_Base_SetConfig+0x38>
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	4a37      	ldr	r2, [pc, #220]	; (8004e14 <TIM_Base_SetConfig+0x110>)
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d108      	bne.n	8004d4e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d42:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	685b      	ldr	r3, [r3, #4]
 8004d48:	68fa      	ldr	r2, [r7, #12]
 8004d4a:	4313      	orrs	r3, r2
 8004d4c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	4a2d      	ldr	r2, [pc, #180]	; (8004e08 <TIM_Base_SetConfig+0x104>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d01b      	beq.n	8004d8e <TIM_Base_SetConfig+0x8a>
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d5c:	d017      	beq.n	8004d8e <TIM_Base_SetConfig+0x8a>
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	4a2a      	ldr	r2, [pc, #168]	; (8004e0c <TIM_Base_SetConfig+0x108>)
 8004d62:	4293      	cmp	r3, r2
 8004d64:	d013      	beq.n	8004d8e <TIM_Base_SetConfig+0x8a>
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	4a29      	ldr	r2, [pc, #164]	; (8004e10 <TIM_Base_SetConfig+0x10c>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d00f      	beq.n	8004d8e <TIM_Base_SetConfig+0x8a>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	4a28      	ldr	r2, [pc, #160]	; (8004e14 <TIM_Base_SetConfig+0x110>)
 8004d72:	4293      	cmp	r3, r2
 8004d74:	d00b      	beq.n	8004d8e <TIM_Base_SetConfig+0x8a>
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	4a27      	ldr	r2, [pc, #156]	; (8004e18 <TIM_Base_SetConfig+0x114>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d007      	beq.n	8004d8e <TIM_Base_SetConfig+0x8a>
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	4a26      	ldr	r2, [pc, #152]	; (8004e1c <TIM_Base_SetConfig+0x118>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d003      	beq.n	8004d8e <TIM_Base_SetConfig+0x8a>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	4a25      	ldr	r2, [pc, #148]	; (8004e20 <TIM_Base_SetConfig+0x11c>)
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d108      	bne.n	8004da0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d94:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	68db      	ldr	r3, [r3, #12]
 8004d9a:	68fa      	ldr	r2, [r7, #12]
 8004d9c:	4313      	orrs	r3, r2
 8004d9e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	695b      	ldr	r3, [r3, #20]
 8004daa:	4313      	orrs	r3, r2
 8004dac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	68fa      	ldr	r2, [r7, #12]
 8004db2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	689a      	ldr	r2, [r3, #8]
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	681a      	ldr	r2, [r3, #0]
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	4a10      	ldr	r2, [pc, #64]	; (8004e08 <TIM_Base_SetConfig+0x104>)
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d00f      	beq.n	8004dec <TIM_Base_SetConfig+0xe8>
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	4a11      	ldr	r2, [pc, #68]	; (8004e14 <TIM_Base_SetConfig+0x110>)
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	d00b      	beq.n	8004dec <TIM_Base_SetConfig+0xe8>
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	4a10      	ldr	r2, [pc, #64]	; (8004e18 <TIM_Base_SetConfig+0x114>)
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d007      	beq.n	8004dec <TIM_Base_SetConfig+0xe8>
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	4a0f      	ldr	r2, [pc, #60]	; (8004e1c <TIM_Base_SetConfig+0x118>)
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d003      	beq.n	8004dec <TIM_Base_SetConfig+0xe8>
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	4a0e      	ldr	r2, [pc, #56]	; (8004e20 <TIM_Base_SetConfig+0x11c>)
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d103      	bne.n	8004df4 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	691a      	ldr	r2, [r3, #16]
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2201      	movs	r2, #1
 8004df8:	615a      	str	r2, [r3, #20]
}
 8004dfa:	bf00      	nop
 8004dfc:	3714      	adds	r7, #20
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e04:	4770      	bx	lr
 8004e06:	bf00      	nop
 8004e08:	40012c00 	.word	0x40012c00
 8004e0c:	40000400 	.word	0x40000400
 8004e10:	40000800 	.word	0x40000800
 8004e14:	40013400 	.word	0x40013400
 8004e18:	40014000 	.word	0x40014000
 8004e1c:	40014400 	.word	0x40014400
 8004e20:	40014800 	.word	0x40014800

08004e24 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004e24:	b480      	push	{r7}
 8004e26:	b087      	sub	sp, #28
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
 8004e2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6a1b      	ldr	r3, [r3, #32]
 8004e32:	f023 0201 	bic.w	r2, r3, #1
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6a1b      	ldr	r3, [r3, #32]
 8004e3e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	685b      	ldr	r3, [r3, #4]
 8004e44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	699b      	ldr	r3, [r3, #24]
 8004e4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	f023 0303 	bic.w	r3, r3, #3
 8004e5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	68fa      	ldr	r2, [r7, #12]
 8004e66:	4313      	orrs	r3, r2
 8004e68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004e6a:	697b      	ldr	r3, [r7, #20]
 8004e6c:	f023 0302 	bic.w	r3, r3, #2
 8004e70:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	689b      	ldr	r3, [r3, #8]
 8004e76:	697a      	ldr	r2, [r7, #20]
 8004e78:	4313      	orrs	r3, r2
 8004e7a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	4a2c      	ldr	r2, [pc, #176]	; (8004f30 <TIM_OC1_SetConfig+0x10c>)
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d00f      	beq.n	8004ea4 <TIM_OC1_SetConfig+0x80>
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	4a2b      	ldr	r2, [pc, #172]	; (8004f34 <TIM_OC1_SetConfig+0x110>)
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d00b      	beq.n	8004ea4 <TIM_OC1_SetConfig+0x80>
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	4a2a      	ldr	r2, [pc, #168]	; (8004f38 <TIM_OC1_SetConfig+0x114>)
 8004e90:	4293      	cmp	r3, r2
 8004e92:	d007      	beq.n	8004ea4 <TIM_OC1_SetConfig+0x80>
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	4a29      	ldr	r2, [pc, #164]	; (8004f3c <TIM_OC1_SetConfig+0x118>)
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	d003      	beq.n	8004ea4 <TIM_OC1_SetConfig+0x80>
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	4a28      	ldr	r2, [pc, #160]	; (8004f40 <TIM_OC1_SetConfig+0x11c>)
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d10c      	bne.n	8004ebe <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004ea4:	697b      	ldr	r3, [r7, #20]
 8004ea6:	f023 0308 	bic.w	r3, r3, #8
 8004eaa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	68db      	ldr	r3, [r3, #12]
 8004eb0:	697a      	ldr	r2, [r7, #20]
 8004eb2:	4313      	orrs	r3, r2
 8004eb4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004eb6:	697b      	ldr	r3, [r7, #20]
 8004eb8:	f023 0304 	bic.w	r3, r3, #4
 8004ebc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	4a1b      	ldr	r2, [pc, #108]	; (8004f30 <TIM_OC1_SetConfig+0x10c>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d00f      	beq.n	8004ee6 <TIM_OC1_SetConfig+0xc2>
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	4a1a      	ldr	r2, [pc, #104]	; (8004f34 <TIM_OC1_SetConfig+0x110>)
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d00b      	beq.n	8004ee6 <TIM_OC1_SetConfig+0xc2>
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	4a19      	ldr	r2, [pc, #100]	; (8004f38 <TIM_OC1_SetConfig+0x114>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d007      	beq.n	8004ee6 <TIM_OC1_SetConfig+0xc2>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	4a18      	ldr	r2, [pc, #96]	; (8004f3c <TIM_OC1_SetConfig+0x118>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d003      	beq.n	8004ee6 <TIM_OC1_SetConfig+0xc2>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	4a17      	ldr	r2, [pc, #92]	; (8004f40 <TIM_OC1_SetConfig+0x11c>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d111      	bne.n	8004f0a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004ee6:	693b      	ldr	r3, [r7, #16]
 8004ee8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004eec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004eee:	693b      	ldr	r3, [r7, #16]
 8004ef0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004ef4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	695b      	ldr	r3, [r3, #20]
 8004efa:	693a      	ldr	r2, [r7, #16]
 8004efc:	4313      	orrs	r3, r2
 8004efe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	699b      	ldr	r3, [r3, #24]
 8004f04:	693a      	ldr	r2, [r7, #16]
 8004f06:	4313      	orrs	r3, r2
 8004f08:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	693a      	ldr	r2, [r7, #16]
 8004f0e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	68fa      	ldr	r2, [r7, #12]
 8004f14:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	685a      	ldr	r2, [r3, #4]
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	697a      	ldr	r2, [r7, #20]
 8004f22:	621a      	str	r2, [r3, #32]
}
 8004f24:	bf00      	nop
 8004f26:	371c      	adds	r7, #28
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2e:	4770      	bx	lr
 8004f30:	40012c00 	.word	0x40012c00
 8004f34:	40013400 	.word	0x40013400
 8004f38:	40014000 	.word	0x40014000
 8004f3c:	40014400 	.word	0x40014400
 8004f40:	40014800 	.word	0x40014800

08004f44 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004f44:	b480      	push	{r7}
 8004f46:	b087      	sub	sp, #28
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
 8004f4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6a1b      	ldr	r3, [r3, #32]
 8004f52:	f023 0210 	bic.w	r2, r3, #16
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6a1b      	ldr	r3, [r3, #32]
 8004f5e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	685b      	ldr	r3, [r3, #4]
 8004f64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	699b      	ldr	r3, [r3, #24]
 8004f6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004f72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f7e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	021b      	lsls	r3, r3, #8
 8004f86:	68fa      	ldr	r2, [r7, #12]
 8004f88:	4313      	orrs	r3, r2
 8004f8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004f8c:	697b      	ldr	r3, [r7, #20]
 8004f8e:	f023 0320 	bic.w	r3, r3, #32
 8004f92:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	689b      	ldr	r3, [r3, #8]
 8004f98:	011b      	lsls	r3, r3, #4
 8004f9a:	697a      	ldr	r2, [r7, #20]
 8004f9c:	4313      	orrs	r3, r2
 8004f9e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	4a28      	ldr	r2, [pc, #160]	; (8005044 <TIM_OC2_SetConfig+0x100>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d003      	beq.n	8004fb0 <TIM_OC2_SetConfig+0x6c>
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	4a27      	ldr	r2, [pc, #156]	; (8005048 <TIM_OC2_SetConfig+0x104>)
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d10d      	bne.n	8004fcc <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004fb0:	697b      	ldr	r3, [r7, #20]
 8004fb2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004fb6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	68db      	ldr	r3, [r3, #12]
 8004fbc:	011b      	lsls	r3, r3, #4
 8004fbe:	697a      	ldr	r2, [r7, #20]
 8004fc0:	4313      	orrs	r3, r2
 8004fc2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004fc4:	697b      	ldr	r3, [r7, #20]
 8004fc6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004fca:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	4a1d      	ldr	r2, [pc, #116]	; (8005044 <TIM_OC2_SetConfig+0x100>)
 8004fd0:	4293      	cmp	r3, r2
 8004fd2:	d00f      	beq.n	8004ff4 <TIM_OC2_SetConfig+0xb0>
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	4a1c      	ldr	r2, [pc, #112]	; (8005048 <TIM_OC2_SetConfig+0x104>)
 8004fd8:	4293      	cmp	r3, r2
 8004fda:	d00b      	beq.n	8004ff4 <TIM_OC2_SetConfig+0xb0>
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	4a1b      	ldr	r2, [pc, #108]	; (800504c <TIM_OC2_SetConfig+0x108>)
 8004fe0:	4293      	cmp	r3, r2
 8004fe2:	d007      	beq.n	8004ff4 <TIM_OC2_SetConfig+0xb0>
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	4a1a      	ldr	r2, [pc, #104]	; (8005050 <TIM_OC2_SetConfig+0x10c>)
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	d003      	beq.n	8004ff4 <TIM_OC2_SetConfig+0xb0>
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	4a19      	ldr	r2, [pc, #100]	; (8005054 <TIM_OC2_SetConfig+0x110>)
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d113      	bne.n	800501c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004ff4:	693b      	ldr	r3, [r7, #16]
 8004ff6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004ffa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004ffc:	693b      	ldr	r3, [r7, #16]
 8004ffe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005002:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	695b      	ldr	r3, [r3, #20]
 8005008:	009b      	lsls	r3, r3, #2
 800500a:	693a      	ldr	r2, [r7, #16]
 800500c:	4313      	orrs	r3, r2
 800500e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	699b      	ldr	r3, [r3, #24]
 8005014:	009b      	lsls	r3, r3, #2
 8005016:	693a      	ldr	r2, [r7, #16]
 8005018:	4313      	orrs	r3, r2
 800501a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	693a      	ldr	r2, [r7, #16]
 8005020:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	68fa      	ldr	r2, [r7, #12]
 8005026:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	685a      	ldr	r2, [r3, #4]
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	697a      	ldr	r2, [r7, #20]
 8005034:	621a      	str	r2, [r3, #32]
}
 8005036:	bf00      	nop
 8005038:	371c      	adds	r7, #28
 800503a:	46bd      	mov	sp, r7
 800503c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005040:	4770      	bx	lr
 8005042:	bf00      	nop
 8005044:	40012c00 	.word	0x40012c00
 8005048:	40013400 	.word	0x40013400
 800504c:	40014000 	.word	0x40014000
 8005050:	40014400 	.word	0x40014400
 8005054:	40014800 	.word	0x40014800

08005058 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005058:	b480      	push	{r7}
 800505a:	b087      	sub	sp, #28
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
 8005060:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6a1b      	ldr	r3, [r3, #32]
 8005066:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6a1b      	ldr	r3, [r3, #32]
 8005072:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	685b      	ldr	r3, [r3, #4]
 8005078:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	69db      	ldr	r3, [r3, #28]
 800507e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005086:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800508a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	f023 0303 	bic.w	r3, r3, #3
 8005092:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	68fa      	ldr	r2, [r7, #12]
 800509a:	4313      	orrs	r3, r2
 800509c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800509e:	697b      	ldr	r3, [r7, #20]
 80050a0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80050a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	689b      	ldr	r3, [r3, #8]
 80050aa:	021b      	lsls	r3, r3, #8
 80050ac:	697a      	ldr	r2, [r7, #20]
 80050ae:	4313      	orrs	r3, r2
 80050b0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	4a27      	ldr	r2, [pc, #156]	; (8005154 <TIM_OC3_SetConfig+0xfc>)
 80050b6:	4293      	cmp	r3, r2
 80050b8:	d003      	beq.n	80050c2 <TIM_OC3_SetConfig+0x6a>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	4a26      	ldr	r2, [pc, #152]	; (8005158 <TIM_OC3_SetConfig+0x100>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d10d      	bne.n	80050de <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80050c2:	697b      	ldr	r3, [r7, #20]
 80050c4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80050c8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	68db      	ldr	r3, [r3, #12]
 80050ce:	021b      	lsls	r3, r3, #8
 80050d0:	697a      	ldr	r2, [r7, #20]
 80050d2:	4313      	orrs	r3, r2
 80050d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80050d6:	697b      	ldr	r3, [r7, #20]
 80050d8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80050dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	4a1c      	ldr	r2, [pc, #112]	; (8005154 <TIM_OC3_SetConfig+0xfc>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d00f      	beq.n	8005106 <TIM_OC3_SetConfig+0xae>
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	4a1b      	ldr	r2, [pc, #108]	; (8005158 <TIM_OC3_SetConfig+0x100>)
 80050ea:	4293      	cmp	r3, r2
 80050ec:	d00b      	beq.n	8005106 <TIM_OC3_SetConfig+0xae>
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	4a1a      	ldr	r2, [pc, #104]	; (800515c <TIM_OC3_SetConfig+0x104>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d007      	beq.n	8005106 <TIM_OC3_SetConfig+0xae>
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	4a19      	ldr	r2, [pc, #100]	; (8005160 <TIM_OC3_SetConfig+0x108>)
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d003      	beq.n	8005106 <TIM_OC3_SetConfig+0xae>
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	4a18      	ldr	r2, [pc, #96]	; (8005164 <TIM_OC3_SetConfig+0x10c>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d113      	bne.n	800512e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005106:	693b      	ldr	r3, [r7, #16]
 8005108:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800510c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800510e:	693b      	ldr	r3, [r7, #16]
 8005110:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005114:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	695b      	ldr	r3, [r3, #20]
 800511a:	011b      	lsls	r3, r3, #4
 800511c:	693a      	ldr	r2, [r7, #16]
 800511e:	4313      	orrs	r3, r2
 8005120:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	699b      	ldr	r3, [r3, #24]
 8005126:	011b      	lsls	r3, r3, #4
 8005128:	693a      	ldr	r2, [r7, #16]
 800512a:	4313      	orrs	r3, r2
 800512c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	693a      	ldr	r2, [r7, #16]
 8005132:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	68fa      	ldr	r2, [r7, #12]
 8005138:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	685a      	ldr	r2, [r3, #4]
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	697a      	ldr	r2, [r7, #20]
 8005146:	621a      	str	r2, [r3, #32]
}
 8005148:	bf00      	nop
 800514a:	371c      	adds	r7, #28
 800514c:	46bd      	mov	sp, r7
 800514e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005152:	4770      	bx	lr
 8005154:	40012c00 	.word	0x40012c00
 8005158:	40013400 	.word	0x40013400
 800515c:	40014000 	.word	0x40014000
 8005160:	40014400 	.word	0x40014400
 8005164:	40014800 	.word	0x40014800

08005168 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005168:	b480      	push	{r7}
 800516a:	b087      	sub	sp, #28
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
 8005170:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6a1b      	ldr	r3, [r3, #32]
 8005176:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6a1b      	ldr	r3, [r3, #32]
 8005182:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	685b      	ldr	r3, [r3, #4]
 8005188:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	69db      	ldr	r3, [r3, #28]
 800518e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005196:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800519a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	021b      	lsls	r3, r3, #8
 80051aa:	68fa      	ldr	r2, [r7, #12]
 80051ac:	4313      	orrs	r3, r2
 80051ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80051b0:	697b      	ldr	r3, [r7, #20]
 80051b2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80051b6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	689b      	ldr	r3, [r3, #8]
 80051bc:	031b      	lsls	r3, r3, #12
 80051be:	697a      	ldr	r2, [r7, #20]
 80051c0:	4313      	orrs	r3, r2
 80051c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	4a28      	ldr	r2, [pc, #160]	; (8005268 <TIM_OC4_SetConfig+0x100>)
 80051c8:	4293      	cmp	r3, r2
 80051ca:	d003      	beq.n	80051d4 <TIM_OC4_SetConfig+0x6c>
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	4a27      	ldr	r2, [pc, #156]	; (800526c <TIM_OC4_SetConfig+0x104>)
 80051d0:	4293      	cmp	r3, r2
 80051d2:	d10d      	bne.n	80051f0 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80051d4:	697b      	ldr	r3, [r7, #20]
 80051d6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80051da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	68db      	ldr	r3, [r3, #12]
 80051e0:	031b      	lsls	r3, r3, #12
 80051e2:	697a      	ldr	r2, [r7, #20]
 80051e4:	4313      	orrs	r3, r2
 80051e6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80051e8:	697b      	ldr	r3, [r7, #20]
 80051ea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80051ee:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	4a1d      	ldr	r2, [pc, #116]	; (8005268 <TIM_OC4_SetConfig+0x100>)
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d00f      	beq.n	8005218 <TIM_OC4_SetConfig+0xb0>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	4a1c      	ldr	r2, [pc, #112]	; (800526c <TIM_OC4_SetConfig+0x104>)
 80051fc:	4293      	cmp	r3, r2
 80051fe:	d00b      	beq.n	8005218 <TIM_OC4_SetConfig+0xb0>
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	4a1b      	ldr	r2, [pc, #108]	; (8005270 <TIM_OC4_SetConfig+0x108>)
 8005204:	4293      	cmp	r3, r2
 8005206:	d007      	beq.n	8005218 <TIM_OC4_SetConfig+0xb0>
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	4a1a      	ldr	r2, [pc, #104]	; (8005274 <TIM_OC4_SetConfig+0x10c>)
 800520c:	4293      	cmp	r3, r2
 800520e:	d003      	beq.n	8005218 <TIM_OC4_SetConfig+0xb0>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	4a19      	ldr	r2, [pc, #100]	; (8005278 <TIM_OC4_SetConfig+0x110>)
 8005214:	4293      	cmp	r3, r2
 8005216:	d113      	bne.n	8005240 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005218:	693b      	ldr	r3, [r7, #16]
 800521a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800521e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8005220:	693b      	ldr	r3, [r7, #16]
 8005222:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005226:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	695b      	ldr	r3, [r3, #20]
 800522c:	019b      	lsls	r3, r3, #6
 800522e:	693a      	ldr	r2, [r7, #16]
 8005230:	4313      	orrs	r3, r2
 8005232:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	699b      	ldr	r3, [r3, #24]
 8005238:	019b      	lsls	r3, r3, #6
 800523a:	693a      	ldr	r2, [r7, #16]
 800523c:	4313      	orrs	r3, r2
 800523e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	693a      	ldr	r2, [r7, #16]
 8005244:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	68fa      	ldr	r2, [r7, #12]
 800524a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	685a      	ldr	r2, [r3, #4]
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	697a      	ldr	r2, [r7, #20]
 8005258:	621a      	str	r2, [r3, #32]
}
 800525a:	bf00      	nop
 800525c:	371c      	adds	r7, #28
 800525e:	46bd      	mov	sp, r7
 8005260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005264:	4770      	bx	lr
 8005266:	bf00      	nop
 8005268:	40012c00 	.word	0x40012c00
 800526c:	40013400 	.word	0x40013400
 8005270:	40014000 	.word	0x40014000
 8005274:	40014400 	.word	0x40014400
 8005278:	40014800 	.word	0x40014800

0800527c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800527c:	b480      	push	{r7}
 800527e:	b087      	sub	sp, #28
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
 8005284:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6a1b      	ldr	r3, [r3, #32]
 800528a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6a1b      	ldr	r3, [r3, #32]
 8005296:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	685b      	ldr	r3, [r3, #4]
 800529c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80052aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	68fa      	ldr	r2, [r7, #12]
 80052b6:	4313      	orrs	r3, r2
 80052b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80052ba:	693b      	ldr	r3, [r7, #16]
 80052bc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80052c0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	689b      	ldr	r3, [r3, #8]
 80052c6:	041b      	lsls	r3, r3, #16
 80052c8:	693a      	ldr	r2, [r7, #16]
 80052ca:	4313      	orrs	r3, r2
 80052cc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	4a17      	ldr	r2, [pc, #92]	; (8005330 <TIM_OC5_SetConfig+0xb4>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d00f      	beq.n	80052f6 <TIM_OC5_SetConfig+0x7a>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	4a16      	ldr	r2, [pc, #88]	; (8005334 <TIM_OC5_SetConfig+0xb8>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	d00b      	beq.n	80052f6 <TIM_OC5_SetConfig+0x7a>
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	4a15      	ldr	r2, [pc, #84]	; (8005338 <TIM_OC5_SetConfig+0xbc>)
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d007      	beq.n	80052f6 <TIM_OC5_SetConfig+0x7a>
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	4a14      	ldr	r2, [pc, #80]	; (800533c <TIM_OC5_SetConfig+0xc0>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d003      	beq.n	80052f6 <TIM_OC5_SetConfig+0x7a>
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	4a13      	ldr	r2, [pc, #76]	; (8005340 <TIM_OC5_SetConfig+0xc4>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d109      	bne.n	800530a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80052f6:	697b      	ldr	r3, [r7, #20]
 80052f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80052fc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	695b      	ldr	r3, [r3, #20]
 8005302:	021b      	lsls	r3, r3, #8
 8005304:	697a      	ldr	r2, [r7, #20]
 8005306:	4313      	orrs	r3, r2
 8005308:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	697a      	ldr	r2, [r7, #20]
 800530e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	68fa      	ldr	r2, [r7, #12]
 8005314:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	685a      	ldr	r2, [r3, #4]
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	693a      	ldr	r2, [r7, #16]
 8005322:	621a      	str	r2, [r3, #32]
}
 8005324:	bf00      	nop
 8005326:	371c      	adds	r7, #28
 8005328:	46bd      	mov	sp, r7
 800532a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532e:	4770      	bx	lr
 8005330:	40012c00 	.word	0x40012c00
 8005334:	40013400 	.word	0x40013400
 8005338:	40014000 	.word	0x40014000
 800533c:	40014400 	.word	0x40014400
 8005340:	40014800 	.word	0x40014800

08005344 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005344:	b480      	push	{r7}
 8005346:	b087      	sub	sp, #28
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
 800534c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6a1b      	ldr	r3, [r3, #32]
 8005352:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6a1b      	ldr	r3, [r3, #32]
 800535e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	685b      	ldr	r3, [r3, #4]
 8005364:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800536a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005372:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005376:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	021b      	lsls	r3, r3, #8
 800537e:	68fa      	ldr	r2, [r7, #12]
 8005380:	4313      	orrs	r3, r2
 8005382:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005384:	693b      	ldr	r3, [r7, #16]
 8005386:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800538a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	689b      	ldr	r3, [r3, #8]
 8005390:	051b      	lsls	r3, r3, #20
 8005392:	693a      	ldr	r2, [r7, #16]
 8005394:	4313      	orrs	r3, r2
 8005396:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	4a18      	ldr	r2, [pc, #96]	; (80053fc <TIM_OC6_SetConfig+0xb8>)
 800539c:	4293      	cmp	r3, r2
 800539e:	d00f      	beq.n	80053c0 <TIM_OC6_SetConfig+0x7c>
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	4a17      	ldr	r2, [pc, #92]	; (8005400 <TIM_OC6_SetConfig+0xbc>)
 80053a4:	4293      	cmp	r3, r2
 80053a6:	d00b      	beq.n	80053c0 <TIM_OC6_SetConfig+0x7c>
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	4a16      	ldr	r2, [pc, #88]	; (8005404 <TIM_OC6_SetConfig+0xc0>)
 80053ac:	4293      	cmp	r3, r2
 80053ae:	d007      	beq.n	80053c0 <TIM_OC6_SetConfig+0x7c>
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	4a15      	ldr	r2, [pc, #84]	; (8005408 <TIM_OC6_SetConfig+0xc4>)
 80053b4:	4293      	cmp	r3, r2
 80053b6:	d003      	beq.n	80053c0 <TIM_OC6_SetConfig+0x7c>
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	4a14      	ldr	r2, [pc, #80]	; (800540c <TIM_OC6_SetConfig+0xc8>)
 80053bc:	4293      	cmp	r3, r2
 80053be:	d109      	bne.n	80053d4 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80053c0:	697b      	ldr	r3, [r7, #20]
 80053c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80053c6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	695b      	ldr	r3, [r3, #20]
 80053cc:	029b      	lsls	r3, r3, #10
 80053ce:	697a      	ldr	r2, [r7, #20]
 80053d0:	4313      	orrs	r3, r2
 80053d2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	697a      	ldr	r2, [r7, #20]
 80053d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	68fa      	ldr	r2, [r7, #12]
 80053de:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	685a      	ldr	r2, [r3, #4]
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	693a      	ldr	r2, [r7, #16]
 80053ec:	621a      	str	r2, [r3, #32]
}
 80053ee:	bf00      	nop
 80053f0:	371c      	adds	r7, #28
 80053f2:	46bd      	mov	sp, r7
 80053f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f8:	4770      	bx	lr
 80053fa:	bf00      	nop
 80053fc:	40012c00 	.word	0x40012c00
 8005400:	40013400 	.word	0x40013400
 8005404:	40014000 	.word	0x40014000
 8005408:	40014400 	.word	0x40014400
 800540c:	40014800 	.word	0x40014800

08005410 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005410:	b480      	push	{r7}
 8005412:	b087      	sub	sp, #28
 8005414:	af00      	add	r7, sp, #0
 8005416:	60f8      	str	r0, [r7, #12]
 8005418:	60b9      	str	r1, [r7, #8]
 800541a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800541c:	68bb      	ldr	r3, [r7, #8]
 800541e:	f003 031f 	and.w	r3, r3, #31
 8005422:	2201      	movs	r2, #1
 8005424:	fa02 f303 	lsl.w	r3, r2, r3
 8005428:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	6a1a      	ldr	r2, [r3, #32]
 800542e:	697b      	ldr	r3, [r7, #20]
 8005430:	43db      	mvns	r3, r3
 8005432:	401a      	ands	r2, r3
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	6a1a      	ldr	r2, [r3, #32]
 800543c:	68bb      	ldr	r3, [r7, #8]
 800543e:	f003 031f 	and.w	r3, r3, #31
 8005442:	6879      	ldr	r1, [r7, #4]
 8005444:	fa01 f303 	lsl.w	r3, r1, r3
 8005448:	431a      	orrs	r2, r3
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	621a      	str	r2, [r3, #32]
}
 800544e:	bf00      	nop
 8005450:	371c      	adds	r7, #28
 8005452:	46bd      	mov	sp, r7
 8005454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005458:	4770      	bx	lr
	...

0800545c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800545c:	b480      	push	{r7}
 800545e:	b085      	sub	sp, #20
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
 8005464:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800546c:	2b01      	cmp	r3, #1
 800546e:	d101      	bne.n	8005474 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005470:	2302      	movs	r3, #2
 8005472:	e065      	b.n	8005540 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2201      	movs	r2, #1
 8005478:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2202      	movs	r2, #2
 8005480:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	685b      	ldr	r3, [r3, #4]
 800548a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	689b      	ldr	r3, [r3, #8]
 8005492:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	4a2c      	ldr	r2, [pc, #176]	; (800554c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800549a:	4293      	cmp	r3, r2
 800549c:	d004      	beq.n	80054a8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	4a2b      	ldr	r2, [pc, #172]	; (8005550 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d108      	bne.n	80054ba <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80054ae:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	685b      	ldr	r3, [r3, #4]
 80054b4:	68fa      	ldr	r2, [r7, #12]
 80054b6:	4313      	orrs	r3, r2
 80054b8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80054c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054c4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	68fa      	ldr	r2, [r7, #12]
 80054cc:	4313      	orrs	r3, r2
 80054ce:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	68fa      	ldr	r2, [r7, #12]
 80054d6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	4a1b      	ldr	r2, [pc, #108]	; (800554c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d018      	beq.n	8005514 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054ea:	d013      	beq.n	8005514 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	4a18      	ldr	r2, [pc, #96]	; (8005554 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d00e      	beq.n	8005514 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	4a17      	ldr	r2, [pc, #92]	; (8005558 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80054fc:	4293      	cmp	r3, r2
 80054fe:	d009      	beq.n	8005514 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	4a12      	ldr	r2, [pc, #72]	; (8005550 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005506:	4293      	cmp	r3, r2
 8005508:	d004      	beq.n	8005514 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	4a13      	ldr	r2, [pc, #76]	; (800555c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005510:	4293      	cmp	r3, r2
 8005512:	d10c      	bne.n	800552e <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005514:	68bb      	ldr	r3, [r7, #8]
 8005516:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800551a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	689b      	ldr	r3, [r3, #8]
 8005520:	68ba      	ldr	r2, [r7, #8]
 8005522:	4313      	orrs	r3, r2
 8005524:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	68ba      	ldr	r2, [r7, #8]
 800552c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	2201      	movs	r2, #1
 8005532:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	2200      	movs	r2, #0
 800553a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800553e:	2300      	movs	r3, #0
}
 8005540:	4618      	mov	r0, r3
 8005542:	3714      	adds	r7, #20
 8005544:	46bd      	mov	sp, r7
 8005546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554a:	4770      	bx	lr
 800554c:	40012c00 	.word	0x40012c00
 8005550:	40013400 	.word	0x40013400
 8005554:	40000400 	.word	0x40000400
 8005558:	40000800 	.word	0x40000800
 800555c:	40014000 	.word	0x40014000

08005560 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005560:	b480      	push	{r7}
 8005562:	b085      	sub	sp, #20
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
 8005568:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800556a:	2300      	movs	r3, #0
 800556c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005574:	2b01      	cmp	r3, #1
 8005576:	d101      	bne.n	800557c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005578:	2302      	movs	r3, #2
 800557a:	e087      	b.n	800568c <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2201      	movs	r2, #1
 8005580:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	68db      	ldr	r3, [r3, #12]
 800558e:	4313      	orrs	r3, r2
 8005590:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	689b      	ldr	r3, [r3, #8]
 800559c:	4313      	orrs	r3, r2
 800559e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	685b      	ldr	r3, [r3, #4]
 80055aa:	4313      	orrs	r3, r2
 80055ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	4313      	orrs	r3, r2
 80055ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	691b      	ldr	r3, [r3, #16]
 80055c6:	4313      	orrs	r3, r2
 80055c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	695b      	ldr	r3, [r3, #20]
 80055d4:	4313      	orrs	r3, r2
 80055d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055e2:	4313      	orrs	r3, r2
 80055e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	699b      	ldr	r3, [r3, #24]
 80055f0:	041b      	lsls	r3, r3, #16
 80055f2:	4313      	orrs	r3, r2
 80055f4:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	4a27      	ldr	r2, [pc, #156]	; (8005698 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80055fc:	4293      	cmp	r3, r2
 80055fe:	d004      	beq.n	800560a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	4a25      	ldr	r2, [pc, #148]	; (800569c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8005606:	4293      	cmp	r3, r2
 8005608:	d106      	bne.n	8005618 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	69db      	ldr	r3, [r3, #28]
 8005614:	4313      	orrs	r3, r2
 8005616:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	4a1e      	ldr	r2, [pc, #120]	; (8005698 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d004      	beq.n	800562c <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	4a1d      	ldr	r2, [pc, #116]	; (800569c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8005628:	4293      	cmp	r3, r2
 800562a:	d126      	bne.n	800567a <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005636:	051b      	lsls	r3, r3, #20
 8005638:	4313      	orrs	r3, r2
 800563a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	6a1b      	ldr	r3, [r3, #32]
 8005646:	4313      	orrs	r3, r2
 8005648:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005654:	4313      	orrs	r3, r2
 8005656:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	4a0e      	ldr	r2, [pc, #56]	; (8005698 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800565e:	4293      	cmp	r3, r2
 8005660:	d004      	beq.n	800566c <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	4a0d      	ldr	r2, [pc, #52]	; (800569c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8005668:	4293      	cmp	r3, r2
 800566a:	d106      	bne.n	800567a <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005676:	4313      	orrs	r3, r2
 8005678:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	68fa      	ldr	r2, [r7, #12]
 8005680:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2200      	movs	r2, #0
 8005686:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800568a:	2300      	movs	r3, #0
}
 800568c:	4618      	mov	r0, r3
 800568e:	3714      	adds	r7, #20
 8005690:	46bd      	mov	sp, r7
 8005692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005696:	4770      	bx	lr
 8005698:	40012c00 	.word	0x40012c00
 800569c:	40013400 	.word	0x40013400

080056a0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80056a0:	b480      	push	{r7}
 80056a2:	b083      	sub	sp, #12
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80056a8:	bf00      	nop
 80056aa:	370c      	adds	r7, #12
 80056ac:	46bd      	mov	sp, r7
 80056ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b2:	4770      	bx	lr

080056b4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80056b4:	b480      	push	{r7}
 80056b6:	b083      	sub	sp, #12
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80056bc:	bf00      	nop
 80056be:	370c      	adds	r7, #12
 80056c0:	46bd      	mov	sp, r7
 80056c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c6:	4770      	bx	lr

080056c8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80056c8:	b480      	push	{r7}
 80056ca:	b083      	sub	sp, #12
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80056d0:	bf00      	nop
 80056d2:	370c      	adds	r7, #12
 80056d4:	46bd      	mov	sp, r7
 80056d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056da:	4770      	bx	lr

080056dc <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80056dc:	b480      	push	{r7}
 80056de:	b083      	sub	sp, #12
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80056e4:	bf00      	nop
 80056e6:	370c      	adds	r7, #12
 80056e8:	46bd      	mov	sp, r7
 80056ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ee:	4770      	bx	lr

080056f0 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80056f0:	b480      	push	{r7}
 80056f2:	b083      	sub	sp, #12
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80056f8:	bf00      	nop
 80056fa:	370c      	adds	r7, #12
 80056fc:	46bd      	mov	sp, r7
 80056fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005702:	4770      	bx	lr

08005704 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8005704:	b480      	push	{r7}
 8005706:	b083      	sub	sp, #12
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800570c:	bf00      	nop
 800570e:	370c      	adds	r7, #12
 8005710:	46bd      	mov	sp, r7
 8005712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005716:	4770      	bx	lr

08005718 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8005718:	b480      	push	{r7}
 800571a:	b083      	sub	sp, #12
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8005720:	bf00      	nop
 8005722:	370c      	adds	r7, #12
 8005724:	46bd      	mov	sp, r7
 8005726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572a:	4770      	bx	lr

0800572c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800572c:	b480      	push	{r7}
 800572e:	b085      	sub	sp, #20
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2200      	movs	r2, #0
 8005738:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800573c:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8005740:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	b29a      	uxth	r2, r3
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800574c:	2300      	movs	r3, #0
}
 800574e:	4618      	mov	r0, r3
 8005750:	3714      	adds	r7, #20
 8005752:	46bd      	mov	sp, r7
 8005754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005758:	4770      	bx	lr

0800575a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800575a:	b480      	push	{r7}
 800575c:	b085      	sub	sp, #20
 800575e:	af00      	add	r7, sp, #0
 8005760:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005762:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8005766:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800576e:	b29a      	uxth	r2, r3
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	b29b      	uxth	r3, r3
 8005774:	43db      	mvns	r3, r3
 8005776:	b29b      	uxth	r3, r3
 8005778:	4013      	ands	r3, r2
 800577a:	b29a      	uxth	r2, r3
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005782:	2300      	movs	r3, #0
}
 8005784:	4618      	mov	r0, r3
 8005786:	3714      	adds	r7, #20
 8005788:	46bd      	mov	sp, r7
 800578a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578e:	4770      	bx	lr

08005790 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005790:	b084      	sub	sp, #16
 8005792:	b480      	push	{r7}
 8005794:	b083      	sub	sp, #12
 8005796:	af00      	add	r7, sp, #0
 8005798:	6078      	str	r0, [r7, #4]
 800579a:	f107 0014 	add.w	r0, r7, #20
 800579e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2201      	movs	r2, #1
 80057a6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0U;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2200      	movs	r2, #0
 80057ae:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0U;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2200      	movs	r2, #0
 80057b6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	2200      	movs	r2, #0
 80057be:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80057c2:	2300      	movs	r3, #0
}
 80057c4:	4618      	mov	r0, r3
 80057c6:	370c      	adds	r7, #12
 80057c8:	46bd      	mov	sp, r7
 80057ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ce:	b004      	add	sp, #16
 80057d0:	4770      	bx	lr
	...

080057d4 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80057d4:	b480      	push	{r7}
 80057d6:	b09b      	sub	sp, #108	; 0x6c
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]
 80057dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80057de:	2300      	movs	r3, #0
 80057e0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80057e4:	687a      	ldr	r2, [r7, #4]
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	781b      	ldrb	r3, [r3, #0]
 80057ea:	009b      	lsls	r3, r3, #2
 80057ec:	4413      	add	r3, r2
 80057ee:	881b      	ldrh	r3, [r3, #0]
 80057f0:	b29b      	uxth	r3, r3
 80057f2:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80057f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057fa:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 80057fe:	683b      	ldr	r3, [r7, #0]
 8005800:	78db      	ldrb	r3, [r3, #3]
 8005802:	2b03      	cmp	r3, #3
 8005804:	d81f      	bhi.n	8005846 <USB_ActivateEndpoint+0x72>
 8005806:	a201      	add	r2, pc, #4	; (adr r2, 800580c <USB_ActivateEndpoint+0x38>)
 8005808:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800580c:	0800581d 	.word	0x0800581d
 8005810:	08005839 	.word	0x08005839
 8005814:	0800584f 	.word	0x0800584f
 8005818:	0800582b 	.word	0x0800582b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800581c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005820:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005824:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8005828:	e012      	b.n	8005850 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800582a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800582e:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8005832:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8005836:	e00b      	b.n	8005850 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8005838:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800583c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005840:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8005844:	e004      	b.n	8005850 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8005846:	2301      	movs	r3, #1
 8005848:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 800584c:	e000      	b.n	8005850 <USB_ActivateEndpoint+0x7c>
      break;
 800584e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8005850:	687a      	ldr	r2, [r7, #4]
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	781b      	ldrb	r3, [r3, #0]
 8005856:	009b      	lsls	r3, r3, #2
 8005858:	441a      	add	r2, r3
 800585a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800585e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005862:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005866:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800586a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800586e:	b29b      	uxth	r3, r3
 8005870:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8005872:	687a      	ldr	r2, [r7, #4]
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	781b      	ldrb	r3, [r3, #0]
 8005878:	009b      	lsls	r3, r3, #2
 800587a:	4413      	add	r3, r2
 800587c:	881b      	ldrh	r3, [r3, #0]
 800587e:	b29b      	uxth	r3, r3
 8005880:	b21b      	sxth	r3, r3
 8005882:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005886:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800588a:	b21a      	sxth	r2, r3
 800588c:	683b      	ldr	r3, [r7, #0]
 800588e:	781b      	ldrb	r3, [r3, #0]
 8005890:	b21b      	sxth	r3, r3
 8005892:	4313      	orrs	r3, r2
 8005894:	b21b      	sxth	r3, r3
 8005896:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 800589a:	687a      	ldr	r2, [r7, #4]
 800589c:	683b      	ldr	r3, [r7, #0]
 800589e:	781b      	ldrb	r3, [r3, #0]
 80058a0:	009b      	lsls	r3, r3, #2
 80058a2:	441a      	add	r2, r3
 80058a4:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80058a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80058ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80058b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80058b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058b8:	b29b      	uxth	r3, r3
 80058ba:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	7b1b      	ldrb	r3, [r3, #12]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	f040 8149 	bne.w	8005b58 <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	785b      	ldrb	r3, [r3, #1]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	f000 8084 	beq.w	80059d8 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	617b      	str	r3, [r7, #20]
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80058da:	b29b      	uxth	r3, r3
 80058dc:	461a      	mov	r2, r3
 80058de:	697b      	ldr	r3, [r7, #20]
 80058e0:	4413      	add	r3, r2
 80058e2:	617b      	str	r3, [r7, #20]
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	781b      	ldrb	r3, [r3, #0]
 80058e8:	00da      	lsls	r2, r3, #3
 80058ea:	697b      	ldr	r3, [r7, #20]
 80058ec:	4413      	add	r3, r2
 80058ee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80058f2:	613b      	str	r3, [r7, #16]
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	88db      	ldrh	r3, [r3, #6]
 80058f8:	085b      	lsrs	r3, r3, #1
 80058fa:	b29b      	uxth	r3, r3
 80058fc:	005b      	lsls	r3, r3, #1
 80058fe:	b29a      	uxth	r2, r3
 8005900:	693b      	ldr	r3, [r7, #16]
 8005902:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005904:	687a      	ldr	r2, [r7, #4]
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	781b      	ldrb	r3, [r3, #0]
 800590a:	009b      	lsls	r3, r3, #2
 800590c:	4413      	add	r3, r2
 800590e:	881b      	ldrh	r3, [r3, #0]
 8005910:	81fb      	strh	r3, [r7, #14]
 8005912:	89fb      	ldrh	r3, [r7, #14]
 8005914:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005918:	2b00      	cmp	r3, #0
 800591a:	d01b      	beq.n	8005954 <USB_ActivateEndpoint+0x180>
 800591c:	687a      	ldr	r2, [r7, #4]
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	781b      	ldrb	r3, [r3, #0]
 8005922:	009b      	lsls	r3, r3, #2
 8005924:	4413      	add	r3, r2
 8005926:	881b      	ldrh	r3, [r3, #0]
 8005928:	b29b      	uxth	r3, r3
 800592a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800592e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005932:	81bb      	strh	r3, [r7, #12]
 8005934:	687a      	ldr	r2, [r7, #4]
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	781b      	ldrb	r3, [r3, #0]
 800593a:	009b      	lsls	r3, r3, #2
 800593c:	441a      	add	r2, r3
 800593e:	89bb      	ldrh	r3, [r7, #12]
 8005940:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005944:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005948:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800594c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005950:	b29b      	uxth	r3, r3
 8005952:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	78db      	ldrb	r3, [r3, #3]
 8005958:	2b01      	cmp	r3, #1
 800595a:	d020      	beq.n	800599e <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800595c:	687a      	ldr	r2, [r7, #4]
 800595e:	683b      	ldr	r3, [r7, #0]
 8005960:	781b      	ldrb	r3, [r3, #0]
 8005962:	009b      	lsls	r3, r3, #2
 8005964:	4413      	add	r3, r2
 8005966:	881b      	ldrh	r3, [r3, #0]
 8005968:	b29b      	uxth	r3, r3
 800596a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800596e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005972:	813b      	strh	r3, [r7, #8]
 8005974:	893b      	ldrh	r3, [r7, #8]
 8005976:	f083 0320 	eor.w	r3, r3, #32
 800597a:	813b      	strh	r3, [r7, #8]
 800597c:	687a      	ldr	r2, [r7, #4]
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	781b      	ldrb	r3, [r3, #0]
 8005982:	009b      	lsls	r3, r3, #2
 8005984:	441a      	add	r2, r3
 8005986:	893b      	ldrh	r3, [r7, #8]
 8005988:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800598c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005990:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005994:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005998:	b29b      	uxth	r3, r3
 800599a:	8013      	strh	r3, [r2, #0]
 800599c:	e27f      	b.n	8005e9e <USB_ActivateEndpoint+0x6ca>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800599e:	687a      	ldr	r2, [r7, #4]
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	781b      	ldrb	r3, [r3, #0]
 80059a4:	009b      	lsls	r3, r3, #2
 80059a6:	4413      	add	r3, r2
 80059a8:	881b      	ldrh	r3, [r3, #0]
 80059aa:	b29b      	uxth	r3, r3
 80059ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80059b4:	817b      	strh	r3, [r7, #10]
 80059b6:	687a      	ldr	r2, [r7, #4]
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	781b      	ldrb	r3, [r3, #0]
 80059bc:	009b      	lsls	r3, r3, #2
 80059be:	441a      	add	r2, r3
 80059c0:	897b      	ldrh	r3, [r7, #10]
 80059c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80059c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80059ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80059ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059d2:	b29b      	uxth	r3, r3
 80059d4:	8013      	strh	r3, [r2, #0]
 80059d6:	e262      	b.n	8005e9e <USB_ActivateEndpoint+0x6ca>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059e2:	b29b      	uxth	r3, r3
 80059e4:	461a      	mov	r2, r3
 80059e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059e8:	4413      	add	r3, r2
 80059ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80059ec:	683b      	ldr	r3, [r7, #0]
 80059ee:	781b      	ldrb	r3, [r3, #0]
 80059f0:	00da      	lsls	r2, r3, #3
 80059f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059f4:	4413      	add	r3, r2
 80059f6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80059fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	88db      	ldrh	r3, [r3, #6]
 8005a00:	085b      	lsrs	r3, r3, #1
 8005a02:	b29b      	uxth	r3, r3
 8005a04:	005b      	lsls	r3, r3, #1
 8005a06:	b29a      	uxth	r2, r3
 8005a08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a0a:	801a      	strh	r2, [r3, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	627b      	str	r3, [r7, #36]	; 0x24
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a16:	b29b      	uxth	r3, r3
 8005a18:	461a      	mov	r2, r3
 8005a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a1c:	4413      	add	r3, r2
 8005a1e:	627b      	str	r3, [r7, #36]	; 0x24
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	781b      	ldrb	r3, [r3, #0]
 8005a24:	00da      	lsls	r2, r3, #3
 8005a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a28:	4413      	add	r3, r2
 8005a2a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005a2e:	623b      	str	r3, [r7, #32]
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	691b      	ldr	r3, [r3, #16]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d112      	bne.n	8005a5e <USB_ActivateEndpoint+0x28a>
 8005a38:	6a3b      	ldr	r3, [r7, #32]
 8005a3a:	881b      	ldrh	r3, [r3, #0]
 8005a3c:	b29b      	uxth	r3, r3
 8005a3e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005a42:	b29a      	uxth	r2, r3
 8005a44:	6a3b      	ldr	r3, [r7, #32]
 8005a46:	801a      	strh	r2, [r3, #0]
 8005a48:	6a3b      	ldr	r3, [r7, #32]
 8005a4a:	881b      	ldrh	r3, [r3, #0]
 8005a4c:	b29b      	uxth	r3, r3
 8005a4e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a52:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a56:	b29a      	uxth	r2, r3
 8005a58:	6a3b      	ldr	r3, [r7, #32]
 8005a5a:	801a      	strh	r2, [r3, #0]
 8005a5c:	e02f      	b.n	8005abe <USB_ActivateEndpoint+0x2ea>
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	691b      	ldr	r3, [r3, #16]
 8005a62:	2b3e      	cmp	r3, #62	; 0x3e
 8005a64:	d813      	bhi.n	8005a8e <USB_ActivateEndpoint+0x2ba>
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	691b      	ldr	r3, [r3, #16]
 8005a6a:	085b      	lsrs	r3, r3, #1
 8005a6c:	663b      	str	r3, [r7, #96]	; 0x60
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	691b      	ldr	r3, [r3, #16]
 8005a72:	f003 0301 	and.w	r3, r3, #1
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d002      	beq.n	8005a80 <USB_ActivateEndpoint+0x2ac>
 8005a7a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005a7c:	3301      	adds	r3, #1
 8005a7e:	663b      	str	r3, [r7, #96]	; 0x60
 8005a80:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005a82:	b29b      	uxth	r3, r3
 8005a84:	029b      	lsls	r3, r3, #10
 8005a86:	b29a      	uxth	r2, r3
 8005a88:	6a3b      	ldr	r3, [r7, #32]
 8005a8a:	801a      	strh	r2, [r3, #0]
 8005a8c:	e017      	b.n	8005abe <USB_ActivateEndpoint+0x2ea>
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	691b      	ldr	r3, [r3, #16]
 8005a92:	095b      	lsrs	r3, r3, #5
 8005a94:	663b      	str	r3, [r7, #96]	; 0x60
 8005a96:	683b      	ldr	r3, [r7, #0]
 8005a98:	691b      	ldr	r3, [r3, #16]
 8005a9a:	f003 031f 	and.w	r3, r3, #31
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d102      	bne.n	8005aa8 <USB_ActivateEndpoint+0x2d4>
 8005aa2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005aa4:	3b01      	subs	r3, #1
 8005aa6:	663b      	str	r3, [r7, #96]	; 0x60
 8005aa8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005aaa:	b29b      	uxth	r3, r3
 8005aac:	029b      	lsls	r3, r3, #10
 8005aae:	b29b      	uxth	r3, r3
 8005ab0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ab4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ab8:	b29a      	uxth	r2, r3
 8005aba:	6a3b      	ldr	r3, [r7, #32]
 8005abc:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005abe:	687a      	ldr	r2, [r7, #4]
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	781b      	ldrb	r3, [r3, #0]
 8005ac4:	009b      	lsls	r3, r3, #2
 8005ac6:	4413      	add	r3, r2
 8005ac8:	881b      	ldrh	r3, [r3, #0]
 8005aca:	83fb      	strh	r3, [r7, #30]
 8005acc:	8bfb      	ldrh	r3, [r7, #30]
 8005ace:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d01b      	beq.n	8005b0e <USB_ActivateEndpoint+0x33a>
 8005ad6:	687a      	ldr	r2, [r7, #4]
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	781b      	ldrb	r3, [r3, #0]
 8005adc:	009b      	lsls	r3, r3, #2
 8005ade:	4413      	add	r3, r2
 8005ae0:	881b      	ldrh	r3, [r3, #0]
 8005ae2:	b29b      	uxth	r3, r3
 8005ae4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ae8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005aec:	83bb      	strh	r3, [r7, #28]
 8005aee:	687a      	ldr	r2, [r7, #4]
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	781b      	ldrb	r3, [r3, #0]
 8005af4:	009b      	lsls	r3, r3, #2
 8005af6:	441a      	add	r2, r3
 8005af8:	8bbb      	ldrh	r3, [r7, #28]
 8005afa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005afe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b02:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005b06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b0a:	b29b      	uxth	r3, r3
 8005b0c:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005b0e:	687a      	ldr	r2, [r7, #4]
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	781b      	ldrb	r3, [r3, #0]
 8005b14:	009b      	lsls	r3, r3, #2
 8005b16:	4413      	add	r3, r2
 8005b18:	881b      	ldrh	r3, [r3, #0]
 8005b1a:	b29b      	uxth	r3, r3
 8005b1c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005b20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b24:	837b      	strh	r3, [r7, #26]
 8005b26:	8b7b      	ldrh	r3, [r7, #26]
 8005b28:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005b2c:	837b      	strh	r3, [r7, #26]
 8005b2e:	8b7b      	ldrh	r3, [r7, #26]
 8005b30:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005b34:	837b      	strh	r3, [r7, #26]
 8005b36:	687a      	ldr	r2, [r7, #4]
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	781b      	ldrb	r3, [r3, #0]
 8005b3c:	009b      	lsls	r3, r3, #2
 8005b3e:	441a      	add	r2, r3
 8005b40:	8b7b      	ldrh	r3, [r7, #26]
 8005b42:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b46:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b52:	b29b      	uxth	r3, r3
 8005b54:	8013      	strh	r3, [r2, #0]
 8005b56:	e1a2      	b.n	8005e9e <USB_ActivateEndpoint+0x6ca>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8005b58:	687a      	ldr	r2, [r7, #4]
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	781b      	ldrb	r3, [r3, #0]
 8005b5e:	009b      	lsls	r3, r3, #2
 8005b60:	4413      	add	r3, r2
 8005b62:	881b      	ldrh	r3, [r3, #0]
 8005b64:	b29b      	uxth	r3, r3
 8005b66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b6e:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8005b72:	687a      	ldr	r2, [r7, #4]
 8005b74:	683b      	ldr	r3, [r7, #0]
 8005b76:	781b      	ldrb	r3, [r3, #0]
 8005b78:	009b      	lsls	r3, r3, #2
 8005b7a:	441a      	add	r2, r3
 8005b7c:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8005b80:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b84:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b88:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005b8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b90:	b29b      	uxth	r3, r3
 8005b92:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	65bb      	str	r3, [r7, #88]	; 0x58
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b9e:	b29b      	uxth	r3, r3
 8005ba0:	461a      	mov	r2, r3
 8005ba2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005ba4:	4413      	add	r3, r2
 8005ba6:	65bb      	str	r3, [r7, #88]	; 0x58
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	781b      	ldrb	r3, [r3, #0]
 8005bac:	00da      	lsls	r2, r3, #3
 8005bae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005bb0:	4413      	add	r3, r2
 8005bb2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005bb6:	657b      	str	r3, [r7, #84]	; 0x54
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	891b      	ldrh	r3, [r3, #8]
 8005bbc:	085b      	lsrs	r3, r3, #1
 8005bbe:	b29b      	uxth	r3, r3
 8005bc0:	005b      	lsls	r3, r3, #1
 8005bc2:	b29a      	uxth	r2, r3
 8005bc4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005bc6:	801a      	strh	r2, [r3, #0]
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	653b      	str	r3, [r7, #80]	; 0x50
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005bd2:	b29b      	uxth	r3, r3
 8005bd4:	461a      	mov	r2, r3
 8005bd6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005bd8:	4413      	add	r3, r2
 8005bda:	653b      	str	r3, [r7, #80]	; 0x50
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	781b      	ldrb	r3, [r3, #0]
 8005be0:	00da      	lsls	r2, r3, #3
 8005be2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005be4:	4413      	add	r3, r2
 8005be6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005bea:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005bec:	683b      	ldr	r3, [r7, #0]
 8005bee:	895b      	ldrh	r3, [r3, #10]
 8005bf0:	085b      	lsrs	r3, r3, #1
 8005bf2:	b29b      	uxth	r3, r3
 8005bf4:	005b      	lsls	r3, r3, #1
 8005bf6:	b29a      	uxth	r2, r3
 8005bf8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005bfa:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	785b      	ldrb	r3, [r3, #1]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	f040 8091 	bne.w	8005d28 <USB_ActivateEndpoint+0x554>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005c06:	687a      	ldr	r2, [r7, #4]
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	781b      	ldrb	r3, [r3, #0]
 8005c0c:	009b      	lsls	r3, r3, #2
 8005c0e:	4413      	add	r3, r2
 8005c10:	881b      	ldrh	r3, [r3, #0]
 8005c12:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8005c14:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005c16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d01b      	beq.n	8005c56 <USB_ActivateEndpoint+0x482>
 8005c1e:	687a      	ldr	r2, [r7, #4]
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	781b      	ldrb	r3, [r3, #0]
 8005c24:	009b      	lsls	r3, r3, #2
 8005c26:	4413      	add	r3, r2
 8005c28:	881b      	ldrh	r3, [r3, #0]
 8005c2a:	b29b      	uxth	r3, r3
 8005c2c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c34:	877b      	strh	r3, [r7, #58]	; 0x3a
 8005c36:	687a      	ldr	r2, [r7, #4]
 8005c38:	683b      	ldr	r3, [r7, #0]
 8005c3a:	781b      	ldrb	r3, [r3, #0]
 8005c3c:	009b      	lsls	r3, r3, #2
 8005c3e:	441a      	add	r2, r3
 8005c40:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8005c42:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c46:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c4a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005c4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c52:	b29b      	uxth	r3, r3
 8005c54:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005c56:	687a      	ldr	r2, [r7, #4]
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	781b      	ldrb	r3, [r3, #0]
 8005c5c:	009b      	lsls	r3, r3, #2
 8005c5e:	4413      	add	r3, r2
 8005c60:	881b      	ldrh	r3, [r3, #0]
 8005c62:	873b      	strh	r3, [r7, #56]	; 0x38
 8005c64:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005c66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d01b      	beq.n	8005ca6 <USB_ActivateEndpoint+0x4d2>
 8005c6e:	687a      	ldr	r2, [r7, #4]
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	781b      	ldrb	r3, [r3, #0]
 8005c74:	009b      	lsls	r3, r3, #2
 8005c76:	4413      	add	r3, r2
 8005c78:	881b      	ldrh	r3, [r3, #0]
 8005c7a:	b29b      	uxth	r3, r3
 8005c7c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c84:	86fb      	strh	r3, [r7, #54]	; 0x36
 8005c86:	687a      	ldr	r2, [r7, #4]
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	781b      	ldrb	r3, [r3, #0]
 8005c8c:	009b      	lsls	r3, r3, #2
 8005c8e:	441a      	add	r2, r3
 8005c90:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005c92:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c96:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c9e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005ca2:	b29b      	uxth	r3, r3
 8005ca4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005ca6:	687a      	ldr	r2, [r7, #4]
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	781b      	ldrb	r3, [r3, #0]
 8005cac:	009b      	lsls	r3, r3, #2
 8005cae:	4413      	add	r3, r2
 8005cb0:	881b      	ldrh	r3, [r3, #0]
 8005cb2:	b29b      	uxth	r3, r3
 8005cb4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005cb8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cbc:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005cbe:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005cc0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005cc4:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005cc6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005cc8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005ccc:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005cce:	687a      	ldr	r2, [r7, #4]
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	781b      	ldrb	r3, [r3, #0]
 8005cd4:	009b      	lsls	r3, r3, #2
 8005cd6:	441a      	add	r2, r3
 8005cd8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005cda:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005cde:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ce2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ce6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005cea:	b29b      	uxth	r3, r3
 8005cec:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005cee:	687a      	ldr	r2, [r7, #4]
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	781b      	ldrb	r3, [r3, #0]
 8005cf4:	009b      	lsls	r3, r3, #2
 8005cf6:	4413      	add	r3, r2
 8005cf8:	881b      	ldrh	r3, [r3, #0]
 8005cfa:	b29b      	uxth	r3, r3
 8005cfc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d00:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d04:	867b      	strh	r3, [r7, #50]	; 0x32
 8005d06:	687a      	ldr	r2, [r7, #4]
 8005d08:	683b      	ldr	r3, [r7, #0]
 8005d0a:	781b      	ldrb	r3, [r3, #0]
 8005d0c:	009b      	lsls	r3, r3, #2
 8005d0e:	441a      	add	r2, r3
 8005d10:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8005d12:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d16:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d22:	b29b      	uxth	r3, r3
 8005d24:	8013      	strh	r3, [r2, #0]
 8005d26:	e0ba      	b.n	8005e9e <USB_ActivateEndpoint+0x6ca>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005d28:	687a      	ldr	r2, [r7, #4]
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	781b      	ldrb	r3, [r3, #0]
 8005d2e:	009b      	lsls	r3, r3, #2
 8005d30:	4413      	add	r3, r2
 8005d32:	881b      	ldrh	r3, [r3, #0]
 8005d34:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8005d38:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005d3c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d01d      	beq.n	8005d80 <USB_ActivateEndpoint+0x5ac>
 8005d44:	687a      	ldr	r2, [r7, #4]
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	781b      	ldrb	r3, [r3, #0]
 8005d4a:	009b      	lsls	r3, r3, #2
 8005d4c:	4413      	add	r3, r2
 8005d4e:	881b      	ldrh	r3, [r3, #0]
 8005d50:	b29b      	uxth	r3, r3
 8005d52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d5a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8005d5e:	687a      	ldr	r2, [r7, #4]
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	781b      	ldrb	r3, [r3, #0]
 8005d64:	009b      	lsls	r3, r3, #2
 8005d66:	441a      	add	r2, r3
 8005d68:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005d6c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d70:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d74:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005d78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d7c:	b29b      	uxth	r3, r3
 8005d7e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005d80:	687a      	ldr	r2, [r7, #4]
 8005d82:	683b      	ldr	r3, [r7, #0]
 8005d84:	781b      	ldrb	r3, [r3, #0]
 8005d86:	009b      	lsls	r3, r3, #2
 8005d88:	4413      	add	r3, r2
 8005d8a:	881b      	ldrh	r3, [r3, #0]
 8005d8c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8005d90:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8005d94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d01d      	beq.n	8005dd8 <USB_ActivateEndpoint+0x604>
 8005d9c:	687a      	ldr	r2, [r7, #4]
 8005d9e:	683b      	ldr	r3, [r7, #0]
 8005da0:	781b      	ldrb	r3, [r3, #0]
 8005da2:	009b      	lsls	r3, r3, #2
 8005da4:	4413      	add	r3, r2
 8005da6:	881b      	ldrh	r3, [r3, #0]
 8005da8:	b29b      	uxth	r3, r3
 8005daa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005dae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005db2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005db6:	687a      	ldr	r2, [r7, #4]
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	781b      	ldrb	r3, [r3, #0]
 8005dbc:	009b      	lsls	r3, r3, #2
 8005dbe:	441a      	add	r2, r3
 8005dc0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005dc4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005dc8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005dcc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005dd0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005dd4:	b29b      	uxth	r3, r3
 8005dd6:	8013      	strh	r3, [r2, #0]


      if (ep->type != EP_TYPE_ISOC)
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	78db      	ldrb	r3, [r3, #3]
 8005ddc:	2b01      	cmp	r3, #1
 8005dde:	d024      	beq.n	8005e2a <USB_ActivateEndpoint+0x656>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005de0:	687a      	ldr	r2, [r7, #4]
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	781b      	ldrb	r3, [r3, #0]
 8005de6:	009b      	lsls	r3, r3, #2
 8005de8:	4413      	add	r3, r2
 8005dea:	881b      	ldrh	r3, [r3, #0]
 8005dec:	b29b      	uxth	r3, r3
 8005dee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005df2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005df6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8005dfa:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005dfe:	f083 0320 	eor.w	r3, r3, #32
 8005e02:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8005e06:	687a      	ldr	r2, [r7, #4]
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	781b      	ldrb	r3, [r3, #0]
 8005e0c:	009b      	lsls	r3, r3, #2
 8005e0e:	441a      	add	r2, r3
 8005e10:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005e14:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e18:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e1c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e24:	b29b      	uxth	r3, r3
 8005e26:	8013      	strh	r3, [r2, #0]
 8005e28:	e01d      	b.n	8005e66 <USB_ActivateEndpoint+0x692>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005e2a:	687a      	ldr	r2, [r7, #4]
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	781b      	ldrb	r3, [r3, #0]
 8005e30:	009b      	lsls	r3, r3, #2
 8005e32:	4413      	add	r3, r2
 8005e34:	881b      	ldrh	r3, [r3, #0]
 8005e36:	b29b      	uxth	r3, r3
 8005e38:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e3c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e40:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8005e44:	687a      	ldr	r2, [r7, #4]
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	781b      	ldrb	r3, [r3, #0]
 8005e4a:	009b      	lsls	r3, r3, #2
 8005e4c:	441a      	add	r2, r3
 8005e4e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8005e52:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e56:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e62:	b29b      	uxth	r3, r3
 8005e64:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005e66:	687a      	ldr	r2, [r7, #4]
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	781b      	ldrb	r3, [r3, #0]
 8005e6c:	009b      	lsls	r3, r3, #2
 8005e6e:	4413      	add	r3, r2
 8005e70:	881b      	ldrh	r3, [r3, #0]
 8005e72:	b29b      	uxth	r3, r3
 8005e74:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005e78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e7c:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8005e7e:	687a      	ldr	r2, [r7, #4]
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	781b      	ldrb	r3, [r3, #0]
 8005e84:	009b      	lsls	r3, r3, #2
 8005e86:	441a      	add	r2, r3
 8005e88:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005e8a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e8e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e9a:	b29b      	uxth	r3, r3
 8005e9c:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8005e9e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	376c      	adds	r7, #108	; 0x6c
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eac:	4770      	bx	lr
 8005eae:	bf00      	nop

08005eb0 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005eb0:	b480      	push	{r7}
 8005eb2:	b08d      	sub	sp, #52	; 0x34
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
 8005eb8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	7b1b      	ldrb	r3, [r3, #12]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	f040 808e 	bne.w	8005fe0 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	785b      	ldrb	r3, [r3, #1]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d044      	beq.n	8005f56 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005ecc:	687a      	ldr	r2, [r7, #4]
 8005ece:	683b      	ldr	r3, [r7, #0]
 8005ed0:	781b      	ldrb	r3, [r3, #0]
 8005ed2:	009b      	lsls	r3, r3, #2
 8005ed4:	4413      	add	r3, r2
 8005ed6:	881b      	ldrh	r3, [r3, #0]
 8005ed8:	81bb      	strh	r3, [r7, #12]
 8005eda:	89bb      	ldrh	r3, [r7, #12]
 8005edc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d01b      	beq.n	8005f1c <USB_DeactivateEndpoint+0x6c>
 8005ee4:	687a      	ldr	r2, [r7, #4]
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	781b      	ldrb	r3, [r3, #0]
 8005eea:	009b      	lsls	r3, r3, #2
 8005eec:	4413      	add	r3, r2
 8005eee:	881b      	ldrh	r3, [r3, #0]
 8005ef0:	b29b      	uxth	r3, r3
 8005ef2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ef6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005efa:	817b      	strh	r3, [r7, #10]
 8005efc:	687a      	ldr	r2, [r7, #4]
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	781b      	ldrb	r3, [r3, #0]
 8005f02:	009b      	lsls	r3, r3, #2
 8005f04:	441a      	add	r2, r3
 8005f06:	897b      	ldrh	r3, [r7, #10]
 8005f08:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f0c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f10:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f14:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005f18:	b29b      	uxth	r3, r3
 8005f1a:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005f1c:	687a      	ldr	r2, [r7, #4]
 8005f1e:	683b      	ldr	r3, [r7, #0]
 8005f20:	781b      	ldrb	r3, [r3, #0]
 8005f22:	009b      	lsls	r3, r3, #2
 8005f24:	4413      	add	r3, r2
 8005f26:	881b      	ldrh	r3, [r3, #0]
 8005f28:	b29b      	uxth	r3, r3
 8005f2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f2e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f32:	813b      	strh	r3, [r7, #8]
 8005f34:	687a      	ldr	r2, [r7, #4]
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	781b      	ldrb	r3, [r3, #0]
 8005f3a:	009b      	lsls	r3, r3, #2
 8005f3c:	441a      	add	r2, r3
 8005f3e:	893b      	ldrh	r3, [r7, #8]
 8005f40:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f44:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f48:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f50:	b29b      	uxth	r3, r3
 8005f52:	8013      	strh	r3, [r2, #0]
 8005f54:	e192      	b.n	800627c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005f56:	687a      	ldr	r2, [r7, #4]
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	781b      	ldrb	r3, [r3, #0]
 8005f5c:	009b      	lsls	r3, r3, #2
 8005f5e:	4413      	add	r3, r2
 8005f60:	881b      	ldrh	r3, [r3, #0]
 8005f62:	827b      	strh	r3, [r7, #18]
 8005f64:	8a7b      	ldrh	r3, [r7, #18]
 8005f66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d01b      	beq.n	8005fa6 <USB_DeactivateEndpoint+0xf6>
 8005f6e:	687a      	ldr	r2, [r7, #4]
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	781b      	ldrb	r3, [r3, #0]
 8005f74:	009b      	lsls	r3, r3, #2
 8005f76:	4413      	add	r3, r2
 8005f78:	881b      	ldrh	r3, [r3, #0]
 8005f7a:	b29b      	uxth	r3, r3
 8005f7c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f84:	823b      	strh	r3, [r7, #16]
 8005f86:	687a      	ldr	r2, [r7, #4]
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	781b      	ldrb	r3, [r3, #0]
 8005f8c:	009b      	lsls	r3, r3, #2
 8005f8e:	441a      	add	r2, r3
 8005f90:	8a3b      	ldrh	r3, [r7, #16]
 8005f92:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f96:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f9a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005f9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005fa2:	b29b      	uxth	r3, r3
 8005fa4:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005fa6:	687a      	ldr	r2, [r7, #4]
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	781b      	ldrb	r3, [r3, #0]
 8005fac:	009b      	lsls	r3, r3, #2
 8005fae:	4413      	add	r3, r2
 8005fb0:	881b      	ldrh	r3, [r3, #0]
 8005fb2:	b29b      	uxth	r3, r3
 8005fb4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005fb8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fbc:	81fb      	strh	r3, [r7, #14]
 8005fbe:	687a      	ldr	r2, [r7, #4]
 8005fc0:	683b      	ldr	r3, [r7, #0]
 8005fc2:	781b      	ldrb	r3, [r3, #0]
 8005fc4:	009b      	lsls	r3, r3, #2
 8005fc6:	441a      	add	r2, r3
 8005fc8:	89fb      	ldrh	r3, [r7, #14]
 8005fca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005fce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005fd2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005fd6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005fda:	b29b      	uxth	r3, r3
 8005fdc:	8013      	strh	r3, [r2, #0]
 8005fde:	e14d      	b.n	800627c <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8005fe0:	683b      	ldr	r3, [r7, #0]
 8005fe2:	785b      	ldrb	r3, [r3, #1]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	f040 80a5 	bne.w	8006134 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005fea:	687a      	ldr	r2, [r7, #4]
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	781b      	ldrb	r3, [r3, #0]
 8005ff0:	009b      	lsls	r3, r3, #2
 8005ff2:	4413      	add	r3, r2
 8005ff4:	881b      	ldrh	r3, [r3, #0]
 8005ff6:	843b      	strh	r3, [r7, #32]
 8005ff8:	8c3b      	ldrh	r3, [r7, #32]
 8005ffa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d01b      	beq.n	800603a <USB_DeactivateEndpoint+0x18a>
 8006002:	687a      	ldr	r2, [r7, #4]
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	781b      	ldrb	r3, [r3, #0]
 8006008:	009b      	lsls	r3, r3, #2
 800600a:	4413      	add	r3, r2
 800600c:	881b      	ldrh	r3, [r3, #0]
 800600e:	b29b      	uxth	r3, r3
 8006010:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006014:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006018:	83fb      	strh	r3, [r7, #30]
 800601a:	687a      	ldr	r2, [r7, #4]
 800601c:	683b      	ldr	r3, [r7, #0]
 800601e:	781b      	ldrb	r3, [r3, #0]
 8006020:	009b      	lsls	r3, r3, #2
 8006022:	441a      	add	r2, r3
 8006024:	8bfb      	ldrh	r3, [r7, #30]
 8006026:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800602a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800602e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006032:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006036:	b29b      	uxth	r3, r3
 8006038:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800603a:	687a      	ldr	r2, [r7, #4]
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	781b      	ldrb	r3, [r3, #0]
 8006040:	009b      	lsls	r3, r3, #2
 8006042:	4413      	add	r3, r2
 8006044:	881b      	ldrh	r3, [r3, #0]
 8006046:	83bb      	strh	r3, [r7, #28]
 8006048:	8bbb      	ldrh	r3, [r7, #28]
 800604a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800604e:	2b00      	cmp	r3, #0
 8006050:	d01b      	beq.n	800608a <USB_DeactivateEndpoint+0x1da>
 8006052:	687a      	ldr	r2, [r7, #4]
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	781b      	ldrb	r3, [r3, #0]
 8006058:	009b      	lsls	r3, r3, #2
 800605a:	4413      	add	r3, r2
 800605c:	881b      	ldrh	r3, [r3, #0]
 800605e:	b29b      	uxth	r3, r3
 8006060:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006064:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006068:	837b      	strh	r3, [r7, #26]
 800606a:	687a      	ldr	r2, [r7, #4]
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	781b      	ldrb	r3, [r3, #0]
 8006070:	009b      	lsls	r3, r3, #2
 8006072:	441a      	add	r2, r3
 8006074:	8b7b      	ldrh	r3, [r7, #26]
 8006076:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800607a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800607e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006082:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006086:	b29b      	uxth	r3, r3
 8006088:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800608a:	687a      	ldr	r2, [r7, #4]
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	781b      	ldrb	r3, [r3, #0]
 8006090:	009b      	lsls	r3, r3, #2
 8006092:	4413      	add	r3, r2
 8006094:	881b      	ldrh	r3, [r3, #0]
 8006096:	b29b      	uxth	r3, r3
 8006098:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800609c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060a0:	833b      	strh	r3, [r7, #24]
 80060a2:	687a      	ldr	r2, [r7, #4]
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	781b      	ldrb	r3, [r3, #0]
 80060a8:	009b      	lsls	r3, r3, #2
 80060aa:	441a      	add	r2, r3
 80060ac:	8b3b      	ldrh	r3, [r7, #24]
 80060ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80060ba:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80060be:	b29b      	uxth	r3, r3
 80060c0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80060c2:	687a      	ldr	r2, [r7, #4]
 80060c4:	683b      	ldr	r3, [r7, #0]
 80060c6:	781b      	ldrb	r3, [r3, #0]
 80060c8:	009b      	lsls	r3, r3, #2
 80060ca:	4413      	add	r3, r2
 80060cc:	881b      	ldrh	r3, [r3, #0]
 80060ce:	b29b      	uxth	r3, r3
 80060d0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80060d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060d8:	82fb      	strh	r3, [r7, #22]
 80060da:	687a      	ldr	r2, [r7, #4]
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	781b      	ldrb	r3, [r3, #0]
 80060e0:	009b      	lsls	r3, r3, #2
 80060e2:	441a      	add	r2, r3
 80060e4:	8afb      	ldrh	r3, [r7, #22]
 80060e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80060f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060f6:	b29b      	uxth	r3, r3
 80060f8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80060fa:	687a      	ldr	r2, [r7, #4]
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	781b      	ldrb	r3, [r3, #0]
 8006100:	009b      	lsls	r3, r3, #2
 8006102:	4413      	add	r3, r2
 8006104:	881b      	ldrh	r3, [r3, #0]
 8006106:	b29b      	uxth	r3, r3
 8006108:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800610c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006110:	82bb      	strh	r3, [r7, #20]
 8006112:	687a      	ldr	r2, [r7, #4]
 8006114:	683b      	ldr	r3, [r7, #0]
 8006116:	781b      	ldrb	r3, [r3, #0]
 8006118:	009b      	lsls	r3, r3, #2
 800611a:	441a      	add	r2, r3
 800611c:	8abb      	ldrh	r3, [r7, #20]
 800611e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006122:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006126:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800612a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800612e:	b29b      	uxth	r3, r3
 8006130:	8013      	strh	r3, [r2, #0]
 8006132:	e0a3      	b.n	800627c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006134:	687a      	ldr	r2, [r7, #4]
 8006136:	683b      	ldr	r3, [r7, #0]
 8006138:	781b      	ldrb	r3, [r3, #0]
 800613a:	009b      	lsls	r3, r3, #2
 800613c:	4413      	add	r3, r2
 800613e:	881b      	ldrh	r3, [r3, #0]
 8006140:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8006142:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006144:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006148:	2b00      	cmp	r3, #0
 800614a:	d01b      	beq.n	8006184 <USB_DeactivateEndpoint+0x2d4>
 800614c:	687a      	ldr	r2, [r7, #4]
 800614e:	683b      	ldr	r3, [r7, #0]
 8006150:	781b      	ldrb	r3, [r3, #0]
 8006152:	009b      	lsls	r3, r3, #2
 8006154:	4413      	add	r3, r2
 8006156:	881b      	ldrh	r3, [r3, #0]
 8006158:	b29b      	uxth	r3, r3
 800615a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800615e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006162:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8006164:	687a      	ldr	r2, [r7, #4]
 8006166:	683b      	ldr	r3, [r7, #0]
 8006168:	781b      	ldrb	r3, [r3, #0]
 800616a:	009b      	lsls	r3, r3, #2
 800616c:	441a      	add	r2, r3
 800616e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006170:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006174:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006178:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800617c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006180:	b29b      	uxth	r3, r3
 8006182:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006184:	687a      	ldr	r2, [r7, #4]
 8006186:	683b      	ldr	r3, [r7, #0]
 8006188:	781b      	ldrb	r3, [r3, #0]
 800618a:	009b      	lsls	r3, r3, #2
 800618c:	4413      	add	r3, r2
 800618e:	881b      	ldrh	r3, [r3, #0]
 8006190:	857b      	strh	r3, [r7, #42]	; 0x2a
 8006192:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006194:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006198:	2b00      	cmp	r3, #0
 800619a:	d01b      	beq.n	80061d4 <USB_DeactivateEndpoint+0x324>
 800619c:	687a      	ldr	r2, [r7, #4]
 800619e:	683b      	ldr	r3, [r7, #0]
 80061a0:	781b      	ldrb	r3, [r3, #0]
 80061a2:	009b      	lsls	r3, r3, #2
 80061a4:	4413      	add	r3, r2
 80061a6:	881b      	ldrh	r3, [r3, #0]
 80061a8:	b29b      	uxth	r3, r3
 80061aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80061ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061b2:	853b      	strh	r3, [r7, #40]	; 0x28
 80061b4:	687a      	ldr	r2, [r7, #4]
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	781b      	ldrb	r3, [r3, #0]
 80061ba:	009b      	lsls	r3, r3, #2
 80061bc:	441a      	add	r2, r3
 80061be:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80061c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80061c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80061c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80061cc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80061d0:	b29b      	uxth	r3, r3
 80061d2:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80061d4:	687a      	ldr	r2, [r7, #4]
 80061d6:	683b      	ldr	r3, [r7, #0]
 80061d8:	781b      	ldrb	r3, [r3, #0]
 80061da:	009b      	lsls	r3, r3, #2
 80061dc:	4413      	add	r3, r2
 80061de:	881b      	ldrh	r3, [r3, #0]
 80061e0:	b29b      	uxth	r3, r3
 80061e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80061e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061ea:	84fb      	strh	r3, [r7, #38]	; 0x26
 80061ec:	687a      	ldr	r2, [r7, #4]
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	781b      	ldrb	r3, [r3, #0]
 80061f2:	009b      	lsls	r3, r3, #2
 80061f4:	441a      	add	r2, r3
 80061f6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80061f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80061fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006200:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006204:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006208:	b29b      	uxth	r3, r3
 800620a:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800620c:	687a      	ldr	r2, [r7, #4]
 800620e:	683b      	ldr	r3, [r7, #0]
 8006210:	781b      	ldrb	r3, [r3, #0]
 8006212:	009b      	lsls	r3, r3, #2
 8006214:	4413      	add	r3, r2
 8006216:	881b      	ldrh	r3, [r3, #0]
 8006218:	b29b      	uxth	r3, r3
 800621a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800621e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006222:	84bb      	strh	r3, [r7, #36]	; 0x24
 8006224:	687a      	ldr	r2, [r7, #4]
 8006226:	683b      	ldr	r3, [r7, #0]
 8006228:	781b      	ldrb	r3, [r3, #0]
 800622a:	009b      	lsls	r3, r3, #2
 800622c:	441a      	add	r2, r3
 800622e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006230:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006234:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006238:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800623c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006240:	b29b      	uxth	r3, r3
 8006242:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006244:	687a      	ldr	r2, [r7, #4]
 8006246:	683b      	ldr	r3, [r7, #0]
 8006248:	781b      	ldrb	r3, [r3, #0]
 800624a:	009b      	lsls	r3, r3, #2
 800624c:	4413      	add	r3, r2
 800624e:	881b      	ldrh	r3, [r3, #0]
 8006250:	b29b      	uxth	r3, r3
 8006252:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006256:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800625a:	847b      	strh	r3, [r7, #34]	; 0x22
 800625c:	687a      	ldr	r2, [r7, #4]
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	781b      	ldrb	r3, [r3, #0]
 8006262:	009b      	lsls	r3, r3, #2
 8006264:	441a      	add	r2, r3
 8006266:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006268:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800626c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006270:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006274:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006278:	b29b      	uxth	r3, r3
 800627a:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800627c:	2300      	movs	r3, #0
}
 800627e:	4618      	mov	r0, r3
 8006280:	3734      	adds	r7, #52	; 0x34
 8006282:	46bd      	mov	sp, r7
 8006284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006288:	4770      	bx	lr

0800628a <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800628a:	b580      	push	{r7, lr}
 800628c:	b0c4      	sub	sp, #272	; 0x110
 800628e:	af00      	add	r7, sp, #0
 8006290:	1d3b      	adds	r3, r7, #4
 8006292:	6018      	str	r0, [r3, #0]
 8006294:	463b      	mov	r3, r7
 8006296:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint32_t len;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006298:	463b      	mov	r3, r7
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	785b      	ldrb	r3, [r3, #1]
 800629e:	2b01      	cmp	r3, #1
 80062a0:	f040 8566 	bne.w	8006d70 <USB_EPStartXfer+0xae6>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80062a4:	463b      	mov	r3, r7
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	699a      	ldr	r2, [r3, #24]
 80062aa:	463b      	mov	r3, r7
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	691b      	ldr	r3, [r3, #16]
 80062b0:	429a      	cmp	r2, r3
 80062b2:	d905      	bls.n	80062c0 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 80062b4:	463b      	mov	r3, r7
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	691b      	ldr	r3, [r3, #16]
 80062ba:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80062be:	e004      	b.n	80062ca <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 80062c0:	463b      	mov	r3, r7
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	699b      	ldr	r3, [r3, #24]
 80062c6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80062ca:	463b      	mov	r3, r7
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	7b1b      	ldrb	r3, [r3, #12]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d12c      	bne.n	800632e <USB_EPStartXfer+0xa4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80062d4:	463b      	mov	r3, r7
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	6959      	ldr	r1, [r3, #20]
 80062da:	463b      	mov	r3, r7
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	88da      	ldrh	r2, [r3, #6]
 80062e0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80062e4:	b29b      	uxth	r3, r3
 80062e6:	1d38      	adds	r0, r7, #4
 80062e8:	6800      	ldr	r0, [r0, #0]
 80062ea:	f001 fa43 	bl	8007774 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80062ee:	1d3b      	adds	r3, r7, #4
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	617b      	str	r3, [r7, #20]
 80062f4:	1d3b      	adds	r3, r7, #4
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80062fc:	b29b      	uxth	r3, r3
 80062fe:	461a      	mov	r2, r3
 8006300:	697b      	ldr	r3, [r7, #20]
 8006302:	4413      	add	r3, r2
 8006304:	617b      	str	r3, [r7, #20]
 8006306:	463b      	mov	r3, r7
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	781b      	ldrb	r3, [r3, #0]
 800630c:	00da      	lsls	r2, r3, #3
 800630e:	697b      	ldr	r3, [r7, #20]
 8006310:	4413      	add	r3, r2
 8006312:	f203 4202 	addw	r2, r3, #1026	; 0x402
 8006316:	f107 0310 	add.w	r3, r7, #16
 800631a:	601a      	str	r2, [r3, #0]
 800631c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006320:	b29a      	uxth	r2, r3
 8006322:	f107 0310 	add.w	r3, r7, #16
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	801a      	strh	r2, [r3, #0]
 800632a:	f000 bcec 	b.w	8006d06 <USB_EPStartXfer+0xa7c>
    }
    else
    {
      /*double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800632e:	463b      	mov	r3, r7
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	78db      	ldrb	r3, [r3, #3]
 8006334:	2b02      	cmp	r3, #2
 8006336:	f040 8356 	bne.w	80069e6 <USB_EPStartXfer+0x75c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800633a:	463b      	mov	r3, r7
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	6a1a      	ldr	r2, [r3, #32]
 8006340:	463b      	mov	r3, r7
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	691b      	ldr	r3, [r3, #16]
 8006346:	429a      	cmp	r2, r3
 8006348:	f240 82fa 	bls.w	8006940 <USB_EPStartXfer+0x6b6>
        {
          /*enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 800634c:	1d3b      	adds	r3, r7, #4
 800634e:	681a      	ldr	r2, [r3, #0]
 8006350:	463b      	mov	r3, r7
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	781b      	ldrb	r3, [r3, #0]
 8006356:	009b      	lsls	r3, r3, #2
 8006358:	4413      	add	r3, r2
 800635a:	881b      	ldrh	r3, [r3, #0]
 800635c:	b29b      	uxth	r3, r3
 800635e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006362:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006366:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 800636a:	1d3b      	adds	r3, r7, #4
 800636c:	681a      	ldr	r2, [r3, #0]
 800636e:	463b      	mov	r3, r7
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	781b      	ldrb	r3, [r3, #0]
 8006374:	009b      	lsls	r3, r3, #2
 8006376:	441a      	add	r2, r3
 8006378:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 800637c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006380:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006384:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006388:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800638c:	b29b      	uxth	r3, r3
 800638e:	8013      	strh	r3, [r2, #0]
          len = ep->maxpacket;
 8006390:	463b      	mov	r3, r7
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	691b      	ldr	r3, [r3, #16]
 8006396:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          /*each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800639a:	463b      	mov	r3, r7
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	6a1a      	ldr	r2, [r3, #32]
 80063a0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80063a4:	1ad2      	subs	r2, r2, r3
 80063a6:	463b      	mov	r3, r7
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1*/
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80063ac:	1d3b      	adds	r3, r7, #4
 80063ae:	681a      	ldr	r2, [r3, #0]
 80063b0:	463b      	mov	r3, r7
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	781b      	ldrb	r3, [r3, #0]
 80063b6:	009b      	lsls	r3, r3, #2
 80063b8:	4413      	add	r3, r2
 80063ba:	881b      	ldrh	r3, [r3, #0]
 80063bc:	b29b      	uxth	r3, r3
 80063be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	f000 815e 	beq.w	8006684 <USB_EPStartXfer+0x3fa>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80063c8:	1d3b      	adds	r3, r7, #4
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	637b      	str	r3, [r7, #52]	; 0x34
 80063ce:	463b      	mov	r3, r7
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	785b      	ldrb	r3, [r3, #1]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d164      	bne.n	80064a2 <USB_EPStartXfer+0x218>
 80063d8:	1d3b      	adds	r3, r7, #4
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80063de:	1d3b      	adds	r3, r7, #4
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80063e6:	b29b      	uxth	r3, r3
 80063e8:	461a      	mov	r2, r3
 80063ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063ec:	4413      	add	r3, r2
 80063ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80063f0:	463b      	mov	r3, r7
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	781b      	ldrb	r3, [r3, #0]
 80063f6:	00da      	lsls	r2, r3, #3
 80063f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063fa:	4413      	add	r3, r2
 80063fc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006400:	62bb      	str	r3, [r7, #40]	; 0x28
 8006402:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006406:	2b00      	cmp	r3, #0
 8006408:	d112      	bne.n	8006430 <USB_EPStartXfer+0x1a6>
 800640a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800640c:	881b      	ldrh	r3, [r3, #0]
 800640e:	b29b      	uxth	r3, r3
 8006410:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006414:	b29a      	uxth	r2, r3
 8006416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006418:	801a      	strh	r2, [r3, #0]
 800641a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800641c:	881b      	ldrh	r3, [r3, #0]
 800641e:	b29b      	uxth	r3, r3
 8006420:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006424:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006428:	b29a      	uxth	r2, r3
 800642a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800642c:	801a      	strh	r2, [r3, #0]
 800642e:	e054      	b.n	80064da <USB_EPStartXfer+0x250>
 8006430:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006434:	2b3e      	cmp	r3, #62	; 0x3e
 8006436:	d817      	bhi.n	8006468 <USB_EPStartXfer+0x1de>
 8006438:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800643c:	085b      	lsrs	r3, r3, #1
 800643e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006442:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006446:	f003 0301 	and.w	r3, r3, #1
 800644a:	2b00      	cmp	r3, #0
 800644c:	d004      	beq.n	8006458 <USB_EPStartXfer+0x1ce>
 800644e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006452:	3301      	adds	r3, #1
 8006454:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006458:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800645c:	b29b      	uxth	r3, r3
 800645e:	029b      	lsls	r3, r3, #10
 8006460:	b29a      	uxth	r2, r3
 8006462:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006464:	801a      	strh	r2, [r3, #0]
 8006466:	e038      	b.n	80064da <USB_EPStartXfer+0x250>
 8006468:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800646c:	095b      	lsrs	r3, r3, #5
 800646e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006472:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006476:	f003 031f 	and.w	r3, r3, #31
 800647a:	2b00      	cmp	r3, #0
 800647c:	d104      	bne.n	8006488 <USB_EPStartXfer+0x1fe>
 800647e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006482:	3b01      	subs	r3, #1
 8006484:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006488:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800648c:	b29b      	uxth	r3, r3
 800648e:	029b      	lsls	r3, r3, #10
 8006490:	b29b      	uxth	r3, r3
 8006492:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006496:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800649a:	b29a      	uxth	r2, r3
 800649c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800649e:	801a      	strh	r2, [r3, #0]
 80064a0:	e01b      	b.n	80064da <USB_EPStartXfer+0x250>
 80064a2:	463b      	mov	r3, r7
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	785b      	ldrb	r3, [r3, #1]
 80064a8:	2b01      	cmp	r3, #1
 80064aa:	d116      	bne.n	80064da <USB_EPStartXfer+0x250>
 80064ac:	1d3b      	adds	r3, r7, #4
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80064b4:	b29b      	uxth	r3, r3
 80064b6:	461a      	mov	r2, r3
 80064b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064ba:	4413      	add	r3, r2
 80064bc:	637b      	str	r3, [r7, #52]	; 0x34
 80064be:	463b      	mov	r3, r7
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	781b      	ldrb	r3, [r3, #0]
 80064c4:	00da      	lsls	r2, r3, #3
 80064c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064c8:	4413      	add	r3, r2
 80064ca:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80064ce:	633b      	str	r3, [r7, #48]	; 0x30
 80064d0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80064d4:	b29a      	uxth	r2, r3
 80064d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064d8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80064da:	463b      	mov	r3, r7
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	895b      	ldrh	r3, [r3, #10]
 80064e0:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80064e4:	463b      	mov	r3, r7
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	6959      	ldr	r1, [r3, #20]
 80064ea:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80064ee:	b29b      	uxth	r3, r3
 80064f0:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 80064f4:	1d38      	adds	r0, r7, #4
 80064f6:	6800      	ldr	r0, [r0, #0]
 80064f8:	f001 f93c 	bl	8007774 <USB_WritePMA>
            ep->xfer_buff += len;
 80064fc:	463b      	mov	r3, r7
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	695a      	ldr	r2, [r3, #20]
 8006502:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006506:	441a      	add	r2, r3
 8006508:	463b      	mov	r3, r7
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800650e:	463b      	mov	r3, r7
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	6a1a      	ldr	r2, [r3, #32]
 8006514:	463b      	mov	r3, r7
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	691b      	ldr	r3, [r3, #16]
 800651a:	429a      	cmp	r2, r3
 800651c:	d90e      	bls.n	800653c <USB_EPStartXfer+0x2b2>
            {
              len = ep->maxpacket;
 800651e:	463b      	mov	r3, r7
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	691b      	ldr	r3, [r3, #16]
 8006524:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db -= len;
 8006528:	463b      	mov	r3, r7
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	6a1a      	ldr	r2, [r3, #32]
 800652e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006532:	1ad2      	subs	r2, r2, r3
 8006534:	463b      	mov	r3, r7
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	621a      	str	r2, [r3, #32]
 800653a:	e008      	b.n	800654e <USB_EPStartXfer+0x2c4>
            }
            else
            {
              len = ep->xfer_len_db;
 800653c:	463b      	mov	r3, r7
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	6a1b      	ldr	r3, [r3, #32]
 8006542:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db = 0;
 8006546:	463b      	mov	r3, r7
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	2200      	movs	r2, #0
 800654c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800654e:	463b      	mov	r3, r7
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	785b      	ldrb	r3, [r3, #1]
 8006554:	2b00      	cmp	r3, #0
 8006556:	d164      	bne.n	8006622 <USB_EPStartXfer+0x398>
 8006558:	1d3b      	adds	r3, r7, #4
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	61fb      	str	r3, [r7, #28]
 800655e:	1d3b      	adds	r3, r7, #4
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006566:	b29b      	uxth	r3, r3
 8006568:	461a      	mov	r2, r3
 800656a:	69fb      	ldr	r3, [r7, #28]
 800656c:	4413      	add	r3, r2
 800656e:	61fb      	str	r3, [r7, #28]
 8006570:	463b      	mov	r3, r7
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	781b      	ldrb	r3, [r3, #0]
 8006576:	00da      	lsls	r2, r3, #3
 8006578:	69fb      	ldr	r3, [r7, #28]
 800657a:	4413      	add	r3, r2
 800657c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006580:	61bb      	str	r3, [r7, #24]
 8006582:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006586:	2b00      	cmp	r3, #0
 8006588:	d112      	bne.n	80065b0 <USB_EPStartXfer+0x326>
 800658a:	69bb      	ldr	r3, [r7, #24]
 800658c:	881b      	ldrh	r3, [r3, #0]
 800658e:	b29b      	uxth	r3, r3
 8006590:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006594:	b29a      	uxth	r2, r3
 8006596:	69bb      	ldr	r3, [r7, #24]
 8006598:	801a      	strh	r2, [r3, #0]
 800659a:	69bb      	ldr	r3, [r7, #24]
 800659c:	881b      	ldrh	r3, [r3, #0]
 800659e:	b29b      	uxth	r3, r3
 80065a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80065a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80065a8:	b29a      	uxth	r2, r3
 80065aa:	69bb      	ldr	r3, [r7, #24]
 80065ac:	801a      	strh	r2, [r3, #0]
 80065ae:	e057      	b.n	8006660 <USB_EPStartXfer+0x3d6>
 80065b0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80065b4:	2b3e      	cmp	r3, #62	; 0x3e
 80065b6:	d817      	bhi.n	80065e8 <USB_EPStartXfer+0x35e>
 80065b8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80065bc:	085b      	lsrs	r3, r3, #1
 80065be:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80065c2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80065c6:	f003 0301 	and.w	r3, r3, #1
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d004      	beq.n	80065d8 <USB_EPStartXfer+0x34e>
 80065ce:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80065d2:	3301      	adds	r3, #1
 80065d4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80065d8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80065dc:	b29b      	uxth	r3, r3
 80065de:	029b      	lsls	r3, r3, #10
 80065e0:	b29a      	uxth	r2, r3
 80065e2:	69bb      	ldr	r3, [r7, #24]
 80065e4:	801a      	strh	r2, [r3, #0]
 80065e6:	e03b      	b.n	8006660 <USB_EPStartXfer+0x3d6>
 80065e8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80065ec:	095b      	lsrs	r3, r3, #5
 80065ee:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80065f2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80065f6:	f003 031f 	and.w	r3, r3, #31
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d104      	bne.n	8006608 <USB_EPStartXfer+0x37e>
 80065fe:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006602:	3b01      	subs	r3, #1
 8006604:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006608:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800660c:	b29b      	uxth	r3, r3
 800660e:	029b      	lsls	r3, r3, #10
 8006610:	b29b      	uxth	r3, r3
 8006612:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006616:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800661a:	b29a      	uxth	r2, r3
 800661c:	69bb      	ldr	r3, [r7, #24]
 800661e:	801a      	strh	r2, [r3, #0]
 8006620:	e01e      	b.n	8006660 <USB_EPStartXfer+0x3d6>
 8006622:	463b      	mov	r3, r7
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	785b      	ldrb	r3, [r3, #1]
 8006628:	2b01      	cmp	r3, #1
 800662a:	d119      	bne.n	8006660 <USB_EPStartXfer+0x3d6>
 800662c:	1d3b      	adds	r3, r7, #4
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	627b      	str	r3, [r7, #36]	; 0x24
 8006632:	1d3b      	adds	r3, r7, #4
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800663a:	b29b      	uxth	r3, r3
 800663c:	461a      	mov	r2, r3
 800663e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006640:	4413      	add	r3, r2
 8006642:	627b      	str	r3, [r7, #36]	; 0x24
 8006644:	463b      	mov	r3, r7
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	781b      	ldrb	r3, [r3, #0]
 800664a:	00da      	lsls	r2, r3, #3
 800664c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800664e:	4413      	add	r3, r2
 8006650:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006654:	623b      	str	r3, [r7, #32]
 8006656:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800665a:	b29a      	uxth	r2, r3
 800665c:	6a3b      	ldr	r3, [r7, #32]
 800665e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006660:	463b      	mov	r3, r7
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	891b      	ldrh	r3, [r3, #8]
 8006666:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800666a:	463b      	mov	r3, r7
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	6959      	ldr	r1, [r3, #20]
 8006670:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006674:	b29b      	uxth	r3, r3
 8006676:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 800667a:	1d38      	adds	r0, r7, #4
 800667c:	6800      	ldr	r0, [r0, #0]
 800667e:	f001 f879 	bl	8007774 <USB_WritePMA>
 8006682:	e340      	b.n	8006d06 <USB_EPStartXfer+0xa7c>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006684:	463b      	mov	r3, r7
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	785b      	ldrb	r3, [r3, #1]
 800668a:	2b00      	cmp	r3, #0
 800668c:	d164      	bne.n	8006758 <USB_EPStartXfer+0x4ce>
 800668e:	1d3b      	adds	r3, r7, #4
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006694:	1d3b      	adds	r3, r7, #4
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800669c:	b29b      	uxth	r3, r3
 800669e:	461a      	mov	r2, r3
 80066a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80066a2:	4413      	add	r3, r2
 80066a4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80066a6:	463b      	mov	r3, r7
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	781b      	ldrb	r3, [r3, #0]
 80066ac:	00da      	lsls	r2, r3, #3
 80066ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80066b0:	4413      	add	r3, r2
 80066b2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80066b6:	64bb      	str	r3, [r7, #72]	; 0x48
 80066b8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d112      	bne.n	80066e6 <USB_EPStartXfer+0x45c>
 80066c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80066c2:	881b      	ldrh	r3, [r3, #0]
 80066c4:	b29b      	uxth	r3, r3
 80066c6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80066ca:	b29a      	uxth	r2, r3
 80066cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80066ce:	801a      	strh	r2, [r3, #0]
 80066d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80066d2:	881b      	ldrh	r3, [r3, #0]
 80066d4:	b29b      	uxth	r3, r3
 80066d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80066da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80066de:	b29a      	uxth	r2, r3
 80066e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80066e2:	801a      	strh	r2, [r3, #0]
 80066e4:	e057      	b.n	8006796 <USB_EPStartXfer+0x50c>
 80066e6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80066ea:	2b3e      	cmp	r3, #62	; 0x3e
 80066ec:	d817      	bhi.n	800671e <USB_EPStartXfer+0x494>
 80066ee:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80066f2:	085b      	lsrs	r3, r3, #1
 80066f4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80066f8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80066fc:	f003 0301 	and.w	r3, r3, #1
 8006700:	2b00      	cmp	r3, #0
 8006702:	d004      	beq.n	800670e <USB_EPStartXfer+0x484>
 8006704:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006708:	3301      	adds	r3, #1
 800670a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800670e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006712:	b29b      	uxth	r3, r3
 8006714:	029b      	lsls	r3, r3, #10
 8006716:	b29a      	uxth	r2, r3
 8006718:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800671a:	801a      	strh	r2, [r3, #0]
 800671c:	e03b      	b.n	8006796 <USB_EPStartXfer+0x50c>
 800671e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006722:	095b      	lsrs	r3, r3, #5
 8006724:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006728:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800672c:	f003 031f 	and.w	r3, r3, #31
 8006730:	2b00      	cmp	r3, #0
 8006732:	d104      	bne.n	800673e <USB_EPStartXfer+0x4b4>
 8006734:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006738:	3b01      	subs	r3, #1
 800673a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800673e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006742:	b29b      	uxth	r3, r3
 8006744:	029b      	lsls	r3, r3, #10
 8006746:	b29b      	uxth	r3, r3
 8006748:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800674c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006750:	b29a      	uxth	r2, r3
 8006752:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006754:	801a      	strh	r2, [r3, #0]
 8006756:	e01e      	b.n	8006796 <USB_EPStartXfer+0x50c>
 8006758:	463b      	mov	r3, r7
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	785b      	ldrb	r3, [r3, #1]
 800675e:	2b01      	cmp	r3, #1
 8006760:	d119      	bne.n	8006796 <USB_EPStartXfer+0x50c>
 8006762:	1d3b      	adds	r3, r7, #4
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	657b      	str	r3, [r7, #84]	; 0x54
 8006768:	1d3b      	adds	r3, r7, #4
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006770:	b29b      	uxth	r3, r3
 8006772:	461a      	mov	r2, r3
 8006774:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006776:	4413      	add	r3, r2
 8006778:	657b      	str	r3, [r7, #84]	; 0x54
 800677a:	463b      	mov	r3, r7
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	781b      	ldrb	r3, [r3, #0]
 8006780:	00da      	lsls	r2, r3, #3
 8006782:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006784:	4413      	add	r3, r2
 8006786:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800678a:	653b      	str	r3, [r7, #80]	; 0x50
 800678c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006790:	b29a      	uxth	r2, r3
 8006792:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006794:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006796:	463b      	mov	r3, r7
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	891b      	ldrh	r3, [r3, #8]
 800679c:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80067a0:	463b      	mov	r3, r7
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	6959      	ldr	r1, [r3, #20]
 80067a6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80067aa:	b29b      	uxth	r3, r3
 80067ac:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 80067b0:	1d38      	adds	r0, r7, #4
 80067b2:	6800      	ldr	r0, [r0, #0]
 80067b4:	f000 ffde 	bl	8007774 <USB_WritePMA>
            ep->xfer_buff += len;
 80067b8:	463b      	mov	r3, r7
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	695a      	ldr	r2, [r3, #20]
 80067be:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80067c2:	441a      	add	r2, r3
 80067c4:	463b      	mov	r3, r7
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80067ca:	463b      	mov	r3, r7
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	6a1a      	ldr	r2, [r3, #32]
 80067d0:	463b      	mov	r3, r7
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	691b      	ldr	r3, [r3, #16]
 80067d6:	429a      	cmp	r2, r3
 80067d8:	d90e      	bls.n	80067f8 <USB_EPStartXfer+0x56e>
            {
              len = ep->maxpacket;
 80067da:	463b      	mov	r3, r7
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	691b      	ldr	r3, [r3, #16]
 80067e0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db -= len;
 80067e4:	463b      	mov	r3, r7
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	6a1a      	ldr	r2, [r3, #32]
 80067ea:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80067ee:	1ad2      	subs	r2, r2, r3
 80067f0:	463b      	mov	r3, r7
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	621a      	str	r2, [r3, #32]
 80067f6:	e008      	b.n	800680a <USB_EPStartXfer+0x580>
            }
            else
            {
              len = ep->xfer_len_db;
 80067f8:	463b      	mov	r3, r7
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	6a1b      	ldr	r3, [r3, #32]
 80067fe:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db = 0;
 8006802:	463b      	mov	r3, r7
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	2200      	movs	r2, #0
 8006808:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800680a:	1d3b      	adds	r3, r7, #4
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	647b      	str	r3, [r7, #68]	; 0x44
 8006810:	463b      	mov	r3, r7
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	785b      	ldrb	r3, [r3, #1]
 8006816:	2b00      	cmp	r3, #0
 8006818:	d164      	bne.n	80068e4 <USB_EPStartXfer+0x65a>
 800681a:	1d3b      	adds	r3, r7, #4
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006820:	1d3b      	adds	r3, r7, #4
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006828:	b29b      	uxth	r3, r3
 800682a:	461a      	mov	r2, r3
 800682c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800682e:	4413      	add	r3, r2
 8006830:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006832:	463b      	mov	r3, r7
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	781b      	ldrb	r3, [r3, #0]
 8006838:	00da      	lsls	r2, r3, #3
 800683a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800683c:	4413      	add	r3, r2
 800683e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006842:	63bb      	str	r3, [r7, #56]	; 0x38
 8006844:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006848:	2b00      	cmp	r3, #0
 800684a:	d112      	bne.n	8006872 <USB_EPStartXfer+0x5e8>
 800684c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800684e:	881b      	ldrh	r3, [r3, #0]
 8006850:	b29b      	uxth	r3, r3
 8006852:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006856:	b29a      	uxth	r2, r3
 8006858:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800685a:	801a      	strh	r2, [r3, #0]
 800685c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800685e:	881b      	ldrh	r3, [r3, #0]
 8006860:	b29b      	uxth	r3, r3
 8006862:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006866:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800686a:	b29a      	uxth	r2, r3
 800686c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800686e:	801a      	strh	r2, [r3, #0]
 8006870:	e054      	b.n	800691c <USB_EPStartXfer+0x692>
 8006872:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006876:	2b3e      	cmp	r3, #62	; 0x3e
 8006878:	d817      	bhi.n	80068aa <USB_EPStartXfer+0x620>
 800687a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800687e:	085b      	lsrs	r3, r3, #1
 8006880:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006884:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006888:	f003 0301 	and.w	r3, r3, #1
 800688c:	2b00      	cmp	r3, #0
 800688e:	d004      	beq.n	800689a <USB_EPStartXfer+0x610>
 8006890:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006894:	3301      	adds	r3, #1
 8006896:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800689a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800689e:	b29b      	uxth	r3, r3
 80068a0:	029b      	lsls	r3, r3, #10
 80068a2:	b29a      	uxth	r2, r3
 80068a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068a6:	801a      	strh	r2, [r3, #0]
 80068a8:	e038      	b.n	800691c <USB_EPStartXfer+0x692>
 80068aa:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80068ae:	095b      	lsrs	r3, r3, #5
 80068b0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80068b4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80068b8:	f003 031f 	and.w	r3, r3, #31
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d104      	bne.n	80068ca <USB_EPStartXfer+0x640>
 80068c0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80068c4:	3b01      	subs	r3, #1
 80068c6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80068ca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80068ce:	b29b      	uxth	r3, r3
 80068d0:	029b      	lsls	r3, r3, #10
 80068d2:	b29b      	uxth	r3, r3
 80068d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80068d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80068dc:	b29a      	uxth	r2, r3
 80068de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068e0:	801a      	strh	r2, [r3, #0]
 80068e2:	e01b      	b.n	800691c <USB_EPStartXfer+0x692>
 80068e4:	463b      	mov	r3, r7
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	785b      	ldrb	r3, [r3, #1]
 80068ea:	2b01      	cmp	r3, #1
 80068ec:	d116      	bne.n	800691c <USB_EPStartXfer+0x692>
 80068ee:	1d3b      	adds	r3, r7, #4
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80068f6:	b29b      	uxth	r3, r3
 80068f8:	461a      	mov	r2, r3
 80068fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80068fc:	4413      	add	r3, r2
 80068fe:	647b      	str	r3, [r7, #68]	; 0x44
 8006900:	463b      	mov	r3, r7
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	781b      	ldrb	r3, [r3, #0]
 8006906:	00da      	lsls	r2, r3, #3
 8006908:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800690a:	4413      	add	r3, r2
 800690c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006910:	643b      	str	r3, [r7, #64]	; 0x40
 8006912:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006916:	b29a      	uxth	r2, r3
 8006918:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800691a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800691c:	463b      	mov	r3, r7
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	895b      	ldrh	r3, [r3, #10]
 8006922:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006926:	463b      	mov	r3, r7
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	6959      	ldr	r1, [r3, #20]
 800692c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006930:	b29b      	uxth	r3, r3
 8006932:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8006936:	1d38      	adds	r0, r7, #4
 8006938:	6800      	ldr	r0, [r0, #0]
 800693a:	f000 ff1b 	bl	8007774 <USB_WritePMA>
 800693e:	e1e2      	b.n	8006d06 <USB_EPStartXfer+0xa7c>
          }
        }
        /*auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer*/
        else
        {
          len = ep->xfer_len_db;
 8006940:	463b      	mov	r3, r7
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	6a1b      	ldr	r3, [r3, #32]
 8006946:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          /*disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 800694a:	1d3b      	adds	r3, r7, #4
 800694c:	681a      	ldr	r2, [r3, #0]
 800694e:	463b      	mov	r3, r7
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	781b      	ldrb	r3, [r3, #0]
 8006954:	009b      	lsls	r3, r3, #2
 8006956:	4413      	add	r3, r2
 8006958:	881b      	ldrh	r3, [r3, #0]
 800695a:	b29b      	uxth	r3, r3
 800695c:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8006960:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006964:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8006968:	1d3b      	adds	r3, r7, #4
 800696a:	681a      	ldr	r2, [r3, #0]
 800696c:	463b      	mov	r3, r7
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	781b      	ldrb	r3, [r3, #0]
 8006972:	009b      	lsls	r3, r3, #2
 8006974:	441a      	add	r2, r3
 8006976:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800697a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800697e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006982:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006986:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800698a:	b29b      	uxth	r3, r3
 800698c:	8013      	strh	r3, [r2, #0]
          /*Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800698e:	1d3b      	adds	r3, r7, #4
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	663b      	str	r3, [r7, #96]	; 0x60
 8006994:	1d3b      	adds	r3, r7, #4
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800699c:	b29b      	uxth	r3, r3
 800699e:	461a      	mov	r2, r3
 80069a0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80069a2:	4413      	add	r3, r2
 80069a4:	663b      	str	r3, [r7, #96]	; 0x60
 80069a6:	463b      	mov	r3, r7
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	781b      	ldrb	r3, [r3, #0]
 80069ac:	00da      	lsls	r2, r3, #3
 80069ae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80069b0:	4413      	add	r3, r2
 80069b2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80069b6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80069b8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80069bc:	b29a      	uxth	r2, r3
 80069be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80069c0:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80069c2:	463b      	mov	r3, r7
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	891b      	ldrh	r3, [r3, #8]
 80069c8:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
          /*Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80069cc:	463b      	mov	r3, r7
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	6959      	ldr	r1, [r3, #20]
 80069d2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80069d6:	b29b      	uxth	r3, r3
 80069d8:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 80069dc:	1d38      	adds	r0, r7, #4
 80069de:	6800      	ldr	r0, [r0, #0]
 80069e0:	f000 fec8 	bl	8007774 <USB_WritePMA>
 80069e4:	e18f      	b.n	8006d06 <USB_EPStartXfer+0xa7c>

      /*mange isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80069e6:	1d3b      	adds	r3, r7, #4
 80069e8:	681a      	ldr	r2, [r3, #0]
 80069ea:	463b      	mov	r3, r7
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	781b      	ldrb	r3, [r3, #0]
 80069f0:	009b      	lsls	r3, r3, #2
 80069f2:	4413      	add	r3, r2
 80069f4:	881b      	ldrh	r3, [r3, #0]
 80069f6:	b29b      	uxth	r3, r3
 80069f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	f000 808f 	beq.w	8006b20 <USB_EPStartXfer+0x896>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006a02:	1d3b      	adds	r3, r7, #4
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	67bb      	str	r3, [r7, #120]	; 0x78
 8006a08:	463b      	mov	r3, r7
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	785b      	ldrb	r3, [r3, #1]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d164      	bne.n	8006adc <USB_EPStartXfer+0x852>
 8006a12:	1d3b      	adds	r3, r7, #4
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	673b      	str	r3, [r7, #112]	; 0x70
 8006a18:	1d3b      	adds	r3, r7, #4
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a20:	b29b      	uxth	r3, r3
 8006a22:	461a      	mov	r2, r3
 8006a24:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006a26:	4413      	add	r3, r2
 8006a28:	673b      	str	r3, [r7, #112]	; 0x70
 8006a2a:	463b      	mov	r3, r7
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	781b      	ldrb	r3, [r3, #0]
 8006a30:	00da      	lsls	r2, r3, #3
 8006a32:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006a34:	4413      	add	r3, r2
 8006a36:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006a3a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006a3c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d112      	bne.n	8006a6a <USB_EPStartXfer+0x7e0>
 8006a44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a46:	881b      	ldrh	r3, [r3, #0]
 8006a48:	b29b      	uxth	r3, r3
 8006a4a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006a4e:	b29a      	uxth	r2, r3
 8006a50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a52:	801a      	strh	r2, [r3, #0]
 8006a54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a56:	881b      	ldrh	r3, [r3, #0]
 8006a58:	b29b      	uxth	r3, r3
 8006a5a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a5e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a62:	b29a      	uxth	r2, r3
 8006a64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a66:	801a      	strh	r2, [r3, #0]
 8006a68:	e054      	b.n	8006b14 <USB_EPStartXfer+0x88a>
 8006a6a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006a6e:	2b3e      	cmp	r3, #62	; 0x3e
 8006a70:	d817      	bhi.n	8006aa2 <USB_EPStartXfer+0x818>
 8006a72:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006a76:	085b      	lsrs	r3, r3, #1
 8006a78:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006a7c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006a80:	f003 0301 	and.w	r3, r3, #1
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d004      	beq.n	8006a92 <USB_EPStartXfer+0x808>
 8006a88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a8c:	3301      	adds	r3, #1
 8006a8e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006a92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a96:	b29b      	uxth	r3, r3
 8006a98:	029b      	lsls	r3, r3, #10
 8006a9a:	b29a      	uxth	r2, r3
 8006a9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a9e:	801a      	strh	r2, [r3, #0]
 8006aa0:	e038      	b.n	8006b14 <USB_EPStartXfer+0x88a>
 8006aa2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006aa6:	095b      	lsrs	r3, r3, #5
 8006aa8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006aac:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006ab0:	f003 031f 	and.w	r3, r3, #31
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d104      	bne.n	8006ac2 <USB_EPStartXfer+0x838>
 8006ab8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006abc:	3b01      	subs	r3, #1
 8006abe:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006ac2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ac6:	b29b      	uxth	r3, r3
 8006ac8:	029b      	lsls	r3, r3, #10
 8006aca:	b29b      	uxth	r3, r3
 8006acc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ad0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ad4:	b29a      	uxth	r2, r3
 8006ad6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ad8:	801a      	strh	r2, [r3, #0]
 8006ada:	e01b      	b.n	8006b14 <USB_EPStartXfer+0x88a>
 8006adc:	463b      	mov	r3, r7
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	785b      	ldrb	r3, [r3, #1]
 8006ae2:	2b01      	cmp	r3, #1
 8006ae4:	d116      	bne.n	8006b14 <USB_EPStartXfer+0x88a>
 8006ae6:	1d3b      	adds	r3, r7, #4
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006aee:	b29b      	uxth	r3, r3
 8006af0:	461a      	mov	r2, r3
 8006af2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006af4:	4413      	add	r3, r2
 8006af6:	67bb      	str	r3, [r7, #120]	; 0x78
 8006af8:	463b      	mov	r3, r7
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	781b      	ldrb	r3, [r3, #0]
 8006afe:	00da      	lsls	r2, r3, #3
 8006b00:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006b02:	4413      	add	r3, r2
 8006b04:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006b08:	677b      	str	r3, [r7, #116]	; 0x74
 8006b0a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006b0e:	b29a      	uxth	r2, r3
 8006b10:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006b12:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8006b14:	463b      	mov	r3, r7
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	895b      	ldrh	r3, [r3, #10]
 8006b1a:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
 8006b1e:	e097      	b.n	8006c50 <USB_EPStartXfer+0x9c6>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006b20:	463b      	mov	r3, r7
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	785b      	ldrb	r3, [r3, #1]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d168      	bne.n	8006bfc <USB_EPStartXfer+0x972>
 8006b2a:	1d3b      	adds	r3, r7, #4
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006b32:	1d3b      	adds	r3, r7, #4
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b3a:	b29b      	uxth	r3, r3
 8006b3c:	461a      	mov	r2, r3
 8006b3e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006b42:	4413      	add	r3, r2
 8006b44:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006b48:	463b      	mov	r3, r7
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	781b      	ldrb	r3, [r3, #0]
 8006b4e:	00da      	lsls	r2, r3, #3
 8006b50:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006b54:	4413      	add	r3, r2
 8006b56:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006b5a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006b5c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d112      	bne.n	8006b8a <USB_EPStartXfer+0x900>
 8006b64:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006b66:	881b      	ldrh	r3, [r3, #0]
 8006b68:	b29b      	uxth	r3, r3
 8006b6a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006b6e:	b29a      	uxth	r2, r3
 8006b70:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006b72:	801a      	strh	r2, [r3, #0]
 8006b74:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006b76:	881b      	ldrh	r3, [r3, #0]
 8006b78:	b29b      	uxth	r3, r3
 8006b7a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b7e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b82:	b29a      	uxth	r2, r3
 8006b84:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006b86:	801a      	strh	r2, [r3, #0]
 8006b88:	e05d      	b.n	8006c46 <USB_EPStartXfer+0x9bc>
 8006b8a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006b8e:	2b3e      	cmp	r3, #62	; 0x3e
 8006b90:	d817      	bhi.n	8006bc2 <USB_EPStartXfer+0x938>
 8006b92:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006b96:	085b      	lsrs	r3, r3, #1
 8006b98:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006b9c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006ba0:	f003 0301 	and.w	r3, r3, #1
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d004      	beq.n	8006bb2 <USB_EPStartXfer+0x928>
 8006ba8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006bac:	3301      	adds	r3, #1
 8006bae:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006bb2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006bb6:	b29b      	uxth	r3, r3
 8006bb8:	029b      	lsls	r3, r3, #10
 8006bba:	b29a      	uxth	r2, r3
 8006bbc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006bbe:	801a      	strh	r2, [r3, #0]
 8006bc0:	e041      	b.n	8006c46 <USB_EPStartXfer+0x9bc>
 8006bc2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006bc6:	095b      	lsrs	r3, r3, #5
 8006bc8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006bcc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006bd0:	f003 031f 	and.w	r3, r3, #31
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d104      	bne.n	8006be2 <USB_EPStartXfer+0x958>
 8006bd8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006bdc:	3b01      	subs	r3, #1
 8006bde:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006be2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006be6:	b29b      	uxth	r3, r3
 8006be8:	029b      	lsls	r3, r3, #10
 8006bea:	b29b      	uxth	r3, r3
 8006bec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006bf0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006bf4:	b29a      	uxth	r2, r3
 8006bf6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006bf8:	801a      	strh	r2, [r3, #0]
 8006bfa:	e024      	b.n	8006c46 <USB_EPStartXfer+0x9bc>
 8006bfc:	463b      	mov	r3, r7
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	785b      	ldrb	r3, [r3, #1]
 8006c02:	2b01      	cmp	r3, #1
 8006c04:	d11f      	bne.n	8006c46 <USB_EPStartXfer+0x9bc>
 8006c06:	1d3b      	adds	r3, r7, #4
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006c0e:	1d3b      	adds	r3, r7, #4
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c16:	b29b      	uxth	r3, r3
 8006c18:	461a      	mov	r2, r3
 8006c1a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006c1e:	4413      	add	r3, r2
 8006c20:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006c24:	463b      	mov	r3, r7
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	781b      	ldrb	r3, [r3, #0]
 8006c2a:	00da      	lsls	r2, r3, #3
 8006c2c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006c30:	4413      	add	r3, r2
 8006c32:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006c36:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006c3a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006c3e:	b29a      	uxth	r2, r3
 8006c40:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006c44:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006c46:	463b      	mov	r3, r7
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	891b      	ldrh	r3, [r3, #8]
 8006c4c:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
        }
        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006c50:	463b      	mov	r3, r7
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	6959      	ldr	r1, [r3, #20]
 8006c56:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006c5a:	b29b      	uxth	r3, r3
 8006c5c:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8006c60:	1d38      	adds	r0, r7, #4
 8006c62:	6800      	ldr	r0, [r0, #0]
 8006c64:	f000 fd86 	bl	8007774 <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8006c68:	463b      	mov	r3, r7
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	785b      	ldrb	r3, [r3, #1]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d122      	bne.n	8006cb8 <USB_EPStartXfer+0xa2e>
 8006c72:	1d3b      	adds	r3, r7, #4
 8006c74:	681a      	ldr	r2, [r3, #0]
 8006c76:	463b      	mov	r3, r7
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	781b      	ldrb	r3, [r3, #0]
 8006c7c:	009b      	lsls	r3, r3, #2
 8006c7e:	4413      	add	r3, r2
 8006c80:	881b      	ldrh	r3, [r3, #0]
 8006c82:	b29b      	uxth	r3, r3
 8006c84:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c8c:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8006c90:	1d3b      	adds	r3, r7, #4
 8006c92:	681a      	ldr	r2, [r3, #0]
 8006c94:	463b      	mov	r3, r7
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	781b      	ldrb	r3, [r3, #0]
 8006c9a:	009b      	lsls	r3, r3, #2
 8006c9c:	441a      	add	r2, r3
 8006c9e:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8006ca2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ca6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006caa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006cae:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006cb2:	b29b      	uxth	r3, r3
 8006cb4:	8013      	strh	r3, [r2, #0]
 8006cb6:	e026      	b.n	8006d06 <USB_EPStartXfer+0xa7c>
 8006cb8:	463b      	mov	r3, r7
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	785b      	ldrb	r3, [r3, #1]
 8006cbe:	2b01      	cmp	r3, #1
 8006cc0:	d121      	bne.n	8006d06 <USB_EPStartXfer+0xa7c>
 8006cc2:	1d3b      	adds	r3, r7, #4
 8006cc4:	681a      	ldr	r2, [r3, #0]
 8006cc6:	463b      	mov	r3, r7
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	781b      	ldrb	r3, [r3, #0]
 8006ccc:	009b      	lsls	r3, r3, #2
 8006cce:	4413      	add	r3, r2
 8006cd0:	881b      	ldrh	r3, [r3, #0]
 8006cd2:	b29b      	uxth	r3, r3
 8006cd4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006cd8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cdc:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 8006ce0:	1d3b      	adds	r3, r7, #4
 8006ce2:	681a      	ldr	r2, [r3, #0]
 8006ce4:	463b      	mov	r3, r7
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	781b      	ldrb	r3, [r3, #0]
 8006cea:	009b      	lsls	r3, r3, #2
 8006cec:	441a      	add	r2, r3
 8006cee:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8006cf2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006cf6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006cfa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006cfe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d02:	b29b      	uxth	r3, r3
 8006d04:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8006d06:	1d3b      	adds	r3, r7, #4
 8006d08:	681a      	ldr	r2, [r3, #0]
 8006d0a:	463b      	mov	r3, r7
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	781b      	ldrb	r3, [r3, #0]
 8006d10:	009b      	lsls	r3, r3, #2
 8006d12:	4413      	add	r3, r2
 8006d14:	881b      	ldrh	r3, [r3, #0]
 8006d16:	b29b      	uxth	r3, r3
 8006d18:	f107 020e 	add.w	r2, r7, #14
 8006d1c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d20:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d24:	8013      	strh	r3, [r2, #0]
 8006d26:	f107 030e 	add.w	r3, r7, #14
 8006d2a:	f107 020e 	add.w	r2, r7, #14
 8006d2e:	8812      	ldrh	r2, [r2, #0]
 8006d30:	f082 0210 	eor.w	r2, r2, #16
 8006d34:	801a      	strh	r2, [r3, #0]
 8006d36:	f107 030e 	add.w	r3, r7, #14
 8006d3a:	f107 020e 	add.w	r2, r7, #14
 8006d3e:	8812      	ldrh	r2, [r2, #0]
 8006d40:	f082 0220 	eor.w	r2, r2, #32
 8006d44:	801a      	strh	r2, [r3, #0]
 8006d46:	1d3b      	adds	r3, r7, #4
 8006d48:	681a      	ldr	r2, [r3, #0]
 8006d4a:	463b      	mov	r3, r7
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	781b      	ldrb	r3, [r3, #0]
 8006d50:	009b      	lsls	r3, r3, #2
 8006d52:	441a      	add	r2, r3
 8006d54:	f107 030e 	add.w	r3, r7, #14
 8006d58:	881b      	ldrh	r3, [r3, #0]
 8006d5a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d5e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d6a:	b29b      	uxth	r3, r3
 8006d6c:	8013      	strh	r3, [r2, #0]
 8006d6e:	e3b5      	b.n	80074dc <USB_EPStartXfer+0x1252>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8006d70:	463b      	mov	r3, r7
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	7b1b      	ldrb	r3, [r3, #12]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	f040 8090 	bne.w	8006e9c <USB_EPStartXfer+0xc12>
    {
      /* Multi packet transfer*/
      if (ep->xfer_len > ep->maxpacket)
 8006d7c:	463b      	mov	r3, r7
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	699a      	ldr	r2, [r3, #24]
 8006d82:	463b      	mov	r3, r7
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	691b      	ldr	r3, [r3, #16]
 8006d88:	429a      	cmp	r2, r3
 8006d8a:	d90e      	bls.n	8006daa <USB_EPStartXfer+0xb20>
      {
        len = ep->maxpacket;
 8006d8c:	463b      	mov	r3, r7
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	691b      	ldr	r3, [r3, #16]
 8006d92:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        ep->xfer_len -= len;
 8006d96:	463b      	mov	r3, r7
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	699a      	ldr	r2, [r3, #24]
 8006d9c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006da0:	1ad2      	subs	r2, r2, r3
 8006da2:	463b      	mov	r3, r7
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	619a      	str	r2, [r3, #24]
 8006da8:	e008      	b.n	8006dbc <USB_EPStartXfer+0xb32>
      }
      else
      {
        len = ep->xfer_len;
 8006daa:	463b      	mov	r3, r7
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	699b      	ldr	r3, [r3, #24]
 8006db0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        ep->xfer_len = 0U;
 8006db4:	463b      	mov	r3, r7
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	2200      	movs	r2, #0
 8006dba:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8006dbc:	1d3b      	adds	r3, r7, #4
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006dc4:	1d3b      	adds	r3, r7, #4
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006dcc:	b29b      	uxth	r3, r3
 8006dce:	461a      	mov	r2, r3
 8006dd0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006dd4:	4413      	add	r3, r2
 8006dd6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006dda:	463b      	mov	r3, r7
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	781b      	ldrb	r3, [r3, #0]
 8006de0:	00da      	lsls	r2, r3, #3
 8006de2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006de6:	4413      	add	r3, r2
 8006de8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006dec:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006df0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d116      	bne.n	8006e26 <USB_EPStartXfer+0xb9c>
 8006df8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006dfc:	881b      	ldrh	r3, [r3, #0]
 8006dfe:	b29b      	uxth	r3, r3
 8006e00:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006e04:	b29a      	uxth	r2, r3
 8006e06:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006e0a:	801a      	strh	r2, [r3, #0]
 8006e0c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006e10:	881b      	ldrh	r3, [r3, #0]
 8006e12:	b29b      	uxth	r3, r3
 8006e14:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e18:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e1c:	b29a      	uxth	r2, r3
 8006e1e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006e22:	801a      	strh	r2, [r3, #0]
 8006e24:	e32c      	b.n	8007480 <USB_EPStartXfer+0x11f6>
 8006e26:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006e2a:	2b3e      	cmp	r3, #62	; 0x3e
 8006e2c:	d818      	bhi.n	8006e60 <USB_EPStartXfer+0xbd6>
 8006e2e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006e32:	085b      	lsrs	r3, r3, #1
 8006e34:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006e38:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006e3c:	f003 0301 	and.w	r3, r3, #1
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d004      	beq.n	8006e4e <USB_EPStartXfer+0xbc4>
 8006e44:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006e48:	3301      	adds	r3, #1
 8006e4a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006e4e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006e52:	b29b      	uxth	r3, r3
 8006e54:	029b      	lsls	r3, r3, #10
 8006e56:	b29a      	uxth	r2, r3
 8006e58:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006e5c:	801a      	strh	r2, [r3, #0]
 8006e5e:	e30f      	b.n	8007480 <USB_EPStartXfer+0x11f6>
 8006e60:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006e64:	095b      	lsrs	r3, r3, #5
 8006e66:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006e6a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006e6e:	f003 031f 	and.w	r3, r3, #31
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d104      	bne.n	8006e80 <USB_EPStartXfer+0xbf6>
 8006e76:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006e7a:	3b01      	subs	r3, #1
 8006e7c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006e80:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006e84:	b29b      	uxth	r3, r3
 8006e86:	029b      	lsls	r3, r3, #10
 8006e88:	b29b      	uxth	r3, r3
 8006e8a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e8e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e92:	b29a      	uxth	r2, r3
 8006e94:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006e98:	801a      	strh	r2, [r3, #0]
 8006e9a:	e2f1      	b.n	8007480 <USB_EPStartXfer+0x11f6>
    }
    else
    {
      /*First Transfer Coming From HAL_PCD_EP_Receive & From ISR*/
      /*Set the Double buffer counter*/
      if (ep->type == EP_TYPE_BULK)
 8006e9c:	463b      	mov	r3, r7
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	78db      	ldrb	r3, [r3, #3]
 8006ea2:	2b02      	cmp	r3, #2
 8006ea4:	f040 818f 	bne.w	80071c6 <USB_EPStartXfer+0xf3c>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8006ea8:	463b      	mov	r3, r7
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	785b      	ldrb	r3, [r3, #1]
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d175      	bne.n	8006f9e <USB_EPStartXfer+0xd14>
 8006eb2:	1d3b      	adds	r3, r7, #4
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006eba:	1d3b      	adds	r3, r7, #4
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ec2:	b29b      	uxth	r3, r3
 8006ec4:	461a      	mov	r2, r3
 8006ec6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006eca:	4413      	add	r3, r2
 8006ecc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006ed0:	463b      	mov	r3, r7
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	781b      	ldrb	r3, [r3, #0]
 8006ed6:	00da      	lsls	r2, r3, #3
 8006ed8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006edc:	4413      	add	r3, r2
 8006ede:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006ee2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006ee6:	463b      	mov	r3, r7
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	691b      	ldr	r3, [r3, #16]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d116      	bne.n	8006f1e <USB_EPStartXfer+0xc94>
 8006ef0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006ef4:	881b      	ldrh	r3, [r3, #0]
 8006ef6:	b29b      	uxth	r3, r3
 8006ef8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006efc:	b29a      	uxth	r2, r3
 8006efe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006f02:	801a      	strh	r2, [r3, #0]
 8006f04:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006f08:	881b      	ldrh	r3, [r3, #0]
 8006f0a:	b29b      	uxth	r3, r3
 8006f0c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f10:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f14:	b29a      	uxth	r2, r3
 8006f16:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006f1a:	801a      	strh	r2, [r3, #0]
 8006f1c:	e065      	b.n	8006fea <USB_EPStartXfer+0xd60>
 8006f1e:	463b      	mov	r3, r7
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	691b      	ldr	r3, [r3, #16]
 8006f24:	2b3e      	cmp	r3, #62	; 0x3e
 8006f26:	d81a      	bhi.n	8006f5e <USB_EPStartXfer+0xcd4>
 8006f28:	463b      	mov	r3, r7
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	691b      	ldr	r3, [r3, #16]
 8006f2e:	085b      	lsrs	r3, r3, #1
 8006f30:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006f34:	463b      	mov	r3, r7
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	691b      	ldr	r3, [r3, #16]
 8006f3a:	f003 0301 	and.w	r3, r3, #1
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d004      	beq.n	8006f4c <USB_EPStartXfer+0xcc2>
 8006f42:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006f46:	3301      	adds	r3, #1
 8006f48:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006f4c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006f50:	b29b      	uxth	r3, r3
 8006f52:	029b      	lsls	r3, r3, #10
 8006f54:	b29a      	uxth	r2, r3
 8006f56:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006f5a:	801a      	strh	r2, [r3, #0]
 8006f5c:	e045      	b.n	8006fea <USB_EPStartXfer+0xd60>
 8006f5e:	463b      	mov	r3, r7
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	691b      	ldr	r3, [r3, #16]
 8006f64:	095b      	lsrs	r3, r3, #5
 8006f66:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006f6a:	463b      	mov	r3, r7
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	691b      	ldr	r3, [r3, #16]
 8006f70:	f003 031f 	and.w	r3, r3, #31
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d104      	bne.n	8006f82 <USB_EPStartXfer+0xcf8>
 8006f78:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006f7c:	3b01      	subs	r3, #1
 8006f7e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006f82:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006f86:	b29b      	uxth	r3, r3
 8006f88:	029b      	lsls	r3, r3, #10
 8006f8a:	b29b      	uxth	r3, r3
 8006f8c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f90:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f94:	b29a      	uxth	r2, r3
 8006f96:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006f9a:	801a      	strh	r2, [r3, #0]
 8006f9c:	e025      	b.n	8006fea <USB_EPStartXfer+0xd60>
 8006f9e:	463b      	mov	r3, r7
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	785b      	ldrb	r3, [r3, #1]
 8006fa4:	2b01      	cmp	r3, #1
 8006fa6:	d120      	bne.n	8006fea <USB_EPStartXfer+0xd60>
 8006fa8:	1d3b      	adds	r3, r7, #4
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006fb0:	1d3b      	adds	r3, r7, #4
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006fb8:	b29b      	uxth	r3, r3
 8006fba:	461a      	mov	r2, r3
 8006fbc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006fc0:	4413      	add	r3, r2
 8006fc2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006fc6:	463b      	mov	r3, r7
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	781b      	ldrb	r3, [r3, #0]
 8006fcc:	00da      	lsls	r2, r3, #3
 8006fce:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006fd2:	4413      	add	r3, r2
 8006fd4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006fd8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006fdc:	463b      	mov	r3, r7
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	691b      	ldr	r3, [r3, #16]
 8006fe2:	b29a      	uxth	r2, r3
 8006fe4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006fe8:	801a      	strh	r2, [r3, #0]
 8006fea:	1d3b      	adds	r3, r7, #4
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006ff2:	463b      	mov	r3, r7
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	785b      	ldrb	r3, [r3, #1]
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d175      	bne.n	80070e8 <USB_EPStartXfer+0xe5e>
 8006ffc:	1d3b      	adds	r3, r7, #4
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007004:	1d3b      	adds	r3, r7, #4
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800700c:	b29b      	uxth	r3, r3
 800700e:	461a      	mov	r2, r3
 8007010:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007014:	4413      	add	r3, r2
 8007016:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800701a:	463b      	mov	r3, r7
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	781b      	ldrb	r3, [r3, #0]
 8007020:	00da      	lsls	r2, r3, #3
 8007022:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007026:	4413      	add	r3, r2
 8007028:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800702c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007030:	463b      	mov	r3, r7
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	691b      	ldr	r3, [r3, #16]
 8007036:	2b00      	cmp	r3, #0
 8007038:	d116      	bne.n	8007068 <USB_EPStartXfer+0xdde>
 800703a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800703e:	881b      	ldrh	r3, [r3, #0]
 8007040:	b29b      	uxth	r3, r3
 8007042:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007046:	b29a      	uxth	r2, r3
 8007048:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800704c:	801a      	strh	r2, [r3, #0]
 800704e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007052:	881b      	ldrh	r3, [r3, #0]
 8007054:	b29b      	uxth	r3, r3
 8007056:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800705a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800705e:	b29a      	uxth	r2, r3
 8007060:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007064:	801a      	strh	r2, [r3, #0]
 8007066:	e061      	b.n	800712c <USB_EPStartXfer+0xea2>
 8007068:	463b      	mov	r3, r7
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	691b      	ldr	r3, [r3, #16]
 800706e:	2b3e      	cmp	r3, #62	; 0x3e
 8007070:	d81a      	bhi.n	80070a8 <USB_EPStartXfer+0xe1e>
 8007072:	463b      	mov	r3, r7
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	691b      	ldr	r3, [r3, #16]
 8007078:	085b      	lsrs	r3, r3, #1
 800707a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800707e:	463b      	mov	r3, r7
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	691b      	ldr	r3, [r3, #16]
 8007084:	f003 0301 	and.w	r3, r3, #1
 8007088:	2b00      	cmp	r3, #0
 800708a:	d004      	beq.n	8007096 <USB_EPStartXfer+0xe0c>
 800708c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007090:	3301      	adds	r3, #1
 8007092:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007096:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800709a:	b29b      	uxth	r3, r3
 800709c:	029b      	lsls	r3, r3, #10
 800709e:	b29a      	uxth	r2, r3
 80070a0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80070a4:	801a      	strh	r2, [r3, #0]
 80070a6:	e041      	b.n	800712c <USB_EPStartXfer+0xea2>
 80070a8:	463b      	mov	r3, r7
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	691b      	ldr	r3, [r3, #16]
 80070ae:	095b      	lsrs	r3, r3, #5
 80070b0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80070b4:	463b      	mov	r3, r7
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	691b      	ldr	r3, [r3, #16]
 80070ba:	f003 031f 	and.w	r3, r3, #31
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d104      	bne.n	80070cc <USB_EPStartXfer+0xe42>
 80070c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070c6:	3b01      	subs	r3, #1
 80070c8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80070cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070d0:	b29b      	uxth	r3, r3
 80070d2:	029b      	lsls	r3, r3, #10
 80070d4:	b29b      	uxth	r3, r3
 80070d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80070da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80070de:	b29a      	uxth	r2, r3
 80070e0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80070e4:	801a      	strh	r2, [r3, #0]
 80070e6:	e021      	b.n	800712c <USB_EPStartXfer+0xea2>
 80070e8:	463b      	mov	r3, r7
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	785b      	ldrb	r3, [r3, #1]
 80070ee:	2b01      	cmp	r3, #1
 80070f0:	d11c      	bne.n	800712c <USB_EPStartXfer+0xea2>
 80070f2:	1d3b      	adds	r3, r7, #4
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80070fa:	b29b      	uxth	r3, r3
 80070fc:	461a      	mov	r2, r3
 80070fe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007102:	4413      	add	r3, r2
 8007104:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007108:	463b      	mov	r3, r7
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	781b      	ldrb	r3, [r3, #0]
 800710e:	00da      	lsls	r2, r3, #3
 8007110:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007114:	4413      	add	r3, r2
 8007116:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800711a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800711e:	463b      	mov	r3, r7
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	691b      	ldr	r3, [r3, #16]
 8007124:	b29a      	uxth	r2, r3
 8007126:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800712a:	801a      	strh	r2, [r3, #0]
        /*Coming from ISR*/
        if (ep->xfer_count != 0U)
 800712c:	463b      	mov	r3, r7
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	69db      	ldr	r3, [r3, #28]
 8007132:	2b00      	cmp	r3, #0
 8007134:	f000 81a4 	beq.w	8007480 <USB_EPStartXfer+0x11f6>
        {
          /* update last value to check if there is blocking state*/
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8007138:	1d3b      	adds	r3, r7, #4
 800713a:	681a      	ldr	r2, [r3, #0]
 800713c:	463b      	mov	r3, r7
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	781b      	ldrb	r3, [r3, #0]
 8007142:	009b      	lsls	r3, r3, #2
 8007144:	4413      	add	r3, r2
 8007146:	881b      	ldrh	r3, [r3, #0]
 8007148:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800714c:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8007150:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007154:	2b00      	cmp	r3, #0
 8007156:	d005      	beq.n	8007164 <USB_EPStartXfer+0xeda>
 8007158:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800715c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007160:	2b00      	cmp	r3, #0
 8007162:	d10d      	bne.n	8007180 <USB_EPStartXfer+0xef6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007164:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8007168:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800716c:	2b00      	cmp	r3, #0
 800716e:	f040 8187 	bne.w	8007480 <USB_EPStartXfer+0x11f6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007172:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8007176:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800717a:	2b00      	cmp	r3, #0
 800717c:	f040 8180 	bne.w	8007480 <USB_EPStartXfer+0x11f6>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8007180:	1d3b      	adds	r3, r7, #4
 8007182:	681a      	ldr	r2, [r3, #0]
 8007184:	463b      	mov	r3, r7
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	781b      	ldrb	r3, [r3, #0]
 800718a:	009b      	lsls	r3, r3, #2
 800718c:	4413      	add	r3, r2
 800718e:	881b      	ldrh	r3, [r3, #0]
 8007190:	b29b      	uxth	r3, r3
 8007192:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007196:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800719a:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 800719e:	1d3b      	adds	r3, r7, #4
 80071a0:	681a      	ldr	r2, [r3, #0]
 80071a2:	463b      	mov	r3, r7
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	781b      	ldrb	r3, [r3, #0]
 80071a8:	009b      	lsls	r3, r3, #2
 80071aa:	441a      	add	r2, r3
 80071ac:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 80071b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80071b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80071b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80071bc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80071c0:	b29b      	uxth	r3, r3
 80071c2:	8013      	strh	r3, [r2, #0]
 80071c4:	e15c      	b.n	8007480 <USB_EPStartXfer+0x11f6>
          }
        }
      }
      /*iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80071c6:	463b      	mov	r3, r7
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	78db      	ldrb	r3, [r3, #3]
 80071cc:	2b01      	cmp	r3, #1
 80071ce:	f040 8155 	bne.w	800747c <USB_EPStartXfer+0x11f2>
      {
        /* Multi packet transfer*/
        if (ep->xfer_len > ep->maxpacket)
 80071d2:	463b      	mov	r3, r7
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	699a      	ldr	r2, [r3, #24]
 80071d8:	463b      	mov	r3, r7
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	691b      	ldr	r3, [r3, #16]
 80071de:	429a      	cmp	r2, r3
 80071e0:	d90e      	bls.n	8007200 <USB_EPStartXfer+0xf76>
        {
          len = ep->maxpacket;
 80071e2:	463b      	mov	r3, r7
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	691b      	ldr	r3, [r3, #16]
 80071e8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          ep->xfer_len -= len;
 80071ec:	463b      	mov	r3, r7
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	699a      	ldr	r2, [r3, #24]
 80071f2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80071f6:	1ad2      	subs	r2, r2, r3
 80071f8:	463b      	mov	r3, r7
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	619a      	str	r2, [r3, #24]
 80071fe:	e008      	b.n	8007212 <USB_EPStartXfer+0xf88>
        }
        else
        {
          len = ep->xfer_len;
 8007200:	463b      	mov	r3, r7
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	699b      	ldr	r3, [r3, #24]
 8007206:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          ep->xfer_len = 0U;
 800720a:	463b      	mov	r3, r7
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	2200      	movs	r2, #0
 8007210:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8007212:	463b      	mov	r3, r7
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	785b      	ldrb	r3, [r3, #1]
 8007218:	2b00      	cmp	r3, #0
 800721a:	d16f      	bne.n	80072fc <USB_EPStartXfer+0x1072>
 800721c:	1d3b      	adds	r3, r7, #4
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007224:	1d3b      	adds	r3, r7, #4
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800722c:	b29b      	uxth	r3, r3
 800722e:	461a      	mov	r2, r3
 8007230:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007234:	4413      	add	r3, r2
 8007236:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800723a:	463b      	mov	r3, r7
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	781b      	ldrb	r3, [r3, #0]
 8007240:	00da      	lsls	r2, r3, #3
 8007242:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007246:	4413      	add	r3, r2
 8007248:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800724c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007250:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007254:	2b00      	cmp	r3, #0
 8007256:	d116      	bne.n	8007286 <USB_EPStartXfer+0xffc>
 8007258:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800725c:	881b      	ldrh	r3, [r3, #0]
 800725e:	b29b      	uxth	r3, r3
 8007260:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007264:	b29a      	uxth	r2, r3
 8007266:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800726a:	801a      	strh	r2, [r3, #0]
 800726c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007270:	881b      	ldrh	r3, [r3, #0]
 8007272:	b29b      	uxth	r3, r3
 8007274:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007278:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800727c:	b29a      	uxth	r2, r3
 800727e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007282:	801a      	strh	r2, [r3, #0]
 8007284:	e05f      	b.n	8007346 <USB_EPStartXfer+0x10bc>
 8007286:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800728a:	2b3e      	cmp	r3, #62	; 0x3e
 800728c:	d818      	bhi.n	80072c0 <USB_EPStartXfer+0x1036>
 800728e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007292:	085b      	lsrs	r3, r3, #1
 8007294:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007298:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800729c:	f003 0301 	and.w	r3, r3, #1
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d004      	beq.n	80072ae <USB_EPStartXfer+0x1024>
 80072a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80072a8:	3301      	adds	r3, #1
 80072aa:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80072ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80072b2:	b29b      	uxth	r3, r3
 80072b4:	029b      	lsls	r3, r3, #10
 80072b6:	b29a      	uxth	r2, r3
 80072b8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80072bc:	801a      	strh	r2, [r3, #0]
 80072be:	e042      	b.n	8007346 <USB_EPStartXfer+0x10bc>
 80072c0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80072c4:	095b      	lsrs	r3, r3, #5
 80072c6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80072ca:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80072ce:	f003 031f 	and.w	r3, r3, #31
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d104      	bne.n	80072e0 <USB_EPStartXfer+0x1056>
 80072d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80072da:	3b01      	subs	r3, #1
 80072dc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80072e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80072e4:	b29b      	uxth	r3, r3
 80072e6:	029b      	lsls	r3, r3, #10
 80072e8:	b29b      	uxth	r3, r3
 80072ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80072ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80072f2:	b29a      	uxth	r2, r3
 80072f4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80072f8:	801a      	strh	r2, [r3, #0]
 80072fa:	e024      	b.n	8007346 <USB_EPStartXfer+0x10bc>
 80072fc:	463b      	mov	r3, r7
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	785b      	ldrb	r3, [r3, #1]
 8007302:	2b01      	cmp	r3, #1
 8007304:	d11f      	bne.n	8007346 <USB_EPStartXfer+0x10bc>
 8007306:	1d3b      	adds	r3, r7, #4
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800730e:	1d3b      	adds	r3, r7, #4
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007316:	b29b      	uxth	r3, r3
 8007318:	461a      	mov	r2, r3
 800731a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800731e:	4413      	add	r3, r2
 8007320:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007324:	463b      	mov	r3, r7
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	781b      	ldrb	r3, [r3, #0]
 800732a:	00da      	lsls	r2, r3, #3
 800732c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007330:	4413      	add	r3, r2
 8007332:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007336:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800733a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800733e:	b29a      	uxth	r2, r3
 8007340:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007344:	801a      	strh	r2, [r3, #0]
 8007346:	1d3b      	adds	r3, r7, #4
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800734e:	463b      	mov	r3, r7
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	785b      	ldrb	r3, [r3, #1]
 8007354:	2b00      	cmp	r3, #0
 8007356:	d16f      	bne.n	8007438 <USB_EPStartXfer+0x11ae>
 8007358:	1d3b      	adds	r3, r7, #4
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007360:	1d3b      	adds	r3, r7, #4
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007368:	b29b      	uxth	r3, r3
 800736a:	461a      	mov	r2, r3
 800736c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007370:	4413      	add	r3, r2
 8007372:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007376:	463b      	mov	r3, r7
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	781b      	ldrb	r3, [r3, #0]
 800737c:	00da      	lsls	r2, r3, #3
 800737e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007382:	4413      	add	r3, r2
 8007384:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007388:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800738c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007390:	2b00      	cmp	r3, #0
 8007392:	d116      	bne.n	80073c2 <USB_EPStartXfer+0x1138>
 8007394:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007398:	881b      	ldrh	r3, [r3, #0]
 800739a:	b29b      	uxth	r3, r3
 800739c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80073a0:	b29a      	uxth	r2, r3
 80073a2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80073a6:	801a      	strh	r2, [r3, #0]
 80073a8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80073ac:	881b      	ldrh	r3, [r3, #0]
 80073ae:	b29b      	uxth	r3, r3
 80073b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80073b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80073b8:	b29a      	uxth	r2, r3
 80073ba:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80073be:	801a      	strh	r2, [r3, #0]
 80073c0:	e05e      	b.n	8007480 <USB_EPStartXfer+0x11f6>
 80073c2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80073c6:	2b3e      	cmp	r3, #62	; 0x3e
 80073c8:	d818      	bhi.n	80073fc <USB_EPStartXfer+0x1172>
 80073ca:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80073ce:	085b      	lsrs	r3, r3, #1
 80073d0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80073d4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80073d8:	f003 0301 	and.w	r3, r3, #1
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d004      	beq.n	80073ea <USB_EPStartXfer+0x1160>
 80073e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80073e4:	3301      	adds	r3, #1
 80073e6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80073ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80073ee:	b29b      	uxth	r3, r3
 80073f0:	029b      	lsls	r3, r3, #10
 80073f2:	b29a      	uxth	r2, r3
 80073f4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80073f8:	801a      	strh	r2, [r3, #0]
 80073fa:	e041      	b.n	8007480 <USB_EPStartXfer+0x11f6>
 80073fc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007400:	095b      	lsrs	r3, r3, #5
 8007402:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007406:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800740a:	f003 031f 	and.w	r3, r3, #31
 800740e:	2b00      	cmp	r3, #0
 8007410:	d104      	bne.n	800741c <USB_EPStartXfer+0x1192>
 8007412:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007416:	3b01      	subs	r3, #1
 8007418:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800741c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007420:	b29b      	uxth	r3, r3
 8007422:	029b      	lsls	r3, r3, #10
 8007424:	b29b      	uxth	r3, r3
 8007426:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800742a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800742e:	b29a      	uxth	r2, r3
 8007430:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007434:	801a      	strh	r2, [r3, #0]
 8007436:	e023      	b.n	8007480 <USB_EPStartXfer+0x11f6>
 8007438:	463b      	mov	r3, r7
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	785b      	ldrb	r3, [r3, #1]
 800743e:	2b01      	cmp	r3, #1
 8007440:	d11e      	bne.n	8007480 <USB_EPStartXfer+0x11f6>
 8007442:	1d3b      	adds	r3, r7, #4
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800744a:	b29b      	uxth	r3, r3
 800744c:	461a      	mov	r2, r3
 800744e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007452:	4413      	add	r3, r2
 8007454:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007458:	463b      	mov	r3, r7
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	781b      	ldrb	r3, [r3, #0]
 800745e:	00da      	lsls	r2, r3, #3
 8007460:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007464:	4413      	add	r3, r2
 8007466:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800746a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800746e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007472:	b29a      	uxth	r2, r3
 8007474:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007478:	801a      	strh	r2, [r3, #0]
 800747a:	e001      	b.n	8007480 <USB_EPStartXfer+0x11f6>
      }
      else
      {
        return HAL_ERROR;
 800747c:	2301      	movs	r3, #1
 800747e:	e02e      	b.n	80074de <USB_EPStartXfer+0x1254>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007480:	1d3b      	adds	r3, r7, #4
 8007482:	681a      	ldr	r2, [r3, #0]
 8007484:	463b      	mov	r3, r7
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	781b      	ldrb	r3, [r3, #0]
 800748a:	009b      	lsls	r3, r3, #2
 800748c:	4413      	add	r3, r2
 800748e:	881b      	ldrh	r3, [r3, #0]
 8007490:	b29b      	uxth	r3, r3
 8007492:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007496:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800749a:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 800749e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80074a2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80074a6:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 80074aa:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80074ae:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80074b2:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 80074b6:	1d3b      	adds	r3, r7, #4
 80074b8:	681a      	ldr	r2, [r3, #0]
 80074ba:	463b      	mov	r3, r7
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	781b      	ldrb	r3, [r3, #0]
 80074c0:	009b      	lsls	r3, r3, #2
 80074c2:	441a      	add	r2, r3
 80074c4:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80074c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80074cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80074d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80074d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80074d8:	b29b      	uxth	r3, r3
 80074da:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80074dc:	2300      	movs	r3, #0
}
 80074de:	4618      	mov	r0, r3
 80074e0:	f507 7788 	add.w	r7, r7, #272	; 0x110
 80074e4:	46bd      	mov	sp, r7
 80074e6:	bd80      	pop	{r7, pc}

080074e8 <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80074e8:	b480      	push	{r7}
 80074ea:	b085      	sub	sp, #20
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	6078      	str	r0, [r7, #4]
 80074f0:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80074f2:	683b      	ldr	r3, [r7, #0]
 80074f4:	785b      	ldrb	r3, [r3, #1]
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d020      	beq.n	800753c <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80074fa:	687a      	ldr	r2, [r7, #4]
 80074fc:	683b      	ldr	r3, [r7, #0]
 80074fe:	781b      	ldrb	r3, [r3, #0]
 8007500:	009b      	lsls	r3, r3, #2
 8007502:	4413      	add	r3, r2
 8007504:	881b      	ldrh	r3, [r3, #0]
 8007506:	b29b      	uxth	r3, r3
 8007508:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800750c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007510:	81bb      	strh	r3, [r7, #12]
 8007512:	89bb      	ldrh	r3, [r7, #12]
 8007514:	f083 0310 	eor.w	r3, r3, #16
 8007518:	81bb      	strh	r3, [r7, #12]
 800751a:	687a      	ldr	r2, [r7, #4]
 800751c:	683b      	ldr	r3, [r7, #0]
 800751e:	781b      	ldrb	r3, [r3, #0]
 8007520:	009b      	lsls	r3, r3, #2
 8007522:	441a      	add	r2, r3
 8007524:	89bb      	ldrh	r3, [r7, #12]
 8007526:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800752a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800752e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007532:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007536:	b29b      	uxth	r3, r3
 8007538:	8013      	strh	r3, [r2, #0]
 800753a:	e01f      	b.n	800757c <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800753c:	687a      	ldr	r2, [r7, #4]
 800753e:	683b      	ldr	r3, [r7, #0]
 8007540:	781b      	ldrb	r3, [r3, #0]
 8007542:	009b      	lsls	r3, r3, #2
 8007544:	4413      	add	r3, r2
 8007546:	881b      	ldrh	r3, [r3, #0]
 8007548:	b29b      	uxth	r3, r3
 800754a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800754e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007552:	81fb      	strh	r3, [r7, #14]
 8007554:	89fb      	ldrh	r3, [r7, #14]
 8007556:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800755a:	81fb      	strh	r3, [r7, #14]
 800755c:	687a      	ldr	r2, [r7, #4]
 800755e:	683b      	ldr	r3, [r7, #0]
 8007560:	781b      	ldrb	r3, [r3, #0]
 8007562:	009b      	lsls	r3, r3, #2
 8007564:	441a      	add	r2, r3
 8007566:	89fb      	ldrh	r3, [r7, #14]
 8007568:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800756c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007570:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007574:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007578:	b29b      	uxth	r3, r3
 800757a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800757c:	2300      	movs	r3, #0
}
 800757e:	4618      	mov	r0, r3
 8007580:	3714      	adds	r7, #20
 8007582:	46bd      	mov	sp, r7
 8007584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007588:	4770      	bx	lr

0800758a <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800758a:	b480      	push	{r7}
 800758c:	b087      	sub	sp, #28
 800758e:	af00      	add	r7, sp, #0
 8007590:	6078      	str	r0, [r7, #4]
 8007592:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007594:	683b      	ldr	r3, [r7, #0]
 8007596:	7b1b      	ldrb	r3, [r3, #12]
 8007598:	2b00      	cmp	r3, #0
 800759a:	f040 809d 	bne.w	80076d8 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800759e:	683b      	ldr	r3, [r7, #0]
 80075a0:	785b      	ldrb	r3, [r3, #1]
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d04c      	beq.n	8007640 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80075a6:	687a      	ldr	r2, [r7, #4]
 80075a8:	683b      	ldr	r3, [r7, #0]
 80075aa:	781b      	ldrb	r3, [r3, #0]
 80075ac:	009b      	lsls	r3, r3, #2
 80075ae:	4413      	add	r3, r2
 80075b0:	881b      	ldrh	r3, [r3, #0]
 80075b2:	823b      	strh	r3, [r7, #16]
 80075b4:	8a3b      	ldrh	r3, [r7, #16]
 80075b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d01b      	beq.n	80075f6 <USB_EPClearStall+0x6c>
 80075be:	687a      	ldr	r2, [r7, #4]
 80075c0:	683b      	ldr	r3, [r7, #0]
 80075c2:	781b      	ldrb	r3, [r3, #0]
 80075c4:	009b      	lsls	r3, r3, #2
 80075c6:	4413      	add	r3, r2
 80075c8:	881b      	ldrh	r3, [r3, #0]
 80075ca:	b29b      	uxth	r3, r3
 80075cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80075d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075d4:	81fb      	strh	r3, [r7, #14]
 80075d6:	687a      	ldr	r2, [r7, #4]
 80075d8:	683b      	ldr	r3, [r7, #0]
 80075da:	781b      	ldrb	r3, [r3, #0]
 80075dc:	009b      	lsls	r3, r3, #2
 80075de:	441a      	add	r2, r3
 80075e0:	89fb      	ldrh	r3, [r7, #14]
 80075e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80075e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80075ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80075ee:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80075f2:	b29b      	uxth	r3, r3
 80075f4:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80075f6:	683b      	ldr	r3, [r7, #0]
 80075f8:	78db      	ldrb	r3, [r3, #3]
 80075fa:	2b01      	cmp	r3, #1
 80075fc:	d06c      	beq.n	80076d8 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80075fe:	687a      	ldr	r2, [r7, #4]
 8007600:	683b      	ldr	r3, [r7, #0]
 8007602:	781b      	ldrb	r3, [r3, #0]
 8007604:	009b      	lsls	r3, r3, #2
 8007606:	4413      	add	r3, r2
 8007608:	881b      	ldrh	r3, [r3, #0]
 800760a:	b29b      	uxth	r3, r3
 800760c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007610:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007614:	81bb      	strh	r3, [r7, #12]
 8007616:	89bb      	ldrh	r3, [r7, #12]
 8007618:	f083 0320 	eor.w	r3, r3, #32
 800761c:	81bb      	strh	r3, [r7, #12]
 800761e:	687a      	ldr	r2, [r7, #4]
 8007620:	683b      	ldr	r3, [r7, #0]
 8007622:	781b      	ldrb	r3, [r3, #0]
 8007624:	009b      	lsls	r3, r3, #2
 8007626:	441a      	add	r2, r3
 8007628:	89bb      	ldrh	r3, [r7, #12]
 800762a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800762e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007632:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007636:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800763a:	b29b      	uxth	r3, r3
 800763c:	8013      	strh	r3, [r2, #0]
 800763e:	e04b      	b.n	80076d8 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007640:	687a      	ldr	r2, [r7, #4]
 8007642:	683b      	ldr	r3, [r7, #0]
 8007644:	781b      	ldrb	r3, [r3, #0]
 8007646:	009b      	lsls	r3, r3, #2
 8007648:	4413      	add	r3, r2
 800764a:	881b      	ldrh	r3, [r3, #0]
 800764c:	82fb      	strh	r3, [r7, #22]
 800764e:	8afb      	ldrh	r3, [r7, #22]
 8007650:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007654:	2b00      	cmp	r3, #0
 8007656:	d01b      	beq.n	8007690 <USB_EPClearStall+0x106>
 8007658:	687a      	ldr	r2, [r7, #4]
 800765a:	683b      	ldr	r3, [r7, #0]
 800765c:	781b      	ldrb	r3, [r3, #0]
 800765e:	009b      	lsls	r3, r3, #2
 8007660:	4413      	add	r3, r2
 8007662:	881b      	ldrh	r3, [r3, #0]
 8007664:	b29b      	uxth	r3, r3
 8007666:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800766a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800766e:	82bb      	strh	r3, [r7, #20]
 8007670:	687a      	ldr	r2, [r7, #4]
 8007672:	683b      	ldr	r3, [r7, #0]
 8007674:	781b      	ldrb	r3, [r3, #0]
 8007676:	009b      	lsls	r3, r3, #2
 8007678:	441a      	add	r2, r3
 800767a:	8abb      	ldrh	r3, [r7, #20]
 800767c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007680:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007684:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007688:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800768c:	b29b      	uxth	r3, r3
 800768e:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007690:	687a      	ldr	r2, [r7, #4]
 8007692:	683b      	ldr	r3, [r7, #0]
 8007694:	781b      	ldrb	r3, [r3, #0]
 8007696:	009b      	lsls	r3, r3, #2
 8007698:	4413      	add	r3, r2
 800769a:	881b      	ldrh	r3, [r3, #0]
 800769c:	b29b      	uxth	r3, r3
 800769e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80076a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076a6:	827b      	strh	r3, [r7, #18]
 80076a8:	8a7b      	ldrh	r3, [r7, #18]
 80076aa:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80076ae:	827b      	strh	r3, [r7, #18]
 80076b0:	8a7b      	ldrh	r3, [r7, #18]
 80076b2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80076b6:	827b      	strh	r3, [r7, #18]
 80076b8:	687a      	ldr	r2, [r7, #4]
 80076ba:	683b      	ldr	r3, [r7, #0]
 80076bc:	781b      	ldrb	r3, [r3, #0]
 80076be:	009b      	lsls	r3, r3, #2
 80076c0:	441a      	add	r2, r3
 80076c2:	8a7b      	ldrh	r3, [r7, #18]
 80076c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80076c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80076cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80076d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80076d4:	b29b      	uxth	r3, r3
 80076d6:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80076d8:	2300      	movs	r3, #0
}
 80076da:	4618      	mov	r0, r3
 80076dc:	371c      	adds	r7, #28
 80076de:	46bd      	mov	sp, r7
 80076e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e4:	4770      	bx	lr

080076e6 <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80076e6:	b480      	push	{r7}
 80076e8:	b083      	sub	sp, #12
 80076ea:	af00      	add	r7, sp, #0
 80076ec:	6078      	str	r0, [r7, #4]
 80076ee:	460b      	mov	r3, r1
 80076f0:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80076f2:	78fb      	ldrb	r3, [r7, #3]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d103      	bne.n	8007700 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	2280      	movs	r2, #128	; 0x80
 80076fc:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8007700:	2300      	movs	r3, #0
}
 8007702:	4618      	mov	r0, r3
 8007704:	370c      	adds	r7, #12
 8007706:	46bd      	mov	sp, r7
 8007708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770c:	4770      	bx	lr

0800770e <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800770e:	b480      	push	{r7}
 8007710:	b083      	sub	sp, #12
 8007712:	af00      	add	r7, sp, #0
 8007714:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800771c:	b29b      	uxth	r3, r3
 800771e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007722:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007726:	b29a      	uxth	r2, r3
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800772e:	2300      	movs	r3, #0
}
 8007730:	4618      	mov	r0, r3
 8007732:	370c      	adds	r7, #12
 8007734:	46bd      	mov	sp, r7
 8007736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773a:	4770      	bx	lr

0800773c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800773c:	b480      	push	{r7}
 800773e:	b085      	sub	sp, #20
 8007740:	af00      	add	r7, sp, #0
 8007742:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800774a:	b29b      	uxth	r3, r3
 800774c:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800774e:	68fb      	ldr	r3, [r7, #12]
}
 8007750:	4618      	mov	r0, r3
 8007752:	3714      	adds	r7, #20
 8007754:	46bd      	mov	sp, r7
 8007756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775a:	4770      	bx	lr

0800775c <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800775c:	b480      	push	{r7}
 800775e:	b083      	sub	sp, #12
 8007760:	af00      	add	r7, sp, #0
 8007762:	6078      	str	r0, [r7, #4]
 8007764:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8007766:	2300      	movs	r3, #0
}
 8007768:	4618      	mov	r0, r3
 800776a:	370c      	adds	r7, #12
 800776c:	46bd      	mov	sp, r7
 800776e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007772:	4770      	bx	lr

08007774 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007774:	b480      	push	{r7}
 8007776:	b08d      	sub	sp, #52	; 0x34
 8007778:	af00      	add	r7, sp, #0
 800777a:	60f8      	str	r0, [r7, #12]
 800777c:	60b9      	str	r1, [r7, #8]
 800777e:	4611      	mov	r1, r2
 8007780:	461a      	mov	r2, r3
 8007782:	460b      	mov	r3, r1
 8007784:	80fb      	strh	r3, [r7, #6]
 8007786:	4613      	mov	r3, r2
 8007788:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800778a:	88bb      	ldrh	r3, [r7, #4]
 800778c:	3301      	adds	r3, #1
 800778e:	085b      	lsrs	r3, r3, #1
 8007790:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007796:	68bb      	ldr	r3, [r7, #8]
 8007798:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800779a:	88fa      	ldrh	r2, [r7, #6]
 800779c:	69fb      	ldr	r3, [r7, #28]
 800779e:	4413      	add	r3, r2
 80077a0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80077a4:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 80077a6:	6a3b      	ldr	r3, [r7, #32]
 80077a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80077aa:	e01b      	b.n	80077e4 <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 80077ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077ae:	781b      	ldrb	r3, [r3, #0]
 80077b0:	61bb      	str	r3, [r7, #24]
    pBuf++;
 80077b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077b4:	3301      	adds	r3, #1
 80077b6:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 80077b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077ba:	781b      	ldrb	r3, [r3, #0]
 80077bc:	b29b      	uxth	r3, r3
 80077be:	021b      	lsls	r3, r3, #8
 80077c0:	b29b      	uxth	r3, r3
 80077c2:	461a      	mov	r2, r3
 80077c4:	69bb      	ldr	r3, [r7, #24]
 80077c6:	4313      	orrs	r3, r2
 80077c8:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 80077ca:	697b      	ldr	r3, [r7, #20]
 80077cc:	b29a      	uxth	r2, r3
 80077ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077d0:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80077d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077d4:	3302      	adds	r3, #2
 80077d6:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 80077d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077da:	3301      	adds	r3, #1
 80077dc:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 80077de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077e0:	3b01      	subs	r3, #1
 80077e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80077e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d1e0      	bne.n	80077ac <USB_WritePMA+0x38>
  }
}
 80077ea:	bf00      	nop
 80077ec:	3734      	adds	r7, #52	; 0x34
 80077ee:	46bd      	mov	sp, r7
 80077f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f4:	4770      	bx	lr

080077f6 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80077f6:	b480      	push	{r7}
 80077f8:	b08b      	sub	sp, #44	; 0x2c
 80077fa:	af00      	add	r7, sp, #0
 80077fc:	60f8      	str	r0, [r7, #12]
 80077fe:	60b9      	str	r1, [r7, #8]
 8007800:	4611      	mov	r1, r2
 8007802:	461a      	mov	r2, r3
 8007804:	460b      	mov	r3, r1
 8007806:	80fb      	strh	r3, [r7, #6]
 8007808:	4613      	mov	r3, r2
 800780a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800780c:	88bb      	ldrh	r3, [r7, #4]
 800780e:	085b      	lsrs	r3, r3, #1
 8007810:	b29b      	uxth	r3, r3
 8007812:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007818:	68bb      	ldr	r3, [r7, #8]
 800781a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800781c:	88fa      	ldrh	r2, [r7, #6]
 800781e:	697b      	ldr	r3, [r7, #20]
 8007820:	4413      	add	r3, r2
 8007822:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007826:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8007828:	69bb      	ldr	r3, [r7, #24]
 800782a:	627b      	str	r3, [r7, #36]	; 0x24
 800782c:	e018      	b.n	8007860 <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800782e:	6a3b      	ldr	r3, [r7, #32]
 8007830:	881b      	ldrh	r3, [r3, #0]
 8007832:	b29b      	uxth	r3, r3
 8007834:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8007836:	6a3b      	ldr	r3, [r7, #32]
 8007838:	3302      	adds	r3, #2
 800783a:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800783c:	693b      	ldr	r3, [r7, #16]
 800783e:	b2da      	uxtb	r2, r3
 8007840:	69fb      	ldr	r3, [r7, #28]
 8007842:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007844:	69fb      	ldr	r3, [r7, #28]
 8007846:	3301      	adds	r3, #1
 8007848:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800784a:	693b      	ldr	r3, [r7, #16]
 800784c:	0a1b      	lsrs	r3, r3, #8
 800784e:	b2da      	uxtb	r2, r3
 8007850:	69fb      	ldr	r3, [r7, #28]
 8007852:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007854:	69fb      	ldr	r3, [r7, #28]
 8007856:	3301      	adds	r3, #1
 8007858:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 800785a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800785c:	3b01      	subs	r3, #1
 800785e:	627b      	str	r3, [r7, #36]	; 0x24
 8007860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007862:	2b00      	cmp	r3, #0
 8007864:	d1e3      	bne.n	800782e <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8007866:	88bb      	ldrh	r3, [r7, #4]
 8007868:	f003 0301 	and.w	r3, r3, #1
 800786c:	b29b      	uxth	r3, r3
 800786e:	2b00      	cmp	r3, #0
 8007870:	d007      	beq.n	8007882 <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 8007872:	6a3b      	ldr	r3, [r7, #32]
 8007874:	881b      	ldrh	r3, [r3, #0]
 8007876:	b29b      	uxth	r3, r3
 8007878:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800787a:	693b      	ldr	r3, [r7, #16]
 800787c:	b2da      	uxtb	r2, r3
 800787e:	69fb      	ldr	r3, [r7, #28]
 8007880:	701a      	strb	r2, [r3, #0]
  }
}
 8007882:	bf00      	nop
 8007884:	372c      	adds	r7, #44	; 0x2c
 8007886:	46bd      	mov	sp, r7
 8007888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788c:	4770      	bx	lr

0800788e <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800788e:	b580      	push	{r7, lr}
 8007890:	b084      	sub	sp, #16
 8007892:	af00      	add	r7, sp, #0
 8007894:	6078      	str	r0, [r7, #4]
 8007896:	460b      	mov	r3, r1
 8007898:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800789a:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800789e:	f002 f89d 	bl	80099dc <USBD_static_malloc>
 80078a2:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d105      	bne.n	80078b6 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	2200      	movs	r2, #0
 80078ae:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 80078b2:	2302      	movs	r3, #2
 80078b4:	e066      	b.n	8007984 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	68fa      	ldr	r2, [r7, #12]
 80078ba:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	7c1b      	ldrb	r3, [r3, #16]
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d119      	bne.n	80078fa <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80078c6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80078ca:	2202      	movs	r2, #2
 80078cc:	2181      	movs	r1, #129	; 0x81
 80078ce:	6878      	ldr	r0, [r7, #4]
 80078d0:	f001 ff29 	bl	8009726 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	2201      	movs	r2, #1
 80078d8:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80078da:	f44f 7300 	mov.w	r3, #512	; 0x200
 80078de:	2202      	movs	r2, #2
 80078e0:	2101      	movs	r1, #1
 80078e2:	6878      	ldr	r0, [r7, #4]
 80078e4:	f001 ff1f 	bl	8009726 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	2201      	movs	r2, #1
 80078ec:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	2210      	movs	r2, #16
 80078f4:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 80078f8:	e016      	b.n	8007928 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80078fa:	2340      	movs	r3, #64	; 0x40
 80078fc:	2202      	movs	r2, #2
 80078fe:	2181      	movs	r1, #129	; 0x81
 8007900:	6878      	ldr	r0, [r7, #4]
 8007902:	f001 ff10 	bl	8009726 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	2201      	movs	r2, #1
 800790a:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800790c:	2340      	movs	r3, #64	; 0x40
 800790e:	2202      	movs	r2, #2
 8007910:	2101      	movs	r1, #1
 8007912:	6878      	ldr	r0, [r7, #4]
 8007914:	f001 ff07 	bl	8009726 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	2201      	movs	r2, #1
 800791c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	2210      	movs	r2, #16
 8007924:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007928:	2308      	movs	r3, #8
 800792a:	2203      	movs	r2, #3
 800792c:	2182      	movs	r1, #130	; 0x82
 800792e:	6878      	ldr	r0, [r7, #4]
 8007930:	f001 fef9 	bl	8009726 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	2201      	movs	r2, #1
 8007938:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	2200      	movs	r2, #0
 800794a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	2200      	movs	r2, #0
 8007952:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	7c1b      	ldrb	r3, [r3, #16]
 800795a:	2b00      	cmp	r3, #0
 800795c:	d109      	bne.n	8007972 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007964:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007968:	2101      	movs	r1, #1
 800796a:	6878      	ldr	r0, [r7, #4]
 800796c:	f001 ffcb 	bl	8009906 <USBD_LL_PrepareReceive>
 8007970:	e007      	b.n	8007982 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007978:	2340      	movs	r3, #64	; 0x40
 800797a:	2101      	movs	r1, #1
 800797c:	6878      	ldr	r0, [r7, #4]
 800797e:	f001 ffc2 	bl	8009906 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007982:	2300      	movs	r3, #0
}
 8007984:	4618      	mov	r0, r3
 8007986:	3710      	adds	r7, #16
 8007988:	46bd      	mov	sp, r7
 800798a:	bd80      	pop	{r7, pc}

0800798c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800798c:	b580      	push	{r7, lr}
 800798e:	b082      	sub	sp, #8
 8007990:	af00      	add	r7, sp, #0
 8007992:	6078      	str	r0, [r7, #4]
 8007994:	460b      	mov	r3, r1
 8007996:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8007998:	2181      	movs	r1, #129	; 0x81
 800799a:	6878      	ldr	r0, [r7, #4]
 800799c:	f001 fee9 	bl	8009772 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	2200      	movs	r2, #0
 80079a4:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80079a6:	2101      	movs	r1, #1
 80079a8:	6878      	ldr	r0, [r7, #4]
 80079aa:	f001 fee2 	bl	8009772 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	2200      	movs	r2, #0
 80079b2:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80079b6:	2182      	movs	r1, #130	; 0x82
 80079b8:	6878      	ldr	r0, [r7, #4]
 80079ba:	f001 feda 	bl	8009772 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	2200      	movs	r2, #0
 80079c2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	2200      	movs	r2, #0
 80079ca:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d00e      	beq.n	80079f6 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80079de:	685b      	ldr	r3, [r3, #4]
 80079e0:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80079e8:	4618      	mov	r0, r3
 80079ea:	f002 f805 	bl	80099f8 <USBD_static_free>
    pdev->pClassData = NULL;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	2200      	movs	r2, #0
 80079f2:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80079f6:	2300      	movs	r3, #0
}
 80079f8:	4618      	mov	r0, r3
 80079fa:	3708      	adds	r7, #8
 80079fc:	46bd      	mov	sp, r7
 80079fe:	bd80      	pop	{r7, pc}

08007a00 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007a00:	b580      	push	{r7, lr}
 8007a02:	b086      	sub	sp, #24
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	6078      	str	r0, [r7, #4]
 8007a08:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007a10:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8007a12:	2300      	movs	r3, #0
 8007a14:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8007a16:	2300      	movs	r3, #0
 8007a18:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8007a1a:	2300      	movs	r3, #0
 8007a1c:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007a1e:	683b      	ldr	r3, [r7, #0]
 8007a20:	781b      	ldrb	r3, [r3, #0]
 8007a22:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d03a      	beq.n	8007aa0 <USBD_CDC_Setup+0xa0>
 8007a2a:	2b20      	cmp	r3, #32
 8007a2c:	f040 8097 	bne.w	8007b5e <USBD_CDC_Setup+0x15e>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8007a30:	683b      	ldr	r3, [r7, #0]
 8007a32:	88db      	ldrh	r3, [r3, #6]
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d029      	beq.n	8007a8c <USBD_CDC_Setup+0x8c>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8007a38:	683b      	ldr	r3, [r7, #0]
 8007a3a:	781b      	ldrb	r3, [r3, #0]
 8007a3c:	b25b      	sxtb	r3, r3
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	da11      	bge.n	8007a66 <USBD_CDC_Setup+0x66>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007a48:	689b      	ldr	r3, [r3, #8]
 8007a4a:	683a      	ldr	r2, [r7, #0]
 8007a4c:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8007a4e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007a50:	683a      	ldr	r2, [r7, #0]
 8007a52:	88d2      	ldrh	r2, [r2, #6]
 8007a54:	4798      	blx	r3
                                                            req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 8007a56:	6939      	ldr	r1, [r7, #16]
 8007a58:	683b      	ldr	r3, [r7, #0]
 8007a5a:	88db      	ldrh	r3, [r3, #6]
 8007a5c:	461a      	mov	r2, r3
 8007a5e:	6878      	ldr	r0, [r7, #4]
 8007a60:	f001 fa8d 	bl	8008f7e <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8007a64:	e082      	b.n	8007b6c <USBD_CDC_Setup+0x16c>
          hcdc->CmdOpCode = req->bRequest;
 8007a66:	683b      	ldr	r3, [r7, #0]
 8007a68:	785a      	ldrb	r2, [r3, #1]
 8007a6a:	693b      	ldr	r3, [r7, #16]
 8007a6c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8007a70:	683b      	ldr	r3, [r7, #0]
 8007a72:	88db      	ldrh	r3, [r3, #6]
 8007a74:	b2da      	uxtb	r2, r3
 8007a76:	693b      	ldr	r3, [r7, #16]
 8007a78:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8007a7c:	6939      	ldr	r1, [r7, #16]
 8007a7e:	683b      	ldr	r3, [r7, #0]
 8007a80:	88db      	ldrh	r3, [r3, #6]
 8007a82:	461a      	mov	r2, r3
 8007a84:	6878      	ldr	r0, [r7, #4]
 8007a86:	f001 faa6 	bl	8008fd6 <USBD_CtlPrepareRx>
      break;
 8007a8a:	e06f      	b.n	8007b6c <USBD_CDC_Setup+0x16c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007a92:	689b      	ldr	r3, [r3, #8]
 8007a94:	683a      	ldr	r2, [r7, #0]
 8007a96:	7850      	ldrb	r0, [r2, #1]
 8007a98:	2200      	movs	r2, #0
 8007a9a:	6839      	ldr	r1, [r7, #0]
 8007a9c:	4798      	blx	r3
      break;
 8007a9e:	e065      	b.n	8007b6c <USBD_CDC_Setup+0x16c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007aa0:	683b      	ldr	r3, [r7, #0]
 8007aa2:	785b      	ldrb	r3, [r3, #1]
 8007aa4:	2b0b      	cmp	r3, #11
 8007aa6:	d84f      	bhi.n	8007b48 <USBD_CDC_Setup+0x148>
 8007aa8:	a201      	add	r2, pc, #4	; (adr r2, 8007ab0 <USBD_CDC_Setup+0xb0>)
 8007aaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007aae:	bf00      	nop
 8007ab0:	08007ae1 	.word	0x08007ae1
 8007ab4:	08007b57 	.word	0x08007b57
 8007ab8:	08007b49 	.word	0x08007b49
 8007abc:	08007b49 	.word	0x08007b49
 8007ac0:	08007b49 	.word	0x08007b49
 8007ac4:	08007b49 	.word	0x08007b49
 8007ac8:	08007b49 	.word	0x08007b49
 8007acc:	08007b49 	.word	0x08007b49
 8007ad0:	08007b49 	.word	0x08007b49
 8007ad4:	08007b49 	.word	0x08007b49
 8007ad8:	08007b09 	.word	0x08007b09
 8007adc:	08007b31 	.word	0x08007b31
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ae6:	2b03      	cmp	r3, #3
 8007ae8:	d107      	bne.n	8007afa <USBD_CDC_Setup+0xfa>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007aea:	f107 030c 	add.w	r3, r7, #12
 8007aee:	2202      	movs	r2, #2
 8007af0:	4619      	mov	r1, r3
 8007af2:	6878      	ldr	r0, [r7, #4]
 8007af4:	f001 fa43 	bl	8008f7e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007af8:	e030      	b.n	8007b5c <USBD_CDC_Setup+0x15c>
            USBD_CtlError(pdev, req);
 8007afa:	6839      	ldr	r1, [r7, #0]
 8007afc:	6878      	ldr	r0, [r7, #4]
 8007afe:	f001 f9cd 	bl	8008e9c <USBD_CtlError>
            ret = USBD_FAIL;
 8007b02:	2303      	movs	r3, #3
 8007b04:	75fb      	strb	r3, [r7, #23]
          break;
 8007b06:	e029      	b.n	8007b5c <USBD_CDC_Setup+0x15c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b0e:	2b03      	cmp	r3, #3
 8007b10:	d107      	bne.n	8007b22 <USBD_CDC_Setup+0x122>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007b12:	f107 030f 	add.w	r3, r7, #15
 8007b16:	2201      	movs	r2, #1
 8007b18:	4619      	mov	r1, r3
 8007b1a:	6878      	ldr	r0, [r7, #4]
 8007b1c:	f001 fa2f 	bl	8008f7e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007b20:	e01c      	b.n	8007b5c <USBD_CDC_Setup+0x15c>
            USBD_CtlError(pdev, req);
 8007b22:	6839      	ldr	r1, [r7, #0]
 8007b24:	6878      	ldr	r0, [r7, #4]
 8007b26:	f001 f9b9 	bl	8008e9c <USBD_CtlError>
            ret = USBD_FAIL;
 8007b2a:	2303      	movs	r3, #3
 8007b2c:	75fb      	strb	r3, [r7, #23]
          break;
 8007b2e:	e015      	b.n	8007b5c <USBD_CDC_Setup+0x15c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b36:	2b03      	cmp	r3, #3
 8007b38:	d00f      	beq.n	8007b5a <USBD_CDC_Setup+0x15a>
          {
            USBD_CtlError(pdev, req);
 8007b3a:	6839      	ldr	r1, [r7, #0]
 8007b3c:	6878      	ldr	r0, [r7, #4]
 8007b3e:	f001 f9ad 	bl	8008e9c <USBD_CtlError>
            ret = USBD_FAIL;
 8007b42:	2303      	movs	r3, #3
 8007b44:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007b46:	e008      	b.n	8007b5a <USBD_CDC_Setup+0x15a>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007b48:	6839      	ldr	r1, [r7, #0]
 8007b4a:	6878      	ldr	r0, [r7, #4]
 8007b4c:	f001 f9a6 	bl	8008e9c <USBD_CtlError>
          ret = USBD_FAIL;
 8007b50:	2303      	movs	r3, #3
 8007b52:	75fb      	strb	r3, [r7, #23]
          break;
 8007b54:	e002      	b.n	8007b5c <USBD_CDC_Setup+0x15c>
          break;
 8007b56:	bf00      	nop
 8007b58:	e008      	b.n	8007b6c <USBD_CDC_Setup+0x16c>
          break;
 8007b5a:	bf00      	nop
      }
      break;
 8007b5c:	e006      	b.n	8007b6c <USBD_CDC_Setup+0x16c>

    default:
      USBD_CtlError(pdev, req);
 8007b5e:	6839      	ldr	r1, [r7, #0]
 8007b60:	6878      	ldr	r0, [r7, #4]
 8007b62:	f001 f99b 	bl	8008e9c <USBD_CtlError>
      ret = USBD_FAIL;
 8007b66:	2303      	movs	r3, #3
 8007b68:	75fb      	strb	r3, [r7, #23]
      break;
 8007b6a:	bf00      	nop
  }

  return (uint8_t)ret;
 8007b6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b6e:	4618      	mov	r0, r3
 8007b70:	3718      	adds	r7, #24
 8007b72:	46bd      	mov	sp, r7
 8007b74:	bd80      	pop	{r7, pc}
 8007b76:	bf00      	nop

08007b78 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007b78:	b580      	push	{r7, lr}
 8007b7a:	b084      	sub	sp, #16
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	6078      	str	r0, [r7, #4]
 8007b80:	460b      	mov	r3, r1
 8007b82:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007b8a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d101      	bne.n	8007b9a <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007b96:	2303      	movs	r3, #3
 8007b98:	e04f      	b.n	8007c3a <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007ba0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8007ba2:	78fa      	ldrb	r2, [r7, #3]
 8007ba4:	6879      	ldr	r1, [r7, #4]
 8007ba6:	4613      	mov	r3, r2
 8007ba8:	009b      	lsls	r3, r3, #2
 8007baa:	4413      	add	r3, r2
 8007bac:	009b      	lsls	r3, r3, #2
 8007bae:	440b      	add	r3, r1
 8007bb0:	3318      	adds	r3, #24
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d029      	beq.n	8007c0c <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8007bb8:	78fa      	ldrb	r2, [r7, #3]
 8007bba:	6879      	ldr	r1, [r7, #4]
 8007bbc:	4613      	mov	r3, r2
 8007bbe:	009b      	lsls	r3, r3, #2
 8007bc0:	4413      	add	r3, r2
 8007bc2:	009b      	lsls	r3, r3, #2
 8007bc4:	440b      	add	r3, r1
 8007bc6:	3318      	adds	r3, #24
 8007bc8:	681a      	ldr	r2, [r3, #0]
 8007bca:	78f9      	ldrb	r1, [r7, #3]
 8007bcc:	68f8      	ldr	r0, [r7, #12]
 8007bce:	460b      	mov	r3, r1
 8007bd0:	009b      	lsls	r3, r3, #2
 8007bd2:	440b      	add	r3, r1
 8007bd4:	00db      	lsls	r3, r3, #3
 8007bd6:	4403      	add	r3, r0
 8007bd8:	3338      	adds	r3, #56	; 0x38
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	fbb2 f1f3 	udiv	r1, r2, r3
 8007be0:	fb03 f301 	mul.w	r3, r3, r1
 8007be4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d110      	bne.n	8007c0c <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8007bea:	78fa      	ldrb	r2, [r7, #3]
 8007bec:	6879      	ldr	r1, [r7, #4]
 8007bee:	4613      	mov	r3, r2
 8007bf0:	009b      	lsls	r3, r3, #2
 8007bf2:	4413      	add	r3, r2
 8007bf4:	009b      	lsls	r3, r3, #2
 8007bf6:	440b      	add	r3, r1
 8007bf8:	3318      	adds	r3, #24
 8007bfa:	2200      	movs	r2, #0
 8007bfc:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007bfe:	78f9      	ldrb	r1, [r7, #3]
 8007c00:	2300      	movs	r3, #0
 8007c02:	2200      	movs	r2, #0
 8007c04:	6878      	ldr	r0, [r7, #4]
 8007c06:	f001 fe5d 	bl	80098c4 <USBD_LL_Transmit>
 8007c0a:	e015      	b.n	8007c38 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8007c0c:	68bb      	ldr	r3, [r7, #8]
 8007c0e:	2200      	movs	r2, #0
 8007c10:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007c1a:	691b      	ldr	r3, [r3, #16]
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d00b      	beq.n	8007c38 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007c26:	691b      	ldr	r3, [r3, #16]
 8007c28:	68ba      	ldr	r2, [r7, #8]
 8007c2a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8007c2e:	68ba      	ldr	r2, [r7, #8]
 8007c30:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8007c34:	78fa      	ldrb	r2, [r7, #3]
 8007c36:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8007c38:	2300      	movs	r3, #0
}
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	3710      	adds	r7, #16
 8007c3e:	46bd      	mov	sp, r7
 8007c40:	bd80      	pop	{r7, pc}

08007c42 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007c42:	b580      	push	{r7, lr}
 8007c44:	b084      	sub	sp, #16
 8007c46:	af00      	add	r7, sp, #0
 8007c48:	6078      	str	r0, [r7, #4]
 8007c4a:	460b      	mov	r3, r1
 8007c4c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007c54:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d101      	bne.n	8007c64 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007c60:	2303      	movs	r3, #3
 8007c62:	e015      	b.n	8007c90 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007c64:	78fb      	ldrb	r3, [r7, #3]
 8007c66:	4619      	mov	r1, r3
 8007c68:	6878      	ldr	r0, [r7, #4]
 8007c6a:	f001 fe6d 	bl	8009948 <USBD_LL_GetRxDataSize>
 8007c6e:	4602      	mov	r2, r0
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007c7c:	68db      	ldr	r3, [r3, #12]
 8007c7e:	68fa      	ldr	r2, [r7, #12]
 8007c80:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007c84:	68fa      	ldr	r2, [r7, #12]
 8007c86:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007c8a:	4611      	mov	r1, r2
 8007c8c:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007c8e:	2300      	movs	r3, #0
}
 8007c90:	4618      	mov	r0, r3
 8007c92:	3710      	adds	r7, #16
 8007c94:	46bd      	mov	sp, r7
 8007c96:	bd80      	pop	{r7, pc}

08007c98 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007c98:	b580      	push	{r7, lr}
 8007c9a:	b084      	sub	sp, #16
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007ca6:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d015      	beq.n	8007cde <USBD_CDC_EP0_RxReady+0x46>
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007cb8:	2bff      	cmp	r3, #255	; 0xff
 8007cba:	d010      	beq.n	8007cde <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007cc2:	689b      	ldr	r3, [r3, #8]
 8007cc4:	68fa      	ldr	r2, [r7, #12]
 8007cc6:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8007cca:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8007ccc:	68fa      	ldr	r2, [r7, #12]
 8007cce:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007cd2:	b292      	uxth	r2, r2
 8007cd4:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	22ff      	movs	r2, #255	; 0xff
 8007cda:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8007cde:	2300      	movs	r3, #0
}
 8007ce0:	4618      	mov	r0, r3
 8007ce2:	3710      	adds	r7, #16
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	bd80      	pop	{r7, pc}

08007ce8 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007ce8:	b480      	push	{r7}
 8007cea:	b083      	sub	sp, #12
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	2243      	movs	r2, #67	; 0x43
 8007cf4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8007cf6:	4b03      	ldr	r3, [pc, #12]	; (8007d04 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8007cf8:	4618      	mov	r0, r3
 8007cfa:	370c      	adds	r7, #12
 8007cfc:	46bd      	mov	sp, r7
 8007cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d02:	4770      	bx	lr
 8007d04:	200000dc 	.word	0x200000dc

08007d08 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007d08:	b480      	push	{r7}
 8007d0a:	b083      	sub	sp, #12
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	2243      	movs	r2, #67	; 0x43
 8007d14:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8007d16:	4b03      	ldr	r3, [pc, #12]	; (8007d24 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8007d18:	4618      	mov	r0, r3
 8007d1a:	370c      	adds	r7, #12
 8007d1c:	46bd      	mov	sp, r7
 8007d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d22:	4770      	bx	lr
 8007d24:	20000098 	.word	0x20000098

08007d28 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007d28:	b480      	push	{r7}
 8007d2a:	b083      	sub	sp, #12
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	2243      	movs	r2, #67	; 0x43
 8007d34:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8007d36:	4b03      	ldr	r3, [pc, #12]	; (8007d44 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8007d38:	4618      	mov	r0, r3
 8007d3a:	370c      	adds	r7, #12
 8007d3c:	46bd      	mov	sp, r7
 8007d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d42:	4770      	bx	lr
 8007d44:	20000120 	.word	0x20000120

08007d48 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007d48:	b480      	push	{r7}
 8007d4a:	b083      	sub	sp, #12
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	220a      	movs	r2, #10
 8007d54:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8007d56:	4b03      	ldr	r3, [pc, #12]	; (8007d64 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007d58:	4618      	mov	r0, r3
 8007d5a:	370c      	adds	r7, #12
 8007d5c:	46bd      	mov	sp, r7
 8007d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d62:	4770      	bx	lr
 8007d64:	20000054 	.word	0x20000054

08007d68 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007d68:	b480      	push	{r7}
 8007d6a:	b083      	sub	sp, #12
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	6078      	str	r0, [r7, #4]
 8007d70:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007d72:	683b      	ldr	r3, [r7, #0]
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d101      	bne.n	8007d7c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007d78:	2303      	movs	r3, #3
 8007d7a:	e004      	b.n	8007d86 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	683a      	ldr	r2, [r7, #0]
 8007d80:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8007d84:	2300      	movs	r3, #0
}
 8007d86:	4618      	mov	r0, r3
 8007d88:	370c      	adds	r7, #12
 8007d8a:	46bd      	mov	sp, r7
 8007d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d90:	4770      	bx	lr

08007d92 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007d92:	b480      	push	{r7}
 8007d94:	b087      	sub	sp, #28
 8007d96:	af00      	add	r7, sp, #0
 8007d98:	60f8      	str	r0, [r7, #12]
 8007d9a:	60b9      	str	r1, [r7, #8]
 8007d9c:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007da4:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8007da6:	697b      	ldr	r3, [r7, #20]
 8007da8:	68ba      	ldr	r2, [r7, #8]
 8007daa:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007dae:	697b      	ldr	r3, [r7, #20]
 8007db0:	687a      	ldr	r2, [r7, #4]
 8007db2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8007db6:	2300      	movs	r3, #0
}
 8007db8:	4618      	mov	r0, r3
 8007dba:	371c      	adds	r7, #28
 8007dbc:	46bd      	mov	sp, r7
 8007dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc2:	4770      	bx	lr

08007dc4 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007dc4:	b480      	push	{r7}
 8007dc6:	b085      	sub	sp, #20
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	6078      	str	r0, [r7, #4]
 8007dcc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007dd4:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	683a      	ldr	r2, [r7, #0]
 8007dda:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8007dde:	2300      	movs	r3, #0
}
 8007de0:	4618      	mov	r0, r3
 8007de2:	3714      	adds	r7, #20
 8007de4:	46bd      	mov	sp, r7
 8007de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dea:	4770      	bx	lr

08007dec <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007dec:	b580      	push	{r7, lr}
 8007dee:	b084      	sub	sp, #16
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007dfa:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8007dfc:	2301      	movs	r3, #1
 8007dfe:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d101      	bne.n	8007e0e <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007e0a:	2303      	movs	r3, #3
 8007e0c:	e01a      	b.n	8007e44 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8007e0e:	68bb      	ldr	r3, [r7, #8]
 8007e10:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d114      	bne.n	8007e42 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8007e18:	68bb      	ldr	r3, [r7, #8]
 8007e1a:	2201      	movs	r2, #1
 8007e1c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8007e20:	68bb      	ldr	r3, [r7, #8]
 8007e22:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8007e2a:	68bb      	ldr	r3, [r7, #8]
 8007e2c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8007e30:	68bb      	ldr	r3, [r7, #8]
 8007e32:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8007e36:	2181      	movs	r1, #129	; 0x81
 8007e38:	6878      	ldr	r0, [r7, #4]
 8007e3a:	f001 fd43 	bl	80098c4 <USBD_LL_Transmit>

    ret = USBD_OK;
 8007e3e:	2300      	movs	r3, #0
 8007e40:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8007e42:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e44:	4618      	mov	r0, r3
 8007e46:	3710      	adds	r7, #16
 8007e48:	46bd      	mov	sp, r7
 8007e4a:	bd80      	pop	{r7, pc}

08007e4c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007e4c:	b580      	push	{r7, lr}
 8007e4e:	b084      	sub	sp, #16
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007e5a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d101      	bne.n	8007e6a <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8007e66:	2303      	movs	r3, #3
 8007e68:	e016      	b.n	8007e98 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	7c1b      	ldrb	r3, [r3, #16]
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d109      	bne.n	8007e86 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007e78:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007e7c:	2101      	movs	r1, #1
 8007e7e:	6878      	ldr	r0, [r7, #4]
 8007e80:	f001 fd41 	bl	8009906 <USBD_LL_PrepareReceive>
 8007e84:	e007      	b.n	8007e96 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007e8c:	2340      	movs	r3, #64	; 0x40
 8007e8e:	2101      	movs	r1, #1
 8007e90:	6878      	ldr	r0, [r7, #4]
 8007e92:	f001 fd38 	bl	8009906 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007e96:	2300      	movs	r3, #0
}
 8007e98:	4618      	mov	r0, r3
 8007e9a:	3710      	adds	r7, #16
 8007e9c:	46bd      	mov	sp, r7
 8007e9e:	bd80      	pop	{r7, pc}

08007ea0 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007ea0:	b580      	push	{r7, lr}
 8007ea2:	b086      	sub	sp, #24
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	60f8      	str	r0, [r7, #12]
 8007ea8:	60b9      	str	r1, [r7, #8]
 8007eaa:	4613      	mov	r3, r2
 8007eac:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d101      	bne.n	8007eb8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007eb4:	2303      	movs	r3, #3
 8007eb6:	e01f      	b.n	8007ef8 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	2200      	movs	r2, #0
 8007ebc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	2200      	movs	r2, #0
 8007ec4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	2200      	movs	r2, #0
 8007ecc:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007ed0:	68bb      	ldr	r3, [r7, #8]
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d003      	beq.n	8007ede <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	68ba      	ldr	r2, [r7, #8]
 8007eda:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	2201      	movs	r2, #1
 8007ee2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	79fa      	ldrb	r2, [r7, #7]
 8007eea:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007eec:	68f8      	ldr	r0, [r7, #12]
 8007eee:	f001 fb9f 	bl	8009630 <USBD_LL_Init>
 8007ef2:	4603      	mov	r3, r0
 8007ef4:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007ef6:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ef8:	4618      	mov	r0, r3
 8007efa:	3718      	adds	r7, #24
 8007efc:	46bd      	mov	sp, r7
 8007efe:	bd80      	pop	{r7, pc}

08007f00 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007f00:	b580      	push	{r7, lr}
 8007f02:	b084      	sub	sp, #16
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	6078      	str	r0, [r7, #4]
 8007f08:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007f0a:	2300      	movs	r3, #0
 8007f0c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007f0e:	683b      	ldr	r3, [r7, #0]
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d101      	bne.n	8007f18 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8007f14:	2303      	movs	r3, #3
 8007f16:	e016      	b.n	8007f46 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	683a      	ldr	r2, [r7, #0]
 8007f1c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d00b      	beq.n	8007f44 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f34:	f107 020e 	add.w	r2, r7, #14
 8007f38:	4610      	mov	r0, r2
 8007f3a:	4798      	blx	r3
 8007f3c:	4602      	mov	r2, r0
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8007f44:	2300      	movs	r3, #0
}
 8007f46:	4618      	mov	r0, r3
 8007f48:	3710      	adds	r7, #16
 8007f4a:	46bd      	mov	sp, r7
 8007f4c:	bd80      	pop	{r7, pc}

08007f4e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007f4e:	b580      	push	{r7, lr}
 8007f50:	b082      	sub	sp, #8
 8007f52:	af00      	add	r7, sp, #0
 8007f54:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007f56:	6878      	ldr	r0, [r7, #4]
 8007f58:	f001 fbca 	bl	80096f0 <USBD_LL_Start>
 8007f5c:	4603      	mov	r3, r0
}
 8007f5e:	4618      	mov	r0, r3
 8007f60:	3708      	adds	r7, #8
 8007f62:	46bd      	mov	sp, r7
 8007f64:	bd80      	pop	{r7, pc}

08007f66 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007f66:	b480      	push	{r7}
 8007f68:	b083      	sub	sp, #12
 8007f6a:	af00      	add	r7, sp, #0
 8007f6c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007f6e:	2300      	movs	r3, #0
}
 8007f70:	4618      	mov	r0, r3
 8007f72:	370c      	adds	r7, #12
 8007f74:	46bd      	mov	sp, r7
 8007f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f7a:	4770      	bx	lr

08007f7c <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007f7c:	b580      	push	{r7, lr}
 8007f7e:	b084      	sub	sp, #16
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	6078      	str	r0, [r7, #4]
 8007f84:	460b      	mov	r3, r1
 8007f86:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007f88:	2303      	movs	r3, #3
 8007f8a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d009      	beq.n	8007faa <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	78fa      	ldrb	r2, [r7, #3]
 8007fa0:	4611      	mov	r1, r2
 8007fa2:	6878      	ldr	r0, [r7, #4]
 8007fa4:	4798      	blx	r3
 8007fa6:	4603      	mov	r3, r0
 8007fa8:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007faa:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fac:	4618      	mov	r0, r3
 8007fae:	3710      	adds	r7, #16
 8007fb0:	46bd      	mov	sp, r7
 8007fb2:	bd80      	pop	{r7, pc}

08007fb4 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007fb4:	b580      	push	{r7, lr}
 8007fb6:	b082      	sub	sp, #8
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	6078      	str	r0, [r7, #4]
 8007fbc:	460b      	mov	r3, r1
 8007fbe:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d007      	beq.n	8007fda <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007fd0:	685b      	ldr	r3, [r3, #4]
 8007fd2:	78fa      	ldrb	r2, [r7, #3]
 8007fd4:	4611      	mov	r1, r2
 8007fd6:	6878      	ldr	r0, [r7, #4]
 8007fd8:	4798      	blx	r3
  }

  return USBD_OK;
 8007fda:	2300      	movs	r3, #0
}
 8007fdc:	4618      	mov	r0, r3
 8007fde:	3708      	adds	r7, #8
 8007fe0:	46bd      	mov	sp, r7
 8007fe2:	bd80      	pop	{r7, pc}

08007fe4 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007fe4:	b580      	push	{r7, lr}
 8007fe6:	b084      	sub	sp, #16
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	6078      	str	r0, [r7, #4]
 8007fec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007ff4:	6839      	ldr	r1, [r7, #0]
 8007ff6:	4618      	mov	r0, r3
 8007ff8:	f000 ff16 	bl	8008e28 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	2201      	movs	r2, #1
 8008000:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800800a:	461a      	mov	r2, r3
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008018:	f003 031f 	and.w	r3, r3, #31
 800801c:	2b01      	cmp	r3, #1
 800801e:	d00e      	beq.n	800803e <USBD_LL_SetupStage+0x5a>
 8008020:	2b01      	cmp	r3, #1
 8008022:	d302      	bcc.n	800802a <USBD_LL_SetupStage+0x46>
 8008024:	2b02      	cmp	r3, #2
 8008026:	d014      	beq.n	8008052 <USBD_LL_SetupStage+0x6e>
 8008028:	e01d      	b.n	8008066 <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008030:	4619      	mov	r1, r3
 8008032:	6878      	ldr	r0, [r7, #4]
 8008034:	f000 f9d6 	bl	80083e4 <USBD_StdDevReq>
 8008038:	4603      	mov	r3, r0
 800803a:	73fb      	strb	r3, [r7, #15]
      break;
 800803c:	e020      	b.n	8008080 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008044:	4619      	mov	r1, r3
 8008046:	6878      	ldr	r0, [r7, #4]
 8008048:	f000 fa3a 	bl	80084c0 <USBD_StdItfReq>
 800804c:	4603      	mov	r3, r0
 800804e:	73fb      	strb	r3, [r7, #15]
      break;
 8008050:	e016      	b.n	8008080 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008058:	4619      	mov	r1, r3
 800805a:	6878      	ldr	r0, [r7, #4]
 800805c:	f000 fa76 	bl	800854c <USBD_StdEPReq>
 8008060:	4603      	mov	r3, r0
 8008062:	73fb      	strb	r3, [r7, #15]
      break;
 8008064:	e00c      	b.n	8008080 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800806c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008070:	b2db      	uxtb	r3, r3
 8008072:	4619      	mov	r1, r3
 8008074:	6878      	ldr	r0, [r7, #4]
 8008076:	f001 fb9b 	bl	80097b0 <USBD_LL_StallEP>
 800807a:	4603      	mov	r3, r0
 800807c:	73fb      	strb	r3, [r7, #15]
      break;
 800807e:	bf00      	nop
  }

  return ret;
 8008080:	7bfb      	ldrb	r3, [r7, #15]
}
 8008082:	4618      	mov	r0, r3
 8008084:	3710      	adds	r7, #16
 8008086:	46bd      	mov	sp, r7
 8008088:	bd80      	pop	{r7, pc}

0800808a <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800808a:	b580      	push	{r7, lr}
 800808c:	b086      	sub	sp, #24
 800808e:	af00      	add	r7, sp, #0
 8008090:	60f8      	str	r0, [r7, #12]
 8008092:	460b      	mov	r3, r1
 8008094:	607a      	str	r2, [r7, #4]
 8008096:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8008098:	7afb      	ldrb	r3, [r7, #11]
 800809a:	2b00      	cmp	r3, #0
 800809c:	d137      	bne.n	800810e <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80080a4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80080ac:	2b03      	cmp	r3, #3
 80080ae:	d14a      	bne.n	8008146 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80080b0:	693b      	ldr	r3, [r7, #16]
 80080b2:	689a      	ldr	r2, [r3, #8]
 80080b4:	693b      	ldr	r3, [r7, #16]
 80080b6:	68db      	ldr	r3, [r3, #12]
 80080b8:	429a      	cmp	r2, r3
 80080ba:	d913      	bls.n	80080e4 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80080bc:	693b      	ldr	r3, [r7, #16]
 80080be:	689a      	ldr	r2, [r3, #8]
 80080c0:	693b      	ldr	r3, [r7, #16]
 80080c2:	68db      	ldr	r3, [r3, #12]
 80080c4:	1ad2      	subs	r2, r2, r3
 80080c6:	693b      	ldr	r3, [r7, #16]
 80080c8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80080ca:	693b      	ldr	r3, [r7, #16]
 80080cc:	68da      	ldr	r2, [r3, #12]
 80080ce:	693b      	ldr	r3, [r7, #16]
 80080d0:	689b      	ldr	r3, [r3, #8]
 80080d2:	4293      	cmp	r3, r2
 80080d4:	bf28      	it	cs
 80080d6:	4613      	movcs	r3, r2
 80080d8:	461a      	mov	r2, r3
 80080da:	6879      	ldr	r1, [r7, #4]
 80080dc:	68f8      	ldr	r0, [r7, #12]
 80080de:	f000 ff97 	bl	8009010 <USBD_CtlContinueRx>
 80080e2:	e030      	b.n	8008146 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080ea:	691b      	ldr	r3, [r3, #16]
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d00a      	beq.n	8008106 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80080f6:	2b03      	cmp	r3, #3
 80080f8:	d105      	bne.n	8008106 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008100:	691b      	ldr	r3, [r3, #16]
 8008102:	68f8      	ldr	r0, [r7, #12]
 8008104:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 8008106:	68f8      	ldr	r0, [r7, #12]
 8008108:	f000 ff93 	bl	8009032 <USBD_CtlSendStatus>
 800810c:	e01b      	b.n	8008146 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008114:	699b      	ldr	r3, [r3, #24]
 8008116:	2b00      	cmp	r3, #0
 8008118:	d013      	beq.n	8008142 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8008120:	2b03      	cmp	r3, #3
 8008122:	d10e      	bne.n	8008142 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800812a:	699b      	ldr	r3, [r3, #24]
 800812c:	7afa      	ldrb	r2, [r7, #11]
 800812e:	4611      	mov	r1, r2
 8008130:	68f8      	ldr	r0, [r7, #12]
 8008132:	4798      	blx	r3
 8008134:	4603      	mov	r3, r0
 8008136:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8008138:	7dfb      	ldrb	r3, [r7, #23]
 800813a:	2b00      	cmp	r3, #0
 800813c:	d003      	beq.n	8008146 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 800813e:	7dfb      	ldrb	r3, [r7, #23]
 8008140:	e002      	b.n	8008148 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008142:	2303      	movs	r3, #3
 8008144:	e000      	b.n	8008148 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 8008146:	2300      	movs	r3, #0
}
 8008148:	4618      	mov	r0, r3
 800814a:	3718      	adds	r7, #24
 800814c:	46bd      	mov	sp, r7
 800814e:	bd80      	pop	{r7, pc}

08008150 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008150:	b580      	push	{r7, lr}
 8008152:	b086      	sub	sp, #24
 8008154:	af00      	add	r7, sp, #0
 8008156:	60f8      	str	r0, [r7, #12]
 8008158:	460b      	mov	r3, r1
 800815a:	607a      	str	r2, [r7, #4]
 800815c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800815e:	7afb      	ldrb	r3, [r7, #11]
 8008160:	2b00      	cmp	r3, #0
 8008162:	d16a      	bne.n	800823a <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	3314      	adds	r3, #20
 8008168:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008170:	2b02      	cmp	r3, #2
 8008172:	d155      	bne.n	8008220 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 8008174:	693b      	ldr	r3, [r7, #16]
 8008176:	689a      	ldr	r2, [r3, #8]
 8008178:	693b      	ldr	r3, [r7, #16]
 800817a:	68db      	ldr	r3, [r3, #12]
 800817c:	429a      	cmp	r2, r3
 800817e:	d914      	bls.n	80081aa <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008180:	693b      	ldr	r3, [r7, #16]
 8008182:	689a      	ldr	r2, [r3, #8]
 8008184:	693b      	ldr	r3, [r7, #16]
 8008186:	68db      	ldr	r3, [r3, #12]
 8008188:	1ad2      	subs	r2, r2, r3
 800818a:	693b      	ldr	r3, [r7, #16]
 800818c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800818e:	693b      	ldr	r3, [r7, #16]
 8008190:	689b      	ldr	r3, [r3, #8]
 8008192:	461a      	mov	r2, r3
 8008194:	6879      	ldr	r1, [r7, #4]
 8008196:	68f8      	ldr	r0, [r7, #12]
 8008198:	f000 ff0c 	bl	8008fb4 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800819c:	2300      	movs	r3, #0
 800819e:	2200      	movs	r2, #0
 80081a0:	2100      	movs	r1, #0
 80081a2:	68f8      	ldr	r0, [r7, #12]
 80081a4:	f001 fbaf 	bl	8009906 <USBD_LL_PrepareReceive>
 80081a8:	e03a      	b.n	8008220 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80081aa:	693b      	ldr	r3, [r7, #16]
 80081ac:	68da      	ldr	r2, [r3, #12]
 80081ae:	693b      	ldr	r3, [r7, #16]
 80081b0:	689b      	ldr	r3, [r3, #8]
 80081b2:	429a      	cmp	r2, r3
 80081b4:	d11c      	bne.n	80081f0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80081b6:	693b      	ldr	r3, [r7, #16]
 80081b8:	685a      	ldr	r2, [r3, #4]
 80081ba:	693b      	ldr	r3, [r7, #16]
 80081bc:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80081be:	429a      	cmp	r2, r3
 80081c0:	d316      	bcc.n	80081f0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80081c2:	693b      	ldr	r3, [r7, #16]
 80081c4:	685a      	ldr	r2, [r3, #4]
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80081cc:	429a      	cmp	r2, r3
 80081ce:	d20f      	bcs.n	80081f0 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80081d0:	2200      	movs	r2, #0
 80081d2:	2100      	movs	r1, #0
 80081d4:	68f8      	ldr	r0, [r7, #12]
 80081d6:	f000 feed 	bl	8008fb4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	2200      	movs	r2, #0
 80081de:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80081e2:	2300      	movs	r3, #0
 80081e4:	2200      	movs	r2, #0
 80081e6:	2100      	movs	r1, #0
 80081e8:	68f8      	ldr	r0, [r7, #12]
 80081ea:	f001 fb8c 	bl	8009906 <USBD_LL_PrepareReceive>
 80081ee:	e017      	b.n	8008220 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081f6:	68db      	ldr	r3, [r3, #12]
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d00a      	beq.n	8008212 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008202:	2b03      	cmp	r3, #3
 8008204:	d105      	bne.n	8008212 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800820c:	68db      	ldr	r3, [r3, #12]
 800820e:	68f8      	ldr	r0, [r7, #12]
 8008210:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008212:	2180      	movs	r1, #128	; 0x80
 8008214:	68f8      	ldr	r0, [r7, #12]
 8008216:	f001 facb 	bl	80097b0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800821a:	68f8      	ldr	r0, [r7, #12]
 800821c:	f000 ff1c 	bl	8009058 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8008226:	2b01      	cmp	r3, #1
 8008228:	d123      	bne.n	8008272 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800822a:	68f8      	ldr	r0, [r7, #12]
 800822c:	f7ff fe9b 	bl	8007f66 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	2200      	movs	r2, #0
 8008234:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008238:	e01b      	b.n	8008272 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008240:	695b      	ldr	r3, [r3, #20]
 8008242:	2b00      	cmp	r3, #0
 8008244:	d013      	beq.n	800826e <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800824c:	2b03      	cmp	r3, #3
 800824e:	d10e      	bne.n	800826e <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008256:	695b      	ldr	r3, [r3, #20]
 8008258:	7afa      	ldrb	r2, [r7, #11]
 800825a:	4611      	mov	r1, r2
 800825c:	68f8      	ldr	r0, [r7, #12]
 800825e:	4798      	blx	r3
 8008260:	4603      	mov	r3, r0
 8008262:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8008264:	7dfb      	ldrb	r3, [r7, #23]
 8008266:	2b00      	cmp	r3, #0
 8008268:	d003      	beq.n	8008272 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 800826a:	7dfb      	ldrb	r3, [r7, #23]
 800826c:	e002      	b.n	8008274 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800826e:	2303      	movs	r3, #3
 8008270:	e000      	b.n	8008274 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 8008272:	2300      	movs	r3, #0
}
 8008274:	4618      	mov	r0, r3
 8008276:	3718      	adds	r7, #24
 8008278:	46bd      	mov	sp, r7
 800827a:	bd80      	pop	{r7, pc}

0800827c <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800827c:	b580      	push	{r7, lr}
 800827e:	b082      	sub	sp, #8
 8008280:	af00      	add	r7, sp, #0
 8008282:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	2201      	movs	r2, #1
 8008288:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	2200      	movs	r2, #0
 8008290:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	2200      	movs	r2, #0
 8008298:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	2200      	movs	r2, #0
 800829e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d009      	beq.n	80082c0 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082b2:	685b      	ldr	r3, [r3, #4]
 80082b4:	687a      	ldr	r2, [r7, #4]
 80082b6:	6852      	ldr	r2, [r2, #4]
 80082b8:	b2d2      	uxtb	r2, r2
 80082ba:	4611      	mov	r1, r2
 80082bc:	6878      	ldr	r0, [r7, #4]
 80082be:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80082c0:	2340      	movs	r3, #64	; 0x40
 80082c2:	2200      	movs	r2, #0
 80082c4:	2100      	movs	r1, #0
 80082c6:	6878      	ldr	r0, [r7, #4]
 80082c8:	f001 fa2d 	bl	8009726 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	2201      	movs	r2, #1
 80082d0:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	2240      	movs	r2, #64	; 0x40
 80082d8:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80082dc:	2340      	movs	r3, #64	; 0x40
 80082de:	2200      	movs	r2, #0
 80082e0:	2180      	movs	r1, #128	; 0x80
 80082e2:	6878      	ldr	r0, [r7, #4]
 80082e4:	f001 fa1f 	bl	8009726 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	2201      	movs	r2, #1
 80082ec:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	2240      	movs	r2, #64	; 0x40
 80082f2:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80082f4:	2300      	movs	r3, #0
}
 80082f6:	4618      	mov	r0, r3
 80082f8:	3708      	adds	r7, #8
 80082fa:	46bd      	mov	sp, r7
 80082fc:	bd80      	pop	{r7, pc}

080082fe <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80082fe:	b480      	push	{r7}
 8008300:	b083      	sub	sp, #12
 8008302:	af00      	add	r7, sp, #0
 8008304:	6078      	str	r0, [r7, #4]
 8008306:	460b      	mov	r3, r1
 8008308:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	78fa      	ldrb	r2, [r7, #3]
 800830e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008310:	2300      	movs	r3, #0
}
 8008312:	4618      	mov	r0, r3
 8008314:	370c      	adds	r7, #12
 8008316:	46bd      	mov	sp, r7
 8008318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800831c:	4770      	bx	lr

0800831e <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800831e:	b480      	push	{r7}
 8008320:	b083      	sub	sp, #12
 8008322:	af00      	add	r7, sp, #0
 8008324:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	2204      	movs	r2, #4
 8008336:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800833a:	2300      	movs	r3, #0
}
 800833c:	4618      	mov	r0, r3
 800833e:	370c      	adds	r7, #12
 8008340:	46bd      	mov	sp, r7
 8008342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008346:	4770      	bx	lr

08008348 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008348:	b480      	push	{r7}
 800834a:	b083      	sub	sp, #12
 800834c:	af00      	add	r7, sp, #0
 800834e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008356:	2b04      	cmp	r3, #4
 8008358:	d105      	bne.n	8008366 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008366:	2300      	movs	r3, #0
}
 8008368:	4618      	mov	r0, r3
 800836a:	370c      	adds	r7, #12
 800836c:	46bd      	mov	sp, r7
 800836e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008372:	4770      	bx	lr

08008374 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008374:	b580      	push	{r7, lr}
 8008376:	b082      	sub	sp, #8
 8008378:	af00      	add	r7, sp, #0
 800837a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008382:	2b03      	cmp	r3, #3
 8008384:	d10b      	bne.n	800839e <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800838c:	69db      	ldr	r3, [r3, #28]
 800838e:	2b00      	cmp	r3, #0
 8008390:	d005      	beq.n	800839e <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008398:	69db      	ldr	r3, [r3, #28]
 800839a:	6878      	ldr	r0, [r7, #4]
 800839c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800839e:	2300      	movs	r3, #0
}
 80083a0:	4618      	mov	r0, r3
 80083a2:	3708      	adds	r7, #8
 80083a4:	46bd      	mov	sp, r7
 80083a6:	bd80      	pop	{r7, pc}

080083a8 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80083a8:	b480      	push	{r7}
 80083aa:	b087      	sub	sp, #28
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80083b4:	697b      	ldr	r3, [r7, #20]
 80083b6:	781b      	ldrb	r3, [r3, #0]
 80083b8:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80083ba:	697b      	ldr	r3, [r7, #20]
 80083bc:	3301      	adds	r3, #1
 80083be:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80083c0:	697b      	ldr	r3, [r7, #20]
 80083c2:	781b      	ldrb	r3, [r3, #0]
 80083c4:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80083c6:	8a3b      	ldrh	r3, [r7, #16]
 80083c8:	021b      	lsls	r3, r3, #8
 80083ca:	b21a      	sxth	r2, r3
 80083cc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80083d0:	4313      	orrs	r3, r2
 80083d2:	b21b      	sxth	r3, r3
 80083d4:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80083d6:	89fb      	ldrh	r3, [r7, #14]
}
 80083d8:	4618      	mov	r0, r3
 80083da:	371c      	adds	r7, #28
 80083dc:	46bd      	mov	sp, r7
 80083de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e2:	4770      	bx	lr

080083e4 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80083e4:	b580      	push	{r7, lr}
 80083e6:	b084      	sub	sp, #16
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	6078      	str	r0, [r7, #4]
 80083ec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80083ee:	2300      	movs	r3, #0
 80083f0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80083f2:	683b      	ldr	r3, [r7, #0]
 80083f4:	781b      	ldrb	r3, [r3, #0]
 80083f6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80083fa:	2b20      	cmp	r3, #32
 80083fc:	d004      	beq.n	8008408 <USBD_StdDevReq+0x24>
 80083fe:	2b40      	cmp	r3, #64	; 0x40
 8008400:	d002      	beq.n	8008408 <USBD_StdDevReq+0x24>
 8008402:	2b00      	cmp	r3, #0
 8008404:	d00a      	beq.n	800841c <USBD_StdDevReq+0x38>
 8008406:	e050      	b.n	80084aa <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800840e:	689b      	ldr	r3, [r3, #8]
 8008410:	6839      	ldr	r1, [r7, #0]
 8008412:	6878      	ldr	r0, [r7, #4]
 8008414:	4798      	blx	r3
 8008416:	4603      	mov	r3, r0
 8008418:	73fb      	strb	r3, [r7, #15]
    break;
 800841a:	e04b      	b.n	80084b4 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800841c:	683b      	ldr	r3, [r7, #0]
 800841e:	785b      	ldrb	r3, [r3, #1]
 8008420:	2b09      	cmp	r3, #9
 8008422:	d83c      	bhi.n	800849e <USBD_StdDevReq+0xba>
 8008424:	a201      	add	r2, pc, #4	; (adr r2, 800842c <USBD_StdDevReq+0x48>)
 8008426:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800842a:	bf00      	nop
 800842c:	08008481 	.word	0x08008481
 8008430:	08008495 	.word	0x08008495
 8008434:	0800849f 	.word	0x0800849f
 8008438:	0800848b 	.word	0x0800848b
 800843c:	0800849f 	.word	0x0800849f
 8008440:	0800845f 	.word	0x0800845f
 8008444:	08008455 	.word	0x08008455
 8008448:	0800849f 	.word	0x0800849f
 800844c:	08008477 	.word	0x08008477
 8008450:	08008469 	.word	0x08008469
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 8008454:	6839      	ldr	r1, [r7, #0]
 8008456:	6878      	ldr	r0, [r7, #4]
 8008458:	f000 f9d0 	bl	80087fc <USBD_GetDescriptor>
      break;
 800845c:	e024      	b.n	80084a8 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 800845e:	6839      	ldr	r1, [r7, #0]
 8008460:	6878      	ldr	r0, [r7, #4]
 8008462:	f000 fb5f 	bl	8008b24 <USBD_SetAddress>
      break;
 8008466:	e01f      	b.n	80084a8 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 8008468:	6839      	ldr	r1, [r7, #0]
 800846a:	6878      	ldr	r0, [r7, #4]
 800846c:	f000 fb9c 	bl	8008ba8 <USBD_SetConfig>
 8008470:	4603      	mov	r3, r0
 8008472:	73fb      	strb	r3, [r7, #15]
      break;
 8008474:	e018      	b.n	80084a8 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 8008476:	6839      	ldr	r1, [r7, #0]
 8008478:	6878      	ldr	r0, [r7, #4]
 800847a:	f000 fc39 	bl	8008cf0 <USBD_GetConfig>
      break;
 800847e:	e013      	b.n	80084a8 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 8008480:	6839      	ldr	r1, [r7, #0]
 8008482:	6878      	ldr	r0, [r7, #4]
 8008484:	f000 fc68 	bl	8008d58 <USBD_GetStatus>
      break;
 8008488:	e00e      	b.n	80084a8 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 800848a:	6839      	ldr	r1, [r7, #0]
 800848c:	6878      	ldr	r0, [r7, #4]
 800848e:	f000 fc96 	bl	8008dbe <USBD_SetFeature>
      break;
 8008492:	e009      	b.n	80084a8 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 8008494:	6839      	ldr	r1, [r7, #0]
 8008496:	6878      	ldr	r0, [r7, #4]
 8008498:	f000 fca5 	bl	8008de6 <USBD_ClrFeature>
      break;
 800849c:	e004      	b.n	80084a8 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 800849e:	6839      	ldr	r1, [r7, #0]
 80084a0:	6878      	ldr	r0, [r7, #4]
 80084a2:	f000 fcfb 	bl	8008e9c <USBD_CtlError>
      break;
 80084a6:	bf00      	nop
    }
    break;
 80084a8:	e004      	b.n	80084b4 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 80084aa:	6839      	ldr	r1, [r7, #0]
 80084ac:	6878      	ldr	r0, [r7, #4]
 80084ae:	f000 fcf5 	bl	8008e9c <USBD_CtlError>
    break;
 80084b2:	bf00      	nop
  }

  return ret;
 80084b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80084b6:	4618      	mov	r0, r3
 80084b8:	3710      	adds	r7, #16
 80084ba:	46bd      	mov	sp, r7
 80084bc:	bd80      	pop	{r7, pc}
 80084be:	bf00      	nop

080084c0 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80084c0:	b580      	push	{r7, lr}
 80084c2:	b084      	sub	sp, #16
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	6078      	str	r0, [r7, #4]
 80084c8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80084ca:	2300      	movs	r3, #0
 80084cc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80084ce:	683b      	ldr	r3, [r7, #0]
 80084d0:	781b      	ldrb	r3, [r3, #0]
 80084d2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80084d6:	2b20      	cmp	r3, #32
 80084d8:	d003      	beq.n	80084e2 <USBD_StdItfReq+0x22>
 80084da:	2b40      	cmp	r3, #64	; 0x40
 80084dc:	d001      	beq.n	80084e2 <USBD_StdItfReq+0x22>
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d12a      	bne.n	8008538 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80084e8:	3b01      	subs	r3, #1
 80084ea:	2b02      	cmp	r3, #2
 80084ec:	d81d      	bhi.n	800852a <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80084ee:	683b      	ldr	r3, [r7, #0]
 80084f0:	889b      	ldrh	r3, [r3, #4]
 80084f2:	b2db      	uxtb	r3, r3
 80084f4:	2b01      	cmp	r3, #1
 80084f6:	d813      	bhi.n	8008520 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80084fe:	689b      	ldr	r3, [r3, #8]
 8008500:	6839      	ldr	r1, [r7, #0]
 8008502:	6878      	ldr	r0, [r7, #4]
 8008504:	4798      	blx	r3
 8008506:	4603      	mov	r3, r0
 8008508:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800850a:	683b      	ldr	r3, [r7, #0]
 800850c:	88db      	ldrh	r3, [r3, #6]
 800850e:	2b00      	cmp	r3, #0
 8008510:	d110      	bne.n	8008534 <USBD_StdItfReq+0x74>
 8008512:	7bfb      	ldrb	r3, [r7, #15]
 8008514:	2b00      	cmp	r3, #0
 8008516:	d10d      	bne.n	8008534 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 8008518:	6878      	ldr	r0, [r7, #4]
 800851a:	f000 fd8a 	bl	8009032 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800851e:	e009      	b.n	8008534 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8008520:	6839      	ldr	r1, [r7, #0]
 8008522:	6878      	ldr	r0, [r7, #4]
 8008524:	f000 fcba 	bl	8008e9c <USBD_CtlError>
      break;
 8008528:	e004      	b.n	8008534 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 800852a:	6839      	ldr	r1, [r7, #0]
 800852c:	6878      	ldr	r0, [r7, #4]
 800852e:	f000 fcb5 	bl	8008e9c <USBD_CtlError>
      break;
 8008532:	e000      	b.n	8008536 <USBD_StdItfReq+0x76>
      break;
 8008534:	bf00      	nop
    }
    break;
 8008536:	e004      	b.n	8008542 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8008538:	6839      	ldr	r1, [r7, #0]
 800853a:	6878      	ldr	r0, [r7, #4]
 800853c:	f000 fcae 	bl	8008e9c <USBD_CtlError>
    break;
 8008540:	bf00      	nop
  }

  return ret;
 8008542:	7bfb      	ldrb	r3, [r7, #15]
}
 8008544:	4618      	mov	r0, r3
 8008546:	3710      	adds	r7, #16
 8008548:	46bd      	mov	sp, r7
 800854a:	bd80      	pop	{r7, pc}

0800854c <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800854c:	b580      	push	{r7, lr}
 800854e:	b084      	sub	sp, #16
 8008550:	af00      	add	r7, sp, #0
 8008552:	6078      	str	r0, [r7, #4]
 8008554:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008556:	2300      	movs	r3, #0
 8008558:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800855a:	683b      	ldr	r3, [r7, #0]
 800855c:	889b      	ldrh	r3, [r3, #4]
 800855e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008560:	683b      	ldr	r3, [r7, #0]
 8008562:	781b      	ldrb	r3, [r3, #0]
 8008564:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008568:	2b20      	cmp	r3, #32
 800856a:	d004      	beq.n	8008576 <USBD_StdEPReq+0x2a>
 800856c:	2b40      	cmp	r3, #64	; 0x40
 800856e:	d002      	beq.n	8008576 <USBD_StdEPReq+0x2a>
 8008570:	2b00      	cmp	r3, #0
 8008572:	d00a      	beq.n	800858a <USBD_StdEPReq+0x3e>
 8008574:	e137      	b.n	80087e6 <USBD_StdEPReq+0x29a>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800857c:	689b      	ldr	r3, [r3, #8]
 800857e:	6839      	ldr	r1, [r7, #0]
 8008580:	6878      	ldr	r0, [r7, #4]
 8008582:	4798      	blx	r3
 8008584:	4603      	mov	r3, r0
 8008586:	73fb      	strb	r3, [r7, #15]
    break;
 8008588:	e132      	b.n	80087f0 <USBD_StdEPReq+0x2a4>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800858a:	683b      	ldr	r3, [r7, #0]
 800858c:	785b      	ldrb	r3, [r3, #1]
 800858e:	2b01      	cmp	r3, #1
 8008590:	d03e      	beq.n	8008610 <USBD_StdEPReq+0xc4>
 8008592:	2b03      	cmp	r3, #3
 8008594:	d002      	beq.n	800859c <USBD_StdEPReq+0x50>
 8008596:	2b00      	cmp	r3, #0
 8008598:	d079      	beq.n	800868e <USBD_StdEPReq+0x142>
 800859a:	e11e      	b.n	80087da <USBD_StdEPReq+0x28e>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80085a2:	2b02      	cmp	r3, #2
 80085a4:	d002      	beq.n	80085ac <USBD_StdEPReq+0x60>
 80085a6:	2b03      	cmp	r3, #3
 80085a8:	d015      	beq.n	80085d6 <USBD_StdEPReq+0x8a>
 80085aa:	e02b      	b.n	8008604 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80085ac:	7bbb      	ldrb	r3, [r7, #14]
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d00c      	beq.n	80085cc <USBD_StdEPReq+0x80>
 80085b2:	7bbb      	ldrb	r3, [r7, #14]
 80085b4:	2b80      	cmp	r3, #128	; 0x80
 80085b6:	d009      	beq.n	80085cc <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 80085b8:	7bbb      	ldrb	r3, [r7, #14]
 80085ba:	4619      	mov	r1, r3
 80085bc:	6878      	ldr	r0, [r7, #4]
 80085be:	f001 f8f7 	bl	80097b0 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80085c2:	2180      	movs	r1, #128	; 0x80
 80085c4:	6878      	ldr	r0, [r7, #4]
 80085c6:	f001 f8f3 	bl	80097b0 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80085ca:	e020      	b.n	800860e <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 80085cc:	6839      	ldr	r1, [r7, #0]
 80085ce:	6878      	ldr	r0, [r7, #4]
 80085d0:	f000 fc64 	bl	8008e9c <USBD_CtlError>
        break;
 80085d4:	e01b      	b.n	800860e <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80085d6:	683b      	ldr	r3, [r7, #0]
 80085d8:	885b      	ldrh	r3, [r3, #2]
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d10e      	bne.n	80085fc <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80085de:	7bbb      	ldrb	r3, [r7, #14]
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d00b      	beq.n	80085fc <USBD_StdEPReq+0xb0>
 80085e4:	7bbb      	ldrb	r3, [r7, #14]
 80085e6:	2b80      	cmp	r3, #128	; 0x80
 80085e8:	d008      	beq.n	80085fc <USBD_StdEPReq+0xb0>
 80085ea:	683b      	ldr	r3, [r7, #0]
 80085ec:	88db      	ldrh	r3, [r3, #6]
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d104      	bne.n	80085fc <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 80085f2:	7bbb      	ldrb	r3, [r7, #14]
 80085f4:	4619      	mov	r1, r3
 80085f6:	6878      	ldr	r0, [r7, #4]
 80085f8:	f001 f8da 	bl	80097b0 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 80085fc:	6878      	ldr	r0, [r7, #4]
 80085fe:	f000 fd18 	bl	8009032 <USBD_CtlSendStatus>

        break;
 8008602:	e004      	b.n	800860e <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 8008604:	6839      	ldr	r1, [r7, #0]
 8008606:	6878      	ldr	r0, [r7, #4]
 8008608:	f000 fc48 	bl	8008e9c <USBD_CtlError>
        break;
 800860c:	bf00      	nop
      }
      break;
 800860e:	e0e9      	b.n	80087e4 <USBD_StdEPReq+0x298>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008616:	2b02      	cmp	r3, #2
 8008618:	d002      	beq.n	8008620 <USBD_StdEPReq+0xd4>
 800861a:	2b03      	cmp	r3, #3
 800861c:	d015      	beq.n	800864a <USBD_StdEPReq+0xfe>
 800861e:	e02f      	b.n	8008680 <USBD_StdEPReq+0x134>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008620:	7bbb      	ldrb	r3, [r7, #14]
 8008622:	2b00      	cmp	r3, #0
 8008624:	d00c      	beq.n	8008640 <USBD_StdEPReq+0xf4>
 8008626:	7bbb      	ldrb	r3, [r7, #14]
 8008628:	2b80      	cmp	r3, #128	; 0x80
 800862a:	d009      	beq.n	8008640 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800862c:	7bbb      	ldrb	r3, [r7, #14]
 800862e:	4619      	mov	r1, r3
 8008630:	6878      	ldr	r0, [r7, #4]
 8008632:	f001 f8bd 	bl	80097b0 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008636:	2180      	movs	r1, #128	; 0x80
 8008638:	6878      	ldr	r0, [r7, #4]
 800863a:	f001 f8b9 	bl	80097b0 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800863e:	e025      	b.n	800868c <USBD_StdEPReq+0x140>
          USBD_CtlError(pdev, req);
 8008640:	6839      	ldr	r1, [r7, #0]
 8008642:	6878      	ldr	r0, [r7, #4]
 8008644:	f000 fc2a 	bl	8008e9c <USBD_CtlError>
        break;
 8008648:	e020      	b.n	800868c <USBD_StdEPReq+0x140>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800864a:	683b      	ldr	r3, [r7, #0]
 800864c:	885b      	ldrh	r3, [r3, #2]
 800864e:	2b00      	cmp	r3, #0
 8008650:	d11b      	bne.n	800868a <USBD_StdEPReq+0x13e>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8008652:	7bbb      	ldrb	r3, [r7, #14]
 8008654:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008658:	2b00      	cmp	r3, #0
 800865a:	d004      	beq.n	8008666 <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800865c:	7bbb      	ldrb	r3, [r7, #14]
 800865e:	4619      	mov	r1, r3
 8008660:	6878      	ldr	r0, [r7, #4]
 8008662:	f001 f8c4 	bl	80097ee <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 8008666:	6878      	ldr	r0, [r7, #4]
 8008668:	f000 fce3 	bl	8009032 <USBD_CtlSendStatus>
          ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008672:	689b      	ldr	r3, [r3, #8]
 8008674:	6839      	ldr	r1, [r7, #0]
 8008676:	6878      	ldr	r0, [r7, #4]
 8008678:	4798      	blx	r3
 800867a:	4603      	mov	r3, r0
 800867c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800867e:	e004      	b.n	800868a <USBD_StdEPReq+0x13e>

      default:
        USBD_CtlError(pdev, req);
 8008680:	6839      	ldr	r1, [r7, #0]
 8008682:	6878      	ldr	r0, [r7, #4]
 8008684:	f000 fc0a 	bl	8008e9c <USBD_CtlError>
        break;
 8008688:	e000      	b.n	800868c <USBD_StdEPReq+0x140>
        break;
 800868a:	bf00      	nop
      }
      break;
 800868c:	e0aa      	b.n	80087e4 <USBD_StdEPReq+0x298>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008694:	2b02      	cmp	r3, #2
 8008696:	d002      	beq.n	800869e <USBD_StdEPReq+0x152>
 8008698:	2b03      	cmp	r3, #3
 800869a:	d032      	beq.n	8008702 <USBD_StdEPReq+0x1b6>
 800869c:	e097      	b.n	80087ce <USBD_StdEPReq+0x282>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800869e:	7bbb      	ldrb	r3, [r7, #14]
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d007      	beq.n	80086b4 <USBD_StdEPReq+0x168>
 80086a4:	7bbb      	ldrb	r3, [r7, #14]
 80086a6:	2b80      	cmp	r3, #128	; 0x80
 80086a8:	d004      	beq.n	80086b4 <USBD_StdEPReq+0x168>
        {
          USBD_CtlError(pdev, req);
 80086aa:	6839      	ldr	r1, [r7, #0]
 80086ac:	6878      	ldr	r0, [r7, #4]
 80086ae:	f000 fbf5 	bl	8008e9c <USBD_CtlError>
          break;
 80086b2:	e091      	b.n	80087d8 <USBD_StdEPReq+0x28c>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80086b4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	da0b      	bge.n	80086d4 <USBD_StdEPReq+0x188>
 80086bc:	7bbb      	ldrb	r3, [r7, #14]
 80086be:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80086c2:	4613      	mov	r3, r2
 80086c4:	009b      	lsls	r3, r3, #2
 80086c6:	4413      	add	r3, r2
 80086c8:	009b      	lsls	r3, r3, #2
 80086ca:	3310      	adds	r3, #16
 80086cc:	687a      	ldr	r2, [r7, #4]
 80086ce:	4413      	add	r3, r2
 80086d0:	3304      	adds	r3, #4
 80086d2:	e00b      	b.n	80086ec <USBD_StdEPReq+0x1a0>
              &pdev->ep_out[ep_addr & 0x7FU];
 80086d4:	7bbb      	ldrb	r3, [r7, #14]
 80086d6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80086da:	4613      	mov	r3, r2
 80086dc:	009b      	lsls	r3, r3, #2
 80086de:	4413      	add	r3, r2
 80086e0:	009b      	lsls	r3, r3, #2
 80086e2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80086e6:	687a      	ldr	r2, [r7, #4]
 80086e8:	4413      	add	r3, r2
 80086ea:	3304      	adds	r3, #4
 80086ec:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 80086ee:	68bb      	ldr	r3, [r7, #8]
 80086f0:	2200      	movs	r2, #0
 80086f2:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80086f4:	68bb      	ldr	r3, [r7, #8]
 80086f6:	2202      	movs	r2, #2
 80086f8:	4619      	mov	r1, r3
 80086fa:	6878      	ldr	r0, [r7, #4]
 80086fc:	f000 fc3f 	bl	8008f7e <USBD_CtlSendData>
        break;
 8008700:	e06a      	b.n	80087d8 <USBD_StdEPReq+0x28c>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 8008702:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008706:	2b00      	cmp	r3, #0
 8008708:	da11      	bge.n	800872e <USBD_StdEPReq+0x1e2>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800870a:	7bbb      	ldrb	r3, [r7, #14]
 800870c:	f003 020f 	and.w	r2, r3, #15
 8008710:	6879      	ldr	r1, [r7, #4]
 8008712:	4613      	mov	r3, r2
 8008714:	009b      	lsls	r3, r3, #2
 8008716:	4413      	add	r3, r2
 8008718:	009b      	lsls	r3, r3, #2
 800871a:	440b      	add	r3, r1
 800871c:	3324      	adds	r3, #36	; 0x24
 800871e:	881b      	ldrh	r3, [r3, #0]
 8008720:	2b00      	cmp	r3, #0
 8008722:	d117      	bne.n	8008754 <USBD_StdEPReq+0x208>
          {
            USBD_CtlError(pdev, req);
 8008724:	6839      	ldr	r1, [r7, #0]
 8008726:	6878      	ldr	r0, [r7, #4]
 8008728:	f000 fbb8 	bl	8008e9c <USBD_CtlError>
            break;
 800872c:	e054      	b.n	80087d8 <USBD_StdEPReq+0x28c>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800872e:	7bbb      	ldrb	r3, [r7, #14]
 8008730:	f003 020f 	and.w	r2, r3, #15
 8008734:	6879      	ldr	r1, [r7, #4]
 8008736:	4613      	mov	r3, r2
 8008738:	009b      	lsls	r3, r3, #2
 800873a:	4413      	add	r3, r2
 800873c:	009b      	lsls	r3, r3, #2
 800873e:	440b      	add	r3, r1
 8008740:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008744:	881b      	ldrh	r3, [r3, #0]
 8008746:	2b00      	cmp	r3, #0
 8008748:	d104      	bne.n	8008754 <USBD_StdEPReq+0x208>
          {
            USBD_CtlError(pdev, req);
 800874a:	6839      	ldr	r1, [r7, #0]
 800874c:	6878      	ldr	r0, [r7, #4]
 800874e:	f000 fba5 	bl	8008e9c <USBD_CtlError>
            break;
 8008752:	e041      	b.n	80087d8 <USBD_StdEPReq+0x28c>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008754:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008758:	2b00      	cmp	r3, #0
 800875a:	da0b      	bge.n	8008774 <USBD_StdEPReq+0x228>
 800875c:	7bbb      	ldrb	r3, [r7, #14]
 800875e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008762:	4613      	mov	r3, r2
 8008764:	009b      	lsls	r3, r3, #2
 8008766:	4413      	add	r3, r2
 8008768:	009b      	lsls	r3, r3, #2
 800876a:	3310      	adds	r3, #16
 800876c:	687a      	ldr	r2, [r7, #4]
 800876e:	4413      	add	r3, r2
 8008770:	3304      	adds	r3, #4
 8008772:	e00b      	b.n	800878c <USBD_StdEPReq+0x240>
              &pdev->ep_out[ep_addr & 0x7FU];
 8008774:	7bbb      	ldrb	r3, [r7, #14]
 8008776:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800877a:	4613      	mov	r3, r2
 800877c:	009b      	lsls	r3, r3, #2
 800877e:	4413      	add	r3, r2
 8008780:	009b      	lsls	r3, r3, #2
 8008782:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008786:	687a      	ldr	r2, [r7, #4]
 8008788:	4413      	add	r3, r2
 800878a:	3304      	adds	r3, #4
 800878c:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800878e:	7bbb      	ldrb	r3, [r7, #14]
 8008790:	2b00      	cmp	r3, #0
 8008792:	d002      	beq.n	800879a <USBD_StdEPReq+0x24e>
 8008794:	7bbb      	ldrb	r3, [r7, #14]
 8008796:	2b80      	cmp	r3, #128	; 0x80
 8008798:	d103      	bne.n	80087a2 <USBD_StdEPReq+0x256>
          {
            pep->status = 0x0000U;
 800879a:	68bb      	ldr	r3, [r7, #8]
 800879c:	2200      	movs	r2, #0
 800879e:	601a      	str	r2, [r3, #0]
 80087a0:	e00e      	b.n	80087c0 <USBD_StdEPReq+0x274>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80087a2:	7bbb      	ldrb	r3, [r7, #14]
 80087a4:	4619      	mov	r1, r3
 80087a6:	6878      	ldr	r0, [r7, #4]
 80087a8:	f001 f840 	bl	800982c <USBD_LL_IsStallEP>
 80087ac:	4603      	mov	r3, r0
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d003      	beq.n	80087ba <USBD_StdEPReq+0x26e>
          {
            pep->status = 0x0001U;
 80087b2:	68bb      	ldr	r3, [r7, #8]
 80087b4:	2201      	movs	r2, #1
 80087b6:	601a      	str	r2, [r3, #0]
 80087b8:	e002      	b.n	80087c0 <USBD_StdEPReq+0x274>
          }
          else
          {
            pep->status = 0x0000U;
 80087ba:	68bb      	ldr	r3, [r7, #8]
 80087bc:	2200      	movs	r2, #0
 80087be:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80087c0:	68bb      	ldr	r3, [r7, #8]
 80087c2:	2202      	movs	r2, #2
 80087c4:	4619      	mov	r1, r3
 80087c6:	6878      	ldr	r0, [r7, #4]
 80087c8:	f000 fbd9 	bl	8008f7e <USBD_CtlSendData>
          break;
 80087cc:	e004      	b.n	80087d8 <USBD_StdEPReq+0x28c>

      default:
        USBD_CtlError(pdev, req);
 80087ce:	6839      	ldr	r1, [r7, #0]
 80087d0:	6878      	ldr	r0, [r7, #4]
 80087d2:	f000 fb63 	bl	8008e9c <USBD_CtlError>
        break;
 80087d6:	bf00      	nop
      }
      break;
 80087d8:	e004      	b.n	80087e4 <USBD_StdEPReq+0x298>

    default:
      USBD_CtlError(pdev, req);
 80087da:	6839      	ldr	r1, [r7, #0]
 80087dc:	6878      	ldr	r0, [r7, #4]
 80087de:	f000 fb5d 	bl	8008e9c <USBD_CtlError>
      break;
 80087e2:	bf00      	nop
    }
    break;
 80087e4:	e004      	b.n	80087f0 <USBD_StdEPReq+0x2a4>

  default:
    USBD_CtlError(pdev, req);
 80087e6:	6839      	ldr	r1, [r7, #0]
 80087e8:	6878      	ldr	r0, [r7, #4]
 80087ea:	f000 fb57 	bl	8008e9c <USBD_CtlError>
    break;
 80087ee:	bf00      	nop
  }

  return ret;
 80087f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80087f2:	4618      	mov	r0, r3
 80087f4:	3710      	adds	r7, #16
 80087f6:	46bd      	mov	sp, r7
 80087f8:	bd80      	pop	{r7, pc}
	...

080087fc <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80087fc:	b580      	push	{r7, lr}
 80087fe:	b084      	sub	sp, #16
 8008800:	af00      	add	r7, sp, #0
 8008802:	6078      	str	r0, [r7, #4]
 8008804:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008806:	2300      	movs	r3, #0
 8008808:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800880a:	2300      	movs	r3, #0
 800880c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800880e:	2300      	movs	r3, #0
 8008810:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008812:	683b      	ldr	r3, [r7, #0]
 8008814:	885b      	ldrh	r3, [r3, #2]
 8008816:	0a1b      	lsrs	r3, r3, #8
 8008818:	b29b      	uxth	r3, r3
 800881a:	3b01      	subs	r3, #1
 800881c:	2b0e      	cmp	r3, #14
 800881e:	f200 8152 	bhi.w	8008ac6 <USBD_GetDescriptor+0x2ca>
 8008822:	a201      	add	r2, pc, #4	; (adr r2, 8008828 <USBD_GetDescriptor+0x2c>)
 8008824:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008828:	08008899 	.word	0x08008899
 800882c:	080088b1 	.word	0x080088b1
 8008830:	080088f1 	.word	0x080088f1
 8008834:	08008ac7 	.word	0x08008ac7
 8008838:	08008ac7 	.word	0x08008ac7
 800883c:	08008a67 	.word	0x08008a67
 8008840:	08008a93 	.word	0x08008a93
 8008844:	08008ac7 	.word	0x08008ac7
 8008848:	08008ac7 	.word	0x08008ac7
 800884c:	08008ac7 	.word	0x08008ac7
 8008850:	08008ac7 	.word	0x08008ac7
 8008854:	08008ac7 	.word	0x08008ac7
 8008858:	08008ac7 	.word	0x08008ac7
 800885c:	08008ac7 	.word	0x08008ac7
 8008860:	08008865 	.word	0x08008865
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
  case USB_DESC_TYPE_BOS:
    if (pdev->pDesc->GetBOSDescriptor != NULL)
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800886a:	69db      	ldr	r3, [r3, #28]
 800886c:	2b00      	cmp	r3, #0
 800886e:	d00b      	beq.n	8008888 <USBD_GetDescriptor+0x8c>
    {
      pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008876:	69db      	ldr	r3, [r3, #28]
 8008878:	687a      	ldr	r2, [r7, #4]
 800887a:	7c12      	ldrb	r2, [r2, #16]
 800887c:	f107 0108 	add.w	r1, r7, #8
 8008880:	4610      	mov	r0, r2
 8008882:	4798      	blx	r3
 8008884:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8008886:	e126      	b.n	8008ad6 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 8008888:	6839      	ldr	r1, [r7, #0]
 800888a:	6878      	ldr	r0, [r7, #4]
 800888c:	f000 fb06 	bl	8008e9c <USBD_CtlError>
      err++;
 8008890:	7afb      	ldrb	r3, [r7, #11]
 8008892:	3301      	adds	r3, #1
 8008894:	72fb      	strb	r3, [r7, #11]
    break;
 8008896:	e11e      	b.n	8008ad6 <USBD_GetDescriptor+0x2da>
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	687a      	ldr	r2, [r7, #4]
 80088a2:	7c12      	ldrb	r2, [r2, #16]
 80088a4:	f107 0108 	add.w	r1, r7, #8
 80088a8:	4610      	mov	r0, r2
 80088aa:	4798      	blx	r3
 80088ac:	60f8      	str	r0, [r7, #12]
    break;
 80088ae:	e112      	b.n	8008ad6 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	7c1b      	ldrb	r3, [r3, #16]
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d10d      	bne.n	80088d4 <USBD_GetDescriptor+0xd8>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088c0:	f107 0208 	add.w	r2, r7, #8
 80088c4:	4610      	mov	r0, r2
 80088c6:	4798      	blx	r3
 80088c8:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	3301      	adds	r3, #1
 80088ce:	2202      	movs	r2, #2
 80088d0:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 80088d2:	e100      	b.n	8008ad6 <USBD_GetDescriptor+0x2da>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088dc:	f107 0208 	add.w	r2, r7, #8
 80088e0:	4610      	mov	r0, r2
 80088e2:	4798      	blx	r3
 80088e4:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	3301      	adds	r3, #1
 80088ea:	2202      	movs	r2, #2
 80088ec:	701a      	strb	r2, [r3, #0]
    break;
 80088ee:	e0f2      	b.n	8008ad6 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 80088f0:	683b      	ldr	r3, [r7, #0]
 80088f2:	885b      	ldrh	r3, [r3, #2]
 80088f4:	b2db      	uxtb	r3, r3
 80088f6:	2b05      	cmp	r3, #5
 80088f8:	f200 80ac 	bhi.w	8008a54 <USBD_GetDescriptor+0x258>
 80088fc:	a201      	add	r2, pc, #4	; (adr r2, 8008904 <USBD_GetDescriptor+0x108>)
 80088fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008902:	bf00      	nop
 8008904:	0800891d 	.word	0x0800891d
 8008908:	08008951 	.word	0x08008951
 800890c:	08008985 	.word	0x08008985
 8008910:	080089b9 	.word	0x080089b9
 8008914:	080089ed 	.word	0x080089ed
 8008918:	08008a21 	.word	0x08008a21
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008922:	685b      	ldr	r3, [r3, #4]
 8008924:	2b00      	cmp	r3, #0
 8008926:	d00b      	beq.n	8008940 <USBD_GetDescriptor+0x144>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800892e:	685b      	ldr	r3, [r3, #4]
 8008930:	687a      	ldr	r2, [r7, #4]
 8008932:	7c12      	ldrb	r2, [r2, #16]
 8008934:	f107 0108 	add.w	r1, r7, #8
 8008938:	4610      	mov	r0, r2
 800893a:	4798      	blx	r3
 800893c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800893e:	e091      	b.n	8008a64 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8008940:	6839      	ldr	r1, [r7, #0]
 8008942:	6878      	ldr	r0, [r7, #4]
 8008944:	f000 faaa 	bl	8008e9c <USBD_CtlError>
        err++;
 8008948:	7afb      	ldrb	r3, [r7, #11]
 800894a:	3301      	adds	r3, #1
 800894c:	72fb      	strb	r3, [r7, #11]
      break;
 800894e:	e089      	b.n	8008a64 <USBD_GetDescriptor+0x268>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008956:	689b      	ldr	r3, [r3, #8]
 8008958:	2b00      	cmp	r3, #0
 800895a:	d00b      	beq.n	8008974 <USBD_GetDescriptor+0x178>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008962:	689b      	ldr	r3, [r3, #8]
 8008964:	687a      	ldr	r2, [r7, #4]
 8008966:	7c12      	ldrb	r2, [r2, #16]
 8008968:	f107 0108 	add.w	r1, r7, #8
 800896c:	4610      	mov	r0, r2
 800896e:	4798      	blx	r3
 8008970:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008972:	e077      	b.n	8008a64 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8008974:	6839      	ldr	r1, [r7, #0]
 8008976:	6878      	ldr	r0, [r7, #4]
 8008978:	f000 fa90 	bl	8008e9c <USBD_CtlError>
        err++;
 800897c:	7afb      	ldrb	r3, [r7, #11]
 800897e:	3301      	adds	r3, #1
 8008980:	72fb      	strb	r3, [r7, #11]
      break;
 8008982:	e06f      	b.n	8008a64 <USBD_GetDescriptor+0x268>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800898a:	68db      	ldr	r3, [r3, #12]
 800898c:	2b00      	cmp	r3, #0
 800898e:	d00b      	beq.n	80089a8 <USBD_GetDescriptor+0x1ac>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008996:	68db      	ldr	r3, [r3, #12]
 8008998:	687a      	ldr	r2, [r7, #4]
 800899a:	7c12      	ldrb	r2, [r2, #16]
 800899c:	f107 0108 	add.w	r1, r7, #8
 80089a0:	4610      	mov	r0, r2
 80089a2:	4798      	blx	r3
 80089a4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80089a6:	e05d      	b.n	8008a64 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 80089a8:	6839      	ldr	r1, [r7, #0]
 80089aa:	6878      	ldr	r0, [r7, #4]
 80089ac:	f000 fa76 	bl	8008e9c <USBD_CtlError>
        err++;
 80089b0:	7afb      	ldrb	r3, [r7, #11]
 80089b2:	3301      	adds	r3, #1
 80089b4:	72fb      	strb	r3, [r7, #11]
      break;
 80089b6:	e055      	b.n	8008a64 <USBD_GetDescriptor+0x268>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089be:	691b      	ldr	r3, [r3, #16]
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d00b      	beq.n	80089dc <USBD_GetDescriptor+0x1e0>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089ca:	691b      	ldr	r3, [r3, #16]
 80089cc:	687a      	ldr	r2, [r7, #4]
 80089ce:	7c12      	ldrb	r2, [r2, #16]
 80089d0:	f107 0108 	add.w	r1, r7, #8
 80089d4:	4610      	mov	r0, r2
 80089d6:	4798      	blx	r3
 80089d8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80089da:	e043      	b.n	8008a64 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 80089dc:	6839      	ldr	r1, [r7, #0]
 80089de:	6878      	ldr	r0, [r7, #4]
 80089e0:	f000 fa5c 	bl	8008e9c <USBD_CtlError>
        err++;
 80089e4:	7afb      	ldrb	r3, [r7, #11]
 80089e6:	3301      	adds	r3, #1
 80089e8:	72fb      	strb	r3, [r7, #11]
      break;
 80089ea:	e03b      	b.n	8008a64 <USBD_GetDescriptor+0x268>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089f2:	695b      	ldr	r3, [r3, #20]
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d00b      	beq.n	8008a10 <USBD_GetDescriptor+0x214>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089fe:	695b      	ldr	r3, [r3, #20]
 8008a00:	687a      	ldr	r2, [r7, #4]
 8008a02:	7c12      	ldrb	r2, [r2, #16]
 8008a04:	f107 0108 	add.w	r1, r7, #8
 8008a08:	4610      	mov	r0, r2
 8008a0a:	4798      	blx	r3
 8008a0c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008a0e:	e029      	b.n	8008a64 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8008a10:	6839      	ldr	r1, [r7, #0]
 8008a12:	6878      	ldr	r0, [r7, #4]
 8008a14:	f000 fa42 	bl	8008e9c <USBD_CtlError>
        err++;
 8008a18:	7afb      	ldrb	r3, [r7, #11]
 8008a1a:	3301      	adds	r3, #1
 8008a1c:	72fb      	strb	r3, [r7, #11]
      break;
 8008a1e:	e021      	b.n	8008a64 <USBD_GetDescriptor+0x268>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a26:	699b      	ldr	r3, [r3, #24]
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d00b      	beq.n	8008a44 <USBD_GetDescriptor+0x248>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a32:	699b      	ldr	r3, [r3, #24]
 8008a34:	687a      	ldr	r2, [r7, #4]
 8008a36:	7c12      	ldrb	r2, [r2, #16]
 8008a38:	f107 0108 	add.w	r1, r7, #8
 8008a3c:	4610      	mov	r0, r2
 8008a3e:	4798      	blx	r3
 8008a40:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008a42:	e00f      	b.n	8008a64 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8008a44:	6839      	ldr	r1, [r7, #0]
 8008a46:	6878      	ldr	r0, [r7, #4]
 8008a48:	f000 fa28 	bl	8008e9c <USBD_CtlError>
        err++;
 8008a4c:	7afb      	ldrb	r3, [r7, #11]
 8008a4e:	3301      	adds	r3, #1
 8008a50:	72fb      	strb	r3, [r7, #11]
      break;
 8008a52:	e007      	b.n	8008a64 <USBD_GetDescriptor+0x268>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8008a54:	6839      	ldr	r1, [r7, #0]
 8008a56:	6878      	ldr	r0, [r7, #4]
 8008a58:	f000 fa20 	bl	8008e9c <USBD_CtlError>
      err++;
 8008a5c:	7afb      	ldrb	r3, [r7, #11]
 8008a5e:	3301      	adds	r3, #1
 8008a60:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 8008a62:	bf00      	nop
    }
    break;
 8008a64:	e037      	b.n	8008ad6 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	7c1b      	ldrb	r3, [r3, #16]
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d109      	bne.n	8008a82 <USBD_GetDescriptor+0x286>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a76:	f107 0208 	add.w	r2, r7, #8
 8008a7a:	4610      	mov	r0, r2
 8008a7c:	4798      	blx	r3
 8008a7e:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8008a80:	e029      	b.n	8008ad6 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 8008a82:	6839      	ldr	r1, [r7, #0]
 8008a84:	6878      	ldr	r0, [r7, #4]
 8008a86:	f000 fa09 	bl	8008e9c <USBD_CtlError>
      err++;
 8008a8a:	7afb      	ldrb	r3, [r7, #11]
 8008a8c:	3301      	adds	r3, #1
 8008a8e:	72fb      	strb	r3, [r7, #11]
    break;
 8008a90:	e021      	b.n	8008ad6 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	7c1b      	ldrb	r3, [r3, #16]
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d10d      	bne.n	8008ab6 <USBD_GetDescriptor+0x2ba>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008aa2:	f107 0208 	add.w	r2, r7, #8
 8008aa6:	4610      	mov	r0, r2
 8008aa8:	4798      	blx	r3
 8008aaa:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	3301      	adds	r3, #1
 8008ab0:	2207      	movs	r2, #7
 8008ab2:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8008ab4:	e00f      	b.n	8008ad6 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 8008ab6:	6839      	ldr	r1, [r7, #0]
 8008ab8:	6878      	ldr	r0, [r7, #4]
 8008aba:	f000 f9ef 	bl	8008e9c <USBD_CtlError>
      err++;
 8008abe:	7afb      	ldrb	r3, [r7, #11]
 8008ac0:	3301      	adds	r3, #1
 8008ac2:	72fb      	strb	r3, [r7, #11]
    break;
 8008ac4:	e007      	b.n	8008ad6 <USBD_GetDescriptor+0x2da>

  default:
    USBD_CtlError(pdev, req);
 8008ac6:	6839      	ldr	r1, [r7, #0]
 8008ac8:	6878      	ldr	r0, [r7, #4]
 8008aca:	f000 f9e7 	bl	8008e9c <USBD_CtlError>
    err++;
 8008ace:	7afb      	ldrb	r3, [r7, #11]
 8008ad0:	3301      	adds	r3, #1
 8008ad2:	72fb      	strb	r3, [r7, #11]
    break;
 8008ad4:	bf00      	nop
  }

  if (err != 0U)
 8008ad6:	7afb      	ldrb	r3, [r7, #11]
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d11e      	bne.n	8008b1a <USBD_GetDescriptor+0x31e>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8008adc:	683b      	ldr	r3, [r7, #0]
 8008ade:	88db      	ldrh	r3, [r3, #6]
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d016      	beq.n	8008b12 <USBD_GetDescriptor+0x316>
    {
      if (len != 0U)
 8008ae4:	893b      	ldrh	r3, [r7, #8]
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d00e      	beq.n	8008b08 <USBD_GetDescriptor+0x30c>
      {
        len = MIN(len, req->wLength);
 8008aea:	683b      	ldr	r3, [r7, #0]
 8008aec:	88da      	ldrh	r2, [r3, #6]
 8008aee:	893b      	ldrh	r3, [r7, #8]
 8008af0:	4293      	cmp	r3, r2
 8008af2:	bf28      	it	cs
 8008af4:	4613      	movcs	r3, r2
 8008af6:	b29b      	uxth	r3, r3
 8008af8:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8008afa:	893b      	ldrh	r3, [r7, #8]
 8008afc:	461a      	mov	r2, r3
 8008afe:	68f9      	ldr	r1, [r7, #12]
 8008b00:	6878      	ldr	r0, [r7, #4]
 8008b02:	f000 fa3c 	bl	8008f7e <USBD_CtlSendData>
 8008b06:	e009      	b.n	8008b1c <USBD_GetDescriptor+0x320>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8008b08:	6839      	ldr	r1, [r7, #0]
 8008b0a:	6878      	ldr	r0, [r7, #4]
 8008b0c:	f000 f9c6 	bl	8008e9c <USBD_CtlError>
 8008b10:	e004      	b.n	8008b1c <USBD_GetDescriptor+0x320>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8008b12:	6878      	ldr	r0, [r7, #4]
 8008b14:	f000 fa8d 	bl	8009032 <USBD_CtlSendStatus>
 8008b18:	e000      	b.n	8008b1c <USBD_GetDescriptor+0x320>
    return;
 8008b1a:	bf00      	nop
    }
  }
}
 8008b1c:	3710      	adds	r7, #16
 8008b1e:	46bd      	mov	sp, r7
 8008b20:	bd80      	pop	{r7, pc}
 8008b22:	bf00      	nop

08008b24 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b24:	b580      	push	{r7, lr}
 8008b26:	b084      	sub	sp, #16
 8008b28:	af00      	add	r7, sp, #0
 8008b2a:	6078      	str	r0, [r7, #4]
 8008b2c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008b2e:	683b      	ldr	r3, [r7, #0]
 8008b30:	889b      	ldrh	r3, [r3, #4]
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d130      	bne.n	8008b98 <USBD_SetAddress+0x74>
 8008b36:	683b      	ldr	r3, [r7, #0]
 8008b38:	88db      	ldrh	r3, [r3, #6]
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d12c      	bne.n	8008b98 <USBD_SetAddress+0x74>
 8008b3e:	683b      	ldr	r3, [r7, #0]
 8008b40:	885b      	ldrh	r3, [r3, #2]
 8008b42:	2b7f      	cmp	r3, #127	; 0x7f
 8008b44:	d828      	bhi.n	8008b98 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008b46:	683b      	ldr	r3, [r7, #0]
 8008b48:	885b      	ldrh	r3, [r3, #2]
 8008b4a:	b2db      	uxtb	r3, r3
 8008b4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b50:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b58:	2b03      	cmp	r3, #3
 8008b5a:	d104      	bne.n	8008b66 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8008b5c:	6839      	ldr	r1, [r7, #0]
 8008b5e:	6878      	ldr	r0, [r7, #4]
 8008b60:	f000 f99c 	bl	8008e9c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b64:	e01c      	b.n	8008ba0 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	7bfa      	ldrb	r2, [r7, #15]
 8008b6a:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008b6e:	7bfb      	ldrb	r3, [r7, #15]
 8008b70:	4619      	mov	r1, r3
 8008b72:	6878      	ldr	r0, [r7, #4]
 8008b74:	f000 fe87 	bl	8009886 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008b78:	6878      	ldr	r0, [r7, #4]
 8008b7a:	f000 fa5a 	bl	8009032 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008b7e:	7bfb      	ldrb	r3, [r7, #15]
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d004      	beq.n	8008b8e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	2202      	movs	r2, #2
 8008b88:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b8c:	e008      	b.n	8008ba0 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	2201      	movs	r2, #1
 8008b92:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b96:	e003      	b.n	8008ba0 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008b98:	6839      	ldr	r1, [r7, #0]
 8008b9a:	6878      	ldr	r0, [r7, #4]
 8008b9c:	f000 f97e 	bl	8008e9c <USBD_CtlError>
  }
}
 8008ba0:	bf00      	nop
 8008ba2:	3710      	adds	r7, #16
 8008ba4:	46bd      	mov	sp, r7
 8008ba6:	bd80      	pop	{r7, pc}

08008ba8 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ba8:	b580      	push	{r7, lr}
 8008baa:	b084      	sub	sp, #16
 8008bac:	af00      	add	r7, sp, #0
 8008bae:	6078      	str	r0, [r7, #4]
 8008bb0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008bb2:	2300      	movs	r3, #0
 8008bb4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008bb6:	683b      	ldr	r3, [r7, #0]
 8008bb8:	885b      	ldrh	r3, [r3, #2]
 8008bba:	b2da      	uxtb	r2, r3
 8008bbc:	4b4b      	ldr	r3, [pc, #300]	; (8008cec <USBD_SetConfig+0x144>)
 8008bbe:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008bc0:	4b4a      	ldr	r3, [pc, #296]	; (8008cec <USBD_SetConfig+0x144>)
 8008bc2:	781b      	ldrb	r3, [r3, #0]
 8008bc4:	2b01      	cmp	r3, #1
 8008bc6:	d905      	bls.n	8008bd4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008bc8:	6839      	ldr	r1, [r7, #0]
 8008bca:	6878      	ldr	r0, [r7, #4]
 8008bcc:	f000 f966 	bl	8008e9c <USBD_CtlError>
    return USBD_FAIL;
 8008bd0:	2303      	movs	r3, #3
 8008bd2:	e087      	b.n	8008ce4 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008bda:	2b02      	cmp	r3, #2
 8008bdc:	d002      	beq.n	8008be4 <USBD_SetConfig+0x3c>
 8008bde:	2b03      	cmp	r3, #3
 8008be0:	d025      	beq.n	8008c2e <USBD_SetConfig+0x86>
 8008be2:	e071      	b.n	8008cc8 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8008be4:	4b41      	ldr	r3, [pc, #260]	; (8008cec <USBD_SetConfig+0x144>)
 8008be6:	781b      	ldrb	r3, [r3, #0]
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d01c      	beq.n	8008c26 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8008bec:	4b3f      	ldr	r3, [pc, #252]	; (8008cec <USBD_SetConfig+0x144>)
 8008bee:	781b      	ldrb	r3, [r3, #0]
 8008bf0:	461a      	mov	r2, r3
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 8008bf6:	4b3d      	ldr	r3, [pc, #244]	; (8008cec <USBD_SetConfig+0x144>)
 8008bf8:	781b      	ldrb	r3, [r3, #0]
 8008bfa:	4619      	mov	r1, r3
 8008bfc:	6878      	ldr	r0, [r7, #4]
 8008bfe:	f7ff f9bd 	bl	8007f7c <USBD_SetClassConfig>
 8008c02:	4603      	mov	r3, r0
 8008c04:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 8008c06:	7bfb      	ldrb	r3, [r7, #15]
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d004      	beq.n	8008c16 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8008c0c:	6839      	ldr	r1, [r7, #0]
 8008c0e:	6878      	ldr	r0, [r7, #4]
 8008c10:	f000 f944 	bl	8008e9c <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8008c14:	e065      	b.n	8008ce2 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8008c16:	6878      	ldr	r0, [r7, #4]
 8008c18:	f000 fa0b 	bl	8009032 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	2203      	movs	r2, #3
 8008c20:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8008c24:	e05d      	b.n	8008ce2 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8008c26:	6878      	ldr	r0, [r7, #4]
 8008c28:	f000 fa03 	bl	8009032 <USBD_CtlSendStatus>
    break;
 8008c2c:	e059      	b.n	8008ce2 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 8008c2e:	4b2f      	ldr	r3, [pc, #188]	; (8008cec <USBD_SetConfig+0x144>)
 8008c30:	781b      	ldrb	r3, [r3, #0]
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d112      	bne.n	8008c5c <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	2202      	movs	r2, #2
 8008c3a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8008c3e:	4b2b      	ldr	r3, [pc, #172]	; (8008cec <USBD_SetConfig+0x144>)
 8008c40:	781b      	ldrb	r3, [r3, #0]
 8008c42:	461a      	mov	r2, r3
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008c48:	4b28      	ldr	r3, [pc, #160]	; (8008cec <USBD_SetConfig+0x144>)
 8008c4a:	781b      	ldrb	r3, [r3, #0]
 8008c4c:	4619      	mov	r1, r3
 8008c4e:	6878      	ldr	r0, [r7, #4]
 8008c50:	f7ff f9b0 	bl	8007fb4 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8008c54:	6878      	ldr	r0, [r7, #4]
 8008c56:	f000 f9ec 	bl	8009032 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8008c5a:	e042      	b.n	8008ce2 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8008c5c:	4b23      	ldr	r3, [pc, #140]	; (8008cec <USBD_SetConfig+0x144>)
 8008c5e:	781b      	ldrb	r3, [r3, #0]
 8008c60:	461a      	mov	r2, r3
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	685b      	ldr	r3, [r3, #4]
 8008c66:	429a      	cmp	r2, r3
 8008c68:	d02a      	beq.n	8008cc0 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	685b      	ldr	r3, [r3, #4]
 8008c6e:	b2db      	uxtb	r3, r3
 8008c70:	4619      	mov	r1, r3
 8008c72:	6878      	ldr	r0, [r7, #4]
 8008c74:	f7ff f99e 	bl	8007fb4 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8008c78:	4b1c      	ldr	r3, [pc, #112]	; (8008cec <USBD_SetConfig+0x144>)
 8008c7a:	781b      	ldrb	r3, [r3, #0]
 8008c7c:	461a      	mov	r2, r3
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8008c82:	4b1a      	ldr	r3, [pc, #104]	; (8008cec <USBD_SetConfig+0x144>)
 8008c84:	781b      	ldrb	r3, [r3, #0]
 8008c86:	4619      	mov	r1, r3
 8008c88:	6878      	ldr	r0, [r7, #4]
 8008c8a:	f7ff f977 	bl	8007f7c <USBD_SetClassConfig>
 8008c8e:	4603      	mov	r3, r0
 8008c90:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 8008c92:	7bfb      	ldrb	r3, [r7, #15]
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d00f      	beq.n	8008cb8 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8008c98:	6839      	ldr	r1, [r7, #0]
 8008c9a:	6878      	ldr	r0, [r7, #4]
 8008c9c:	f000 f8fe 	bl	8008e9c <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	685b      	ldr	r3, [r3, #4]
 8008ca4:	b2db      	uxtb	r3, r3
 8008ca6:	4619      	mov	r1, r3
 8008ca8:	6878      	ldr	r0, [r7, #4]
 8008caa:	f7ff f983 	bl	8007fb4 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	2202      	movs	r2, #2
 8008cb2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8008cb6:	e014      	b.n	8008ce2 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8008cb8:	6878      	ldr	r0, [r7, #4]
 8008cba:	f000 f9ba 	bl	8009032 <USBD_CtlSendStatus>
    break;
 8008cbe:	e010      	b.n	8008ce2 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8008cc0:	6878      	ldr	r0, [r7, #4]
 8008cc2:	f000 f9b6 	bl	8009032 <USBD_CtlSendStatus>
    break;
 8008cc6:	e00c      	b.n	8008ce2 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8008cc8:	6839      	ldr	r1, [r7, #0]
 8008cca:	6878      	ldr	r0, [r7, #4]
 8008ccc:	f000 f8e6 	bl	8008e9c <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008cd0:	4b06      	ldr	r3, [pc, #24]	; (8008cec <USBD_SetConfig+0x144>)
 8008cd2:	781b      	ldrb	r3, [r3, #0]
 8008cd4:	4619      	mov	r1, r3
 8008cd6:	6878      	ldr	r0, [r7, #4]
 8008cd8:	f7ff f96c 	bl	8007fb4 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8008cdc:	2303      	movs	r3, #3
 8008cde:	73fb      	strb	r3, [r7, #15]
    break;
 8008ce0:	bf00      	nop
  }

  return ret;
 8008ce2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ce4:	4618      	mov	r0, r3
 8008ce6:	3710      	adds	r7, #16
 8008ce8:	46bd      	mov	sp, r7
 8008cea:	bd80      	pop	{r7, pc}
 8008cec:	200001f5 	.word	0x200001f5

08008cf0 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008cf0:	b580      	push	{r7, lr}
 8008cf2:	b082      	sub	sp, #8
 8008cf4:	af00      	add	r7, sp, #0
 8008cf6:	6078      	str	r0, [r7, #4]
 8008cf8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008cfa:	683b      	ldr	r3, [r7, #0]
 8008cfc:	88db      	ldrh	r3, [r3, #6]
 8008cfe:	2b01      	cmp	r3, #1
 8008d00:	d004      	beq.n	8008d0c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008d02:	6839      	ldr	r1, [r7, #0]
 8008d04:	6878      	ldr	r0, [r7, #4]
 8008d06:	f000 f8c9 	bl	8008e9c <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 8008d0a:	e021      	b.n	8008d50 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d12:	2b01      	cmp	r3, #1
 8008d14:	db17      	blt.n	8008d46 <USBD_GetConfig+0x56>
 8008d16:	2b02      	cmp	r3, #2
 8008d18:	dd02      	ble.n	8008d20 <USBD_GetConfig+0x30>
 8008d1a:	2b03      	cmp	r3, #3
 8008d1c:	d00b      	beq.n	8008d36 <USBD_GetConfig+0x46>
 8008d1e:	e012      	b.n	8008d46 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	2200      	movs	r2, #0
 8008d24:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	3308      	adds	r3, #8
 8008d2a:	2201      	movs	r2, #1
 8008d2c:	4619      	mov	r1, r3
 8008d2e:	6878      	ldr	r0, [r7, #4]
 8008d30:	f000 f925 	bl	8008f7e <USBD_CtlSendData>
      break;
 8008d34:	e00c      	b.n	8008d50 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	3304      	adds	r3, #4
 8008d3a:	2201      	movs	r2, #1
 8008d3c:	4619      	mov	r1, r3
 8008d3e:	6878      	ldr	r0, [r7, #4]
 8008d40:	f000 f91d 	bl	8008f7e <USBD_CtlSendData>
      break;
 8008d44:	e004      	b.n	8008d50 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 8008d46:	6839      	ldr	r1, [r7, #0]
 8008d48:	6878      	ldr	r0, [r7, #4]
 8008d4a:	f000 f8a7 	bl	8008e9c <USBD_CtlError>
      break;
 8008d4e:	bf00      	nop
}
 8008d50:	bf00      	nop
 8008d52:	3708      	adds	r7, #8
 8008d54:	46bd      	mov	sp, r7
 8008d56:	bd80      	pop	{r7, pc}

08008d58 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d58:	b580      	push	{r7, lr}
 8008d5a:	b082      	sub	sp, #8
 8008d5c:	af00      	add	r7, sp, #0
 8008d5e:	6078      	str	r0, [r7, #4]
 8008d60:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d68:	3b01      	subs	r3, #1
 8008d6a:	2b02      	cmp	r3, #2
 8008d6c:	d81e      	bhi.n	8008dac <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 8008d6e:	683b      	ldr	r3, [r7, #0]
 8008d70:	88db      	ldrh	r3, [r3, #6]
 8008d72:	2b02      	cmp	r3, #2
 8008d74:	d004      	beq.n	8008d80 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8008d76:	6839      	ldr	r1, [r7, #0]
 8008d78:	6878      	ldr	r0, [r7, #4]
 8008d7a:	f000 f88f 	bl	8008e9c <USBD_CtlError>
      break;
 8008d7e:	e01a      	b.n	8008db6 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	2201      	movs	r2, #1
 8008d84:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d005      	beq.n	8008d9c <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	68db      	ldr	r3, [r3, #12]
 8008d94:	f043 0202 	orr.w	r2, r3, #2
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	330c      	adds	r3, #12
 8008da0:	2202      	movs	r2, #2
 8008da2:	4619      	mov	r1, r3
 8008da4:	6878      	ldr	r0, [r7, #4]
 8008da6:	f000 f8ea 	bl	8008f7e <USBD_CtlSendData>
    break;
 8008daa:	e004      	b.n	8008db6 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 8008dac:	6839      	ldr	r1, [r7, #0]
 8008dae:	6878      	ldr	r0, [r7, #4]
 8008db0:	f000 f874 	bl	8008e9c <USBD_CtlError>
    break;
 8008db4:	bf00      	nop
  }
}
 8008db6:	bf00      	nop
 8008db8:	3708      	adds	r7, #8
 8008dba:	46bd      	mov	sp, r7
 8008dbc:	bd80      	pop	{r7, pc}

08008dbe <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008dbe:	b580      	push	{r7, lr}
 8008dc0:	b082      	sub	sp, #8
 8008dc2:	af00      	add	r7, sp, #0
 8008dc4:	6078      	str	r0, [r7, #4]
 8008dc6:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008dc8:	683b      	ldr	r3, [r7, #0]
 8008dca:	885b      	ldrh	r3, [r3, #2]
 8008dcc:	2b01      	cmp	r3, #1
 8008dce:	d106      	bne.n	8008dde <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	2201      	movs	r2, #1
 8008dd4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008dd8:	6878      	ldr	r0, [r7, #4]
 8008dda:	f000 f92a 	bl	8009032 <USBD_CtlSendStatus>
  }
}
 8008dde:	bf00      	nop
 8008de0:	3708      	adds	r7, #8
 8008de2:	46bd      	mov	sp, r7
 8008de4:	bd80      	pop	{r7, pc}

08008de6 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008de6:	b580      	push	{r7, lr}
 8008de8:	b082      	sub	sp, #8
 8008dea:	af00      	add	r7, sp, #0
 8008dec:	6078      	str	r0, [r7, #4]
 8008dee:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008df6:	3b01      	subs	r3, #1
 8008df8:	2b02      	cmp	r3, #2
 8008dfa:	d80b      	bhi.n	8008e14 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008dfc:	683b      	ldr	r3, [r7, #0]
 8008dfe:	885b      	ldrh	r3, [r3, #2]
 8008e00:	2b01      	cmp	r3, #1
 8008e02:	d10c      	bne.n	8008e1e <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	2200      	movs	r2, #0
 8008e08:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008e0c:	6878      	ldr	r0, [r7, #4]
 8008e0e:	f000 f910 	bl	8009032 <USBD_CtlSendStatus>
      }
      break;
 8008e12:	e004      	b.n	8008e1e <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8008e14:	6839      	ldr	r1, [r7, #0]
 8008e16:	6878      	ldr	r0, [r7, #4]
 8008e18:	f000 f840 	bl	8008e9c <USBD_CtlError>
      break;
 8008e1c:	e000      	b.n	8008e20 <USBD_ClrFeature+0x3a>
      break;
 8008e1e:	bf00      	nop
  }
}
 8008e20:	bf00      	nop
 8008e22:	3708      	adds	r7, #8
 8008e24:	46bd      	mov	sp, r7
 8008e26:	bd80      	pop	{r7, pc}

08008e28 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008e28:	b580      	push	{r7, lr}
 8008e2a:	b084      	sub	sp, #16
 8008e2c:	af00      	add	r7, sp, #0
 8008e2e:	6078      	str	r0, [r7, #4]
 8008e30:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008e32:	683b      	ldr	r3, [r7, #0]
 8008e34:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	781a      	ldrb	r2, [r3, #0]
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	3301      	adds	r3, #1
 8008e42:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	781a      	ldrb	r2, [r3, #0]
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	3301      	adds	r3, #1
 8008e50:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008e52:	68f8      	ldr	r0, [r7, #12]
 8008e54:	f7ff faa8 	bl	80083a8 <SWAPBYTE>
 8008e58:	4603      	mov	r3, r0
 8008e5a:	461a      	mov	r2, r3
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	3301      	adds	r3, #1
 8008e64:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	3301      	adds	r3, #1
 8008e6a:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008e6c:	68f8      	ldr	r0, [r7, #12]
 8008e6e:	f7ff fa9b 	bl	80083a8 <SWAPBYTE>
 8008e72:	4603      	mov	r3, r0
 8008e74:	461a      	mov	r2, r3
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	3301      	adds	r3, #1
 8008e7e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	3301      	adds	r3, #1
 8008e84:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008e86:	68f8      	ldr	r0, [r7, #12]
 8008e88:	f7ff fa8e 	bl	80083a8 <SWAPBYTE>
 8008e8c:	4603      	mov	r3, r0
 8008e8e:	461a      	mov	r2, r3
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	80da      	strh	r2, [r3, #6]
}
 8008e94:	bf00      	nop
 8008e96:	3710      	adds	r7, #16
 8008e98:	46bd      	mov	sp, r7
 8008e9a:	bd80      	pop	{r7, pc}

08008e9c <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e9c:	b580      	push	{r7, lr}
 8008e9e:	b082      	sub	sp, #8
 8008ea0:	af00      	add	r7, sp, #0
 8008ea2:	6078      	str	r0, [r7, #4]
 8008ea4:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008ea6:	2180      	movs	r1, #128	; 0x80
 8008ea8:	6878      	ldr	r0, [r7, #4]
 8008eaa:	f000 fc81 	bl	80097b0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008eae:	2100      	movs	r1, #0
 8008eb0:	6878      	ldr	r0, [r7, #4]
 8008eb2:	f000 fc7d 	bl	80097b0 <USBD_LL_StallEP>
}
 8008eb6:	bf00      	nop
 8008eb8:	3708      	adds	r7, #8
 8008eba:	46bd      	mov	sp, r7
 8008ebc:	bd80      	pop	{r7, pc}

08008ebe <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008ebe:	b580      	push	{r7, lr}
 8008ec0:	b086      	sub	sp, #24
 8008ec2:	af00      	add	r7, sp, #0
 8008ec4:	60f8      	str	r0, [r7, #12]
 8008ec6:	60b9      	str	r1, [r7, #8]
 8008ec8:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008eca:	2300      	movs	r3, #0
 8008ecc:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d036      	beq.n	8008f42 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008ed8:	6938      	ldr	r0, [r7, #16]
 8008eda:	f000 f836 	bl	8008f4a <USBD_GetLen>
 8008ede:	4603      	mov	r3, r0
 8008ee0:	3301      	adds	r3, #1
 8008ee2:	b29b      	uxth	r3, r3
 8008ee4:	005b      	lsls	r3, r3, #1
 8008ee6:	b29a      	uxth	r2, r3
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008eec:	7dfb      	ldrb	r3, [r7, #23]
 8008eee:	68ba      	ldr	r2, [r7, #8]
 8008ef0:	4413      	add	r3, r2
 8008ef2:	687a      	ldr	r2, [r7, #4]
 8008ef4:	7812      	ldrb	r2, [r2, #0]
 8008ef6:	701a      	strb	r2, [r3, #0]
  idx++;
 8008ef8:	7dfb      	ldrb	r3, [r7, #23]
 8008efa:	3301      	adds	r3, #1
 8008efc:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008efe:	7dfb      	ldrb	r3, [r7, #23]
 8008f00:	68ba      	ldr	r2, [r7, #8]
 8008f02:	4413      	add	r3, r2
 8008f04:	2203      	movs	r2, #3
 8008f06:	701a      	strb	r2, [r3, #0]
  idx++;
 8008f08:	7dfb      	ldrb	r3, [r7, #23]
 8008f0a:	3301      	adds	r3, #1
 8008f0c:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008f0e:	e013      	b.n	8008f38 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008f10:	7dfb      	ldrb	r3, [r7, #23]
 8008f12:	68ba      	ldr	r2, [r7, #8]
 8008f14:	4413      	add	r3, r2
 8008f16:	693a      	ldr	r2, [r7, #16]
 8008f18:	7812      	ldrb	r2, [r2, #0]
 8008f1a:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008f1c:	693b      	ldr	r3, [r7, #16]
 8008f1e:	3301      	adds	r3, #1
 8008f20:	613b      	str	r3, [r7, #16]
    idx++;
 8008f22:	7dfb      	ldrb	r3, [r7, #23]
 8008f24:	3301      	adds	r3, #1
 8008f26:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008f28:	7dfb      	ldrb	r3, [r7, #23]
 8008f2a:	68ba      	ldr	r2, [r7, #8]
 8008f2c:	4413      	add	r3, r2
 8008f2e:	2200      	movs	r2, #0
 8008f30:	701a      	strb	r2, [r3, #0]
    idx++;
 8008f32:	7dfb      	ldrb	r3, [r7, #23]
 8008f34:	3301      	adds	r3, #1
 8008f36:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008f38:	693b      	ldr	r3, [r7, #16]
 8008f3a:	781b      	ldrb	r3, [r3, #0]
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d1e7      	bne.n	8008f10 <USBD_GetString+0x52>
 8008f40:	e000      	b.n	8008f44 <USBD_GetString+0x86>
    return;
 8008f42:	bf00      	nop
  }
}
 8008f44:	3718      	adds	r7, #24
 8008f46:	46bd      	mov	sp, r7
 8008f48:	bd80      	pop	{r7, pc}

08008f4a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008f4a:	b480      	push	{r7}
 8008f4c:	b085      	sub	sp, #20
 8008f4e:	af00      	add	r7, sp, #0
 8008f50:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008f52:	2300      	movs	r3, #0
 8008f54:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008f5a:	e005      	b.n	8008f68 <USBD_GetLen+0x1e>
  {
    len++;
 8008f5c:	7bfb      	ldrb	r3, [r7, #15]
 8008f5e:	3301      	adds	r3, #1
 8008f60:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008f62:	68bb      	ldr	r3, [r7, #8]
 8008f64:	3301      	adds	r3, #1
 8008f66:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008f68:	68bb      	ldr	r3, [r7, #8]
 8008f6a:	781b      	ldrb	r3, [r3, #0]
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d1f5      	bne.n	8008f5c <USBD_GetLen+0x12>
  }

  return len;
 8008f70:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f72:	4618      	mov	r0, r3
 8008f74:	3714      	adds	r7, #20
 8008f76:	46bd      	mov	sp, r7
 8008f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f7c:	4770      	bx	lr

08008f7e <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008f7e:	b580      	push	{r7, lr}
 8008f80:	b084      	sub	sp, #16
 8008f82:	af00      	add	r7, sp, #0
 8008f84:	60f8      	str	r0, [r7, #12]
 8008f86:	60b9      	str	r1, [r7, #8]
 8008f88:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	2202      	movs	r2, #2
 8008f8e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	687a      	ldr	r2, [r7, #4]
 8008f96:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	687a      	ldr	r2, [r7, #4]
 8008f9c:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	68ba      	ldr	r2, [r7, #8]
 8008fa2:	2100      	movs	r1, #0
 8008fa4:	68f8      	ldr	r0, [r7, #12]
 8008fa6:	f000 fc8d 	bl	80098c4 <USBD_LL_Transmit>

  return USBD_OK;
 8008faa:	2300      	movs	r3, #0
}
 8008fac:	4618      	mov	r0, r3
 8008fae:	3710      	adds	r7, #16
 8008fb0:	46bd      	mov	sp, r7
 8008fb2:	bd80      	pop	{r7, pc}

08008fb4 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008fb4:	b580      	push	{r7, lr}
 8008fb6:	b084      	sub	sp, #16
 8008fb8:	af00      	add	r7, sp, #0
 8008fba:	60f8      	str	r0, [r7, #12]
 8008fbc:	60b9      	str	r1, [r7, #8]
 8008fbe:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	68ba      	ldr	r2, [r7, #8]
 8008fc4:	2100      	movs	r1, #0
 8008fc6:	68f8      	ldr	r0, [r7, #12]
 8008fc8:	f000 fc7c 	bl	80098c4 <USBD_LL_Transmit>

  return USBD_OK;
 8008fcc:	2300      	movs	r3, #0
}
 8008fce:	4618      	mov	r0, r3
 8008fd0:	3710      	adds	r7, #16
 8008fd2:	46bd      	mov	sp, r7
 8008fd4:	bd80      	pop	{r7, pc}

08008fd6 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008fd6:	b580      	push	{r7, lr}
 8008fd8:	b084      	sub	sp, #16
 8008fda:	af00      	add	r7, sp, #0
 8008fdc:	60f8      	str	r0, [r7, #12]
 8008fde:	60b9      	str	r1, [r7, #8]
 8008fe0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	2203      	movs	r2, #3
 8008fe6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	687a      	ldr	r2, [r7, #4]
 8008fee:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	687a      	ldr	r2, [r7, #4]
 8008ff6:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	68ba      	ldr	r2, [r7, #8]
 8008ffe:	2100      	movs	r1, #0
 8009000:	68f8      	ldr	r0, [r7, #12]
 8009002:	f000 fc80 	bl	8009906 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009006:	2300      	movs	r3, #0
}
 8009008:	4618      	mov	r0, r3
 800900a:	3710      	adds	r7, #16
 800900c:	46bd      	mov	sp, r7
 800900e:	bd80      	pop	{r7, pc}

08009010 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009010:	b580      	push	{r7, lr}
 8009012:	b084      	sub	sp, #16
 8009014:	af00      	add	r7, sp, #0
 8009016:	60f8      	str	r0, [r7, #12]
 8009018:	60b9      	str	r1, [r7, #8]
 800901a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	68ba      	ldr	r2, [r7, #8]
 8009020:	2100      	movs	r1, #0
 8009022:	68f8      	ldr	r0, [r7, #12]
 8009024:	f000 fc6f 	bl	8009906 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009028:	2300      	movs	r3, #0
}
 800902a:	4618      	mov	r0, r3
 800902c:	3710      	adds	r7, #16
 800902e:	46bd      	mov	sp, r7
 8009030:	bd80      	pop	{r7, pc}

08009032 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009032:	b580      	push	{r7, lr}
 8009034:	b082      	sub	sp, #8
 8009036:	af00      	add	r7, sp, #0
 8009038:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	2204      	movs	r2, #4
 800903e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009042:	2300      	movs	r3, #0
 8009044:	2200      	movs	r2, #0
 8009046:	2100      	movs	r1, #0
 8009048:	6878      	ldr	r0, [r7, #4]
 800904a:	f000 fc3b 	bl	80098c4 <USBD_LL_Transmit>

  return USBD_OK;
 800904e:	2300      	movs	r3, #0
}
 8009050:	4618      	mov	r0, r3
 8009052:	3708      	adds	r7, #8
 8009054:	46bd      	mov	sp, r7
 8009056:	bd80      	pop	{r7, pc}

08009058 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009058:	b580      	push	{r7, lr}
 800905a:	b082      	sub	sp, #8
 800905c:	af00      	add	r7, sp, #0
 800905e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	2205      	movs	r2, #5
 8009064:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009068:	2300      	movs	r3, #0
 800906a:	2200      	movs	r2, #0
 800906c:	2100      	movs	r1, #0
 800906e:	6878      	ldr	r0, [r7, #4]
 8009070:	f000 fc49 	bl	8009906 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009074:	2300      	movs	r3, #0
}
 8009076:	4618      	mov	r0, r3
 8009078:	3708      	adds	r7, #8
 800907a:	46bd      	mov	sp, r7
 800907c:	bd80      	pop	{r7, pc}
	...

08009080 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 8009080:	b580      	push	{r7, lr}
 8009082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 8009084:	2200      	movs	r2, #0
 8009086:	4912      	ldr	r1, [pc, #72]	; (80090d0 <MX_USB_Device_Init+0x50>)
 8009088:	4812      	ldr	r0, [pc, #72]	; (80090d4 <MX_USB_Device_Init+0x54>)
 800908a:	f7fe ff09 	bl	8007ea0 <USBD_Init>
 800908e:	4603      	mov	r3, r0
 8009090:	2b00      	cmp	r3, #0
 8009092:	d001      	beq.n	8009098 <MX_USB_Device_Init+0x18>
    Error_Handler();
 8009094:	f7f7 ff32 	bl	8000efc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 8009098:	490f      	ldr	r1, [pc, #60]	; (80090d8 <MX_USB_Device_Init+0x58>)
 800909a:	480e      	ldr	r0, [pc, #56]	; (80090d4 <MX_USB_Device_Init+0x54>)
 800909c:	f7fe ff30 	bl	8007f00 <USBD_RegisterClass>
 80090a0:	4603      	mov	r3, r0
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d001      	beq.n	80090aa <MX_USB_Device_Init+0x2a>
    Error_Handler();
 80090a6:	f7f7 ff29 	bl	8000efc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 80090aa:	490c      	ldr	r1, [pc, #48]	; (80090dc <MX_USB_Device_Init+0x5c>)
 80090ac:	4809      	ldr	r0, [pc, #36]	; (80090d4 <MX_USB_Device_Init+0x54>)
 80090ae:	f7fe fe5b 	bl	8007d68 <USBD_CDC_RegisterInterface>
 80090b2:	4603      	mov	r3, r0
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d001      	beq.n	80090bc <MX_USB_Device_Init+0x3c>
    Error_Handler();
 80090b8:	f7f7 ff20 	bl	8000efc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 80090bc:	4805      	ldr	r0, [pc, #20]	; (80090d4 <MX_USB_Device_Init+0x54>)
 80090be:	f7fe ff46 	bl	8007f4e <USBD_Start>
 80090c2:	4603      	mov	r3, r0
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d001      	beq.n	80090cc <MX_USB_Device_Init+0x4c>
    Error_Handler();
 80090c8:	f7f7 ff18 	bl	8000efc <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 80090cc:	bf00      	nop
 80090ce:	bd80      	pop	{r7, pc}
 80090d0:	20000178 	.word	0x20000178
 80090d4:	200006c8 	.word	0x200006c8
 80090d8:	20000060 	.word	0x20000060
 80090dc:	20000164 	.word	0x20000164

080090e0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80090e0:	b580      	push	{r7, lr}
 80090e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80090e4:	2200      	movs	r2, #0
 80090e6:	4905      	ldr	r1, [pc, #20]	; (80090fc <CDC_Init_FS+0x1c>)
 80090e8:	4805      	ldr	r0, [pc, #20]	; (8009100 <CDC_Init_FS+0x20>)
 80090ea:	f7fe fe52 	bl	8007d92 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80090ee:	4905      	ldr	r1, [pc, #20]	; (8009104 <CDC_Init_FS+0x24>)
 80090f0:	4803      	ldr	r0, [pc, #12]	; (8009100 <CDC_Init_FS+0x20>)
 80090f2:	f7fe fe67 	bl	8007dc4 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80090f6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80090f8:	4618      	mov	r0, r3
 80090fa:	bd80      	pop	{r7, pc}
 80090fc:	20000d80 	.word	0x20000d80
 8009100:	200006c8 	.word	0x200006c8
 8009104:	20000998 	.word	0x20000998

08009108 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009108:	b480      	push	{r7}
 800910a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800910c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800910e:	4618      	mov	r0, r3
 8009110:	46bd      	mov	sp, r7
 8009112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009116:	4770      	bx	lr

08009118 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009118:	b480      	push	{r7}
 800911a:	b083      	sub	sp, #12
 800911c:	af00      	add	r7, sp, #0
 800911e:	4603      	mov	r3, r0
 8009120:	6039      	str	r1, [r7, #0]
 8009122:	71fb      	strb	r3, [r7, #7]
 8009124:	4613      	mov	r3, r2
 8009126:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009128:	79fb      	ldrb	r3, [r7, #7]
 800912a:	2b23      	cmp	r3, #35	; 0x23
 800912c:	d84a      	bhi.n	80091c4 <CDC_Control_FS+0xac>
 800912e:	a201      	add	r2, pc, #4	; (adr r2, 8009134 <CDC_Control_FS+0x1c>)
 8009130:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009134:	080091c5 	.word	0x080091c5
 8009138:	080091c5 	.word	0x080091c5
 800913c:	080091c5 	.word	0x080091c5
 8009140:	080091c5 	.word	0x080091c5
 8009144:	080091c5 	.word	0x080091c5
 8009148:	080091c5 	.word	0x080091c5
 800914c:	080091c5 	.word	0x080091c5
 8009150:	080091c5 	.word	0x080091c5
 8009154:	080091c5 	.word	0x080091c5
 8009158:	080091c5 	.word	0x080091c5
 800915c:	080091c5 	.word	0x080091c5
 8009160:	080091c5 	.word	0x080091c5
 8009164:	080091c5 	.word	0x080091c5
 8009168:	080091c5 	.word	0x080091c5
 800916c:	080091c5 	.word	0x080091c5
 8009170:	080091c5 	.word	0x080091c5
 8009174:	080091c5 	.word	0x080091c5
 8009178:	080091c5 	.word	0x080091c5
 800917c:	080091c5 	.word	0x080091c5
 8009180:	080091c5 	.word	0x080091c5
 8009184:	080091c5 	.word	0x080091c5
 8009188:	080091c5 	.word	0x080091c5
 800918c:	080091c5 	.word	0x080091c5
 8009190:	080091c5 	.word	0x080091c5
 8009194:	080091c5 	.word	0x080091c5
 8009198:	080091c5 	.word	0x080091c5
 800919c:	080091c5 	.word	0x080091c5
 80091a0:	080091c5 	.word	0x080091c5
 80091a4:	080091c5 	.word	0x080091c5
 80091a8:	080091c5 	.word	0x080091c5
 80091ac:	080091c5 	.word	0x080091c5
 80091b0:	080091c5 	.word	0x080091c5
 80091b4:	080091c5 	.word	0x080091c5
 80091b8:	080091c5 	.word	0x080091c5
 80091bc:	080091c5 	.word	0x080091c5
 80091c0:	080091c5 	.word	0x080091c5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80091c4:	bf00      	nop
  }

  return (USBD_OK);
 80091c6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80091c8:	4618      	mov	r0, r3
 80091ca:	370c      	adds	r7, #12
 80091cc:	46bd      	mov	sp, r7
 80091ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d2:	4770      	bx	lr

080091d4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80091d4:	b580      	push	{r7, lr}
 80091d6:	b082      	sub	sp, #8
 80091d8:	af00      	add	r7, sp, #0
 80091da:	6078      	str	r0, [r7, #4]
 80091dc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  CDC_On_Receive(Buf, Len); // (1)
 80091de:	6839      	ldr	r1, [r7, #0]
 80091e0:	6878      	ldr	r0, [r7, #4]
 80091e2:	f7f7 f819 	bl	8000218 <CDC_On_Receive>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80091e6:	6879      	ldr	r1, [r7, #4]
 80091e8:	4805      	ldr	r0, [pc, #20]	; (8009200 <CDC_Receive_FS+0x2c>)
 80091ea:	f7fe fdeb 	bl	8007dc4 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80091ee:	4804      	ldr	r0, [pc, #16]	; (8009200 <CDC_Receive_FS+0x2c>)
 80091f0:	f7fe fe2c 	bl	8007e4c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80091f4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80091f6:	4618      	mov	r0, r3
 80091f8:	3708      	adds	r7, #8
 80091fa:	46bd      	mov	sp, r7
 80091fc:	bd80      	pop	{r7, pc}
 80091fe:	bf00      	nop
 8009200:	200006c8 	.word	0x200006c8

08009204 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8009204:	b580      	push	{r7, lr}
 8009206:	b084      	sub	sp, #16
 8009208:	af00      	add	r7, sp, #0
 800920a:	6078      	str	r0, [r7, #4]
 800920c:	460b      	mov	r3, r1
 800920e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8009210:	2300      	movs	r3, #0
 8009212:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8009214:	4b0d      	ldr	r3, [pc, #52]	; (800924c <CDC_Transmit_FS+0x48>)
 8009216:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800921a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800921c:	68bb      	ldr	r3, [r7, #8]
 800921e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009222:	2b00      	cmp	r3, #0
 8009224:	d001      	beq.n	800922a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8009226:	2301      	movs	r3, #1
 8009228:	e00b      	b.n	8009242 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800922a:	887b      	ldrh	r3, [r7, #2]
 800922c:	461a      	mov	r2, r3
 800922e:	6879      	ldr	r1, [r7, #4]
 8009230:	4806      	ldr	r0, [pc, #24]	; (800924c <CDC_Transmit_FS+0x48>)
 8009232:	f7fe fdae 	bl	8007d92 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8009236:	4805      	ldr	r0, [pc, #20]	; (800924c <CDC_Transmit_FS+0x48>)
 8009238:	f7fe fdd8 	bl	8007dec <USBD_CDC_TransmitPacket>
 800923c:	4603      	mov	r3, r0
 800923e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8009240:	7bfb      	ldrb	r3, [r7, #15]
}
 8009242:	4618      	mov	r0, r3
 8009244:	3710      	adds	r7, #16
 8009246:	46bd      	mov	sp, r7
 8009248:	bd80      	pop	{r7, pc}
 800924a:	bf00      	nop
 800924c:	200006c8 	.word	0x200006c8

08009250 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8009250:	b480      	push	{r7}
 8009252:	b087      	sub	sp, #28
 8009254:	af00      	add	r7, sp, #0
 8009256:	60f8      	str	r0, [r7, #12]
 8009258:	60b9      	str	r1, [r7, #8]
 800925a:	4613      	mov	r3, r2
 800925c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800925e:	2300      	movs	r3, #0
 8009260:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8009262:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009266:	4618      	mov	r0, r3
 8009268:	371c      	adds	r7, #28
 800926a:	46bd      	mov	sp, r7
 800926c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009270:	4770      	bx	lr
	...

08009274 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009274:	b480      	push	{r7}
 8009276:	b083      	sub	sp, #12
 8009278:	af00      	add	r7, sp, #0
 800927a:	4603      	mov	r3, r0
 800927c:	6039      	str	r1, [r7, #0]
 800927e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 8009280:	683b      	ldr	r3, [r7, #0]
 8009282:	2212      	movs	r2, #18
 8009284:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 8009286:	4b03      	ldr	r3, [pc, #12]	; (8009294 <USBD_CDC_DeviceDescriptor+0x20>)
}
 8009288:	4618      	mov	r0, r3
 800928a:	370c      	adds	r7, #12
 800928c:	46bd      	mov	sp, r7
 800928e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009292:	4770      	bx	lr
 8009294:	20000198 	.word	0x20000198

08009298 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009298:	b480      	push	{r7}
 800929a:	b083      	sub	sp, #12
 800929c:	af00      	add	r7, sp, #0
 800929e:	4603      	mov	r3, r0
 80092a0:	6039      	str	r1, [r7, #0]
 80092a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80092a4:	683b      	ldr	r3, [r7, #0]
 80092a6:	2204      	movs	r2, #4
 80092a8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80092aa:	4b03      	ldr	r3, [pc, #12]	; (80092b8 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 80092ac:	4618      	mov	r0, r3
 80092ae:	370c      	adds	r7, #12
 80092b0:	46bd      	mov	sp, r7
 80092b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b6:	4770      	bx	lr
 80092b8:	200001ac 	.word	0x200001ac

080092bc <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80092bc:	b580      	push	{r7, lr}
 80092be:	b082      	sub	sp, #8
 80092c0:	af00      	add	r7, sp, #0
 80092c2:	4603      	mov	r3, r0
 80092c4:	6039      	str	r1, [r7, #0]
 80092c6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80092c8:	79fb      	ldrb	r3, [r7, #7]
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d105      	bne.n	80092da <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 80092ce:	683a      	ldr	r2, [r7, #0]
 80092d0:	4907      	ldr	r1, [pc, #28]	; (80092f0 <USBD_CDC_ProductStrDescriptor+0x34>)
 80092d2:	4808      	ldr	r0, [pc, #32]	; (80092f4 <USBD_CDC_ProductStrDescriptor+0x38>)
 80092d4:	f7ff fdf3 	bl	8008ebe <USBD_GetString>
 80092d8:	e004      	b.n	80092e4 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 80092da:	683a      	ldr	r2, [r7, #0]
 80092dc:	4904      	ldr	r1, [pc, #16]	; (80092f0 <USBD_CDC_ProductStrDescriptor+0x34>)
 80092de:	4805      	ldr	r0, [pc, #20]	; (80092f4 <USBD_CDC_ProductStrDescriptor+0x38>)
 80092e0:	f7ff fded 	bl	8008ebe <USBD_GetString>
  }
  return USBD_StrDesc;
 80092e4:	4b02      	ldr	r3, [pc, #8]	; (80092f0 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 80092e6:	4618      	mov	r0, r3
 80092e8:	3708      	adds	r7, #8
 80092ea:	46bd      	mov	sp, r7
 80092ec:	bd80      	pop	{r7, pc}
 80092ee:	bf00      	nop
 80092f0:	20001168 	.word	0x20001168
 80092f4:	08009af8 	.word	0x08009af8

080092f8 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80092f8:	b580      	push	{r7, lr}
 80092fa:	b082      	sub	sp, #8
 80092fc:	af00      	add	r7, sp, #0
 80092fe:	4603      	mov	r3, r0
 8009300:	6039      	str	r1, [r7, #0]
 8009302:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009304:	683a      	ldr	r2, [r7, #0]
 8009306:	4904      	ldr	r1, [pc, #16]	; (8009318 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 8009308:	4804      	ldr	r0, [pc, #16]	; (800931c <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800930a:	f7ff fdd8 	bl	8008ebe <USBD_GetString>
  return USBD_StrDesc;
 800930e:	4b02      	ldr	r3, [pc, #8]	; (8009318 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 8009310:	4618      	mov	r0, r3
 8009312:	3708      	adds	r7, #8
 8009314:	46bd      	mov	sp, r7
 8009316:	bd80      	pop	{r7, pc}
 8009318:	20001168 	.word	0x20001168
 800931c:	08009b10 	.word	0x08009b10

08009320 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009320:	b580      	push	{r7, lr}
 8009322:	b082      	sub	sp, #8
 8009324:	af00      	add	r7, sp, #0
 8009326:	4603      	mov	r3, r0
 8009328:	6039      	str	r1, [r7, #0]
 800932a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800932c:	683b      	ldr	r3, [r7, #0]
 800932e:	221a      	movs	r2, #26
 8009330:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009332:	f000 f843 	bl	80093bc <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8009336:	4b02      	ldr	r3, [pc, #8]	; (8009340 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 8009338:	4618      	mov	r0, r3
 800933a:	3708      	adds	r7, #8
 800933c:	46bd      	mov	sp, r7
 800933e:	bd80      	pop	{r7, pc}
 8009340:	200001b0 	.word	0x200001b0

08009344 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009344:	b580      	push	{r7, lr}
 8009346:	b082      	sub	sp, #8
 8009348:	af00      	add	r7, sp, #0
 800934a:	4603      	mov	r3, r0
 800934c:	6039      	str	r1, [r7, #0]
 800934e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009350:	79fb      	ldrb	r3, [r7, #7]
 8009352:	2b00      	cmp	r3, #0
 8009354:	d105      	bne.n	8009362 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8009356:	683a      	ldr	r2, [r7, #0]
 8009358:	4907      	ldr	r1, [pc, #28]	; (8009378 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800935a:	4808      	ldr	r0, [pc, #32]	; (800937c <USBD_CDC_ConfigStrDescriptor+0x38>)
 800935c:	f7ff fdaf 	bl	8008ebe <USBD_GetString>
 8009360:	e004      	b.n	800936c <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8009362:	683a      	ldr	r2, [r7, #0]
 8009364:	4904      	ldr	r1, [pc, #16]	; (8009378 <USBD_CDC_ConfigStrDescriptor+0x34>)
 8009366:	4805      	ldr	r0, [pc, #20]	; (800937c <USBD_CDC_ConfigStrDescriptor+0x38>)
 8009368:	f7ff fda9 	bl	8008ebe <USBD_GetString>
  }
  return USBD_StrDesc;
 800936c:	4b02      	ldr	r3, [pc, #8]	; (8009378 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 800936e:	4618      	mov	r0, r3
 8009370:	3708      	adds	r7, #8
 8009372:	46bd      	mov	sp, r7
 8009374:	bd80      	pop	{r7, pc}
 8009376:	bf00      	nop
 8009378:	20001168 	.word	0x20001168
 800937c:	08009b24 	.word	0x08009b24

08009380 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009380:	b580      	push	{r7, lr}
 8009382:	b082      	sub	sp, #8
 8009384:	af00      	add	r7, sp, #0
 8009386:	4603      	mov	r3, r0
 8009388:	6039      	str	r1, [r7, #0]
 800938a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800938c:	79fb      	ldrb	r3, [r7, #7]
 800938e:	2b00      	cmp	r3, #0
 8009390:	d105      	bne.n	800939e <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8009392:	683a      	ldr	r2, [r7, #0]
 8009394:	4907      	ldr	r1, [pc, #28]	; (80093b4 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8009396:	4808      	ldr	r0, [pc, #32]	; (80093b8 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8009398:	f7ff fd91 	bl	8008ebe <USBD_GetString>
 800939c:	e004      	b.n	80093a8 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800939e:	683a      	ldr	r2, [r7, #0]
 80093a0:	4904      	ldr	r1, [pc, #16]	; (80093b4 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 80093a2:	4805      	ldr	r0, [pc, #20]	; (80093b8 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 80093a4:	f7ff fd8b 	bl	8008ebe <USBD_GetString>
  }
  return USBD_StrDesc;
 80093a8:	4b02      	ldr	r3, [pc, #8]	; (80093b4 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 80093aa:	4618      	mov	r0, r3
 80093ac:	3708      	adds	r7, #8
 80093ae:	46bd      	mov	sp, r7
 80093b0:	bd80      	pop	{r7, pc}
 80093b2:	bf00      	nop
 80093b4:	20001168 	.word	0x20001168
 80093b8:	08009b30 	.word	0x08009b30

080093bc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80093bc:	b580      	push	{r7, lr}
 80093be:	b084      	sub	sp, #16
 80093c0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80093c2:	4b0f      	ldr	r3, [pc, #60]	; (8009400 <Get_SerialNum+0x44>)
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80093c8:	4b0e      	ldr	r3, [pc, #56]	; (8009404 <Get_SerialNum+0x48>)
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80093ce:	4b0e      	ldr	r3, [pc, #56]	; (8009408 <Get_SerialNum+0x4c>)
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80093d4:	68fa      	ldr	r2, [r7, #12]
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	4413      	add	r3, r2
 80093da:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d009      	beq.n	80093f6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80093e2:	2208      	movs	r2, #8
 80093e4:	4909      	ldr	r1, [pc, #36]	; (800940c <Get_SerialNum+0x50>)
 80093e6:	68f8      	ldr	r0, [r7, #12]
 80093e8:	f000 f814 	bl	8009414 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80093ec:	2204      	movs	r2, #4
 80093ee:	4908      	ldr	r1, [pc, #32]	; (8009410 <Get_SerialNum+0x54>)
 80093f0:	68b8      	ldr	r0, [r7, #8]
 80093f2:	f000 f80f 	bl	8009414 <IntToUnicode>
  }
}
 80093f6:	bf00      	nop
 80093f8:	3710      	adds	r7, #16
 80093fa:	46bd      	mov	sp, r7
 80093fc:	bd80      	pop	{r7, pc}
 80093fe:	bf00      	nop
 8009400:	1fff7590 	.word	0x1fff7590
 8009404:	1fff7594 	.word	0x1fff7594
 8009408:	1fff7598 	.word	0x1fff7598
 800940c:	200001b2 	.word	0x200001b2
 8009410:	200001c2 	.word	0x200001c2

08009414 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009414:	b480      	push	{r7}
 8009416:	b087      	sub	sp, #28
 8009418:	af00      	add	r7, sp, #0
 800941a:	60f8      	str	r0, [r7, #12]
 800941c:	60b9      	str	r1, [r7, #8]
 800941e:	4613      	mov	r3, r2
 8009420:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009422:	2300      	movs	r3, #0
 8009424:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009426:	2300      	movs	r3, #0
 8009428:	75fb      	strb	r3, [r7, #23]
 800942a:	e027      	b.n	800947c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	0f1b      	lsrs	r3, r3, #28
 8009430:	2b09      	cmp	r3, #9
 8009432:	d80b      	bhi.n	800944c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	0f1b      	lsrs	r3, r3, #28
 8009438:	b2da      	uxtb	r2, r3
 800943a:	7dfb      	ldrb	r3, [r7, #23]
 800943c:	005b      	lsls	r3, r3, #1
 800943e:	4619      	mov	r1, r3
 8009440:	68bb      	ldr	r3, [r7, #8]
 8009442:	440b      	add	r3, r1
 8009444:	3230      	adds	r2, #48	; 0x30
 8009446:	b2d2      	uxtb	r2, r2
 8009448:	701a      	strb	r2, [r3, #0]
 800944a:	e00a      	b.n	8009462 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	0f1b      	lsrs	r3, r3, #28
 8009450:	b2da      	uxtb	r2, r3
 8009452:	7dfb      	ldrb	r3, [r7, #23]
 8009454:	005b      	lsls	r3, r3, #1
 8009456:	4619      	mov	r1, r3
 8009458:	68bb      	ldr	r3, [r7, #8]
 800945a:	440b      	add	r3, r1
 800945c:	3237      	adds	r2, #55	; 0x37
 800945e:	b2d2      	uxtb	r2, r2
 8009460:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	011b      	lsls	r3, r3, #4
 8009466:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009468:	7dfb      	ldrb	r3, [r7, #23]
 800946a:	005b      	lsls	r3, r3, #1
 800946c:	3301      	adds	r3, #1
 800946e:	68ba      	ldr	r2, [r7, #8]
 8009470:	4413      	add	r3, r2
 8009472:	2200      	movs	r2, #0
 8009474:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009476:	7dfb      	ldrb	r3, [r7, #23]
 8009478:	3301      	adds	r3, #1
 800947a:	75fb      	strb	r3, [r7, #23]
 800947c:	7dfa      	ldrb	r2, [r7, #23]
 800947e:	79fb      	ldrb	r3, [r7, #7]
 8009480:	429a      	cmp	r2, r3
 8009482:	d3d3      	bcc.n	800942c <IntToUnicode+0x18>
  }
}
 8009484:	bf00      	nop
 8009486:	371c      	adds	r7, #28
 8009488:	46bd      	mov	sp, r7
 800948a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800948e:	4770      	bx	lr

08009490 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACK == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACK */
{
 8009490:	b580      	push	{r7, lr}
 8009492:	b084      	sub	sp, #16
 8009494:	af00      	add	r7, sp, #0
 8009496:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	4a0d      	ldr	r2, [pc, #52]	; (80094d4 <HAL_PCD_MspInit+0x44>)
 800949e:	4293      	cmp	r3, r2
 80094a0:	d113      	bne.n	80094ca <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80094a2:	4b0d      	ldr	r3, [pc, #52]	; (80094d8 <HAL_PCD_MspInit+0x48>)
 80094a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80094a6:	4a0c      	ldr	r2, [pc, #48]	; (80094d8 <HAL_PCD_MspInit+0x48>)
 80094a8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80094ac:	6593      	str	r3, [r2, #88]	; 0x58
 80094ae:	4b0a      	ldr	r3, [pc, #40]	; (80094d8 <HAL_PCD_MspInit+0x48>)
 80094b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80094b2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80094b6:	60fb      	str	r3, [r7, #12]
 80094b8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 80094ba:	2200      	movs	r2, #0
 80094bc:	2100      	movs	r1, #0
 80094be:	2014      	movs	r0, #20
 80094c0:	f7f8 f92b 	bl	800171a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 80094c4:	2014      	movs	r0, #20
 80094c6:	f7f8 f942 	bl	800174e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80094ca:	bf00      	nop
 80094cc:	3710      	adds	r7, #16
 80094ce:	46bd      	mov	sp, r7
 80094d0:	bd80      	pop	{r7, pc}
 80094d2:	bf00      	nop
 80094d4:	40005c00 	.word	0x40005c00
 80094d8:	40021000 	.word	0x40021000

080094dc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80094dc:	b580      	push	{r7, lr}
 80094de:	b082      	sub	sp, #8
 80094e0:	af00      	add	r7, sp, #0
 80094e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	f8d3 22f0 	ldr.w	r2, [r3, #752]	; 0x2f0
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80094f0:	4619      	mov	r1, r3
 80094f2:	4610      	mov	r0, r2
 80094f4:	f7fe fd76 	bl	8007fe4 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 80094f8:	bf00      	nop
 80094fa:	3708      	adds	r7, #8
 80094fc:	46bd      	mov	sp, r7
 80094fe:	bd80      	pop	{r7, pc}

08009500 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009500:	b580      	push	{r7, lr}
 8009502:	b082      	sub	sp, #8
 8009504:	af00      	add	r7, sp, #0
 8009506:	6078      	str	r0, [r7, #4]
 8009508:	460b      	mov	r3, r1
 800950a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 8009512:	78fa      	ldrb	r2, [r7, #3]
 8009514:	6879      	ldr	r1, [r7, #4]
 8009516:	4613      	mov	r3, r2
 8009518:	009b      	lsls	r3, r3, #2
 800951a:	4413      	add	r3, r2
 800951c:	00db      	lsls	r3, r3, #3
 800951e:	440b      	add	r3, r1
 8009520:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8009524:	681a      	ldr	r2, [r3, #0]
 8009526:	78fb      	ldrb	r3, [r7, #3]
 8009528:	4619      	mov	r1, r3
 800952a:	f7fe fdae 	bl	800808a <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800952e:	bf00      	nop
 8009530:	3708      	adds	r7, #8
 8009532:	46bd      	mov	sp, r7
 8009534:	bd80      	pop	{r7, pc}

08009536 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009536:	b580      	push	{r7, lr}
 8009538:	b082      	sub	sp, #8
 800953a:	af00      	add	r7, sp, #0
 800953c:	6078      	str	r0, [r7, #4]
 800953e:	460b      	mov	r3, r1
 8009540:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 8009548:	78fa      	ldrb	r2, [r7, #3]
 800954a:	6879      	ldr	r1, [r7, #4]
 800954c:	4613      	mov	r3, r2
 800954e:	009b      	lsls	r3, r3, #2
 8009550:	4413      	add	r3, r2
 8009552:	00db      	lsls	r3, r3, #3
 8009554:	440b      	add	r3, r1
 8009556:	333c      	adds	r3, #60	; 0x3c
 8009558:	681a      	ldr	r2, [r3, #0]
 800955a:	78fb      	ldrb	r3, [r7, #3]
 800955c:	4619      	mov	r1, r3
 800955e:	f7fe fdf7 	bl	8008150 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 8009562:	bf00      	nop
 8009564:	3708      	adds	r7, #8
 8009566:	46bd      	mov	sp, r7
 8009568:	bd80      	pop	{r7, pc}

0800956a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800956a:	b580      	push	{r7, lr}
 800956c:	b082      	sub	sp, #8
 800956e:	af00      	add	r7, sp, #0
 8009570:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009578:	4618      	mov	r0, r3
 800957a:	f7fe fefb 	bl	8008374 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800957e:	bf00      	nop
 8009580:	3708      	adds	r7, #8
 8009582:	46bd      	mov	sp, r7
 8009584:	bd80      	pop	{r7, pc}

08009586 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009586:	b580      	push	{r7, lr}
 8009588:	b084      	sub	sp, #16
 800958a:	af00      	add	r7, sp, #0
 800958c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800958e:	2301      	movs	r3, #1
 8009590:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	689b      	ldr	r3, [r3, #8]
 8009596:	2b02      	cmp	r3, #2
 8009598:	d001      	beq.n	800959e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800959a:	f7f7 fcaf 	bl	8000efc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 80095a4:	7bfa      	ldrb	r2, [r7, #15]
 80095a6:	4611      	mov	r1, r2
 80095a8:	4618      	mov	r0, r3
 80095aa:	f7fe fea8 	bl	80082fe <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 80095b4:	4618      	mov	r0, r3
 80095b6:	f7fe fe61 	bl	800827c <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 80095ba:	bf00      	nop
 80095bc:	3710      	adds	r7, #16
 80095be:	46bd      	mov	sp, r7
 80095c0:	bd80      	pop	{r7, pc}
	...

080095c4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80095c4:	b580      	push	{r7, lr}
 80095c6:	b082      	sub	sp, #8
 80095c8:	af00      	add	r7, sp, #0
 80095ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 80095d2:	4618      	mov	r0, r3
 80095d4:	f7fe fea3 	bl	800831e <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	699b      	ldr	r3, [r3, #24]
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d005      	beq.n	80095ec <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80095e0:	4b04      	ldr	r3, [pc, #16]	; (80095f4 <HAL_PCD_SuspendCallback+0x30>)
 80095e2:	691b      	ldr	r3, [r3, #16]
 80095e4:	4a03      	ldr	r2, [pc, #12]	; (80095f4 <HAL_PCD_SuspendCallback+0x30>)
 80095e6:	f043 0306 	orr.w	r3, r3, #6
 80095ea:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 80095ec:	bf00      	nop
 80095ee:	3708      	adds	r7, #8
 80095f0:	46bd      	mov	sp, r7
 80095f2:	bd80      	pop	{r7, pc}
 80095f4:	e000ed00 	.word	0xe000ed00

080095f8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80095f8:	b580      	push	{r7, lr}
 80095fa:	b082      	sub	sp, #8
 80095fc:	af00      	add	r7, sp, #0
 80095fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	699b      	ldr	r3, [r3, #24]
 8009604:	2b00      	cmp	r3, #0
 8009606:	d007      	beq.n	8009618 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009608:	4b08      	ldr	r3, [pc, #32]	; (800962c <HAL_PCD_ResumeCallback+0x34>)
 800960a:	691b      	ldr	r3, [r3, #16]
 800960c:	4a07      	ldr	r2, [pc, #28]	; (800962c <HAL_PCD_ResumeCallback+0x34>)
 800960e:	f023 0306 	bic.w	r3, r3, #6
 8009612:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8009614:	f000 f9fa 	bl	8009a0c <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800961e:	4618      	mov	r0, r3
 8009620:	f7fe fe92 	bl	8008348 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 8009624:	bf00      	nop
 8009626:	3708      	adds	r7, #8
 8009628:	46bd      	mov	sp, r7
 800962a:	bd80      	pop	{r7, pc}
 800962c:	e000ed00 	.word	0xe000ed00

08009630 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009630:	b580      	push	{r7, lr}
 8009632:	b082      	sub	sp, #8
 8009634:	af00      	add	r7, sp, #0
 8009636:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 8009638:	4a2b      	ldr	r2, [pc, #172]	; (80096e8 <USBD_LL_Init+0xb8>)
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	4a29      	ldr	r2, [pc, #164]	; (80096e8 <USBD_LL_Init+0xb8>)
 8009644:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 8009648:	4b27      	ldr	r3, [pc, #156]	; (80096e8 <USBD_LL_Init+0xb8>)
 800964a:	4a28      	ldr	r2, [pc, #160]	; (80096ec <USBD_LL_Init+0xbc>)
 800964c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800964e:	4b26      	ldr	r3, [pc, #152]	; (80096e8 <USBD_LL_Init+0xb8>)
 8009650:	2208      	movs	r2, #8
 8009652:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8009654:	4b24      	ldr	r3, [pc, #144]	; (80096e8 <USBD_LL_Init+0xb8>)
 8009656:	2202      	movs	r2, #2
 8009658:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800965a:	4b23      	ldr	r3, [pc, #140]	; (80096e8 <USBD_LL_Init+0xb8>)
 800965c:	2202      	movs	r2, #2
 800965e:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8009660:	4b21      	ldr	r3, [pc, #132]	; (80096e8 <USBD_LL_Init+0xb8>)
 8009662:	2200      	movs	r2, #0
 8009664:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8009666:	4b20      	ldr	r3, [pc, #128]	; (80096e8 <USBD_LL_Init+0xb8>)
 8009668:	2200      	movs	r2, #0
 800966a:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800966c:	4b1e      	ldr	r3, [pc, #120]	; (80096e8 <USBD_LL_Init+0xb8>)
 800966e:	2200      	movs	r2, #0
 8009670:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8009672:	4b1d      	ldr	r3, [pc, #116]	; (80096e8 <USBD_LL_Init+0xb8>)
 8009674:	2200      	movs	r2, #0
 8009676:	621a      	str	r2, [r3, #32]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8009678:	481b      	ldr	r0, [pc, #108]	; (80096e8 <USBD_LL_Init+0xb8>)
 800967a:	f7f8 fa37 	bl	8001aec <HAL_PCD_Init>
 800967e:	4603      	mov	r3, r0
 8009680:	2b00      	cmp	r3, #0
 8009682:	d001      	beq.n	8009688 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 8009684:	f7f7 fc3a 	bl	8000efc <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800968e:	2318      	movs	r3, #24
 8009690:	2200      	movs	r2, #0
 8009692:	2100      	movs	r1, #0
 8009694:	f7f9 fd25 	bl	80030e2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800969e:	2358      	movs	r3, #88	; 0x58
 80096a0:	2200      	movs	r2, #0
 80096a2:	2180      	movs	r1, #128	; 0x80
 80096a4:	f7f9 fd1d 	bl	80030e2 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80096ae:	23c0      	movs	r3, #192	; 0xc0
 80096b0:	2200      	movs	r2, #0
 80096b2:	2181      	movs	r1, #129	; 0x81
 80096b4:	f7f9 fd15 	bl	80030e2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80096be:	f44f 7388 	mov.w	r3, #272	; 0x110
 80096c2:	2200      	movs	r2, #0
 80096c4:	2101      	movs	r1, #1
 80096c6:	f7f9 fd0c 	bl	80030e2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80096d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80096d4:	2200      	movs	r2, #0
 80096d6:	2182      	movs	r1, #130	; 0x82
 80096d8:	f7f9 fd03 	bl	80030e2 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 80096dc:	2300      	movs	r3, #0
}
 80096de:	4618      	mov	r0, r3
 80096e0:	3708      	adds	r7, #8
 80096e2:	46bd      	mov	sp, r7
 80096e4:	bd80      	pop	{r7, pc}
 80096e6:	bf00      	nop
 80096e8:	20001368 	.word	0x20001368
 80096ec:	40005c00 	.word	0x40005c00

080096f0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80096f0:	b580      	push	{r7, lr}
 80096f2:	b084      	sub	sp, #16
 80096f4:	af00      	add	r7, sp, #0
 80096f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80096f8:	2300      	movs	r3, #0
 80096fa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80096fc:	2300      	movs	r3, #0
 80096fe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009706:	4618      	mov	r0, r3
 8009708:	f7f8 fad5 	bl	8001cb6 <HAL_PCD_Start>
 800970c:	4603      	mov	r3, r0
 800970e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009710:	7bfb      	ldrb	r3, [r7, #15]
 8009712:	4618      	mov	r0, r3
 8009714:	f000 f980 	bl	8009a18 <USBD_Get_USB_Status>
 8009718:	4603      	mov	r3, r0
 800971a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800971c:	7bbb      	ldrb	r3, [r7, #14]
}
 800971e:	4618      	mov	r0, r3
 8009720:	3710      	adds	r7, #16
 8009722:	46bd      	mov	sp, r7
 8009724:	bd80      	pop	{r7, pc}

08009726 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009726:	b580      	push	{r7, lr}
 8009728:	b084      	sub	sp, #16
 800972a:	af00      	add	r7, sp, #0
 800972c:	6078      	str	r0, [r7, #4]
 800972e:	4608      	mov	r0, r1
 8009730:	4611      	mov	r1, r2
 8009732:	461a      	mov	r2, r3
 8009734:	4603      	mov	r3, r0
 8009736:	70fb      	strb	r3, [r7, #3]
 8009738:	460b      	mov	r3, r1
 800973a:	70bb      	strb	r3, [r7, #2]
 800973c:	4613      	mov	r3, r2
 800973e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009740:	2300      	movs	r3, #0
 8009742:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009744:	2300      	movs	r3, #0
 8009746:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800974e:	78bb      	ldrb	r3, [r7, #2]
 8009750:	883a      	ldrh	r2, [r7, #0]
 8009752:	78f9      	ldrb	r1, [r7, #3]
 8009754:	f7f8 fc44 	bl	8001fe0 <HAL_PCD_EP_Open>
 8009758:	4603      	mov	r3, r0
 800975a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800975c:	7bfb      	ldrb	r3, [r7, #15]
 800975e:	4618      	mov	r0, r3
 8009760:	f000 f95a 	bl	8009a18 <USBD_Get_USB_Status>
 8009764:	4603      	mov	r3, r0
 8009766:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009768:	7bbb      	ldrb	r3, [r7, #14]
}
 800976a:	4618      	mov	r0, r3
 800976c:	3710      	adds	r7, #16
 800976e:	46bd      	mov	sp, r7
 8009770:	bd80      	pop	{r7, pc}

08009772 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009772:	b580      	push	{r7, lr}
 8009774:	b084      	sub	sp, #16
 8009776:	af00      	add	r7, sp, #0
 8009778:	6078      	str	r0, [r7, #4]
 800977a:	460b      	mov	r3, r1
 800977c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800977e:	2300      	movs	r3, #0
 8009780:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009782:	2300      	movs	r3, #0
 8009784:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800978c:	78fa      	ldrb	r2, [r7, #3]
 800978e:	4611      	mov	r1, r2
 8009790:	4618      	mov	r0, r3
 8009792:	f7f8 fc8b 	bl	80020ac <HAL_PCD_EP_Close>
 8009796:	4603      	mov	r3, r0
 8009798:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800979a:	7bfb      	ldrb	r3, [r7, #15]
 800979c:	4618      	mov	r0, r3
 800979e:	f000 f93b 	bl	8009a18 <USBD_Get_USB_Status>
 80097a2:	4603      	mov	r3, r0
 80097a4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80097a6:	7bbb      	ldrb	r3, [r7, #14]
}
 80097a8:	4618      	mov	r0, r3
 80097aa:	3710      	adds	r7, #16
 80097ac:	46bd      	mov	sp, r7
 80097ae:	bd80      	pop	{r7, pc}

080097b0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80097b0:	b580      	push	{r7, lr}
 80097b2:	b084      	sub	sp, #16
 80097b4:	af00      	add	r7, sp, #0
 80097b6:	6078      	str	r0, [r7, #4]
 80097b8:	460b      	mov	r3, r1
 80097ba:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80097bc:	2300      	movs	r3, #0
 80097be:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80097c0:	2300      	movs	r3, #0
 80097c2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80097ca:	78fa      	ldrb	r2, [r7, #3]
 80097cc:	4611      	mov	r1, r2
 80097ce:	4618      	mov	r0, r3
 80097d0:	f7f8 fd4c 	bl	800226c <HAL_PCD_EP_SetStall>
 80097d4:	4603      	mov	r3, r0
 80097d6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80097d8:	7bfb      	ldrb	r3, [r7, #15]
 80097da:	4618      	mov	r0, r3
 80097dc:	f000 f91c 	bl	8009a18 <USBD_Get_USB_Status>
 80097e0:	4603      	mov	r3, r0
 80097e2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80097e4:	7bbb      	ldrb	r3, [r7, #14]
}
 80097e6:	4618      	mov	r0, r3
 80097e8:	3710      	adds	r7, #16
 80097ea:	46bd      	mov	sp, r7
 80097ec:	bd80      	pop	{r7, pc}

080097ee <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80097ee:	b580      	push	{r7, lr}
 80097f0:	b084      	sub	sp, #16
 80097f2:	af00      	add	r7, sp, #0
 80097f4:	6078      	str	r0, [r7, #4]
 80097f6:	460b      	mov	r3, r1
 80097f8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80097fa:	2300      	movs	r3, #0
 80097fc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80097fe:	2300      	movs	r3, #0
 8009800:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009808:	78fa      	ldrb	r2, [r7, #3]
 800980a:	4611      	mov	r1, r2
 800980c:	4618      	mov	r0, r3
 800980e:	f7f8 fd8d 	bl	800232c <HAL_PCD_EP_ClrStall>
 8009812:	4603      	mov	r3, r0
 8009814:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009816:	7bfb      	ldrb	r3, [r7, #15]
 8009818:	4618      	mov	r0, r3
 800981a:	f000 f8fd 	bl	8009a18 <USBD_Get_USB_Status>
 800981e:	4603      	mov	r3, r0
 8009820:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009822:	7bbb      	ldrb	r3, [r7, #14]
}
 8009824:	4618      	mov	r0, r3
 8009826:	3710      	adds	r7, #16
 8009828:	46bd      	mov	sp, r7
 800982a:	bd80      	pop	{r7, pc}

0800982c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800982c:	b480      	push	{r7}
 800982e:	b085      	sub	sp, #20
 8009830:	af00      	add	r7, sp, #0
 8009832:	6078      	str	r0, [r7, #4]
 8009834:	460b      	mov	r3, r1
 8009836:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800983e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009840:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009844:	2b00      	cmp	r3, #0
 8009846:	da0c      	bge.n	8009862 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009848:	78fb      	ldrb	r3, [r7, #3]
 800984a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800984e:	68f9      	ldr	r1, [r7, #12]
 8009850:	1c5a      	adds	r2, r3, #1
 8009852:	4613      	mov	r3, r2
 8009854:	009b      	lsls	r3, r3, #2
 8009856:	4413      	add	r3, r2
 8009858:	00db      	lsls	r3, r3, #3
 800985a:	440b      	add	r3, r1
 800985c:	3302      	adds	r3, #2
 800985e:	781b      	ldrb	r3, [r3, #0]
 8009860:	e00b      	b.n	800987a <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009862:	78fb      	ldrb	r3, [r7, #3]
 8009864:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009868:	68f9      	ldr	r1, [r7, #12]
 800986a:	4613      	mov	r3, r2
 800986c:	009b      	lsls	r3, r3, #2
 800986e:	4413      	add	r3, r2
 8009870:	00db      	lsls	r3, r3, #3
 8009872:	440b      	add	r3, r1
 8009874:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8009878:	781b      	ldrb	r3, [r3, #0]
  }
}
 800987a:	4618      	mov	r0, r3
 800987c:	3714      	adds	r7, #20
 800987e:	46bd      	mov	sp, r7
 8009880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009884:	4770      	bx	lr

08009886 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009886:	b580      	push	{r7, lr}
 8009888:	b084      	sub	sp, #16
 800988a:	af00      	add	r7, sp, #0
 800988c:	6078      	str	r0, [r7, #4]
 800988e:	460b      	mov	r3, r1
 8009890:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009892:	2300      	movs	r3, #0
 8009894:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009896:	2300      	movs	r3, #0
 8009898:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80098a0:	78fa      	ldrb	r2, [r7, #3]
 80098a2:	4611      	mov	r1, r2
 80098a4:	4618      	mov	r0, r3
 80098a6:	f7f8 fb76 	bl	8001f96 <HAL_PCD_SetAddress>
 80098aa:	4603      	mov	r3, r0
 80098ac:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80098ae:	7bfb      	ldrb	r3, [r7, #15]
 80098b0:	4618      	mov	r0, r3
 80098b2:	f000 f8b1 	bl	8009a18 <USBD_Get_USB_Status>
 80098b6:	4603      	mov	r3, r0
 80098b8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80098ba:	7bbb      	ldrb	r3, [r7, #14]
}
 80098bc:	4618      	mov	r0, r3
 80098be:	3710      	adds	r7, #16
 80098c0:	46bd      	mov	sp, r7
 80098c2:	bd80      	pop	{r7, pc}

080098c4 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80098c4:	b580      	push	{r7, lr}
 80098c6:	b086      	sub	sp, #24
 80098c8:	af00      	add	r7, sp, #0
 80098ca:	60f8      	str	r0, [r7, #12]
 80098cc:	607a      	str	r2, [r7, #4]
 80098ce:	603b      	str	r3, [r7, #0]
 80098d0:	460b      	mov	r3, r1
 80098d2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80098d4:	2300      	movs	r3, #0
 80098d6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80098d8:	2300      	movs	r3, #0
 80098da:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80098e2:	7af9      	ldrb	r1, [r7, #11]
 80098e4:	683b      	ldr	r3, [r7, #0]
 80098e6:	687a      	ldr	r2, [r7, #4]
 80098e8:	f7f8 fc7d 	bl	80021e6 <HAL_PCD_EP_Transmit>
 80098ec:	4603      	mov	r3, r0
 80098ee:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80098f0:	7dfb      	ldrb	r3, [r7, #23]
 80098f2:	4618      	mov	r0, r3
 80098f4:	f000 f890 	bl	8009a18 <USBD_Get_USB_Status>
 80098f8:	4603      	mov	r3, r0
 80098fa:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80098fc:	7dbb      	ldrb	r3, [r7, #22]
}
 80098fe:	4618      	mov	r0, r3
 8009900:	3718      	adds	r7, #24
 8009902:	46bd      	mov	sp, r7
 8009904:	bd80      	pop	{r7, pc}

08009906 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009906:	b580      	push	{r7, lr}
 8009908:	b086      	sub	sp, #24
 800990a:	af00      	add	r7, sp, #0
 800990c:	60f8      	str	r0, [r7, #12]
 800990e:	607a      	str	r2, [r7, #4]
 8009910:	603b      	str	r3, [r7, #0]
 8009912:	460b      	mov	r3, r1
 8009914:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009916:	2300      	movs	r3, #0
 8009918:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800991a:	2300      	movs	r3, #0
 800991c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009924:	7af9      	ldrb	r1, [r7, #11]
 8009926:	683b      	ldr	r3, [r7, #0]
 8009928:	687a      	ldr	r2, [r7, #4]
 800992a:	f7f8 fc07 	bl	800213c <HAL_PCD_EP_Receive>
 800992e:	4603      	mov	r3, r0
 8009930:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009932:	7dfb      	ldrb	r3, [r7, #23]
 8009934:	4618      	mov	r0, r3
 8009936:	f000 f86f 	bl	8009a18 <USBD_Get_USB_Status>
 800993a:	4603      	mov	r3, r0
 800993c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800993e:	7dbb      	ldrb	r3, [r7, #22]
}
 8009940:	4618      	mov	r0, r3
 8009942:	3718      	adds	r7, #24
 8009944:	46bd      	mov	sp, r7
 8009946:	bd80      	pop	{r7, pc}

08009948 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009948:	b580      	push	{r7, lr}
 800994a:	b082      	sub	sp, #8
 800994c:	af00      	add	r7, sp, #0
 800994e:	6078      	str	r0, [r7, #4]
 8009950:	460b      	mov	r3, r1
 8009952:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800995a:	78fa      	ldrb	r2, [r7, #3]
 800995c:	4611      	mov	r1, r2
 800995e:	4618      	mov	r0, r3
 8009960:	f7f8 fc29 	bl	80021b6 <HAL_PCD_EP_GetRxCount>
 8009964:	4603      	mov	r3, r0
}
 8009966:	4618      	mov	r0, r3
 8009968:	3708      	adds	r7, #8
 800996a:	46bd      	mov	sp, r7
 800996c:	bd80      	pop	{r7, pc}
	...

08009970 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009970:	b580      	push	{r7, lr}
 8009972:	b082      	sub	sp, #8
 8009974:	af00      	add	r7, sp, #0
 8009976:	6078      	str	r0, [r7, #4]
 8009978:	460b      	mov	r3, r1
 800997a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800997c:	78fb      	ldrb	r3, [r7, #3]
 800997e:	2b00      	cmp	r3, #0
 8009980:	d002      	beq.n	8009988 <HAL_PCDEx_LPM_Callback+0x18>
 8009982:	2b01      	cmp	r3, #1
 8009984:	d013      	beq.n	80099ae <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 8009986:	e023      	b.n	80099d0 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	699b      	ldr	r3, [r3, #24]
 800998c:	2b00      	cmp	r3, #0
 800998e:	d007      	beq.n	80099a0 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8009990:	f000 f83c 	bl	8009a0c <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009994:	4b10      	ldr	r3, [pc, #64]	; (80099d8 <HAL_PCDEx_LPM_Callback+0x68>)
 8009996:	691b      	ldr	r3, [r3, #16]
 8009998:	4a0f      	ldr	r2, [pc, #60]	; (80099d8 <HAL_PCDEx_LPM_Callback+0x68>)
 800999a:	f023 0306 	bic.w	r3, r3, #6
 800999e:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 80099a6:	4618      	mov	r0, r3
 80099a8:	f7fe fcce 	bl	8008348 <USBD_LL_Resume>
    break;
 80099ac:	e010      	b.n	80099d0 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 80099b4:	4618      	mov	r0, r3
 80099b6:	f7fe fcb2 	bl	800831e <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	699b      	ldr	r3, [r3, #24]
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d005      	beq.n	80099ce <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80099c2:	4b05      	ldr	r3, [pc, #20]	; (80099d8 <HAL_PCDEx_LPM_Callback+0x68>)
 80099c4:	691b      	ldr	r3, [r3, #16]
 80099c6:	4a04      	ldr	r2, [pc, #16]	; (80099d8 <HAL_PCDEx_LPM_Callback+0x68>)
 80099c8:	f043 0306 	orr.w	r3, r3, #6
 80099cc:	6113      	str	r3, [r2, #16]
    break;
 80099ce:	bf00      	nop
}
 80099d0:	bf00      	nop
 80099d2:	3708      	adds	r7, #8
 80099d4:	46bd      	mov	sp, r7
 80099d6:	bd80      	pop	{r7, pc}
 80099d8:	e000ed00 	.word	0xe000ed00

080099dc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80099dc:	b480      	push	{r7}
 80099de:	b083      	sub	sp, #12
 80099e0:	af00      	add	r7, sp, #0
 80099e2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80099e4:	4b03      	ldr	r3, [pc, #12]	; (80099f4 <USBD_static_malloc+0x18>)
}
 80099e6:	4618      	mov	r0, r3
 80099e8:	370c      	adds	r7, #12
 80099ea:	46bd      	mov	sp, r7
 80099ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f0:	4770      	bx	lr
 80099f2:	bf00      	nop
 80099f4:	200001f8 	.word	0x200001f8

080099f8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80099f8:	b480      	push	{r7}
 80099fa:	b083      	sub	sp, #12
 80099fc:	af00      	add	r7, sp, #0
 80099fe:	6078      	str	r0, [r7, #4]

}
 8009a00:	bf00      	nop
 8009a02:	370c      	adds	r7, #12
 8009a04:	46bd      	mov	sp, r7
 8009a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a0a:	4770      	bx	lr

08009a0c <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8009a0c:	b580      	push	{r7, lr}
 8009a0e:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8009a10:	f7f6 fcd2 	bl	80003b8 <SystemClock_Config>
}
 8009a14:	bf00      	nop
 8009a16:	bd80      	pop	{r7, pc}

08009a18 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009a18:	b480      	push	{r7}
 8009a1a:	b085      	sub	sp, #20
 8009a1c:	af00      	add	r7, sp, #0
 8009a1e:	4603      	mov	r3, r0
 8009a20:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a22:	2300      	movs	r3, #0
 8009a24:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009a26:	79fb      	ldrb	r3, [r7, #7]
 8009a28:	2b03      	cmp	r3, #3
 8009a2a:	d817      	bhi.n	8009a5c <USBD_Get_USB_Status+0x44>
 8009a2c:	a201      	add	r2, pc, #4	; (adr r2, 8009a34 <USBD_Get_USB_Status+0x1c>)
 8009a2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a32:	bf00      	nop
 8009a34:	08009a45 	.word	0x08009a45
 8009a38:	08009a4b 	.word	0x08009a4b
 8009a3c:	08009a51 	.word	0x08009a51
 8009a40:	08009a57 	.word	0x08009a57
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009a44:	2300      	movs	r3, #0
 8009a46:	73fb      	strb	r3, [r7, #15]
    break;
 8009a48:	e00b      	b.n	8009a62 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009a4a:	2303      	movs	r3, #3
 8009a4c:	73fb      	strb	r3, [r7, #15]
    break;
 8009a4e:	e008      	b.n	8009a62 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009a50:	2301      	movs	r3, #1
 8009a52:	73fb      	strb	r3, [r7, #15]
    break;
 8009a54:	e005      	b.n	8009a62 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009a56:	2303      	movs	r3, #3
 8009a58:	73fb      	strb	r3, [r7, #15]
    break;
 8009a5a:	e002      	b.n	8009a62 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009a5c:	2303      	movs	r3, #3
 8009a5e:	73fb      	strb	r3, [r7, #15]
    break;
 8009a60:	bf00      	nop
  }
  return usb_status;
 8009a62:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a64:	4618      	mov	r0, r3
 8009a66:	3714      	adds	r7, #20
 8009a68:	46bd      	mov	sp, r7
 8009a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a6e:	4770      	bx	lr

08009a70 <__libc_init_array>:
 8009a70:	b570      	push	{r4, r5, r6, lr}
 8009a72:	4e0d      	ldr	r6, [pc, #52]	; (8009aa8 <__libc_init_array+0x38>)
 8009a74:	4c0d      	ldr	r4, [pc, #52]	; (8009aac <__libc_init_array+0x3c>)
 8009a76:	1ba4      	subs	r4, r4, r6
 8009a78:	10a4      	asrs	r4, r4, #2
 8009a7a:	2500      	movs	r5, #0
 8009a7c:	42a5      	cmp	r5, r4
 8009a7e:	d109      	bne.n	8009a94 <__libc_init_array+0x24>
 8009a80:	4e0b      	ldr	r6, [pc, #44]	; (8009ab0 <__libc_init_array+0x40>)
 8009a82:	4c0c      	ldr	r4, [pc, #48]	; (8009ab4 <__libc_init_array+0x44>)
 8009a84:	f000 f82c 	bl	8009ae0 <_init>
 8009a88:	1ba4      	subs	r4, r4, r6
 8009a8a:	10a4      	asrs	r4, r4, #2
 8009a8c:	2500      	movs	r5, #0
 8009a8e:	42a5      	cmp	r5, r4
 8009a90:	d105      	bne.n	8009a9e <__libc_init_array+0x2e>
 8009a92:	bd70      	pop	{r4, r5, r6, pc}
 8009a94:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009a98:	4798      	blx	r3
 8009a9a:	3501      	adds	r5, #1
 8009a9c:	e7ee      	b.n	8009a7c <__libc_init_array+0xc>
 8009a9e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009aa2:	4798      	blx	r3
 8009aa4:	3501      	adds	r5, #1
 8009aa6:	e7f2      	b.n	8009a8e <__libc_init_array+0x1e>
 8009aa8:	08009b50 	.word	0x08009b50
 8009aac:	08009b50 	.word	0x08009b50
 8009ab0:	08009b50 	.word	0x08009b50
 8009ab4:	08009b54 	.word	0x08009b54

08009ab8 <memcpy>:
 8009ab8:	b510      	push	{r4, lr}
 8009aba:	1e43      	subs	r3, r0, #1
 8009abc:	440a      	add	r2, r1
 8009abe:	4291      	cmp	r1, r2
 8009ac0:	d100      	bne.n	8009ac4 <memcpy+0xc>
 8009ac2:	bd10      	pop	{r4, pc}
 8009ac4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009ac8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009acc:	e7f7      	b.n	8009abe <memcpy+0x6>

08009ace <memset>:
 8009ace:	4402      	add	r2, r0
 8009ad0:	4603      	mov	r3, r0
 8009ad2:	4293      	cmp	r3, r2
 8009ad4:	d100      	bne.n	8009ad8 <memset+0xa>
 8009ad6:	4770      	bx	lr
 8009ad8:	f803 1b01 	strb.w	r1, [r3], #1
 8009adc:	e7f9      	b.n	8009ad2 <memset+0x4>
	...

08009ae0 <_init>:
 8009ae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ae2:	bf00      	nop
 8009ae4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ae6:	bc08      	pop	{r3}
 8009ae8:	469e      	mov	lr, r3
 8009aea:	4770      	bx	lr

08009aec <_fini>:
 8009aec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009aee:	bf00      	nop
 8009af0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009af2:	bc08      	pop	{r3}
 8009af4:	469e      	mov	lr, r3
 8009af6:	4770      	bx	lr
